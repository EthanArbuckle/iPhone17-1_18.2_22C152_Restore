void sub_1BAE64B28(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void (*a17)(void, char *, void, void))
{
  uint64_t v17;
  std::__shared_weak_count *v19;

  if (a17) {
    a17(0, &a13, 0, 0);
  }
  v19 = *(std::__shared_weak_count **)(v17 - 40);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAE64AF8);
}

double AMCP::IOContext::get_actual_sample_rate(AMCP::IOContext *this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  v2 = (std::__shared_weak_count *)*((void *)this + 3);
  double v3 = 48000.0;
  if (v2)
  {
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = (AMCP::Core::Core *)*((void *)this + 2);
      if (v6)
      {
        strcpy(buf, "trsabolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        v7 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<double,std::enable_if<true,void>>(v6, (const AMCP::Address *)buf);
        if (!v8)
        {
          AMCP::Log::Scope_Registry::get(v7);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v10 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            v11 = pthread_self();
            mach_port_t v12 = pthread_mach_thread_np(v11);
            char v14 = 4;
            strcpy((char *)__p, "asrt");
            *(_DWORD *)buf = 67110658;
            *(_DWORD *)&buf[4] = v12;
            *(_WORD *)&buf[8] = 2080;
            *(void *)&buf[10] = "Core.h";
            __int16 v16 = 1024;
            int v17 = 391;
            __int16 v18 = 2080;
            v19 = "optional_value.operator BOOL() == true";
            __int16 v20 = 2080;
            v21 = __p;
            __int16 v22 = 1024;
            int v23 = 1735159650;
            __int16 v24 = 1024;
            int v25 = 0;
            _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
            if (v14 < 0) {
              operator delete(__p[0]);
            }
          }
          abort();
        }
        double v3 = *(double *)&v7;
      }
      else
      {
        double v3 = 48000.0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  return v3;
}

void sub_1BAE64D3C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

unint64_t AMCP::IOContext::get_latency(AMCP::IOContext *this)
{
  v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  double v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5) {
    unint64_t simple_required = AMCP::Core::Core::get_simple_required_property<1819569763u>(v5, 1735159650);
  }
  else {
    unint64_t simple_required = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return simple_required;
}

unint64_t AMCP::IOContext::get_tail_time(AMCP::IOContext *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  double v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5)
  {
    strcpy(buf, "liatbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    unint64_t v6 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if (!HIDWORD(v6))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v9 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        char v13 = 4;
        strcpy((char *)__p, "tail");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v11;
        *(_WORD *)&buf[8] = 2080;
        *(void *)&buf[10] = "Core.h";
        __int16 v15 = 1024;
        int v16 = 391;
        __int16 v17 = 2080;
        __int16 v18 = "optional_value.operator BOOL() == true";
        __int16 v19 = 2080;
        __int16 v20 = __p;
        __int16 v21 = 1024;
        int v22 = 1735159650;
        __int16 v23 = 1024;
        int v24 = 0;
        _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
      }
      abort();
    }
    unint64_t v7 = v6;
  }
  else
  {
    unint64_t v7 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v7;
}

void sub_1BAE64F60(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AMCP::IOContext::get_os_workgroup_handle(AMCP::IOContext *this@<X0>, uint64_t a2@<X8>)
{
  v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_6;
  }
  v5 = std::__shared_weak_count::lock(v4);
  if (!v5 || (unint64_t v6 = (AMCP::Core::Core *)*((void *)this + 2)) == 0)
  {
LABEL_6:
    uint64_t v7 = MEMORY[0x1E4FB7EA8] + 16;
    *(void *)(a2 + 56) = 0;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 8) = 0u;
    *(void *)a2 = v7;
    if (!v5) {
      return;
    }
    goto LABEL_7;
  }
  AMCP::Core::Core::get_simple_required_property<2003267184u>(a2, v6);
LABEL_7:

  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

uint64_t AMCP::IOContext::set_os_workgroup_handle(AMCP::IOContext *this, const caulk::mach::os_workgroup_interval_managed *a2)
{
  double v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      unint64_t v6 = v5;
      uint64_t v7 = (int8x8_t *)*((void *)this + 2);
      if (!v7) {
        goto LABEL_15;
      }
      uint64_t v14 = 0x676C6F6277676E70;
      int v15 = 0;
      if (!AMCP::Core::Core::is_property_settable(v7, (const AMCP::Address *)&v14)) {
        goto LABEL_15;
      }
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v18, v7, (unsigned int *)&v14);
      char v8 = v18;
      if (v18)
      {
        unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<void ()(caulk::mach::os_workgroup_interval_managed const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
        {
          AMCP::Core::Operation::call_function<void,caulk::mach::os_workgroup_interval_managed const&>(v8, (uint64_t)a2);
          char v10 = 0;
          goto LABEL_12;
        }
        unint64_t v12 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v12))
        {
          uint64_t v17 = 0;
          memset(v16, 0, sizeof(v16));
          AMCP::Implementation::Outboard_Storage<caulk::mach::os_workgroup_interval_managed>::construct<caulk::mach::os_workgroup_interval_managed&>((uint64_t)v16);
        }
      }
      char v10 = 1;
LABEL_12:
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      if ((v10 & 1) == 0)
      {
        uint64_t v11 = 1;
        goto LABEL_16;
      }
LABEL_15:
      uint64_t v11 = 0;
LABEL_16:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      return v11;
    }
  }
  return 0;
}

void sub_1BAE6515C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(void, char *, void, void))
{
  if (a15) {
    a15(0, &a11, 0, 0);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v15 - 40);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAE6512CLL);
}

uint64_t AMCP::IOContext::handle_overload_with_catchup_mode(AMCP::IOContext *this, char a2)
{
  char v13 = a2;
  double v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      unint64_t v6 = v5;
      uint64_t v7 = (int8x8_t *)*((void *)this + 2);
      if (v7)
      {
        uint64_t v18 = 0x676C6F62686F636DLL;
        int v19 = 0;
        if (AMCP::Core::Core::is_property_settable(v7, (const AMCP::Address *)&v18))
        {
          AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v16, v7, (unsigned int *)&v18);
          char v8 = v16;
          if (v16)
          {
            unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
            if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
            {
              AMCP::Core::Operation::call_function<void,BOOL const&>(v8, (uint64_t)&v13);
LABEL_8:
              if (v17) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v17);
              }
              uint64_t v10 = 1;
              goto LABEL_18;
            }
            unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
            if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v11))
            {
              memset(v14, 0, sizeof(v14));
              LOBYTE(v14[0]) = a2;
              uint64_t v15 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
              AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v14);
              if (v15) {
                v15(0, (uint64_t)v14, 0, 0);
              }
              goto LABEL_8;
            }
          }
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
        }
      }
      uint64_t v10 = 0;
LABEL_18:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      return v10;
    }
  }
  return 0;
}

void sub_1BAE652F8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(void, char *, void, void), uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a15) {
    a15(0, &a11, 0, 0);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAE652D0);
}

uint64_t AMCP::IOContext::will_handle_overload_with_catchup_mode(AMCP::IOContext *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2 && (double v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v4 = v3;
    v5 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v5)
    {
      strcpy(buf, "mcohbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      unint64_t v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
      if ((unsigned __int16)v6 <= 0xFFu)
      {
        AMCP::Log::Scope_Registry::get(v6);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        unint64_t v9 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          uint64_t v10 = pthread_self();
          mach_port_t v11 = pthread_mach_thread_np(v10);
          char v13 = 4;
          strcpy((char *)__p, "hocm");
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&buf[4] = v11;
          *(_WORD *)&buf[8] = 2080;
          *(void *)&buf[10] = "Core.h";
          __int16 v15 = 1024;
          int v16 = 391;
          __int16 v17 = 2080;
          uint64_t v18 = "optional_value.operator BOOL() == true";
          __int16 v19 = 2080;
          __int16 v20 = __p;
          __int16 v21 = 1024;
          int v22 = 1735159650;
          __int16 v23 = 1024;
          int v24 = 0;
          _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
        abort();
      }
      BOOL v7 = v6 != 0;
    }
    else
    {
      BOOL v7 = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    BOOL v7 = 0;
  }
  return v7 | 0x100u;
}

void sub_1BAE65504(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::IOContext::set_should_resume_after_config_change(AMCP::IOContext *this, char a2)
{
  char v13 = a2;
  double v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      unint64_t v6 = v5;
      BOOL v7 = (int8x8_t *)*((void *)this + 2);
      if (v7)
      {
        uint64_t v18 = 0x676C6F62696F7372;
        int v19 = 0;
        if (AMCP::Core::Core::is_property_settable(v7, (const AMCP::Address *)&v18))
        {
          AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v16, v7, (unsigned int *)&v18);
          char v8 = v16;
          if (v16)
          {
            unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
            if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
            {
              AMCP::Core::Operation::call_function<void,BOOL const&>(v8, (uint64_t)&v13);
LABEL_8:
              if (v17) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v17);
              }
              uint64_t v10 = 1;
              goto LABEL_18;
            }
            unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
            if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v11))
            {
              memset(v14, 0, sizeof(v14));
              LOBYTE(v14[0]) = a2;
              __int16 v15 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
              AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v14);
              if (v15) {
                v15(0, (uint64_t)v14, 0, 0);
              }
              goto LABEL_8;
            }
          }
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
        }
      }
      uint64_t v10 = 0;
LABEL_18:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      return v10;
    }
  }
  return 0;
}

void sub_1BAE65664(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(void, char *, void, void), uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a15) {
    a15(0, &a11, 0, 0);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAE6563CLL);
}

BOOL AMCP::IOContext::get_should_resume_after_config_change(AMCP::IOContext *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  double v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5)
  {
    strcpy(buf, "rsoibolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    unint64_t v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if ((unsigned __int16)v6 <= 0xFFu)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      unint64_t v9 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        char v13 = 4;
        strcpy((char *)__p, "iosr");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v11;
        *(_WORD *)&buf[8] = 2080;
        *(void *)&buf[10] = "Core.h";
        __int16 v15 = 1024;
        int v16 = 391;
        __int16 v17 = 2080;
        uint64_t v18 = "optional_value.operator BOOL() == true";
        __int16 v19 = 2080;
        __int16 v20 = __p;
        __int16 v21 = 1024;
        int v22 = 1735159650;
        __int16 v23 = 1024;
        int v24 = 0;
        _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
      }
      abort();
    }
    BOOL v7 = v6 != 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v7;
}

void sub_1BAE65870(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::IOContext::can_play_during_notification_wake(AMCP::IOContext *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2 && (double v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v4 = v3;
    v5 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v5)
    {
      strcpy(buf, "wndpbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      unint64_t v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
      if ((unsigned __int16)v6 <= 0xFFu)
      {
        AMCP::Log::Scope_Registry::get(v6);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        unint64_t v9 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          uint64_t v10 = pthread_self();
          mach_port_t v11 = pthread_mach_thread_np(v10);
          char v13 = 4;
          strcpy((char *)__p, "pdnw");
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&buf[4] = v11;
          *(_WORD *)&buf[8] = 2080;
          *(void *)&buf[10] = "Core.h";
          __int16 v15 = 1024;
          int v16 = 391;
          __int16 v17 = 2080;
          uint64_t v18 = "optional_value.operator BOOL() == true";
          __int16 v19 = 2080;
          __int16 v20 = __p;
          __int16 v21 = 1024;
          int v22 = 1735159650;
          __int16 v23 = 1024;
          int v24 = 0;
          _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
        abort();
      }
      BOOL v7 = v6 != 0;
    }
    else
    {
      BOOL v7 = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    BOOL v7 = 0;
  }
  return v7 | 0x100u;
}

void sub_1BAE65A34(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::IOContext::set_can_play_during_notification_wake(AMCP::IOContext *this, char a2)
{
  char v9 = a2;
  double v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v3) {
    return 0;
  }
  v4 = std::__shared_weak_count::lock(v3);
  if (!v4) {
    return 0;
  }
  v5 = v4;
  unint64_t v6 = (int8x8_t *)*((void *)this + 2);
  if (v6) {
    uint64_t v7 = AMCP::Core::Core::set_simple_property_value<1885630071u>(v6, &v9);
  }
  else {
    uint64_t v7 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  return v7;
}

uint64_t AMCP::IOContext::can_play_during_dark_wake(AMCP::IOContext *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2 && (double v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v4 = v3;
    v5 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v5)
    {
      strcpy(buf, "wddpbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      unint64_t v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
      if ((unsigned __int16)v6 <= 0xFFu)
      {
        AMCP::Log::Scope_Registry::get(v6);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        char v9 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          uint64_t v10 = pthread_self();
          mach_port_t v11 = pthread_mach_thread_np(v10);
          char v13 = 4;
          strcpy((char *)__p, "pddw");
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&buf[4] = v11;
          *(_WORD *)&buf[8] = 2080;
          *(void *)&buf[10] = "Core.h";
          __int16 v15 = 1024;
          int v16 = 391;
          __int16 v17 = 2080;
          uint64_t v18 = "optional_value.operator BOOL() == true";
          __int16 v19 = 2080;
          __int16 v20 = __p;
          __int16 v21 = 1024;
          int v22 = 1735159650;
          __int16 v23 = 1024;
          int v24 = 0;
          _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
        abort();
      }
      BOOL v7 = v6 != 0;
    }
    else
    {
      BOOL v7 = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    BOOL v7 = 0;
  }
  return v7 | 0x100u;
}

void sub_1BAE65C68(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::IOContext::set_can_play_during_dark_wake(AMCP::IOContext *this, char a2)
{
  char v9 = a2;
  double v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v3) {
    return 0;
  }
  v4 = std::__shared_weak_count::lock(v3);
  if (!v4) {
    return 0;
  }
  v5 = v4;
  unint64_t v6 = (int8x8_t *)*((void *)this + 2);
  if (v6) {
    uint64_t v7 = AMCP::Core::Core::set_simple_property_value<1885627511u>(v6, &v9);
  }
  else {
    uint64_t v7 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  return v7;
}

uint64_t AMCP::IOContext::sleeping_is_allowed(AMCP::IOContext *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2 && (double v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v4 = v3;
    v5 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v5)
    {
      strcpy(buf, "ailsbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      unint64_t v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
      if ((unsigned __int16)v6 <= 0xFFu)
      {
        AMCP::Log::Scope_Registry::get(v6);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        char v9 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          uint64_t v10 = pthread_self();
          mach_port_t v11 = pthread_mach_thread_np(v10);
          char v13 = 4;
          strcpy((char *)__p, "slia");
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&buf[4] = v11;
          *(_WORD *)&buf[8] = 2080;
          *(void *)&buf[10] = "Core.h";
          __int16 v15 = 1024;
          int v16 = 391;
          __int16 v17 = 2080;
          uint64_t v18 = "optional_value.operator BOOL() == true";
          __int16 v19 = 2080;
          __int16 v20 = __p;
          __int16 v21 = 1024;
          int v22 = 1735159650;
          __int16 v23 = 1024;
          int v24 = 0;
          _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
        abort();
      }
      BOOL v7 = v6 != 0;
    }
    else
    {
      BOOL v7 = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    BOOL v7 = 0;
  }
  return v7 | 0x100u;
}

void sub_1BAE65E9C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::IOContext::set_sleeping_is_allowed(AMCP::IOContext *this, char a2)
{
  char v9 = a2;
  double v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v3) {
    return 0;
  }
  v4 = std::__shared_weak_count::lock(v3);
  if (!v4) {
    return 0;
  }
  v5 = v4;
  unint64_t v6 = (int8x8_t *)*((void *)this + 2);
  if (v6) {
    uint64_t v7 = AMCP::Core::Core::set_simple_property_value<1936484705u>(v6, &v9);
  }
  else {
    uint64_t v7 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  return v7;
}

void HALB_CaptureFile::TimeStampMessage::perform(HALB_CaptureFile::TimeStampMessage *this)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 12);
  if ((*(_DWORD *)(v1 + 2152) - 2) >= 3)
  {
    int v3 = *((_DWORD *)this + 4);
    switch(v3)
    {
      case 2:
        unint64_t v12 = *(std::__shared_weak_count_vtbl **)(v1 + 2096);
        uint64_t v13 = *(void *)(v1 + 2104);
        if (v12 != (std::__shared_weak_count_vtbl *)v13)
        {
          uint64_t v14 = (std::__shared_weak_count *)operator new(0x30uLL);
          v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147D928;
          v14->__shared_owners_ = 0;
          v14->__shared_weak_owners_ = 0;
          v14[1].__vftable = v12;
          *(void *)(v1 + 2096) = 0;
          v14[1].__shared_owners_ = v13;
          *(void *)(v1 + 2104) = 0;
          v14[1].__shared_weak_owners_ = *(void *)(v1 + 2112);
          *(void *)(v1 + 2112) = 0;
          __int16 v15 = (std::__shared_weak_count *)operator new(0x818uLL);
          v15->__shared_owners_ = 0;
          v15->__shared_weak_owners_ = 0;
          v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147D978;
          bzero(&v15[1], 0x800uLL);
          memcpy(&v15[1], (const void *)(*((void *)this + 12) + 48), 0x800uLL);
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            v41 = "HALB_CaptureFile.cpp";
            __int16 v42 = 1024;
            int v43 = 495;
            __int16 v44 = 2080;
            v45 = v15 + 1;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALB_CaptureFile::WriteTimeStampFile: writing time stamps to %s", buf, 0x1Cu);
          }
          int v16 = fopen((const char *)&v15[1], "w");
          if (v16)
          {
            v39 = v15;
            __int16 v17 = v14[1].__vftable;
            on_zero_shared = v17->__on_zero_shared;
            get_deleter = v17->__get_deleter;
            __int16 v21 = v17[1].~__shared_weak_count_0;
            __int16 v20 = v17[1].__on_zero_shared;
            fwrite("Current Sample Time\tCurrent Host Time\tIO Sample Time\tIO Host Time\tIO Frame Size\tIO Sample Diff\tIO Host Diff\tRate Scalar\tZTS Sample\tZTS Host\tZTS Sample Diff\tZTS Host Diff\tZTS Host/Frame\n", 0xB9uLL, 1uLL, v16);
            int v22 = v14[1].__vftable;
            for (uint64_t i = v14[1].__shared_owners_;
                  v22 != (std::__shared_weak_count_vtbl *)i;
                  int v22 = (std::__shared_weak_count_vtbl *)((char *)v22 + 72))
            {
              fprintf(v16, "%llu\t%llu\t%llu\t%llu\t%llu\t%llu\t%llu\t%0.5f", v22->~__shared_weak_count, v22->~__shared_weak_count_0, v22->__on_zero_shared, v22->__get_deleter, v22->__on_zero_shared_weak, (char *)v22->__on_zero_shared - (char *)on_zero_shared, (char *)v22->__get_deleter - (char *)get_deleter, *(double *)&v22[1].~__shared_weak_count);
              int v24 = v22[1].~__shared_weak_count_0;
              if (v24 == v21) {
                fputc(10, v16);
              }
              else {
                fprintf(v16, "\t%llu\t%llu\t%llu\t%llu\t%0.5f\n", v24, v22[1].__on_zero_shared, (char *)v24 - (char *)v21, (char *)v22[1].__on_zero_shared - (char *)v20, (double)(unint64_t)((char *)v22[1].__on_zero_shared - (char *)v20)/ (double)(unint64_t)((char *)v24 - (char *)v21));
              }
              on_zero_shared = v22->__on_zero_shared;
              get_deleter = v22->__get_deleter;
              __int16 v21 = v22[1].~__shared_weak_count_0;
              __int16 v20 = v22[1].__on_zero_shared;
            }
            fclose(v16);
            __int16 v15 = v39;
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
        break;
      case 1:
        uint64_t v11 = *(void *)(v1 + 2104);
        if (*(void *)(v1 + 2096) != v11) {
          *(void *)(v11 - 40) += *((void *)this + 7);
        }
        break;
      case 0:
        v4 = (_OWORD *)((char *)this + 24);
        v5 = *(char **)(v1 + 2104);
        unint64_t v6 = *(void *)(v1 + 2112);
        if ((unint64_t)v5 >= v6)
        {
          uint64_t v25 = *(char **)(v1 + 2096);
          unint64_t v26 = 0x8E38E38E38E38E39 * ((v5 - v25) >> 3) + 1;
          if (v26 > 0x38E38E38E38E38ELL) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v27 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - (void)v25) >> 3);
          if (2 * v27 > v26) {
            unint64_t v26 = 2 * v27;
          }
          if (v27 >= 0x1C71C71C71C71C7) {
            unint64_t v28 = 0x38E38E38E38E38ELL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28)
          {
            if (v28 > 0x38E38E38E38E38ELL) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            v29 = (char *)operator new(72 * v28);
          }
          else
          {
            v29 = 0;
          }
          v30 = &v29[8 * ((v5 - v25) >> 3)];
          long long v31 = *(_OWORD *)((char *)this + 72);
          *((_OWORD *)v30 + 2) = *(_OWORD *)((char *)this + 56);
          *((_OWORD *)v30 + 3) = v31;
          *((void *)v30 + 8) = *((void *)this + 11);
          long long v32 = *(_OWORD *)((char *)this + 40);
          *(_OWORD *)v30 = *v4;
          *((_OWORD *)v30 + 1) = v32;
          uint64_t v10 = v30 + 72;
          if (v5 != v25)
          {
            do
            {
              *(_OWORD *)(v30 - 72) = *(_OWORD *)(v5 - 72);
              long long v33 = *(_OWORD *)(v5 - 56);
              long long v34 = *(_OWORD *)(v5 - 40);
              long long v35 = *(_OWORD *)(v5 - 24);
              *((void *)v30 - 1) = *((void *)v5 - 1);
              *(_OWORD *)(v30 - 24) = v35;
              *(_OWORD *)(v30 - 40) = v34;
              *(_OWORD *)(v30 - 56) = v33;
              v30 -= 72;
              v5 -= 72;
            }
            while (v5 != v25);
            v5 = *(char **)(v1 + 2096);
          }
          *(void *)(v1 + 2096) = v30;
          *(void *)(v1 + 2104) = v10;
          *(void *)(v1 + 2112) = &v29[72 * v28];
          if (v5) {
            operator delete(v5);
          }
        }
        else
        {
          *(_OWORD *)v5 = *v4;
          long long v7 = *(_OWORD *)((char *)this + 40);
          long long v8 = *(_OWORD *)((char *)this + 56);
          long long v9 = *(_OWORD *)((char *)this + 72);
          *((void *)v5 + 8) = *((void *)this + 11);
          *((_OWORD *)v5 + 2) = v8;
          *((_OWORD *)v5 + 3) = v9;
          *((_OWORD *)v5 + 1) = v7;
          uint64_t v10 = v5 + 72;
        }
        *(void *)(v1 + 2104) = v10;
        break;
    }
    uint64_t v36 = *(void *)(*((void *)this + 12) + 2120);
    unsigned __int8 v37 = atomic_load((unsigned __int8 *)(v36 + 16));
    if ((v37 & 1) == 0)
    {
      HALB_AsyncMessageQueue<HALB_CaptureFile::TimeStampMessage,void>::~HALB_AsyncMessageQueue(v36);
      JUMPOUT(0x1C1859840);
    }
    v38 = *(OSQueueHead **)(v36 + 8);
    OSAtomicEnqueue(v38, this, 0x68uLL);
  }
}

void sub_1BAE6641C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAE66220);
  }
  _Unwind_Resume(exception_object);
}

void HALB_AsyncMessageQueue<HALB_CaptureFile::TimeStampMessage,void>::~HALB_AsyncMessageQueue(uint64_t a1)
{
  atomic_store(0, (unsigned __int8 *)(a1 + 16));
  ca::concurrent::details::service_thread::drain(*(ca::concurrent::details::service_thread **)a1);
  for (uint64_t i = OSAtomicDequeue(*(OSQueueHead **)(a1 + 8), 0x68uLL); i; uint64_t i = OSAtomicDequeue(*(OSQueueHead **)(a1 + 8), 0x68uLL))(*(void (**)(void *))(*(void *)i + 8))(i);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    MEMORY[0x1C1859840](v3, 0x1080C40FC6463CFLL);
  }

  ca::concurrent::messenger::~messenger((ca::concurrent::details::service_thread **)a1);
}

void std::__shared_ptr_emplace<std::array<char,2048ul>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147D978;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<std::array<char,2048ul>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147D978;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<HALB_CaptureFile::TimeStampData>>::__on_zero_shared(uint64_t a1)
{
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<std::vector<HALB_CaptureFile::TimeStampData>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147D928;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<std::vector<HALB_CaptureFile::TimeStampData>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147D928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void HALB_CaptureFile::TimeStampMessage::~TimeStampMessage(HALB_CaptureFile::TimeStampMessage *this)
{
}

uint64_t std::unique_ptr<HALB_AsyncMessageQueue<HALB_CaptureFile::TimeStampMessage,void>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    HALB_AsyncMessageQueue<HALB_CaptureFile::TimeStampMessage,void>::~HALB_AsyncMessageQueue(result);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

uint64_t caulk::concurrent::details::rt_message_call<HALB_CaptureFile::HALB_CaptureFile(HALB_CaptureFile_NameBuilder const&,AudioStreamBasicDescription const&,AudioCapturerMode)::$_1,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  v2 = *v8;
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    LODWORD(v8) = 67109634;
    HIDWORD(v8) = v4;
    *(_WORD *)long long v9 = 2080;
    *(void *)&v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Failed to allocate audio capturer.", (uint8_t *)&v8, 0x18u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAE667B4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALB_CaptureFile::HALB_CaptureFile(HALB_CaptureFile_NameBuilder const&,AudioStreamBasicDescription const&,AudioCapturerMode)::$_1,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t std::__shared_ptr_pointer<AudioCapturerIfc *,std::shared_ptr<AudioCapturerIfc>::__shared_ptr_default_delete<AudioCapturerIfc,AudioCapturerIfc>,std::allocator<AudioCapturerIfc>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI16AudioCapturerIfcE27__shared_ptr_default_deleteIS1_S1_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AudioCapturerIfc *,std::shared_ptr<AudioCapturerIfc>::__shared_ptr_default_delete<AudioCapturerIfc,AudioCapturerIfc>,std::allocator<AudioCapturerIfc>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<AudioCapturerIfc *,std::shared_ptr<AudioCapturerIfc>::__shared_ptr_default_delete<AudioCapturerIfc,AudioCapturerIfc>,std::allocator<AudioCapturerIfc>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void *___Z16NewAudioCapturer20AudioCapturerOptionsPKcS1_jPK27AudioStreamBasicDescriptionRS3__block_invoke()
{
  uint64_t result = dlopen("/usr/local/lib/libAudioDiagnostics.dylib", 5);
  if (result)
  {
    uint64_t result = dlsym(result, "NewAudioCapturerImpl");
    if (result) {
      NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction = (uint64_t (*)(void, void, void, void, void, void))result;
    }
  }
  return result;
}

_OWORD *HALB_CaptureFile::HALB_CaptureFile(_OWORD *a1, uint64_t *a2, uint64_t a3, int a4)
{
  v36[51] = *MEMORY[0x1E4F143B8];
  long long v7 = *(_OWORD *)(a3 + 16);
  uint64_t v8 = *(void *)(a3 + 32);
  *a1 = *(_OWORD *)a3;
  a1[1] = v7;
  *((void *)a1 + 4) = v8;
  *((void *)a1 + 5) = 0;
  a1[131] = 0u;
  a1[132] = 0u;
  a1[133] = 0u;
  *((void *)a1 + 268) = 0;
  *((_DWORD *)a1 + 538) = a4;
  std::string::basic_string[abi:ne180100]<0>(&v32, "HAL_");
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v33);
  HALB_CaptureFile_NameBuilder::FindAndBuild(*a2, a2[1], 0, &v33);
  HALB_CaptureFile_NameBuilder::FindAndBuild(*a2, a2[1], 1, &v33);
  HALB_CaptureFile_NameBuilder::FindAndBuild(*a2, a2[1], 2, &v33);
  HALB_CaptureFile_NameBuilder::FindAndBuild(*a2, a2[1], 5, &v33);
  HALB_CaptureFile_NameBuilder::FindAndBuild(*a2, a2[1], 6, &v33);
  HALB_CaptureFile_NameBuilder::FindAndBuild(*a2, a2[1], 4, &v33);
  HALB_CaptureFile_NameBuilder::FindAndBuild(*a2, a2[1], 3, &v33);
  HALB_CaptureFile_NameBuilder::FindAndBuild(*a2, a2[1], 7, &v33);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__dst, (uint64_t)&v33.__r_.__value_.__l.__size_);
  v33.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA418];
  *(std::string::size_type *)((char *)v33.__r_.__value_.__r.__words + *(void *)(v33.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v33.__r_.__value_.__l.__size_ = MEMORY[0x1E4FBA470] + 16;
  if (v35 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C1859700](v36);
  if ((v31 & 0x80u) == 0) {
    long long v9 = __dst;
  }
  else {
    long long v9 = (void **)__dst[0];
  }
  if ((v31 & 0x80u) == 0) {
    std::string::size_type v10 = v31;
  }
  else {
    std::string::size_type v10 = (std::string::size_type)__dst[1];
  }
  std::string::append(&v32, (const std::string::value_type *)v9, v10);
  if ((char)v31 < 0) {
    operator delete(__dst[0]);
  }
  std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  uint64_t v12 = &v32;
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    std::string::size_type size = v32.__r_.__value_.__l.__size_;
    uint64_t v12 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  for (; size; --size)
  {
    int v13 = v12->__r_.__value_.__s.__data_[0];
    if (v13 == 47 || v13 == 32) {
      v12->__r_.__value_.__s.__data_[0] = 95;
    }
    uint64_t v12 = (std::string *)((char *)v12 + 1);
  }
  unsigned int v14 = *((_DWORD *)a1 + 538) - 2;
  if (v14 > 2) {
    uint64_t v15 = 270609;
  }
  else {
    uint64_t v15 = qword_1BB033330[v14];
  }
  int v16 = &v33;
  get_audio_capture_folder(&v33);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v16 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v18 = &v32;
  }
  else {
    uint64_t v18 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once != -1) {
    dispatch_once(&NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once, &__block_literal_global_12889);
  }
  if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction)
  {
    __int16 v17 = (AMCP::Log::Scope_Registry *)NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction(v15, v16, v18, 1667327590, 0, a3);
    __int16 v19 = v17;
  }
  else
  {
    __int16 v19 = 0;
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v33.__r_.__value_.__l.__data_);
    if (v19) {
LABEL_33:
    }
      operator new();
  }
  else if (v19)
  {
    goto LABEL_33;
  }
  AMCP::Log::Scope_Registry::get(v17);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v33, "com.apple.coreaudio", "AMCP");
  __int16 v20 = *(caulk::concurrent::messenger **)(v33.__r_.__value_.__r.__words[0] + 8);
  __int16 v21 = pthread_self();
  mach_port_t v22 = pthread_mach_thread_np(v21);
  uint64_t v23 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
  *(_DWORD *)(v23 + 16) = 0;
  *(unsigned char *)(v23 + 20) = 16;
  *(_DWORD *)(v23 + 24) = v22;
  *(void *)(v23 + 32) = "HALB_CaptureFile.cpp";
  *(_DWORD *)(v23 + 40) = 221;
  *(void *)uint64_t v23 = &unk_1F147D8D0;
  *(void *)(v23 + 8) = 0;
  caulk::concurrent::messenger::enqueue(v20, (caulk::concurrent::message *)v23);
  int v24 = (AMCP::Log::Scope_Registry *)v33.__r_.__value_.__l.__size_;
  if (v33.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v33.__r_.__value_.__l.__size_);
  }
  AMCP::Log::Scope_Registry::get(v24);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v33, "com.apple.coreaudio", "AMCP");
  uint64_t v25 = (AMCP::Log::Scope_Registry *)v33.__r_.__value_.__l.__size_;
  unint64_t v26 = *(NSObject **)v33.__r_.__value_.__l.__data_;
  if (v33.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v33.__r_.__value_.__l.__size_);
  }
  AMCP::Log::Scope_Registry::get(v25);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v33, "com.apple.coreaudio", "AMCP");
  os_signpost_id_t v27 = os_signpost_id_make_with_pointer(*(os_log_t *)v33.__r_.__value_.__l.__data_, a1);
  if (v33.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v33.__r_.__value_.__l.__size_);
  }
  if (v27 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v26))
  {
    unint64_t v28 = &v32;
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v28 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    LODWORD(v33.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v33.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
    _os_signpost_emit_with_name_impl(&dword_1BAA78000, v26, OS_SIGNPOST_INTERVAL_BEGIN, v27, "AudioHAL Capture", "%{public}s", (uint8_t *)&v33, 0xCu);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1BAE6719C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  v47 = (void **)(v44 + 2096);
  v48 = *(std::__shared_weak_count **)(v44 + 2144);
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  std::unique_ptr<HALB_AsyncMessageQueue<HALB_CaptureFile::TimeStampMessage,void>>::reset[abi:ne180100](v45, 0);
  v49 = *v47;
  if (*v47)
  {
    *(void *)(v44 + 2104) = v49;
    operator delete(v49);
  }
  _Unwind_Resume(a1);
}

atomic_uint *HALB_AsyncMessageQueue<HALB_CaptureFile::TimeStampMessage,void>::QueueMessage(unsigned __int8 *a1, unint64_t *a2)
{
  unsigned __int8 v2 = atomic_load(a1 + 16);
  if ((v2 & 1) == 0) {
    return (atomic_uint *)(*(uint64_t (**)(unint64_t *))(*a2 + 8))(a2);
  }
  uint64_t v4 = *(void *)a1;
  do
  {
    unint64_t v5 = *(void *)v4;
    atomic_store(*(void *)v4, a2 + 1);
    unint64_t v6 = v5;
    atomic_compare_exchange_strong((atomic_ullong *volatile)v4, &v6, (unint64_t)a2);
  }
  while (v6 != v5);
  return ca::sync::semaphore::signal((atomic_uint *)(v4 + 144));
}

void HALB_CaptureFile::~HALB_CaptureFile(unsigned __int8 **this)
{
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  unsigned __int8 v2 = (AMCP::Log::Scope_Registry *)v10;
  os_log_type_t v3 = *v9;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  AMCP::Log::Scope_Registry::get(v2);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  os_signpost_id_t v4 = os_signpost_id_make_with_pointer(*v9, this);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
  {
    LOWORD(v9) = 0;
    _os_signpost_emit_with_name_impl(&dword_1BAA78000, v3, OS_SIGNPOST_INTERVAL_END, v4, "AudioHAL Capture", (const char *)&unk_1BB07294B, (uint8_t *)&v9, 2u);
  }
  if ((*((_DWORD *)this + 538) - 2) >= 3)
  {
    unint64_t v5 = this[265];
    if (v5)
    {
      unint64_t v6 = (unint64_t *)OSAtomicDequeue(*((OSQueueHead **)v5 + 1), 0x68uLL);
      if (v6)
      {
        *((_DWORD *)v6 + 4) = 2;
        HALB_AsyncMessageQueue<HALB_CaptureFile::TimeStampMessage,void>::QueueMessage(this[265], v6);
      }
      ca::concurrent::details::service_thread::drain(*(ca::concurrent::details::service_thread **)this[265]);
    }
  }
  long long v7 = (std::__shared_weak_count *)this[268];
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::unique_ptr<HALB_AsyncMessageQueue<HALB_CaptureFile::TimeStampMessage,void>>::reset[abi:ne180100]((uint64_t *)this + 265, 0);
  uint64_t v8 = this[262];
  if (v8)
  {
    this[263] = v8;
    operator delete(v8);
  }
}

void sub_1BAE67580(void *a1)
{
}

atomic_uint *HALB_CaptureFile::Write(atomic_uint *result, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)result + 267);
  if (v6)
  {
    uint64_t v8 = (uint64_t)result;
    atomic_uint v10 = result[6];
    atomic_uint v9 = result[7];
    v22[0] = 1;
    v22[2] = v9;
    v22[3] = v10 * a5;
    uint64_t v23 = a6;
    if (!a6)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        unint64_t v26 = "HALB_CaptureFile.cpp";
        *(_WORD *)os_signpost_id_t v27 = 1024;
        *(_DWORD *)&v27[2] = 331;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  data buffer is NULL", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 1852797029;
    }
    unsigned int v14 = (double *)(result + 532);
    if (a3)
    {
      double v15 = *((double *)result + 266);
      if (v15 != 0.0 && *a3 > v15)
      {
        double v16 = fmin(*a3 - v15, 220500.0);
        __int16 v17 = (std::__shared_weak_count *)*((void *)result + 268);
        if (v17)
        {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_uint v10 = result[6];
          atomic_uint v9 = result[7];
        }
        uint64_t v18 = v16;
        *(_DWORD *)buf = 1;
        std::vector<char>::size_type v19 = (v10 * v18);
        HIDWORD(v26) = v9;
        *(_DWORD *)os_signpost_id_t v27 = v19;
        if (v19)
        {
          std::vector<char>::vector(&v24, v19);
          *(void *)&v27[4] = v24.__begin_;
          (*(void (**)(uint64_t, uint64_t, uint8_t *, void, uint64_t))(*(void *)v6 + 96))(v6, v18, buf, 0, (uint64_t)*v14);
          if (v24.__begin_)
          {
            v24.__end_ = v24.__begin_;
            operator delete(v24.__begin_);
          }
        }
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
      }
    }
    (*(void (**)(void, uint64_t, _DWORD *, void, uint64_t))(**(void **)(v8 + 2136) + 96))(*(void *)(v8 + 2136), a5, v22, 0, (uint64_t)*(double *)(v8 + 2128));
    if (a3) {
      __int16 v20 = a3;
    }
    else {
      __int16 v20 = (double *)(v8 + 2128);
    }
    *(double *)(v8 + 2128) = *v20 + (double)a5;
    return HALB_CaptureFile::WriteTimestamps(v8, a2, (uint64_t)a3, a4, a5);
  }
  return result;
}

void sub_1BAE677F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (a2)
  {
    if (__p) {
      operator delete(__p);
    }
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAE67730);
  }
  _Unwind_Resume(exception_object);
}

atomic_uint *HALB_CaptureFile::WriteTimestamps(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = *(atomic_uint **)(a1 + 2136);
  if (!result) {
    return result;
  }
  unsigned int v7 = a5;
  double v10 = 0.0;
  if (a2)
  {
    double v11 = *(double *)a2;
    uint64_t v12 = *(void *)(a2 + 8);
    if (a4)
    {
LABEL_4:
      double v10 = *(double *)a4;
      uint64_t v13 = *(void *)(a4 + 8);
      uint64_t v14 = *(void *)(a4 + 16);
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v12 = 0;
    double v11 = 0.0;
    if (a4) {
      goto LABEL_4;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
LABEL_7:
  if ((*(_DWORD *)(a1 + 2152) - 2) > 2)
  {
    uint64_t v15 = *(void *)(a1 + 2120);
    if (v15)
    {
      uint64_t result = (atomic_uint *)OSAtomicDequeue(*(OSQueueHead **)(v15 + 8), 0x68uLL);
      if (result)
      {
        if (a3)
        {
          result[4] = 0;
          *((void *)result + 3) = (unint64_t)v11;
          *((void *)result + 4) = v12;
          uint64_t v16 = *(void *)(a3 + 8);
          *((void *)result + 5) = (unint64_t)*(double *)a3;
          *((void *)result + 6) = v16;
          *((void *)result + 7) = v7;
          *((void *)result + 8) = *(void *)(a3 + 16);
          *((void *)result + 9) = (unint64_t)v10;
          *((void *)result + 10) = v13;
          *((void *)result + 11) = v14;
        }
        else
        {
          if (a2) {
            return result;
          }
          result[4] = 1;
          *((void *)result + 7) = v7;
        }
        return HALB_AsyncMessageQueue<HALB_CaptureFile::TimeStampMessage,void>::QueueMessage(*(unsigned __int8 **)(a1 + 2120), (unint64_t *)result);
      }
    }
  }
  else if (a3)
  {
    return (atomic_uint *)(*(uint64_t (**)(atomic_uint *, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, double, uint64_t, uint64_t, _BYTE))(*(void *)result + 128))(result, v12, (uint64_t)v11, a5, (uint64_t)*(double *)a3, *(void *)(a3 + 8), a5, (uint64_t)v10, *(double *)(a3 + 16), v13, v14, 0);
  }
  return result;
}

void sub_1BAE679C4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void non-virtual thunk to'HALS_IOUADevice::~HALS_IOUADevice(HALS_IOUADevice *this)
{
  HALS_IOUADevice::~HALS_IOUADevice((HALS_IOUADevice *)((char *)this - 1304));

  JUMPOUT(0x1C1859840);
}

{
  HALS_IOUADevice::~HALS_IOUADevice((HALS_IOUADevice *)((char *)this - 1304));
}

void HALS_IOUADevice::~HALS_IOUADevice(HALS_IOUADevice *this)
{
  *(void *)this = &unk_1F147D9D8;
  unsigned __int8 v2 = (HALS_IOUADevice *)((char *)this + 1304);
  *((void *)this + 163) = &unk_1F147DDA0;
  uint64_t v3 = *((void *)this + 178);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    HALS_ObjectMap::ObjectIsDead(*((HALS_ObjectMap **)this + 178), v4);
    *((void *)this + 178) = 0;
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_IOUADevice *)((char *)this + 1432));
  uint64_t v6 = (void *)*((void *)this + 175);
  if (v6)
  {
    *((void *)this + 176) = v6;
    operator delete(v6);
  }
  for (uint64_t i = 0; i != -48; i -= 24)
  {
    uint64_t v8 = *(void **)((char *)this + i + 1376);
    if (v8)
    {
      *(void *)((char *)this + i + 1384) = v8;
      operator delete(v8);
    }
  }
  HALS_IOUAObject::~HALS_IOUAObject(v2, v5);

  HALS_Device::~HALS_Device(this);
}

{
  uint64_t vars8;

  HALS_IOUADevice::~HALS_IOUADevice(this);

  JUMPOUT(0x1C1859840);
}

uint64_t HALS_IOUADevice::PerformNonDriverConfigChange(HALS_IOUADevice *this, BOOL a2, int a3)
{
  long long v4 = 0uLL;
  char v5 = 0;
  return HALS_IOUADevice::HandleConfigurationChangeRequest((uint64_t)this, &v4, a3);
}

uint64_t HALS_IOUADevice::HandleConfigurationChangeRequest(uint64_t a1, long long *a2, int a3)
{
  uint64_t v10 = 0;
  double v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___ZN15HALS_IOUADevice32HandleConfigurationChangeRequestENS_19ConfigChangePayloadEbj_block_invoke;
  v6[3] = &unk_1E62353D0;
  long long v7 = *a2;
  uint64_t v8 = *((void *)a2 + 2);
  v6[4] = &v10;
  v6[5] = a1;
  int v9 = a3;
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(a1 + 1464));
  if (v3) {
    atomic_store(1u, (unsigned __int8 *)(a1 + 1465));
  }
  dispatch_async(*(dispatch_queue_t *)(a1 + 1432), v6);
  uint64_t v4 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v4;
}

uint64_t ___ZN15HALS_IOUADevice32HandleConfigurationChangeRequestENS_19ConfigChangePayloadEbj_block_invoke(uint64_t a1)
{
  v148[29] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(unsigned int **)(a1 + 40);
  kdebug_trace();
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "HALS_IOUADevice.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1273;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v1 + 39;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUADevice::HandleConfigurationChangeRequest: %s  --->", buf, 0x1Cu);
  }
  *(_OWORD *)v106 = 0u;
  long long v107 = 0u;
  v104 = 0;
  uint64_t v105 = 0;
  v103 = 0;
  v87 = (HALS_Device *)v1;
  unsigned __int8 v3 = (HALS_NotificationManager *)v1[4];
  strcpy(buf, "bgfcbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  HALS_NotificationManager::PropertiesChanged_Sync(v3, 0, 1u, (const AudioObjectPropertyAddress *)buf, v2);
  v100 = 0;
  v101 = 0;
  uint64_t v102 = 0;
  v99[0] = 0;
  v99[1] = 0;
  HALS_System::GetInstance(buf, 0, v99);
  uint64_t v4 = *(void *)buf;
  char v5 = (const void *)(*(uint64_t (**)(HALS_Device *))(*(void *)v87 + 200))(v87);
  uint64_t v6 = v5;
  if (v5) {
    CFRetain(v5);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v6);
  HALS_System::GetRawDeviceListUsingClockDevice(v4, (uint64_t)&v100, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v7 = *((void *)v87 + 178);
  v95 = 0;
  v96 = 0;
  uint64_t v97 = 0;
  if (v7) {
    (*(void (**)(uint64_t, void **))(*(void *)v7 + 216))(v7, &v95);
  }
  HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)v92);
  HALS_DeviceState::Capture((HALS_DeviceState *)v92, v87, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
  int v8 = *(unsigned __int8 *)(a1 + 64);
  BOOL v9 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v9)
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALS_IOUADevice.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1306;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = (char *)v87 + 156;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUADevice::HandleConfigurationChangeRequest: %s  --- calling driver", buf, 0x1Cu);
    }
    kdebug_trace();
    uint64_t v10 = *((void *)v87 + 164);
    uint64_t v11 = *(void *)(v10 + 792);
    uint64_t v12 = *(std::__shared_weak_count **)(v10 + 800);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v13 = (AMCP::Log::Scope_Registry *)HALS_IOUAUCDriver::perform_config_change((HALS_IOUAUCDriver *)*(unsigned int *)(v11 + 4), *((_DWORD *)v87 + 330), *(void *)(a1 + 48), *(void *)(a1 + 56));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v13;
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      AMCP::Log::Scope_Registry::get(v13);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v14 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v82 = pthread_self();
        mach_port_t v83 = pthread_mach_thread_np(v82);
        int v84 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v83;
        *(_WORD *)&buf[8] = 2080;
        *(void *)&buf[10] = "HALS_IOUADevice.cpp";
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = 1314;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v84;
        _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception performing config change %u", buf, 0x1Eu);
      }
    }
    kdebug_trace();
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_28;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "HALS_IOUADevice.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1319;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = (char *)v87 + 156;
    uint64_t v15 = MEMORY[0x1E4F14500];
    uint64_t v16 = "%25s:%-5d  HALS_IOUADevice::HandleConfigurationChangeRequest: %s  --- driver returned";
    goto LABEL_27;
  }
  if (v9)
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "HALS_IOUADevice.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1325;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = (char *)v87 + 156;
    uint64_t v15 = MEMORY[0x1E4F14500];
    uint64_t v16 = "%25s:%-5d  HALS_IOUADevice::HandleConfigurationChangeRequest: %s  --- skipping driver config change";
LABEL_27:
    _os_log_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_DEFAULT, v16, buf, 0x1Cu);
  }
LABEL_28:
  *(_WORD *)v91 = 0;
  HALS_IOUADevice::UpdateStreams(v87, v91);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "HALS_IOUADevice.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1335;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = (char *)v87 + 156;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUADevice::HandleConfigurationChangeRequest: %s  --- log stream formats", buf, 0x1Cu);
  }
  uint64_t v17 = 0;
  uint64_t v18 = v87;
  char v19 = 1;
  __int16 v20 = MEMORY[0x1E4F14500];
  do
  {
    char v86 = v19;
    __int16 v21 = (char *)v18 + 24 * v17;
    uint64_t v22 = *((void *)v21 + 169);
    if (*((void *)v21 + 170) != v22)
    {
      uint64_t v23 = 0;
      unsigned int v24 = 0;
      v88 = v21 + 1360;
      v89 = (uint64_t *)(v21 + 1352);
      if (v86) {
        uint64_t v25 = "Output";
      }
      else {
        uint64_t v25 = "Input";
      }
      while (1)
      {
        unint64_t v26 = *(unsigned int **)(v22 + 8 * v23);
        memset(&v116, 0, sizeof(v116));
        HALS_Stream::GetCurrentVirtualFormat((HALS_Stream *)v26, &v116);
        CAStreamBasicDescription::AsString((CAStreamBasicDescription *)&v116, buf, 0x100uLL, v27, v28);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v138 = 136316418;
          *(void *)&v138[4] = "HALS_IOUADevice.cpp";
          *(_WORD *)&v138[12] = 1024;
          *(_DWORD *)&v138[14] = 1205;
          __int16 v139 = 2080;
          v140 = (char *)v87 + 156;
          __int16 v141 = 2080;
          v142 = v25;
          __int16 v143 = 1024;
          unsigned int v144 = v24;
          __int16 v145 = 2080;
          v146 = buf;
          _os_log_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUADevice::_LogStreamFormats: %s %s Stream %d Current Virtual Format: %s", v138, 0x36u);
        }
        uint64_t v29 = v26[4];
        strcpy(v125, "amfsbolg");
        v125[9] = 0;
        *(_WORD *)&v125[10] = 0;
        unint64_t v30 = (*(unsigned int (**)(unsigned int *, uint64_t, unsigned char *, void, void, void))(*(void *)v26 + 104))(v26, v29, v125, 0, 0, 0)/ 0x38uLL;
        std::vector<AudioStreamRangedDescription>::vector(&__p, v30);
        uint64_t v31 = v26[4];
        strcpy(v125, "amfsbolg");
        v125[9] = 0;
        *(_WORD *)&v125[10] = 0;
        *(_DWORD *)v117 = 0;
        (*(void (**)(unsigned int *, uint64_t, unsigned char *, void, unsigned char *, void *, void, void, void))(*(void *)v26 + 112))(v26, v31, v125, (56 * v30), v117, __p, 0, 0, 0);
        std::vector<AudioStreamRangedDescription>::resize((char **)&__p, *(unsigned int *)v117 / 0x38uLL);
        std::string v33 = (char *)__p;
        long long v34 = v115;
        while (v33 != v34)
        {
          *(_OWORD *)v117 = *(_OWORD *)v33;
          *(_OWORD *)&v117[16] = *((_OWORD *)v33 + 1);
          *(void *)&v117[32] = *((void *)v33 + 4);
          double v35 = *((double *)v33 + 5);
          v32.i64[0] = *((void *)v33 + 6);
          if (v35 == *(double *)v32.i64)
          {
            *(void *)v117 = *((void *)v33 + 5);
            CAStreamBasicDescription::AsString((CAStreamBasicDescription *)v117, v138, 0x100uLL, v35, v32);
            if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_45;
            }
            *(_DWORD *)v125 = 136316418;
            *(void *)&v125[4] = "HALS_IOUADevice.cpp";
            *(_WORD *)&v125[12] = 1024;
            *(_DWORD *)&v125[14] = 1221;
            __int16 v126 = 2080;
            v127 = (char *)v87 + 156;
            __int16 v128 = 2080;
            v129 = v25;
            __int16 v130 = 1024;
            unsigned int v131 = v24;
            __int16 v132 = 2080;
            v133 = v138;
            uint64_t v36 = v20;
            unsigned __int8 v37 = "%25s:%-5d  HALS_IOUADevice::_LogStreamFormats: %s %s Stream %d Avail Virtual Format: %s";
            uint32_t v38 = 54;
          }
          else
          {
            CAStreamBasicDescription::AsString((CAStreamBasicDescription *)v117, v138, 0x100uLL, v35, v32);
            if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_45;
            }
            v39 = (unsigned char *)*((void *)v33 + 5);
            uint64_t v40 = *((void *)v33 + 6);
            *(_DWORD *)v125 = 136316930;
            *(void *)&v125[4] = "HALS_IOUADevice.cpp";
            *(_WORD *)&v125[12] = 1024;
            *(_DWORD *)&v125[14] = 1226;
            __int16 v126 = 2080;
            v127 = (char *)v87 + 156;
            __int16 v128 = 2080;
            v129 = v25;
            __int16 v130 = 1024;
            unsigned int v131 = v24;
            __int16 v132 = 2048;
            v133 = v39;
            __int16 v134 = 2048;
            uint64_t v135 = v40;
            __int16 v136 = 2080;
            v137 = v138;
            uint64_t v36 = v20;
            unsigned __int8 v37 = "%25s:%-5d  HALS_IOUADevice::_LogStreamFormats: %s %s Stream %d Avail Virtual Format: [%.0f-%.0f] %s";
            uint32_t v38 = 74;
          }
          _os_log_impl(&dword_1BAA78000, v36, OS_LOG_TYPE_DEFAULT, v37, v125, v38);
LABEL_45:
          v33 += 56;
        }
        uint64_t v113 = 0;
        memset(v112, 0, sizeof(v112));
        uint64_t v41 = v26[4];
        strcpy(v125, " tfpbolg");
        v125[9] = 0;
        *(_WORD *)&v125[10] = 0;
        *(_DWORD *)v117 = 0;
        double v42 = (*(double (**)(unsigned int *, uint64_t, unsigned char *, uint64_t, unsigned char *, _OWORD *, void, void, void))(*(void *)v26 + 112))(v26, v41, v125, 40, v117, v112, 0, 0, 0);
        CAStreamBasicDescription::AsString((CAStreamBasicDescription *)v112, v138, 0x100uLL, v42, v43);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v125 = 136316418;
          *(void *)&v125[4] = "HALS_IOUADevice.cpp";
          *(_WORD *)&v125[12] = 1024;
          *(_DWORD *)&v125[14] = 1236;
          __int16 v126 = 2080;
          v127 = (char *)v87 + 156;
          __int16 v128 = 2080;
          v129 = v25;
          __int16 v130 = 1024;
          unsigned int v131 = v24;
          __int16 v132 = 2080;
          v133 = v138;
          _os_log_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUADevice::_LogStreamFormats: %s %s Stream %d Current Physical Format: %s", v125, 0x36u);
        }
        uint64_t v44 = v26[4];
        strcpy(v125, "atfpbolg");
        v125[9] = 0;
        *(_WORD *)&v125[10] = 0;
        unint64_t v45 = (*(unsigned int (**)(unsigned int *, uint64_t, unsigned char *, void, void, void))(*(void *)v26 + 104))(v26, v44, v125, 0, 0, 0)/ 0x38uLL;
        std::vector<AudioStreamRangedDescription>::vector(&v110, v45);
        uint64_t v46 = v26[4];
        strcpy(v125, "atfpbolg");
        v125[9] = 0;
        *(_WORD *)&v125[10] = 0;
        *(_DWORD *)v117 = 0;
        (*(void (**)(unsigned int *, uint64_t, unsigned char *, void, unsigned char *, char *, void, void, void))(*(void *)v26 + 112))(v26, v46, v125, (56 * v45), v117, v110, 0, 0, 0);
        std::vector<AudioStreamRangedDescription>::resize(&v110, *(unsigned int *)v117 / 0x38uLL);
        v48 = v110;
        v47 = v111;
        if (v110 != v111) {
          break;
        }
LABEL_57:
        if (v48)
        {
          v111 = v48;
          operator delete(v48);
        }
        uint64_t v18 = v87;
        if (__p)
        {
          v115 = (char *)__p;
          operator delete(__p);
        }
        uint64_t v22 = *v89;
        uint64_t v23 = ++v24;
        if (v24 >= (unint64_t)((*v88 - *v89) >> 3)) {
          goto LABEL_62;
        }
      }
      while (1)
      {
        int16x8_t v50 = *((int16x8_t *)v48 + 1);
        v108[0] = *(_OWORD *)v48;
        v108[1] = v50;
        uint64_t v109 = *((void *)v48 + 4);
        double v49 = *((double *)v48 + 5);
        v50.i64[0] = *((void *)v48 + 6);
        if (v49 == *(double *)v50.i64)
        {
          *(void *)&v108[0] = *((void *)v48 + 5);
          CAStreamBasicDescription::AsString((CAStreamBasicDescription *)v108, v125, 0x100uLL, v49, v50);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v117 = 136316418;
            *(void *)&v117[4] = "HALS_IOUADevice.cpp";
            *(_WORD *)&v117[12] = 1024;
            *(_DWORD *)&v117[14] = 1252;
            *(_WORD *)&v117[18] = 2080;
            *(void *)&v117[20] = (char *)v87 + 156;
            *(_WORD *)&v117[28] = 2080;
            *(void *)&v117[30] = v25;
            *(_WORD *)&v117[38] = 1024;
            unsigned int v118 = v24;
            __int16 v119 = 2080;
            v120 = v125;
            v51 = v20;
            v52 = "%25s:%-5d  HALS_IOUADevice::_LogStreamFormats: %s %s Stream %d Avail Physical Format: %s";
            uint32_t v53 = 54;
LABEL_54:
            _os_log_impl(&dword_1BAA78000, v51, OS_LOG_TYPE_DEFAULT, v52, v117, v53);
          }
        }
        else
        {
          CAStreamBasicDescription::AsString((CAStreamBasicDescription *)v108, v125, 0x100uLL, v49, v50);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            v54 = (unsigned char *)*((void *)v48 + 5);
            uint64_t v55 = *((void *)v48 + 6);
            *(_DWORD *)v117 = 136316930;
            *(void *)&v117[4] = "HALS_IOUADevice.cpp";
            *(_WORD *)&v117[12] = 1024;
            *(_DWORD *)&v117[14] = 1257;
            *(_WORD *)&v117[18] = 2080;
            *(void *)&v117[20] = (char *)v87 + 156;
            *(_WORD *)&v117[28] = 2080;
            *(void *)&v117[30] = v25;
            *(_WORD *)&v117[38] = 1024;
            unsigned int v118 = v24;
            __int16 v119 = 2048;
            v120 = v54;
            __int16 v121 = 2048;
            uint64_t v122 = v55;
            __int16 v123 = 2080;
            v124 = v125;
            v51 = v20;
            v52 = "%25s:%-5d  HALS_IOUADevice::_LogStreamFormats: %s %s Stream %d Avail Physical Format: [%.0f-%.0f] %s";
            uint32_t v53 = 74;
            goto LABEL_54;
          }
        }
        v48 += 56;
        if (v48 == v47)
        {
          v48 = v110;
          goto LABEL_57;
        }
      }
    }
LABEL_62:
    char v19 = 0;
    uint64_t v17 = 1;
  }
  while ((v86 & 1) != 0);
  BOOL updated = HALS_IOUADevice::UpdateControls(v18);
  HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)buf);
  HALS_DeviceState::Capture((HALS_DeviceState *)buf, v18, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
  HALS_DeviceState::Compare((HALS_DeviceState *)v92, (const HALS_DeviceState *)buf, (const AudioObjectPropertyAddress *)v106, &v103, v57);
  *(void *)v125 = 0x676C6F6200000000;
  BOOL v59 = v91[1];
  BOOL v60 = v91[0];
  if (v91[1] || v91[0])
  {
    *(_DWORD *)v125 = 1937009955;
    *(_DWORD *)&v125[8] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v106, (AudioObjectPropertyAddress *)v125, v58);
    if (v59)
    {
      strcpy(v125, "#mtstpni");
      v125[9] = 0;
      *(_WORD *)&v125[10] = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v106, (AudioObjectPropertyAddress *)v125, v58);
    }
    if (v60)
    {
      strcpy(v125, "#mtsptuo");
      v125[9] = 0;
      *(_WORD *)&v125[10] = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v106, (AudioObjectPropertyAddress *)v125, v58);
    }
  }
  if (updated)
  {
    strcpy(v125, "lrtcbolg");
    v125[9] = 0;
    *(_WORD *)&v125[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v106, (AudioObjectPropertyAddress *)v125, v58);
  }
  if (v106[0] == v106[1])
  {
    v61 = v103;
    while (v61 != v104)
    {
      uint64_t v62 = *(void *)v61;
      uint64_t v63 = *((void *)v61 + 1);
      v61 = (CAPropertyAddressList *)((char *)v61 + 32);
      if (v62 != v63) {
        goto LABEL_74;
      }
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v138 = 136315650;
      *(void *)&v138[4] = "HALS_IOUADevice.cpp";
      *(_WORD *)&v138[12] = 1024;
      *(_DWORD *)&v138[14] = 1398;
      __int16 v139 = 2080;
      v140 = (char *)v87 + 156;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUADevice::HandleConfigurationChangeRequest: %s  but nothing changed", v138, 0x1Cu);
    }
  }
  else
  {
LABEL_74:
    strcpy(v125, "ffidbolg");
    v125[9] = 0;
    *(_WORD *)&v125[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v106, (AudioObjectPropertyAddress *)v125, v58);
  }
  strcpy(v138, "egfcbolg");
  v138[9] = 0;
  *(_WORD *)&v138[10] = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v106, (AudioObjectPropertyAddress *)v138, v64);
  *(void *)v138 = v148;
  std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)v138);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*(void **)&buf[16]);
  *(void *)buf = &v94;
  std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v93);
  uint64_t v65 = *((void *)v87 + 178);
  if (v65) {
    (*(void (**)(uint64_t))(*(void *)v65 + 936))(v65);
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v138 = 136315650;
    *(void *)&v138[4] = "HALS_IOUADevice.cpp";
    *(_WORD *)&v138[12] = 1024;
    *(_DWORD *)&v138[14] = 1418;
    __int16 v139 = 2080;
    v140 = (char *)v87 + 156;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUADevice::HandleConfigurationChangeRequest: %s  --- sending notifications", v138, 0x1Cu);
  }
  if (!*(unsigned char *)(a1 + 64) && *(void *)(a1 + 48) == 4444)
  {
    strcpy(v138, "tsivbolg");
    v138[9] = 0;
    *(_WORD *)&v138[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v106, (AudioObjectPropertyAddress *)v138, v66);
    strcpy(v138, "TaPsbolg");
    v138[9] = 0;
    *(_WORD *)&v138[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v106, (AudioObjectPropertyAddress *)v138, v67);
    strcpy(v138, "CaPsbolg");
    v138[9] = 0;
    *(_WORD *)&v138[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v106, (AudioObjectPropertyAddress *)v138, v68);
    strcpy(v138, "tcoibolg");
    v138[9] = 0;
    *(_WORD *)&v138[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v106, (AudioObjectPropertyAddress *)v138, v69);
    strcpy(v138, "seddbolg");
    v138[9] = 0;
    *(_WORD *)&v138[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v106, (AudioObjectPropertyAddress *)v138, v70);
    strcpy(v138, "sedcbolg");
    v138[9] = 0;
    *(_WORD *)&v138[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v106, (AudioObjectPropertyAddress *)v138, v71);
    strcpy(v138, "tmfsbolg");
    v138[9] = 0;
    *(_WORD *)&v138[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v106, (AudioObjectPropertyAddress *)v138, v72);
    strcpy(v138, "#mtsbolg");
    v138[9] = 0;
    *(_WORD *)&v138[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v106, (AudioObjectPropertyAddress *)v138, v73);
    strcpy(v138, "amfsbolg");
    v138[9] = 0;
    *(_WORD *)&v138[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v106, (AudioObjectPropertyAddress *)v138, v74);
    strcpy(v138, " tfpbolg");
    v138[9] = 0;
    *(_WORD *)&v138[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v106, (AudioObjectPropertyAddress *)v138, v75);
    strcpy(v138, "ffidbolg");
    v138[9] = 0;
    *(_WORD *)&v138[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v106, (AudioObjectPropertyAddress *)v138, v76);
  }
  kdebug_trace();
  HALS_NotificationManager::GroupPropertiesChanged(1, *((_DWORD *)v87 + 4), *(_DWORD *)(a1 + 72), (uint64_t)v106, (uint64_t *)&v103, (uint64_t)&v95);
  v78 = v100;
  v77 = v101;
  if (v100 != v101)
  {
    v79 = v100;
    do
      HALS_NotificationManager::GroupPropertiesChanged(1, *v79++, *(_DWORD *)(a1 + 72), (uint64_t)v106, (uint64_t *)&v103, (uint64_t)&v95);
    while (v79 != v77);
  }
  kdebug_trace();
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v138 = 136315650;
    *(void *)&v138[4] = "HALS_IOUADevice.cpp";
    *(_WORD *)&v138[12] = 1024;
    *(_DWORD *)&v138[14] = 1447;
    __int16 v139 = 2080;
    v140 = (char *)v87 + 156;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUADevice::HandleConfigurationChangeRequest: %s  --- restarting IO", v138, 0x1Cu);
  }
  uint64_t v80 = *((void *)v87 + 178);
  if (v80)
  {
    (*(void (**)(uint64_t, void **))(*(void *)v80 + 232))(v80, v106);
    (*(void (**)(void, void **))(**((void **)v87 + 178) + 224))(*((void *)v87 + 178), &v95);
  }
  v90[0] = 0;
  v90[1] = 0;
  HALS_System::GetInstance(v138, 0, v90);
  HALS_System::CheckForDefaultDeviceChanges(*(HALS_System **)v138);
  if (*(void *)&v138[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v138[8]);
  }
  if (v95)
  {
    v96 = v95;
    operator delete(v95);
  }
  if (v78) {
    operator delete(v78);
  }
  *(void *)v138 = &v103;
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)v138);
  if (v106[0])
  {
    v106[1] = v106[0];
    operator delete(v106[0]);
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v138 = 136315650;
    *(void *)&v138[4] = "HALS_IOUADevice.cpp";
    *(_WORD *)&v138[12] = 1024;
    *(_DWORD *)&v138[14] = 1467;
    __int16 v139 = 2080;
    v140 = (char *)v87 + 156;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUADevice::HandleConfigurationChangeRequest: %s  <---", v138, 0x1Cu);
  }
  return kdebug_trace();
}

void sub_1BAE68F18(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42)
{
  if (a2)
  {
    if (__p) {
      operator delete(__p);
    }
    if (a35) {
      operator delete(a35);
    }
    STACK[0x320] = (unint64_t)&a38;
    std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);
    if (a41)
    {
      a42 = (uint64_t)a41;
      operator delete(a41);
    }
    int16x8_t v43 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(a1);
    AMCP::Log::Scope_Registry::get(v43);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&STACK[0x320], "com.apple.coreaudio", "AMCP");
    uint64_t v44 = *(NSObject **)STACK[0x320];
    if (STACK[0x328]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x328]);
    }
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      unint64_t v45 = pthread_self();
      mach_port_t v46 = pthread_mach_thread_np(v45);
      LODWORD(STACK[0x320]) = 67109634;
      LODWORD(STACK[0x324]) = v46;
      LOWORD(STACK[0x328]) = 2080;
      STACK[0x32A] = (unint64_t)"HALS_IOUADevice.cpp";
      LOWORD(STACK[0x332]) = 1024;
      LODWORD(STACK[0x334]) = 1464;
      _os_log_error_impl(&dword_1BAA78000, v44, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception handling config change!", (uint8_t *)&STACK[0x320], 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAE68D48);
  }
  _Unwind_Resume(a1);
}

void HALS_IOUADevice::UpdateStreams(HALS_IOUADevice *this, BOOL *a2)
{
  *(_WORD *)a2 = 0;
  HALS_IOUADevice::get_stream_list(&v71, (uint64_t)this, 0);
  HALS_IOUADevice::get_stream_list(&v70, (uint64_t)this, 1);
  std::vector<unsigned int>::pointer begin = v71.__begin_;
  std::vector<unsigned int>::pointer v5 = v70.__begin_;
  uint64_t v62 = 0;
  uint64_t v63 = &v62;
  uint64_t v64 = 0x4002000000;
  uint64_t v65 = __Block_byref_object_copy__14_13052;
  v66 = __Block_byref_object_dispose__15_13053;
  v67 = 0;
  v68 = 0;
  uint64_t v69 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = &v54;
  uint64_t v56 = 0x4002000000;
  v57 = __Block_byref_object_copy__14_13052;
  v58 = __Block_byref_object_dispose__15_13053;
  BOOL v59 = 0;
  BOOL v60 = 0;
  uint64_t v61 = 0;
  uint64_t v46 = 0;
  v47 = &v46;
  uint64_t v48 = 0x4002000000;
  double v49 = __Block_byref_object_copy__14_13052;
  int16x8_t v50 = __Block_byref_object_dispose__15_13053;
  v51 = 0;
  v52 = 0;
  uint64_t v53 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = &v40;
  uint64_t v42 = 0x3002000000;
  int16x8_t v43 = __Block_byref_object_copy__16_13054;
  uint64_t v44 = __Block_byref_object_dispose__17_13055;
  __int16 v45 = 0;
  uint64_t v32 = 0;
  std::string v33 = &v32;
  uint64_t v34 = 0x4002000000;
  double v35 = __Block_byref_object_copy__14_13052;
  uint64_t v36 = __Block_byref_object_dispose__15_13053;
  unsigned __int8 v37 = 0;
  uint32_t v38 = 0;
  uint64_t v39 = 0;
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 1174405120;
  v23[2] = ___ZN15HALS_IOUADevice13UpdateStreamsEPb_block_invoke;
  v23[3] = &unk_1F147DDC8;
  v23[9] = this;
  unsigned int v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v24, v71.__begin_, (uint64_t)v71.__end_, v71.__end_ - v71.__begin_);
  std::vector<unsigned int>::pointer v27 = begin;
  __p = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v70.__begin_, (uint64_t)v70.__end_, v70.__end_ - v70.__begin_);
  v23[4] = &v62;
  v23[5] = &v54;
  v23[6] = &v40;
  v23[7] = &v46;
  std::vector<unsigned int>::pointer v31 = v5;
  v23[8] = &v32;
  uint64_t v6 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUADevice *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v23);
  uint64_t v10 = v41;
  *a2 = *((unsigned char *)v41 + 40);
  a2[1] = *((unsigned char *)v10 + 41);
  uint64_t v11 = (void *)v63[5];
  uint64_t v12 = (void *)v63[6];
  while (v11 != v12)
  {
    (**(void (***)(void, uint64_t, uint64_t, uint64_t))*v11)(*v11, v7, v8, v9);
    ++v11;
  }
  int v13 = (void *)v55[5];
  uint64_t v14 = (void *)v55[6];
  while (v13 != v14)
  {
    (**(void (***)(void, uint64_t, uint64_t, uint64_t))*v13)(*v13, v7, v8, v9);
    ++v13;
  }
  uint64_t v15 = (HALS_IOUAStream **)v47[5];
  uint64_t v16 = (HALS_IOUAStream **)v47[6];
  while (v15 != v16)
  {
    uint64_t v17 = *v15;
    HALS_IOUAStream::SynchronizeWithHardware(*v15);
    HALS_ObjectMap::ReleaseObject(v17, v18);
    ++v15;
  }
  char v19 = (HALS_IOUAStream **)v33[5];
  __int16 v20 = (HALS_IOUAStream **)v33[6];
  while (v19 != v20)
  {
    __int16 v21 = *v19;
    HALS_IOUAStream::SynchronizeWithHardware(*v19);
    HALS_ObjectMap::ReleaseObject(v21, v22);
    ++v19;
  }
  if (__p)
  {
    uint64_t v29 = __p;
    operator delete(__p);
  }
  if (v24)
  {
    uint64_t v25 = v24;
    operator delete(v24);
  }
  _Block_object_dispose(&v32, 8);
  if (v37)
  {
    uint32_t v38 = v37;
    operator delete(v37);
  }
  _Block_object_dispose(&v40, 8);
  _Block_object_dispose(&v46, 8);
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  _Block_object_dispose(&v54, 8);
  if (v59)
  {
    BOOL v60 = v59;
    operator delete(v59);
  }
  _Block_object_dispose(&v62, 8);
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  if (v70.__begin_)
  {
    v70.__end_ = v70.__begin_;
    operator delete(v70.__begin_);
  }
  if (v71.__begin_)
  {
    v71.__end_ = v71.__begin_;
    operator delete(v71.__begin_);
  }
}

void sub_1BAE6958C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47)
{
  if (__p) {
    operator delete(__p);
  }
  _Block_object_dispose(&a27, 8);
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a41, 8);
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  _Block_object_dispose((const void *)(v47 - 224), 8);
  double v49 = *(void **)(v47 - 184);
  if (v49)
  {
    *(void *)(v47 - 176) = v49;
    operator delete(v49);
  }
  _Block_object_dispose((const void *)(v47 - 160), 8);
  int16x8_t v50 = *(void **)(v47 - 120);
  if (v50)
  {
    *(void *)(v47 - 112) = v50;
    operator delete(v50);
  }
  v51 = *(void **)(v47 - 96);
  if (v51)
  {
    *(void *)(v47 - 88) = v51;
    operator delete(v51);
  }
  v52 = *(void **)(v47 - 72);
  if (v52)
  {
    *(void *)(v47 - 64) = v52;
    operator delete(v52);
  }
  _Unwind_Resume(a1);
}

BOOL HALS_IOUADevice::UpdateControls(HALS_IOUADevice *this)
{
  uint64_t v27 = 0;
  int16x8_t v28 = &v27;
  uint64_t v29 = 0x2000000000;
  char v30 = 0;
  uint64_t v19 = 0;
  __int16 v20 = &v19;
  uint64_t v21 = 0x4002000000;
  uint64_t v22 = __Block_byref_object_copy__13040;
  uint64_t v23 = __Block_byref_object_dispose__13041;
  unsigned int v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x4002000000;
  uint64_t v14 = __Block_byref_object_copy__13040;
  uint64_t v15 = __Block_byref_object_dispose__13041;
  __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  v10[2] = ___ZN15HALS_IOUADevice14UpdateControlsEv_block_invoke;
  v10[3] = &unk_1E62353A8;
  v10[4] = &v27;
  v10[5] = &v19;
  v10[6] = &v11;
  v10[7] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUADevice *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v10);
  unsigned __int8 v2 = (void (****)(void))v20[5];
  unsigned __int8 v3 = (void (****)(void))v20[6];
  while (v2 != v3)
    (***v2++)();
  uint64_t v4 = (HALS_IOUAControl **)v12[5];
  for (uint64_t i = (HALS_IOUAControl **)v12[6]; v4 != i; ++v4)
  {
    uint64_t v6 = *v4;
    if (HALS_IOUAControl::RefreshCache(*v4)) {
      *((unsigned char *)v28 + 24) = 1;
    }
    HALS_ObjectMap::ReleaseObject(v6, v7);
  }
  int v8 = *((unsigned __int8 *)v28 + 24);
  _Block_object_dispose(&v11, 8);
  if (__p)
  {
    uint64_t v17 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v19, 8);
  if (v24)
  {
    uint64_t v25 = v24;
    operator delete(v24);
  }
  _Block_object_dispose(&v27, 8);
  return v8 != 0;
}

void sub_1BAE69890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  _Block_object_dispose(&a17, 8);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a25, 8);
  if (a30)
  {
    a31 = (uint64_t)a30;
    operator delete(a30);
  }
  _Block_object_dispose((const void *)(v31 - 80), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__13040(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__13041(uint64_t a1)
{
  unsigned __int8 v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN15HALS_IOUADevice14UpdateControlsEv_block_invoke(uint64_t a1)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(v2 + 1312);
  uint64_t v4 = *(void *)(v3 + 792);
  std::vector<unsigned int>::pointer v5 = *(std::__shared_weak_count **)(v3 + 800);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v4 + 4), (const AudioObjectPropertyAddress *)"lrtcbolg", *(_DWORD *)(v2 + 1320), 0, 0);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (PropertySize >= 4)
  {
    std::vector<unsigned int>::vector(&v67, PropertySize >> 2);
    std::vector<unsigned int>::pointer begin = v67.__begin_;
    *(void *)buf = (char *)v67.__end_ - (char *)v67.__begin_;
    uint64_t v10 = *(void *)(v2 + 1312);
    uint64_t v11 = *(void *)(v10 + 792);
    uint64_t v12 = *(std::__shared_weak_count **)(v10 + 800);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v11 + 4), (const AudioObjectPropertyAddress *)"lrtcbolg", *(_DWORD *)(v2 + 1320), 0, 0, begin, (unint64_t *)buf);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    std::vector<unsigned int>::pointer v7 = v67.__begin_;
    std::vector<unsigned int>::pointer end = v67.__end_;
  }
  else
  {
    std::vector<unsigned int>::pointer v7 = 0;
    std::vector<unsigned int>::pointer end = 0;
    memset(&v67, 0, sizeof(v67));
  }
  unint64_t v13 = (char *)end - (char *)v7;
  uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v15 = *(uint64_t **)(v2 + 1400);
  uint64_t v16 = *(uint64_t **)(v2 + 1408);
  uint64_t v66 = a1;
  uint64_t v17 = 0;
  while (v15 != v16)
  {
    uint64_t v19 = *v15++;
    uint64_t v18 = v19;
    *(unsigned char *)(v19 + 13) = 0;
    if (*(_DWORD *)(v19 + 60) == 1) {
      uint64_t v17 = v18;
    }
  }
  if ((v13 & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v20 = 0;
    uint64_t v21 = (v13 >> 2);
    do
    {
      uint64_t v22 = *(void *)(v2 + 1400);
      uint64_t v23 = *(void *)(v2 + 1408);
      if (v22 != v23)
      {
        while (!*(void *)v22 || *(_DWORD *)(*(void *)v22 + 88) != v7[v20])
        {
          v22 += 8;
          if (v22 == v23) {
            goto LABEL_25;
          }
        }
      }
      if (v22 == v23)
      {
LABEL_25:
        unsigned int v24 = v7[v20];
        if (v24)
        {
          uint64_t v25 = *(void *)(v2 + 1312);
          uint64_t v26 = *(void *)(v25 + 792);
          uint64_t v27 = *(std::__shared_weak_count **)(v25 + 800);
          if (v27) {
            atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int outputStruct = 0;
          unint64_t v68 = 4;
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v26 + 4), (const AudioObjectPropertyAddress *)"salcbolg", v24, 0, 0, &outputStruct, &v68);
          if (v27) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
          }
          uint64_t v28 = *(void *)(v2 + 1312);
          uint64_t v29 = *(void *)(v28 + 792);
          char v30 = *(std::__shared_weak_count **)(v28 + 800);
          if (v30) {
            atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v71 = 0;
          unint64_t v70 = 4;
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v29 + 4), (const AudioObjectPropertyAddress *)"slcbbolg", v24, 0, 0, &v71, &v70);
          if (v30) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v30);
          }
          uint64_t v31 = *(void *)(v2 + 1312);
          uint64_t v32 = *(void *)(v31 + 792);
          std::string v33 = *(std::__shared_weak_count **)(v31 + 800);
          if (v33) {
            atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v73 = 0;
          unint64_t v72 = 4;
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v32 + 4), (const AudioObjectPropertyAddress *)"pcscbolg", v24, 0, 0, &v73, &v72);
          if (v33) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v33);
          }
          uint64_t v34 = *(void *)(v2 + 1312);
          uint64_t v35 = *(void *)(v34 + 792);
          uint64_t v36 = *(std::__shared_weak_count **)(v34 + 800);
          if (v36) {
            atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v75 = 0;
          unint64_t v74 = 4;
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v35 + 4), (const AudioObjectPropertyAddress *)"mlecbolg", v24, 0, 0, &v75, &v74);
          if (v36) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v36);
          }
          operator new();
        }
      }
      else
      {
        *(unsigned char *)(*(void *)v22 + 13) = 1;
      }
      ++v20;
    }
    while (v20 != v21);
  }
  if (*(void *)(v2 + 1360) != *(void *)(v2 + 1352))
  {
    if ((*(void *)(v2 + 448) & 0xFF00000000) == 0 || *(void *)(v2 + 448) != 1 || v17 == 0) {
      operator new();
    }
    *(unsigned char *)(v17 + 13) = 1;
  }
  uint64_t v39 = *(HALS_ObjectMap ***)(v2 + 1400);
  uint64_t v40 = *(HALS_ObjectMap ***)(v2 + 1408);
  if (v39 == v40)
  {
    char v42 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v41 = *v39;
      if (*v39)
      {
        if (!*((unsigned char *)v41 + 13)) {
          break;
        }
      }
      if (++v39 == v40)
      {
        char v42 = 0;
        uint64_t v39 = *(HALS_ObjectMap ***)(v2 + 1408);
        goto LABEL_68;
      }
    }
    (*(void (**)(HALS_ObjectMap *))(*(void *)v41 + 8))(v41);
    HALS_ObjectMap::ObjectIsDead(*v39, v43);
    char v42 = 1;
    if (v39 != v40)
    {
      uint64_t v44 = v39 + 1;
      if (v39 + 1 != v40)
      {
        do
        {
          __int16 v45 = *v44;
          if (*v44 && !*((unsigned char *)v45 + 13))
          {
            (*(void (**)(HALS_ObjectMap *))(*(void *)v45 + 8))(v45);
            HALS_ObjectMap::ObjectIsDead(*v44, v46);
          }
          else
          {
            *v39++ = v45;
          }
          ++v44;
        }
        while (v44 != v40);
        char v42 = 1;
      }
    }
  }
LABEL_68:
  uint64_t v47 = (char **)(v2 + 1400);
  if (v39 != *(HALS_ObjectMap ***)(v2 + 1408)) {
    *(void *)(v2 + 1408) = v39;
  }
  double v49 = *(HALS_ObjectMap ***)(v14 + 40);
  uint64_t v48 = *(HALS_ObjectMap ***)(v14 + 48);
  if (v48 != v49)
  {
    do
    {
      int16x8_t v50 = *v49;
      unint64_t v51 = *(void *)(v2 + 1416);
      if ((unint64_t)v39 >= v51)
      {
        uint64_t v52 = ((char *)v39 - *v47) >> 3;
        if ((unint64_t)(v52 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v53 = v51 - (void)*v47;
        uint64_t v54 = v53 >> 2;
        if (v53 >> 2 <= (unint64_t)(v52 + 1)) {
          uint64_t v54 = v52 + 1;
        }
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v55 = v54;
        }
        if (v55) {
          unint64_t v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v55);
        }
        else {
          uint64_t v56 = 0;
        }
        v57 = (HALS_ObjectMap **)(v55 + 8 * v52);
        CAPropertyAddressListVector *v57 = v50;
        uint64_t v39 = v57 + 1;
        v58 = *(char **)(v2 + 1408);
        BOOL v59 = *(char **)(v2 + 1400);
        if (v58 != v59)
        {
          do
          {
            BOOL v60 = (HALS_ObjectMap *)*((void *)v58 - 1);
            v58 -= 8;
            *--v57 = v60;
          }
          while (v58 != v59);
          v58 = *v47;
        }
        *(void *)(v2 + 1400) = v57;
        *(void *)(v2 + 1408) = v39;
        *(void *)(v2 + 1416) = v55 + 8 * v56;
        if (v58) {
          operator delete(v58);
        }
      }
      else
      {
        *v39++ = v50;
      }
      *(void *)(v2 + 1408) = v39;
      ++v49;
    }
    while (v49 != v48);
    char v42 = 1;
  }
  uint64_t v61 = *v47;
  if (*v47 != (char *)v39)
  {
    uint64_t v62 = *v47;
    while (*(_DWORD *)(*(void *)v62 + 20) != 1702259059)
    {
      v62 += 8;
      if (v62 == (char *)v39) {
        goto LABEL_95;
      }
    }
    *(_DWORD *)(v2 + 448) = *(_DWORD *)(*(void *)v62 + 60);
    *(unsigned char *)(v2 + 452) = 1;
  }
LABEL_95:
  *(unsigned char *)(*(void *)(*(void *)(v66 + 32) + 8) + 24) = v42;
  uint64_t v63 = *(void *)(*(void *)(v66 + 48) + 8);
  if (v47 != (char **)(v63 + 40)) {
    std::vector<HALS_IOUAControl *>::__assign_with_size[abi:ne180100]<HALS_IOUAControl **,HALS_IOUAControl **>((void *)(v63 + 40), v61, (char *)v39, ((char *)v39 - v61) >> 3);
  }
  uint64_t v64 = *(HALS_ObjectMap ***)(v63 + 40);
  uint64_t v65 = *(HALS_ObjectMap ***)(v63 + 48);
  while (v64 != v65)
    HALS_ObjectMap::RetainObject(*v64++, (HALS_Object *)v61);
  if (v67.__begin_)
  {
    v67.__end_ = v67.__begin_;
    operator delete(v67.__begin_);
  }
}

void sub_1BAE6A25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void HALS_IOUADevice::get_stream_list(std::vector<unsigned int> *this, uint64_t a2, int a3)
{
  v14.mElement = 0;
  *(void *)&v14.mSelector = *(void *)"#mtsptuo";
  if (a3) {
    v14.mScope = 1768845428;
  }
  uint64_t v5 = *(void *)(a2 + 1312);
  uint64_t v6 = *(void *)(v5 + 792);
  std::vector<unsigned int>::pointer v7 = *(std::__shared_weak_count **)(v5 + 800);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v6 + 4), &v14, *(_DWORD *)(a2 + 1320), 0, 0);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (PropertySize > 3)
  {
    std::vector<unsigned int>::vector(this, PropertySize >> 2);
    std::vector<unsigned int>::pointer begin = this->__begin_;
    unint64_t v13 = (char *)this->__end_ - (char *)this->__begin_;
    uint64_t v10 = *(void *)(a2 + 1312);
    uint64_t v11 = *(void *)(v10 + 792);
    uint64_t v12 = *(std::__shared_weak_count **)(v10 + 800);
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::vector<unsigned int>::pointer begin = this->__begin_;
    }
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v11 + 4), &v14, *(_DWORD *)(a2 + 1320), 0, 0, begin, &v13);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
  else
  {
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

void sub_1BAE6A404(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__14_13052(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__15_13053(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t __Block_byref_object_copy__16_13054(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 40) = *(_WORD *)(a2 + 40);
  return result;
}

void ___ZN15HALS_IOUADevice13UpdateStreamsEPb_block_invoke(void *a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = a1[9];
  uint64_t v3 = (a1[11] - a1[10]) >> 2;
  uint64_t v4 = a1[13];
  uint64_t v5 = (a1[15] - a1[14]) >> 2;
  uint64_t v6 = a1[17];
  uint64_t v7 = *(void *)(a1[4] + 8);
  uint64_t v8 = *(void *)(a1[5] + 8);
  uint64_t v9 = *(void *)(v8 + 40);
  uint64_t v10 = *(void *)(a1[6] + 8);
  uint64_t v100 = v10 + 40;
  uint64_t v97 = (uint64_t *)(v7 + 40);
  v98 = (uint64_t *)(v8 + 40);
  *(void *)(v7 + 48) = *(void *)(v7 + 40);
  *(void *)(v8 + 48) = v9;
  char v11 = 1;
  do
  {
    char v12 = v11;
    uint64_t v13 = v2 + 24 * v1;
    uint64_t v14 = *(void *)(v13 + 1360);
    uint64_t v15 = *(uint64_t **)(v13 + 1352);
    uint64_t v16 = v14 - (void)v15;
    if (((v14 - (void)v15) & 0x7FFFFFFF8) != 0)
    {
      uint64_t v17 = v16 >> 3;
      uint64_t v18 = ((unint64_t)v16 >> 3);
      do
      {
        if (!v17) {
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v19 = *v15++;
        *(unsigned char *)(v19 + 13) = 0;
        --v17;
        --v18;
      }
      while (v18);
    }
    char v11 = 0;
    *(unsigned char *)(v100 + v1) = 0;
    uint64_t v1 = 1;
  }
  while ((v12 & 1) != 0);
  uint64_t v20 = *(void *)(v2 + 448);
  BOOL IsEnabledForAnyClientOrContext = HALS_ReferenceStreamStateManager::ReferenceStreamIsEnabledForAnyClientOrContext(*(std::__shared_mutex_base **)(v2 + 440));
  uint64_t v22 = v10 + 41;
  uint64_t v23 = (char *)operator new(0x50uLL);
  unsigned int v24 = v23;
  v96 = v23 + 80;
  *(_DWORD *)uint64_t v23 = 0;
  *((_DWORD *)v23 + 1) = v3;
  *((void *)v23 + 1) = v4;
  *((void *)v23 + 2) = 0;
  *((void *)v23 + 3) = v97;
  *((void *)v23 + 4) = v100;
  *((_DWORD *)v23 + 10) = 1;
  *((_DWORD *)v23 + 11) = v5;
  *((void *)v23 + 6) = v6;
  *((void *)v23 + 7) = 1;
  *((void *)v23 + 8) = v98;
  *((void *)v23 + 9) = v22;
  if ((v20 & 0xFF00000000) != 0 && v20 == 1)
  {
    if (IsEnabledForAnyClientOrContext)
    {
      uint64_t v25 = (char *)operator new(0xA0uLL);
      uint64_t v26 = v25;
      *((_DWORD *)v25 + 20) = 0;
      *((_DWORD *)v25 + 21) = v3;
      *((void *)v25 + 11) = v4;
      *((void *)v25 + 12) = 0x100000001;
      *((void *)v25 + 13) = v98;
      *((void *)v25 + 14) = v22;
      v96 = v25 + 120;
      for (uint64_t i = 40; i != -40; i -= 40)
      {
        uint64_t v28 = &v25[i];
        long long v29 = *(_OWORD *)&v24[i + 16];
        *(_OWORD *)uint64_t v28 = *(_OWORD *)&v24[i];
        *((_OWORD *)v28 + 1) = v29;
        *((void *)v28 + 4) = *(void *)&v24[i + 32];
      }
      operator delete(v24);
    }
    else
    {
      uint64_t v26 = v23;
    }
  }
  else
  {
    uint64_t v26 = v23;
  }
  __p = v26;
  do
  {
    v99 = v26;
    uint64_t v30 = *((unsigned int *)v26 + 1);
    if (v30)
    {
      uint64_t v31 = 0;
      uint64_t v32 = *((void *)v26 + 1);
      int v33 = *((_DWORD *)v26 + 5);
      do
      {
        uint64_t v34 = 0;
        for (char j = 1; ; char j = 0)
        {
          char v36 = j;
          uint64_t v37 = v2 + 24 * v34;
          uint64_t v38 = *(void *)(v37 + 1360);
          uint64_t v39 = *(void *)(v37 + 1352);
          uint64_t v40 = v38 - v39;
          if (v40) {
            break;
          }
LABEL_24:
          uint64_t v34 = 1;
          if ((v36 & 1) == 0) {
            operator new();
          }
        }
        uint64_t v41 = 0;
        unint64_t v42 = v40 >> 3;
        unsigned int v43 = 1;
        while (1)
        {
          uint64_t v44 = *(void *)(v39 + 8 * v41);
          if (*(_DWORD *)(v44 + 80) == *(_DWORD *)(v32 + 4 * v31) && *(_DWORD *)(v44 + 56) == v33) {
            break;
          }
          uint64_t v41 = v43;
          if (v42 <= v43++) {
            goto LABEL_24;
          }
        }
        *(unsigned char *)(v44 + 13) = 1;
        ++v31;
      }
      while (v31 != v30);
    }
    v26 += 40;
  }
  while (v99 + 40 != v96);
  uint64_t v46 = 0;
  char v47 = 1;
  do
  {
    char v48 = v47;
    uint64_t v49 = v2 + 24 * v46;
    uint64_t v50 = *(void *)(v49 + 1360);
    unint64_t v51 = v50 - *(void *)(v49 + 1352);
    if ((v51 & 0x7FFFFFFF8) != 0)
    {
      uint64_t v52 = (void *)(v49 + 1352);
      uint64_t v53 = (const void **)(v49 + 1360);
      uint64_t v54 = (v51 >> 3);
      do
      {
        uint64_t v55 = v54 - 1;
        if (v54 - 1 >= (unint64_t)((v50 - *v52) >> 3)) {
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v56 = *(HALS_ObjectMap **)(*v52 + 8 * v55);
        if (!*((unsigned char *)v56 + 13))
        {
          (*(void (**)(void))(*(void *)v56 + 8))(*(void *)(*v52 + 8 * v55));
          HALS_ObjectMap::ObjectIsDead(v56, v57);
          uint64_t v58 = *v52 + 8 * v55;
          BOOL v59 = (unsigned char *)(*v52 + 8 * v54);
          int64_t v60 = (unsigned char *)*v53 - v59;
          if (*v53 != v59) {
            memmove((void *)(*v52 + 8 * v55), v59, (unsigned char *)*v53 - v59);
          }
          uint64_t v50 = v58 + v60;
          *uint64_t v53 = (const void *)(v58 + v60);
          *(unsigned char *)(v100 + v46) = 1;
        }
        uint64_t v54 = v55;
      }
      while (v55);
    }
    char v47 = 0;
    uint64_t v46 = 1;
  }
  while ((v48 & 1) != 0);
  uint64_t v61 = 0;
  char v62 = 1;
  do
  {
    char v101 = v62;
    if (v62) {
      uint64_t v63 = v97;
    }
    else {
      uint64_t v63 = v98;
    }
    uint64_t v64 = *v63;
    uint64_t v65 = v63[1] - *v63;
    if ((v65 & 0x7FFFFFFF8) != 0)
    {
      unint64_t v66 = 0;
      unint64_t v67 = v65 >> 3;
      uint64_t v68 = v2 + 24 * v61;
      uint64_t v69 = (void *)(v68 + 1352);
      unint64_t v70 = (void **)(v68 + 1360);
      int v71 = (void *)(v68 + 1368);
      do
      {
        if (v67 <= v66) {
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v72 = *(void *)(v64 + 8 * v66);
        int v73 = *v70;
        if ((unint64_t)*v70 >= *v71)
        {
          uint64_t v75 = ((uint64_t)v73 - *v69) >> 3;
          if ((unint64_t)(v75 + 1) >> 61) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v76 = *v71 - *v69;
          uint64_t v77 = v76 >> 2;
          if (v76 >> 2 <= (unint64_t)(v75 + 1)) {
            uint64_t v77 = v75 + 1;
          }
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v78 = v77;
          }
          if (v78) {
            unint64_t v78 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v78);
          }
          else {
            uint64_t v79 = 0;
          }
          uint64_t v80 = (void *)(v78 + 8 * v75);
          *uint64_t v80 = v72;
          unint64_t v74 = v80 + 1;
          v81 = *v70;
          v82 = (void *)*v69;
          if (*v70 != (void *)*v69)
          {
            do
            {
              uint64_t v83 = *--v81;
              *--uint64_t v80 = v83;
            }
            while (v81 != v82);
            v81 = (void *)*v69;
          }
          void *v69 = v80;
          const AudioObjectPropertyAddress *v70 = v74;
          void *v71 = v78 + 8 * v79;
          if (v81) {
            operator delete(v81);
          }
        }
        else
        {
          void *v73 = v72;
          unint64_t v74 = v73 + 1;
        }
        const AudioObjectPropertyAddress *v70 = v74;
        ++v66;
        uint64_t v64 = *v63;
        unint64_t v67 = (v63[1] - *v63) >> 3;
      }
      while (v66 < v67);
    }
    char v62 = 0;
    uint64_t v61 = 1;
  }
  while ((v101 & 1) != 0);
  uint64_t v84 = 0;
  char v85 = 1;
  do
  {
    char v86 = v85;
    uint64_t v87 = v2 + 24 * v84;
    uint64_t v88 = *(void *)(v87 + 1352);
    v89 = *(const HALS_Stream ***)(v87 + 1360);
    unint64_t v90 = 126 - 2 * __clz(((uint64_t)v89 - v88) >> 3);
    if (v89 == (const HALS_Stream **)v88) {
      uint64_t v91 = 0;
    }
    else {
      uint64_t v91 = v90;
    }
    std::__introsort<std::_ClassicAlgPolicy,HALS_IOUADevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_IOUAStream *> &,std::vector<HALS_IOUAStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_IOUAStream **,false>(v88, v89, v91, 1);
    char v85 = 0;
    uint64_t v84 = 1;
  }
  while ((v86 & 1) != 0);
  BOOL v92 = *(void *)(v2 + 1360) == *(void *)(v2 + 1352) && *(void *)(v2 + 1384) != *(void *)(v2 + 1376);
  *(unsigned char *)(v2 + 432) = v92;
  operator delete(__p);
  HALS_IOUADevice::_CopyStreamList(v2, 0, *(void *)(a1[7] + 8) + 40);
  uint64_t v93 = *(void *)(a1[8] + 8) + 40;

  HALS_IOUADevice::_CopyStreamList(v2, (HALS_Object *)1, v93);
}

void sub_1BAE6ACA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
}

void __destroy_helper_block_e8_80c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE112c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(void *a1)
{
  uint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
}

void *__copy_helper_block_e8_80c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE112c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(void *a1, uint64_t a2)
{
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 10, *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
  a1[14] = 0;
  a1[15] = 0;
  a1[16] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 14, *(const void **)(a2 + 112), *(void *)(a2 + 120), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 2);
}

void sub_1BAE6AD9C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 88) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOUADevice::_CopyStreamList(uint64_t a1, HALS_Object *a2, uint64_t a3)
{
  uint64_t v4 = (const void **)(a1 + 24 * a2 + 1352);
  uint64_t v5 = *(HALS_ObjectMap ***)a3;
  if (v4 == (const void **)a3)
  {
    uint64_t v13 = *(HALS_ObjectMap ***)(a3 + 8);
    goto LABEL_24;
  }
  uint64_t v6 = (char *)*v4;
  uint64_t v7 = *(char **)(a1 + 24 * a2 + 1360);
  int64_t v8 = v7 - (unsigned char *)*v4;
  unint64_t v9 = v8 >> 3;
  uint64_t v10 = *(void *)(a3 + 16);
  if (v8 >> 3 <= (unint64_t)((v10 - (uint64_t)v5) >> 3))
  {
    uint64_t v14 = *(char **)(a3 + 8);
    unint64_t v15 = (v14 - (char *)v5) >> 3;
    if (v15 < v9)
    {
      uint64_t v16 = &v6[8 * v15];
      if (v14 != (char *)v5)
      {
        memmove(v5, v6, v14 - (char *)v5);
        uint64_t v5 = *(HALS_ObjectMap ***)(a3 + 8);
      }
      int64_t v8 = v7 - v16;
      if (v7 == v16) {
        goto LABEL_22;
      }
      uint64_t v17 = v5;
      uint64_t v18 = v16;
      goto LABEL_21;
    }
  }
  else
  {
    if (v5)
    {
      *(void *)(a3 + 8) = v5;
      operator delete(v5);
      uint64_t v10 = 0;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
    }
    if (v8 < 0) {
      goto LABEL_26;
    }
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= v9) {
      uint64_t v11 = v8 >> 3;
    }
    unint64_t v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v11;
    if (v12 >> 61) {
LABEL_26:
    }
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    uint64_t v5 = (HALS_ObjectMap **)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
    *(void *)a3 = v5;
    *(void *)(a3 + 8) = v5;
    *(void *)(a3 + 16) = &v5[(void)a2];
  }
  if (v7 != v6)
  {
    uint64_t v17 = v5;
    uint64_t v18 = v6;
LABEL_21:
    memmove(v17, v18, v8);
  }
LABEL_22:
  uint64_t v13 = (HALS_ObjectMap **)((char *)v5 + v8);
  *(void *)(a3 + 8) = v13;
  uint64_t v5 = *(HALS_ObjectMap ***)a3;
LABEL_24:
  while (v5 != v13)
  {
    uint64_t v19 = *v5++;
    HALS_ObjectMap::RetainObject(v19, a2);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,HALS_IOUADevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_IOUAStream *> &,std::vector<HALS_IOUAStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_IOUAStream **,false>(uint64_t result, const HALS_Stream **a2, uint64_t a3, char a4)
{
  unint64_t v9 = (const HALS_Stream **)result;
LABEL_2:
  uint64_t v91 = a2 - 2;
  uint64_t v93 = a2 - 1;
  unint64_t v90 = a2 - 3;
  uint64_t v10 = v9;
  while (1)
  {
    unint64_t v9 = v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    uint64_t v12 = a2 - v10;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return result;
        case 2:
          __n128 result = StreamLessThan(*v93, *v9);
          if (result)
          {
            uint64_t v38 = *v9;
            os_log_t *v9 = *v93;
            void *v93 = v38;
          }
          break;
        case 3:
          __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9, v9 + 1, v93);
          break;
        case 4:
          __n128 result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9, v9 + 1, v9 + 2, v93);
          break;
        case 5:
          uint64_t v39 = v9 + 2;
          uint64_t v40 = v9 + 3;
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9, v9 + 1, v9 + 2, v9 + 3);
          __n128 result = StreamLessThan(*v93, v9[3]);
          if (result)
          {
            uint64_t v41 = *v40;
            *uint64_t v40 = *v93;
            void *v93 = v41;
            __n128 result = StreamLessThan(*v40, *v39);
            if (result)
            {
              unint64_t v42 = *v39;
              unsigned int v43 = *v40;
              unsigned char *v39 = *v40;
              *uint64_t v40 = v42;
              __n128 result = StreamLessThan(v43, v9[1]);
              if (result)
              {
                __int16 v45 = v9[1];
                uint64_t v44 = v9[2];
                uint64_t v46 = *v9;
                v9[1] = v44;
                v9[2] = v45;
                __n128 result = StreamLessThan(v44, v46);
                if (result) {
                  *(int8x16_t *)unint64_t v9 = vextq_s8(*(int8x16_t *)v9, *(int8x16_t *)v9, 8uLL);
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v9 == a2) {
        return result;
      }
      int64_t v57 = (unint64_t)(v12 - 2) >> 1;
      int64_t v58 = v57;
      BOOL v92 = a2;
      do
      {
        int64_t v59 = v58;
        if (v57 >= v58)
        {
          uint64_t v60 = (2 * v58) | 1;
          uint64_t v61 = &v9[v60];
          if (2 * v58 + 2 < v12)
          {
            BOOL v62 = StreamLessThan(*v61, v61[1]);
            if (v62) {
              ++v61;
            }
            int64_t v57 = (unint64_t)(v12 - 2) >> 1;
            if (v62) {
              uint64_t v60 = 2 * v59 + 2;
            }
          }
          uint64_t v63 = &v9[v59];
          __n128 result = StreamLessThan(*v61, *v63);
          if ((result & 1) == 0)
          {
            uint64_t v64 = *v63;
            do
            {
              uint64_t v65 = v63;
              uint64_t v63 = v61;
              *uint64_t v65 = *v61;
              if (v57 < v60) {
                break;
              }
              uint64_t v66 = (2 * v60) | 1;
              uint64_t v61 = &v9[v66];
              uint64_t v67 = 2 * v60 + 2;
              if (v67 < v12)
              {
                BOOL v68 = StreamLessThan(*v61, v61[1]);
                if (v68) {
                  ++v61;
                }
                int64_t v57 = (unint64_t)(v12 - 2) >> 1;
                if (v68) {
                  uint64_t v66 = v67;
                }
              }
              __n128 result = StreamLessThan(*v61, v64);
              uint64_t v60 = v66;
            }
            while (!result);
            *uint64_t v63 = v64;
          }
        }
        int64_t v58 = v59 - 1;
      }
      while (v59);
      uint64_t v69 = (unint64_t)v11 >> 3;
      unint64_t v70 = v92;
      while (2)
      {
        int v71 = v70;
        uint64_t v72 = 0;
        int v73 = *v9;
        unint64_t v74 = v9;
        do
        {
          uint64_t v75 = &v74[v72 + 1];
          uint64_t v76 = (2 * v72) | 1;
          uint64_t v77 = 2 * v72 + 2;
          if (v77 < v69)
          {
            __n128 result = StreamLessThan(*v75, v74[v72 + 2]);
            if (result)
            {
              ++v75;
              uint64_t v76 = v77;
            }
          }
          void *v74 = *v75;
          unint64_t v74 = v75;
          uint64_t v72 = v76;
        }
        while (v76 <= (uint64_t)((unint64_t)(v69 - 2) >> 1));
        unint64_t v78 = v71 - 1;
        if (v75 != v78)
        {
          const AudioObjectPropertyAddress *v75 = *v78;
          unint64_t v70 = v78;
          unsigned int *v78 = v73;
          uint64_t v79 = (char *)v75 - (char *)v9 + 8;
          if (v79 >= 9)
          {
            unint64_t v80 = (((unint64_t)v79 >> 3) - 2) >> 1;
            v81 = &v9[v80];
            __n128 result = StreamLessThan(*v81, *v75);
            if (result)
            {
              int v73 = *v75;
              do
              {
                v82 = v75;
                uint64_t v75 = v81;
                void *v82 = *v81;
                if (!v80) {
                  break;
                }
                unint64_t v80 = (v80 - 1) >> 1;
                v81 = &v9[v80];
                __n128 result = StreamLessThan(*v81, v73);
              }
              while ((result & 1) != 0);
LABEL_117:
              const AudioObjectPropertyAddress *v75 = v73;
            }
          }
          if (v69-- <= 2) {
            return result;
          }
          continue;
        }
        break;
      }
      unint64_t v70 = v78;
      goto LABEL_117;
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    uint64_t v14 = &v9[(unint64_t)v12 >> 1];
    if ((unint64_t)v11 < 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v14, v9, v93);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9, v14, v93);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9 + 1, v14 - 1, v91);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9 + 2, &v9[v13 + 1], v90);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v14 - 1, v14, &v9[v13 + 1]);
      unint64_t v15 = *v9;
      os_log_t *v9 = *v14;
      *uint64_t v14 = v15;
    }
    --a3;
    if ((a4 & 1) != 0 || StreamLessThan(*(v9 - 1), *v9))
    {
      uint64_t v16 = *v9;
      uint64_t v17 = v9;
      do
      {
        uint64_t v18 = v17;
        uint64_t v19 = v17[1];
        ++v17;
      }
      while (StreamLessThan(v19, v16));
      uint64_t v20 = a2;
      if (v18 == v9)
      {
        do
        {
          if (v17 >= a2) {
            break;
          }
          uint64_t v22 = *--a2;
        }
        while (!StreamLessThan(v22, v16));
      }
      else
      {
        do
          uint64_t v21 = *--a2;
        while (!StreamLessThan(v21, v16));
      }
      if (v17 < a2)
      {
        uint64_t v23 = v17;
        unsigned int v24 = a2;
        do
        {
          uint64_t v25 = *v23;
          *uint64_t v23 = *v24;
          *unsigned int v24 = v25;
          do
          {
            uint64_t v18 = v23;
            uint64_t v26 = v23[1];
            ++v23;
          }
          while (StreamLessThan(v26, v16));
          do
            uint64_t v27 = *--v24;
          while (!StreamLessThan(v27, v16));
        }
        while (v23 < v24);
      }
      if (v18 != v9) {
        os_log_t *v9 = *v18;
      }
      *uint64_t v18 = v16;
      BOOL v4 = v17 >= a2;
      a2 = v20;
      if (!v4) {
        goto LABEL_31;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HALS_IOUADevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_IOUAStream *> &,std::vector<HALS_IOUAStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_IOUAStream **>(v9, v18);
      uint64_t v10 = v18 + 1;
      __n128 result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HALS_IOUADevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_IOUAStream *> &,std::vector<HALS_IOUAStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_IOUAStream **>(v18 + 1, v20);
      if (result)
      {
        a2 = v18;
        if (v28) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v28)
      {
LABEL_31:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,HALS_IOUADevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_IOUAStream *> &,std::vector<HALS_IOUAStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_IOUAStream **,false>(v9, v18, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = v18 + 1;
      }
    }
    else
    {
      long long v29 = *v9;
      __n128 result = StreamLessThan(*v9, *v93);
      if (result)
      {
        uint64_t v10 = v9;
        do
        {
          uint64_t v30 = v10[1];
          ++v10;
          __n128 result = StreamLessThan(v29, v30);
        }
        while ((result & 1) == 0);
      }
      else
      {
        uint64_t v31 = v9 + 1;
        do
        {
          uint64_t v10 = v31;
          if (v31 >= a2) {
            break;
          }
          ++v31;
          __n128 result = StreamLessThan(v29, *v10);
        }
        while (!result);
      }
      uint64_t v32 = a2;
      if (v10 < a2)
      {
        uint64_t v32 = a2;
        do
        {
          int v33 = *--v32;
          __n128 result = StreamLessThan(v29, v33);
        }
        while ((result & 1) != 0);
      }
      while (v10 < v32)
      {
        uint64_t v34 = *v10;
        uint64_t *v10 = *v32;
        *uint64_t v32 = v34;
        do
        {
          uint64_t v35 = v10[1];
          ++v10;
        }
        while (!StreamLessThan(v29, v35));
        do
        {
          char v36 = *--v32;
          __n128 result = StreamLessThan(v29, v36);
        }
        while ((result & 1) != 0);
      }
      uint64_t v37 = v10 - 1;
      BOOL v4 = v10 - 1 >= v9;
      BOOL v5 = v10 - 1 == v9;
      if (v10 - 1 != v9) {
        os_log_t *v9 = *v37;
      }
      a4 = 0;
      *uint64_t v37 = v29;
    }
  }
  char v47 = v9 + 1;
  BOOL v49 = v9 == a2 || v47 == a2;
  if (a4)
  {
    if (!v49)
    {
      uint64_t v50 = 0;
      unint64_t v51 = v9;
      do
      {
        uint64_t v53 = *v51;
        uint64_t v52 = v51[1];
        unint64_t v51 = v47;
        __n128 result = StreamLessThan(v52, v53);
        if (result)
        {
          uint64_t v54 = *v51;
          uint64_t v55 = v50;
          while (1)
          {
            *(const HALS_Stream **)((char *)v9 + v55 + 8) = *(const HALS_Stream **)((char *)v9 + v55);
            if (!v55) {
              break;
            }
            __n128 result = StreamLessThan(v54, *(const HALS_Stream **)((char *)v9 + v55 - 8));
            v55 -= 8;
            if ((result & 1) == 0)
            {
              uint64_t v56 = (const HALS_Stream **)((char *)v9 + v55 + 8);
              goto LABEL_81;
            }
          }
          uint64_t v56 = v9;
LABEL_81:
          *uint64_t v56 = v54;
        }
        char v47 = v51 + 1;
        v50 += 8;
      }
      while (v51 + 1 != a2);
    }
  }
  else if (!v49)
  {
    do
    {
      char v85 = *v9;
      uint64_t v84 = v9[1];
      unint64_t v9 = v47;
      __n128 result = StreamLessThan(v84, v85);
      if (result)
      {
        char v86 = *v9;
        uint64_t v87 = v9;
        do
        {
          uint64_t v88 = v87;
          v89 = *--v87;
          void *v88 = v89;
          __n128 result = StreamLessThan(v86, *(v88 - 2));
        }
        while ((result & 1) != 0);
        HALS_Device *v87 = v86;
      }
      char v47 = v9 + 1;
    }
    while (v9 + 1 != a2);
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HALS_IOUADevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_IOUAStream *> &,std::vector<HALS_IOUAStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_IOUAStream **>(const HALS_Stream **a1, const HALS_Stream **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (StreamLessThan(*(a2 - 1), *a1))
      {
        uint64_t v6 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      unint64_t v15 = a1 + 2;
      uint64_t v16 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(a1, a1 + 1, a1 + 2, a1 + 3);
      if (StreamLessThan(*(a2 - 1), a1[3]))
      {
        uint64_t v17 = *v16;
        *uint64_t v16 = *(a2 - 1);
        *(a2 - 1) = v17;
        if (StreamLessThan(*v16, *v15))
        {
          uint64_t v18 = *v15;
          uint64_t v19 = *v16;
          *unint64_t v15 = *v16;
          *uint64_t v16 = v18;
          if (StreamLessThan(v19, a1[1]))
          {
            uint64_t v21 = a1[1];
            uint64_t v20 = a1[2];
            uint64_t v22 = *a1;
            a1[1] = v20;
            a1[2] = v21;
            if (StreamLessThan(v20, v22)) {
              *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v7 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(a1, a1 + 1, a1 + 2);
      int64_t v8 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    if (StreamLessThan(*v8, *v7))
    {
      uint64_t v11 = *v8;
      uint64_t v12 = v9;
      while (1)
      {
        unint64_t v13 = (const HALS_Stream **)((char *)a1 + v12);
        *(const HALS_Stream **)((char *)a1 + v12 + 24) = *(const HALS_Stream **)((char *)a1 + v12 + 16);
        if (v12 == -16) {
          break;
        }
        v12 -= 8;
        if (!StreamLessThan(v11, v13[1]))
        {
          uint64_t v14 = (const HALS_Stream **)((char *)a1 + v12 + 24);
          goto LABEL_13;
        }
      }
      uint64_t v14 = a1;
LABEL_13:
      *uint64_t v14 = v11;
      if (++v10 == 8) {
        return v8 + 1 == a2;
      }
    }
    uint64_t v7 = v8;
    v9 += 8;
    if (++v8 == a2) {
      return 1;
    }
  }
}

uint64_t HALS_IOUADevice::_SetDSPForClient(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = xmmword_1BAFF9680;
  char v5 = 0;
  if (a3) {
    LODWORD(a3) = *(_DWORD *)(a3 + 16);
  }
  return HALS_IOUADevice::HandleConfigurationChangeRequest(a1, &v4, a3);
}

HALS_ObjectMap *HALS_IOUADevice::_CopyControlByDescription(HALS_IOUADevice *this, HALS_Object *a2, int a3, int a4)
{
  long long v4 = (HALS_ObjectMap **)*((void *)this + 175);
  char v5 = (HALS_ObjectMap **)*((void *)this + 176);
  if (v4 != v5)
  {
    while (1)
    {
      uint64_t v6 = *v4;
      if (*v4)
      {
        if (*((_DWORD *)v6 + 5) == a2 && *((_DWORD *)v6 + 12) == a3 && *((_DWORD *)v6 + 13) == a4) {
          break;
        }
      }
      if (++v4 == v5) {
        return 0;
      }
    }
  }
  if (v4 == v5) {
    return 0;
  }
  uint64_t v7 = *v4;
  HALS_ObjectMap::RetainObject(*v4, a2);
  return v7;
}

HALS_ObjectMap *HALS_IOUADevice::_CopyControlByIndex(HALS_IOUADevice *this, HALS_Object *a2)
{
  uint64_t v2 = *((void *)this + 175);
  if (a2 >= (unint64_t)((*((void *)this + 176) - v2) >> 3)) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *(HALS_ObjectMap **)(v2 + 8 * a2);
  }
  HALS_ObjectMap::RetainObject(v3, a2);
  return v3;
}

uint64_t HALS_IOUADevice::_GetNumberControls(HALS_IOUADevice *this)
{
  return (*((void *)this + 176) - *((void *)this + 175)) >> 3;
}

void HALS_IOUADevice::_CopyControls(HALS_IOUADevice *this, HALS_Device::BasicControlList *a2)
{
  uint64_t v2 = (HALS_ObjectMap **)*((void *)this + 175);
  uint64_t v3 = (HALS_ObjectMap **)*((void *)this + 176);
  if (v2 != v3)
  {
    long long v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, a2);
      char v5 = *v2;
      uint64_t v7 = (HALS_ObjectMap **)*((void *)v4 + 1);
      unint64_t v6 = *((void *)v4 + 2);
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v9 = ((uint64_t)v7 - *(void *)v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = v6 - *(void *)v4;
        uint64_t v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
          uint64_t v11 = v9 + 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        }
        else {
          a2 = 0;
        }
        unint64_t v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        *unint64_t v13 = v5;
        int64_t v8 = v13 + 1;
        unint64_t v15 = *(char **)v4;
        uint64_t v14 = (char *)*((void *)v4 + 1);
        if (v14 != *(char **)v4)
        {
          do
          {
            uint64_t v16 = (HALS_ObjectMap *)*((void *)v14 - 1);
            v14 -= 8;
            *--unint64_t v13 = v16;
          }
          while (v14 != v15);
          uint64_t v14 = *(char **)v4;
        }
        *(void *)long long v4 = v13;
        *((void *)v4 + 1) = v8;
        *((void *)v4 + 2) = v12 + 8 * (void)a2;
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        HALS_ObjectMap *v7 = v5;
        int64_t v8 = v7 + 1;
      }
      *((void *)v4 + 1) = v8;
      ++v2;
    }
    while (v2 != v3);
  }
}

void HALS_IOUADevice::_CopyStreamList(uint64_t a1, unsigned int a2, void **a3)
{
  a3[1] = *a3;
  uint64_t v4 = a1 + 24 * a2;
  std::vector<void const*>::reserve(a3, (uint64_t)(*(void *)(v4 + 1360) - *(void *)(v4 + 1352)) >> 3);
  unint64_t v6 = *(HALS_ObjectMap ***)(v4 + 1352);
  for (uint64_t i = *(HALS_ObjectMap ***)(v4 + 1360); v6 != i; ++v6)
  {
    HALS_ObjectMap::RetainObject(*v6, v5);
    int64_t v8 = *v6;
    uint64_t v10 = (HALS_ObjectMap **)a3[1];
    unint64_t v9 = (unint64_t)a3[2];
    if ((unint64_t)v10 >= v9)
    {
      uint64_t v12 = ((char *)v10 - (unsigned char *)*a3) >> 3;
      if ((unint64_t)(v12 + 1) >> 61) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v9 - (void)*a3;
      uint64_t v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
        uint64_t v14 = v12 + 1;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15) {
        unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v15);
      }
      else {
        char v5 = 0;
      }
      uint64_t v16 = (HALS_ObjectMap **)(v15 + 8 * v12);
      *uint64_t v16 = v8;
      uint64_t v11 = (char *)(v16 + 1);
      uint64_t v18 = (char *)*a3;
      uint64_t v17 = (char *)a3[1];
      if (v17 != *a3)
      {
        do
        {
          uint64_t v19 = (HALS_ObjectMap *)*((void *)v17 - 1);
          v17 -= 8;
          *--uint64_t v16 = v19;
        }
        while (v17 != v18);
        uint64_t v17 = (char *)*a3;
      }
      *a3 = v16;
      a3[1] = v11;
      a3[2] = (void *)(v15 + 8 * (void)v5);
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      uint64_t *v10 = v8;
      uint64_t v11 = (char *)(v10 + 1);
    }
    a3[1] = v11;
  }
}

uint64_t HALS_IOUADevice::_GetTotalNumberChannels(HALS_IOUADevice *this, unsigned int a2)
{
  uint64_t v2 = (char *)this + 24 * a2;
  uint64_t v3 = (HALS_Stream **)*((void *)v2 + 169);
  if (v3 == *((HALS_Stream ***)v2 + 170)) {
    return 0;
  }
  LODWORD(v4) = 0;
  char v5 = (HALS_Stream ***)(v2 + 1360);
  do
  {
    unint64_t v6 = *v3++;
    uint64_t v4 = HALS_Stream::GetNumberChannels(v6) + v4;
  }
  while (v3 != *v5);
  return v4;
}

CFTypeRef HALS_IOUADevice::_CopyDefaultElementName(HALS_IOUADevice *this, AudioObjectPropertyScope a2, AudioObjectPropertyElement a3)
{
  cf[3] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  v14.mSelector = 1818454126;
  v14.mScope = a2;
  v14.mElement = a3;
  uint64_t v5 = *((void *)this + 164);
  uint64_t v6 = *(void *)(v5 + 792);
  uint64_t v7 = *(std::__shared_weak_count **)(v5 + 800);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL HasProperty = HALS_IOUAUCDriver::GetHasProperty((HALS_IOUAUCDriver *)*(unsigned int *)(v6 + 4), &v14, *((_DWORD *)this + 330));
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (!HasProperty) {
    return 0;
  }
  uint64_t v9 = *((void *)this + 164);
  uint64_t v10 = *(void *)(v9 + 792);
  uint64_t v11 = *(std::__shared_weak_count **)(v9 + 800);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)&long long v16 = *((unsigned int *)this + 330);
  *((void *)&v16 + 1) = *(void *)&v14.mSelector;
  HALS_IOUAUCDriver::get_string_property((HALS_IOUAUCDriver *)cf, v10, v16, (void *)a3, 0, 0);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  CFTypeRef v12 = CFRetain(cf[0]);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return v12;
}

void sub_1BAE6BE3C(_Unwind_Exception *a1)
{
}

void sub_1BAE6BE44(_Unwind_Exception *a1)
{
}

void sub_1BAE6BE54(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

HALS_ObjectMap *HALS_IOUADevice::_CopyIOEngine(HALS_ObjectMap **this, HALS_Object *a2)
{
  return this[178];
}

HALS_ObjectMap *HALS_IOUADevice::_CopyStreamByIndex(HALS_IOUADevice *this, HALS_Object *a2, unsigned int a3)
{
  uint64_t v3 = (char *)this + 24 * a2;
  uint64_t v4 = *((void *)v3 + 170);
  uint64_t v5 = *((void *)v3 + 169);
  if (a3 >= (unint64_t)((v4 - v5) >> 3)) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *(HALS_ObjectMap **)(v5 + 8 * a3);
  }
  HALS_ObjectMap::RetainObject(v6, a2);
  return v6;
}

uint64_t HALS_IOUADevice::_GetNumberStreams(HALS_IOUADevice *this, unsigned int a2)
{
  return (*((void *)this + 3 * a2 + 170) - *((void *)this + 3 * a2 + 169)) >> 3;
}

BOOL HALS_IOUADevice::IsClockStable(HALS_IOUADevice *this)
{
  int v5 = 0;
  uint64_t v4 = *(void *)"btscbolg";
  int v2 = 4;
  int v3 = 0;
  (*(void (**)(HALS_IOUADevice *, void, uint64_t *, uint64_t, int *, int *, void, void, void))(*(void *)this + 112))(this, *((unsigned int *)this + 330), &v4, 4, &v2, &v3, 0, 0, 0);
  return v3 != 0;
}

uint64_t HALS_IOUADevice::GetClockAlgorithm(HALS_IOUADevice *this)
{
  int v5 = 0;
  uint64_t v4 = *(void *)"kolcbolg";
  int v2 = 4;
  unsigned int v3 = 0;
  (*(void (**)(HALS_IOUADevice *, void, uint64_t *, uint64_t, int *, unsigned int *, void, void, void))(*(void *)this + 112))(this, *((unsigned int *)this + 330), &v4, 4, &v2, &v3, 0, 0, 0);
  return v3;
}

void HALS_IOUADevice::create_mcp_engine(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t HALS_IOUADevice::DoAnyQueuesHaveWorkAfterFlush(HALS_IOUADevice *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 697);
  if ((v1 & 1) == 0)
  {
    unsigned __int8 v2 = atomic_load((unsigned __int8 *)this + 1017);
    if ((v2 & 1) == 0) {
      return 0;
    }
  }
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)this + 1465);
  return v4 & 1;
}

void HALS_IOUADevice::FlushAllQueues(HALS_IOUADevice *this)
{
  AMCP::Utility::Dispatch_Queue::flush_all_work((HALS_IOUADevice *)((char *)this + 664));
  AMCP::Utility::Dispatch_Queue::flush_all_work((HALS_IOUADevice *)((char *)this + 984));

  AMCP::Utility::Dispatch_Queue::flush_all_work((HALS_IOUADevice *)((char *)this + 1432));
}

void HALS_IOUADevice::SetPropertyData(HALS_IOUADevice *this, const AudioObjectPropertyAddress *a2, const AudioObjectPropertyAddress *a3, unsigned int a4, AudioObjectPropertyAddress *a5, unsigned int a6, void *a7, AudioObjectPropertyAddress *a8)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (a3->mSelector == 1853059700)
  {
    if (a4 <= 7)
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v23 = **(NSObject ***)buf;
      if (*(void *)v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v40);
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        unsigned int v24 = pthread_self();
        mach_port_t v25 = pthread_mach_thread_np(v24);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v25;
        *(_WORD *)uint64_t v40 = 2080;
        *(void *)&v40[2] = "HALS_IOUADevice.cpp";
        __int16 v41 = 1024;
        int v42 = 649;
        __int16 v43 = 2080;
        *(void *)uint64_t v44 = "inDataSize < SizeOf32(Float64)";
        _os_log_error_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s bad property data size for kAudioDevicePropertyNominalSampleRate", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v38);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v31, "kAudioHardwareBadPropertySizeError");
      std::runtime_error::runtime_error(&v32, &v31);
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      int v37 = -1;
      v32.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      int v33 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v32);
      *(void *)&v44[6] = "virtual void HALS_IOUADevice::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddress"
                           " &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
      __int16 v45 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUADevice.cpp";
      int v46 = 649;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v26);
      BOOL v28 = &unk_1F148AA90;
      long long v29 = v26;
      uint64_t v30 = v27;
      long long v26 = 0uLL;
      uint64_t v27 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    uint64_t v14 = *((void *)this + 164);
    unint64_t v15 = *(HALS_IOUAUCDriver **)(v14 + 792);
    long long v16 = *(std::__shared_weak_count **)(v14 + 800);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    HALS_IOUAUCDriver::SetPropertyData(v15, a3, *((_DWORD *)this + 330), a7, a6, a5, a4);
    if (v16)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  else if (HALS_Device::HasProperty((HALS_Device ***)this, (const BOOL *)a2, a3, a8))
  {
    HALS_Device::SetPropertyData(this, a2, a3, a4, a5, a6, (int *)a7, (HALS_Client *)a8);
  }
  else
  {
    HALS_IOUAObject::SetPropertyData((HALS_IOUADevice *)((char *)this + 1304), &a3->mSelector, a5, (CFTypeRef *)a7, v19, v20, v21, v22);
  }
}

void sub_1BAE6C474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOUADevice::GetPropertyData(HALS_IOUADevice *this, const BOOL *a2, AudioObjectPropertyAddress *a3, const AudioObjectPropertyAddress *a4, AudioObjectPropertyAddress *a5, AMCP::Log::Scope_Registry **a6, void *a7, int *a8, HALS_Client *a9)
{
  v114 = a5;
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = (*(uint64_t (**)(HALS_IOUADevice *, HALS_Client *))(*(void *)this + 696))(this, a9);
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1818850161)
  {
    if (mSelector > 1735356004)
    {
      if (mSelector > 1768777572)
      {
        if (mSelector > 1818455661)
        {
          if (mSelector == 1818455662) {
            goto LABEL_81;
          }
          int v22 = 1818850145;
          goto LABEL_72;
        }
        if (mSelector == 1768777573) {
          goto LABEL_73;
        }
        int v21 = 1818452846;
LABEL_80:
        if (mSelector == v21) {
          goto LABEL_81;
        }
LABEL_120:
        if (HALS_Device::HasProperty((HALS_Device ***)this, v18, a3, (AudioObjectPropertyAddress *)a9))
        {
          HALS_Device::GetPropertyData(this, a2, a3, a4, &v114->mSelector, a6, a7, a8, a9);
        }
        else
        {
          HALS_IOUAObject::GetPropertyData((HALS_IOUADevice *)((char *)this + 1304), &a3->mSelector, v114, a6, (unsigned int *)a8, v81, v82, v83, a9);
        }
        return;
      }
      if (mSelector > 1751737453)
      {
        if (mSelector == 1751737454) {
          goto LABEL_73;
        }
        int v22 = 1768124270;
        goto LABEL_72;
      }
      if (mSelector != 1735356005)
      {
        int v22 = 1751412337;
        goto LABEL_72;
      }
    }
    else
    {
      if (mSelector <= 1668639075)
      {
        if (mSelector > 1668050794)
        {
          if (mSelector == 1668050795) {
            goto LABEL_73;
          }
          int v22 = 1668510818;
        }
        else
        {
          if (mSelector == 1634429294) {
            goto LABEL_73;
          }
          int v22 = 1668049764;
        }
        goto LABEL_72;
      }
      if (mSelector <= 1684434035)
      {
        if (mSelector == 1668639076) {
          goto LABEL_81;
        }
        if (mSelector != 1668641652) {
          goto LABEL_120;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 167) - *((void *)this + 166)) >> 2) >= a4 / 0xCuLL) {
          unint64_t v23 = a4 / 0xCuLL;
        }
        else {
          unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 167) - *((void *)this + 166)) >> 2);
        }
        if (v23)
        {
          uint64_t v24 = 0;
          unint64_t v25 = 0;
          do
          {
            uint64_t v26 = *((void *)this + 166);
            if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 167) - v26) >> 2) > v25)
            {
              uint64_t v27 = (char *)a6 + v24;
              BOOL v28 = (uint64_t *)(v26 + v24);
              uint64_t v29 = *v28;
              *((_DWORD *)v27 + 2) = *((_DWORD *)v28 + 2);
              *(void *)uint64_t v27 = v29;
            }
            ++v25;
            v24 += 12;
          }
          while (12 * v23 != v24);
        }
        unsigned int v30 = 12 * v23;
LABEL_69:
        v114->signed int mSelector = v30;
        return;
      }
      if (mSelector == 1684434036) {
        goto LABEL_73;
      }
      if (mSelector != 1735354734) {
        goto LABEL_120;
      }
    }
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_IOUADevice.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 423;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOUADevice::GetPropertyData: bad property data size for kAudioDevicePropertyDeviceIsRunning", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 561211770;
    }
    *(_DWORD *)a6 = (*(uint64_t (**)(void))(**((void **)this + 178) + 672))(*((void *)this + 178));
    unsigned int v30 = 4;
    goto LABEL_69;
  }
  AudioObjectPropertyScope mScope = a3->mScope;
  if (mSelector > 1853059699)
  {
    if (mSelector > 1936092275)
    {
      if (mSelector > 1936879203)
      {
        if (mSelector != 1936879204)
        {
          if (mSelector != 1953653102)
          {
            int v21 = 1969841184;
            goto LABEL_80;
          }
          goto LABEL_73;
        }
        AudioObjectPropertyScope v66 = a3->mScope;
        unsigned int TotalNumberChannelsForClient = HALS_Device::GetTotalNumberChannelsForClient(this, mScope == 1768845428, a9);
        int v68 = caulk::numeric::exceptional_mul<unsigned int>(TotalNumberChannelsForClient);
        uint64_t v69 = (AMCP::Log::Scope_Registry *)caulk::numeric::exceptional_add<unsigned int>(v68);
        if (v69 > a4)
        {
          AMCP::Log::Scope_Registry::get(v69);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          long long v107 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
          {
            v108 = pthread_self();
            mach_port_t v109 = pthread_mach_thread_np(v108);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v109;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "HALS_IOUADevice.cpp";
            __int16 v130 = 1024;
            int v131 = 581;
            __int16 v132 = 2080;
            *(void *)v133 = "inDataSize < theSize";
            _os_log_error_impl(&dword_1BAA78000, v107, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s bad property data size for kAudioDevicePropertyDefaultChannelLayout", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v128);
          __cxa_allocate_exception(0x40uLL);
          std::runtime_error::runtime_error(&v121, "kAudioHardwareBadPropertySizeError");
          std::runtime_error::runtime_error(&outputStruct, &v121);
          uint64_t v124 = 0;
          uint64_t v125 = 0;
          uint64_t v126 = 0;
          int v127 = -1;
          outputStruct.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
          __int16 v123 = &unk_1F148A9D0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&outputStruct);
          *(void *)&v133[6] = "virtual void HALS_IOUADevice::GetPropertyData(AudioObjectID, const AudioObjectPropertyAd"
                                "dress &, UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
          __int16 v134 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUADevice.cpp";
          int v135 = 581;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v116);
          uint64_t v118 = (uint64_t)&unk_1F148AA90;
          long long v119 = v116;
          uint64_t v120 = v117;
          long long v116 = 0uLL;
          uint64_t v117 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
        }
        unsigned int v70 = v69;
        unsigned int v71 = (*(uint64_t (**)(HALS_IOUADevice *, BOOL, HALS_Client *))(*(void *)this + 600))(this, v66 == 1768845428, a9);
        *a6 = 0;
        *((_DWORD *)a6 + 2) = v71;
        if (v71)
        {
          uint64_t v72 = v71;
          int v73 = a6 + 2;
          do
          {
            *((_DWORD *)v73 - 1) = -1;
            void *v73 = 0;
            v73[1] = 0;
            int v73 = (void *)((char *)v73 + 20);
            --v72;
          }
          while (v72);
        }
        v114->signed int mSelector = v70;
        uint64_t v74 = *((void *)this + 164);
        uint64_t v75 = *(void *)(v74 + 792);
        uint64_t v76 = *(std::__shared_weak_count **)(v74 + 800);
        if (v76) {
          atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(void *)&long long v139 = *((unsigned int *)this + 330);
        *((void *)&v139 + 1) = *(void *)&a3->mSelector;
        HALS_IOUAUCDriver::get_array_property((HALS_IOUAUCDriver *)&v118, v75, v139, (void *)a3->mElement, a8, a7);
        if (v76) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v76);
        }
        CFArrayRef v77 = (const __CFArray *)v118;
        if (!v118)
        {
LABEL_119:
          unint64_t v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v80, "Could not construct");
          __cxa_throw(v80, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        unint64_t v78 = 0;
        uint64_t v79 = 12;
        while (v78 < CFArrayGetCount(v77) && v78 < *((unsigned int *)a6 + 2))
        {
          if (!v118)
          {
            v111 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v111, "Could not construct");
            __cxa_throw(v111, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          *(_DWORD *)((char *)a6 + v79) = applesauce::CF::details::at_to<unsigned int>((const __CFArray *)v118, v78++);
          CFArrayRef v77 = (const __CFArray *)v118;
          v79 += 20;
          if (!v118) {
            goto LABEL_119;
          }
        }
        v115[1] = 0;
        v115[0] = 0;
        HALS_System::GetInstance(&outputStruct, 0, v115);
        *(void *)buf = HALS_SettingsManager::ReadSetting((HALS_SettingsManager *)outputStruct.__vftable[58].what, *((const __CFString **)this + 14));
        *(_WORD *)&uint8_t buf[8] = 1;
        if (outputStruct.__imp_.__imp_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)outputStruct.__imp_.__imp_);
        }
        outputStruct.__vftable = 0;
        LOWORD(outputStruct.__imp_.__imp_) = 1;
        if (v66 == 1768845428)
        {
          CFStringRef v84 = @"input.surround";
        }
        else
        {
          if (a3->mScope != 1869968496)
          {
LABEL_137:
            CACFDictionary::~CACFDictionary((CACFDictionary *)&outputStruct);
            CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
            if (v118) {
              CFRelease((CFTypeRef)v118);
            }
            return;
          }
          CFStringRef v84 = @"output.surround";
        }
        CACFDictionary::GetCACFDictionary((const __CFDictionary **)buf, v84, (CACFDictionary *)&outputStruct);
        if (outputStruct.__vftable) {
          HALS_Device::ConstructLayoutFromDictionary((HALS_Device *)&outputStruct, (const CACFDictionary *)a6, v85);
        }
        goto LABEL_137;
      }
      if (mSelector != 1936092276)
      {
        if (mSelector == 1936876644)
        {
          AudioObjectPropertyScope v33 = a3->mScope;
          unsigned int v34 = HALS_Device::GetTotalNumberChannelsForClient(this, mScope == 1768845428, a9);
          int v35 = caulk::numeric::exceptional_mul<unsigned int>(v34);
          uint64_t v36 = (AMCP::Log::Scope_Registry *)caulk::numeric::exceptional_add<unsigned int>(v35);
          if (v36 > a4)
          {
            AMCP::Log::Scope_Registry::get(v36);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v104 = **(NSObject ***)buf;
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
            {
              uint64_t v105 = pthread_self();
              mach_port_t v106 = pthread_mach_thread_np(v105);
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&uint8_t buf[4] = v106;
              *(_WORD *)&uint8_t buf[8] = 2080;
              *(void *)&buf[10] = "HALS_IOUADevice.cpp";
              __int16 v130 = 1024;
              int v131 = 558;
              __int16 v132 = 2080;
              *(void *)v133 = "inDataSize < theSize";
              _os_log_error_impl(&dword_1BAA78000, v104, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyDefaultChannelLayout", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v128);
            __cxa_allocate_exception(0x40uLL);
            std::runtime_error::runtime_error(&v121, "kAudioHardwareBadPropertySizeError");
            std::runtime_error::runtime_error(&outputStruct, &v121);
            uint64_t v124 = 0;
            uint64_t v125 = 0;
            uint64_t v126 = 0;
            int v127 = -1;
            outputStruct.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
            __int16 v123 = &unk_1F148A9D0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&outputStruct);
            *(void *)&v133[6] = "virtual void HALS_IOUADevice::GetPropertyData(AudioObjectID, const AudioObjectProperty"
                                  "Address &, UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
            __int16 v134 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUADevice.cpp";
            int v135 = 558;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v116);
            uint64_t v118 = (uint64_t)&unk_1F148AA90;
            long long v119 = v116;
            uint64_t v120 = v117;
            long long v116 = 0uLL;
            uint64_t v117 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
          }
          unsigned int v37 = v36;
          unsigned int v38 = (*(uint64_t (**)(HALS_IOUADevice *, BOOL, HALS_Client *))(*(void *)this + 600))(this, v33 == 1768845428, a9);
          *a6 = 0;
          *((_DWORD *)a6 + 2) = v38;
          if (v38)
          {
            uint64_t v39 = v38;
            uint64_t v40 = a6 + 2;
            do
            {
              *((_DWORD *)v40 - 1) = -1;
              *uint64_t v40 = 0;
              v40[1] = 0;
              uint64_t v40 = (void *)((char *)v40 + 20);
              --v39;
            }
            while (v39);
          }
          v114->signed int mSelector = v37;
          *((void *)&v41 + 1) = ((unint64_t)a3->mScope << 32) | 0x73726E64;
          uint64_t v42 = *((void *)this + 164);
          uint64_t v43 = *(void *)(v42 + 792);
          uint64_t v44 = *(std::__shared_weak_count **)(v42 + 800);
          if (v44) {
            atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *(void *)&long long v41 = *((unsigned int *)this + 330);
          HALS_IOUAUCDriver::get_array_property((HALS_IOUAUCDriver *)buf, v43, v41, (void *)0x676C6F62, a8, a7);
          if (v44) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v44);
          }
          CFArrayRef v45 = *(const __CFArray **)buf;
          if (!*(void *)buf)
          {
LABEL_60:
            char v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v48, "Could not construct");
            __cxa_throw(v48, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          unint64_t v46 = 0;
          uint64_t v47 = (_DWORD *)a6 + 3;
          while (v46 < CFArrayGetCount(v45) && v46 < *((unsigned int *)a6 + 2))
          {
            if (!*(void *)buf)
            {
              v110 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v110, "Could not construct");
              __cxa_throw(v110, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            _DWORD *v47 = applesauce::CF::details::at_to<unsigned int>(*(const __CFArray **)buf, v46);
            v47 += 5;
            ++v46;
            CFArrayRef v45 = *(const __CFArray **)buf;
            if (!*(void *)buf) {
              goto LABEL_60;
            }
          }
          uint64_t v55 = *(const void **)buf;
          if (*(void *)buf) {
            goto LABEL_86;
          }
          return;
        }
        goto LABEL_120;
      }
LABEL_73:
      *(void *)buf = a4;
      uint64_t v49 = *((void *)this + 164);
      uint64_t v50 = *(void *)(v49 + 792);
      unint64_t v51 = *(std::__shared_weak_count **)(v49 + 800);
      if (v51) {
        atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v50 + 4), a3, *((_DWORD *)this + 330), a8, a7, a6, (unint64_t *)buf);
      if (v51) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v51);
      }
LABEL_77:
      v114->signed int mSelector = *(_DWORD *)buf;
      return;
    }
    if (mSelector > 1920168546)
    {
      if (mSelector == 1920168547) {
        goto LABEL_73;
      }
      int v22 = 1935763060;
    }
    else
    {
      if (mSelector == 1853059700) {
        goto LABEL_73;
      }
      int v22 = 1919512167;
    }
LABEL_72:
    if (mSelector != v22) {
      goto LABEL_120;
    }
    goto LABEL_73;
  }
  if (mSelector <= 1819569762)
  {
    if (mSelector > 1819111267)
    {
      if (mSelector == 1819111268) {
        goto LABEL_81;
      }
      int v21 = 1819173229;
    }
    else
    {
      if (mSelector == 1818850162) {
        goto LABEL_73;
      }
      int v21 = 1819107691;
    }
    goto LABEL_80;
  }
  char v31 = (char)v18;
  double v32 = *(double *)&v17;
  if (mSelector <= 1851878763)
  {
    if (mSelector == 1819569763)
    {
      AudioObjectPropertyScope v59 = a3->mScope;
      LODWORD(outputStruct.__vftable) = 0;
      *(void *)buf = a4;
      uint64_t v60 = *((void *)this + 164);
      uint64_t v61 = *(void *)(v60 + 792);
      BOOL v62 = *(std::__shared_weak_count **)(v60 + 800);
      if (v62) {
        atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v61 + 4), a3, *((_DWORD *)this + 330), a8, a7, &outputStruct, (unint64_t *)buf);
      if (v62) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v62);
      }
      if ((*(unsigned int (**)(HALS_IOUADevice *))(*(void *)this + 440))(this))
      {
        int StreamDSPLatency = HALS_Device::GetStreamDSPLatency(this, (const BOOL *)(v59 == 1768845428));
        LODWORD(outputStruct.__vftable) += StreamDSPLatency;
      }
      if (v31)
      {
        LODWORD(v9) = outputStruct.__vftable;
        LODWORD(outputStruct.__vftable) = (v32
                                                       / (*(double (**)(HALS_IOUADevice *))(*(void *)this + 264))(this)
                                                       * (double)v9);
      }
      if (a9)
      {
        uint64_t DSPLatencyForClient = HALS_Device::GetDSPLatencyForClient(this, v59 == 1768845428, a9);
        int v65 = (int)outputStruct.__vftable;
        if ((DSPLatencyForClient & 0xFF00000000) != 0) {
          int v65 = LODWORD(outputStruct.__vftable) + DSPLatencyForClient;
        }
      }
      else
      {
        int v65 = (int)outputStruct.__vftable;
      }
      *(_DWORD *)a6 = v65;
      goto LABEL_77;
    }
    int v21 = 1836411236;
    goto LABEL_80;
  }
  if (mSelector != 1851878764)
  {
    if (mSelector != 1853059619) {
      goto LABEL_120;
    }
    int NumberStreams = HALS_IODevice::GetNumberStreams(this, 0);
    if (NumberStreams || HALS_IODevice::GetNumberStreams(this, 1))
    {
      int64_t v57 = (HALS_Stream *)HALS_IODevice::CopyStreamByIndex(this, NumberStreams == 0, 0);
      if (v57) {
        int NumberAvailablePhysicalFormats = HALS_Stream::GetNumberAvailablePhysicalFormats(v57);
      }
      else {
        int NumberAvailablePhysicalFormats = 0;
      }
      LODWORD(v118) = NumberAvailablePhysicalFormats;
      operator new[]();
    }
    strcpy(buf, "#rsnbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    uint64_t v86 = *((void *)this + 164);
    uint64_t v87 = *(void *)(v86 + 792);
    uint64_t v88 = *(std::__shared_weak_count **)(v86 + 800);
    if (v88) {
      atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL HasProperty = HALS_IOUAUCDriver::GetHasProperty((HALS_IOUAUCDriver *)*(unsigned int *)(v87 + 4), (const AudioObjectPropertyAddress *)buf, *((_DWORD *)this + 330));
    BOOL v90 = HasProperty;
    if (v88) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v88);
    }
    if (v90)
    {
      MEMORY[0x1F4188790](HasProperty);
      BOOL v92 = (const double *)&v113[-v91];
      outputStruct.__vftable = v93;
      uint64_t v94 = *((void *)this + 164);
      uint64_t v95 = *(void *)(v94 + 792);
      v96 = *(std::__shared_weak_count **)(v94 + 800);
      if (v96) {
        atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v95 + 4), (const AudioObjectPropertyAddress *)buf, *((_DWORD *)this + 330), a8, a7, &v113[-v91], (unint64_t *)&outputStruct);
      if (v96) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v96);
      }
      unint64_t v97 = (unint64_t)outputStruct.__vftable >> 3;
      if (outputStruct.__vftable >= (std::runtime_error_vtbl *)8)
      {
        if (v97 <= 1) {
          unint64_t v98 = 1;
        }
        else {
          unint64_t v98 = (unint64_t)outputStruct.__vftable >> 3;
        }
        do
        {
          float64x2_t v99 = vld1q_dup_f64(v92++);
          *(float64x2_t *)a6 = v99;
          a6 += 2;
          --v98;
        }
        while (v98);
      }
      v114->signed int mSelector = 16 * v97;
      return;
    }
    uint64_t v118 = 8;
    *(void *)&long long v116 = 0;
    outputStruct.__vftable = (std::runtime_error_vtbl *)0x676C6F626E737274;
    LODWORD(outputStruct.__imp_.__imp_) = 0;
    uint64_t v100 = *((void *)this + 164);
    uint64_t v101 = *(void *)(v100 + 792);
    uint64_t v102 = *(std::__shared_weak_count **)(v100 + 800);
    if (v102) {
      atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v101 + 4), (const AudioObjectPropertyAddress *)&outputStruct, *((_DWORD *)this + 330), 0, 0, &v116, (unint64_t *)&v118);
    if (v102) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v102);
    }
    if (a4 < 0x10)
    {
      unsigned int v30 = 0;
    }
    else
    {
      double v103 = *(double *)&v116;
      if (v31) {
        double v103 = v32;
      }
      *(double *)a6 = v103;
      *((double *)a6 + 1) = v103;
      unsigned int v30 = 16;
    }
    goto LABEL_69;
  }
LABEL_81:
  uint64_t v52 = *((void *)this + 164);
  uint64_t v53 = *(void *)(v52 + 792);
  uint64_t v54 = *(std::__shared_weak_count **)(v52 + 800);
  if (v54) {
    atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)&long long v138 = *((unsigned int *)this + 330);
  *((void *)&v138 + 1) = *(void *)&a3->mSelector;
  HALS_IOUAUCDriver::get_string_property((HALS_IOUAUCDriver *)buf, v53, v138, (void *)a3->mElement, a8, a7);
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  *a6 = (AMCP::Log::Scope_Registry *)CFRetain(*(CFTypeRef *)buf);
  v114->signed int mSelector = 8;
  uint64_t v55 = *(const void **)buf;
  if (*(void *)buf) {
LABEL_86:
  }
    CFRelease(v55);
}

void sub_1BAE6D910(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t applesauce::CF::details::at_to<unsigned int>(const __CFArray *a1, unint64_t a2)
{
  if (CFArrayGetCount(a1) <= a2 || (CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, a2)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  return applesauce::CF::convert_to<unsigned int,0>(ValueAtIndex);
}

void sub_1BAE6DB64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOUADevice::GetPropertyDataSize(HALS_IOUADevice *this, const BOOL *a2, AudioObjectPropertyAddress *a3, HALS_Client *a4, void *a5, AudioObjectPropertyAddress *a6)
{
  signed int mSelector = a3->mSelector;
  uint64_t v12 = 8;
  if ((int)a3->mSelector > 1818850161)
  {
    if (mSelector > 1853059618)
    {
      if (mSelector <= 1935763059)
      {
        if (mSelector <= 1919512166)
        {
          if (mSelector == 1853059619)
          {
            int NumberStreams = HALS_IODevice::GetNumberStreams(this, 0);
            if (NumberStreams || HALS_IODevice::GetNumberStreams(this, 1))
            {
              uint64_t v20 = (HALS_Stream *)HALS_IODevice::CopyStreamByIndex(this, NumberStreams == 0, 0);
              if (v20) {
                unsigned int NumberAvailablePhysicalFormats = HALS_Stream::GetNumberAvailablePhysicalFormats(v20);
              }
              else {
                unsigned int NumberAvailablePhysicalFormats = 0;
              }
              unsigned int v36 = NumberAvailablePhysicalFormats;
              operator new[]();
            }
            *(void *)&__p.signed int mSelector = 0x676C6F626E737223;
            __p.mElement = 0;
            uint64_t v27 = *((void *)this + 164);
            uint64_t v28 = *(void *)(v27 + 792);
            uint64_t v29 = *(std::__shared_weak_count **)(v27 + 800);
            if (v29) {
              atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            BOOL HasProperty = HALS_IOUAUCDriver::GetHasProperty((HALS_IOUAUCDriver *)*(unsigned int *)(v28 + 4), &__p, *((_DWORD *)this + 330));
            if (v29) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v29);
            }
            if (!HasProperty) {
              return 16;
            }
            uint64_t v31 = *((void *)this + 164);
            uint64_t v32 = *(void *)(v31 + 792);
            AudioObjectPropertyScope v33 = *(std::__shared_weak_count **)(v31 + 800);
            if (v33) {
              atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v32 + 4), &__p, *((_DWORD *)this + 330), a5, a4);
            if (v33) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v33);
            }
            return (2 * PropertySize) & 0xFFFFFFF0;
          }
          int v13 = 1853059700;
          goto LABEL_44;
        }
        if (mSelector != 1919512167)
        {
          int v13 = 1920168547;
          goto LABEL_44;
        }
LABEL_45:
        uint64_t v15 = *((void *)this + 164);
        uint64_t v16 = *(void *)(v15 + 792);
        uint64_t v17 = *(std::__shared_weak_count **)(v15 + 800);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v12 = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v16 + 4), a3, *((_DWORD *)this + 330), a5, a4);
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        return v12;
      }
      if (mSelector <= 1953653101)
      {
        if (mSelector != 1935763060)
        {
          int v13 = 1936092276;
          goto LABEL_44;
        }
        goto LABEL_45;
      }
      if (mSelector != 1969841184)
      {
        int v13 = 1953653102;
        goto LABEL_44;
      }
      return v12;
    }
    if (mSelector <= 1819173228)
    {
      if (mSelector == 1818850162) {
        goto LABEL_45;
      }
      if (mSelector == 1819107691) {
        return v12;
      }
      int v14 = 1819111268;
    }
    else
    {
      if (mSelector <= 1836411235)
      {
        if (mSelector != 1819173229)
        {
          int v13 = 1819569763;
          goto LABEL_44;
        }
        return v12;
      }
      if (mSelector == 1836411236) {
        return v12;
      }
      int v14 = 1851878764;
    }
LABEL_40:
    if (mSelector != v14) {
      goto LABEL_56;
    }
    return v12;
  }
  if (mSelector > 1735354733)
  {
    if (mSelector > 1751737453)
    {
      if (mSelector > 1768777572)
      {
        if (mSelector != 1768777573)
        {
          int v13 = 1818850145;
          goto LABEL_44;
        }
      }
      else if (mSelector != 1751737454)
      {
        int v13 = 1768124270;
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    if (mSelector != 1735354734 && mSelector != 1735356005)
    {
      int v13 = 1751412337;
      goto LABEL_44;
    }
    return 4;
  }
  if (mSelector > 1668510817)
  {
    if (mSelector > 1668641651)
    {
      if (mSelector != 1668641652)
      {
        int v13 = 1684434036;
        goto LABEL_44;
      }
      return (*((_DWORD *)this + 334) - *((_DWORD *)this + 332)) & 0xFFFFFFFC;
    }
    if (mSelector == 1668510818) {
      goto LABEL_45;
    }
    int v14 = 1668639076;
    goto LABEL_40;
  }
  if (mSelector == 1634429294 || mSelector == 1668049764) {
    goto LABEL_45;
  }
  int v13 = 1668050795;
LABEL_44:
  if (mSelector == v13) {
    goto LABEL_45;
  }
LABEL_56:
  if (HALS_Device::HasProperty((HALS_Device ***)this, a2, a3, a6))
  {
    return HALS_Device::GetPropertyDataSize((HALS_Device ***)this, v22, a3, a4, (int *)a5, a6);
  }
  else
  {
    return HALS_IOUAObject::GetPropertyDataSize((HALS_IOUADevice *)((char *)this + 1304), a3, v23, v24, v25, v26);
  }
}

void sub_1BAE6E11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOUADevice::IsPropertySettable(HALS_IOUADevice *this, const BOOL *a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1819107690)
  {
    BOOL IsPropertySettable = 0;
    if (mSelector > 1735356004)
    {
      if (mSelector > 1768124269)
      {
        if (mSelector > 1818850144)
        {
          if (mSelector == 1818850145) {
            goto LABEL_51;
          }
          int v8 = 1818850162;
        }
        else
        {
          if (mSelector == 1768124270) {
            goto LABEL_51;
          }
          int v8 = 1768777573;
        }
        goto LABEL_50;
      }
      if (mSelector != 1735356005)
      {
        if (mSelector == 1751412337) {
          goto LABEL_51;
        }
        int v8 = 1751737454;
        goto LABEL_50;
      }
    }
    else
    {
      if (mSelector <= 1668510817)
      {
        BOOL v10 = mSelector == 1634429294 || mSelector == 1668049764;
        int v11 = 1668050795;
        goto LABEL_31;
      }
      if (mSelector <= 1668641651)
      {
        if (mSelector == 1668510818) {
          goto LABEL_51;
        }
        int v8 = 1668639076;
        goto LABEL_50;
      }
      if (mSelector != 1668641652 && mSelector != 1735354734) {
        goto LABEL_56;
      }
    }
    return IsPropertySettable;
  }
  if (mSelector <= 1853059699)
  {
    if (mSelector > 1819569762)
    {
      if (mSelector > 1851878763)
      {
        if (mSelector == 1851878764) {
          goto LABEL_51;
        }
        int v8 = 1853059619;
      }
      else
      {
        if (mSelector == 1819569763) {
          goto LABEL_51;
        }
        int v8 = 1836411236;
      }
      goto LABEL_50;
    }
    BOOL v10 = mSelector == 1819107691 || mSelector == 1819111268;
    int v11 = 1819173229;
LABEL_31:
    if (!v10 && mSelector != v11) {
      goto LABEL_56;
    }
    goto LABEL_51;
  }
  if (mSelector > 1936092275)
  {
    if (mSelector > 1953653101)
    {
      if (mSelector == 1969841184) {
        goto LABEL_51;
      }
      int v8 = 1953653102;
    }
    else
    {
      if (mSelector == 1936092276) {
        goto LABEL_51;
      }
      int v8 = 1937009955;
    }
  }
  else
  {
    if (mSelector <= 1920168546)
    {
      if (mSelector != 1853059700)
      {
        int v8 = 1919512167;
        goto LABEL_50;
      }
LABEL_51:
      uint64_t v13 = *((void *)this + 164);
      uint64_t v14 = *(void *)(v13 + 792);
      uint64_t v15 = *(std::__shared_weak_count **)(v13 + 800);
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL IsPropertySettable = HALS_IOUAUCDriver::GetIsPropertySettable((HALS_IOUAUCDriver *)*(unsigned int *)(v14 + 4), a3, *((_DWORD *)this + 330));
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      return IsPropertySettable;
    }
    if (mSelector == 1920168547) {
      goto LABEL_51;
    }
    int v8 = 1935763060;
  }
LABEL_50:
  if (mSelector == v8) {
    goto LABEL_51;
  }
LABEL_56:
  if (HALS_Device::HasProperty((HALS_Device ***)this, a2, a3, a4))
  {
    return HALS_Device::IsPropertySettable((HALS_Device ***)this, v17, a3, a4);
  }
  else
  {
    return HALS_IOUAObject::IsPropertySettable((HALS_IOUADevice *)((char *)this + 1304), a3, v18, v19);
  }
}

void sub_1BAE6E4E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOUADevice::HasProperty(HALS_IOUADevice *this, const BOOL *a2, const AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1818850161)
  {
    BOOL HasProperty = 1;
    if (mSelector > 1735356004)
    {
      if (mSelector > 1768777572)
      {
        if (mSelector > 1818455661)
        {
          if (mSelector != 1818455662)
          {
            int v6 = 1818850145;
            goto LABEL_51;
          }
        }
        else if (mSelector != 1768777573)
        {
          int v6 = 1818452846;
          goto LABEL_51;
        }
LABEL_52:
        uint64_t v8 = *((void *)this + 164);
        uint64_t v9 = *(void *)(v8 + 792);
        BOOL v10 = *(std::__shared_weak_count **)(v8 + 800);
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL HasProperty = HALS_IOUAUCDriver::GetHasProperty((HALS_IOUAUCDriver *)*(unsigned int *)(v9 + 4), a3, *((_DWORD *)this + 330));
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        return HasProperty;
      }
      if (mSelector > 1751737453)
      {
        if (mSelector != 1751737454)
        {
          int v6 = 1768124270;
          goto LABEL_51;
        }
        goto LABEL_52;
      }
      if (mSelector != 1735356005)
      {
        int v6 = 1751412337;
        goto LABEL_51;
      }
    }
    else
    {
      if (mSelector <= 1668639075)
      {
        if (mSelector > 1668050794)
        {
          if (mSelector != 1668050795)
          {
            int v6 = 1668510818;
            goto LABEL_51;
          }
        }
        else if (mSelector != 1634429294)
        {
          int v6 = 1668049764;
          goto LABEL_51;
        }
        goto LABEL_52;
      }
      if (mSelector > 1684434035)
      {
        if (mSelector == 1684434036) {
          goto LABEL_52;
        }
        if (mSelector != 1735354734) {
          goto LABEL_57;
        }
      }
      else
      {
        if (mSelector == 1668639076) {
          goto LABEL_52;
        }
        if (mSelector != 1668641652) {
          goto LABEL_57;
        }
        return *((void *)this + 167) != *((void *)this + 166);
      }
    }
    return HasProperty;
  }
  if (mSelector <= 1853059699)
  {
    if (mSelector > 1819569762)
    {
      if (mSelector > 1851878763)
      {
        if (mSelector != 1851878764)
        {
          int v6 = 1853059619;
          goto LABEL_51;
        }
      }
      else if (mSelector != 1819569763)
      {
        int v6 = 1836411236;
        goto LABEL_51;
      }
    }
    else if (mSelector > 1819111267)
    {
      if (mSelector != 1819111268)
      {
        int v6 = 1819173229;
        goto LABEL_51;
      }
    }
    else if (mSelector != 1818850162)
    {
      int v6 = 1819107691;
      goto LABEL_51;
    }
    goto LABEL_52;
  }
  if (mSelector <= 1936092275)
  {
    if (mSelector > 1920168546)
    {
      if (mSelector != 1920168547)
      {
        int v6 = 1935763060;
        goto LABEL_51;
      }
    }
    else if (mSelector != 1853059700)
    {
      int v6 = 1919512167;
      goto LABEL_51;
    }
    goto LABEL_52;
  }
  if (mSelector <= 1937009954)
  {
    if (mSelector != 1936092276)
    {
      int v6 = 1936879204;
      goto LABEL_51;
    }
    goto LABEL_52;
  }
  if (mSelector == 1937009955 || mSelector == 1969841184) {
    goto LABEL_52;
  }
  int v6 = 1953653102;
LABEL_51:
  if (mSelector == v6) {
    goto LABEL_52;
  }
LABEL_57:
  if (HALS_Device::HasProperty((HALS_Device ***)this, a2, a3, a4)) {
    return 1;
  }
  uint64_t v12 = *(uint64_t (**)(void))(*((void *)this + 163) + 16);

  return v12();
}

void sub_1BAE6E8B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOUADevice::_Deactivate(HALS_IOUADevice *this)
{
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    char v4 = v3;
    int v5 = (char *)this + 24 * v2;
    int v6 = v5 + 1360;
    uint64_t v7 = *((void *)v5 + 170);
    if (v7 != *((void *)v5 + 169))
    {
      unint64_t v8 = 0;
      uint64_t v9 = (uint64_t *)(v5 + 1352);
      unsigned int v10 = 1;
      uint64_t v7 = *((void *)v5 + 169);
      do
      {
        int v11 = *(HALS_ObjectMap **)(v7 + 8 * v8);
        (*(void (**)(HALS_ObjectMap *))(*(void *)v11 + 8))(v11);
        HALS_ObjectMap::ObjectIsDead(v11, v12);
        unint64_t v8 = v10;
        uint64_t v7 = *v9;
        ++v10;
      }
      while (v8 < (*v6 - *v9) >> 3);
    }
    char v3 = 0;
    void *v6 = v7;
    uint64_t v2 = 1;
  }
  while ((v4 & 1) != 0);
  uint64_t v13 = (HALS_ObjectMap **)*((void *)this + 175);
  uint64_t v14 = (HALS_ObjectMap **)*((void *)this + 176);
  if (v13 != v14)
  {
    do
    {
      (*(void (**)(void))(*(void *)*v13 + 8))();
      uint64_t v15 = *v13++;
      HALS_ObjectMap::ObjectIsDead(v15, v16);
    }
    while (v13 != v14);
    uint64_t v13 = (HALS_ObjectMap **)*((void *)this + 175);
  }
  *((void *)this + 176) = v13;

  return HALS_Device::_Deactivate(this);
}

void HALS_IOUADevice::Activate(HALS_IOUADevice *this)
{
  HALS_IOUADevice::UpdateStreams(this, &v2);
  HALS_IOUADevice::UpdateControls(this);
  operator new();
}

void sub_1BAE6EC0C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>>>::destroy(*(void **)(v1 + 1200));
  char v4 = *(std::__shared_weak_count **)(v1 + 1136);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  HALS_IOEngine2::~HALS_IOEngine2((HALS_IOEngine2 *)v1);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  MEMORY[0x1C1859840](v1, 0x10E1C4032EB3ED5);
  _Unwind_Resume(a1);
}

const __CFArray *CACFArray::GetCFType(CFArrayRef *this, unsigned int a2, const void **a3)
{
  CFArrayRef result = *this;
  if (result)
  {
    if (CFArrayGetCount(result) <= a2)
    {
      return 0;
    }
    else
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*this, a2);
      *a3 = ValueAtIndex;
      return (const __CFArray *)(ValueAtIndex != 0);
    }
  }
  return result;
}

uint64_t CACFArray::GetUInt32(CFArrayRef *this, unsigned int a2, unsigned int *a3)
{
  CFTypeRef cf = 0;
  unsigned int CFType = CACFArray::GetCFType(this, a2, &cf);
  uint64_t result = 0;
  if (CFType)
  {
    CFNumberRef v6 = (const __CFNumber *)cf;
    if (cf)
    {
      CFTypeID v7 = CFGetTypeID(cf);
      if (v7 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v6, kCFNumberSInt32Type, a3);
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t CACFArray::GetDictionary(CFArrayRef *this, unsigned int a2, const __CFDictionary **a3)
{
  CFTypeRef cf = 0;
  unsigned int CFType = CACFArray::GetCFType(this, a2, &cf);
  uint64_t result = 0;
  if (CFType)
  {
    CFDictionaryRef v6 = (const __CFDictionary *)cf;
    if (cf)
    {
      CFTypeID v7 = CFGetTypeID(cf);
      if (v7 == CFDictionaryGetTypeID())
      {
        *a3 = v6;
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t CACFArray::GetCACFDictionary(CFArrayRef *this, unsigned int a2, CACFDictionary *a3)
{
  CACFDictionary::operator=((uint64_t)a3, 0);
  CFTypeRef cf = 0;
  uint64_t result = (uint64_t)CACFArray::GetCFType(this, a2, &cf);
  if (result)
  {
    CFTypeRef v7 = cf;
    if (cf)
    {
      CFTypeID v8 = CFGetTypeID(cf);
      uint64_t result = CFDictionaryGetTypeID();
      if (v8 == result)
      {
        return CACFDictionary::operator=((uint64_t)a3, v7);
      }
    }
  }
  return result;
}

uint64_t AMCP::Null::Engine::release_power_assertions(AMCP::Null::Engine *this)
{
  return AMCP::Core::Implementation::Simple_Engine_IO_State::release_power_assertions((uint64_t)this + 120);
}

uint64_t AMCP::Null::Engine::take_power_assertions(AMCP::Null::Engine *this)
{
  return AMCP::Core::Implementation::Simple_Engine_IO_State::take_power_assertions((uint64_t)this + 120);
}

double AMCP::Null::Engine::convert_host_to_sample_time(os_unfair_lock_s *this, unint64_t a2)
{
  char v3 = (AMCP::IO_Clock *)&this[140];
  char v4 = this + 160;
  os_unfair_lock_lock(this + 160);
  double v5 = AMCP::IO_Clock::convert_host_to_sample_time_internal(v3, a2);
  os_unfair_lock_unlock(v4);
  return v5;
}

unint64_t AMCP::Null::Engine::convert_sample_to_host_time(os_unfair_lock_s *this, double a2)
{
  return AMCP::IO_Clock::convert_sample_to_host_time(this + 140, a2);
}

double AMCP::Null::Engine::get_current_host_ticks_per_frame(os_unfair_lock_s *this)
{
  BOOL v2 = this + 160;
  os_unfair_lock_lock(this + 160);
  double v3 = *(double *)&this[156]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2);
  return v3;
}

void AMCP::Null::Engine::get_current_time(AMCP::Null::Engine *this@<X0>, AMCP::IO_Clock *a2@<X8>)
{
}

BOOL AMCP::Null::Engine::has_time(os_unfair_lock_s *this)
{
  return AMCP::IO_Clock::has_time(this + 140);
}

BOOL AMCP::Null::Engine::reset_time(os_unfair_lock_s *this)
{
  return AMCP::IO_Clock::reset_time(this + 140);
}

uint64_t AMCP::Null::Engine::update_time(AMCP::Null::Engine *this)
{
  return AMCP::IO_Clock::update_time((AMCP::Null::Engine *)((char *)this + 560));
}

double AMCP::Null::Engine::get_zero_time_stamp@<D0>(const __CFString **this@<X0>, uint64_t a2@<X8>)
{
  if (((int (*)(const __CFString **))(*this)[4].info)(this) < 1) {
    goto LABEL_7;
  }
  CFStringRef v4 = CFStringCreateWithBytes(0, (const UInt8 *)"fail_to_deliver_time_stamp", 26, 0x8000100u, 0);
  *(void *)&v12[0] = v4;
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFComparisonResult v5 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(this[90], (const __CFString **)v12);
  CFRelease(v4);
  if (v5)
  {
    uint64_t v6 = mach_absolute_time();
    AMCP::IO_Clock::get_current_zts((AMCP::IO_Clock *)v12, (uint64_t)(this + 70));
    if (*((void *)&v12[0] + 1))
    {
      uint64_t v7 = *((void *)&v12[0] + 1) + 24000000;
      if (v6 <= *((void *)&v12[0] + 1) + 24000000)
      {
        long long v9 = v12[1];
        *(_OWORD *)a2 = v12[0];
        *(_OWORD *)(a2 + 16) = v9;
        double result = *(double *)&v13;
        long long v10 = v14;
        *(_OWORD *)(a2 + 32) = v13;
        *(_OWORD *)(a2 + 48) = v10;
        return result;
      }
      *(double *)a2 = *(double *)v12 + *((double *)this + 4);
      *(void *)(a2 + 8) = v7;
    }
    else
    {
      *(double *)a2 = (float)((float)*((unsigned int *)this + 182) + (float)*((unsigned int *)this + 182));
      *(void *)(a2 + 8) = v6;
    }
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(void *)(a2 + 48) = 0;
  }
  else
  {
LABEL_7:
    *(void *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  *(void *)&double result = 3;
  *(void *)(a2 + 56) = 3;
  return result;
}

void sub_1BAE6F0EC(void *a1)
{
}

uint64_t AMCP::Null::Engine::end_writing(AMCP::Null::Engine *this, double a2)
{
  return 1;
}

uint64_t AMCP::Null::Engine::write_data_to_stream(AMCP::Log::Scope_Registry *a1, double a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  CFTypeID v8 = (void *)*((void *)a1 + 92);
  if (v8)
  {
    if (a5 >= (unint64_t)((uint64_t)(v8[1] - *v8) >> 4))
    {
      AMCP::Log::Scope_Registry::get(a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int v35 = **(NSObject ***)buf;
      if (*(void *)v80) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v80);
      }
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        unsigned int v36 = pthread_self();
        mach_port_t v37 = pthread_mach_thread_np(v36);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v37;
        *(_WORD *)unint64_t v80 = 2080;
        *(void *)&v80[2] = "Null_Engine_Reflector.cpp";
        __int16 v81 = 1024;
        int v82 = 121;
        LOWORD(v83) = 2080;
        *(void *)((char *)&v83 + 2) = "in_stream_index < m_stream_buffers.size()";
        _os_log_error_impl(&dword_1BAA78000, v35, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
      }
      abort();
    }
    uint64_t v10 = *a8;
    uint64_t v11 = *v8 + 16 * a5;
    uint64_t v12 = *(AMCP::DAL::Ring_Buffer_Base **)v11;
    long long v13 = *(std::__shared_weak_count **)(v11 + 8);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)buf, (uint64_t)v12);
    long long v14 = v83;
    uint64_t v15 = (std::__shared_weak_count *)*((void *)&v83 + 1);
    if (*((void *)&v83 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v83 + 1) + 8), 1uLL, memory_order_relaxed);
      long long v42 = v14;
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      long long v14 = v42;
    }
    uint64_t v16 = *((void *)v12 + 11);
    if (v16) {
      LODWORD(v16) = *(_DWORD *)(v16 + 32);
    }
    unsigned int v17 = *(_DWORD *)v10 / v16;
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      int v55 = 2;
      double v56 = a2;
      uint64_t v57 = 0;
      long long v58 = v14;
      double v18 = (double)v17 + a2;
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      int v55 = 2;
      double v56 = a2;
      uint64_t v57 = 0;
      long long v58 = v14;
      double v18 = (double)v17 + a2;
    }
    int v51 = 2;
    double v52 = v18;
    uint64_t v53 = 0;
    long long v54 = v14;
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v44, (const AMCP::DAL::DAL_Time *)&v55, (const AMCP::DAL::DAL_Time *)&v51);
    AMCP::DAL::DAL_Time::operator-((uint64_t)__p, (AMCP::DAL::DAL_Time *)&v47, (AMCP::DAL::DAL_Time *)&v44);
    AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)&v66, (uint64_t)v12);
    BOOL v19 = AMCP::DAL::DAL_Time_Delta::operator<((AMCP::DAL::DAL_Time_Delta *)&v66, (uint64_t)__p);
    if (v69) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v69);
    }
    uint64_t v20 = (AMCP::Log::Scope_Registry *)*((void *)&v74 + 1);
    if (*((void *)&v74 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v74 + 1));
    }
    if (v19)
    {
      AMCP::Log::Scope_Registry::get(v20);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
      unsigned int v38 = **(NSObject ***)__p;
      if (*(void *)&__p[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
      }
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        uint64_t v39 = pthread_self();
        mach_port_t v40 = pthread_mach_thread_np(v39);
        *(_DWORD *)AudioObjectPropertyAddress __p = 67109890;
        *(_DWORD *)&__p[4] = v40;
        *(_WORD *)&__p[8] = 2080;
        *(void *)&__p[10] = "DAL_Timed_Segment.cpp";
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = 279;
        LOWORD(v74) = 2080;
        *(void *)((char *)&v74 + 2) = "not (range.length() <= buffer.get_length_in_frames())";
        _os_log_error_impl(&dword_1BAA78000, v38, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", __p, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v72);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v64);
      std::logic_error::logic_error(&v65, &v64);
      v65.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error((std::logic_error *)&v66, &v65);
      uint64_t v68 = 0;
      uint64_t v69 = 0;
      uint64_t v70 = 0;
      int v71 = -1;
      AudioObjectPropertyScope v66 = &unk_1F1489CC8;
      v67.__imp_.__imp_ = (const char *)&unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v66);
      *((void *)&v74 + 1) = "Writable_Range AMCP::DAL::create_writable_range(const DAL_Time_Range &, Ring_Buffer_Base &)";
      *(void *)&long long v75 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
      DWORD2(v75) = 279;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v59);
      std::logic_error v62 = v59;
      uint64_t v41 = v60;
      uint64_t v60 = 0;
      uint64_t v61 = (double *)&unk_1F148AA90;
      uint64_t v63 = v41;
      std::logic_error v59 = (std::logic_error)0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    *(std::logic_error *)AudioObjectPropertyAddress __p = v44;
    *(void *)&__p[16] = v45;
    long long v74 = v46;
    if (*((void *)&v46 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v46 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v75 = v47;
    uint64_t v76 = v48;
    uint64_t v77 = v49;
    unint64_t v78 = v50;
    if (v50) {
      atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AMCP::DAL::Ring_Buffer_Base::create_writable_range((uint64_t)v12, __p, (uint64_t)buf);
    if (v78) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v78);
    }
    if (*((void *)&v74 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v74 + 1));
    }
    if (v50) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
    }
    if (*((void *)&v46 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v46 + 1));
    }
    if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)buf, (AMCP::DAL::DAL_Time *)&v84))
    {
      uint64_t v43 = v13;
      AMCP::DAL::Writable_Range::get_direct_write_ranges((AMCP::DAL::Writable_Range *)&v61, (uint64_t)buf);
      int v21 = v61;
      int v22 = (double *)v62.__vftable;
      if (v61 != (double *)v62.__vftable)
      {
        unsigned int v23 = 0;
        do
        {
          (*(void (**)(unsigned char *__return_ptr))(*(void *)v86 + 56))(__p);
          uint64_t other_data_bytes = AMCP::DAL::PCM_Data_Handler::get_other_data_bytes(*(AMCP::Log::Scope_Registry **)__p, *v21, v21[1]);
          uint64_t v26 = v25;
          uint64_t v27 = *(AMCP::Log::Scope_Registry **)&__p[8];
          if (*(void *)&__p[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
          }
          if (!other_data_bytes)
          {
            AMCP::Log::Scope_Registry::get(v27);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
            uint64_t v32 = **(NSObject ***)__p;
            if (*(void *)&__p[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
            }
            if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
            {
              AudioObjectPropertyScope v33 = pthread_self();
              mach_port_t v34 = pthread_mach_thread_np(v33);
              *(_DWORD *)AudioObjectPropertyAddress __p = 67109890;
              *(_DWORD *)&__p[4] = v34;
              *(_WORD *)&__p[8] = 2080;
              *(void *)&__p[10] = "Null_Engine_Reflector.cpp";
              *(_WORD *)&__p[18] = 1024;
              *(_DWORD *)&__p[20] = 142;
              LOWORD(v74) = 2080;
              *(void *)((char *)&v74 + 2) = "not (not bytes.empty())";
              _os_log_error_impl(&dword_1BAA78000, v32, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", __p, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v72);
            __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"", (uint64_t)&v64);
            std::logic_error::logic_error(&v65, &v64);
            v65.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
            std::logic_error::logic_error(&v44, &v65);
            long long v46 = 0uLL;
            *(void *)&long long v47 = 0;
            DWORD2(v47) = -1;
            v44.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
            CFArrayRef v45 = &unk_1F1489CF0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v44);
            *((void *)&v74 + 1) = "BOOL AMCP::Null::Null_Engine_Reflector::write_data_to_stream(uint32_t, float64_t, co"
                                    "nst gsl::span<std::byte> &)";
            *(void *)&long long v75 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Engine_Reflector.cpp";
            DWORD2(v75) = 142;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v59);
            std::logic_error v67 = v59;
            AudioObjectPropertyScope v66 = &unk_1F148AA90;
            uint64_t v68 = v60;
            std::logic_error v59 = (std::logic_error)0;
            uint64_t v60 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
          }
          uint64_t v28 = *((void *)v12 + 11);
          if (v28) {
            LODWORD(v28) = *(_DWORD *)(v28 + 32);
          }
          size_t v29 = v28 * vcvtmd_s64_f64(v21[1] - *v21);
          memcpy(v26, (const void *)(*(void *)(v10 + 8) + v23), v29);
          *(_DWORD *)AudioObjectPropertyAddress __p = 0;
          *(_OWORD *)&__p[8] = 0u;
          long long v74 = 0u;
          LODWORD(v75) = 0;
          AMCP::DAL::Writable_Range::commit_direct_write(v86, (uint64_t)__p, (uint64_t)v21);
          if (SBYTE7(v74) < 0) {
            operator delete(*(void **)&__p[8]);
          }
          v23 += v29;
          v21 += 14;
        }
        while (v21 != v22);
      }
      long long v13 = v43;
      if (v8[4])
      {
        AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v44, (const AMCP::DAL::DAL_Time *)&v55, (const AMCP::DAL::DAL_Time *)&v51);
        AMCP::DAL::create_readable_range((AMCP::DAL *)__p, (const AMCP::DAL::DAL_Time_Range *)&v44, v12);
        if (v50) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v50);
        }
        if (*((void *)&v46 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v46 + 1));
        }
        unsigned int v30 = (void *)v8[4];
        AudioObjectPropertyScope v66 = 0;
        v67.__vftable = 0;
        AMCP::DAL::DAL_Settings::DAL_Settings((unint64_t)&v44, (uint64_t *)&v66);
        (*(void (**)(void, std::logic_error *, unsigned char *))(*(void *)*v30 + 16))(*v30, &v44, __p);
        std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)&v44);
        if (v78) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v78);
        }
        if (*((void *)&v74 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v74 + 1));
        }
      }
      *(void *)AudioObjectPropertyAddress __p = &v61;
      std::vector<AMCP::DAL::Writable_Range::Direct_Write_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range::Direct_Write_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)__p);
    }
    if (v85) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v85);
    }
    if (*((void *)&v83 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
    }
    if (v15)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
  return 1;
}

void sub_1BAE6FA34(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  if (a2)
  {
    a51 = (uint64_t)&a34;
    std::vector<AMCP::DAL::Writable_Range::Direct_Write_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range::Direct_Write_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&a51);
    AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)(v52 - 208));
    if (v51)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v51);
      std::__shared_weak_count::__release_shared[abi:ne180100](v51);
      std::__shared_weak_count::__release_shared[abi:ne180100](v51);
    }
    if (a9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a9);
    }
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMCP::Null::Engine::begin_writing(AMCP::Null::Engine *this, double a2)
{
  return 1;
}

uint64_t AMCP::Null::Engine::end_reading(AMCP::Null::Engine *this, double a2)
{
  return 1;
}

uint64_t AMCP::Null::Engine::read_data_from_stream(AMCP::Log::Scope_Registry *a1, double a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, void *a8)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (uint64_t *)*((void *)a1 + 92);
  if (v10)
  {
    uint64_t v11 = *v10;
    if (a5 >= (unint64_t)((*(void *)(*((void *)a1 + 92) + 8) - v11) >> 4))
    {
      AMCP::Log::Scope_Registry::get(a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v132, "com.apple.coreaudio", "AMCP");
      int v73 = **(NSObject ***)v132;
      if ((void)v133) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v133);
      }
      if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      {
        long long v74 = pthread_self();
        mach_port_t v75 = pthread_mach_thread_np(v74);
        *(_DWORD *)__int16 v132 = 67109890;
        *(_DWORD *)&v132[4] = v75;
        LOWORD(v133) = 2080;
        *(void *)((char *)&v133 + 2) = "Null_Engine_Reflector.cpp";
        WORD5(v133) = 1024;
        HIDWORD(v133) = 65;
        LOWORD(v134) = 2080;
        *(void *)((char *)&v134 + 2) = "in_stream_index < m_stream_buffers.size()";
        _os_log_error_impl(&dword_1BAA78000, v73, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", v132, 0x22u);
      }
      abort();
    }
    uint64_t v12 = (_DWORD *)*a8;
    uint64_t v13 = v11 + 16 * a5;
    uint64_t v15 = *(AMCP::DAL::Ring_Buffer_Base **)v13;
    long long v14 = *(std::__shared_weak_count **)(v13 + 8);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)v132, (uint64_t)v15);
    long long v16 = v134;
    if (*((void *)&v134 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v134 + 1) + 8), 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
    }
    uint64_t v17 = *((void *)v15 + 11);
    if (v17)
    {
      LODWORD(v17) = *(_DWORD *)(v17 + 32);
      a2 = (double)(a6 / v17) + a2;
    }
    double v27 = (double)(*v12 / v17);
    if (*((void *)&v16 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
      double v28 = a2 + v27;
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      double v28 = a2 + v27;
    }
    (*(void (**)(void *__return_ptr, AMCP::DAL::Ring_Buffer_Base *))(*(void *)v15 + 72))(v88, v15);
    *(_DWORD *)__int16 v132 = 2;
    long long v133 = *(unint64_t *)&a2;
    long long v134 = v16;
    if (*((void *)&v16 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
      int v135 = 2;
      double v136 = v28;
      uint64_t v137 = 0;
      long long v138 = v16;
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      int v135 = 2;
      double v136 = v28;
      uint64_t v137 = 0;
      long long v138 = (unint64_t)v16;
    }
    caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::intersection((uint64_t)&v109, v88, v132);
    if (*((void *)&v138 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v138 + 1));
    }
    if (*((void *)&v134 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v134 + 1));
    }
    if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v109, (AMCP::DAL::DAL_Time *)&v112))
    {
      AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)buf, (const AMCP::DAL::DAL_Time *)&v109, (const AMCP::DAL::DAL_Time *)&v112);
      AMCP::DAL::create_readable_range((AMCP::DAL *)v132, (const AMCP::DAL::DAL_Time_Range *)buf, v15);
      if (v131) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v131);
      }
      if (*((void *)&v127 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v127 + 1));
      }
      AMCP::DAL::DAL_Timed_Segment::translate_range((double **)buf, v139, (uint64_t)v132);
      size_t v29 = *(double **)buf;
      uint64_t v30 = *((void *)v15 + 11);
      if (v30) {
        int v31 = *(_DWORD *)(v30 + 32);
      }
      else {
        int v31 = 0;
      }
      double v33 = **(double **)buf;
      double v32 = *(double *)(*(void *)buf + 8);
      (*(void (**)(long long *__return_ptr))(*(void *)v139 + 56))(&v81);
      AMCP::DAL::PCM_Data_Handler::get_other_data_bytes((AMCP::Log::Scope_Registry *)v81, *v29, v29[1]);
      int v35 = v34;
      size_t v36 = v31 * vcvtmd_s64_f64(v32 - v33);
      if (*((void *)&v81 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v81 + 1));
      }
      memcpy(*((void **)v12 + 1), v35, v36);
      uint64_t v37 = *(void *)buf;
      if (*(void *)&buf[8] - *(void *)buf == 192)
      {
        uint64_t v38 = *((void *)v15 + 11);
        if (v38) {
          int v39 = *(_DWORD *)(v38 + 32);
        }
        else {
          int v39 = 0;
        }
        double v65 = *(double *)(*(void *)buf + 96);
        double v64 = *(double *)(*(void *)buf + 104);
        (*(void (**)(long long *__return_ptr))(*(void *)v139 + 56))(&v81);
        AMCP::DAL::PCM_Data_Handler::get_other_data_bytes((AMCP::Log::Scope_Registry *)v81, *(double *)(v37 + 96), *(double *)(v37 + 104));
        std::logic_error v67 = v66;
        size_t v68 = v39 * vcvtmd_s64_f64(v64 - v65);
        if (*((void *)&v81 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v81 + 1));
        }
        memcpy((void *)(*((void *)v12 + 1) + (int)v36), v67, v68);
      }
      *(void *)&long long v81 = buf;
      std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v81);
      if (*((void *)&v138 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v138 + 1));
      }
      if (*((void *)&v134 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v134 + 1));
      }
    }
    if (v115) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v115);
    }
    if (*((void *)&v111 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v111 + 1));
    }
    if (v91) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v91);
    }
    if (v89) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v89);
    }
    if (*((void *)&v16 + 1))
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
    }
    if (v14)
    {
      uint64_t v63 = v14;
LABEL_116:
      std::__shared_weak_count::__release_shared[abi:ne180100](v63);
    }
  }
  else
  {
    uint64_t v19 = *((void *)a1 + 93);
    if (v19)
    {
      uint64_t v20 = (_DWORD *)*a8;
      AMCP::DAL::DAL_Buffer::get_timebase((AMCP::DAL::DAL_Buffer *)&v101, *(void *)(v19 + 24));
      unsigned int v21 = *(_DWORD *)(*((void *)a1 + 93) + 56);
      double v22 = (double)(a6 / v21) + a2;
      unsigned int v23 = *v20 / v21;
      long long v24 = v101;
      uint64_t v79 = (void **)v20;
      if (*((void *)&v101 + 1))
      {
        unint64_t v25 = (atomic_ullong *)(*((void *)&v101 + 1) + 8);
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v101 + 1) + 8), 1uLL, memory_order_relaxed);
        int v97 = 2;
        double v98 = v22;
        uint64_t v99 = 0;
        long long v100 = v24;
        double v26 = v22 + (double)v23;
        atomic_fetch_add_explicit(v25, 1uLL, memory_order_relaxed);
      }
      else
      {
        int v97 = 2;
        double v98 = v22;
        uint64_t v99 = 0;
        long long v100 = (unint64_t)v101;
        double v26 = v22 + (double)v23;
      }
      int v93 = 2;
      double v94 = v26;
      uint64_t v95 = 0;
      long long v96 = v24;
      uint64_t v40 = *((void *)a1 + 93);
      AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v81, (const AMCP::DAL::DAL_Time *)&v97, (const AMCP::DAL::DAL_Time *)&v93);
      AMCP::DAL::Fixed_Buffer::set_range(*(AMCP::DAL::Fixed_Buffer **)(v40 + 24), (const AMCP::DAL::DAL_Time_Range *)&v81);
      uint64_t v41 = *(void *)(v40 + 24);
      long long v109 = v81;
      uint64_t v110 = v82;
      long long v111 = v83;
      if (*((void *)&v83 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v83 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      long long v112 = v84;
      uint64_t v113 = v85;
      uint64_t v114 = v86;
      v115 = v87;
      if (v87) {
        atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      AMCP::DAL::Fixed_Buffer::create_writable_range(v41, (uint64_t)&v109, (uint64_t)v132);
      if (v115) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v115);
      }
      if (*((void *)&v111 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v111 + 1));
      }
      uint64_t v42 = *(void *)(v40 + 24);
      uint64_t v44 = *(void *)(v42 + 88);
      uint64_t v43 = *(std::__shared_weak_count **)(v42 + 96);
      if (v43) {
        atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v80 = v43;
      AMCP::DAL::DAL_Timed_Segment::translate_range((double **)&v116, v139, (uint64_t)v132);
      if ((void)v116 != *((void *)&v116 + 1))
      {
        if (v44)
        {
          if ((*(unsigned char *)(v44 + 20) & 1) == 0 && *(_DWORD *)(v44 + 40) == 16) {
            operator new();
          }
          if ((*(unsigned char *)(v44 + 20) & 1) == 0 && *(_DWORD *)(v44 + 40) == 32) {
            operator new();
          }
          if ((*(unsigned char *)(v44 + 20) & 1) != 0 && *(_DWORD *)(v44 + 40) == 32) {
            operator new();
          }
        }
        AMCP::Log::Scope_Registry::get(v45);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v70 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
        {
          int v71 = pthread_self();
          mach_port_t v72 = pthread_mach_thread_np(v71);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v72;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "Tone_Generator.cpp";
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = 77;
          LOWORD(v127) = 2080;
          *(void *)((char *)&v127 + 2) = "not (false)";
          _os_log_error_impl(&dword_1BAA78000, v70, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Format not supported by Tone_Generator", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v120);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Format not supported by Tone_Generator", (uint64_t)&v102);
        std::logic_error::logic_error(&v119, &v102);
        v119.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error((std::logic_error *)&v121, &v119);
        long long v123 = 0uLL;
        uint64_t v124 = 0;
        int v125 = -1;
        std::runtime_error v121 = (NSObject **)&unk_1F1489CC8;
        v122.__imp_.__imp_ = (const char *)&unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v121);
        *((void *)&v127 + 1) = "std::unique_ptr<DAL::Sample_Format_Handler> AMCP::Tone_Generator::create_handler(const "
                                 "DAL::Container &, DAL::Sample_Time_Range) const";
        *(void *)&long long v128 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Tone_Generator.cpp";
        DWORD2(v128) = 77;
        applesauce::backtrace::snapshot_N<64>::snapshot_N(&v118.__r_.__value_.__l.__data_);
        std::string v105 = v118;
        v104 = &unk_1F148AA90;
        memset(&v118, 0, sizeof(v118));
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      *(void *)buf = &v116;
      std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)buf);
      if (v80) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v80);
      }
      uint64_t v46 = *(void *)(v40 + 24);
      *(_OWORD *)buf = v81;
      *(void *)&buf[16] = v82;
      long long v127 = v83;
      if (*((void *)&v83 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v83 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      long long v128 = v84;
      uint64_t v129 = v85;
      uint64_t v130 = v86;
      int v131 = v87;
      if (v87) {
        atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      AMCP::DAL::Fixed_Buffer::create_readable_range(v46, buf, (uint64_t)v88);
      if (v131) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v131);
      }
      if (*((void *)&v127 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v127 + 1));
      }
      AMCP::DAL::DAL_Time::operator-((uint64_t)&v121, (AMCP::DAL::DAL_Time *)&v90, (AMCP::DAL::DAL_Time *)v88);
      AMCP::DAL::DAL_Time::operator-((uint64_t)&v104, (AMCP::DAL::DAL_Time *)&v84, (AMCP::DAL::DAL_Time *)&v81);
      BOOL v47 = AMCP::DAL::DAL_Time_Delta::operator==((AMCP::DAL::DAL_Time_Delta *)&v121, (uint64_t)&v104);
      if (v106) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v106);
      }
      uint64_t v48 = (AMCP::Log::Scope_Registry *)*((void *)&v123 + 1);
      if (*((void *)&v123 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v123 + 1));
      }
      if (!v47)
      {
        AMCP::Log::Scope_Registry::get(v48);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v121, "com.apple.coreaudio", "AMCP");
        uint64_t v76 = *v121;
        if (v122.__vftable) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v122.__vftable);
        }
        if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
        {
          uint64_t v77 = pthread_self();
          mach_port_t v78 = pthread_mach_thread_np(v77);
          LODWORD(v121) = 67109890;
          HIDWORD(v121) = v78;
          LOWORD(v122.__vftable) = 2080;
          *(std::logic_error_vtbl **)((char *)&v122.__vftable + 2) = (std::logic_error_vtbl *)"Tone_Generator.cpp";
          WORD1(v122.__imp_.__imp_) = 1024;
          HIDWORD(v122.__imp_.__imp_) = 232;
          LOWORD(v123) = 2080;
          *(void *)((char *)&v123 + 2) = "not (results.get_time_range().length() == range.length())";
          _os_log_error_impl(&dword_1BAA78000, v76, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v121, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v120);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v118);
        std::logic_error::logic_error(&v119, &v118);
        v119.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error((std::logic_error *)&v104, &v119);
        v105.__r_.__value_.__r.__words[2] = 0;
        mach_port_t v106 = 0;
        uint64_t v107 = 0;
        int v108 = -1;
        v104 = &unk_1F1489CC8;
        v105.__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v121, (uint64_t)&v104);
        *((void *)&v123 + 1) = "AMCP::DAL::Readable_Range AMCP::Tone_Generator_Buffer::generate_audio_in_buffer(const A"
                                 "MCP::DAL::DAL_Time_Range &)";
        uint64_t v124 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Tone_Generator.cpp";
        int v125 = 232;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v116);
        *(_OWORD *)&v102.__r_.__value_.__r.__words[1] = v116;
        v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
        uint64_t v103 = v117;
        long long v116 = 0uLL;
        uint64_t v117 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      if (*((void *)&v138 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v138 + 1));
      }
      if (*((void *)&v134 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v134 + 1));
      }
      if (v87) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v87);
      }
      if (*((void *)&v83 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
      }
      AMCP::DAL::DAL_Timed_Segment::translate_range((double **)v132, v92, (uint64_t)v88);
      uint64_t v49 = *(double **)v132;
      int v50 = *(_DWORD *)(*((void *)a1 + 93) + 56);
      double v52 = **(double **)v132;
      double v51 = *(double *)(*(void *)v132 + 8);
      (*(void (**)(long long *__return_ptr))(*(void *)v92 + 56))(&v109);
      AMCP::DAL::PCM_Data_Handler::get_other_data_bytes((AMCP::Log::Scope_Registry *)v109, *v49, v49[1]);
      long long v54 = v53;
      size_t v55 = v50 * vcvtmd_s64_f64(v51 - v52);
      if (*((void *)&v109 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v109 + 1));
      }
      memcpy(v79[1], v54, v55);
      double v56 = *(NSObject ***)v132;
      if ((void)v133 - *(void *)v132 == 192)
      {
        int v57 = *(_DWORD *)(*((void *)a1 + 93) + 56);
        double v59 = *(double *)(*(void *)v132 + 96);
        double v58 = *(double *)(*(void *)v132 + 104);
        (*(void (**)(long long *__return_ptr))(*(void *)v92 + 56))(&v109);
        AMCP::DAL::PCM_Data_Handler::get_other_data_bytes((AMCP::Log::Scope_Registry *)v109, *((double *)v56 + 12), *((double *)v56 + 13));
        uint64_t v61 = v60;
        size_t v62 = v57 * vcvtmd_s64_f64(v58 - v59);
        if (*((void *)&v109 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v109 + 1));
        }
        memcpy((char *)v79[1] + (int)v55, v61, v62);
      }
      *(void *)&long long v109 = v132;
      std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v109);
      if (v91) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v91);
      }
      if (v89) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v89);
      }
      if (*((void *)&v96 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v96 + 1));
      }
      if (*((void *)&v100 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v100 + 1));
      }
      uint64_t v63 = (std::__shared_weak_count *)*((void *)&v101 + 1);
      if (*((void *)&v101 + 1)) {
        goto LABEL_116;
      }
    }
  }
  return 1;
}

void sub_1BAE7188C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (a2)
  {
    AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&a28);
    double v52 = *(std::__shared_weak_count **)(v50 - 184);
    if (v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v52);
    }
    uint64_t v53 = *(std::__shared_weak_count **)(v50 - 224);
    if (v53) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v53);
    }
    AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&a18);
    if (a43) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a43);
    }
    if (a48) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a48);
    }
    if (a50) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a50);
    }
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMCP::Null::Engine::begin_reading(AMCP::Null::Engine *this, double a2)
{
  return 1;
}

uint64_t AMCP::Null::Engine::end_io_cycle(AMCP::Null::Engine *this)
{
  return 1;
}

uint64_t AMCP::Null::Engine::begin_io_cycle(AMCP::Null::Engine *this)
{
  return 1;
}

uint64_t AMCP::Null::Engine::end_io_thread(AMCP::Null::Engine *this)
{
  return 1;
}

uint64_t AMCP::Null::Engine::begin_io_thread(AMCP::Null::Engine *this)
{
  return 1;
}

uint64_t AMCP::Null::Engine::maximum_past_data(AMCP::Null::Engine *this)
{
  return (10 * *((_DWORD *)this + 10));
}

uint64_t AMCP::Null::Engine::available_past_data(AMCP::Null::Engine *this)
{
  return *((unsigned int *)this + 182);
}

uint64_t AMCP::Null::Engine::set_past_data_enabled(AMCP::Null::Engine *this)
{
  return 1;
}

uint64_t AMCP::Null::Engine::is_past_data_enabled(AMCP::Null::Engine *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 184))();
}

BOOL AMCP::Null::Engine::supports_past_data(AMCP::Null::Engine *this)
{
  return *((_DWORD *)this + 182) != 0;
}

void AMCP::Null::Engine::set_output_stream_active_list(uint64_t a1, uint64_t a2)
{
  AMCP::Core::Implementation::Simple_Engine_IO_State::set_output_stream_active_list(&__p, a1 + 120, a2);
  if (__p) {
    operator delete(__p);
  }
}

void AMCP::Null::Engine::get_output_stream_active_list(os_unfair_lock_s *this@<X0>, AMCP::Core::Implementation::Simple_Engine_IO_State *a2@<X8>)
{
}

void AMCP::Null::Engine::set_input_stream_active_list(uint64_t a1, uint64_t a2)
{
  AMCP::Core::Implementation::Simple_Engine_IO_State::set_input_stream_active_list(&__p, a1 + 120, a2);
  if (__p) {
    operator delete(__p);
  }
}

void AMCP::Null::Engine::get_input_stream_active_list(os_unfair_lock_s *this@<X0>, AMCP::Core::Implementation::Simple_Engine_IO_State *a2@<X8>)
{
}

uint64_t AMCP::Null::Engine::set_transport_state(uint64_t a1, signed int a2)
{
  v59[9] = *MEMORY[0x1E4F143B8];
  int v4 = atomic_load((unsigned int *)(a1 + 136));
  int v5 = MEMORY[0x1C18597F0]();
  int v25 = v5;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = a2 < 1;
  }
  if (v6)
  {
    if (v4 >= 1 && a2 == 0) {
      AMCP::Null::Engine::stop((AMCP::Null::Engine *)a1);
    }
  }
  else
  {
    kdebug_trace();
    AMCP::Core::Implementation::Simple_Engine_IO_State::take_power_assertions(a1 + 120);
    AMCP::IO_Clock::reset_time((os_unfair_lock_s *)(a1 + 560));
    kdebug_trace();
    CFStringRef v8 = CFStringCreateWithBytes(0, (const UInt8 *)"fail_to_start", 13, 0x8000100u, 0);
    CFStringRef v9 = v8;
    *(void *)buf = v8;
    if (!v8)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFComparisonResult v10 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)(a1 + 720), (const __CFString **)buf);
    CFRelease(v9);
    if (v10 == kCFCompareEqualTo)
    {
      AMCP::Log::Scope_Registry::get(v11);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v19 = **(NSObject ***)buf;
      if (*(void *)v39) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v39);
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = pthread_self();
        mach_port_t v21 = pthread_mach_thread_np(v20);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v21;
        *(_WORD *)int v39 = 2080;
        *(void *)&v39[2] = "Null_Engine.cpp";
        __int16 v40 = 1024;
        int v41 = 398;
        _os_log_error_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: couldn't start the hardware", buf, 0x18u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&cf);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"couldn't start the hardware", (uint64_t)&v29);
      std::runtime_error::runtime_error(&v30, &v29);
      std::runtime_error::runtime_error(&v32, &v30);
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      v37[0] = -1;
      v32.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      double v33 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v32);
      *((void *)&v42 + 1) = "void AMCP::Null::Engine::start()";
      *(void *)&long long v43 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Engine.cpp";
      DWORD2(v43) = 398;
      std::vector<void *>::vector(&v26);
      int v22 = backtrace((void **)v26, (*((void *)&v26 + 1) - (void)v26) >> 3);
      std::vector<void *>::resize((char **)&v26, v22);
      *(_OWORD *)&__p[1] = v26;
      __p[3] = v27;
      long long v26 = 0uLL;
      double v27 = 0;
      __p[0] = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    uint64_t v12 = *(void *)(a1 + 736);
    if (v12 && *(unsigned char *)(v12 + 24))
    {
      uint64_t v13 = *(void *)(v12 + 48);
      std::string::basic_string[abi:ne180100]<0>(&v29, "Null_Engine_Reflector - stream 0");
      std::string::basic_string[abi:ne180100]<0>(buf, "write");
      long long v42 = 0u;
      long long v43 = 0u;
      LOBYTE(v42) = 1;
      uint64_t v44 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      std::string::basic_string[abi:ne180100]<0>(v45, "create unique name");
      long long v46 = 0u;
      long long v47 = 0u;
      LOBYTE(v46) = 1;
      uint64_t v48 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      std::string::basic_string[abi:ne180100]<0>(v49, "write time stamps");
      long long v50 = 0u;
      long long v51 = 0u;
      LOBYTE(v50) = 1;
      double v52 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      get_audio_capture_folder(__p);
      std::string::basic_string[abi:ne180100]<0>(v53, "file location");
      long long v54 = *(_OWORD *)__p;
      size_t v55 = __p[2];
      uint64_t v56 = 0;
      memset(__p, 0, 24);
      int v57 = AMCP::Implementation::In_Place_Storage<std::string>::dispatch;
      std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<char const* const&,std::string const&,0>(v58, "name", (long long *)&v29);
      asbd_to_dictionary((const CA::StreamDescription *)&cf, (uint64_t *)v13);
      std::string::basic_string[abi:ne180100]<0>(v59, "asbd");
      memset(&v59[4], 0, 24);
      v59[3] = cf;
      CFTypeRef cf = 0;
      v59[7] = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
      *(void *)&long long v26 = buf;
      *((void *)&v26 + 1) = 6;
      AMCP::DAL::DAL_Settings::DAL_Settings((unint64_t)&v32, (uint64_t *)&v26);
      uint64_t v14 = 96;
      do
      {
        uint64_t v15 = &buf[v14 * 4];
        long long v16 = *(void (**)(void, uint8_t *, void, void))&v37[v14];
        if (v16) {
          v16(0, v15 - 40, 0, 0);
        }
        if ((char)*(v15 - 41) < 0) {
          operator delete(*((void **)v15 - 8));
        }
        v14 -= 16;
      }
      while (v14 * 4);
      if (cf) {
        CFRelease(cf);
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      std::allocate_shared[abi:ne180100]<AMCP::DAL::File,std::allocator<AMCP::DAL::File>,CA::StreamDescription const&,AMCP::DAL::DAL_Settings &,void>((AMCP::DAL::DALSupport **)&v30, *(_DWORD *)(v13 + 8), (uint64_t)&v32);
      std::runtime_error v24 = v30;
      std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)&v32);
      uint64_t v17 = *(std::__shared_weak_count **)(v12 + 40);
      *(std::runtime_error *)(v12 + 32) = v24;
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      int v5 = v25;
    }
  }
  atomic_store(a2, (unsigned int *)(a1 + 136));
  uint64_t result = MEMORY[0x1C18597F0]();
  if ((int)result > v5)
  {
    atomic_store(0, (unsigned int *)(a1 + 136));
    return AMCP::Null::Engine::stop((AMCP::Null::Engine *)a1);
  }
  return result;
}

void sub_1BAE72608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, char a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,CFTypeRef cf,std::runtime_error a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::runtime_error a36,uint64_t a37)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<AMCP::Null::Engine::set_transport_state(AMCP::Transport_State)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  if ((int)MEMORY[0x1C18597F0]() > *(_DWORD *)a1)
  {
    BOOL v2 = *(unsigned int **)(a1 + 8);
    atomic_store(0, v2 + 34);
    AMCP::Null::Engine::stop((AMCP::Null::Engine *)v2);
  }
  return a1;
}

uint64_t AMCP::Null::Engine::stop(AMCP::Null::Engine *this)
{
  uint64_t v2 = *((void *)this + 92);
  if (v2)
  {
    if (*(unsigned char *)(v2 + 24))
    {
      double v3 = *(std::__shared_weak_count **)(v2 + 40);
      *(void *)(v2 + 32) = 0;
      *(void *)(v2 + 40) = 0;
      if (v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      }
    }
  }
  kdebug_trace();
  AMCP::IO_Clock::reset_time((os_unfair_lock_s *)this + 140);
  AMCP::Core::Implementation::Simple_Engine_IO_State::release_power_assertions((uint64_t)this + 120);
  return kdebug_trace();
}

uint64_t AMCP::Null::Engine::get_transport_state(AMCP::Null::Engine *this)
{
  return atomic_load((unsigned int *)this + 34);
}

__n128 AMCP::Null::Engine::get_stream_format@<Q0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a1 + 72;
  uint64_t v5 = 72;
  if (!a2)
  {
    uint64_t v5 = 96;
    uint64_t v4 = a1 + 96;
  }
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(v4 + 8);
  while (1)
  {
    if (v6 == v7)
    {
      *(void *)(a4 + 32) = 0;
      result.n128_u64[0] = 0;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      return result;
    }
    if (*(_DWORD *)v6 == a3) {
      break;
    }
    v6 += 56;
  }
  __n128 result = *(__n128 *)(v6 + 16);
  long long v9 = *(_OWORD *)(v6 + 32);
  *(__n128 *)a4 = result;
  *(_OWORD *)(a4 + 16) = v9;
  *(void *)(a4 + 32) = *(void *)(v6 + 48);
  return result;
}

void AMCP::Null::Engine::get_output_format_list(AMCP::Null::Engine *this@<X0>, AMCP::Core::Implementation::Simple_Engine_Data *a2@<X8>)
{
}

void AMCP::Null::Engine::get_input_format_list(AMCP::Null::Engine *this@<X0>, AMCP::Core::Implementation::Simple_Engine_Data *a2@<X8>)
{
}

uint64_t AMCP::Null::Engine::get_output_latency(AMCP::Null::Engine *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t AMCP::Null::Engine::get_input_latency(AMCP::Null::Engine *this)
{
  return *((unsigned int *)this + 15);
}

uint64_t AMCP::Null::Engine::get_output_safety_offset(AMCP::Null::Engine *this)
{
  return *((unsigned int *)this + 14);
}

uint64_t AMCP::Null::Engine::get_input_safety_offset(AMCP::Null::Engine *this)
{
  return *((unsigned int *)this + 13);
}

BOOL AMCP::Null::Engine::has_output_streams(AMCP::Null::Engine *this)
{
  return *((void *)this + 12) != *((void *)this + 13);
}

BOOL AMCP::Null::Engine::has_input_streams(AMCP::Null::Engine *this)
{
  return *((void *)this + 9) != *((void *)this + 10);
}

uint64_t AMCP::Null::Engine::supports_prewarming(AMCP::Null::Engine *this)
{
  return *((unsigned __int8 *)this + 48);
}

uint64_t AMCP::Null::Engine::get_clock_domain(AMCP::Null::Engine *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t AMCP::Null::Engine::get_suggested_ring_buffer_frame_size(AMCP::Null::Engine *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t AMCP::Null::Engine::get_max_io_buffer_frame_size(AMCP::Null::Engine *this)
{
  return (3 * *((_DWORD *)this + 10)) >> 3;
}

double AMCP::Null::Engine::get_sample_rate(AMCP::Null::Engine *this)
{
  return *((double *)this + 4);
}

void *AMCP::Null::Engine::get_device_uid@<X0>(const void **this@<X0>, void *a2@<X8>)
{
  return AMCP::Core::Implementation::Simple_Engine_Data::get_device_uid(a2, this[3]);
}

void AMCP::Null::Engine::~Engine(AMCP::Null::Engine *this)
{
  AMCP::Null::Engine::~Engine(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  const void *v11;
  std::__shared_weak_count *v12;

  *(void *)this = &unk_1F147DE40;
  AMCP::Null::Engine::set_transport_state((uint64_t)this, 0);
  uint64_t v2 = *((void *)this + 93);
  *((void *)this + 93) = 0;
  if (v2) {
    std::default_delete<AMCP::Tone_Generator_Buffer>::operator()[abi:ne180100](v2);
  }
  double v3 = *((void *)this + 92);
  *((void *)this + 92) = 0;
  if (v3) {
    std::default_delete<AMCP::Null::Null_Engine_Reflector>::operator()[abi:ne180100](v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 90);
  if (v4) {
    CFRelease(v4);
  }
  AMCP::IO_Clock::~IO_Clock((AMCP::Null::Engine *)((char *)this + 560));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Null::Engine *)((char *)this + 240));
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (void *)*((void *)this + 22);
  if (v7) {
    operator delete(v7);
  }
  CFStringRef v8 = (void *)*((void *)this + 18);
  if (v8) {
    operator delete(v8);
  }
  long long v9 = (void *)*((void *)this + 12);
  if (v9)
  {
    *((void *)this + 13) = v9;
    operator delete(v9);
  }
  CFComparisonResult v10 = (void *)*((void *)this + 9);
  if (v10)
  {
    *((void *)this + 10) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (const void *)*((void *)this + 3);
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
}

void std::default_delete<AMCP::Tone_Generator_Buffer>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x1C1859840);
}

void std::default_delete<AMCP::Null::Null_Engine_Reflector>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  double v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (void **)a1;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v4);

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Null::Engine::Engine(applesauce::CF::StringRef,double,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&,AMCP::Null::Input_Source,BOOL,unsigned int)::$_2,std::allocator<AMCP::Null::Engine::Engine(applesauce::CF::StringRef,double,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&,AMCP::Null::Input_Source,BOOL,unsigned int)::$_2>,CA::TimeStamp ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Null::Engine::Engine(applesauce::CF::StringRef,double,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&,AMCP::Null::Input_Source,BOOL,unsigned int)::$_2,std::allocator<AMCP::Null::Engine::Engine(applesauce::CF::StringRef,double,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&,AMCP::Null::Input_Source,BOOL,unsigned int)::$_2>,CA::TimeStamp ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6EngineC1EN10applesauce2CF9StringRefEdjbjjjjS4_RKNSt3__16vectorINS_4Core14Implementation18Simple_Engine_Data11Stream_InfoENS5_9allocatorISA_EEEESF_RKNS_7Utility14Dispatch_QueueENS0_12Input_SourceEbjE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::Null::Engine::Engine(applesauce::CF::StringRef,double,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&,AMCP::Null::Input_Source,BOOL,unsigned int)::$_2,std::allocator<AMCP::Null::Engine::Engine(applesauce::CF::StringRef,double,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&,AMCP::Null::Input_Source,BOOL,unsigned int)::$_2>,CA::TimeStamp ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 304))();
}

uint64_t std::__function::__func<AMCP::Null::Engine::Engine(applesauce::CF::StringRef,double,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&,AMCP::Null::Input_Source,BOOL,unsigned int)::$_2,std::allocator<AMCP::Null::Engine::Engine(applesauce::CF::StringRef,double,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&,AMCP::Null::Input_Source,BOOL,unsigned int)::$_2>,CA::TimeStamp ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F147DFF8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Null::Engine::Engine(applesauce::CF::StringRef,double,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&,AMCP::Null::Input_Source,BOOL,unsigned int)::$_2,std::allocator<AMCP::Null::Engine::Engine(applesauce::CF::StringRef,double,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&,AMCP::Null::Input_Source,BOOL,unsigned int)::$_2>,CA::TimeStamp ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F147DFF8;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Null::Engine::Engine(applesauce::CF::StringRef,double,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&,AMCP::Null::Input_Source,BOOL,unsigned int)::$_2,std::allocator<AMCP::Null::Engine::Engine(applesauce::CF::StringRef,double,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&,AMCP::Null::Input_Source,BOOL,unsigned int)::$_2>,CA::TimeStamp ()(void)>::~__func()
{
}

caulk::rt_safe_memory_resource *AMCP::DAL::Mixing_Ring_Buffer::get_direct_write_ranges@<X0>(AMCP::DAL::Mixing_Ring_Buffer *this@<X0>, const AMCP::DAL::DAL_Time_Range *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  AMCP::DAL::Ring_Buffer_Base::translate_range(this, a2);
  uint64_t v5 = v22;
  for (uint64_t i = v23; v5 != i; v5 += 96)
  {
    v14[0] = *(_OWORD *)v5;
    long long v7 = *(_OWORD *)(v5 + 16);
    uint64_t v15 = *(void *)(v5 + 32);
    v14[1] = v7;
    uint64_t v16 = *(void *)(v5 + 40);
    CFStringRef v8 = *(std::__shared_weak_count **)(v5 + 48);
    uint64_t v17 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v9 = *(_OWORD *)(v5 + 56);
    uint64_t v19 = *(void *)(v5 + 72);
    long long v18 = v9;
    uint64_t v20 = *(void *)(v5 + 80);
    CFComparisonResult v10 = *(std::__shared_weak_count **)(v5 + 88);
    mach_port_t v21 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v11 = *((void *)this + 12);
    v13.n128_u64[0] = *((void *)this + 11);
    v13.n128_u64[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    std::vector<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::emplace_back<AMCP::DAL::Buffer_Time_Translator::Translation_Range&,AMCP::DAL::Container>(a3, (uint64_t)v14, &v13);
    if (v13.n128_u64[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v13.n128_u64[1]);
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  *(void *)&v14[0] = &v22;
  return std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)v14);
}

void sub_1BAE72EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::vector<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Mixing_Ring_Buffer::get_allowed_read_range(AMCP::DAL::Mixing_Ring_Buffer *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 64))();
}

void AMCP::DAL::Mixing_Ring_Buffer::receive_data_at_range(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  (*(void (**)(void *__return_ptr))(*a1 + 64))(v15);
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::intersection((uint64_t)v22, a4, v15);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v27, v22);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::difference((uint64_t)v22, (uint64_t)a4, &v27);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)v18, v22);
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v27, (AMCP::DAL::DAL_Time *)&v31))
  {
    long long v7 = v27;
    uint64_t v8 = v28;
    uint64_t v9 = v29;
    CFComparisonResult v10 = v30;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v11 = v31;
    uint64_t v12 = v32;
    uint64_t v13 = v33;
    uint64_t v14 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AMCP::DAL::Readable_Range::Readable_Range((uint64_t)v15, (uint64_t)&v7, a3);
    AMCP::DAL::Ring_Buffer_Base::receive_data_mix(a1, (uint64_t)v15);
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)v18, (AMCP::DAL::DAL_Time *)&v20)) {
    AMCP::DAL::Ring_Buffer_Base::receive_data_write_at_range((uint64_t)a1, a3, a4);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
}

void sub_1BAE73110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&a20);
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&a9);
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&a31);
  std::pair<caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>,caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>>::~pair(&a41);
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)(v41 - 128));
  _Unwind_Resume(a1);
}

void caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::difference(uint64_t a1, uint64_t a2, void *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  if (v7)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = v7;
  }
  else
  {
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = 0;
  }
  uint64_t v8 = (long long *)(a2 + 40);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  uint64_t v9 = (long long *)(a1 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 64);
  CFComparisonResult v10 = *(std::__shared_weak_count **)(a2 + 72);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v10;
  caulk::make_empty_time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>((uint64_t)&v48, a2);
  *(_OWORD *)(a1 + 80) = v48;
  *(void *)(a1 + 96) = v49;
  uint64_t v38 = (std::__shared_weak_count *)*((void *)&v50 + 1);
  *(_OWORD *)(a1 + 104) = v50;
  *(_OWORD *)(a1 + 120) = v51;
  *(void *)(a1 + 136) = v52;
  uint64_t v12 = (long long *)(a3 + 5);
  int v39 = (std::__shared_weak_count *)*((void *)&v53 + 1);
  *(_OWORD *)(a1 + 144) = v53;
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a3, (AMCP::DAL::DAL_Time *)(a3 + 5))
    && caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::intersects((void *)a2, a3))
  {
    uint64_t v13 = (_OWORD *)(a1 + 80);
    uint64_t v14 = a1 + 120;
    if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a2, (AMCP::DAL::DAL_Time *)a3))
    {
      if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a3 + 5), (AMCP::DAL::DAL_Time *)(a2 + 40)))
      {
        long long v48 = *(_OWORD *)a2;
        uint64_t v15 = *(void *)(a2 + 24);
        uint64_t v49 = *(void *)(a2 + 16);
        uint64_t v16 = *(void *)(a2 + 32);
        if (v16) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
        }
        long long v40 = *(_OWORD *)a3;
        uint64_t v17 = a3[3];
        uint64_t v44 = a3[2];
        uint64_t v18 = a3[4];
        if (v18) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
        }
        *(_OWORD *)a1 = v48;
        *(void *)(a1 + 16) = v49;
        *(void *)(a1 + 24) = v15;
        uint64_t v19 = *(std::__shared_weak_count **)(a1 + 32);
        *(void *)(a1 + 32) = v16;
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        long long *v9 = v40;
        *(void *)(a1 + 56) = v44;
        *(void *)(a1 + 64) = v17;
        *(void *)(a1 + 72) = v18;
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        long long v48 = *v12;
        uint64_t v49 = a3[7];
        uint64_t v21 = a3[8];
        uint64_t v20 = a3[9];
        uint64_t v14 = a1 + 120;
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        long long v41 = *v8;
        uint64_t v45 = *(void *)(a2 + 56);
        uint64_t v23 = *(void *)(a2 + 64);
        uint64_t v22 = *(void *)(a2 + 72);
        if (v22) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
        }
        CFComparisonResult v10 = v39;
        *uint64_t v13 = v48;
        *(void *)(a1 + 96) = v49;
        *(void *)(a1 + 104) = v21;
        *(void *)(a1 + 112) = v20;
        if (v38) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v38);
        }
        *(_OWORD *)(a1 + 120) = v41;
        *(void *)(a1 + 136) = v45;
        *(void *)(a1 + 144) = v23;
        *(void *)(a1 + 152) = v22;
        if (!v39) {
          goto LABEL_34;
        }
      }
      else
      {
        long long v48 = *(_OWORD *)a2;
        uint64_t v33 = *(void *)(a2 + 24);
        uint64_t v49 = *(void *)(a2 + 16);
        uint64_t v34 = *(void *)(a2 + 32);
        if (v34) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
        }
        long long v43 = *(_OWORD *)a3;
        uint64_t v35 = a3[3];
        uint64_t v47 = a3[2];
        uint64_t v36 = a3[4];
        if (v36) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
        }
        *(_OWORD *)a1 = v48;
        *(void *)(a1 + 16) = v49;
        *(void *)(a1 + 24) = v33;
        uint64_t v37 = *(std::__shared_weak_count **)(a1 + 32);
        *(void *)(a1 + 32) = v34;
        if (v37) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v37);
        }
        long long *v9 = v43;
        *(void *)(a1 + 56) = v47;
        *(void *)(a1 + 64) = v35;
        *(void *)(a1 + 72) = v36;
        if (!v10) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      long long v48 = *v12;
      uint64_t v49 = a3[7];
      uint64_t v25 = a3[8];
      uint64_t v24 = a3[9];
      if (v24) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
      }
      long long v42 = *v9;
      uint64_t v46 = *(void *)(a1 + 56);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)a1 = v48;
      *(void *)(a1 + 16) = v49;
      *(void *)(a1 + 24) = v25;
      long long v26 = *(std::__shared_weak_count **)(a1 + 32);
      *(void *)(a1 + 32) = v24;
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      long long *v9 = v42;
      *(void *)(a1 + 56) = v46;
      *(void *)(a1 + 64) = v11;
      *(void *)(a1 + 72) = v10;
      if (!v10) {
        goto LABEL_34;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
LABEL_34:
    if (!AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a1, (AMCP::DAL::DAL_Time *)(a1 + 40)))
    {
      *(_DWORD *)a1 = *(_DWORD *)(a1 + 80);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a1 + 88);
      uint64_t v27 = *(void *)(a1 + 104);
      uint64_t v28 = *(std::__shared_weak_count **)(a1 + 112);
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = *(std::__shared_weak_count **)(a1 + 32);
      *(void *)(a1 + 24) = v27;
      *(void *)(a1 + 32) = v28;
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 120);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a1 + 128);
      uint64_t v30 = *(void *)(a1 + 144);
      long long v31 = *(std::__shared_weak_count **)(a1 + 152);
      if (v31) {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v32 = *(std::__shared_weak_count **)(a1 + 72);
      *(void *)(a1 + 64) = v30;
      *(void *)(a1 + 72) = v31;
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
      caulk::make_empty_time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>((uint64_t)&v48, a2);
      *uint64_t v13 = v48;
      *(void *)(a1 + 96) = v49;
      *(_OWORD *)(a1 + 104) = v50;
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      *(_OWORD *)uint64_t v14 = v51;
      *(void *)(v14 + 16) = v52;
      *(_OWORD *)(a1 + 144) = v53;
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
    }
  }
}

void sub_1BAE735C4(_Unwind_Exception *a1)
{
  std::pair<caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>,caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>>::~pair(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Readable_Range::Readable_Range(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  long long v10 = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v7 = *(void *)(a3 + 80);
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 24) = v4;
  *(void *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v10;
  *(_OWORD *)(a1 + 64) = v6;
  *(void *)(a1 + 80) = v7;
  if (*((void *)&v4 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v4 + 1) + 8), 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
  }
  return a1;
}

void *std::pair<caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>,caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>>::~pair(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[19];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[14];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[9];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[4];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return a1;
}

void caulk::make_empty_time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 32);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v5 = *(void *)(a2 + 24);
    long long v4 = *(std::__shared_weak_count **)(a2 + 32);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_DWORD *)a1 = 2;
    *(void *)(a1 + 12) = 0;
    *(void *)(a1 + 4) = 0;
    *(_DWORD *)(a1 + 20) = 0;
    *(void *)(a1 + 24) = v2;
    *(void *)(a1 + 32) = v3;
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    *(_DWORD *)(a1 + 40) = 2;
    *(void *)(a1 + 52) = 0;
    *(void *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 60) = 0;
    *(void *)(a1 + 64) = v5;
    *(void *)(a1 + 72) = v4;
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  else
  {
    *(_DWORD *)a1 = 2;
    *(void *)(a1 + 12) = 0;
    *(void *)(a1 + 4) = 0;
    *(_DWORD *)(a1 + 20) = 0;
    *(void *)(a1 + 24) = v2;
    *(void *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 2;
    *(void *)(a1 + 52) = 0;
    *(void *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 60) = 0;
    *(void *)(a1 + 64) = v2;
    *(void *)(a1 + 72) = 0;
  }
}

BOOL caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::intersects(void *a1, void *a2)
{
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::intersection((uint64_t)v4, a1, a2);
  BOOL v2 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)v4, (AMCP::DAL::DAL_Time *)&v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2;
}

void sub_1BAE737FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void AMCP::DAL::Mixing_Ring_Buffer::receive_data(void *a1, uint64_t a2, void *a3)
{
  (*(void (**)(void *__return_ptr))(*a1 + 64))(v21);
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::intersection((uint64_t)v32, a3, v21);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v37, v32);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::difference((uint64_t)v32, (uint64_t)a3, &v37);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v24, v32);
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v37, (AMCP::DAL::DAL_Time *)&v41))
  {
    long long v13 = v37;
    uint64_t v14 = v38;
    uint64_t v15 = v39;
    uint64_t v16 = v40;
    if (v40) {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v17 = v41;
    uint64_t v18 = v42;
    uint64_t v19 = v43;
    uint64_t v20 = v44;
    if (v44) {
      atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AMCP::DAL::Readable_Range::Readable_Range((uint64_t)v21, (uint64_t)&v13, (uint64_t)a3);
    AMCP::DAL::Ring_Buffer_Base::receive_data_mix(a1, (uint64_t)v21);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v24, (AMCP::DAL::DAL_Time *)&v28))
  {
    long long v5 = v24;
    uint64_t v6 = v25;
    uint64_t v7 = v26;
    uint64_t v8 = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v9 = v28;
    uint64_t v10 = v29;
    uint64_t v11 = v30;
    uint64_t v12 = v31;
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AMCP::DAL::Readable_Range::Readable_Range((uint64_t)v21, (uint64_t)&v5, (uint64_t)a3);
    AMCP::DAL::Ring_Buffer_Base::receive_data_write((uint64_t)a1, (uint64_t)v21);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
}

void sub_1BAE73A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&a30);
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&a9);
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&a41);
  std::pair<caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>,caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>>::~pair(&a51);
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)(v51 - 112));
  _Unwind_Resume(a1);
}

void KaiserWindow::KaiserWindow(KaiserWindow *this, int a2, double a3)
{
  uint64_t v6 = 0;
  *(_DWORD *)this = a2;
  *((double *)this + 1) = a3;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  uint64_t v7 = (a2 + 1);
  if (a2 != -1)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100]((void *)this + 2, (a2 + 1));
    uint64_t v8 = (char *)*((void *)this + 3);
    bzero(v8, 4 * v7);
    *((void *)this + 3) = &v8[4 * v7];
    uint64_t v6 = (_DWORD *)*((void *)this + 2);
  }
  if (a3 >= 50.0)
  {
    double v9 = (a3 + -8.7) * 0.1102;
  }
  else
  {
    double v9 = 0.0;
    if (a3 > 21.0) {
      double v9 = (a3 + -21.0) * 0.07886 + pow(a3 + -21.0, 0.4) * 0.5842;
    }
  }
  bessi0(v9);
  if (a2)
  {
    uint64_t v11 = 0;
    double v12 = 1.0 / v10;
    do
    {
      bessi0(v9* sqrt(1.0- ((double)v11 - (double)((a2 - 1) >> 1))/ (double)((a2 - 1) >> 1)* (((double)v11 - (double)((a2 - 1) >> 1))/ (double)((a2 - 1) >> 1))));
      *(float *)&double v13 = v12 * v13;
      v6[++v11] = LODWORD(v13);
    }
    while (a2 != v11);
  }
  _DWORD *v6 = 0;
}

void sub_1BAE73D64(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<KaiserWindow>,std::reverse_iterator<KaiserWindow*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      long long v5 = *(void **)(v3 + 16);
      if (v5)
      {
        *(void *)(v3 + 24) = v5;
        operator delete(v5);
      }
      v3 += 40;
    }
  }
  return a1;
}

void bessi0(double a1)
{
  double v1 = fabs(a1);
  if (v1 >= 3.75) {
    exp(v1);
  }
}

uint64_t AMCP::DAL::STLI_Resampler::get_latency(AMCP::DAL::STLI_Resampler *this)
{
  return 0;
}

uint64_t AMCP::DAL::STLI_Resampler::get_expected_output_samples_for_input_samples(ShortTermLinearInterpolationResampler ***this, unsigned int a2, unint64_t *a3)
{
  unsigned int v5 = 100 * a2;
  unsigned int v6 = a2;
  ShortTermLinearInterpolationResampler::PreFlight(*this[12], &v6, &v5);
  uint64_t result = v5;
  *a3 = v6;
  return result;
}

uint64_t AMCP::DAL::STLI_Resampler::get_required_input_samples_for_output_samples(ShortTermLinearInterpolationResampler ***this, unsigned int a2)
{
  unsigned int v4 = a2;
  unsigned int v3 = 100 * a2;
  ShortTermLinearInterpolationResampler::PreFlight(*this[12], &v3, &v4);
  return v3;
}

double AMCP::DAL::STLI_Resampler::process(uint64_t a1, void *a2, uint64_t *a3, void *a4, double a5, double a6, double a7)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 96) == *(void *)(a1 + 104))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    int v71 = *buf;
    if (*(void *)v103) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v103);
    }
    if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v72 = pthread_self();
      mach_port_t v73 = pthread_mach_thread_np(v72);
      LODWORD(buf) = 67109890;
      HIDWORD(buf) = v73;
      *(_WORD *)uint64_t v103 = 2080;
      *(void *)&v103[2] = "STLI_Resampler.cpp";
      __int16 v104 = 1024;
      int v105 = 37;
      __int16 v106 = 2080;
      *(void *)uint64_t v107 = "not (not m_resamplers.empty())";
      _os_log_error_impl(&dword_1BAA78000, v71, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v91);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v95);
    std::logic_error::logic_error(&v89, &v95);
    v89.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v96, &v89);
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    int v101 = -1;
    v96.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v97 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v96);
    *(void *)&v107[6] = "virtual Sample_Time_Range AMCP::DAL::STLI_Resampler::process(const Sample_Group<float> &, Samp"
                          "le_Time, Container, Sample_Time_Range, const DAL_Settings &)";
    *(void *)&v107[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/STLI_Resampler.cpp";
    int v108 = 37;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v92.__r_.__value_.__l.__data_);
    int v93 = &unk_1F148AA90;
    std::string v94 = v92;
    memset(&v92, 0, sizeof(v92));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (*a2 == a2[1])
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    long long v74 = *buf;
    if (*(void *)v103) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v103);
    }
    if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v75 = pthread_self();
      mach_port_t v76 = pthread_mach_thread_np(v75);
      LODWORD(buf) = 67109890;
      HIDWORD(buf) = v76;
      *(_WORD *)uint64_t v103 = 2080;
      *(void *)&v103[2] = "STLI_Resampler.cpp";
      __int16 v104 = 1024;
      int v105 = 38;
      __int16 v106 = 2080;
      *(void *)uint64_t v107 = "not (not source.empty())";
      _os_log_error_impl(&dword_1BAA78000, v74, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v91);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v95);
    std::logic_error::logic_error(&v89, &v95);
    v89.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v96, &v89);
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    int v101 = -1;
    v96.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v97 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v96);
    *(void *)&v107[6] = "virtual Sample_Time_Range AMCP::DAL::STLI_Resampler::process(const Sample_Group<float> &, Samp"
                          "le_Time, Container, Sample_Time_Range, const DAL_Settings &)";
    *(void *)&v107[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/STLI_Resampler.cpp";
    int v108 = 38;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v92.__r_.__value_.__l.__data_);
    int v93 = &unk_1F148AA90;
    std::string v94 = v92;
    memset(&v92, 0, sizeof(v92));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "scale ratio");
  uint64_t v14 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a4, (unsigned __int8 *)&buf);
  if (v14) {
    double v15 = AMCP::Thing::convert_to<double>((uint64_t)(v14 + 40));
  }
  else {
    double v15 = 1.0;
  }
  if (SHIBYTE(v105) < 0) {
    operator delete(buf);
  }
  double v16 = a7 - a6;
  long long v17 = *(uint64_t **)(a1 + 96);
  uint64_t v18 = *(uint64_t **)(a1 + 104);
  if (v17 != v18)
  {
    int v19 = vcvtmd_s64_f64(v16);
    int v20 = vcvtmd_s64_f64(a5);
    do
    {
      ShortTermLinearInterpolationResampler::SetRate(*v17, v15);
      if (*(_DWORD *)(a1 + 88) == 1)
      {
        LODWORD(buf) = v20;
        LODWORD(v96.__vftable) = 100 * v20;
        uint64_t v21 = ShortTermLinearInterpolationResampler::PreFlight(**(ShortTermLinearInterpolationResampler ***)(a1 + 96), (unsigned int *)&buf, (unsigned int *)&v96);
        if (!LODWORD(v96.__vftable))
        {
          AMCP::Log::Scope_Registry::get(v21);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
          size_t v55 = *buf;
          if (*(void *)v103) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v103);
          }
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            uint64_t v56 = pthread_self();
            mach_port_t v57 = pthread_mach_thread_np(v56);
            LODWORD(buf) = 67109890;
            HIDWORD(buf) = v57;
            *(_WORD *)uint64_t v103 = 2080;
            *(void *)&v103[2] = "STLI_Resampler.cpp";
            __int16 v104 = 1024;
            int v105 = 50;
            __int16 v106 = 2080;
            *(void *)uint64_t v107 = "not (output_length > 0)";
            _os_log_error_impl(&dword_1BAA78000, v55, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v91);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v95);
          std::logic_error::logic_error(&v89, &v95);
          v89.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error(&v96, &v89);
          uint64_t v98 = 0;
          uint64_t v99 = 0;
          uint64_t v100 = 0;
          int v101 = -1;
          v96.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
          int v97 = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v96);
          *(void *)&v107[6] = "virtual Sample_Time_Range AMCP::DAL::STLI_Resampler::process(const Sample_Group<float> &"
                                ", Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
          *(void *)&v107[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/STLI_Resampler.cpp";
          int v108 = 50;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v92.__r_.__value_.__l.__data_);
          int v93 = &unk_1F148AA90;
          std::string v94 = v92;
          memset(&v92, 0, sizeof(v92));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        double v16 = (double)LODWORD(v96.__vftable);
      }
      else
      {
        LODWORD(buf) = v19;
        LODWORD(v96.__vftable) = 100 * v19;
        uint64_t v22 = ShortTermLinearInterpolationResampler::PreFlight(**(ShortTermLinearInterpolationResampler ***)(a1 + 96), (unsigned int *)&v96, (unsigned int *)&buf);
        LODWORD(v23) = v96.__vftable;
        if (vabdd_f64((double)v23, a5) > 1.0)
        {
          AMCP::Log::Scope_Registry::get(v22);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
          double v58 = *buf;
          if (*(void *)v103) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v103);
          }
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
          {
            double v59 = pthread_self();
            mach_port_t v60 = pthread_mach_thread_np(v59);
            LODWORD(buf) = 67109890;
            HIDWORD(buf) = v60;
            *(_WORD *)uint64_t v103 = 2080;
            *(void *)&v103[2] = "STLI_Resampler.cpp";
            __int16 v104 = 1024;
            int v105 = 56;
            __int16 v106 = 2080;
            *(void *)uint64_t v107 = "not (std::abs(static_cast<double>(actual_input_consumed) - number_of_samples.get_double()) <= 1.0)";
            _os_log_error_impl(&dword_1BAA78000, v58, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v91);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v95);
          std::logic_error::logic_error(&v89, &v95);
          v89.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error(&v96, &v89);
          uint64_t v98 = 0;
          uint64_t v99 = 0;
          uint64_t v100 = 0;
          int v101 = -1;
          v96.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
          int v97 = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v96);
          *(void *)&v107[6] = "virtual Sample_Time_Range AMCP::DAL::STLI_Resampler::process(const Sample_Group<float> &"
                                ", Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
          *(void *)&v107[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/STLI_Resampler.cpp";
          int v108 = 56;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v92.__r_.__value_.__l.__data_);
          int v93 = &unk_1F148AA90;
          std::string v94 = v92;
          memset(&v92, 0, sizeof(v92));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
      }
      ++v17;
    }
    while (v17 != v18);
  }
  long long v24 = (AMCP::DAL::PCM_Data_Handler *)*a3;
  AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>(*a3);
  AMCP::DAL::PCM_Data_Handler::get_other_data<float>((unint64_t *)&v95, v24, a6, a6 + v16);
  uint64_t v26 = *a3;
  if (*a3)
  {
    int v27 = *(_DWORD *)(v26 + 20);
    LODWORD(v26) = *(_DWORD *)(v26 + 36);
  }
  else
  {
    LOBYTE(v27) = 0;
  }
  if ((v27 & 0x20) != 0) {
    size_t v28 = 1;
  }
  else {
    size_t v28 = v26;
  }
  uint64_t v29 = a2[1] - *a2;
  if (v29 >> 4 != (uint64_t)(v95.__r_.__value_.__l.__size_ - v95.__r_.__value_.__r.__words[0]) >> 4)
  {
    AMCP::Log::Scope_Registry::get(v25);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    uint64_t v77 = *buf;
    if (*(void *)v103) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v103);
    }
    if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v78 = pthread_self();
      mach_port_t v79 = pthread_mach_thread_np(v78);
      LODWORD(buf) = 67109890;
      HIDWORD(buf) = v79;
      *(_WORD *)uint64_t v103 = 2080;
      *(void *)&v103[2] = "STLI_Resampler.cpp";
      __int16 v104 = 1024;
      int v105 = 65;
      __int16 v106 = 2080;
      *(void *)uint64_t v107 = "not (stream_count == dest.size())";
      _os_log_error_impl(&dword_1BAA78000, v77, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v88);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v92);
    std::logic_error::logic_error(&v91, &v92);
    v91.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v96, &v91);
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    int v101 = -1;
    v96.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v97 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v96);
    *(void *)&v107[6] = "virtual Sample_Time_Range AMCP::DAL::STLI_Resampler::process(const Sample_Group<float> &, Samp"
                          "le_Time, Container, Sample_Time_Range, const DAL_Settings &)";
    *(void *)&v107[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/STLI_Resampler.cpp";
    int v108 = 65;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v89);
    int v93 = &unk_1F148AA90;
    *(std::logic_error *)&v94.__r_.__value_.__l.__data_ = v89;
    v94.__r_.__value_.__r.__words[2] = v90;
    v89.__vftable = 0;
    v89.__imp_.__imp_ = 0;
    std::string::size_type v90 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if ((*(unsigned char *)(a1 + 60) & 0x20) != 0)
  {
    unint64_t v85 = v29 >> 4;
    if ((unint64_t)v29 >= 0x20)
    {
      uint64_t v44 = 0;
      unint64_t v45 = 0;
      unsigned int v46 = vcvtmd_s64_f64(a5);
      unsigned int v47 = vcvtmd_s64_f64(v16);
      if (v85 >> 1 <= 1) {
        uint64_t v48 = 1;
      }
      else {
        uint64_t v48 = v85 >> 1;
      }
      do
      {
        unsigned int v87 = v47;
        unsigned int v88 = v46;
        uint64_t v49 = *(void *)(a1 + 96);
        if (v45 >= (*(void *)(a1 + 104) - v49) >> 3) {
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        }
        long long v50 = (AMCP::Log::Scope_Registry *)ShortTermLinearInterpolationResampler::PushConvertFloat(*(ShortTermLinearInterpolationResampler **)(v49 + 8 * v45), *(float **)(*a2 + v44), *(float **)(*a2 + v44 + 16), *(float **)(v95.__r_.__value_.__r.__words[0] + v44), *(float **)(v95.__r_.__value_.__r.__words[0] + v44 + 16), &v88, &v87, v28, v28);
        int v51 = (int)v50;
        if (v50)
        {
          AMCP::Log::Scope_Registry::get(v50);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
          AudioObjectPropertyScope v66 = *buf;
          if (*(void *)v103) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v103);
          }
          if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
          {
            std::logic_error v67 = pthread_self();
            mach_port_t v68 = pthread_mach_thread_np(v67);
            uint64_t v69 = strerror(v51);
            LODWORD(buf) = 67110146;
            HIDWORD(buf) = v68;
            *(_WORD *)uint64_t v103 = 2080;
            *(void *)&v103[2] = "STLI_Resampler.cpp";
            __int16 v104 = 1024;
            int v105 = 98;
            __int16 v106 = 2080;
            *(void *)uint64_t v107 = "not (err == noErr)";
            *(_WORD *)&v107[8] = 2080;
            *(void *)&v107[10] = v69;
            _os_log_error_impl(&dword_1BAA78000, v66, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s err:%s while calling STLI PushConvertFloat", (uint8_t *)&buf, 0x2Cu);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v86);
          __cxa_allocate_exception(0x40uLL);
          uint64_t v70 = strerror(v51);
          caulk::make_string((caulk *)"err:%s while calling STLI PushConvertFloat", (uint64_t)&v92, v70);
          std::logic_error::logic_error(&v91, &v92);
          v91.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error(&v96, &v91);
          uint64_t v98 = 0;
          uint64_t v99 = 0;
          uint64_t v100 = 0;
          int v101 = -1;
          v96.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
          int v97 = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v96);
          *(void *)&v107[6] = "virtual Sample_Time_Range AMCP::DAL::STLI_Resampler::process(const Sample_Group<float> &"
                                ", Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
          *(void *)&v107[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/STLI_Resampler.cpp";
          int v108 = 98;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v89);
          int v93 = &unk_1F148AA90;
          *(std::logic_error *)&v94.__r_.__value_.__l.__data_ = v89;
          v94.__r_.__value_.__r.__words[2] = v90;
          v89.__vftable = 0;
          v89.__imp_.__imp_ = 0;
          std::string::size_type v90 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        ++v45;
        v44 += 16;
      }
      while (v48 != v45);
    }
    if ((v29 & 0x10) != 0)
    {
      unsigned int v87 = vcvtmd_s64_f64(v16);
      unsigned int v88 = vcvtmd_s64_f64(a5);
      uint64_t v52 = (AMCP::Log::Scope_Registry *)ShortTermLinearInterpolationResampler::PushConvertFloat(*(ShortTermLinearInterpolationResampler **)(*(void *)(a1 + 104) - 8), *(float **)(*a2 + 16 * v85 - 16), 0, *(float **)(v95.__r_.__value_.__r.__words[0] + 16 * v85 - 16), 0, &v88, &v87, v28, v28);
      int v53 = (int)v52;
      if (v52)
      {
        AMCP::Log::Scope_Registry::get(v52);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
        unint64_t v80 = *buf;
        if (*(void *)v103) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v103);
        }
        if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
        {
          long long v81 = pthread_self();
          mach_port_t v82 = pthread_mach_thread_np(v81);
          long long v83 = strerror(v53);
          LODWORD(buf) = 67110146;
          HIDWORD(buf) = v82;
          *(_WORD *)uint64_t v103 = 2080;
          *(void *)&v103[2] = "STLI_Resampler.cpp";
          __int16 v104 = 1024;
          int v105 = 108;
          __int16 v106 = 2080;
          *(void *)uint64_t v107 = "not (err == noErr)";
          *(_WORD *)&v107[8] = 2080;
          *(void *)&v107[10] = v83;
          _os_log_error_impl(&dword_1BAA78000, v80, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s err:%s while calling STLI PushConvertFloat", (uint8_t *)&buf, 0x2Cu);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v86);
        __cxa_allocate_exception(0x40uLL);
        long long v84 = strerror(v53);
        caulk::make_string((caulk *)"err:%s while calling STLI PushConvertFloat", (uint64_t)&v92, v84);
        std::logic_error::logic_error(&v91, &v92);
        v91.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error(&v96, &v91);
        uint64_t v98 = 0;
        uint64_t v99 = 0;
        uint64_t v100 = 0;
        int v101 = -1;
        v96.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        int v97 = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v96);
        *(void *)&v107[6] = "virtual Sample_Time_Range AMCP::DAL::STLI_Resampler::process(const Sample_Group<float> &, "
                              "Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
        *(void *)&v107[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/STLI_Resampler.cpp";
        int v108 = 108;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v89);
        int v93 = &unk_1F148AA90;
        *(std::logic_error *)&v94.__r_.__value_.__l.__data_ = v89;
        v94.__r_.__value_.__r.__words[2] = v90;
        v89.__vftable = 0;
        v89.__imp_.__imp_ = 0;
        std::string::size_type v90 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
    }
  }
  else
  {
    if (v28 >= 2)
    {
      unint64_t v30 = 0;
      unsigned int v31 = vcvtmd_s64_f64(a5);
      unsigned int v32 = vcvtmd_s64_f64(v16);
      uint64_t v33 = 4;
      do
      {
        unsigned int v87 = v32;
        unsigned int v88 = v31;
        uint64_t v34 = *(void *)(a1 + 96);
        if (v30 >= (*(void *)(a1 + 104) - v34) >> 3) {
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v35 = (AMCP::Log::Scope_Registry *)ShortTermLinearInterpolationResampler::PushConvertFloat(*(ShortTermLinearInterpolationResampler **)(v34 + 8 * v30), (float *)(*(void *)*a2 + v33 - 4), (float *)(*(void *)*a2 + v33), *(float **)v95.__r_.__value_.__l.__data_, (float *)(*(void *)v95.__r_.__value_.__l.__data_ + v33), &v88, &v87, v28, v28);
        int v36 = (int)v35;
        if (v35)
        {
          AMCP::Log::Scope_Registry::get(v35);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
          uint64_t v61 = *buf;
          if (*(void *)v103) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v103);
          }
          if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
          {
            size_t v62 = pthread_self();
            mach_port_t v63 = pthread_mach_thread_np(v62);
            double v64 = strerror(v36);
            LODWORD(buf) = 67110146;
            HIDWORD(buf) = v63;
            *(_WORD *)uint64_t v103 = 2080;
            *(void *)&v103[2] = "STLI_Resampler.cpp";
            __int16 v104 = 1024;
            int v105 = 76;
            __int16 v106 = 2080;
            *(void *)uint64_t v107 = "not (err == noErr)";
            *(_WORD *)&v107[8] = 2080;
            *(void *)&v107[10] = v64;
            _os_log_error_impl(&dword_1BAA78000, v61, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s err:%s while calling STLI PushConvertFloat", (uint8_t *)&buf, 0x2Cu);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v86);
          __cxa_allocate_exception(0x40uLL);
          double v65 = strerror(v36);
          caulk::make_string((caulk *)"err:%s while calling STLI PushConvertFloat", (uint64_t)&v92, v65);
          std::logic_error::logic_error(&v91, &v92);
          v91.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error(&v96, &v91);
          uint64_t v98 = 0;
          uint64_t v99 = 0;
          uint64_t v100 = 0;
          int v101 = -1;
          v96.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
          int v97 = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v96);
          *(void *)&v107[6] = "virtual Sample_Time_Range AMCP::DAL::STLI_Resampler::process(const Sample_Group<float> &"
                                ", Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
          *(void *)&v107[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/STLI_Resampler.cpp";
          int v108 = 76;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v89);
          int v93 = &unk_1F148AA90;
          *(std::logic_error *)&v94.__r_.__value_.__l.__data_ = v89;
          v94.__r_.__value_.__r.__words[2] = v90;
          v89.__vftable = 0;
          v89.__imp_.__imp_ = 0;
          std::string::size_type v90 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        ++v30;
        v33 += 8;
      }
      while (v28 >> 1 != v30);
    }
    if (v28)
    {
      unsigned int v87 = vcvtmd_s64_f64(v16);
      unsigned int v88 = vcvtmd_s64_f64(a5);
      long long v37 = (AMCP::Log::Scope_Registry *)ShortTermLinearInterpolationResampler::PushConvertFloat(*(ShortTermLinearInterpolationResampler **)(*(void *)(a1 + 104) - 8), (float *)(*(void *)*a2 + 4 * (v28 - 1)), 0, (float *)(*(void *)v95.__r_.__value_.__l.__data_+ 4 * (v28 - 1)), 0, &v88, &v87, v28, v28);
      int v38 = (int)v37;
      if (v37)
      {
        AMCP::Log::Scope_Registry::get(v37);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
        uint64_t v39 = *buf;
        if (*(void *)v103) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v103);
        }
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          long long v40 = pthread_self();
          mach_port_t v41 = pthread_mach_thread_np(v40);
          uint64_t v42 = strerror(v38);
          LODWORD(buf) = 67110146;
          HIDWORD(buf) = v41;
          *(_WORD *)uint64_t v103 = 2080;
          *(void *)&v103[2] = "STLI_Resampler.cpp";
          __int16 v104 = 1024;
          int v105 = 86;
          __int16 v106 = 2080;
          *(void *)uint64_t v107 = "not (err == noErr)";
          *(_WORD *)&v107[8] = 2080;
          *(void *)&v107[10] = v42;
          _os_log_error_impl(&dword_1BAA78000, v39, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s err:%s while calling STLI PushConvertFloat", (uint8_t *)&buf, 0x2Cu);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v86);
        __cxa_allocate_exception(0x40uLL);
        uint64_t v43 = strerror(v38);
        caulk::make_string((caulk *)"err:%s while calling STLI PushConvertFloat", (uint64_t)&v92, v43);
        std::logic_error::logic_error(&v91, &v92);
        v91.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error(&v96, &v91);
        uint64_t v98 = 0;
        uint64_t v99 = 0;
        uint64_t v100 = 0;
        int v101 = -1;
        v96.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        int v97 = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v96);
        *(void *)&v107[6] = "virtual Sample_Time_Range AMCP::DAL::STLI_Resampler::process(const Sample_Group<float> &, "
                              "Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
        *(void *)&v107[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/STLI_Resampler.cpp";
        int v108 = 86;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v89);
        int v93 = &unk_1F148AA90;
        *(std::logic_error *)&v94.__r_.__value_.__l.__data_ = v89;
        v94.__r_.__value_.__r.__words[2] = v90;
        v89.__vftable = 0;
        v89.__imp_.__imp_ = 0;
        std::string::size_type v90 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
    }
  }
  if (v95.__r_.__value_.__r.__words[0])
  {
    v95.__r_.__value_.__l.__size_ = v95.__r_.__value_.__r.__words[0];
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v95.__r_.__value_.__l.__data_, (uint64_t)(v95.__r_.__value_.__r.__words[2] - v95.__r_.__value_.__r.__words[0]) >> 4);
  }
  return a6;
}

void sub_1BAE75670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,caulk::rt_safe_memory_resource *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a34)
  {
    *(void *)(v52 + 8) = a34;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](a34, (uint64_t)(*(void *)(v52 + 16) - (void)a34) >> 4);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::STLI_Resampler::~STLI_Resampler(AMCP::DAL::STLI_Resampler *this)
{
  double v1 = (void **)((char *)this + 96);
  std::vector<std::unique_ptr<ShortTermLinearInterpolationResampler>>::__destroy_vector::operator()[abi:ne180100](&v1);

  JUMPOUT(0x1C1859840);
}

{
  void **v1;

  double v1 = (void **)((char *)this + 96);
  std::vector<std::unique_ptr<ShortTermLinearInterpolationResampler>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::vector<std::unique_ptr<ShortTermLinearInterpolationResampler>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  double v1 = *a1;
  BOOL v2 = **a1;
  if (v2)
  {
    unsigned int v4 = v1[1];
    unsigned int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          MEMORY[0x1C1859840](v6, 0x1000C40AC875A91);
        }
      }
      while (v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t HALS_IOUAUCDriver::request_config_change_callback(HALS_IOUAUCDriver *this, void *a2, uint64_t a3, void *a4)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (!this)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    double v16 = **(NSObject ***)buf;
    if (*(void *)v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v33);
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      long long v17 = pthread_self();
      mach_port_t v18 = pthread_mach_thread_np(v17);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v18;
      *(_WORD *)uint64_t v33 = 2080;
      *(void *)&v33[2] = "HALS_IOUAUCDriver.cpp";
      __int16 v34 = 1024;
      int v35 = 663;
      __int16 v36 = 2080;
      *(void *)long long v37 = "(uc_driver) == nullptr";
      _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s UC driver is null", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v31);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v24, "UC driver is null");
    std::runtime_error::runtime_error(&v25, &v24);
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    int v30 = -1;
    v25.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v26 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v25);
    *(void *)&v37[6] = "static void HALS_IOUAUCDriver::request_config_change_callback(void *, IOReturn, void *, uint32_t)";
    int v38 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v39 = 663;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
    uint64_t v21 = &unk_1F148AA90;
    long long v22 = v19;
    uint64_t v23 = v20;
    long long v19 = 0uLL;
    uint64_t v20 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unsigned int v5 = a4;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA250], (uint64_t)"request config change: size ", 28);
  uint64_t v7 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
  uint64_t v8 = std::locale::use_facet((const std::locale *)&v25, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale((std::locale *)&v25);
  std::ostream::put();
  double v9 = (AMCP::Log::Scope_Registry *)std::ostream::flush();
  if (v5 <= 2)
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    double v13 = **(NSObject ***)buf;
    if (*(void *)v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v33);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v15;
      *(_WORD *)uint64_t v33 = 2080;
      *(void *)&v33[2] = "HALS_IOUAUCDriver.cpp";
      __int16 v34 = 1024;
      int v35 = 669;
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Incorrect size for request config change", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v31);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v24, "Incorrect size for request config change");
    std::runtime_error::runtime_error(&v25, &v24);
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    int v30 = -1;
    v25.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v26 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v25);
    *(void *)&v37[6] = "static void HALS_IOUAUCDriver::request_config_change_callback(void *, IOReturn, void *, uint32_t)";
    int v38 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v39 = 669;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
    uint64_t v21 = &unk_1F148AA90;
    long long v22 = v19;
    uint64_t v23 = v20;
    long long v19 = 0uLL;
    uint64_t v20 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t result = *((void *)this + 90);
  if (result)
  {
    uint64_t v11 = *(std::runtime_error_vtbl **)(a3 + 8);
    double v12 = *(void **)(a3 + 16);
    LODWORD(v19) = *(_DWORD *)a3;
    v25.__vftable = v11;
    uint64_t v21 = v12;
    return (*(uint64_t (**)(uint64_t, long long *, std::runtime_error *, void **))(*(void *)result + 48))(result, &v19, &v25, &v21);
  }
  return result;
}

void sub_1BAE76004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::locale a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,NSObject **buf,std::__shared_weak_count *a30,__int16 a31,__int16 a32,int a33)
{
  if (a2)
  {
    __int16 v34 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v34);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    int v35 = *buf;
    if (a30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a30);
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      __int16 v36 = pthread_self();
      mach_port_t v37 = pthread_mach_thread_np(v36);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v37;
      LOWORD(a30) = 2080;
      *(void *)(v33 + 10) = "HALS_IOUAUCDriver.cpp";
      a32 = 1024;
      a33 = 684;
      _os_log_error_impl(&dword_1BAA78000, v35, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception handling config change request", (uint8_t *)&buf, 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAE75C20);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOUAUCDriver::abort_configuration_change(HALS_IOUAUCDriver *this, unsigned int a2, uint64_t a3, uint64_t a4)
{
  input[3] = *MEMORY[0x1E4F143B8];
  input[0] = a2;
  input[1] = a3;
  input[2] = a4;
  unsigned int v5 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod((mach_port_t)this, 5u, input, 3u, 0, 0, 0, 0, 0, 0);
  if (v5)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v6 = **(NSObject ***)buf;
    if (*(void *)v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)double v10 = 2080;
      *(void *)&v10[2] = "HALS_IOUAUCDriver.cpp";
      __int16 v11 = 1024;
      int v12 = 598;
      __int16 v13 = 1024;
      unsigned int v14 = a2;
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Failed to abort configuration change for device id %u", buf, 0x1Eu);
    }
  }
}

void sub_1BAE762F4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void HALS_IOUAUCDriver::properties_changed_callback(HALS_IOUAUCDriver *this, void *a2, int *a3, void *a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if ((a4 - 1) <= 1)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    long long v19 = *(NSObject **)__p;
    if ((void)v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v38);
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = pthread_self();
      mach_port_t v21 = pthread_mach_thread_np(v20);
      LODWORD(__p) = 67109634;
      HIDWORD(__p) = v21;
      LOWORD(v38) = 2080;
      *(void *)((char *)&v38 + 2) = "HALS_IOUAUCDriver.cpp";
      WORD5(v38) = 1024;
      HIDWORD(v38) = 622;
      _os_log_error_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: properties changed, bad size", (uint8_t *)&__p, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v29, "properties changed, bad size");
    std::runtime_error::runtime_error(&v30, &v29);
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    int v35 = -1;
    v30.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    char v31 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v30);
    int v39 = "static void HALS_IOUAUCDriver::properties_changed_callback(void *, IOReturn, void *, uint32_t)";
    uint64_t v40 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v41 = 622;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v24);
    uint64_t v26 = &unk_1F148AA90;
    long long v27 = v24;
    uint64_t v28 = v25;
    long long v24 = 0uLL;
    uint64_t v25 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unsigned int v4 = 0;
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  mach_port_t v8 = a3 + 2;
  int v22 = *a3;
  uint64_t v9 = (a4 - 2);
  AudioObjectPropertyAddress __p = 0;
  long long v38 = 0uLL;
  do
  {
    uint64_t v10 = *(void *)&v8[2 * v7];
    if ((unint64_t)v6 >= v5)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - v4) >> 2) + 1;
      if (v11 > 0x1555555555555555) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(v5 - (void)v4) >> 2) > v11) {
        unint64_t v11 = 0x5555555555555556 * ((uint64_t)(v5 - (void)v4) >> 2);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)v4) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v12 = 0x1555555555555555;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12) {
        unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v12);
      }
      else {
        uint64_t v13 = 0;
      }
      unint64_t v14 = v12 + 4 * (((char *)v6 - v4) >> 2);
      *(_DWORD *)unint64_t v14 = v10;
      *(void *)(v14 + 4) = 1735159650;
      mach_port_t v15 = (_DWORD *)v14;
      while (v6 != (_DWORD *)v4)
      {
        uint64_t v16 = *(void *)(v6 - 3);
        v6 -= 3;
        int v17 = v6[2];
        *(void *)(v15 - 3) = v16;
        v15 -= 3;
        v15[2] = v17;
      }
      unint64_t v5 = v12 + 12 * v13;
      uint64_t v6 = (_DWORD *)(v14 + 12);
      AudioObjectPropertyAddress __p = v15;
      *((void *)&v38 + 1) = v5;
      if (v4) {
        operator delete(v4);
      }
      unsigned int v4 = v15;
    }
    else
    {
      _DWORD *v6 = v10;
      *(void *)(v6 + 1) = 1735159650;
      v6 += 3;
    }
    *(void *)&long long v38 = v6;
    ++v7;
  }
  while (v7 != v9);
  uint64_t v18 = *((void *)this + 86);
  if (v18)
  {
    LODWORD(v30.__vftable) = v22;
    (*(void (**)(uint64_t, std::runtime_error *, void **))(*(void *)v18 + 48))(v18, &v30, &__p);
  }
  if (__p)
  {
    *(void *)&long long v38 = __p;
    operator delete(__p);
  }
}

void sub_1BAE766CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, std::runtime_error a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,long long a32)
{
  if (a2)
  {
    if (__p)
    {
      *(void *)&a32 = __p;
      operator delete(__p);
    }
    uint64_t v33 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v33);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    uint64_t v34 = *__p;
    if ((void)a32) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a32);
    }
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      int v35 = pthread_self();
      mach_port_t v36 = pthread_mach_thread_np(v35);
      LODWORD(__p) = 67109634;
      HIDWORD(__p) = v36;
      LOWORD(a32) = 2080;
      *(void *)((char *)&a32 + 2) = "HALS_IOUAUCDriver.cpp";
      WORD5(a32) = 1024;
      HIDWORD(a32) = 647;
      _os_log_error_impl(&dword_1BAA78000, v34, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception handling properties changed callback", (uint8_t *)&__p, 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAE764B8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOUAUCDriver::GetPropertySize(HALS_IOUAUCDriver *this, const AudioObjectPropertyAddress *a2, unsigned int a3, const void *inputStruct, size_t inputStructCnt)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v7 = *(void *)&a2->mSelector;
  *((void *)&v7 + 1) = HIDWORD(*(void *)&a2->mSelector);
  long long v38 = v7;
  uint64_t mElement = a2->mElement;
  uint64_t input = a3;
  uint64_t v39 = mElement;
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  uint64_t v9 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod((mach_port_t)this, 0xDu, &input, 4u, inputStruct, inputStructCnt, &output, &outputCnt, 0, 0);
  if (v9)
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      unint64_t v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      caulk::string_from_4cc(&__p, a2->mSelector);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)std::runtime_error v30 = 2080;
      *(void *)&v30[2] = "HALS_IOUAUCDriver.cpp";
      __int16 v31 = 1024;
      int v32 = 237;
      __int16 v33 = 2080;
      *(void *)uint64_t v34 = p_p;
      *(_WORD *)&v34[8] = 1024;
      *(_DWORD *)&v34[10] = a3;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Failed to get property size %s, object id %u", buf, 0x28u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v20, "Failed to get property size");
    std::runtime_error::runtime_error((std::runtime_error *)&__p, &v20);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148A9A8;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(void *)&v34[6] = "size_t HALS_IOUAUCDriver::GetPropertySize(const AudioObjectPropertyAddress *, AudioObjectID, co"
                         "nst void *, size_t)";
    int v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v36 = 237;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    int v17 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  return output;
}

void sub_1BAE76B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, std::runtime_error a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a11) {
    operator delete(a11);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl((uint64_t)&a30);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a19);
  std::runtime_error::~runtime_error(&a18);
  if (v31) {
    __cxa_free_exception(v30);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a28);
  _Unwind_Resume(a1);
}

AMCP::Log::Scope_Registry *HALS_IOUAUCDriver::GetPropertyData(HALS_IOUAUCDriver *this, const AudioObjectPropertyAddress *a2, unsigned int a3, const void *inputStruct, size_t inputStructCnt, void *outputStruct, unint64_t *a7)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v10 = *(void *)&a2->mSelector;
  *((void *)&v10 + 1) = HIDWORD(*(void *)&a2->mSelector);
  long long v40 = v10;
  uint64_t mElement = a2->mElement;
  uint64_t input = a3;
  uint64_t v41 = mElement;
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  uint64_t result = (AMCP::Log::Scope_Registry *)IOConnectCallMethod((mach_port_t)this, 0xEu, &input, 4u, inputStruct, inputStructCnt, &output, &outputCnt, outputStruct, a7);
  if (result)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v13 = **(NSObject ***)buf;
    if (*(void *)v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v32);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      unint64_t v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      caulk::string_from_4cc(&__p, a2->mSelector);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v15;
      *(_WORD *)int v32 = 2080;
      *(void *)&long long v32[2] = "HALS_IOUAUCDriver.cpp";
      __int16 v33 = 1024;
      int v34 = 183;
      __int16 v35 = 2080;
      *(void *)int v36 = p_p;
      *(_WORD *)&v36[8] = 1024;
      *(_DWORD *)&v36[10] = a3;
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Failed to get property data list size %s, object id %u", buf, 0x28u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v22, "Failed to get property data list size");
    std::runtime_error::runtime_error((std::runtime_error *)&__p, &v22);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148A9A8;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(void *)&v36[6] = "void HALS_IOUAUCDriver::GetPropertyData(const AudioObjectPropertyAddress *, AudioObjectID, cons"
                         "t void *, size_t, void *, size_t *)";
    mach_port_t v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v38 = 183;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    long long v20 = v17;
    uint64_t v21 = v18;
    long long v17 = 0uLL;
    uint64_t v18 = 0;
    uint64_t v19 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  *a7 = output;
  return result;
}

void sub_1BAE76E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, std::runtime_error a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a11) {
    operator delete(a11);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl((uint64_t)&a30);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a19);
  std::runtime_error::~runtime_error(&a18);
  if (v31) {
    __cxa_free_exception(v30);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a28);
  _Unwind_Resume(a1);
}

void HALS_IOUAUCDriver::SetPropertyData(HALS_IOUAUCDriver *this, const AudioObjectPropertyAddress *a2, unsigned int a3, const void *a4, size_t a5, const void *a6, size_t a7)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v9 = *(void *)&a2->mSelector;
  *((void *)&v9 + 1) = HIDWORD(*(void *)&a2->mSelector);
  long long v57 = v9;
  uint64_t mElement = a2->mElement;
  uint64_t input = a3;
  uint64_t v58 = mElement;
  if (!a6)
  {
    BOOL v22 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
    if (!v22) {
      goto LABEL_20;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "serialize_qualifier_and_data";
    uint64_t v23 = MEMORY[0x1E4F14500];
    uint64_t v24 = "%s: Cannot serialize, data is null\n";
    goto LABEL_19;
  }
  if (!a7)
  {
    BOOL v22 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
    if (!v22) {
      goto LABEL_20;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "serialize_qualifier_and_data";
    uint64_t v23 = MEMORY[0x1E4F14500];
    uint64_t v24 = "%s: Cannot serialize, data size is 0\n";
    goto LABEL_19;
  }
  size_t v13 = a7 + a5 + 16;
  BOOL v14 = __CFADD__(a7, a5 + 16);
  if (a5 >= 0xFFFFFFFFFFFFFFF0 || v14)
  {
    BOOL v22 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
    if (!v22) {
      goto LABEL_20;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "serialize_qualifier_and_data";
    uint64_t v23 = MEMORY[0x1E4F14500];
    uint64_t v24 = "%s: Cannot serialize, data overflow\n";
LABEL_19:
    _os_log_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_DEFAULT, v24, buf, 0xCu);
LABEL_20:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v22);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v25 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = pthread_self();
      mach_port_t v27 = pthread_mach_thread_np(v26);
      AudioObjectPropertySelector mSelector = a2->mSelector;
      int v29 = bswap32(a2->mSelector);
      *(_DWORD *)&buf[1] = v29;
      if (((char)v29 - 32) > 0x5E
        || (((__int16)v29 >> 8) - 32) > 0x5E
        || ((v29 << 8 >> 24) - 32) > 0x5E
        || ((v29 >> 24) - 32) > 0x5E)
      {
        std::to_string(&v40, mSelector);
      }
      else
      {
        strcpy(&buf[5], "'");
        buf[0] = 39;
        std::string::basic_string[abi:ne180100]<0>(&v40, buf);
      }
      std::runtime_error v30 = &v40;
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::runtime_error v30 = (std::string *)v40.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v27;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "HALS_IOUAUCDriver.cpp";
      __int16 v50 = 1024;
      int v51 = 210;
      __int16 v52 = 2080;
      *(void *)int v53 = v30;
      *(_WORD *)&v53[8] = 1024;
      *(_DWORD *)&v53[10] = a3;
      _os_log_error_impl(&dword_1BAA78000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Failed to serialze qualifier and data %s, object id %u", buf, 0x28u);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v45);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v39, "Failed to serialze qualifier and data");
    std::runtime_error::runtime_error((std::runtime_error *)&v40, &v39);
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    int v44 = -1;
    v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148A9A8;
    v40.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v40);
    *(void *)&v53[6] = "void HALS_IOUAUCDriver::SetPropertyData(const AudioObjectPropertyAddress *, AudioObjectID, cons"
                         "t void *, size_t, const void *, size_t)";
    long long v54 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v55 = 210;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v37);
    *(void *)__s = &unk_1F148AA90;
    long long v47 = v37;
    uint64_t v48 = v38;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v18 = malloc_type_malloc(v13, 0xAF020572uLL);
  uint64_t v19 = v18;
  *uint64_t v18 = a5;
  v18[1] = a7;
  long long v20 = v18 + 2;
  if (a4 && a5) {
    memcpy(v18 + 2, a4, a5);
  }
  memcpy((char *)v20 + a5, a6, a7);
  uint64_t v21 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod(*((_DWORD *)this + 1), 0xFu, &input, 4u, v19, v13, 0, 0, 0, 0);
  if (v21)
  {
    AMCP::Log::Scope_Registry::get(v21);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v31 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      int v32 = pthread_self();
      mach_port_t v33 = pthread_mach_thread_np(v32);
      AudioObjectPropertySelector v34 = a2->mSelector;
      int v35 = bswap32(a2->mSelector);
      *(_DWORD *)&__s[1] = v35;
      if (((char)v35 - 32) > 0x5E
        || (((__int16)v35 >> 8) - 32) > 0x5E
        || ((v35 << 8 >> 24) - 32) > 0x5E
        || ((v35 >> 24) - 32) > 0x5E)
      {
        std::to_string(&v40, v34);
      }
      else
      {
        strcpy(&__s[5], "'");
        __s[0] = 39;
        std::string::basic_string[abi:ne180100]<0>(&v40, __s);
      }
      int v36 = &v40;
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v36 = (std::string *)v40.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v33;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "HALS_IOUAUCDriver.cpp";
      __int16 v50 = 1024;
      int v51 = 216;
      __int16 v52 = 2080;
      *(void *)int v53 = v36;
      *(_WORD *)&v53[8] = 1024;
      *(_DWORD *)&v53[10] = a3;
      _os_log_error_impl(&dword_1BAA78000, v31, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Failed to set property data %s, object id %u", buf, 0x28u);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v45);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v39, "Failed to set property data");
    std::runtime_error::runtime_error((std::runtime_error *)&v40, &v39);
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    int v44 = -1;
    v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148A9A8;
    v40.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v40);
    *(void *)&v53[6] = "void HALS_IOUAUCDriver::SetPropertyData(const AudioObjectPropertyAddress *, AudioObjectID, cons"
                         "t void *, size_t, const void *, size_t)";
    long long v54 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v55 = 216;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v37);
    *(void *)__s = &unk_1F148AA90;
    long long v47 = v37;
    uint64_t v48 = v38;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  free(v19);
}

void sub_1BAE77610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, std::runtime_error a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,char a31)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL HALS_IOUAUCDriver::GetHasProperty(HALS_IOUAUCDriver *this, const AudioObjectPropertyAddress *a2, unsigned int a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v5 = *(void *)&a2->mSelector;
  *((void *)&v5 + 1) = HIDWORD(*(void *)&a2->mSelector);
  long long v36 = v5;
  uint64_t mElement = a2->mElement;
  uint64_t input = a3;
  uint64_t v37 = mElement;
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  long long v7 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod((mach_port_t)this, 0xBu, &input, 4u, 0, 0, &output, &outputCnt, 0, 0);
  if (v7)
  {
    AMCP::Log::Scope_Registry::get(v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v9 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      long long v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      caulk::string_from_4cc(&__p, a2->mSelector);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)char v28 = 2080;
      *(void *)&v28[2] = "HALS_IOUAUCDriver.cpp";
      __int16 v29 = 1024;
      int v30 = 260;
      __int16 v31 = 2080;
      *(void *)int v32 = p_p;
      *(_WORD *)&v32[8] = 1024;
      *(_DWORD *)&unsigned char v32[10] = a3;
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Failed to get has property %s, object id %u", buf, 0x28u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v18, "Failed to get has property");
    std::runtime_error::runtime_error((std::runtime_error *)&__p, &v18);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v23 = -1;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148A9A8;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(void *)&v32[6] = "BOOL HALS_IOUAUCDriver::GetHasProperty(const AudioObjectPropertyAddress *, AudioObjectID)";
    mach_port_t v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v34 = 260;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    mach_port_t v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  return output != 0;
}

void sub_1BAE779F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, std::runtime_error a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a11) {
    operator delete(a11);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl((uint64_t)&a30);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a19);
  std::runtime_error::~runtime_error(&a18);
  if (v31) {
    __cxa_free_exception(v30);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a28);
  _Unwind_Resume(a1);
}

BOOL HALS_IOUAUCDriver::GetIsPropertySettable(HALS_IOUAUCDriver *this, const AudioObjectPropertyAddress *a2, unsigned int a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v5 = *(void *)&a2->mSelector;
  *((void *)&v5 + 1) = HIDWORD(*(void *)&a2->mSelector);
  long long v36 = v5;
  uint64_t mElement = a2->mElement;
  uint64_t input = a3;
  uint64_t v37 = mElement;
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  long long v7 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod((mach_port_t)this, 0xCu, &input, 4u, 0, 0, &output, &outputCnt, 0, 0);
  if (v7)
  {
    AMCP::Log::Scope_Registry::get(v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v9 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      long long v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      caulk::string_from_4cc(&__p, a2->mSelector);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)char v28 = 2080;
      *(void *)&v28[2] = "HALS_IOUAUCDriver.cpp";
      __int16 v29 = 1024;
      int v30 = 284;
      __int16 v31 = 2080;
      *(void *)int v32 = p_p;
      *(_WORD *)&v32[8] = 1024;
      *(_DWORD *)&unsigned char v32[10] = a3;
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Failed to get is property settable %s, object_id %u", buf, 0x28u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v18, "Failed to get is property settable");
    std::runtime_error::runtime_error((std::runtime_error *)&__p, &v18);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v23 = -1;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148A9A8;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(void *)&v32[6] = "BOOL HALS_IOUAUCDriver::GetIsPropertySettable(const AudioObjectPropertyAddress *, AudioObjectID)";
    mach_port_t v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v34 = 284;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    mach_port_t v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  return output != 0;
}

void sub_1BAE77D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, std::runtime_error a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a11) {
    operator delete(a11);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl((uint64_t)&a30);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a19);
  std::runtime_error::~runtime_error(&a18);
  if (v31) {
    __cxa_free_exception(v30);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a28);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOUAUCDriver::get_device_timestamp_buffer_id(HALS_IOUAUCDriver *this, unsigned int a2)
{
  input[1] = *MEMORY[0x1E4F143B8];
  input[0] = a2;
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  BOOL v2 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod((mach_port_t)this, 6u, input, 1u, 0, 0, &output, &outputCnt, 0, 0);
  if (v2)
  {
    AMCP::Log::Scope_Registry::get(v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unsigned int v4 = **(NSObject ***)buf;
    if (*(void *)v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v23);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      long long v5 = pthread_self();
      mach_port_t v6 = pthread_mach_thread_np(v5);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)int v23 = 2080;
      *(void *)&v23[2] = "HALS_IOUAUCDriver.cpp";
      __int16 v24 = 1024;
      int v25 = 300;
      __int16 v26 = 2080;
      *(void *)mach_port_t v27 = "ret != kIOReturnSuccess";
      _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to get timestamp buffer id", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v19);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v12, "Failed to get timestamp buffer id");
    std::runtime_error::runtime_error(&v13, &v12);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v18 = -1;
    v13.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v14 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v13);
    *(void *)&v27[6] = "uint64_t HALS_IOUAUCDriver::get_device_timestamp_buffer_id(AudioObjectID)";
    char v28 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v29 = 300;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v7);
    long long v10 = v7;
    uint64_t v11 = v8;
    long long v7 = 0uLL;
    uint64_t v8 = 0;
    long long v9 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  return output;
}

void sub_1BAE7803C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,std::runtime_error a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v23 - 112);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a22);
  std::runtime_error::~runtime_error(&a21);
  if (a13) {
    __cxa_free_exception(v22);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v23 - 125));
  _Unwind_Resume(a1);
}

uint64_t HALS_IOUAUCDriver::get_device_client_status_buffer_id(HALS_IOUAUCDriver *this, unsigned int a2)
{
  input[1] = *MEMORY[0x1E4F143B8];
  input[0] = a2;
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  BOOL v2 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod((mach_port_t)this, 7u, input, 1u, 0, 0, &output, &outputCnt, 0, 0);
  if (v2)
  {
    AMCP::Log::Scope_Registry::get(v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unsigned int v4 = **(NSObject ***)buf;
    if (*(void *)v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v23);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      long long v5 = pthread_self();
      mach_port_t v6 = pthread_mach_thread_np(v5);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)uint64_t v23 = 2080;
      *(void *)&v23[2] = "HALS_IOUAUCDriver.cpp";
      __int16 v24 = 1024;
      int v25 = 311;
      __int16 v26 = 2080;
      *(void *)mach_port_t v27 = "ret != kIOReturnSuccess";
      _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to get client status buffer id", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v19);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v12, "Failed to get client status buffer id");
    std::runtime_error::runtime_error(&v13, &v12);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v18 = -1;
    v13.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v14 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v13);
    *(void *)&v27[6] = "uint64_t HALS_IOUAUCDriver::get_device_client_status_buffer_id(AudioObjectID)";
    char v28 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v29 = 311;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v7);
    long long v10 = v7;
    uint64_t v11 = v8;
    long long v7 = 0uLL;
    uint64_t v8 = 0;
    long long v9 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  return output;
}

void sub_1BAE78338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,std::runtime_error a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v23 - 112);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a22);
  std::runtime_error::~runtime_error(&a21);
  if (a13) {
    __cxa_free_exception(v22);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v23 - 125));
  _Unwind_Resume(a1);
}

uint64_t HALS_IOUAUCDriver::get_device_io_status_buffer_id(HALS_IOUAUCDriver *this, unsigned int a2)
{
  input[1] = *MEMORY[0x1E4F143B8];
  input[0] = a2;
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  BOOL v2 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod((mach_port_t)this, 0x10u, input, 1u, 0, 0, &output, &outputCnt, 0, 0);
  if (v2)
  {
    AMCP::Log::Scope_Registry::get(v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unsigned int v4 = **(NSObject ***)buf;
    if (*(void *)v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v23);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      long long v5 = pthread_self();
      mach_port_t v6 = pthread_mach_thread_np(v5);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)uint64_t v23 = 2080;
      *(void *)&v23[2] = "HALS_IOUAUCDriver.cpp";
      __int16 v24 = 1024;
      int v25 = 322;
      __int16 v26 = 2080;
      *(void *)mach_port_t v27 = "ret != kIOReturnSuccess";
      _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to get io status buffer id", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v19);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v12, "Failed to get io status buffer id");
    std::runtime_error::runtime_error(&v13, &v12);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v18 = -1;
    v13.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v14 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v13);
    *(void *)&v27[6] = "uint64_t HALS_IOUAUCDriver::get_device_io_status_buffer_id(AudioObjectID)";
    char v28 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v29 = 322;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v7);
    long long v10 = v7;
    uint64_t v11 = v8;
    long long v7 = 0uLL;
    uint64_t v8 = 0;
    long long v9 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  return output;
}

void sub_1BAE78634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,std::runtime_error a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v23 - 112);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a22);
  std::runtime_error::~runtime_error(&a21);
  if (a13) {
    __cxa_free_exception(v22);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v23 - 125));
  _Unwind_Resume(a1);
}

uint64_t HALS_IOUAUCDriver::map_memory(HALS_IOUAUCDriver *this, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  long long v5 = (AMCP::Log::Scope_Registry *)MEMORY[0x1C1858840](this, a2, *MEMORY[0x1E4F14960], &v24, &v23, 1);
  if (v5)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v7 = **(NSObject ***)buf;
    if (*(void *)v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v26);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)__int16 v26 = 2080;
      *(void *)&v26[2] = "HALS_IOUAUCDriver.cpp";
      __int16 v27 = 1024;
      int v28 = 332;
      __int16 v29 = 2080;
      *(void *)int v30 = "ret != kIOReturnSuccess";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to map memory", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v22);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v15, "Failed to map memory");
    std::runtime_error::runtime_error(&v16, &v15);
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v21 = -1;
    v16.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v17 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v16);
    *(void *)&v30[6] = "mach_vm_address_t HALS_IOUAUCDriver::map_memory(uint64_t, IOOptionBits, size_t &)";
    int v31 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v32 = 332;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v10);
    std::runtime_error v12 = &unk_1F148AA90;
    long long v13 = v10;
    uint64_t v14 = v11;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t result = v24;
  *a3 = v23;
  return result;
}

void sub_1BAE78924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, std::runtime_error a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v22 - 112);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a21);
  std::runtime_error::~runtime_error(&a20);
  if (a11) {
    __cxa_free_exception(v21);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v22 - 129));
  _Unwind_Resume(a1);
}

AMCP::Log::Scope_Registry *HALS_IOUAUCDriver::unmap_memory(HALS_IOUAUCDriver *this, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t result = (AMCP::Log::Scope_Registry *)MEMORY[0x1C18588A0](this, a2, *MEMORY[0x1E4F14960], a3);
  if (result)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unsigned int v4 = **(NSObject ***)buf;
    if (*(void *)v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v21);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      long long v5 = pthread_self();
      mach_port_t v6 = pthread_mach_thread_np(v5);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)int v21 = 2080;
      *(void *)&v21[2] = "HALS_IOUAUCDriver.cpp";
      __int16 v22 = 1024;
      int v23 = 340;
      __int16 v24 = 2080;
      *(void *)int v25 = "ret != kIOReturnSuccess";
      _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to unmap memory", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v19);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v12, "Failed to unmap memory");
    std::runtime_error::runtime_error(&v13, &v12);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v18 = -1;
    v13.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v14 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v13);
    *(void *)&v25[6] = "void HALS_IOUAUCDriver::unmap_memory(uint64_t, mach_vm_address_t)";
    __int16 v26 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v27 = 340;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v7);
    mach_port_t v9 = &unk_1F148AA90;
    long long v10 = v7;
    uint64_t v11 = v8;
    long long v7 = 0uLL;
    uint64_t v8 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  return result;
}

void sub_1BAE78BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, std::runtime_error a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v22 - 112);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a21);
  std::runtime_error::~runtime_error(&a20);
  if (a11) {
    __cxa_free_exception(v21);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v22 - 113));
  _Unwind_Resume(a1);
}

void HALS_IOUAUCDriver::get_string_property(HALS_IOUAUCDriver *this, uint64_t a2, long long a3, void *a4, void *inputStruct, size_t a6)
{
  unsigned int v8 = a3;
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  *(void *)&v36.AudioObjectPropertySelector mSelector = *((void *)&a3 + 1);
  v36.uint64_t mElement = a4;
  uint64_t PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(a2 + 4), &v36, a3, inputStruct, a6);
  unint64_t v35 = PropertySize;
  if (!PropertySize)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    std::runtime_error v13 = **(NSObject ***)buf;
    if (*(void *)v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v38);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v15;
      *(_WORD *)uint64_t v38 = 2080;
      *(void *)&v38[2] = "HALS_IOUAUCDriver.cpp";
      __int16 v39 = 1024;
      int v40 = 360;
      __int16 v41 = 2080;
      *(void *)uint64_t v42 = "out_size == 0";
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to get_string_property size", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v21);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error((std::runtime_error *)&v19, "Failed to get_string_property size");
    std::runtime_error::runtime_error(&v29, (const std::runtime_error *)&v19);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    int v34 = -1;
    v29.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v30 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v29);
    *(void *)&v42[6] = "applesauce::CF::StringRef HALS_IOUAUCDriver::get_string_property(AudioObjectID, AudioObjectProp"
                         "ertyAddress, void *, size_t)";
    uint64_t v43 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v44 = 360;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(buffer);
    __int16 v26 = &unk_1F148AA90;
    std::runtime_error v27 = *(std::runtime_error *)buffer;
    uint64_t v28 = v25;
    buffer[0] = 0;
    buffer[1] = 0;
    uint64_t v25 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  buf[0] = 0;
  std::vector<std::byte>::vector(buffer, PropertySize, buf);
  HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(a2 + 4), &v36, v8, inputStruct, a6, buffer[0], &v35);
  CFStringRef errorString = 0;
  CFTypeRef v12 = IOCFUnserializeBinary(buffer[0], v35, (CFAllocatorRef)*MEMORY[0x1E4F1CF88], 0, &errorString);
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v16 = **(NSObject ***)buf;
    if (*(void *)v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v38);
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = pthread_self();
      mach_port_t v18 = pthread_mach_thread_np(v17);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v18;
      *(_WORD *)uint64_t v38 = 2080;
      *(void *)&v38[2] = "HALS_IOUAUCDriver.cpp";
      __int16 v39 = 1024;
      int v40 = 367;
      __int16 v41 = 2080;
      *(void *)uint64_t v42 = "(deserialized_object) == nullptr";
      _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to deserialize string object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v22);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v21, "Failed to deserialize string object");
    std::runtime_error::runtime_error(&v29, &v21);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    int v34 = -1;
    v29.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v30 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v29);
    *(void *)&v42[6] = "applesauce::CF::StringRef HALS_IOUAUCDriver::get_string_property(AudioObjectID, AudioObjectProp"
                         "ertyAddress, void *, size_t)";
    uint64_t v43 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v44 = 367;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
    __int16 v26 = &unk_1F148AA90;
    std::runtime_error v27 = (std::runtime_error)v19;
    uint64_t v28 = v20;
    unsigned long long v19 = 0uLL;
    uint64_t v20 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  applesauce::CF::StringRef::StringRef(this, v12);
  if (buffer[0])
  {
    buffer[1] = buffer[0];
    operator delete(buffer[0]);
  }
}

void sub_1BAE7914C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const void ***applesauce::raii::v1::detail::ScopeGuard<HALS_IOUAUCDriver::get_custom_property_value(unsigned int,AudioObjectPropertyAddress,applesauce::CF::TypeRef)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(const void ***a1)
{
  BOOL v2 = **a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void ***applesauce::raii::v1::detail::ScopeGuard<HALS_IOUAUCDriver::set_custom_property_value(unsigned int,AudioObjectPropertyAddress,applesauce::CF::TypeRef,applesauce::CF::TypeRef)::$_1,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(const void ***a1)
{
  BOOL v2 = **a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

CFTypeRef **applesauce::raii::v1::detail::ScopeGuard<HALS_IOUAUCDriver::set_custom_property_value(unsigned int,AudioObjectPropertyAddress,applesauce::CF::TypeRef,applesauce::CF::TypeRef)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(CFTypeRef **a1)
{
  return a1;
}

void HALS_IOUAUCDriver::get_array_property(HALS_IOUAUCDriver *this, uint64_t a2, long long a3, void *a4, void *inputStruct, size_t a6)
{
  unsigned int v8 = a3;
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  *(void *)&v36.AudioObjectPropertySelector mSelector = *((void *)&a3 + 1);
  v36.uint64_t mElement = a4;
  uint64_t PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(a2 + 4), &v36, a3, inputStruct, a6);
  unint64_t v35 = PropertySize;
  if (!PropertySize)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    std::runtime_error v13 = **(NSObject ***)buf;
    if (*(void *)v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v38);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v15;
      *(_WORD *)uint64_t v38 = 2080;
      *(void *)&v38[2] = "HALS_IOUAUCDriver.cpp";
      __int16 v39 = 1024;
      int v40 = 447;
      __int16 v41 = 2080;
      *(void *)uint64_t v42 = "out_size == 0";
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to get_array_property size", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v21);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error((std::runtime_error *)&v19, "Failed to get_array_property size");
    std::runtime_error::runtime_error(&v29, (const std::runtime_error *)&v19);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    int v34 = -1;
    v29.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v30 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v29);
    *(void *)&v42[6] = "applesauce::CF::ArrayRef HALS_IOUAUCDriver::get_array_property(AudioObjectID, AudioObjectProper"
                         "tyAddress, void *, size_t)";
    uint64_t v43 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v44 = 447;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(buffer);
    __int16 v26 = &unk_1F148AA90;
    std::runtime_error v27 = *(std::runtime_error *)buffer;
    uint64_t v28 = v25;
    buffer[0] = 0;
    buffer[1] = 0;
    uint64_t v25 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  buf[0] = 0;
  std::vector<std::byte>::vector(buffer, PropertySize, buf);
  HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(a2 + 4), &v36, v8, inputStruct, a6, buffer[0], &v35);
  CFStringRef errorString = 0;
  CFTypeRef v12 = (AMCP::Log::Scope_Registry *)IOCFUnserializeBinary(buffer[0], v35, (CFAllocatorRef)*MEMORY[0x1E4F1CF88], 0, &errorString);
  if (errorString)
  {
    AMCP::Log::Scope_Registry::get(v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v16 = **(NSObject ***)buf;
    if (*(void *)v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v38);
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = pthread_self();
      mach_port_t v18 = pthread_mach_thread_np(v17);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v18;
      *(_WORD *)uint64_t v38 = 2080;
      *(void *)&v38[2] = "HALS_IOUAUCDriver.cpp";
      __int16 v39 = 1024;
      int v40 = 454;
      __int16 v41 = 2080;
      *(void *)uint64_t v42 = "error != nullptr";
      _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to deserialize get_array_property object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v22);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v21, "Failed to deserialize get_array_property object");
    std::runtime_error::runtime_error(&v29, &v21);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    int v34 = -1;
    v29.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v30 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v29);
    *(void *)&v42[6] = "applesauce::CF::ArrayRef HALS_IOUAUCDriver::get_array_property(AudioObjectID, AudioObjectProper"
                         "tyAddress, void *, size_t)";
    uint64_t v43 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v44 = 454;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
    __int16 v26 = &unk_1F148AA90;
    std::runtime_error v27 = (std::runtime_error)v19;
    uint64_t v28 = v20;
    unsigned long long v19 = 0uLL;
    uint64_t v20 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  applesauce::CF::ArrayRef::ArrayRef(this, v12);
  if (buffer[0])
  {
    buffer[1] = buffer[0];
    operator delete(buffer[0]);
  }
}

void sub_1BAE797D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOUAUCDriver::perform_config_change(HALS_IOUAUCDriver *this, unsigned int a2, uint64_t a3, uint64_t a4)
{
  input[3] = *MEMORY[0x1E4F143B8];
  input[0] = a2;
  input[1] = a3;
  uint64_t input[2] = a4;
  return IOConnectCallMethod((mach_port_t)this, 4u, input, 3u, 0, 0, 0, 0, 0, 0);
}

void sub_1BAE79950(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void ADS::SelectorControl::SetPropertyData(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, int *a6, uint64_t a7, uint64_t a8, _DWORD *a9, unint64_t *a10, unsigned __int8 a11)
{
  unsigned int v12 = a7;
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  int v15 = *(_DWORD *)a4;
  if (*(_DWORD *)a4 == 1668049771)
  {
    if (a7 != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADS_SelectorControl.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 297;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SelectorControl::SetPropertyData: wrong property data size for kAudioSelectorControlPropertyItemKind", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 561211770;
    }
    if (a5 != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADS_SelectorControl.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 298;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SelectorControl::SetPropertyData: wrong qualifier data size for kAudioSelectorControlPropertyItemKind", buf, 0x12u);
      }
      mach_port_t v68 = __cxa_allocate_exception(0x10uLL);
      *(void *)mach_port_t v68 = off_1F148A5D8;
      v68[2] = 561211770;
    }
    uint64_t v37 = *(void *)(a1 + 56);
    uint64_t v69 = a1 + 56;
    char v70 = (*(uint64_t (**)(uint64_t))(v37 + 16))(a1 + 56);
    uint64_t v39 = *(void *)(a1 + 144);
    uint64_t v38 = *(void *)(a1 + 152);
    if (v39 == v38) {
      goto LABEL_86;
    }
    int v40 = (OS::CF::UntypedObject *)&buf[8];
    while (1)
    {
      *(_DWORD *)buf = *(_DWORD *)v39;
      __int16 v41 = OS::CF::UntypedObject::UntypedObject(v40, *(CFTypeRef *)(v39 + 16));
      *(void *)&uint8_t buf[8] = &unk_1F1489A20;
      uint64_t v42 = *(void *)(v39 + 24);
      char v73 = *(unsigned char *)(v39 + 32);
      uint64_t v72 = v42;
      int v43 = *a6;
      OS::CF::UntypedObject::~UntypedObject(v41);
      if (*(_DWORD *)buf == v43) {
        break;
      }
      v39 += 40;
      if (v39 == v38)
      {
        uint64_t v39 = v38;
        break;
      }
    }
    if (v39 == *(void *)(a1 + 152))
    {
LABEL_86:
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADS_SelectorControl.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 304;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SelectorControl::SetPropertyData: ID not found", buf, 0x12u);
      }
      double v64 = __cxa_allocate_exception(0x10uLL);
      *(void *)double v64 = off_1F148A5D8;
      v64[2] = 560947818;
    }
    *(_DWORD *)(v39 + 28) = *(_DWORD *)a8;
    *a9 = 1;
    int v33 = *(_DWORD *)(a1 + 52);
    int v34 = (int *)a10[1];
    unint64_t v44 = a10[2];
    if ((unint64_t)v34 < v44)
    {
      int v36 = 1668049771;
      goto LABEL_34;
    }
    unint64_t v52 = 0x1555555555555555;
    long long v47 = (int *)*a10;
    unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v34 - *a10) >> 2);
    unint64_t v54 = v53 + 1;
    if (v53 + 1 > 0x1555555555555555) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - (void)v47) >> 2);
    if (2 * v55 > v54) {
      unint64_t v54 = 2 * v55;
    }
    if (v55 < 0xAAAAAAAAAAAAAAALL) {
      unint64_t v52 = v54;
    }
    if (v52)
    {
      unint64_t v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v52);
      long long v47 = (int *)*a10;
      int v34 = (int *)a10[1];
    }
    else
    {
      uint64_t v56 = 0;
    }
    long long v57 = (_DWORD *)(v52 + 12 * v53);
    unint64_t v58 = v52 + 12 * v56;
    _DWORD *v57 = 1668049771;
    v57[1] = v33;
    v57[2] = 0;
    uint64_t v45 = v57 + 3;
    if (v34 != v47)
    {
      do
      {
        uint64_t v61 = *(void *)(v34 - 3);
        v34 -= 3;
        int v62 = v34[2];
        *(void *)(v57 - 3) = v61;
        v57 -= 3;
        v57[2] = v62;
      }
      while (v34 != v47);
      goto LABEL_59;
    }
LABEL_60:
    *a10 = (unint64_t)v57;
    a10[1] = (unint64_t)v45;
    a10[2] = v58;
    if (v47) {
      operator delete(v47);
    }
    goto LABEL_62;
  }
  if (v15 == 1935894894)
  {
    if (a7 != 8)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADS_SelectorControl.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 279;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SelectorControl::SetPropertyData: wrong property data size for kAudioSelectorControlPropertyItemName", buf, 0x12u);
      }
      double v65 = __cxa_allocate_exception(0x10uLL);
      *(void *)double v65 = off_1F148A5D8;
      v65[2] = 561211770;
    }
    if (a5 != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADS_SelectorControl.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 280;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SelectorControl::SetPropertyData: wrong qualifier data size for kAudioSelectorControlPropertyItemName", buf, 0x12u);
      }
      std::logic_error v67 = __cxa_allocate_exception(0x10uLL);
      *(void *)std::logic_error v67 = off_1F148A5D8;
      v67[2] = 561211770;
    }
    uint64_t v26 = *(void *)(a1 + 56);
    uint64_t v69 = a1 + 56;
    char v70 = (*(uint64_t (**)(uint64_t))(v26 + 16))(a1 + 56);
    uint64_t v28 = *(void *)(a1 + 144);
    uint64_t v27 = *(void *)(a1 + 152);
    if (v28 == v27) {
      goto LABEL_87;
    }
    std::runtime_error v29 = (OS::CF::UntypedObject *)&buf[8];
    while (1)
    {
      *(_DWORD *)buf = *(_DWORD *)v28;
      int v30 = OS::CF::UntypedObject::UntypedObject(v29, *(CFTypeRef *)(v28 + 16));
      *(void *)&uint8_t buf[8] = &unk_1F1489A20;
      uint64_t v31 = *(void *)(v28 + 24);
      char v73 = *(unsigned char *)(v28 + 32);
      uint64_t v72 = v31;
      int v32 = *a6;
      OS::CF::UntypedObject::~UntypedObject(v30);
      if (*(_DWORD *)buf == v32) {
        break;
      }
      v28 += 40;
      if (v28 == v27)
      {
        uint64_t v28 = v27;
        break;
      }
    }
    if (v28 == *(void *)(a1 + 152))
    {
LABEL_87:
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADS_SelectorControl.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 286;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SelectorControl::SetPropertyData: ID not found", buf, 0x12u);
      }
      mach_port_t v63 = __cxa_allocate_exception(0x10uLL);
      *(void *)mach_port_t v63 = off_1F148A5D8;
      v63[2] = 560947818;
    }
    OS::CF::UntypedObject::operator=(v28 + 8, *(CFTypeRef *)(a8 + 8));
    *a9 = 1;
    int v33 = *(_DWORD *)(a1 + 52);
    int v34 = (int *)a10[1];
    unint64_t v35 = a10[2];
    if ((unint64_t)v34 < v35)
    {
      int v36 = 1935894894;
LABEL_34:
      *int v34 = v36;
      v34[1] = v33;
      v34[2] = 0;
      uint64_t v45 = v34 + 3;
LABEL_62:
      a10[1] = (unint64_t)v45;
      uint64_t v25 = (CADeprecated::CAMutex::Locker *)&v69;
LABEL_63:
      CADeprecated::CAMutex::Locker::~Locker(v25);
      return;
    }
    unint64_t v46 = 0x1555555555555555;
    long long v47 = (int *)*a10;
    unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v34 - *a10) >> 2);
    unint64_t v49 = v48 + 1;
    if (v48 + 1 > 0x1555555555555555) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (void)v47) >> 2);
    if (2 * v50 > v49) {
      unint64_t v49 = 2 * v50;
    }
    if (v50 < 0xAAAAAAAAAAAAAAALL) {
      unint64_t v46 = v49;
    }
    if (v46)
    {
      unint64_t v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v46);
      long long v47 = (int *)*a10;
      int v34 = (int *)a10[1];
    }
    else
    {
      uint64_t v51 = 0;
    }
    long long v57 = (_DWORD *)(v46 + 12 * v48);
    unint64_t v58 = v46 + 12 * v51;
    _DWORD *v57 = 1935894894;
    v57[1] = v33;
    v57[2] = 0;
    uint64_t v45 = v57 + 3;
    if (v34 != v47)
    {
      do
      {
        uint64_t v59 = *(void *)(v34 - 3);
        v34 -= 3;
        int v60 = v34[2];
        *(void *)(v57 - 3) = v59;
        v57 -= 3;
        v57[2] = v60;
      }
      while (v34 != v47);
LABEL_59:
      long long v47 = (int *)*a10;
      goto LABEL_60;
    }
    goto LABEL_60;
  }
  if (v15 == 1935893353)
  {
    uint64_t v17 = *(void *)(a1 + 56);
    uint64_t v16 = a1 + 56;
    *(void *)buf = a1 + 56;
    uint8_t buf[8] = (*(uint64_t (**)(uint64_t))(v17 + 16))(a1 + 56);
    uint64_t v18 = *(void *)(v16 + 88);
    uint64_t v19 = *(void *)(v16 + 96);
    if (v18 != v19)
    {
      LODWORD(v20) = v12 >> 2;
      if (v12 >> 2 <= 1) {
        uint64_t v20 = 1;
      }
      else {
        uint64_t v20 = v20;
      }
      do
      {
        if (v12 >= 4)
        {
          char v21 = 0;
          char v22 = (int *)a8;
          uint64_t v23 = v20;
          do
          {
            int v24 = *v22++;
            v21 |= *(_DWORD *)v18 == v24;
            --v23;
          }
          while (v23);
        }
        else
        {
          char v21 = 0;
        }
        *(unsigned char *)(v18 + 32) = v21 & 1;
        v18 += 40;
      }
      while (v18 != v19);
    }
    uint64_t v25 = (CADeprecated::CAMutex::Locker *)buf;
    goto LABEL_63;
  }

  ADS::BaseObject::SetPropertyData(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8, a9, a10, a11);
}

void sub_1BAE7A2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ADS::SelectorControl::GetPropertyData(ADS::SelectorControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, int *a6, unsigned int a7, unsigned int *a8, _DWORD *a9)
{
  std::runtime_error v13 = a9;
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  AudioObjectPropertySelector mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1935893352)
  {
    if (mSelector == 1935893353)
    {
      uint64_t v36 = *((void *)this + 7);
      *(void *)buf = (char *)this + 56;
      uint8_t buf[8] = (*(uint64_t (**)(void))(v36 + 16))();
      unsigned int v37 = 0;
      if (a7)
      {
        uint64_t v38 = *((void *)this + 18);
        uint64_t v39 = *((void *)this + 19);
        do
        {
          if (v38 == v39) {
            break;
          }
          if (*(unsigned char *)(v38 + 32)) {
            a9[v37++] = *(_DWORD *)v38;
          }
          v38 += 40;
        }
        while (v37 < a7);
      }
      *a8 = 4 * v37;
      unint64_t v35 = (CADeprecated::CAMutex::Locker *)buf;
      goto LABEL_42;
    }
    if (mSelector != 1935894894) {
      goto LABEL_21;
    }
    if (a7 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADS_SelectorControl.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 214;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SelectorControl::GetPropertyData: not enough space for the return value of kAudioSelectorControlPropertyItemName", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 561211770;
    }
    if (a5 != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADS_SelectorControl.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 215;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SelectorControl::GetPropertyData: qualifier for kAudioSelectorControlPropertyItemName must be a UInt32 ID", buf, 0x12u);
      }
      unint64_t v44 = __cxa_allocate_exception(0x10uLL);
      *(void *)unint64_t v44 = off_1F148A5D8;
      v44[2] = 560947818;
    }
    uint64_t v20 = *((void *)this + 7);
    long long v47 = (char *)this + 56;
    char v48 = (*(uint64_t (**)(char *))(v20 + 16))((char *)this + 56);
    uint64_t v22 = *((void *)this + 18);
    uint64_t v21 = *((void *)this + 19);
    if (v22 == v21) {
      goto LABEL_70;
    }
    uint64_t v23 = (OS::CF::UntypedObject *)&buf[8];
    while (1)
    {
      *(_DWORD *)buf = *(_DWORD *)v22;
      int v24 = OS::CF::UntypedObject::UntypedObject(v23, *(CFTypeRef *)(v22 + 16));
      *(void *)&uint8_t buf[8] = &unk_1F1489A20;
      uint64_t v25 = *(void *)(v22 + 24);
      char v51 = *(unsigned char *)(v22 + 32);
      uint64_t v50 = v25;
      int v26 = *a6;
      OS::CF::UntypedObject::~UntypedObject(v24);
      if (*(_DWORD *)buf == v26) {
        break;
      }
      v22 += 40;
      if (v22 == v21)
      {
        uint64_t v22 = v21;
        break;
      }
    }
    if (v22 == *((void *)this + 19))
    {
LABEL_70:
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADS_SelectorControl.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 221;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SelectorControl::GetPropertyData: ID not found", buf, 0x12u);
      }
      int v40 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v40 = off_1F148A5D8;
      v40[2] = 560947818;
    }
    *(void *)a9 = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF88], *(CFStringRef *)(v22 + 16));
    unsigned int v27 = 8;
LABEL_34:
    *a8 = v27;
    unint64_t v35 = (CADeprecated::CAMutex::Locker *)&v47;
LABEL_42:
    CADeprecated::CAMutex::Locker::~Locker(v35);
    return;
  }
  if (mSelector == 1668049771)
  {
    if (a7 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADS_SelectorControl.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 229;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SelectorControl::GetPropertyData: not enough space for the return value of kAudioSelectorControlPropertyItemKind", buf, 0x12u);
      }
      int v43 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v43 = off_1F148A5D8;
      v43[2] = 561211770;
    }
    if (a5 != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADS_SelectorControl.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 230;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SelectorControl::GetPropertyData: qualifier for kAudioSelectorControlPropertyItemKind must be a UInt32 ID", buf, 0x12u);
      }
      uint64_t v45 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v45 = off_1F148A5D8;
      v45[2] = 561211770;
    }
    uint64_t v28 = *((void *)this + 7);
    long long v47 = (char *)this + 56;
    char v48 = (*(uint64_t (**)(char *))(v28 + 16))((char *)this + 56);
    uint64_t v30 = *((void *)this + 18);
    uint64_t v29 = *((void *)this + 19);
    if (v30 == v29) {
      goto LABEL_71;
    }
    uint64_t v31 = (OS::CF::UntypedObject *)&buf[8];
    while (1)
    {
      *(_DWORD *)buf = *(_DWORD *)v30;
      int v32 = OS::CF::UntypedObject::UntypedObject(v31, *(CFTypeRef *)(v30 + 16));
      *(void *)&uint8_t buf[8] = &unk_1F1489A20;
      uint64_t v33 = *(void *)(v30 + 24);
      char v51 = *(unsigned char *)(v30 + 32);
      uint64_t v50 = v33;
      int v34 = *a6;
      OS::CF::UntypedObject::~UntypedObject(v32);
      if (*(_DWORD *)buf == v34) {
        break;
      }
      v30 += 40;
      if (v30 == v29)
      {
        uint64_t v30 = v29;
        break;
      }
    }
    if (v30 == *((void *)this + 19))
    {
LABEL_71:
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADS_SelectorControl.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 236;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SelectorControl::GetPropertyData: ID not found", buf, 0x12u);
      }
      int v41 = 560947818;
    }
    else
    {
      if (*(unsigned char *)(v30 + 24))
      {
        *a9 = *(_DWORD *)(v30 + 28);
        unsigned int v27 = 4;
        goto LABEL_34;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADS_SelectorControl.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 237;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  This item does not have a kind.", buf, 0x12u);
      }
      int v41 = 1852797029;
    }
    unint64_t v46 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v46 = off_1F148A5D8;
    v46[2] = v41;
  }
  if (mSelector == 1935892841)
  {
    unint64_t v15 = a7 >> 2;
    uint64_t v16 = (int *)*((void *)this + 18);
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 19) - (void)v16) >> 3) < v15) {
      unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 19) - (void)v16) >> 3);
    }
    if (v15)
    {
      unint64_t v17 = v15;
      do
      {
        int v18 = *v16;
        v16 += 10;
        *v13++ = v18;
        --v17;
      }
      while (v17);
      unsigned int v19 = 4 * v15;
    }
    else
    {
      unsigned int v19 = 0;
    }
    *a8 = v19;
    return;
  }
LABEL_21:

  ADS::Control::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, (char *)a9);
}

void sub_1BAE7AB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ADS::SelectorControl::GetPropertyDataSize(ADS::SelectorControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6)
{
  AudioObjectPropertySelector mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1935892840)
  {
    switch(mSelector)
    {
      case 0x73636169u:
        return 858993460 * ((*((void *)this + 19) - *((void *)this + 18)) >> 3);
      case 0x7363696Eu:
        return 8;
      case 0x73636369u:
        uint64_t v8 = *((void *)this + 18);
        uint64_t v9 = *((void *)this + 19);
        if (v8 == v9) {
          return 0;
        }
        int v10 = 0;
        uint64_t v11 = (OS::CF::UntypedObject *)v15;
        do
        {
          unsigned int v12 = OS::CF::UntypedObject::UntypedObject(v11, *(CFTypeRef *)(v8 + 16));
          v15[0] = &unk_1F1489A20;
          uint64_t v13 = *(void *)(v8 + 24);
          unsigned __int8 v16 = *(unsigned char *)(v8 + 32);
          v15[2] = v13;
          int v14 = v16;
          OS::CF::UntypedObject::~UntypedObject(v12);
          v10 += v14;
          v8 += 40;
        }
        while (v8 != v9);
        return (4 * v10);
    }
  }
  else if (mSelector == 1667591277 || mSelector == 1668049771 || mSelector == 1668506480)
  {
    return 4;
  }

  return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
}

uint64_t ADS::SelectorControl::IsPropertySettable(ADS::SelectorControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  AudioObjectPropertySelector mSelector = a4->mSelector;
  uint64_t v5 = 1;
  if ((int)a4->mSelector > 1935892840)
  {
    if (mSelector == 1935894894 || mSelector == 1935893353) {
      return v5;
    }
    int v6 = 1935892841;
  }
  else
  {
    if (mSelector == 1667591277) {
      return 0;
    }
    if (mSelector == 1668049771) {
      return v5;
    }
    int v6 = 1668506480;
  }
  if (mSelector == v6) {
    return 0;
  }
  return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
}

BOOL ADS::SelectorControl::HasProperty(ADS::SelectorControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  AudioObjectPropertySelector mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1935892840)
  {
    BOOL v5 = mSelector == 1935892841 || mSelector == 1935893353;
    int v6 = 1935894894;
  }
  else
  {
    BOOL v5 = mSelector == 1667591277 || mSelector == 1668049771;
    int v6 = 1668506480;
  }
  return v5 || mSelector == v6 || ADS::BaseObject::HasProperty(this, a2, a3, a4);
}

void ADS::SelectorControl::~SelectorControl(ADS::SelectorControl *this)
{
  ADS::SelectorControl::~SelectorControl(this);

  JUMPOUT(0x1C1859840);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F147E2D0;
  BOOL v2 = (void **)((char *)this + 144);
  std::vector<ADS::SelectorControl::SelectorItem>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(void *)this = &unk_1F147E368;
  CADeprecated::CAMutex::~CAMutex((ADS::SelectorControl *)((char *)this + 56));

  ADS::BaseObject::~BaseObject(this);
}

void std::vector<ADS::SelectorControl::SelectorItem>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  double v1 = *a1;
  BOOL v2 = (char *)**a1;
  if (v2)
  {
    unsigned int v4 = (char *)v1[1];
    BOOL v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = v4 - 40;
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v4 - 32));
        unsigned int v4 = v6;
      }
      while (v6 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

const __CFArray *ADS::SelectorControl::parseItems(void *a1, uint64_t a2)
{
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef result = OS::CF::ArrayBase<__CFArray const*>::GetSize(*(const __CFArray **)(a2 + 8));
    if (i >= (int)result) {
      break;
    }
    int v41 = &unk_1F1489A20;
    CFTypeRef cf = 0;
    OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v38, a2, i);
    if (theDict)
    {
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v36, theDict, @"id");
      if (v37) {
        int v6 = OS::CF::Number::GetValue<int>(v37, 0);
      }
      else {
        int v6 = i;
      }
      int v40 = v6;
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v34, theDict, @"name");
      if (v35)
      {
        OS::CF::String::AsStdString(&__p, (uint64_t)v34);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        OS::CF::String::String((OS::CF::String *)v32, (const char *)p_p);
        CFNumberRef v8 = (const __CFNumber *)cf;
        CFTypeRef cf = v33;
        CFNumberRef v33 = v8;
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v32);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(&__p, theDict, @"selected");
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v32, theDict, @"kind");
        unsigned __int8 v9 = __p.__r_.__value_.__s.__data_[8];
        if (__p.__r_.__value_.__l.__size_) {
          unsigned __int8 v9 = OS::CF::Boolean::AsBool((const __CFBoolean *)__p.__r_.__value_.__l.__size_);
        }
        unsigned __int8 v44 = v9;
        if (v33)
        {
          HIDWORD(v43) = OS::CF::Number::GetValue<unsigned int>(v33, 0);
          char v10 = 1;
        }
        else
        {
          char v10 = 0;
        }
        LOBYTE(v43) = v10;
        unint64_t v12 = a1[19];
        unint64_t v11 = a1[20];
        if (v12 >= v11)
        {
          uint64_t v15 = a1[18];
          unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - v15) >> 3);
          unint64_t v17 = v16 + 1;
          if (v16 + 1 > 0x666666666666666) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v15) >> 3);
          if (2 * v18 > v17) {
            unint64_t v17 = 2 * v18;
          }
          if (v18 >= 0x333333333333333) {
            unint64_t v19 = 0x666666666666666;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            if (v19 > 0x666666666666666) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v20 = (char *)operator new(40 * v19);
          }
          else
          {
            uint64_t v20 = 0;
          }
          uint64_t v21 = &v20[40 * v16];
          uint64_t v22 = &v20[40 * v19];
          *(_DWORD *)uint64_t v21 = v40;
          OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(v21 + 8), cf);
          *((void *)v21 + 1) = &unk_1F1489A20;
          *((void *)v21 + 3) = v43;
          v21[32] = v44;
          int v14 = v21 + 40;
          int v24 = (char *)a1[18];
          uint64_t v23 = (char *)a1[19];
          if (v23 == v24)
          {
            a1[18] = v21;
            a1[19] = v14;
            a1[20] = v22;
          }
          else
          {
            uint64_t v25 = 0;
            do
            {
              int v26 = &v21[v25];
              *((_DWORD *)v26 - 10) = *(_DWORD *)&v23[v25 - 40];
              *((void *)v26 - 3) = *(void *)&v23[v25 - 24];
              *(void *)&v23[v25 - 24] = 0;
              *((void *)v26 - 4) = &unk_1F1489A20;
              uint64_t v27 = *(void *)&v23[v25 - 16];
              *(v26 - 8) = v23[v25 - 8];
              *((void *)v26 - 2) = v27;
              v25 -= 40;
            }
            while (&v23[v25] != v24);
            uint64_t v28 = &v21[v25];
            uint64_t v29 = (char *)a1[18];
            uint64_t v23 = (char *)a1[19];
            a1[18] = v28;
            a1[19] = v14;
            a1[20] = v22;
            if (v23 != v29)
            {
              do
              {
                uint64_t v30 = v23 - 40;
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v23 - 32));
                uint64_t v23 = v30;
              }
              while (v30 != v29);
              uint64_t v23 = v29;
            }
          }
          if (v23) {
            operator delete(v23);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v12 = v40;
          OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(v12 + 8), cf);
          *(void *)(v12 + 8) = &unk_1F1489A20;
          uint64_t v13 = v43;
          *(unsigned char *)(v12 + 32) = v44;
          *(void *)(v12 + 24) = v13;
          int v14 = (char *)(v12 + 40);
        }
        a1[19] = v14;
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v32);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&__p);
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v34);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v36);
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v38);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v41);
  }
  return result;
}

void sub_1BAE7B348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va4, a3);
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v15 = va_arg(va4, void);
  uint64_t v17 = va_arg(va4, void);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va1);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va2);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va3);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va4);
  OS::CF::UntypedObject::~UntypedObject(v3);
  _Unwind_Resume(a1);
}

ADS::Control *ADS::SelectorControl::SelectorControl(ADS::Control *a1, int a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t v8 = ADS::Control::Control(a1, a2, a3, a4, a5, 1936483188);
  *(void *)uint64_t v8 = &unk_1F147E2D0;
  *((void *)v8 + 18) = 0;
  *((void *)v8 + 19) = 0;
  *((void *)v8 + 20) = 0;
  OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v10, *(CFTypeRef *)(a6 + 8));
  v10[0] = &unk_1F1489968;
  ADS::SelectorControl::parseItems(a1, (uint64_t)v10);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v10);
  return a1;
}

void sub_1BAE7B434(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va);
  std::vector<ADS::SelectorControl::SelectorItem>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  *(void *)uint64_t v2 = &unk_1F147E368;
  CADeprecated::CAMutex::~CAMutex((CADeprecated::CAMutex *)(v2 + 56));
  ADS::BaseObject::~BaseObject((ADS::BaseObject *)v2);
  _Unwind_Resume(a1);
}

void HALB_CFPlugIn::~HALB_CFPlugIn(HALB_CFPlugIn *this)
{
  HALB_CFPlugIn::~HALB_CFPlugIn(this);

  JUMPOUT(0x1C1859840);
}

{
  const void *v2;

  *(void *)this = &unk_1F147E3D0;
  if (*((unsigned char *)this + 16))
  {
    uint64_t v2 = (const void *)*((void *)this + 1);
    if (v2)
    {
      CFRelease(v2);
      *((void *)this + 1) = 0;
    }
  }
}

CFStringRef HALB_CFPlugIn::GetBundleID(HALB_CFPlugIn *this)
{
  if (!this) {
    return 0;
  }
  Bundle = CFPlugInGetBundle(this);
  if (!Bundle) {
    return 0;
  }

  return CFBundleGetIdentifier(Bundle);
}

double HALIO::HALIO_Graph_Builder::maybe_set_master_device(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 8))
  {
    CFTypeRef v4 = *(CFTypeRef *)a3;
    if (*(void *)a3)
    {
      uint64_t v6 = *a1;
      CFRetain(*(CFTypeRef *)a3);
      CFTypeRef cf = v4;
      int v7 = (*(uint64_t (**)(uint64_t, CFTypeRef *))(*(void *)v6 + 24))(v6, &cf);
      if (cf) {
        CFRelease(cf);
      }
      if (v7)
      {
        if (!*(void *)a3)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          applesauce::CF::construct_error(exception);
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)&v11, *(const __CFString **)a3);
        uint64_t v9 = (void **)(a2 + 40);
        if (*(char *)(a2 + 63) < 0) {
          operator delete(*v9);
        }
        double result = *(double *)&v11;
        *(_OWORD *)uint64_t v9 = v11;
        *(void *)(a2 + 56) = v12;
        *(_DWORD *)(a2 + 64) = 1;
      }
    }
  }
  return result;
}

void sub_1BAE7B650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

uint64_t HALIO::HALIO_Graph_Builder::create_graph_description_from_aggregate_description(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, CFDictionaryRef *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9)
{
  uint64_t v425 = *MEMORY[0x1E4F143B8];
  if (!*a5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_672;
  }
  CFStringRef v14 = CFStringCreateWithBytes(0, (const UInt8 *)"uid", 3, 0x8000100u, 0);
  if (!v14)
  {
    v293 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v293, "Could not construct");
    __cxa_throw(v293, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v374, *a5, v14);
  CFRelease(v14);
  if (!v375)
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v374);
  }
  if (!*a5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_672;
  }
  CFStringRef v15 = CFStringCreateWithBytes(0, (const UInt8 *)"stacked channel policy", 22, 0x8000100u, 0);
  if (!v15)
  {
    v294 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v294, "Could not construct");
    __cxa_throw(v294, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  LODWORD(valuePtr) = 0;
  cf.__r_.__value_.__r.__words[0] = (std::string::size_type)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf.__r_.__value_.__r.__words[0])
  {
    v295 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v295, "Could not construct");
    __cxa_throw(v295, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v373, *a5, v15, &cf);
  if (cf.__r_.__value_.__r.__words[0]) {
    CFRelease(cf.__r_.__value_.__l.__data_);
  }
  CFRelease(v15);
  CFNumberRef v16 = v373;
  if (!v373 || (BOOL v347 = applesauce::CF::convert_to<BOOL,0>(v373), !*a5))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_672;
  }
  CFStringRef v17 = CFStringCreateWithBytes(0, (const UInt8 *)"subdevices", 10, 0x8000100u, 0);
  if (!v17)
  {
    v296 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v296, "Could not construct");
    __cxa_throw(v296, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&theArray, *a5, v17);
  CFRelease(v17);
  if (v372)
  {
    if (!theArray) {
      goto LABEL_635;
    }
    BOOL v18 = CFArrayGetCount(theArray) != 0;
  }
  else
  {
    BOOL v18 = 0;
  }
  if (!*a5)
  {
LABEL_635:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_672;
  }
  CFStringRef v19 = CFStringCreateWithBytes(0, (const UInt8 *)"taps", 4, 0x8000100u, 0);
  if (!v19)
  {
    v297 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v297, "Could not construct");
    __cxa_throw(v297, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v369, *a5, v19);
  CFRelease(v19);
  if (v370)
  {
    if (!v369) {
      goto LABEL_661;
    }
    BOOL v20 = CFArrayGetCount(v369) != 0;
  }
  else
  {
    BOOL v20 = 0;
  }
  if (v18 || v20)
  {
    if (v374)
    {
      applesauce::CF::convert_to<std::string,0>((uint64_t)&v358, v374);
      v360[0] = 0;
      long long v361 = v358;
      uint64_t v362 = v359;
      long long v358 = 0uLL;
      uint64_t v359 = 0;
      uint64_t v363 = 0x100000000;
      long long v364 = 0u;
      long long v365 = 0u;
      long long v366 = 0u;
      long long v367 = 0u;
      long long v368 = 0u;
      AMCP::Node_Description::Node_Description((AMCP::Node_Description *)&cf, (const AMCP::Node_Description *)v360);
      BOOL v334 = v20;
      int64x2_t v354 = 0uLL;
      v355 = 0;
      valuePtr = (void **)&v354;
      v418[0] = 0;
      v354.i64[0] = (uint64_t)operator new(0x78uLL);
      v354.i64[1] = v354.i64[0];
      uint64_t v21 = v354.i64[0] + 120;
      v355 = (char *)(v354.i64[0] + 120);
      AMCP::Node_Description::Node_Description((AMCP::Node_Description *)v354.i64[0], (const AMCP::Node_Description *)&cf);
      v354.i64[1] = v21;
      int64x2_t v356 = 0uLL;
      uint64_t v22 = 96;
      CFTypeRef v357 = 0;
      do
      {
        valuePtr = (void **)((char *)&cf.__r_.__value_.__l.__data_ + v22);
        std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100](&valuePtr);
        v22 -= 24;
      }
      while (v22 != 48);
      if (v400 < 0) {
        operator delete(__p);
      }
      if (SBYTE7(v397) < 0)
      {
        operator delete((void *)cf.__r_.__value_.__l.__size_);
        if (!v18) {
          goto LABEL_296;
        }
      }
      else if (!v18)
      {
        goto LABEL_296;
      }
      valuePtr = 0;
      *((void *)&v420 + 1) = 0;
      memset(&v418[8], 0, 48);
      if (!*a5)
      {
        v313 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v313, "Could not construct");
        __cxa_throw(v313, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      CFStringRef v24 = CFStringCreateWithBytes(0, (const UInt8 *)"subdevices", 10, 0x8000100u, 0);
      if (!v24)
      {
        v314 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v314, "Could not construct");
        __cxa_throw(v314, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v383, *a5, v24);
      CFRelease(v24);
      if (!v383.__r_.__value_.__s.__data_[8])
      {
        AMCP::Log::Scope_Registry::get(v25);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
        v258 = *(NSObject **)cf.__r_.__value_.__l.__data_;
        if (cf.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf.__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v258, OS_LOG_TYPE_ERROR))
        {
          v259 = pthread_self();
          mach_port_t v260 = pthread_mach_thread_np(v259);
          LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
          HIDWORD(cf.__r_.__value_.__r.__words[0]) = v260;
          LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
          WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf.__r_.__value_.__r.__words[2]) = 711;
          LOWORD(v397) = 2080;
          *(void *)((char *)&v397 + 2) = "subdevice_array_opt.has_value()";
          _os_log_error_impl(&dword_1BAA78000, v258, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s This should not be called if there are no subdevices", (uint8_t *)&cf, 0x22u);
        }
        abort();
      }
      if (!v383.__r_.__value_.__r.__words[0])
      {
        v315 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v315, "Could not construct");
        __cxa_throw(v315, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&__src, (CFArrayRef)v383.__r_.__value_.__l.__data_, 0);
      if (!v383.__r_.__value_.__s.__data_[8]) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      if (!v383.__r_.__value_.__r.__words[0])
      {
        v316 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v316, "Could not construct");
        __cxa_throw(v316, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::at_as<applesauce::CF::ArrayRef>(&buf, (CFArrayRef)v383.__r_.__value_.__l.__data_);
      if (!(__src.__r_.__value_.__s.__data_[8] | buf.__r_.__value_.__s.__data_[8]))
      {
        AMCP::Log::Scope_Registry::get(v26);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
        int v32 = *(NSObject **)cf.__r_.__value_.__l.__data_;
        if (cf.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf.__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          CFNumberRef v33 = pthread_self();
          mach_port_t v34 = pthread_mach_thread_np(v33);
          LODWORD(cf.__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf.__r_.__value_.__r.__words[0]) = v34;
          LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
          WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf.__r_.__value_.__r.__words[2]) = 717;
          _os_log_debug_impl(&dword_1BAA78000, v32, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Invalid subdevice list", (uint8_t *)&cf, 0x18u);
        }
        goto LABEL_76;
      }
      v418[0] = __src.__r_.__value_.__s.__data_[8];
      CFStringRef v27 = CFStringCreateWithBytes(0, (const UInt8 *)"stacked", 7, 0x8000100u, 0);
      if (!v27)
      {
        v317 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v317, "Could not construct");
        __cxa_throw(v317, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (*a5)
      {
        uint64_t v28 = applesauce::CF::details::at_key<applesauce::CF::StringRef>(*a5, v27);
        if (v28)
        {
          uint64_t v29 = v28;
          CFRetain(v28);
          CFTypeID v30 = CFGetTypeID(v29);
          if (v30 == CFBooleanGetTypeID())
          {
            cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
            cf.__r_.__value_.__s.__data_[8] = 1;
            BOOL v31 = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)v29);
            goto LABEL_57;
          }
          CFRelease(v29);
        }
        cf.__r_.__value_.__s.__data_[0] = 0;
        cf.__r_.__value_.__s.__data_[8] = 0;
        if (*a5)
        {
          applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,applesauce::CF::StringRef>(v411, *a5, v27);
          if (!LOBYTE(v411[1]))
          {
            BOOL v31 = 0;
            goto LABEL_56;
          }
          if (v411[0])
          {
            BOOL v31 = applesauce::CF::convert_to<BOOL,0>((const __CFNumber *)v411[0]);
LABEL_56:
            std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v411);
LABEL_57:
            std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
            CFRelease(v27);
            v418[56] = v31;
            if (__src.__r_.__value_.__s.__data_[8]) {
              char v35 = v31;
            }
            else {
              char v35 = 1;
            }
            if (v35)
            {
              if (__src.__r_.__value_.__s.__data_[8] && v31)
              {
                uint64_t v36 = (const void *)v383.__r_.__value_.__r.__words[0];
                if (v383.__r_.__value_.__r.__words[0]) {
                  CFRetain(v383.__r_.__value_.__l.__data_);
                }
                v411[0] = v36;
                std::vector<void const*>::vector(&cf, 1uLL);
                *(void *)cf.__r_.__value_.__l.__data_ = v411[0];
                CFArray = (void **)applesauce::CF::details::make_CFArrayRef<void const*>((const void **)cf.__r_.__value_.__l.__data_, cf.__r_.__value_.__l.__size_);
                if (cf.__r_.__value_.__r.__words[0])
                {
                  cf.__r_.__value_.__l.__size_ = cf.__r_.__value_.__r.__words[0];
                  operator delete(cf.__r_.__value_.__l.__data_);
                }
                if (v411[0]) {
                  CFRelease(v411[0]);
                }
                goto LABEL_75;
              }
              if (!v383.__r_.__value_.__s.__data_[8]) {
                std::__throw_bad_optional_access[abi:ne180100]();
              }
              CFArray = (void **)v383.__r_.__value_.__r.__words[0];
              if (v383.__r_.__value_.__r.__words[0])
              {
                CFRetain(v383.__r_.__value_.__l.__data_);
LABEL_75:
                valuePtr = CFArray;
                CFRetain(CFArray);
                CFRelease(CFArray);
                goto LABEL_76;
              }
              valuePtr = 0;
            }
            else
            {
              if (!v383.__r_.__value_.__s.__data_[8]) {
                std::__throw_bad_optional_access[abi:ne180100]();
              }
              valuePtr = (void **)v383.__r_.__value_.__r.__words[0];
              if (v383.__r_.__value_.__r.__words[0]) {
                CFRetain(v383.__r_.__value_.__l.__data_);
              }
            }
LABEL_76:
            std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&buf);
            std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__src);
            std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v383);
            std::vector<BOOL>::operator=((void **)&v418[8], a6);
            std::vector<BOOL>::operator=((void **)&v418[32], a7);
            uint64_t v38 = (void *)a8[3];
            if (v38)
            {
              if (v38 == a8)
              {
                *(void *)&long long v397 = &cf;
                (*(void (**)(void *, std::string *))(*a8 + 24))(a8, &cf);
                uint64_t v39 = (std::string *)v397;
              }
              else
              {
                uint64_t v39 = (std::string *)(*(uint64_t (**)(void *))(*v38 + 16))(v38);
                *(void *)&long long v397 = v39;
              }
              uint64_t v40 = *((void *)&v420 + 1);
              if (v39 == &cf)
              {
                if (*((long long **)&v420 + 1) == &v419)
                {
                  (*(void (**)(std::string *, CFTypeRef *))(cf.__r_.__value_.__r.__words[0] + 24))(&cf, v411);
                  (*(void (**)(void))(*(void *)v397 + 32))(v397);
                  *(void *)&long long v397 = 0;
                  (*(void (**)(void, std::string *))(**((void **)&v420 + 1) + 24))(*((void *)&v420 + 1), &cf);
                  (*(void (**)(void))(**((void **)&v420 + 1) + 32))(*((void *)&v420 + 1));
                  *((void *)&v420 + 1) = 0;
                  *(void *)&long long v397 = &cf;
                  (*((void (**)(CFTypeRef *, long long *))v411[0] + 3))(v411, &v419);
                  (*((void (**)(CFTypeRef *))v411[0] + 4))(v411);
                }
                else
                {
                  (*(void (**)(std::string *, long long *))(cf.__r_.__value_.__r.__words[0] + 24))(&cf, &v419);
                  (*(void (**)(void))(*(void *)v397 + 32))(v397);
                  *(void *)&long long v397 = *((void *)&v420 + 1);
                }
                *((void *)&v420 + 1) = &v419;
                goto LABEL_90;
              }
              if (*((long long **)&v420 + 1) != &v419) {
                goto LABEL_84;
              }
            }
            else
            {
              *(void *)&long long v397 = 0;
              uint64_t v40 = *((void *)&v420 + 1);
              if (*((long long **)&v420 + 1) != &v419)
              {
                uint64_t v39 = 0;
LABEL_84:
                *(void *)&long long v397 = v40;
                *((void *)&v420 + 1) = v39;
LABEL_90:
                std::__function::__value_func<BOOL ()>::~__value_func[abi:ne180100](&cf);
                *(void *)&long long v421 = a9;
                int v41 = (AMCP::Log::Scope_Registry *)(*(void *(**)(std::string *__return_ptr))(*(void *)*a2 + 96))(&v380);
                if (v380.__r_.__value_.__s.__data_[16])
                {
                  std::string::size_type size = (const void *)v380.__r_.__value_.__l.__size_;
                  std::string::size_type v43 = v380.__r_.__value_.__r.__words[0];
                  if (v380.__r_.__value_.__l.__size_)
                  {
                    CFRetain((CFTypeRef)v380.__r_.__value_.__l.__size_);
                    v379.__r_.__value_.__r.__words[0] = v43;
                    BOOL v329 = size == 0;
LABEL_117:
                    CFRetain(size);
                    v379.__r_.__value_.__l.__size_ = (std::string::size_type)size;
                    if (v418[0] && !v418[56])
                    {
                      int v41 = (AMCP::Log::Scope_Registry *)CFRetain(size);
                      goto LABEL_128;
                    }
                    int v41 = (AMCP::Log::Scope_Registry *)CFRetain(size);
                    goto LABEL_134;
                  }
                  v379.__r_.__value_.__r.__words[0] = v380.__r_.__value_.__r.__words[0];
                  goto LABEL_126;
                }
                if (!*a5) {
                  goto LABEL_685;
                }
                CFStringRef v44 = CFStringCreateWithBytes(0, (const UInt8 *)"uid", 3, 0x8000100u, 0);
                if (!v44)
                {
                  v318 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v318, "Could not construct");
                  __cxa_throw(v318, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                BOOL v45 = applesauce::CF::details::has_key<applesauce::CF::StringRef>(*a5, v44);
                CFRelease(v44);
                if (!v45)
                {
                  AMCP::Log::Scope_Registry::get(v46);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                  v289 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                  if (cf.__r_.__value_.__l.__size_) {
                    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf.__r_.__value_.__l.__size_);
                  }
                  if (os_log_type_enabled(v289, OS_LOG_TYPE_ERROR))
                  {
                    v290 = pthread_self();
                    mach_port_t v291 = pthread_mach_thread_np(v290);
                    LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
                    HIDWORD(cf.__r_.__value_.__r.__words[0]) = v291;
                    LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                    *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                    WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                    HIDWORD(cf.__r_.__value_.__r.__words[2]) = 511;
                    LOWORD(v397) = 2080;
                    *(void *)((char *)&v397 + 2) = "in_aggregate_description->has_key(AMCP::CF::String{kAudioAggregateDeviceUIDKey})";
                    _os_log_error_impl(&dword_1BAA78000, v289, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s We should have already exited if the aggregate UID were missing.", (uint8_t *)&cf, 0x22u);
                  }
                  abort();
                }
                if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)*a2 + 48))(*a2, a4))
                {
                  long long v47 = (AMCP::Log::Scope_Registry *)(*(void *(**)(std::string *__return_ptr))(*(void *)*a2 + 72))(&cf);
                  CFTypeRef v48 = (CFTypeRef)cf.__r_.__value_.__r.__words[0];
LABEL_113:
                  if (v48)
                  {
                    uint64_t v51 = *a2;
                    CFRetain(v48);
                    v383.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
                    double v52 = (*(double (**)(uint64_t, std::string *))(*(void *)v51 + 80))(v51, &v383);
                    if (v383.__r_.__value_.__r.__words[0]) {
                      CFRelease(v383.__r_.__value_.__l.__data_);
                    }
                    CFRetain(v48);
                    CFRelease(v48);
                    BOOL v329 = 0;
                    *(double *)&v379.__r_.__value_.__l.__data_ = v52;
                    std::string::size_type size = v48;
                    goto LABEL_117;
                  }
                  AMCP::Log::Scope_Registry::get(v47);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                  unint64_t v53 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                  if (cf.__r_.__value_.__l.__size_) {
                    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf.__r_.__value_.__l.__size_);
                  }
                  int v41 = (AMCP::Log::Scope_Registry *)os_log_type_enabled(v53, OS_LOG_TYPE_ERROR);
                  if (v41)
                  {
                    v253 = pthread_self();
                    mach_port_t v254 = pthread_mach_thread_np(v253);
                    LODWORD(cf.__r_.__value_.__l.__data_) = 67109634;
                    HIDWORD(cf.__r_.__value_.__r.__words[0]) = v254;
                    LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                    *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                    WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                    HIDWORD(cf.__r_.__value_.__r.__words[2]) = 527;
                    _os_log_error_impl(&dword_1BAA78000, v53, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Unable to calculate clock and sample rate", (uint8_t *)&cf, 0x18u);
                  }
                  std::string::size_type size = 0;
                  v379.__r_.__value_.__r.__words[0] = 0;
LABEL_126:
                  v379.__r_.__value_.__l.__size_ = 0;
                  BOOL v329 = 1;
                  if (v418[0] && !v418[56])
                  {
LABEL_128:
                    CFTypeRef v326 = size;
                    CFTypeRef v352 = size;
                    char v353 = 1;
                    unint64_t v54 = (void *)v354.i64[0];
                    if (v354.i64[1] - v354.i64[0] == 120)
                    {
                      if (!*(_DWORD *)v354.i64[0])
                      {
                        if (v356.i64[0] == v356.i64[1])
                        {
                          long long v381 = 0uLL;
                          CFTypeRef v382 = 0;
                          HALIO::HALIO_Graph_Builder::connect_input_terminals(a2, (const __CFArray **)&valuePtr, &v418[8], v354.i64[0], (uint64_t)&v381, (double *)&v379, (uint64_t)&v419);
                          v348 = v54 + 9;
                          v377.__r_.__value_.__r.__words[0] = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v54[10] - v54[9]) >> 3);
                          unint64_t v344 = v421;
                          CFArrayRef v339 = (const __CFArray *)valuePtr;
                          if (valuePtr)
                          {
                            CFIndex Count = CFArrayGetCount((CFArrayRef)valuePtr);
                            v331 = valuePtr;
                            CFIndex v327 = valuePtr ? CFArrayGetCount((CFArrayRef)valuePtr) : 0;
                            if (Count)
                            {
                              uint64_t v342 = (uint64_t)(v54 + 1);
                              for (unint64_t i = 0; i != Count; ++i)
                              {
                                if (v339 == (const __CFArray *)v331 && i == v327) {
                                  break;
                                }
                                applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v392, v339, i);
                                if (!v392) {
                                  goto LABEL_655;
                                }
                                CFStringRef v66 = CFStringCreateWithBytes(0, (const UInt8 *)"uid", 3, 0x8000100u, 0);
                                if (!v66)
                                {
                                  v299 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                  std::runtime_error::runtime_error(v299, "Could not construct");
                                  __cxa_throw(v299, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                }
                                cf.__r_.__value_.__r.__words[0] = 0;
                                applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v391, (const __CFDictionary *)v392, v66, &cf);
                                if (cf.__r_.__value_.__r.__words[0]) {
                                  CFRelease(cf.__r_.__value_.__l.__data_);
                                }
                                CFRelease(v66);
                                if (!v392) {
                                  goto LABEL_655;
                                }
                                CFStringRef v67 = CFStringCreateWithBytes(0, (const UInt8 *)"latency-out", 11, 0x8000100u, 0);
                                if (!v67)
                                {
                                  v300 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                  std::runtime_error::runtime_error(v300, "Could not construct");
                                  __cxa_throw(v300, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                }
                                LODWORD(cf.__r_.__value_.__l.__data_) = 0;
                                v411[0] = CFNumberCreate(0, kCFNumberIntType, &cf);
                                if (!v411[0])
                                {
                                  v298 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                  std::runtime_error::runtime_error(v298, "Could not construct");
                                  __cxa_throw(v298, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                }
                                applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, (const __CFDictionary *)v392, v67, v411);
                                mach_port_t v68 = (const void *)cf.__r_.__value_.__r.__words[0];
                                if (!cf.__r_.__value_.__r.__words[0]) {
                                  goto LABEL_655;
                                }
                                int __sz = applesauce::CF::convert_to<int,0>((const __CFNumber *)cf.__r_.__value_.__l.__data_);
                                CFRelease(v68);
                                if (v411[0]) {
                                  CFRelease(v411[0]);
                                }
                                CFRelease(v67);
                                if (!v392) {
                                  goto LABEL_655;
                                }
                                CFStringRef v69 = CFStringCreateWithBytes(0, (const UInt8 *)"don't pad", 9, 0x8000100u, 0);
                                if (!v69)
                                {
                                  v309 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                  std::runtime_error::runtime_error(v309, "Could not construct");
                                  __cxa_throw(v309, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                }
                                LODWORD(cf.__r_.__value_.__l.__data_) = 1;
                                v411[0] = CFNumberCreate(0, kCFNumberIntType, &cf);
                                if (!v411[0])
                                {
                                  v304 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                  std::runtime_error::runtime_error(v304, "Could not construct");
                                  __cxa_throw(v304, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                }
                                applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, (const __CFDictionary *)v392, v69, v411);
                                char v70 = (const void *)cf.__r_.__value_.__r.__words[0];
                                if (!cf.__r_.__value_.__r.__words[0]) {
                                  goto LABEL_655;
                                }
                                int v71 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf.__r_.__value_.__l.__data_);
                                CFRelease(v70);
                                if (v411[0]) {
                                  CFRelease(v411[0]);
                                }
                                CFRelease(v69);
                                if (!v392) {
                                  goto LABEL_655;
                                }
                                CFStringRef v72 = CFStringCreateWithBytes(0, (const UInt8 *)"drift", 5, 0x8000100u, 0);
                                if (!v72)
                                {
                                  v301 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                  std::runtime_error::runtime_error(v301, "Could not construct");
                                  __cxa_throw(v301, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                }
                                LODWORD(cf.__r_.__value_.__l.__data_) = 0;
                                v411[0] = CFNumberCreate(0, kCFNumberIntType, &cf);
                                if (!v411[0])
                                {
                                  v305 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                  std::runtime_error::runtime_error(v305, "Could not construct");
                                  __cxa_throw(v305, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                }
                                applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, (const __CFDictionary *)v392, v72, v411);
                                char v73 = (const void *)cf.__r_.__value_.__r.__words[0];
                                if (!cf.__r_.__value_.__r.__words[0]) {
                                  goto LABEL_655;
                                }
                                int v74 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf.__r_.__value_.__l.__data_);
                                CFRelease(v73);
                                if (v411[0]) {
                                  CFRelease(v411[0]);
                                }
                                CFRelease(v72);
                                if (!v392) {
                                  goto LABEL_655;
                                }
                                CFStringRef v75 = CFStringCreateWithBytes(0, (const UInt8 *)"drift algorithm", 15, 0x8000100u, 0);
                                if (!v75)
                                {
                                  v302 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                  std::runtime_error::runtime_error(v302, "Could not construct");
                                  __cxa_throw(v302, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                }
                                LODWORD(cf.__r_.__value_.__l.__data_) = 0;
                                v411[0] = CFNumberCreate(0, kCFNumberIntType, &cf);
                                if (!v411[0])
                                {
                                  v306 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                  std::runtime_error::runtime_error(v306, "Could not construct");
                                  __cxa_throw(v306, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                }
                                applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, (const __CFDictionary *)v392, v75, v411);
                                mach_port_t v76 = (const void *)cf.__r_.__value_.__r.__words[0];
                                if (!cf.__r_.__value_.__r.__words[0]) {
                                  goto LABEL_655;
                                }
                                int v77 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf.__r_.__value_.__l.__data_);
                                CFRelease(v76);
                                if (v411[0]) {
                                  CFRelease(v411[0]);
                                }
                                CFRelease(v75);
                                if (!v392) {
                                  goto LABEL_655;
                                }
                                CFStringRef v78 = CFStringCreateWithBytes(0, (const UInt8 *)"drift quality", 13, 0x8000100u, 0);
                                if (!v78)
                                {
                                  v303 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                  std::runtime_error::runtime_error(v303, "Could not construct");
                                  __cxa_throw(v303, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                }
                                LODWORD(cf.__r_.__value_.__l.__data_) = 64;
                                v411[0] = CFNumberCreate(0, kCFNumberIntType, &cf);
                                if (!v411[0])
                                {
                                  v308 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                  std::runtime_error::runtime_error(v308, "Could not construct");
                                  __cxa_throw(v308, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                }
                                applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, (const __CFDictionary *)v392, v78, v411);
                                mach_port_t v79 = (const void *)cf.__r_.__value_.__r.__words[0];
                                if (!cf.__r_.__value_.__r.__words[0])
                                {
LABEL_655:
                                  v307 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                  std::runtime_error::runtime_error(v307, "Could not construct");
                                  __cxa_throw(v307, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                }
                                int v80 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf.__r_.__value_.__l.__data_);
                                CFRelease(v79);
                                if (v411[0]) {
                                  CFRelease(v411[0]);
                                }
                                CFRelease(v78);
                                uint64_t v81 = *a2;
                                CFTypeRef v82 = v391;
                                if (v391) {
                                  CFRetain(v391);
                                }
                                CFTypeRef v390 = v82;
                                uint64_t v83 = (*(uint64_t (**)(uint64_t, CFTypeRef *))(*(void *)v81 + 24))(v81, &v390);
                                if (v390) {
                                  CFRelease(v390);
                                }
                                uint64_t v84 = *a2;
                                AMCP::create_device_node_uid_from_device_uid_and_direction((const __CFString **)&v391, 0, (void **)&cf.__r_.__value_.__l.__data_);
                                unint64_t v85 = (cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                                    ? &cf
                                    : (std::string *)cf.__r_.__value_.__r.__words[0];
                                if (v85)
                                {
                                  if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                    CFIndex v86 = HIBYTE(cf.__r_.__value_.__r.__words[2]);
                                  }
                                  else {
                                    CFIndex v86 = cf.__r_.__value_.__l.__size_;
                                  }
                                  CFTypeRef v388 = CFStringCreateWithBytes(0, (const UInt8 *)v85, v86, 0x8000100u, 0);
                                  if (!v388)
                                  {
                                    v312 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                    std::runtime_error::runtime_error(v312, "Could not construct");
                                    __cxa_throw(v312, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                  }
                                }
                                else
                                {
                                  CFTypeRef v388 = 0;
                                }
                                uint64_t v87 = (*(uint64_t (**)(uint64_t, CFTypeRef *))(*(void *)v84 + 32))(v84, &v388);
                                if (v388) {
                                  CFRelease(v388);
                                }
                                if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
                                  operator delete(cf.__r_.__value_.__l.__data_);
                                }
                                if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a2 + 16))(*a2, v83) & 1) == 0
                                  && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a2 + 16))(*a2, v87) & 1) == 0)
                                {
                                  (*(void (**)(std::string *__return_ptr))(*(void *)*a2 + 40))(&cf);
                                  CFTypeRef v387 = 0;
                                  uint64_t v88 = *(void *)v404;
                                  if (*(void *)&v404[8] != *(void *)v404)
                                  {
                                    unint64_t v89 = 0;
                                    BOOL v343 = v74 == 0;
                                    BOOL v90 = v71 != 0;
                                    do
                                    {
                                      uint64_t v91 = v88 + 104 * v89;
                                      std::string::size_type v92 = *(void *)v91;
                                      int v93 = *(_DWORD *)(v91 + 8);
                                      int v94 = *(_DWORD *)(v91 + 12);
                                      v378.__r_.__value_.__r.__words[0] = *(void *)(v91 + 16);
                                      unsigned int v95 = *(_DWORD *)(v91 + 28);
                                      LODWORD(v378.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v91 + 24);
                                      std::string::size_type v376 = *(void *)(v91 + 32);
                                      std::string::size_type v96 = v379.__r_.__value_.__r.__words[0];
                                      if (*(double *)&v379.__r_.__value_.__l.__data_ == 0.0)
                                      {
                                        v379.__r_.__value_.__r.__words[0] = v92;
                                        std::string::size_type v96 = v92;
                                      }
                                      unint64_t v97 = v54[10];
                                      unint64_t v98 = v54[11];
                                      if (v97 >= v98)
                                      {
                                        uint64_t v100 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v97 - *v348) >> 3);
                                        unint64_t v101 = v100 + 1;
                                        if ((unint64_t)(v100 + 1) > 0x276276276276276) {
                                          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                                        }
                                        unint64_t v102 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v98 - *v348) >> 3);
                                        if (2 * v102 > v101) {
                                          unint64_t v101 = 2 * v102;
                                        }
                                        if (v102 >= 0x13B13B13B13B13BLL) {
                                          unint64_t v103 = 0x276276276276276;
                                        }
                                        else {
                                          unint64_t v103 = v101;
                                        }
                                        v412 = (CFTypeRef *)(v54 + 11);
                                        __int16 v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Terminal_Description>>(v103);
                                        int v105 = (std::string::size_type *)&v104[104 * v100];
                                        v411[0] = v104;
                                        v411[1] = v105;
                                        v411[3] = &v104[104 * v106];
                                        *int v105 = v96;
                                        *((_DWORD *)v105 + 2) = v93;
                                        *((_DWORD *)v105 + 3) = v94;
                                        v105[2] = v378.__r_.__value_.__r.__words[0];
                                        *((_DWORD *)v105 + 6) = v378.__r_.__value_.__r.__words[1];
                                        *((_DWORD *)v105 + 7) = v95;
                                        v105[4] = v376;
                                        *(_OWORD *)(v105 + 9) = 0u;
                                        *(_OWORD *)(v105 + 7) = 0u;
                                        *(_OWORD *)(v105 + 5) = 0u;
                                        v105[11] = 1;
                                        *((unsigned char *)v105 + 96) = 0;
                                        v411[2] = v105 + 13;
                                        std::vector<AMCP::Terminal_Description>::__swap_out_circular_buffer(v348, v411);
                                        unint64_t v99 = v54[10];
                                        std::__split_buffer<AMCP::Terminal_Description>::~__split_buffer((uint64_t)v411);
                                      }
                                      else
                                      {
                                        *(void *)unint64_t v97 = v96;
                                        *(_DWORD *)(v97 + 8) = v93;
                                        *(_DWORD *)(v97 + 12) = v94;
                                        *(void *)(v97 + 16) = v378.__r_.__value_.__r.__words[0];
                                        *(_DWORD *)(v97 + 24) = v378.__r_.__value_.__r.__words[1];
                                        *(_DWORD *)(v97 + 28) = v95;
                                        *(void *)(v97 + 32) = v376;
                                        *(_OWORD *)(v97 + 40) = 0u;
                                        *(_OWORD *)(v97 + 56) = 0u;
                                        *(_OWORD *)(v97 + 72) = 0u;
                                        *(void *)(v97 + 88) = 1;
                                        unint64_t v99 = v97 + 104;
                                        *(unsigned char *)(v97 + 96) = 0;
                                      }
                                      v54[10] = v99;
                                      if (*(void *)&v418[40] <= v89
                                        || ((*(void *)(*(void *)&v418[32] + ((v89 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v89) & 1) != 0)
                                      {
                                        uint64_t v107 = *((void *)&v381 + 1);
                                        if (*((void *)&v381 + 1) >= (unint64_t)v382)
                                        {
                                          unint64_t v109 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v381 + 1) - v381) >> 6);
                                          unint64_t v110 = v109 + 1;
                                          if (v109 + 1 > 0x155555555555555) {
                                            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                                          }
                                          if (0x5555555555555556 * (((uint64_t)v382 - (uint64_t)v381) >> 6) > v110) {
                                            unint64_t v110 = 0x5555555555555556 * (((uint64_t)v382 - (uint64_t)v381) >> 6);
                                          }
                                          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v382 - (uint64_t)v381) >> 6) >= 0xAAAAAAAAAAAAAALL) {
                                            unint64_t v111 = 0x155555555555555;
                                          }
                                          else {
                                            unint64_t v111 = v110;
                                          }
                                          v412 = &v382;
                                          if (v111) {
                                            unint64_t v111 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Description>>(v111);
                                          }
                                          else {
                                            uint64_t v112 = 0;
                                          }
                                          v411[0] = (CFTypeRef)v111;
                                          v411[1] = (CFTypeRef)(v111 + 192 * v109);
                                          v411[2] = v411[1];
                                          v411[3] = (CFTypeRef)(v111 + 192 * v112);
                                          std::construct_at[abi:ne180100]<AMCP::Wire_Description,std::string &,unsigned long &,std::string const&,unsigned long &,AMCP::Wire_Description*>((uint64_t)v411[1], v342, (uint64_t *)&v377, (uint64_t)&cf.__r_.__value_.__l.__size_, (uint64_t *)&v387);
                                          CFTypeRef v113 = v411[1];
                                          int v108 = (char *)v411[2] + 192;
                                          v411[2] = (char *)v411[2] + 192;
                                          uint64_t v114 = (long long *)*((void *)&v381 + 1);
                                          v115 = (long long *)v381;
                                          if (*((void *)&v381 + 1) == (void)v381)
                                          {
                                            int64x2_t v116 = vdupq_n_s64(*((unint64_t *)&v381 + 1));
                                          }
                                          else
                                          {
                                            do
                                            {
                                              v114 -= 12;
                                              std::construct_at[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description,AMCP::Wire_Description*>((uint64_t)v113 - 192, v114);
                                            }
                                            while (v114 != v115);
                                            int64x2_t v116 = (int64x2_t)v381;
                                            int v108 = (char *)v411[2];
                                          }
                                          *(void *)&long long v381 = v113;
                                          *((void *)&v381 + 1) = v108;
                                          *(int64x2_t *)&v411[1] = v116;
                                          uint64_t v117 = v382;
                                          CFTypeRef v382 = v411[3];
                                          v411[3] = v117;
                                          v411[0] = (CFTypeRef)v116.i64[0];
                                          std::__split_buffer<AMCP::Wire_Description>::~__split_buffer((uint64_t)v411);
                                        }
                                        else
                                        {
                                          std::construct_at[abi:ne180100]<AMCP::Wire_Description,std::string &,unsigned long &,std::string const&,unsigned long &,AMCP::Wire_Description*>(*((uint64_t *)&v381 + 1), v342, (uint64_t *)&v377, (uint64_t)&cf.__r_.__value_.__l.__size_, (uint64_t *)&v387);
                                          int v108 = (char *)(v107 + 192);
                                        }
                                        *((void *)&v381 + 1) = v108;
                                        *((_DWORD *)v108 - 16) = __sz;
                                        *((_DWORD *)v108 - 12) = v343;
                                        *((_DWORD *)v108 - 11) = v90;
                                        int v118 = (*(uint64_t (**)(void))(*(void *)*a2 + 104))();
                                        HALIO::Implementation::maybe_create_mono_mix_map(v411, v118, v94, v95, v344);
                                        std::logic_error v119 = (void *)*((void *)v108 - 11);
                                        if (v119)
                                        {
                                          *((void *)v108 - 10) = v119;
                                          operator delete(v119);
                                        }
                                        *(_OWORD *)(v108 - 88) = *(_OWORD *)v411;
                                        *((CFTypeRef *)v108 - 9) = v411[2];
                                        *(v108 - 32) = 1;
                                        *((_DWORD *)v108 - 10) = v77;
                                        *((_DWORD *)v108 - 9) = v80;
                                        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v119);
                                        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v411, "com.apple.coreaudio", "AMCP");
                                        char v120 = *(NSObject **)v411[0];
                                        if (v411[1]) {
                                          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v411[1]);
                                        }
                                        if (os_log_type_enabled(v120, OS_LOG_TYPE_DEBUG))
                                        {
                                          std::runtime_error v121 = pthread_self();
                                          mach_port_t v122 = pthread_mach_thread_np(v121);
                                          if (*(v108 - 169) < 0)
                                          {
                                            std::string::__init_copy_ctor_external(&v383, *((const std::string::value_type **)v108 - 24), *((void *)v108 - 23));
                                          }
                                          else
                                          {
                                            long long v123 = *((_OWORD *)v108 - 12);
                                            v383.__r_.__value_.__r.__words[2] = *((void *)v108 - 22);
                                            *(_OWORD *)&v383.__r_.__value_.__l.__data_ = v123;
                                          }
                                          uint64_t v124 = (const void *)*((void *)v108 - 21);
                                          int v385 = *((_DWORD *)v108 - 40);
                                          v384 = v124;
                                          if (*(v108 - 129) < 0)
                                          {
                                            std::string::__init_copy_ctor_external(&__src, *((const std::string::value_type **)v108 - 19), *((void *)v108 - 18));
                                          }
                                          else
                                          {
                                            long long v125 = *(_OWORD *)(v108 - 152);
                                            __src.__r_.__value_.__r.__words[2] = *((void *)v108 - 17);
                                            *(_OWORD *)&__src.__r_.__value_.__l.__data_ = v125;
                                          }
                                          uint64_t v126 = (const void *)*((void *)v108 - 16);
                                          LODWORD(v424) = *((_DWORD *)v108 - 30);
                                          v423 = v126;
                                          *(std::string *)v411 = v383;
                                          memset(&v383, 0, sizeof(v383));
                                          v411[3] = v384;
                                          LODWORD(v412) = v385;
                                          std::string v413 = __src;
                                          memset(&__src, 0, sizeof(__src));
                                          LODWORD(v415) = v424;
                                          v414 = v126;
                                          AMCP::Wire_Identifier_to_string(&v389, v411);
                                          long long v127 = &v389;
                                          if ((v389.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                            long long v127 = (std::string *)v389.__r_.__value_.__r.__words[0];
                                          }
                                          LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
                                          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v122;
                                          LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
                                          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                                          WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
                                          HIDWORD(buf.__r_.__value_.__r.__words[2]) = 274;
                                          __int16 v394 = 2080;
                                          v395 = v127;
                                          _os_log_debug_impl(&dword_1BAA78000, v120, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d -- %s", (uint8_t *)&buf, 0x22u);
                                          if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0) {
                                            operator delete(v389.__r_.__value_.__l.__data_);
                                          }
                                          if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0) {
                                            operator delete(v413.__r_.__value_.__l.__data_);
                                          }
                                          if (SHIBYTE(v411[2]) < 0) {
                                            operator delete((void *)v411[0]);
                                          }
                                        }
                                      }
                                      ++v377.__r_.__value_.__r.__words[0];
                                      unint64_t v89 = (unint64_t)v387 + 1;
                                      CFTypeRef v387 = (CFTypeRef)v89;
                                      uint64_t v88 = *(void *)v404;
                                    }
                                    while (v89 < 0x4EC4EC4EC4EC4EC5
                                                * ((uint64_t)(*(void *)&v404[8] - *(void *)v404) >> 3));
                                  }
                                  for (uint64_t j = 96; j != 48; j -= 24)
                                  {
                                    v411[0] = (char *)&cf + j;
                                    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)v411);
                                  }
                                  if (v400 < 0) {
                                    operator delete(__p);
                                  }
                                  if (SBYTE7(v397) < 0) {
                                    operator delete((void *)cf.__r_.__value_.__l.__size_);
                                  }
                                  CFTypeRef v82 = v391;
                                }
                                if (v82) {
                                  CFRelease(v82);
                                }
                                if (v392) {
                                  CFRelease(v392);
                                }
                              }
                            }
                          }
                          cf.__r_.__value_.__s.__data_[0] = 0;
                          cf.__r_.__value_.__s.__data_[8] = 0;
                          if (v353)
                          {
                            if (v352) {
                              CFRetain(v352);
                            }
                            cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v352;
                            cf.__r_.__value_.__s.__data_[8] = 1;
                          }
                          HALIO::HALIO_Graph_Builder::maybe_set_master_device(a2, (uint64_t)v54, (uint64_t)&cf);
                          std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
                          std::vector<AMCP::Wire_Description>::__assign_with_size[abi:ne180100]<AMCP::Wire_Description*,AMCP::Wire_Description*>((uint64_t)&v356, v381, *((uint64_t *)&v381 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v381 + 1) - v381) >> 6));
                          v411[0] = &v381;
                          std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)v411);
                          uint64_t v129 = &v352;
LABEL_285:
                          std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v129);
                          if (*(double *)&v379.__r_.__value_.__l.__data_ == 0.0)
                          {
                            *(_OWORD *)(a1 + 16) = 0u;
                            *(_OWORD *)(a1 + 32) = 0u;
                            *(_OWORD *)a1 = 0u;
                            if (v379.__r_.__value_.__l.__size_) {
                              CFRelease((CFTypeRef)v379.__r_.__value_.__l.__size_);
                            }
                            if (!v329) {
                              CFRelease(v326);
                            }
                            std::__optional_destruct_base<std::tuple<double,applesauce::CF::StringRef>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v380);
                            std::__function::__value_func<BOOL ()>::~__value_func[abi:ne180100](&v419);
                            if (*(void *)&v418[32]) {
                              operator delete(*(void **)&v418[32]);
                            }
                            if (*(void *)&v418[8]) {
                              operator delete(*(void **)&v418[8]);
                            }
                            if (valuePtr) {
                              CFRelease(valuePtr);
                            }
                            goto LABEL_530;
                          }
                          if (v379.__r_.__value_.__l.__size_) {
                            CFRelease((CFTypeRef)v379.__r_.__value_.__l.__size_);
                          }
                          if (!v329) {
                            CFRelease(v326);
                          }
                          std::__optional_destruct_base<std::tuple<double,applesauce::CF::StringRef>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v380);
                          std::__function::__value_func<BOOL ()>::~__value_func[abi:ne180100](&v419);
                          if (*(void *)&v418[32]) {
                            operator delete(*(void **)&v418[32]);
                          }
                          if (*(void *)&v418[8]) {
                            operator delete(*(void **)&v418[8]);
                          }
                          uint64_t v23 = (AMCP::Log::Scope_Registry *)valuePtr;
                          if (valuePtr) {
                            CFRelease(valuePtr);
                          }
LABEL_296:
                          if (!v334)
                          {
LABEL_529:
                            *(int64x2_t *)a1 = v354;
                            *(void *)(a1 + 16) = v355;
                            v355 = 0;
                            int64x2_t v354 = 0uLL;
                            *(int64x2_t *)(a1 + 24) = v356;
                            *(void *)(a1 + 40) = v357;
                            CFTypeRef v357 = 0;
                            int64x2_t v356 = 0uLL;
LABEL_530:
                            cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v356;
                            std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
                            cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v354;
                            std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
                            for (uint64_t k = 24; k != 12; k -= 6)
                            {
                              cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v360[k];
                              std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
                            }
                            if (SBYTE7(v365) < 0) {
                              operator delete((void *)v364);
                            }
                            if (SHIBYTE(v362) < 0) {
                              operator delete((void *)v361);
                            }
                            CFNumberRef v16 = v373;
                            goto LABEL_537;
                          }
                          if (v354.i64[1] - v354.i64[0] == 120)
                          {
                            if (!*(_DWORD *)v354.i64[0])
                            {
                              if (v369)
                              {
                                CFIndex v131 = CFArrayGetCount(v369);
                                __int16 v132 = (void *)v354.i64[0];
                                unint64_t v133 = 0xEEEEEEEEEEEEEEEFLL * ((v354.i64[1] - v354.i64[0]) >> 3);
                                unint64_t v134 = v133 + v131;
                                if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v355[-v354.i64[0]] >> 3) < v134)
                                {
                                  if (v134 > 0x222222222222222) {
                                    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                                  }
                                  *((void *)&v397 + 1) = &v355;
                                  int v135 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Node_Description>>(v134);
                                  std::string::size_type v136 = (std::string::size_type)&v135[120 * v133];
                                  cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v135;
                                  cf.__r_.__value_.__l.__size_ = v136;
                                  long long v138 = &v135[120 * v137];
                                  cf.__r_.__value_.__r.__words[2] = v136;
                                  *(void *)&long long v397 = v138;
                                  uint64_t v139 = v354.i64[1];
                                  uint64_t v140 = v354.i64[0];
                                  if (v354.i64[1] == v354.i64[0])
                                  {
                                    int64x2_t v142 = vdupq_n_s64(v354.u64[1]);
                                    std::string::size_type v141 = v136;
                                  }
                                  else
                                  {
                                    std::string::size_type v141 = v136;
                                    do
                                    {
                                      v139 -= 120;
                                      std::construct_at[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description,AMCP::Node_Description*>(v141 - 120, v139);
                                    }
                                    while (v139 != v140);
                                    int64x2_t v142 = v354;
                                    std::string::size_type v136 = cf.__r_.__value_.__r.__words[2];
                                    long long v138 = (char *)v397;
                                  }
                                  v354.i64[0] = v141;
                                  v354.i64[1] = v136;
                                  *(int64x2_t *)&cf.__r_.__value_.__r.__words[1] = v142;
                                  __int16 v143 = v355;
                                  v355 = v138;
                                  *(void *)&long long v397 = v143;
                                  cf.__r_.__value_.__r.__words[0] = v142.i64[0];
                                  std::__split_buffer<AMCP::Node_Description>::~__split_buffer((uint64_t)&cf);
                                  __int16 v132 = (void *)v354.i64[0];
                                }
                                unsigned int v144 = (double *)v132[12];
                                v323 = v132 + 12;
                                v325 = v132;
                                if ((double *)v132[13] == v144
                                  && (unsigned int v144 = (double *)v132[9], (double *)v132[10] == v144))
                                {
                                  double v145 = 0.0;
                                }
                                else
                                {
                                  double v145 = *v144;
                                }
                                CFArrayRef v146 = v369;
                                if (v369)
                                {
                                  CFIndex v330 = CFArrayGetCount(v369);
                                  CFIndex v328 = CFArrayGetCount(v146);
                                  if (v330)
                                  {
                                    unint64_t v147 = 0;
                                    CFArrayRef v324 = v146;
                                    do
                                    {
                                      if (v147 == v328) {
                                        break;
                                      }
                                      applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v392, v146, v147);
                                      if (!v392)
                                      {
                                        v311 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                        std::runtime_error::runtime_error(v311, "Could not construct");
                                        __cxa_throw(v311, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                      }
                                      unint64_t v148 = v147;
                                      CFStringRef v149 = CFStringCreateWithBytes(0, (const UInt8 *)"uid", 3, 0x8000100u, 0);
                                      if (!v149)
                                      {
                                        v310 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                        std::runtime_error::runtime_error(v310, "Could not construct");
                                        __cxa_throw(v310, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                      }
                                      cf.__r_.__value_.__r.__words[0] = 0;
                                      applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v391, (const __CFDictionary *)v392, v149, &cf);
                                      if (cf.__r_.__value_.__r.__words[0]) {
                                        CFRelease(cf.__r_.__value_.__l.__data_);
                                      }
                                      CFRelease(v149);
                                      CFStringRef v151 = (const __CFString *)v391;
                                      if (!v391)
                                      {
                                        AMCP::Log::Scope_Registry::get(v150);
                                        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                                        v255 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                                        if (cf.__r_.__value_.__l.__size_) {
                                          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf.__r_.__value_.__l.__size_);
                                        }
                                        if (os_log_type_enabled(v255, OS_LOG_TYPE_ERROR))
                                        {
                                          v256 = pthread_self();
                                          mach_port_t v257 = pthread_mach_thread_np(v256);
                                          LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
                                          HIDWORD(cf.__r_.__value_.__r.__words[0]) = v257;
                                          LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                                          *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                                          WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                                          HIDWORD(cf.__r_.__value_.__r.__words[2]) = 624;
                                          LOWORD(v397) = 2080;
                                          *(void *)((char *)&v397 + 2) = "tap_object.is_valid()";
                                          _os_log_error_impl(&dword_1BAA78000, v255, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Tap must have a UID", (uint8_t *)&cf, 0x22u);
                                        }
                                        abort();
                                      }
                                      CFRetain(v391);
                                      CFTypeRef v390 = v151;
                                      applesauce::CF::convert_to<std::string,0>((uint64_t)&cf, v151);
                                      v152 = std::string::insert(&cf, 0, "Refl_", 5uLL);
                                      v153 = (std::string::value_type *)v152->__r_.__value_.__r.__words[0];
                                      std::string::size_type __sza = v152->__r_.__value_.__l.__size_;
                                      LODWORD(v376) = v152->__r_.__value_.__r.__words[2];
                                      *(_DWORD *)((char *)&v376 + 3) = *(_DWORD *)((char *)&v152->__r_.__value_.__r.__words[2]
                                                                                 + 3);
                                      int v349 = SHIBYTE(v152->__r_.__value_.__r.__words[2]);
                                      v152->__r_.__value_.__l.__size_ = 0;
                                      v152->__r_.__value_.__r.__words[2] = 0;
                                      v152->__r_.__value_.__r.__words[0] = 0;
                                      if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
                                        operator delete(cf.__r_.__value_.__l.__data_);
                                      }
                                      CFRelease(v151);
                                      v340 = v153;
                                      unint64_t v332 = v148;
                                      if (v349 < 0)
                                      {
                                        std::string::__init_copy_ctor_external(&buf, v153, __sza);
                                      }
                                      else
                                      {
                                        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v153;
                                        buf.__r_.__value_.__l.__size_ = __sza;
                                        LODWORD(buf.__r_.__value_.__r.__words[2]) = v376;
                                        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)&v376 + 3);
                                        *((unsigned char *)&buf.__r_.__value_.__s + 23) = v349;
                                      }
                                      LODWORD(valuePtr) = 2;
                                      *(std::string *)v418 = buf;
                                      memset(&buf, 0, sizeof(buf));
                                      *(void *)&v418[24] = 0x100000000;
                                      long long v419 = 0u;
                                      long long v420 = 0u;
                                      long long v421 = 0u;
                                      memset(&v418[32], 0, 32);
                                      *(_DWORD *)&v418[56] = 2;
                                      uint64_t v154 = *a2;
                                      CFRetain(v151);
                                      CFTypeRef v388 = v151;
                                      (*(void (**)(std::string *__return_ptr, uint64_t, CFTypeRef *))(*(void *)v154 + 112))(&v389, v154, &v388);
                                      v155 = (AMCP::Log::Scope_Registry *)v388;
                                      if (v388) {
                                        CFRelease(v388);
                                      }
                                      if (v389.__r_.__value_.__r.__words[0] == v389.__r_.__value_.__l.__size_)
                                      {
                                        AMCP::Log::Scope_Registry::get(v155);
                                        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                                        v194 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                                        if (cf.__r_.__value_.__l.__size_) {
                                          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf.__r_.__value_.__l.__size_);
                                        }
                                        if (os_log_type_enabled(v194, OS_LOG_TYPE_DEBUG))
                                        {
                                          v242 = pthread_self();
                                          mach_port_t v243 = pthread_mach_thread_np(v242);
                                          LODWORD(cf.__r_.__value_.__l.__data_) = 67109634;
                                          HIDWORD(cf.__r_.__value_.__r.__words[0]) = v243;
                                          LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                                          *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                                          WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                                          HIDWORD(cf.__r_.__value_.__r.__words[2]) = 634;
                                          _os_log_debug_impl(&dword_1BAA78000, v194, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALIO_Graph_Builder::add_reflectors_to_graph_description - Tapped IOCs is empty.", (uint8_t *)&cf, 0x18u);
                                        }
                                        unsigned int v183 = 7;
                                      }
                                      else
                                      {
                                        uint64_t v156 = *a2;
                                        CFRetain(v151);
                                        CFTypeRef v387 = v151;
                                        int v157 = (*(uint64_t (**)(uint64_t, CFTypeRef *))(*(void *)v156 + 120))(v156, &v387);
                                        if (v387) {
                                          CFRelease(v387);
                                        }
                                        v383.__r_.__value_.__s.__data_[0] = 0;
                                        char v386 = 0;
                                        std::string::size_type v335 = v389.__r_.__value_.__l.__size_;
                                        v158 = (unsigned int *)v389.__r_.__value_.__r.__words[0];
                                        if (v389.__r_.__value_.__r.__words[0] == v389.__r_.__value_.__l.__size_)
                                        {
                                          unsigned int v183 = 1;
                                        }
                                        else
                                        {
                                          do
                                          {
                                            v337 = v158;
                                            v159 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t, void))(*(void *)*a2 + 16))(*a2, *v158);
                                            if (v159)
                                            {
                                              AMCP::Log::Scope_Registry::get(v159);
                                              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                                              v250 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                                              if (cf.__r_.__value_.__l.__size_) {
                                                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf.__r_.__value_.__l.__size_);
                                              }
                                              if (os_log_type_enabled(v250, OS_LOG_TYPE_ERROR))
                                              {
                                                v251 = pthread_self();
                                                mach_port_t v252 = pthread_mach_thread_np(v251);
                                                LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
                                                HIDWORD(cf.__r_.__value_.__r.__words[0]) = v252;
                                                LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                                                *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                                                WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                                                HIDWORD(cf.__r_.__value_.__r.__words[2]) = 647;
                                                LOWORD(v397) = 2080;
                                                *(void *)((char *)&v397 + 2) = "m_connection->object_has_expired(tapped) == false";
                                                _os_log_error_impl(&dword_1BAA78000, v250, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s HALIO_Graph_Builder::add_reflectors_to_graph_description - object connection is expired.", (uint8_t *)&cf, 0x22u);
                                              }
                                              abort();
                                            }
                                            (*(void (**)(CFTypeRef *__return_ptr))(*(void *)*a2 + 40))(v411);
                                            long long v381 = 0uLL;
                                            CFTypeRef v382 = 0;
                                            v160 = (AMCP::Log::Scope_Registry *)std::vector<AMCP::Terminal_Description>::__init_with_size[abi:ne180100]<AMCP::Terminal_Description*,AMCP::Terminal_Description*>(&v381, v415, v416, 0x4EC4EC4EC4EC4EC5* (((char *)v416 - (char *)v415) >> 3));
                                            if (*((void *)&v381 + 1) != (void)v381)
                                            {
                                              unint64_t v161 = 0;
                                              do
                                              {
                                                if (!v386)
                                                {
                                                  if (v161)
                                                  {
                                                    AMCP::Log::Scope_Registry::get(v160);
                                                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                                                    v246 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                                                    if (cf.__r_.__value_.__l.__size_) {
                                                      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf.__r_.__value_.__l.__size_);
                                                    }
                                                    if (os_log_type_enabled(v246, OS_LOG_TYPE_ERROR))
                                                    {
                                                      v247 = pthread_self();
                                                      mach_port_t v248 = pthread_mach_thread_np(v247);
                                                      LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
                                                      HIDWORD(cf.__r_.__value_.__r.__words[0]) = v248;
                                                      LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                                                      *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1]
                                                                                + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                                                      WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                                                      HIDWORD(cf.__r_.__value_.__r.__words[2]) = 656;
                                                      LOWORD(v397) = 2080;
                                                      *(void *)((char *)&v397 + 2) = "index == 0";
                                                      _os_log_error_impl(&dword_1BAA78000, v246, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s We should hit this for the first terminal", (uint8_t *)&cf, 0x22u);
                                                    }
                                                    abort();
                                                  }
                                                  std::construct_at[abi:ne180100]<AMCP::Terminal_Description,AMCP::Terminal_Description&,AMCP::Terminal_Description*>((uint64_t)&v383, v415);
                                                  char v386 = 1;
                                                }
                                                if (SHIBYTE(v411[3]) < 0) {
                                                  std::string::__init_copy_ctor_external(&v380, (const std::string::value_type *)v411[1], (std::string::size_type)v411[2]);
                                                }
                                                else {
                                                  std::string v380 = *(std::string *)&v411[1];
                                                }
                                                if (v349 < 0)
                                                {
                                                  std::string::__init_copy_ctor_external(&v379, v153, __sza);
                                                  v163 = (std::string::value_type *)v379.__r_.__value_.__r.__words[0];
                                                  char v162 = HIBYTE(v379.__r_.__value_.__r.__words[2]);
                                                }
                                                else
                                                {
                                                  v379.__r_.__value_.__r.__words[0] = (std::string::size_type)v153;
                                                  v379.__r_.__value_.__l.__size_ = __sza;
                                                  LODWORD(v379.__r_.__value_.__r.__words[2]) = v376;
                                                  *(_DWORD *)((char *)&v379.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)&v376 + 3);
                                                  char v162 = v349;
                                                  v163 = v153;
                                                }
                                                cf.__r_.__value_.__l.__size_ = v380.__r_.__value_.__l.__size_;
                                                std::string::size_type v164 = v380.__r_.__value_.__r.__words[0];
                                                *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&v380.__r_.__value_.__r.__words[1] + 7);
                                                char v165 = HIBYTE(v380.__r_.__value_.__r.__words[2]);
                                                memset(&v380, 0, sizeof(v380));
                                                cf.__r_.__value_.__r.__words[0] = v164;
                                                *((unsigned char *)&cf.__r_.__value_.__s + 23) = v165;
                                                *(void *)&long long v397 = v161;
                                                DWORD2(v397) = 0;
                                                *(void *)v399 = v379.__r_.__value_.__l.__size_;
                                                *(void *)&v399[7] = *(std::string::size_type *)((char *)&v379.__r_.__value_.__r.__words[1]
                                                                                                + 7);
                                                memset(&v379, 0, sizeof(v379));
                                                std::string __p = v163;
                                                char v400 = v162;
                                                unint64_t v401 = 0;
                                                memset(v404, 0, sizeof(v404));
                                                long long v403 = 0u;
                                                int v406 = 64;
                                                uint64_t v408 = 0;
                                                uint64_t v409 = 0;
                                                uint64_t v410 = 0;
                                                int v402 = 1;
                                                *(_DWORD *)&v404[36] = 1;
                                                long long v405 = xmmword_1BAFF9440;
                                                char v407 = 1;
                                                v166 = (char *)v415 + 104 * v161;
                                                int v167 = *((_DWORD *)v166 + 3);
                                                unsigned int v168 = *((_DWORD *)v166 + 7);
                                                if (v157)
                                                {
                                                  HALIO::Implementation::maybe_create_mono_mix_map(&__src, 1, v167, v168, 0x200000001uLL);
                                                  if (*(void *)&v404[8])
                                                  {
                                                    *(void *)&v404[16] = *(void *)&v404[8];
                                                    operator delete(*(void **)&v404[8]);
                                                  }
                                                  *(std::string *)&v404[8] = __src;
                                                  LODWORD(__src.__r_.__value_.__l.__data_) = 0;
                                                  std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)&v403, (char *)&__src, (uint64_t)__src.__r_.__value_.__r.__words + 4, 1uLL);
                                                }
                                                else
                                                {
                                                  if ((v167 & 0x20) != 0) {
                                                    unsigned int v169 = *((_DWORD *)v166 + 7);
                                                  }
                                                  else {
                                                    unsigned int v169 = 1;
                                                  }
                                                  if ((v167 & 0x20) != 0) {
                                                    unsigned int v170 = 1;
                                                  }
                                                  else {
                                                    unsigned int v170 = v168;
                                                  }
                                                  if (v169 <= v170) {
                                                    unsigned int v169 = v170;
                                                  }
                                                  if (v169 < 2) {
                                                    __src.__r_.__value_.__r.__words[0] = 0;
                                                  }
                                                  else {
                                                    __src.__r_.__value_.__r.__words[0] = 0x100000000;
                                                  }
                                                  std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)&v403, (char *)&__src, (uint64_t)&__src.__r_.__value_.__l.__size_, 2uLL);
                                                }
                                                uint64_t v171 = v356.i64[1];
                                                if (v356.i64[1] >= (unint64_t)v357)
                                                {
                                                  unint64_t v173 = 0xAAAAAAAAAAAAAAABLL * ((v356.i64[1] - v356.i64[0]) >> 6);
                                                  unint64_t v174 = v173 + 1;
                                                  if (v173 + 1 > 0x155555555555555) {
                                                    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                                                  }
                                                  if (0x5555555555555556 * (((uint64_t)v357 - v356.i64[0]) >> 6) > v174) {
                                                    unint64_t v174 = 0x5555555555555556 * (((uint64_t)v357 - v356.i64[0]) >> 6);
                                                  }
                                                  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v357 - v356.i64[0]) >> 6) >= 0xAAAAAAAAAAAAAALL) {
                                                    unint64_t v175 = 0x155555555555555;
                                                  }
                                                  else {
                                                    unint64_t v175 = v174;
                                                  }
                                                  v424 = &v357;
                                                  if (v175) {
                                                    unint64_t v175 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Description>>(v175);
                                                  }
                                                  else {
                                                    uint64_t v176 = 0;
                                                  }
                                                  __src.__r_.__value_.__r.__words[0] = v175;
                                                  __src.__r_.__value_.__l.__size_ = v175 + 192 * v173;
                                                  __src.__r_.__value_.__r.__words[2] = __src.__r_.__value_.__l.__size_;
                                                  v423 = (const void *)(v175 + 192 * v176);
                                                  AMCP::Wire_Description::Wire_Description((std::string *)__src.__r_.__value_.__l.__size_, (const AMCP::Wire_Description *)&cf);
                                                  std::string::size_type v177 = __src.__r_.__value_.__l.__size_;
                                                  std::string::size_type v172 = __src.__r_.__value_.__r.__words[2] + 192;
                                                  __src.__r_.__value_.__r.__words[2] += 192;
                                                  v178 = (long long *)v356.i64[1];
                                                  v179 = (long long *)v356.i64[0];
                                                  if (v356.i64[1] == v356.i64[0])
                                                  {
                                                    int64x2_t v180 = vdupq_n_s64(v356.u64[1]);
                                                  }
                                                  else
                                                  {
                                                    do
                                                    {
                                                      v178 -= 12;
                                                      std::construct_at[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description,AMCP::Wire_Description*>(v177 - 192, v178);
                                                    }
                                                    while (v178 != v179);
                                                    int64x2_t v180 = v356;
                                                    std::string::size_type v172 = __src.__r_.__value_.__r.__words[2];
                                                  }
                                                  v356.i64[0] = v177;
                                                  v356.i64[1] = v172;
                                                  *(int64x2_t *)&__src.__r_.__value_.__r.__words[1] = v180;
                                                  CFTypeRef v181 = v357;
                                                  CFTypeRef v357 = v423;
                                                  v423 = v181;
                                                  __src.__r_.__value_.__r.__words[0] = v180.i64[0];
                                                  std::__split_buffer<AMCP::Wire_Description>::~__split_buffer((uint64_t)&__src);
                                                  v153 = v340;
                                                }
                                                else
                                                {
                                                  AMCP::Wire_Description::Wire_Description((std::string *)v356.i64[1], (const AMCP::Wire_Description *)&cf);
                                                  std::string::size_type v172 = v171 + 192;
                                                }
                                                v356.i64[1] = v172;
                                                __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v408;
                                                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
                                                if (*(void *)&v404[8])
                                                {
                                                  *(void *)&v404[16] = *(void *)&v404[8];
                                                  operator delete(*(void **)&v404[8]);
                                                }
                                                v160 = (AMCP::Log::Scope_Registry *)v403;
                                                if ((void)v403)
                                                {
                                                  *((void *)&v403 + 1) = v403;
                                                  operator delete((void *)v403);
                                                }
                                                if (v400 < 0) {
                                                  operator delete(__p);
                                                }
                                                if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
                                                  operator delete(cf.__r_.__value_.__l.__data_);
                                                }
                                                ++v161;
                                              }
                                              while (v161 < 0x4EC4EC4EC4EC4EC5
                                                           * ((uint64_t)(*((void *)&v381 + 1) - v381) >> 3));
                                            }
                                            cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v381;
                                            std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
                                            for (uint64_t m = 12; m != 6; m -= 3)
                                            {
                                              cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v411[m];
                                              std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
                                            }
                                            if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0) {
                                              operator delete(v413.__r_.__value_.__l.__data_);
                                            }
                                            if (SHIBYTE(v411[3]) < 0) {
                                              operator delete((void *)v411[1]);
                                            }
                                            v158 = v337 + 1;
                                          }
                                          while (v337 + 1 != (unsigned int *)v335);
                                          unsigned int v183 = 1;
                                          if (v386)
                                          {
                                            if (v157) {
                                              int v184 = 1;
                                            }
                                            else {
                                              int v184 = 2;
                                            }
                                            if ((v383.__r_.__value_.__s.__data_[12] & 0x20) != 0
                                              || (unsigned int v183 = HIDWORD(v384)) != 0)
                                            {
                                              unsigned int v185 = v384 / v183;
                                            }
                                            else
                                            {
                                              unsigned int v185 = (v385 + 7) >> 3;
                                            }
                                            HIDWORD(v384) = v184;
                                            char v186 = v157 ^ 1;
                                            if ((v383.__r_.__value_.__s.__data_[12] & 0x20) != 0) {
                                              char v186 = 0;
                                            }
                                            HIDWORD(v383.__r_.__value_.__r.__words[2]) = 1;
                                            LODWORD(v384) = v185 << v186;
                                            LODWORD(v383.__r_.__value_.__r.__words[2]) = v185 << v186;
                                            uint64_t v187 = v325[12];
                                            unint64_t v188 = v325[13];
                                            unint64_t v189 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v188 - v187) >> 3);
                                            unint64_t v190 = v325[14];
                                            if (v188 >= v190)
                                            {
                                              int v191 = v349;
                                              if (v189 + 1 > 0x276276276276276) {
                                                goto LABEL_670;
                                              }
                                              unint64_t v195 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v190 - v187) >> 3);
                                              uint64_t v196 = 2 * v195;
                                              if (2 * v195 <= v189 + 1) {
                                                uint64_t v196 = v189 + 1;
                                              }
                                              if (v195 >= 0x13B13B13B13B13BLL) {
                                                unint64_t v197 = 0x276276276276276;
                                              }
                                              else {
                                                unint64_t v197 = v196;
                                              }
                                              *((void *)&v397 + 1) = v325 + 14;
                                              if (v197) {
                                                unint64_t v197 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Terminal_Description>>(v197);
                                              }
                                              else {
                                                uint64_t v198 = 0;
                                              }
                                              cf.__r_.__value_.__r.__words[0] = v197;
                                              cf.__r_.__value_.__l.__size_ = v197 + 104 * v189;
                                              cf.__r_.__value_.__r.__words[2] = cf.__r_.__value_.__l.__size_;
                                              *(void *)&long long v397 = v197 + 104 * v198;
                                              std::construct_at[abi:ne180100]<AMCP::Terminal_Description,AMCP::Terminal_Description const&,AMCP::Terminal_Description*>(cf.__r_.__value_.__l.__size_, (long long *)&v383);
                                              cf.__r_.__value_.__r.__words[2] += 104;
                                              std::vector<AMCP::Terminal_Description>::__swap_out_circular_buffer(v323, &cf);
                                              v193 = v325;
                                              unint64_t v192 = v325[13];
                                              std::__split_buffer<AMCP::Terminal_Description>::~__split_buffer((uint64_t)&cf);
                                            }
                                            else
                                            {
                                              std::construct_at[abi:ne180100]<AMCP::Terminal_Description,AMCP::Terminal_Description const&,AMCP::Terminal_Description*>(v325[13], (long long *)&v383);
                                              int v191 = v349;
                                              unint64_t v192 = v188 + 104;
                                              v193 = v325;
                                            }
                                            v193[13] = v192;
                                            uint64_t v199 = v193[12];
                                            unint64_t v200 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v192 - v199) >> 3);
                                            if (v145 == 0.0)
                                            {
                                              if (v200 <= v189) {
                                                goto LABEL_669;
                                              }
                                              double v145 = *(double *)(v199 + 104 * v189);
                                            }
                                            if (v200 <= v189) {
LABEL_669:
                                            }
                                              std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
                                            *(double *)(v199 + 104 * v189) = v145;
                                            if (!v386) {
                                              goto LABEL_663;
                                            }
                                            uint64_t v201 = *((void *)&v419 + 1);
                                            if (*((void *)&v419 + 1) >= (unint64_t)v420)
                                            {
                                              uint64_t v203 = 0x4EC4EC4EC4EC4EC5
                                                   * ((uint64_t)(*((void *)&v419 + 1) - v419) >> 3);
                                              unint64_t v204 = v203 + 1;
                                              if ((unint64_t)(v203 + 1) > 0x276276276276276) {
                                                goto LABEL_670;
                                              }
                                              if (0x9D89D89D89D89D8ALL * ((uint64_t)(v420 - v419) >> 3) > v204) {
                                                unint64_t v204 = 0x9D89D89D89D89D8ALL * ((uint64_t)(v420 - v419) >> 3);
                                              }
                                              v205 = (char *)((unint64_t)(0x4EC4EC4EC4EC4EC5
                                                                               * ((uint64_t)(v420 - v419) >> 3)) >= 0x13B13B13B13B13BLL
                                                            ? 0x276276276276276
                                                            : v204);
                                              *((void *)&v397 + 1) = &v420;
                                              if (v205) {
                                                v205 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Terminal_Description>>((unint64_t)v205);
                                              }
                                              else {
                                                uint64_t v206 = 0;
                                              }
                                              cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v205;
                                              cf.__r_.__value_.__l.__size_ = (std::string::size_type)&v205[104 * v203];
                                              cf.__r_.__value_.__r.__words[2] = cf.__r_.__value_.__l.__size_;
                                              *(void *)&long long v397 = &v205[104 * v206];
                                              std::construct_at[abi:ne180100]<AMCP::Terminal_Description,AMCP::Terminal_Description const&,AMCP::Terminal_Description*>(cf.__r_.__value_.__l.__size_, (long long *)&v383);
                                              cf.__r_.__value_.__r.__words[2] += 104;
                                              std::vector<AMCP::Terminal_Description>::__swap_out_circular_buffer((uint64_t *)&v419, &cf);
                                              uint64_t v202 = *((void *)&v419 + 1);
                                              std::__split_buffer<AMCP::Terminal_Description>::~__split_buffer((uint64_t)&cf);
                                            }
                                            else
                                            {
                                              std::construct_at[abi:ne180100]<AMCP::Terminal_Description,AMCP::Terminal_Description const&,AMCP::Terminal_Description*>(*((uint64_t *)&v419 + 1), (long long *)&v383);
                                              uint64_t v202 = v201 + 104;
                                            }
                                            *((void *)&v419 + 1) = v202;
                                            if (!v386) {
LABEL_663:
                                            }
                                              std::__throw_bad_optional_access[abi:ne180100]();
                                            uint64_t v207 = v421;
                                            if ((unint64_t)v421 >= *((void *)&v421 + 1))
                                            {
                                              uint64_t v210 = 0x4EC4EC4EC4EC4EC5
                                                   * ((uint64_t)(v421 - *((void *)&v420 + 1)) >> 3);
                                              unint64_t v211 = v210 + 1;
                                              if ((unint64_t)(v210 + 1) > 0x276276276276276) {
LABEL_670:
                                              }
                                                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                                              if (0x9D89D89D89D89D8ALL
                                                 * ((uint64_t)(*((void *)&v421 + 1) - *((void *)&v420 + 1)) >> 3) > v211)
                                                unint64_t v211 = 0x9D89D89D89D89D8ALL
                                                     * ((uint64_t)(*((void *)&v421 + 1) - *((void *)&v420 + 1)) >> 3);
                                              if ((unint64_t)(0x4EC4EC4EC4EC4EC5
                                                                    * ((uint64_t)(*((void *)&v421 + 1)
                                                                               - *((void *)&v420 + 1)) >> 3)) >= 0x13B13B13B13B13BLL)
                                                unint64_t v212 = 0x276276276276276;
                                              else {
                                                unint64_t v212 = v211;
                                              }
                                              *((void *)&v397 + 1) = (char *)&v421 + 8;
                                              if (v212) {
                                                unint64_t v212 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Terminal_Description>>(v212);
                                              }
                                              else {
                                                uint64_t v213 = 0;
                                              }
                                              cf.__r_.__value_.__r.__words[0] = v212;
                                              cf.__r_.__value_.__l.__size_ = v212 + 104 * v210;
                                              cf.__r_.__value_.__r.__words[2] = cf.__r_.__value_.__l.__size_;
                                              *(void *)&long long v397 = v212 + 104 * v213;
                                              std::construct_at[abi:ne180100]<AMCP::Terminal_Description,AMCP::Terminal_Description const&,AMCP::Terminal_Description*>(cf.__r_.__value_.__l.__size_, (long long *)&v383);
                                              cf.__r_.__value_.__r.__words[2] += 104;
                                              std::vector<AMCP::Terminal_Description>::__swap_out_circular_buffer((uint64_t *)&v420 + 1, &cf);
                                              uint64_t v209 = v421;
                                              v208 = (AMCP::Log::Scope_Registry *)std::__split_buffer<AMCP::Terminal_Description>::~__split_buffer((uint64_t)&cf);
                                            }
                                            else
                                            {
                                              v208 = (AMCP::Log::Scope_Registry *)std::construct_at[abi:ne180100]<AMCP::Terminal_Description,AMCP::Terminal_Description const&,AMCP::Terminal_Description*>(v421, (long long *)&v383);
                                              uint64_t v209 = v207 + 104;
                                            }
                                            *(void *)&long long v421 = v209;
                                            if (*((void *)&v419 + 1) - (void)v419 != 104)
                                            {
                                              AMCP::Log::Scope_Registry::get(v208);
                                              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                                              v267 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                                              if (cf.__r_.__value_.__l.__size_) {
                                                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf.__r_.__value_.__l.__size_);
                                              }
                                              if (os_log_type_enabled(v267, OS_LOG_TYPE_ERROR))
                                              {
                                                v268 = pthread_self();
                                                mach_port_t v269 = pthread_mach_thread_np(v268);
                                                LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
                                                HIDWORD(cf.__r_.__value_.__r.__words[0]) = v269;
                                                LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                                                *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                                                WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                                                HIDWORD(cf.__r_.__value_.__r.__words[2]) = 693;
                                                LOWORD(v397) = 2080;
                                                *(void *)((char *)&v397 + 2) = "reflector_description.mTerminals[AMCP::"
                                                                                 "Direction::output].size() == 1";
                                                _os_log_error_impl(&dword_1BAA78000, v267, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Reflector should have one output terminal", (uint8_t *)&cf, 0x22u);
                                              }
                                              abort();
                                            }
                                            if (v209 - *((void *)&v420 + 1) != 104)
                                            {
                                              AMCP::Log::Scope_Registry::get(v208);
                                              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                                              v270 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                                              if (cf.__r_.__value_.__l.__size_) {
                                                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf.__r_.__value_.__l.__size_);
                                              }
                                              if (os_log_type_enabled(v270, OS_LOG_TYPE_ERROR))
                                              {
                                                v271 = pthread_self();
                                                mach_port_t v272 = pthread_mach_thread_np(v271);
                                                LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
                                                HIDWORD(cf.__r_.__value_.__r.__words[0]) = v272;
                                                LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                                                *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                                                WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                                                HIDWORD(cf.__r_.__value_.__r.__words[2]) = 694;
                                                LOWORD(v397) = 2080;
                                                *(void *)((char *)&v397 + 2) = "reflector_description.mTerminals[AMCP::"
                                                                                 "Direction::input].size() == 1";
                                                _os_log_error_impl(&dword_1BAA78000, v270, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Reflector should have one input terminal", (uint8_t *)&cf, 0x22u);
                                              }
                                              abort();
                                            }
                                            if (v191 < 0)
                                            {
                                              std::string::__init_copy_ctor_external(&v378, v153, __sza);
                                            }
                                            else
                                            {
                                              v378.__r_.__value_.__r.__words[0] = (std::string::size_type)v153;
                                              v378.__r_.__value_.__l.__size_ = __sza;
                                              LODWORD(v378.__r_.__value_.__r.__words[2]) = v376;
                                              *(_DWORD *)((char *)&v378.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)&v376 + 3);
                                              *((unsigned char *)&v378.__r_.__value_.__s + 23) = v191;
                                            }
                                            if (*((char *)v325 + 31) < 0) {
                                              std::string::__init_copy_ctor_external(&v377, (const std::string::value_type *)v325[1], v325[2]);
                                            }
                                            else {
                                              std::string v377 = *(std::string *)(v325 + 1);
                                            }
                                            cf.__r_.__value_.__l.__size_ = v378.__r_.__value_.__l.__size_;
                                            std::string::size_type v214 = v378.__r_.__value_.__r.__words[0];
                                            *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&v378.__r_.__value_.__r.__words[1] + 7);
                                            char v215 = HIBYTE(v378.__r_.__value_.__r.__words[2]);
                                            memset(&v378, 0, sizeof(v378));
                                            cf.__r_.__value_.__r.__words[0] = v214;
                                            *((unsigned char *)&cf.__r_.__value_.__s + 23) = v215;
                                            *(void *)&long long v397 = 0;
                                            DWORD2(v397) = 0;
                                            v216 = (void *)v377.__r_.__value_.__r.__words[0];
                                            *(void *)&v399[7] = *(std::string::size_type *)((char *)&v377.__r_.__value_.__r.__words[1]
                                                                                            + 7);
                                            *(void *)v399 = v377.__r_.__value_.__l.__size_;
                                            char v217 = HIBYTE(v377.__r_.__value_.__r.__words[2]);
                                            memset(&v377, 0, sizeof(v377));
                                            std::string __p = v216;
                                            char v400 = v217;
                                            unint64_t v401 = v189;
                                            memset(v404, 0, sizeof(v404));
                                            long long v403 = 0u;
                                            int v406 = 64;
                                            uint64_t v408 = 0;
                                            uint64_t v409 = 0;
                                            uint64_t v410 = 0;
                                            uint64_t v218 = v356.i64[1];
                                            int v402 = 1;
                                            *(_DWORD *)&v404[36] = 1;
                                            long long v405 = xmmword_1BAFF9440;
                                            char v407 = 1;
                                            if (v356.i64[1] >= (unint64_t)v357)
                                            {
                                              unint64_t v220 = 0xAAAAAAAAAAAAAAABLL * ((v356.i64[1] - v356.i64[0]) >> 6);
                                              unint64_t v221 = v220 + 1;
                                              if (v220 + 1 > 0x155555555555555) {
                                                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                                              }
                                              if (0x5555555555555556 * (((uint64_t)v357 - v356.i64[0]) >> 6) > v221) {
                                                unint64_t v221 = 0x5555555555555556 * (((uint64_t)v357 - v356.i64[0]) >> 6);
                                              }
                                              if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v357 - v356.i64[0]) >> 6) >= 0xAAAAAAAAAAAAAALL) {
                                                unint64_t v222 = 0x155555555555555;
                                              }
                                              else {
                                                unint64_t v222 = v221;
                                              }
                                              v412 = &v357;
                                              if (v222) {
                                                unint64_t v222 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Description>>(v222);
                                              }
                                              else {
                                                uint64_t v223 = 0;
                                              }
                                              v411[0] = (CFTypeRef)v222;
                                              v411[1] = (CFTypeRef)(v222 + 192 * v220);
                                              v411[2] = v411[1];
                                              v411[3] = (CFTypeRef)(v222 + 192 * v223);
                                              AMCP::Wire_Description::Wire_Description((std::string *)v411[1], (const AMCP::Wire_Description *)&cf);
                                              CFTypeRef v224 = v411[1];
                                              v219 = (char *)v411[2] + 192;
                                              v411[2] = (char *)v411[2] + 192;
                                              v225 = (long long *)v356.i64[1];
                                              v226 = (long long *)v356.i64[0];
                                              if (v356.i64[1] == v356.i64[0])
                                              {
                                                int64x2_t v227 = vdupq_n_s64(v356.u64[1]);
                                              }
                                              else
                                              {
                                                do
                                                {
                                                  v225 -= 12;
                                                  std::construct_at[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description,AMCP::Wire_Description*>((uint64_t)v224 - 192, v225);
                                                }
                                                while (v225 != v226);
                                                int64x2_t v227 = v356;
                                                v219 = (char *)v411[2];
                                              }
                                              v356.i64[0] = (uint64_t)v224;
                                              v356.i64[1] = (uint64_t)v219;
                                              *(int64x2_t *)&v411[1] = v227;
                                              v228 = v357;
                                              CFTypeRef v357 = v411[3];
                                              v411[3] = v228;
                                              v411[0] = (CFTypeRef)v227.i64[0];
                                              std::__split_buffer<AMCP::Wire_Description>::~__split_buffer((uint64_t)v411);
                                              v153 = v340;
                                            }
                                            else
                                            {
                                              AMCP::Wire_Description::Wire_Description((std::string *)v356.i64[1], (const AMCP::Wire_Description *)&cf);
                                              v219 = (char *)(v218 + 192);
                                            }
                                            v356.i64[1] = (uint64_t)v219;
                                            uint64_t v229 = v354.i64[1];
                                            if (v354.i64[1] >= (unint64_t)v355)
                                            {
                                              unint64_t v231 = 0xEEEEEEEEEEEEEEEFLL * ((v354.i64[1] - v354.i64[0]) >> 3);
                                              unint64_t v232 = v231 + 1;
                                              if (v231 + 1 > 0x222222222222222) {
                                                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                                              }
                                              if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)&v355[-v354.i64[0]] >> 3) > v232) {
                                                unint64_t v232 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)&v355[-v354.i64[0]] >> 3);
                                              }
                                              if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v355[-v354.i64[0]] >> 3) >= 0x111111111111111) {
                                                unint64_t v233 = 0x222222222222222;
                                              }
                                              else {
                                                unint64_t v233 = v232;
                                              }
                                              v412 = (CFTypeRef *)&v355;
                                              if (v233) {
                                                unint64_t v233 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Node_Description>>(v233);
                                              }
                                              else {
                                                uint64_t v234 = 0;
                                              }
                                              v411[0] = (CFTypeRef)v233;
                                              v411[1] = (CFTypeRef)(v233 + 120 * v231);
                                              v411[2] = v411[1];
                                              v411[3] = (CFTypeRef)(v233 + 120 * v234);
                                              AMCP::Node_Description::Node_Description((AMCP::Node_Description *)v411[1], (const AMCP::Node_Description *)&valuePtr);
                                              CFTypeRef v235 = v411[1];
                                              v230 = (char *)v411[2] + 120;
                                              v411[2] = (char *)v411[2] + 120;
                                              uint64_t v236 = v354.i64[1];
                                              uint64_t v237 = v354.i64[0];
                                              if (v354.i64[1] == v354.i64[0])
                                              {
                                                int64x2_t v238 = vdupq_n_s64(v354.u64[1]);
                                              }
                                              else
                                              {
                                                do
                                                {
                                                  v236 -= 120;
                                                  std::construct_at[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description,AMCP::Node_Description*>((uint64_t)v235 - 120, v236);
                                                }
                                                while (v236 != v237);
                                                int64x2_t v238 = v354;
                                                v230 = (char *)v411[2];
                                              }
                                              v354.i64[0] = (uint64_t)v235;
                                              v354.i64[1] = (uint64_t)v230;
                                              *(int64x2_t *)&v411[1] = v238;
                                              v239 = v355;
                                              v355 = (char *)v411[3];
                                              v411[3] = v239;
                                              v411[0] = (CFTypeRef)v238.i64[0];
                                              std::__split_buffer<AMCP::Node_Description>::~__split_buffer((uint64_t)v411);
                                              v153 = v340;
                                            }
                                            else
                                            {
                                              AMCP::Node_Description::Node_Description((AMCP::Node_Description *)v354.i64[1], (const AMCP::Node_Description *)&valuePtr);
                                              v230 = (char *)(v229 + 120);
                                            }
                                            v354.i64[1] = (uint64_t)v230;
                                            v411[0] = &v408;
                                            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v411);
                                            if (*(void *)&v404[8])
                                            {
                                              *(void *)&v404[16] = *(void *)&v404[8];
                                              operator delete(*(void **)&v404[8]);
                                            }
                                            if ((void)v403)
                                            {
                                              *((void *)&v403 + 1) = v403;
                                              operator delete((void *)v403);
                                            }
                                            if (v400 < 0) {
                                              operator delete(__p);
                                            }
                                            if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
                                              operator delete(cf.__r_.__value_.__l.__data_);
                                            }
                                            if (v386)
                                            {
                                              for (uint64_t n = 64; n != 16; n -= 24)
                                              {
                                                cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v383 + n;
                                                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
                                              }
                                            }
                                            unsigned int v183 = 0;
                                          }
                                        }
                                      }
                                      if (v389.__r_.__value_.__r.__words[0])
                                      {
                                        v389.__r_.__value_.__l.__size_ = v389.__r_.__value_.__r.__words[0];
                                        operator delete(v389.__r_.__value_.__l.__data_);
                                      }
                                      for (iunint64_t i = 96; ii != 48; ii -= 24)
                                      {
                                        cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v418[ii - 8];
                                        std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
                                      }
                                      if ((v418[55] & 0x80000000) != 0) {
                                        operator delete(*(void **)&v418[32]);
                                      }
                                      if ((v418[23] & 0x80000000) != 0) {
                                        operator delete(*(void **)v418);
                                      }
                                      if (v349 < 0) {
                                        operator delete(v153);
                                      }
                                      if (v391) {
                                        CFRelease(v391);
                                      }
                                      CFArrayRef v146 = v324;
                                      if (v392) {
                                        CFRelease(v392);
                                      }
                                      if (v183 != 7 && v183) {
                                        break;
                                      }
                                      unint64_t v147 = v332 + 1;
                                    }
                                    while (v332 + 1 != v330);
                                  }
                                }
                                goto LABEL_529;
                              }
                              exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                              std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_672:
                              __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                            }
                            AMCP::Log::Scope_Registry::get(v23);
                            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                            v261 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                            if (cf.__r_.__value_.__l.__size_) {
                              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf.__r_.__value_.__l.__size_);
                            }
                            if (os_log_type_enabled(v261, OS_LOG_TYPE_ERROR))
                            {
                              v265 = pthread_self();
                              mach_port_t v266 = pthread_mach_thread_np(v265);
                              LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
                              HIDWORD(cf.__r_.__value_.__r.__words[0]) = v266;
                              LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                              *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                              WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                              HIDWORD(cf.__r_.__value_.__r.__words[2]) = 605;
                              LOWORD(v397) = 2080;
                              *(void *)((char *)&v397 + 2) = "graph.m_nodes[0].mNodeType == AMCP::Node_Type::IOContext";
                              v264 = "%6u %32s:%-5d Assertion Failed: %s The only node in the graph should be an IOC";
                              goto LABEL_579;
                            }
                          }
                          else
                          {
                            AMCP::Log::Scope_Registry::get(v23);
                            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                            v261 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                            if (cf.__r_.__value_.__l.__size_) {
                              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf.__r_.__value_.__l.__size_);
                            }
                            if (os_log_type_enabled(v261, OS_LOG_TYPE_ERROR))
                            {
                              v262 = pthread_self();
                              mach_port_t v263 = pthread_mach_thread_np(v262);
                              LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
                              HIDWORD(cf.__r_.__value_.__r.__words[0]) = v263;
                              LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                              *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                              WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                              HIDWORD(cf.__r_.__value_.__r.__words[2]) = 604;
                              LOWORD(v397) = 2080;
                              *(void *)((char *)&v397 + 2) = "graph.m_nodes.size() == 1";
                              v264 = "%6u %32s:%-5d Assertion Failed: %s The only node already in this graph should be the IOC";
LABEL_579:
                              _os_log_error_impl(&dword_1BAA78000, v261, OS_LOG_TYPE_ERROR, v264, (uint8_t *)&cf, 0x22u);
                            }
                          }
                          abort();
                        }
                        AMCP::Log::Scope_Registry::get(v41);
                        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                        v273 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                        if (cf.__r_.__value_.__l.__size_) {
                          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf.__r_.__value_.__l.__size_);
                        }
                        if (os_log_type_enabled(v273, OS_LOG_TYPE_ERROR))
                        {
                          v285 = pthread_self();
                          mach_port_t v286 = pthread_mach_thread_np(v285);
                          LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
                          HIDWORD(cf.__r_.__value_.__r.__words[0]) = v286;
                          LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                          *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                          WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                          HIDWORD(cf.__r_.__value_.__r.__words[2]) = 455;
                          LOWORD(v397) = 2080;
                          *(void *)((char *)&v397 + 2) = "in_out_graph.m_wires.empty()";
                          v276 = "%6u %32s:%-5d Assertion Failed: %s There should not be any wires in the graph yet";
                          goto LABEL_612;
                        }
LABEL_613:
                        abort();
                      }
                      AMCP::Log::Scope_Registry::get(v41);
                      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                      v273 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                      if (cf.__r_.__value_.__l.__size_) {
                        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf.__r_.__value_.__l.__size_);
                      }
                      if (!os_log_type_enabled(v273, OS_LOG_TYPE_ERROR)) {
                        goto LABEL_613;
                      }
                      v281 = pthread_self();
                      mach_port_t v282 = pthread_mach_thread_np(v281);
                      LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
                      HIDWORD(cf.__r_.__value_.__r.__words[0]) = v282;
                      LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                      *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                      WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                      HIDWORD(cf.__r_.__value_.__r.__words[2]) = 454;
                      LOWORD(v397) = 2080;
                      *(void *)((char *)&v397 + 2) = "in_out_graph.m_nodes[0].mNodeType == AMCP::Node_Type::IOContext";
                      v276 = "%6u %32s:%-5d Assertion Failed: %s The only node in the graph should be an IOC";
                    }
                    else
                    {
                      AMCP::Log::Scope_Registry::get(v41);
                      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                      v273 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                      if (cf.__r_.__value_.__l.__size_) {
                        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf.__r_.__value_.__l.__size_);
                      }
                      if (!os_log_type_enabled(v273, OS_LOG_TYPE_ERROR)) {
                        goto LABEL_613;
                      }
                      v274 = pthread_self();
                      mach_port_t v275 = pthread_mach_thread_np(v274);
                      LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
                      HIDWORD(cf.__r_.__value_.__r.__words[0]) = v275;
                      LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                      *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                      WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                      HIDWORD(cf.__r_.__value_.__r.__words[2]) = 453;
                      LOWORD(v397) = 2080;
                      *(void *)((char *)&v397 + 2) = "in_out_graph.m_nodes.size() == 1";
                      v276 = "%6u %32s:%-5d Assertion Failed: %s Graph should have exactly 1 node";
                    }
LABEL_612:
                    _os_log_error_impl(&dword_1BAA78000, v273, OS_LOG_TYPE_ERROR, v276, (uint8_t *)&cf, 0x22u);
                    goto LABEL_613;
                  }
LABEL_134:
                  CFTypeRef v326 = size;
                  CFTypeRef v350 = size;
                  char v351 = 1;
                  unint64_t v55 = (uint64_t *)v354.i64[0];
                  if (v354.i64[1] - v354.i64[0] == 120)
                  {
                    if (!*(_DWORD *)v354.i64[0])
                    {
                      if (v356.i64[0] == v356.i64[1])
                      {
                        memset(&cf, 0, sizeof(cf));
                        BOOL v56 = v347;
                        if (!v418[56]) {
                          BOOL v56 = 0;
                        }
                        if (!v56)
                        {
                          CFArrayRef v62 = (const __CFArray *)valuePtr;
                          if (!valuePtr) {
                            goto LABEL_282;
                          }
                          CFIndex v63 = CFArrayGetCount((CFArrayRef)valuePtr);
                          double v64 = valuePtr;
                          if (valuePtr) {
                            CFIndex v65 = CFArrayGetCount((CFArrayRef)valuePtr);
                          }
                          else {
                            CFIndex v65 = 0;
                          }
                          if (v63)
                          {
                            for (juint64_t j = 0; jj != v63; ++jj)
                            {
                              if (v62 == (const __CFArray *)v64 && v65 == jj) {
                                break;
                              }
                              applesauce::CF::details::at_to<applesauce::CF::ArrayRef>((applesauce::CF::ArrayRef *)v411, v62, jj);
                              HALIO::HALIO_Graph_Builder::connect_input_terminals(a2, (const __CFArray **)v411, &v418[8], v55, (uint64_t)&cf, (double *)&v379, (uint64_t)&v419);
                              if (v411[0]) {
                                CFRelease(v411[0]);
                              }
                            }
                          }
                        }
                        CFArrayRef v57 = (const __CFArray *)valuePtr;
                        if (valuePtr)
                        {
                          CFIndex v58 = CFArrayGetCount((CFArrayRef)valuePtr);
                          CFIndex v59 = v58;
                          int v60 = valuePtr;
                          if (valuePtr)
                          {
                            CFIndex v61 = CFArrayGetCount((CFArrayRef)valuePtr);
                            if (!v59) {
                              goto LABEL_282;
                            }
LABEL_276:
                            unint64_t v130 = 0;
                            do
                            {
                              if (v57 == (const __CFArray *)v60 && v61 == v130) {
                                break;
                              }
                              applesauce::CF::details::at_to<applesauce::CF::ArrayRef>((applesauce::CF::ArrayRef *)v411, v57, v130);
                              HALIO::HALIO_Graph_Builder::connect_output_terminals_for_stack(a2, (CFArrayRef *)v411, v418[56], &v418[32], v55, (uint64_t)&cf, (double *)&v379, v421, !v347);
                              if (v411[0]) {
                                CFRelease(v411[0]);
                              }
                              ++v130;
                            }
                            while (v59 != v130);
                            goto LABEL_282;
                          }
                          CFIndex v61 = 0;
                          if (v58) {
                            goto LABEL_276;
                          }
                        }
LABEL_282:
                        LOBYTE(v411[0]) = 0;
                        LOBYTE(v411[1]) = 0;
                        if (v350) {
                          CFRetain(v350);
                        }
                        v411[0] = v350;
                        LOBYTE(v411[1]) = 1;
                        HALIO::HALIO_Graph_Builder::maybe_set_master_device(a2, (uint64_t)v55, (uint64_t)v411);
                        std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v411);
                        std::vector<AMCP::Wire_Description>::__assign_with_size[abi:ne180100]<AMCP::Wire_Description*,AMCP::Wire_Description*>((uint64_t)&v356, (uint64_t)cf.__r_.__value_.__l.__data_, cf.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(cf.__r_.__value_.__l.__size_ - cf.__r_.__value_.__r.__words[0]) >> 6));
                        v383.__r_.__value_.__r.__words[0] = (std::string::size_type)&cf;
                        std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v383);
                        uint64_t v129 = &v350;
                        goto LABEL_285;
                      }
                      AMCP::Log::Scope_Registry::get(v41);
                      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                      v277 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                      if (cf.__r_.__value_.__l.__size_) {
                        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf.__r_.__value_.__l.__size_);
                      }
                      if (os_log_type_enabled(v277, OS_LOG_TYPE_ERROR))
                      {
                        v287 = pthread_self();
                        mach_port_t v288 = pthread_mach_thread_np(v287);
                        LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
                        HIDWORD(cf.__r_.__value_.__r.__words[0]) = v288;
                        LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                        *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                        WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                        HIDWORD(cf.__r_.__value_.__r.__words[2]) = 475;
                        LOWORD(v397) = 2080;
                        *(void *)((char *)&v397 + 2) = "in_out_graph.m_wires.empty()";
                        v280 = "%6u %32s:%-5d Assertion Failed: %s There should not be any wires in the graph yet";
                        goto LABEL_618;
                      }
LABEL_619:
                      abort();
                    }
                    AMCP::Log::Scope_Registry::get(v41);
                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                    v277 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                    if (cf.__r_.__value_.__l.__size_) {
                      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf.__r_.__value_.__l.__size_);
                    }
                    if (!os_log_type_enabled(v277, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_619;
                    }
                    v283 = pthread_self();
                    mach_port_t v284 = pthread_mach_thread_np(v283);
                    LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
                    HIDWORD(cf.__r_.__value_.__r.__words[0]) = v284;
                    LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                    *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                    WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                    HIDWORD(cf.__r_.__value_.__r.__words[2]) = 474;
                    LOWORD(v397) = 2080;
                    *(void *)((char *)&v397 + 2) = "in_out_graph.m_nodes[0].mNodeType == AMCP::Node_Type::IOContext";
                    v280 = "%6u %32s:%-5d Assertion Failed: %s The only node in the graph should be an IOC";
                  }
                  else
                  {
                    AMCP::Log::Scope_Registry::get(v41);
                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                    v277 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                    if (cf.__r_.__value_.__l.__size_) {
                      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf.__r_.__value_.__l.__size_);
                    }
                    if (!os_log_type_enabled(v277, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_619;
                    }
                    v278 = pthread_self();
                    mach_port_t v279 = pthread_mach_thread_np(v278);
                    LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
                    HIDWORD(cf.__r_.__value_.__r.__words[0]) = v279;
                    LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                    *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                    WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                    HIDWORD(cf.__r_.__value_.__r.__words[2]) = 473;
                    LOWORD(v397) = 2080;
                    *(void *)((char *)&v397 + 2) = "in_out_graph.m_nodes.size() == 1";
                    v280 = "%6u %32s:%-5d Assertion Failed: %s Graph should have exactly 1 node";
                  }
LABEL_618:
                  _os_log_error_impl(&dword_1BAA78000, v277, OS_LOG_TYPE_ERROR, v280, (uint8_t *)&cf, 0x22u);
                  goto LABEL_619;
                }
                if (!*a5) {
                  goto LABEL_685;
                }
                CFStringRef v49 = CFStringCreateWithBytes(0, (const UInt8 *)"master", 6, 0x8000100u, 0);
                if (!v49)
                {
                  v320 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v320, "Could not construct");
                  __cxa_throw(v320, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                cf.__r_.__value_.__r.__words[0] = 0;
                applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(v411, *a5, v49, &cf);
                if (cf.__r_.__value_.__r.__words[0]) {
                  CFRelease(cf.__r_.__value_.__l.__data_);
                }
                CFRelease(v49);
                if (!*a5)
                {
LABEL_685:
                  v321 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v321, "Could not construct");
                  __cxa_throw(v321, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                CFStringRef v50 = CFStringCreateWithBytes(0, (const UInt8 *)"clock", 5, 0x8000100u, 0);
                if (!v50)
                {
                  v322 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v322, "Could not construct");
                  __cxa_throw(v322, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,applesauce::CF::StringRef>(&cf, *a5, v50);
                if (cf.__r_.__value_.__s.__data_[8])
                {
                  if (cf.__r_.__value_.__r.__words[0])
                  {
                    CFTypeRef v48 = (CFTypeRef)cf.__r_.__value_.__r.__words[0];
                    CFRetain(cf.__r_.__value_.__l.__data_);
                    goto LABEL_111;
                  }
                }
                else if (v411[0])
                {
                  CFTypeRef v48 = v411[0];
                  CFRetain(v411[0]);
                  goto LABEL_111;
                }
                CFTypeRef v48 = 0;
LABEL_111:
                std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
                CFRelease(v50);
                long long v47 = (AMCP::Log::Scope_Registry *)v411[0];
                if (v411[0]) {
                  CFRelease(v411[0]);
                }
                goto LABEL_113;
              }
            }
            (*(void (**)(long long *, std::string *))(v419 + 24))(&v419, &cf);
            (*(void (**)(void))(**((void **)&v420 + 1) + 32))(*((void *)&v420 + 1));
            *((void *)&v420 + 1) = v397;
            *(void *)&long long v397 = &cf;
            goto LABEL_90;
          }
        }
      }
      v319 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v319, "Could not construct");
      __cxa_throw(v319, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
LABEL_661:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_672;
  }
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
LABEL_537:
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v369);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theArray);
  if (v16) {
    CFRelease(v16);
  }
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v374);
}

void sub_1BAE7FB20(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44)
{
  if (a2)
  {
    if (LOBYTE(STACK[0x378]))
    {
      for (uint64_t i = 64; i != 16; i -= 24)
      {
        STACK[0x2F0] = (unint64_t)&STACK[0x310] + i;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
      }
    }
    unint64_t v46 = (void *)STACK[0x390];
    if (STACK[0x390])
    {
      STACK[0x398] = (unint64_t)v46;
      operator delete(v46);
    }
    for (uint64_t j = 96; j != 48; j -= 24)
    {
      STACK[0x310] = (unint64_t)&STACK[0x528] + j;
      std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x310]);
    }
    if (SLOBYTE(STACK[0x567]) < 0) {
      operator delete((void *)STACK[0x550]);
    }
    if (SLOBYTE(STACK[0x547]) < 0) {
      operator delete((void *)STACK[0x530]);
    }
    if (a27) {
      operator delete(a44);
    }
    if (STACK[0x3B0]) {
      CFRelease((CFTypeRef)STACK[0x3B0]);
    }
    if (STACK[0x3B8]) {
      CFRelease((CFTypeRef)STACK[0x3B8]);
    }
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void **std::vector<BOOL>::operator=(void **a1, uint64_t a2)
{
  if (a1 != (void **)a2)
  {
    unint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      if (v4 > (void)a1[2] << 6)
      {
        uint64_t v5 = *a1;
        if (*a1)
        {
          operator delete(v5);
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          unint64_t v4 = *(void *)(a2 + 8);
        }
        std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
        unint64_t v4 = *(void *)(a2 + 8);
      }
      memmove(*a1, *(const void **)a2, (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      uint64_t v6 = *(void **)(a2 + 8);
    }
    else
    {
      uint64_t v6 = 0;
    }
    a1[1] = v6;
  }
  return a1;
}

uint64_t std::__optional_destruct_base<std::tuple<double,applesauce::CF::StringRef>,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v2 = *(const void **)(a1 + 8);
    if (v2) {
      CFRelease(v2);
    }
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(unsigned int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *HALIO::Implementation::maybe_create_mono_mix_map(void *result, int a2, char a3, unsigned int a4, unint64_t a5)
{
  uint64_t v5 = result;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if ((a3 & 0x20) != 0) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = 1;
  }
  if ((a3 & 0x20) != 0) {
    unsigned int v7 = 1;
  }
  else {
    unsigned int v7 = a4;
  }
  if (v6 <= v7) {
    unsigned int v6 = v7;
  }
  if (v6 < 2 || a2 == 0)
  {
    *double result = 0;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    if (!a5)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v17, "com.apple.coreaudio", "AMCP");
      long long v11 = *v17;
      if (*(void *)v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v18);
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = pthread_self();
        mach_port_t v13 = pthread_mach_thread_np(v12);
        LODWORD(v17) = 67109890;
        HIDWORD(v17) = v13;
        *(_WORD *)BOOL v18 = 2080;
        *(void *)&v18[2] = "HALIO_Graph_Builder.cpp";
        __int16 v19 = 1024;
        int v20 = 31;
        __int16 v21 = 2080;
        uint64_t v22 = "default_stereo_pair[0] > 0";
        _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Channel numbers are indexed starting from 1", (uint8_t *)&v17, 0x22u);
      }
      abort();
    }
    if (!HIDWORD(a5))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v17, "com.apple.coreaudio", "AMCP");
      CFStringRef v14 = *v17;
      if (*(void *)v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v18);
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v15 = pthread_self();
        mach_port_t v16 = pthread_mach_thread_np(v15);
        LODWORD(v17) = 67109890;
        HIDWORD(v17) = v16;
        *(_WORD *)BOOL v18 = 2080;
        *(void *)&v18[2] = "HALIO_Graph_Builder.cpp";
        __int16 v19 = 1024;
        int v20 = 32;
        __int16 v21 = 2080;
        uint64_t v22 = "default_stereo_pair[1] > 0";
        _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Channel numbers are indexed starting from 1", (uint8_t *)&v17, 0x22u);
      }
      abort();
    }
    *double result = 0;
    result[1] = 0;
    result[2] = 0;
    char v10 = operator new(8uLL);
    void *v5 = v10;
    void *v10 = (a5 & 0xFFFFFFFF00000000 | (a5 - 1)) - 0x100000000;
    double result = v10 + 1;
    v5[1] = result;
    v5[2] = result;
  }
  return result;
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unsigned int v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    double result = std::vector<unsigned int>::__vallocate[abi:ne180100](v7, v11);
    mach_port_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_15:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      BOOL v18 = v9;
      __int16 v19 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  uint64_t v12 = (void **)(result + 8);
  CFStringRef v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_15;
  }
  mach_port_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    BOOL v18 = v9;
    __int16 v19 = v16;
LABEL_17:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_18:
  *uint64_t v12 = &v9[v17];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Description>>(unint64_t a1)
{
  if (a1 >= 0x155555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(192 * a1);
}

void std::vector<AMCP::Wire_Description>::__swap_out_circular_buffer(long long **a1, void *a2)
{
  uint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  unsigned int v6 = (long long *)a2[1];
  while (v4 != v5)
  {
    v4 -= 12;
    std::construct_at[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description,AMCP::Wire_Description*>((uint64_t)(v6 - 12), v4);
  }
  a2[1] = v6;
  unsigned int v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = (long long *)a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = (long long *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<AMCP::Wire_Description>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 192;
    std::__destroy_at[abi:ne180100]<AMCP::Wire_Description,0>(i - 192);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void HALIO::HALIO_Graph_Builder::connect_input_terminals(void *a1, const __CFArray **a2, void *a3, void *a4, uint64_t a5, double *a6, uint64_t a7)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  uint64_t v87 = a4 + 12;
  uint64_t v123 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a4[13] - a4[12]) >> 3);
  CFArrayRef theArray = *a2;
  if (*a2)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    CFArrayRef v9 = *a2;
    CFArrayRef v83 = v9;
    CFIndex v82 = v9 ? CFArrayGetCount(v9) : 0;
    if (Count)
    {
      unint64_t v10 = 0;
      uint64_t v85 = (uint64_t)(a4 + 1);
      do
      {
        if (theArray == v83 && v10 == v82) {
          break;
        }
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v122, theArray, v10);
        if (!v122) {
          goto LABEL_150;
        }
        CFStringRef v11 = CFStringCreateWithBytes(0, (const UInt8 *)"uid", 3, 0x8000100u, 0);
        if (!v11)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        CFTypeRef cf = 0;
        applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v121, v122, v11, &cf);
        if (cf) {
          CFRelease(cf);
        }
        CFRelease(v11);
        if (!v122) {
          goto LABEL_150;
        }
        CFStringRef v12 = CFStringCreateWithBytes(0, (const UInt8 *)"latency-in", 10, 0x8000100u, 0);
        if (!v12)
        {
          int v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v71, "Could not construct");
          __cxa_throw(v71, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(cf) = 0;
        v101.__r_.__value_.__r.__words[0] = (std::string::size_type)CFNumberCreate(0, kCFNumberIntType, &cf);
        if (!v101.__r_.__value_.__r.__words[0])
        {
          CFStringRef v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v69, "Could not construct");
          __cxa_throw(v69, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, v122, v12, &v101);
        CFTypeRef v13 = cf;
        if (!cf) {
          goto LABEL_150;
        }
        int v89 = applesauce::CF::convert_to<int,0>((const __CFNumber *)cf);
        CFRelease(v13);
        if (v101.__r_.__value_.__r.__words[0]) {
          CFRelease(v101.__r_.__value_.__l.__data_);
        }
        CFRelease(v12);
        if (!v122) {
          goto LABEL_150;
        }
        CFStringRef v14 = CFStringCreateWithBytes(0, (const UInt8 *)"don't pad", 9, 0x8000100u, 0);
        if (!v14)
        {
          mach_port_t v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v76, "Could not construct");
          __cxa_throw(v76, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(cf) = 1;
        v101.__r_.__value_.__r.__words[0] = (std::string::size_type)CFNumberCreate(0, kCFNumberIntType, &cf);
        if (!v101.__r_.__value_.__r.__words[0])
        {
          CFStringRef v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v72, "Could not construct");
          __cxa_throw(v72, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, v122, v14, &v101);
        CFTypeRef v15 = cf;
        if (!cf) {
          goto LABEL_150;
        }
        int v16 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf);
        CFRelease(v15);
        if (v101.__r_.__value_.__r.__words[0]) {
          CFRelease(v101.__r_.__value_.__l.__data_);
        }
        CFRelease(v14);
        if (!v122) {
          goto LABEL_150;
        }
        CFStringRef v17 = CFStringCreateWithBytes(0, (const UInt8 *)"drift", 5, 0x8000100u, 0);
        if (!v17)
        {
          int v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v77, "Could not construct");
          __cxa_throw(v77, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(cf) = 0;
        v101.__r_.__value_.__r.__words[0] = (std::string::size_type)CFNumberCreate(0, kCFNumberIntType, &cf);
        if (!v101.__r_.__value_.__r.__words[0])
        {
          char v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v73, "Could not construct");
          __cxa_throw(v73, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, v122, v17, &v101);
        CFTypeRef v18 = cf;
        if (!cf) {
          goto LABEL_150;
        }
        int v19 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf);
        CFRelease(v18);
        if (v101.__r_.__value_.__r.__words[0]) {
          CFRelease(v101.__r_.__value_.__l.__data_);
        }
        CFRelease(v17);
        if (!v122) {
          goto LABEL_150;
        }
        CFStringRef v20 = CFStringCreateWithBytes(0, (const UInt8 *)"drift algorithm", 15, 0x8000100u, 0);
        if (!v20)
        {
          CFStringRef v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v78, "Could not construct");
          __cxa_throw(v78, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(cf) = 0;
        v101.__r_.__value_.__r.__words[0] = (std::string::size_type)CFNumberCreate(0, kCFNumberIntType, &cf);
        if (!v101.__r_.__value_.__r.__words[0])
        {
          int v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v74, "Could not construct");
          __cxa_throw(v74, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, v122, v20, &v101);
        CFTypeRef v21 = cf;
        if (!cf) {
          goto LABEL_150;
        }
        int v22 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf);
        CFRelease(v21);
        if (v101.__r_.__value_.__r.__words[0]) {
          CFRelease(v101.__r_.__value_.__l.__data_);
        }
        CFRelease(v20);
        if (!v122) {
          goto LABEL_150;
        }
        CFStringRef v23 = CFStringCreateWithBytes(0, (const UInt8 *)"drift quality", 13, 0x8000100u, 0);
        if (!v23)
        {
          mach_port_t v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v79, "Could not construct");
          __cxa_throw(v79, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(cf) = 64;
        v101.__r_.__value_.__r.__words[0] = (std::string::size_type)CFNumberCreate(0, kCFNumberIntType, &cf);
        if (!v101.__r_.__value_.__r.__words[0])
        {
          CFStringRef v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v75, "Could not construct");
          __cxa_throw(v75, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, v122, v23, &v101);
        CFTypeRef v24 = cf;
        if (!cf)
        {
LABEL_150:
          int v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v80, "Could not construct");
          __cxa_throw(v80, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        int v25 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf);
        CFRelease(v24);
        if (v101.__r_.__value_.__r.__words[0]) {
          CFRelease(v101.__r_.__value_.__l.__data_);
        }
        CFRelease(v23);
        uint64_t v26 = *a1;
        CFStringRef v27 = v121;
        if (v121) {
          CFRetain(v121);
        }
        CFStringRef v120 = v27;
        uint64_t v28 = (*(uint64_t (**)(uint64_t, const __CFString **))(*(void *)v26 + 24))(v26, &v120);
        if (v120) {
          CFRelease(v120);
        }
        uint64_t v29 = *a1;
        AMCP::create_device_node_uid_from_device_uid_and_direction(&v121, 1, (void **)&cf);
        CFTypeID v30 = (v113 & 0x80u) == 0 ? (const UInt8 *)&cf : (const UInt8 *)cf;
        if (v30)
        {
          if ((v113 & 0x80u) == 0) {
            CFIndex v31 = v113;
          }
          else {
            CFIndex v31 = (CFIndex)v112;
          }
          CFStringRef v119 = CFStringCreateWithBytes(0, v30, v31, 0x8000100u, 0);
          if (!v119)
          {
            uint64_t v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v81, "Could not construct");
            __cxa_throw(v81, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
        }
        else
        {
          CFStringRef v119 = 0;
        }
        uint64_t v32 = (*(uint64_t (**)(uint64_t, CFStringRef *))(*(void *)v29 + 32))(v29, &v119);
        if (v119) {
          CFRelease(v119);
        }
        if ((char)v113 < 0) {
          operator delete((void *)cf);
        }
        if (((*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 16))(*a1, v28) & 1) == 0
          && ((*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 16))(*a1, v32) & 1) == 0)
        {
          (*(void (**)(CFTypeRef *__return_ptr))(*(void *)*a1 + 40))(&cf);
          unint64_t v110 = 0;
          if (v118 != v117)
          {
            unint64_t v33 = 0;
            BOOL v86 = v19 == 0;
            BOOL v34 = v16 != 0;
            do
            {
              int v35 = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(*(void *)*a1 + 56))(*a1, v28, 1, v33);
              if (v35)
              {
                LODWORD(v101.__r_.__value_.__l.__data_) = v35;
                uint64_t v36 = *(void *)(a7 + 24);
                if (!v36) {
                  std::__throw_bad_function_call[abi:ne180100]();
                }
                if ((*(unsigned int (**)(uint64_t, std::string *))(*(void *)v36 + 48))(v36, &v101))
                {
                  if (0x4EC4EC4EC4EC4EC5 * ((v118 - v117) >> 3) <= v33) {
                    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
                  }
                  uint64_t v37 = v117 + 104 * v33;
                  double v38 = *(double *)v37;
                  long long v39 = *(_OWORD *)(v37 + 24);
                  long long v108 = *(_OWORD *)(v37 + 8);
                  long long v109 = v39;
                  double v40 = *a6;
                  if (*a6 == 0.0)
                  {
                    *a6 = v38;
                    double v40 = v38;
                  }
                  unint64_t v41 = a4[13];
                  unint64_t v42 = a4[14];
                  if (v41 >= v42)
                  {
                    uint64_t v46 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v41 - *v87) >> 3);
                    unint64_t v47 = v46 + 1;
                    if ((unint64_t)(v46 + 1) > 0x276276276276276) {
                      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v48 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v42 - *v87) >> 3);
                    if (2 * v48 > v47) {
                      unint64_t v47 = 2 * v48;
                    }
                    if (v48 >= 0x13B13B13B13B13BLL) {
                      unint64_t v49 = 0x276276276276276;
                    }
                    else {
                      unint64_t v49 = v47;
                    }
                    unint64_t v103 = a4 + 14;
                    CFStringRef v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Terminal_Description>>(v49);
                    std::string::size_type v51 = (std::string::size_type)&v50[104 * v46];
                    v101.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
                    v101.__r_.__value_.__l.__size_ = v51;
                    unint64_t v102 = &v50[104 * v52];
                    *(double *)std::string::size_type v51 = v40;
                    long long v53 = v109;
                    *(_OWORD *)(v51 + 8) = v108;
                    *(_OWORD *)(v51 + 24) = v53;
                    *(_OWORD *)(v51 + 40) = 0u;
                    *(_OWORD *)(v51 + 56) = 0u;
                    *(_OWORD *)(v51 + 72) = 0u;
                    *(void *)(v51 + 88) = 1;
                    *(unsigned char *)(v51 + 96) = 0;
                    v101.__r_.__value_.__r.__words[2] = v51 + 104;
                    std::vector<AMCP::Terminal_Description>::__swap_out_circular_buffer(v87, &v101);
                    BOOL v45 = a4;
                    unint64_t v44 = a4[13];
                    std::__split_buffer<AMCP::Terminal_Description>::~__split_buffer((uint64_t)&v101);
                  }
                  else
                  {
                    *(double *)unint64_t v41 = v40;
                    long long v43 = v109;
                    *(_OWORD *)(v41 + 8) = v108;
                    *(_OWORD *)(v41 + 24) = v43;
                    *(_OWORD *)(v41 + 40) = 0u;
                    *(_OWORD *)(v41 + 56) = 0u;
                    *(_OWORD *)(v41 + 72) = 0u;
                    *(void *)(v41 + 88) = 1;
                    *(unsigned char *)(v41 + 96) = 0;
                    unint64_t v44 = v41 + 104;
                    BOOL v45 = a4;
                  }
                  v45[13] = v44;
                  if (a3[1] <= v33 || ((*(void *)(*a3 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v33) & 1) != 0)
                  {
                    unint64_t v55 = *(void *)(a5 + 8);
                    unint64_t v54 = *(void *)(a5 + 16);
                    if (v55 >= v54)
                    {
                      unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - *(void *)a5) >> 6);
                      unint64_t v60 = v59 + 1;
                      if (v59 + 1 > 0x155555555555555) {
                        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                      }
                      unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54 - *(void *)a5) >> 6);
                      if (2 * v61 > v60) {
                        unint64_t v60 = 2 * v61;
                      }
                      if (v61 >= 0xAAAAAAAAAAAAAALL) {
                        unint64_t v62 = 0x155555555555555;
                      }
                      else {
                        unint64_t v62 = v60;
                      }
                      unint64_t v103 = (void *)(a5 + 16);
                      if (v62) {
                        unint64_t v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Description>>(v62);
                      }
                      else {
                        uint64_t v63 = 0;
                      }
                      v101.__r_.__value_.__r.__words[0] = v62;
                      v101.__r_.__value_.__l.__size_ = v62 + 192 * v59;
                      v101.__r_.__value_.__r.__words[2] = v101.__r_.__value_.__l.__size_;
                      unint64_t v102 = (char *)(v62 + 192 * v63);
                      std::construct_at[abi:ne180100]<AMCP::Wire_Description,std::string const&,unsigned long &,std::string&,unsigned long &,AMCP::Wire_Description*>(v101.__r_.__value_.__l.__size_, (uint64_t)&v112, (uint64_t *)&v110, v85, &v123);
                      v101.__r_.__value_.__r.__words[2] += 192;
                      uint64_t v58 = a5;
                      std::vector<AMCP::Wire_Description>::__swap_out_circular_buffer((long long **)a5, &v101);
                      unint64_t v57 = *(void *)(a5 + 8);
                      BOOL v56 = (AMCP::Log::Scope_Registry *)std::__split_buffer<AMCP::Wire_Description>::~__split_buffer((uint64_t)&v101);
                    }
                    else
                    {
                      BOOL v56 = (AMCP::Log::Scope_Registry *)std::construct_at[abi:ne180100]<AMCP::Wire_Description,std::string const&,unsigned long &,std::string&,unsigned long &,AMCP::Wire_Description*>(*(void *)(a5 + 8), (uint64_t)&v112, (uint64_t *)&v110, v85, &v123);
                      unint64_t v57 = v55 + 192;
                      uint64_t v58 = a5;
                    }
                    *(void *)(v58 + 8) = v57;
                    *(_DWORD *)(v57 - 64) = v89;
                    *(_DWORD *)(v57 - 48) = v86;
                    *(_DWORD *)(v57 - 44) = v34;
                    *(_DWORD *)(v57 - 40) = v22;
                    *(_DWORD *)(v57 - 36) = v25;
                    AMCP::Log::Scope_Registry::get(v56);
                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v101, "com.apple.coreaudio", "AMCP");
                    double v64 = *(NSObject **)v101.__r_.__value_.__l.__data_;
                    if (v101.__r_.__value_.__l.__size_) {
                      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v101.__r_.__value_.__l.__size_);
                    }
                    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
                    {
                      CFIndex v65 = pthread_self();
                      mach_port_t v66 = pthread_mach_thread_np(v65);
                      if (*(char *)(v57 - 169) < 0) {
                        std::string::__init_copy_ctor_external(&v98, *(const std::string::value_type **)(v57 - 192), *(void *)(v57 - 184));
                      }
                      else {
                        std::string v98 = *(std::string *)(v57 - 192);
                      }
                      unint64_t v99 = *(char **)(v57 - 168);
                      int v100 = *(_DWORD *)(v57 - 160);
                      if (*(char *)(v57 - 129) < 0) {
                        std::string::__init_copy_ctor_external(&v95, *(const std::string::value_type **)(v57 - 152), *(void *)(v57 - 144));
                      }
                      else {
                        std::string v95 = *(std::string *)(v57 - 152);
                      }
                      uint64_t v96 = *(void *)(v57 - 128);
                      int v97 = *(_DWORD *)(v57 - 120);
                      std::string v101 = v98;
                      memset(&v98, 0, sizeof(v98));
                      unint64_t v102 = v99;
                      LODWORD(v103) = v100;
                      std::string v104 = v95;
                      memset(&v95, 0, sizeof(v95));
                      int v106 = *(_DWORD *)(v57 - 120);
                      uint64_t v105 = *(void *)(v57 - 128);
                      AMCP::Wire_Identifier_to_string(&__p, (const void **)&v101.__r_.__value_.__l.__data_);
                      p_p = &__p;
                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                      }
                      *(_DWORD *)std::string buf = 67109890;
                      mach_port_t v125 = v66;
                      __int16 v126 = 2080;
                      long long v127 = "HALIO_Graph_Builder.cpp";
                      __int16 v128 = 1024;
                      int v129 = 220;
                      __int16 v130 = 2080;
                      CFIndex v131 = p_p;
                      _os_log_debug_impl(&dword_1BAA78000, v64, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d -- %s", buf, 0x22u);
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__p.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v104.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v101.__r_.__value_.__l.__data_);
                      }
                    }
                  }
                  ++v123;
                  unint64_t v33 = v110;
                }
              }
              unint64_t v110 = ++v33;
            }
            while (v33 < 0x4EC4EC4EC4EC4EC5 * ((v118 - v117) >> 3));
          }
          for (uint64_t i = 96; i != 48; i -= 24)
          {
            v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&cf + i;
            std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
          }
          if (v116 < 0) {
            operator delete(v115);
          }
          if (v114 < 0) {
            operator delete(v112);
          }
          CFStringRef v27 = v121;
        }
        if (v27) {
          CFRelease(v27);
        }
        if (v122) {
          CFRelease(v122);
        }
        ++v10;
      }
      while (v10 != Count);
    }
  }
}

void sub_1BAE818CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void HALIO::HALIO_Graph_Builder::connect_output_terminals_for_stack(void *a1, CFArrayRef *a2, int a3, void *a4, uint64_t *a5, uint64_t a6, double *a7, unint64_t a8, int a9)
{
  uint64_t v200 = *MEMORY[0x1E4F143B8];
  CFArrayRef v10 = *a2;
  if (*a2)
  {
    CFIndex Count = CFArrayGetCount(*a2);
    CFIndex v14 = Count;
    CFArrayRef v15 = *a2;
    if (*a2)
    {
      CFIndex v16 = CFArrayGetCount(*a2);
      if (!v14) {
        return;
      }
      goto LABEL_6;
    }
    CFIndex v16 = 0;
    if (Count)
    {
LABEL_6:
      unint64_t v17 = 0;
      if (a9) {
        int v18 = 0;
      }
      else {
        int v18 = a3;
      }
      int v140 = v18;
      do
      {
        if (v10 == v15 && v17 == v16) {
          return;
        }
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)buf, v10, v17);
        if (!*(void *)buf)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        CFStringRef v19 = CFStringCreateWithBytes(0, (const UInt8 *)"uid", 3, 0x8000100u, 0);
        if (!v19)
        {
          CFStringRef v119 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v119, "Could not construct");
          __cxa_throw(v119, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        CFTypeRef cf = 0;
        applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v177, *(const __CFDictionary **)buf, v19, &cf);
        if (cf) {
          CFRelease(cf);
        }
        CFRelease(v19);
        uint64_t v20 = *a1;
        CFTypeRef v21 = (const void *)v177.__r_.__value_.__r.__words[0];
        if (v177.__r_.__value_.__r.__words[0]) {
          CFRetain(v177.__r_.__value_.__l.__data_);
        }
        CFTypeRef v192 = v21;
        uint64_t v22 = (*(uint64_t (**)(uint64_t, CFTypeRef *))(*(void *)v20 + 24))(v20, &v192);
        if (v192) {
          CFRelease(v192);
        }
        uint64_t v23 = *a1;
        AMCP::create_device_node_uid_from_device_uid_and_direction((const __CFString **)&v177, 0, (void **)&cf);
        if (SHIBYTE(v184) >= 0) {
          p_CFTypeRef cf = (const UInt8 *)&cf;
        }
        else {
          p_CFTypeRef cf = (const UInt8 *)cf;
        }
        if (p_cf)
        {
          if (SHIBYTE(v184) >= 0) {
            CFIndex v25 = HIBYTE(v184);
          }
          else {
            CFIndex v25 = (CFIndex)v183;
          }
          CFDictionaryRef v191 = (const __CFDictionary *)CFStringCreateWithBytes(0, p_cf, v25, 0x8000100u, 0);
          if (!v191)
          {
            CFStringRef v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v121, "Could not construct");
            __cxa_throw(v121, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
        }
        else
        {
          CFDictionaryRef v191 = 0;
        }
        uint64_t v26 = (*(uint64_t (**)(uint64_t, const __CFDictionary **))(*(void *)v23 + 32))(v23, &v191);
        if (v191) {
          CFRelease(v191);
        }
        if (SHIBYTE(v184) < 0) {
          operator delete((void *)cf);
        }
        if (((*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 16))(*a1, v22) & 1) != 0
          || ((*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 16))(*a1, v26) & 1) != 0)
        {
          int v27 = 3;
          goto LABEL_37;
        }
        (*(void (**)(CFTypeRef *__return_ptr))(*(void *)*a1 + 40))(&cf);
        if (v189 == v190)
        {
          int v27 = 3;
          goto LABEL_61;
        }
        int v146 = *(_DWORD *)(v189 + 8);
        if (v146 == 1819304813)
        {
          unsigned int v147 = *(_DWORD *)(v189 + 12);
          if ((v147 & 0x40) == 0)
          {
            unint64_t v28 = 0x4EC4EC4EC4EC4EC5 * ((v190 - v189) >> 3);
            if (v28 < 2)
            {
              int v31 = *(_DWORD *)(v189 + 28);
            }
            else
            {
              unint64_t v29 = v28 - 1;
              uint64_t v30 = v189 + 112;
              int v31 = *(_DWORD *)(v189 + 28);
              do
              {
                if (*(_DWORD *)v30 != 1819304813) {
                  break;
                }
                if ((*(unsigned char *)(v30 + 4) & 0x40) != 0) {
                  break;
                }
                v31 += *(_DWORD *)(v30 + 20);
                v30 += 104;
                --v29;
              }
              while (v29);
            }
            uint64_t v142 = *(void *)(v189 + 32);
            int v32 = *(_DWORD *)(v189 + 24) / *(_DWORD *)(v189 + 28);
            if (v140) {
              int v31 = 2;
            }
            unsigned int v148 = v31;
            int v143 = v31 * v32;
            int v144 = *(_DWORD *)(v189 + 20);
            int v145 = v31 * v32 * v144;
            goto LABEL_60;
          }
        }
        else
        {
          unsigned int v147 = *(_DWORD *)(v189 + 12);
        }
        int v144 = *(_DWORD *)(v189 + 20);
        int v145 = *(_DWORD *)(v189 + 16);
        int v143 = *(_DWORD *)(v189 + 24);
        unsigned int v148 = *(_DWORD *)(v189 + 28);
        uint64_t v142 = *(void *)(v189 + 32);
LABEL_60:
        double v9 = *(double *)v189;
        int v27 = 1;
LABEL_61:
        for (uint64_t i = 96; i != 48; i -= 24)
        {
          v171.__r_.__value_.__r.__words[0] = (std::string::size_type)&cf + i;
          std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v171);
        }
        if (v188 < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v185) < 0) {
          operator delete(v183);
        }
LABEL_37:
        if (v21) {
          CFRelease(v21);
        }
        if (*(void *)buf) {
          CFRelease(*(CFTypeRef *)buf);
        }
        if (v27 != 3)
        {
          double v34 = *a7;
          if (*a7 == 0.0)
          {
            *a7 = v9;
            double v34 = v9;
          }
          uint64_t v36 = a5[9];
          unint64_t v35 = a5[10];
          unint64_t v37 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v35 - v36) >> 3);
          CFTypeRef v192 = (CFTypeRef)v37;
          unint64_t v38 = a5[11];
          if (v35 >= v38)
          {
            if (v37 + 1 > 0x276276276276276) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v40 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v38 - v36) >> 3);
            uint64_t v41 = 2 * v40;
            if (2 * v40 <= v37 + 1) {
              uint64_t v41 = v37 + 1;
            }
            if (v40 >= 0x13B13B13B13B13BLL) {
              unint64_t v42 = 0x276276276276276;
            }
            else {
              unint64_t v42 = v41;
            }
            char v186 = a5 + 11;
            long long v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Terminal_Description>>(v42);
            unint64_t v44 = (double *)&v43[104 * v37];
            CFTypeRef cf = v43;
            unsigned int v183 = v44;
            unsigned int v185 = &v43[104 * v45];
            *unint64_t v44 = v34;
            *((_DWORD *)v44 + 2) = v146;
            *((_DWORD *)v44 + 3) = v147;
            *((_DWORD *)v44 + 4) = v145;
            *((_DWORD *)v44 + 5) = v144;
            *((_DWORD *)v44 + 6) = v143;
            *((_DWORD *)v44 + 7) = v148;
            *((void *)v44 + 4) = v142;
            *(_OWORD *)(v44 + 5) = 0u;
            *(_OWORD *)(v44 + 7) = 0u;
            *(_OWORD *)(v44 + 9) = 0u;
            *((void *)v44 + 11) = 1;
            *((unsigned char *)v44 + 96) = 0;
            int v184 = v44 + 13;
            std::vector<AMCP::Terminal_Description>::__swap_out_circular_buffer(a5 + 9, &cf);
            uint64_t v39 = a5[10];
            std::__split_buffer<AMCP::Terminal_Description>::~__split_buffer((uint64_t)&cf);
          }
          else
          {
            *(double *)unint64_t v35 = v34;
            *(_DWORD *)(v35 + 8) = v146;
            *(_DWORD *)(v35 + 12) = v147;
            *(_DWORD *)(v35 + 16) = v145;
            *(_DWORD *)(v35 + 20) = v144;
            *(_DWORD *)(v35 + 24) = v143;
            *(_DWORD *)(v35 + 28) = v148;
            *(void *)(v35 + 32) = v142;
            *(_OWORD *)(v35 + 40) = 0u;
            *(_OWORD *)(v35 + 56) = 0u;
            *(_OWORD *)(v35 + 72) = 0u;
            *(void *)(v35 + 88) = 1;
            uint64_t v39 = v35 + 104;
            *(unsigned char *)(v35 + 96) = 0;
          }
          a5[10] = v39;
          if (a4[1] <= v37 || ((*(void *)(*a4 + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v37) & 1) != 0)
          {
            CFArrayRef theArraya = *a2;
            if (*a2)
            {
              CFIndex v150 = CFArrayGetCount(theArraya);
              CFArrayRef v141 = *a2;
              CFIndex v139 = *a2 ? CFArrayGetCount(*a2) : 0;
              if (v150)
              {
                unint64_t v46 = 0;
                uint64_t v138 = (uint64_t)(a5 + 1);
                int v47 = (v147 >> 6) & 1;
                if (v146 != 1819304813) {
                  LOBYTE(v47) = 1;
                }
                char v135 = v47;
                while (1)
                {
                  if (theArraya == v141 && v46 == v139) {
                    return;
                  }
                  applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v191, theArraya, v46);
                  if (!v191) {
                    goto LABEL_283;
                  }
                  CFStringRef v48 = CFStringCreateWithBytes(0, (const UInt8 *)"uid", 3, 0x8000100u, 0);
                  if (!v48)
                  {
                    uint64_t v123 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v123, "Could not construct");
                    __cxa_throw(v123, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                  CFTypeRef cf = 0;
                  applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v181, v191, v48, &cf);
                  if (cf) {
                    CFRelease(cf);
                  }
                  CFRelease(v48);
                  if (!v191) {
                    goto LABEL_283;
                  }
                  CFStringRef v49 = CFStringCreateWithBytes(0, (const UInt8 *)"latency-in", 10, 0x8000100u, 0);
                  if (!v49)
                  {
                    uint64_t v124 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v124, "Could not construct");
                    __cxa_throw(v124, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                  LODWORD(cf) = 0;
                  v171.__r_.__value_.__r.__words[0] = (std::string::size_type)CFNumberCreate(0, kCFNumberIntType, &cf);
                  if (!v171.__r_.__value_.__r.__words[0])
                  {
                    CFDictionaryRef v122 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v122, "Could not construct");
                    __cxa_throw(v122, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, v191, v49, &v171);
                  CFTypeRef v50 = cf;
                  if (!cf) {
                    goto LABEL_283;
                  }
                  int v158 = applesauce::CF::convert_to<int,0>((const __CFNumber *)cf);
                  CFRelease(v50);
                  if (v171.__r_.__value_.__r.__words[0]) {
                    CFRelease(v171.__r_.__value_.__l.__data_);
                  }
                  CFRelease(v49);
                  if (!v191) {
                    goto LABEL_283;
                  }
                  CFStringRef v51 = CFStringCreateWithBytes(0, (const UInt8 *)"don't pad", 9, 0x8000100u, 0);
                  if (!v51)
                  {
                    int v129 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v129, "Could not construct");
                    __cxa_throw(v129, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                  LODWORD(cf) = 1;
                  v171.__r_.__value_.__r.__words[0] = (std::string::size_type)CFNumberCreate(0, kCFNumberIntType, &cf);
                  if (!v171.__r_.__value_.__r.__words[0])
                  {
                    mach_port_t v125 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v125, "Could not construct");
                    __cxa_throw(v125, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, v191, v51, &v171);
                  CFTypeRef v52 = cf;
                  if (!cf) {
                    goto LABEL_283;
                  }
                  int v53 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf);
                  CFRelease(v52);
                  if (v171.__r_.__value_.__r.__words[0]) {
                    CFRelease(v171.__r_.__value_.__l.__data_);
                  }
                  CFRelease(v51);
                  if (!v191) {
                    goto LABEL_283;
                  }
                  CFStringRef v54 = CFStringCreateWithBytes(0, (const UInt8 *)"drift", 5, 0x8000100u, 0);
                  if (!v54)
                  {
                    __int16 v130 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v130, "Could not construct");
                    __cxa_throw(v130, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                  LODWORD(cf) = 0;
                  v171.__r_.__value_.__r.__words[0] = (std::string::size_type)CFNumberCreate(0, kCFNumberIntType, &cf);
                  if (!v171.__r_.__value_.__r.__words[0])
                  {
                    __int16 v126 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v126, "Could not construct");
                    __cxa_throw(v126, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, v191, v54, &v171);
                  CFTypeRef v55 = cf;
                  if (!cf) {
                    goto LABEL_283;
                  }
                  int v56 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf);
                  CFRelease(v55);
                  if (v171.__r_.__value_.__r.__words[0]) {
                    CFRelease(v171.__r_.__value_.__l.__data_);
                  }
                  CFRelease(v54);
                  if (!v191) {
                    goto LABEL_283;
                  }
                  CFStringRef v57 = CFStringCreateWithBytes(0, (const UInt8 *)"drift algorithm", 15, 0x8000100u, 0);
                  if (!v57)
                  {
                    CFIndex v131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v131, "Could not construct");
                    __cxa_throw(v131, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                  LODWORD(cf) = 0;
                  v171.__r_.__value_.__r.__words[0] = (std::string::size_type)CFNumberCreate(0, kCFNumberIntType, &cf);
                  if (!v171.__r_.__value_.__r.__words[0])
                  {
                    long long v127 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v127, "Could not construct");
                    __cxa_throw(v127, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, v191, v57, &v171);
                  CFTypeRef v58 = cf;
                  if (!cf) {
                    goto LABEL_283;
                  }
                  int v152 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf);
                  CFRelease(v58);
                  if (v171.__r_.__value_.__r.__words[0]) {
                    CFRelease(v171.__r_.__value_.__l.__data_);
                  }
                  CFRelease(v57);
                  if (!v191) {
                    goto LABEL_283;
                  }
                  CFStringRef v59 = CFStringCreateWithBytes(0, (const UInt8 *)"drift quality", 13, 0x8000100u, 0);
                  if (!v59)
                  {
                    uint64_t v132 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v132, "Could not construct");
                    __cxa_throw(v132, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                  LODWORD(cf) = 64;
                  v171.__r_.__value_.__r.__words[0] = (std::string::size_type)CFNumberCreate(0, kCFNumberIntType, &cf);
                  if (!v171.__r_.__value_.__r.__words[0])
                  {
                    __int16 v128 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v128, "Could not construct");
                    __cxa_throw(v128, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, v191, v59, &v171);
                  CFTypeRef v60 = cf;
                  if (!cf)
                  {
LABEL_283:
                    unint64_t v133 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v133, "Could not construct");
                    __cxa_throw(v133, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                  int v61 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf);
                  CFRelease(v60);
                  if (v171.__r_.__value_.__r.__words[0]) {
                    CFRelease(v171.__r_.__value_.__l.__data_);
                  }
                  CFRelease(v59);
                  uint64_t v62 = *a1;
                  CFTypeRef v63 = v181;
                  if (v181) {
                    CFRetain(v181);
                  }
                  CFTypeRef v180 = v63;
                  uint64_t v64 = (*(uint64_t (**)(uint64_t, CFTypeRef *))(*(void *)v62 + 24))(v62, &v180);
                  if (v180) {
                    CFRelease(v180);
                  }
                  uint64_t v65 = *a1;
                  AMCP::create_device_node_uid_from_device_uid_and_direction((const __CFString **)&v181, 0, (void **)&cf);
                  if (SHIBYTE(v184) >= 0) {
                    mach_port_t v66 = (const UInt8 *)&cf;
                  }
                  else {
                    mach_port_t v66 = (const UInt8 *)cf;
                  }
                  if (v66)
                  {
                    if (SHIBYTE(v184) >= 0) {
                      CFIndex v67 = HIBYTE(v184);
                    }
                    else {
                      CFIndex v67 = (CFIndex)v183;
                    }
                    CFTypeRef v179 = CFStringCreateWithBytes(0, v66, v67, 0x8000100u, 0);
                    if (!v179)
                    {
                      unint64_t v134 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v134, "Could not construct");
                      __cxa_throw(v134, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                    }
                  }
                  else
                  {
                    CFTypeRef v179 = 0;
                  }
                  uint64_t v68 = (*(uint64_t (**)(uint64_t, CFTypeRef *))(*(void *)v65 + 32))(v65, &v179);
                  if (v179) {
                    CFRelease(v179);
                  }
                  if (SHIBYTE(v184) < 0) {
                    operator delete((void *)cf);
                  }
                  if (((*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 16))(*a1, v64) & 1) == 0
                    && ((*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 16))(*a1, v68) & 1) == 0)
                  {
                    (*(void (**)(CFTypeRef *__return_ptr))(*(void *)*a1 + 40))(&cf);
                    uint64_t v69 = a6;
                    if (v189 != v190)
                    {
                      if (v135)
                      {
                        if (v34 == *(double *)v189
                          && v146 == *(_DWORD *)(v189 + 8)
                          && v147 == *(_DWORD *)(v189 + 12)
                          && v145 == *(_DWORD *)(v189 + 16)
                          && v144 == *(_DWORD *)(v189 + 20)
                          && v143 == *(_DWORD *)(v189 + 24)
                          && v148 == *(_DWORD *)(v189 + 28)
                          && *(_DWORD *)(v189 + 32) == v142)
                        {
                          LODWORD(v171.__r_.__value_.__l.__data_) = 0;
                          unint64_t v70 = *(void *)(a6 + 8);
                          if (v70 >= *(void *)(a6 + 16))
                          {
                            uint64_t v71 = std::vector<AMCP::Wire_Description>::__emplace_back_slow_path<std::string &,unsigned long &,std::string const&,int>(a6, v138, (uint64_t *)&v192, (uint64_t)&v183, (int *)&v171);
                            uint64_t v69 = a6;
                          }
                          else
                          {
                            std::construct_at[abi:ne180100]<AMCP::Wire_Description,std::string &,unsigned long &,std::string const&,int,AMCP::Wire_Description*>(*(void *)(a6 + 8), v138, (uint64_t *)&v192, (uint64_t)&v183, (int *)&v171);
                            uint64_t v71 = v70 + 192;
                          }
                          *(void *)(v69 + 8) = v71;
                          *(_DWORD *)(v71 - 64) = v158;
                          *(_DWORD *)(v71 - 48) = v56 == 0;
                          *(_DWORD *)(v71 - 44) = v53 != 0;
                          int v112 = (*(uint64_t (**)(void))(*(void *)*a1 + 104))();
                          HALIO::Implementation::maybe_create_mono_mix_map(&v171, v112, v147, v148, a8);
                          unsigned __int8 v113 = *(void **)(v71 - 88);
                          if (v113)
                          {
                            *(void *)(v71 - 80) = v113;
                            operator delete(v113);
                          }
                          *(std::string *)(v71 - 88) = v171;
                          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v113);
                          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v171, "com.apple.coreaudio", "AMCP");
                          char v114 = *(NSObject **)v171.__r_.__value_.__l.__data_;
                          if (v171.__r_.__value_.__l.__size_) {
                            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v171.__r_.__value_.__l.__size_);
                          }
                          if (os_log_type_enabled(v114, OS_LOG_TYPE_DEBUG))
                          {
                            char v116 = pthread_self();
                            mach_port_t v117 = pthread_mach_thread_np(v116);
                            if (*(char *)(v71 - 169) < 0) {
                              std::string::__init_copy_ctor_external(&v162, *(const std::string::value_type **)(v71 - 192), *(void *)(v71 - 184));
                            }
                            else {
                              std::string v162 = *(std::string *)(v71 - 192);
                            }
                            v163 = *(char **)(v71 - 168);
                            int v164 = *(_DWORD *)(v71 - 160);
                            if (*(char *)(v71 - 129) < 0) {
                              std::string::__init_copy_ctor_external(&v159, *(const std::string::value_type **)(v71 - 152), *(void *)(v71 - 144));
                            }
                            else {
                              std::string v159 = *(std::string *)(v71 - 152);
                            }
                            uint64_t v160 = *(void *)(v71 - 128);
                            int v161 = *(_DWORD *)(v71 - 120);
                            std::string v171 = v162;
                            memset(&v162, 0, sizeof(v162));
                            std::string::size_type v172 = v163;
                            LODWORD(v173) = v164;
                            std::string v174 = v159;
                            memset(&v159, 0, sizeof(v159));
                            int v176 = v161;
                            uint64_t v175 = v160;
                            AMCP::Wire_Identifier_to_string(&v177, (const void **)&v171.__r_.__value_.__l.__data_);
                            uint64_t v118 = &v177;
                            if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                              uint64_t v118 = (std::string *)v177.__r_.__value_.__r.__words[0];
                            }
                            *(_DWORD *)std::string buf = 67109890;
                            *(_DWORD *)&uint8_t buf[4] = v117;
                            __int16 v194 = 2080;
                            unint64_t v195 = "HALIO_Graph_Builder.cpp";
                            __int16 v196 = 1024;
                            int v197 = 443;
                            __int16 v198 = 2080;
                            uint64_t v199 = v118;
                            _os_log_debug_impl(&dword_1BAA78000, v114, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d -- %s", buf, 0x22u);
                            if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v177.__r_.__value_.__l.__data_);
                            }
                            AMCP::Wire_Identifier::~Wire_Identifier((void **)&v171.__r_.__value_.__l.__data_);
                          }
                        }
                      }
                      else
                      {
                        uint64_t v178 = 0;
                        if (v148)
                        {
                          unint64_t v72 = 0;
                          unint64_t v73 = 0;
                          BOOL v136 = v53 != 0;
                          BOOL v137 = v56 == 0;
                          while (1)
                          {
                            if (v73 >= 0x4EC4EC4EC4EC4EC5 * ((v190 - v189) >> 3)) {
                              goto LABEL_235;
                            }
                            uint64_t v74 = v189 + 104 * v73;
                            if (*(_DWORD *)(v74 + 8) != 1819304813 || (*(unsigned char *)(v74 + 12) & 0x40) != 0) {
                              goto LABEL_235;
                            }
                            unint64_t v76 = *(void *)(v69 + 8);
                            unint64_t v75 = *(void *)(v69 + 16);
                            if (v76 >= v75)
                            {
                              unint64_t v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76 - *(void *)v69) >> 6);
                              unint64_t v80 = v79 + 1;
                              if (v79 + 1 > 0x155555555555555) {
                                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                              }
                              unint64_t v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75 - *(void *)v69) >> 6);
                              if (2 * v81 > v80) {
                                unint64_t v80 = 2 * v81;
                              }
                              CFIndex v82 = (char *)(v81 >= 0xAAAAAAAAAAAAAALL ? 0x155555555555555 : v80);
                              uint64_t v173 = a6 + 16;
                              if (v82)
                              {
                                CFIndex v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Description>>((unint64_t)v82);
                                uint64_t v69 = a6;
                              }
                              else
                              {
                                uint64_t v83 = 0;
                              }
                              v171.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
                              v171.__r_.__value_.__l.__size_ = (std::string::size_type)&v82[192 * v79];
                              v171.__r_.__value_.__r.__words[2] = v171.__r_.__value_.__l.__size_;
                              std::string::size_type v172 = &v82[192 * v83];
                              std::construct_at[abi:ne180100]<AMCP::Wire_Description,std::string &,unsigned long &,std::string const&,unsigned long &,AMCP::Wire_Description*>(v171.__r_.__value_.__l.__size_, v138, (uint64_t *)&v192, (uint64_t)&v183, &v178);
                              v171.__r_.__value_.__r.__words[2] += 192;
                              std::vector<AMCP::Wire_Description>::__swap_out_circular_buffer((long long **)v69, &v171);
                              uint64_t v78 = v69;
                              unint64_t v77 = *(void *)(v69 + 8);
                              std::__split_buffer<AMCP::Wire_Description>::~__split_buffer((uint64_t)&v171);
                            }
                            else
                            {
                              std::construct_at[abi:ne180100]<AMCP::Wire_Description,std::string &,unsigned long &,std::string const&,unsigned long &,AMCP::Wire_Description*>(*(void *)(v69 + 8), v138, (uint64_t *)&v192, (uint64_t)&v183, &v178);
                              unint64_t v77 = v76 + 192;
                              uint64_t v78 = a6;
                            }
                            *(void *)(v78 + 8) = v77;
                            *(_DWORD *)(v77 - 64) = v158;
                            *(_DWORD *)(v77 - 48) = v137;
                            *(_DWORD *)(v77 - 44) = v136;
                            int v84 = (*(uint64_t (**)(void))(*(void *)*a1 + 104))();
                            HALIO::Implementation::maybe_create_mono_mix_map(&v171, v84, v147, v148, a8);
                            uint64_t v85 = *(void **)(v77 - 88);
                            if (v85)
                            {
                              *(void *)(v77 - 80) = v85;
                              operator delete(v85);
                            }
                            *(std::string *)(v77 - 88) = v171;
                            *(_DWORD *)(v77 - 40) = v152;
                            *(_DWORD *)(v77 - 36) = v61;
                            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v85);
                            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v171, "com.apple.coreaudio", "AMCP");
                            BOOL v86 = *(NSObject **)v171.__r_.__value_.__l.__data_;
                            if (v171.__r_.__value_.__l.__size_) {
                              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v171.__r_.__value_.__l.__size_);
                            }
                            if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
                            {
                              long long v109 = pthread_self();
                              mach_port_t v110 = pthread_mach_thread_np(v109);
                              if (*(char *)(v77 - 169) < 0) {
                                std::string::__init_copy_ctor_external(&v168, *(const std::string::value_type **)(v77 - 192), *(void *)(v77 - 184));
                              }
                              else {
                                std::string v168 = *(std::string *)(v77 - 192);
                              }
                              unsigned int v169 = *(char **)(v77 - 168);
                              int v170 = *(_DWORD *)(v77 - 160);
                              if (*(char *)(v77 - 129) < 0) {
                                std::string::__init_copy_ctor_external(&v165, *(const std::string::value_type **)(v77 - 152), *(void *)(v77 - 144));
                              }
                              else {
                                std::string v165 = *(std::string *)(v77 - 152);
                              }
                              uint64_t v166 = *(void *)(v77 - 128);
                              int v167 = *(_DWORD *)(v77 - 120);
                              std::string v171 = v168;
                              memset(&v168, 0, sizeof(v168));
                              std::string::size_type v172 = v169;
                              LODWORD(v173) = v170;
                              std::string v174 = v165;
                              memset(&v165, 0, sizeof(v165));
                              int v176 = *(_DWORD *)(v77 - 120);
                              uint64_t v175 = *(void *)(v77 - 128);
                              AMCP::Wire_Identifier_to_string(&v177, (const void **)&v171.__r_.__value_.__l.__data_);
                              unint64_t v111 = &v177;
                              if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                unint64_t v111 = (std::string *)v177.__r_.__value_.__r.__words[0];
                              }
                              *(_DWORD *)std::string buf = 67109890;
                              *(_DWORD *)&uint8_t buf[4] = v110;
                              __int16 v194 = 2080;
                              unint64_t v195 = "HALIO_Graph_Builder.cpp";
                              __int16 v196 = 1024;
                              int v197 = 410;
                              __int16 v198 = 2080;
                              uint64_t v199 = v111;
                              _os_log_debug_impl(&dword_1BAA78000, v86, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d -- %s", buf, 0x22u);
                              if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(v177.__r_.__value_.__l.__data_);
                              }
                              if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(v174.__r_.__value_.__l.__data_);
                              }
                              if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(v171.__r_.__value_.__l.__data_);
                              }
                            }
                            if (*(_DWORD *)(v74 + 28)) {
                              break;
                            }
                            unint64_t v108 = 0;
LABEL_213:
                            v72 += v108;
                            unint64_t v73 = ++v178;
                            uint64_t v69 = a6;
                            if (v72 >= v148) {
                              goto LABEL_235;
                            }
                          }
                          unint64_t v87 = 0;
                          while (2)
                          {
                            int v88 = v87 + v72;
                            if (v87 + v72 >= v148)
                            {
                              int v93 = *(char **)(v77 - 104);
                              unint64_t v92 = *(void *)(v77 - 96);
                              if ((unint64_t)v93 >= v92)
                              {
                                std::string v95 = *(char **)(v77 - 112);
                                uint64_t v102 = (v93 - v95) >> 2;
                                unint64_t v103 = v102 + 1;
                                if ((unint64_t)(v102 + 1) >> 62) {
LABEL_262:
                                }
                                  std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                                uint64_t v104 = v92 - (void)v95;
                                if (v104 >> 1 > v103) {
                                  unint64_t v103 = v104 >> 1;
                                }
                                BOOL v99 = (unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL;
                                unint64_t v100 = 0x3FFFFFFFFFFFFFFFLL;
                                if (!v99) {
                                  unint64_t v100 = v103;
                                }
                                if (v100)
                                {
                                  unint64_t v100 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v100);
                                  std::string v95 = *(char **)(v77 - 112);
                                  int v93 = *(char **)(v77 - 104);
                                }
                                else
                                {
                                  uint64_t v101 = 0;
                                }
                                uint64_t v105 = (_DWORD *)(v100 + 4 * v102);
                                *uint64_t v105 = -1;
                                int v94 = v105 + 1;
                                while (v93 != v95)
                                {
                                  int v107 = *((_DWORD *)v93 - 1);
                                  v93 -= 4;
                                  *--uint64_t v105 = v107;
                                }
                                goto LABEL_208;
                              }
                              *(_DWORD *)int v93 = -1;
                              uint64_t v91 = v93 + 4;
LABEL_185:
                              int v94 = v91;
                            }
                            else
                            {
                              BOOL v90 = *(char **)(v77 - 104);
                              unint64_t v89 = *(void *)(v77 - 96);
                              if ((unint64_t)v90 < v89)
                              {
                                *(_DWORD *)BOOL v90 = v88;
                                uint64_t v91 = v90 + 4;
                                goto LABEL_185;
                              }
                              std::string v95 = *(char **)(v77 - 112);
                              uint64_t v96 = (v90 - v95) >> 2;
                              unint64_t v97 = v96 + 1;
                              if ((unint64_t)(v96 + 1) >> 62) {
                                goto LABEL_262;
                              }
                              uint64_t v98 = v89 - (void)v95;
                              if (v98 >> 1 > v97) {
                                unint64_t v97 = v98 >> 1;
                              }
                              BOOL v99 = (unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL;
                              unint64_t v100 = 0x3FFFFFFFFFFFFFFFLL;
                              if (!v99) {
                                unint64_t v100 = v97;
                              }
                              if (v100)
                              {
                                unint64_t v100 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v100);
                                std::string v95 = *(char **)(v77 - 112);
                                BOOL v90 = *(char **)(v77 - 104);
                              }
                              else
                              {
                                uint64_t v101 = 0;
                              }
                              uint64_t v105 = (_DWORD *)(v100 + 4 * v96);
                              *uint64_t v105 = v88;
                              int v94 = v105 + 1;
                              while (v90 != v95)
                              {
                                int v106 = *((_DWORD *)v90 - 1);
                                v90 -= 4;
                                *--uint64_t v105 = v106;
                              }
LABEL_208:
                              *(void *)(v77 - 112) = v105;
                              *(void *)(v77 - 104) = v94;
                              *(void *)(v77 - 96) = v100 + 4 * v101;
                              if (v95) {
                                operator delete(v95);
                              }
                            }
                            *(void *)(v77 - 104) = v94;
                            ++v87;
                            unint64_t v108 = *(unsigned int *)(v74 + 28);
                            if (v87 >= v108) {
                              goto LABEL_213;
                            }
                            continue;
                          }
                        }
                      }
                    }
LABEL_235:
                    for (uint64_t j = 96; j != 48; j -= 24)
                    {
                      v171.__r_.__value_.__r.__words[0] = (std::string::size_type)&cf + j;
                      std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v171);
                    }
                    if (v188 < 0) {
                      operator delete(__p);
                    }
                    if (SHIBYTE(v185) < 0) {
                      operator delete(v183);
                    }
                    CFTypeRef v63 = v181;
                  }
                  if (v63) {
                    CFRelease(v63);
                  }
                  if (v191) {
                    CFRelease(v191);
                  }
                  if (++v46 == v150) {
                    return;
                  }
                }
              }
            }
          }
          return;
        }
        ++v17;
      }
      while (v17 != v14);
    }
  }
}

void sub_1BAE83404(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a2)
  {
    *(void *)(a35 + 8) = v35;
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void std::vector<AMCP::Wire_Description>::__assign_with_size[abi:ne180100]<AMCP::Wire_Description*,AMCP::Wire_Description*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 6) < a4)
  {
    std::vector<AMCP::Wire_Description>::__vdeallocate((void **)a1);
    if (a4 > 0x155555555555555) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 6);
    if (v9 <= a4) {
      unint64_t v9 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 6) >= 0xAAAAAAAAAAAAAALL) {
      unint64_t v10 = 0x155555555555555;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<AMCP::Wire_Description>::__vallocate[abi:ne180100]((void *)a1, v10);
    uint64_t v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Wire_Description>,AMCP::Wire_Description*,AMCP::Wire_Description*,AMCP::Wire_Description*>(a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 6) < a4)
  {
    uint64_t v12 = a2 + ((uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 6 << 6);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AMCP::Wire_Description *,AMCP::Wire_Description *,AMCP::Wire_Description *>(a2, v12, (uint64_t)v8);
    uint64_t v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Wire_Description>,AMCP::Wire_Description*,AMCP::Wire_Description*,AMCP::Wire_Description*>(v12, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v11;
    return;
  }
  uint64_t v13 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AMCP::Wire_Description *,AMCP::Wire_Description *,AMCP::Wire_Description *>(a2, a3, (uint64_t)v8);
  for (uint64_t i = *(void *)(a1 + 8); i != v13; std::__destroy_at[abi:ne180100]<AMCP::Wire_Description,0>(i))
    i -= 192;
  *(void *)(a1 + 8) = v13;
}

void sub_1BAE83744(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BAE8374C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AMCP::Wire_Description *,AMCP::Wire_Description *,AMCP::Wire_Description *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      uint64_t v8 = a1 + v6;
      std::string::operator=((std::string *)(a3 + v6), (const std::string *)(a1 + v6));
      int v9 = *(_DWORD *)(a1 + v6 + 32);
      *(void *)(v7 + 24) = *(void *)(a1 + v6 + 24);
      *(_DWORD *)(v7 + 32) = v9;
      std::string::operator=((std::string *)(a3 + v6 + 40), (const std::string *)(a1 + v6 + 40));
      int v10 = *(_DWORD *)(a1 + v6 + 72);
      *(void *)(v7 + 64) = *(void *)(a1 + v6 + 64);
      *(_DWORD *)(v7 + 72) = v10;
      if (a3 != a1)
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v7 + 80), *(char **)(v8 + 80), *(void *)(v8 + 88), (uint64_t)(*(void *)(v8 + 88) - *(void *)(v8 + 80)) >> 2);
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v7 + 104), *(char **)(v8 + 104), *(void *)(v8 + 112), (uint64_t)(*(void *)(v8 + 112) - *(void *)(v8 + 104)) >> 2);
        long long v11 = *(_OWORD *)(v8 + 128);
        long long v12 = *(_OWORD *)(v8 + 144);
        *(unsigned char *)(v7 + 160) = *(unsigned char *)(v8 + 160);
        *(_OWORD *)(v7 + 128) = v11;
        *(_OWORD *)(v7 + 144) = v12;
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v7 + 168), *(std::string **)(v8 + 168), *(long long **)(v8 + 176), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v8 + 176) - *(void *)(v8 + 168)) >> 3));
      }
      v6 += 192;
    }
    while (v8 + 192 != a2);
    a3 += v6;
  }
  return a3;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Wire_Description>,AMCP::Wire_Description*,AMCP::Wire_Description*,AMCP::Wire_Description*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      AMCP::Wire_Description::Wire_Description((std::string *)(a3 + v6), (const AMCP::Wire_Description *)(a1 + v6));
      v6 += 192;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void std::vector<AMCP::Wire_Description>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 192;
        std::__destroy_at[abi:ne180100]<AMCP::Wire_Description,0>(v3);
      }
      while ((void *)v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<AMCP::Wire_Description>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x155555555555556) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Description>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[192 * v4];
  return result;
}

uint64_t std::construct_at[abi:ne180100]<AMCP::Wire_Description,std::string &,unsigned long &,std::string const&,unsigned long &,AMCP::Wire_Description*>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v17 = *(std::string *)a2;
  }
  uint64_t v9 = *a3;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v16 = *(std::string *)a4;
  }
  uint64_t v10 = *a5;
  char v11 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v17.__r_.__value_.__l.__size_;
  *(void *)a1 = v17.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 8) = size;
  *(void *)(a1 + 15) = *(std::string::size_type *)((char *)&v17.__r_.__value_.__r.__words[1] + 7);
  *(unsigned char *)(a1 + 23) = v11;
  *(void *)(a1 + 24) = v9;
  *(_DWORD *)(a1 + 32) = 0;
  char v13 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  *(void *)(a1 + 55) = *(std::string::size_type *)((char *)&v16.__r_.__value_.__r.__words[1] + 7);
  std::string::size_type v14 = v16.__r_.__value_.__l.__size_;
  *(void *)(a1 + 40) = v16.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 48) = v14;
  *(unsigned char *)(a1 + 63) = v13;
  *(void *)(a1 + 64) = v10;
  *(_DWORD *)(a1 + 72) = 1;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 140) = xmmword_1BAFF9440;
  *(_DWORD *)(a1 + 156) = 64;
  *(unsigned char *)(a1 + 160) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  return a1;
}

void sub_1BAE83AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Wire_Identifier_to_string(std::string *this, const void **a2)
{
  AMCP::Terminal_Identifier_to_string(&v14, a2);
  uint64_t v4 = std::string::insert(&v14, 0, "{ ", 2uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  uint64_t v6 = std::string::append(&v15, " -> ", 4uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  AMCP::Terminal_Identifier_to_string(&__p, a2 + 5);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v10 = std::string::append(&v16, (const std::string::value_type *)p_p, size);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  long long v12 = std::string::append(&v17, " }", 2uLL);
  *this = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_1BAE83C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 25) < 0) {
    operator delete(*(void **)(v33 - 48));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:ne180100]<AMCP::Wire_Description,std::string &,unsigned long &,std::string const&,int,AMCP::Wire_Description*>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int *a5)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v17 = *(std::string *)a2;
  }
  uint64_t v9 = *a3;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v16 = *(std::string *)a4;
  }
  uint64_t v10 = *a5;
  char v11 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v17.__r_.__value_.__l.__size_;
  *(void *)a1 = v17.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 8) = size;
  *(void *)(a1 + 15) = *(std::string::size_type *)((char *)&v17.__r_.__value_.__r.__words[1] + 7);
  *(unsigned char *)(a1 + 23) = v11;
  *(void *)(a1 + 24) = v9;
  *(_DWORD *)(a1 + 32) = 0;
  char v13 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  *(void *)(a1 + 55) = *(std::string::size_type *)((char *)&v16.__r_.__value_.__r.__words[1] + 7);
  std::string::size_type v14 = v16.__r_.__value_.__l.__size_;
  *(void *)(a1 + 40) = v16.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 48) = v14;
  *(unsigned char *)(a1 + 63) = v13;
  *(void *)(a1 + 64) = v10;
  *(_DWORD *)(a1 + 72) = 1;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 140) = xmmword_1BAFF9440;
  *(_DWORD *)(a1 + 156) = 64;
  *(unsigned char *)(a1 + 160) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  return a1;
}

void sub_1BAE83DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<AMCP::Wire_Description>::__emplace_back_slow_path<std::string &,unsigned long &,std::string const&,int>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int *a5)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 6);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x155555555555555) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = a1 + 16;
  if (0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 6) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 6);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 6) >= 0xAAAAAAAAAAAAAALL) {
    unint64_t v13 = 0x155555555555555;
  }
  else {
    unint64_t v13 = v6;
  }
  uint64_t v21 = v12;
  if (v13) {
    unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Description>>(v13);
  }
  else {
    uint64_t v14 = 0;
  }
  unint64_t v17 = v13;
  uint64_t v18 = v13 + 192 * v5;
  unint64_t v20 = v13 + 192 * v14;
  std::construct_at[abi:ne180100]<AMCP::Wire_Description,std::string &,unsigned long &,std::string const&,int,AMCP::Wire_Description*>(v18, a2, a3, a4, a5);
  uint64_t v19 = v18 + 192;
  std::vector<AMCP::Wire_Description>::__swap_out_circular_buffer((long long **)a1, &v17);
  uint64_t v15 = *(void *)(a1 + 8);
  std::__split_buffer<AMCP::Wire_Description>::~__split_buffer((uint64_t)&v17);
  return v15;
}

void sub_1BAE83EDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<AMCP::Wire_Description>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<AMCP::Wire_Description,std::string const&,unsigned long &,std::string&,unsigned long &,AMCP::Wire_Description*>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v17 = *(std::string *)a2;
  }
  uint64_t v9 = *a3;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v16 = *(std::string *)a4;
  }
  uint64_t v10 = *a5;
  char v11 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v17.__r_.__value_.__l.__size_;
  *(void *)a1 = v17.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 8) = size;
  *(void *)(a1 + 15) = *(std::string::size_type *)((char *)&v17.__r_.__value_.__r.__words[1] + 7);
  *(unsigned char *)(a1 + 23) = v11;
  *(void *)(a1 + 24) = v9;
  *(_DWORD *)(a1 + 32) = 0;
  char v13 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  *(void *)(a1 + 55) = *(std::string::size_type *)((char *)&v16.__r_.__value_.__r.__words[1] + 7);
  std::string::size_type v14 = v16.__r_.__value_.__l.__size_;
  *(void *)(a1 + 40) = v16.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 48) = v14;
  *(unsigned char *)(a1 + 63) = v13;
  *(void *)(a1 + 64) = v10;
  *(_DWORD *)(a1 + 72) = 1;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 140) = xmmword_1BAFF9440;
  *(_DWORD *)(a1 + 156) = 64;
  *(unsigned char *)(a1 + 160) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  return a1;
}

void sub_1BAE84000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void HALIO::HALIO_Graph_Builder::Aggregate_Graph_Configuration::~Aggregate_Graph_Configuration(HALIO::HALIO_Graph_Builder::Aggregate_Graph_Configuration *this)
{
  std::__function::__value_func<BOOL ()>::~__value_func[abi:ne180100]((void *)this + 9);
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3) {
    operator delete(v3);
  }
  if (*(void *)this) {
    CFRelease(*(CFTypeRef *)this);
  }
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<void const*>(const void **values, uint64_t a2)
{
  CFArrayRef result = CFArrayCreate(0, values, (a2 - (uint64_t)values) >> 3, MEMORY[0x1E4F1D518]);
  if (!result)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1BAE840E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AMCP::Portal::IPC::IO_Receiver::~IO_Receiver(AMCP::Portal::IPC::IO_Receiver *this)
{
  AMCP::Portal::IPC::IO_Receiver::~IO_Receiver(this);

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v2;
  void *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;

  *(void *)this = &unk_1F147E410;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100]((void *)this + 15);
  std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>>>::~__hash_table((uint64_t)this + 80);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  caulk::mach::details::release_os_object(*((caulk::mach::details **)this + 1), v3);
}

void *std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (std::__shared_weak_count *)v2[5];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void std::__shared_ptr_emplace<caulk::ipc::synchronous_messenger::semaphore_receiver>::__on_zero_shared(void *a1)
{
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](a1 + 22);
  std::__function::__value_func<void ()(caulk::ipc::mapped_memory &)>::~__value_func[abi:ne180100](a1 + 18);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](a1 + 14);
  MEMORY[0x1C1858E50](a1 + 13);
  MEMORY[0x1C1858E50](a1 + 12);
  MEMORY[0x1C1858E50](a1 + 11);
  caulk::ipc::mapped_memory::reset((caulk::ipc::mapped_memory *)(a1 + 8));
  caulk::ipc::mapped_memory::reset((caulk::ipc::mapped_memory *)(a1 + 5));
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void *std::__function::__value_func<void ()(caulk::ipc::mapped_memory &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<caulk::ipc::synchronous_messenger::semaphore_receiver>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147E490;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<caulk::ipc::synchronous_messenger::semaphore_receiver>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147E490;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<caulk::ipc::synchronous_messenger::eventlink_receiver>::__on_zero_shared(uint64_t a1)
{
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 168));
  std::__function::__value_func<void ()(caulk::ipc::mapped_memory &)>::~__value_func[abi:ne180100]((void *)(a1 + 136));
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 104));
  MEMORY[0x1C1858E50](a1 + 96);
  caulk::mach::details::release_os_object(*(caulk::mach::details **)(a1 + 88), v2);
  caulk::ipc::mapped_memory::reset((caulk::ipc::mapped_memory *)(a1 + 64));
  caulk::ipc::mapped_memory::reset((caulk::ipc::mapped_memory *)(a1 + 40));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void std::__shared_ptr_emplace<caulk::ipc::synchronous_messenger::eventlink_receiver>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147E440;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<caulk::ipc::synchronous_messenger::eventlink_receiver>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147E440;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<caulk::mach::os_workgroup_managed>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<caulk::mach::os_workgroup_managed>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147E4E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<caulk::mach::os_workgroup_managed>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147E4E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AMCP::Portal::IPC::IO_Receiver::register_buffer(uint64_t a1, void *a2)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  xpc_object_t v4 = v3;
  if (!v3) {
    xpc_object_t v4 = xpc_null_create();
  }

  id v5 = v4;
  unint64_t v6 = v5;
  id v81 = v5;
  if (!v5 || MEMORY[0x1C185AAD0](v5) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v7 = xpc_null_create();
    id v8 = v81;
    id v81 = v7;
  }
  *(void *)std::string buf = &v81;
  *(void *)&uint8_t buf[8] = "buffer shared memory";
  applesauce::xpc::dict::object_proxy::operator applesauce::xpc::object(&v80, (uint64_t)buf);
  uint64_t v9 = v80;
  char v11 = (caulk::mach::details *)caulk::mach::details::retain_os_object(v9, v10);

  unint64_t v79 = v11;
  caulk::mach::details::release_os_object(0, v12);
  *(void *)std::string buf = &v81;
  *(void *)&uint8_t buf[8] = "buffer device id";
  applesauce::xpc::dict::object_proxy::operator applesauce::xpc::object(&v78, (uint64_t)buf);
  LODWORD(v11) = applesauce::xpc::dyn_cast_or_default((applesauce::xpc *)&v78, 0);
  *(void *)std::string buf = &v81;
  *(void *)&uint8_t buf[8] = "buffer client id";
  applesauce::xpc::dict::object_proxy::operator applesauce::xpc::object(&v77, (uint64_t)buf);
  uint64_t v13 = applesauce::xpc::dyn_cast_or_default((applesauce::xpc *)&v77, 0);
  *(void *)std::string buf = &v81;
  *(void *)&uint8_t buf[8] = "buffer stream id";
  applesauce::xpc::dict::object_proxy::operator applesauce::xpc::object(&v76, (uint64_t)buf);
  int v14 = applesauce::xpc::dyn_cast_or_default((applesauce::xpc *)&v76, 0);
  *(void *)std::string buf = &v81;
  *(void *)&uint8_t buf[8] = "buffer type";
  applesauce::xpc::dict::object_proxy::operator applesauce::xpc::object(&v75, (uint64_t)buf);
  *(void *)&long long v74 = __PAIR64__(v13, v11);
  uint64_t v15 = (void *)(a1 + 80);
  DWORD2(v74) = v14;
  HIDWORD(v74) = applesauce::xpc::dyn_cast_or_default((applesauce::xpc *)&v75, 0);
  std::string v16 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>>>::find<AMCP::Portal::IPC::shared_buffer_info_t>((void *)(a1 + 80), (unsigned int *)&v74);
  if (v16)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v16);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v56 = **(NSObject ***)buf;
    AMCP::Log::Scope::get_os_log_t(**(id **)buf);
    objc_claimAutoreleasedReturnValue();
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v57 = pthread_self();
      mach_port_t v58 = pthread_mach_thread_np(v57);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v58;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "IO_Receiver.mm";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 158;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "m_shared_memory_map.find(buffer_key) != m_shared_memory_map.end()";
      _os_log_error_impl(&dword_1BAA78000, v56, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s buffer key already exists in the map!", buf, 0x22u);
    }

    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v73);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v66, "buffer key already exists in the map!");
    std::runtime_error::runtime_error(&v67, &v66);
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    int v72 = -1;
    v67.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v68 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v67);
    *(void *)&buf[32] = "void AMCP::Portal::IPC::IO_Receiver::register_buffer(__strong xpc_object_t)";
    uint64_t v83 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Driver/IO_Receiver.mm";
    int v84 = 158;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v61);
    long long v64 = v61;
    uint64_t v65 = v62;
    long long v61 = 0uLL;
    uint64_t v62 = 0;
    CFTypeRef v63 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  CFTypeRef v60 = v9;
  std::string v17 = (std::__shared_weak_count *)operator new(0x30uLL);
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147E530;
  *(void *)&long long v18 = MEMORY[0x1C1858C20](&v17[1], &v79);
  *((void *)&v18 + 1) = v17;
  *(_OWORD *)std::string buf = v74;
  *(_OWORD *)&buf[16] = v18;
  long long v59 = v18;
  unint64_t v19 = std::hash<AMCP::Portal::IPC::shared_buffer_info_t>::operator()((unsigned int *)buf);
  unint64_t v20 = v19;
  unint64_t v21 = *(void *)(a1 + 88);
  if (!v21) {
    goto LABEL_27;
  }
  uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
  v22.i16[0] = vaddlv_u8(v22);
  if (v22.u32[0] > 1uLL)
  {
    uint64_t v13 = v19;
    if (v19 >= v21) {
      uint64_t v13 = v19 % v21;
    }
  }
  else
  {
    uint64_t v13 = (v21 - 1) & v19;
  }
  uint64_t v23 = *(uint64_t ***)(*v15 + 8 * v13);
  if (!v23 || (CFTypeRef v24 = *v23) == 0)
  {
LABEL_27:
    uint64_t v26 = operator new(0x30uLL);
    int v27 = (void *)(a1 + 96);
    *uint64_t v26 = 0;
    v26[1] = v20;
    *((_OWORD *)v26 + 1) = v74;
    *((_OWORD *)v26 + 2) = v59;
    *(_OWORD *)&buf[16] = 0uLL;
    float v28 = (float)(unint64_t)(*(void *)(a1 + 104) + 1);
    float v29 = *(float *)(a1 + 112);
    if (v21 && (float)(v29 * (float)v21) >= v28)
    {
LABEL_73:
      uint64_t v45 = (void *)*v15;
      unint64_t v46 = *(void **)(*v15 + 8 * v13);
      if (v46)
      {
        *uint64_t v26 = *v46;
        CFTypeRef v55 = v60;
      }
      else
      {
        *uint64_t v26 = *v27;
        *int v27 = v26;
        v45[v13] = v27;
        CFTypeRef v55 = v60;
        if (!*v26)
        {
LABEL_82:
          ++*(void *)(a1 + 104);
          goto LABEL_83;
        }
        unint64_t v47 = *(void *)(*v26 + 8);
        if ((v21 & (v21 - 1)) != 0)
        {
          if (v47 >= v21) {
            v47 %= v21;
          }
        }
        else
        {
          v47 &= v21 - 1;
        }
        unint64_t v46 = (void *)(*v15 + 8 * v47);
      }
      *unint64_t v46 = v26;
      goto LABEL_82;
    }
    BOOL v30 = 1;
    if (v21 >= 3) {
      BOOL v30 = (v21 & (v21 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v21);
    unint64_t v32 = vcvtps_u32_f32(v28 / v29);
    if (v31 <= v32) {
      int8x8_t prime = (int8x8_t)v32;
    }
    else {
      int8x8_t prime = (int8x8_t)v31;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v21 = *(void *)(a1 + 88);
    }
    if (*(void *)&prime > v21) {
      goto LABEL_39;
    }
    if (*(void *)&prime < v21)
    {
      unint64_t v40 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 104) / *(float *)(a1 + 112));
      if (v21 < 3 || (uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)v21), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        unint64_t v40 = std::__next_prime(v40);
      }
      else
      {
        uint64_t v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2) {
          unint64_t v40 = v42;
        }
      }
      if (*(void *)&prime <= v40) {
        int8x8_t prime = (int8x8_t)v40;
      }
      if (*(void *)&prime >= v21)
      {
        unint64_t v21 = *(void *)(a1 + 88);
      }
      else
      {
        if (prime)
        {
LABEL_39:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          double v34 = operator new(8 * *(void *)&prime);
          uint64_t v35 = (void *)*v15;
          *uint64_t v15 = v34;
          if (v35) {
            operator delete(v35);
          }
          uint64_t v36 = 0;
          *(int8x8_t *)(a1 + 88) = prime;
          do
            *(void *)(*v15 + 8 * v36++) = 0;
          while (*(void *)&prime != v36);
          unint64_t v37 = (void *)*v27;
          if (*v27)
          {
            unint64_t v38 = v37[1];
            uint8x8_t v39 = (uint8x8_t)vcnt_s8(prime);
            v39.i16[0] = vaddlv_u8(v39);
            if (v39.u32[0] > 1uLL)
            {
              if (v38 >= *(void *)&prime) {
                v38 %= *(void *)&prime;
              }
            }
            else
            {
              v38 &= *(void *)&prime - 1;
            }
            *(void *)(*v15 + 8 * v38) = v27;
            long long v43 = (void *)*v37;
            if (*v37)
            {
              do
              {
                unint64_t v44 = v43[1];
                if (v39.u32[0] > 1uLL)
                {
                  if (v44 >= *(void *)&prime) {
                    v44 %= *(void *)&prime;
                  }
                }
                else
                {
                  v44 &= *(void *)&prime - 1;
                }
                if (v44 != v38)
                {
                  if (!*(void *)(*v15 + 8 * v44))
                  {
                    *(void *)(*v15 + 8 * v44) = v37;
                    goto LABEL_64;
                  }
                  *unint64_t v37 = *v43;
                  *long long v43 = **(void **)(*v15 + 8 * v44);
                  **(void **)(*v15 + 8 * v44) = v43;
                  long long v43 = v37;
                }
                unint64_t v44 = v38;
LABEL_64:
                unint64_t v37 = v43;
                long long v43 = (void *)*v43;
                unint64_t v38 = v44;
              }
              while (v43);
            }
          }
          unint64_t v21 = (unint64_t)prime;
          goto LABEL_68;
        }
        CFStringRef v54 = (void *)*v15;
        *uint64_t v15 = 0;
        if (v54) {
          operator delete(v54);
        }
        unint64_t v21 = 0;
        *(void *)(a1 + 88) = 0;
      }
    }
LABEL_68:
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v20 >= v21) {
        uint64_t v13 = v20 % v21;
      }
      else {
        uint64_t v13 = v20;
      }
    }
    else
    {
      uint64_t v13 = (v21 - 1) & v20;
    }
    goto LABEL_73;
  }
  while (1)
  {
    unint64_t v25 = v24[1];
    if (v25 == v19) {
      break;
    }
    if (v22.u32[0] > 1uLL)
    {
      if (v25 >= v21) {
        v25 %= v21;
      }
    }
    else
    {
      v25 &= v21 - 1;
    }
    if (v25 != v13) {
      goto LABEL_27;
    }
LABEL_26:
    CFTypeRef v24 = (uint64_t *)*v24;
    if (!v24) {
      goto LABEL_27;
    }
  }
  if (*((_DWORD *)v24 + 4) != *(_DWORD *)buf
    || *((_DWORD *)v24 + 5) != *(_DWORD *)&buf[4]
    || *((_DWORD *)v24 + 6) != *(_DWORD *)&buf[8]
    || *((_DWORD *)v24 + 7) != *(_DWORD *)&buf[12])
  {
    goto LABEL_26;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  CFTypeRef v55 = v9;
LABEL_83:
  xpc_object_t v48 = v75;
  xpc_object_t v75 = 0;

  xpc_object_t v49 = v76;
  xpc_object_t v76 = 0;

  xpc_object_t v50 = v77;
  xpc_object_t v77 = 0;

  xpc_object_t v51 = v78;
  xpc_object_t v78 = 0;

  caulk::mach::details::release_os_object(v79, v52);
  id v53 = v81;
  id v81 = 0;
}

void sub_1BAE84E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, std::runtime_error a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,void *a35,void *a36,void *a37)
{
  caulk::mach::details::release_os_object(*(caulk::mach::details **)(v40 - 200), v42);
  long long v43 = *(void **)(v40 - 184);
  *(void *)(v40 - 184) = 0;

  _Unwind_Resume(a1);
}

void applesauce::xpc::dict::object_proxy::operator applesauce::xpc::object(xpc_object_t *a1, uint64_t a2)
{
  xpc_object_t v4 = **(void ***)a2;
  id v5 = AMCP::Log::Scope::get_os_log_t(v4);
  unint64_t v6 = xpc_dictionary_get_value(v5, *(const char **)(a2 + 8));

  id v7 = v6;
  *a1 = v7;
  id v8 = v7;
  if (!v7) {
    *a1 = xpc_null_create();
  }
}

void sub_1BAE85088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    id v3 = (std::__shared_weak_count *)__p[5];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *std::function<void ()(caulk::ipc::mapped_memory &)>::operator=(void *a1, void *a2)
{
  v9[3] = *MEMORY[0x1E4F143B8];
  id v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      id v8 = v7;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v7);
    }
    else
    {
      id v8 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    id v8 = 0;
  }
  if (v7 != a1)
  {
    xpc_object_t v4 = v8;
    id v5 = (void *)a1[3];
    if (v8 == v7)
    {
      if (v5 == a1)
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, v9);
        (*(void (**)(void *))(*v8 + 32))(v8);
        id v8 = 0;
        (*(void (**)(void, void *))(*(void *)a1[3] + 24))(a1[3], v7);
        (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        id v8 = v7;
        (*(void (**)(void *, void *))(v9[0] + 24))(v9, a1);
        (*(void (**)(void *))(v9[0] + 32))(v9);
      }
      else
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, a1);
        (*(void (**)(void *))(*v8 + 32))(v8);
        id v8 = (void *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v5 == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v7);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v8;
      id v8 = v7;
    }
    else
    {
      id v8 = (void *)a1[3];
      a1[3] = v4;
    }
  }
  std::__function::__value_func<void ()(caulk::ipc::mapped_memory &)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void sub_1BAE853F0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t *std::unique_ptr<std::tuple<caulk::thread::attributes,AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_1,std::tuple<>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    id v3 = *(std::__shared_weak_count **)(v2 + 120);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    xpc_object_t v4 = *(std::__shared_weak_count **)(v2 + 88);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    id v5 = *(std::__shared_weak_count **)(v2 + 72);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    if (*(unsigned char *)(v2 + 24) && *(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1C1859840](v2, 0x1032C40A80D4485);
  }
  return a1;
}

void *AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_1::~$_1(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  id v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

uint64_t caulk::thread_proxy<std::tuple<caulk::thread::attributes,AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_1,std::tuple<>>>(caulk::thread::attributes *a1)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  long long v43 = a1;
  uint64_t v1 = (caulk::mach *)caulk::thread::attributes::apply_to_this_thread(a1);
  HIDWORD(v3) = 1098310496;
  LODWORD(v3) = *((_DWORD *)v43 + 26);
  double v4 = 24000000.0 / *((double *)v43 + 12) * (double)v3;
  unsigned int v5 = v4;
  unsigned int v6 = (v4 * 0.5);
  if (v6 <= 0x4B0) {
    unsigned int v6 = 1200;
  }
  if (v6 >= 0x124F80) {
    unsigned int v7 = 1200000;
  }
  else {
    unsigned int v7 = v6;
  }
  if (v7 > v5) {
    caulk::mach::throw_if_mach_error(v1, v2);
  }
  uint64_t v8 = *((void *)v43 + 14);
  int v9 = AMCP::Feature_Flags::access_event_link_oop_io(0, (const BOOL *)v2);
  if (v8)
  {
    if (v9)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "io receiver");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v58, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v58 = __p;
      }
      LOBYTE(v59) = 1;
      *(_DWORD *)&v60[6] = v5;
      *(_DWORD *)&v60[10] = v7;
      *(_DWORD *)long long v61 = v5;
      *(void *)&v61[4] = 0x100000001;
      char v62 = 1;
      int v63 = 1;
      char v64 = 1;
      uint64_t v12 = *((void *)v43 + 14);
      v55.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FB7EA0] + 16);
      v55.__imp_.__imp_ = (const char *)caulk::mach::details::retain_os_object(*(caulk::mach::details **)(v12 + 8), v10);
      long long v13 = *(_OWORD *)(v12 + 41);
      long long v14 = *(_OWORD *)(v12 + 32);
      long long v56 = *(_OWORD *)(v12 + 16);
      *(_OWORD *)CFStringRef v57 = v14;
      *(_OWORD *)&v57[9] = v13;
      uint64_t v15 = caulk::ipc::synchronous_messenger::eventlink_receiver::start();
      caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)&v55);
      if ((_BYTE)v59 && SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((v15 & 0xFF00000000) == 0 || !(_BYTE)v15)
      {
        AMCP::Log::Scope_Registry::get(v16);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v58, "com.apple.coreaudio", "AMCP");
        std::string v17 = *(NSObject **)v58.__r_.__value_.__l.__data_;
        AMCP::Log::Scope::get_os_log_t(*(id *)v58.__r_.__value_.__l.__data_);
        objc_claimAutoreleasedReturnValue();
        if (v58.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v58.__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          long long v18 = pthread_self();
          mach_port_t v19 = pthread_mach_thread_np(v18);
          LODWORD(v58.__r_.__value_.__l.__data_) = 67109890;
          HIDWORD(v58.__r_.__value_.__r.__words[0]) = v19;
          LOWORD(v58.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v58.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"IO_Receiver.mm";
          WORD1(v58.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v58.__r_.__value_.__r.__words[2]) = 330;
          __int16 v59 = 2080;
          *(void *)CFTypeRef v60 = "receiver_start_result.value_or(false) != true";
          _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to start IO receiver", (uint8_t *)&v58, 0x22u);
        }

        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v54);
        __cxa_allocate_exception(0x40uLL);
        std::runtime_error::runtime_error(&v48, "Failed to start IO receiver");
        std::runtime_error::runtime_error((std::runtime_error *)&__p, &v48);
        uint64_t v50 = 0;
        uint64_t v51 = 0;
        uint64_t v52 = 0;
        int v53 = -1;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148A9A8;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v58, (uint64_t)&__p);
        *(void *)&v60[6] = "auto AMCP::Portal::IPC::IO_Receiver::start_message_thread()::(anonymous class)::operator()() const";
        *(void *)long long v61 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Driver/IO_Receiver.mm";
        *(_DWORD *)&v61[8] = 330;
        std::vector<void *>::vector(&v44);
        int v20 = backtrace((void **)&v44.~runtime_error, (unint64_t)(v44.__imp_.__imp_ - (const char *)v44.__vftable) >> 3);
        std::vector<void *>::resize((char **)&v44, v20);
        *(void *)unint64_t v46 = &unk_1F148AA90;
        *(std::runtime_error *)&v46[8] = v44;
        uint64_t v47 = v45;
        v44.__vftable = 0;
        v44.__imp_.__imp_ = 0;
        uint64_t v45 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "io receiver");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v58, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v58 = __p;
      }
      LOBYTE(v59) = 1;
      *(_DWORD *)&v60[6] = v5;
      *(_DWORD *)&v60[10] = v7;
      *(_DWORD *)long long v61 = v5;
      *(void *)&v61[4] = 0x100000001;
      char v62 = 1;
      int v63 = 1;
      char v64 = 1;
      uint64_t v21 = *((void *)v43 + 14);
      v55.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FB7EA0] + 16);
      v55.__imp_.__imp_ = (const char *)caulk::mach::details::retain_os_object(*(caulk::mach::details **)(v21 + 8), v11);
      long long v22 = *(_OWORD *)(v21 + 41);
      long long v23 = *(_OWORD *)(v21 + 32);
      long long v56 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)CFStringRef v57 = v23;
      *(_OWORD *)&v57[9] = v22;
      uint64_t v24 = caulk::ipc::synchronous_messenger::semaphore_receiver::start();
      caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)&v55);
      if ((_BYTE)v59 && SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((v24 & 0xFF00000000) == 0 || !(_BYTE)v24)
      {
        AMCP::Log::Scope_Registry::get(v25);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v58, "com.apple.coreaudio", "AMCP");
        uint64_t v26 = *(NSObject **)v58.__r_.__value_.__l.__data_;
        AMCP::Log::Scope::get_os_log_t(*(id *)v58.__r_.__value_.__l.__data_);
        objc_claimAutoreleasedReturnValue();
        if (v58.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v58.__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          int v27 = pthread_self();
          mach_port_t v28 = pthread_mach_thread_np(v27);
          LODWORD(v58.__r_.__value_.__l.__data_) = 67109890;
          HIDWORD(v58.__r_.__value_.__r.__words[0]) = v28;
          LOWORD(v58.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v58.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"IO_Receiver.mm";
          WORD1(v58.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v58.__r_.__value_.__r.__words[2]) = 335;
          __int16 v59 = 2080;
          *(void *)CFTypeRef v60 = "receiver_start_result.value_or(false) != true";
          _os_log_error_impl(&dword_1BAA78000, v26, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to start IO receiver", (uint8_t *)&v58, 0x22u);
        }

        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v54);
        __cxa_allocate_exception(0x40uLL);
        std::runtime_error::runtime_error(&v48, "Failed to start IO receiver");
        std::runtime_error::runtime_error((std::runtime_error *)&__p, &v48);
        uint64_t v50 = 0;
        uint64_t v51 = 0;
        uint64_t v52 = 0;
        int v53 = -1;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148A9A8;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v58, (uint64_t)&__p);
        *(void *)&v60[6] = "auto AMCP::Portal::IPC::IO_Receiver::start_message_thread()::(anonymous class)::operator()() const";
        *(void *)long long v61 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Driver/IO_Receiver.mm";
        *(_DWORD *)&v61[8] = 335;
        std::vector<void *>::vector(&v44);
        int v29 = backtrace((void **)&v44.~runtime_error, (unint64_t)(v44.__imp_.__imp_ - (const char *)v44.__vftable) >> 3);
        std::vector<void *>::resize((char **)&v44, v29);
        *(void *)unint64_t v46 = &unk_1F148AA90;
        *(std::runtime_error *)&v46[8] = v44;
        uint64_t v47 = v45;
        v44.__vftable = 0;
        v44.__imp_.__imp_ = 0;
        uint64_t v45 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
    }
  }
  else if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&v55, "io receiver");
    if (SBYTE7(v56) < 0)
    {
      std::string::__init_copy_ctor_external(&v58, (const std::string::value_type *)v55.__vftable, (std::string::size_type)v55.__imp_.__imp_);
    }
    else
    {
      *(std::runtime_error *)&v58.__r_.__value_.__l.__data_ = v55;
      v58.__r_.__value_.__r.__words[2] = v56;
    }
    LOBYTE(v59) = 1;
    *(_DWORD *)&v60[6] = v5;
    *(_DWORD *)&v60[10] = v7;
    *(_DWORD *)long long v61 = v5;
    *(void *)&v61[4] = 0x100000001;
    char v62 = 1;
    int v63 = 1;
    char v64 = 1;
    BOOL v30 = (AMCP::Log::Scope_Registry *)caulk::ipc::synchronous_messenger::eventlink_receiver::start();
    unint64_t v31 = v30;
    if ((_BYTE)v59 && SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v56) < 0) {
      operator delete(v55.__vftable);
    }
    if (((unint64_t)v31 & 0xFF00000000) == 0 || !(_BYTE)v31)
    {
      AMCP::Log::Scope_Registry::get(v30);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v58, "com.apple.coreaudio", "AMCP");
      unint64_t v32 = *(NSObject **)v58.__r_.__value_.__l.__data_;
      AMCP::Log::Scope::get_os_log_t(*(id *)v58.__r_.__value_.__l.__data_);
      objc_claimAutoreleasedReturnValue();
      if (v58.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v58.__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = pthread_self();
        mach_port_t v34 = pthread_mach_thread_np(v33);
        LODWORD(v58.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(v58.__r_.__value_.__r.__words[0]) = v34;
        LOWORD(v58.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v58.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"IO_Receiver.mm";
        WORD1(v58.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v58.__r_.__value_.__r.__words[2]) = 343;
        __int16 v59 = 2080;
        *(void *)CFTypeRef v60 = "receiver_start_result.value_or(false) != true";
        _os_log_error_impl(&dword_1BAA78000, v32, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to start IO receiver", (uint8_t *)&v58, 0x22u);
      }

      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v48);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v44, "Failed to start IO receiver");
      std::runtime_error::runtime_error(&v55, &v44);
      *((void *)&v56 + 1) = 0;
      *(void *)CFStringRef v57 = 0;
      *(void *)&v57[8] = 0;
      *(_DWORD *)&v57[16] = -1;
      v55.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      *(void *)&long long v56 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v58, (uint64_t)&v55);
      *(void *)&v60[6] = "auto AMCP::Portal::IPC::IO_Receiver::start_message_thread()::(anonymous class)::operator()() const";
      *(void *)long long v61 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Driver/IO_Receiver.mm";
      *(_DWORD *)&v61[8] = 343;
      std::vector<void *>::vector(v46);
      int v35 = backtrace(*(void ***)v46, (*(void *)&v46[8] - *(void *)v46) >> 3);
      std::vector<void *>::resize((char **)v46, v35);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)v46;
      uint64_t v50 = *(void *)&v46[16];
      memset(v46, 0, sizeof(v46));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v55, "io receiver");
    if (SBYTE7(v56) < 0)
    {
      std::string::__init_copy_ctor_external(&v58, (const std::string::value_type *)v55.__vftable, (std::string::size_type)v55.__imp_.__imp_);
    }
    else
    {
      *(std::runtime_error *)&v58.__r_.__value_.__l.__data_ = v55;
      v58.__r_.__value_.__r.__words[2] = v56;
    }
    LOBYTE(v59) = 1;
    *(_DWORD *)&v60[6] = v5;
    *(_DWORD *)&v60[10] = v7;
    *(_DWORD *)long long v61 = v5;
    *(void *)&v61[4] = 0x100000001;
    char v62 = 1;
    int v63 = 1;
    char v64 = 1;
    uint64_t v36 = (AMCP::Log::Scope_Registry *)caulk::ipc::synchronous_messenger::semaphore_receiver::start();
    unint64_t v37 = v36;
    if ((_BYTE)v59 && SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v56) < 0) {
      operator delete(v55.__vftable);
    }
    if (((unint64_t)v37 & 0xFF00000000) == 0 || !(_BYTE)v37)
    {
      AMCP::Log::Scope_Registry::get(v36);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v58, "com.apple.coreaudio", "AMCP");
      uint8x8_t v39 = *(NSObject **)v58.__r_.__value_.__l.__data_;
      AMCP::Log::Scope::get_os_log_t(*(id *)v58.__r_.__value_.__l.__data_);
      objc_claimAutoreleasedReturnValue();
      if (v58.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v58.__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        uint64_t v40 = pthread_self();
        mach_port_t v41 = pthread_mach_thread_np(v40);
        LODWORD(v58.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(v58.__r_.__value_.__r.__words[0]) = v41;
        LOWORD(v58.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v58.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"IO_Receiver.mm";
        WORD1(v58.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v58.__r_.__value_.__r.__words[2]) = 348;
        __int16 v59 = 2080;
        *(void *)CFTypeRef v60 = "receiver_start_result.value_or(false) != true";
        _os_log_error_impl(&dword_1BAA78000, v39, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to start IO receiver", (uint8_t *)&v58, 0x22u);
      }

      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v48);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v44, "Failed to start IO receiver");
      std::runtime_error::runtime_error(&v55, &v44);
      *((void *)&v56 + 1) = 0;
      *(void *)CFStringRef v57 = 0;
      *(void *)&v57[8] = 0;
      *(_DWORD *)&v57[16] = -1;
      v55.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      *(void *)&long long v56 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v58, (uint64_t)&v55);
      *(void *)&v60[6] = "auto AMCP::Portal::IPC::IO_Receiver::start_message_thread()::(anonymous class)::operator()() const";
      *(void *)long long v61 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Driver/IO_Receiver.mm";
      *(_DWORD *)&v61[8] = 348;
      std::vector<void *>::vector(v46);
      int v42 = backtrace(*(void ***)v46, (*(void *)&v46[8] - *(void *)v46) >> 3);
      std::vector<void *>::resize((char **)v46, v42);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)v46;
      uint64_t v50 = *(void *)&v46[16];
      memset(v46, 0, sizeof(v46));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
  }
  std::unique_ptr<std::tuple<caulk::thread::attributes,AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_1,std::tuple<>>>::~unique_ptr[abi:ne180100]((uint64_t *)&v43);
  return 0;
}

void sub_1BAE864AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, std::runtime_error a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::runtime_error a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a2)
  {

    unint64_t v37 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v37);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)(v35 - 160), "com.apple.coreaudio", "AMCP");
    unint64_t v38 = **(NSObject ***)(v35 - 160);
    AMCP::Log::Scope::get_os_log_t(v38);
    objc_claimAutoreleasedReturnValue();
    uint8x8_t v39 = *(std::__shared_weak_count **)(v35 - 152);
    if (v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    }
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = pthread_self();
      mach_port_t v41 = pthread_mach_thread_np(v40);
      *(_DWORD *)(v35 - 160) = 67109890;
      *(_DWORD *)(v35 - 156) = v41;
      *(_WORD *)(v35 - 152) = 2080;
      *(_WORD *)(v35 - 142) = 1024;
      *(_DWORD *)(v35 - 140) = 354;
      *(_WORD *)(v35 - 136) = 1024;
      _os_log_error_impl(&dword_1BAA78000, v38, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception trying to start io receiver for device %u", (uint8_t *)(v35 - 160), 0x1Eu);
    }

    __cxa_end_catch();
    JUMPOUT(0x1BAE86174);
  }
  _Unwind_Resume(exception_object);
}

void caulk::mach::throw_if_mach_error(caulk::mach *this, const char *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(void *)unsigned int v6 = &unk_1F147E6C0;
  MEMORY[0x1C1859250](v5, 4, v6, "Constructing a thread with real time priority requires that the computation (quantum) is less than or equal to the constraint");
  std::error_category::~error_category((std::error_category *)v6);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v2 = std::runtime_error::what(v5);
    *(_DWORD *)unsigned int v6 = 136315138;
    *(void *)&v6[4] = v2;
    _os_log_error_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Throwing: %s", v6, 0xCu);
  }
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
  double v4 = std::runtime_error::runtime_error(exception, v5);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA448] + 16);
  v4[1] = v5[1];
  __cxa_throw(v4, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
}

void sub_1BAE86958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, uint64_t a10, uint64_t a11, std::error_category a12)
{
}

void *std::__function::__func<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0,std::allocator<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0>,void ()(caulk::ipc::mapped_memory &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0,std::allocator<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0>,void ()(caulk::ipc::mapped_memory &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP6Portal3IPC11IO_Receiver20start_message_threadEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0,std::allocator<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0>,void ()(caulk::ipc::mapped_memory &)>::operator()(uint64_t a1, caulk::ipc::mapped_memory *this)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 1) <= 0x13FuLL)
  {
    _os_assert_log();
    raw_ptr = (AMCP::Log::Scope_Registry *)_os_crash();
    __break(1u);
LABEL_26:
    AMCP::Log::Scope_Registry::get(raw_ptr);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v36 = **(NSObject ***)buf;
    AMCP::Log::Scope::get_os_log_t(**(id **)buf);
    objc_claimAutoreleasedReturnValue();
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      unint64_t v37 = pthread_self();
      mach_port_t v38 = pthread_mach_thread_np(v37);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v38;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "IO_Receiver.mm";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 192;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "(payload_ptr) == nullptr";
      _os_log_error_impl(&dword_1BAA78000, v36, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s IO Payload data is null", buf, 0x22u);
    }

    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v52);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v45, "IO Payload data is null");
    std::runtime_error::runtime_error(&v46, &v45);
    std::runtime_error v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    int v51 = -1;
    v46.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v47 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v46);
    *(void *)&buf[32] = "auto AMCP::Portal::IPC::IO_Receiver::start_message_thread()::(anonymous class)::operator()(cau"
                          "lk::ipc::mapped_memory &) const";
    *(void *)&unsigned char buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Driver/IO_Receiver.mm";
    LODWORD(v54) = 192;
    std::vector<void *>::vector(&v40);
    int v39 = backtrace((void **)v40, (*((void *)&v40 + 1) - (void)v40) >> 3);
    std::vector<void *>::resize((char **)&v40, v39);
    int v42 = &unk_1F148AA90;
    long long v43 = v40;
    uint64_t v44 = v41;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  raw_ptr = (AMCP::Log::Scope_Registry *)caulk::ipc::mapped_memory::get_raw_ptr(this);
  if (!raw_ptr) {
    goto LABEL_26;
  }
  unsigned int v5 = raw_ptr;
  unsigned int v6 = (AMCP::Log::Scope_Registry *)AMCP::Feature_Flags::access_collect_io_perfdata(0, v4);
  if (v6)
  {
    unsigned int v6 = (AMCP::Log::Scope_Registry *)mach_absolute_time();
    *((void *)v5 + 39) = v6;
  }
  uint64_t v7 = *(void *)v5;
  uint64_t v8 = *((unsigned int *)v5 + 2);
  int v9 = *((_DWORD *)v5 + 63);
  LODWORD(v42) = *((_DWORD *)v5 + 62);
  LODWORD(v40) = v9;
  long long v10 = *((_OWORD *)v5 + 3);
  long long v11 = *((_OWORD *)v5 + 4);
  long long v12 = *((_OWORD *)v5 + 6);
  long long v55 = *((_OWORD *)v5 + 5);
  long long v56 = v12;
  long long v13 = *((_OWORD *)v5 + 7);
  long long v14 = *((_OWORD *)v5 + 8);
  long long v15 = *((_OWORD *)v5 + 10);
  long long v59 = *((_OWORD *)v5 + 9);
  long long v60 = v15;
  long long v57 = v13;
  long long v58 = v14;
  long long v16 = *((_OWORD *)v5 + 11);
  long long v17 = *((_OWORD *)v5 + 12);
  long long v18 = *((_OWORD *)v5 + 14);
  long long v63 = *((_OWORD *)v5 + 13);
  long long v64 = v18;
  long long v61 = v16;
  long long v62 = v17;
  *(_OWORD *)&buf[32] = v10;
  long long v54 = v11;
  long long v19 = *((_OWORD *)v5 + 2);
  *(_OWORD *)std::string buf = *((_OWORD *)v5 + 1);
  *(_OWORD *)&buf[16] = v19;
  uint64_t v20 = *((unsigned int *)v5 + 60);
  int v21 = *((_DWORD *)v5 + 64);
  unsigned int v22 = *((_DWORD *)v5 + 65);
  int v23 = *((_DWORD *)v5 + 66);
  unsigned int v24 = *((_DWORD *)v5 + 67);
  uint64_t v25 = *(void *)(a1 + 8);
  uint64_t v26 = *(void *)(v25 + 48);
  LODWORD(v45.__vftable) = *(_DWORD *)(v25 + 56);
  switch(v7)
  {
    case 3:
      kdebug_trace();
      int v27 = (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, uint64_t))(*(void *)v26 + 144))(v26, LODWORD(v45.__vftable), v42, (uint64_t)v5 + 280, (uint64_t)v5 + 288, (uint64_t)v5 + 296);
      kdebug_trace();
      break;
    case 4:
      int v29 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 152))(v26);
      goto LABEL_15;
    case 5:
      mach_port_t v28 = (uint64_t (**)(uint64_t))(*(void *)v26 + 160);
      goto LABEL_9;
    case 6:
      v46.__vftable = (std::runtime_error_vtbl *)&v45;
      v46.__imp_.__imp_ = (const char *)&v40;
      uint64_t v47 = (void *)(v25 + 80);
      std::runtime_error v48 = &v42;
      uint64_t v30 = AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0::operator() const(caulk::ipc::mapped_memory &)::{lambda(AMCP::Portal::IPC::shared_buffer_type,unsigned int)#1}::operator()((unsigned int **)&v46, v21, v22);
      uint64_t v31 = AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0::operator() const(caulk::ipc::mapped_memory &)::{lambda(AMCP::Portal::IPC::shared_buffer_type,unsigned int)#1}::operator()((unsigned int **)&v46, v23, v24);
      if (v8 == 1919513701 || v8 == 1919246692 || v8 == 1835628655) {
        kdebug_trace();
      }
      (*(void (**)(uint64_t, void, void, uint64_t, uint64_t, unsigned char *))(*(void *)v26 + 160))(v26, LODWORD(v45.__vftable), v42, v8, v20, buf);
      int v27 = (*(uint64_t (**)(uint64_t, void, void, void, uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)v26 + 168))(v26, LODWORD(v45.__vftable), v40, v42, v8, v20, buf, v30, v31);
      (*(void (**)(uint64_t, void, void, uint64_t, uint64_t, unsigned char *))(*(void *)v26 + 176))(v26, LODWORD(v45.__vftable), v42, v8, v20, buf);
      if (v8 == 1919513701 || v8 == 1919246692 || v8 == 1835628655) {
        kdebug_trace();
      }
      break;
    case 7:
      mach_port_t v28 = (uint64_t (**)(uint64_t))(*(void *)v26 + 176);
LABEL_9:
      int v29 = (*v28)(v26);
LABEL_15:
      int v27 = v29;
      break;
    default:
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v46, "com.apple.coreaudio", "AMCP");
      unint64_t v32 = v46.~runtime_error_0;
      uint64_t v33 = pthread_self();
      mach_port_t v34 = pthread_mach_thread_np(v33);
      uint64_t v35 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
      *(_DWORD *)(v35 + 16) = 0;
      *(unsigned char *)(v35 + 20) = 16;
      *(_DWORD *)(v35 + 24) = v34;
      *(void *)(v35 + 32) = "IO_Receiver.mm";
      *(_DWORD *)(v35 + 40) = 285;
      *(void *)uint64_t v35 = &unk_1F147E600;
      *(void *)(v35 + 8) = 0;
      caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)v32, (caulk::concurrent::message *)v35);
      if (v46.__imp_.__imp_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v46.__imp_.__imp_);
      }
      int v27 = 1970171760;
      break;
  }
  *((_DWORD *)v5 + 68) = v27;
}

void sub_1BAE87108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, std::runtime_error a19, std::runtime_error a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,std::runtime_error a30,uint64_t a31)
{
  _Unwind_Resume(a1);
}

uint64_t AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0::operator() const(caulk::ipc::mapped_memory &)::{lambda(AMCP::Portal::IPC::shared_buffer_type,unsigned int)#1}::operator()(unsigned int **a1, int a2, unsigned int a3)
{
  if (!a2) {
    return 0;
  }
  if (a2 == 1)
  {
    unsigned int v6 = a1[1];
    unsigned int v7 = **a1;
    int v9 = a1 + 2;
    uint64_t v8 = a1[2];
    int v10 = *v9[1];
    unsigned int v12 = v7;
    int v13 = v10;
    unsigned int v14 = *v6;
    int v15 = 1;
  }
  else
  {
    if (a2 == 2)
    {
      double v4 = a1[1];
      unsigned int v12 = **a1;
      int v13 = 0;
      unsigned int v14 = *v4;
      int v15 = 2;
    }
    else
    {
      unsigned int v12 = **a1;
      int v13 = 0;
      unsigned int v14 = 0;
      int v15 = a2;
    }
    uint64_t v8 = a1[2];
  }
  long long v11 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>>>::find<AMCP::Portal::IPC::shared_buffer_info_t>(v8, &v12);
  if (!v11) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return caulk::ipc::mapped_memory::get_raw_ptr((caulk::ipc::mapped_memory *)v11[4]) + a3;
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0::operator() const(caulk::ipc::mapped_memory &)::{lambda(std::tuple<unsigned int,char const*,int,unsigned long long,unsigned int> &)#1},std::tuple<unsigned int,char const*,int,unsigned long long,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  AMCP::Log::Scope::get_os_log_t(*v10);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    int v8 = *(_DWORD *)(a1 + 56);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)long long v11 = 2080;
    *(void *)&v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 2048;
    uint64_t v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Caught exception while doing io message operation %llu, device id %u", (uint8_t *)&v10, 0x28u);
  }

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 64, 8);
}

void sub_1BAE87574(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0::operator() const(caulk::ipc::mapped_memory &)::{lambda(std::tuple<unsigned int,char const*,int,unsigned long long,unsigned int> &)#1},std::tuple<unsigned int,char const*,int,unsigned long long,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0::operator() const(caulk::ipc::mapped_memory &)::{lambda(std::tuple<unsigned int,char const*,int> &)#1},std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v8;
  AMCP::Log::Scope::get_os_log_t(*v8);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    LODWORD(v8) = 67109634;
    HIDWORD(v8) = v4;
    *(_WORD *)int v9 = 2080;
    *(void *)&v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Unknown IO message command", (uint8_t *)&v8, 0x18u);
  }

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAE87708(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0::operator() const(caulk::ipc::mapped_memory &)::{lambda(std::tuple<unsigned int,char const*,int> &)#1},std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t *std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>>>::find<AMCP::Portal::IPC::shared_buffer_info_t>(void *a1, unsigned int *a2)
{
  unint64_t v4 = std::hash<AMCP::Portal::IPC::shared_buffer_info_t>::operator()(a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v7 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t i = *(uint64_t **)(*a1 + 8 * v7);
  if (i)
  {
    for (uint64_t i = (uint64_t *)*i; i; uint64_t i = (uint64_t *)*i)
    {
      unint64_t v9 = i[1];
      if (v4 == v9)
      {
        if (*((_DWORD *)i + 4) == *a2
          && *((_DWORD *)i + 5) == a2[1]
          && *((_DWORD *)i + 6) == a2[2]
          && *((_DWORD *)i + 7) == a2[3])
        {
          return i;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v9 >= *(void *)&v5) {
            v9 %= *(void *)&v5;
          }
        }
        else
        {
          v9 &= *(void *)&v5 - 1;
        }
        if (v9 != v7) {
          return 0;
        }
      }
    }
  }
  return i;
}

uint64_t std::__function::__func<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0,std::allocator<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0>,void ()(caulk::ipc::mapped_memory &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F147E580;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0,std::allocator<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0>,void ()(caulk::ipc::mapped_memory &)>::__clone(uint64_t a1)
{
  CFArrayRef result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *CFArrayRef result = &unk_1F147E580;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0,std::allocator<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0>,void ()(caulk::ipc::mapped_memory &)>::~__func()
{
}

void HALS_IOContext_Manager::destroy_context_core_for_hal_object_id(HALS_IOContext_Manager *this, unsigned int a2)
{
  unint64_t v4 = (os_unfair_lock_s *)((char *)this + 16);
  os_unfair_lock_lock((os_unfair_lock_t)this + 4);
  mcp_object = HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager *)((char *)this + 40), a2);
  unsigned int v6 = mcp_object;
  if ((unint64_t)mcp_object >> 32)
  {
    CFTypeRef v16 = 0;
    AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v14, *((std::__shared_mutex_base **)this + 15), mcp_object);
    unint64_t v7 = v14;
    if (v14)
    {
      AMCP::Core::Core::get_simple_required_property<1853188452u>(cf, v14);
      CFTypeRef v8 = cf[0];
      CFTypeRef v16 = cf[0];
    }
    else
    {
      CFTypeRef v8 = 0;
    }
    uint64_t v9 = *((void *)this + 32);
    cf[0] = (CFTypeRef)MEMORY[0x1E4F143A8];
    cf[1] = (CFTypeRef)1174405120;
    cf[2] = ___ZN27HALS_IOContext_Manager_Impl38destroy_context_core_for_hal_object_idEj_block_invoke;
    cf[3] = &__block_descriptor_tmp_17602;
    CFTypeRef cf[4] = (char *)this + 24;
    cf[5] = v7;
    uint64_t v12 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v8) {
      CFRetain(v8);
    }
    CFTypeRef v13 = v8;
    unsigned __int8 v10 = atomic_load((unsigned __int8 *)(v9 + 32));
    if (v10) {
      atomic_store(1u, (unsigned __int8 *)(v9 + 33));
    }
    dispatch_async(*(dispatch_queue_t *)v9, cf);
    HALS_IOContext_Manager_Impl::Object_Map::remove_object((HALS_IOContext_Manager *)((char *)this + 40), v6, a2);
    AMCP::Core::Broker::destroy_core(*((std::__shared_mutex_base **)this + 15), v6);
    if (v13) {
      CFRelease(v13);
    }
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    if (v8) {
      CFRelease(v8);
    }
  }

  os_unfair_lock_unlock(v4);
}

void sub_1BAE87A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, const void *a20)
{
  applesauce::CF::StringRef::~StringRef(v21);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  applesauce::CF::StringRef::~StringRef(&a20);
  os_unfair_lock_unlock(v20);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager::create_stream_info_for_device(HALS_IOContext_Manager *this, os_unfair_lock_s *a2, const HALS_IODevice *a3)
{
  int8x8_t v5 = a2 + 4;
  os_unfair_lock_lock(a2 + 4);
  HALS_IOContext_Manager_Impl::create_stream_info_for_device(this, a3);

  os_unfair_lock_unlock(v5);
}

void sub_1BAE87B38(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager::device_arrived(os_unfair_lock_s *a1, unsigned int a2, unsigned int a3, const __CFString **a4, uint64_t a5, char a6)
{
  uint64_t v12 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  CFStringRef v13 = *a4;
  if (v13) {
    CFRetain(v13);
  }
  CFStringRef v14 = v13;
  HALS_IOContext_Manager_Impl::device_arrived((uint64_t)&a1[6], a2, a3, &v14, a5, a6);
  if (v13) {
    CFRelease(v13);
  }

  os_unfair_lock_unlock(v12);
}

void sub_1BAE87C04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager::device_died(uint64_t a1, unsigned int a2, unsigned int a3, CFTypeRef *a4)
{
  v25[2] = *MEMORY[0x1E4F143B8];
  CFTypeRef v8 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  CFStringRef v9 = (const __CFString *)*a4;
  if (*a4) {
    CFRetain(*a4);
  }
  std::mutex::lock((std::mutex *)(a1 + 192));
  AMCP::Log::Scope_Registry::get(v10);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  int v11 = **(NSObject ***)buf;
  if ((void)v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v24);
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    CFTypeRef v16 = pthread_self();
    mach_port_t v17 = pthread_mach_thread_np(v16);
    if (!v9)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mach_port_t v18 = v17;
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v9);
    if (v22 >= 0) {
      long long v19 = __p;
    }
    else {
      long long v19 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = v18;
    LOWORD(v24) = 2080;
    *(void *)((char *)&v24 + 2) = "HALS_IOContext_Manager_Impl.cpp";
    WORD5(v24) = 1024;
    HIDWORD(v24) = 495;
    LOWORD(v25[0]) = 2080;
    *(void *)((char *)v25 + 2) = v19;
    _os_log_debug_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d device_died: %s", buf, 0x22u);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }
  int v12 = HALS_IOContext_Manager_Impl::demand_driver_object_for_id((std::__shared_mutex_base **)(a1 + 24), a3);
  mcp_object = HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager_Impl::Object_Map *)(a1 + 40), a2);
  unsigned int v14 = mcp_object;
  if ((unint64_t)mcp_object >> 32)
  {
    uint64_t v15 = *(void *)(a1 + 136);
    *(void *)std::string buf = &unk_1F14857A8;
    *(void *)&long long v24 = a1 + 24;
    *((void *)&v24 + 1) = v14 | ((unint64_t)a2 << 32);
    v25[0] = buf;
    HALS_Graph_Manager::enqueue_config_change(v15, v12, v14, 1, (uint64_t)buf);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](buf);
    HALS_IOContext_Manager_Impl::garbage_collect((HALS_IOContext_Manager_Impl *)(a1 + 24));
  }
  std::mutex::unlock((std::mutex *)(a1 + 192));
  if (v9) {
    CFRelease(v9);
  }
  os_unfair_lock_unlock(v8);
}

void sub_1BAE87E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  __cxa_free_exception(v11);
  std::mutex::unlock(v10);
  applesauce::CF::StringRef::~StringRef(&a9);
  os_unfair_lock_unlock(v9);
  _Unwind_Resume(a1);
}

uint64_t **HALS_IOContext_Manager::get_hal_object_id_for_device_uid(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v4 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  hal_object_id_for_device_uid = HALS_IOContext_Manager_Impl::get_hal_object_id_for_device_uid(*(uint64_t ***)(a1 + 168), a2);
  os_unfair_lock_unlock(v4);
  return hal_object_id_for_device_uid;
}

void sub_1BAE87F30(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

BOOL HALS_IOContext_Manager::has_engine_for_device(HALS_IOContext_Manager *this, const HALS_IODevice *a2)
{
  if (!AMCP::Feature_Flags::run_hybrid_hal(this, (const BOOL *)a2)) {
    return 1;
  }
  unint64_t v4 = (os_unfair_lock_s *)((char *)this + 16);
  os_unfair_lock_lock((os_unfair_lock_t)this + 4);
  BOOL v5 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)this + 19, *((_DWORD *)a2 + 4)) != 0;
  os_unfair_lock_unlock(v4);
  return v5;
}

void HALS_IOContext_Manager::create_engine_for_device(os_unfair_lock_s *this, const HALS_IODevice *a2)
{
  uint64_t v3 = this + 4;
  unint64_t v4 = (HALS_IOContext_Manager_Impl *)&this[6];
  os_unfair_lock_lock(this + 4);
  HALS_IOContext_Manager_Impl::create_engine_for_device(v4, a2);

  os_unfair_lock_unlock(v3);
}

void sub_1BAE88004(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager::destroy_engine_for_device(os_unfair_lock_s *this, const HALS_IODevice *a2)
{
  if (AMCP::Feature_Flags::run_hybrid_hal((AMCP::Feature_Flags *)this, (const BOOL *)a2))
  {
    os_unfair_lock_lock(this + 4);
    HALS_IOContext_Manager_Impl::destroy_engine_for_device((HALS_IOContext_Manager_Impl *)&this[6], *((_DWORD *)a2 + 4));
    os_unfair_lock_unlock(this + 4);
  }
}

void HALS_IOContext_Manager::pause_contexts_for_device(os_unfair_lock_s *this, HALS_IODevice *a2)
{
  unint64_t v4 = this + 4;
  os_unfair_lock_lock(this + 4);
  mcp_object = HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager_Impl::Object_Map *)&this[10], *((_DWORD *)a2 + 4));
  if ((unint64_t)mcp_object >> 32)
  {
    AMCP::IO_Core::Graph_Manager::find_timebases_from_object_id((AMCP::IO_Core::Graph_Manager *)v9, *(void **)&this[34]._os_unfair_lock_opaque, mcp_object);
    v8[0] = 0;
    v8[1] = 0;
    unint64_t v7 = (uint64_t *)v8;
    AMCP::IO_Core::Graph_Manager::pause_iocontexts_for_timebases(*(void ***)&this[34]._os_unfair_lock_opaque, (uint64_t)v9, &v7);
    v10[0] = (void **)MEMORY[0x1E4F143A8];
    v10[1] = (void **)0x40000000;
    v10[2] = (void **)___ZN13HALS_IODevice22set_paused_io_contextsERKNSt3__13setIjNS0_4lessIjEENS0_9allocatorIjEEEE_block_invoke;
    void v10[3] = (void **)&__block_descriptor_tmp_12_19215;
    v10[4] = (void **)a2;
    v10[5] = (void **)&v7;
    unsigned int v6 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IODevice *))(*(void *)a2 + 56))(a2);
    HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v10);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v8[0]);
    v10[0] = (void **)v9;
    std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](v10);
  }

  os_unfair_lock_unlock(v4);
}

void sub_1BAE881B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void *a10)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a10);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  os_unfair_lock_unlock(v10);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager::resume_contexts_for_device(os_unfair_lock_s *this, HALS_IODevice *a2)
{
  unint64_t v4 = this + 4;
  os_unfair_lock_lock(this + 4);
  mcp_object = HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager_Impl::Object_Map *)&this[10], *((_DWORD *)a2 + 4));
  if ((unint64_t)mcp_object >> 32)
  {
    AMCP::IO_Core::Graph_Manager::find_timebases_from_object_id((AMCP::IO_Core::Graph_Manager *)v30, *(void **)&this[34]._os_unfair_lock_opaque, mcp_object);
    uint64_t v26 = v4;
    __p[0] = 0;
    __p[1] = __p;
    uint64_t v40 = 0x4002000000;
    uint64_t v41 = __Block_byref_object_copy__19225;
    v44[0] = 0;
    v44[1] = 0;
    int v42 = __Block_byref_object_dispose__19226;
    long long v43 = v44;
    uint64_t v33 = (uint64_t *)MEMORY[0x1E4F143A8];
    uint64_t v34 = 0x40000000;
    uint64_t v35 = ___ZN13HALS_IODevice32get_and_clear_paused_io_contextsEv_block_invoke;
    uint64_t v36 = &unk_1E6236600;
    unint64_t v37 = __p;
    mach_port_t v38 = a2;
    unsigned int v6 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IODevice *))(*(void *)a2 + 56))(a2);
    HALB_CommandGate::ExecuteCommand(v6, (uint64_t)&v33);
    std::set<unsigned int>::set[abi:ne180100](&v28, (uint64_t)__p[1] + 40);
    _Block_object_dispose(__p, 8);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v44[0]);
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v33 = &v34;
    uint64_t v7 = v28;
    CFStringRef v9 = *(std::__shared_mutex_base **)&this[30]._os_unfair_lock_opaque;
    CFTypeRef v8 = *(std::__shared_weak_count **)&this[32]._os_unfair_lock_opaque;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v27 = v8;
    if ((void **)v7 != v29)
    {
      unsigned __int8 v10 = &v34;
      do
      {
        AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v31, v9, *(_DWORD *)(v7 + 28));
        if (v31)
        {
          AMCP::Core::Core::get_simple_required_property<1853188452u>(v45, v31);
          CFStringRef v11 = v45[0];
          if (!v45[0])
          {
            exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v45[0]);
          CFRelease(v11);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "");
        }
        if (v32) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v32);
        }
        if (&v34 == v10
          || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, v10 + 4) & 0x80) != 0)
        {
          uint64_t v13 = *v10;
          unsigned int v14 = (const __CFString **)v10;
          if (v33 == v10) {
            goto LABEL_23;
          }
          uint64_t v15 = *v10;
          CFTypeRef v16 = v10;
          if (v13)
          {
            do
            {
              unsigned int v14 = (const __CFString **)v15;
              uint64_t v15 = *(void *)(v15 + 8);
            }
            while (v15);
          }
          else
          {
            do
            {
              unsigned int v14 = (const __CFString **)v16[2];
              BOOL v17 = *v14 == (const __CFString *)v16;
              CFTypeRef v16 = (uint64_t *)v14;
            }
            while (v17);
          }
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v14 + 4, __p) & 0x80) != 0)
          {
LABEL_23:
            if (!v13)
            {
              uint64_t v31 = (AMCP::Core::Core *)v10;
LABEL_38:
              mach_port_t v18 = operator new(0x38uLL);
              *((_OWORD *)v18 + 2) = *(_OWORD *)__p;
              *((void *)v18 + 6) = v40;
              __p[1] = 0;
              uint64_t v40 = 0;
              __p[0] = 0;
              std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(&v33, (uint64_t)v31, (uint64_t **)v10, (uint64_t *)v18);
              goto LABEL_39;
            }
            uint64_t v31 = (AMCP::Core::Core *)v14;
            data = v14 + 1;
            goto LABEL_25;
          }
        }
        else
        {
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 4, __p) & 0x80) == 0)
          {
            uint64_t v31 = (AMCP::Core::Core *)v10;
            v45[0] = (const __CFString *)v10;
            data = v45;
            goto LABEL_26;
          }
          long long v19 = (__CFString *)v10[1];
          uint64_t v20 = v19;
          CFStringRef v21 = (const __CFString *)v10;
          if (v19)
          {
            do
            {
              data = (const __CFString **)v20;
              uint64_t v20 = (__CFString *)v20->isa;
            }
            while (v20);
          }
          else
          {
            do
            {
              data = (const __CFString **)v21->data;
              BOOL v17 = *data == v21;
              CFStringRef v21 = (const __CFString *)data;
            }
            while (!v17);
          }
          if (data == (const __CFString **)&v34
            || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, data + 4) & 0x80) != 0)
          {
            if (v19)
            {
              uint64_t v31 = (AMCP::Core::Core *)data;
            }
            else
            {
              uint64_t v31 = (AMCP::Core::Core *)v10;
              data = (const __CFString **)(v10 + 1);
            }
            goto LABEL_25;
          }
        }
        data = (const __CFString **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)&v33, &v31, __p);
LABEL_25:
        unsigned __int8 v10 = (uint64_t *)*data;
LABEL_26:
        mach_port_t v18 = v10;
        unsigned __int8 v10 = (uint64_t *)data;
        if (!v18) {
          goto LABEL_38;
        }
LABEL_39:
        char v22 = (uint64_t *)*((void *)v18 + 1);
        if (v22)
        {
          do
          {
            unsigned __int8 v10 = v22;
            char v22 = (uint64_t *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            unsigned __int8 v10 = (uint64_t *)*((void *)v18 + 2);
            BOOL v17 = *v10 == (void)v18;
            mach_port_t v18 = v10;
          }
          while (!v17);
        }
        if (SHIBYTE(v40) < 0) {
          operator delete(__p[0]);
        }
        int v23 = *(void **)(v7 + 8);
        if (v23)
        {
          do
          {
            long long v24 = (void **)v23;
            int v23 = (void *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            long long v24 = *(void ***)(v7 + 16);
            BOOL v17 = *v24 == (void *)v7;
            uint64_t v7 = (uint64_t)v24;
          }
          while (!v17);
        }
        uint64_t v7 = (uint64_t)v24;
      }
      while (v24 != v29);
    }
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    unint64_t v4 = v26;
    AMCP::IO_Core::Graph_Manager::resume_iocontexts_for_timebases(*(void ***)&this[34]._os_unfair_lock_opaque, &v28, (uint64_t)&v33);
    std::__tree<std::string>::destroy((char *)v34);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v29[0]);
    __p[0] = v30;
    std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }

  os_unfair_lock_unlock(v4);
}

void sub_1BAE8865C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_unfair_lock_t lock, uint64_t a10, char *a11, void *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  a11 = &a14;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager::find_contexts_and_devices_with_timebases(HALS_IOContext_Manager *this, os_unfair_lock_s *a2, uint64_t a3)
{
  BOOL v5 = a2 + 4;
  unsigned int v6 = (const AMCP::Graph::Timebase_Set *)&a2[6];
  os_unfair_lock_lock(a2 + 4);
  HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(this, v6, *(void **)(a3 + 16));

  os_unfair_lock_unlock(v5);
}

void sub_1BAE88778(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager::hog_mode_owner_changed(os_unfair_lock_s *this, HALS_IODevice *a2, int a3)
{
  unsigned int v6 = this + 4;
  os_unfair_lock_lock(this + 4);
  if (a3 != -1)
  {
    mcp_object = HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager_Impl::Object_Map *)&this[10], *((_DWORD *)a2 + 4));
    if ((unint64_t)mcp_object >> 32)
    {
      long long v29 = 0u;
      long long v30 = 0u;
      int v31 = 1065353216;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      unint64_t v32 = 0;
      AMCP::IO_Core::Graph_Manager::find_timebases_from_object_id((AMCP::IO_Core::Graph_Manager *)&v14, *(void **)&this[34]._os_unfair_lock_opaque, mcp_object);
      CFTypeRef v8 = v14;
      for (uint64_t i = (unint64_t *)v15; v8 != i; v8 += 2)
      {
        unint64_t v10 = *v8;
        CFStringRef v11 = (std::__shared_weak_count *)v8[1];
        unint64_t v27 = *v8;
        uint64_t v28 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__emplace_unique_key_args<std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase>>((uint64_t)&v29, v10, (uint64_t)&v27);
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
      }
      long long v24 = &v14;
      std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
      HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases((HALS_IOContext_Manager_Impl *)&v24, (const AMCP::Graph::Timebase_Set *)&this[6], (void *)v30);
      CFStringRef v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v21, v24, v25, (v25 - (uint64_t)v24) >> 2);
      pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
      uint64_t v12 = HALS_ObjectMap::sNormalPriorityQueue;
      unsigned int v14 = (unint64_t *)MEMORY[0x1E4F143A8];
      uint64_t v15 = 1174405120;
      CFTypeRef v16 = ___ZN27HALS_IOContext_Manager_Impl22hog_mode_owner_changedEP13HALS_IODevicei_block_invoke;
      BOOL v17 = &__block_descriptor_tmp_20_17655;
      long long v19 = 0;
      uint64_t v20 = 0;
      std::string __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v21, v22, (v22 - (uint64_t)v21) >> 2);
      unsigned __int8 v13 = atomic_load((unsigned __int8 *)(v12 + 32));
      if (v13) {
        atomic_store(1u, (unsigned __int8 *)(v12 + 33));
      }
      dispatch_async(*(dispatch_queue_t *)v12, &v14);
      if (__p)
      {
        long long v19 = __p;
        operator delete(__p);
      }
      if (v21) {
        operator delete(v21);
      }
      if (v26) {
        operator delete(v26);
      }
      if (v24) {
        operator delete(v24);
      }
      if (v32)
      {
        uint64_t v33 = v32;
        operator delete(v32);
      }
      std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table((uint64_t)&v29);
    }
  }

  os_unfair_lock_unlock(v6);
}

void sub_1BAE889AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::pair<std::vector<unsigned int>,std::vector<unsigned int>>::~pair((uint64_t)&a19);
  AMCP::Graph::Timebase_Set::~Timebase_Set((AMCP::Graph::Timebase_Set *)(v27 - 112));
  os_unfair_lock_unlock(v26);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager::rebuild_engine_for_device(HALS_IOContext_Manager *this, const HALS_IODevice *a2)
{
  if (AMCP::Feature_Flags::run_hybrid_hal(this, (const BOOL *)a2))
  {
    unint64_t v4 = (os_unfair_lock_s *)((char *)this + 16);
    BOOL v5 = (HALS_IOContext_Manager *)((char *)this + 24);
    os_unfair_lock_lock(v4);
    HALS_IOContext_Manager_Impl::create_engine_for_device(v5, a2);
    HALS_IOContext_Manager_Impl::create_stream_info_for_device((HALS_IOContext_Manager_Impl *)__p, a2);
    unsigned int v6 = *((_DWORD *)a2 + 4);
    unsigned int v7 = *((_DWORD *)a2 + 7);
    CFTypeRef v8 = (const void *)(*(uint64_t (**)(const HALS_IODevice *))(*(void *)a2 + 208))(a2);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v8);
    char v9 = (*(uint64_t (**)(const HALS_IODevice *))(*(void *)a2 + 224))(a2);
    HALS_IOContext_Manager_Impl::device_arrived((uint64_t)v5, v6, v7, (const __CFString **)&cf, (uint64_t)__p, v9 ^ 1);
    if (cf) {
      CFRelease(cf);
    }
    if (__p[0]) {
      operator delete(__p[0]);
    }
    os_unfair_lock_unlock(v4);
  }
}

void sub_1BAE88B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  applesauce::CF::StringRef::~StringRef((const void **)&a9);
  if (__p) {
    operator delete(__p);
  }
  os_unfair_lock_unlock(v10);
  _Unwind_Resume(a1);
}

void std::default_delete<HALIO::HALIO_Graph_Builder>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x1C1859840);
}

uint64_t *std::unique_ptr<HALS_DSPCaptureFiles>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *CFArrayRef result = a2;
  if (v2)
  {
    uint64_t v3 = (void **)(v2 + 48);
    std::vector<std::pair<std::string const,HALS_IOEngineInfo const*>>::__destroy_vector::operator()[abi:ne180100](&v3);
    std::__tree<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>>>::destroy(*(void **)(v2 + 32));
    std::__tree<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>>>::destroy(*(void **)(v2 + 8));
    JUMPOUT(0x1C1859840);
  }
  return result;
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::CreateProcessorConfiguration>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf) {
    CFRelease(cf);
  }
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1BAE88D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::CreateProcessorConfiguration>::description(uint64_t a1@<X0>, void *a2@<X8>)
{
  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_) {
    CFRelease(cf.__begin_);
  }
  CFStringRef v4 = CFCopyDescription(v8);
  CFStringRef v5 = v4;
  if (v4)
  {
    CFIndex Length = CFStringGetLength(v4);
    CFIndex v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    std::vector<char>::value_type __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if (v7) {
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    }
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1BAE88EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t std::__function::__value_func<void ()(AudioObjectPropertyAddress const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(AudioObjectPropertyAddress const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(DSP_Host_Types::MutationRequestConfiguration const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<HALB_InstrumentedEvent_RealtimeDuration>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<HALB_InstrumentedEvent_RealtimeDuration>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147E860;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALB_InstrumentedEvent_RealtimeDuration>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147E860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void HALS_IOContextHostedDSP::DSPStreamInstance::CustomPropertyListenerCallback(HALS_IOContextHostedDSP::DSPStreamInstance *this, const AudioObjectPropertyAddress *a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)this);
  unsigned int v6 = (HALS_ObjectMap *)v4;
  if (v4) {
    uint64_t v7 = *(unsigned int *)(v4 + 16);
  }
  else {
    uint64_t v7 = 0;
  }
  CFTypeRef v8 = (HALS_NotificationManager *)*((unsigned int *)this + 1);
  AudioObjectPropertyElement mElement = a2->mElement;
  *(void *)std::string buf = *(void *)&a2->mSelector;
  *(_DWORD *)uint64_t v34 = mElement;
  HALS_NotificationManager::PropertiesChanged(v8, v7, 1u, (const AudioObjectPropertyAddress *)buf, v5);
  CFStringRef v11 = (HALS_NotificationManager *)*((unsigned int *)this + 2);
  if (*((_DWORD *)this + 1) != v11)
  {
    AudioObjectPropertyElement v12 = a2->mElement;
    *(void *)std::string buf = *(void *)&a2->mSelector;
    *(_DWORD *)uint64_t v34 = v12;
    HALS_NotificationManager::PropertiesChanged(v11, v7, 1u, (const AudioObjectPropertyAddress *)buf, v10);
  }
  AMCP::Log::Scope_Registry::get(v11);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  unsigned __int8 v13 = **(NSObject ***)buf;
  if (*(void *)v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v34);
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = pthread_self();
    mach_port_t v16 = pthread_mach_thread_np(v15);
    uint64_t v17 = *((unsigned int *)this + 79);
    uint64_t v18 = *(unsigned int *)this;
    uint64_t v19 = *((unsigned int *)this + 1);
    uint64_t v20 = *((unsigned int *)this + 2);
    AudioObjectPropertyScope mScope = a2->mScope;
    v22.i32[0] = bswap32(a2->mSelector);
    int8x8_t v23 = vzip1_s8(v22, v22);
    v24.i64[0] = 0x1F0000001FLL;
    v24.i64[1] = 0x1F0000001FLL;
    v25.i64[0] = 0x1F0000001FLL;
    v25.i64[1] = 0x1F0000001FLL;
    v26.i64[0] = 0x5F0000005FLL;
    v26.i64[1] = 0x5F0000005FLL;
    *(int8x8_t *)v27.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v26, (uint32x4_t)vsraq_n_s32(v25, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v23), 0x18uLL), 0x18uLL))), v23, (int8x8_t)0x2E002E002E002ELL);
    char v32 = 4;
    *(int8x8_t *)v27.i8 = vmovn_s16(v27);
    LODWORD(v31) = v27.i32[0];
    BYTE4(v31) = 0;
    v27.i32[0] = bswap32(mScope);
    *(int8x8_t *)v27.i8 = vzip1_s8(*(int8x8_t *)v27.i8, *(int8x8_t *)v27.i8);
    char v30 = 4;
    *(int8x8_t *)v27.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v26, (uint32x4_t)vsraq_n_s32(v24, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v27.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v27.i8, (int8x8_t)0x2E002E002E002ELL);
    LODWORD(__p) = vmovn_s16(v27).u32[0];
    BYTE4(__p) = 0;
    AudioObjectPropertyElement v28 = a2->mElement;
    *(_DWORD *)std::string buf = 67111682;
    *(_DWORD *)&uint8_t buf[4] = v16;
    *(_WORD *)uint64_t v34 = 2080;
    *(void *)&v34[2] = "HALS_IOContextHostedDSP.cpp";
    __int16 v35 = 1024;
    int v36 = 615;
    __int16 v37 = 2048;
    mach_port_t v38 = this;
    __int16 v39 = 2048;
    uint64_t v40 = v17;
    __int16 v41 = 2048;
    uint64_t v42 = v18;
    __int16 v43 = 2048;
    uint64_t v44 = v19;
    __int16 v45 = 2048;
    uint64_t v46 = v20;
    __int16 v47 = 2080;
    std::runtime_error v48 = &v31;
    __int16 v49 = 2080;
    p_p = &__p;
    __int16 v51 = 1024;
    AudioObjectPropertyElement v52 = v28;
    _os_log_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d [hal_dsp] %p (Context ID: %lu) (Client ID: %lu) (Device ID: %lu (%lu)) Sent Hosted DSP change notification sel:%s scope:%s el:%d", buf, 0x64u);
    if (v30 < 0) {
      operator delete(__p);
    }
    if (v32 < 0) {
      operator delete(v31);
    }
  }
  HALS_ObjectMap::ReleaseObject(v6, v14);
}

void sub_1BAE8938C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *std::__function::__func<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::*)(AudioObjectPropertyAddress const&),HALS_IOContextHostedDSP::DSPStreamInstance*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::*)(AudioObjectPropertyAddress const&),HALS_IOContextHostedDSP::DSPStreamInstance*,std::placeholders::__ph<1> const&>>,void ()(AudioObjectPropertyAddress const&)>::target_type()
{
}

uint64_t std::__function::__func<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::*)(AudioObjectPropertyAddress const&),HALS_IOContextHostedDSP::DSPStreamInstance*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::*)(AudioObjectPropertyAddress const&),HALS_IOContextHostedDSP::DSPStreamInstance*,std::placeholders::__ph<1> const&>>,void ()(AudioObjectPropertyAddress const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__16__bindIMN23HALS_IOContextHostedDSP17DSPStreamInstanceEFvRK26AudioObjectPropertyAddressEJPS2_RKNS_12placeholders4__phILi1EEEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::*)(AudioObjectPropertyAddress const&),HALS_IOContextHostedDSP::DSPStreamInstance*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::*)(AudioObjectPropertyAddress const&),HALS_IOContextHostedDSP::DSPStreamInstance*,std::placeholders::__ph<1> const&>>,void ()(AudioObjectPropertyAddress const&)>::operator()(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

__n128 std::__function::__func<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::*)(AudioObjectPropertyAddress const&),HALS_IOContextHostedDSP::DSPStreamInstance*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::*)(AudioObjectPropertyAddress const&),HALS_IOContextHostedDSP::DSPStreamInstance*,std::placeholders::__ph<1> const&>>,void ()(AudioObjectPropertyAddress const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F147E7A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::*)(AudioObjectPropertyAddress const&),HALS_IOContextHostedDSP::DSPStreamInstance*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::*)(AudioObjectPropertyAddress const&),HALS_IOContextHostedDSP::DSPStreamInstance*,std::placeholders::__ph<1> const&>>,void ()(AudioObjectPropertyAddress const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F147E7A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::*)(AudioObjectPropertyAddress const&),HALS_IOContextHostedDSP::DSPStreamInstance*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::*)(AudioObjectPropertyAddress const&),HALS_IOContextHostedDSP::DSPStreamInstance*,std::placeholders::__ph<1> const&>>,void ()(AudioObjectPropertyAddress const&)>::~__func()
{
}

uint64_t *HALS_IOContextHostedDSP::DSPStreamInstance::ConfigureCaptureFiles(uint64_t *a1, uint64_t *a2, char a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    __n128 result = (uint64_t *)HALS_DSPCaptureFiles::isDSPCaptureEnabled((HALS_DSPCaptureFiles *)a1);
    if (result)
    {
      if (*((_DWORD *)a1 + 3) == 1768845428)
      {
        uint64_t v7 = a2 + 8;
        uint64_t v8 = a2[8];
        if (v8)
        {
          char v9 = a2 + 8;
          unint64_t v10 = a2 + 8;
          uint64_t v11 = a2[8];
          do
          {
            unsigned int v12 = *(_DWORD *)(v11 + 28);
            BOOL v13 = v12 >= 3;
            if (v12 >= 3) {
              unsigned int v14 = (uint64_t *)v11;
            }
            else {
              unsigned int v14 = (uint64_t *)(v11 + 8);
            }
            if (v13) {
              unint64_t v10 = (uint64_t *)v11;
            }
            uint64_t v11 = *v14;
          }
          while (*v14);
          if (v10 != v7 && *((_DWORD *)v10 + 7) < 4u) {
            goto LABEL_38;
          }
          uint64_t v15 = a2 + 8;
          uint64_t v16 = a2[8];
          do
          {
            unsigned int v17 = *(_DWORD *)(v16 + 28);
            BOOL v18 = v17 >= 6;
            if (v17 >= 6) {
              uint64_t v19 = (uint64_t *)v16;
            }
            else {
              uint64_t v19 = (uint64_t *)(v16 + 8);
            }
            if (v18) {
              uint64_t v15 = (uint64_t *)v16;
            }
            uint64_t v16 = *v19;
          }
          while (*v19);
          if (v15 != v7 && *((_DWORD *)v15 + 7) < 7u) {
            goto LABEL_38;
          }
          do
          {
            unsigned int v20 = *(_DWORD *)(v8 + 28);
            BOOL v21 = v20 >= 9;
            if (v20 >= 9) {
              int8x8_t v22 = (uint64_t *)v8;
            }
            else {
              int8x8_t v22 = (uint64_t *)(v8 + 8);
            }
            if (v21) {
              char v9 = (uint64_t *)v8;
            }
            uint64_t v8 = *v22;
          }
          while (*v22);
          if (v9 != v7 && *((_DWORD *)v9 + 7) < 0xAu) {
LABEL_38:
          }
            HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)__str, a2);
        }
      }
      operator new();
    }
  }
  else
  {
    uint64_t v4 = a1 + 41;
    return std::unique_ptr<HALS_DSPCaptureFiles>::reset[abi:ne180100](v4, 0);
  }
  return result;
}

void sub_1BAE89B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,int a22,int a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  *(void *)(v54 + 56) = v56;
  operator delete(v55);
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  a45 = a16;
  std::vector<std::pair<std::string const,HALS_IOEngineInfo const*>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
  std::__tree<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>>>::destroy(*(void **)(a15 + 32));
  std::__tree<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>>>::destroy(*(void **)(a15 + 8));
  MEMORY[0x1C1859840](a15, 0x1020C408C5B6129);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContextHostedDSP::DSPStreamInstance::Negotiate_NP(uint64_t a1, uint64_t *a2, int a3, unsigned int a4, uint64_t a5)
{
  char v6 = a4;
  v80[3] = *MEMORY[0x1E4F143B8];
  unsigned int v70 = a4;
  uint64_t v10 = a2[8];
  if (!v10) {
    goto LABEL_18;
  }
  uint64_t v11 = a2 + 8;
  do
  {
    unsigned int v12 = *(_DWORD *)(v10 + 28);
    BOOL v13 = v12 >= 9;
    if (v12 >= 9) {
      unsigned int v14 = (uint64_t *)v10;
    }
    else {
      unsigned int v14 = (uint64_t *)(v10 + 8);
    }
    if (v13) {
      uint64_t v11 = (uint64_t *)v10;
    }
    uint64_t v10 = *v14;
  }
  while (*v14);
  if (v11 == a2 + 8 || *((_DWORD *)v11 + 7) > 9u)
  {
LABEL_18:
    uint64_t v19 = a1 + 648;
    uint64_t v20 = *(void *)(a1 + 648);
    if (!v20) {
      goto LABEL_28;
    }
    uint64_t v21 = a1 + 648;
    do
    {
      int v22 = *(_DWORD *)(v20 + 28);
      BOOL v23 = v22 == 0;
      if (v22) {
        uint64_t v24 = (uint64_t *)v20;
      }
      else {
        uint64_t v24 = (uint64_t *)(v20 + 8);
      }
      if (!v23) {
        uint64_t v21 = v20;
      }
      uint64_t v20 = *v24;
    }
    while (*v24);
    if (v21 == v19 || *(_DWORD *)(v21 + 28) >= 2u) {
LABEL_28:
    }
      uint64_t v21 = a1 + 648;
    BOOL v25 = (a4 & 1) != 0 || v19 == v21;
    int v26 = (a4 >> 2) & 1;
    if (!v25) {
      int v26 = 1;
    }
    if (v26) {
      char v27 = 4;
    }
    else {
      char v27 = 0;
    }
    LOBYTE(v70) = v27 | a4 & 0xFB;
    *(void *)xpc_object_t v76 = 0;
    *(_OWORD *)&v77[8] = 0u;
    *(void *)xpc_object_t v77 = &v77[8];
    long long v78 = 0u;
    memset(v79, 0, 32);
    *(_WORD *)a5 = 0;
    AudioObjectPropertyElement v28 = (void *)(a5 + 16);
    std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(*(void **)(a5 + 16));
    uint64_t v29 = *(void *)&v77[8];
    *(void *)(a5 + 8) = *(void *)v77;
    *AudioObjectPropertyElement v28 = v29;
    uint64_t v30 = *(void *)&v77[16];
    *(void *)(a5 + 24) = *(void *)&v77[16];
    if (v30)
    {
      *(void *)(v29 + 16) = v28;
      *(void *)xpc_object_t v77 = &v77[8];
      *(void *)&v77[8] = 0;
      *(void *)&v77[16] = 0;
    }
    else
    {
      *(void *)(a5 + 8) = v28;
    }
    std::vector<MutationItinerary::Device>::__vdeallocate((void **)(a5 + 32));
    *(_OWORD *)(a5 + 32) = v78;
    int v31 = *(void **)(a5 + 56);
    *(void *)(a5 + 48) = v79[0];
    v79[0] = 0;
    long long v78 = 0uLL;
    if (v31)
    {
      *(void *)(a5 + 64) = v31;
      operator delete(v31);
      *(void *)(a5 + 56) = 0;
      *(void *)(a5 + 64) = 0;
      *(void *)(a5 + 72) = 0;
    }
    *(_OWORD *)(a5 + 56) = *(_OWORD *)&v79[1];
    *(void *)(a5 + 72) = v79[3];
    memset(&v79[1], 0, 24);
    std::string buf = (NSObject **)&v78;
    std::vector<MutationItinerary::Device>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(*(void **)&v77[8]);
    HALS_IOContextHostedDSP::DSPStreamInstance::CreateRequest((DSP_Host_Types::ConfigurationChangeRequest *)&buf, *(_DWORD *)(a1 + 12), 1, a2, a3, (unsigned __int8 *)&v70);
    DSP_Host_Types::NegotiateRequest::NegotiateRequest((DSP_Host_Types::NegotiateRequest *)v76, (const DSP_Host_Types::ConfigurationChangeRequest *)&buf);
    std::string buf = (NSObject **)&unk_1F14867D0;
    __p[0] = v75;
    std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)&v74[3]);
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v74);
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&buf_8[16]);
    std::string buf = (NSObject **)&unk_1F1486820;
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf_8);
    if ((v6 & 2) != 0)
    {
      (*(void (**)(NSObject ***__return_ptr))(**(void **)(a1 + 136) + 16))(&buf);
      p_std::string buf = (void **)&buf;
      if (MutationItinerary::LoadFromNegotiateResponse_util((const __CFString ***)a5, (const DSP_Host_Types::NegotiateResponse *)&buf, 0))
      {
        uint64_t v32 = 0;
      }
      else
      {
        uint64_t v32 = 1685287013;
      }
      std::string buf = (NSObject **)&unk_1F1487440;
      __p[0] = &v74[3];
      std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = v74;
      std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = &buf_8[16];
      std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      std::string buf = (NSObject **)&unk_1F1487480;
    }
    else
    {
      uint64_t v32 = 1685287013;
      if ((v6 & 1) != 0 && v80[0] == v80[1]) {
        goto LABEL_94;
      }
      uint64_t v33 = DSP_Host_Types::ConfigurationChangeRequest::util_compare_request((unsigned __int8 **)(a1 + 544), (unsigned __int8 **)v76, 1);
      int v34 = v33;
      if (v33 >= 0x20)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v33);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
        mach_port_t v38 = *buf;
        if (*(void *)buf_8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)buf_8);
        }
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
        {
          AudioObjectPropertyElement v52 = pthread_self();
          mach_port_t v53 = pthread_mach_thread_np(v52);
          LODWORD(buf) = 67109634;
          HIDWORD(buf) = v53;
          *(_WORD *)buf_8 = 2080;
          *(void *)&buf_8[2] = "HALS_IOContextHostedDSP.cpp";
          *(_WORD *)&buf_8[10] = 1024;
          *(_DWORD *)&buf_8[12] = 204;
          _os_log_debug_impl(&dword_1BAA78000, v38, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] POLICY: Suppressing negotiate, new request is identical to last.", (uint8_t *)&buf, 0x18u);
        }
        if (*(unsigned char *)(a1 + 1224)) {
          uint64_t v32 = 1685287789;
        }
        else {
          uint64_t v32 = 1685287013;
        }
        goto LABEL_94;
      }
      uint64_t v35 = *(void *)(a1 + 336);
      if (v35 && (atomic_exchange((atomic_uchar *volatile)(v35 + 77), 0) & 1) != 0)
      {
        BOOL v39 = 1;
      }
      else
      {
        if (*(unsigned char *)(a1 + 1224))
        {
          if ((v33 & 0xF) == 0xF)
          {
            uint64_t v33 = MutationItinerary::AreChangesReconciled((MutationItinerary *)(a1 + 1224), (const DSP_Host_Types::ConfigurationChangeRequest *)v76, 0);
            if (v33)
            {
              AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v33);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
              int v36 = *buf;
              if (*(void *)buf_8) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)buf_8);
              }
              if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
              {
                long long v62 = pthread_self();
                mach_port_t v63 = pthread_mach_thread_np(v62);
                DSP_Host_Types::ConfigurationChangeRequest::debug_stringify_compare_result(__p, v34);
                long long v64 = v66 >= 0 ? __p : (void **)__p[0];
                LODWORD(buf) = 67109890;
                HIDWORD(buf) = v63;
                *(_WORD *)buf_8 = 2080;
                *(void *)&buf_8[2] = "HALS_IOContextHostedDSP.cpp";
                *(_WORD *)&buf_8[10] = 1024;
                *(_DWORD *)&buf_8[12] = 219;
                *(_WORD *)&buf_8[16] = 2080;
                *(void *)&buf_8[18] = v64;
                _os_log_debug_impl(&dword_1BAA78000, v36, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] POLICY: Suppressing negotiate, new request is the resolution of DSP changes: %s", (uint8_t *)&buf, 0x22u);
                if (v66 < 0) {
                  operator delete(__p[0]);
                }
              }
              uint64_t v32 = 1685287789;
              goto LABEL_94;
            }
          }
        }
        BOOL v39 = (v34 & 4) != 0 && (v34 & 8) == 0;
      }
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v33);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
      __int16 v41 = *buf;
      if (*(void *)buf_8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)buf_8);
      }
      BOOL v42 = os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG);
      if (v42)
      {
        uint64_t v54 = pthread_self();
        mach_port_t v55 = pthread_mach_thread_np(v54);
        DSP_Host_Types::ConfigurationChangeRequest::debug_stringify_compare_result(__p, v34);
        uint64_t v56 = "no";
        if (v39) {
          uint64_t v56 = "require";
        }
        LODWORD(buf) = 67110146;
        if (v66 >= 0) {
          long long v57 = __p;
        }
        else {
          long long v57 = (void **)__p[0];
        }
        HIDWORD(buf) = v55;
        *(_WORD *)buf_8 = 2080;
        *(void *)&buf_8[2] = "HALS_IOContextHostedDSP.cpp";
        *(_WORD *)&buf_8[10] = 1024;
        *(_DWORD *)&buf_8[12] = 231;
        *(_WORD *)&buf_8[16] = 2080;
        *(void *)&buf_8[18] = v56;
        *(_WORD *)&buf_8[26] = 2080;
        *(void *)&buf_8[28] = v57;
        _os_log_debug_impl(&dword_1BAA78000, v41, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] POLICY: New negotiate request due to configuration changes, %s rebuild: %s", (uint8_t *)&buf, 0x2Cu);
        if (v66 < 0) {
          operator delete(__p[0]);
        }
      }
      if ((v70 & 1) == 0)
      {
        if (!*(unsigned char *)(a1 + 1224))
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v42);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
          __int16 v47 = *buf;
          if (*(void *)buf_8) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)buf_8);
          }
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
          {
            std::runtime_error v48 = pthread_self();
            mach_port_t v49 = pthread_mach_thread_np(v48);
            LODWORD(buf) = 67109634;
            HIDWORD(buf) = v49;
            *(_WORD *)buf_8 = 2080;
            *(void *)&buf_8[2] = "HALS_IOContextHostedDSP.cpp";
            *(_WORD *)&buf_8[10] = 1024;
            *(_DWORD *)&buf_8[12] = 241;
            _os_log_debug_impl(&dword_1BAA78000, v47, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] POLICY: Deactivation requested with no previous activation, ignoring.", (uint8_t *)&buf, 0x18u);
          }
          goto LABEL_94;
        }
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v42);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
        __int16 v43 = *buf;
        if (*(void *)buf_8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)buf_8);
        }
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
        {
          long long v60 = pthread_self();
          mach_port_t v61 = pthread_mach_thread_np(v60);
          LODWORD(buf) = 67109634;
          HIDWORD(buf) = v61;
          *(_WORD *)buf_8 = 2080;
          *(void *)&buf_8[2] = "HALS_IOContextHostedDSP.cpp";
          *(_WORD *)&buf_8[10] = 1024;
          *(_DWORD *)&buf_8[12] = 236;
          _os_log_debug_impl(&dword_1BAA78000, v43, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] POLICY: Deactivation requested but with a different context configuration, ignoring, using previous config.", (uint8_t *)&buf, 0x18u);
        }
        DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::operator=((uint64_t)v76, a1 + 544);
        WORD4(v78) = 256;
      }
      (*(void (**)(void **__return_ptr))(**(void **)(a1 + 136) + 24))(__p);
      BOOL v44 = MutationItinerary::LoadFromNegotiateResponse_util((const __CFString ***)a5, (const DSP_Host_Types::NegotiateResponse *)__p, v39);
      if (v44)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v44);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
        __int16 v45 = *buf;
        if (*(void *)buf_8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)buf_8);
        }
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
        {
          long long v58 = pthread_self();
          mach_port_t v59 = pthread_mach_thread_np(v58);
          LODWORD(buf) = 67109634;
          HIDWORD(buf) = v59;
          *(_WORD *)buf_8 = 2080;
          *(void *)&buf_8[2] = "HALS_IOContextHostedDSP.cpp";
          *(_WORD *)&buf_8[10] = 1024;
          *(_DWORD *)&buf_8[12] = 254;
          _os_log_debug_impl(&dword_1BAA78000, v45, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] POLICY: Negotiate allowed, and succeeded.", (uint8_t *)&buf, 0x18u);
        }
        DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::operator=(a1 + 544, (uint64_t)v76);
        *(_WORD *)(a1 + 1224) = *(_WORD *)a5;
        if (a1 + 1224 != a5)
        {
          std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__tree_node<std::__value_type<applesauce::CF::StringRef,BOOL>,void *> *,long>>(a1 + 1232, *(void **)(a5 + 8), (void *)(a5 + 16));
          std::vector<MutationItinerary::Device>::__assign_with_size[abi:ne180100]<MutationItinerary::Device*,MutationItinerary::Device*>(a1 + 1256, *(void *)(a5 + 32), *(void *)(a5 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a5 + 40) - *(void *)(a5 + 32)) >> 4));
          std::vector<CAStreamBasicDescription>::__assign_with_size[abi:ne180100]<CAStreamBasicDescription*,CAStreamBasicDescription*>((void *)(a1 + 1280), *(char **)(a5 + 56), *(char **)(a5 + 64), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a5 + 64) - *(void *)(a5 + 56)) >> 3));
        }
        MutationItinerary::AreChangesReconciled((MutationItinerary *)(a1 + 1224), (const DSP_Host_Types::ConfigurationChangeRequest *)v76, (int *)(a1 + 1304));
        DSP_Host_Types::ConfigurationChangeRequest::ConfigurationChangeRequest((DSP_Host_Types::ConfigurationChangeRequest *)&buf);
        std::string buf = (NSObject **)&unk_1F1483C98;
        DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::operator=(a1 + 1312, (uint64_t)&buf);
        uint64_t v71 = (void **)v75;
        std::string buf = (NSObject **)&unk_1F14867D0;
        std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v71);
        DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)&v74[3]);
        DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v74);
        DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&buf_8[16]);
        std::string buf = (NSObject **)&unk_1F1486820;
        std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf_8);
        uint64_t v32 = 0;
        *(_DWORD *)(a1 + 312) = 0;
      }
      p_std::string buf = __p;
      __p[0] = &unk_1F1487440;
      std::string buf = (NSObject **)&v69;
      std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      std::string buf = (NSObject **)&v68;
      std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      std::string buf = (NSObject **)&v67;
      std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      __p[0] = &unk_1F1487480;
    }
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(p_buf + 1));
LABEL_94:
    *(void *)xpc_object_t v76 = &unk_1F14867D0;
    std::string buf = (NSObject **)v80;
    std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)&v79[3]);
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v79);
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v77[16]);
    *(void *)xpc_object_t v76 = &unk_1F1486820;
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v77);
    return v32;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v76, "com.apple.coreaudio", "AMCP");
  uint64_t v15 = **(NSObject ***)v76;
  if (*(void *)v77) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v77);
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v50 = pthread_self();
    mach_port_t v51 = pthread_mach_thread_np(v50);
    *(_DWORD *)xpc_object_t v76 = 67109634;
    *(_DWORD *)&v76[4] = v51;
    *(_WORD *)xpc_object_t v77 = 2080;
    *(void *)&v77[2] = "HALS_IOContextHostedDSP.cpp";
    *(_WORD *)&v77[10] = 1024;
    *(_DWORD *)&v77[12] = 157;
    _os_log_debug_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] Skip negotiation for client-visible common reference stream.", v76, 0x18u);
  }
  HALS_IOContextHostedDSP::DSPStreamInstance::CreateRequest((DSP_Host_Types::ConfigurationChangeRequest *)&buf, *(_DWORD *)(a1 + 12), 1, a2, a3, (unsigned __int8 *)&v70);
  DSP_Host_Types::NegotiateRequest::NegotiateRequest((DSP_Host_Types::NegotiateRequest *)v76, (const DSP_Host_Types::ConfigurationChangeRequest *)&buf);
  std::string buf = (NSObject **)&unk_1F14867D0;
  __p[0] = v75;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)&v74[3]);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v74);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&buf_8[16]);
  std::string buf = (NSObject **)&unk_1F1486820;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf_8);
  DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::operator=(a1 + 544, (uint64_t)v76);
  std::string buf = 0;
  memset(&buf_8[8], 0, 32);
  *(void *)buf_8 = &buf_8[8];
  memset(v74, 0, 32);
  *(_WORD *)(a1 + 1224) = 0;
  uint64_t v16 = a1 + 1240;
  std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(*(void **)(a1 + 1240));
  uint64_t v17 = *(void *)&buf_8[8];
  *(void *)(a1 + 1232) = *(void *)buf_8;
  *(void *)(a1 + 1240) = v17;
  uint64_t v18 = *(void *)&buf_8[16];
  *(void *)(a1 + 1248) = *(void *)&buf_8[16];
  if (v18)
  {
    *(void *)(v17 + 16) = v16;
    *(void *)buf_8 = &buf_8[8];
    *(void *)&buf_8[8] = 0;
    *(void *)&buf_8[16] = 0;
  }
  else
  {
    *(void *)(a1 + 1232) = v16;
  }
  std::vector<MutationItinerary::Device>::__vdeallocate((void **)(a1 + 1256));
  *(_OWORD *)(a1 + 1256) = *(_OWORD *)&buf_8[24];
  *(void *)(a1 + 1272) = v74[0];
  *(void *)&buf_8[32] = 0;
  v74[0] = 0;
  *(void *)&buf_8[24] = 0;
  uint64_t v40 = *(void **)(a1 + 1280);
  if (v40)
  {
    *(void *)(a1 + 1288) = v40;
    operator delete(v40);
    *(void *)(a1 + 1280) = 0;
    *(void *)(a1 + 1288) = 0;
    *(void *)(a1 + 1296) = 0;
  }
  *(_OWORD *)(a1 + 1280) = *(_OWORD *)&v74[1];
  *(void *)(a1 + 1296) = v74[3];
  memset(&v74[1], 0, 24);
  __p[0] = &buf_8[24];
  std::vector<MutationItinerary::Device>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(*(void **)&buf_8[8]);
  *(_DWORD *)(a1 + 312) = 0;
  DSP_Host_Types::ConfigurationChangeRequest::debug_log_device_summary((DSP_Host_Types::ConfigurationChangeRequest *)(a1 + 544), "Client Reference Stream");
  *(void *)xpc_object_t v76 = &unk_1F14867D0;
  std::string buf = (NSObject **)v80;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)&v79[3]);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v79);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v77[16]);
  *(void *)xpc_object_t v76 = &unk_1F1486820;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v77);
  return 1685283698;
}

void sub_1BAE8A99C(_Unwind_Exception *a1)
{
}

void HALS_IOContextHostedDSP::DSPStreamInstance::CreateRequest(DSP_Host_Types::ConfigurationChangeRequest *a1, int a2, char a3, uint64_t *a4, int a5, unsigned __int8 *a6)
{
  uint64_t v193 = *MEMORY[0x1E4F143B8];
  DSP_Host_Types::ConfigurationChangeRequest::ConfigurationChangeRequest((DSP_Host_Types::ConfigurationChangeRequest *)v162);
  v162[0] = &unk_1F1462990;
  int v178 = a2;
  char v179 = a3;
  CFTypeRef v180 = a4;
  CFTypeRef v181 = 0;
  uint64_t v183 = 0;
  v182 = 0;
  CFIndex v150 = a6;
  unsigned int v11 = *a6;
  __int16 v163 = v11 & 1 | 0x100;
  __int16 v164 = (v11 >> 1) & 1 | 0x100;
  v168[42] = a5;
  char v169 = 1;
  int v170 = 4096;
  char v171 = 1;
  *(_OWORD *)&cf.__r_.__value_.__r.__words[1] = 0uLL;
  cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&cf.__r_.__value_.__l.__size_;
  p_std::string::size_type size = &cf.__r_.__value_.__l.__size_;
  BOOL v13 = (uint64_t *)a4[7];
  if (v13 != a4 + 8)
  {
    while (1)
    {
      unsigned int v14 = *((_DWORD *)v13 + 7);
      if (v14 <= 9)
      {
        if (((1 << v14) & 0x3CC) != 0)
        {
          if (v178 != 1768845428) {
            goto LABEL_11;
          }
          goto LABEL_10;
        }
        if (((1 << v14) & 0x30) != 0)
        {
          if (v178 != 1869968496) {
            goto LABEL_11;
          }
LABEL_10:
          std::__tree<DSP_Host_Types::AudioProcessingType>::__emplace_unique_key_args<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::AudioProcessingType const&>((uint64_t **)&cf, v14, *((_DWORD *)v13 + 7));
          goto LABEL_11;
        }
        if (v14 == 1) {
          goto LABEL_10;
        }
      }
LABEL_11:
      uint64_t v15 = (uint64_t *)v13[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (uint64_t *)v13[2];
          BOOL v28 = *v16 == (void)v13;
          BOOL v13 = v16;
        }
        while (!v28);
      }
      BOOL v13 = v16;
      if (v16 == a4 + 8)
      {
        p_std::string::size_type size = (std::string::size_type *)cf.__r_.__value_.__r.__words[0];
        break;
      }
    }
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::__assign_multi<std::__tree_const_iterator<DSP_Host_Types::AudioProcessingType,std::__tree_node<DSP_Host_Types::AudioProcessingType,void *> *,long>>((uint64_t)&v165, p_size, &cf.__r_.__value_.__l.__size_);
  HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&__v, v180);
  if (v178 == 1869968496 || v178 == 1768845428)
  {
    DSP_Host_Types::FormatDescription::operator=((uint64_t)&v167, (uint64_t)&__v);
    DSP_Host_Types::FormatDescription::operator=((uint64_t)v168, (uint64_t)&__v);
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "HALS_DSPRequest.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 94;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  [hal_dsp] Unrecognized scope applied to hosted DSP.", buf, 0x12u);
  }
  uint64_t v17 = v180;
  if (*((unsigned char *)v180 + 136))
  {
    DSP_Host_Types::AudioChannelConfiguration::operator=((uint64_t)&v172, (_DWORD *)v180[14]);
    uint64_t v17 = v180;
  }
  if (*((unsigned char *)v17 + 100))
  {
    int v174 = *((_DWORD *)v17 + 24);
    char v175 = 1;
  }
  uint64_t v18 = (DSP_Host_OffloadDictionary *)v17[10];
  if (v18)
  {
    CFDictionaryRef v19 = (const __CFDictionary *)*((void *)v18 + 2);
    if (v19)
    {
      if (CFDictionaryGetCount(v19))
      {
        BOOL has_all_id = DSP_Host_OffloadDictionary::has_all_id(v18);
        uint64_t v17 = v180;
        if (!has_all_id) {
          DSP_Host_OffloadDictionary::deep_copy((DSP_Host_OffloadDictionary *)buf);
        }
      }
      else
      {
        uint64_t v17 = v180;
      }
    }
  }
  uint64_t v23 = v17[8];
  uint64_t v21 = v17 + 8;
  uint64_t v22 = v23;
  if (v23)
  {
    uint64_t v24 = v21;
    do
    {
      unsigned int v25 = *(_DWORD *)(v22 + 28);
      BOOL v26 = v25 >= 8;
      if (v25 >= 8) {
        char v27 = (uint64_t *)v22;
      }
      else {
        char v27 = (uint64_t *)(v22 + 8);
      }
      if (v26) {
        uint64_t v24 = (uint64_t *)v22;
      }
      uint64_t v22 = *v27;
    }
    while (*v27);
    if (v24 != v21 && *((_DWORD *)v24 + 7) <= 8u && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_DSPRequest.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 109;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  [hal_dsp][offload] DSP Offloading specified but no offload information supplied.", buf, 0x12u);
    }
  }
  CFStringRef v149 = (uint64_t *)&v165;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)cf.__r_.__value_.__l.__size_);
  if (v179) {
    BOOL v28 = v178 == 1768845428;
  }
  else {
    BOOL v28 = 0;
  }
  int v29 = v28;
  uint64_t v30 = v180;
  uint64_t v31 = *v180;
  if (v180[1] == *v180)
  {
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    int v34 = 0;
    if (!v29) {
      goto LABEL_109;
    }
  }
  else
  {
    int v160 = v29;
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    int v34 = 0;
    unint64_t v35 = 0;
    do
    {
      unsigned int v36 = *(_DWORD *)(v31 + (v35 << 7) + 8);
      if ((unint64_t)v32 >= v33)
      {
        unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (char *)v34) >> 3) + 1;
        if (v37 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(v33 - (void)v34) >> 3) > v37) {
          unint64_t v37 = 0x5555555555555556 * ((uint64_t)(v33 - (void)v34) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (void)v34) >> 3) >= 0x555555555555555) {
          unint64_t v38 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v38 = v37;
        }
        if (v38) {
          unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v38);
        }
        else {
          uint64_t v39 = 0;
        }
        unint64_t v40 = v38 + 8 * (((char *)v32 - (char *)v34) >> 3);
        *(_DWORD *)unint64_t v40 = v36;
        *(void *)(v40 + 8) = v35;
        *(unsigned char *)(v40 + 16) = 1;
        if (v32 == v34)
        {
          __int16 v43 = v32;
          int v34 = (unsigned int *)(v38 + 8 * (((char *)v32 - (char *)v34) >> 3));
        }
        else
        {
          __int16 v41 = (char *)(v38 + 8 * (((char *)v32 - (char *)v34) >> 3));
          do
          {
            long long v42 = *(_OWORD *)(v32 - 6);
            *((void *)v41 - 1) = *((void *)v32 - 1);
            *(_OWORD *)(v41 - 24) = v42;
            v41 -= 24;
            v32 -= 6;
          }
          while (v32 != v34);
          __int16 v43 = v34;
          int v34 = (unsigned int *)v41;
        }
        unint64_t v33 = v38 + 24 * v39;
        uint64_t v32 = (unsigned int *)(v40 + 24);
        if (v43) {
          operator delete(v43);
        }
      }
      else
      {
        *uint64_t v32 = v36;
        *((void *)v32 + 1) = v35;
        *((unsigned char *)v32 + 16) = 1;
        *(unsigned int *)((char *)v32 + 17) = __v.__first_;
        v32[5] = *(_DWORD *)((char *)&__v.__first_ + 3);
        v32 += 6;
      }
      ++v35;
      uint64_t v30 = v180;
      uint64_t v31 = *v180;
    }
    while (v35 < (v180[1] - *v180) >> 7);
    if (!v160) {
      goto LABEL_109;
    }
  }
  BOOL v44 = (unsigned int *)v30[3];
  __int16 v45 = (unsigned int *)v30[4];
  if (v44 != v45)
  {
    while (1)
    {
      uint64_t v46 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v44);
      std::runtime_error v48 = v34;
      if (v46) {
        BOOL v49 = *((_DWORD *)v46 + 5) == 1633773415;
      }
      else {
        BOOL v49 = 0;
      }
      HALS_ObjectMap::ReleaseObject(v46, v47);
      if (!v49)
      {
        unsigned int v50 = *v44;
        mach_port_t v51 = v32;
        if (v48 != v32)
        {
          mach_port_t v51 = v48;
          while (*v51 != v50)
          {
            v51 += 6;
            if (v51 == v32) {
              goto LABEL_87;
            }
          }
        }
        if (v32 == v51)
        {
LABEL_87:
          if ((unint64_t)v32 >= v33)
          {
            unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (char *)v48) >> 3) + 1;
            if (v53 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * ((uint64_t)(v33 - (void)v48) >> 3) > v53) {
              unint64_t v53 = 0x5555555555555556 * ((uint64_t)(v33 - (void)v48) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (void)v48) >> 3) >= 0x555555555555555) {
              unint64_t v54 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v54 = v53;
            }
            if (v54) {
              unint64_t v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v54);
            }
            else {
              uint64_t v55 = 0;
            }
            unint64_t v56 = v54 + 8 * (((char *)v32 - (char *)v48) >> 3);
            *(_DWORD *)unint64_t v56 = v50;
            *(unsigned char *)(v56 + 8) = 0;
            *(unsigned char *)(v56 + 16) = 0;
            if (v48 == v32)
            {
              int v34 = (unsigned int *)(v54 + 8 * (((char *)v32 - (char *)v48) >> 3));
            }
            else
            {
              long long v57 = (char *)(v54 + 8 * (((char *)v32 - (char *)v48) >> 3));
              do
              {
                long long v58 = *(_OWORD *)(v32 - 6);
                *((void *)v57 - 1) = *((void *)v32 - 1);
                *(_OWORD *)(v57 - 24) = v58;
                v57 -= 24;
                v32 -= 6;
              }
              while (v32 != v48);
              uint64_t v32 = v48;
              int v34 = (unsigned int *)v57;
            }
            unint64_t v33 = v54 + 24 * v55;
            mach_port_t v59 = (unsigned int *)(v56 + 24);
            if (v32) {
              operator delete(v32);
            }
            uint64_t v32 = v59;
            goto LABEL_90;
          }
          *uint64_t v32 = v50;
          *((unsigned char *)v32 + 8) = 0;
          *((unsigned char *)v32 + 16) = 0;
          v32 += 6;
        }
      }
      int v34 = v48;
LABEL_90:
      ++v44;
      AudioObjectPropertyElement v52 = v32;
      if (v44 == v45) {
        goto LABEL_110;
      }
    }
  }
LABEL_109:
  AudioObjectPropertyElement v52 = v32;
LABEL_110:
  if (v34 != v52)
  {
    long long v60 = v52;
    mach_port_t v61 = v34;
    int v161 = v34;
    int v152 = v52;
    do
    {
      long long v62 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v61);
      if (v62)
      {
        uint64_t v154 = v62;
        *(void *)std::string buf = v62;
        buf[16] = 0;
        char v191 = 0;
        if (*((unsigned char *)v61 + 16)) {
          uint64_t v64 = *v180 + (*((void *)v61 + 1) << 7);
        }
        else {
          uint64_t v64 = 0;
        }
        *(void *)&uint8_t buf[8] = v64;
        if (v178 == 1768845428)
        {
          HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&__v, v180);
          float v65 = *(double *)&__v.__first_;
          float v66 = v65;
          uint64_t v67 = 0x100000000;
          long long v62 = *(HALS_ObjectMap **)buf;
        }
        else
        {
          float v66 = 0.0;
          uint64_t v67 = 0;
        }
        char v191 = BYTE4(v67);
        *(_DWORD *)&buf[16] = v67 | LODWORD(v66);
        double v68 = (*(double (**)(void))(*(void *)v62 + 264))();
        double v69 = v68;
        if (v191)
        {
          double v70 = *(float *)&buf[16];
          double v71 = *(float *)&buf[16] / v68;
        }
        else
        {
          double v71 = 1.0;
          double v70 = v68;
        }
        int v72 = (char *)operator new(0x310uLL);
        *((void *)v72 + 1) = 0;
        *((void *)v72 + 2) = 0;
        *(void *)int v72 = &unk_1F147F418;
        char v73 = v72 + 24;
        bzero(v72 + 32, 0x2F0uLL);
        *((void *)v72 + 3) = &unk_1F147EE48;
        std::string::basic_string[abi:ne180100]<0>(&__v, "device uid");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)v72 + 6, (uint64_t)&__v);
        v72[64] = 0;
        *((void *)v72 + 6) = &unk_1F147F0A0;
        v72[88] = 0;
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
        std::string::basic_string[abi:ne180100]<0>(&__v, "device model uid");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)v72 + 12, (uint64_t)&__v);
        v72[112] = 0;
        *((void *)v72 + 12) = &unk_1F147F0A0;
        v72[136] = 0;
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
        std::string::basic_string[abi:ne180100]<0>(&__v, "is default device");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)v72 + 18, (uint64_t)&__v);
        *((void *)v72 + 18) = &unk_1F1486878;
        *((_WORD *)v72 + 80) = 0;
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
        std::string::basic_string[abi:ne180100]<0>(&__v, "transport type");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)v72 + 21, (uint64_t)&__v);
        *((void *)v72 + 21) = &unk_1F1487570;
        v72[184] = 0;
        v72[188] = 0;
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
        std::string::basic_string[abi:ne180100]<0>(&__v, "data source type in");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)v72 + 24, (uint64_t)&__v);
        *((void *)v72 + 24) = &unk_1F1487570;
        v72[208] = 0;
        v72[212] = 0;
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
        std::string::basic_string[abi:ne180100]<0>(&__v, "data source type out");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)v72 + 27, (uint64_t)&__v);
        *((void *)v72 + 27) = &unk_1F1487570;
        v72[232] = 0;
        v72[236] = 0;
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
        std::string::basic_string[abi:ne180100]<0>(&__v, "sample rate");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)v72 + 30, (uint64_t)&__v);
        *((void *)v72 + 30) = &unk_1F1486A00;
        v72[256] = 0;
        v72[264] = 0;
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
        std::string::basic_string[abi:ne180100]<0>(&__v, "hardware sample rate");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)v72 + 34, (uint64_t)&__v);
        *((void *)v72 + 34) = &unk_1F1486A00;
        v72[288] = 0;
        v72[296] = 0;
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
        std::string::basic_string[abi:ne180100]<0>(&__v, "latency in samples");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)v72 + 38, (uint64_t)&__v);
        *((void *)v72 + 38) = &unk_1F1487570;
        v72[320] = 0;
        v72[324] = 0;
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
        std::string::basic_string[abi:ne180100]<0>(&__v, "latency out samples");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)v72 + 41, (uint64_t)&__v);
        *((void *)v72 + 41) = &unk_1F1487570;
        v72[344] = 0;
        v72[348] = 0;
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
        std::string::basic_string[abi:ne180100]<0>(&__v, "safety offset in samples");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)v72 + 44, (uint64_t)&__v);
        *((void *)v72 + 44) = &unk_1F1487570;
        v72[368] = 0;
        v72[372] = 0;
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
        std::string::basic_string[abi:ne180100]<0>(&__v, "safety offset out samples");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)v72 + 47, (uint64_t)&__v);
        *((void *)v72 + 47) = &unk_1F1487570;
        v72[392] = 0;
        v72[396] = 0;
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
        std::string::basic_string[abi:ne180100]<0>(&__v, "bluetooth device category");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)v72 + 50, (uint64_t)&__v);
        *((void *)v72 + 50) = &unk_1F1487570;
        v72[416] = 0;
        v72[420] = 0;
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
        v153 = v61;
        std::string::basic_string[abi:ne180100]<0>(&__v, "bluetooth ecnr enabled");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)v72 + 53, (uint64_t)&__v);
        *((void *)v72 + 53) = &unk_1F1486878;
        *((_WORD *)v72 + 220) = 0;
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
        DSP_Host_Types::AudioChannelConfiguration::AudioChannelConfiguration((DSP_Host_Types::AudioChannelConfiguration *)(v72 + 448), "output preferred layout");
        DSP_Host_Types::AudioChannelConfiguration::AudioChannelConfiguration((DSP_Host_Types::AudioChannelConfiguration *)(v72 + 568), "output default layout");
        *((_OWORD *)v72 + 47) = 0u;
        *((_OWORD *)v72 + 48) = 0u;
        *((_OWORD *)v72 + 45) = 0u;
        *((_OWORD *)v72 + 46) = 0u;
        *((_OWORD *)v72 + 43) = 0u;
        *((_OWORD *)v72 + 44) = 0u;
        *(void *)&long long v184 = v72 + 24;
        *((void *)&v184 + 1) = v72;
        long long v74 = (const void *)(*(uint64_t (**)(void))(**(void **)buf + 200))(*(void *)buf);
        xpc_object_t v75 = v74;
        if (v74) {
          CFRetain(v74);
        }
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v75);
        if (!cf.__r_.__value_.__r.__words[0])
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)&__v, (const __CFString *)cf.__r_.__value_.__l.__data_);
        std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>((std::string *)(v72 + 64), (const std::string *)&__v);
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
        if (cf.__r_.__value_.__r.__words[0]) {
          CFRelease(cf.__r_.__value_.__l.__data_);
        }
        xpc_object_t v76 = *(unsigned int **)buf;
        std::string::basic_string[abi:ne180100]<0>(&cf, "");
        DWORD2(v185) = 0;
        *(void *)&long long v185 = *(void *)"diumbolg";
        if ((*(unsigned int (**)(unsigned int *, void, long long *, void))(*(void *)v76 + 88))(v76, v76[4], &v185, 0))
        {
          CFTypeRef v189 = 0;
          int v188 = 8;
          (*(void (**)(unsigned int *, void, long long *, uint64_t, int *, CFTypeRef *, void, void, void, uint64_t *))(*(void *)v76 + 112))(v76, v76[4], &v185, 8, &v188, &v189, 0, 0, 0, v149);
          CFTypeRef v77 = v189;
          if (v189)
          {
            CFRetain(v189);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v187, v77);
            if (!v187)
            {
              unsigned int v148 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v148, "Could not construct");
              __cxa_throw(v148, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            applesauce::CF::convert_to<std::string,0>((uint64_t)&__v, v187);
            if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(cf.__r_.__value_.__l.__data_);
            }
            *(_OWORD *)&cf.__r_.__value_.__l.__data_ = *(_OWORD *)&__v.__first_;
            cf.__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
            HIBYTE(__v.__end_) = 0;
            LOBYTE(__v.__first_) = 0;
            if (v187) {
              CFRelease(v187);
            }
            CFRelease(v189);
          }
        }
        std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>((std::string *)(v72 + 112), &cf);
        if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(cf.__r_.__value_.__l.__data_);
        }
        *((double *)v72 + 32) = v70;
        v72[264] = 1;
        *((double *)v72 + 36) = v69;
        v72[296] = 1;
        *((_DWORD *)v72 + 46) = HALS_IODevice::GetTransportType(*(HALS_IODevice **)buf);
        v72[188] = 1;
        uint64_t DataSourceType = HALS_DSPRequest::GetDataSourceType(*(HALS_DSPRequest **)buf, (const HALS_Device *)0x696E7074);
        *((_DWORD *)v72 + 52) = DataSourceType;
        v72[212] = BYTE4(DataSourceType);
        uint64_t v79 = HALS_DSPRequest::GetDataSourceType(*(HALS_DSPRequest **)buf, (const HALS_Device *)0x6F757470);
        *((_DWORD *)v72 + 58) = v79;
        v72[236] = BYTE4(v79);
        *((_DWORD *)v72 + 80) = (v71
                                             * (double)(*(unsigned int (**)(void, uint64_t))(**(void **)buf + 304))(*(void *)buf, 1));
        v72[324] = 1;
        *((_DWORD *)v72 + 86) = (v71
                                             * (double)(*(unsigned int (**)(void, void))(**(void **)buf + 304))(*(void *)buf, 0));
        v72[348] = 1;
        *((_DWORD *)v72 + 92) = (v71
                                             * (double)(*(unsigned int (**)(void, uint64_t))(**(void **)buf + 312))(*(void *)buf, 1));
        v72[372] = 1;
        *((_DWORD *)v72 + 98) = (v71
                                             * (double)(*(unsigned int (**)(void, void))(**(void **)buf + 312))(*(void *)buf, 0));
        v72[396] = 1;
        long long v185 = 0uLL;
        HALS_System::GetInstance(&cf, 0, (uint64_t *)&v185);
        uint64_t v80 = *(void *)(cf.__r_.__value_.__r.__words[0] + 1264);
        __v.__first_ = (std::__split_buffer<std::string>::pointer)v80;
        LODWORD(__v.__begin_) = HALB_Mutex::Lock((HALB_Mutex *)v80);
        LODWORD(v80) = *(_DWORD *)(v80 + 208);
        HALB_Mutex::Locker::~Locker((HALB_Mutex **)&__v);
        *((_WORD *)v72 + 80) = (v80 == *(_DWORD *)(*(void *)buf + 16)) | 0x100;
        if (cf.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf.__r_.__value_.__l.__size_);
        }
        if (!v72[188]) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        if (*((_DWORD *)v72 + 46) == 1651275109)
        {
          uint64_t v81 = *(unsigned int *)(*(void *)buf + 16);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)0x676C6F6265636E72;
          LODWORD(__v.__begin_) = 0;
          *((_WORD *)v72 + 220) = (*(uint64_t (**)(void, uint64_t, std::__split_buffer<std::string> *, void))(**(void **)buf + 88))(*(void *)buf, v81, &__v, 0) | 0x100;
          uint64_t v82 = *(unsigned int *)(*(void *)buf + 16);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)0x676C6F6264636174;
          LODWORD(__v.__begin_) = 0;
          LODWORD(cf.__r_.__value_.__l.__data_) = 0;
          LODWORD(v189) = 0;
          (*(void (**)(void, uint64_t, std::__split_buffer<std::string> *, uint64_t, CFTypeRef *, std::string *, void, void, void))(**(void **)buf + 112))(*(void *)buf, v82, &__v, 4, &v189, &cf, 0, 0, 0);
          *((_DWORD *)v72 + 104) = cf.__r_.__value_.__l.__data_;
          v72[420] = 1;
        }
        __v.__first_ = (std::__split_buffer<std::string>::pointer)buf;
        HALS_DSPRequest::CreateDeviceDescription(HALS_DSPRequest::IODeviceInfo const&)const::$_2::operator()(&__v, 1936879204, (uint64_t)(v72 + 448));
        HALS_DSPRequest::CreateDeviceDescription(HALS_DSPRequest::IODeviceInfo const&)const::$_2::operator()(&__v, 1936876644, (uint64_t)(v72 + 568));
        if (v178 == 1768845428)
        {
          HALS_DSPRequest::CreateStreamConfiguration(&__v, (uint64_t)v162, (HALS_IODevice **)buf, 1768845428);
          first = (long long *)__v.__first_;
          std::__split_buffer<std::string>::pointer begin = __v.__begin_;
          if (__v.__first_ == __v.__begin_)
          {
            char v85 = 0;
          }
          else
          {
            char v85 = 0;
            do
            {
              std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((uint64_t)(v72 + 688), first);
              if (*(unsigned char *)(*(void *)first + 44)) {
                uint64_t v86 = *(unsigned int *)(*(void *)first + 40) | 0x100000000;
              }
              else {
                uint64_t v86 = 0;
              }
              if (v86 == 2) {
                char v87 = BYTE4(v86);
              }
              else {
                char v87 = 0;
              }
              v85 |= v87;
              ++first;
            }
            while (first != (long long *)begin);
          }
          cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__v;
          std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
        }
        else
        {
          char v85 = 0;
        }
        HALS_DSPRequest::CreateStreamConfiguration(&cf, (uint64_t)v162, (HALS_IODevice **)buf, 1869968496);
        std::string::size_type size = cf.__r_.__value_.__l.__size_;
        unint64_t v89 = (long long *)cf.__r_.__value_.__r.__words[0];
        char v155 = v85;
        std::string::size_type v156 = cf.__r_.__value_.__l.__size_;
        if (cf.__r_.__value_.__r.__words[0] != cf.__r_.__value_.__l.__size_)
        {
          while (1)
          {
            uint64_t v90 = *(void *)v89;
            *(_DWORD *)(v90 + 40) = 1;
            *(unsigned char *)(v90 + 44) = 1;
            std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((uint64_t)(v73 + 86), v89);
            if ((v85 & 1) == 0) {
              break;
            }
LABEL_242:
            if (++v89 == (long long *)size) {
              goto LABEL_243;
            }
          }
          uint64_t v91 = *(void *)v89;
          unint64_t v92 = (char *)operator new(0x180uLL);
          *((void *)v92 + 1) = 0;
          *((void *)v92 + 2) = 0;
          *(void *)unint64_t v92 = &unk_1F147F1E0;
          int v93 = v92 + 24;
          v92[32] = 0;
          v92[40] = 0;
          *((void *)v92 + 3) = &unk_1F147EC70;
          std::string::basic_string[abi:ne180100]<0>(&__v, "stream semantic");
          DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::StreamSemanticType,DSP_Host_Types::StringLookup_StreamSemantic,unsigned int>::StringifiedKvp((void *)v92 + 6, (uint64_t)&__v);
          if (SHIBYTE(__v.__end_) < 0) {
            operator delete(__v.__first_);
          }
          DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::FormatDescription *)(v92 + 136), "current format");
          std::string::basic_string[abi:ne180100]<0>(&__v, "stream id");
          std::string v159 = DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)v92 + 36, (uint64_t)&__v);
          *((void *)v92 + 36) = &unk_1F147F0A0;
          v92[304] = 0;
          v92[328] = 0;
          if (SHIBYTE(__v.__end_) < 0) {
            operator delete(__v.__first_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__v, "latency samples");
          int v158 = DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)v92 + 42, (uint64_t)&__v);
          *((void *)v92 + 42) = &unk_1F1487570;
          v92[352] = 0;
          v92[356] = 0;
          if (SHIBYTE(__v.__end_) < 0) {
            operator delete(__v.__first_);
          }
          int v157 = (void **)(v92 + 360);
          *((void *)v92 + 45) = 0;
          *((void *)v92 + 46) = 0;
          *((void *)v92 + 47) = 0;
          std::__optional_storage_base<applesauce::CF::StringRef,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<applesauce::CF::StringRef,false> const&>((uint64_t)(v92 + 32), *(CFTypeRef *)(v91 + 8), *(unsigned char *)(v91 + 16));
          DSP_Dictionariable::SingleKvp<unsigned int>::operator=((uint64_t)(v92 + 48), v91 + 24);
          int v94 = *(std::string **)(v91 + 72);
          if (v94)
          {
            if (v94 != (std::string *)(v91 + 48))
            {
              int v94 = (std::string *)(*(uint64_t (**)(std::string *))(v94->__r_.__value_.__r.__words[0] + 16))(v94);
              goto LABEL_197;
            }
            __v.__end_cap_.__value_ = (std::string *)&__v;
            (*(void (**)(std::string *, std::__split_buffer<std::string> *))(v94->__r_.__value_.__r.__words[0]
                                                                                      + 24))(v94, &__v);
          }
          else
          {
LABEL_197:
            __v.__end_cap_.__value_ = v94;
          }
          std::__function::__value_func<DSP_Host_Types::StreamSemanticType ()(char const*)>::swap[abi:ne180100](&__v, (void *)v92 + 9);
          std::__function::__value_func<DSP_Host_Types::StreamSemanticType ()(char const*)>::~__value_func[abi:ne180100](&__v);
          std::string v95 = *(std::string **)(v91 + 104);
          if (v95)
          {
            if (v95 != (std::string *)(v91 + 80))
            {
              std::string v95 = (std::string *)(*(uint64_t (**)(std::string *))(v95->__r_.__value_.__r.__words[0] + 16))(v95);
              goto LABEL_202;
            }
            __v.__end_cap_.__value_ = (std::string *)&__v;
            (*(void (**)(std::string *, std::__split_buffer<std::string> *))(v95->__r_.__value_.__r.__words[0]
                                                                                      + 24))(v95, &__v);
          }
          else
          {
LABEL_202:
            __v.__end_cap_.__value_ = v95;
          }
          std::__function::__value_func<char const* ()(DSP_Host_Types::StreamSemanticType)>::swap[abi:ne180100](&__v, (void *)v92 + 13);
          std::__function::__value_func<char const* ()(DSP_Host_Types::StreamSemanticType)>::~__value_func[abi:ne180100](&__v);
          DSP_Host_Types::FormatDescription::operator=((uint64_t)(v92 + 136), v91 + 112);
          if (v93 != (char *)v91)
          {
            uint64_t v97 = *(void *)(v91 + 336);
            uint64_t v96 = *(void *)(v91 + 344);
            unint64_t v98 = 0x86BCA1AF286BCA1BLL * ((v96 - v97) >> 3);
            uint64_t v99 = *((void *)v92 + 47);
            uint64_t v100 = *((void *)v92 + 45);
            if (0x86BCA1AF286BCA1BLL * ((v99 - v100) >> 3) >= v98)
            {
              uint64_t v112 = *((void *)v92 + 46);
              unint64_t v113 = 0x86BCA1AF286BCA1BLL * ((v112 - v100) >> 3);
              if (v113 >= v98)
              {
                if (v97 != v96)
                {
                  do
                  {
                    DSP_Host_Types::FormatDescription::operator=(v100, v97);
                    v97 += 152;
                    v100 += 152;
                  }
                  while (v97 != v96);
                  uint64_t v112 = *((void *)v92 + 46);
                }
                if (v112 != v100)
                {
                  uint64_t v116 = v112 - 152;
                  mach_port_t v117 = (void (***)(void))(v112 - 152);
                  uint64_t v118 = (void (***)(void))(v112 - 152);
                  do
                  {
                    CFStringRef v119 = *v118;
                    v118 -= 19;
                    (*v119)(v117);
                    v116 -= 152;
                    BOOL v28 = v117 == (void (***)(void))v100;
                    mach_port_t v117 = v118;
                  }
                  while (!v28);
                }
                *((void *)v92 + 46) = v100;
              }
              else
              {
                if (v112 != v100)
                {
                  uint64_t v114 = 8 * ((v112 - v100) >> 3);
                  uint64_t v115 = *(void *)(v91 + 336);
                  do
                  {
                    DSP_Host_Types::FormatDescription::operator=(v100, v115);
                    v115 += 152;
                    v100 += 152;
                    v114 -= 152;
                  }
                  while (v114);
                  uint64_t v100 = *((void *)v92 + 46);
                }
                *((void *)v92 + 46) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<DSP_Host_Types::FormatDescription>,DSP_Host_Types::FormatDescription*,DSP_Host_Types::FormatDescription*,DSP_Host_Types::FormatDescription*>(v97 + 152 * v113, v96, v100);
              }
            }
            else
            {
              if (v100)
              {
                uint64_t v101 = *((void *)v92 + 46);
                uint64_t v102 = (void *)*((void *)v92 + 45);
                if (v101 != v100)
                {
                  uint64_t v103 = v101 - 152;
                  uint64_t v104 = (void (***)(void))(v101 - 152);
                  uint64_t v105 = (void (***)(void))(v101 - 152);
                  do
                  {
                    int v106 = *v105;
                    v105 -= 19;
                    (*v106)(v104);
                    v103 -= 152;
                    BOOL v28 = v104 == (void (***)(void))v100;
                    uint64_t v104 = v105;
                  }
                  while (!v28);
                  uint64_t v102 = *v157;
                  int v93 = v92 + 24;
                }
                *((void *)v92 + 46) = v100;
                operator delete(v102);
                uint64_t v99 = 0;
                *int v157 = 0;
                *((void *)v92 + 46) = 0;
                *((void *)v92 + 47) = 0;
              }
              if (v98 > 0x1AF286BCA1AF286) {
                goto LABEL_306;
              }
              unint64_t v107 = 0x86BCA1AF286BCA1BLL * (v99 >> 3);
              uint64_t v108 = 2 * v107;
              if (2 * v107 <= v98) {
                uint64_t v108 = 0x86BCA1AF286BCA1BLL * ((v96 - v97) >> 3);
              }
              unint64_t v109 = v107 >= 0xD79435E50D7943 ? 0x1AF286BCA1AF286 : v108;
              if (v109 > 0x1AF286BCA1AF286) {
LABEL_306:
              }
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              mach_port_t v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DSP_Host_Types::FormatDescription>>(v109);
              *((void *)v92 + 45) = v110;
              *((void *)v92 + 46) = v110;
              *((void *)v92 + 47) = &v110[152 * v111];
              *((void *)v92 + 46) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<DSP_Host_Types::FormatDescription>,DSP_Host_Types::FormatDescription*,DSP_Host_Types::FormatDescription*,DSP_Host_Types::FormatDescription*>(v97, v96, (uint64_t)v110);
            }
          }
          DSP_Dictionariable::SingleKvp<unsigned int>::operator=((uint64_t)v158, v91 + 312);
          DSP_Dictionariable::SingleKvp<std::string>::operator=((uint64_t)v159, v91 + 264);
          *(void *)&long long v185 = v93;
          *((void *)&v185 + 1) = v92;
          *((_DWORD *)v92 + 16) = 2;
          v92[68] = 1;
          std::string::size_type size = v156;
          if (v92[328])
          {
            if (v92[327] < 0) {
              operator delete(*((void **)v92 + 38));
            }
            v92[328] = 0;
          }
          if (v92[356]) {
            v92[356] = 0;
          }
          char v73 = (void *)v184;
          std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100](v184 + 664, &v185);
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v92);
          char v85 = v155;
          goto LABEL_242;
        }
LABEL_243:
        __v.__first_ = &cf;
        std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        BOOL v120 = v73[83] != v73[84] || v73[89] != v73[90] || v73[86] != v73[87];
        CFStringRef v121 = v176;
        CFDictionaryRef v122 = v177;
        if (v176 != v177)
        {
          uint64_t v123 = (uint64_t)(v73 + 3);
          do
          {
            DSP_Dictionariable::SingleKvp<std::string>::value((std::string *)&__v, *v121 + 24);
            DSP_Dictionariable::SingleKvp<std::string>::value(&cf, v123);
            char end_high = HIBYTE(__v.__end_);
            if (SHIBYTE(__v.__end_) >= 0) {
              std::__split_buffer<std::string>::pointer v125 = (std::__split_buffer<std::string>::pointer)HIBYTE(__v.__end_);
            }
            else {
              std::__split_buffer<std::string>::pointer v125 = __v.__begin_;
            }
            std::string::size_type v126 = HIBYTE(cf.__r_.__value_.__r.__words[2]);
            int v127 = SHIBYTE(cf.__r_.__value_.__r.__words[2]);
            if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v126 = cf.__r_.__value_.__l.__size_;
            }
            int v34 = v161;
            if (v125 == (std::__split_buffer<std::string>::pointer)v126)
            {
              if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_std::string cf = &cf;
              }
              else {
                p_std::string cf = (std::string *)cf.__r_.__value_.__r.__words[0];
              }
              if ((HIBYTE(__v.__end_) & 0x80) != 0)
              {
                BOOL v135 = memcmp(__v.__first_, p_cf, (size_t)__v.__begin_) == 0;
                if ((v127 & 0x80000000) == 0) {
                  goto LABEL_266;
                }
              }
              else if (HIBYTE(__v.__end_))
              {
                uint64_t v128 = HIBYTE(__v.__end_) - 1;
                p_v = &__v;
                do
                {
                  int first_low = LOBYTE(p_v->__first_);
                  p_v = (std::__split_buffer<std::string> *)((char *)p_v + 1);
                  int v130 = first_low;
                  int v133 = p_cf->__r_.__value_.__s.__data_[0];
                  p_std::string cf = (std::string *)((char *)p_cf + 1);
                  int v132 = v133;
                  BOOL v26 = v128-- != 0;
                  char v134 = v26;
                  BOOL v135 = v130 == v132;
                }
                while (v130 == v132 && (v134 & 1) != 0);
                if ((SHIBYTE(cf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_266:
                  if (end_high < 0) {
                    goto LABEL_271;
                  }
                  goto LABEL_267;
                }
              }
              else
              {
                BOOL v135 = 1;
                if ((SHIBYTE(cf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_266;
                }
              }
            }
            else
            {
              BOOL v135 = 0;
              if ((SHIBYTE(cf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_266;
              }
            }
            operator delete(cf.__r_.__value_.__l.__data_);
            if (end_high < 0)
            {
LABEL_271:
              operator delete(__v.__first_);
              if (v135) {
                goto LABEL_280;
              }
              goto LABEL_272;
            }
LABEL_267:
            if (v135) {
              goto LABEL_280;
            }
LABEL_272:
            v121 += 2;
          }
          while (v121 != v122);
        }
        int v34 = v161;
        if (v120) {
          std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((uint64_t)&v176, &v184);
        }
LABEL_280:
        if (*((void *)&v184 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v184 + 1));
        }
        long long v62 = v154;
        long long v60 = v152;
        mach_port_t v61 = v153;
      }
      HALS_ObjectMap::ReleaseObject(v62, (HALS_Object *)p_cf);
      v61 += 6;
    }
    while (v61 != v60);
  }
  if (v34) {
    operator delete(v34);
  }
  BOOL v136 = v181;
  for (uint64_t i = v182; v136 != i; ++v136)
  {
    std::to_string(&cf, *v136);
    std::vector<std::string>::pointer end = v173.__end_;
    if (v173.__end_ >= v173.__end_cap_.__value_)
    {
      unint64_t v140 = 0xAAAAAAAAAAAAAAABLL * (((char *)v173.__end_ - (char *)v173.__begin_) >> 3);
      unint64_t v141 = v140 + 1;
      if (v140 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v173.__end_cap_.__value_ - (char *)v173.__begin_) >> 3) > v141) {
        unint64_t v141 = 0x5555555555555556 * (((char *)v173.__end_cap_.__value_ - (char *)v173.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v173.__end_cap_.__value_ - (char *)v173.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v142 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v142 = v141;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v173.__end_cap_;
      if (v142) {
        unint64_t v142 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v142);
      }
      else {
        uint64_t v143 = 0;
      }
      int v144 = (std::string *)(v142 + 24 * v140);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)v142;
      __v.__begin_ = v144;
      __v.__end_cap_.__value_ = (std::string *)(v142 + 24 * v143);
      long long v145 = *(_OWORD *)&cf.__r_.__value_.__l.__data_;
      v144->__r_.__value_.__r.__words[2] = cf.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v144->__r_.__value_.__l.__data_ = v145;
      memset(&cf, 0, sizeof(cf));
      __v.__end_ = v144 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v173, &__v);
      int v146 = v173.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v173.__end_ = v146;
      if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(cf.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v139 = *(_OWORD *)&cf.__r_.__value_.__l.__data_;
      v173.__end_->__r_.__value_.__r.__words[2] = cf.__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v139;
      v173.__end_ = end + 1;
    }
  }
  if ((*v150 & 4) != 0)
  {
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v166[0]);
    v166[0] = 0;
    v166[1] = 0;
    std::string v165 = v166;
    std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v149, 1u, 1);
  }
  DSP_Host_Types::ConfigurationChangeRequest::ConfigurationChangeRequest(a1, (const DSP_Host_Types::ConfigurationChangeRequest *)v162);
  HALS_DSPRequest::~HALS_DSPRequest((HALS_DSPRequest *)v162);
}

void sub_1BAE8C634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, HALS_ObjectMap *a18, uint64_t a19, uint64_t a20,DSP_Dictionariable::DictionariableKvp *a21,uint64_t a22,uint64_t a23,uint64_t a24,DSP_Dictionariable::DictionariableKvp *a25,DSP_Host_Types::AudioChannelConfiguration *a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v31 = *(void *)(v29 - 224);
  if (v31) {
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v31);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)STACK[0x398]);
  HALS_DSPRequest::~HALS_DSPRequest((HALS_DSPRequest *)&a29);
  _Unwind_Resume(a1);
}

DSP_Host_Types::NegotiateRequest *DSP_Host_Types::NegotiateRequest::NegotiateRequest(DSP_Host_Types::NegotiateRequest *this, const DSP_Host_Types::ConfigurationChangeRequest *a2)
{
  uint64_t v4 = DSP_Host_Types::ConfigurationChangeRequest::ConfigurationChangeRequest(this);
  *(void *)uint64_t v4 = &unk_1F147EED0;
  DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::operator=((uint64_t)v4, (uint64_t)a2);
  return this;
}

void sub_1BAE8CD8C(_Unwind_Exception *a1)
{
  DSP_Host_Types::ConfigurationChangeRequest::~ConfigurationChangeRequest(v1);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::operator=(uint64_t a1, uint64_t a2)
{
  std::__optional_storage_base<applesauce::CF::StringRef,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<applesauce::CF::StringRef,false> const&>(a1 + 8, *(CFTypeRef *)(a2 + 8), *(unsigned char *)(a2 + 16));
  CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)a2 + 24))(a2, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v5, cf);
  if (cf) {
    CFRelease(cf);
  }
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)a1 + 32))(a1, &v5);
  if (v5) {
    CFRelease(v5);
  }
  return a1;
}

void sub_1BAE8CE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void DSP_Host_Types::ConfigurationChangeRequest::~ConfigurationChangeRequest(DSP_Host_Types::ConfigurationChangeRequest *this)
{
  *(void *)this = &unk_1F14867D0;
  uint64_t v2 = (DSP_Host_Types::ConfigurationChangeRequest *)((char *)this + 24);
  uint64_t v3 = (void **)((char *)this + 656);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::ConfigurationChangeRequest *)((char *)this + 72));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::ConfigurationChangeRequest *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  *(void *)this = &unk_1F1486820;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

{
  DSP_Dictionariable::DictionariableKvp *v2;
  void **v3;

  *(void *)this = &unk_1F14867D0;
  uint64_t v2 = (DSP_Host_Types::ConfigurationChangeRequest *)((char *)this + 24);
  uint64_t v3 = (void **)((char *)this + 656);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::ConfigurationChangeRequest *)((char *)this + 72));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::ConfigurationChangeRequest *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  *(void *)this = &unk_1F1486820;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

{
  DSP_Dictionariable::DictionariableKvp *v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1F14867D0;
  uint64_t v2 = (DSP_Host_Types::ConfigurationChangeRequest *)((char *)this + 24);
  uint64_t v3 = (void **)((char *)this + 656);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::ConfigurationChangeRequest *)((char *)this + 72));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::ConfigurationChangeRequest *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  *(void *)this = &unk_1F1486820;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);

  JUMPOUT(0x1C1859840);
}

void std::__optional_storage_base<applesauce::CF::StringRef,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<applesauce::CF::StringRef,false> const&>(uint64_t a1, CFTypeRef cf, unsigned __int8 a3)
{
  if (*(unsigned __int8 *)(a1 + 8) == a3)
  {
    if (*(unsigned char *)(a1 + 8))
    {
      uint64_t v3 = *(const void **)a1;
      *(void *)a1 = cf;
      if (cf) {
        CFRetain(cf);
      }
      if (v3) {
        CFRelease(v3);
      }
    }
  }
  else if (*(unsigned char *)(a1 + 8))
  {
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::reset[abi:ne180100](a1);
  }
  else
  {
    *((unsigned char *)std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>((void *)a1, cf)+ 8) = 1;
  }
}

DSP_Host_Types::ConfigurationChangeRequest *DSP_Host_Types::ConfigurationChangeRequest::ConfigurationChangeRequest(DSP_Host_Types::ConfigurationChangeRequest *this, const DSP_Host_Types::ConfigurationChangeRequest *a2)
{
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 16) = 0;
  *(void *)this = &unk_1F14867D0;
  std::string::basic_string[abi:ne180100]<0>(__p, "is activation");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)this + 3, (uint64_t)__p);
  *((void *)this + 3) = &unk_1F1486878;
  *((_WORD *)this + 20) = 0;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "INTERNAL_is_simulated");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)this + 6, (uint64_t)__p);
  *((void *)this + 6) = &unk_1F1486878;
  *((_WORD *)this + 32) = 0;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  DSP_Host_Types::IOContextDescription::IOContextDescription((DSP_Host_Types::ConfigurationChangeRequest *)((char *)this + 72), "io context description");
  *((void *)this + 84) = 0;
  *((_OWORD *)this + 41) = 0u;
  DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::operator=((uint64_t)this, (uint64_t)a2);
  return this;
}

void sub_1BAE8D19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  DSP_Host_Types::IOContextDescription::~IOContextDescription(v19);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v18);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v17);
  *uint64_t v15 = &unk_1F1486820;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void HALS_IOContextHostedDSP::DSPStreamInstance::MaybeConfigureHALBypass(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (HAL_DSP_IOCallbacks *)(a1 + 384);
  CFTypeRef v5 = operator new(0x158uLL);
  v5[1] = 0;
  std::runtime_error v5[2] = 0;
  void *v5 = &unk_1F147E8B0;
  DSP_HAL_BypassCallbacks::DSP_HAL_BypassCallbacks((DSP_HAL_BypassCallbacks *)(v5 + 3), v4);
  *(void *)&long long v7 = v6;
  *((void *)&v7 + 1) = v5;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 376);
  *(_OWORD *)(a1 + 368) = v7;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    uint64_t v6 = *(void *)(a1 + 368);
  }
  char v9 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, a2);
  if ((v9 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
    uint64_t v10 = *v13;
    if (*(void *)v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      unsigned int v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      LODWORD(v13) = 67109634;
      HIDWORD(v13) = v12;
      *(_WORD *)unsigned int v14 = 2080;
      *(void *)&_OWORD v14[2] = "HALS_IOContextHostedDSP.cpp";
      __int16 v15 = 1024;
      int v16 = 299;
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] Unable to use HAL bypass processing with this format.", (uint8_t *)&v13, 0x18u);
    }
  }
}

void sub_1BAE8D3BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<DSP_HAL_BypassCallbacks>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<DSP_HAL_BypassCallbacks>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147E8B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<DSP_HAL_BypassCallbacks>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147E8B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

DSP_Host_Types::AdaptRequest *DSP_Host_Types::AdaptRequest::AdaptRequest(DSP_Host_Types::AdaptRequest *this, const DSP_Host_Types::NegotiateRequest *a2)
{
  uint64_t v4 = DSP_Host_Types::ConfigurationChangeRequest::ConfigurationChangeRequest(this);
  *(void *)uint64_t v4 = &unk_1F1483C98;
  DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::operator=((uint64_t)v4, (uint64_t)a2);
  return this;
}

void sub_1BAE8D4C0(_Unwind_Exception *a1)
{
  DSP_Host_Types::ConfigurationChangeRequest::~ConfigurationChangeRequest(v1);
  _Unwind_Resume(a1);
}

BOOL HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(HALS_IOContextHostedDSP::DSPStreamInstance *this, unsigned int a2, int a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (const void *)*((void *)this + 249);
  if (a3)
  {
    if (v4) {
      goto LABEL_3;
    }
    uint64_t v10 = (char *)operator new(0xE0uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)uint64_t v10 = &unk_1F147E900;
    uint64_t v4 = v10 + 24;
    *((void *)v10 + 3) = &unk_1F147E950;
    *((void *)v10 + 4) = this;
    *((void *)v10 + 5) = 0;
    *((void *)v10 + 6) = 850045863;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *((void *)v10 + 13) = 0;
    *((void *)v10 + 14) = 1018212795;
    *(_OWORD *)(v10 + 120) = 0u;
    *(_OWORD *)(v10 + 136) = 0u;
    *((void *)v10 + 21) = 0;
    *((_DWORD *)v10 + 44) = 0;
    *((void *)v10 + 19) = 0;
    *((void *)v10 + 20) = &unk_1F147E970;
    *((void *)v10 + 26) = 0;
    *((_DWORD *)v10 + 54) = 0;
    unsigned int v11 = operator new(0x20uLL);
    void *v11 = &unk_1F147E9B0;
    v11[1] = HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::AdaptNewSize;
    v11[2] = 0;
    v11[3] = v10 + 24;
    uint64_t v32 = v11;
    std::function<void ()>::operator=((void *)v10 + 23, (uint64_t)&v31);
    std::__function::__value_func<void ()>::~__value_func[abi:ne180100](&v31);
    *((void *)this + 249) = v10 + 24;
    mach_port_t v12 = (std::__shared_weak_count *)*((void *)this + 250);
    *((void *)this + 250) = v10;
    if (!v12
      || (std::__shared_weak_count::__release_shared[abi:ne180100](v12),
          (uint64_t v4 = (const void *)*((void *)this + 249)) != 0))
    {
LABEL_3:
    }
    else
    {
      CFTypeRef v5 = 0;
    }
    HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::SetCurrentSize((uint64_t)v5, a2);
    return 0;
  }
  if (!v4) {
    return 0;
  }
  if (atomic_load(v6 + 5)) {
    return 1;
  }
  BOOL v13 = v6;
  unsigned int v14 = v6 + 4;
  unsigned int v15 = atomic_load(v6 + 4);
  if (v15 != a2)
  {
    int v16 = 0;
    atomic_compare_exchange_strong((atomic_uint *volatile)v6 + 5, (unsigned int *)&v16, 1u);
    if (!v16)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v31, "com.apple.coreaudio", "AMCP");
      uint64_t v17 = *(caulk::concurrent::messenger **)(v31.__r_.__value_.__r.__words[0] + 8);
      uint64_t v18 = pthread_self();
      mach_port_t v19 = pthread_mach_thread_np(v18);
      uint64_t v20 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
      *(_DWORD *)(v20 + 16) = 0;
      *(unsigned char *)(v20 + 20) = 2;
      *(_DWORD *)(v20 + 24) = v19;
      *(void *)(v20 + 32) = "HALS_IOContextHostedDSP.cpp";
      *(_DWORD *)(v20 + 40) = 491;
      *(void *)uint64_t v20 = &unk_1F147E748;
      *(void *)(v20 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v17, (caulk::concurrent::message *)v20);
      if (v31.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v31.__r_.__value_.__l.__size_);
      }
      v27[0] = 0;
      v27[1] = 0;
      HALS_System::GetInstance(&v28, 0, v27);
      uint64_t v21 = *(void *)(v28 + 1504);
      if (v21)
      {
        if (!*(void *)(v21 + 112))
        {
          std::mutex::lock((std::mutex *)(v21 + 48));
          uint64_t v22 = operator new(0x28uLL);
          v22[1] = 0;
          long long v22[2] = 0;
          *uint64_t v22 = &unk_1F1487710;
          v22[3] = &unk_1F1487760;
          _DWORD v22[4] = 0;
          std::string::basic_string[abi:ne180100]<0>(&__p, "DSP Concurrent Message Queue");
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v31, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else {
            std::string v31 = __p;
          }
          LOBYTE(v32) = 1;
          uint64_t v33 = 0x10000003DLL;
          int v34 = 2;
          char v35 = 1;
          char v36 = 0;
          char v37 = 0;
          operator new();
        }
        unint64_t v23 = *(void *)(v21 + 120);
        v24.n128_u64[0] = *(void *)(v21 + 112);
        v24.n128_u64[1] = v23;
        __n128 v26 = v24;
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        __n128 v26 = 0u;
      }
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      if (v26.n128_u64[0])
      {
        v13[48] = a2;
        (*(void (**)(unint64_t, unsigned int *, __n128))(*(void *)v26.n128_u64[0] + 16))(v26.n128_u64[0], v13 + 34, v26);
      }
      if (v26.n128_u64[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v26.n128_u64[1]);
      }
    }
  }
  unsigned int v25 = atomic_load(v14);
  return v25 != a2;
}

void sub_1BAE8DA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v29, 0);
  std::__shared_weak_count::~__shared_weak_count(v28);
  operator delete(v31);
  std::mutex::unlock(v27);
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

void HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::SetCurrentSize(uint64_t a1, unsigned int a2)
{
  v7.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  int v4 = 1;
  v7.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 20), (unsigned int *)&v4, 3u);
  while (atomic_load((unsigned int *)(a1 + 20)))
    std::condition_variable::wait((std::condition_variable *)(a1 + 88), &v7);
  atomic_store(a2, (unsigned int *)(a1 + 16));
  atomic_store(0, (unsigned int *)(a1 + 20));
  if (v7.__owns_) {
    std::mutex::unlock(v7.__m_);
  }
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::RT_MaybeEnqueueAdapt(unsigned int)::{lambda(std::tuple<unsigned int,char const*,int> &)#1},std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v8;
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    LODWORD(v8) = 67109634;
    HIDWORD(v8) = v4;
    *(_WORD *)char v9 = 2080;
    *(void *)&v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d [hal_dsp] Enqueing buffer size change for hosted DSP.", (uint8_t *)&v8, 0x18u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAE8DD08(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::RT_MaybeEnqueueAdapt(unsigned int)::{lambda(std::tuple<unsigned int,char const*,int> &)#1},std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::AdaptNewSize(uint64_t a1, unsigned int a2)
{
  void v25[3] = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  int v4 = **(NSObject ***)buf;
  if (*(void *)v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v17);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = pthread_self();
    mach_port_t v9 = pthread_mach_thread_np(v8);
    *(_DWORD *)std::string buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = v9;
    *(_WORD *)uint64_t v17 = 2080;
    *(void *)&v17[2] = "HALS_IOContextHostedDSP.cpp";
    __int16 v18 = 1024;
    int v19 = 505;
    __int16 v20 = 1024;
    unsigned int v21 = a2;
    _os_log_debug_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] Adapting a new buffer size %d.", buf, 0x1Eu);
  }
  int v5 = 1;
  atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 20), (unsigned int *)&v5, 2u);
  if (v5 == 1)
  {
    std::mutex::lock((std::mutex *)(a1 + 24));
    unsigned int v6 = atomic_load((unsigned int *)(a1 + 16));
    if (a2 && v6 != a2)
    {
      DSP_Host_Types::AdaptRequest::AdaptRequest((DSP_Host_Types::AdaptRequest *)buf, (const DSP_Host_Types::AdaptRequest *)(*(void *)(a1 + 8) + 1312));
      v23[92] = a2;
      char v24 = 1;
      (*(void (**)(void ***__return_ptr))(**(void **)(*(void *)(a1 + 8) + 136) + 32))(&v10);
      if (!v15)
      {
        uint64_t v7 = *(void *)(a1 + 8);
        *(_DWORD *)(v7 + 1752) = a2;
        *(unsigned char *)(v7 + 1756) = 1;
        atomic_store(a2, (unsigned int *)(a1 + 16));
      }
      __int16 v10 = (void **)&unk_1F14874D8;
      if (__p)
      {
        unsigned int v14 = __p;
        operator delete(__p);
      }
      DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v12);
      __int16 v10 = (void **)&unk_1F1487518;
      std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v11);
      *(void *)std::string buf = &unk_1F14867D0;
      __int16 v10 = (void **)v25;
      std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v10);
      DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)v23);
      DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v22);
      DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v20);
      *(void *)std::string buf = &unk_1F1486820;
      std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v17);
    }
    std::mutex::unlock((std::mutex *)(a1 + 24));
  }
  std::condition_variable::notify_one((std::condition_variable *)(a1 + 88));
  atomic_store(0, (unsigned int *)(a1 + 20));
}

void sub_1BAE8DFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DSP_Host_Types::AdaptRequest::~AdaptRequest((DSP_Host_Types::AdaptRequest *)va);
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

DSP_Host_Types::AdaptRequest *DSP_Host_Types::AdaptRequest::AdaptRequest(DSP_Host_Types::AdaptRequest *this, const DSP_Host_Types::AdaptRequest *a2)
{
  int v4 = DSP_Host_Types::ConfigurationChangeRequest::ConfigurationChangeRequest(this);
  *(void *)int v4 = &unk_1F1483C98;
  DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::operator=((uint64_t)v4, (uint64_t)a2);
  return this;
}

void sub_1BAE8E064(_Unwind_Exception *a1)
{
  DSP_Host_Types::ConfigurationChangeRequest::~ConfigurationChangeRequest(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::*)(unsigned int),HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::*)(unsigned int),HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler*,std::placeholders::__ph<1> const&>>,void ()(unsigned int)>::target_type()
{
}

uint64_t std::__function::__func<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::*)(unsigned int),HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::*)(unsigned int),HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler*,std::placeholders::__ph<1> const&>>,void ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__16__bindIMZN23HALS_IOContextHostedDSP17DSPStreamInstance25RT_HandleBufferSizeChangeEjbE19BufferChangeHandlerFvjEJPS3_RKNS_12placeholders4__phILi1EEEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::*)(unsigned int),HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::*)(unsigned int),HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler*,std::placeholders::__ph<1> const&>>,void ()(unsigned int)>::operator()(void *a1, unsigned int *a2)
{
  uint64_t v2 = a1[2];
  os_log_type_t v3 = (uint64_t (*)(void *, void))a1[1];
  int v4 = (void *)(a1[3] + (v2 >> 1));
  if (v2) {
    os_log_type_t v3 = *(uint64_t (**)(void *, void))(*v4 + v3);
  }
  return v3(v4, *a2);
}

__n128 std::__function::__func<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::*)(unsigned int),HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::*)(unsigned int),HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler*,std::placeholders::__ph<1> const&>>,void ()(unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F147E9B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::*)(unsigned int),HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::*)(unsigned int),HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler*,std::placeholders::__ph<1> const&>>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F147E9B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::*)(unsigned int),HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::*)(unsigned int),HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler*,std::placeholders::__ph<1> const&>>,void ()(unsigned int)>::~__func()
{
}

uint64_t HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::simple_message_playload::perform(uint64_t a1)
{
  return std::function<void ()>::operator()(*(void *)(a1 + 48), *(_DWORD *)(a1 + 56));
}

void HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::simple_message_playload::~simple_message_playload(caulk::concurrent::message *a1)
{
  *(void *)a1 = &unk_1F147E970;
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((void *)a1 + 3);
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F147E970;
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((void *)a1 + 3);

  caulk::concurrent::message::~message(a1);
}

void HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::~BufferChangeHandler(uint64_t a1)
{
  HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::~BufferChangeHandler(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::~BufferChangeHandler(uint64_t a1)
{
  *(void *)a1 = &unk_1F147E950;
  HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::SetCurrentSize(a1, 0);
  *(void *)(a1 + 136) = &unk_1F147E970;
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((void *)(a1 + 160));
  caulk::concurrent::message::~message((caulk::concurrent::message *)(a1 + 136));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

uint64_t std::__shared_ptr_emplace<HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler,std::allocator<HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler,std::allocator<HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147E900;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler,std::allocator<HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147E900;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOContextHostedDSP::DSPStreamInstance::DoIO(unsigned int,AudioBufferList *,AudioBufferList *,AudioTimeStamp const&)::$_0,std::tuple<unsigned int,char const*,int>>(caulk::concurrent::messenger *a1, unsigned char *a2, long long *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)uint64_t v6 = &unk_1F147EAB8;
  *(void *)(v6 + 8) = 0;
  *(unsigned char *)(v6 + 20) = *a2;
  long long v7 = *a3;
  *(void *)(v6 + 40) = *((void *)a3 + 2);
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)uint64_t v6 = &unk_1F147EA60;

  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContextHostedDSP::DSPStreamInstance::DoIO(unsigned int,AudioBufferList *,AudioBufferList *,AudioTimeStamp const&)::$_0,std::tuple<unsigned int,char const*,int>>::perform(caulk::concurrent::message *a1)
{
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90]
                                                                                           + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void caulk::concurrent::details::message_call<HALS_IOContextHostedDSP::DSPStreamInstance::DoIO(unsigned int,AudioBufferList *,AudioBufferList *,AudioTimeStamp const&)::$_0,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v7, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v7;
  if (*(void *)v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v8);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    LODWORD(v7) = 67109634;
    HIDWORD(v7) = v4;
    *(_WORD *)uint64_t v8 = 2080;
    *(void *)&v8[2] = v5;
    __int16 v9 = 1024;
    int v10 = v6;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d [hal_dsp] Caught an error while calling hosted DSP.", (uint8_t *)&v7, 0x18u);
  }
}

void caulk::concurrent::details::rt_message_call<HALS_IOContextHostedDSP::DSPStreamInstance::DoIO(unsigned int,AudioBufferList *,AudioBufferList *,AudioTimeStamp const&)::$_0,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void caulk::concurrent::details::message_call<HALS_IOContextHostedDSP::DSPStreamInstance::DoIO(unsigned int,AudioBufferList *,AudioBufferList *,AudioTimeStamp const&)::$_0,std::tuple<unsigned int,char const*,int>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALB_RealtimeDuration_Collection>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        }
        v3 -= 16;
      }
      while (v3 != v1);
      int v4 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<HALB_RealtimeDuration_Collection>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147EAE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALB_RealtimeDuration_Collection>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147EAE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t HALS_IOContextHostedDSP::HostedDSPList::find(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (result != a2)
  {
    while (*(_DWORD *)result != a3 || *(void *)(result + 4) != __PAIR64__(a4, HIDWORD(a3)))
    {
      result += 24;
      if (result == a2) {
        return a2;
      }
    }
  }
  return result;
}

void HALS_IOContextHostedDSP::DSPStreamInstance::HALDSPBypass::~HALDSPBypass(HALS_IOContextHostedDSP::DSPStreamInstance::HALDSPBypass *this)
{
  uint64_t v2 = (void *)((char *)this + 16);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((void *)this + 18);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((void *)this + 14);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((void *)this + 10);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100]((void *)this + 6);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100](v2);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void HAL_DSP_IOCallbacks::~HAL_DSP_IOCallbacks(HAL_DSP_IOCallbacks *this)
{
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((void *)this + 16);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((void *)this + 12);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((void *)this + 8);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100]((void *)this + 4);

  std::__function::__value_func<void ()>::~__value_func[abi:ne180100](this);
}

void DSP_Host_Types::CreateProcessorConfiguration::~CreateProcessorConfiguration(DSP_Host_Types::CreateProcessorConfiguration *this)
{
  *(void *)this = &unk_1F147ED68;
  uint64_t v2 = (DSP_Host_Types::CreateProcessorConfiguration *)((char *)this + 72);
  *((void *)this + 9) = &unk_1F147F0A0;
  if (*((unsigned char *)this + 112) && *((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  *((void *)this + 3) = &unk_1F147F0A0;
  if (*((unsigned char *)this + 64) && *((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::CreateProcessorConfiguration *)((char *)this + 24));
  *(void *)this = &unk_1F147F280;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

{
  DSP_Dictionariable::DictionariableKvp *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F147ED68;
  uint64_t v2 = (DSP_Host_Types::CreateProcessorConfiguration *)((char *)this + 72);
  *((void *)this + 9) = &unk_1F147F0A0;
  if (*((unsigned char *)this + 112) && *((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  *((void *)this + 3) = &unk_1F147F0A0;
  if (*((unsigned char *)this + 64) && *((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::CreateProcessorConfiguration *)((char *)this + 24));
  *(void *)this = &unk_1F147F280;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);

  JUMPOUT(0x1C1859840);
}

void HALS_IOContextHostedDSP::HostedDSPList::remove_at(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = HALS_IOContextHostedDSP::HostedDSPList::find(*a1, v4, a2, a3);
  if (v4 != v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(v5 + 16);
    if (v7)
    {
      uint64_t v8 = a1[3];
      uint64_t v10 = *(void *)(v7 + 352);
      __int16 v9 = *(std::__shared_weak_count **)(v7 + 360);
      if (v9)
      {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v11 = *(uint64_t **)v8;
        unsigned int v14 = *(uint64_t **)(v8 + 8);
        uint64_t v12 = (uint64_t **)(v8 + 8);
        BOOL v13 = v14;
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v11 = *(uint64_t **)v8;
        uint64_t v15 = *(uint64_t **)(v8 + 8);
        uint64_t v12 = (uint64_t **)(v8 + 8);
        BOOL v13 = v15;
      }
      if (v11 != v13)
      {
        while (1)
        {
          uint64_t v17 = *v11;
          int v16 = (std::__shared_weak_count *)v11[1];
          if (v16)
          {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
          if (v17 == v10) {
            break;
          }
          v11 += 2;
          if (v11 == v13)
          {
            uint64_t v11 = v13;
            break;
          }
        }
      }
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      __int16 v18 = *v12;
      if (v11 != *v12)
      {
        int v19 = v11 + 2;
        if (v11 + 2 != v18)
        {
          do
          {
            uint64_t v11 = v19;
            long long v20 = *(_OWORD *)v19;
            uint64_t *v19 = 0;
            v19[1] = 0;
            unsigned int v21 = (std::__shared_weak_count *)*(v19 - 1);
            *((_OWORD *)v19 - 1) = v20;
            if (v21) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v21);
            }
            int v19 = v11 + 2;
          }
          while (v11 + 2 != v18);
          __int16 v18 = *v12;
        }
        while (v18 != v11)
        {
          uint64_t v22 = (std::__shared_weak_count *)*(v18 - 1);
          if (v22) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          }
          v18 -= 2;
        }
        *uint64_t v12 = v11;
      }
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    uint64_t v23 = v6 + 24;
    uint64_t v24 = a1[1];
    if (v6 + 24 != v24)
    {
      uint64_t v25 = v6;
      do
      {
        uint64_t v26 = *(void *)(v25 + 24);
        v25 += 24;
        *(void *)uint64_t v6 = v26;
        *(_DWORD *)(v6 + 8) = *(_DWORD *)(v6 + 32);
        uint64_t v27 = *(void *)(v6 + 40);
        *(void *)(v6 + 40) = 0;
        std::unique_ptr<HALS_IOContextHostedDSP::DSPStreamInstance>::reset[abi:ne180100]((uint64_t *)(v6 + 16), v27);
        uint64_t v28 = v6 + 48;
        uint64_t v6 = v25;
      }
      while (v28 != v24);
      uint64_t v23 = a1[1];
      uint64_t v6 = v25;
    }
    if (v23 != v6)
    {
      do
      {
        uint64_t v29 = v23 - 24;
        std::unique_ptr<HALS_IOContextHostedDSP::DSPStreamInstance>::reset[abi:ne180100]((uint64_t *)(v23 - 8), 0);
        uint64_t v23 = v29;
      }
      while (v29 != v6);
    }
    a1[1] = v6;
  }
}

uint64_t HALS_IOContextHostedDSP::Initialize(HALS_IOContextHostedDSP *this, HALS_IOContextDescription *a2, int a3, int a4)
{
  v13[0] = *((_DWORD *)a2 + 4);
  int v8 = v13[0];
  v13[1] = a3;
  v13[2] = a4;
  unsigned int v14 = this;
  *(void *)&long long v16 = caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_0>;
  *((void *)&v16 + 1) = v13;
  VisitableVector<HALS_IOStreamInfo>::apply<>(*((void *)a2 + 7), *((void *)a2 + 8), &v16);
  v11[0] = v8;
  v11[1] = a3;
  v11[2] = a4;
  uint64_t v12 = this;
  v10[0] = &unk_1F14809E0;
  v10[1] = a2;
  v15[0] = caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_1>;
  v15[1] = v11;
  *(void *)&long long v16 = caulk::function_ref<int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::functor_invoker<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription&,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}>;
  *((void *)&v16 + 1) = v15;
  return VisitableVector<HALS_IOStackDescription>::do_apply<std::vector<HALS_IOStackDescription>,VisitableVector<HALS_IOStackDescription>::ItemWithIndex,HALS_IOContextDescription::ActiveOutputsOnly>(*((void *)a2 + 10), *((void *)a2 + 11), (uint64_t (**)(void, void *))&v16, (uint64_t)v10);
}

uint64_t caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_1>(unsigned int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return 0;
}

void HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_2::operator()(unsigned int *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a4 + 108))
  {
    uint64_t v8 = *(void *)(a4 + 112);
    if (*(void *)(a4 + 120) == v8 || v8 == 0)
    {
      unsigned int v14 = *a1;
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
      uint64_t v10 = *(NSObject **)buf.__r_.__value_.__l.__data_;
      if (buf.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = pthread_self();
        mach_port_t v12 = pthread_mach_thread_np(v11);
        unsigned int v13 = *a1;
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v12;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_IOContextHostedDSP.cpp";
        WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(buf.__r_.__value_.__r.__words[2]) = 898;
        __int16 v46 = 1024;
        unsigned int v47 = v13;
        _os_log_debug_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] Creating DSP instance with no assigned engine (Device ID: %u).", (uint8_t *)&buf, 0x1Eu);
      }
    }
    else
    {
      unsigned int v14 = *(_DWORD *)(v8 + 8);
    }
    unsigned int v15 = *(_DWORD *)(a4 + 12);
    int v16 = a1[1];
    unsigned int v17 = a1[2];
    __int16 v18 = *(_DWORD **)a2;
    int v19 = *(_DWORD **)(a2 + 8);
    if (*(_DWORD **)a2 != v19)
    {
      while (*v18 != a3 || v18[1] != v14 || v18[2] != v15)
      {
        v18 += 6;
        if (v18 == v19) {
          goto LABEL_18;
        }
      }
    }
    if (v19 == v18)
    {
LABEL_18:
      std::string::basic_string[abi:ne180100]<0>(&v42, "");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      v38[0] = 0;
      v38[1] = 0;
      HALS_System::GetInstance(&buf, 0, v38);
      long long v20 = (HALS_ObjectMap *)HALS_System::CopyClientByObjectID((HALS_System *)buf.__r_.__value_.__l.__data_, v16);
      if (buf.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
      }
      if (v20)
      {
        HALS_Client::GetUniqueDebugString((HALS_Client *)&buf, (uint64_t)v20);
        std::string::operator=(&v42, &buf);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
      }
      std::to_string(&buf, v17);
      std::to_string(&v44, v14);
      std::to_string(&v49, v15);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = buf.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v36, size + 1);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v22 = &v36;
      }
      else {
        uint64_t v22 = (std::string *)v36.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        memmove(v22, p_buf, size);
      }
      *(_WORD *)((char *)&v22->__r_.__value_.__l.__data_ + size) = 46;
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v24 = &v44;
      }
      else {
        uint64_t v24 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v25 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v25 = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v26 = std::string::append(&v36, (const std::string::value_type *)v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v37.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      uint64_t v28 = std::string::append(&v37, ".", 1uLL);
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v30 = &v49;
      }
      else {
        uint64_t v30 = (std::string *)v49.__r_.__value_.__r.__words[0];
      }
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v31 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v31 = v49.__r_.__value_.__l.__size_;
      }
      uint64_t v32 = std::string::append(&v48, (const std::string::value_type *)v30, v31);
      int v34 = (void *)v32->__r_.__value_.__r.__words[0];
      v43[0] = v32->__r_.__value_.__l.__size_;
      *(void *)((char *)v43 + 7) = *(std::string::size_type *)((char *)&v32->__r_.__value_.__r.__words[1] + 7);
      char v35 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      if (v41 < 0) {
        operator delete(__p);
      }
      std::string __p = v34;
      *(void *)unint64_t v40 = v43[0];
      *(void *)&v40[7] = *(void *)((char *)v43 + 7);
      char v41 = v35;
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      HALS_ObjectMap::ReleaseObject(v20, v33);
      LODWORD(v44.__r_.__value_.__l.__data_) = a3;
      HIDWORD(v44.__r_.__value_.__r.__words[0]) = v14;
      LODWORD(v44.__r_.__value_.__r.__words[1]) = v15;
      operator new();
    }
  }
}

void sub_1BAE8FEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,std::__shared_weak_count *a22,int a23,__int16 a24,char a25,char a26,void *a27,std::__shared_weak_count *a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,CFTypeRef cf,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a2)
  {

    long long v60 = *(std::__shared_weak_count **)(v57 + 72);
    if (v60) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v60);
    }

    mach_port_t v61 = *(std::__shared_weak_count **)(v57 + 40);
    if (v61) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v61);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
    std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v57);
    operator delete(v62);

    if (a28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a28);
    }
    if (a22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a22);
    }
    std::__function::__value_func<void ()(AudioObjectPropertyAddress const&)>::~__value_func[abi:ne180100](a12);
    std::__function::__value_func<void ()(DSP_Host_Types::MutationRequestConfiguration const&)>::~__value_func[abi:ne180100](a13);
    std::__function::__value_func<void ()(AudioObjectPropertyAddress const&)>::~__value_func[abi:ne180100]((void *)(v58 - 176));
    if (a41 < 0) {
      operator delete(__p);
    }
    if (a47 < 0) {
      operator delete(a42);
    }
    mach_port_t v63 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v63);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)(v58 - 256), "com.apple.coreaudio", "AMCP");
    uint64_t v64 = *(std::__shared_weak_count **)(v58 - 248);
    float v65 = **(NSObject ***)(v58 - 256);
    if (v64) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v64);
    }
    if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
    {
      float v66 = pthread_self();
      mach_port_t v67 = pthread_mach_thread_np(v66);
      *(_DWORD *)(v58 - 256) = 67109634;
      *(_DWORD *)(v58 - 252) = v67;
      *(_WORD *)(v58 - 248) = 2080;
      *(_WORD *)(v58 - 238) = 1024;
      *(_DWORD *)(v58 - 236) = 907;
      _os_log_error_impl(&dword_1BAA78000, v65, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] Initialize/create encountered an unknown error.", (uint8_t *)(v58 - 256), 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAE8FBC8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_0>(unsigned int **a1, uint64_t *a2)
{
  return 0;
}

void HALS_IOContextHostedDSP::Remove(HALS_IOContextHostedDSP *this, HALS_IOContextDescription *a2, int a3, int a4, int a5, HALS_MutationChangeSynchronizer *a6, HALS_MutationChangeSynchronizer *a7)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v7 = (HALS_MutationChangeSynchronizer *)v8;
  memset(v8, 0, sizeof(v8));
  __int16 v9 = 0;
  uint64_t v10 = v11;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  if (a6) {
    uint64_t v7 = a6;
  }
  int v15 = a4;
  int v16 = a5;
  HALS_IOContextHostedDSP::Remove_Internal(this, a2, a3, v7);
  HALS_MutationChangeSynchronizer::~HALS_MutationChangeSynchronizer((HALS_MutationChangeSynchronizer *)v8);
}

void sub_1BAE904D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextHostedDSP *this, HALS_IOContextDescription *a2, int a3, HALS_MutationChangeSynchronizer *a4)
{
  uint64_t result = HALS_IOContextHostedDSP::Negotiate_Internal(this, (uint64_t *)a2, a3, (uint64_t)a4, 0);
  if (result != 1685286515)
  {
    HALS_IOContextDescription::HostedDSPDescription::ResetRequests((HALS_IOContextDescription *)((char *)a2 + 256));
    __int16 v9 = this;
    *(void *)&long long v11 = caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_0>;
    *((void *)&v11 + 1) = &v9;
    VisitableVector<HALS_IOStreamInfo>::apply<>(*((void *)a2 + 7), *((void *)a2 + 8), &v11);
    v7[1] = a2;
    uint64_t v8 = this;
    v7[0] = &unk_1F14809E0;
    v10[0] = caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_1>;
    v10[1] = &v8;
    *(void *)&long long v11 = caulk::function_ref<int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::functor_invoker<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription&,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}>;
    *((void *)&v11 + 1) = v10;
    return VisitableVector<HALS_IOStackDescription>::do_apply<std::vector<HALS_IOStackDescription>,VisitableVector<HALS_IOStackDescription>::ItemWithIndex,HALS_IOContextDescription::ActiveOutputsOnly>(*((void *)a2 + 10), *((void *)a2 + 11), (uint64_t (**)(void, void *))&v11, (uint64_t)v7);
  }
  return result;
}

uint64_t HALS_IOContextHostedDSP::Negotiate_Internal(unsigned char *a1, uint64_t *a2, int a3, uint64_t a4, char a5)
{
  v26[0] = a5 & 1;
  long long v27 = xmmword_1BAFF9690;
  v24[0] = a5 & 1;
  uint64_t v10 = 1685286515;
  long long v25 = xmmword_1BAFF96A0;
  int v15 = a1;
  int v16 = a2;
  uint64_t v17 = a4;
  char v18 = a5;
  char v20 = 0;
  __int16 v19 = 0;
  unsigned int v21 = v26;
  LODWORD(v22) = a3;
  uint64_t v23 = a1;
  uint64_t v28 = caulk::function_ref<int ()(unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_0>;
  long long v29 = &v15;
  *(void *)&long long v30 = caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_IOContextDescription::ApplyToInput(caulk::function_ref<int ()(unsigned int,HALS_IOStreamInfo&)>)::$_0>;
  *((void *)&v30 + 1) = &v28;
  VisitableVector<HALS_IOStreamInfo>::apply<>(a2[7], a2[8], &v30);
  if (!(DWORD1(v27) | HIDWORD(v27))) {
    HIDWORD(v27) = 1685286515;
  }
  int v15 = a1;
  int v16 = a2;
  uint64_t v17 = a4;
  char v18 = a5;
  char v20 = 0;
  __int16 v19 = 0;
  unsigned int v21 = v24;
  uint64_t v22 = a1;
  LODWORD(v23) = a3;
  uint64_t v28 = caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1>;
  long long v29 = &v15;
  *(void *)&long long v30 = _ZN5caulk12function_refIFiRN15VisitableVectorI23HALS_IOStackDescriptionE13ItemWithIndexEEE15functor_invokerIZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS0_IFijRS2_jjR17HALS_IOStreamInfoEEEDpRKT_EUlS5_E_EEiRKNS_7details15erased_callableIS6_EES5_;
  *((void *)&v30 + 1) = &v28;
  VisitableVector<HALS_IOStackDescription>::apply<>(a2[10], a2[11], &v30);
  if (!(DWORD1(v25) | HIDWORD(v25))) {
    HIDWORD(v25) = 1685286515;
  }
  char v11 = 0;
  uint64_t v12 = 0;
  int v15 = v26;
  int v16 = (uint64_t *)v24;
  do
  {
    char v13 = v11;
    if (*((_DWORD *)(&v15)[v12] + 4) != 1685286515 && (v10 == 1685286515 || !v10)) {
      uint64_t v10 = *((unsigned int *)(&v15)[v12] + 4);
    }
    char v11 = 1;
    uint64_t v12 = 1;
  }
  while ((v13 & 1) == 0);
  return v10;
}

uint64_t caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_1>(AMCP::Log::Scope_Registry *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(uint64_t ***)a1;
  *(unsigned char *)(a6 + 416) = 0;
  if (*(_DWORD *)(a6 + 108))
  {
    uint64_t v7 = *(void *)(a6 + 112);
    if (*(void *)(a6 + 120) != v7 && v7 != 0)
    {
      unsigned int v9 = *(_DWORD *)(v7 + 96);
      if (v9 != *(_DWORD *)(a6 + 12))
      {
        AMCP::Log::Scope_Registry::get(a1);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v14, "com.apple.coreaudio", "AMCP");
        char v11 = *v14;
        if (*(void *)v15) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v15);
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          uint64_t v12 = pthread_self();
          mach_port_t v13 = pthread_mach_thread_np(v12);
          LODWORD(v14) = 67109890;
          HIDWORD(v14) = v13;
          *(_WORD *)int v15 = 2080;
          *(void *)&void v15[2] = "HALS_IOContextHostedDSP.cpp";
          __int16 v16 = 1024;
          int v17 = 1400;
          __int16 v18 = 2080;
          __int16 v19 = "kDeviceStreamIndex == ioStreamInfo.mStreamIndex";
          _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Primary DSP engine and stream device indicies do not match!", (uint8_t *)&v14, 0x22u);
        }
        abort();
      }
      HALS_IOContextHostedDSP::HostedDSPList::remove_at(*v6, ((unint64_t)*(unsigned int *)(v7 + 8) << 32) | 0x6F757470, v9);
    }
  }
  return 0;
}

void sub_1BAE908B0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAE907CCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_0>(AMCP::Log::Scope_Registry *a1, uint64_t *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(uint64_t ***)a1;
  uint64_t v3 = *a2;
  *(unsigned char *)(v3 + 416) = 0;
  if (*(_DWORD *)(v3 + 108))
  {
    uint64_t v4 = *(void *)(v3 + 112);
    if (*(void *)(v3 + 120) != v4 && v4 != 0)
    {
      unsigned int v6 = *(_DWORD *)(v4 + 96);
      if (v6 != *(_DWORD *)(v3 + 12))
      {
        AMCP::Log::Scope_Registry::get(a1);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v11, "com.apple.coreaudio", "AMCP");
        uint64_t v8 = *v11;
        if (*(void *)v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v12);
        }
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          unsigned int v9 = pthread_self();
          mach_port_t v10 = pthread_mach_thread_np(v9);
          LODWORD(v11) = 67109890;
          HIDWORD(v11) = v10;
          *(_WORD *)uint64_t v12 = 2080;
          *(void *)&_OWORD v12[2] = "HALS_IOContextHostedDSP.cpp";
          __int16 v13 = 1024;
          int v14 = 1384;
          __int16 v15 = 2080;
          __int16 v16 = "kDeviceStreamIndex == item.m_item.mStreamIndex";
          _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Primary DSP engine and stream device indicies do not match!", (uint8_t *)&v11, 0x22u);
        }
        abort();
      }
      HALS_IOContextHostedDSP::HostedDSPList::remove_at(*v2, ((unint64_t)*(unsigned int *)(v4 + 8) << 32) | 0x696E7074, v6);
    }
  }
  return 0;
}

void sub_1BAE90A20(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAE9093CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *a1;
  uint64_t result = HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2::operator()(*a1, *(void *)(*a1 + 32), *(void **)(*a1 + 40), a6, *(_DWORD *)(*a1 + 48));
  *(_DWORD *)(*(void *)(v6 + 32) + 16) = result;
  return result;
}

uint64_t HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2::operator()(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = 1685286515;
  int v11 = *(_DWORD *)(a2 + 4);
  int NumberActiveStreams = HALS_IOContextDescription::GetNumberActiveStreams(*(HALS_IOContextDescription **)(a1 + 8), v11 == 1768845428);
  if (*(unsigned char *)a2) {
    BOOL v13 = NumberActiveStreams == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13) {
    return 1685286515;
  }
  uint64_t v14 = *(void *)(a4 + 112);
  if (*(void *)(a4 + 120) == v14 || v14 == 0) {
    return 1685286515;
  }
  int v17 = *(_DWORD *)(a4 + 108);
  int v18 = *(_DWORD *)(a2 + 12);
  if (v17) {
    ++v18;
  }
  *(_DWORD *)(a2 + 12) = v18;
  if (!v17) {
    return v10;
  }
  __int16 v19 = (_DWORD *)*a3;
  uint64_t v20 = (_DWORD *)a3[1];
  if ((_DWORD *)*a3 == v20) {
    return v10;
  }
  int v21 = *(_DWORD *)(v14 + 8);
  int v22 = *(_DWORD *)(v14 + 96);
  uint64_t v23 = (_DWORD *)*a3;
  while (*v23 != v11 || v23[1] != v21 || v23[2] != v22)
  {
    v23 += 6;
    if (v23 == v20) {
      return v10;
    }
  }
  if (v20 == v23) {
    return v10;
  }
  LOWORD(v29[0]) = 0;
  v30[0] = 0;
  v30[1] = 0;
  v29[1] = (const __CFString **)v30;
  long long v31 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v33 = 0u;
  ++*(_DWORD *)(a2 + 8);
  while (*v19 != v11 || v19[1] != v21 || v19[2] != v22)
  {
    v19 += 6;
    if (v19 == v20) {
      goto LABEL_28;
    }
  }
  if (v20 == v19 || (uint64_t v26 = *((void *)v19 + 2)) == 0)
  {
LABEL_28:
    HALS_MutationChangeSynchronizer::SetItinerary(*(HALS_MutationChangeSynchronizer **)(a1 + 16), (const MutationItinerary *)v29);
    int v25 = 0;
    uint64_t v16 = 1685286515;
    goto LABEL_29;
  }
  uint64_t v16 = HALS_IOContextHostedDSP::DSPStreamInstance::Negotiate_NP(*((void *)v19 + 2), (uint64_t *)(a4 + 112), a5, *(_DWORD *)(a1 + 24), (uint64_t)v29);
  uint64_t v10 = 1685283698;
  if (v16 == 1685283698)
  {
    int v25 = 0;
    uint64_t v16 = 0;
  }
  else
  {
    if ((*(unsigned char *)(a1 + 24) & 4) == 0 && *(_DWORD *)(a2 + 4) == 1768845428) {
      HALS_IOContextHostedDSP::UpdateDSPReferenceRequestInDescription((HALS_IOContextHostedDSP *)(v26 + 544), v29, *(int64x2_t **)(a1 + 8), v27);
    }
    if (v16)
    {
      int v25 = 1;
      uint64_t v10 = v16;
    }
    else
    {
      HALS_MutationChangeSynchronizer::SetItinerary(*(HALS_MutationChangeSynchronizer **)(a1 + 16), (const MutationItinerary *)v29);
      uint64_t v10 = 0;
      int v25 = 1;
    }
  }
LABEL_29:
  if (__p[1])
  {
    *(void **)&long long v33 = __p[1];
    operator delete(__p[1]);
  }
  uint64_t v28 = (void **)&v31;
  std::vector<MutationItinerary::Device>::__destroy_vector::operator()[abi:ne180100](&v28);
  std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(v30[0]);
  if (v25) {
    return v10;
  }
  return v16;
}

void sub_1BAE90CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, NSObject **buf, long long a12, long long a13, uint64_t a14, long long a15, long long a16)
{
  if (a2)
  {
    MutationItinerary::~MutationItinerary((MutationItinerary *)&buf);
    int v18 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v18);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    __int16 v19 = *buf;
    if ((void)a12) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a12);
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v21 = pthread_self();
      mach_port_t v22 = pthread_mach_thread_np(v21);
      LODWORD(buf) = 67109891;
      HIDWORD(buf) = v22;
      LOWORD(a12) = 2080;
      *(void *)((char *)&a12 + 2) = "HALS_IOContextHostedDSP.cpp";
      WORD5(a12) = 1024;
      HIDWORD(a12) = 1150;
      LOWORD(a13) = 2081;
      *(void *)((char *)&a13 + 2) = "[hal_dsp] Negotiate_Internal encountered an unknown error.";
      _os_log_error_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d %{private}s", (uint8_t *)&buf, 0x22u);
    }
    uint64_t v20 = *(HALS_MutationChangeSynchronizer **)(v16 + 16);
    std::string buf = 0;
    *(long long *)((char *)&a12 + 8) = 0u;
    *(void *)&a12 = (char *)&a12 + 8;
    *(long long *)((char *)&a13 + 8) = 0u;
    a15 = 0u;
    a16 = 0u;
    HALS_MutationChangeSynchronizer::SetItinerary(v20, (const MutationItinerary *)&buf);
    MutationItinerary::~MutationItinerary((MutationItinerary *)&buf);
    __cxa_end_catch();
    JUMPOUT(0x1BAE90B74);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOContextHostedDSP::UpdateDSPReferenceRequestInDescription(HALS_IOContextHostedDSP *this, const __CFString ***a2, int64x2_t *a3, HALS_IOContextDescription *a4)
{
  int v32 = 0;
  MutationItinerary::AreChangesReconciled((MutationItinerary *)a2, this, &v32);
  unsigned int v6 = v32;
  std::map<applesauce::CF::StringRef,BOOL>::map[abi:ne180100]((uint64_t)&v30, a2 + 1);
  uint64_t v8 = (char *)a3[16].i64[0];
  uint64_t v7 = (char *)a3[16].i64[1];
  if (v7 != v8)
  {
    do
    {
      unsigned int v9 = v7 - 16;
      std::__destroy_at[abi:ne180100]<HALS_IOContextDescription::HostedDSPDescription::ReferenceStreamRequest,0>(*((const void **)v7 - 1));
      uint64_t v7 = v9;
    }
    while (v9 != v8);
  }
  a3[16].i64[1] = (uint64_t)v8;
  if (v31[1])
  {
    uint64_t v10 = v30;
    if (v30 != v31)
    {
      BOOL v11 = ((v6 >> 2) & 1) == 0;
      do
      {
        LOBYTE(v33) = *((unsigned char *)v10 + 40);
        HIDWORD(v33) = v11;
        uint64_t v12 = v10[4];
        if (v12)
        {
          CFRetain(v10[4]);
          uint64_t v8 = (char *)a3[16].i64[1];
        }
        uint64_t v34 = v12;
        unint64_t v13 = a3[17].u64[0];
        if ((unint64_t)v8 >= v13)
        {
          uint64_t v14 = (char *)a3[16].i64[0];
          uint64_t v15 = (v8 - v14) >> 4;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 60) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = v13 - (void)v14;
          if (v17 >> 3 > v16) {
            unint64_t v16 = v17 >> 3;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18 >> 60) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          __int16 v19 = (char *)operator new(16 * v18);
          uint64_t v20 = &v19[16 * v15];
          *(void *)uint64_t v20 = v33;
          *((void *)v20 + 1) = v12;
          if (v8 == v14)
          {
            int64x2_t v23 = vdupq_n_s64((unint64_t)v8);
            int v21 = &v19[16 * v15];
          }
          else
          {
            int v21 = &v19[16 * v15];
            do
            {
              uint64_t v22 = *((void *)v8 - 2);
              v8 -= 16;
              *((void *)v21 - 2) = v22;
              v21 -= 16;
              *((void *)v21 + 1) = *((void *)v8 + 1);
              *((void *)v8 + 1) = 0;
            }
            while (v8 != v14);
            int64x2_t v23 = a3[16];
          }
          uint64_t v8 = v20 + 16;
          a3[16].i64[0] = (uint64_t)v21;
          a3[16].i64[1] = (uint64_t)(v20 + 16);
          a3[17].i64[0] = (uint64_t)&v19[16 * v18];
          uint64_t v24 = v23.i64[1];
          int v25 = (void *)v23.i64[0];
          if (v23.i64[1] != v23.i64[0])
          {
            do
            {
              uint64_t v26 = (void *)(v24 - 16);
              std::__destroy_at[abi:ne180100]<HALS_IOContextDescription::HostedDSPDescription::ReferenceStreamRequest,0>(*(const void **)(v24 - 8));
              uint64_t v24 = (uint64_t)v26;
            }
            while (v26 != v25);
          }
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          *(void *)uint64_t v8 = v33;
          *((void *)v8 + 1) = v12;
          v8 += 16;
        }
        a3[16].i64[1] = (uint64_t)v8;
        long long v27 = v10[1];
        if (v27)
        {
          do
          {
            uint64_t v28 = (void **)v27;
            long long v27 = (void *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            uint64_t v28 = (void **)v10[2];
            BOOL v29 = *v28 == v10;
            uint64_t v10 = v28;
          }
          while (!v29);
        }
        uint64_t v10 = v28;
      }
      while (v28 != v31);
    }
  }
  std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(v31[0]);
}

void sub_1BAE91058(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  HALS_IOContextDescription::HostedDSPDescription::ReferenceStreamRequest::~ReferenceStreamRequest((HALS_IOContextDescription::HostedDSPDescription::ReferenceStreamRequest *)va);
  std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(a3);
  _Unwind_Resume(a1);
}

uint64_t std::map<applesauce::CF::StringRef,BOOL>::map[abi:ne180100](uint64_t a1, const __CFString ***a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = *a2;
  if (*a2 != (const __CFString **)(a2 + 1))
  {
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      if (*(uint64_t ***)a1 == v3) {
        break;
      }
      uint64_t v7 = v3;
      if (v6)
      {
        do
        {
          uint64_t v8 = v6;
          uint64_t v6 = *(void *)(v6 + 8);
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v8 = (uint64_t)v7[2];
          BOOL v9 = *(void *)v8 == (void)v7;
          uint64_t v7 = (uint64_t **)v8;
        }
        while (v9);
      }
      if ((unint64_t)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)(v8 + 32), v5 + 4) >= 2)
      {
        if (!*v3) {
          goto LABEL_9;
        }
LABEL_11:
        uint64_t v17 = (void *)v8;
        uint64_t v10 = (uint64_t **)(v8 + 8);
        goto LABEL_13;
      }
      uint64_t v10 = (uint64_t **)std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::__find_equal<applesauce::CF::StringRef>(a1, &v17, v5 + 4);
LABEL_13:
      if (!*v10) {
        goto LABEL_14;
      }
LABEL_15:
      CFStringRef v12 = v5[1];
      if (v12)
      {
        do
        {
          unint64_t v13 = (const __CFString ***)v12;
          CFStringRef v12 = (const __CFString *)v12->isa;
        }
        while (v12);
      }
      else
      {
        do
        {
          unint64_t v13 = (const __CFString ***)v5[2];
          BOOL v9 = *v13 == v5;
          uint64_t v5 = (const __CFString **)v13;
        }
        while (!v9);
      }
      uint64_t v5 = (const __CFString **)v13;
      if (v13 == v4) {
        return a1;
      }
    }
    uint64_t v8 = (uint64_t)v3;
    if (!v6)
    {
LABEL_9:
      uint64_t v17 = v3;
      uint64_t v10 = v3;
LABEL_14:
      BOOL v11 = (uint64_t *)operator new(0x30uLL);
      v15[1] = v3;
      std::pair<applesauce::CF::StringRef const,BOOL>::pair[abi:ne180100]((uint64_t)(v11 + 4), (uint64_t)(v5 + 4));
      char v16 = 1;
      std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v17, v10, v11);
      v15[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,BOOL>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,BOOL>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  return a1;
}

void sub_1BAE911F4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::__find_equal<applesauce::CF::StringRef>(uint64_t a1, void *a2, const __CFString **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = (void *)v4;
        uint64_t v8 = (const __CFString **)(v4 + 32);
        if ((unint64_t)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*a3, (const __CFString **)(v4 + 32)) < 2)break; {
        uint64_t v4 = *v7;
        }
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((unint64_t)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v8, a3) < 2) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t caulk::function_ref<int ()(unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_0>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t result = HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2::operator()(*a1, *(void *)(*a1 + 32), *(void **)(*a1 + 48), a3, *(_DWORD *)(*a1 + 40));
  *(_DWORD *)(*(void *)(v3 + 32) + 16) = result;
  return result;
}

uint64_t caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2::operator()(*a1, *(uint64_t **)(*a1 + 24), 1869968496, a6, *(_DWORD *)(*a1 + 32));
}

uint64_t HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2::operator()(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, int a5)
{
  v126[3] = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(a4 + 108)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a4 + 112);
  uint64_t v7 = (uint64_t *)(a4 + 112);
  BOOL v8 = *(void *)(a4 + 120) == v6 || v6 == 0;
  if (v8) {
    goto LABEL_33;
  }
  uint64_t v10 = a1;
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  if (*a2 != v12)
  {
    int v13 = *(_DWORD *)(v6 + 8);
    int v14 = *(_DWORD *)(v6 + 96);
    while (*(_DWORD *)v11 != a3 || *(_DWORD *)(v11 + 4) != v13 || *(_DWORD *)(v11 + 8) != v14)
    {
      v11 += 24;
      if (v11 == v12) {
        goto LABEL_33;
      }
    }
  }
  if (v12 == v11 || (uint64_t v16 = *(void *)(v11 + 16)) == 0)
  {
LABEL_33:
    uint64_t v15 = 1685287013;
    *(unsigned char *)(a4 + 416) = 0;
    return v15;
  }
  unsigned int v17 = *(_DWORD *)(a1 + 16);
  unsigned int v106 = v17;
  uint64_t v18 = 1685287013;
  if (v17)
  {
    uint64_t v19 = *(void *)(a4 + 176);
    if (!v19) {
      goto LABEL_153;
    }
    uint64_t v20 = a4 + 176;
    do
    {
      unsigned int v21 = *(_DWORD *)(v19 + 28);
      BOOL v22 = v21 >= 9;
      if (v21 >= 9) {
        int64x2_t v23 = (uint64_t *)v19;
      }
      else {
        int64x2_t v23 = (uint64_t *)(v19 + 8);
      }
      if (v22) {
        uint64_t v20 = v19;
      }
      uint64_t v19 = *v23;
    }
    while (*v23);
    if (v20 == a4 + 176 || *(_DWORD *)(v20 + 28) > 9u)
    {
LABEL_153:
      if (*(unsigned char *)(v16 + 1224))
      {
        uint64_t v27 = v16 + 648;
        uint64_t v28 = *(void *)(v16 + 648);
        if (!v28) {
          goto LABEL_46;
        }
        uint64_t v29 = v16 + 648;
        do
        {
          int v30 = *(_DWORD *)(v28 + 28);
          BOOL v31 = v30 == 0;
          if (v30) {
            int v32 = (uint64_t *)v28;
          }
          else {
            int v32 = (uint64_t *)(v28 + 8);
          }
          if (!v31) {
            uint64_t v29 = v28;
          }
          uint64_t v28 = *v32;
        }
        while (*v32);
        if (v29 == v27 || *(_DWORD *)(v29 + 28) >= 2u) {
LABEL_46:
        }
          uint64_t v29 = v16 + 648;
        BOOL v8 = v27 == v29;
        int v33 = (v17 >> 2) & 1;
        if (!v8) {
          int v33 = 1;
        }
        if (v33) {
          char v34 = 4;
        }
        else {
          char v34 = 0;
        }
        LOBYTE(v106) = v34 | v17 & 0xFB;
        HALS_IOContextHostedDSP::DSPStreamInstance::CreateRequest((DSP_Host_Types::ConfigurationChangeRequest *)v107, *(_DWORD *)(v16 + 12), 0, (uint64_t *)(a4 + 112), a5, (unsigned __int8 *)&v106);
        DSP_Host_Types::ConfigurationChangeRequest::ConfigurationChangeRequest((DSP_Host_Types::ConfigurationChangeRequest *)buf);
        *(void *)std::string buf = &unk_1F1483C98;
        DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::operator=((uint64_t)buf, (uint64_t)v107);
        *(void *)unint64_t v107 = &unk_1F14867D0;
        v98.__r_.__value_.__r.__words[0] = (std::string::size_type)v117;
        std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
        DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)v116);
        DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v115);
        DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v111);
        *(void *)unint64_t v107 = &unk_1F1486820;
        std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v108);
        int v35 = DSP_Host_Types::ConfigurationChangeRequest::util_compare_request((unsigned __int8 **)(v16 + 544), (unsigned __int8 **)buf, 0);
        BOOL v36 = MutationItinerary::AreChangesReconciled((MutationItinerary *)(v16 + 1224), (const DSP_Host_Types::ConfigurationChangeRequest *)buf, (int *)(v16 + 1304));
        if (v36)
        {
          std::string v37 = (AMCP::Log::Scope_Registry *)DSP_Host_Types::ConfigurationChangeRequest::hash_equal((unsigned __int8 **)(v16 + 1312), (const DSP_Host_Types::ConfigurationChangeRequest *)buf);
          if (v37)
          {
            AMCP::Log::Scope_Registry::get(v37);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v107, "com.apple.coreaudio", "AMCP");
            uint64_t v38 = **(NSObject ***)v107;
            if (*(void *)v108) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v108);
            }
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v83 = pthread_self();
              mach_port_t v84 = pthread_mach_thread_np(v83);
              *(_DWORD *)unint64_t v107 = 67109634;
              *(_DWORD *)&v107[4] = v84;
              *(_WORD *)uint64_t v108 = 2080;
              *(void *)&_OWORD v108[2] = "HALS_IOContextHostedDSP.cpp";
              __int16 v109 = 1024;
              int v110 = 362;
              _os_log_debug_impl(&dword_1BAA78000, v38, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] POLICY: Suppressing adapt, request is identical.", v107, 0x18u);
            }
            uint64_t v18 = 1685287789;
          }
          else
          {
            char v41 = (AMCP::Log::Scope_Registry *)(*(void *(**)(std::string *__return_ptr))(**(void **)(v16 + 136) + 32))(&v98);
            unsigned int v42 = v103;
            if (v103)
            {
              DSP_Host_Types::ConfigurationChangeRequest::ConfigurationChangeRequest((DSP_Host_Types::ConfigurationChangeRequest *)v107);
              *(void *)unint64_t v107 = &unk_1F1483C98;
              DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::operator=(v16 + 1312, (uint64_t)v107);
              *(void *)unint64_t v107 = &unk_1F14867D0;
              v104[0] = v117;
              std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)v104);
              DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)v116);
              DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v115);
              DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v111);
              *(void *)unint64_t v107 = &unk_1F1486820;
              __int16 v43 = (AMCP::Log::Scope_Registry *)std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v108);
              *(_DWORD *)(v16 + 312) = 0;
              AMCP::Log::Scope_Registry::get(v43);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v107, "com.apple.coreaudio", "AMCP");
              std::string v44 = **(NSObject ***)v107;
              if (*(void *)v108) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v108);
              }
              if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
              {
                char v85 = pthread_self();
                mach_port_t v86 = pthread_mach_thread_np(v85);
                v87.i32[0] = bswap32(v42);
                int8x8_t v88 = vzip1_s8(v87, v87);
                v89.i64[0] = 0x1F0000001FLL;
                v89.i64[1] = 0x1F0000001FLL;
                v90.i64[0] = 0x5F0000005FLL;
                v90.i64[1] = 0x5F0000005FLL;
                *(int8x8_t *)v91.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v90, (uint32x4_t)vsraq_n_s32(v89, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v88), 0x18uLL), 0x18uLL))), v88, (int8x8_t)0x2E002E002E002ELL);
                char v105 = 4;
                LODWORD(v104[0]) = vmovn_s16(v91).u32[0];
                BYTE4(v104[0]) = 0;
                DSP_Host_Types::ConfigurationChangeRequest::debug_device_list((DSP_Host_Types::ConfigurationChangeRequest *)buf, v96);
                if (v97 >= 0) {
                  unint64_t v92 = v96;
                }
                else {
                  unint64_t v92 = (void **)v96[0];
                }
                *(_DWORD *)unint64_t v107 = 67110146;
                *(_DWORD *)&v107[4] = v86;
                *(_WORD *)uint64_t v108 = 2080;
                *(void *)&_OWORD v108[2] = "HALS_IOContextHostedDSP.cpp";
                __int16 v109 = 1024;
                int v110 = 402;
                __int16 v111 = 2080;
                p_data = v104;
                __int16 v113 = 2080;
                uint64_t v114 = v92;
                _os_log_error_impl(&dword_1BAA78000, v44, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] Adapt_NP : DSP was unable to Adapt to IO configuration (%s) using %s.", v107, 0x2Cu);
                if (v97 < 0) {
                  operator delete(v96[0]);
                }
                if (v105 < 0) {
                  operator delete(v104[0]);
                }
              }
              HALS_IOContextHostedDSP::DSPStreamInstance::MaybeConfigureHALBypass(v16, (uint64_t)buf);
              uint64_t v18 = 1685275225;
            }
            else
            {
              AMCP::Log::Scope_Registry::get(v41);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v107, "com.apple.coreaudio", "AMCP");
              __int16 v45 = **(NSObject ***)v107;
              if (*(void *)v108) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v108);
              }
              if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
              {
                int v93 = pthread_self();
                mach_port_t v94 = pthread_mach_thread_np(v93);
                *(_DWORD *)unint64_t v107 = 67109634;
                *(_DWORD *)&v107[4] = v94;
                *(_WORD *)uint64_t v108 = 2080;
                *(void *)&_OWORD v108[2] = "HALS_IOContextHostedDSP.cpp";
                __int16 v109 = 1024;
                int v110 = 374;
                _os_log_debug_impl(&dword_1BAA78000, v45, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] POLICY: Adapt allowed, and succeeded.", v107, 0x18u);
              }
              __int16 v46 = *(std::__shared_weak_count **)(v16 + 376);
              *(void *)(v16 + 368) = 0;
              *(void *)(v16 + 376) = 0;
              if (v46) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v46);
              }
              DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::operator=(v16 + 1312, (uint64_t)buf);
              int v47 = *(_DWORD *)(v16 + 312);
              if (v100) {
                int v48 = v99[4];
              }
              else {
                int v48 = 0;
              }
              *(_DWORD *)(v16 + 312) = v48;
              if (!*(unsigned char *)(v16 + 1756)) {
                std::__throw_bad_optional_access[abi:ne180100]();
              }
              BOOL v49 = HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange((HALS_IOContextHostedDSP::DSPStreamInstance *)v16, *(_DWORD *)(v16 + 1752), 1);
              if (HALS_DSPCaptureFiles::isDSPCaptureEnabled((HALS_DSPCaptureFiles *)v49)) {
                HALS_IOContextHostedDSP::DSPStreamInstance::ConfigureCaptureFiles((uint64_t *)v16, v7, v106);
              }
              uint64_t v50 = *(void *)(v16 + 176);
              if (v50) {
                std::function<void ()>::operator()(v50, *(_DWORD *)(v16 + 316));
              }
              if (v47 == v48) {
                uint64_t v18 = 0;
              }
              else {
                uint64_t v18 = 1685285985;
              }
            }
            v98.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F14874D8;
            if (__p)
            {
              uint64_t v102 = __p;
              operator delete(__p);
            }
            DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v99);
            v98.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1487518;
            std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v98.__r_.__value_.__l.__size_);
          }
        }
        else
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v36);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v107, "com.apple.coreaudio", "AMCP");
          unint64_t v40 = **(NSObject ***)v107;
          if (*(void *)v108) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v108);
          }
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
          {
            xpc_object_t v76 = pthread_self();
            mach_port_t v77 = pthread_mach_thread_np(v76);
            MutationItinerary::util_ChangeBitmaskToString(&v98, *(_DWORD *)(v16 + 1304));
            int v78 = SHIBYTE(v98.__r_.__value_.__r.__words[2]);
            std::string::size_type v95 = v98.__r_.__value_.__r.__words[0];
            DSP_Host_Types::ConfigurationChangeRequest::debug_stringify_compare_result(v104, v35);
            uint64_t v79 = &v98;
            if (v78 < 0) {
              uint64_t v79 = (std::string *)v95;
            }
            if (v105 >= 0) {
              uint64_t v80 = v104;
            }
            else {
              uint64_t v80 = (void **)v104[0];
            }
            *(_DWORD *)unint64_t v107 = 67110146;
            *(_DWORD *)&v107[4] = v77;
            *(_WORD *)uint64_t v108 = 2080;
            *(void *)&_OWORD v108[2] = "HALS_IOContextHostedDSP.cpp";
            __int16 v109 = 1024;
            int v110 = 352;
            __int16 v111 = 2080;
            p_data = (void **)&v79->__r_.__value_.__l.__data_;
            __int16 v113 = 2080;
            uint64_t v114 = v80;
            _os_log_debug_impl(&dword_1BAA78000, v40, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] POLICY: Suppressing adapt, changes are incomplete (%s) or incompatible (%s).", v107, 0x2Cu);
            if (v105 < 0) {
              operator delete(v104[0]);
            }
            if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v98.__r_.__value_.__l.__data_);
            }
          }
          HALS_IOContextHostedDSP::DSPStreamInstance::MaybeConfigureHALBypass(v16, (uint64_t)buf);
          uint64_t v18 = 1685275225;
        }
        *(void *)std::string buf = &unk_1F14867D0;
        *(void *)unint64_t v107 = v126;
        std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)v107);
        DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)v125);
        DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v124);
        DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v122);
        *(void *)std::string buf = &unk_1F1486820;
        a1 = std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v119);
      }
      else
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v39 = **(NSObject ***)buf;
        if (*(void *)v119) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v119);
        }
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
        {
          long long v74 = pthread_self();
          mach_port_t v75 = pthread_mach_thread_np(v74);
          *(_DWORD *)std::string buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v75;
          *(_WORD *)CFStringRef v119 = 2080;
          *(void *)&v119[2] = "HALS_IOContextHostedDSP.cpp";
          __int16 v120 = 1024;
          int v121 = 328;
          _os_log_debug_impl(&dword_1BAA78000, v39, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] POLICY: Suppressing adapt, previous negotiate failed or was never performed.", buf, 0x18u);
        }
        DSP_Host_Types::AdaptRequest::AdaptRequest((DSP_Host_Types::AdaptRequest *)buf, (const DSP_Host_Types::NegotiateRequest *)(v16 + 544));
        HALS_IOContextHostedDSP::DSPStreamInstance::MaybeConfigureHALBypass(v16, (uint64_t)buf);
        *(void *)std::string buf = &unk_1F14867D0;
        *(void *)unint64_t v107 = v126;
        std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)v107);
        DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)v125);
        DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v124);
        DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v122);
        *(void *)std::string buf = &unk_1F1486820;
        a1 = std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v119);
        uint64_t v18 = 1685275225;
      }
    }
    else
    {
      DSP_Host_Types::AdaptRequest::AdaptRequest((DSP_Host_Types::AdaptRequest *)buf, (const DSP_Host_Types::NegotiateRequest *)(v16 + 544));
      HALS_IOContextHostedDSP::DSPStreamInstance::MaybeConfigureHALBypass(v16, (uint64_t)buf);
      *(void *)std::string buf = &unk_1F14867D0;
      *(void *)unint64_t v107 = v126;
      std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)v107);
      DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)v125);
      DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v124);
      DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v122);
      *(void *)std::string buf = &unk_1F1486820;
      uint64_t v24 = (AMCP::Log::Scope_Registry *)std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v119);
      AMCP::Log::Scope_Registry::get(v24);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int v25 = **(NSObject ***)buf;
      if (*(void *)v119) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v119);
      }
      a1 = os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG);
      if (a1)
      {
        uint64_t v81 = pthread_self();
        mach_port_t v82 = pthread_mach_thread_np(v81);
        *(_DWORD *)std::string buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v82;
        *(_WORD *)CFStringRef v119 = 2080;
        *(void *)&v119[2] = "HALS_IOContextHostedDSP.cpp";
        __int16 v120 = 1024;
        int v121 = 318;
        _os_log_debug_impl(&dword_1BAA78000, v25, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] Client-visible reference stream will be processed with HAL bypass.", buf, 0x18u);
      }
      uint64_t v18 = 0;
    }
  }
  uint64_t v51 = v16 + 648;
  uint64_t v52 = *(void *)(v16 + 648);
  if (!v52)
  {
LABEL_115:
    uint64_t v59 = v16 + 648;
LABEL_116:
    BOOL v58 = v51 != v59;
    goto LABEL_117;
  }
  uint64_t v53 = v16 + 648;
  uint64_t v54 = *(void *)(v16 + 648);
  do
  {
    int v55 = *(_DWORD *)(v54 + 28);
    BOOL v56 = v55 == 0;
    if (v55) {
      uint64_t v57 = (uint64_t *)v54;
    }
    else {
      uint64_t v57 = (uint64_t *)(v54 + 8);
    }
    if (!v56) {
      uint64_t v53 = v54;
    }
    uint64_t v54 = *v57;
  }
  while (*v57);
  if (v53 == v51 || *(_DWORD *)(v53 + 28) >= 2u)
  {
    uint64_t v59 = v16 + 648;
    do
    {
      unsigned int v60 = *(_DWORD *)(v52 + 28);
      BOOL v61 = v60 >= 9;
      if (v60 >= 9) {
        long long v62 = (uint64_t *)v52;
      }
      else {
        long long v62 = (uint64_t *)(v52 + 8);
      }
      if (v61) {
        uint64_t v59 = v52;
      }
      uint64_t v52 = *v62;
    }
    while (*v62);
    if (v59 != v51 && *(_DWORD *)(v59 + 28) < 0xAu) {
      goto LABEL_116;
    }
    goto LABEL_115;
  }
  BOOL v58 = 1;
LABEL_117:
  if (!v18 || v18 == 1685285985 || v18 == 1685287789)
  {
    **(unsigned char **)(v10 + 8) |= v18 == 1685285985;
    ++**(_DWORD **)v10;
    char v63 = 1;
    *(unsigned char *)(a4 + 416) = 1;
    int v64 = *(_DWORD *)(v16 + 312);
  }
  else
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    float v66 = **(NSObject ***)buf;
    if (*(void *)v119) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v119);
    }
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
    {
      mach_port_t v67 = pthread_self();
      mach_port_t v68 = pthread_mach_thread_np(v67);
      v69.i32[0] = bswap32(v18);
      int8x8_t v70 = vzip1_s8(v69, v69);
      v71.i64[0] = 0x1F0000001FLL;
      v71.i64[1] = 0x1F0000001FLL;
      v72.i64[0] = 0x5F0000005FLL;
      v72.i64[1] = 0x5F0000005FLL;
      *(int8x8_t *)v73.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v72, (uint32x4_t)vsraq_n_s32(v71, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v70), 0x18uLL), 0x18uLL))), v70, (int8x8_t)0x2E002E002E002ELL);
      HIBYTE(v110) = 4;
      *(_DWORD *)unint64_t v107 = vmovn_s16(v73).u32[0];
      v107[4] = 0;
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v68;
      *(_WORD *)CFStringRef v119 = 2080;
      *(void *)&v119[2] = "HALS_IOContextHostedDSP.cpp";
      __int16 v120 = 1024;
      int v121 = 1280;
      __int16 v122 = 2080;
      uint64_t v123 = v107;
      _os_log_debug_impl(&dword_1BAA78000, v66, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] Hosted DSP Adapt is unfinished, with status '%s'.", buf, 0x22u);
      if (SHIBYTE(v110) < 0) {
        operator delete(*(void **)v107);
      }
    }
    if (v18 != 1685275225)
    {
      char v63 = 0;
      uint64_t v15 = v18;
      goto LABEL_122;
    }
    char v63 = 0;
    int v64 = 0;
    ++**(_DWORD **)v10;
    *(unsigned char *)(a4 + 416) = 1;
  }
  uint64_t v15 = 0;
  *(_DWORD *)(a4 + 160) = v64;
  *(unsigned char *)(a4 + 164) = 1;
LABEL_122:
  *(unsigned char *)(a4 + 256) = v63;
  char v65 = v18 == 1685275225 || v58;
  *(unsigned char *)(a4 + 257) = v65;
  *(_DWORD *)(a4 + 260) = a5;
  return v15;
}

void sub_1BAE920A0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(__p, a6);
  if (a2)
  {
    DSP_Host_Types::AdaptResponse::~AdaptResponse((DSP_Host_Types::AdaptResponse *)__p);
    DSP_Host_Types::AdaptRequest::~AdaptRequest((DSP_Host_Types::AdaptRequest *)&STACK[0x340]);
    __cxa_begin_catch(a1);
    *(unsigned char *)(v6 + 416) = 0;
    __cxa_end_catch();
    JUMPOUT(0x1BAE914FCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_0>(uint64_t *a1, uint64_t *a2)
{
  return HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2::operator()(*a1, *(uint64_t **)(*a1 + 32), 1768845428, *a2, *(_DWORD *)(*a1 + 24));
}

void HALS_IOContextHostedDSP::ProcessStream(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int *a6, unsigned int *a7, _OWORD *a8, _OWORD *a9)
{
  int v14 = (HALS_DSPCaptureFiles *)HALS_IOContextHostedDSP::HostedDSPList::find(a1, a2, a3, a4);
  if (v14 != (HALS_DSPCaptureFiles *)a2)
  {
    uint64_t v15 = *((void *)v14 + 2);
    if (v15)
    {
      BOOL isDSPCaptureEnabled = HALS_DSPCaptureFiles::isDSPCaptureEnabled(v14);
      if (isDSPCaptureEnabled)
      {
        unsigned int v17 = *(uint64_t ***)(v15 + 328);
        if (v17)
        {
          if (HALS_DSPCaptureFiles::isDSPCaptureEnabled((HALS_DSPCaptureFiles *)isDSPCaptureEnabled)) {
            HALS_DSPCaptureFiles::WriteBufferToCaptureFile((uint64_t)v17, a5, a6, a8, a9, v17);
          }
        }
      }
      for (uint64_t i = 0; i != 240; i += 80)
      {
        uint64_t v19 = &v40[i];
        *((void *)v19 + 18) = 0;
        *(_OWORD *)(v19 + 72) = 0uLL;
        *(_OWORD *)(v19 + 88) = 0uLL;
        *(_OWORD *)(v19 + 104) = 0uLL;
        *(_OWORD *)(v19 + 120) = 0uLL;
        *(void *)(v19 + 133) = 0;
      }
      int64x2_t v48 = vdupq_n_s64(1uLL);
      char v46 = 0;
      long long v20 = a8[1];
      v44[0] = *a8;
      v44[1] = v20;
      long long v21 = a8[3];
      v44[2] = a8[2];
      v44[3] = v21;
      unsigned int v45 = a5;
      int v47 = a7;
      if (*a6 - 1 > 2)
      {
        long long v30 = a8[1];
        v41[0] = *a8;
        v41[1] = v30;
        long long v31 = a8[3];
        v41[2] = a8[2];
        v41[3] = v31;
        unsigned int v42 = a5;
        __int16 v43 = a6;
        uint64_t v28 = 1;
      }
      else
      {
        uint64_t v22 = 0;
        v48.i64[0] = *a6;
        unsigned int v23 = 1;
        do
        {
          uint64_t v24 = &v40[24 * v22];
          *(_OWORD *)(v24 + 8) = *(_OWORD *)&a6[4 * v22 + 2];
          int v25 = &v40[80 * v22];
          long long v26 = a8[2];
          *(_OWORD *)(v25 + 120) = a8[3];
          *(_OWORD *)(v25 + 104) = v26;
          long long v27 = *a8;
          *(_OWORD *)(v25 + 88) = a8[1];
          *(_DWORD *)uint64_t v24 = 1;
          *(_OWORD *)(v25 + 72) = v27;
          *((_DWORD *)v25 + 34) = a5;
          *((void *)v25 + 18) = v24;
          uint64_t v22 = v23;
          uint64_t v28 = v48.i64[0];
        }
        while (v48.i64[0] > (unint64_t)v23++);
      }
      uint64_t v39 = 0;
      memset(v38, 0, sizeof(v38));
      if (*(void *)(v15 + 368))
      {
        uint64_t v32 = std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator()(*(void *)(v15 + 440), *(_DWORD *)(v15 + 316), (uint64_t)v38, v28, (uint64_t)v41, v48.i64[1], (uint64_t)v44);
      }
      else
      {
        uint64_t v32 = HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange((HALS_IOContextHostedDSP::DSPStreamInstance *)v15, a5, 0);
        if ((v32 & 1) == 0)
        {
          int v33 = *(void **)(v15 + 352);
          ++v33[2];
          uint64_t v34 = mach_absolute_time();
          v33[3] = v34;
          v33[4] = v34;
          std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator()(*(void *)(v15 + 208), *(_DWORD *)(v15 + 316), (uint64_t)v38, v48.i64[0], (uint64_t)v41, v48.i64[1], (uint64_t)v44);
          uint64_t v35 = *(void *)(v15 + 352);
          uint64_t v32 = mach_absolute_time();
          *(void *)(v35 + 32) = v32;
        }
      }
      BOOL v36 = HALS_DSPCaptureFiles::isDSPCaptureEnabled((HALS_DSPCaptureFiles *)v32);
      if (v36)
      {
        uint64_t v37 = *(void *)(v15 + 328);
        if (v37)
        {
          if (HALS_DSPCaptureFiles::isDSPCaptureEnabled((HALS_DSPCaptureFiles *)v36))
          {
            HALS_DSPCaptureFiles::WriteBufferToCaptureFile(v37, a5, a7, a8, a9, (uint64_t **)(v37 + 24));
          }
        }
      }
    }
  }
}

void sub_1BAE9243C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,long long a39)
{
  unint64_t v40 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(a1);
  AMCP::Log::Scope_Registry::get(v40);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a14, "com.apple.coreaudio", "AMCP");
  char v41 = *(caulk::concurrent::messenger **)(a14 + 8);
  a13 = 2;
  unsigned int v42 = pthread_self();
  *(_DWORD *)(v39 + 200) = pthread_mach_thread_np(v42);
  *(void *)(v39 + 208) = "HALS_IOContextHostedDSP.cpp";
  *(_DWORD *)(v39 + 216) = 706;
  caulk::concurrent::messenger::enqueue_call<HALS_IOContextHostedDSP::DSPStreamInstance::DoIO(unsigned int,AudioBufferList *,AudioBufferList *,AudioTimeStamp const&)::$_0,std::tuple<unsigned int,char const*,int>>(v41, &a13, &a39);
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAE923BCLL);
}

void sub_1BAE924B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(std::shared_ptr<HALB_InstrumentedEvent_RealtimeDuration const>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_2,std::tuple<unsigned int,char const*,int,int,int,long long,long long>>::perform(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v12;
  if (*(void *)v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v13);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = *(void *)(a1 + 64);
    LODWORD(v12) = 67110658;
    HIDWORD(v12) = v4;
    *(_WORD *)int v13 = 2080;
    *(void *)&v13[2] = v5;
    __int16 v14 = 1024;
    int v15 = v6;
    __int16 v16 = 1024;
    int v17 = v7;
    __int16 v18 = 1024;
    int v19 = v8;
    __int16 v20 = 2048;
    uint64_t v21 = v9;
    __int16 v22 = 2048;
    uint64_t v23 = v10;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d [hal_dsp][overload] (Context ID: %d) Input Hosted DSP Processing used more than %d%% of the IO cycle (Budgeted Time: %lld) (Processing Time: %lld).", (uint8_t *)&v12, 0x38u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 72, 8);
}

void sub_1BAE926BC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_2,std::tuple<unsigned int,char const*,int,int,int,long long,long long>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_1,std::tuple<unsigned int,char const*,int,int,unsigned long long,long long,long long>>::perform(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v12;
  if (*(void *)v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v13);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = *(void *)(a1 + 64);
    LODWORD(v12) = 67110658;
    HIDWORD(v12) = v4;
    *(_WORD *)int v13 = 2080;
    *(void *)&v13[2] = v5;
    __int16 v14 = 1024;
    int v15 = v6;
    __int16 v16 = 1024;
    int v17 = v7;
    __int16 v18 = 2048;
    uint64_t v19 = v8;
    __int16 v20 = 2048;
    uint64_t v21 = v9;
    __int16 v22 = 2048;
    uint64_t v23 = v10;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d [hal_dsp][overload] (Context ID: %d) (%llu) Hosted DSP processing overloaded the IO cycle (Budgeted Time: %lld) (Processing Time: %lld).", (uint8_t *)&v12, 0x3Cu);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 72, 8);
}

void sub_1BAE92868(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_1,std::tuple<unsigned int,char const*,int,int,unsigned long long,long long,long long>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_0,std::allocator<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_0>,void ()(std::shared_ptr<HALB_InstrumentedEvent_RealtimeDuration const>)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_0,std::allocator<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_0>,void ()(std::shared_ptr<HALB_InstrumentedEvent_RealtimeDuration const>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK23HALS_IOContextHostedDSP29CheckForDSPProcessingOverloadExE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_0,std::allocator<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_0>,void ()(std::shared_ptr<HALB_InstrumentedEvent_RealtimeDuration const>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  os_log_type_t v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t v5 = *(void *)(v4 + 24);
  unint64_t v6 = *(void *)(v4 + 32);
  uint64_t v7 = __udivti3();
  if (v6 >= v5) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = -v7;
  }
  uint64_t v9 = *(uint64_t **)(a1 + 16);
  if (v8 > *v9)
  {
    uint64_t *v9 = v8;
    uint64_t v10 = *(void **)(a1 + 8);
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = (std::__shared_weak_count *)v10[1];
    void *v10 = v4;
    v10[1] = v3;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

__n128 std::__function::__func<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_0,std::allocator<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_0>,void ()(std::shared_ptr<HALB_InstrumentedEvent_RealtimeDuration const>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F147EB30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_0,std::allocator<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_0>,void ()(std::shared_ptr<HALB_InstrumentedEvent_RealtimeDuration const>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F147EB30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_0,std::allocator<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_0>,void ()(std::shared_ptr<HALB_InstrumentedEvent_RealtimeDuration const>)>::~__func()
{
}

applesauce::CF::StringRef *applesauce::CF::details::find_at_key<applesauce::CF::StringRef,__CFString const*&>(applesauce::CF::StringRef *a1, CFDictionaryRef theDict, const void *a3)
{
  uint64_t v4 = applesauce::CF::details::at_key<__CFString const*&>(theDict, a3);
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v5 = v4;
  CFRetain(v4);

  return applesauce::CF::StringRef::StringRef(a1, v5);
}

void sub_1BAE92AD8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

applesauce::CF::NumberRef *applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*&>(applesauce::CF::NumberRef *a1, CFDictionaryRef theDict, const void *a3)
{
  uint64_t v4 = applesauce::CF::details::at_key<__CFString const*&>(theDict, a3);
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v5 = v4;
  CFRetain(v4);

  return applesauce::CF::NumberRef::NumberRef(a1, v5);
}

void sub_1BAE92B70(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mcp_applesauce::CF::Dictionary_Builder::set_value<__CFString const*,applesauce::CF::StringRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1) {
    CFDictionarySetValue(a1, a2, a3);
  }
}

void mcp_applesauce::CF::Dictionary_Builder::set_value<__CFString const*,applesauce::CF::NumberRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1) {
    CFDictionarySetValue(a1, a2, a3);
  }
}

void Aggregate_Device_Description::fill_out_optional_strings(Aggregate_Device_Description *this, CFDictionaryRef *a2)
{
  Aggregate_Description_Dictionary::get_or_empty<applesauce::CF::StringRef>(&v7, *a2, @"name");
  uint64_t v4 = (const void *)*((void *)this + 1);
  *((void *)this + 1) = v7;
  if (v4) {
    CFRelease(v4);
  }
  Aggregate_Description_Dictionary::get_or_empty<applesauce::CF::StringRef>(&v7, *a2, @"master");
  unint64_t v5 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = v7;
  if (v5) {
    CFRelease(v5);
  }
  Aggregate_Description_Dictionary::get_or_empty<applesauce::CF::StringRef>(&v7, *a2, @"clock");
  unint64_t v6 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = v7;
  if (v6) {
    CFRelease(v6);
  }
}

void Aggregate_Device_Description::fill_out_optional_BOOLeans(Aggregate_Device_Description *this, const __CFString *a2)
{
  if (applesauce::CF::details::has_key<__CFString const*&>((CFDictionaryRef)a2->isa, @"private"))
  {
    Aggregate_Description_Dictionary::get_BOOLean((Aggregate_Description_Dictionary *)&v7, a2, @"private");
    uint64_t v4 = (const void *)*((void *)this + 7);
    *((void *)this + 7) = v7;
    if (v4) {
      CFRelease(v4);
    }
  }
  else
  {
    unint64_t v5 = (const void *)*((void *)this + 7);
    *((void *)this + 7) = 0;
    if (v5) {
      CFRelease(v5);
    }
  }
  if (applesauce::CF::details::has_key<__CFString const*&>((CFDictionaryRef)a2->isa, @"stacked"))
  {
    Aggregate_Description_Dictionary::get_BOOLean((Aggregate_Description_Dictionary *)&v7, a2, @"stacked");
    unint64_t v6 = (const void *)*((void *)this + 8);
    *((void *)this + 8) = v7;
    if (!v6) {
      return;
    }
  }
  else
  {
    unint64_t v6 = (const void *)*((void *)this + 8);
    *((void *)this + 8) = *MEMORY[0x1E4F1CFC0];
    if (!v6) {
      return;
    }
  }
  CFRelease(v6);
}

uint64_t Aggregate_Device_Description::fill_out_subdevice_list(uint64_t *a1, const __CFDictionary *a2, uint64_t *a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(&v56, a2, @"subdevices");
  if (v57)
  {
    CFTypeRef v4 = v56;
    if (v56)
    {
      CFRetain(v56);
      v55[1] = v4;
      CFIndex Count = CFArrayGetCount((CFArrayRef)v4);
      CFIndex v44 = CFArrayGetCount((CFArrayRef)v4);
      if (Count)
      {
        unint64_t v6 = 0;
        unsigned int v42 = a1 + 2;
        uint64_t v7 = @"uid";
        do
        {
          if (v6 == v44) {
            break;
          }
          applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)v55, (CFArrayRef)v4, v6);
          CFTypeRef v8 = v55[0];
          if (v55[0])
          {
            CFRetain(v55[0]);
            v54[1] = v8;
            if (applesauce::CF::details::has_key<__CFString const*&>((CFDictionaryRef)v8, v7))
            {
              uint64_t v9 = v7;
              applesauce::CF::details::find_at_key<applesauce::CF::StringRef,__CFString const*&>((applesauce::CF::StringRef *)v54, (CFDictionaryRef)v8, v7);
              LOBYTE(cf) = 0;
              char v53 = 0;
              uint64_t v10 = *a3;
              uint64_t v11 = a3[1];
              while (v10 != v11)
              {
                if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)v10, (const __CFString **)v54) == kCFCompareEqualTo)
                {
                  if (v53)
                  {
                    CFTypeRef v12 = cf;
                    CFStringRef v13 = *(const __CFString **)v10;
                    CFTypeRef cf = v13;
                    if (v13) {
                      CFRetain(v13);
                    }
                    if (v12) {
                      CFRelease(v12);
                    }
                    CFTypeRef v14 = v48;
                    int v15 = *(const void **)(v10 + 8);
                    CFTypeRef v48 = v15;
                    if (v15) {
                      CFRetain(v15);
                    }
                    if (v14) {
                      CFRelease(v14);
                    }
                    CFTypeRef v16 = v49;
                    int v17 = *(const void **)(v10 + 16);
                    CFTypeRef v49 = v17;
                    if (v17) {
                      CFRetain(v17);
                    }
                    if (v16) {
                      CFRelease(v16);
                    }
                    CFTypeRef v18 = v50;
                    uint64_t v19 = *(const void **)(v10 + 24);
                    CFTypeRef v50 = v19;
                    if (v19) {
                      CFRetain(v19);
                    }
                    if (v18) {
                      CFRelease(v18);
                    }
                    long long v20 = *(_OWORD *)(v10 + 32);
                    char v52 = *(unsigned char *)(v10 + 48);
                    long long v51 = v20;
                  }
                  else
                  {
                    Audio_Sub_Device_Description::Audio_Sub_Device_Description((uint64_t)&cf, v10);
                    char v53 = 1;
                  }
                }
                v10 += 56;
              }
              memset(v45, 0, 41);
              *(_DWORD *)&v45[44] = 127;
              BOOL v46 = 1;
              BOOL v21 = applesauce::CF::details::has_key<__CFString const*&>((CFDictionaryRef)v8, v9);
              if (!v21)
              {
                AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v21);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
                uint64_t v34 = **(NSObject ***)buf;
                if ((void)v59) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v59);
                }
                if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v35 = pthread_self();
                  mach_port_t v36 = pthread_mach_thread_np(v35);
                  *(_DWORD *)std::string buf = 67109890;
                  *(_DWORD *)&uint8_t buf[4] = v36;
                  LOWORD(v59) = 2080;
                  *(void *)((char *)&v59 + 2) = "Aggregate_Device_Description.cpp";
                  WORD5(v59) = 1024;
                  HIDWORD(v59) = 14;
                  LOWORD(v60) = 2080;
                  *(void *)((char *)&v60 + 2) = "subdevice_dictionary.has_key(AMCP_@kAudioSubDeviceUIDKey)";
                  _os_log_error_impl(&dword_1BAA78000, v34, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Subdevices must have UIDs", buf, 0x22u);
                }
                abort();
              }
              applesauce::CF::details::find_at_key<applesauce::CF::StringRef,__CFString const*&>((applesauce::CF::StringRef *)buf, (CFDictionaryRef)v8, v9);
              __int16 v22 = *(const void **)v45;
              *(void *)unsigned int v45 = *(void *)buf;
              *(void *)std::string buf = v22;
              if (v22) {
                CFRelease(v22);
              }
              if (v53)
              {
                *(void *)&v45[8] = v48;
                if (v48) {
                  CFRetain(v48);
                }
                if (!v53) {
                  goto LABEL_112;
                }
                uint64_t v23 = *(const void **)&v45[16];
                *(void *)&v45[16] = v49;
                if (v49) {
                  CFRetain(v49);
                }
                if (v23) {
                  CFRelease(v23);
                }
                if (!v53) {
LABEL_112:
                }
                  std::__throw_bad_optional_access[abi:ne180100]();
                *(void *)&v45[24] = v50;
                if (v50) {
                  CFRetain(v50);
                }
              }
              if (applesauce::CF::details::has_key<__CFString const*&>((CFDictionaryRef)v8, @"latency-in"))
              {
                applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*&>((applesauce::CF::NumberRef *)buf, (CFDictionaryRef)v8, @"latency-in");
                if (!*(void *)buf)
                {
                  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(exception, "Could not construct");
                  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                *(_DWORD *)&v45[32] = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf);
                if (*(void *)buf) {
                  CFRelease(*(CFTypeRef *)buf);
                }
              }
              else if (v53)
              {
                *(_DWORD *)&v45[32] = v51;
              }
              if (applesauce::CF::details::has_key<__CFString const*&>((CFDictionaryRef)v8, @"latency-out"))
              {
                applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*&>((applesauce::CF::NumberRef *)buf, (CFDictionaryRef)v8, @"latency-out");
                if (!*(void *)buf)
                {
                  unint64_t v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v40, "Could not construct");
                  __cxa_throw(v40, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                *(_DWORD *)&v45[36] = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf);
                if (*(void *)buf) {
                  CFRelease(*(CFTypeRef *)buf);
                }
              }
              else if (v53)
              {
                *(_DWORD *)&v45[36] = DWORD1(v51);
              }
              if (applesauce::CF::details::has_key<__CFString const*&>((CFDictionaryRef)v8, @"drift"))
              {
                applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*&>((applesauce::CF::NumberRef *)buf, (CFDictionaryRef)v8, @"drift");
                if (!*(void *)buf)
                {
                  uint64_t v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v39, "Could not construct");
                  __cxa_throw(v39, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                v45[40] = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf) != 0;
                if (*(void *)buf) {
                  CFRelease(*(CFTypeRef *)buf);
                }
              }
              else if (v53)
              {
                v45[40] = BYTE8(v51);
              }
              if (applesauce::CF::details::has_key<__CFString const*&>((CFDictionaryRef)v8, @"drift quality"))
              {
                applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*&>((applesauce::CF::NumberRef *)buf, (CFDictionaryRef)v8, @"drift quality");
                if (!*(void *)buf)
                {
                  uint64_t v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v38, "Could not construct");
                  __cxa_throw(v38, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                *(_DWORD *)&v45[44] = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf);
                if (*(void *)buf) {
                  CFRelease(*(CFTypeRef *)buf);
                }
              }
              else if (v53)
              {
                *(_DWORD *)&v45[44] = HIDWORD(v51);
              }
              if (applesauce::CF::details::has_key<__CFString const*&>((CFDictionaryRef)v8, @"don't pad"))
              {
                applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*&>((applesauce::CF::NumberRef *)buf, (CFDictionaryRef)v8, @"don't pad");
                if (!*(void *)buf)
                {
                  uint64_t v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v37, "Could not construct");
                  __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                BOOL v46 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf) == 0;
                if (*(void *)buf) {
                  CFRelease(*(CFTypeRef *)buf);
                }
              }
              else if (v53)
              {
                BOOL v46 = v52;
              }
              unint64_t v24 = a1[3];
              unint64_t v25 = a1[4];
              if (v24 >= v25)
              {
                uint64_t v26 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v24 - *v42) >> 3);
                unint64_t v27 = v26 + 1;
                if ((unint64_t)(v26 + 1) > 0x492492492492492) {
                  std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v28 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v25 - *v42) >> 3);
                if (2 * v28 > v27) {
                  unint64_t v27 = 2 * v28;
                }
                if (v28 >= 0x249249249249249) {
                  unint64_t v29 = 0x492492492492492;
                }
                else {
                  unint64_t v29 = v27;
                }
                *((void *)&v60 + 1) = a1 + 4;
                if (v29) {
                  unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v29);
                }
                else {
                  uint64_t v30 = 0;
                }
                uint64_t v7 = v9;
                unint64_t v31 = v29 + 56 * v26;
                *(void *)std::string buf = v29;
                *(void *)&long long v59 = v31;
                *(void *)&long long v60 = v29 + 56 * v30;
                *(void *)unint64_t v31 = *(void *)v45;
                *(void *)unsigned int v45 = 0;
                *(_OWORD *)(v31 + 8) = *(_OWORD *)&v45[8];
                *(void *)&v45[8] = 0;
                *(void *)(v31 + 24) = *(void *)&v45[24];
                *(unsigned char *)(v31 + 48) = v46;
                *(_OWORD *)(v31 + 32) = *(_OWORD *)&v45[32];
                *((void *)&v59 + 1) = v31 + 56;
                std::vector<Audio_Sub_Device_Description>::__swap_out_circular_buffer(v42, buf);
                uint64_t v32 = a1[3];
                std::__split_buffer<Audio_Sub_Device_Description>::~__split_buffer((uint64_t)buf);
                a1[3] = v32;
              }
              else
              {
                *(void *)unint64_t v24 = *(void *)v45;
                *(_OWORD *)(v24 + 8) = *(_OWORD *)&v45[8];
                *(void *)(v24 + 24) = *(void *)&v45[24];
                *(_OWORD *)unsigned int v45 = 0u;
                *(_OWORD *)(v24 + 32) = *(_OWORD *)&v45[32];
                *(unsigned char *)(v24 + 48) = v46;
                a1[3] = v24 + 56;
                uint64_t v7 = v9;
              }
              if (*(void *)&v45[8]) {
                CFRelease(*(CFTypeRef *)&v45[8]);
              }
              if (*(void *)v45) {
                CFRelease(*(CFTypeRef *)v45);
              }
              if (v53)
              {
                if (v50) {
                  CFRelease(v50);
                }
                if (v49) {
                  CFRelease(v49);
                }
                if (v48) {
                  CFRelease(v48);
                }
                if (cf) {
                  CFRelease(cf);
                }
              }
              if (v54[0]) {
                CFRelease(v54[0]);
              }
            }
            CFRelease(v8);
            if (v55[0]) {
              CFRelease(v55[0]);
            }
          }
          ++v6;
        }
        while (v6 != Count);
      }
      CFRelease(v4);
    }
  }
  return std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v56);
}

void sub_1BAE93608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, const void **a9, const void **a10, const void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, const void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,int a33,const void *a34)
{
  applesauce::CF::NumberRef::~NumberRef(a9);
  applesauce::CF::NumberRef::~NumberRef(a10);
  applesauce::CF::StringRef::~StringRef(a11);
  applesauce::CF::StringRef::~StringRef(&a17);
  if (a32) {
    Audio_Sub_Device_Description::~Audio_Sub_Device_Description((Audio_Sub_Device_Description *)&a25);
  }
  applesauce::CF::StringRef::~StringRef(&a34);
  Aggregate_Description_Dictionary::~Aggregate_Description_Dictionary((const void **)(v34 - 184));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v34 - 176));
  applesauce::CF::ArrayRef::~ArrayRef((const void **)(v34 - 168));
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](v34 - 160);
  _Unwind_Resume(a1);
}

void Aggregate_Description_Dictionary::~Aggregate_Description_Dictionary(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(unsigned char *a1, CFDictionaryRef theDict, const void *a3)
{
  CFTypeRef v4 = applesauce::CF::details::at_key<__CFString const*&>(theDict, a3);
  if (!v4) {
    goto LABEL_5;
  }
  unint64_t v5 = v4;
  CFRetain(v4);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFArrayGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    char v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(void *)a1 = v5;
  char v7 = 1;
LABEL_6:
  a1[8] = v7;
}

uint64_t *std::vector<Audio_Sub_Device_Description>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *(void *)(v2 - 56);
    v2 -= 56;
    *(void *)(v4 - 56) = v5;
    v4 -= 56;
    *(void *)uint64_t v2 = 0;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    *(void *)(v2 + 16) = 0;
    *(void *)(v4 + 24) = *(void *)(v2 + 24);
    *(void *)(v2 + 24) = 0;
    long long v6 = *(_OWORD *)(v2 + 32);
    *(unsigned char *)(v4 + 48) = *(unsigned char *)(v2 + 48);
    *(_OWORD *)(v4 + 32) = v6;
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  *__n128 result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<Audio_Sub_Device_Description>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    Audio_Sub_Device_Description::~Audio_Sub_Device_Description((Audio_Sub_Device_Description *)(i - 56));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t Aggregate_Description_Dictionary::get_BOOLean(Aggregate_Description_Dictionary *this, const __CFString *a2, const void *a3)
{
  if (!a2->isa)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  long long v6 = applesauce::CF::details::at_key<__CFString const*&>((CFDictionaryRef)a2->isa, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    CFRetain(v6);
    CFTypeID v8 = CFGetTypeID(v7);
    if (v8 == CFBooleanGetTypeID())
    {
      CFTypeRef v18 = v7;
      char v19 = 1;
      BOOL v9 = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)v7);
      uint64_t result = std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v18);
      goto LABEL_12;
    }
    CFRelease(v7);
  }
  LOBYTE(v18) = 0;
  char v19 = 0;
  if (!a2->isa)
  {
    CFTypeRef v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Could not construct");
    __cxa_throw(v14, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*&>(&v16, (CFDictionaryRef)a2->isa, a3);
  int v11 = v17;
  if (v17)
  {
    if (!v16)
    {
      int v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v15, "Could not construct");
      __cxa_throw(v15, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    BOOL v9 = applesauce::CF::convert_to<BOOL,0>(v16);
  }
  else
  {
    BOOL v9 = 0;
  }
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v16);
  uint64_t result = std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v18);
  if (!v11)
  {
    CFTypeRef v12 = (void *)MEMORY[0x1E4F1CFC0];
    goto LABEL_16;
  }
LABEL_12:
  CFTypeRef v12 = (void *)MEMORY[0x1E4F1CFD8];
  if (!v9) {
    CFTypeRef v12 = (void *)MEMORY[0x1E4F1CFC0];
  }
LABEL_16:
  *(void *)this = *v12;
  return result;
}

void sub_1BAE93AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  __cxa_free_exception(v11);
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a9);
  std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t Aggregate_Description_Dictionary::get_or_empty<applesauce::CF::StringRef>(void *a1, CFDictionaryRef theDict, const void *a3)
{
  uint64_t v4 = applesauce::CF::details::at_key<__CFString const*&>(theDict, a3);
  if (!v4) {
    goto LABEL_5;
  }
  uint64_t v5 = v4;
  CFRetain(v4);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFStringGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    uint64_t v5 = 0;
    LOBYTE(v8) = 0;
    char v9 = 0;
    goto LABEL_6;
  }
  char v9 = 1;
  uint64_t v8 = 0;
LABEL_6:
  *a1 = v5;
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v8);
}

uint64_t std::vector<Audio_Sub_Device_Description>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1 + 2;
  unint64_t v5 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v5)
  {
    uint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - *a1) >> 3);
    if ((unint64_t)(v9 + 1) > 0x492492492492492) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x249249249249249) {
      unint64_t v12 = 0x492492492492492;
    }
    else {
      unint64_t v12 = v11;
    }
    CFTypeRef v18 = v4;
    if (v12) {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v12;
    uint64_t v15 = v12 + 56 * v9;
    unint64_t v17 = v12 + 56 * v13;
    Audio_Sub_Device_Description::Audio_Sub_Device_Description(v15, a2);
    uint64_t v16 = v15 + 56;
    std::vector<Audio_Sub_Device_Description>::__swap_out_circular_buffer(a1, &v14);
    uint64_t v8 = a1[1];
    uint64_t result = std::__split_buffer<Audio_Sub_Device_Description>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    uint64_t result = Audio_Sub_Device_Description::Audio_Sub_Device_Description(v6, a2);
    uint64_t v8 = result + 56;
  }
  a1[1] = v8;
  return result;
}

void Aggregate_Device_Description::get_composition_dictionary(Aggregate_Device_Description *this, uint64_t a2)
{
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  unint64_t v5 = Mutable;
  uint64_t v38 = Mutable;
  if (!*(void *)a2)
  {
    *(void *)this = 0;
    if (!Mutable) {
      return;
    }
    goto LABEL_45;
  }
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::StringRef>(Mutable, @"uid", *(const void **)a2);
  unint64_t v6 = *(const void **)(a2 + 8);
  if (v6) {
    mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::StringRef>(v5, @"name", v6);
  }
  uint64_t v7 = *(const void **)(a2 + 40);
  if (v7) {
    mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::StringRef>(v5, @"master", v7);
  }
  uint64_t v8 = *(const void **)(a2 + 48);
  if (v8) {
    mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::StringRef>(v5, @"clock", v8);
  }
  uint64_t v9 = *(const void **)(a2 + 56);
  if (v9) {
    mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::BooleanRef>(v5, @"private", v9);
  }
  unint64_t v10 = *(const void **)(a2 + 64);
  if (v10) {
    mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::BooleanRef>(v5, @"stacked", v10);
  }
  uint64_t v26 = this;
  uint64_t v11 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  uint64_t v37 = v11;
  uint64_t v12 = *(void *)(a2 + 16);
  for (uint64_t i = *(void *)(a2 + 24); v12 != i; v12 += 56)
  {
    Audio_Sub_Device_Description::Audio_Sub_Device_Description((uint64_t)&v28, v12);
    unint64_t v14 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
    uint64_t v15 = v14;
    uint64_t v39 = v14;
    if (!v28) {
      __assert_rtn("get_composition_dictionary", "Aggregate_Device_Description.cpp", 74, "m_real_device_uid.is_valid()");
    }
    mcp_applesauce::CF::Dictionary_Builder::set_value<__CFString const*,applesauce::CF::StringRef>(v14, @"uid", v28);
    if (v29) {
      mcp_applesauce::CF::Dictionary_Builder::set_value<__CFString const*,applesauce::CF::StringRef>(v15, @"name", v29);
    }
    if (v30) {
      mcp_applesauce::CF::Dictionary_Builder::set_value<__CFString const*,applesauce::CF::NumberRef>(v15, @"channels-in", v30);
    }
    if (v31) {
      mcp_applesauce::CF::Dictionary_Builder::set_value<__CFString const*,applesauce::CF::NumberRef>(v15, @"channels-out", v31);
    }
    int valuePtr = v32;
    CFNumberRef v16 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!v16)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Dictionary_Builder::set_value<__CFString const*,applesauce::CF::NumberRef>(v15, @"latency-in", v16);
    CFRelease(v16);
    int valuePtr = v33;
    CFNumberRef v17 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!v17)
    {
      __int16 v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v22, "Could not construct");
      __cxa_throw(v22, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Dictionary_Builder::set_value<__CFString const*,applesauce::CF::NumberRef>(v15, @"latency-out", v17);
    CFRelease(v17);
    int valuePtr = v34;
    CFNumberRef v18 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!v18)
    {
      uint64_t v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v23, "Could not construct");
      __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Dictionary_Builder::set_value<__CFString const*,applesauce::CF::NumberRef>(v15, @"drift", v18);
    CFRelease(v18);
    int valuePtr = v35;
    CFNumberRef v19 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!v19)
    {
      unint64_t v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v24, "Could not construct");
      __cxa_throw(v24, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Dictionary_Builder::set_value<__CFString const*,applesauce::CF::NumberRef>(v15, @"drift quality", v19);
    CFRelease(v19);
    int valuePtr = v36 == 0;
    CFNumberRef v20 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!v20)
    {
      unint64_t v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v25, "Could not construct");
      __cxa_throw(v25, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Dictionary_Builder::set_value<__CFString const*,applesauce::CF::NumberRef>(v15, @"don't pad", v20);
    CFRelease(v20);
    mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&cf, v15);
    if (v15) {
      CFRelease(v15);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(v11, cf);
    if (cf) {
      CFRelease(cf);
    }
    if (v31) {
      CFRelease(v31);
    }
    if (v30) {
      CFRelease(v30);
    }
    if (v29) {
      CFRelease(v29);
    }
    if (v28) {
      CFRelease(v28);
    }
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&v28, v11);
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(v5, @"subdevices", v28);
  if (v28) {
    CFRelease(v28);
  }
  if (v11) {
    CFRelease(v11);
  }
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(v26, v5);
  if (v5) {
LABEL_45:
  }
    CFRelease(v5);
}

void sub_1BAE9424C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va);
  _Unwind_Resume(a1);
}

void mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1) {
    CFDictionaryAddValue(a1, a2, a3);
  }
}

void DSP_Host_Types::StreamConfiguration::add_to(DSP_Host_Types::StreamConfiguration *this, __CFArray **a2)
{
  CFTypeRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(DSP_Host_Types::StreamConfiguration *, CFTypeRef *))(*(void *)this + 24))(this, &Mutable);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&cf, Mutable);
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, cf);
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1BAE943CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_Types::StreamConfiguration::load_from(DSP_Host_Types::StreamConfiguration *this, CFDictionaryRef *a2)
{
  int v4 = DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::StreamSemanticType,DSP_Host_Types::StringLookup_StreamSemantic,unsigned int>::load_from((uint64_t)this + 24, a2);
  DSP_Host_Types::FormatDescription::init_set((DSP_Host_Types::StreamConfiguration *)((char *)this + 112));
  CFTypeRef v30 = a2;
  int v5 = DSP_Dictionariable::DictionarySet::maybe_load_from_under_key((uint64_t **)this + 30, a2, (uint64_t)this + 120);
  unint64_t v6 = (void *)*((void *)this + 30);
  uint64_t v7 = (void *)*((void *)this + 31);
  if (v6 == v7) {
    goto LABEL_7;
  }
  while (!*v6 || ((*(uint64_t (**)(void))(*(void *)*v6 + 32))(*v6) & 1) == 0)
  {
    if (++v6 == v7)
    {
      unint64_t v6 = v7;
      break;
    }
  }
  if (v6 == *((void **)this + 31))
  {
LABEL_7:
    DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::FormatDescription *)&v40, "current format");
    DSP_Host_Types::FormatDescription::operator=((uint64_t)this + 112, (uint64_t)&v40);
    unint64_t v40 = &unk_1F1486968;
    if (__p)
    {
      int v47 = __p;
      operator delete(__p);
    }
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v45);
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v44);
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v43);
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v42);
    unint64_t v40 = &unk_1F14869A8;
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v41);
  }
  uint64_t v9 = (void (***)(void))*((void *)this + 42);
  uint64_t v8 = (void (***)(void))*((void *)this + 43);
  if (v8 != v9)
  {
    unint64_t v10 = v8 - 19;
    uint64_t v11 = v8 - 19;
    uint64_t v12 = v8 - 19;
    do
    {
      uint64_t v13 = *v12;
      v12 -= 19;
      (*v13)(v11);
      v10 -= 19;
      BOOL v17 = v11 == v9;
      uint64_t v11 = v12;
    }
    while (!v17);
  }
  int v31 = v4 & v5;
  *((void *)this + 43) = v9;
  v38[0] = &unk_1F1487618;
  v38[1] = 0;
  uint64_t v38[2] = v30;
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(&theArray, *v30, @"supported formats");
  if (v37)
  {
    CFArrayRef v14 = theArray;
    if (theArray)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      CFArrayRef v34 = theArray;
      if (theArray) {
        CFIndex v33 = CFArrayGetCount(theArray);
      }
      else {
        CFIndex v33 = 0;
      }
      unint64_t v16 = 0;
      int v32 = (uint64_t *)((char *)this + 336);
      while (1)
      {
        BOOL v17 = v14 == v34 && v33 == v16;
        BOOL v18 = v17;
        if (Count == v16 || v18) {
          break;
        }
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&cf, v14, v16);
        DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::FormatDescription *)&v40, "");
        DSP_Host_Types::FormatDescription::init_set((DSP_Host_Types::FormatDescription *)&v40);
        DSP_Dictionariable::DictionarySet::maybe_load_from_under_key((uint64_t **)&__p, (CFDictionaryRef *)&cf, (uint64_t)v41);
        unint64_t v20 = *((void *)this + 43);
        unint64_t v19 = *((void *)this + 44);
        if (v20 >= v19)
        {
          unint64_t v22 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v20 - *v32) >> 3);
          unint64_t v23 = v22 + 1;
          if (v22 + 1 > 0x1AF286BCA1AF286) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v24 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v19 - *v32) >> 3);
          if (2 * v24 > v23) {
            unint64_t v23 = 2 * v24;
          }
          if (v24 >= 0xD79435E50D7943) {
            unint64_t v25 = 0x1AF286BCA1AF286;
          }
          else {
            unint64_t v25 = v23;
          }
          char v52 = (char *)this + 352;
          if (v25) {
            unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<DSP_Host_Types::FormatDescription>>(v25);
          }
          else {
            uint64_t v26 = 0;
          }
          unint64_t v48 = v25;
          CFTypeRef v49 = (DSP_Host_Types::FormatDescription *)(v25 + 152 * v22);
          CFTypeRef v50 = v49;
          unint64_t v51 = v25 + 152 * v26;
          DSP_Host_Types::FormatDescription::FormatDescription(v49, (const DSP_Host_Types::FormatDescription *)&v40);
          CFTypeRef v50 = (DSP_Host_Types::FormatDescription *)((char *)v50 + 152);
          std::vector<DSP_Host_Types::FormatDescription>::__swap_out_circular_buffer(v32, &v48);
          unint64_t v21 = *((void *)this + 43);
          std::__split_buffer<DSP_Host_Types::FormatDescription>::~__split_buffer((uint64_t)&v48);
        }
        else
        {
          DSP_Host_Types::FormatDescription::FormatDescription(*((DSP_Host_Types::FormatDescription **)this + 43), (const DSP_Host_Types::FormatDescription *)&v40);
          unint64_t v21 = v20 + 152;
          *((void *)this + 43) = v21;
        }
        *((void *)this + 43) = v21;
        unint64_t v40 = &unk_1F1486968;
        if (__p)
        {
          int v47 = __p;
          operator delete(__p);
        }
        DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v45);
        DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v44);
        DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v43);
        DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v42);
        unint64_t v40 = &unk_1F14869A8;
        std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v41);
        if (cf) {
          CFRelease(cf);
        }
        ++v16;
      }
      BOOL v15 = *((void *)this + 42) != *((void *)this + 43);
    }
    else
    {
      BOOL v15 = 0;
    }
    v31 &= v15;
  }
  int v27 = DSP_Dictionariable::SingleKvp<unsigned int>::load_from((uint64_t)this + 312, v30);
  uint64_t v28 = v31 & v27 & DSP_Dictionariable::SingleKvp<std::string>::load_from((uint64_t)this + 264, v30);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theArray);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v38);
  return v28;
}

void sub_1BAE94888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)va1);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::FormatDescription::init_set(DSP_Host_Types::FormatDescription *this)
{
  uint64_t v1 = (DSP_Host_Types::FormatDescription *)((char *)this + 128);
  if (*((void *)this + 16) == *((void *)this + 17))
  {
    DSP_Dictionariable::DictionarySet::add_kvp((DSP_Host_Types::FormatDescription *)((char *)this + 128), (DSP_Host_Types::FormatDescription *)((char *)this + 24));
    DSP_Dictionariable::DictionarySet::add_kvp(v1, (DSP_Host_Types::FormatDescription *)((char *)this + 56));
    DSP_Dictionariable::DictionarySet::add_kvp(v1, (DSP_Host_Types::FormatDescription *)((char *)this + 80));
    DSP_Dictionariable::DictionarySet::add_kvp(v1, (DSP_Host_Types::FormatDescription *)((char *)this + 104));
  }
}

void DSP_Host_Types::FormatDescription::add_to(DSP_Host_Types::FormatDescription *this, __CFArray **a2)
{
  DSP_Host_Types::FormatDescription::init_set(this);

  DSP_Dictionariable::DictionarySet::add_to((DSP_Host_Types::FormatDescription *)((char *)this + 128), a2);
}

uint64_t DSP_Host_Types::FormatDescription::load_from(uint64_t **this, CFDictionaryRef *a2)
{
  DSP_Host_Types::FormatDescription::init_set((DSP_Host_Types::FormatDescription *)this);

  return DSP_Dictionariable::DictionarySet::maybe_load_from_under_key(this + 16, a2, (uint64_t)(this + 1));
}

void DSP_Host_Types::FormatDescription::add_to(uint64_t **this, __CFDictionary **a2)
{
  DSP_Host_Types::FormatDescription::init_set((DSP_Host_Types::FormatDescription *)this);

  DSP_Dictionariable::DictionarySet::maybe_add_under_key(this + 16, a2, (uint64_t)(this + 1));
}

void DSP_Dictionariable::DictionarySet::add_kvp(DSP_Dictionariable::DictionarySet *this, DSP_Dictionariable::DictionariableKvp *a2)
{
  int v5 = (void *)*((void *)this + 1);
  unint64_t v4 = *((void *)this + 2);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *(void **)this;
    uint64_t v8 = ((uint64_t)v5 - *(void *)this) >> 3;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v12 = (char *)operator new(8 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v13 = &v12[8 * v8];
    *(void *)uint64_t v13 = a2;
    unint64_t v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        uint64_t v14 = *--v5;
        *((void *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      int v5 = *(void **)this;
    }
    *(void *)this = v13;
    *((void *)this + 1) = v6;
    *((void *)this + 2) = &v12[8 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    void *v5 = a2;
    unint64_t v6 = v5 + 1;
  }
  *((void *)this + 1) = v6;
}

void DSP_Host_Types::StreamConfiguration::add_to(DSP_Host_Types::StreamConfiguration *this, __CFDictionary **a2)
{
  DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::StreamSemanticType,DSP_Host_Types::StringLookup_StreamSemantic,unsigned int>::add_to((uint64_t)this + 24, a2);
  CFStringRef v4 = CFStringCreateWithBytes(0, (const UInt8 *)"current format", 14, 0x8000100u, 0);
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v5 = v4;
  unint64_t v6 = (const void **)((char *)this + 120);
  if (*((unsigned char *)this + 128))
  {
    uint64_t v7 = *v6;
    void *v6 = v4;
    CFRetain(v4);
    if (v7) {
      CFRelease(v7);
    }
  }
  else
  {
    std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>((void *)this + 15, v4);
    *((unsigned char *)this + 128) = 1;
  }
  CFRelease(v5);
  DSP_Host_Types::FormatDescription::init_set((DSP_Host_Types::StreamConfiguration *)((char *)this + 112));
  DSP_Dictionariable::DictionarySet::maybe_add_under_key((uint64_t **)this + 30, a2, (uint64_t)this + 120);
  if (*((void *)this + 42) != *((void *)this + 43))
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
    CFTypeRef v15 = Mutable;
    uint64_t v9 = *((void *)this + 42);
    uint64_t v10 = *((void *)this + 43);
    if (v9 == v10)
    {
      CFTypeRef v12 = Mutable;
    }
    else
    {
      uint64_t v11 = *((void *)this + 42);
      do
      {
        (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v11 + 40))(v11, &v15);
        v11 += 152;
        v9 += 152;
      }
      while (v11 != v10);
      CFTypeRef v12 = v15;
    }
    mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)&cf, v12);
    mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(*a2, @"supported formats", cf);
    if (cf) {
      CFRelease(cf);
    }
    if (v15) {
      CFRelease(v15);
    }
  }
  DSP_Dictionariable::SingleKvp<unsigned int>::add_to((uint64_t)this + 312, a2);
  DSP_Dictionariable::SingleKvp<std::string>::add_to((uint64_t)this + 264, a2);
}

void sub_1BAE94DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::StreamConfiguration::~StreamConfiguration(DSP_Host_Types::StreamConfiguration *this)
{
  DSP_Host_Types::StreamConfiguration::~StreamConfiguration(this);

  JUMPOUT(0x1C1859840);
}

{
  void *v2;
  void **v3;

  *(void *)this = &unk_1F147EC70;
  uint64_t v3 = (void **)((char *)this + 336);
  std::vector<DSP_Host_Types::FormatDescription>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::StreamConfiguration *)((char *)this + 312));
  *((void *)this + 33) = &unk_1F147F0A0;
  if (*((unsigned char *)this + 304) && *((char *)this + 303) < 0) {
    operator delete(*((void **)this + 35));
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::StreamConfiguration *)((char *)this + 264));
  *((void *)this + 14) = &unk_1F1486968;
  uint64_t v2 = (void *)*((void *)this + 30);
  if (v2)
  {
    *((void *)this + 31) = v2;
    operator delete(v2);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::StreamConfiguration *)((char *)this + 216));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::StreamConfiguration *)((char *)this + 192));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::StreamConfiguration *)((char *)this + 168));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::StreamConfiguration *)((char *)this + 136));
  *((void *)this + 14) = &unk_1F14869A8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 120);
  *((void *)this + 3) = &unk_1F147F0F8;
  std::__function::__value_func<char const* ()(DSP_Host_Types::StreamSemanticType)>::~__value_func[abi:ne180100]((void *)this + 10);
  std::__function::__value_func<DSP_Host_Types::StreamSemanticType ()(char const*)>::~__value_func[abi:ne180100]((void *)this + 6);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::StreamConfiguration *)((char *)this + 24));
  *(void *)this = &unk_1F147F060;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

void std::vector<DSP_Host_Types::FormatDescription>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    CFStringRef v4 = (char *)v1[1];
    CFStringRef v5 = **a1;
    if (v4 != v2)
    {
      unint64_t v6 = v4 - 152;
      uint64_t v7 = v4 - 152;
      uint64_t v8 = v4 - 152;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 152;
        (*v9)(v7);
        v6 -= 152;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      CFStringRef v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t DSP_Host_Types::AudioChannelConfiguration::load_from(DSP_Host_Types::AudioChannelConfiguration *this, CFDictionaryRef *a2)
{
  if (*((unsigned char *)this + 16) && (uint64_t v3 = (const void *)*((void *)this + 1)) != 0)
  {
    v10[0] = &unk_1F1487618;
    v10[1] = 0;
    void v10[2] = a2;
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,__CFString const*&>(&cf, *a2, v3);
    if (v9)
    {
      CFTypeRef v4 = cf;
      if (cf) {
        CFRetain(cf);
      }
      CFTypeRef v7 = v4;
      uint64_t v5 = DSP_Host_Types::AudioChannelConfiguration::load_from(applesauce::CF::DictionaryRef const&)::$_0::operator()((uint64_t)this, (CFDictionaryRef *)&v7);
      if (v7) {
        CFRelease(v7);
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
    DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v10);
    return v5;
  }
  else
  {
    return DSP_Host_Types::AudioChannelConfiguration::load_from(applesauce::CF::DictionaryRef const&)::$_0::operator()((uint64_t)this, a2);
  }
}

void sub_1BAE95130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
}

uint64_t DSP_Host_Types::AudioChannelConfiguration::load_from(applesauce::CF::DictionaryRef const&)::$_0::operator()(uint64_t a1, CFDictionaryRef *a2)
{
  int v4 = DSP_Dictionariable::SingleKvp<unsigned int>::load_from(a1 + 24, a2);
  int v5 = v4 & DSP_Dictionariable::SingleKvp<unsigned int>::load_from(a1 + 48, a2);
  uint64_t v6 = v5 & DSP_Dictionariable::SingleKvp<unsigned int>::load_from(a1 + 72, a2);
  uint64_t v18 = a1;
  uint64_t v20 = a1 + 96;
  std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100]((uint64_t *)(a1 + 96));
  v23[0] = &unk_1F1487618;
  v23[1] = 0;
  v23[2] = a2;
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(&theArray, *a2, @"channel descriptions");
  if (v22)
  {
    CFArrayRef v7 = theArray;
    if (theArray)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      CFArrayRef v8 = theArray;
      if (theArray) {
        CFIndex v9 = CFArrayGetCount(theArray);
      }
      else {
        CFIndex v9 = 0;
      }
      for (unint64_t i = 0; ; ++i)
      {
        BOOL v12 = v7 == v8 && v9 == i;
        BOOL v13 = v12;
        if (Count == i || v13) {
          break;
        }
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&cf, v7, i);
        uint64_t v14 = (std::__shared_weak_count *)operator new(0x78uLL);
        v14->__shared_owners_ = 0;
        v14->__shared_weak_owners_ = 0;
        v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F150;
        CFStringRef v15 = CFStringCreateWithBytes(0, (const UInt8 *)"", 0, 0x8000100u, 0);
        if (!v15)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        v14[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F1A0;
        std::__optional_destruct_base<applesauce::CF::StringRef,false>::__optional_destruct_base[abi:ne180100]<applesauce::CF::StringRef const&>((uint64_t)&v14[1].__shared_owners_, v15);
        CFRelease(v15);
        v14[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147ECB0;
        std::string::basic_string[abi:ne180100]<0>(__p, "channel label");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v14[2].__vftable, (uint64_t)__p);
        v14[2].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1487570;
        LOBYTE(v14[2].__shared_weak_owners_) = 0;
        BYTE4(v14[2].__shared_weak_owners_) = 0;
        if (v27 < 0) {
          operator delete(__p[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "channel flags");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v14[3].__vftable, (uint64_t)__p);
        v14[3].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1487570;
        LOBYTE(v14[3].__shared_weak_owners_) = 0;
        BYTE4(v14[3].__shared_weak_owners_) = 0;
        if (v27 < 0) {
          operator delete(__p[0]);
        }
        v14[4].__vftable = 0;
        v14[4].__shared_owners_ = 0;
        v14[4].__shared_weak_owners_ = 0;
        *(void *)&long long v25 = v14 + 1;
        *((void *)&v25 + 1) = v14;
        ((void (*)(std::__shared_weak_count *, CFTypeRef *))v14[1].__on_zero_shared_weak)(&v14[1], &cf);
        std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100](v20, &v25);
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        if (cf) {
          CFRelease(cf);
        }
      }
      BOOL v10 = *(void *)(v18 + 96) != *(void *)(v18 + 104);
    }
    else
    {
      BOOL v10 = 0;
    }
    uint64_t v6 = v6 & v10;
  }
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theArray);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v23);
  return v6;
}

void sub_1BAE954A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, const void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::__shared_weak_count::~__shared_weak_count(v25);
  operator delete(v27);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a17);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a12);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)&a14);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::AudioChannelConfiguration::ChannelDescription::add_to(DSP_Host_Types::AudioChannelConfiguration::ChannelDescription *this, __CFArray **a2)
{
  CFTypeRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(DSP_Host_Types::AudioChannelConfiguration::ChannelDescription *, CFTypeRef *))(*(void *)this + 24))(this, &Mutable);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&cf, Mutable);
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, cf);
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1BAE95610(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_Types::AudioChannelConfiguration::ChannelDescription::load_from(DSP_Host_Types::AudioChannelConfiguration::ChannelDescription *this, CFDictionaryRef *a2)
{
  int v4 = DSP_Dictionariable::SingleKvp<unsigned int>::load_from((uint64_t)this + 24, a2);
  unsigned int v5 = DSP_Dictionariable::SingleKvp<unsigned int>::load_from((uint64_t)this + 48, a2);
  *((void *)this + 10) = *((void *)this + 9);
  v31[0] = &unk_1F1487618;
  v31[1] = 0;
  v31[2] = a2;
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(&theArray, *a2, @"coordinates");
  if (v30)
  {
    CFArrayRef v6 = theArray;
    if (theArray)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      if (!v30) {
LABEL_40:
      }
        std::__throw_bad_optional_access[abi:ne180100]();
    }
    else
    {
      CFIndex Count = 0;
    }
    unint64_t v8 = 0;
    while (1)
    {
      CFArrayRef v11 = theArray;
      if (theArray)
      {
        CFIndex v12 = CFArrayGetCount(theArray);
        if (!v6) {
          break;
        }
      }
      else
      {
        CFIndex v12 = 0;
        if (!v6) {
          break;
        }
      }
      if (v8 == Count) {
        break;
      }
      if (v6 == v11 && v8 == v12) {
        break;
      }
      if (CFArrayGetCount(v6) <= v8 || (CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v6, v8)) == 0)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not find item");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      float v15 = applesauce::CF::convert_to<float,0>(ValueAtIndex);
      float v16 = v15;
      uint64_t v18 = (float *)*((void *)this + 10);
      unint64_t v17 = *((void *)this + 11);
      if ((unint64_t)v18 >= v17)
      {
        uint64_t v20 = (float *)*((void *)this + 9);
        uint64_t v21 = v18 - v20;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v23 = v17 - (void)v20;
        if (v23 >> 1 > v22) {
          unint64_t v22 = v23 >> 1;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v24);
          uint64_t v20 = (float *)*((void *)this + 9);
          uint64_t v18 = (float *)*((void *)this + 10);
        }
        else
        {
          uint64_t v25 = 0;
        }
        uint64_t v26 = (float *)(v24 + 4 * v21);
        *uint64_t v26 = v16;
        unint64_t v19 = v26 + 1;
        while (v18 != v20)
        {
          int v27 = *((_DWORD *)v18-- - 1);
          *((_DWORD *)v26-- - 1) = v27;
        }
        *((void *)this + 9) = v26;
        *((void *)this + 10) = v19;
        *((void *)this + 11) = v24 + 4 * v25;
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *uint64_t v18 = v15;
        unint64_t v19 = v18 + 1;
      }
      ++v8;
      *((void *)this + 10) = v19;
      if (!v30) {
        goto LABEL_40;
      }
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  if (v8 == 3) {
    uint64_t v9 = v4 & v5;
  }
  else {
    uint64_t v9 = 0;
  }
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theArray);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v31);
  return v9;
}

void sub_1BAE95884(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)va1);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::AudioChannelConfiguration::ChannelDescription::add_to(DSP_Host_Types::AudioChannelConfiguration::ChannelDescription *this, __CFDictionary **a2)
{
  DSP_Dictionariable::SingleKvp<unsigned int>::add_to((uint64_t)this + 24, a2);
  DSP_Dictionariable::SingleKvp<unsigned int>::add_to((uint64_t)this + 48, a2);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  cf[1] = Mutable;
  uint64_t v5 = (_DWORD *)*((void *)this + 9);
  CFArrayRef v6 = (_DWORD *)*((void *)this + 10);
  while (v5 != v6)
  {
    LODWORD(cf[0]) = *v5;
    CFNumberRef v7 = CFNumberCreate(0, kCFNumberFloatType, cf);
    if (!v7)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)cf, Mutable);
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(*a2, @"coordinates", cf[0]);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1BAE959F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>::description(uint64_t a1@<X0>, void *a2@<X8>)
{
  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_) {
    CFRelease(cf.__begin_);
  }
  CFStringRef v4 = CFCopyDescription(v8);
  CFStringRef v5 = v4;
  if (v4)
  {
    CFIndex Length = CFStringGetLength(v4);
    CFIndex v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    std::vector<char>::value_type __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if (v7) {
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    }
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1BAE95B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void DSP_Host_Types::AudioChannelConfiguration::ChannelDescription::~ChannelDescription(DSP_Host_Types::AudioChannelConfiguration::ChannelDescription *this)
{
  *(void *)this = &unk_1F147ECB0;
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::AudioChannelConfiguration::ChannelDescription *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::AudioChannelConfiguration::ChannelDescription *)((char *)this + 24));
  *(void *)this = &unk_1F147F1A0;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);

  JUMPOUT(0x1C1859840);
}

{
  void *v2;

  *(void *)this = &unk_1F147ECB0;
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::AudioChannelConfiguration::ChannelDescription *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::AudioChannelConfiguration::ChannelDescription *)((char *)this + 24));
  *(void *)this = &unk_1F147F1A0;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf) {
    CFRelease(cf);
  }
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1BAE95D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F150;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F150;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void DSP_Host_Types::AudioChannelConfiguration::add_to(DSP_Host_Types::AudioChannelConfiguration *this, __CFDictionary **a2)
{
  if (*((unsigned char *)this + 16) && *((void *)this + 1))
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
    CFArrayRef v6 = Mutable;
    DSP_Host_Types::AudioChannelConfiguration::add_to(mcp_applesauce::CF::Dictionary_Builder &)const::$_0::operator()((uint64_t)this, &v6);
    if (!*((unsigned char *)this + 16)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&cf, Mutable);
    mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>(*a2, *((const void **)this + 1), cf);
    if (cf) {
      CFRelease(cf);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  else
  {
    DSP_Host_Types::AudioChannelConfiguration::add_to(mcp_applesauce::CF::Dictionary_Builder &)const::$_0::operator()((uint64_t)this, a2);
  }
}

void sub_1BAE95F38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::AudioChannelConfiguration::add_to(mcp_applesauce::CF::Dictionary_Builder &)const::$_0::operator()(uint64_t a1, __CFDictionary **a2)
{
  DSP_Dictionariable::SingleKvp<unsigned int>::add_to(a1 + 24, a2);
  DSP_Dictionariable::SingleKvp<unsigned int>::add_to(a1 + 48, a2);
  DSP_Dictionariable::SingleKvp<unsigned int>::add_to(a1 + 72, a2);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  CFTypeRef v9 = Mutable;
  CFArrayRef v6 = *(void **)(a1 + 96);
  CFStringRef v5 = *(void **)(a1 + 104);
  if (v6 == v5)
  {
    CFTypeRef v7 = Mutable;
  }
  else
  {
    do
    {
      if (*v6) {
        (*(void (**)(void, CFTypeRef *))(*(void *)*v6 + 40))(*v6, &v9);
      }
      v6 += 2;
    }
    while (v6 != v5);
    CFTypeRef v7 = v9;
  }
  mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)&cf, v7);
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(*a2, @"channel descriptions", cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v9) {
    CFRelease(v9);
  }
}

void sub_1BAE96048(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_Types::CreateProcessorConfiguration::load_from(DSP_Host_Types::CreateProcessorConfiguration *this, CFDictionaryRef *a2)
{
  int v4 = DSP_Dictionariable::SingleKvp<std::string>::load_from((uint64_t)this + 24, a2);
  return v4 & DSP_Dictionariable::SingleKvp<std::string>::load_from((uint64_t)this + 72, a2);
}

void DSP_Host_Types::CreateProcessorConfiguration::add_to(DSP_Host_Types::CreateProcessorConfiguration *this, __CFDictionary **a2)
{
  DSP_Dictionariable::SingleKvp<std::string>::add_to((uint64_t)this + 24, a2);

  DSP_Dictionariable::SingleKvp<std::string>::add_to((uint64_t)this + 72, a2);
}

uint64_t DSP_Host_Types::DeviceDSPOffloadInfo::load_from(DSP_Host_Types::DeviceDSPOffloadInfo *this, CFDictionaryRef *a2)
{
  return DSP_Dictionariable::SingleKvp<std::string>::load_from((uint64_t)this + 24, a2);
}

void DSP_Host_Types::DeviceDSPOffloadInfo::add_to(DSP_Host_Types::DeviceDSPOffloadInfo *this, __CFDictionary **a2)
{
}

void DSP_Host_Types::DeviceDescription::add_to(DSP_Host_Types::DeviceDescription *this, __CFArray **a2)
{
  CFTypeRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(DSP_Host_Types::DeviceDescription *, CFTypeRef *))(*(void *)this + 24))(this, &Mutable);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&cf, Mutable);
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, cf);
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1BAE96428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_Types::DeviceDescription::load_from(DSP_Host_Types::DeviceDescription *this, CFDictionaryRef *a2)
{
  DSP_Host_Types::DeviceDescription::init_set(this);
  int v4 = (uint64_t *)*((void *)this + 92);
  CFStringRef v5 = (uint64_t *)*((void *)this + 93);
  int v6 = 1;
  while (v4 != v5)
  {
    uint64_t v7 = *v4++;
    v6 &= (*(uint64_t (**)(uint64_t, CFDictionaryRef *))(*(void *)v7 + 24))(v7, a2);
  }
  int v8 = DSP_Host_Types::AudioChannelConfiguration::load_from((DSP_Host_Types::DeviceDescription *)((char *)this + 424), a2);
  int v9 = DSP_Host_Types::AudioChannelConfiguration::load_from((DSP_Host_Types::DeviceDescription *)((char *)this + 544), a2);
  CFDictionaryRef v10 = *a2;
  if (v10) {
    CFRetain(v10);
  }
  CFTypeRef cf = v10;
  std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100]((uint64_t *)this + 83);
  uint64_t v26 = &unk_1F1487618;
  uint64_t v27 = 0;
  p_CFTypeRef cf = &cf;
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(&v24, v10, @"hw streams input");
  if (v25) {
    BOOL v11 = DSP_Host_Types::load_list_from<DSP_Host_Types::StreamConfiguration>((void *)this + 83, &v24);
  }
  else {
    BOOL v11 = 0;
  }
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v24);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)&v26);
  std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100]((uint64_t *)this + 89);
  CFIndex v12 = (long long *)*((void *)this + 83);
  BOOL v13 = (long long *)*((void *)this + 84);
  while (v12 != v13)
  {
    uint64_t v14 = *(void *)v12;
    if (*(void *)v12 && *(unsigned char *)(v14 + 44) && *(_DWORD *)(v14 + 40) == 2)
    {
      std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((uint64_t)this + 712, v12);
      float v15 = v12 + 1;
      float v16 = (long long *)*((void *)this + 84);
      if (v12 + 1 == v16)
      {
        BOOL v13 = v12;
      }
      else
      {
        do
        {
          BOOL v13 = v15;
          long long v17 = *v15;
          *(void *)float v15 = 0;
          *((void *)v15 + 1) = 0;
          uint64_t v18 = (std::__shared_weak_count *)*((void *)v15 - 1);
          *(v15 - 1) = v17;
          if (v18) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v18);
          }
          ++v15;
        }
        while (v13 + 1 != v16);
        float v15 = (long long *)*((void *)this + 84);
      }
      while (v15 != v13)
      {
        unint64_t v19 = (std::__shared_weak_count *)*((void *)v15 - 1);
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        --v15;
      }
      *((void *)this + 84) = v13;
    }
    else
    {
      ++v12;
    }
  }
  uint64_t v20 = (uint64_t *)((char *)this + 688);
  std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100](v20);
  uint64_t v26 = &unk_1F1487618;
  uint64_t v27 = 0;
  p_CFTypeRef cf = &cf;
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(&v24, (CFDictionaryRef)cf, @"hw streams output");
  if (v25) {
    BOOL v21 = DSP_Host_Types::load_list_from<DSP_Host_Types::StreamConfiguration>(v20, &v24);
  }
  else {
    BOOL v21 = 0;
  }
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v24);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)&v26);
  if (cf) {
    CFRelease(cf);
  }
  return v6 & v8 & v9 & v11 & v21;
}

void sub_1BAE966CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, char a10, uint64_t a11, char a12)
{
}

void DSP_Host_Types::DeviceDescription::init_set(DSP_Host_Types::DeviceDescription *this)
{
  if (*((void *)this + 92) == *((void *)this + 93))
  {
    uint64_t v2 = (DSP_Host_Types::DeviceDescription *)((char *)this + 736);
    DSP_Dictionariable::DictionarySet::add_kvp((DSP_Host_Types::DeviceDescription *)((char *)this + 736), (DSP_Host_Types::DeviceDescription *)((char *)this + 24));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DeviceDescription *)((char *)this + 72));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DeviceDescription *)((char *)this + 120));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DeviceDescription *)((char *)this + 144));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DeviceDescription *)((char *)this + 168));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DeviceDescription *)((char *)this + 192));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DeviceDescription *)((char *)this + 216));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DeviceDescription *)((char *)this + 248));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DeviceDescription *)((char *)this + 280));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DeviceDescription *)((char *)this + 304));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DeviceDescription *)((char *)this + 328));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DeviceDescription *)((char *)this + 352));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DeviceDescription *)((char *)this + 376));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DeviceDescription *)((char *)this + 400));
  }
}

BOOL DSP_Host_Types::load_list_from<DSP_Host_Types::StreamConfiguration>(void *a1, CFArrayRef *a2)
{
  CFArrayRef v2 = *a2;
  if (!*a2) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(*a2);
  CFArrayRef v4 = *a2;
  if (*a2) {
    CFIndex v12 = CFArrayGetCount(*a2);
  }
  else {
    CFIndex v12 = 0;
  }
  for (unint64_t i = 0; ; ++i)
  {
    BOOL v7 = v2 == v4 && v12 == i;
    BOOL v8 = v7;
    if (Count == i || v8) {
      break;
    }
    applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&cf, v2, i);
    int v9 = (std::__shared_weak_count *)operator new(0x180uLL);
    v9->__shared_owners_ = 0;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F1E0;
    CFStringRef v10 = CFStringCreateWithBytes(0, (const UInt8 *)"", 0, 0x8000100u, 0);
    if (!v10)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    v9[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F060;
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::__optional_destruct_base[abi:ne180100]<applesauce::CF::StringRef const&>((uint64_t)&v9[1].__shared_owners_, v10);
    CFRelease(v10);
    v9[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147EC70;
    std::string::basic_string[abi:ne180100]<0>(__p, "stream semantic");
    DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::StreamSemanticType,DSP_Host_Types::StringLookup_StreamSemantic,unsigned int>::StringifiedKvp(&v9[2].__vftable, (uint64_t)__p);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::FormatDescription *)&v9[5].__shared_weak_owners_, "current format");
    std::string::basic_string[abi:ne180100]<0>(__p, "stream id");
    DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v9[12].__vftable, (uint64_t)__p);
    v9[12].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F0A0;
    LOBYTE(v9[12].__shared_weak_owners_) = 0;
    LOBYTE(v9[13].__shared_weak_owners_) = 0;
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "latency samples");
    DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v9[14].__vftable, (uint64_t)__p);
    v9[14].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1487570;
    LOBYTE(v9[14].__shared_weak_owners_) = 0;
    BYTE4(v9[14].__shared_weak_owners_) = 0;
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    v9[15].__vftable = 0;
    v9[15].__shared_owners_ = 0;
    v9[15].__shared_weak_owners_ = 0;
    *(void *)&long long v16 = v9 + 1;
    *((void *)&v16 + 1) = v9;
    ((void (*)(std::__shared_weak_count *, CFTypeRef *))v9[1].__on_zero_shared_weak)(&v9[1], &cf);
    std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((uint64_t)a1, &v16);
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    if (cf) {
      CFRelease(cf);
    }
  }
  return *a1 != a1[1];
}

void sub_1BAE96AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a13);
  _Unwind_Resume(a1);
}

void sub_1BAE96BC0()
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  JUMPOUT(0x1BAE96BB0);
}

const void **DSP_Host_Types::DeviceDescription::load_from(applesauce::CF::DictionaryRef const&)::$_0::~$_0(const void **a1)
{
  CFArrayRef v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void DSP_Host_Types::DeviceDescription::add_to(uint64_t **this, __CFDictionary **a2)
{
  DSP_Host_Types::DeviceDescription::init_set((DSP_Host_Types::DeviceDescription *)this);
  CFArrayRef v4 = this[92];
  CFStringRef v5 = this[93];
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    (*(void (**)(uint64_t, __CFDictionary **))(*(void *)v6 + 16))(v6, a2);
  }
  CFTypeRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  BOOL v7 = this[83];
  BOOL v8 = this[84];
  while (v7 != v8)
  {
    if (*v7) {
      (*(void (**)(uint64_t, CFTypeRef *))(*(void *)*v7 + 40))(*v7, &Mutable);
    }
    v7 += 2;
  }
  int v9 = this[89];
  CFStringRef v10 = this[90];
  while (v9 != v10)
  {
    if (*v9) {
      (*(void (**)(uint64_t, CFTypeRef *))(*(void *)*v9 + 40))(*v9, &Mutable);
    }
    v9 += 2;
  }
  mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)&cf, Mutable);
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(*a2, @"hw streams input", cf);
  if (cf) {
    CFRelease(cf);
  }
  BOOL v11 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  CFTypeRef cf = v11;
  CFIndex v12 = this[86];
  BOOL v13 = this[87];
  if (v12 != v13)
  {
    do
    {
      if (*v12) {
        (*(void (**)(uint64_t, CFTypeRef *))(*(void *)*v12 + 40))(*v12, &cf);
      }
      v12 += 2;
    }
    while (v12 != v13);
    BOOL v11 = cf;
  }
  mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)&v14, v11);
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(*a2, @"hw streams output", v14);
  if (v14) {
    CFRelease(v14);
  }
  if (this[86] != this[87])
  {
    DSP_Host_Types::AudioChannelConfiguration::add_to((DSP_Host_Types::AudioChannelConfiguration *)(this + 53), a2);
    DSP_Host_Types::AudioChannelConfiguration::add_to((DSP_Host_Types::AudioChannelConfiguration *)(this + 68), a2);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1BAE96E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::DeviceDescription::~DeviceDescription(DSP_Host_Types::DeviceDescription *this)
{
  DSP_Host_Types::DeviceDescription::~DeviceDescription(this);

  JUMPOUT(0x1C1859840);
}

{
  void *v2;
  void **v3;

  *(void *)this = &unk_1F147EE48;
  CFArrayRef v2 = (void *)*((void *)this + 92);
  if (v2)
  {
    *((void *)this + 93) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 712);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 688);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 664);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *((void *)this + 68) = &unk_1F1486A58;
  uint64_t v3 = (void **)((char *)this + 640);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 616));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 592));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 568));
  *((void *)this + 68) = &unk_1F1486A98;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 552);
  *((void *)this + 53) = &unk_1F1486A58;
  uint64_t v3 = (void **)((char *)this + 520);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 496));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 472));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 448));
  *((void *)this + 53) = &unk_1F1486A98;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 432);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 400));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 376));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 352));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 328));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 304));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 280));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 248));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 216));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 192));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 168));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 144));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 120));
  *((void *)this + 9) = &unk_1F147F0A0;
  if (*((unsigned char *)this + 112) && *((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 72));
  *((void *)this + 3) = &unk_1F147F0A0;
  if (*((unsigned char *)this + 64) && *((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 24));
  *(void *)this = &unk_1F147F300;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

uint64_t DSP_Host_Types::IOContextDescription::load_from(DSP_Host_Types::IOContextDescription *this, CFDictionaryRef *a2)
{
  if (*((unsigned char *)this + 16) && (uint64_t v3 = (const void *)*((void *)this + 1)) != 0)
  {
    v10[0] = &unk_1F1487618;
    v10[1] = 0;
    void v10[2] = a2;
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,__CFString const*&>(&cf, *a2, v3);
    if (v9)
    {
      CFTypeRef v4 = cf;
      if (cf) {
        CFRetain(cf);
      }
      CFTypeRef v7 = v4;
      uint64_t v5 = DSP_Host_Types::IOContextDescription::load_from(applesauce::CF::DictionaryRef const&)::$_0::operator()((uint64_t)this, (CFDictionaryRef *)&v7);
      if (v7) {
        CFRelease(v7);
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
    DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v10);
    return v5;
  }
  else
  {
    return DSP_Host_Types::IOContextDescription::load_from(applesauce::CF::DictionaryRef const&)::$_0::operator()((uint64_t)this, a2);
  }
}

void sub_1BAE971EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
}

uint64_t DSP_Host_Types::IOContextDescription::load_from(applesauce::CF::DictionaryRef const&)::$_0::operator()(uint64_t a1, CFDictionaryRef *a2)
{
  v54[4] = *MEMORY[0x1E4F143B8];
  DSP_Host_Types::FormatDescription::init_set((DSP_Host_Types::FormatDescription *)(a1 + 48));
  int v4 = DSP_Dictionariable::DictionarySet::maybe_load_from_under_key((uint64_t **)(a1 + 176), a2, a1 + 56);
  DSP_Host_Types::FormatDescription::init_set((DSP_Host_Types::FormatDescription *)(a1 + 200));
  int v5 = DSP_Dictionariable::DictionarySet::maybe_load_from_under_key((uint64_t **)(a1 + 328), a2, a1 + 208);
  int v6 = DSP_Dictionariable::SingleKvp<unsigned int>::load_from(a1 + 352, a2);
  int v7 = DSP_Dictionariable::SingleKvp<unsigned int>::load_from(a1 + 376, a2);
  int v8 = DSP_Host_Types::AudioChannelConfiguration::load_from((DSP_Host_Types::AudioChannelConfiguration *)(a1 + 400), a2);
  unsigned int v9 = DSP_Dictionariable::SingleKvp<unsigned int>::load_from(a1 + 544, a2);
  CFStringRef v10 = (_OWORD *)(a1 + 568);
  BOOL v11 = *(std::__shared_weak_count **)(a1 + 576);
  *(_OWORD *)(a1 + 568) = 0u;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (!*a2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,__CFString const*>(&v49, *a2, @"dsp offload description");
  if (v50)
  {
    _ZNSt3__115allocate_sharedB8ne180100I26DSP_Host_OffloadDictionaryNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v51);
    CFIndex v12 = (DSP_Host_OffloadDictionary *)v51;
    BOOL v13 = *(std::__shared_weak_count **)(a1 + 576);
    _OWORD *v10 = v51;
    if (v13)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      CFTypeRef v14 = *(DSP_Host_OffloadDictionary **)v10;
    }
    else
    {
      CFTypeRef v14 = v12;
    }
    DSP_Host_OffloadDictionary::deep_copy_from(v14, (const __CFString *)v49);
  }
  uint64_t v15 = v4 & v5 & v6 & v7 & v8 & v9;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(void **)(a1 + 32));
  *(void *)(a1 + 24) = a1 + 32;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  v48[0] = &unk_1F1487618;
  v48[1] = 0;
  v48[2] = a2;
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(&theArray, *a2, @"io context semantic list");
  if (v47)
  {
    if (!theArray)
    {
      char v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v36, "Could not construct");
      __cxa_throw(v36, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFIndex Count = CFArrayGetCount(theArray);
    unsigned int v38 = v15;
    DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing((DSP_Host_Types::StringLookup_AudioProcessing *)&v51);
    if (Count)
    {
      unint64_t v17 = 0;
      uint64_t v18 = 0;
      do
      {
        if (!v47) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        if (!theArray)
        {
          unint64_t v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v22, "Could not construct");
          __cxa_throw(v22, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::details::at_as<std::string>(v41, theArray, v17);
        int v19 = v43;
        if (v43)
        {
          *(_OWORD *)va_list __p = *(_OWORD *)v41;
          unsigned int v45 = v42;
          v41[1] = 0;
          unsigned int v42 = 0;
          v41[0] = 0;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "");
        }
        if (SHIBYTE(v45) >= 0) {
          uint64_t v20 = __p;
        }
        else {
          uint64_t v20 = (void **)__p[0];
        }
        unsigned int v21 = std::function<DSP_Host_Types::AudioProcessingType ()(char const*)>::operator()(v53, (uint64_t)v20);
        if (SHIBYTE(v45) < 0) {
          operator delete(__p[0]);
        }
        if (v19 && SHIBYTE(v42) < 0) {
          operator delete(v41[0]);
        }
        std::__tree<DSP_Host_Types::AudioProcessingType>::__emplace_unique_key_args<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::AudioProcessingType const&>((uint64_t **)(a1 + 24), v21, v21);
        ++v18;
        ++v17;
      }
      while (Count != v17);
    }
    else
    {
      uint64_t v18 = 0;
    }
    if (Count == v18) {
      uint64_t v15 = v38;
    }
    else {
      uint64_t v15 = 0;
    }
    std::__function::__value_func<char const* ()(DSP_Host_Types::AudioProcessingType)>::~__value_func[abi:ne180100](v54);
    std::__function::__value_func<DSP_Host_Types::AudioProcessingType ()(char const*)>::~__value_func[abi:ne180100](&v51);
  }
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 520));
  v41[0] = &unk_1F1487618;
  v41[1] = 0;
  unsigned int v42 = a2;
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(&v39, *a2, @"io context stream id list");
  if (v40)
  {
    if (!v39)
    {
      char v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v37, "Could not construct");
      __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFIndex v23 = CFArrayGetCount(v39);
    unsigned int v24 = v15;
    if (v23)
    {
      unint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = (struct type_info *)MEMORY[0x1E4FBA338];
      do
      {
        if (!v40) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        if (!v39)
        {
          CFIndex v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v33, "Could not construct");
          __cxa_throw(v33, v27, MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::details::at_as<std::string>(&v51, v39, v25);
        if ((_BYTE)v53)
        {
          *(_OWORD *)va_list __p = v51;
          unsigned int v45 = v52;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "");
        }
        uint64_t v28 = (void *)HIBYTE(v45);
        char v29 = HIBYTE(v45);
        if (SHIBYTE(v45) < 0) {
          uint64_t v28 = __p[1];
        }
        if (v28)
        {
          unint64_t v30 = *(void *)(a1 + 528);
          if (v30 >= *(void *)(a1 + 536))
          {
            std::vector<std::string>::pointer v32 = std::vector<std::string>::__push_back_slow_path<std::string const&>((std::vector<std::string> *)(a1 + 520), (long long *)__p);
          }
          else
          {
            if (SHIBYTE(v45) < 0)
            {
              std::string::__init_copy_ctor_external(*(std::string **)(a1 + 528), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
            }
            else
            {
              long long v31 = *(_OWORD *)__p;
              *(void *)(v30 + 16) = v45;
              *(_OWORD *)unint64_t v30 = v31;
            }
            std::vector<std::string>::pointer v32 = (std::vector<std::string>::pointer)(v30 + 24);
            *(void *)(a1 + 528) = v30 + 24;
          }
          *(void *)(a1 + 528) = v32;
          char v29 = HIBYTE(v45);
        }
        if (v29 < 0) {
          operator delete(__p[0]);
        }
        ++v26;
        ++v25;
      }
      while (v23 != v25);
    }
    else
    {
      uint64_t v26 = 0;
    }
    if (v23 == v26) {
      uint64_t v15 = v24;
    }
    else {
      uint64_t v15 = 0;
    }
  }
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v39);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v41);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theArray);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v48);
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v49);
  return v15;
}

void sub_1BAE97874()
{
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](&v0);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)&v1);
  JUMPOUT(0x1BAE978B0);
}

void sub_1BAE9787C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  __cxa_free_exception(v9);
  JUMPOUT(0x1BAE97888);
}

void sub_1BAE9789C()
{
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](&v0);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)&v1);
  JUMPOUT(0x1BAE978F0);
}

void sub_1BAE978A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  __cxa_free_exception(v9);
  JUMPOUT(0x1BAE978B0);
}

void sub_1BAE978C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  __cxa_free_exception(v9);
  JUMPOUT(0x1BAE978F8);
}

void sub_1BAE978D4(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BAE978F8);
}

void sub_1BAE978E8()
{
}

void *std::__function::__value_func<char const* ()(DSP_Host_Types::AudioProcessingType)>::~__value_func[abi:ne180100](void *a1)
{
  CFArrayRef v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<DSP_Host_Types::AudioProcessingType ()(char const*)>::~__value_func[abi:ne180100](void *a1)
{
  CFArrayRef v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

const __CFString *applesauce::CF::details::at_as<std::string>(unsigned char *a1, CFArrayRef theArray, unint64_t a3)
{
  CFStringRef result = (const __CFString *)CFArrayGetCount(theArray);
  if ((unint64_t)result > a3 && (CFStringRef result = (const __CFString *)CFArrayGetValueAtIndex(theArray, a3)) != 0)
  {
    return (const __CFString *)applesauce::CF::convert_as<std::string,0>((uint64_t)a1, result);
  }
  else
  {
    *a1 = 0;
    a1[24] = 0;
  }
  return result;
}

uint64_t std::function<DSP_Host_Types::AudioProcessingType ()(char const*)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v3);
}

CFTypeID applesauce::CF::convert_as<std::string,0>(uint64_t a1, const __CFString *a2)
{
  CFTypeID TypeID = CFStringGetTypeID();
  CFTypeID result = CFGetTypeID(a2);
  if (TypeID == result)
  {
    CFTypeID result = (CFTypeID)applesauce::CF::details::CFString_get_value<false>((uint64_t)&v7, a2);
    *(_OWORD *)a1 = v7;
    *(void *)(a1 + 16) = v8;
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
    *(unsigned char *)a1 = 0;
  }
  *(unsigned char *)(a1 + 24) = v6;
  return result;
}

void DSP_Host_Types::IOContextDescription::add_to(DSP_Host_Types::IOContextDescription *this, __CFDictionary **a2)
{
  if (*((unsigned char *)this + 16) && *((void *)this + 1))
  {
    CFTypeRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
    DSP_Host_Types::IOContextDescription::add_to(mcp_applesauce::CF::Dictionary_Builder &)const::$_0::operator()((uint64_t)this, (__CFDictionary **)&Mutable);
    if (!*((unsigned char *)this + 16)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&cf, Mutable);
    mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>(*a2, *((const void **)this + 1), cf);
    if (cf) {
      CFRelease(cf);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  else
  {
    DSP_Host_Types::IOContextDescription::add_to(mcp_applesauce::CF::Dictionary_Builder &)const::$_0::operator()((uint64_t)this, a2);
  }
}

void sub_1BAE97C3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::IOContextDescription::add_to(mcp_applesauce::CF::Dictionary_Builder &)const::$_0::operator()(uint64_t a1, __CFDictionary **a2)
{
  v29[4] = *MEMORY[0x1E4F143B8];
  DSP_Host_Types::FormatDescription::init_set((DSP_Host_Types::FormatDescription *)(a1 + 48));
  DSP_Dictionariable::DictionarySet::maybe_add_under_key((uint64_t **)(a1 + 176), a2, a1 + 56);
  DSP_Host_Types::FormatDescription::init_set((DSP_Host_Types::FormatDescription *)(a1 + 200));
  DSP_Dictionariable::DictionarySet::maybe_add_under_key((uint64_t **)(a1 + 328), a2, a1 + 208);
  DSP_Dictionariable::SingleKvp<unsigned int>::add_to(a1 + 352, a2);
  DSP_Dictionariable::SingleKvp<unsigned int>::add_to(a1 + 376, a2);
  DSP_Host_Types::AudioChannelConfiguration::add_to((DSP_Host_Types::AudioChannelConfiguration *)(a1 + 400), a2);
  DSP_Dictionariable::SingleKvp<unsigned int>::add_to(a1 + 544, a2);
  uint64_t v4 = *(void *)(a1 + 568);
  if (v4)
  {
    CFDictionaryRef v5 = *(const __CFDictionary **)(v4 + 16);
    if (v5)
    {
      if (CFDictionaryGetCount(v5))
      {
        v25[0] = 0;
        DSP_Host_OffloadDictionary::create_into(*(DSP_Host_OffloadDictionary **)(a1 + 568), (const __CFDictionary **)v25);
      }
    }
  }
  if (*(void *)(a1 + 40))
  {
    CFTypeRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
    unsigned int v24 = Mutable;
    std::string::basic_string[abi:ne180100]<0>(cf, "");
    DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v25, (uint64_t)cf);
    LOBYTE(v26) = 0;
    char v27 = 0;
    v25[0] = &unk_1F1480A80;
    DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing((DSP_Host_Types::StringLookup_AudioProcessing *)v28);
    if ((char)v23 < 0) {
      operator delete((void *)cf[0]);
    }
    long long v7 = *(void **)(a1 + 24);
    if (v7 != (void *)(a1 + 32))
    {
      do
      {
        int v26 = *((_DWORD *)v7 + 7);
        char v27 = 1;
        DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::StringLookup_AudioProcessing,unsigned int>::get_string(cf, (uint64_t)v25);
        if ((v23 & 0x80u) == 0) {
          uint64_t v8 = cf;
        }
        else {
          uint64_t v8 = (CFTypeRef *)cf[0];
        }
        if (v8)
        {
          if ((v23 & 0x80u) == 0) {
            CFIndex v9 = v23;
          }
          else {
            CFIndex v9 = (CFIndex)cf[1];
          }
          CFStringRef v10 = CFStringCreateWithBytes(0, (const UInt8 *)v8, v9, 0x8000100u, 0);
          if (!v10)
          {
            exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          if ((v23 & 0x80) == 0) {
            goto LABEL_19;
          }
        }
        else
        {
          CFStringRef v10 = 0;
          if ((v23 & 0x80) == 0) {
            goto LABEL_19;
          }
        }
        operator delete((void *)cf[0]);
LABEL_19:
        mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::StringRef>(Mutable, v10);
        if (v10) {
          CFRelease(v10);
        }
        BOOL v11 = (void *)v7[1];
        if (v11)
        {
          do
          {
            CFIndex v12 = v11;
            BOOL v11 = (void *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            CFIndex v12 = (void *)v7[2];
            BOOL v13 = *v12 == (void)v7;
            long long v7 = v12;
          }
          while (!v13);
        }
        long long v7 = v12;
      }
      while (v12 != (void *)(a1 + 32));
    }
    mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)cf, Mutable);
    mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(*a2, @"io context semantic list", cf[0]);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    v25[0] = &unk_1F1480A80;
    std::__function::__value_func<char const* ()(DSP_Host_Types::AudioProcessingType)>::~__value_func[abi:ne180100](v29);
    std::__function::__value_func<DSP_Host_Types::AudioProcessingType ()(char const*)>::~__value_func[abi:ne180100](v28);
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v25);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  if (*(void *)(a1 + 520) == *(void *)(a1 + 528)) {
    return;
  }
  CFMutableArrayRef v14 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  v25[0] = v14;
  uint64_t v15 = *(void *)(a1 + 520);
  uint64_t v16 = *(void *)(a1 + 528);
  while (v15 != v16)
  {
    if (*(char *)(v15 + 23) < 0)
    {
      CFIndex v18 = *(void *)(v15 + 8);
      if (!v18) {
        goto LABEL_44;
      }
      unint64_t v17 = *(const UInt8 **)v15;
      if (!*(void *)v15)
      {
        mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::StringRef>(v14, 0);
        goto LABEL_44;
      }
    }
    else
    {
      unint64_t v17 = (const UInt8 *)v15;
      CFIndex v18 = *(unsigned __int8 *)(v15 + 23);
      if (!*(unsigned char *)(v15 + 23)) {
        goto LABEL_44;
      }
    }
    CFStringRef v19 = CFStringCreateWithBytes(0, v17, v18, 0x8000100u, 0);
    if (!v19)
    {
      unsigned int v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v21, "Could not construct");
      __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFMutableArrayRef v14 = (CFMutableArrayRef)v25[0];
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::StringRef>((__CFArray *)v25[0], v19);
    CFRelease(v19);
LABEL_44:
    v15 += 24;
  }
  mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)cf, v14);
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(*a2, @"io context stream id list", cf[0]);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v25[0]) {
    CFRelease(v25[0]);
  }
}

void sub_1BAE98098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::StringLookup_AudioProcessing,unsigned int>::get_string(void *a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 20)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  uint64_t v3 = (char *)std::function<char const* ()(DSP_Host_Types::AudioProcessingType)>::operator()(*(void *)(a2 + 80), *(_DWORD *)(a2 + 16));

  return std::string::basic_string[abi:ne180100]<0>(a1, v3);
}

void DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::StringLookup_AudioProcessing,unsigned int>::~StringifiedKvp(DSP_Dictionariable::DictionariableKvp *a1)
{
  *(void *)a1 = &unk_1F1480A80;
  std::__function::__value_func<char const* ()(DSP_Host_Types::AudioProcessingType)>::~__value_func[abi:ne180100]((void *)a1 + 7);
  std::__function::__value_func<DSP_Host_Types::AudioProcessingType ()(char const*)>::~__value_func[abi:ne180100]((void *)a1 + 3);

  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F1480A80;
  std::__function::__value_func<char const* ()(DSP_Host_Types::AudioProcessingType)>::~__value_func[abi:ne180100]((void *)a1 + 7);
  std::__function::__value_func<DSP_Host_Types::AudioProcessingType ()(char const*)>::~__value_func[abi:ne180100]((void *)a1 + 3);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t std::function<char const* ()(DSP_Host_Types::AudioProcessingType)>::operator()(uint64_t a1, int a2)
{
  int v3 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 48))(a1, &v3);
}

uint64_t DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::StringLookup_AudioProcessing,unsigned int>::load_from(uint64_t a1, CFDictionaryRef *a2)
{
  if (*(unsigned char *)(a1 + 20)) {
    *(unsigned char *)(a1 + 20) = 0;
  }
  v8[0] = &unk_1F1487618;
  v8[1] = 0;
  CFIndex v9 = a2;
  if (applesauce::CF::details::has_key<__CFString const*&>(*a2, *(const void **)(a1 + 8)))
  {
    applesauce::CF::details::find_at_key<std::string,__CFString const*&>((uint64_t)__p, *v9, *(const void **)(a1 + 8));
    if (v7 >= 0) {
      int v3 = __p;
    }
    else {
      int v3 = (void **)__p[0];
    }
    *(_DWORD *)(a1 + 16) = std::function<DSP_Host_Types::AudioProcessingType ()(char const*)>::operator()(*(void *)(a1 + 48), (uint64_t)v3);
    *(unsigned char *)(a1 + 20) = 1;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v4 = 1;
  }
  else
  {
    uint64_t v4 = 0;
  }
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v8);
  return v4;
}

void DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::StringLookup_AudioProcessing,unsigned int>::add_to(uint64_t a1, __CFDictionary **a2)
{
  if (!*(unsigned char *)(a1 + 20)) {
    return;
  }
  uint64_t v4 = (char *)std::function<char const* ()(DSP_Host_Types::AudioProcessingType)>::operator()(*(void *)(a1 + 80), *(_DWORD *)(a1 + 16));
  std::string::basic_string[abi:ne180100]<0>(&bytes, v4);
  if ((char)v12 < 0)
  {
    CFIndex v5 = numBytes;
    if (!numBytes)
    {
LABEL_11:
      operator delete(bytes);
      return;
    }
    p_bytes = bytes;
    char v6 = (const void **)(a1 + 8);
    if (!bytes)
    {
      CFStringRef v8 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    CFIndex v5 = v12;
    if (!v12) {
      return;
    }
    char v6 = (const void **)(a1 + 8);
    p_bytes = (const UInt8 *)&bytes;
  }
  CFStringRef v8 = CFStringCreateWithBytes(0, p_bytes, v5, 0x8000100u, 0);
  if (!v8)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_8:
  mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(*a2, *v6, v8);
  if (v8) {
    CFRelease(v8);
  }
  if ((char)v12 < 0) {
    goto LABEL_11;
  }
}

void sub_1BAE98480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSP_Host_Types::ConfigurationChangeRequest::debug_log_device_summary(DSP_Host_Types::ConfigurationChangeRequest *this, const char *a2)
{
  v146[19] = *MEMORY[0x1E4F143B8];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v129);
  if (a2 && *a2)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"\n[hal_dsp] ", 11);
    size_t v4 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)a2, v4);
    CFIndex v5 = " - debug_log_device_summary\n";
    uint64_t v6 = 28;
  }
  else
  {
    CFIndex v5 = "\n[hal_dsp] ConfigurationChangeRequest::debug_log_device_summary\n";
    uint64_t v6 = 64;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"[hal_dsp] \t", 11);
  char v7 = "DEACTIVATION\n";
  if (*((unsigned char *)this + 41) && *((unsigned char *)this + 40)) {
    char v7 = "ACTIVATION\n";
  }
  size_t v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"[hal_dsp] \tIO Context Frame Size: ", 34);
  CFIndex v9 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"[hal_dsp] \tIO Context Channel Count (in/out): ", 46);
  CFStringRef v10 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" / ", 3);
  BOOL v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"[hal_dsp] \tIO Context Sample Rate (in/out): ", 44);
  unsigned __int8 v12 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" / ", 3);
  BOOL v13 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"[hal_dsp] \tIO Context Processing Type(s): ", 42);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v137, (uint64_t)&__p);
  LOBYTE(v138) = 0;
  char v139 = 0;
  v137[0] = &unk_1F1480A80;
  DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing((DSP_Host_Types::StringLookup_AudioProcessing *)v140);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  CFMutableArrayRef v14 = (char *)*((void *)this + 12);
  uint64_t v15 = (char **)((char *)this + 104);
  if (v14 == (char *)this + 104)
  {
    if (!*((unsigned char *)this + 636)) {
      goto LABEL_33;
    }
  }
  else
  {
    char v16 = 0;
    do
    {
      int v138 = *((_DWORD *)v14 + 7);
      char v139 = 1;
      BOOL v17 = v138 == 7;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)" [ ", 3);
      DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::StringLookup_AudioProcessing,unsigned int>::get_string(&__p, (uint64_t)v137);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v20 = (char *)*((void *)v14 + 1);
      if (v20)
      {
        do
        {
          unsigned int v21 = (char **)v20;
          uint64_t v20 = *(char **)v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          unsigned int v21 = (char **)*((void *)v14 + 2);
          BOOL v22 = *v21 == v14;
          CFMutableArrayRef v14 = (char *)v21;
        }
        while (!v22);
      }
      v16 |= v17;
      CFMutableArrayRef v14 = (char *)v21;
    }
    while (v21 != v15);
    if (!*((unsigned char *)this + 636))
    {
      if (v16) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)" | use case id: n/a", 19);
      }
      goto LABEL_33;
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)" | use case id: ", 16);
  if (!*((unsigned char *)this + 636)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  v23.i32[0] = bswap32(*((_DWORD *)this + 158));
  *(int8x8_t *)v23.i8 = vzip1_s8(*(int8x8_t *)v23.i8, *(int8x8_t *)v23.i8);
  v24.i64[0] = 0x1F0000001FLL;
  v24.i64[1] = 0x1F0000001FLL;
  v25.i64[0] = 0x5F0000005FLL;
  v25.i64[1] = 0x5F0000005FLL;
  *(int8x8_t *)v23.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v25, (uint32x4_t)vsraq_n_s32(v24, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v23.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v23.i8, (int8x8_t)0x2E002E002E002ELL);
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 4;
  LODWORD(__p.__r_.__value_.__l.__data_) = vmovn_s16(v23).u32[0];
  __p.__r_.__value_.__s.__data_[4] = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)&__p, 4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_33:
  if (*((void *)this + 80))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)" | offload ids: ", 16);
    DSP_Host_OffloadDictionary::get_debug_string((DSP_Host_OffloadDictionary *)&__p, *((void *)this + 80));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v26 = &__p;
    }
    else {
      int v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v27 = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)v26, v27);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v28 = *v15;
    if (*v15)
    {
      char v29 = (char **)((char *)this + 104);
      do
      {
        unsigned int v30 = *((_DWORD *)v28 + 7);
        BOOL v31 = v30 >= 8;
        if (v30 >= 8) {
          std::vector<std::string>::pointer v32 = (char **)v28;
        }
        else {
          std::vector<std::string>::pointer v32 = (char **)(v28 + 8);
        }
        if (v31) {
          char v29 = (char **)v28;
        }
        uint64_t v28 = *v32;
      }
      while (*v32);
      if (v29 != v15 && *((_DWORD *)v29 + 7) <= 8u) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)" | offload ids: <null>", 22);
      }
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"[hal_dsp] \tIO Context Client-Supplied Virtual Layout: ", 54);
  DSP_Host_Types::AudioChannelConfiguration::debug_summary_string((DSP_Host_Types::AudioChannelConfiguration *)&__p, (const char *)this + 472, "");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFIndex v33 = &__p;
  }
  else {
    CFIndex v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v34 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v34 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)v33, v34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"\n", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v35 = *((void *)this + 75);
  uint64_t v36 = *((void *)this + 74);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"[hal_dsp} \tIO Context Stream Order (", 36);
  unint64_t v37 = (v35 - v36) / 24;
  unsigned int v38 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"): ", 3);
  uint64_t v39 = 0;
  unint64_t v40 = 0;
  while (v37 != v40)
  {
    uint64_t v41 = *((void *)this + 74) + v39;
    int v42 = *(char *)(v41 + 23);
    if (v42 >= 0) {
      uint64_t v43 = *((void *)this + 74) + v39;
    }
    else {
      uint64_t v43 = *(void *)v41;
    }
    if (v42 >= 0) {
      uint64_t v44 = *(unsigned __int8 *)(v41 + 23);
    }
    else {
      uint64_t v44 = *(void *)(v41 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, v43, v44);
    if (++v40 >= v37) {
      unsigned int v45 = "\n";
    }
    else {
      unsigned int v45 = ", ";
    }
    if (v40 >= v37) {
      uint64_t v46 = 1;
    }
    else {
      uint64_t v46 = 2;
    }
    v39 += 24;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)v45, v46);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"[hal_dsp] \t", 11);
  char v47 = (void *)std::ostream::operator<<();
  unint64_t v48 = (AMCP::Log::Scope_Registry *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" devices described...\n", 22);
  AMCP::Log::Scope_Registry::get(v48);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
  CFTypeRef v49 = *(NSObject **)__p.__r_.__value_.__l.__data_;
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
  {
    char v50 = pthread_self();
    mach_port_t v51 = pthread_mach_thread_np(v50);
    unint64_t v52 = 0;
    uint64_t v53 = 0;
    int v54 = 47;
    do
    {
      int v55 = &aLibraryCachesC_139[v52];
      if (v54 == 47) {
        uint64_t v53 = &aLibraryCachesC_139[v52];
      }
      int v54 = v55[1];
      if (!v55[1]) {
        break;
      }
      BOOL v31 = v52++ >= 0xFFF;
    }
    while (!v31);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(&__dst, (uint64_t)v131);
    if (v53) {
      CFTypeRef v56 = v53 + 1;
    }
    else {
      CFTypeRef v56 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/DSP/API Types/DSP_Host_API_MethodTypes.cpp";
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 67109891;
    HIDWORD(__p.__r_.__value_.__r.__words[0]) = v51;
    LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v56;
    WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(__p.__r_.__value_.__r.__words[2]) = 1061;
    *(_WORD *)uint64_t v143 = 2081;
    *(void *)&v143[2] = p_dst;
    _os_log_impl(&dword_1BAA78000, v49, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d %{private}s", (uint8_t *)&__p, 0x22u);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::operator=();
  __p.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA408];
  std::string::size_type v125 = __p.__r_.__value_.__r.__words[0];
  std::string::size_type v58 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  std::string::size_type v59 = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(__p.__r_.__value_.__r.__words[0] - 24)) = v59;
  std::string::size_type v123 = v58;
  std::string::size_type v124 = v59;
  __p.__r_.__value_.__r.__words[2] = v58;
  *(void *)uint64_t v143 = MEMORY[0x1E4FBA470] + 16;
  if (v145 < 0) {
    operator delete(v144);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C1859700]();
  if (*((void *)this + 83) != *((void *)this + 82))
  {
    uint64_t v60 = 0;
    while (1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"[hal_dsp] \tIndex ", 17);
      uint64_t v61 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)":\n", 2);
      long long v62 = (std::__shared_weak_count **)(*((void *)this + 82) + 16 * v60);
      char v63 = *v62;
      int v64 = BYTE1((*v62)[5].__shared_weak_owners_) ? LOBYTE(v63[5].__shared_weak_owners_) : 0;
      char v65 = v62 + 1;
      float v66 = v62[1];
      int v121 = v66;
      if (!v66) {
        break;
      }
      atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
      mach_port_t v67 = *v62;
      __int16 v122 = *v62;
      if (!*v65)
      {
        uint64_t v118 = 0;
        char v119 = 1;
        mach_port_t v117 = 0;
        goto LABEL_107;
      }
      uint64_t v118 = *v65;
      atomic_fetch_add_explicit(&(*v65)->__shared_owners_, 1uLL, memory_order_relaxed);
      mach_port_t v68 = *v65;
      mach_port_t v67 = *v62;
      if (v68)
      {
        char v119 = 0;
        char v120 = 0;
        mach_port_t v117 = v68;
        atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        char v120 = 0;
        mach_port_t v117 = 0;
        char v119 = 1;
      }
LABEL_108:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"[hal_dsp] \t\t", 12);
      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[10]>(&__p, (uint64_t)&(*v62)[1].__shared_weak_owners_);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int8x8_t v69 = &__p;
      }
      else {
        int8x8_t v69 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v70 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v70 = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)v69, v70);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)" [", 2);
      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[10]>(&__dst, (uint64_t)&(*v62)[3].__shared_weak_owners_);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int32x4_t v71 = &__dst;
      }
      else {
        int32x4_t v71 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v72 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v72 = __dst.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)v71, v72);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"]\n", 2);
      if (v64) {
        int16x8_t v73 = "[hal_dsp] \t\tIs Default: YES\n";
      }
      else {
        int16x8_t v73 = "";
      }
      if (v64) {
        uint64_t v74 = 28;
      }
      else {
        uint64_t v74 = 0;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)v73, v74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"[hal_dsp] \t\tSample Rate: ", 25);
      mach_port_t v75 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)" (", 2);
      xpc_object_t v76 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)")\n", 2);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      if (BYTE4(v63[7].__shared_weak_owners_))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)" IN: ", 5);
        unsigned int shared_weak_owners = 774778414;
        if (BYTE4(v63[7].__shared_weak_owners_)) {
          unsigned int shared_weak_owners = v63[7].__shared_weak_owners_;
        }
        v77.i32[0] = bswap32(shared_weak_owners);
        *(int8x8_t *)v77.i8 = vzip1_s8(*(int8x8_t *)v77.i8, *(int8x8_t *)v77.i8);
        v79.i64[0] = 0x1F0000001FLL;
        v79.i64[1] = 0x1F0000001FLL;
        v80.i64[0] = 0x5F0000005FLL;
        v80.i64[1] = 0x5F0000005FLL;
        *(int8x8_t *)v77.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v80, (uint32x4_t)vsraq_n_s32(v79, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v77.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v77.i8, (int8x8_t)0x2E002E002E002ELL);
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 4;
        LODWORD(__dst.__r_.__value_.__l.__data_) = vmovn_s16(v77).u32[0];
        __dst.__r_.__value_.__s.__data_[4] = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)&__dst, 4);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
      }
      if (BYTE4(v63[8].__shared_weak_owners_))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)" OUT: ", 6);
        unsigned int v82 = 774778414;
        if (BYTE4(v63[8].__shared_weak_owners_)) {
          unsigned int v82 = v63[8].__shared_weak_owners_;
        }
        v81.i32[0] = bswap32(v82);
        *(int8x8_t *)v81.i8 = vzip1_s8(*(int8x8_t *)v81.i8, *(int8x8_t *)v81.i8);
        v83.i64[0] = 0x1F0000001FLL;
        v83.i64[1] = 0x1F0000001FLL;
        v84.i64[0] = 0x5F0000005FLL;
        v84.i64[1] = 0x5F0000005FLL;
        *(int8x8_t *)v81.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v84, (uint32x4_t)vsraq_n_s32(v83, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v81.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v81.i8, (int8x8_t)0x2E002E002E002ELL);
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 4;
        LODWORD(__dst.__r_.__value_.__l.__data_) = vmovn_s16(v81).u32[0];
        __dst.__r_.__value_.__s.__data_[4] = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)&__dst, 4);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
      }
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>(&v128, (uint64_t)v143);
      __p.__r_.__value_.__r.__words[0] = v125;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v125 - 24)) = v124;
      __p.__r_.__value_.__r.__words[2] = v123;
      *(void *)uint64_t v143 = MEMORY[0x1E4FBA470] + 16;
      if (v145 < 0) {
        operator delete(v144);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1C1859700](v146);
      std::string::size_type v85 = HIBYTE(v128.__r_.__value_.__r.__words[2]);
      if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v85 = v128.__r_.__value_.__l.__size_;
      }
      if (v85)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"[hal_dsp] \t\tData Source Type: ", 30);
        if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          mach_port_t v86 = &v128;
        }
        else {
          mach_port_t v86 = (std::string *)v128.__r_.__value_.__r.__words[0];
        }
        if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v87 = HIBYTE(v128.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v87 = v128.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)v86, v87);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"\n", 1);
      }
      if (BYTE1(v67[17].__shared_owners_))
      {
        if (LOBYTE(v67[17].__shared_owners_)) {
          int8x8_t v88 = "encr on";
        }
        else {
          int8x8_t v88 = "encr off";
        }
      }
      else
      {
        int8x8_t v88 = "";
      }
      int32x4_t v89 = (AMCP::Log::Scope_Registry *)std::string::basic_string[abi:ne180100]<0>(&__p, v88);
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v128.__r_.__value_.__l.__data_);
      }
      std::string v128 = __p;
      std::string::size_type v90 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v90 = __p.__r_.__value_.__l.__size_;
      }
      if (v90)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"[hal_dsp] \t\tBT ECNR: ", 21);
        if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int16x8_t v91 = &v128;
        }
        else {
          int16x8_t v91 = (std::string *)v128.__r_.__value_.__r.__words[0];
        }
        if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v92 = HIBYTE(v128.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v92 = v128.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)v91, v92);
        int32x4_t v89 = (AMCP::Log::Scope_Registry *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"\n", 1);
      }
      int v93 = *v62;
      if ((std::__shared_weak_count_vtbl *)(*v62)[27].__shared_weak_owners_ != (*v62)[28].__vftable)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"[hal_dsp] \t\tInput Streams: ", 27);
        DSP_Host_Types::ConfigurationChangeRequest::debug_log_device_summary(char const*)const::$_3::operator()(&__p, (uint64_t **)&(*v62)[27].__shared_weak_owners_);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          mach_port_t v94 = &__p;
        }
        else {
          mach_port_t v94 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v95 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v95 = __p.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)v94, v95);
        int32x4_t v89 = (AMCP::Log::Scope_Registry *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"\n", 1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        int v93 = *v62;
      }
      if ((std::__shared_weak_count_vtbl *)v93[29].__shared_weak_owners_ != v93[30].__vftable)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"[hal_dsp] \t\tReference Streams: ", 31);
        DSP_Host_Types::ConfigurationChangeRequest::debug_log_device_summary(char const*)const::$_3::operator()(&__p, (uint64_t **)&(*v62)[29].__shared_weak_owners_);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v96 = &__p;
        }
        else {
          uint64_t v96 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v97 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v97 = __p.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)v96, v97);
        int32x4_t v89 = (AMCP::Log::Scope_Registry *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"\n", 1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        int v93 = *v62;
      }
      if ((std::__shared_weak_count_vtbl *)v93[28].__shared_weak_owners_ != v93[29].__vftable)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"[hal_dsp] \t\tOutput Streams: ", 28);
        DSP_Host_Types::ConfigurationChangeRequest::debug_log_device_summary(char const*)const::$_3::operator()(&__p, (uint64_t **)&(*v62)[28].__shared_weak_owners_);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v98 = &__p;
        }
        else {
          std::string v98 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v99 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v99 = __p.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)v98, v99);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"\n", 1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"[hal_dsp] \t\tDevice AC Layouts: ", 31);
        if ((std::__shared_weak_count_vtbl *)v122[28].__shared_weak_owners_ == v122[29].__vftable)
        {
          std::string::basic_string[abi:ne180100]<0>(v126, "N/A");
        }
        else
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
          DSP_Host_Types::AudioChannelConfiguration::debug_summary_string((DSP_Host_Types::AudioChannelConfiguration *)&__dst, (const char *)&v122[17].__shared_weak_owners_, "pref - ");
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v100 = &__dst;
          }
          else {
            char v100 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v101 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v101 = __dst.__r_.__value_.__l.__size_;
          }
          uint64_t v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)v100, v101);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)" | ", 3);
          DSP_Host_Types::AudioChannelConfiguration::debug_summary_string((DSP_Host_Types::AudioChannelConfiguration *)v134, (const char *)&v122[22].__shared_weak_owners_, "dflt - ");
          if ((v135 & 0x80u) == 0) {
            uint64_t v103 = v134;
          }
          else {
            uint64_t v103 = (void **)v134[0];
          }
          if ((v135 & 0x80u) == 0) {
            uint64_t v104 = v135;
          }
          else {
            uint64_t v104 = (uint64_t)v134[1];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)v103, v104);
          if ((char)v135 < 0) {
            operator delete(v134[0]);
          }
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>(v126, (uint64_t)v143);
          __p.__r_.__value_.__r.__words[0] = v125;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v125 - 24)) = v124;
          __p.__r_.__value_.__r.__words[2] = v123;
          *(void *)uint64_t v143 = MEMORY[0x1E4FBA470] + 16;
          if (v145 < 0) {
            operator delete(v144);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1C1859700](v146);
        }
        if ((v127 & 0x80u) == 0) {
          char v105 = v126;
        }
        else {
          char v105 = (void **)v126[0];
        }
        if ((v127 & 0x80u) == 0) {
          uint64_t v106 = v127;
        }
        else {
          uint64_t v106 = (uint64_t)v126[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)v105, v106);
        int32x4_t v89 = (AMCP::Log::Scope_Registry *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"\n", 1);
        if ((char)v127 < 0) {
          operator delete(v126[0]);
        }
      }
      AMCP::Log::Scope_Registry::get(v89);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
      unint64_t v107 = *(NSObject **)__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v108 = pthread_self();
        mach_port_t v109 = pthread_mach_thread_np(v108);
        unint64_t v110 = 0;
        __int16 v111 = 0;
        int v112 = 47;
        do
        {
          __int16 v113 = &aLibraryCachesC_139[v110];
          if (v112 == 47) {
            __int16 v111 = &aLibraryCachesC_139[v110];
          }
          int v112 = v113[1];
          if (!v113[1]) {
            break;
          }
          BOOL v31 = v110++ >= 0xFFF;
        }
        while (!v31);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(&__dst, (uint64_t)v131);
        if (v111) {
          uint64_t v114 = v111 + 1;
        }
        else {
          uint64_t v114 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/DSP/API Types/DSP_Host_API_MethodTypes.cpp";
        }
        uint64_t v115 = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v115 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        LODWORD(__p.__r_.__value_.__l.__data_) = 67109891;
        HIDWORD(__p.__r_.__value_.__r.__words[0]) = v109;
        LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v114;
        WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(__p.__r_.__value_.__r.__words[2]) = 1148;
        *(_WORD *)uint64_t v143 = 2081;
        *(void *)&v143[2] = v115;
        _os_log_impl(&dword_1BAA78000, v107, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d %{private}s", (uint8_t *)&__p, 0x22u);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::operator=();
      __p.__r_.__value_.__r.__words[0] = v125;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v125 - 24)) = v124;
      __p.__r_.__value_.__r.__words[2] = v123;
      *(void *)uint64_t v143 = MEMORY[0x1E4FBA470] + 16;
      if (v145 < 0) {
        operator delete(v144);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1C1859700](v146);
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v128.__r_.__value_.__l.__data_);
      }
      if ((v119 & 1) == 0) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v117);
      }
      if ((v120 & 1) == 0) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v118);
      }
      if (v121) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v121);
      }
      if (++v60 >= (unint64_t)((uint64_t)(*((void *)this + 83) - *((void *)this + 82)) >> 4)) {
        goto LABEL_256;
      }
    }
    mach_port_t v117 = 0;
    uint64_t v118 = 0;
    char v119 = 1;
    mach_port_t v67 = *v62;
    __int16 v122 = *v62;
LABEL_107:
    char v120 = 1;
    goto LABEL_108;
  }
LABEL_256:
  v137[0] = &unk_1F1480A80;
  std::__function::__value_func<char const* ()(DSP_Host_Types::AudioProcessingType)>::~__value_func[abi:ne180100](v141);
  std::__function::__value_func<DSP_Host_Types::AudioProcessingType ()(char const*)>::~__value_func[abi:ne180100](v140);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v137);
  v129[0] = v125;
  *(void *)((char *)v129 + *(void *)(v125 - 24)) = v124;
  std::string::size_type v130 = v123;
  v131[0] = MEMORY[0x1E4FBA470] + 16;
  if (v132 < 0) {
    operator delete((void *)v131[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1859700](&v133);
}

void sub_1BAE99A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

uint64_t DSP_Host_Types::AudioChannelConfiguration::debug_summary_string(DSP_Host_Types::AudioChannelConfiguration *this, const char *a2, const char *a3)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  if (a3 && *a3)
  {
    size_t v6 = strlen(a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)a3, v6);
  }
  if (a2[44])
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)" tag: ", 6);
    DSP_Host_Types::AudioChannelConfiguration::debug_summary_string(char const*)const::$_0::operator()(&__p, *((void *)a2 + 5));
    if ((v15 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = v14;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)p_p, v8);
    if ((char)v15 < 0) {
      operator delete(__p);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)" bit: ", 6);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)" num: ", 6);
    std::ostream::operator<<();
  }
  else
  {
    DSP_Host_Types::AudioChannelConfiguration::debug_summary_string(char const*)const::$_0::operator()(&__p, *((void *)a2 + 5));
    if ((v15 & 0x80u) == 0) {
      CFIndex v9 = &__p;
    }
    else {
      CFIndex v9 = __p;
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v10 = v15;
    }
    else {
      uint64_t v10 = v14;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)v9, v10);
    if ((char)v15 < 0) {
      operator delete(__p);
    }
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(this, (uint64_t)v18);
  v16[0] = *MEMORY[0x1E4FBA408];
  uint64_t v11 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v17 = v11;
  v18[0] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1859700](&v20);
}

void sub_1BAE99F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void std::optional<std::string>::value_or[abi:ne180100]<char const(&)[10]>(std::string *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a1->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "<missing>");
  }
}

uint64_t DSP_Host_Types::ConfigurationChangeRequest::debug_log_device_summary(char const*)const::$_3::operator()(void *a1, uint64_t **a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Count ", 6);
  size_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"  ", 2);
  CFIndex v5 = *a2;
  size_t v6 = a2[1];
  if (*a2 != v6)
  {
    while (1)
    {
      uint64_t v8 = *v5;
      char v7 = (std::__shared_weak_count *)v5[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"{", 1);
      CFIndex v9 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)",", 1);
      uint64_t v10 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)",", 1);
      if (*(unsigned char *)(v8 + 332)) {
        std::to_string(&v18, *(_DWORD *)(v8 + 328));
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(&v18, "<n/a>");
      }
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v11 = &v18;
      }
      else {
        uint64_t v11 = (std::string *)v18.__r_.__value_.__r.__words[0];
      }
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v18.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)",", 1);
      if (*(unsigned char *)(v8 + 304)) {
        DSP_Dictionariable::SingleKvp<std::string>::value(&__p, v8 + 264);
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(&__p, "<n/a>");
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)p_p, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"}", 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (v7) {
        goto LABEL_26;
      }
LABEL_27:
      v5 += 2;
      if (v5 == v6) {
        goto LABEL_31;
      }
    }
    operator delete(v18.__r_.__value_.__l.__data_);
    if (!v7) {
      goto LABEL_27;
    }
LABEL_26:
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    goto LABEL_27;
  }
LABEL_31:
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1, (uint64_t)v21);
  v19[0] = *MEMORY[0x1E4FBA408];
  uint64_t v15 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v19 + *(void *)(v19[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v20 = v15;
  v21[0] = MEMORY[0x1E4FBA470] + 16;
  if (v22 < 0) {
    operator delete((void *)v21[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1859700](&v23);
}

void sub_1BAE9A2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
}

void *DSP_Host_Types::AudioChannelConfiguration::debug_summary_string(char const*)const::$_0::operator()(void *a1, uint64_t a2)
{
  if ((a2 & 0xFF00000000) == 0)
  {
    int v3 = "<none>";
    goto LABEL_7;
  }
  if (a2 == 0x10000)
  {
    int v3 = "'bitmap'";
    goto LABEL_7;
  }
  if (!a2)
  {
    int v3 = "'ch desc'";
LABEL_7:
    return std::string::basic_string[abi:ne180100]<0>(a1, v3);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)v9 + *(void *)(v8 - 24)) |= 0x4000u;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(&v8, 48);
  uint64_t v5 = v8;
  *(void *)((char *)&v9[2] + *(void *)(v8 - 24)) = 8;
  *(_DWORD *)((char *)v9 + *(void *)(v5 - 24)) = *(_DWORD *)((unsigned char *)v9 + *(void *)(v5 - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1, (uint64_t)v9);
  v7[0] = *MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v7 + *(void *)(v7[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v8 = v6;
  v9[0] = MEMORY[0x1E4FBA470] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return (void *)MEMORY[0x1C1859700](&v11);
}

void sub_1BAE9A5C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::operator<<[abi:ne180100]<std::char_traits<char>>(void *a1, char a2)
{
  size_t v4 = (char *)a1 + *(void *)(*a1 - 24);
  if (*((_DWORD *)v4 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    uint64_t v5 = std::locale::use_facet(&v8, MEMORY[0x1E4FBA258]);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v4 + 36) = v6;
  }
  *((_DWORD *)v4 + 36) = a2;
  return a1;
}

void sub_1BAE9A698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t DSP_Host_Types::ConfigurationChangeRequest::debug_device_list@<X0>(DSP_Host_Types::ConfigurationChangeRequest *this@<X0>, void *a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  size_t v4 = (uint64_t *)*((void *)this + 82);
  for (unint64_t i = (uint64_t *)*((void *)this + 83); v4 != i; v4 += 2)
  {
    uint64_t v6 = *v4;
    if (*(unsigned char *)(*v4 + 64))
    {
      if (*(char *)(v6 + 63) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v6 + 40), *(void *)(v6 + 48));
      }
      else {
        std::string __p = *(std::string *)(v6 + 40);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "<no id>");
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)p_p, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"  ", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2, (uint64_t)v14);
  v12[0] = *MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v13 = v9;
  v14[0] = MEMORY[0x1E4FBA470] + 16;
  if (v15 < 0) {
    operator delete((void *)v14[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1859700](&v16);
}

void sub_1BAE9A8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t DSP_Host_Types::ConfigurationChangeRequest::load_from(DSP_Host_Types::ConfigurationChangeRequest *this, CFDictionaryRef *a2)
{
  int v4 = DSP_Dictionariable::SingleKvp<BOOL>::load_from((uint64_t)this + 24, a2);
  int v5 = v4 & DSP_Dictionariable::SingleKvp<BOOL>::load_from((uint64_t)this + 48, a2);
  uint64_t v6 = v5 & DSP_Host_Types::IOContextDescription::load_from((DSP_Host_Types::ConfigurationChangeRequest *)((char *)this + 72), a2);
  std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100]((uint64_t *)this + 82);
  v22[0] = &unk_1F1487618;
  v22[1] = 0;
  long long v22[2] = a2;
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(&theArray, *a2, @"device descriptions");
  if (v21)
  {
    CFArrayRef v7 = theArray;
    if (theArray)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      CFArrayRef v8 = theArray;
      if (theArray) {
        CFIndex v17 = CFArrayGetCount(theArray);
      }
      else {
        CFIndex v17 = 0;
      }
      for (unint64_t i = 0; ; ++i)
      {
        BOOL v11 = v7 == v8 && v17 == i;
        BOOL v12 = v11;
        if (Count == i || v12) {
          break;
        }
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v23, v7, i);
        uint64_t v13 = (std::__shared_weak_count *)operator new(0x310uLL);
        v13->__shared_owners_ = 0;
        v13->__shared_weak_owners_ = 0;
        v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F418;
        CFStringRef v14 = CFStringCreateWithBytes(0, (const UInt8 *)"", 0, 0x8000100u, 0);
        if (!v14)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        v13[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F300;
        std::__optional_destruct_base<applesauce::CF::StringRef,false>::__optional_destruct_base[abi:ne180100]<applesauce::CF::StringRef const&>((uint64_t)&v13[1].__shared_owners_, v14);
        CFRelease(v14);
        v13[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147EE48;
        std::string::basic_string[abi:ne180100]<0>(v25, "device uid");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v13[2].__vftable, (uint64_t)v25);
        v13[2].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F0A0;
        LOBYTE(v13[2].__shared_weak_owners_) = 0;
        LOBYTE(v13[3].__shared_weak_owners_) = 0;
        if (v26 < 0) {
          operator delete(v25[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v25, "device model uid");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v13[4].__vftable, (uint64_t)v25);
        v13[4].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F0A0;
        LOBYTE(v13[4].__shared_weak_owners_) = 0;
        LOBYTE(v13[5].__shared_weak_owners_) = 0;
        if (v26 < 0) {
          operator delete(v25[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v25, "is default device");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v13[6].__vftable, (uint64_t)v25);
        v13[6].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1486878;
        LOWORD(v13[6].__shared_weak_owners_) = 0;
        if (v26 < 0) {
          operator delete(v25[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v25, "transport type");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v13[7].__vftable, (uint64_t)v25);
        v13[7].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1487570;
        LOBYTE(v13[7].__shared_weak_owners_) = 0;
        BYTE4(v13[7].__shared_weak_owners_) = 0;
        if (v26 < 0) {
          operator delete(v25[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v25, "data source type in");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v13[8].__vftable, (uint64_t)v25);
        v13[8].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1487570;
        LOBYTE(v13[8].__shared_weak_owners_) = 0;
        BYTE4(v13[8].__shared_weak_owners_) = 0;
        if (v26 < 0) {
          operator delete(v25[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v25, "data source type out");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v13[9].__vftable, (uint64_t)v25);
        v13[9].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1487570;
        LOBYTE(v13[9].__shared_weak_owners_) = 0;
        BYTE4(v13[9].__shared_weak_owners_) = 0;
        if (v26 < 0) {
          operator delete(v25[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v25, "sample rate");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v13[10].__vftable, (uint64_t)v25);
        v13[10].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1486A00;
        LOBYTE(v13[10].__shared_weak_owners_) = 0;
        LOBYTE(v13[11].__vftable) = 0;
        if (v26 < 0) {
          operator delete(v25[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v25, "hardware sample rate");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v13[11].__shared_owners_, (uint64_t)v25);
        v13[11].__shared_owners_ = (uint64_t)&unk_1F1486A00;
        LOBYTE(v13[12].__vftable) = 0;
        LOBYTE(v13[12].__shared_owners_) = 0;
        if (v26 < 0) {
          operator delete(v25[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v25, "latency in samples");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v13[12].__shared_weak_owners_, (uint64_t)v25);
        v13[12].__shared_weak_owners_ = (uint64_t)&unk_1F1487570;
        LOBYTE(v13[13].__shared_owners_) = 0;
        BYTE4(v13[13].__shared_owners_) = 0;
        if (v26 < 0) {
          operator delete(v25[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v25, "latency out samples");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v13[13].__shared_weak_owners_, (uint64_t)v25);
        v13[13].__shared_weak_owners_ = (uint64_t)&unk_1F1487570;
        LOBYTE(v13[14].__shared_owners_) = 0;
        BYTE4(v13[14].__shared_owners_) = 0;
        if (v26 < 0) {
          operator delete(v25[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v25, "safety offset in samples");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v13[14].__shared_weak_owners_, (uint64_t)v25);
        v13[14].__shared_weak_owners_ = (uint64_t)&unk_1F1487570;
        LOBYTE(v13[15].__shared_owners_) = 0;
        BYTE4(v13[15].__shared_owners_) = 0;
        if (v26 < 0) {
          operator delete(v25[0]);
        }
        char v19 = (DSP_Host_Types::DeviceDescription *)&v13[1];
        std::string::basic_string[abi:ne180100]<0>(v25, "safety offset out samples");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v13[15].__shared_weak_owners_, (uint64_t)v25);
        v13[15].__shared_weak_owners_ = (uint64_t)&unk_1F1487570;
        LOBYTE(v13[16].__shared_owners_) = 0;
        BYTE4(v13[16].__shared_owners_) = 0;
        if (v26 < 0) {
          operator delete(v25[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v25, "bluetooth device category");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v13[16].__shared_weak_owners_, (uint64_t)v25);
        v13[16].__shared_weak_owners_ = (uint64_t)&unk_1F1487570;
        LOBYTE(v13[17].__shared_owners_) = 0;
        BYTE4(v13[17].__shared_owners_) = 0;
        if (v26 < 0) {
          operator delete(v25[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v25, "bluetooth ecnr enabled");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v13[17].__shared_weak_owners_, (uint64_t)v25);
        v13[17].__shared_weak_owners_ = (uint64_t)&unk_1F1486878;
        LOWORD(v13[18].__shared_owners_) = 0;
        if (v26 < 0) {
          operator delete(v25[0]);
        }
        DSP_Host_Types::AudioChannelConfiguration::AudioChannelConfiguration((DSP_Host_Types::AudioChannelConfiguration *)&v13[18].__shared_weak_owners_, "output preferred layout");
        DSP_Host_Types::AudioChannelConfiguration::AudioChannelConfiguration((DSP_Host_Types::AudioChannelConfiguration *)&v13[23].__shared_weak_owners_, "output default layout");
        *(_OWORD *)&v13[31].__shared_owners_ = 0u;
        v13[32].std::__shared_count = 0u;
        v13[30].std::__shared_count = 0u;
        *(_OWORD *)&v13[30].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v13[28].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v13[29].__shared_owners_ = 0u;
        DSP_Host_Types::DeviceDescription::init_set(v19);
        *(void *)&long long v24 = v13 + 1;
        *((void *)&v24 + 1) = v13;
        ((void (*)(DSP_Host_Types::DeviceDescription *, CFTypeRef *))v13[1].__on_zero_shared_weak)(v19, &v23);
        std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((uint64_t)this + 656, &v24);
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        if (v23) {
          CFRelease(v23);
        }
      }
      BOOL v9 = *((void *)this + 82) != *((void *)this + 83);
    }
    else
    {
      BOOL v9 = 0;
    }
    uint64_t v6 = v6 & v9;
  }
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theArray);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v22);
  return v6;
}

void sub_1BAE9B0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, DSP_Dictionariable::DictionariableKvp *a10, DSP_Dictionariable::DictionariableKvp *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, DSP_Dictionariable::DictionariableKvp *a17, DSP_Dictionariable::DictionariableKvp *a18, DSP_Dictionariable::DictionariableKvp *a19, DSP_Dictionariable::DictionariableKvp *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::__shared_weak_count::~__shared_weak_count(v29);
  operator delete(v31);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v30 - 136));
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a29);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)(v30 - 160));
  _Unwind_Resume(a1);
}

void sub_1BAE9B470()
{
}

void sub_1BAE9B4C0()
{
}

void sub_1BAE9B510()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  JUMPOUT(0x1BAE9B36CLL);
}

void sub_1BAE9B558()
{
}

void sub_1BAE9B5B4()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  JUMPOUT(0x1BAE9B364);
}

void sub_1BAE9B600()
{
}

void sub_1BAE9B608()
{
}

void sub_1BAE9B634()
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  JUMPOUT(0x1BAE9B3A8);
}

void DSP_Host_Types::ConfigurationChangeRequest::add_to(DSP_Host_Types::ConfigurationChangeRequest *this, __CFDictionary **a2)
{
  uint64_t v4 = MEMORY[0x1E4F1CFD8];
  uint64_t v5 = MEMORY[0x1E4F1CFC0];
  if (*((unsigned char *)this + 41))
  {
    uint64_t v6 = (const void **)(*((unsigned char *)this + 40) ? MEMORY[0x1E4F1CFD8] : MEMORY[0x1E4F1CFC0]);
    CFArrayRef v7 = *v6;
    mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::BooleanRef>(*a2, *((const void **)this + 4), *v6);
    if (v7) {
      CFRelease(v7);
    }
  }
  if (*((unsigned char *)this + 65))
  {
    CFArrayRef v8 = (const void **)(*((unsigned char *)this + 64) ? v4 : v5);
    BOOL v9 = *v8;
    mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::BooleanRef>(*a2, *((const void **)this + 7), *v8);
    if (v9) {
      CFRelease(v9);
    }
  }
  DSP_Host_Types::IOContextDescription::add_to((DSP_Host_Types::ConfigurationChangeRequest *)((char *)this + 72), a2);
  char v22 = 0;
  CFTypeRef v23 = 0;
  uint64_t v24 = 0;
  long long v21 = 0uLL;
  char v10 = (uint64_t *)*((void *)this + 82);
  BOOL v11 = (uint64_t *)*((void *)this + 83);
  if (v10 != v11)
  {
    BOOL v12 = 0;
    do
    {
      uint64_t v13 = *v10;
      *(void *)&long long v20 = *v10;
      CFStringRef v14 = (std::__shared_weak_count *)v10[1];
      *((void *)&v20 + 1) = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v13)
      {
        if (*(unsigned char *)(v13 + 137) && *(unsigned char *)(v13 + 136))
        {
          if (v14) {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *(void *)&long long v21 = v13;
          *((void *)&v21 + 1) = v14;
          if (v12)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
            char v15 = (std::__shared_weak_count *)*((void *)&v20 + 1);
          }
          else
          {
            char v15 = v14;
          }
          BOOL v12 = v14;
          if (!v15) {
            goto LABEL_27;
          }
LABEL_26:
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          goto LABEL_27;
        }
        std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((uint64_t)&v22, &v20);
      }
      char v15 = v14;
      if (v14) {
        goto LABEL_26;
      }
LABEL_27:
      v10 += 2;
    }
    while (v10 != v11);
  }
  std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((uint64_t)&v22, &v21);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  *(void *)&long long v20 = Mutable;
  CFIndex v17 = v22;
  std::string v18 = v23;
  if (v22 != v23)
  {
    do
    {
      if (*v17) {
        (*(void (**)(void, long long *))(*(void *)*v17 + 40))(*v17, &v20);
      }
      v17 += 2;
    }
    while (v17 != v18);
    CFMutableArrayRef Mutable = (CFMutableArrayRef)v20;
  }
  mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)&cf, Mutable);
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(*a2, @"device descriptions", cf);
  if (cf) {
    CFRelease(cf);
  }
  if ((void)v20) {
    CFRelease((CFTypeRef)v20);
  }
  if (*((void *)&v21 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
  }
  *(void *)&long long v21 = &v22;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
}

void sub_1BAE9B888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, std::__shared_weak_count *a13, char a14)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  a12 = (void **)&a14;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_Types::NegotiateRequest::debug_log_device_summary(DSP_Host_Types::NegotiateRequest *this, const char *a2)
{
  if (!a2) {
    a2 = "NegotiateRequest";
  }
  return DSP_Host_Types::ConfigurationChangeRequest::debug_log_device_summary(this, a2);
}

uint64_t DSP_Host_Types::AdaptRequest::debug_log_device_summary(DSP_Host_Types::AdaptRequest *this, const char *a2)
{
  if (!a2) {
    a2 = "AdaptRequest";
  }
  return DSP_Host_Types::ConfigurationChangeRequest::debug_log_device_summary(this, a2);
}

void DSP_Host_Types::DeviceConfiguration::add_to(DSP_Host_Types::DeviceConfiguration *this, __CFArray **a2)
{
  DSP_Host_Types::BluetoothLookup::toString((uint64_t)v4, *((void *)this + 22));
  DSP_Dictionariable::SingleKvp<std::string>::operator=((uint64_t)this + 256, (uint64_t)v4);
  v4[0] = &unk_1F147F0A0;
  if (v6 && v5 < 0) {
    operator delete((void *)v4[2]);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v4);
  DSP_Host_Types::DeviceConfiguration::init_set(this);
  DSP_Dictionariable::DictionarySet::add_to((DSP_Host_Types::DeviceConfiguration *)((char *)this + 232), a2);
}

void sub_1BAE9BBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void DSP_Host_Types::BluetoothLookup::toString(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "bluetooth format");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)a1, (uint64_t)__p);
  *(void *)a1 = &unk_1F147F0A0;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if ((a2 & 0xFF00000000) != 0)
  {
    uint64_t v4 = 0;
    __p[1] = "automatic";
    int v9 = 1;
    BOOL v11 = "sco";
    int v12 = 2;
    uint64_t v13 = "a2dp";
    int v14 = 3;
    char v15 = "lea";
    char v5 = __p;
    LODWORD(__p[0]) = 0;
    while (1)
    {
      int v6 = *(_DWORD *)v5;
      v5 += 2;
      if (v6 == a2) {
        break;
      }
      if (++v4 == 4) {
        return;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v7, (char *)__p[2 * v4 + 1]);
    std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>((std::string *)(a1 + 16), &v7);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v7.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BAE9BD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  DSP_Dictionariable::SingleKvp<std::string>::~SingleKvp(v21);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::DeviceConfiguration::init_set(DSP_Host_Types::DeviceConfiguration *this)
{
  uint64_t v1 = (DSP_Host_Types::DeviceConfiguration *)((char *)this + 232);
  if (*((void *)this + 29) == *((void *)this + 30))
  {
    DSP_Dictionariable::DictionarySet::add_kvp((DSP_Host_Types::DeviceConfiguration *)((char *)this + 232), (DSP_Host_Types::DeviceConfiguration *)((char *)this + 24));
    DSP_Dictionariable::DictionarySet::add_kvp(v1, (DSP_Host_Types::DeviceConfiguration *)((char *)this + 72));
    DSP_Dictionariable::DictionarySet::add_kvp(v1, (DSP_Host_Types::DeviceConfiguration *)((char *)this + 104));
    DSP_Dictionariable::DictionarySet::add_kvp(v1, (DSP_Host_Types::DeviceConfiguration *)((char *)this + 128));
    DSP_Dictionariable::DictionarySet::add_kvp(v1, (DSP_Host_Types::DeviceConfiguration *)((char *)this + 152));
    DSP_Dictionariable::DictionarySet::add_kvp(v1, (DSP_Host_Types::DeviceConfiguration *)((char *)this + 256));
    DSP_Dictionariable::DictionarySet::add_kvp(v1, (DSP_Host_Types::DeviceConfiguration *)((char *)this + 184));
    DSP_Dictionariable::DictionarySet::add_kvp(v1, (DSP_Host_Types::DeviceConfiguration *)((char *)this + 208));
  }
}

uint64_t DSP_Host_Types::DeviceConfiguration::load_from(uint64_t **this, CFDictionaryRef *a2)
{
  DSP_Host_Types::DeviceConfiguration::init_set((DSP_Host_Types::DeviceConfiguration *)this);
  uint64_t v4 = DSP_Dictionariable::DictionarySet::maybe_load_from_under_key(this + 29, a2, (uint64_t)(this + 1));
  if (((unsigned int (*)(char *))this[32][4])((char *)this + 256))
  {
    uint64_t v5 = 0;
    uint64_t v16 = "automatic";
    int v17 = 1;
    std::string v18 = "sco";
    int v19 = 2;
    long long v20 = "a2dp";
    int v21 = 3;
    char v22 = "lea";
    uint64_t v6 = 2;
    v15[0] = 0;
    do
    {
      std::string v7 = *(const char **)&v15[v6];
      DSP_Dictionariable::SingleKvp<std::string>::value(&__s2, (uint64_t)(this + 32));
      if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
      {
        CFArrayRef v8 = (void *)__s2.__r_.__value_.__r.__words[0];
        int v9 = strcmp(v7, __s2.__r_.__value_.__l.__data_);
        operator delete(v8);
        if (!v9)
        {
LABEL_9:
          int v11 = v15[4 * v5];
          unsigned int v12 = v11 & 0xFFFFFF00;
          char v10 = 1;
          goto LABEL_10;
        }
      }
      else if (!strcmp(v7, (const char *)&__s2))
      {
        goto LABEL_9;
      }
      ++v5;
      v6 += 4;
    }
    while (v5 != 4);
  }
  char v10 = 0;
  LOBYTE(v11) = 0;
  unsigned int v12 = 0;
LABEL_10:
  *((_DWORD *)this + 44) = v12 & 0xFFFFFF00 | v11;
  *((unsigned char *)this + 180) = v10;
  return v4;
}

void DSP_Host_Types::DeviceConfiguration::add_to(DSP_Host_Types::DeviceConfiguration *this, __CFDictionary **a2)
{
  DSP_Host_Types::BluetoothLookup::toString((uint64_t)v4, *((void *)this + 22));
  DSP_Dictionariable::SingleKvp<std::string>::operator=((uint64_t)this + 256, (uint64_t)v4);
  v4[0] = &unk_1F147F0A0;
  if (v6 && v5 < 0) {
    operator delete((void *)v4[2]);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v4);
  DSP_Host_Types::DeviceConfiguration::init_set(this);
  DSP_Dictionariable::DictionarySet::maybe_add_under_key((uint64_t **)this + 29, a2, (uint64_t)this + 8);
}

void sub_1BAE9C014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void DSP_Host_Types::DeviceConfiguration::~DeviceConfiguration(DSP_Host_Types::DeviceConfiguration *this)
{
  DSP_Host_Types::DeviceConfiguration::~DeviceConfiguration(this);

  JUMPOUT(0x1C1859840);
}

{
  DSP_Dictionariable::DictionariableKvp *v2;
  void *v3;

  *(void *)this = &unk_1F147EF38;
  CFArrayRef v2 = (DSP_Host_Types::DeviceConfiguration *)((char *)this + 256);
  *((void *)this + 32) = &unk_1F147F0A0;
  if (*((unsigned char *)this + 296) && *((char *)this + 295) < 0) {
    operator delete(*((void **)this + 34));
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  int v3 = (void *)*((void *)this + 29);
  if (v3)
  {
    *((void *)this + 30) = v3;
    operator delete(v3);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceConfiguration *)((char *)this + 208));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceConfiguration *)((char *)this + 184));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceConfiguration *)((char *)this + 152));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceConfiguration *)((char *)this + 128));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceConfiguration *)((char *)this + 104));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceConfiguration *)((char *)this + 72));
  *((void *)this + 3) = &unk_1F147F0A0;
  if (*((unsigned char *)this + 64) && *((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceConfiguration *)((char *)this + 24));
  *(void *)this = &unk_1F147F340;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

uint64_t DSP_Host_Types::NegotiateResponse::load_from(DSP_Host_Types::NegotiateResponse *this, CFDictionaryRef *a2)
{
  v39[0] = &unk_1F1487618;
  v39[1] = 0;
  unint64_t v40 = a2;
  if (applesauce::CF::details::has_key<__CFString const*&>(*a2, @"io context configuration"))
  {
    uint64_t v4 = applesauce::CF::details::at_key<__CFString const*&>(*v40, @"io context configuration");
    if (!v4)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not find item");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    char v5 = v4;
    CFRetain(v4);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)cf, v5);
    std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100]((uint64_t *)this + 3);
    uint64_t v43 = &unk_1F1487618;
    uint64_t v44 = 0;
    unsigned int v45 = (CFTypeRef *)cf;
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(&v36, cf[0], @"io context supported input formats");
    if ((_BYTE)v37) {
      BOOL v6 = DSP_Host_Types::load_list_from<DSP_Host_Types::FormatDescription>((void *)this + 3, &v36);
    }
    else {
      BOOL v6 = 1;
    }
    std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v36);
    DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)&v43);
    std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100]((uint64_t *)this + 6);
    uint64_t v43 = &unk_1F1487618;
    uint64_t v44 = 0;
    unsigned int v45 = (CFTypeRef *)cf;
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(&v36, cf[0], @"io context supported output formats");
    if ((_BYTE)v37)
    {
      BOOL v8 = DSP_Host_Types::load_list_from<DSP_Host_Types::FormatDescription>((void *)this + 6, &v36);
      BOOL v6 = v6 && v8;
    }
    std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v36);
    DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)&v43);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v7 = 1;
  }
  int v9 = (void *)((char *)this + 72);
  std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100]((uint64_t *)this + 9);
  CFArrayRef v36 = (CFArrayRef)&unk_1F1487618;
  uint64_t v37 = 0;
  unsigned int v38 = a2;
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(&theArray, *a2, @"device configurations");
  if (v35)
  {
    CFArrayRef v10 = theArray;
    if (theArray)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      CFArrayRef v12 = theArray;
      if (theArray) {
        CFIndex v13 = CFArrayGetCount(theArray);
      }
      else {
        CFIndex v13 = 0;
      }
      unint64_t v15 = 0;
      int v16 = v7;
      while (1)
      {
        BOOL v17 = v10 == v12 && v13 == v15;
        BOOL v18 = v17;
        if (Count == v15 || v18) {
          break;
        }
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v41, v10, v15);
        std::allocate_shared[abi:ne180100]<DSP_Host_Types::DeviceConfiguration,std::allocator<DSP_Host_Types::DeviceConfiguration>,char const(&)[1],void>(cf, "");
        CFDictionaryRef v19 = cf[0];
        (*(void (**)(CFDictionaryRef, CFTypeRef *))(*(void *)cf[0] + 32))(cf[0], &v41);
        unint64_t v20 = *((void *)this + 10);
        unint64_t v21 = *((void *)this + 11);
        if (v20 >= v21)
        {
          uint64_t v24 = (uint64_t)(v20 - *v9) >> 4;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 60) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v26 = v21 - *v9;
          if (v26 >> 3 > v25) {
            unint64_t v25 = v26 >> 3;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v25;
          }
          char v47 = (char *)this + 88;
          uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v27);
          char v29 = &v28[16 * v24];
          uint64_t v43 = v28;
          uint64_t v44 = v29;
          uint64_t v46 = &v28[16 * v30];
          BOOL v31 = (std::__shared_weak_count *)cf[1];
          *(_OWORD *)char v29 = *(_OWORD *)cf;
          char v22 = v31;
          if (v31)
          {
            atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
            char v22 = (std::__shared_weak_count *)cf[1];
          }
          unsigned int v45 = (CFTypeRef *)(v29 + 16);
          std::vector<std::shared_ptr<DSP_Host_Types::FormatDescription>>::__swap_out_circular_buffer((void *)this + 9, &v43);
          unint64_t v23 = *((void *)this + 10);
          std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v43);
        }
        else
        {
          *(void *)unint64_t v20 = v19;
          char v22 = (std::__shared_weak_count *)cf[1];
          *(CFDictionaryRef *)(v20 + 8) = cf[1];
          if (v22) {
            atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v23 = v20 + 16;
          *((void *)this + 10) = v20 + 16;
        }
        *((void *)this + 10) = v23;
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        LODWORD(v7) = v16;
        if (v41) {
          CFRelease(v41);
        }
        ++v15;
      }
      BOOL v14 = *((void *)this + 9) != *((void *)this + 10);
    }
    else
    {
      BOOL v14 = 0;
    }
    uint64_t v7 = v7 & v14;
  }
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theArray);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)&v36);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v39);
  return v7;
}

void sub_1BAE9C5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  __cxa_free_exception(v25);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)&a15);
  _Unwind_Resume(a1);
}

BOOL DSP_Host_Types::load_list_from<DSP_Host_Types::FormatDescription>(void *a1, CFArrayRef *a2)
{
  CFArrayRef v2 = *a2;
  if (!*a2) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(*a2);
  CFArrayRef v6 = *a2;
  if (v6) {
    CFIndex v7 = CFArrayGetCount(v6);
  }
  else {
    CFIndex v7 = 0;
  }
  for (unint64_t i = 0; ; ++i)
  {
    BOOL v10 = v2 == v6 && v7 == i;
    BOOL v11 = v10;
    if (Count == i || v11) {
      break;
    }
    applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&cf, v2, i);
    CFArrayRef v12 = (std::__shared_weak_count *)operator new(0xB0uLL);
    v12->__shared_owners_ = 0;
    v12->__shared_weak_owners_ = 0;
    v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F468;
    DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::FormatDescription *)&v12[1], "");
    ((void (*)(std::__shared_weak_count *, CFTypeRef *))v12[1].__on_zero_shared_weak)(&v12[1], &cf);
    CFIndex v13 = (void *)a1[1];
    unint64_t v14 = a1[2];
    if ((unint64_t)v13 >= v14)
    {
      uint64_t v16 = ((uint64_t)v13 - *a1) >> 4;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 60) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v18 = v14 - *a1;
      if (v18 >> 3 > v17) {
        unint64_t v17 = v18 >> 3;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      void v25[4] = a1 + 2;
      unint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v19);
      *(void *)&long long v21 = v12 + 1;
      *((void *)&v21 + 1) = v12;
      char v22 = &v20[16 * v16];
      v25[0] = v20;
      v25[1] = v22;
      void v25[3] = &v20[16 * v23];
      *(_OWORD *)char v22 = v21;
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      CFTypeRef v25[2] = v22 + 16;
      std::vector<std::shared_ptr<DSP_Host_Types::FormatDescription>>::__swap_out_circular_buffer(a1, v25);
      unint64_t v15 = (void *)a1[1];
      std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)v25);
    }
    else
    {
      *CFIndex v13 = v12 + 1;
      v13[1] = v12;
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v15 = v13 + 2;
      a1[1] = v13 + 2;
    }
    a1[1] = v15;
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    if (cf) {
      CFRelease(cf);
    }
  }
  return *a1 != a1[1];
}

void sub_1BAE9C84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::NegotiateResponse::add_to(DSP_Host_Types::NegotiateResponse *this, __CFDictionary **a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  CFTypeRef v17 = Mutable;
  char v5 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  CFTypeRef v16 = v5;
  CFArrayRef v6 = (void *)*((void *)this + 3);
  CFIndex v7 = (void *)*((void *)this + 4);
  if (v6 != v7)
  {
    do
    {
      if (*v6) {
        (*(void (**)(void, CFTypeRef *))(*(void *)*v6 + 40))(*v6, &v16);
      }
      v6 += 2;
    }
    while (v6 != v7);
    char v5 = v16;
  }
  mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)&cf, v5);
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(Mutable, @"io context supported input formats", cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v16) {
    CFRelease(v16);
  }
  BOOL v8 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  CFTypeRef v16 = v8;
  int v9 = (void *)*((void *)this + 6);
  BOOL v10 = (void *)*((void *)this + 7);
  if (v9 != v10)
  {
    do
    {
      if (*v9) {
        (*(void (**)(void, CFTypeRef *))(*(void *)*v9 + 40))(*v9, &v16);
      }
      v9 += 2;
    }
    while (v9 != v10);
    BOOL v8 = v16;
  }
  mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)&cf, v8);
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(Mutable, @"io context supported output formats", cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v16) {
    CFRelease(v16);
  }
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v16, Mutable);
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::DictionaryRef>(*a2, @"io context configuration", v16);
  if (v16) {
    CFRelease(v16);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  CFMutableArrayRef v11 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  CFTypeRef v17 = v11;
  CFIndex v13 = (void *)*((void *)this + 9);
  CFArrayRef v12 = (void *)*((void *)this + 10);
  if (v13 == v12)
  {
    CFTypeRef v14 = v11;
  }
  else
  {
    do
    {
      if (*v13) {
        (*(void (**)(void, CFTypeRef *))(*(void *)*v13 + 40))(*v13, &v17);
      }
      v13 += 2;
    }
    while (v13 != v12);
    CFTypeRef v14 = v17;
  }
  mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)&v16, v14);
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(*a2, @"device configurations", v16);
  if (v16) {
    CFRelease(v16);
  }
  if (v17) {
    CFRelease(v17);
  }
}

void sub_1BAE9CB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_Types::AdaptResponse::load_from(DSP_Host_Types::AdaptResponse *this, CFDictionaryRef *a2)
{
  uint64_t v4 = (uint64_t **)((char *)this + 48);
  if (*((void *)this + 6) == *((void *)this + 7)) {
    DSP_Dictionariable::DictionarySet::add_kvp((DSP_Host_Types::AdaptResponse *)((char *)this + 48), (DSP_Host_Types::AdaptResponse *)((char *)this + 24));
  }

  return DSP_Dictionariable::DictionarySet::maybe_load_from_under_key(v4, a2, (uint64_t)this + 8);
}

void DSP_Host_Types::AdaptResponse::add_to(DSP_Host_Types::AdaptResponse *this, __CFDictionary **a2)
{
  uint64_t v4 = (uint64_t **)((char *)this + 48);
  if (*((void *)this + 6) == *((void *)this + 7)) {
    DSP_Dictionariable::DictionarySet::add_kvp((DSP_Host_Types::AdaptResponse *)((char *)this + 48), (DSP_Host_Types::AdaptResponse *)((char *)this + 24));
  }

  DSP_Dictionariable::DictionarySet::maybe_add_under_key(v4, a2, (uint64_t)this + 8);
}

void DSP_Host_Types::DSPPropertyInfo::add_to(DSP_Host_Types::DSPPropertyInfo *this, __CFArray **a2)
{
  DSP_Host_Types::DSPPropertyInfo::init_set(this);

  DSP_Dictionariable::DictionarySet::add_to((DSP_Host_Types::DSPPropertyInfo *)((char *)this + 296), a2);
}

void DSP_Host_Types::DSPPropertyInfo::init_set(DSP_Host_Types::DSPPropertyInfo *this)
{
  if (*((void *)this + 37) == *((void *)this + 38))
  {
    CFArrayRef v2 = (DSP_Host_Types::DSPPropertyInfo *)((char *)this + 296);
    DSP_Dictionariable::DictionarySet::add_kvp((DSP_Host_Types::DSPPropertyInfo *)((char *)this + 296), (DSP_Host_Types::DSPPropertyInfo *)((char *)this + 24));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DSPPropertyInfo *)((char *)this + 48));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DSPPropertyInfo *)((char *)this + 72));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DSPPropertyInfo *)((char *)this + 96));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DSPPropertyInfo *)((char *)this + 120));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DSPPropertyInfo *)((char *)this + 208));
  }
}

uint64_t DSP_Host_Types::DSPPropertyInfo::load_from(uint64_t **this, CFDictionaryRef *a2)
{
  DSP_Host_Types::DSPPropertyInfo::init_set((DSP_Host_Types::DSPPropertyInfo *)this);

  return DSP_Dictionariable::DictionarySet::maybe_load_from_under_key(this + 37, a2, (uint64_t)(this + 1));
}

void DSP_Host_Types::DSPPropertyInfo::add_to(uint64_t **this, __CFDictionary **a2)
{
  DSP_Host_Types::DSPPropertyInfo::init_set((DSP_Host_Types::DSPPropertyInfo *)this);

  DSP_Dictionariable::DictionarySet::maybe_add_under_key(this + 37, a2, (uint64_t)(this + 1));
}

void DSP_Host_Types::DSPPropertyInfo::~DSPPropertyInfo(DSP_Host_Types::DSPPropertyInfo *this)
{
  *(void *)this = &unk_1F147EFD8;
  CFArrayRef v2 = (void *)*((void *)this + 37);
  if (v2)
  {
    *((void *)this + 38) = v2;
    operator delete(v2);
  }
  *((void *)this + 26) = &unk_1F147F380;
  std::__function::__value_func<char const* ()(DSP_Host_Types::CustomPropertyDataType)>::~__value_func[abi:ne180100]((void *)this + 33);
  std::__function::__value_func<DSP_Host_Types::CustomPropertyDataType ()(char const*)>::~__value_func[abi:ne180100]((void *)this + 29);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DSPPropertyInfo *)((char *)this + 208));
  *((void *)this + 15) = &unk_1F147F380;
  std::__function::__value_func<char const* ()(DSP_Host_Types::CustomPropertyDataType)>::~__value_func[abi:ne180100]((void *)this + 22);
  std::__function::__value_func<DSP_Host_Types::CustomPropertyDataType ()(char const*)>::~__value_func[abi:ne180100]((void *)this + 18);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DSPPropertyInfo *)((char *)this + 120));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DSPPropertyInfo *)((char *)this + 96));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DSPPropertyInfo *)((char *)this + 72));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DSPPropertyInfo *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DSPPropertyInfo *)((char *)this + 24));
  *(void *)this = &unk_1F147F3D8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);

  JUMPOUT(0x1C1859840);
}

{
  void *v2;

  *(void *)this = &unk_1F147EFD8;
  CFArrayRef v2 = (void *)*((void *)this + 37);
  if (v2)
  {
    *((void *)this + 38) = v2;
    operator delete(v2);
  }
  *((void *)this + 26) = &unk_1F147F380;
  std::__function::__value_func<char const* ()(DSP_Host_Types::CustomPropertyDataType)>::~__value_func[abi:ne180100]((void *)this + 33);
  std::__function::__value_func<DSP_Host_Types::CustomPropertyDataType ()(char const*)>::~__value_func[abi:ne180100]((void *)this + 29);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DSPPropertyInfo *)((char *)this + 208));
  *((void *)this + 15) = &unk_1F147F380;
  std::__function::__value_func<char const* ()(DSP_Host_Types::CustomPropertyDataType)>::~__value_func[abi:ne180100]((void *)this + 22);
  std::__function::__value_func<DSP_Host_Types::CustomPropertyDataType ()(char const*)>::~__value_func[abi:ne180100]((void *)this + 18);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DSPPropertyInfo *)((char *)this + 120));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DSPPropertyInfo *)((char *)this + 96));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DSPPropertyInfo *)((char *)this + 72));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DSPPropertyInfo *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DSPPropertyInfo *)((char *)this + 24));
  *(void *)this = &unk_1F147F3D8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

BOOL DSP_Host_Types::DSPPropertyInfoArray::load_from(DSP_Host_Types::DSPPropertyInfoArray *this, CFDictionaryRef *a2)
{
  uint64_t v4 = (void *)((char *)this + 24);
  std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100]((uint64_t *)this + 3);
  v29[0] = &unk_1F1487618;
  v29[1] = 0;
  v29[2] = a2;
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(&theArray, *a2, @"custom property info array");
  if (v28)
  {
    CFArrayRef v5 = theArray;
    if (theArray)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      CFArrayRef v7 = theArray;
      if (theArray) {
        CFIndex v8 = CFArrayGetCount(theArray);
      }
      else {
        CFIndex v8 = 0;
      }
      for (unint64_t i = 0; ; ++i)
      {
        BOOL v11 = v5 == v7 && v8 == i;
        BOOL v12 = v11;
        if (Count == i || v12) {
          break;
        }
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&cf, v5, i);
        std::allocate_shared[abi:ne180100]<DSP_Host_Types::DSPPropertyInfo,std::allocator<DSP_Host_Types::DSPPropertyInfo>,char const(&)[1],void>(&v31, "");
        uint64_t v13 = v31;
        (*(void (**)(void, CFTypeRef *))(*(void *)v31 + 32))(v31, &cf);
        CFTypeRef v14 = (void *)*((void *)this + 4);
        unint64_t v15 = *((void *)this + 5);
        if ((unint64_t)v14 >= v15)
        {
          uint64_t v18 = ((uint64_t)v14 - *v4) >> 4;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 60) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v20 = v15 - *v4;
          if (v20 >> 3 > v19) {
            unint64_t v19 = v20 >> 3;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          v32[4] = (char *)this + 40;
          char v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v21);
          uint64_t v23 = &v22[16 * v18];
          v32[0] = v22;
          v32[1] = v23;
          v32[3] = &v22[16 * v24];
          unint64_t v25 = (std::__shared_weak_count *)*((void *)&v31 + 1);
          *(_OWORD *)uint64_t v23 = v31;
          CFTypeRef v16 = v25;
          if (v25)
          {
            atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
            CFTypeRef v16 = (std::__shared_weak_count *)*((void *)&v31 + 1);
          }
          long long v32[2] = v23 + 16;
          std::vector<std::shared_ptr<DSP_Host_Types::FormatDescription>>::__swap_out_circular_buffer(v4, v32);
          CFTypeRef v17 = (void *)*((void *)this + 4);
          std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)v32);
        }
        else
        {
          CFTypeRef v16 = (std::__shared_weak_count *)*((void *)&v31 + 1);
          *CFTypeRef v14 = v13;
          v14[1] = v16;
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          CFTypeRef v17 = v14 + 2;
          *((void *)this + 4) = v14 + 2;
        }
        *((void *)this + 4) = v17;
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        if (cf) {
          CFRelease(cf);
        }
      }
      BOOL v9 = *((void *)this + 3) != *((void *)this + 4);
    }
    else
    {
      BOOL v9 = 0;
    }
  }
  else
  {
    BOOL v9 = 1;
  }
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theArray);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v29);
  return v9;
}

void sub_1BAE9D380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, const void *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  applesauce::CF::DictionaryRef::~DictionaryRef(&a16);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a11);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)&a13);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::DSPPropertyInfoArray::add_to(DSP_Host_Types::DSPPropertyInfoArray *this, __CFDictionary **a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  CFTypeRef v9 = Mutable;
  CFArrayRef v6 = (void *)*((void *)this + 3);
  CFArrayRef v5 = (void *)*((void *)this + 4);
  if (v6 == v5)
  {
    CFTypeRef v7 = Mutable;
  }
  else
  {
    do
    {
      if (*v6) {
        (*(void (**)(void, CFTypeRef *))(*(void *)*v6 + 40))(*v6, &v9);
      }
      v6 += 2;
    }
    while (v6 != v5);
    CFTypeRef v7 = v9;
  }
  mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)&cf, v7);
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(*a2, @"custom property info array", cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v9) {
    CFRelease(v9);
  }
}

void sub_1BAE9D4A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<DSP_Host_Types::FormatDescription>,DSP_Host_Types::FormatDescription*,DSP_Host_Types::FormatDescription*,DSP_Host_Types::FormatDescription*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::FormatDescription *)(a3 + v6), (const DSP_Host_Types::FormatDescription *)(a1 + v6));
      v6 += 152;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void *std::__function::__value_func<char const* ()(DSP_Host_Types::StreamSemanticType)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    int v3 = result;
    uint64_t v4 = (void *)result[3];
    CFArrayRef v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        CFTypeID result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        CFTypeID result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      CFTypeID result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1BAE9D868(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<DSP_Host_Types::StreamSemanticType ()(char const*)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    int v3 = result;
    uint64_t v4 = (void *)result[3];
    CFArrayRef v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        CFTypeID result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        CFTypeID result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      CFTypeID result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1BAE9DAD4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t DSP_Host_Types::AudioChannelConfiguration::operator=(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(a1 + 40) = *a2;
  *(unsigned char *)(a1 + 44) = 1;
  *(_DWORD *)(a1 + 64) = a2[1];
  *(unsigned char *)(a1 + 68) = 1;
  *(_DWORD *)(a1 + 88) = a2[2];
  *(unsigned char *)(a1 + 92) = 1;
  uint64_t v3 = a1 + 96;
  std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100]((uint64_t *)(a1 + 96));
  if (a2[2])
  {
    unint64_t v4 = 0;
    CFArrayRef v5 = a2 + 5;
    do
    {
      uint64_t v6 = (char *)operator new(0x78uLL);
      *((void *)v6 + 1) = 0;
      *((void *)v6 + 2) = 0;
      *(void *)uint64_t v6 = &unk_1F147F150;
      v6[32] = 0;
      v6[40] = 0;
      *((void *)v6 + 3) = &unk_1F147ECB0;
      std::string::basic_string[abi:ne180100]<0>(__p, "channel label");
      DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)v6 + 6, (uint64_t)__p);
      *((void *)v6 + 6) = &unk_1F1487570;
      v6[64] = 0;
      v6[68] = 0;
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "channel flags");
      DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)v6 + 9, (uint64_t)__p);
      *((void *)v6 + 9) = &unk_1F1487570;
      v6[88] = 0;
      v6[92] = 0;
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      *((void *)v6 + 12) = 0;
      *((void *)v6 + 13) = 0;
      *((void *)v6 + 14) = 0;
      *((_DWORD *)v6 + 16) = a2[5 * v4 + 3];
      v6[68] = 1;
      *((_DWORD *)v6 + 22) = a2[5 * v4 + 4];
      v6[92] = 1;
      LODWORD(__p[0]) = 0;
      std::vector<float>::resize((char **)v6 + 12, 3uLL, __p);
      uint64_t v7 = *((void *)v6 + 12);
      uint64_t v8 = *((void *)v6 + 13);
      uint64_t v9 = v8 - v7;
      if (v8 != v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = v9 >> 2;
        do
        {
          *(_DWORD *)(v7 + 4 * v10) = v5[v10];
          ++v10;
        }
        while (v11 > v10);
      }
      *(void *)&long long v14 = v6 + 24;
      *((void *)&v14 + 1) = v6;
      std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100](v3, &v14);
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
      ++v4;
      v5 += 5;
    }
    while (v4 < a2[2]);
  }
  return a1;
}

void sub_1BAE9DD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F1A0;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v17[1].__shared_owners_);
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v19);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_Types::AudioChannelConfiguration::hash_equal(DSP_Host_Types::AudioChannelConfiguration *this, const DSP_Host_Types::AudioChannelConfiguration *a2)
{
  unint64_t v4 = DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description(this);
  if (v4 != DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description(a2)) {
    return 0;
  }
  uint64_t v5 = *((void *)this + 12);
  uint64_t v6 = *((void *)this + 13);
  if (v6 - v5 != *((void *)a2 + 13) - *((void *)a2 + 12) || v6 == v5) {
    return 1;
  }
  unint64_t v9 = 0;
  do
  {
    uint64_t v10 = v5 + 16 * v9;
    uint64_t result = *(void *)v10;
    if (!*(void *)v10) {
      break;
    }
    unint64_t v11 = (DSP_Host_Types::IDSP_Host_DictionaryData **)(*((void *)a2 + 12) + 16 * v9);
    if (!*v11) {
      return 0;
    }
    unint64_t v12 = DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((DSP_Host_Types::IDSP_Host_DictionaryData *)result);
    if (v12 != DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description(*v11)) {
      return 0;
    }
    long long v14 = *(float **)(*(void *)v10 + 72);
    uint64_t v13 = *(float **)(*(void *)v10 + 80);
    unint64_t v15 = (float *)*((void *)*v11 + 9);
    if ((char *)v13 - (char *)v14 != *((void *)*v11 + 10) - (void)v15) {
      return 0;
    }
    while (v14 != v13)
    {
      if (*v14 != *v15) {
        return 0;
      }
      ++v14;
      ++v15;
    }
    ++v9;
    uint64_t v5 = *((void *)this + 12);
    uint64_t result = 1;
  }
  while (v9 < (*((void *)this + 13) - v5) >> 4);
  return result;
}

uint64_t DSP_Host_Types::DeviceDescription::hash_equal(DSP_Host_Types::DeviceDescription const&)const::$_0::operator()(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (a1[1] == *a1) {
    return 1;
  }
  unint64_t v5 = 0;
  while (1)
  {
    uint64_t v6 = *(void **)(v2 + 16 * v5);
    if (!v6) {
      return 0;
    }
    uint64_t v7 = *(void **)(*a2 + 16 * v5);
    if (!v7) {
      return 0;
    }
    unint64_t v8 = DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((DSP_Host_Types::IDSP_Host_DictionaryData *)v6);
    if (v8 != DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((DSP_Host_Types::IDSP_Host_DictionaryData *)v7)) {
      return 0;
    }
    unint64_t v9 = DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((DSP_Host_Types::IDSP_Host_DictionaryData *)(v6 + 14));
    if (v9 != DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((DSP_Host_Types::IDSP_Host_DictionaryData *)(v7 + 14))) {
      return 0;
    }
    uint64_t v10 = v6[42];
    uint64_t v11 = v6[43];
    if (v11 - v10 != v7[43] - v7[42]) {
      return 0;
    }
    if (v11 != v10)
    {
      uint64_t v12 = 0;
      unint64_t v13 = 0;
      do
      {
        long long v14 = (DSP_Host_Types::IDSP_Host_DictionaryData *)(v7[42] + v12);
        unint64_t v15 = DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((DSP_Host_Types::IDSP_Host_DictionaryData *)(v10 + v12));
        if (v15 != DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description(v14)) {
          return 0;
        }
        ++v13;
        uint64_t v10 = v6[42];
        v12 += 152;
      }
      while (v13 < 0x86BCA1AF286BCA1BLL * ((v6[43] - v10) >> 3));
    }
    ++v5;
    uint64_t v2 = *a1;
    if (v5 >= (a1[1] - *a1) >> 4) {
      return 1;
    }
  }
}

void *DSP_Host_Types::ConfigurationChangeRequest::debug_stringify_compare_result(void *a1, int a2)
{
  char v2 = a2;
  if ((a2 & 0x20) != 0)
  {
    uint64_t v6 = "identical";
  }
  else
  {
    if (a2)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"same ", 5);
      if (v2) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"activation ", 11);
      }
      if ((v2 & 2) != 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"processing ", 11);
      }
      if ((v2 & 4) != 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"device list ", 12);
      }
      if ((v2 & 8) != 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"device traits ", 14);
      }
      if ((v2 & 0x10) != 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"streams used ", 13);
      }
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1, (uint64_t)v9);
      v7[0] = *MEMORY[0x1E4FBA408];
      uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      *(void *)((char *)v7 + *(void *)(v7[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
      uint64_t v8 = v4;
      v9[0] = MEMORY[0x1E4FBA470] + 16;
      if (v10 < 0) {
        operator delete((void *)v9[8]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      return (void *)MEMORY[0x1C1859700](&v11);
    }
    uint64_t v6 = "different";
  }

  return std::string::basic_string[abi:ne180100]<0>(a1, v6);
}

void sub_1BAE9E258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_Types::ConfigurationChangeRequest::util_compare_request(unsigned __int8 **this, unsigned __int8 **a2, int a3)
{
  if (a3
    && (DSP_Host_Types::ConfigurationChangeRequest::hash_equal(this, (const DSP_Host_Types::ConfigurationChangeRequest *)a2) & 1) != 0)
  {
    return 63;
  }
  BOOL v6 = DSP_Dictionariable::SingleKvp<BOOL>::operator==((uint64_t)(this + 3), (uint64_t)(a2 + 3));
  if (this[14] == a2[14])
  {
    uint64_t v7 = this[12];
    if (v7 == (unsigned __int8 *)(this + 13))
    {
LABEL_19:
      char v13 = 2;
      goto LABEL_21;
    }
    uint64_t v8 = a2[12];
    while (*((_DWORD *)v7 + 7) == *((_DWORD *)v8 + 7))
    {
      unint64_t v9 = (unsigned __int8 *)*((void *)v7 + 1);
      char v10 = v7;
      if (v9)
      {
        do
        {
          uint64_t v7 = v9;
          unint64_t v9 = *(unsigned __int8 **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v7 = (unsigned __int8 *)*((void *)v10 + 2);
          BOOL v26 = *(void *)v7 == (void)v10;
          char v10 = v7;
        }
        while (!v26);
      }
      uint64_t v11 = (unsigned __int8 *)*((void *)v8 + 1);
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          uint64_t v11 = *(unsigned __int8 **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (unsigned __int8 *)*((void *)v8 + 2);
          BOOL v26 = *(void *)v12 == (void)v8;
          uint64_t v8 = v12;
        }
        while (!v26);
      }
      uint64_t v8 = v12;
      if (v7 == (unsigned __int8 *)(this + 13)) {
        goto LABEL_19;
      }
    }
  }
  char v13 = 0;
LABEL_21:
  unsigned __int8 v5 = v13 | v6;
  long long v14 = this[83];
  unint64_t v15 = this[82];
  if (v14 - v15 == a2[83] - a2[82])
  {
    v5 |= 0xCu;
    if (v14 != v15)
    {
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      while (1)
      {
        uint64_t v18 = *(void *)&v15[v16];
        if (!v18) {
          break;
        }
        unint64_t v19 = a2[82];
        uint64_t v20 = *(void *)&v19[v16];
        if (!v20) {
          break;
        }
        int v21 = DSP_Dictionariable::SingleKvp<std::string>::operator==(v18 + 24, v20 + 24);
        char v22 = DSP_Dictionariable::SingleKvp<std::string>::operator==(*(void *)&v15[v16] + 72, *(void *)&v19[v16] + 72);
        if (!v21 || (v22 & 1) == 0) {
          break;
        }
        uint64_t v23 = *(void *)&v15[v16];
        uint64_t v24 = *(void *)&v19[v16];
        if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)(v23 + 256), (const __CFString **)(v24 + 256)))
        {
          BOOL v25 = 0;
        }
        else
        {
          if (*(unsigned char *)(v23 + 272)) {
            BOOL v26 = *(unsigned char *)(v24 + 272) == 0;
          }
          else {
            BOOL v26 = 1;
          }
          if (v26) {
            BOOL v25 = (*(unsigned char *)(v23 + 272) != 0) == (*(unsigned char *)(v24 + 272) != 0);
          }
          else {
            BOOL v25 = *(double *)(v23 + 264) == *(double *)(v24 + 264);
          }
        }
        if ((v25 & DSP_Dictionariable::SingleKvp<BOOL>::operator==(*(void *)&v15[v16] + 400, *(void *)&v19[v16] + 400)) == 0)v5 &= ~8u; {
        ++v17;
        }
        unint64_t v15 = this[82];
        v16 += 16;
        if (v17 >= (this[83] - v15) >> 4) {
          goto LABEL_41;
        }
      }
      v5 &= 0xF3u;
    }
  }
LABEL_41:
  unint64_t v27 = this[75];
  char v28 = this[74];
  char v29 = a2[75];
  uint64_t v30 = a2[74];
  if (v27 - v28 == v29 - v30)
  {
    while (v28 != v27)
    {
      if (!std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v28, v30)) {
        return v5;
      }
      v28 += 24;
      v30 += 24;
    }
    v5 |= 0x10u;
  }
  return v5;
}

uint64_t DSP_Host_Types::ConfigurationChangeRequest::hash_equal(unsigned __int8 **this, const DSP_Host_Types::ConfigurationChangeRequest *a2)
{
  unint64_t v4 = DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((DSP_Host_Types::IDSP_Host_DictionaryData *)this);
  if (v4 == DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description(a2)
    && this[14] == *((unsigned __int8 **)a2 + 14))
  {
    unsigned __int8 v5 = (unsigned __int8 **)this[12];
    if (v5 == this + 13)
    {
LABEL_17:
      uint64_t v12 = this[75];
      char v13 = this[74];
      long long v14 = (unsigned __int8 *)*((void *)a2 + 74);
      if (v12 - v13 == *((void *)a2 + 75) - (void)v14)
      {
        while (v13 != v12)
        {
          uint64_t result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v13, v14);
          if (!result) {
            return result;
          }
          v13 += 24;
          v14 += 24;
        }
        unint64_t v16 = DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((DSP_Host_Types::IDSP_Host_DictionaryData *)(this + 9));
        if (v16 == DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((const DSP_Host_Types::ConfigurationChangeRequest *)((char *)a2 + 72)))
        {
          unint64_t v17 = DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((DSP_Host_Types::IDSP_Host_DictionaryData *)(this + 15));
          if (v17 == DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((const DSP_Host_Types::ConfigurationChangeRequest *)((char *)a2 + 120)))
          {
            unint64_t v18 = DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((DSP_Host_Types::IDSP_Host_DictionaryData *)(this + 34));
            if (v18 == DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((const DSP_Host_Types::ConfigurationChangeRequest *)((char *)a2 + 272)))
            {
              uint64_t result = DSP_Host_Types::AudioChannelConfiguration::hash_equal((DSP_Host_Types::AudioChannelConfiguration *)(this + 59), (const DSP_Host_Types::ConfigurationChangeRequest *)((char *)a2 + 472));
              if (!result) {
                return result;
              }
              unint64_t v19 = this[83];
              uint64_t v20 = this[82];
              if (v19 - v20 == *((void *)a2 + 83) - *((void *)a2 + 82))
              {
                if (v19 == v20) {
                  return 1;
                }
                uint64_t v21 = 0;
                unint64_t v22 = 0;
                while (1)
                {
                  uint64_t v23 = *(uint64_t **)&v20[v21];
                  if (!v23) {
                    break;
                  }
                  uint64_t v24 = *(void **)(*((void *)a2 + 82) + v21);
                  if (!v24) {
                    break;
                  }
                  unint64_t v25 = DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((DSP_Host_Types::IDSP_Host_DictionaryData *)v23);
                  if (v25 != DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((DSP_Host_Types::IDSP_Host_DictionaryData *)v24)) {
                    break;
                  }
                  uint64_t result = DSP_Host_Types::AudioChannelConfiguration::hash_equal((DSP_Host_Types::AudioChannelConfiguration *)(v23 + 53), (const DSP_Host_Types::AudioChannelConfiguration *)(v24 + 53));
                  if (result)
                  {
                    uint64_t result = DSP_Host_Types::AudioChannelConfiguration::hash_equal((DSP_Host_Types::AudioChannelConfiguration *)(v23 + 68), (const DSP_Host_Types::AudioChannelConfiguration *)(v24 + 68));
                    if (result)
                    {
                      if (v23[84] - v23[83] != v24[84] - v24[83]
                        || v23[87] - v23[86] != v24[87] - v24[86]
                        || v23[90] - v23[89] != v24[90] - v24[89])
                      {
                        return 0;
                      }
                      uint64_t result = DSP_Host_Types::DeviceDescription::hash_equal(DSP_Host_Types::DeviceDescription const&)const::$_0::operator()(v23 + 83, v24 + 83);
                      if (result)
                      {
                        uint64_t result = DSP_Host_Types::DeviceDescription::hash_equal(DSP_Host_Types::DeviceDescription const&)const::$_0::operator()(v23 + 86, v24 + 86);
                        if (result)
                        {
                          if ((DSP_Host_Types::DeviceDescription::hash_equal(DSP_Host_Types::DeviceDescription const&)const::$_0::operator()(v23 + 89, v24 + 89) & 1) == 0)return 0; {
                          ++v22;
                          }
                          uint64_t v20 = this[82];
                          v21 += 16;
                          uint64_t result = 1;
                          if (v22 < (this[83] - v20) >> 4) {
                            continue;
                          }
                        }
                      }
                    }
                  }
                  return result;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      BOOL v6 = (void *)*((void *)a2 + 12);
      while (*((_DWORD *)v5 + 7) == *((_DWORD *)v6 + 7))
      {
        uint64_t v7 = v5[1];
        uint64_t v8 = v5;
        if (v7)
        {
          do
          {
            unsigned __int8 v5 = (unsigned __int8 **)v7;
            uint64_t v7 = *(unsigned __int8 **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            unsigned __int8 v5 = (unsigned __int8 **)v8[2];
            BOOL v9 = *v5 == (unsigned __int8 *)v8;
            uint64_t v8 = v5;
          }
          while (!v9);
        }
        char v10 = (void *)v6[1];
        if (v10)
        {
          do
          {
            uint64_t v11 = v10;
            char v10 = (void *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            uint64_t v11 = (void *)v6[2];
            BOOL v9 = *v11 == (void)v6;
            BOOL v6 = v11;
          }
          while (!v9);
        }
        BOOL v6 = v11;
        if (v5 == this + 13) {
          goto LABEL_17;
        }
      }
    }
  }
  return 0;
}

BOOL DSP_Dictionariable::SingleKvp<BOOL>::operator==(uint64_t a1, uint64_t a2)
{
  if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)(a1 + 8), (const __CFString **)(a2 + 8)))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 17)) {
    BOOL v5 = *(unsigned char *)(a2 + 17) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return (*(unsigned char *)(a1 + 17) != 0) == (*(unsigned char *)(a2 + 17) != 0);
  }
  else {
    return *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  }
}

uint64_t DSP_Dictionariable::SingleKvp<std::string>::operator==(uint64_t a1, uint64_t a2)
{
  if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)(a1 + 8), (const __CFString **)(a2 + 8)))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 40)) {
    BOOL v5 = *(unsigned char *)(a2 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return (*(unsigned char *)(a1 + 40) != 0) == (*(unsigned char *)(a2 + 40) != 0);
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 39);
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 39);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 24);
  }
  uint64_t v8 = *(unsigned __int8 *)(a2 + 39);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a2 + 24);
  }
  if (v7 != v8) {
    return 0;
  }
  char v10 = (const void **)(a1 + 16);
  if (v9 >= 0) {
    uint64_t v11 = (unsigned __int8 *)(a2 + 16);
  }
  else {
    uint64_t v11 = *(unsigned __int8 **)(a2 + 16);
  }
  if ((v6 & 0x80) != 0) {
    return memcmp(*v10, v11, *(void *)(a1 + 24)) == 0;
  }
  if (!*(unsigned char *)(a1 + 39)) {
    return 1;
  }
  uint64_t v12 = v6 - 1;
  do
  {
    int v14 = *(unsigned __int8 *)v10;
    char v10 = (const void **)((char *)v10 + 1);
    int v13 = v14;
    int v16 = *v11++;
    int v15 = v16;
    BOOL v18 = v12-- != 0;
    uint64_t result = v13 == v15;
  }
  while (v13 == v15 && v18);
  return result;
}

uint64_t AMCP::Core::Engine::register_io_buffer()
{
  return 0;
}

void AMCP::Core::update_time_for_all(void *a1, long long *a2, long long *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    do
    {
      if ((*(unsigned int (**)(void))(**(void **)v4 + 312))(*(void *)v4)) {
        std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((uint64_t)a1, v4);
      }
      ++v4;
    }
    while (v4 != a3);
  }
}

void std::vector<std::shared_ptr<AMCP::Core::Engine>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = a3;
    uint64_t v4 = a2;
    uint64_t v6 = *(void *)(a1 + 8);
    if (a3 != v6)
    {
      uint64_t v7 = 16 * ((a3 - a2) >> 4);
      do
      {
        uint64_t v8 = (void *)(v4 + v7);
        long long v9 = *(_OWORD *)(v4 + v7);
        *uint64_t v8 = 0;
        v8[1] = 0;
        char v10 = *(std::__shared_weak_count **)(v4 + 8);
        *(_OWORD *)uint64_t v4 = v9;
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        v4 += 16;
      }
      while (v4 + v7 != v6);
      uint64_t v3 = *(void *)(a1 + 8);
    }
    while (v3 != v4)
    {
      uint64_t v11 = *(std::__shared_weak_count **)(v3 - 8);
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      v3 -= 16;
    }
    *(void *)(a1 + 8) = v4;
  }
}

double AMCP::Core::Engine::calculate_safety_violation_read(AMCP::Core::Engine *this, double a2)
{
  uint64_t v4 = mach_absolute_time();
  (*(void (**)(double *__return_ptr, AMCP::Core::Engine *))(*(void *)this + 304))(v8, this);
  double v5 = (*(double (**)(AMCP::Core::Engine *))(*(void *)this + 344))(this);
  double v6 = v8[0] + floor((double)(v4 - *(void *)&v8[1]) / v5);
  return v6 - (double)(*(unsigned int (**)(AMCP::Core::Engine *))(*(void *)this + 80))(this) - a2;
}

double AMCP::Core::Engine::calculate_safety_violation_write(AMCP::Core::Engine *this, double a2)
{
  uint64_t v4 = mach_absolute_time();
  (*(void (**)(double *__return_ptr, AMCP::Core::Engine *))(*(void *)this + 304))(v8, this);
  double v5 = (*(double (**)(AMCP::Core::Engine *))(*(void *)this + 344))(this);
  double v6 = v8[0] + floor((double)(v4 - *(void *)&v8[1]) / v5);
  return a2 - (v6 + (double)(*(unsigned int (**)(AMCP::Core::Engine *))(*(void *)this + 88))(this));
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        }
        else {
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void std::allocate_shared[abi:ne180100]<AMCP::Utility::Power_Assertion,std::allocator<AMCP::Utility::Power_Assertion>,applesauce::CF::StringRef &,applesauce::CF::StringRef &,applesauce::CF::ArrayRef,int &,void>(IOPMAssertionID **a1, const void **a2, const void **a3, const void **a4, uint64_t a5)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  unint64_t v10 = (char *)operator new(0x38uLL);
  *(_OWORD *)(v10 + 8) = 0u;
  *(void *)unint64_t v10 = &unk_1F147F568;
  *((_DWORD *)v10 + 6) = 0;
  unint64_t v11 = (IOPMAssertionID *)(v10 + 24);
  *((void *)v10 + 4) = 0;
  uint64_t v12 = (void **)(v10 + 32);
  *(_OWORD *)(v10 + 40) = 0u;
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  AssertionProperties[1] = Mutable;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, @"AssertType");
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(Mutable, *(const void **)buf, *a2);
  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)buf);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, @"AssertName");
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(Mutable, *(const void **)buf, *a3);
  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)buf);
  }
  if (a5 != -1)
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, @"AssertionOnBehalfOfPID");
    LODWORD(valuePtr.__vftable) = a5;
    CFNumberRef v14 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!v14)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, *(const void **)buf, v14);
    CFRelease(v14);
    if (*(void *)buf) {
      CFRelease(*(CFTypeRef *)buf);
    }
  }
  if (*a4)
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, @"ResourcesUsed");
    mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(Mutable, *(const void **)buf, *a4);
    if (*(void *)buf) {
      CFRelease(*(CFTypeRef *)buf);
    }
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, @"AllowsDeviceRestart");
  int v15 = (const void *)*MEMORY[0x1E4F1CFC0];
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::BooleanRef>(Mutable, *(const void **)buf, (const void *)*MEMORY[0x1E4F1CFC0]);
  if (v15) {
    CFRelease(v15);
  }
  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)buf);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, @"AssertLevel");
  LODWORD(valuePtr.__vftable) = 0;
  CFNumberRef v16 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v16)
  {
    long long v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v31, "Could not construct");
    __cxa_throw(v31, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, *(const void **)buf, v16);
  CFRelease(v16);
  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)buf);
  }
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)AssertionProperties, Mutable);
  unint64_t v17 = (AMCP::Utility::Kernel_Error_Category *)IOPMAssertionCreateWithProperties(AssertionProperties[0], v11);
  unsigned int v18 = v17;
  AMCP::Utility::Kernel_Error_Category::get(v17);
  if (v18)
  {
    AMCP::Log::Scope_Registry::get(v19);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    char v28 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      char v29 = pthread_self();
      mach_port_t v30 = pthread_mach_thread_np(v29);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v30;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Power_Assertion.h";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 92;
      __int16 v49 = 2080;
      char v50 = "error.operator BOOL()";
      _os_log_error_impl(&dword_1BAA78000, v28, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to create the power assertion", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v46);
    __cxa_allocate_exception(0x50uLL);
    MEMORY[0x1C1859240](__p, v18, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
    boost::enable_error_info<std::system_error>(&valuePtr, (uint64_t)__p);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&valuePtr);
    mach_port_t v51 = "AMCP::Utility::Power_Assertion::Power_Assertion(const CF::String &, const CF::String &, const CF::Array &, pid"
          "_t, Device_Restart)";
    unint64_t v52 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Utility/Power_Assertion.h";
    int v53 = 92;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v37);
    uint64_t v39 = &unk_1F148AA90;
    long long v40 = v37;
    uint64_t v41 = v38;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>();
  }
  if (a5 == -1)
  {
    CFStringRef v24 = (const __CFString *)*a2;
    if (!*a2)
    {
      char v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v35, "Could not construct");
      __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v25 = *v11;
    p_std::runtime_error valuePtr = (std::runtime_error_vtbl *)&valuePtr;
    applesauce::CF::convert_to<std::string,0>((uint64_t)&valuePtr, v24);
    if (v45 < 0) {
      p_std::runtime_error valuePtr = valuePtr.__vftable;
    }
    if (!*a3)
    {
      CFArrayRef v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v36, "Could not construct");
      __cxa_throw(v36, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)*a3);
    if (v43 >= 0) {
      unint64_t v27 = __p;
    }
    else {
      unint64_t v27 = (void **)__p[0];
    }
    caulk::make_string((caulk *)"power assertion ID %d of type '%s' with name: '%s'", (uint64_t)buf, v25, p_valuePtr, v27);
  }
  else
  {
    CFStringRef v20 = (const __CFString *)*a2;
    if (!*a2)
    {
      CFIndex v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v33, "Could not construct");
      __cxa_throw(v33, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v21 = *v11;
    unint64_t v22 = (std::runtime_error_vtbl *)&valuePtr;
    applesauce::CF::convert_to<std::string,0>((uint64_t)&valuePtr, v20);
    if (v45 < 0) {
      unint64_t v22 = valuePtr.__vftable;
    }
    if (!*a3)
    {
      std::string::size_type v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v34, "Could not construct");
      __cxa_throw(v34, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)*a3);
    if (v43 >= 0) {
      uint64_t v23 = __p;
    }
    else {
      uint64_t v23 = (void **)__p[0];
    }
    caulk::make_string((caulk *)"power assertion ID %d of type '%s' with name: '%s' on behalf of %d", (uint64_t)buf, v21, v22, v23, a5);
  }
  if (v10[55] < 0) {
    operator delete(*v12);
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)buf;
  *((void *)v10 + 6) = *(void *)&buf[16];
  buf[23] = 0;
  buf[0] = 0;
  if (v43 < 0) {
    operator delete(__p[0]);
  }
  if (v45 < 0) {
    operator delete(valuePtr.__vftable);
  }
  if (AssertionProperties[0]) {
    CFRelease(AssertionProperties[0]);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  *a1 = v11;
  a1[1] = (IOPMAssertionID *)v10;
}

void sub_1BAE9F404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,std::runtime_error a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,const void *a40)
{
  applesauce::CF::DictionaryRef::~DictionaryRef(&a40);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)(v42 - 200));
  if (*(char *)(v40 + 55) < 0) {
    operator delete(*v41);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v40);
  operator delete(v44);
  _Unwind_Resume(a1);
}

void mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::BooleanRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1) {
    CFDictionarySetValue(a1, a2, a3);
  }
}

void std::__shared_ptr_emplace<AMCP::Utility::Power_Assertion>::__on_zero_shared(uint64_t a1)
{
  IOPMAssertionID v2 = *(_DWORD *)(a1 + 24);
  if (v2) {
    IOPMAssertionRelease(v2);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    operator delete(v3);
  }
}

void std::__shared_ptr_emplace<AMCP::Utility::Power_Assertion>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F568;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Utility::Power_Assertion>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F568;
  std::__shared_weak_count::~__shared_weak_count(this);
}

AMCP::Core::Implementation::Simple_Engine_IO_State *AMCP::Core::Implementation::Simple_Engine_IO_State::Simple_Engine_IO_State(AMCP::Core::Implementation::Simple_Engine_IO_State *this, const __CFString **a2, unint64_t a3, unint64_t a4, int a5, dispatch_queue_t *a6, const AMCP::Utility::Dispatch_Queue *a7)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  *(void *)this = a3;
  *((void *)this + 1) = a4;
  *((void *)this + 2) = 0;
  LOBYTE(object) = 0;
  std::vector<BOOL>::vector((void *)this + 3, a3, (unsigned __int8 *)&object);
  *((_DWORD *)this + 12) = 0;
  LOBYTE(object) = 0;
  std::vector<BOOL>::vector((void *)this + 7, a4, (unsigned __int8 *)&object);
  *(_OWORD *)((char *)this + 120) = 0u;
  uint64_t v12 = (dispatch_object_t *)((char *)this + 120);
  *((_DWORD *)this + 20) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_WORD *)this + 76) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 850045863;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((void *)this + 34) = 850045863;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((void *)this + 45) = 850045863;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((void *)this + 54) = dispatch_semaphore_create(0);
  uint64_t v13 = dispatch_queue_create("AMCP Scratch Queue", 0);
  CFNumberRef v14 = AMCP::Utility::Dispatch_Queue::operator=((NSObject **)this + 15, v13);
  if (v13) {
    dispatch_release(v13);
  }
  if (!*v12)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&object, "com.apple.coreaudio", "AMCP");
    isa = object->isa;
    if (*(void *)v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v45);
    }
    if (os_log_type_enabled(isa, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v30 = pthread_self();
      mach_port_t v31 = pthread_mach_thread_np(v30);
      LODWORD(object) = 67109890;
      HIDWORD(object) = v31;
      *(_WORD *)char v45 = 2080;
      *(void *)&v45[2] = "Engine.cpp";
      __int16 v46 = 1024;
      int v47 = 224;
      __int16 v48 = 2080;
      __int16 v49 = "m_power_assertion_queue.operator BOOL() == true";
      _os_log_error_impl(&dword_1BAA78000, isa, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", (uint8_t *)&object, 0x22u);
    }
    abort();
  }
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&object, *v12);
  dispatch_set_target_queue(object, *a6);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&object);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v43, @"PreventUserIdleSystemSleep");
  if (!*a2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::convert_to<std::string,0>((uint64_t)cf, *a2);
  if (v39 >= 0) {
    int v15 = cf;
  }
  else {
    int v15 = (CFTypeRef *)cf[0];
  }
  caulk::make_string((caulk *)"com.apple.audio.%s.preventuseridlesleep", (uint64_t)__p, v15);
  if ((v41 & 0x80u) == 0) {
    CFNumberRef v16 = __p;
  }
  else {
    CFNumberRef v16 = (void **)__p[0];
  }
  if (v16)
  {
    if ((v41 & 0x80u) == 0) {
      CFIndex v17 = v41;
    }
    else {
      CFIndex v17 = (CFIndex)__p[1];
    }
    CFStringRef v18 = CFStringCreateWithBytes(0, (const UInt8 *)v16, v17, 0x8000100u, 0);
    CFStringRef v42 = v18;
    if (!v18)
    {
      CFIndex v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v33, "Could not construct");
      __cxa_throw(v33, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if ((v41 & 0x80) != 0) {
      goto LABEL_17;
    }
  }
  else
  {
    CFStringRef v18 = 0;
    CFStringRef v42 = 0;
    if ((v41 & 0x80) != 0) {
LABEL_17:
    }
      operator delete(__p[0]);
  }
  if (v39 < 0) {
    operator delete((void *)cf[0]);
  }
  CFDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  if (*(void *)this)
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)__p, @"audio-in");
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::StringRef>(Mutable, __p[0]);
    if (__p[0]) {
      CFRelease(__p[0]);
    }
  }
  if (*((void *)this + 1))
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)__p, @"audio-out");
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::StringRef>(Mutable, __p[0]);
    if (__p[0]) {
      CFRelease(__p[0]);
    }
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)cf, Mutable);
  std::allocate_shared[abi:ne180100]<AMCP::Utility::Power_Assertion,std::allocator<AMCP::Utility::Power_Assertion>,applesauce::CF::StringRef &,applesauce::CF::StringRef &,applesauce::CF::ArrayRef,int &,void>((IOPMAssertionID **)__p, &v43, (const void **)&v42, cf, 0xFFFFFFFFLL);
  long long v20 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v21 = (std::__shared_weak_count *)*((void *)this + 12);
  *(_OWORD *)((char *)this + 88) = v20;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (a5)
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v37, @"PreventUserIdleDisplaySleep");
    if (!*a2)
    {
      std::string::size_type v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v34, "Could not construct");
      __cxa_throw(v34, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)cf, *a2);
    if (v39 >= 0) {
      unint64_t v22 = cf;
    }
    else {
      unint64_t v22 = (CFTypeRef *)cf[0];
    }
    caulk::make_string((caulk *)"com.apple.audio.%s.preventuseridledisplaysleep", (uint64_t)__p, v22);
    if ((v41 & 0x80u) == 0) {
      uint64_t v23 = __p;
    }
    else {
      uint64_t v23 = (void **)__p[0];
    }
    if (v23)
    {
      if ((v41 & 0x80u) == 0) {
        CFIndex v24 = v41;
      }
      else {
        CFIndex v24 = (CFIndex)__p[1];
      }
      CFStringRef v25 = CFStringCreateWithBytes(0, (const UInt8 *)v23, v24, 0x8000100u, 0);
      CFStringRef v36 = v25;
      if (!v25)
      {
        char v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v35, "Could not construct");
        __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if ((v41 & 0x80) == 0) {
        goto LABEL_45;
      }
    }
    else
    {
      CFStringRef v25 = 0;
      CFStringRef v36 = 0;
      if ((v41 & 0x80) == 0) {
        goto LABEL_45;
      }
    }
    operator delete(__p[0]);
LABEL_45:
    if (v39 < 0) {
      operator delete((void *)cf[0]);
    }
    mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)cf, Mutable);
    std::allocate_shared[abi:ne180100]<AMCP::Utility::Power_Assertion,std::allocator<AMCP::Utility::Power_Assertion>,applesauce::CF::StringRef &,applesauce::CF::StringRef &,applesauce::CF::ArrayRef,int &,void>((IOPMAssertionID **)__p, &v37, (const void **)&v36, cf, 0xFFFFFFFFLL);
    long long v26 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    unint64_t v27 = (std::__shared_weak_count *)*((void *)this + 14);
    *(_OWORD *)((char *)this + 104) = v26;
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (v25) {
      CFRelease(v25);
    }
    if (v37) {
      CFRelease(v37);
    }
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v43) {
    CFRelease(v43);
  }
  return this;
}

void sub_1BAE9FC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, CFTypeRef a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,CFTypeRef a26)
{
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v29);
  mach_port_t v31 = *(std::__shared_weak_count **)(v26 + 112);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  std::vector<std::string>::pointer v32 = *(std::__shared_weak_count **)(v26 + 96);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (*v28) {
    operator delete(*v28);
  }
  if (*v27) {
    operator delete(*v27);
  }
  _Unwind_Resume(a1);
}

void AMCP::Core::Implementation::Simple_Engine_IO_State::get_input_stream_active_list(AMCP::Core::Implementation::Simple_Engine_IO_State *this, os_unfair_lock_s *a2)
{
  uint64_t v4 = a2 + 5;
  os_unfair_lock_lock(a2 + 5);
  std::vector<BOOL>::vector(this, (uint64_t)&a2[6]);

  os_unfair_lock_unlock(v4);
}

void AMCP::Core::Implementation::Simple_Engine_IO_State::set_input_stream_active_list(void *a1, uint64_t a2, uint64_t a3)
{
  double v5 = std::vector<BOOL>::vector(a1, a3);
  std::vector<BOOL>::resize((uint64_t)v5, *(void *)a2, 0);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 20));
  std::vector<BOOL>::operator=((void **)(a2 + 24), (uint64_t)a1);

  os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 20));
}

void sub_1BAE9FF3C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  if (*v1) {
    operator delete(*v1);
  }
  _Unwind_Resume(a1);
}

void AMCP::Core::Implementation::Simple_Engine_IO_State::get_output_stream_active_list(AMCP::Core::Implementation::Simple_Engine_IO_State *this, os_unfair_lock_s *a2)
{
  uint64_t v4 = a2 + 12;
  os_unfair_lock_lock(a2 + 12);
  std::vector<BOOL>::vector(this, (uint64_t)&a2[14]);

  os_unfair_lock_unlock(v4);
}

void AMCP::Core::Implementation::Simple_Engine_IO_State::set_output_stream_active_list(void *a1, uint64_t a2, uint64_t a3)
{
  double v5 = std::vector<BOOL>::vector(a1, a3);
  std::vector<BOOL>::resize((uint64_t)v5, *(void *)(a2 + 8), 0);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 48));
  std::vector<BOOL>::operator=((void **)(a2 + 56), (uint64_t)a1);

  os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 48));
}

void sub_1BAEA002C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  if (*v1) {
    operator delete(*v1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMCP::Core::Implementation::Simple_Engine_IO_State::take_power_assertions(uint64_t this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = atomic_load((unsigned int *)(this + 80));
  if ((v1 & 0x80000000) != 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v4 = **(NSObject ***)buf;
    if (*(void *)v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v22);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      double v5 = pthread_self();
      mach_port_t v6 = pthread_mach_thread_np(v5);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)unint64_t v22 = 2080;
      *(void *)&long long v22[2] = "Engine.cpp";
      __int16 v23 = 1024;
      int v24 = 292;
      __int16 v25 = 2080;
      *(void *)uint64_t v26 = "not (m_power_assertion_refcount >= 0)";
      _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v12);
    std::logic_error::logic_error(&v13, &v12);
    v13.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v14, &v13);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v19 = -1;
    v14.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v15 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(void *)&v26[6] = "void AMCP::Core::Implementation::Simple_Engine_IO_State::take_power_assertions()";
    unint64_t v27 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Engine.cpp";
    int v28 = 292;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v7);
    long long v10 = v7;
    uint64_t v11 = v8;
    long long v7 = 0uLL;
    uint64_t v8 = 0;
    unint64_t v9 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (!atomic_fetch_add((atomic_uint *volatile)(this + 80), 1u))
  {
    uint64_t v2 = *(void *)(this + 96);
    if (v2) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v3 = *(void *)(this + 112);
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
    operator new();
  }
  return this;
}

void sub_1BAEA033C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *applesauce::dispatch::v1::async<AMCP::Core::Implementation::Simple_Engine_IO_State::take_power_assertions(void)::$_0>(dispatch_queue_s *,AMCP::Core::Implementation::Simple_Engine_IO_State::take_power_assertions(void)::$_0 &&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v5 = a1;
  uint64_t v2 = *(IOPMAssertionID **)a1;
  if (v2) {
    AMCP::Utility::Power_Assertion::take(v2);
  }
  uint64_t v3 = *(IOPMAssertionID **)(a1 + 16);
  if (v3) {
    AMCP::Utility::Power_Assertion::take(v3);
  }
  return std::unique_ptr<-[Core_Audio_Driver_Service_Client connect_to_driver_service:]::$_2::operator() const(void)::{lambda(void)#1},std::default_delete<-[Core_Audio_Driver_Service_Client connect_to_driver_service:]::$_2::operator() const(void)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&v5);
}

void sub_1BAEA0398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<-[Core_Audio_Driver_Service_Client connect_to_driver_service:]::$_2::operator() const(void)::{lambda(void)#1},std::default_delete<-[Core_Audio_Driver_Service_Client connect_to_driver_service:]::$_2::operator() const(void)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void AMCP::Utility::Power_Assertion::take(IOPMAssertionID *this)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (*this)
  {
    LODWORD(valuePtr) = 255;
    CFNumberRef v2 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFNumberRef v19 = v2;
    if (!v2)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v3 = (AMCP::Utility::Kernel_Error_Category *)IOPMAssertionSetProperty(*this, @"AssertLevel", v2);
    unsigned int v4 = v3;
    AMCP::Utility::Kernel_Error_Category::get(v3);
    if (v4)
    {
      AMCP::Log::Scope_Registry::get(v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&valuePtr, "com.apple.coreaudio", "AMCP");
      mach_port_t v6 = *valuePtr;
      if (*(void *)v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v21);
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        long long v7 = pthread_self();
        mach_port_t v8 = pthread_mach_thread_np(v7);
        unint64_t v9 = this + 2;
        if (*((char *)this + 31) < 0) {
          unint64_t v9 = (void *)*v9;
        }
        LODWORD(valuePtr) = 67110146;
        HIDWORD(valuePtr) = v8;
        *(_WORD *)uint64_t v21 = 2080;
        *(void *)&v21[2] = "Power_Assertion.h";
        __int16 v22 = 1024;
        int v23 = 125;
        __int16 v24 = 2080;
        __int16 v25 = "error.operator BOOL()";
        __int16 v26 = 2080;
        unint64_t v27 = v9;
        _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to take %s", (uint8_t *)&valuePtr, 0x2Cu);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v18);
      __cxa_allocate_exception(0x50uLL);
      MEMORY[0x1C1859240](v16, v4, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
      boost::enable_error_info<std::system_error>(v17, (uint64_t)v16);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)&valuePtr, (uint64_t)v17);
      int v28 = "void AMCP::Utility::Power_Assertion::take()";
      uint64_t v29 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Utility/Power_Assertion.h";
      int v30 = 125;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v11);
      long long v14 = v11;
      uint64_t v15 = v12;
      long long v11 = 0uLL;
      uint64_t v12 = 0;
      std::logic_error v13 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>();
    }
    CFRelease(v2);
  }
}

void sub_1BAEA064C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, std::runtime_error a16, uint64_t a17, uint64_t a18, char a19)
{
  applesauce::CF::NumberRef::~NumberRef((const void **)(v19 - 152));
  _Unwind_Resume(a1);
}

uint64_t AMCP::Core::Implementation::Simple_Engine_IO_State::release_power_assertions(uint64_t this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v1 = atomic_load((unsigned int *)(this + 80));
  if (v1 <= 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unsigned int v4 = **(NSObject ***)buf;
    if (*(void *)v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v22);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = pthread_self();
      mach_port_t v6 = pthread_mach_thread_np(v5);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)__int16 v22 = 2080;
      *(void *)&long long v22[2] = "Engine.cpp";
      __int16 v23 = 1024;
      int v24 = 312;
      __int16 v25 = 2080;
      *(void *)__int16 v26 = "not (m_power_assertion_refcount > 0)";
      _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v12);
    std::logic_error::logic_error(&v13, &v12);
    v13.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v14, &v13);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v19 = -1;
    v14.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v15 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(void *)&v26[6] = "void AMCP::Core::Implementation::Simple_Engine_IO_State::release_power_assertions()";
    unint64_t v27 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Engine.cpp";
    int v28 = 312;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v7);
    long long v10 = v7;
    uint64_t v11 = v8;
    long long v7 = 0uLL;
    uint64_t v8 = 0;
    unint64_t v9 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (atomic_fetch_add((atomic_uint *volatile)(this + 80), 0xFFFFFFFF) == 1)
  {
    uint64_t v2 = *(void *)(this + 96);
    if (v2) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v3 = *(void *)(this + 112);
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
    operator new();
  }
  return this;
}

void sub_1BAEA09EC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *applesauce::dispatch::v1::async<AMCP::Core::Implementation::Simple_Engine_IO_State::release_power_assertions(void)::$_0>(dispatch_queue_s *,AMCP::Core::Implementation::Simple_Engine_IO_State::release_power_assertions(void)::$_0 &&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v5 = a1;
  uint64_t v2 = *(IOPMAssertionID **)a1;
  if (v2) {
    AMCP::Utility::Power_Assertion::release(v2);
  }
  uint64_t v3 = *(IOPMAssertionID **)(a1 + 16);
  if (v3) {
    AMCP::Utility::Power_Assertion::release(v3);
  }
  return std::unique_ptr<-[Core_Audio_Driver_Service_Client connect_to_driver_service:]::$_2::operator() const(void)::{lambda(void)#1},std::default_delete<-[Core_Audio_Driver_Service_Client connect_to_driver_service:]::$_2::operator() const(void)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&v5);
}

void AMCP::Utility::Power_Assertion::release(IOPMAssertionID *this)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*this)
  {
    LODWORD(valuePtr) = 0;
    CFNumberRef v2 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!v2)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v3 = (AMCP::Utility::Kernel_Error_Category *)IOPMAssertionSetProperty(*this, @"AssertLevel", v2);
    int v4 = (int)v3;
    AMCP::Utility::Kernel_Error_Category::get(v3);
    v13.__val_ = v4;
    v13.__cat_ = (const std::error_category *)&AMCP::Utility::Kernel_Error_Category::get(void)::s_category;
    if (v4)
    {
      AMCP::Log::Scope_Registry::get(v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&valuePtr, "com.apple.coreaudio", "AMCP");
      mach_port_t v6 = *valuePtr;
      if (*(void *)v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v15);
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        long long v7 = pthread_self();
        mach_port_t v8 = pthread_mach_thread_np(v7);
        unint64_t v9 = this + 2;
        if (*((char *)this + 31) < 0) {
          unint64_t v9 = (void *)*v9;
        }
        std::error_code::message(&v12, &v13);
        if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v10 = &v12;
        }
        else {
          long long v10 = (std::string *)v12.__r_.__value_.__r.__words[0];
        }
        LODWORD(valuePtr) = 67110402;
        HIDWORD(valuePtr) = v8;
        *(_WORD *)uint64_t v15 = 2080;
        *(void *)&_DWORD v15[2] = "Power_Assertion.h";
        __int16 v16 = 1024;
        int v17 = 136;
        __int16 v18 = 2080;
        int v19 = "error.value() == 0";
        __int16 v20 = 2080;
        uint64_t v21 = v9;
        __int16 v22 = 2080;
        __int16 v23 = v10;
        _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s failed to take %s: %s", (uint8_t *)&valuePtr, 0x36u);
        if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v12.__r_.__value_.__l.__data_);
        }
      }
      abort();
    }
    CFRelease(v2);
  }
}

void sub_1BAEA0C44(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void HALS_AHPPlugIn::~HALS_AHPPlugIn(HALS_AHPPlugIn *this)
{
  HALS_AHPPlugIn::~HALS_AHPPlugIn(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t v2;

  *(void *)this = &unk_1F147F5B8;
  CFNumberRef v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  HALB_CFPlugIn::~HALB_CFPlugIn((HALS_AHPPlugIn *)((char *)this + 8));
}

BOOL HALS_AHPPlugIn::ObjectIsPropertySettable(HALS_AHPPlugIn *this, uint64_t a2, const AudioObjectPropertyAddress *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  char v17 = 0;
  int v4 = (*(uint64_t (**)(HALS_AHPPlugIn *, uint64_t, const AudioObjectPropertyAddress *, char *))(*(void *)this + 192))(this, a2, a3, &v17);
  if (v4)
  {
    v5.i32[0] = a3->mSelector;
    int16x8_t v7 = (int16x8_t)vmovl_u8(v5);
    *(int16x4_t *)v7.i8 = vrev64_s16(*(int16x4_t *)v7.i8);
    *(int8x8_t *)v7.i8 = vmovn_s16(v7);
    __int32 v15 = v7.i32[0];
    char v16 = 0;
    v7.i32[0] = a3->mScope;
    int16x8_t v8 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v7.i8);
    *(int16x4_t *)v8.i8 = vrev64_s16(*(int16x4_t *)v8.i8);
    unsigned __int32 v13 = vmovn_s16(v8).u32[0];
    char v14 = 0;
    v12[0] = HIBYTE(v4);
    v12[1] = BYTE2(v4);
    void v12[2] = BYTE1(v4);
    int v11 = v4;
    v12[3] = v4;
    v12[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t mElement = a3->mElement;
      *(_DWORD *)std::string buf = 136316674;
      int v19 = "HALS_AHPPlugIn.cpp";
      __int16 v20 = 1024;
      int v21 = 102;
      __int16 v22 = 2080;
      __int16 v23 = &v15;
      __int16 v24 = 2080;
      __int16 v25 = &v13;
      __int16 v26 = 2048;
      uint64_t v27 = mElement;
      __int16 v28 = 1024;
      int v29 = v11;
      __int16 v30 = 2080;
      uint64_t v31 = v12;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_AHPPlugIn::ObjectIsPropertySettable: got an error from the plug-in routine [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v11;
  }
  return v17 != 0;
}

uint64_t HALS_AHPPlugIn::ObjectGetPropertyDataSize(HALS_AHPPlugIn *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unsigned int v19 = 0;
  int v6 = (*(uint64_t (**)(HALS_AHPPlugIn *, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, unsigned int *))(*(void *)this + 200))(this, a2, a3, a4, a5, &v19);
  if (v6)
  {
    v7.i32[0] = a3->mSelector;
    int16x8_t v9 = (int16x8_t)vmovl_u8(v7);
    *(int16x4_t *)v9.i8 = vrev64_s16(*(int16x4_t *)v9.i8);
    *(int8x8_t *)v9.i8 = vmovn_s16(v9);
    __int32 v17 = v9.i32[0];
    char v18 = 0;
    v9.i32[0] = a3->mScope;
    int16x8_t v10 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v9.i8);
    *(int16x4_t *)v10.i8 = vrev64_s16(*(int16x4_t *)v10.i8);
    unsigned __int32 v15 = vmovn_s16(v10).u32[0];
    char v16 = 0;
    v14[0] = HIBYTE(v6);
    v14[1] = BYTE2(v6);
    _OWORD v14[2] = BYTE1(v6);
    int v13 = v6;
    v14[3] = v6;
    v14[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t mElement = a3->mElement;
      *(_DWORD *)std::string buf = 136316674;
      int v21 = "HALS_AHPPlugIn.cpp";
      __int16 v22 = 1024;
      int v23 = 110;
      __int16 v24 = 2080;
      __int16 v25 = &v17;
      __int16 v26 = 2080;
      uint64_t v27 = &v15;
      __int16 v28 = 2048;
      uint64_t v29 = mElement;
      __int16 v30 = 1024;
      int v31 = v13;
      __int16 v32 = 2080;
      CFIndex v33 = v14;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_AHPPlugIn::ObjectGetPropertyDataSize: got an error from the plug-in routine [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v13;
  }
  return v19;
}

uint64_t HALS_AHPPlugIn::ObjectGetPropertyData(HALS_AHPPlugIn *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, unsigned int *a6, void *a7)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(HALS_AHPPlugIn *, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, unsigned int *, void *))(*(void *)this + 208))(this, a2, a3, a4, a5, a6, a7);
  if (result)
  {
    v9.i32[0] = a3->mSelector;
    int16x8_t v10 = (int16x8_t)vmovl_u8(v9);
    *(int16x4_t *)v10.i8 = vrev64_s16(*(int16x4_t *)v10.i8);
    *(int8x8_t *)v10.i8 = vmovn_s16(v10);
    __int32 v18 = v10.i32[0];
    char v19 = 0;
    v10.i32[0] = a3->mScope;
    int16x8_t v11 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v10.i8);
    *(int16x4_t *)v11.i8 = vrev64_s16(*(int16x4_t *)v11.i8);
    unsigned __int32 v16 = vmovn_s16(v11).u32[0];
    char v17 = 0;
    v15[0] = BYTE3(result);
    v15[1] = BYTE2(result);
    _DWORD v15[2] = BYTE1(result);
    int v14 = result;
    void v15[3] = result;
    void v15[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t mElement = a3->mElement;
      *(_DWORD *)std::string buf = 136316674;
      int v21 = "HALS_AHPPlugIn.cpp";
      __int16 v22 = 1024;
      int v23 = 119;
      __int16 v24 = 2080;
      __int16 v25 = &v18;
      __int16 v26 = 2080;
      uint64_t v27 = &v16;
      __int16 v28 = 2048;
      uint64_t v29 = mElement;
      __int16 v30 = 1024;
      int v31 = v14;
      __int16 v32 = 2080;
      CFIndex v33 = v15;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_AHPPlugIn::ObjectGetPropertyData: got an error from the plug-in routine [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v14;
  }
  return result;
}

uint64_t HALS_AHPPlugIn::ObjectSetPropertyData(HALS_AHPPlugIn *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(HALS_AHPPlugIn *, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const void *))(*(void *)this + 216))(this, a2, a3, a4, a5, a6, a7);
  if (result)
  {
    v9.i32[0] = a3->mSelector;
    int16x8_t v10 = (int16x8_t)vmovl_u8(v9);
    *(int16x4_t *)v10.i8 = vrev64_s16(*(int16x4_t *)v10.i8);
    *(int8x8_t *)v10.i8 = vmovn_s16(v10);
    __int32 v18 = v10.i32[0];
    char v19 = 0;
    v10.i32[0] = a3->mScope;
    int16x8_t v11 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v10.i8);
    *(int16x4_t *)v11.i8 = vrev64_s16(*(int16x4_t *)v11.i8);
    unsigned __int32 v16 = vmovn_s16(v11).u32[0];
    char v17 = 0;
    v15[0] = BYTE3(result);
    v15[1] = BYTE2(result);
    _DWORD v15[2] = BYTE1(result);
    int v14 = result;
    void v15[3] = result;
    void v15[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t mElement = a3->mElement;
      *(_DWORD *)std::string buf = 136316674;
      int v21 = "HALS_AHPPlugIn.cpp";
      __int16 v22 = 1024;
      int v23 = 126;
      __int16 v24 = 2080;
      __int16 v25 = &v18;
      __int16 v26 = 2080;
      uint64_t v27 = &v16;
      __int16 v28 = 2048;
      uint64_t v29 = mElement;
      __int16 v30 = 1024;
      int v31 = v14;
      __int16 v32 = 2080;
      CFIndex v33 = v15;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_AHPPlugIn::ObjectSetPropertyData: got an error from the plug-in routine [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v14;
  }
  return result;
}

std::thread *std::unique_ptr<std::thread>::reset[abi:ne180100](std::thread **a1, std::thread *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    std::thread::~thread(result);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0>,void ()(unsigned long long)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0>,void ()(unsigned long long)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core9IO_ThreadC1ENSt3__110shared_ptrINS_5Graph14Manifest_QueueEEENS_11Power_StateEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0>,void ()(unsigned long long)>::operator()(uint64_t a1, uint64_t *a2)
{
}

void std::__function::__func<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0>,void ()(unsigned long long)>::destroy_deallocate(void *__p)
{
  CFNumberRef v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0>,void ()(unsigned long long)>::destroy(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0>,void ()(unsigned long long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F147F638;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0>,void ()(unsigned long long)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1F147F638;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0>,void ()(unsigned long long)>::~__func(void *a1)
{
  *a1 = &unk_1F147F638;
  int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0>,void ()(unsigned long long)>::~__func(void *a1)
{
  *a1 = &unk_1F147F638;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Thread_Control_State>::__on_zero_shared_weak()
{
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Thread_Control_State>::__on_zero_shared(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (AMCP::Utility::Kernel_Error_Category *)pthread_cond_destroy((pthread_cond_t *)(a1 + 256));
  unsigned int v3 = v2;
  AMCP::Utility::Kernel_Error_Category::get(v2);
  if (v3)
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int16x8_t v8 = **(NSObject ***)buf;
    if (*(void *)v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v32);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint8x8_t v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)__int16 v32 = 2080;
      *(void *)&long long v32[2] = "Thread_Control_State.cpp";
      __int16 v33 = 1024;
      int v34 = 36;
      __int16 v35 = 2080;
      CFStringRef v36 = "kernel_error.operator BOOL()";
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set the destroy the condition variable", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    __cxa_allocate_exception(0x50uLL);
    MEMORY[0x1C1859240](&v21, v3, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
    std::runtime_error::runtime_error(&v23, &v21);
    long long v24 = v22;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    int v29 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&unk_1F1489DB8;
    __int16 v25 = &unk_1F1489DE0;
    uint64_t v26 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    CFTypeRef v37 = "AMCP::IO_Core::Thread_Control_State::~Thread_Control_State()";
    uint64_t v38 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Thread_Control_State.cpp";
    int v39 = 36;
    std::vector<void *>::vector(&v16);
    int v11 = backtrace((void **)v16, (*((void *)&v16 + 1) - (void)v16) >> 3);
    std::vector<void *>::resize((char **)&v16, v11);
    __int32 v18 = &unk_1F148AA90;
    long long v19 = v16;
    uint64_t v20 = v17;
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>();
  }
  uint8x8_t v5 = (AMCP::Utility::Kernel_Error_Category *)pthread_mutex_destroy((pthread_mutex_t *)(a1 + 304));
  unsigned int v6 = v5;
  AMCP::Utility::Kernel_Error_Category::get(v5);
  if (v6)
  {
    AMCP::Log::Scope_Registry::get(v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    std::string v12 = **(NSObject ***)buf;
    if (*(void *)v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v32);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)__int16 v32 = 2080;
      *(void *)&long long v32[2] = "Thread_Control_State.cpp";
      __int16 v33 = 1024;
      int v34 = 39;
      __int16 v35 = 2080;
      CFStringRef v36 = "kernel_error.operator BOOL()";
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set the destroy the mutex", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    __cxa_allocate_exception(0x50uLL);
    MEMORY[0x1C1859240](&v21, v6, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
    std::runtime_error::runtime_error(&v23, &v21);
    long long v24 = v22;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    int v29 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&unk_1F1489DB8;
    __int16 v25 = &unk_1F1489DE0;
    uint64_t v26 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    CFTypeRef v37 = "AMCP::IO_Core::Thread_Control_State::~Thread_Control_State()";
    uint64_t v38 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Thread_Control_State.cpp";
    int v39 = 39;
    std::vector<void *>::vector(&v16);
    int v15 = backtrace((void **)v16, (*((void *)&v16 + 1) - (void)v16) >> 3);
    std::vector<void *>::resize((char **)&v16, v15);
    __int32 v18 = &unk_1F148AA90;
    long long v19 = v16;
    uint64_t v20 = v17;
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>();
  }
}

void sub_1BAEA1C20(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  std::runtime_error::~runtime_error(v2);
  __clang_call_terminate(exception_object);
}

void sub_1BAEA1C44(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Thread_Control_State>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F5E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859830);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Thread_Control_State>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F5E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_1>>::~unique_ptr[abi:ne180100](uint64_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v2);
    MEMORY[0x1C1859840](v2, 0x1020C40AEE4956FLL);
  }
  return a1;
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_1>>(uint64_t *a1)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  std::runtime_error v21 = a1;
  int v1 = std::__thread_local_data();
  uint64_t v2 = (const void *)*v21;
  *std::runtime_error v21 = 0;
  unsigned int v3 = (AMCP::Log::Scope_Registry *)pthread_setspecific(v1->__key_, v2);
  long long v4 = *(_OWORD *)v21[1];
  uint64_t v5 = *(void *)(v21[1] + 8);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  long long v6 = *(_OWORD *)v21[2];
  uint64_t v7 = *(void *)(v21[2] + 8);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  v22[0] = v4;
  v22[1] = v6;
  char v8 = *((unsigned char *)v21 + 26);
  __int16 v23 = *((_WORD *)v21 + 12);
  char v24 = v8;
  if (!(void)v4)
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v15 = **(NSObject ***)buf;
    if (*(void *)v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v41);
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      long long v16 = pthread_self();
      mach_port_t v17 = pthread_mach_thread_np(v16);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v17;
      *(_WORD *)unsigned __int8 v41 = 2080;
      *(void *)&v41[2] = "IO_Thread_Realtime.h";
      __int16 v42 = 1024;
      int v43 = 40;
      __int16 v44 = 2080;
      *(void *)char v45 = "not ((m_manifest_queue) != nullptr)";
      _os_log_error_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v29);
    std::logic_error::logic_error(&v25, &v29);
    v25.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v34, &v25);
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    int v39 = -1;
    v34.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    __int16 v35 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
    *(void *)&v45[6] = "AMCP::IO_Core::IO_Thread_Realtime::IO_Thread_Realtime(std::shared_ptr<Graph::Manifest_Queue>, T"
                         "hread_Control, const IOThread_Realtime_Power_Settings &)";
    __int16 v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IO_Thread_Realtime.h";
    LODWORD(v47) = 40;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
    long long v32 = v27;
    int v31 = &unk_1F148AA90;
    uint64_t v33 = v28;
    long long v27 = 0uLL;
    uint64_t v28 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (AMCP::IO_Core::IO_Thread_Realtime::run((int **)v22) == 1)
  {
    uint8x8_t v9 = *(pthread_cond_t **)v21[2];
    *(_DWORD *)std::string buf = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)v9);
    *(_WORD *)&uint8_t buf[4] = 0;
    *(_DWORD *)unsigned __int8 v41 = 4;
    caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)v9);
    _OWORD v41[4] = v10 & 1;
    caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::store((uint64_t)v9, buf);
    int v11 = (AMCP::Utility::Kernel_Error_Category *)pthread_cond_broadcast(v9 + 4);
    unsigned int v12 = v11;
    AMCP::Utility::Kernel_Error_Category::get(v11);
    if (v12)
    {
      AMCP::Log::Scope_Registry::get(v13);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      __int32 v18 = **(NSObject ***)buf;
      if (*(void *)v41) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v41);
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        long long v19 = pthread_self();
        mach_port_t v20 = pthread_mach_thread_np(v19);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v20;
        *(_WORD *)unsigned __int8 v41 = 2080;
        *(void *)&v41[2] = "Thread_Control_State.cpp";
        __int16 v42 = 1024;
        int v43 = 123;
        __int16 v44 = 2080;
        *(void *)char v45 = "kernel_error.operator BOOL()";
        _os_log_error_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set the signaling the condition variable", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
      __cxa_allocate_exception(0x50uLL);
      MEMORY[0x1C1859240](&v31, v12, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
      boost::enable_error_info<std::system_error>((std::runtime_error *)&v34, (uint64_t)&v31);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
      int v47 = "void AMCP::IO_Core::Thread_Control_State::devices_failed_to_start()";
      __int16 v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Thread_Control_State.cpp";
      int v49 = 123;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
      *(_OWORD *)&v29.__r_.__value_.__r.__words[1] = v27;
      uint64_t v30 = v28;
      long long v27 = 0uLL;
      uint64_t v28 = 0;
      v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>();
    }
  }
  AMCP::IO_Core::Device_Node_Factory::~Device_Node_Factory((AMCP::IO_Core::Device_Node_Factory *)v22);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_1>>::~unique_ptr[abi:ne180100](&v21);
  return 0;
}

void sub_1BAEA21FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, __int16 a11, char a12, char a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, char a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,void *a27,void *__p,uint64_t a29,uint64_t a30,std::runtime_error a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_1>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core9IO_Thread5startENS0_18Play_State_Manager12Play_RequestEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v1 = *(pthread_cond_t **)(a1 + 8);
  *(_DWORD *)std::string buf = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)v1);
  *(_WORD *)&uint8_t buf[4] = 1;
  *(_DWORD *)char v26 = 4;
  caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)v1);
  unsigned char v26[4] = v2 & 1;
  caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::store((uint64_t)v1, buf);
  unsigned int v3 = (AMCP::Utility::Kernel_Error_Category *)pthread_cond_broadcast(v1 + 4);
  unsigned int v4 = v3;
  AMCP::Utility::Kernel_Error_Category::get(v3);
  if (v4)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v6 = **(NSObject ***)buf;
    if (*(void *)v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v26);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)char v26 = 2080;
      *(void *)&v26[2] = "Thread_Control_State.cpp";
      __int16 v27 = 1024;
      int v28 = 112;
      __int16 v29 = 2080;
      uint64_t v30 = "kernel_error.operator BOOL()";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set the signaling the condition variable", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
    __cxa_allocate_exception(0x50uLL);
    MEMORY[0x1C1859240](&v15, v4, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
    std::runtime_error::runtime_error(&v17, &v15);
    long long v18 = v16;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v23 = -1;
    v17.__vftable = (std::runtime_error_vtbl *)&unk_1F1489DB8;
    long long v19 = &unk_1F1489DE0;
    uint64_t v20 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&v17);
    int v31 = "void AMCP::IO_Core::Thread_Control_State::devices_have_started()";
    long long v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Thread_Control_State.cpp";
    int v33 = 112;
    std::vector<void *>::vector(&v10);
    int v9 = backtrace((void **)v10, (*((void *)&v10 + 1) - (void)v10) >> 3);
    std::vector<void *>::resize((char **)&v10, v9);
    unsigned int v12 = &unk_1F148AA90;
    long long v13 = v10;
    uint64_t v14 = v11;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>();
  }
}

void sub_1BAEA2738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, uint64_t a18, uint64_t a19, std::runtime_error a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  std::runtime_error::~runtime_error(v24);
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  *(void *)(v25 - 128) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v25 - 120));
  std::runtime_error::~runtime_error((std::runtime_error *)(v25 - 160));
  a23 = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a24);
  std::runtime_error::~runtime_error(&a20);
  std::runtime_error::~runtime_error(&a17);
  __cxa_free_exception(v24);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 161));
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::destroy_deallocate(void *__p)
{
  char v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F147F6C8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1F147F6C8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F147F6C8;
  int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F147F6C8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

unint64_t AMCP::IO_Core::IO_Thread::wait_for_start(AMCP::IO_Core::IO_Thread *this)
{
  if ((caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this) & 0x100000000) == 0)
  {
    uint64_t v2 = mach_absolute_time();
    AMCP::IO_Core::Thread_Control_State::sleep_until_time(this, v2 + 360000000);
  }
  return ((unint64_t)caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this) >> 32) & 1;
}

void AMCP::IO_Core::IO_Thread::get_state_snapshot(AMCP::IO_Core::Play_State_Manager *a1, uint64_t a2, uint64_t a3)
{
  AMCP::IO_Core::Play_State_Manager::get_state_snapshot(a1, (unint64_t *)(a2 + 16));
  if ((a3 & 0xFF00000000) != 0)
  {
    long long v6 = (_DWORD *)*((void *)a1 + 1);
    unint64_t v5 = *((void *)a1 + 2);
    if ((unint64_t)v6 >= v5)
    {
      mach_port_t v8 = *(_DWORD **)a1;
      uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 2;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = v5 - (void)v8;
      if (v11 >> 1 > v10) {
        unint64_t v10 = v11 >> 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12) {
        unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v12);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = (_DWORD *)(v12 + 4 * v9);
      *uint64_t v14 = a3;
      uint64_t v7 = v14 + 1;
      while (v6 != v8)
      {
        int v15 = *--v6;
        *--uint64_t v14 = v15;
      }
      *(void *)a1 = v14;
      *((void *)a1 + 1) = v7;
      *((void *)a1 + 2) = v12 + 4 * v13;
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      _DWORD *v6 = a3;
      uint64_t v7 = v6 + 1;
    }
    *((void *)a1 + 1) = v7;
  }
}

void sub_1BAEA2AF8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Driver::~Driver(AMCP::Driver *this)
{
  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

AMCP::Driver *AMCP::Driver::Driver(AMCP::Driver *this, AMCP::System_Context *a2, unsigned int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (AMCP::Object *)AMCP::Object::Object((uint64_t)this, (uint64_t)a2, a3);
  *(void *)uint64_t v4 = &unk_1F147F748;
  uint64_t v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x61706C67);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    uint64_t v7 = *v10;
    if (*(void *)v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      *(_WORD *)uint64_t v11 = 2080;
      *(void *)&void v11[2] = "Driver.cpp";
      __int16 v12 = 1024;
      int v13 = 26;
      __int16 v14 = 2080;
      int v15 = "constructed_correct_class(k_class_id_driver)";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return this;
}

void sub_1BAEA2D08(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = &unk_1F145F4E8;
  uint64_t v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Driver::Driver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v19[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(std::__shared_mutex_base **)(**(void **)a2 + 16);
  *(void *)std::string buf = &unk_1F147F768;
  *(void *)uint64_t v16 = a3;
  v19[0] = buf;
  AMCP::Core::Broker::fetch_first_core_if (v14, v5, (uint64_t)buf);
  *(void *)a1 = &unk_1F145F4E8;
  uint64_t v6 = v14[0];
  if (v14[0]) {
    int v7 = *(_DWORD *)v14[0];
  }
  else {
    int v7 = 0;
  }
  *(_DWORD *)(a1 + 8) = v7;
  mach_port_t v8 = (std::__shared_weak_count *)v14[1];
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v8;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 32) = a2;
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  else
  {
    *(void *)(a1 + 32) = a2;
  }
  std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](buf);
  *(void *)a1 = &unk_1F147F748;
  uint64_t v9 = AMCP::Object::constructed_correct_class((AMCP::Object *)a1, (AMCP *)0x61706C67);
  if ((v9 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v16);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      __int16 v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)uint64_t v16 = 2080;
      *(void *)&void v16[2] = "Driver.cpp";
      __int16 v17 = 1024;
      int v18 = 42;
      LOWORD(v19[0]) = 2080;
      *(void *)((char *)v19 + 2) = "constructed_correct_class(k_class_id_driver)";
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", buf, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1BAEA2F30(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  uint64_t v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMCP::Driver::Driver(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Driver::Driver(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Driver::Driver(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Driver::Driver(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP6DriverC1ERNS_14System_ContextEN10applesauce2CF9StringRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMCP::Driver::Driver(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Driver::Driver(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  unsigned int simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  if (!AMCP::is_base_of((AMCP *)0x61706C67, simple_required)) {
    return 0;
  }
  AMCP::Core::Core::get_simple_required_property<1885956452u>(&cf, *a2);
  BOOL v5 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(**(const __CFString ***)(a1 + 8), (const __CFString **)&cf) == kCFCompareEqualTo;
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

uint64_t AMCP::Core::Core::get_simple_required_property<1885956452u>(void *a1, AMCP::Core::Core *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  strcpy(buf, "diipbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(&cf, a2, (const AMCP::Address *)buf);
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v6 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      char v10 = 4;
      strcpy((char *)__p, "piid");
      *(_DWORD *)std::string buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      __int16 v14 = 1024;
      int v15 = 391;
      __int16 v16 = 2080;
      __int16 v17 = "optional_value.operator BOOL() == true";
      __int16 v18 = 2080;
      long long v19 = __p;
      __int16 v20 = 1024;
      int v21 = 1735159650;
      __int16 v22 = 1024;
      int v23 = 0;
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  CFTypeRef v4 = cf;
  if (cf) {
    CFRetain(cf);
  }
  *a1 = v4;
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

void sub_1BAEA31B4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Driver::Driver(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Driver::Driver(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F147F768;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Driver::Driver(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Driver::Driver(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F147F768;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Driver::Driver(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Driver::Driver(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
}

void AMCP::Driver::get_bundle_id(AMCP::Driver *this@<X0>, void *a2@<X8>)
{
  CFTypeRef v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    int v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7) {
      AMCP::Core::Core::get_simple_required_property<1885956452u>(a2, v7);
    }
    else {
      *a2 = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
  }
}

void AMCP::Driver::get_device_list(AMCP::Driver *this@<X0>, void *a2@<X8>)
{
  CFTypeRef v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    int v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7)
    {
      AMCP::Core::Core::get_simple_required_property<1684370979u>(a2, v7);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void AMCP::Driver::get_clock_list(AMCP::Driver *this@<X0>, void *a2@<X8>)
{
  CFTypeRef v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    int v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7)
    {
      AMCP::Core::Core::get_simple_required_property<1668049699u>(a2, v7);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void AMCP::Core::Core::get_simple_required_property<1668049699u>(void *a1, AMCP::Core::Core *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  strcpy(buf, "#klcbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>((uint64_t)&v10, a2, (AMCP::Address *)buf);
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    BOOL v5 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = pthread_self();
      mach_port_t v7 = pthread_mach_thread_np(v6);
      char v9 = 4;
      strcpy((char *)__p, "clk#");
      *(_DWORD *)std::string buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v7;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      __int16 v14 = 1024;
      int v15 = 391;
      __int16 v16 = 2080;
      __int16 v17 = "optional_value.operator BOOL() == true";
      __int16 v18 = 2080;
      long long v19 = __p;
      __int16 v20 = 1024;
      int v21 = 1735159650;
      __int16 v22 = 1024;
      int v23 = 0;
      _os_log_error_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  CFTypeRef v4 = v10;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1, v10, v11, (v11 - (uint64_t)v10) >> 2);
  if (v4)
  {
    operator delete(v4);
  }
}

void sub_1BAEA3608(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AMCP::Driver::get_box_list(AMCP::Driver *this@<X0>, void *a2@<X8>)
{
  CFTypeRef v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    mach_port_t v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7)
    {
      AMCP::Core::Core::get_simple_required_property<1651472419u>(a2, v7);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void AMCP::Core::Core::get_simple_required_property<1651472419u>(void *a1, AMCP::Core::Core *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  strcpy(buf, "#xobbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>((uint64_t)&v10, a2, (AMCP::Address *)buf);
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    BOOL v5 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = pthread_self();
      mach_port_t v7 = pthread_mach_thread_np(v6);
      char v9 = 4;
      strcpy((char *)__p, "box#");
      *(_DWORD *)std::string buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v7;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      __int16 v14 = 1024;
      int v15 = 391;
      __int16 v16 = 2080;
      __int16 v17 = "optional_value.operator BOOL() == true";
      __int16 v18 = 2080;
      long long v19 = __p;
      __int16 v20 = 1024;
      int v21 = 1735159650;
      __int16 v22 = 1024;
      int v23 = 0;
      _os_log_error_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  CFTypeRef v4 = v10;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1, v10, v11, (v11 - (uint64_t)v10) >> 2);
  if (v4)
  {
    operator delete(v4);
  }
}

void sub_1BAEA3874(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AMCP::System::~System(AMCP::System *this)
{
  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

AMCP::System *AMCP::System::System(AMCP::System *this, AMCP::System_Context *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (AMCP::Object *)AMCP::Object::Object((uint64_t)this, (uint64_t)a2, 1u);
  *(void *)uint64_t v3 = &unk_1F147F7E8;
  uint64_t v4 = AMCP::Object::constructed_correct_class(v3, (AMCP *)0x61737973);
  if ((v4 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
    uint64_t v6 = *v9;
    if (*(void *)v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      LODWORD(v9) = 67109890;
      HIDWORD(v9) = v8;
      *(_WORD *)char v10 = 2080;
      *(void *)&void v10[2] = "System.cpp";
      __int16 v11 = 1024;
      int v12 = 34;
      __int16 v13 = 2080;
      __int16 v14 = "constructed_correct_class(k_class_id_system)";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v9, 0x22u);
    }
    abort();
  }
  return this;
}

void sub_1BAEA3A78(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = &unk_1F145F4E8;
  uint64_t v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::System::get_device_list(AMCP::System *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    mach_port_t v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7)
    {
      AMCP::Core::Core::get_simple_required_property<1684370979u>(a2, v7);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void AMCP::System::get_clock_list(AMCP::System *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    mach_port_t v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7)
    {
      AMCP::Core::Core::get_simple_required_property<1668049699u>(a2, v7);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void AMCP::System::get_box_list(AMCP::System *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    mach_port_t v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7)
    {
      AMCP::Core::Core::get_simple_required_property<1651472419u>(a2, v7);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void AMCP::System::get_driver_list(AMCP::System *this@<X0>, void *a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    mach_port_t v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7)
    {
      strcpy(buf, "#glpbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>((uint64_t)&v15, v7, (AMCP::Address *)buf);
      if (!v17)
      {
        AMCP::Log::Scope_Registry::get(v8);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        char v10 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          __int16 v11 = pthread_self();
          mach_port_t v12 = pthread_mach_thread_np(v11);
          char v14 = 4;
          strcpy((char *)__p, "plg#");
          *(_DWORD *)std::string buf = 67110658;
          *(_DWORD *)&uint8_t buf[4] = v12;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "Core.h";
          __int16 v19 = 1024;
          int v20 = 391;
          __int16 v21 = 2080;
          __int16 v22 = "optional_value.operator BOOL() == true";
          __int16 v23 = 2080;
          uint64_t v24 = __p;
          __int16 v25 = 1024;
          int v26 = 1735159650;
          __int16 v27 = 1024;
          int v28 = 0;
          _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }
        abort();
      }
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      char v9 = v15;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2, v15, v16, (v16 - (uint64_t)v15) >> 2);
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_1BAEA3EB8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AMCP::System::get_io_context_list(AMCP::System *this@<X0>, void *a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    mach_port_t v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7)
    {
      strcpy(buf, "#xtcbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>((uint64_t)&v15, v7, (AMCP::Address *)buf);
      if (!v17)
      {
        AMCP::Log::Scope_Registry::get(v8);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        char v10 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          __int16 v11 = pthread_self();
          mach_port_t v12 = pthread_mach_thread_np(v11);
          char v14 = 4;
          strcpy((char *)__p, "ctx#");
          *(_DWORD *)std::string buf = 67110658;
          *(_DWORD *)&uint8_t buf[4] = v12;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "Core.h";
          __int16 v19 = 1024;
          int v20 = 391;
          __int16 v21 = 2080;
          __int16 v22 = "optional_value.operator BOOL() == true";
          __int16 v23 = 2080;
          uint64_t v24 = __p;
          __int16 v25 = 1024;
          int v26 = 1735159650;
          __int16 v27 = 1024;
          int v28 = 0;
          _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }
        abort();
      }
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      char v9 = v15;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2, v15, v16, (v16 - (uint64_t)v15) >> 2);
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_1BAEA40E4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AMCP::System::get_node_list(AMCP::System *this@<X0>, void *a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    mach_port_t v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7)
    {
      strcpy(buf, "#donbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>((uint64_t)&v15, v7, (AMCP::Address *)buf);
      if (!v17)
      {
        AMCP::Log::Scope_Registry::get(v8);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        char v10 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          __int16 v11 = pthread_self();
          mach_port_t v12 = pthread_mach_thread_np(v11);
          char v14 = 4;
          strcpy((char *)__p, "nod#");
          *(_DWORD *)std::string buf = 67110658;
          *(_DWORD *)&uint8_t buf[4] = v12;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "Core.h";
          __int16 v19 = 1024;
          int v20 = 391;
          __int16 v21 = 2080;
          __int16 v22 = "optional_value.operator BOOL() == true";
          __int16 v23 = 2080;
          uint64_t v24 = __p;
          __int16 v25 = 1024;
          int v26 = 1735159650;
          __int16 v27 = 1024;
          int v28 = 0;
          _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }
        abort();
      }
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      char v9 = v15;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2, v15, v16, (v16 - (uint64_t)v15) >> 2);
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_1BAEA4310(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AMCP::System::modify_graph(AMCP::System *this, const AMCP::Graph_Description *a2, const AMCP::Modify_Graph_Destroy_List *a3)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v4
    || (v4 = std::__shared_weak_count::lock(v4), (mach_port_t v7 = v4) == 0)
    || (mach_port_t v8 = (int8x8_t *)*((void *)this + 2)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    __int16 v22 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      __int16 v23 = pthread_self();
      mach_port_t v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v24;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "System.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 102;
      LOWORD(v61) = 2080;
      *(void *)((char *)&v61 + 2) = "!core_ptr";
      _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v52);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error((std::runtime_error *)v50, "No underlying object");
    std::runtime_error::runtime_error(&v54, (const std::runtime_error *)v50);
    long long v56 = 0uLL;
    uint64_t v57 = 0;
    int v58 = -1;
    v54.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v55 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v54);
    *((void *)&v61 + 1) = "Modify_Graph_Result AMCP::System::modify_graph(const Graph_Description &, const Modify_Graph"
                            "_Destroy_List &)";
    long long v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    int v63 = 102;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v40.__r_.__value_.__l.__data_);
    *(_OWORD *)&v43[8] = *(_OWORD *)&v40.__r_.__value_.__l.__data_;
    *(void *)int v43 = &unk_1F148AA90;
    *(void *)&long long v44 = *((void *)&v40.__r_.__value_.__l + 2);
    memset(&v40, 0, sizeof(v40));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v38 = 0x676C6F626D646772;
  int v39 = 0;
  uint64_t v35 = 0;
  long long v34 = 0uLL;
  std::vector<AMCP::Node_Description>::__init_with_size[abi:ne180100]<AMCP::Node_Description*,AMCP::Node_Description*>(&v34, *(void *)a2, *((void *)a2 + 1), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3));
  long long v36 = 0uLL;
  uint64_t v37 = 0;
  std::vector<AMCP::Wire_Description>::__init_with_size[abi:ne180100]<AMCP::Wire_Description*,AMCP::Wire_Description*>(&v36, *((void *)a2 + 3), *((void *)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 6));
  memset(&v31, 0, sizeof(v31));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v31, *(long long **)a3, *((long long **)a3 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a3 + 1) - *(void *)a3) >> 3));
  long long v32 = 0uLL;
  uint64_t v33 = 0;
  std::vector<AMCP::Wire_Identifier>::__init_with_size[abi:ne180100]<AMCP::Wire_Identifier*,AMCP::Wire_Identifier*>(&v32, *((void *)a3 + 3), *((void *)a3 + 4), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a3 + 4) - *((void *)a3 + 3)) >> 4));
  operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v46, v8, (unsigned int *)&v38);
  char v10 = v46;
  if (!v46)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    __int16 v25 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      int v26 = pthread_self();
      mach_port_t v27 = pthread_mach_thread_np(v26);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v27;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 202;
      _os_log_error_impl(&dword_1BAA78000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v48);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v40);
    std::runtime_error::runtime_error((std::runtime_error *)&v52, &v40);
    std::runtime_error::runtime_error(&v54, (const std::runtime_error *)&v52);
    long long v56 = 0uLL;
    uint64_t v57 = 0;
    int v58 = -1;
    v54.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v55 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v54);
    *((void *)&v61 + 1) = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) co"
                            "nst [Return_Type = std::optional<std::vector<unsigned int>>, Argument_Types = <AMCP::Graph_D"
                            "escription, AMCP::Modify_Graph_Destroy_List>]";
    long long v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    int v63 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v50);
    *(_OWORD *)&v43[8] = *(_OWORD *)v50;
    *(void *)int v43 = &unk_1F148AA90;
    *(void *)&long long v44 = *(void *)&v50[16];
    memset(v50, 0, sizeof(v50));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  *(_OWORD *)int v43 = v34;
  uint64_t v11 = v35;
  uint64_t v35 = 0;
  long long v34 = 0uLL;
  long long v44 = v36;
  *(void *)&v43[16] = v11;
  char v45 = v37;
  uint64_t v37 = 0;
  long long v36 = 0uLL;
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
  std::string::size_type v12 = v31.__r_.__value_.__r.__words[2];
  memset(&v31, 0, sizeof(v31));
  long long v41 = v32;
  v40.__r_.__value_.__r.__words[2] = v12;
  uint64_t v42 = v33;
  long long v32 = 0uLL;
  uint64_t v33 = 0;
  unint64_t v13 = AMCP::Implementation::get_type_marker<std::function<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>>();
  char v14 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v10, v13);
  if (!v14)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v28 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = pthread_self();
      mach_port_t v30 = pthread_mach_thread_np(v29);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v30;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Operation.h";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 154;
      _os_log_error_impl(&dword_1BAA78000, v28, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v59);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v52);
    std::runtime_error::runtime_error(&v53, &v52);
    std::runtime_error::runtime_error(&v54, &v53);
    long long v56 = 0uLL;
    uint64_t v57 = 0;
    int v58 = -1;
    v54.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v55 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v54);
    *((void *)&v61 + 1) = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std"
                            "::optional<std::vector<unsigned int>>, Argument_Types = <AMCP::Graph_Description, AMCP::Modi"
                            "fy_Graph_Destroy_List>]";
    long long v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v63 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v48);
    *(_OWORD *)&v50[8] = v48;
    *(void *)uint64_t v50 = &unk_1F148AA90;
    uint64_t v51 = v49;
    long long v48 = 0uLL;
    uint64_t v49 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v15 = v14;
  if (!*((void *)v14 + 7)
    || (*(void *)std::string buf = AMCP::Implementation::get_type_marker<std::function<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>>(),
        (char v14 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, unsigned char *))v15 + 7))(4, (uint64_t)v15 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    __int16 v19 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v20 = pthread_self();
      mach_port_t v21 = pthread_mach_thread_np(v20);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v21;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Operation.h";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 161;
      _os_log_error_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v59);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v52);
    std::runtime_error::runtime_error(&v53, &v52);
    std::runtime_error::runtime_error(&v54, &v53);
    long long v56 = 0uLL;
    uint64_t v57 = 0;
    int v58 = -1;
    v54.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v55 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v54);
    *((void *)&v61 + 1) = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std"
                            "::optional<std::vector<unsigned int>>, Argument_Types = <AMCP::Graph_Description, AMCP::Modi"
                            "fy_Graph_Destroy_List>]";
    long long v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v63 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v48);
    *(_OWORD *)&v50[8] = v48;
    *(void *)uint64_t v50 = &unk_1F148AA90;
    uint64_t v51 = v49;
    long long v48 = 0uLL;
    uint64_t v49 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  *(_OWORD *)std::string buf = *(_OWORD *)v43;
  long long v61 = v44;
  uint64_t v16 = *(void *)&v43[16];
  memset(v43, 0, sizeof(v43));
  *(void *)&buf[16] = v16;
  long long v62 = v45;
  char v45 = 0;
  long long v44 = 0uLL;
  std::runtime_error v54 = *(std::runtime_error *)&v40.__r_.__value_.__l.__data_;
  char v17 = (void *)v40.__r_.__value_.__r.__words[2];
  memset(&v40, 0, sizeof(v40));
  long long v56 = v41;
  int v55 = v17;
  uint64_t v57 = v42;
  long long v41 = 0uLL;
  uint64_t v42 = 0;
  uint64_t v18 = *((void *)v14 + 3);
  if (!v18) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, unsigned char *, std::runtime_error *))(*(void *)v18 + 48))(v18, buf, &v54);
  *(void *)uint64_t v50 = &v56;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
  *(void *)uint64_t v50 = &v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
  *(void *)uint64_t v50 = &v61;
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
  *(void *)uint64_t v50 = buf;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
  *(void *)std::string buf = &v41;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)std::string buf = &v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)std::string buf = &v44;
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)std::string buf = v43;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  *(void *)std::string buf = &v32;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)std::string buf = &v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)std::string buf = &v36;
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)std::string buf = &v34;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_1BAEA4E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,std::runtime_error a44,uint64_t a45,uint64_t a46,uint64_t a47,std::runtime_error a48,int a49,__int16 a50,char a51,char a52)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<AMCP::Wire_Description>::__init_with_size[abi:ne180100]<AMCP::Wire_Description*,AMCP::Wire_Description*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<AMCP::Wire_Description>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Wire_Description>,AMCP::Wire_Description*,AMCP::Wire_Description*,AMCP::Wire_Description*>(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BAEA519C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t AMCP::System::node_uid_is_unique(AMCP::System *this, const void **a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v3
    || (uint64_t v3 = std::__shared_weak_count::lock(v3), (v5 = v3) == 0)
    || (uint64_t v6 = (int8x8_t *)*((void *)this + 2)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    __int16 v19 = **(NSObject ***)buf;
    if (*(void *)v46) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v46);
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v20 = pthread_self();
      mach_port_t v21 = pthread_mach_thread_np(v20);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v21;
      *(_WORD *)__int16 v46 = 2080;
      *(void *)&v46[2] = "System.cpp";
      __int16 v47 = 1024;
      int v48 = 109;
      __int16 v49 = 2080;
      *(void *)uint64_t v50 = "!core_ptr";
      _os_log_error_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v37);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v32, "No underlying object");
    std::runtime_error::runtime_error(&v38, &v32);
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    int v43 = -1;
    v38.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v39 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
    *(void *)&v50[6] = "BOOL AMCP::System::node_uid_is_unique(const CF::String &)";
    uint64_t v51 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    int v52 = 109;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v36.__r_.__value_.__l.__data_);
    long long v34 = &unk_1F148AA90;
    std::string v35 = v36;
    memset(&v36, 0, sizeof(v36));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v28 = 0x676C6F626E647571;
  int v29 = 0;
  mach_port_t v7 = *a2;
  if (v7) {
    CFRetain(v7);
  }
  operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v30, v6, (unsigned int *)&v28);
  uint64_t v9 = v30;
  if (!v30)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    __int16 v22 = **(NSObject ***)buf;
    if (*(void *)v46) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v46);
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      __int16 v23 = pthread_self();
      mach_port_t v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v24;
      *(_WORD *)__int16 v46 = 2080;
      *(void *)&v46[2] = "Core.h";
      __int16 v47 = 1024;
      int v48 = 202;
      _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v36);
    std::runtime_error::runtime_error(&v37, &v36);
    std::runtime_error::runtime_error(&v38, &v37);
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    int v43 = -1;
    v38.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v39 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
    *(void *)&v50[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = BOOL, Argument_Types = <applesauce::CF::StringRef>]";
    uint64_t v51 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    int v52 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v32);
    long long v34 = &unk_1F148AA90;
    *(std::runtime_error *)&v35.__r_.__value_.__l.__data_ = v32;
    v35.__r_.__value_.__r.__words[2] = v33;
    v32.__vftable = 0;
    v32.__imp_.__imp_ = 0;
    std::string::size_type v33 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v10 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(applesauce::CF::StringRef)>>();
  uint64_t v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10);
  if (!v11)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    __int16 v25 = **(NSObject ***)buf;
    if (*(void *)v46) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v46);
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      int v26 = pthread_self();
      mach_port_t v27 = pthread_mach_thread_np(v26);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v27;
      *(_WORD *)__int16 v46 = 2080;
      *(void *)&v46[2] = "Operation.h";
      __int16 v47 = 1024;
      int v48 = 154;
      _os_log_error_impl(&dword_1BAA78000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v36);
    std::runtime_error::runtime_error(&v37, &v36);
    std::runtime_error::runtime_error(&v38, &v37);
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    int v43 = -1;
    v38.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v39 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
    *(void *)&v50[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = BOOL, "
                         "Argument_Types = <applesauce::CF::StringRef>]";
    uint64_t v51 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v52 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v32);
    long long v34 = &unk_1F148AA90;
    *(std::runtime_error *)&v35.__r_.__value_.__l.__data_ = v32;
    v35.__r_.__value_.__r.__words[2] = v33;
    v32.__vftable = 0;
    v32.__imp_.__imp_ = 0;
    std::string::size_type v33 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  std::string::size_type v12 = v11;
  if (!*((void *)v11 + 7)
    || (*(void *)std::string buf = AMCP::Implementation::get_type_marker<std::function<BOOL ()(applesauce::CF::StringRef)>>(),
        (uint64_t v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v12 + 7))(4, (uint64_t)v12 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v16 = **(NSObject ***)buf;
    if (*(void *)v46) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v46);
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      char v17 = pthread_self();
      mach_port_t v18 = pthread_mach_thread_np(v17);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v18;
      *(_WORD *)__int16 v46 = 2080;
      *(void *)&v46[2] = "Operation.h";
      __int16 v47 = 1024;
      int v48 = 161;
      _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v36);
    std::runtime_error::runtime_error(&v37, &v36);
    std::runtime_error::runtime_error(&v38, &v37);
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    int v43 = -1;
    v38.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v39 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
    *(void *)&v50[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = BOOL, "
                         "Argument_Types = <applesauce::CF::StringRef>]";
    uint64_t v51 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v52 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v32);
    long long v34 = &unk_1F148AA90;
    *(std::runtime_error *)&v35.__r_.__value_.__l.__data_ = v32;
    v35.__r_.__value_.__r.__words[2] = v33;
    v32.__vftable = 0;
    v32.__imp_.__imp_ = 0;
    std::string::size_type v33 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  *(void *)std::string buf = v7;
  uint64_t v13 = *((void *)v11 + 3);
  if (!v13) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v13 + 48))(v13, buf);
  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)buf);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  return v14;
}

void sub_1BAEA5AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::runtime_error a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,std::runtime_error a29,std::runtime_error a30,uint64_t a31)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::System::get_node_id(AMCP::System *this, const void **a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v3
    || (uint64_t v3 = std::__shared_weak_count::lock(v3), (v5 = v3) == 0)
    || (uint64_t v6 = (int8x8_t *)*((void *)this + 2)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    __int16 v19 = **(NSObject ***)buf;
    if (*(void *)v46) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v46);
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v20 = pthread_self();
      mach_port_t v21 = pthread_mach_thread_np(v20);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v21;
      *(_WORD *)__int16 v46 = 2080;
      *(void *)&v46[2] = "System.cpp";
      __int16 v47 = 1024;
      int v48 = 116;
      __int16 v49 = 2080;
      *(void *)uint64_t v50 = "!core_ptr";
      _os_log_error_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v37);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v32, "No underlying object");
    std::runtime_error::runtime_error(&v38, &v32);
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    int v43 = -1;
    v38.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v39 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
    *(void *)&v50[6] = "std::optional<Object_ID> AMCP::System::get_node_id(const CF::String &)";
    uint64_t v51 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    int v52 = 116;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v36.__r_.__value_.__l.__data_);
    long long v34 = &unk_1F148AA90;
    std::string v35 = v36;
    memset(&v36, 0, sizeof(v36));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v28 = 0x676C6F62676E6469;
  int v29 = 0;
  mach_port_t v7 = *a2;
  if (v7) {
    CFRetain(v7);
  }
  operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v30, v6, (unsigned int *)&v28);
  uint64_t v9 = v30;
  if (!v30)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    __int16 v22 = **(NSObject ***)buf;
    if (*(void *)v46) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v46);
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      __int16 v23 = pthread_self();
      mach_port_t v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v24;
      *(_WORD *)__int16 v46 = 2080;
      *(void *)&v46[2] = "Core.h";
      __int16 v47 = 1024;
      int v48 = 202;
      _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v36);
    std::runtime_error::runtime_error(&v37, &v36);
    std::runtime_error::runtime_error(&v38, &v37);
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    int v43 = -1;
    v38.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v39 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
    *(void *)&v50[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = std::optional<unsigned int>, Argument_Types = <applesauce::CF::StringRef>]";
    uint64_t v51 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    int v52 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v32);
    long long v34 = &unk_1F148AA90;
    *(std::runtime_error *)&v35.__r_.__value_.__l.__data_ = v32;
    v35.__r_.__value_.__r.__words[2] = v33;
    v32.__vftable = 0;
    v32.__imp_.__imp_ = 0;
    std::string::size_type v33 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::optional<unsigned int> ()(applesauce::CF::StringRef)>>();
  uint64_t v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10);
  if (!v11)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    __int16 v25 = **(NSObject ***)buf;
    if (*(void *)v46) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v46);
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      int v26 = pthread_self();
      mach_port_t v27 = pthread_mach_thread_np(v26);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v27;
      *(_WORD *)__int16 v46 = 2080;
      *(void *)&v46[2] = "Operation.h";
      __int16 v47 = 1024;
      int v48 = 154;
      _os_log_error_impl(&dword_1BAA78000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v36);
    std::runtime_error::runtime_error(&v37, &v36);
    std::runtime_error::runtime_error(&v38, &v37);
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    int v43 = -1;
    v38.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v39 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
    *(void *)&v50[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::o"
                         "ptional<unsigned int>, Argument_Types = <applesauce::CF::StringRef>]";
    uint64_t v51 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v52 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v32);
    long long v34 = &unk_1F148AA90;
    *(std::runtime_error *)&v35.__r_.__value_.__l.__data_ = v32;
    v35.__r_.__value_.__r.__words[2] = v33;
    v32.__vftable = 0;
    v32.__imp_.__imp_ = 0;
    std::string::size_type v33 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  std::string::size_type v12 = v11;
  if (!*((void *)v11 + 7)
    || (*(void *)std::string buf = AMCP::Implementation::get_type_marker<std::function<std::optional<unsigned int> ()(applesauce::CF::StringRef)>>(),
        (uint64_t v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v12 + 7))(4, (uint64_t)v12 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v16 = **(NSObject ***)buf;
    if (*(void *)v46) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v46);
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      char v17 = pthread_self();
      mach_port_t v18 = pthread_mach_thread_np(v17);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v18;
      *(_WORD *)__int16 v46 = 2080;
      *(void *)&v46[2] = "Operation.h";
      __int16 v47 = 1024;
      int v48 = 161;
      _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v36);
    std::runtime_error::runtime_error(&v37, &v36);
    std::runtime_error::runtime_error(&v38, &v37);
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    int v43 = -1;
    v38.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v39 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
    *(void *)&v50[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::o"
                         "ptional<unsigned int>, Argument_Types = <applesauce::CF::StringRef>]";
    uint64_t v51 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v52 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v32);
    long long v34 = &unk_1F148AA90;
    *(std::runtime_error *)&v35.__r_.__value_.__l.__data_ = v32;
    v35.__r_.__value_.__r.__words[2] = v33;
    v32.__vftable = 0;
    v32.__imp_.__imp_ = 0;
    std::string::size_type v33 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  *(void *)std::string buf = v7;
  uint64_t v13 = *((void *)v11 + 3);
  if (!v13) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v13 + 48))(v13, buf);
  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)buf);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  return v14;
}

void sub_1BAEA663C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::runtime_error a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,std::runtime_error a29,std::runtime_error a30,uint64_t a31)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::System::get_wires(AMCP::System *this)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2
    || (v2 = std::__shared_weak_count::lock(v2), (uint64_t v3 = v2) == 0)
    || (uint64_t v4 = (int8x8_t *)*((void *)this + 2)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v14 = **(NSObject ***)buf;
    if (*(void *)v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v41);
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = pthread_self();
      mach_port_t v16 = pthread_mach_thread_np(v15);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v16;
      *(_WORD *)uint64_t v41 = 2080;
      *(void *)&v41[2] = "System.cpp";
      __int16 v42 = 1024;
      int v43 = 123;
      __int16 v44 = 2080;
      *(void *)char v45 = "!core_ptr";
      _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v27, "No underlying object");
    std::runtime_error::runtime_error(&v33, &v27);
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    int v38 = -1;
    v33.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    long long v34 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v33);
    *(void *)&v45[6] = "Wire_Set AMCP::System::get_wires()";
    __int16 v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    int v47 = 123;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v31.__r_.__value_.__l.__data_);
    int v29 = &unk_1F148AA90;
    std::string v30 = v31;
    memset(&v31, 0, sizeof(v31));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v23 = 0x676C6F6267747772;
  int v24 = 0;
  operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v25, v4, (unsigned int *)&v23);
  uint64_t v6 = v25;
  if (!v25)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    char v17 = **(NSObject ***)buf;
    if (*(void *)v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v41);
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v18 = pthread_self();
      mach_port_t v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v19;
      *(_WORD *)uint64_t v41 = 2080;
      *(void *)&v41[2] = "Core.h";
      __int16 v42 = 1024;
      int v43 = 202;
      _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v39);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v31);
    std::runtime_error::runtime_error(&v32, &v31);
    std::runtime_error::runtime_error(&v33, &v32);
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    int v38 = -1;
    v33.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    long long v34 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v33);
    *(void *)&v45[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = std::unordered_set<AMCP::Wire_Description>, Argument_Types = <>]";
    __int16 v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    int v47 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
    int v29 = &unk_1F148AA90;
    *(std::runtime_error *)&v30.__r_.__value_.__l.__data_ = v27;
    v30.__r_.__value_.__r.__words[2] = v28;
    v27.__vftable = 0;
    v27.__imp_.__imp_ = 0;
    std::string::size_type v28 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<std::unordered_set<AMCP::Wire_Description> ()(void)>>();
  mach_port_t v8 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v7);
  if (!v8)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v20 = **(NSObject ***)buf;
    if (*(void *)v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v41);
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v21 = pthread_self();
      mach_port_t v22 = pthread_mach_thread_np(v21);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v22;
      *(_WORD *)uint64_t v41 = 2080;
      *(void *)&v41[2] = "Operation.h";
      __int16 v42 = 1024;
      int v43 = 154;
      _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v39);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v31);
    std::runtime_error::runtime_error(&v32, &v31);
    std::runtime_error::runtime_error(&v33, &v32);
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    int v38 = -1;
    v33.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    long long v34 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v33);
    *(void *)&v45[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::u"
                         "nordered_set<AMCP::Wire_Description>, Argument_Types = <>]";
    __int16 v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v47 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
    int v29 = &unk_1F148AA90;
    *(std::runtime_error *)&v30.__r_.__value_.__l.__data_ = v27;
    v30.__r_.__value_.__r.__words[2] = v28;
    v27.__vftable = 0;
    v27.__imp_.__imp_ = 0;
    std::string::size_type v28 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v9 = v8;
  if (!*((void *)v8 + 7)
    || (*(void *)std::string buf = AMCP::Implementation::get_type_marker<std::function<std::unordered_set<AMCP::Wire_Description> ()(void)>>(),
        (mach_port_t v8 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v9 + 7))(4, (uint64_t)v9 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v41);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      std::string::size_type v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)uint64_t v41 = 2080;
      *(void *)&v41[2] = "Operation.h";
      __int16 v42 = 1024;
      int v43 = 161;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v39);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v31);
    std::runtime_error::runtime_error(&v32, &v31);
    std::runtime_error::runtime_error(&v33, &v32);
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    int v38 = -1;
    v33.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    long long v34 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v33);
    *(void *)&v45[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::u"
                         "nordered_set<AMCP::Wire_Description>, Argument_Types = <>]";
    __int16 v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v47 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
    int v29 = &unk_1F148AA90;
    *(std::runtime_error *)&v30.__r_.__value_.__l.__data_ = v27;
    v30.__r_.__value_.__r.__words[2] = v28;
    v27.__vftable = 0;
    v27.__imp_.__imp_ = 0;
    std::string::size_type v28 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v10 = *((void *)v8 + 3);
  if (!v10) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 48))(v10);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
}

void sub_1BAEA7198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,std::runtime_error a27,std::runtime_error a28,uint64_t a29)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::System::get_wires_for_node(AMCP::System *this, int a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v3
    || (uint64_t v3 = std::__shared_weak_count::lock(v3), (v5 = v3) == 0)
    || (uint64_t v6 = (int8x8_t *)*((void *)this + 2)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v16 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      char v17 = pthread_self();
      mach_port_t v18 = pthread_mach_thread_np(v17);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v18;
      *(_WORD *)int v43 = 2080;
      *(void *)&void v43[2] = "System.cpp";
      __int16 v44 = 1024;
      int v45 = 130;
      __int16 v46 = 2080;
      *(void *)int v47 = "!core_ptr";
      _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v34);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v29, "No underlying object");
    std::runtime_error::runtime_error(&v35, &v29);
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    int v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v36 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(void *)&v47[6] = "Wire_Set AMCP::System::get_wires_for_node(Object_ID)";
    uint64_t v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    int v49 = 130;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v33.__r_.__value_.__l.__data_);
    std::string v31 = &unk_1F148AA90;
    std::string v32 = v33;
    memset(&v33, 0, sizeof(v33));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v25 = 0x676C6F626777666ELL;
  int v26 = 0;
  operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v27, v6, (unsigned int *)&v25);
  mach_port_t v8 = v27;
  if (!v27)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v19 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v20 = pthread_self();
      mach_port_t v21 = pthread_mach_thread_np(v20);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v21;
      *(_WORD *)int v43 = 2080;
      *(void *)&void v43[2] = "Core.h";
      __int16 v44 = 1024;
      int v45 = 202;
      _os_log_error_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v33);
    std::runtime_error::runtime_error(&v34, &v33);
    std::runtime_error::runtime_error(&v35, &v34);
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    int v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v36 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(void *)&v47[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = std::unordered_set<AMCP::Wire_Description>, Argument_Types = <unsigned int>]";
    uint64_t v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    int v49 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v29);
    std::string v31 = &unk_1F148AA90;
    *(std::runtime_error *)&v32.__r_.__value_.__l.__data_ = v29;
    v32.__r_.__value_.__r.__words[2] = v30;
    v29.__vftable = 0;
    v29.__imp_.__imp_ = 0;
    std::string::size_type v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<std::unordered_set<AMCP::Wire_Description> ()>>();
  uint64_t v10 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9);
  if (!v10)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v22 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = pthread_self();
      mach_port_t v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v24;
      *(_WORD *)int v43 = 2080;
      *(void *)&void v43[2] = "Operation.h";
      __int16 v44 = 1024;
      int v45 = 154;
      _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v33);
    std::runtime_error::runtime_error(&v34, &v33);
    std::runtime_error::runtime_error(&v35, &v34);
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    int v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v36 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(void *)&v47[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::u"
                         "nordered_set<AMCP::Wire_Description>, Argument_Types = <unsigned int>]";
    uint64_t v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v49 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v29);
    std::string v31 = &unk_1F148AA90;
    *(std::runtime_error *)&v32.__r_.__value_.__l.__data_ = v29;
    v32.__r_.__value_.__r.__words[2] = v30;
    v29.__vftable = 0;
    v29.__imp_.__imp_ = 0;
    std::string::size_type v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v11 = v10;
  if (!*((void *)v10 + 7)
    || (*(void *)std::string buf = AMCP::Implementation::get_type_marker<std::function<std::unordered_set<AMCP::Wire_Description> ()>>(),
        (uint64_t v10 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v11 + 7))(4, (uint64_t)v11 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v13 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v15;
      *(_WORD *)int v43 = 2080;
      *(void *)&void v43[2] = "Operation.h";
      __int16 v44 = 1024;
      int v45 = 161;
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v33);
    std::runtime_error::runtime_error(&v34, &v33);
    std::runtime_error::runtime_error(&v35, &v34);
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    int v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v36 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(void *)&v47[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::u"
                         "nordered_set<AMCP::Wire_Description>, Argument_Types = <unsigned int>]";
    uint64_t v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v49 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v29);
    std::string v31 = &unk_1F148AA90;
    *(std::runtime_error *)&v32.__r_.__value_.__l.__data_ = v29;
    v32.__r_.__value_.__r.__words[2] = v30;
    v29.__vftable = 0;
    v29.__imp_.__imp_ = 0;
    std::string::size_type v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  *(_DWORD *)std::string buf = a2;
  uint64_t v12 = *((void *)v10 + 3);
  if (!v12) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v12 + 48))(v12, buf);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1BAEA7C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,std::runtime_error a27,std::runtime_error a28,uint64_t a29)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::System::set_volume_for_wire(uint64_t a1, uint64_t a2, long long *a3, float a4)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  BOOL v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v5 || (v5 = std::__shared_weak_count::lock(v5), (unint64_t v9 = v5) == 0) || (v10 = *(int8x8_t **)(a1 + 16)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v20 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v21 = pthread_self();
      mach_port_t v22 = pthread_mach_thread_np(v21);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v22;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "System.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 137;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "!core_ptr";
      _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v42);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v37, "No underlying object");
    std::runtime_error::runtime_error(&v43, &v37);
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    int v48 = -1;
    v43.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    __int16 v44 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v43);
    *(void *)&buf[32] = "void AMCP::System::set_volume_for_wire(const Wire_Identifier &, float, CA::TimeStamp)";
    *(void *)&unsigned char buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    LODWORD(v51) = 137;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v41.__r_.__value_.__l.__data_);
    std::string v40 = v41;
    uint64_t v39 = &unk_1F148AA90;
    memset(&v41, 0, sizeof(v41));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v33 = 0x676C6F6273766677;
  int v34 = 0;
  long long v29 = *a3;
  long long v30 = a3[1];
  long long v31 = a3[2];
  long long v32 = a3[3];
  operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v35, v10, (unsigned int *)&v33);
  uint64_t v12 = v35;
  if (!v35)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v23 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v24 = pthread_self();
      mach_port_t v25 = pthread_mach_thread_np(v24);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v25;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 202;
      _os_log_error_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v49);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v41);
    std::runtime_error::runtime_error(&v42, &v41);
    std::runtime_error::runtime_error(&v43, &v42);
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    int v48 = -1;
    v43.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    __int16 v44 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v43);
    *(void *)&buf[32] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) cons"
                          "t [Return_Type = void, Argument_Types = <const AMCP::Wire_Identifier &, float, CA::TimeStamp>]";
    *(void *)&unsigned char buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    LODWORD(v51) = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v37);
    *(std::runtime_error *)&v40.__r_.__value_.__l.__data_ = v37;
    uint64_t v39 = &unk_1F148AA90;
    v40.__r_.__value_.__r.__words[2] = v38;
    v37.__vftable = 0;
    v37.__imp_.__imp_ = 0;
    std::string::size_type v38 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v13 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>>();
  uint64_t v14 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v12, v13);
  if (!v14)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v26 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      std::runtime_error v27 = pthread_self();
      mach_port_t v28 = pthread_mach_thread_np(v27);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v28;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Operation.h";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 154;
      _os_log_error_impl(&dword_1BAA78000, v26, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v49);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v41);
    std::runtime_error::runtime_error(&v42, &v41);
    std::runtime_error::runtime_error(&v43, &v42);
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    int v48 = -1;
    v43.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    __int16 v44 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v43);
    *(void *)&buf[32] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void,"
                          " Argument_Types = <const AMCP::Wire_Identifier &, float, CA::TimeStamp>]";
    *(void *)&unsigned char buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    LODWORD(v51) = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v37);
    *(std::runtime_error *)&v40.__r_.__value_.__l.__data_ = v37;
    uint64_t v39 = &unk_1F148AA90;
    v40.__r_.__value_.__r.__words[2] = v38;
    v37.__vftable = 0;
    v37.__imp_.__imp_ = 0;
    std::string::size_type v38 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  mach_port_t v15 = v14;
  if (!*((void *)v14 + 7)
    || (*(void *)std::string buf = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>>(),
        (uint64_t v14 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, unsigned char *))v15 + 7))(4, (uint64_t)v15 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    char v17 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v18 = pthread_self();
      mach_port_t v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v19;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Operation.h";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 161;
      _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v49);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v41);
    std::runtime_error::runtime_error(&v42, &v41);
    std::runtime_error::runtime_error(&v43, &v42);
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    int v48 = -1;
    v43.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    __int16 v44 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v43);
    *(void *)&buf[32] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void,"
                          " Argument_Types = <const AMCP::Wire_Identifier &, float, CA::TimeStamp>]";
    *(void *)&unsigned char buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    LODWORD(v51) = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v37);
    *(std::runtime_error *)&v40.__r_.__value_.__l.__data_ = v37;
    uint64_t v39 = &unk_1F148AA90;
    v40.__r_.__value_.__r.__words[2] = v38;
    v37.__vftable = 0;
    v37.__imp_.__imp_ = 0;
    std::string::size_type v38 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  *(_OWORD *)std::string buf = v29;
  *(_OWORD *)&buf[16] = v30;
  *(_OWORD *)&buf[32] = v31;
  long long v51 = v32;
  *(float *)&v43.__vftable = a4;
  uint64_t v16 = *((void *)v14 + 3);
  if (!v16) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t, std::runtime_error *, unsigned char *))(*(void *)v16 + 48))(v16, a2, &v43, buf);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
}

void sub_1BAEA8740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::runtime_error a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,std::runtime_error a35,std::runtime_error a36,uint64_t a37)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::System::set_volume_ramp_for_wire(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, float a5)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v6 || (v6 = std::__shared_weak_count::lock(v6), (v11 = v6) == 0) || (uint64_t v12 = *(int8x8_t **)(a1 + 16)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v22 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = pthread_self();
      mach_port_t v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v24;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "System.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 144;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "!core_ptr";
      _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v52);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v47, "No underlying object");
    std::runtime_error::runtime_error(&v43, &v47);
    *((void *)&v44 + 1) = 0;
    long long v45 = 0uLL;
    LODWORD(v46) = -1;
    v43.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    *(void *)&long long v44 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v43);
    *(void *)&buf[32] = "void AMCP::System::set_volume_ramp_for_wire(const Wire_Identifier &, float, CA::TimeStamp, CA::TimeStamp)";
    *(void *)&unsigned char buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    LODWORD(v55) = 144;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v51.__r_.__value_.__l.__data_);
    std::string v50 = v51;
    char v49 = &unk_1F148AA90;
    memset(&v51, 0, sizeof(v51));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v39 = 0x676C6F6273767277;
  int v40 = 0;
  long long v35 = *a3;
  long long v36 = a3[1];
  long long v37 = a3[2];
  long long v38 = a3[3];
  std::runtime_error v31 = *(std::runtime_error *)a4;
  long long v32 = *(_OWORD *)(a4 + 16);
  long long v33 = *(_OWORD *)(a4 + 32);
  long long v34 = *(_OWORD *)(a4 + 48);
  operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v41, v12, (unsigned int *)&v39);
  uint64_t v14 = v41;
  if (!v41)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v25 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      int v26 = pthread_self();
      mach_port_t v27 = pthread_mach_thread_np(v26);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v27;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 202;
      _os_log_error_impl(&dword_1BAA78000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v53);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v51);
    std::runtime_error::runtime_error(&v52, &v51);
    std::runtime_error::runtime_error(&v43, &v52);
    *((void *)&v44 + 1) = 0;
    long long v45 = 0uLL;
    LODWORD(v46) = -1;
    v43.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    *(void *)&long long v44 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v43);
    *(void *)&buf[32] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) cons"
                          "t [Return_Type = void, Argument_Types = <const AMCP::Wire_Identifier &, float, CA::TimeStamp, CA::TimeStamp>]";
    *(void *)&unsigned char buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    LODWORD(v55) = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v47);
    *(std::runtime_error *)&v50.__r_.__value_.__l.__data_ = v47;
    char v49 = &unk_1F148AA90;
    v50.__r_.__value_.__r.__words[2] = v48;
    v47.__vftable = 0;
    v47.__imp_.__imp_ = 0;
    std::string::size_type v48 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v15 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>>();
  uint64_t v16 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v14, v15);
  if (!v16)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v28 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      long long v29 = pthread_self();
      mach_port_t v30 = pthread_mach_thread_np(v29);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v30;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Operation.h";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 154;
      _os_log_error_impl(&dword_1BAA78000, v28, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v53);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v51);
    std::runtime_error::runtime_error(&v52, &v51);
    std::runtime_error::runtime_error(&v43, &v52);
    *((void *)&v44 + 1) = 0;
    long long v45 = 0uLL;
    LODWORD(v46) = -1;
    v43.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    *(void *)&long long v44 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v43);
    *(void *)&buf[32] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void,"
                          " Argument_Types = <const AMCP::Wire_Identifier &, float, CA::TimeStamp, CA::TimeStamp>]";
    *(void *)&unsigned char buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    LODWORD(v55) = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v47);
    *(std::runtime_error *)&v50.__r_.__value_.__l.__data_ = v47;
    char v49 = &unk_1F148AA90;
    v50.__r_.__value_.__r.__words[2] = v48;
    v47.__vftable = 0;
    v47.__imp_.__imp_ = 0;
    std::string::size_type v48 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  char v17 = v16;
  if (!*((void *)v16 + 7)
    || (*(void *)std::string buf = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>>(),
        (uint64_t v16 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, unsigned char *))v17 + 7))(4, (uint64_t)v17 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v16);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v19 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v20 = pthread_self();
      mach_port_t v21 = pthread_mach_thread_np(v20);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v21;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Operation.h";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 161;
      _os_log_error_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v53);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v51);
    std::runtime_error::runtime_error(&v52, &v51);
    std::runtime_error::runtime_error(&v43, &v52);
    *((void *)&v44 + 1) = 0;
    long long v45 = 0uLL;
    LODWORD(v46) = -1;
    v43.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    *(void *)&long long v44 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v43);
    *(void *)&buf[32] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void,"
                          " Argument_Types = <const AMCP::Wire_Identifier &, float, CA::TimeStamp, CA::TimeStamp>]";
    *(void *)&unsigned char buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    LODWORD(v55) = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v47);
    *(std::runtime_error *)&v50.__r_.__value_.__l.__data_ = v47;
    char v49 = &unk_1F148AA90;
    v50.__r_.__value_.__r.__words[2] = v48;
    v47.__vftable = 0;
    v47.__imp_.__imp_ = 0;
    std::string::size_type v48 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  *(_OWORD *)std::string buf = v35;
  *(_OWORD *)&buf[16] = v36;
  *(_OWORD *)&buf[32] = v37;
  long long v55 = v38;
  std::runtime_error v43 = v31;
  long long v44 = v32;
  long long v45 = v33;
  long long v46 = v34;
  *(float *)&char v49 = a5;
  uint64_t v18 = *((void *)v16 + 3);
  if (!v18) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t, void **, unsigned char *, std::runtime_error *))(*(void *)v18 + 48))(v18, a2, &v49, buf, &v43);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
}

void sub_1BAEA9230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::runtime_error a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::System::get_wire_connection_properties(AMCP::System *this, const AMCP::Wire_Identifier *a2)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v3
    || (uint64_t v3 = std::__shared_weak_count::lock(v3), (v5 = v3) == 0)
    || (uint64_t v6 = (int8x8_t *)*((void *)this + 2)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v20 = **(NSObject ***)buf;
    if ((void)v59) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v59);
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v21 = pthread_self();
      mach_port_t v22 = pthread_mach_thread_np(v21);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v22;
      LOWORD(v59) = 2080;
      *(void *)((char *)&v59 + 2) = "System.cpp";
      WORD5(v59) = 1024;
      HIDWORD(v59) = 152;
      LOWORD(v60) = 2080;
      *(void *)((char *)&v60 + 2) = "!core_ptr";
      _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v48);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v43, "No underlying object");
    std::runtime_error::runtime_error(&v49, &v43);
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    int v54 = -1;
    v49.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::string v50 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v49);
    *((void *)&v60 + 1) = "std::optional<Wire_Connection_Properties> AMCP::System::get_wire_connection_properties(const"
                            " Wire_Identifier &)";
    long long v61 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    *(_DWORD *)long long v62 = 152;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v47.__r_.__value_.__l.__data_);
    std::string v46 = v47;
    long long v45 = &unk_1F148AA90;
    memset(&v47, 0, sizeof(v47));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v35 = 0x676C6F6267776370;
  int v36 = 0;
  if (*((char *)a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else {
    std::string v29 = *(std::string *)a2;
  }
  uint64_t v30 = *((void *)a2 + 3);
  int v31 = *((_DWORD *)a2 + 8);
  if (*((char *)a2 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v32, *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else {
    std::string v32 = *(std::string *)((char *)a2 + 40);
  }
  uint64_t v33 = *((void *)a2 + 8);
  int v34 = *((_DWORD *)a2 + 18);
  operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v41, v6, (unsigned int *)&v35);
  mach_port_t v8 = v41;
  if (!v41)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v23 = **(NSObject ***)buf;
    if ((void)v59) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v59);
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v24 = pthread_self();
      mach_port_t v25 = pthread_mach_thread_np(v24);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v25;
      LOWORD(v59) = 2080;
      *(void *)((char *)&v59 + 2) = "Core.h";
      WORD5(v59) = 1024;
      HIDWORD(v59) = 202;
      _os_log_error_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)v57);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v47);
    std::runtime_error::runtime_error(&v48, &v47);
    std::runtime_error::runtime_error(&v49, &v48);
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    int v54 = -1;
    v49.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::string v50 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v49);
    *((void *)&v60 + 1) = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) co"
                            "nst [Return_Type = std::optional<AMCP::Wire_Connection_Properties>, Argument_Types = <AMCP::"
                            "Wire_Identifier>]";
    long long v61 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    *(_DWORD *)long long v62 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v43);
    *(std::runtime_error *)&v46.__r_.__value_.__l.__data_ = v43;
    long long v45 = &unk_1F148AA90;
    v46.__r_.__value_.__r.__words[2] = v44;
    v43.__vftable = 0;
    v43.__imp_.__imp_ = 0;
    std::string::size_type v44 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  v57[0] = v29.__r_.__value_.__l.__size_;
  std::string::size_type v9 = v29.__r_.__value_.__r.__words[0];
  *(void *)((char *)v57 + 7) = *(std::string::size_type *)((char *)&v29.__r_.__value_.__r.__words[1] + 7);
  char v10 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  memset(&v29, 0, sizeof(v29));
  uint64_t v39 = v30;
  int v40 = v31;
  uint64_t v11 = (char *)v32.__r_.__value_.__r.__words[0];
  *(void *)((char *)v56 + 7) = *(std::string::size_type *)((char *)&v32.__r_.__value_.__r.__words[1] + 7);
  v56[0] = v32.__r_.__value_.__l.__size_;
  char v12 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  memset(&v32, 0, sizeof(v32));
  int v38 = v34;
  uint64_t v37 = v33;
  unint64_t v13 = AMCP::Implementation::get_type_marker<std::function<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>>();
  uint64_t v14 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v13);
  if (!v14)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v26 = **(NSObject ***)buf;
    if ((void)v59) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v59);
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v27 = pthread_self();
      mach_port_t v28 = pthread_mach_thread_np(v27);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v28;
      LOWORD(v59) = 2080;
      *(void *)((char *)&v59 + 2) = "Operation.h";
      WORD5(v59) = 1024;
      HIDWORD(v59) = 154;
      _os_log_error_impl(&dword_1BAA78000, v26, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v55);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v47);
    std::runtime_error::runtime_error(&v48, &v47);
    std::runtime_error::runtime_error(&v49, &v48);
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    int v54 = -1;
    v49.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::string v50 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v49);
    *((void *)&v60 + 1) = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std"
                            "::optional<AMCP::Wire_Connection_Properties>, Argument_Types = <AMCP::Wire_Identifier>]";
    long long v61 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    *(_DWORD *)long long v62 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v43);
    *(std::runtime_error *)&v46.__r_.__value_.__l.__data_ = v43;
    long long v45 = &unk_1F148AA90;
    v46.__r_.__value_.__r.__words[2] = v44;
    v43.__vftable = 0;
    v43.__imp_.__imp_ = 0;
    std::string::size_type v44 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v15 = v14;
  if (!*((void *)v14 + 7)
    || (*(void *)std::string buf = AMCP::Implementation::get_type_marker<std::function<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>>(),
        (uint64_t v14 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v15 + 7))(4, (uint64_t)v15 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    char v17 = **(NSObject ***)buf;
    if ((void)v59) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v59);
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = pthread_self();
      mach_port_t v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v19;
      LOWORD(v59) = 2080;
      *(void *)((char *)&v59 + 2) = "Operation.h";
      WORD5(v59) = 1024;
      HIDWORD(v59) = 161;
      _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v55);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v47);
    std::runtime_error::runtime_error(&v48, &v47);
    std::runtime_error::runtime_error(&v49, &v48);
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    int v54 = -1;
    v49.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::string v50 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v49);
    *((void *)&v60 + 1) = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std"
                            "::optional<AMCP::Wire_Connection_Properties>, Argument_Types = <AMCP::Wire_Identifier>]";
    long long v61 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    *(_DWORD *)long long v62 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v43);
    *(std::runtime_error *)&v46.__r_.__value_.__l.__data_ = v43;
    long long v45 = &unk_1F148AA90;
    v46.__r_.__value_.__r.__words[2] = v44;
    v43.__vftable = 0;
    v43.__imp_.__imp_ = 0;
    std::string::size_type v44 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  *(void *)std::string buf = v9;
  *(void *)&long long v59 = v57[0];
  *(void *)((char *)&v59 + 7) = *(void *)((char *)v57 + 7);
  HIBYTE(v59) = v10;
  v57[0] = 0;
  *(void *)((char *)v57 + 7) = 0;
  *(void *)&long long v60 = v39;
  DWORD2(v60) = v40;
  long long v61 = v11;
  *(void *)long long v62 = v56[0];
  *(void *)&v62[7] = *(void *)((char *)v56 + 7);
  char v63 = v12;
  *(void *)((char *)v56 + 7) = 0;
  v56[0] = 0;
  int v65 = v38;
  uint64_t v64 = v37;
  uint64_t v16 = *((void *)v14 + 3);
  if (!v16) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v16 + 48))(v16, buf);
  if (v63 < 0) {
    operator delete(v61);
  }
  if (SHIBYTE(v59) < 0) {
    operator delete(*(void **)buf);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1BAEA9E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::runtime_error a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,std::runtime_error a44,std::runtime_error a45,uint64_t a46)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  _Unwind_Resume(a1);
}

uint64_t AMCP::System::Config_Change_Observer::Config_Change_Observer(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6 = **a2;
  BOOL v5 = (std::__shared_weak_count *)(*a2)[1];
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  else
  {
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = 0;
  }
  *(void *)(a1 + 16) = a3;
  *(unsigned char *)(a1 + 24) = 0;
  return a1;
}

uint64_t AMCP::System::Config_Change_Observer::Config_Change_Observer(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = **a2;
  unint64_t v7 = (std::__shared_weak_count *)(*a2)[1];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v7;
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  else
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = 0;
  }
  *(void *)(a1 + 16) = a3;
  *(unsigned char *)(a1 + 24) = a4;
  return a1;
}

void AMCP::System::Config_Change_Observer::~Config_Change_Observer(std::__shared_weak_count **this)
{
  AMCP::System::Config_Change_Observer::reset((AMCP::System::Config_Change_Observer *)this);
  uint64_t v2 = this[1];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void AMCP::System::Config_Change_Observer::reset(AMCP::System::Config_Change_Observer *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v2 && (uint64_t v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)this;
    if (*(void *)this)
    {
      unint64_t v6 = *((void *)this + 2);
      if (v6)
      {
        uint64_t v7 = *(void *)(v5 + 32);
        if (*((unsigned char *)this + 24))
        {
          AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::deregister_observer(v7 + 1568, v6);
        }
        else
        {
          AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::deregister_observer(v7 + 2000, v6);
          uint64_t v8 = *(void *)(v5 + 32);
          unint64_t v9 = *((void *)this + 2);
          uint64_t v23 = v8 + 1784;
          char v24 = 1;
          std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v8 + 1784));
          if (*(unsigned char *)(v8 + 1952))
          {
            char v10 = *(void **)(v8 + 1960);
            uint64_t v11 = *(void **)(v8 + 1968);
            while (v10 != v11)
            {
              char v12 = (void *)v10[2];
              if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>::find((void *)v10[1], v12, v9))
              {
                uint64_t v14 = v13;
                if (v13 + 9 == v12)
                {
                  uint64_t v15 = (uint64_t)v13;
                }
                else
                {
                  uint64_t v15 = (uint64_t)v13;
                  do
                  {
                    uint64_t v16 = *(void *)(v15 + 72);
                    v15 += 72;
                    *uint64_t v14 = v16;
                    std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>::operator=[abi:ne180100](v14 + 1, (uint64_t)(v14 + 10));
                    char v17 = v14 + 18;
                    uint64_t v14 = (void *)v15;
                  }
                  while (v17 != v12);
                }
                std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__base_destruct_at_end[abi:ne180100](v10 + 1, v15);
                if (v10[1] == v10[2])
                {
                  uint64_t v18 = v10 + 5;
                  mach_port_t v19 = *(void **)(v8 + 1968);
                  if (v10 + 5 != v19)
                  {
                    do
                    {
                      char v10 = v18;
                      *((_DWORD *)v18 - 10) = *(_DWORD *)v18;
                      long long v20 = *((_OWORD *)v18 - 2);
                      *((_OWORD *)v18 - 2) = *(_OWORD *)(v18 + 1);
                      *(_OWORD *)(v18 + 1) = v20;
                      uint64_t v21 = *(v18 - 2);
                      *(v10 - 2) = v10[3];
                      void v10[3] = v21;
                      uint64_t v18 = v10 + 5;
                    }
                    while (v10 + 5 != v19);
                    uint64_t v18 = *(void **)(v8 + 1968);
                  }
                  if (v18 != v10)
                  {
                    do
                    {
                      mach_port_t v22 = v18 - 5;
                      mach_port_t v25 = (void **)(v18 - 4);
                      std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__destroy_vector::operator()[abi:ne180100](&v25);
                      uint64_t v18 = v22;
                    }
                    while (v22 != v10);
                  }
                  *(void *)(v8 + 1968) = v10;
                }
                break;
              }
              v10 += 5;
            }
          }
          std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v23);
        }
      }
    }
    *((void *)this + 2) = 0;
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

void *AMCP::System::create_begin_config_change_observer@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)v7, a2);
  unint64_t v9 = 0;
  uint64_t v5 = operator new(0x28uLL);
  void *v5 = &unk_1F147FB58;
  std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)(v5 + 1), (uint64_t)v7);
  unint64_t v9 = v5;
  AMCP::System::create_begin_config_change_observer(a1, (uint64_t)v8, a3);
  std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__value_func[abi:ne180100](v8);
  return std::__function::__value_func<void ()>::~__value_func[abi:ne180100](v7);
}

void sub_1BAEAA4B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void AMCP::System::create_begin_config_change_observer(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (std::__shared_weak_count *)a1[3];
  if (!v5 || (v5 = std::__shared_weak_count::lock(v5), (uint64_t v7 = v5) == 0) || !a1[2])
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v10 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)mach_port_t v27 = 2080;
      *(void *)&uint64_t v27[2] = "System.cpp";
      __int16 v28 = 1024;
      int v29 = 212;
      __int16 v30 = 2080;
      *(void *)int v31 = "!core_ptr";
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v18, "No underlying object");
    std::runtime_error::runtime_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    long long v20 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&v31[6] = "System::Config_Change_Observer AMCP::System::create_begin_config_change_observer(const Config_C"
                         "hange_Observer_Proc &) const";
    std::string v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    int v33 = 212;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    uint64_t v15 = &unk_1F148AA90;
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v8 = (uint64_t **)a1[4];
  unint64_t v9 = AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::register_observer(*(void *)(**v8 + 32) + 1568, (unsigned int *)(*(void *)(**v8 + 32) + 1776), a2);
  AMCP::System::Config_Change_Observer::Config_Change_Observer(a3, v8, v9, 1);

  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_1BAEAA7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0,std::allocator<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0,std::allocator<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK4AMCP6System35create_begin_config_change_observerERKNSt3__18functionIFvjEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0,std::allocator<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::operator()(uint64_t a1, int *a2)
{
  return std::function<void ()>::operator()(*(void *)(a1 + 32), *a2);
}

void std::__function::__func<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0,std::allocator<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void *std::__function::__func<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0,std::allocator<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

uint64_t std::__function::__func<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0,std::allocator<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F147FB58;
  return std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0,std::allocator<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F147FB58;
  std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BAEAAA00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0,std::allocator<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F147FB58;
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0,std::allocator<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F147FB58;
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void *AMCP::System::create_end_config_change_observer@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
  unint64_t v9 = 0;
  uint64_t v5 = operator new(0x28uLL);
  void *v5 = &unk_1F147FBE8;
  std::__function::__value_func<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__value_func[abi:ne180100]((uint64_t)(v5 + 1), (uint64_t)v7);
  unint64_t v9 = v5;
  AMCP::System::create_end_config_change_observer(a1, (uint64_t)v8, a3);
  std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__value_func[abi:ne180100](v8);
  return std::__function::__value_func<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__value_func[abi:ne180100](v7);
}

void sub_1BAEAAB7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void AMCP::System::create_end_config_change_observer(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (std::__shared_weak_count *)a1[3];
  if (!v5 || (v5 = std::__shared_weak_count::lock(v5), (uint64_t v7 = v5) == 0) || !a1[2])
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v10 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)mach_port_t v27 = 2080;
      *(void *)&uint64_t v27[2] = "System.cpp";
      __int16 v28 = 1024;
      int v29 = 226;
      __int16 v30 = 2080;
      *(void *)int v31 = "!core_ptr";
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v18, "No underlying object");
    std::runtime_error::runtime_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    long long v20 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&v31[6] = "System::Config_Change_Observer AMCP::System::create_end_config_change_observer(const Config_Cha"
                         "nge_Observer_Proc &) const";
    std::string v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    int v33 = 226;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    uint64_t v15 = &unk_1F148AA90;
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v8 = (uint64_t **)a1[4];
  unint64_t v9 = AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::register_observer(*(void *)(**v8 + 32) + 2000, (unsigned int *)(*(void *)(**v8 + 32) + 2208), a2);
  AMCP::System::Config_Change_Observer::Config_Change_Observer(a3, v8, v9, 0);

  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_1BAEAAF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0,std::allocator<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0,std::allocator<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK4AMCP6System33create_end_config_change_observerERKNSt3__18functionIFvjRKNS1_5tupleIJNS1_6vectorIjNS1_9allocatorIjEEEES7_N5boost9container8flat_mapIjNS3_IJNSA_INS_7AddressENS_5ThingENSB_15Is_Exact_BeforeEvEESE_SE_EEENS1_4lessIjEEvEEEEEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0,std::allocator<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::operator()(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  int v6 = *a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)v4 + 48))(v4, &v6, a4);
}

void std::__function::__func<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0,std::allocator<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void *std::__function::__func<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0,std::allocator<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

uint64_t std::__function::__func<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0,std::allocator<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F147FBE8;
  return std::__function::__value_func<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0,std::allocator<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F147FBE8;
  std::__function::__value_func<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BAEAB1B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0,std::allocator<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F147FBE8;
  std::__function::__value_func<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0,std::allocator<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F147FBE8;
  std::__function::__value_func<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void AMCP::System::create_continuing_config_change_observer(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (std::__shared_weak_count *)a1[3];
  if (!v5 || (v5 = std::__shared_weak_count::lock(v5), (uint64_t v7 = v5) == 0) || !a1[2])
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v10 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)mach_port_t v27 = 2080;
      *(void *)&uint64_t v27[2] = "System.cpp";
      __int16 v28 = 1024;
      int v29 = 205;
      __int16 v30 = 2080;
      *(void *)int v31 = "!core_ptr";
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v18, "No underlying object");
    std::runtime_error::runtime_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    long long v20 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&v31[6] = "System::Config_Change_Observer AMCP::System::create_continuing_config_change_observer(const Con"
                         "fig_Change_Observer_Proc &) const";
    std::string v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    int v33 = 205;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    uint64_t v15 = &unk_1F148AA90;
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v8 = (uint64_t **)a1[4];
  unint64_t v9 = AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::register_observer(*(void *)(**v8 + 32) + 2216, (unsigned int *)(*(void *)(**v8 + 32) + 2424), a2);
  AMCP::System::Config_Change_Observer::Config_Change_Observer(a3, v8, v9, 1);

  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_1BAEAB528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  _Unwind_Resume(a1);
}

void AMCP::System::create_ioc_graph_update_observer(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (std::__shared_weak_count *)a1[3];
  if (!v5 || (v5 = std::__shared_weak_count::lock(v5), (uint64_t v7 = v5) == 0) || !a1[2])
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v35 = **(NSObject ***)buf;
    if (*(void *)v94) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v94);
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      int v36 = pthread_self();
      mach_port_t v37 = pthread_mach_thread_np(v36);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v37;
      *(_WORD *)mach_port_t v94 = 2080;
      *(void *)&v94[2] = "System.cpp";
      __int16 v95 = 1024;
      int v96 = 219;
      __int16 v97 = 2080;
      *(void *)std::string v98 = "!core_ptr";
      _os_log_error_impl(&dword_1BAA78000, v35, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v87);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v82, "No underlying object");
    std::runtime_error::runtime_error(&v77, &v82);
    *((void *)&v78 + 1) = 0;
    uint64_t v79 = 0;
    uint64_t v80 = 0;
    int v81 = -1;
    v77.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    *(void *)&long long v78 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v77);
    *(void *)&v98[6] = "System::Config_Change_Observer AMCP::System::create_ioc_graph_update_observer(const IOC_Graph_U"
                         "pdate_Proc_Pair &) const";
    std::string::size_type v99 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    int v100 = 219;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v84);
    *(_OWORD *)&v91[8] = *(_OWORD *)v84;
    *(void *)int16x8_t v91 = &unk_1F148AA90;
    *(void *)&v91[24] = *(void *)&v84[16];
    memset(v84, 0, sizeof(v84));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v8 = (uint64_t **)a1[4];
  uint64_t v9 = *(void *)(**v8 + 32);
  uint64_t v87 = v9 + 1784;
  char v88 = 1;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v9 + 1784));
  if (!*(unsigned char *)(v9 + 1952))
  {
    unint64_t add = 0;
    goto LABEL_64;
  }
  unint64_t add = atomic_fetch_add(&AMCP::Observer::Implementation::get_next_token(void)::s_next_token, 1uLL);
  if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(*(_DWORD **)(v9 + 1960), *(_DWORD **)(v9 + 1968), *(_DWORD *)(v9 + 1992)))
  {
    uint64_t v12 = v11;
    *(void *)std::string buf = add;
    std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>::pair[abi:ne180100]((uint64_t)v94, a2);
    long long v13 = *(void **)(v12 + 8);
    uint64_t v14 = *(void **)(v12 + 16);
    uint64_t v15 = (void *)(v12 + 8);
    BOOL v16 = AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>::find(v13, v14, add);
    std::runtime_error v18 = v17;
    if (v16)
    {
      *uint64_t v17 = add;
      std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::operator=(v17 + 1, (uint64_t)v94);
      std::function<void ()(AMCP::Graph_Description const&)>::operator=(v18 + 5, (uint64_t)&v99);
    }
    else
    {
      std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::insert(v15, v17, buf);
    }
    std::__function::__value_func<void ()(AMCP::Graph_Description const&)>::~__value_func[abi:ne180100](&v99);
    goto LABEL_63;
  }
  *(void *)std::string buf = add;
  std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>::pair[abi:ne180100]((uint64_t)v94, a2);
  v82.__vftable = 0;
  v82.__imp_.__imp_ = 0;
  int32x4_t v83 = 0;
  *(void *)int16x8_t v91 = &v82;
  v91[8] = 0;
  std::runtime_error v19 = (std::runtime_error_vtbl *)operator new(0x48uLL);
  v82.__vftable = v19;
  v82.__imp_.__imp_ = (const char *)v19;
  int32x4_t v83 = v19 + 3;
  int32x4_t v89 = v19;
  std::string::size_type v90 = v19;
  v77.__vftable = (std::runtime_error_vtbl *)&v83;
  v77.__imp_.__imp_ = (const char *)&v89;
  *(void *)&long long v78 = &v90;
  v19->~runtime_error = *(void (__cdecl **)(std::runtime_error *__hidden))buf;
  std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>::pair[abi:ne180100]((uint64_t)&v19->~runtime_error_0, (uint64_t)v94);
  v90 += 3;
  long long v20 = (const char *)v90;
  BYTE8(v78) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v77);
  uint64_t v21 = v83;
  v82.__imp_.__imp_ = v20;
  int32x4_t v83 = 0;
  *(_DWORD *)uint32x4_t v84 = *(_DWORD *)(v9 + 1992);
  int v22 = *(_DWORD *)v84;
  *(std::runtime_error *)&v84[8] = v82;
  v82.__vftable = 0;
  v82.__imp_.__imp_ = 0;
  std::string::size_type v85 = v21;
  uint64_t v23 = *(_DWORD **)(v9 + 1960);
  unint64_t v24 = *(void *)(v9 + 1968);
  BOOL v25 = AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(v23, (_DWORD *)v24, *(unsigned int *)v84);
  unint64_t v27 = (unint64_t)v26;
  if (v25)
  {
    *int v26 = v22;
    __int16 v28 = &v84[8];
  }
  else
  {
    unint64_t v29 = *(void *)(v9 + 1976);
    if (v24 >= v29)
    {
      unint64_t v38 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v24 - (void)v23) >> 3) + 1;
      if (v38 > 0x666666666666666) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v39 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v29 - (void)v23) >> 3);
      if (2 * v39 > v38) {
        unint64_t v38 = 2 * v39;
      }
      if (v39 >= 0x333333333333333) {
        unint64_t v40 = 0x666666666666666;
      }
      else {
        unint64_t v40 = v38;
      }
      uint64_t v92 = v9 + 1976;
      if (v40) {
        unint64_t v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v40);
      }
      else {
        uint64_t v41 = 0;
      }
      int64_t v51 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v27 - (void)v23) >> 3);
      unint64_t v52 = v40 + 8 * ((uint64_t)(v27 - (void)v23) >> 3);
      *(void *)int16x8_t v91 = v40;
      *(void *)&v91[8] = v52;
      *(void *)&v91[16] = v52;
      *(void *)&v91[24] = v40 + 40 * v41;
      if (v51 == v41)
      {
        if ((uint64_t)(v27 - (void)v23) < 1)
        {
          if ((_DWORD *)v27 == v23) {
            unint64_t v54 = 1;
          }
          else {
            unint64_t v54 = 0x999999999999999ALL * ((uint64_t)(v27 - (void)v23) >> 3);
          }
          uint64_t v79 = v92;
          char v55 = (std::runtime_error_vtbl *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v54);
          uint64_t v56 = (char *)v55 + 40 * (v54 >> 2);
          v77.__vftable = v55;
          v77.__imp_.__imp_ = v56;
          *((void *)&v78 + 1) = (char *)v55 + 40 * v57;
          uint64_t v58 = *(void *)&v91[8];
          if (*(void *)&v91[16] != *(void *)&v91[8])
          {
            long long v59 = &v56[*(void *)&v91[16] - *(void *)&v91[8]];
            do
            {
              *(_DWORD *)uint64_t v56 = *(_DWORD *)v58;
              *((void *)v56 + 2) = 0;
              *((void *)v56 + 3) = 0;
              *((void *)v56 + 1) = 0;
              *((void *)v56 + 1) = *(void *)(v58 + 8);
              *(void *)(v58 + 8) = 0;
              uint64_t v60 = *((void *)v56 + 2);
              *((void *)v56 + 2) = *(void *)(v58 + 16);
              *(void *)(v58 + 16) = v60;
              uint64_t v61 = *((void *)v56 + 3);
              *((void *)v56 + 3) = *(void *)(v58 + 24);
              *(void *)(v58 + 24) = v61;
              v56 += 40;
              v58 += 40;
            }
            while (v56 != v59);
            uint64_t v56 = v59;
          }
          *(void *)&long long v78 = v56;
          std::runtime_error v62 = *(std::runtime_error *)v91;
          long long v63 = *(_OWORD *)&v91[16];
          *(std::runtime_error *)int16x8_t v91 = v77;
          *(_OWORD *)&v91[16] = v78;
          std::runtime_error v77 = v62;
          long long v78 = v63;
          std::__split_buffer<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>::~__split_buffer((uint64_t)&v77);
          unint64_t v52 = *(void *)&v91[16];
        }
        else
        {
          if (v51 >= -1) {
            uint64_t v53 = v51 + 1;
          }
          else {
            uint64_t v53 = v51 + 2;
          }
          v52 -= 40 * (v53 >> 1);
          *(void *)&v91[8] = v52;
          *(void *)&v91[16] = v52;
        }
      }
      *(_DWORD *)unint64_t v52 = *(_DWORD *)v84;
      *(void *)(v52 + 16) = 0;
      *(void *)(v52 + 24) = 0;
      *(void *)(v52 + 8) = 0;
      std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__init_with_size[abi:ne180100]<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*>((void *)(v52 + 8), *(void **)&v84[8], *(void **)&v84[16], 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)&v84[16] - *(void *)&v84[8]) >> 3));
      *(_WORD *)(v52 + 32) = v86;
      uint64_t v64 = *(void **)&v91[8];
      uint64_t v65 = *(void *)&v91[16] + 40;
      *(void *)&v91[16] += 40;
      uint64_t v66 = *(void **)(v9 + 1960);
      if ((void *)v27 != v66)
      {
        mach_port_t v67 = (void *)v27;
        do
        {
          int v68 = *((_DWORD *)v67 - 10);
          v67 -= 5;
          *((_DWORD *)v64 - 10) = v68;
          v64 -= 5;
          v64[2] = 0;
          v64[3] = 0;
          v64[1] = 0;
          v64[1] = v67[1];
          v67[1] = 0;
          uint64_t v69 = v64[2];
          v64[2] = v67[2];
          v67[2] = v69;
          uint64_t v70 = v64[3];
          v64[3] = v67[3];
          v67[3] = v70;
        }
        while (v67 != v66);
        uint64_t v65 = *(void *)&v91[16];
      }
      *(void *)&v91[8] = v64;
      uint64_t v71 = *(void *)(v9 + 1968);
      if (v27 != v71)
      {
        do
        {
          *(_DWORD *)uint64_t v65 = *(_DWORD *)v27;
          *(void *)(v65 + 16) = 0;
          *(void *)(v65 + 24) = 0;
          *(void *)(v65 + 8) = 0;
          *(void *)(v65 + 8) = *(void *)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          uint64_t v72 = *(void *)(v65 + 16);
          *(void *)(v65 + 16) = *(void *)(v27 + 16);
          *(void *)(v27 + 16) = v72;
          uint64_t v73 = *(void *)(v65 + 24);
          *(void *)(v65 + 24) = *(void *)(v27 + 24);
          *(void *)(v27 + 24) = v73;
          v65 += 40;
          v27 += 40;
        }
        while (v27 != v71);
        uint64_t v64 = *(void **)&v91[8];
      }
      uint64_t v74 = *(void *)(v9 + 1960);
      *(void *)(v9 + 1960) = v64;
      *(void *)&v91[8] = v74;
      *(void *)&v91[16] = v65;
      long long v75 = *(_OWORD *)(v9 + 1968);
      *(void *)(v9 + 1968) = v65;
      uint64_t v76 = *(void *)&v91[8];
      *(void *)(v9 + 1976) = *(void *)&v91[24];
      *(_OWORD *)&v91[16] = v75;
      *(void *)int16x8_t v91 = v76;
      std::__split_buffer<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>::~__split_buffer((uint64_t)v91);
      goto LABEL_62;
    }
    if (v26 == (_DWORD *)v24)
    {
      *(_DWORD *)unint64_t v24 = v22;
      *(void *)(v24 + 16) = 0;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 8) = 0;
      std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__init_with_size[abi:ne180100]<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*>((void *)(v24 + 8), *(void **)&v84[8], *(void **)&v84[16], 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)&v84[16] - *(void *)&v84[8]) >> 3));
      *(_WORD *)(v24 + 32) = v86;
      *(void *)(v9 + 1968) = v24 + 40;
      goto LABEL_62;
    }
    __int16 v30 = v26 + 10;
    unint64_t v31 = v24 - 40;
    unint64_t v32 = v24;
    while (v31 < v24)
    {
      *(_DWORD *)unint64_t v32 = *(_DWORD *)v31;
      *(void *)(v32 + 16) = 0;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 8) = 0;
      *(void *)(v32 + 8) = *(void *)(v31 + 8);
      *(void *)(v31 + 8) = 0;
      uint64_t v33 = *(void *)(v32 + 16);
      *(void *)(v32 + 16) = *(void *)(v31 + 16);
      *(void *)(v31 + 16) = v33;
      uint64_t v34 = *(void *)(v32 + 24);
      *(void *)(v32 + 24) = *(void *)(v31 + 24);
      *(void *)(v31 + 24) = v34;
      v32 += 40;
      v31 += 40;
    }
    *(void *)(v9 + 1968) = v32;
    if ((_DWORD *)v24 != v30)
    {
      unint64_t v42 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v24 - (void)v30) >> 3);
      std::runtime_error v43 = (void *)(v24 - 16);
      uint64_t v44 = 10 * v42;
      do
      {
        long long v45 = &v26[v44];
        *((_DWORD *)v43 - 6) = v26[v44 - 10];
        uint64_t v46 = *(v43 - 2);
        *(v43 - 2) = *(void *)&v26[v44 - 8];
        *((void *)v45 - 4) = v46;
        uint64_t v47 = *(v43 - 1);
        *(v43 - 1) = *(void *)&v26[v44 - 6];
        *((void *)v45 - 3) = v47;
        uint64_t v48 = *v43;
        *std::runtime_error v43 = *(void *)&v26[v44 - 4];
        v43 -= 5;
        *((void *)v45 - 2) = v48;
        v44 -= 10;
      }
      while (v44 * 4);
    }
    std::runtime_error v49 = v84;
    if (v27 <= (unint64_t)v84) {
      std::runtime_error v49 = &v84[40 * (*(void *)(v9 + 1968) > (unint64_t)v84)];
    }
    int v50 = *(_DWORD *)v49;
    __int16 v28 = v49 + 8;
    *(_DWORD *)unint64_t v27 = v50;
  }
  AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>::operator=(v27 + 8, (uint64_t)v28);
LABEL_62:
  v77.__vftable = (std::runtime_error_vtbl *)&v84[8];
  std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
  v77.__vftable = (std::runtime_error_vtbl *)&v82;
  std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
  std::__function::__value_func<void ()(AMCP::Graph_Description const&)>::~__value_func[abi:ne180100](&v99);
LABEL_63:
  std::__function::__value_func<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::~__value_func[abi:ne180100](v94);
LABEL_64:
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v87);
  AMCP::System::Config_Change_Observer::Config_Change_Observer(a3, v8, add, 0);

  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_1BAEABEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, std::runtime_error a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,std::runtime_error *a30,uint64_t a31,void *__p,uint64_t a33)
{
  *(void *)(v35 + 1968) = v34;
  std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = &a18;
  std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::__function::__value_func<void ()(AMCP::Graph_Description const&)>::~__value_func[abi:ne180100]((void *)(v36 - 136));
  std::__function::__value_func<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::~__value_func[abi:ne180100](a10);
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a27);
  std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  _Unwind_Resume(a1);
}

void AMCP::System::execute_task_against_config_changes(uint64_t a1, uint64_t a2)
{
  queue[40] = *(dispatch_queue_t *)MEMORY[0x1E4F143B8];
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)queue, *(dispatch_object_t *)(*(void *)(***(void ***)(a1 + 32) + 32) + 32));
  uint64_t v3 = a2;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN10applesauce8dispatch2v19sync_implIZN4AMCP4Core9Conductor11handle_taskERKNSt3__18functionIFvvEEEEUlvE_EEvP16dispatch_queue_sOT_NS6_17integral_constantIbLb1EEE_block_invoke;
  block[3] = &__block_descriptor_tmp_14429;
  block[4] = &v3;
  dispatch_sync(queue[0], block);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)queue);
}

uint64_t ___ZN10applesauce8dispatch2v19sync_implIZN4AMCP4Core9Conductor11handle_taskERKNSt3__18functionIFvvEEEEUlvE_EEvP16dispatch_queue_sOT_NS6_17integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(**(void **)(a1 + 32) + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1);
}

void sub_1BAEAC124(void *a1)
{
}

void AMCP::System::execute_task_against_config_changes_async(uint64_t a1, uint64_t a2)
{
  v4[40] = *MEMORY[0x1E4F143B8];
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v4, *(dispatch_object_t *)(*(void *)(***(void ***)(a1 + 32) + 32) + 32));
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v3, a2);
  operator new();
}

void sub_1BAEAC20C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void applesauce::dispatch::v1::async<AMCP::Core::Conductor::handle_task_async(std::function<void ()(void)> const&)::{lambda(void)#1}>(dispatch_queue_s *,AMCP::Core::Conductor::handle_task_async(std::function<void ()(void)> const&)::{lambda(void)#1} &&)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = a1[3];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](a1);
    JUMPOUT(0x1C1859840);
  }
  std::__throw_bad_function_call[abi:ne180100]();
}

void sub_1BAEAC298(void *a1)
{
}

void AMCP::System::wait_for_notification_quiesence(AMCP::System *this, double a2)
{
  _DWORD v11[4] = *MEMORY[0x1E4F143B8];
  if (a2 > 0.0)
  {
    uint64_t v10 = mach_absolute_time();
    v11[0] = &unk_1F147FC68;
    v11[1] = &v10;
    v11[3] = v11;
    AMCP::System::create_end_config_change_observer(this, (uint64_t)v11, (uint64_t)v9);
    std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__value_func[abi:ne180100](v11);
    uint64_t v4 = mach_absolute_time();
    unint64_t v5 = (uint64_t)(a2 * 24000000.0);
    unint64_t v6 = atomic_load(&v10);
    if (!v6 || v4 - v6 < v5)
    {
      do
      {
        mach_wait_until(v4 + (uint64_t)(a2 * 0.25 * 24000000.0));
        uint64_t v4 = mach_absolute_time();
        unint64_t v7 = atomic_load(&v10);
        if (v7) {
          BOOL v8 = v4 - v7 >= v5;
        }
        else {
          BOOL v8 = 0;
        }
      }
      while (!v8);
    }
    AMCP::System::Config_Change_Observer::~Config_Change_Observer(v9);
  }
}

void sub_1BAEAC3C4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::System::wait_for_notification_quiesence(double)::$_0,std::allocator<AMCP::System::wait_for_notification_quiesence(double)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::System::wait_for_notification_quiesence(double)::$_0,std::allocator<AMCP::System::wait_for_notification_quiesence(double)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK4AMCP6System31wait_for_notification_quiesenceEdE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::System::wait_for_notification_quiesence(double)::$_0,std::allocator<AMCP::System::wait_for_notification_quiesence(double)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(unint64_t **)(a1 + 8);
  uint64_t result = mach_absolute_time();
  atomic_store(result, v1);
  return result;
}

uint64_t std::__function::__func<AMCP::System::wait_for_notification_quiesence(double)::$_0,std::allocator<AMCP::System::wait_for_notification_quiesence(double)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F147FC68;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::System::wait_for_notification_quiesence(double)::$_0,std::allocator<AMCP::System::wait_for_notification_quiesence(double)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F147FC68;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::System::wait_for_notification_quiesence(double)::$_0,std::allocator<AMCP::System::wait_for_notification_quiesence(double)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__func()
{
}

void AMCP::System::find_devices_to_stop_for_config_change(AMCP::System *this@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = a3;
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(***((void ***)this + 4) + 32);
  unint64_t v6 = (void *)(v5 + 2648);
  v58[0] = 0;
  v58[1] = 0;
  uint64_t v57 = v58;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = (uint64_t)(a3 + 1);
  (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)(v5 + 2648) + 16))(buf, v5 + 2648);
  unint64_t v7 = (std::__shared_mutex_base *)(*(uint64_t (**)(void))(**(void **)buf + 16))(*(void *)buf);
  unsigned int v41 = a2;
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v55, v7, a2);
  if (*(void *)v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v71);
  }
  BOOL v8 = v55;
  if (v55)
  {
    unsigned int simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(v55);
    if (AMCP::is_base_of((AMCP *)0x61646576, simple_required))
    {
      std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v57, a2, a2);
    }
    else if (AMCP::is_base_of((AMCP *)0x61706C67, simple_required))
    {
      AMCP::Core::Core::get_simple_required_property<1684370979u>(buf, v8);
      uint64_t v11 = *(void **)buf;
      uint64_t v10 = *(unsigned int **)v71;
      if (*(void *)buf != *(void *)v71)
      {
        uint64_t v12 = *(unsigned int **)buf;
        do
        {
          std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v57, (uint64_t *)v58, *v12, *v12);
          ++v12;
        }
        while (v12 != v10);
      }
      if (v11) {
        operator delete(v11);
      }
    }
    std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(v4, v57, v58);
    AMCP::Graph::Graph::get_nodes(v54, *(void **)(v5 + 2848));
    long long v13 = v57;
    if (v57 != v58)
    {
      unint64_t v42 = v8;
      std::runtime_error v43 = v4;
      while (1)
      {
        unsigned int v45 = *((_DWORD *)v13 + 7);
        AMCP::IO_Core::Graph_Manager::find_timebases_from_object_id((AMCP::IO_Core::Graph_Manager *)v53, v6, v45);
        uint64_t v14 = v54[0];
        uint64_t v15 = v54[1];
        while (v14 != v15)
        {
          (*(void (**)(void **__return_ptr, void *))(*v6 + 16))(&__p, v6);
          BOOL v16 = (std::__shared_mutex_base *)(*(uint64_t (**)(void *))(*(void *)__p + 16))(__p);
          uint64_t v17 = *(void *)(*(void *)v14 + 176);
          if (v17) {
            unsigned int v18 = *(_DWORD *)(v17 + 8);
          }
          else {
            unsigned int v18 = 0;
          }
          AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)buf, v16, v18);
          if (v63) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v63);
          }
          if (*(void *)buf)
          {
            std::string __p = (void *)0x676C6F6269757462;
            LODWORD(v63) = 0;
            if (AMCP::Core::Core::call_operation_function<BOOL,std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&>(*(AMCP::Address **)buf, (unsigned int *)&__p, (uint64_t)v53))std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v4, v45, v45); {
          }
            }
          if (*(void *)v71) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v71);
          }
          v14 += 16;
        }
        (*(void (**)(uint64_t *__return_ptr, void *))(*v6 + 16))(&v48, v6);
        (*(void (**)(_DWORD **__return_ptr, void *))(*v6 + 48))(&v46, v6);
        int64_t v51 = 0;
        uint64_t v52 = 0;
        int v50 = &v51;
        std::runtime_error v19 = v46;
        uint64_t v44 = v47;
        if (v46 != v47) {
          break;
        }
LABEL_68:
        if (v19)
        {
          uint64_t v47 = v19;
          operator delete(v19);
        }
        if (v49) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v49);
        }
        uint64_t v4 = v43;
        if (v52) {
          std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(v43, v50, &v51);
        }
        unsigned int v34 = AMCP::Core::Core::get_simple_required_property<1650682995u>(v42);
        if (AMCP::is_base_of((AMCP *)0x61616767, v34)) {
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v43, v41, v41);
        }
        std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v51);
        *(void *)std::string buf = v53;
        std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        uint64_t v35 = (void *)v13[1];
        if (v35)
        {
          do
          {
            uint64_t v36 = (void **)v35;
            uint64_t v35 = (void *)*v35;
          }
          while (v35);
        }
        else
        {
          do
          {
            uint64_t v36 = (void **)v13[2];
            BOOL v37 = *v36 == v13;
            long long v13 = v36;
          }
          while (!v37);
        }
        long long v13 = v36;
        if (v36 == v58) {
          goto LABEL_82;
        }
      }
      while (1)
      {
        long long v20 = (std::__shared_mutex_base *)(*(uint64_t (**)(uint64_t))(*(void *)v48 + 16))(v48);
        AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v60, v20, *v19);
        uint64_t v21 = v60;
        if (v60)
        {
          if (AMCP::Core::Core::get_simple_required_property<1650682995u>(v60) == 1633773415) {
            break;
          }
        }
LABEL_64:
        if (v61) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v61);
        }
        if (++v19 == v44)
        {
          std::runtime_error v19 = v46;
          goto LABEL_68;
        }
      }
      uint64_t v65 = 0x676C6F6267727570;
      int v66 = 0;
      has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::has_property(v21, (const AMCP::Address *)&v65);
      if (!has_property) {
        goto LABEL_86;
      }
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&__p, (int8x8_t *)v21, (unsigned int *)&v65);
      uint64_t v23 = __p;
      if (__p)
      {
        unint64_t v24 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::ArrayRef ()(void)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v23, v24))
        {
          AMCP::Core::Operation::call_function<applesauce::CF::ArrayRef>((uint64_t)buf, v23);
          int v25 = 0;
          mach_port_t v67 = *(AMCP::Address **)buf;
          char v68 = 1;
LABEL_39:
          has_property = (AMCP::Log::Scope_Registry *)v63;
          if (v63) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v63);
          }
          if (v25)
          {
LABEL_86:
            LOBYTE(v67) = 0;
            char v68 = 0;
LABEL_87:
            AMCP::Log::Scope_Registry::get(has_property);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            unint64_t v38 = **(NSObject ***)buf;
            if (*(void *)v71) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v71);
            }
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            {
              unint64_t v39 = pthread_self();
              mach_port_t v40 = pthread_mach_thread_np(v39);
              char v64 = 4;
              strcpy((char *)&__p, "grup");
              *(_DWORD *)std::string buf = 67110658;
              *(_DWORD *)&uint8_t buf[4] = v40;
              *(_WORD *)uint64_t v71 = 2080;
              *(void *)&v71[2] = "Core.h";
              __int16 v72 = 1024;
              int v73 = 391;
              *(_WORD *)uint64_t v74 = 2080;
              *(void *)&v74[2] = "optional_value.operator BOOL() == true";
              *(_WORD *)&v74[10] = 2080;
              *(void *)&v74[12] = &__p;
              __int16 v75 = 1024;
              int v76 = 1735159650;
              __int16 v77 = 1024;
              int v78 = 0;
              _os_log_error_impl(&dword_1BAA78000, v38, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
              if (v64 < 0) {
                operator delete(__p);
              }
            }
            abort();
          }
          if (!v68) {
            goto LABEL_87;
          }
          CFArrayRef v27 = v67;
          if (v67)
          {
            CFRetain(v67);
            CFArrayRef v59 = v27;
            std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v67);
            CFIndex Count = CFArrayGetCount(v27);
            CFIndex v29 = CFArrayGetCount(v27);
            if (Count)
            {
              CFIndex v30 = v29;
              for (unint64_t i = 0; i != Count; ++i)
              {
                if (v30 == i) {
                  break;
                }
                applesauce::CF::details::at_to<applesauce::CF::TypeRef>(&v67, v27, i);
                applesauce::CF::TypeRef::operator applesauce::CF::StringRef((applesauce::CF::StringRef *)&v65, (CFTypeRef *)&v67);
                unint64_t v32 = (std::__shared_mutex_base *)(*(uint64_t (**)(uint64_t))(*(void *)v48 + 16))(v48);
                CFTypeRef v33 = (CFTypeRef)v65;
                if (v65)
                {
                  CFRetain((CFTypeRef)v65);
                  *(void *)uint64_t v74 = 0;
                  *(void *)std::string buf = &unk_1F14663F8;
                  CFRetain(v33);
                }
                else
                {
                  *(void *)std::string buf = &unk_1F14663F8;
                }
                *(void *)uint64_t v71 = v33;
                *(void *)uint64_t v74 = buf;
                AMCP::Core::Broker::fetch_first_core_if (&__p, v32, (uint64_t)buf);
                std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](buf);
                if (v33) {
                  CFRelease(v33);
                }
                if (__p && *(_DWORD *)__p == v45) {
                  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v50, *v19, *v19);
                }
                if (v63) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v63);
                }
                if (v65) {
                  CFRelease((CFTypeRef)v65);
                }
                if (v67) {
                  CFRelease(v67);
                }
              }
            }
            CFRelease(v27);
          }
          else
          {
            CFArrayRef v59 = 0;
            std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v67);
          }
          goto LABEL_64;
        }
        unint64_t v26 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v23, v26))
        {
          AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)buf, v23);
          AMCP::Thing::convert_to<applesauce::CF::ArrayRef>(&v69, (uint64_t)buf);
          mach_port_t v67 = v69;
          char v68 = 1;
          if (*(void *)&v74[8]) {
            (*(void (**)(void, uint8_t *, void, void))&v74[8])(0, buf, 0, 0);
          }
          int v25 = 0;
          goto LABEL_39;
        }
      }
      int v25 = 1;
      goto LABEL_39;
    }
LABEL_82:
    *(void *)std::string buf = v54;
    std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v58[0]);
}

void sub_1BAEACD0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,void *a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a2)
  {
    if (a32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a32);
    }
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*a9);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a34);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *AMCP::System::All_Control_Value_Observer::All_Control_Value_Observer(void *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6 = **a2;
  uint64_t v5 = (std::__shared_weak_count *)(*a2)[1];
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *a1 = v6;
    a1[1] = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  else
  {
    *a1 = v6;
    a1[1] = 0;
  }
  a1[2] = a3;
  return a1;
}

void AMCP::System::All_Control_Value_Observer::~All_Control_Value_Observer(std::__shared_weak_count **this)
{
  AMCP::System::All_Control_Value_Observer::reset((AMCP::System::All_Control_Value_Observer *)this);
  uint64_t v2 = this[1];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void AMCP::System::All_Control_Value_Observer::reset(AMCP::System::All_Control_Value_Observer *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v2 && (uint64_t v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    uint64_t v4 = v3;
    if (*(void *)this)
    {
      unint64_t v5 = *((void *)this + 2);
      if (v5) {
        AMCP::Core::Conductor::destroy_control_value_observer(*(AMCP::Core::Conductor **)(*(void *)this + 32), v5);
      }
    }
    *((void *)this + 2) = 0;
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

void AMCP::System::create_all_control_value_observer(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = (std::__shared_weak_count *)a1[3];
  if (!v5 || (v5 = std::__shared_weak_count::lock(v5), (unint64_t v7 = v5) == 0) || !a1[2])
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v10 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)CFArrayRef v27 = 2080;
      *(void *)&uint64_t v27[2] = "System.cpp";
      __int16 v28 = 1024;
      int v29 = 295;
      __int16 v30 = 2080;
      *(void *)unint64_t v31 = "!core_ptr";
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v18, "No underlying object");
    std::runtime_error::runtime_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    long long v20 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&v31[6] = "System::All_Control_Value_Observer AMCP::System::create_all_control_value_observer(const All_Co"
                         "ntrol_Value_Observer_Proc &)";
    unint64_t v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    int v33 = 295;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    uint64_t v15 = &unk_1F148AA90;
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  BOOL v8 = (uint64_t **)a1[4];
  unint64_t v9 = AMCP::Observer::Map<std::function<void ()>,unsigned int,true,std::less<unsigned int>>::register_observer(*(void *)(**v8 + 32) + 2432, (unsigned int *)(*(void *)(**v8 + 32) + 2640), a2);
  AMCP::System::All_Control_Value_Observer::All_Control_Value_Observer(a3, v8, v9);

  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_1BAEAD22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  _Unwind_Resume(a1);
}

void AMCP::System::update_power_state(uint64_t a1, int a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3
    || (uint64_t v3 = std::__shared_weak_count::lock(v3), (v5 = v3) == 0)
    || (uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v6 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      unint64_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "System.cpp";
      __int16 v23 = 1024;
      int v24 = 304;
      __int16 v25 = 2080;
      *(void *)unint64_t v26 = "!core_ptr";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v21);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v14, "No underlying object");
    std::runtime_error::runtime_error(&v15, &v14);
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v20 = -1;
    v15.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    long long v16 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v15);
    *(void *)&v26[6] = "void AMCP::System::update_power_state(AMCP::Power_State)";
    CFArrayRef v27 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    int v28 = 304;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v9);
    uint64_t v11 = &unk_1F148AA90;
    long long v12 = v9;
    uint64_t v13 = v10;
    long long v9 = 0uLL;
    uint64_t v10 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  strcpy(buf, "sppubolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  AMCP::Core::Core::call_operation_function<void,AMCP::Power_State>((AMCP::Address *)v3, (unsigned int *)buf, a2);

  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1BAEAD584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAEAD354);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAEAD840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BAEAD910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BAEAD998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BAEADA18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BAEADA94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BAEADB10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BAEADBB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BAEADEA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t check_posix_error(uint64_t result, int a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = *__error();
    uint64_t v4 = std::generic_category();
    MEMORY[0x1C1859250](v8, v3, v4, v2);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      unint64_t v5 = std::runtime_error::what(v8);
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v10 = v5;
      _os_log_error_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    unint64_t v7 = std::runtime_error::runtime_error(exception, v8);
    v7->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA448] + 16);
    v7[1] = v8[1];
    __cxa_throw(v7, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  return result;
}

void sub_1BAEAE03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

void sub_1BAEAE98C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,std::runtime_error a28,char a29)
{
  if (a2)
  {

    int v33 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v33);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)(v31 - 176), "com.apple.coreaudio", "AMCP");
    uint64_t v34 = **(NSObject ***)(v31 - 176);
    AMCP::Log::Scope::get_os_log_t(v34);
    objc_claimAutoreleasedReturnValue();
    uint64_t v35 = *(std::__shared_weak_count **)(v31 - 168);
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      uint64_t v36 = pthread_self();
      mach_port_t v37 = pthread_mach_thread_np(v36);
      uint64_t v38 = v31 - 176;
      *(_DWORD *)uint64_t v38 = 67109634;
      *(_DWORD *)(v38 + 4) = v37;
      *(_WORD *)(v38 + 8) = 2080;
      *(void *)(v38 + 10) = "Core_Audio_Driver.mm";
      *(_WORD *)(v38 + 18) = 1024;
      *(_DWORD *)(v38 + 20) = 855;
      _os_log_error_impl(&dword_1BAA78000, v34, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d SetPropertyData: caught exception", (uint8_t *)(v31 - 176), 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1BAEAE514);
  }
  _Unwind_Resume(exception_object);
}

void unpack_data_from_qualifier(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v11 = a3;
  if (a2)
  {
    if (a2 >= 0x13)
    {
      LODWORD(v5) = 4;
    }
    else
    {
      uint64_t v5 = qword_1BB032340[a2] | qword_1BB0322A8[a2];
      if ((v5 & 0xFF00000000) == 0) {
        LODWORD(v5) = [v11 length];
      }
    }
    unsigned int v25 = v5;
    id v6 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA50]), "initWithLength:", objc_msgSend(v11, "length"));
    unint64_t v7 = (AMCP::Log::Scope_Registry *)AMCP::HAL::unpack_property_data(v11, a2, &v25, (void *)[v6 mutableBytes]);
    if (v7)
    {
      AMCP::Log::Scope_Registry::get(v7);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      mach_port_t v8 = **(NSObject ***)buf;
      AMCP::Log::Scope::get_os_log_t(**(id **)buf);
      objc_claimAutoreleasedReturnValue();
      if (*(void *)v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        long long v9 = pthread_self();
        mach_port_t v10 = pthread_mach_thread_np(v9);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v10;
        *(_WORD *)CFArrayRef v27 = 2080;
        *(void *)&uint64_t v27[2] = "Core_Audio_Driver.mm";
        __int16 v28 = 1024;
        int v29 = 676;
        __int16 v30 = 2080;
        *(void *)uint64_t v31 = "qualifier_error != kAudioHardwareNoError";
        _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to unpack qualifier", buf, 0x22u);
      }

      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v17, "Failed to unpack qualifier");
      std::runtime_error::runtime_error(&v18, &v17);
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      int v23 = -1;
      v18.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      uint64_t v19 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v18);
      *(void *)&v31[6] = "std::tuple<NSData *, UInt32, AMCP::HAL::HAL_Property_Type_Code> unpack_data_from_qualifier(AM"
                           "CP::HAL::HAL_Property_Type_Code, NSData *__strong)";
      unint64_t v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Driver/Core_Audio_Driver.mm";
      int v33 = 676;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
      std::runtime_error v14 = &unk_1F148AA90;
      long long v15 = v12;
      uint64_t v16 = v13;
      long long v12 = 0uLL;
      uint64_t v13 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    *(void *)a1 = v6;
    *(_DWORD *)(a1 + 8) = v25;
    *(_DWORD *)(a1 + 12) = a2;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
}

void sub_1BAEAEF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, std::runtime_error a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_1BAEAF394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id *buf,long long a22)
{
  if (a2)
  {
    uint64_t v22 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v22);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    int v23 = *buf;
    AMCP::Log::Scope::get_os_log_t(*buf);
    objc_claimAutoreleasedReturnValue();
    if ((void)a22) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a22);
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      char v24 = pthread_self();
      mach_port_t v25 = pthread_mach_thread_np(v24);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v25;
      LOWORD(a22) = 2080;
      *(void *)((char *)&a22 + 2) = "Core_Audio_Driver.mm";
      WORD5(a22) = 1024;
      HIDWORD(a22) = 821;
      _os_log_error_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d GetPropertyData: caught exception", (uint8_t *)&buf, 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1BAEAF2F4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAEAF6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *buf, long long a12)
{
  if (a2)
  {
    long long v12 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    uint64_t v13 = *buf;
    AMCP::Log::Scope::get_os_log_t(*buf);
    objc_claimAutoreleasedReturnValue();
    if ((void)a12) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a12);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      std::runtime_error v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v15;
      LOWORD(a12) = 2080;
      *(void *)((char *)&a12 + 2) = "Core_Audio_Driver.mm";
      WORD5(a12) = 1024;
      HIDWORD(a12) = 772;
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d GetPropertyDataSize: caught exception", (uint8_t *)&buf, 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1BAEAF638);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAEAF8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *buf, long long a12)
{
  if (a2)
  {
    long long v12 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    uint64_t v13 = *buf;
    AMCP::Log::Scope::get_os_log_t(*buf);
    objc_claimAutoreleasedReturnValue();
    if ((void)a12) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a12);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      std::runtime_error v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v15;
      LOWORD(a12) = 2080;
      *(void *)((char *)&a12 + 2) = "Core_Audio_Driver.mm";
      WORD5(a12) = 1024;
      HIDWORD(a12) = 746;
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d GetPropertyDataSize: caught exception", (uint8_t *)&buf, 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1BAEAF85CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAEAFAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1BAEAFB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, long long a10)
{
  if (a2)
  {
    mach_port_t v10 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a9, "com.apple.coreaudio", "AMCP");
    id v11 = *a9;
    AMCP::Log::Scope::get_os_log_t(*a9);
    objc_claimAutoreleasedReturnValue();
    if ((void)a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a10);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      long long v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      LODWORD(a9) = 67109634;
      HIDWORD(a9) = v13;
      LOWORD(a10) = 2080;
      *(void *)((char *)&a10 + 2) = "Core_Audio_Driver.mm";
      WORD5(a10) = 1024;
      HIDWORD(a10) = 703;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HasProperty: caught exception", (uint8_t *)&a9, 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1BAEAFB54);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAEAFDD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, long long a10, uint64_t a11, int a12, int a13)
{
  if (a2)
  {
    os_unfair_lock_unlock(v15);
    std::runtime_error v17 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v17);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a9, "com.apple.coreaudio", "AMCP");
    std::runtime_error v18 = *a9;
    AMCP::Log::Scope::get_os_log_t(*a9);
    objc_claimAutoreleasedReturnValue();
    if ((void)a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a10);
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = pthread_self();
      mach_port_t v20 = pthread_mach_thread_np(v19);
      LODWORD(a9) = 67110146;
      HIDWORD(a9) = v20;
      LOWORD(a10) = 2080;
      *(void *)((char *)&a10 + 2) = "Core_Audio_Driver.mm";
      WORD5(a10) = 1024;
      HIDWORD(a10) = 651;
      LOWORD(a11) = 1024;
      *(_DWORD *)((char *)&a11 + 2) = v14;
      HIWORD(a11) = 1024;
      a12 = v13;
      _os_log_error_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught expection while trying to stop io receiver for device id %u, client id %u", (uint8_t *)&a9, 0x24u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1BAEAFD7CLL);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Receiver>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Receiver>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Receiver>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Receiver>>>>::__erase_unique<AMCP::Portal::IPC::io_messenger_id_t>(void *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>(a1, a2, a3);
  if (v4)
  {
    int8x8_t v5 = (int8x8_t)a1[1];
    unint64_t v6 = v4[1];
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v5) {
        v6 %= *(void *)&v5;
      }
    }
    else
    {
      v6 &= *(void *)&v5 - 1;
    }
    mach_port_t v8 = *(uint64_t **)(*a1 + 8 * v6);
    do
    {
      long long v9 = v8;
      mach_port_t v8 = (uint64_t *)*v8;
    }
    while (v8 != v4);
    if (v9 == a1 + 2) {
      goto LABEL_20;
    }
    unint64_t v10 = v9[1];
    if (v7.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v5) {
        v10 %= *(void *)&v5;
      }
    }
    else
    {
      v10 &= *(void *)&v5 - 1;
    }
    if (v10 != v6)
    {
LABEL_20:
      if (!*v4) {
        goto LABEL_21;
      }
      unint64_t v11 = *(void *)(*v4 + 8);
      if (v7.u32[0] > 1uLL)
      {
        if (v11 >= *(void *)&v5) {
          v11 %= *(void *)&v5;
        }
      }
      else
      {
        v11 &= *(void *)&v5 - 1;
      }
      if (v11 != v6) {
LABEL_21:
      }
        *(void *)(*a1 + 8 * v6) = 0;
    }
    uint64_t v12 = *v4;
    if (*v4)
    {
      unint64_t v13 = *(void *)(v12 + 8);
      if (v7.u32[0] > 1uLL)
      {
        if (v13 >= *(void *)&v5) {
          v13 %= *(void *)&v5;
        }
      }
      else
      {
        v13 &= *(void *)&v5 - 1;
      }
      if (v13 != v6)
      {
        *(void *)(*a1 + 8 * v13) = v9;
        uint64_t v12 = *v4;
      }
    }
    uint64_t *v9 = v12;
    uint64_t *v4 = 0;
    --a1[3];
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>::operator()[abi:ne180100](1, v4);
  }
}

void sub_1BAEB0174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, long long a10, uint64_t a11, int a12, int a13)
{
  if (a2)
  {
    mach_port_t v15 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v15);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a9, "com.apple.coreaudio", "AMCP");
    uint64_t v16 = *a9;
    AMCP::Log::Scope::get_os_log_t(*a9);
    objc_claimAutoreleasedReturnValue();
    if ((void)a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a10);
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      std::runtime_error v17 = pthread_self();
      mach_port_t v18 = pthread_mach_thread_np(v17);
      LODWORD(a9) = 67110146;
      HIDWORD(a9) = v18;
      LOWORD(a10) = 2080;
      *(void *)((char *)&a10 + 2) = "Core_Audio_Driver.mm";
      WORD5(a10) = 1024;
      HIDWORD(a10) = 630;
      LOWORD(a11) = 1024;
      *(_DWORD *)((char *)&a11 + 2) = v14;
      HIWORD(a11) = 1024;
      a12 = v13;
      _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught expection while trying to start io receiver for device id %u, client id %u", (uint8_t *)&a9, 0x24u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1BAEB011CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAEB0360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1BAEB0420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, id *buf, long long a17, long long a18)
{
  if (a2)
  {
    mach_port_t v18 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v18);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    uint64_t v19 = *buf;
    AMCP::Log::Scope::get_os_log_t(*buf);
    objc_claimAutoreleasedReturnValue();
    if ((void)a17) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a17);
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v20 = pthread_self();
      mach_port_t v21 = pthread_mach_thread_np(v20);
      a15 = 4;
      strcpy((char *)&__p, "....");
      LODWORD(buf) = 67109890;
      HIDWORD(buf) = v21;
      LOWORD(a17) = 2080;
      *(void *)((char *)&a17 + 2) = "Core_Audio_Driver.mm";
      WORD5(a17) = 1024;
      HIDWORD(a17) = 586;
      LOWORD(a18) = 2080;
      *(void *)((char *)&a18 + 2) = &__p;
      _os_log_error_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d start_io result failed: %s", (uint8_t *)&buf, 0x22u);
      if (a15 < 0) {
        operator delete(__p);
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x1BAEB03DCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAEB0680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BAEB07E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BAEB1060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, std::runtime_error a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,void *a34,void *a35,void *a36)
{
  mach_port_t v40 = *(void **)(v39 - 184);
  *(void *)(v39 - 184) = 0;

  os_unfair_lock_unlock(v36);
  _Unwind_Resume(a1);
}

unint64_t get_buffer_key(const dict *a1)
{
  int v13 = a1;
  int v14 = "buffer shared memory";
  applesauce::xpc::dict::object_proxy::operator applesauce::xpc::object(&v15, (uint64_t)&v13);
  int v13 = a1;
  int v14 = "buffer device id";
  applesauce::xpc::dict::object_proxy::operator applesauce::xpc::object(&v12, (uint64_t)&v13);
  unsigned int v2 = applesauce::xpc::dyn_cast_or_default((applesauce::xpc *)&v12, 0);
  int v13 = a1;
  int v14 = "buffer client id";
  applesauce::xpc::dict::object_proxy::operator applesauce::xpc::object(&v11, (uint64_t)&v13);
  uint64_t v3 = applesauce::xpc::dyn_cast_or_default((applesauce::xpc *)&v11, 0);
  int v13 = a1;
  int v14 = "buffer stream id";
  applesauce::xpc::dict::object_proxy::operator applesauce::xpc::object(&v10, (uint64_t)&v13);
  applesauce::xpc::dyn_cast_or_default((applesauce::xpc *)&v10, 0);
  int v13 = a1;
  int v14 = "buffer type";
  applesauce::xpc::dict::object_proxy::operator applesauce::xpc::object(&v9, (uint64_t)&v13);
  applesauce::xpc::dyn_cast_or_default((applesauce::xpc *)&v9, 0);
  xpc_object_t v4 = v9;
  xpc_object_t v9 = 0;

  xpc_object_t v5 = v10;
  xpc_object_t v10 = 0;

  xpc_object_t v6 = v11;
  xpc_object_t v11 = 0;

  xpc_object_t v7 = v12;
  xpc_object_t v12 = 0;

  return v2 | (unint64_t)(v3 << 32);
}

void sub_1BAEB1340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1BAEB13C8()
{
}

void std::vector<std::pair<AMCP::Portal::IPC::shared_buffer_info_t,applesauce::xpc::dict>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 24)
  {
    xpc_object_t v5 = *(void **)(i - 8);
    *(void *)(i - 8) = 0;
  }
  *(void *)(a1 + 8) = a2;
}

void sub_1BAEB1888(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<AMCP::Portal::IPC::shared_buffer_info_t,applesauce::xpc::dict>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(id *)(a2 + 16);
  xpc_object_t v4 = xpc_null_create();
  xpc_object_t v5 = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v4;

  return a1;
}

void sub_1BAEB1A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, long long a10)
{
  if (a2)
  {
    if ((void)a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a10);
    }
    xpc_object_t v11 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a9, "com.apple.coreaudio", "AMCP");
    xpc_object_t v12 = *a9;
    AMCP::Log::Scope::get_os_log_t(*a9);
    objc_claimAutoreleasedReturnValue();
    if ((void)a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a10);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      LODWORD(a9) = 67109634;
      HIDWORD(a9) = v14;
      LOWORD(a10) = 2080;
      *(void *)((char *)&a10 + 2) = "Core_Audio_Driver.mm";
      WORD5(a10) = 1024;
      HIDWORD(a10) = 459;
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d DestroyDevice: Caught exception", (uint8_t *)&a9, 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1BAEB19C0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAEB1BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, long long a10)
{
  if (a2)
  {
    xpc_object_t v10 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a9, "com.apple.coreaudio", "AMCP");
    xpc_object_t v11 = *a9;
    AMCP::Log::Scope::get_os_log_t(*a9);
    objc_claimAutoreleasedReturnValue();
    if ((void)a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a10);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      xpc_object_t v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      LODWORD(a9) = 67109634;
      HIDWORD(a9) = v13;
      LOWORD(a10) = 2080;
      *(void *)((char *)&a10 + 2) = "Core_Audio_Driver.mm";
      WORD5(a10) = 1024;
      HIDWORD(a10) = 442;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d DestroyDevice: Caught exception", (uint8_t *)&a9, 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1BAEB1B88);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAEB1DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *buf, long long a12)
{
  if (a2)
  {
    xpc_object_t v12 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v13 = *buf;
    AMCP::Log::Scope::get_os_log_t(*buf);
    objc_claimAutoreleasedReturnValue();
    if ((void)a12) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a12);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v15;
      LOWORD(a12) = 2080;
      *(void *)((char *)&a12 + 2) = "Core_Audio_Driver.mm";
      WORD5(a12) = 1024;
      HIDWORD(a12) = 424;
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d CreateDevice: Caught exception", (uint8_t *)&buf, 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1BAEB1D70);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAEB1FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, long long a10)
{
  if (a2)
  {
    xpc_object_t v10 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a9, "com.apple.coreaudio", "AMCP");
    xpc_object_t v11 = *a9;
    AMCP::Log::Scope::get_os_log_t(*a9);
    objc_claimAutoreleasedReturnValue();
    if ((void)a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a10);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      xpc_object_t v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      LODWORD(a9) = 67109634;
      HIDWORD(a9) = v13;
      LOWORD(a10) = 2080;
      *(void *)((char *)&a10 + 2) = "Core_Audio_Driver.mm";
      WORD5(a10) = 1024;
      HIDWORD(a10) = 395;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d RemoveDeviceClient: Caught exception", (uint8_t *)&a9, 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1BAEB1F60);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAEB2194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, long long a10)
{
  if (a2)
  {
    xpc_object_t v10 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a9, "com.apple.coreaudio", "AMCP");
    xpc_object_t v11 = *a9;
    AMCP::Log::Scope::get_os_log_t(*a9);
    objc_claimAutoreleasedReturnValue();
    if ((void)a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a10);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      xpc_object_t v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      LODWORD(a9) = 67109634;
      HIDWORD(a9) = v13;
      LOWORD(a10) = 2080;
      *(void *)((char *)&a10 + 2) = "Core_Audio_Driver.mm";
      WORD5(a10) = 1024;
      HIDWORD(a10) = 366;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d AddDeviceClient: Caught exception", (uint8_t *)&a9, 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1BAEB2144);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAEB245C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
  os_unfair_lock_unlock(v10);
  _Unwind_Resume(a1);
}

void sub_1BAEB2520(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1BAEB3FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, os_unfair_lock_t lock, void *a20,long long a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::runtime_error a26,uint64_t a27,uint64_t a28,std::runtime_error a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,std::runtime_error a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50)
{
  if (a2)
  {

    uint64_t v53 = *(std::__shared_weak_count **)(v51 + 184);
    if (v53) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v53);
    }
    std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](a20);
    std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>>>::~__hash_table(a16);
    char v55 = *(std::__shared_weak_count **)(v51 + 64);
    if (v55) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v55);
    }
    uint64_t v56 = *(std::__shared_weak_count **)(v51 + 48);
    if (v56) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v56);
    }
    caulk::mach::details::release_os_object(*(caulk::mach::details **)(v51 + 32), v54);

    std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v51);
    operator delete(v57);

    os_unfair_lock_unlock(lock);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAEB337CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<AMCP::Portal::IPC::IO_Receiver>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::Portal::IPC::IO_Receiver>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147FFC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Portal::IPC::IO_Receiver>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147FFC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1BAEB4778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BAEB48F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *buf, long long a12)
{
  if (a2)
  {
    os_unfair_lock_unlock(v12);
    if ((void)a12) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a12);
    }
    mach_port_t v14 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v15 = *buf;
    AMCP::Log::Scope::get_os_log_t(*buf);
    objc_claimAutoreleasedReturnValue();
    if ((void)a12) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a12);
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = pthread_self();
      mach_port_t v17 = pthread_mach_thread_np(v16);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v17;
      LOWORD(a12) = 2080;
      *(void *)((char *)&a12 + 2) = "Core_Audio_Driver.mm";
      WORD5(a12) = 1024;
      HIDWORD(a12) = 254;
      _os_log_error_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d AbortDeviceConfigurationChange: Caught exception", (uint8_t *)&buf, 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1BAEB4844);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_32c89_ZTSKZ75__Core_Audio_Driver_abort_device_configuration_change_action_change_reply__E4__10(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 32);
}

void *__copy_helper_block_ea8_32c89_ZTSKZ75__Core_Audio_Driver_abort_device_configuration_change_action_change_reply__E4__10(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  uint64_t result = _Block_copy(*(const void **)(a2 + 64));
  *(void *)(a1 + 64) = result;
  return result;
}

void sub_1BAEB4BB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BAEB4D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *buf, long long a12)
{
  if (a2)
  {
    os_unfair_lock_unlock(v12);
    if ((void)a12) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a12);
    }
    mach_port_t v14 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v15 = *buf;
    AMCP::Log::Scope::get_os_log_t(*buf);
    objc_claimAutoreleasedReturnValue();
    if ((void)a12) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a12);
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = pthread_self();
      mach_port_t v17 = pthread_mach_thread_np(v16);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v17;
      LOWORD(a12) = 2080;
      *(void *)((char *)&a12 + 2) = "Core_Audio_Driver.mm";
      WORD5(a12) = 1024;
      HIDWORD(a12) = 207;
      _os_log_error_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d PerformDeviceConfigurationChange: Caught exception", (uint8_t *)&buf, 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1BAEB4C80);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_32c90_ZTSKZ77__Core_Audio_Driver_perform_device_configuration_change_action_change_reply__E3__9(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 32);
}

void *__copy_helper_block_ea8_32c90_ZTSKZ77__Core_Audio_Driver_perform_device_configuration_change_action_change_reply__E3__9(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  uint64_t result = _Block_copy(*(const void **)(a2 + 64));
  *(void *)(a1 + 64) = result;
  return result;
}

void sub_1BAEB4FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, long long a10)
{
  if (a2)
  {

    xpc_object_t v12 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a9, "com.apple.coreaudio", "AMCP");
    mach_port_t v13 = *a9;
    AMCP::Log::Scope::get_os_log_t(*a9);
    objc_claimAutoreleasedReturnValue();
    if ((void)a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a10);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      LODWORD(a9) = 67109634;
      HIDWORD(a9) = v15;
      LOWORD(a10) = 2080;
      *(void *)((char *)&a10 + 2) = "Core_Audio_Driver.mm";
      WORD5(a10) = 1024;
      HIDWORD(a10) = 161;
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Initialize: Caught exception", (uint8_t *)&a9, 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1BAEB4FA8);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAEB5484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::__shared_weak_count *a30)
{
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  os_unfair_lock_unlock(v30);
  _Unwind_Resume(a1);
}

void sub_1BAEB5614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BAEB56D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1BAEB577C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)Core_Audio_Driver;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1BAEB5888(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BAEB5B58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<std::pair<AMCP::Portal::IPC::shared_buffer_info_t,applesauce::xpc::dict>>>::__on_zero_shared(uint64_t a1)
{
  unsigned int v2 = (void **)(a1 + 24);
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    std::vector<std::pair<AMCP::Portal::IPC::shared_buffer_info_t,applesauce::xpc::dict>>::__base_destruct_at_end[abi:ne180100](a1 + 24, v1);
    uint64_t v3 = *v2;
    operator delete(v3);
  }
}

void std::__shared_ptr_emplace<std::vector<std::pair<AMCP::Portal::IPC::shared_buffer_info_t,applesauce::xpc::dict>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147FF28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<std::vector<std::pair<AMCP::Portal::IPC::shared_buffer_info_t,applesauce::xpc::dict>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147FF28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::unordered_map<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Receiver>>>::__on_zero_shared(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 40);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      long long v4 = (std::__shared_weak_count *)v2[4];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      operator delete(v2);
      unsigned int v2 = v3;
    }
    while (v3);
  }
  xpc_object_t v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v5)
  {
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<std::unordered_map<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Receiver>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147FED8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<std::unordered_map<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Receiver>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147FED8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::map<unsigned long long,void *>>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<std::map<unsigned long long,void *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147FE88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<std::map<unsigned long long,void *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147FE88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void HALS_Control::GetRangeChangedAddresses(HALS_Control *this, CAPropertyAddressList *a2, const AudioObjectPropertyAddress *a3)
{
  int v3 = *((_DWORD *)this + 5);
  int v4 = *((_DWORD *)this + 6);
  if (v3 <= 1936028006)
  {
    BOOL v5 = v3 == 1818588780;
    int v6 = 1886544237;
  }
  else
  {
    BOOL v5 = v3 == 1936028007 || v3 == 1937072758;
    int v6 = 1986817381;
  }
  if (v5 || v3 == v6) {
    goto LABEL_12;
  }
  if (v3 == v4) {
    goto LABEL_16;
  }
  if (v4 <= 1936028006)
  {
    if (v4 == 1818588780)
    {
LABEL_12:
      uint64_t v8 = 0x676C6F626C636472;
LABEL_13:
      *(void *)&v12.AudioObjectPropertySelector mSelector = v8;
      v12.uint64_t mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(a2, &v12, a3);
      return;
    }
    int v10 = 1886544237;
  }
  else
  {
    if (v4 == 1936028007 || v4 == 1986817381) {
      goto LABEL_12;
    }
    int v10 = 1937072758;
  }
  if (v4 == v10) {
    goto LABEL_12;
  }
LABEL_16:
  if (v3 > 1751740517)
  {
    if (v3 == 1751740518 || v3 == 1852601964) {
      goto LABEL_28;
    }
    int v9 = 1936483188;
  }
  else
  {
    if (v3 == 1668047723 || v3 == 1684370292) {
      goto LABEL_28;
    }
    int v9 = 1685287523;
  }
  if (v3 == v9) {
    goto LABEL_28;
  }
  if (v3 != v4)
  {
    if (v4 > 1751740517)
    {
      if (v4 == 1751740518 || v4 == 1936483188) {
        goto LABEL_28;
      }
      int v11 = 1852601964;
    }
    else
    {
      if (v4 == 1668047723 || v4 == 1684370292) {
        goto LABEL_28;
      }
      int v11 = 1685287523;
    }
    if (v4 == v11)
    {
LABEL_28:
      uint64_t v8 = 0x676C6F6273636169;
      goto LABEL_13;
    }
    if (v3 != v4 && v3 != 1936744814 && v4 != 1936744814)
    {
      if (v3 == 1651273579 || v3 == 1936028002 || v4 == 1651273579 || v4 == 1936028002) {
        goto LABEL_38;
      }
      return;
    }
LABEL_55:
    uint64_t v8 = 0x676C6F6273706363;
    goto LABEL_13;
  }
  if (v3 == 1936744814 || v3 != v4) {
    goto LABEL_55;
  }
  if (v3 == 1936028002 || v3 == 1651273579)
  {
LABEL_38:
    uint64_t v8 = 0x676C6F62626C6B64;
    goto LABEL_13;
  }
}

void HALS_Control::GetValueChangedAddresses(HALS_Control *this, CAPropertyAddressList *a2, const AudioObjectPropertyAddress *a3)
{
  int v4 = *((_DWORD *)this + 5);
  BOOL v5 = (HALB_Info *)*((unsigned int *)this + 6);
  if (v4 <= 1936028006)
  {
    BOOL v6 = v4 == 1818588780;
    int v7 = 1886544237;
  }
  else
  {
    BOOL v6 = v4 == 1936028007 || v4 == 1937072758;
    int v7 = 1986817381;
  }
  if (v6 || v4 == v7) {
    goto LABEL_12;
  }
  if (v4 == v5)
  {
    if (!HALB_Info::IsSubClass((HALB_Info *)*((unsigned int *)this + 5), 1953458028)) {
      goto LABEL_17;
    }
    goto LABEL_31;
  }
  if ((int)v5 <= 1936028006)
  {
    if (v5 == 1818588780)
    {
LABEL_12:
      *(void *)&v15.AudioObjectPropertySelector mSelector = 0x676C6F626C637376;
      v15.uint64_t mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(a2, &v15, a3);
      uint64_t v10 = 0x676C6F626C636476;
LABEL_13:
      *(void *)&v15.AudioObjectPropertySelector mSelector = v10;
      v15.uint64_t mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(a2, &v15, v9);
      return;
    }
    int v12 = 1886544237;
  }
  else
  {
    if (v5 == 1936028007 || v5 == 1986817381) {
      goto LABEL_12;
    }
    int v12 = 1937072758;
  }
  if (v5 == v12) {
    goto LABEL_12;
  }
  BOOL IsSubClass = HALB_Info::IsSubClass((HALB_Info *)*((unsigned int *)this + 5), 1953458028);
  if (v4 == v5 || IsSubClass || HALB_Info::IsSubClass(v5, 1953458028))
  {
LABEL_31:
    uint64_t v10 = 0x676C6F626263766CLL;
    goto LABEL_13;
  }
LABEL_17:
  if (v4 > 1751740517)
  {
    if (v4 == 1751740518 || v4 == 1852601964) {
      goto LABEL_36;
    }
    int v11 = 1936483188;
  }
  else
  {
    if (v4 == 1668047723 || v4 == 1684370292) {
      goto LABEL_36;
    }
    int v11 = 1685287523;
  }
  if (v4 == v11) {
    goto LABEL_36;
  }
  if (v4 != v5)
  {
    if ((int)v5 > 1751740517)
    {
      if (v5 == 1751740518 || v5 == 1936483188) {
        goto LABEL_36;
      }
      int v14 = 1852601964;
    }
    else
    {
      if (v5 == 1668047723 || v5 == 1684370292) {
        goto LABEL_36;
      }
      int v14 = 1685287523;
    }
    if (v5 == v14)
    {
LABEL_36:
      uint64_t v10 = 0x676C6F6273636369;
      goto LABEL_13;
    }
    if (v4 != v5 && v4 != 1936744814 && v5 != 1936744814)
    {
      if (v4 == 1651273579 || v4 == 1936028002 || v5 == 1651273579 || v5 == 1936028002) {
        goto LABEL_42;
      }
      return;
    }
LABEL_59:
    uint64_t v10 = 0x676C6F6273706376;
    goto LABEL_13;
  }
  if (v4 == 1936744814 || v4 != v5) {
    goto LABEL_59;
  }
  if (v4 == 1936028002 || v4 == 1651273579)
  {
LABEL_42:
    uint64_t v10 = 0x676C6F62626C6B62;
    goto LABEL_13;
  }
}

uint64_t HALS_Control::AllowClientAccessToProperty()
{
  return 1;
}

uint64_t HALS_Control::SetPropertyData(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v8 = *a3;
  if (*a3 <= 1818457189)
  {
    if (v8 <= 1818453109)
    {
      if (v8 != 1650685548)
      {
        if (v8 != 1651272546) {
LABEL_33:
        }
          HALS_Object::SetPropertyData(result, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        return result;
      }
      if (a4 > 3) {
        return result;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v12 = 136315394;
        mach_port_t v13 = "HALS_Control.cpp";
        __int16 v14 = 1024;
        int v15 = 617;
        int v9 = MEMORY[0x1E4F14500];
        uint64_t v10 = "%25s:%-5d  HALS_Control::SetPropertyData: bad property data size for kAudioBooleanControlPropertyValue";
        goto LABEL_36;
      }
LABEL_37:
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      exception[2] = 561211770;
    }
    if (v8 == 1818453110)
    {
      if (a4 > 3) {
        return result;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v12 = 136315394;
        mach_port_t v13 = "HALS_Control.cpp";
        __int16 v14 = 1024;
        int v15 = 603;
        int v9 = MEMORY[0x1E4F14500];
        uint64_t v10 = "%25s:%-5d  HALS_Control::SetPropertyData: bad property data size for kAudioLevelControlPropertyDecibelValue";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (v8 != 1818456950) {
      goto LABEL_33;
    }
    if (a4 > 3) {
      return result;
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_37;
    }
    int v12 = 136315394;
    mach_port_t v13 = "HALS_Control.cpp";
    __int16 v14 = 1024;
    int v15 = 596;
    int v9 = MEMORY[0x1E4F14500];
    uint64_t v10 = "%25s:%-5d  HALS_Control::SetPropertyData: bad property data size for kAudioLevelControlPropertyScalarValue";
    goto LABEL_36;
  }
  if (v8 <= 1935962741)
  {
    if (v8 == 1818457190)
    {
      if (a4 > 3) {
        return result;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v12 = 136315394;
        mach_port_t v13 = "HALS_Control.cpp";
        __int16 v14 = 1024;
        int v15 = 610;
        int v9 = MEMORY[0x1E4F14500];
        uint64_t v10 = "%25s:%-5d  HALS_Control::SetPropertyData: bad property data size for kAudioLevelControlPropertyDecibelsToS"
              "calarTransferFunction";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (v8 != 1935893353) {
      goto LABEL_33;
    }
    if (a4 > 3) {
      return result;
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_37;
    }
    int v12 = 136315394;
    mach_port_t v13 = "HALS_Control.cpp";
    __int16 v14 = 1024;
    int v15 = 624;
    int v9 = MEMORY[0x1E4F14500];
    uint64_t v10 = "%25s:%-5d  HALS_Control::SetPropertyData: bad property data size for kAudioSelectorControlPropertyCurrentItem";
LABEL_36:
    _os_log_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&v12, 0x12u);
    goto LABEL_37;
  }
  if (v8 == 1936745334)
  {
    if (a4 > 3) {
      return result;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      mach_port_t v13 = "HALS_Control.cpp";
      __int16 v14 = 1024;
      int v15 = 631;
      int v9 = MEMORY[0x1E4F14500];
      uint64_t v10 = "%25s:%-5d  HALS_Control::SetPropertyData: bad property data size for kAudioStereoPanControlPropertyValue";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (v8 != 1935962742) {
    goto LABEL_33;
  }
  if (a4 <= 3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_37;
    }
    int v12 = 136315394;
    mach_port_t v13 = "HALS_Control.cpp";
    __int16 v14 = 1024;
    int v15 = 589;
    int v9 = MEMORY[0x1E4F14500];
    uint64_t v10 = "%25s:%-5d  HALS_Control::SetPropertyData: bad property data size for kAudioSliderControlPropertyValue";
    goto LABEL_36;
  }
  return result;
}

uint64_t HALS_Control::GetPropertyData(uint64_t this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, uint64_t *a6, unsigned int a7, const void *a8, HALS_Client *a9)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1818456949)
  {
    if (mSelector > 1935894893)
    {
      if (mSelector > 1935962741)
      {
        switch(mSelector)
        {
          case 1935962742:
            if (a4 <= 3)
            {
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                goto LABEL_98;
              }
              int v15 = 136315394;
              uint64_t v16 = "HALS_Control.cpp";
              __int16 v17 = 1024;
              int v18 = 424;
              uint64_t v10 = MEMORY[0x1E4F14500];
              int v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioSliderControlPropertyValue";
              goto LABEL_97;
            }
            break;
          case 1936745315:
            if (a4 <= 7)
            {
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                goto LABEL_98;
              }
              int v15 = 136315394;
              uint64_t v16 = "HALS_Control.cpp";
              __int16 v17 = 1024;
              int v18 = 551;
              uint64_t v10 = MEMORY[0x1E4F14500];
              int v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioStereoPanControlPropertyPanningChannels";
              goto LABEL_97;
            }
            goto LABEL_63;
          case 1936745334:
            if (a4 <= 3)
            {
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                goto LABEL_98;
              }
              int v15 = 136315394;
              uint64_t v16 = "HALS_Control.cpp";
              __int16 v17 = 1024;
              int v18 = 542;
              uint64_t v10 = MEMORY[0x1E4F14500];
              int v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioStereoPanControlPropertyValue";
              goto LABEL_97;
            }
            break;
          default:
            goto LABEL_80;
        }
        goto LABEL_74;
      }
      if (mSelector != 1935894894)
      {
        if (mSelector != 1935962738) {
          goto LABEL_80;
        }
        if (a4 <= 7)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_98;
          }
          int v15 = 136315394;
          uint64_t v16 = "HALS_Control.cpp";
          __int16 v17 = 1024;
          int v18 = 433;
          uint64_t v10 = MEMORY[0x1E4F14500];
          int v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioSliderControlPropertyRange";
          goto LABEL_97;
        }
LABEL_63:
        *a6 = 0;
        unsigned int v12 = 8;
LABEL_76:
        *a5 = v12;
        return this;
      }
    }
    else
    {
      if (mSelector <= 1852400498)
      {
        if (mSelector == 1818456950)
        {
          if (a4 <= 3)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_98;
            }
            int v15 = 136315394;
            uint64_t v16 = "HALS_Control.cpp";
            __int16 v17 = 1024;
            int v18 = 443;
            uint64_t v10 = MEMORY[0x1E4F14500];
            int v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioLevelControlPropertyScalarValue";
            goto LABEL_97;
          }
        }
        else
        {
          if (mSelector != 1818457190) {
            goto LABEL_80;
          }
          if (a4 <= 3)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_98;
            }
            int v15 = 136315394;
            uint64_t v16 = "HALS_Control.cpp";
            __int16 v17 = 1024;
            int v18 = 489;
            uint64_t v10 = MEMORY[0x1E4F14500];
            int v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioLevelControlPropertyDecibel"
                  "sToScalarTransferFunction";
            goto LABEL_97;
          }
        }
        goto LABEL_74;
      }
      if (mSelector != 1852400499)
      {
        if (mSelector == 1935892841) {
          goto LABEL_34;
        }
        if (mSelector != 1935893353) {
          goto LABEL_80;
        }
        if (a4 <= 3)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_98;
          }
          int v15 = 136315394;
          uint64_t v16 = "HALS_Control.cpp";
          __int16 v17 = 1024;
          int v18 = 507;
          uint64_t v10 = MEMORY[0x1E4F14500];
          int v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioSelectorControlPropertyCurrentItem";
          goto LABEL_97;
        }
        goto LABEL_74;
      }
    }
    if (a4 <= 7)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_98;
      }
      int v15 = 136315394;
      uint64_t v16 = "HALS_Control.cpp";
      __int16 v17 = 1024;
      int v18 = 523;
      uint64_t v10 = MEMORY[0x1E4F14500];
      int v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioSelectorControlPropertyItemName";
      goto LABEL_97;
    }
    if (a7 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_98;
      }
      int v15 = 136315394;
      uint64_t v16 = "HALS_Control.cpp";
      __int16 v17 = 1024;
      int v18 = 524;
      uint64_t v10 = MEMORY[0x1E4F14500];
      int v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad qualifier data size for kAudioSelectorControlPropertyItemName";
      goto LABEL_97;
    }
    goto LABEL_63;
  }
  if (mSelector > 1668506479)
  {
    if (mSelector <= 1818453106)
    {
      if (mSelector != 1668506480)
      {
        if (mSelector == 1818453106)
        {
          if (a4 <= 0xF)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_98;
            }
            int v15 = 136315394;
            uint64_t v16 = "HALS_Control.cpp";
            __int16 v17 = 1024;
            int v18 = 461;
            uint64_t v10 = MEMORY[0x1E4F14500];
            int v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioLevelControlPropertyDecibelRange";
            goto LABEL_97;
          }
          *a6 = 0;
          a6[1] = 0;
          unsigned int v12 = 16;
          goto LABEL_76;
        }
        goto LABEL_80;
      }
      if (a4 <= 3)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_98;
        }
        int v15 = 136315394;
        uint64_t v16 = "HALS_Control.cpp";
        __int16 v17 = 1024;
        int v18 = 406;
        uint64_t v10 = MEMORY[0x1E4F14500];
        int v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioControlPropertyScope";
LABEL_97:
        _os_log_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v15, 0x12u);
LABEL_98:
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = off_1F148A5D8;
        exception[2] = 561211770;
      }
      int v13 = *(_DWORD *)(this + 48);
LABEL_79:
      *(_DWORD *)a6 = v13;
      goto LABEL_75;
    }
    switch(mSelector)
    {
      case 1818453107:
        if (a4 <= 3)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_98;
          }
          int v15 = 136315394;
          uint64_t v16 = "HALS_Control.cpp";
          __int16 v17 = 1024;
          int v18 = 480;
          uint64_t v10 = MEMORY[0x1E4F14500];
          int v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioLevelControlPropertyConvertDecibelsToScalar";
          goto LABEL_97;
        }
        break;
      case 1818453110:
        if (a4 <= 3)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_98;
          }
          int v15 = 136315394;
          uint64_t v16 = "HALS_Control.cpp";
          __int16 v17 = 1024;
          int v18 = 452;
          uint64_t v10 = MEMORY[0x1E4F14500];
          int v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioLevelControlPropertyDecibelValue";
          goto LABEL_97;
        }
        break;
      case 1818456932:
        if (a4 <= 3)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_98;
          }
          int v15 = 136315394;
          uint64_t v16 = "HALS_Control.cpp";
          __int16 v17 = 1024;
          int v18 = 471;
          uint64_t v10 = MEMORY[0x1E4F14500];
          int v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioLevelControlPropertyConvertScalarToDecibels";
          goto LABEL_97;
        }
        break;
      default:
        goto LABEL_80;
    }
    goto LABEL_74;
  }
  if (mSelector <= 1651272547)
  {
    if (mSelector != 1650685548)
    {
      if (mSelector != 1651272546) {
        goto LABEL_80;
      }
LABEL_34:
      *a5 = 0;
      return this;
    }
    if (a4 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_98;
      }
      int v15 = 136315394;
      uint64_t v16 = "HALS_Control.cpp";
      __int16 v17 = 1024;
      int v18 = 498;
      uint64_t v10 = MEMORY[0x1E4F14500];
      int v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioBooleanControlPropertyValue";
      goto LABEL_97;
    }
LABEL_74:
    *(_DWORD *)a6 = 0;
LABEL_75:
    unsigned int v12 = 4;
    goto LABEL_76;
  }
  switch(mSelector)
  {
    case 1651272548:
      if (a4 <= 7)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_98;
        }
        int v15 = 136315394;
        uint64_t v16 = "HALS_Control.cpp";
        __int16 v17 = 1024;
        int v18 = 567;
        uint64_t v10 = MEMORY[0x1E4F14500];
        int v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioBlockControlPropertyDescriptor";
        goto LABEL_97;
      }
      if (a7 <= 3)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_98;
        }
        int v15 = 136315394;
        uint64_t v16 = "HALS_Control.cpp";
        __int16 v17 = 1024;
        int v18 = 568;
        uint64_t v10 = MEMORY[0x1E4F14500];
        int v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad qualifier data size for kAudioBlockControlPropertyDescriptor";
        goto LABEL_97;
      }
      goto LABEL_63;
    case 1667591277:
      if (a4 <= 3)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_98;
        }
        int v15 = 136315394;
        uint64_t v16 = "HALS_Control.cpp";
        __int16 v17 = 1024;
        int v18 = 415;
        uint64_t v10 = MEMORY[0x1E4F14500];
        int v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioControlPropertyElement";
        goto LABEL_97;
      }
      int v13 = *(_DWORD *)(this + 52);
      goto LABEL_79;
    case 1668049771:
      if (a4 <= 3)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_98;
        }
        int v15 = 136315394;
        uint64_t v16 = "HALS_Control.cpp";
        __int16 v17 = 1024;
        int v18 = 533;
        uint64_t v10 = MEMORY[0x1E4F14500];
        int v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioSelectorControlPropertyItemKind";
        goto LABEL_97;
      }
      goto LABEL_74;
  }
LABEL_80:

  return HALS_Object::GetPropertyData(this, a2, (int *)a3, a4, (int *)a5, a6);
}

uint64_t HALS_Control::GetPropertyDataSize(uint64_t a1, uint64_t a2, int *a3)
{
  int v3 = *a3;
  uint64_t result = 4;
  if (*a3 > 1818456949)
  {
    if (v3 > 1935894893)
    {
      if (v3 <= 1935962741)
      {
        if (v3 != 1935894894 && v3 != 1935962738) {
          return HALS_Object::GetPropertyDataSize(4, a2, a3);
        }
      }
      else
      {
        if (v3 == 1935962742) {
          return result;
        }
        if (v3 != 1936745315)
        {
          int v5 = 1936745334;
          goto LABEL_26;
        }
      }
      return 8;
    }
    if (v3 > 1852400498)
    {
      if (v3 == 1852400499) {
        return 8;
      }
      if (v3 != 1935892841)
      {
        int v5 = 1935893353;
        goto LABEL_26;
      }
      return 0;
    }
    if (v3 == 1818456950) {
      return result;
    }
    unsigned __int16 v6 = 29798;
LABEL_25:
    int v5 = v6 | 0x6C630000;
    goto LABEL_26;
  }
  if (v3 <= 1668506479)
  {
    if (v3 > 1651272547)
    {
      if (v3 != 1651272548)
      {
        if (v3 == 1667591277) {
          return result;
        }
        int v5 = 1668049771;
LABEL_26:
        if (v3 == v5) {
          return result;
        }
        return HALS_Object::GetPropertyDataSize(4, a2, a3);
      }
      return 8;
    }
    if (v3 == 1650685548) {
      return result;
    }
    if (v3 != 1651272546) {
      return HALS_Object::GetPropertyDataSize(4, a2, a3);
    }
    return 0;
  }
  if (v3 <= 1818453106)
  {
    if (v3 != 1668506480)
    {
      if (v3 == 1818453106) {
        return 16;
      }
      return HALS_Object::GetPropertyDataSize(4, a2, a3);
    }
  }
  else if (v3 != 1818453107 && v3 != 1818453110)
  {
    unsigned __int16 v6 = 29540;
    goto LABEL_25;
  }
  return result;
}

uint64_t HALS_Control::IsPropertySettable(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result = 0;
  int v4 = *a3;
  if (*a3 > 1818456949)
  {
    if (v4 > 1935894893)
    {
      if (v4 <= 1935962741)
      {
        BOOL v5 = v4 == 1935894894;
        int v6 = 1935962738;
        goto LABEL_34;
      }
      if (v4 == 1936745334) {
        return 1;
      }
      if (v4 == 1936745315) {
        return result;
      }
      int v10 = 1935962742;
    }
    else if (v4 <= 1852400498)
    {
      if (v4 == 1818456950) {
        return 1;
      }
      int v10 = 1818457190;
    }
    else
    {
      if (v4 == 1852400499 || v4 == 1935892841) {
        return result;
      }
      int v10 = 1935893353;
    }
LABEL_39:
    if (v4 == v10) {
      return 1;
    }
    return HALS_Object::IsPropertySettable(0, a2, a3);
  }
  if (v4 > 1668506479)
  {
    if (v4 <= 1818453109)
    {
      if ((v4 - 1818453106) >= 2 && v4 != 1668506480) {
        return HALS_Object::IsPropertySettable(0, a2, a3);
      }
      return result;
    }
    if (v4 != 1818453110)
    {
      if (v4 == 1818456932) {
        return result;
      }
      return HALS_Object::IsPropertySettable(0, a2, a3);
    }
    return 1;
  }
  if (v4 <= 1651272547)
  {
    if (v4 != 1650685548)
    {
      int v10 = 1651272546;
      goto LABEL_39;
    }
    return 1;
  }
  BOOL v5 = v4 == 1651272548 || v4 == 1667591277;
  int v6 = 1668049771;
LABEL_34:
  if (!v5 && v4 != v6) {
    return HALS_Object::IsPropertySettable(0, a2, a3);
  }
  return result;
}

BOOL HALS_Control::HasProperty(uint64_t a1, uint64_t a2, int *a3)
{
  int v3 = *a3;
  char v4 = 1;
  if (*a3 > 1818456949)
  {
    if (v3 > 1935893352)
    {
      if (v3 > 1935962741)
      {
        if (v3 <= 1936745333)
        {
          if (v3 != 1935962742)
          {
            if (v3 != 1936745315) {
              goto LABEL_66;
            }
            goto LABEL_83;
          }
LABEL_25:
          int v7 = *(_DWORD *)(a1 + 20);
          int v8 = *(_DWORD *)(a1 + 24);
          BOOL v9 = v7 == v8;
          int v10 = 1936483442;
LABEL_84:
          if (v7 == v10) {
            BOOL v9 = 1;
          }
          char v4 = v7 != v8 || v7 == v10;
          BOOL v24 = v8 == v10;
          if (!v9) {
            char v4 = v24;
          }
          return v4 & 1;
        }
        if (v3 == 1936745334)
        {
LABEL_83:
          int v7 = *(_DWORD *)(a1 + 20);
          int v8 = *(_DWORD *)(a1 + 24);
          BOOL v9 = v7 == v8;
          int v10 = 1936744814;
          goto LABEL_84;
        }
        int v11 = 1937007734;
LABEL_65:
        if (v3 != v11) {
          goto LABEL_66;
        }
        return v4 & 1;
      }
      if (v3 != 1935893353 && v3 != 1935894894)
      {
        if (v3 == 1935962738) {
          goto LABEL_25;
        }
LABEL_66:
        char v4 = 0;
        return v4 & 1;
      }
      goto LABEL_33;
    }
    if (v3 > 1869638758)
    {
      if (v3 == 1869638759 || v3 == 1870098020) {
        return v4 & 1;
      }
      int v5 = 1935892841;
LABEL_32:
      if (v3 != v5) {
        goto LABEL_66;
      }
LABEL_33:
      int v13 = *(_DWORD *)(a1 + 20);
      int v12 = *(_DWORD *)(a1 + 24);
      char v4 = 1;
      goto LABEL_34;
    }
    if (v3 != 1818456950 && v3 != 1818457190)
    {
      int v5 = 1852400499;
      goto LABEL_32;
    }
    goto LABEL_42;
  }
  if (v3 > 1668049770)
  {
    if (v3 > 1818453106)
    {
      if (v3 == 1818453107 || v3 == 1818453110) {
        goto LABEL_42;
      }
      unsigned __int16 v6 = 29540;
    }
    else
    {
      if (v3 == 1668049771)
      {
        int v13 = *(_DWORD *)(a1 + 20);
        int v12 = *(_DWORD *)(a1 + 24);
LABEL_34:
        if (v13 > 1751740517)
        {
          if (v13 == 1751740518 || v13 == 1852601964) {
            return v4 & 1;
          }
          int v14 = 1936483188;
        }
        else
        {
          if (v13 == 1668047723 || v13 == 1684370292) {
            return v4 & 1;
          }
          int v14 = 1685287523;
        }
        if (v13 == v14) {
          return v4 & 1;
        }
        char v4 = v13 != v12;
        if (v13 == v12) {
          return v4 & 1;
        }
        char v4 = 0;
        if (v12 > 1751740517)
        {
          if (v12 == 1751740518 || v12 == 1936483188) {
            goto LABEL_107;
          }
          int v17 = 1852601964;
        }
        else
        {
          if (v12 == 1668047723 || v12 == 1684370292) {
            goto LABEL_107;
          }
          int v17 = 1685287523;
        }
        goto LABEL_106;
      }
      if (v3 == 1668506480) {
        return v4 & 1;
      }
      unsigned __int16 v6 = 25714;
    }
    if (v3 != (v6 | 0x6C630000)) {
      goto LABEL_66;
    }
LABEL_42:
    int v15 = *(_DWORD *)(a1 + 20);
    int v12 = *(_DWORD *)(a1 + 24);
    char v4 = 1;
    if (v15 <= 1936028006)
    {
      if (v15 == 1818588780) {
        return v4 & 1;
      }
      int v16 = 1886544237;
    }
    else
    {
      if (v15 == 1936028007 || v15 == 1937072758) {
        return v4 & 1;
      }
      int v16 = 1986817381;
    }
    if (v15 == v16) {
      return v4 & 1;
    }
    char v4 = v15 != v12;
    if (v15 == v12) {
      return v4 & 1;
    }
    char v4 = 0;
    if (v12 <= 1936028006)
    {
      if (v12 == 1818588780) {
        goto LABEL_107;
      }
      int v17 = 1886544237;
    }
    else
    {
      if (v12 == 1936028007 || v12 == 1986817381) {
        goto LABEL_107;
      }
      int v17 = 1937072758;
    }
LABEL_106:
    if (v12 != v17) {
      return v4 & 1;
    }
LABEL_107:
    char v4 = 1;
    return v4 & 1;
  }
  if (v3 > 1651272547)
  {
    if (v3 != 1651272548)
    {
      if (v3 == 1667591277) {
        return v4 & 1;
      }
      int v11 = 1668047219;
      goto LABEL_65;
    }
LABEL_67:
    int v18 = *(_DWORD *)(a1 + 20);
    int v19 = *(_DWORD *)(a1 + 24);
    BOOL v21 = v18 == 1651273579 || v18 == 1936028002;
    char v4 = v21 || v18 != v19;
    if (v18 != v19 && v18 != 1651273579)
    {
      BOOL v22 = v19 == 1651273579 || v19 == 1936028002;
      char v23 = v22;
      if (v18 != 1936028002) {
        char v4 = v23;
      }
    }
    return v4 & 1;
  }
  if (v3 == 1650682995) {
    return v4 & 1;
  }
  if (v3 != 1650685548)
  {
    if (v3 != 1651272546) {
      goto LABEL_66;
    }
    goto LABEL_67;
  }
  unsigned int v27 = *(_DWORD *)(a1 + 20);
  unint64_t v26 = (HALB_Info *)*(unsigned int *)(a1 + 24);
  BOOL IsSubClass = HALB_Info::IsSubClass((HALB_Info *)v27, 1953458028);
  char v4 = v27 != v26 || IsSubClass;
  if (v27 == v26 || IsSubClass) {
    return v4 & 1;
  }

  return HALB_Info::IsSubClass(v26, 1953458028);
}

void HALS_Control::HALS_Control(HALS_Object *a1, uint64_t a2, int a3, int a4, HALS_Object *a5, int a6, int a7)
{
  int v9 = (int)a5;
  HALS_Object::HALS_Object(a1, a3, a4, a2, a5);
  *(void *)uint64_t v11 = &unk_1F1480018;
  *(_DWORD *)(v11 + 48) = v9;
  *(_DWORD *)(v11 + 52) = a6;
  *(_DWORD *)(v11 + 56) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(v11 + 60) = a7;
  operator new();
}

void sub_1BAEB7A80(_Unwind_Exception *a1)
{
  HALS_Object::~HALS_Object(v1);
  _Unwind_Resume(a1);
}

void HALS_Control::~HALS_Control(HALS_Control *this)
{
  *(void *)this = &unk_1F1480018;
  uint64_t v2 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  HALS_Object::~HALS_Object(this);
}

void HALS_MetaSubTap::SetPropertyData(HALS_MetaSubTap *this, uint64_t a2, const AudioObjectPropertyAddress *a3, unsigned int a4, const void *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_MetaSubTap *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *, const void *, uint64_t, const void *))(*(void *)this + 96))(this, a2, a3, a8, a5, a6, a7) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  int v14 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1685218931)
  {
    if (mSelector == 1685218932)
    {
      if (a4 <= 3)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_38;
        }
        buf.AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALS_MetaSubTap.cpp";
        __int16 v38 = 1024;
        int v39 = 226;
        __int16 v30 = MEMORY[0x1E4F14500];
        uint64_t v31 = "%25s:%-5d  HALS_MetaSubTap::_SetPropertyData: bad property data size for kAudioSubDevicePropertyDriftCompensation";
        goto LABEL_37;
      }
      v35[0] = MEMORY[0x1E4F143A8];
      v35[1] = 0x40000000;
      v35[2] = ___ZN15HALS_MetaSubTap15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_9;
      v35[3] = &__block_descriptor_tmp_10_14867;
      v35[4] = this;
      v35[5] = a5;
      mach_port_t v25 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubTap *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v25, (uint64_t)v35);
      unint64_t v26 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
      if (a8) {
        uint64_t v27 = *((unsigned int *)a8 + 4);
      }
      else {
        uint64_t v27 = 0;
      }
      strcpy((char *)&buf, "tfrdbolg");
      BYTE1(buf.mElement) = 0;
      HIWORD(buf.mElement) = 0;
      HALS_Object::PropertiesChanged(this, v26, v27, 1u, &buf);
    }
    else
    {
      if (mSelector != 2020373603) {
        goto LABEL_27;
      }
      if (a4 <= 7)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_38;
        }
        buf.AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALS_MetaSubTap.cpp";
        __int16 v38 = 1024;
        int v39 = 213;
        __int16 v30 = MEMORY[0x1E4F14500];
        uint64_t v31 = "%25s:%-5d  HALS_MetaSubTap::_SetPropertyData: bad property data size for kAudioSubDevicePropertyExtraLatency";
        goto LABEL_37;
      }
      v36[0] = MEMORY[0x1E4F143A8];
      v36[1] = 0x40000000;
      v36[2] = ___ZN15HALS_MetaSubTap15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
      v36[3] = &__block_descriptor_tmp_8_14865;
      v36[4] = this;
      v36[5] = a3;
      v36[6] = a5;
      int v19 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubTap *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v19, (uint64_t)v36);
      mach_port_t v20 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
      if (a8) {
        uint64_t v21 = *((unsigned int *)a8 + 4);
      }
      else {
        uint64_t v21 = 0;
      }
      AudioObjectPropertyScope mScope = a3->mScope;
      buf.AudioObjectPropertySelector mSelector = 2020373603;
      *(void *)&buf.AudioObjectPropertyScope mScope = mScope;
      HALS_Object::PropertiesChanged(this, v20, v21, 1u, &buf);
    }
  }
  else
  {
    if (mSelector != 1685218913)
    {
      if (mSelector != 1685218929) {
        goto LABEL_27;
      }
      if (a4 > 3)
      {
        v33[0] = MEMORY[0x1E4F143A8];
        v33[1] = 0x40000000;
        v33[2] = ___ZN15HALS_MetaSubTap15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_13;
        v33[3] = &__block_descriptor_tmp_14_14871;
        v33[4] = this;
        v33[5] = a5;
        int v16 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubTap *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v16, (uint64_t)v33);
        int v17 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
        if (a8) {
          uint64_t v18 = *((unsigned int *)a8 + 4);
        }
        else {
          uint64_t v18 = 0;
        }
        strcpy((char *)&buf, "qfrdbolg");
        BYTE1(buf.mElement) = 0;
        HIWORD(buf.mElement) = 0;
        HALS_Object::PropertiesChanged(this, v17, v18, 1u, &buf);
        goto LABEL_27;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
LABEL_38:
        unint64_t v32 = __cxa_allocate_exception(0x10uLL);
        *(void *)unint64_t v32 = off_1F148A5D8;
        long long v32[2] = 561211770;
      }
      buf.AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALS_MetaSubTap.cpp";
      __int16 v38 = 1024;
      int v39 = 252;
      __int16 v30 = MEMORY[0x1E4F14500];
      uint64_t v31 = "%25s:%-5d  HALS_MetaSubTap::_SetPropertyData: bad property data size for kAudioSubDevicePropertyDriftCompensationQuality";
LABEL_37:
      _os_log_impl(&dword_1BAA78000, v30, OS_LOG_TYPE_ERROR, v31, (uint8_t *)&buf, 0x12u);
      goto LABEL_38;
    }
    if (a4 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_38;
      }
      buf.AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALS_MetaSubTap.cpp";
      __int16 v38 = 1024;
      int v39 = 239;
      __int16 v30 = MEMORY[0x1E4F14500];
      uint64_t v31 = "%25s:%-5d  HALS_MetaSubTap::_SetPropertyData: bad property data size for kAudioSubDevicePropertyDriftCompensationAlgorithm";
      goto LABEL_37;
    }
    v34[0] = MEMORY[0x1E4F143A8];
    v34[1] = 0x40000000;
    v34[2] = ___ZN15HALS_MetaSubTap15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_11;
    v34[3] = &__block_descriptor_tmp_12_14869;
    v34[4] = this;
    v34[5] = a5;
    BOOL v22 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubTap *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v22, (uint64_t)v34);
    char v23 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
    if (a8) {
      uint64_t v24 = *((unsigned int *)a8 + 4);
    }
    else {
      uint64_t v24 = 0;
    }
    strcpy((char *)&buf, "afrdbolg");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    HALS_Object::PropertiesChanged(this, v23, v24, 1u, &buf);
  }
LABEL_27:
  HALS_ObjectMap::ReleaseObject(v14, v13);
}

void sub_1BAEB8114(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ___ZN15HALS_MetaSubTap15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 4 * (**(_DWORD **)(result + 40) == 1768845428) + 80) = **(double **)(result + 48);
  return result;
}

uint64_t ___ZN15HALS_MetaSubTap15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_9(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 89) = **(_DWORD **)(result + 40) != 0;
  return result;
}

uint64_t ___ZN15HALS_MetaSubTap15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_11(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 92) = **(_DWORD **)(result + 40);
  return result;
}

uint64_t ___ZN15HALS_MetaSubTap15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_13(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 96) = **(_DWORD **)(result + 40);
  return result;
}

void HALS_MetaSubTap::GetPropertyData(HALS_MetaSubTap *this, uint64_t a2, const AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, void *a6, uint64_t a7, const void *a8, HALS_Client *a9)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_MetaSubTap *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *, unsigned int *, void *, uint64_t, const void *))(*(void *)this + 88))(this, a2, a3, a9, a5, a6, a7, a8) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    int v19 = 2003332927;
    goto LABEL_29;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1685218931)
  {
    if (mSelector == 1685218913)
    {
      if (a4 > 3)
      {
        int v15 = v23;
        v23[0] = MEMORY[0x1E4F143A8];
        v23[1] = 0x40000000;
        v23[2] = ___ZNK15HALS_MetaSubTap15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_4;
        void v23[3] = &__block_descriptor_tmp_5_14878;
        v23[4] = this;
        v23[5] = a6;
        goto LABEL_15;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_28;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v27 = "HALS_MetaSubTap.cpp";
      __int16 v28 = 1024;
      int v29 = 179;
      mach_port_t v20 = MEMORY[0x1E4F14500];
      uint64_t v21 = "%25s:%-5d  HALS_MetaSubTap::_GetPropertyData: bad property data size for kAudioSubDevicePropertyDriftCompensationAlgorithm";
    }
    else
    {
      if (mSelector != 1685218929) {
        return;
      }
      if (a4 > 3)
      {
        int v15 = v22;
        v22[0] = MEMORY[0x1E4F143A8];
        v22[1] = 0x40000000;
        _OWORD v22[2] = ___ZNK15HALS_MetaSubTap15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_6;
        void v22[3] = &__block_descriptor_tmp_7_14880;
        _DWORD v22[4] = this;
        v22[5] = a6;
LABEL_15:
        unsigned int v16 = 4;
        goto LABEL_16;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_28;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v27 = "HALS_MetaSubTap.cpp";
      __int16 v28 = 1024;
      int v29 = 188;
      mach_port_t v20 = MEMORY[0x1E4F14500];
      uint64_t v21 = "%25s:%-5d  HALS_MetaSubTap::_GetPropertyData: bad property data size for kAudioSubDevicePropertyDriftCompensationQuality";
    }
    goto LABEL_27;
  }
  if (mSelector == 1685218932)
  {
    if (a4 > 3)
    {
      int v15 = v24;
      v24[0] = MEMORY[0x1E4F143A8];
      v24[1] = 0x40000000;
      v24[2] = ___ZNK15HALS_MetaSubTap15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2;
      v24[3] = &__block_descriptor_tmp_3_14876;
      unsigned char v24[4] = this;
      v24[5] = a6;
      goto LABEL_15;
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_28;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    uint64_t v27 = "HALS_MetaSubTap.cpp";
    __int16 v28 = 1024;
    int v29 = 170;
    mach_port_t v20 = MEMORY[0x1E4F14500];
    uint64_t v21 = "%25s:%-5d  HALS_MetaSubTap::_GetPropertyData: bad property data size for kAudioSubDevicePropertyDriftCompensation";
    goto LABEL_27;
  }
  if (mSelector != 2020373603) {
    return;
  }
  if (a4 <= 7)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
LABEL_28:
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      int v19 = 561211770;
LABEL_29:
      exception[2] = v19;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    uint64_t v27 = "HALS_MetaSubTap.cpp";
    __int16 v28 = 1024;
    int v29 = 161;
    mach_port_t v20 = MEMORY[0x1E4F14500];
    uint64_t v21 = "%25s:%-5d  HALS_MetaSubTap::_GetPropertyData: bad property data size for kAudioSubDevicePropertyExtraLatency";
LABEL_27:
    _os_log_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, v21, buf, 0x12u);
    goto LABEL_28;
  }
  int v15 = v25;
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 0x40000000;
  CFTypeRef v25[2] = ___ZNK15HALS_MetaSubTap15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
  void v25[3] = &__block_descriptor_tmp_14874;
  void v25[4] = this;
  void v25[5] = a6;
  v25[6] = a3;
  unsigned int v16 = 8;
LABEL_16:
  int v17 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubTap *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v17, (uint64_t)v15);
  *a5 = v16;
}

double ___ZNK15HALS_MetaSubTap15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1, double a2)
{
  LODWORD(a2) = *(_DWORD *)(*(void *)(a1 + 32) + 4 * (**(_DWORD **)(a1 + 48) == 1768845428) + 80);
  double result = (double)*(unint64_t *)&a2;
  **(double **)(a1 + 40) = result;
  return result;
}

uint64_t ___ZNK15HALS_MetaSubTap15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(unsigned __int8 *)(*(void *)(result + 32) + 89);
  return result;
}

uint64_t ___ZNK15HALS_MetaSubTap15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_4(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(_DWORD *)(*(void *)(result + 32) + 92);
  return result;
}

uint64_t ___ZNK15HALS_MetaSubTap15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_6(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(_DWORD *)(*(void *)(result + 32) + 96);
  return result;
}

uint64_t HALS_MetaSubTap::GetPropertyDataSize(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (((*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t))(*(void *)a1 + 88))(a1, a2, a3, a6) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  int v7 = *a3;
  if (*a3 == 2020373603) {
    int v8 = 8;
  }
  else {
    int v8 = 0;
  }
  if (v7 == 1685218932) {
    unsigned int v9 = 4;
  }
  else {
    unsigned int v9 = v8;
  }
  if (v7 == 1685218929) {
    int v10 = 4;
  }
  else {
    int v10 = 0;
  }
  if (v7 == 1685218913) {
    unsigned int v11 = 4;
  }
  else {
    unsigned int v11 = v10;
  }
  if (v7 <= 1685218931) {
    return v11;
  }
  else {
    return v9;
  }
}

uint64_t HALS_MetaSubTap::IsPropertySettable(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  uint64_t result = 1;
  if (((*a3 - 1685218913) > 0x13 || ((1 << (*a3 - 97)) & 0x90001) == 0) && *a3 != 2020373603) {
    return 0;
  }
  return result;
}

uint64_t HALS_MetaSubTap::HasProperty(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 176))(a1, a3, a4);
  if (result)
  {
    int v6 = *a3;
    if (*a3 > 1685218931)
    {
      if (v6 == 1685218932)
      {
        return 1;
      }
      else if (v6 == 2020373603)
      {
        int v7 = a3[1];
        return v7 == 1768845428 || v7 == 1869968496;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return v6 == 1685218913 || v6 == 1685218929;
    }
  }
  return result;
}

uint64_t HALS_MetaSubTap::_Deactivate(uint64_t this)
{
  *(_DWORD *)(this + 8) = 0;
  return this;
}

void HALS_MetaSubTap::~HALS_MetaSubTap(HALS_MetaSubTap *this)
{
  *(void *)this = &unk_1F1480110;
  CACFString::~CACFString((HALS_MetaSubTap *)((char *)this + 56));
  HALS_Object::~HALS_Object(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F1480110;
  CACFString::~CACFString((HALS_MetaSubTap *)((char *)this + 56));

  HALS_Object::~HALS_Object(this);
}

uint64_t HALS_PDPControl::GetHardwareReferenceStreamControlValue()
{
  return 0;
}

uint64_t HALS_PDPControl::SetPropertyData(HALS_PDPControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, void *a5, unsigned int a6, uint64_t a7, HALS_Client *a8)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_PDPControl *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  unsigned int v30 = a6;
  uint64_t v31 = (void *)a7;
  if (HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 14)))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      mach_port_t v37 = "HALS_PDPControl.cpp";
      __int16 v38 = 1024;
      int v39 = 146;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPControl::SetPropertyData: owning device is missing", buf, 0x12u);
    }
    __int16 v28 = __cxa_allocate_exception(0x10uLL);
    int v29 = 560947818;
LABEL_31:
    *(void *)__int16 v28 = off_1F148A5D8;
    v28[2] = v29;
  }
  signed int mSelector = a3->mSelector;
  if (!HALB_Info::PropertyRequiresHogMode((HALB_Info *)a3->mSelector, v16)) {
    goto LABEL_6;
  }
  if (!HALS_Device::IsHogModeOwnerOrFree(0, a8))
  {
    __int16 v28 = __cxa_allocate_exception(0x10uLL);
    int v29 = 560492391;
    goto LABEL_31;
  }
  signed int mSelector = a3->mSelector;
LABEL_6:
  if (mSelector > 1818456949)
  {
    if (mSelector == 1818456950) {
      goto LABEL_15;
    }
    if (mSelector != 1937007734 && mSelector != 1869638759) {
      goto LABEL_24;
    }
  }
  else if (mSelector != 1650682995 && mSelector != 1668047219)
  {
    if (mSelector != 1818453110)
    {
LABEL_24:
      HALS_PDPUCPlugIn::ObjectSetPropertyData(*(HALS_PDPUCPlugIn **)(*((void *)this + 9) + 80), a2, a3, v30, v31, a4, a5);
      return pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
    }
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(v34, "HALS_PDPControl::SetPropertyData");
    unint64_t v18 = *(void *)&a3->mSelector;
    AudioObjectPropertyElement mElement = a3->mElement;
    unsigned int v21 = *((_DWORD *)this + 12);
    unsigned int v20 = *((_DWORD *)this + 13);
    char v23 = (HALS_ObjectMap *)*((unsigned int *)this + 14);
    int v22 = *((_DWORD *)this + 15);
    uint64_t v24 = "no control type";
    if (v22 == 1) {
      uint64_t v24 = "software control";
    }
    if (v22) {
      mach_port_t v25 = (char *)v24;
    }
    else {
      mach_port_t v25 = "external driver";
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v25);
    LogVolumeChangeForServerSideControl((uint64_t)v34, a2, v18, mElement, a4, (float *)a5, v23, v21, v20, (uint64_t)__p);
    if (v33 < 0) {
      operator delete(__p[0]);
    }
    if (v35 < 0) {
      operator delete(v34[0]);
    }
    goto LABEL_24;
  }
  kdebug_trace();
  HALS_Control::SetPropertyData((uint64_t)this, a2, (int *)a3, a4, (uint64_t)a5, a6, a7, (uint64_t)a8);
  kdebug_trace();
  return pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
}

void sub_1BAEB8DC0(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, HALS_ObjectMap *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  HALS_ObjectMap::ReleaseObject(a12, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_PDPControl::GetPropertyData(HALS_PDPControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, void *a6, uint64_t a7, const void *a8, HALS_Client *a9)
{
  if (((*(uint64_t (**)(HALS_PDPControl *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 88))(this, a2, a3, a9) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1852400498)
  {
    BOOL v18 = mSelector == 1650682995;
    int v19 = 1668047219;
  }
  else
  {
    if (mSelector == 1852400499)
    {
      *a5 = a4;
      uint64_t v22 = *((void *)this + 9);
      *(void *)&v25.AudioObjectPropertySelector mSelector = 0x676C6F626C6E616DLL;
      v25.AudioObjectPropertyElement mElement = 0;
      return HALS_PDPUCPlugIn::ObjectGetPropertyData(*(HALS_PDPUCPlugIn **)(v22 + 72), a2, &v25, a7, a8, a5, a6);
    }
    BOOL v18 = mSelector == 1937007734;
    int v19 = 1869638759;
  }
  if (v18 || mSelector == v19)
  {
    return HALS_Control::GetPropertyData((uint64_t)this, a2, a3, a4, a5, (uint64_t *)a6, a7, a8, a9);
  }
  else
  {
    *a5 = a4;
    char v23 = *(HALS_PDPUCPlugIn **)(*((void *)this + 9) + 72);
    return HALS_PDPUCPlugIn::ObjectGetPropertyData(v23, a2, a3, a7, a8, a5, a6);
  }
}

uint64_t HALS_PDPControl::GetPropertyDataSize(void *a1, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6)
{
  if (((*(uint64_t (**)(void *, uint64_t, AudioObjectPropertyAddress *, uint64_t))(*a1 + 88))(a1, a2, a3, a6) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  int mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1852400498)
  {
    BOOL v12 = mSelector == 1650682995;
    int v13 = 1668047219;
  }
  else
  {
    BOOL v12 = mSelector == 1852400499 || mSelector == 1937007734;
    int v13 = 1869638759;
  }
  if (v12 || mSelector == v13)
  {
    return HALS_Control::GetPropertyDataSize((uint64_t)a1, a2, (int *)a3);
  }
  else
  {
    unsigned int v16 = *(HALS_PDPUCPlugIn **)(a1[9] + 64);
    return HALS_PDPUCPlugIn::ObjectGetPropertyDataSize(v16, a2, a3, a4, a5);
  }
}

uint64_t HALS_PDPControl::IsPropertySettable(void *a1, uint64_t a2, AudioObjectPropertyAddress *a3)
{
  if (((*(uint64_t (**)(void *))(*a1 + 88))(a1) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  int mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1852400498)
  {
    BOOL v7 = mSelector == 1650682995;
    int v8 = 1668047219;
  }
  else
  {
    BOOL v7 = mSelector == 1852400499 || mSelector == 1937007734;
    int v8 = 1869638759;
  }
  if (v7 || mSelector == v8)
  {
    return HALS_Control::IsPropertySettable((uint64_t)a1, a2, (int *)a3);
  }
  else
  {
    unsigned int v11 = *(HALS_PDPUCPlugIn **)(a1[9] + 56);
    return HALS_PDPUCPlugIn::ObjectIsPropertySettable(v11, a2, a3);
  }
}

uint64_t HALS_PDPControl::HasProperty(void *a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(void *, int *, uint64_t))(*a1 + 176))(a1, a3, a4);
  if (result)
  {
    int v8 = *a3;
    if (*a3 <= 1852400498)
    {
      BOOL v9 = v8 == 1650682995;
      int v10 = 1668047219;
    }
    else
    {
      BOOL v9 = v8 == 1852400499 || v8 == 1937007734;
      int v10 = 1869638759;
    }
    if (v9 || v8 == v10)
    {
      return HALS_Control::HasProperty((uint64_t)a1, a2, a3);
    }
    else
    {
      return (*(unsigned int (**)(uint64_t, int *))(a1[9] + 48))(a2, a3) != 0;
    }
  }
  return result;
}

void HALS_PDPControl::~HALS_PDPControl(HALS_PDPControl *this)
{
  HALS_Control::~HALS_Control(this);

  JUMPOUT(0x1C1859840);
}

void HALS_PDPControl::Activate(HALS_PDPControl *this)
{
  v7.AudioObjectPropertyElement mElement = 0;
  unsigned int v8 = 4;
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = *((unsigned int *)this + 4);
  *(void *)&v7.int mSelector = 0x676C6F6263736370;
  HALS_PDPUCPlugIn::ObjectGetPropertyData(*(HALS_PDPUCPlugIn **)(v2 + 72), v3, &v7, 0, 0, &v8, (char *)this + 48);
  v7.AudioObjectPropertyElement mElement = 0;
  unsigned int v8 = 4;
  uint64_t v4 = *((void *)this + 9);
  uint64_t v5 = *((unsigned int *)this + 4);
  *(void *)&v7.int mSelector = 0x676C6F6263656C6DLL;
  HALS_PDPUCPlugIn::ObjectGetPropertyData(*(HALS_PDPUCPlugIn **)(v4 + 72), v5, &v7, 0, 0, &v8, (char *)this + 52);
  HALS_Object::Activate(this, v6);
}

uint64_t AMCP::get_system_property_traits_list(AMCP *this)
{
  {
    AMCP::get_system_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::get_system_property_traits_list(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&AMCP::get_system_property_traits_list(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_system_property_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_system_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_system_property_traits_list(void)::$_0 &&>>()
{
  void v23[6] = *MEMORY[0x1E4F143B8];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v0, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v1, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v2, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v3, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v4, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v5, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v6, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v7, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v8, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v9, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1886152483, 1, 0, 0, &AMCP::Property_Traits<1886152483u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668577315u>::k_valid_scopes, 0, 1886152483, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1651472419, 1, 0, 0, &AMCP::Property_Traits<1651472419u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668049699u>::k_valid_scopes, 0, 1651472419, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1668049699, 1, 0, 0, &AMCP::Property_Traits<1668049699u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1684370979u>::k_valid_scopes, 0, 1668049699, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v21, 1684370979, 1, 0, 0, &AMCP::Property_Traits<1684370979u>::k_valid_scopes, (uint64_t)"N14mcp_applesauce2CF15PropertyListRefE", 0, 1684370979, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v22, 1668577315, 1, 0, 0, &AMCP::Property_Traits<1668577315u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1852793891u>::k_valid_scopes, 0, 0, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v23, 1852793891, 1, 0, 0, &AMCP::Property_Traits<1852793891u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651861860u>::k_valid_scopes, 0, 0, 14);
  operator new();
}

void sub_1BAEB9BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v16 = v15;
  *(void *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1C1859840](v14, 0x20C40960023A9);
  uint64_t v18 = 1152;
  while (1)
  {
    uint64_t v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(void *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18) {
      _Unwind_Resume(a1);
    }
  }
}

std::string *AMCP::IO_Core::Stream_Connection::Stream_Connection(std::string *this, long long *a2, std::string::size_type a3, int a4, long long *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v14 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v14;
  }
  std::string::size_type v15 = *((void *)a2 + 3);
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 8);
  this[1].__r_.__value_.__r.__words[0] = v15;
  this[1].__r_.__value_.__r.__words[2] = a3;
  LODWORD(this[2].__r_.__value_.__l.__data_) = a4;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  uint64_t v29 = 0;
  unsigned int v30 = 0;
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&this[3], &v29);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  long long v16 = *a5;
  long long v17 = a5[1];
  this[7].__r_.__value_.__r.__words[2] = *((void *)a5 + 4);
  *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = v17;
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = v16;
  *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = *(_OWORD *)a7;
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  this[11].__r_.__value_.__s.__data_[0] = 0;
  this[11].__r_.__value_.__l.__size_ = 0;
  this[11].__r_.__value_.__r.__words[2] = 0;
  this[8].__r_.__value_.__r.__words[2] = 0;
  this[9].__r_.__value_.__r.__words[0] = 0;
  this[9].__r_.__value_.__s.__data_[8] = 0;
  long long v18 = *(_OWORD *)(a6 + 16);
  std::string::size_type v19 = *(void *)(a6 + 32);
  *(_OWORD *)&this[12].__r_.__value_.__l.__data_ = *(_OWORD *)a6;
  *(_OWORD *)&this[12].__r_.__value_.__r.__words[2] = v18;
  this[13].__r_.__value_.__l.__size_ = v19;
  this[13].__r_.__value_.__r.__words[2] = 0;
  this[14].__r_.__value_.__r.__words[0] = 0;
  this[14].__r_.__value_.__l.__size_ = 0;
  if (*(double *)a5 != *(double *)a6
    || *((_DWORD *)a5 + 2) != *(_DWORD *)(a6 + 8)
    || *((_DWORD *)a5 + 3) != *(_DWORD *)(a6 + 12)
    || *((_DWORD *)a5 + 4) != *(_DWORD *)(a6 + 16)
    || *((_DWORD *)a5 + 5) != *(_DWORD *)(a6 + 20)
    || *((_DWORD *)a5 + 6) != *(_DWORD *)(a6 + 24)
    || *((_DWORD *)a5 + 7) != *(_DWORD *)(a6 + 28)
    || *((_DWORD *)a5 + 8) != *(_DWORD *)(a6 + 32))
  {
    AudioConverterRef outAudioConverter = 0;
    if (a4) {
      uint64_t v21 = (const AudioStreamBasicDescription *)a6;
    }
    else {
      uint64_t v21 = (const AudioStreamBasicDescription *)a5;
    }
    if (a4) {
      uint64_t v22 = (const AudioStreamBasicDescription *)a5;
    }
    else {
      uint64_t v22 = (const AudioStreamBasicDescription *)a6;
    }
    char v23 = (AMCP::Log::Scope_Registry *)AudioConverterNew(v21, v22, &outAudioConverter);
    if (!v23) {
      operator new();
    }
    AMCP::Log::Scope_Registry::get(v23);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    AudioObjectPropertyAddress v25 = **(NSObject ***)buf;
    if (*(void *)v46) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v46);
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      unint64_t v26 = pthread_self();
      mach_port_t v27 = pthread_mach_thread_np(v26);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v27;
      *(_WORD *)uint64_t v46 = 2080;
      *(void *)&v46[2] = "Stream_Connection.cpp";
      __int16 v47 = 1024;
      int v48 = 261;
      __int16 v49 = 2080;
      *(void *)int v50 = "err";
      _os_log_error_impl(&dword_1BAA78000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to create audio format converter for stream connection", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v43);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v36, "Failed to create audio format converter for stream connection");
    std::runtime_error::runtime_error(&v37, &v36);
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    int v42 = -1;
    v37.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    __int16 v38 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v37);
    *(void *)&v50[6] = "void AMCP::IO_Core::Stream_Connection::configure_audio_converter(AMCP::Direction, const CA::Str"
                         "eamDescription &, const CA::StreamDescription &)";
    uint64_t v51 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Stream_Connection.cpp";
    int v52 = 261;
    std::vector<void *>::vector(&v31);
    int v28 = backtrace((void **)v31, (*((void *)&v31 + 1) - (void)v31) >> 3);
    std::vector<void *>::resize((char **)&v31, v28);
    long long v34 = v31;
    uint64_t v35 = v32;
    long long v31 = 0uLL;
    uint64_t v32 = 0;
    char v33 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  std::unique_ptr<OpaqueAudioConverter,AMCP::IO_Core::Stream_Connection::AudioConverter_Deleter>::reset[abi:ne180100]((OpaqueAudioConverter **)&this[14].__r_.__value_.__l.__size_, 0);
  data = (std::__shared_weak_count *)this[14].__r_.__value_.__l.__data_;
  this[13].__r_.__value_.__r.__words[2] = 0;
  this[14].__r_.__value_.__r.__words[0] = 0;
  if (data) {
    std::__shared_weak_count::__release_shared[abi:ne180100](data);
  }
  return this;
}

void sub_1BAEBA194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, std::runtime_error a18, std::runtime_error a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::runtime_error a30,uint64_t a31)
{
  MEMORY[0x1C1859840](v32, 0x10A1C404618BBCFLL);
  std::unique_ptr<OpaqueAudioConverter,AMCP::IO_Core::Stream_Connection::AudioConverter_Deleter>::reset[abi:ne180100]((OpaqueAudioConverter **)(v31 + 344), 0);
  long long v34 = *(std::__shared_weak_count **)(v31 + 336);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  uint64_t v35 = *(std::__shared_weak_count **)(v31 + 280);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (*(unsigned char *)(v31 + 264))
  {
    std::runtime_error v36 = *(std::__shared_weak_count **)(v31 + 256);
    if (v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    }
  }
  std::runtime_error v37 = *(std::__shared_weak_count **)(v31 + 216);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  __int16 v38 = *(std::__shared_weak_count **)(v31 + 200);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  uint64_t v39 = *(std::__shared_weak_count **)(v31 + 144);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  uint64_t v40 = *(std::__shared_weak_count **)(v31 + 104);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (*(char *)(v31 + 23) < 0) {
    operator delete(*(void **)v31);
  }
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::Stream_Connection::get_unique_read_range(AMCP::IO_Core::Stream_Connection *this)
{
  uint64_t v2 = *((void *)this + 24);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *__return_ptr))(*(void *)v2 + 72))(v4);
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v4);
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1BAEBA45C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::IO_Core::Stream_Connection::maybe_capture_audio(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void **)(a1 + 272);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 280);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v4)
  {
    if (!*(unsigned char *)(a1 + 264))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v5 = **(NSObject ***)buf;
      if (*(void *)v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v23);
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        uint64_t v6 = pthread_self();
        mach_port_t v7 = pthread_mach_thread_np(v6);
        *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v7;
        *(_WORD *)char v23 = 2080;
        *(void *)&v23[2] = "Stream_Connection.cpp";
        __int16 v24 = 1024;
        int v25 = 204;
        __int16 v26 = 2080;
        *(void *)mach_port_t v27 = "not (m_current_time_for_audio_capture)";
        _os_log_error_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s cycle data must have been captured for this cycle before we can write to the file", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v21);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"cycle data must have been captured for this cycle before we can write to the file", (uint64_t)&v13);
      std::logic_error::logic_error(&v14, &v13);
      v14.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v15, &v14);
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      int v20 = -1;
      v15.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      long long v16 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v15);
      *(void *)&v27[6] = "void AMCP::IO_Core::Stream_Connection::maybe_capture_audio(const DAL::Readable_Range &)";
      int v28 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Stream_Connection.cpp";
      int v29 = 204;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v8);
      long long v11 = v8;
      uint64_t v12 = v9;
      long long v8 = 0uLL;
      uint64_t v9 = 0;
      uint64_t v10 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    AMCP::DAL::create_timestamp_data((AMCP::DAL *)buf, (const AMCP::DAL::DAL_Time *)(a1 + 224), *(const AMCP::DAL::DAL_Timed_Segment **)(a2 + 24), *(std::__shared_weak_count **)(a2 + 32));
    (*(void (**)(void, uint8_t *, uint64_t))(*(void *)*v4 + 16))(*v4, buf, a2);
    std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)buf);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1BAEBA768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(exception_object);
}

AMCP::Log::Scope_Registry *AMCP::IO_Core::Stream_Connection::get_converter_buffer(AMCP::Log::Scope_Registry *this, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a2 + 328);
  if (!v2)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v4 = **(NSObject ***)buf;
    if (*(void *)v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v22);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = pthread_self();
      mach_port_t v6 = pthread_mach_thread_np(v5);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)uint64_t v22 = 2080;
      *(void *)&_OWORD v22[2] = "Stream_Connection.cpp";
      __int16 v23 = 1024;
      int v24 = 220;
      __int16 v25 = 2080;
      *(void *)__int16 v26 = "not (m_converter_buffer)";
      _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no converter buffer", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"no converter buffer", (uint64_t)&v12);
    std::logic_error::logic_error(&v13, &v12);
    v13.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v14, &v13);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v19 = -1;
    v14.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    std::logic_error v15 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(void *)&v26[6] = "std::shared_ptr<DAL::DAL_Buffer> AMCP::IO_Core::Stream_Connection::get_converter_buffer() const";
    mach_port_t v27 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Stream_Connection.cpp";
    int v28 = 220;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v7);
    long long v10 = v7;
    uint64_t v11 = v8;
    long long v7 = 0uLL;
    uint64_t v8 = 0;
    uint64_t v9 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v3 = *(void *)(a2 + 336);
  *(void *)this = v2;
  *((void *)this + 1) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void sub_1BAEBAAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<AMCP::DAL::DAL_Settings>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table(a1 + 24);
}

void std::__shared_ptr_emplace<AMCP::DAL::DAL_Settings>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1480378;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::DAL::DAL_Settings>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1480378;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1BAEBAC30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t HALS_Stream::AllowClientAccessToProperty()
{
  return 1;
}

void HALS_Stream::GetPropertyData(HALS_Stream *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, unsigned int *a5, void *a6, uint64_t a7, const void *a8, HALS_Client *a9)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1935894637)
  {
    if (mSelector > 1936092512)
    {
      if (mSelector > 1936092531)
      {
        if (mSelector != 1936092532)
        {
          if (mSelector == 1952542835)
          {
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_Stream.cpp";
                __int16 v36 = 1024;
                int v37 = 395;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Stream::_GetPropertyData: bad property data size for kAudioStreamPropertyIsReferenceStream", buf, 0x12u);
              }
              exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
              *(void *)exceptiouint64_t n = off_1F148A5D8;
              exception[2] = 561211770;
            }
            goto LABEL_53;
          }
          if (mSelector == 1952805485)
          {
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_Stream.cpp";
                __int16 v36 = 1024;
                int v37 = 290;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Stream::_GetPropertyData: bad property data size for kAudioStreamPropertyTerminalType", buf, 0x12u);
              }
              std::logic_error v14 = __cxa_allocate_exception(0x10uLL);
              *(void *)std::logic_error v14 = off_1F148A5D8;
              void v14[2] = 561211770;
            }
LABEL_53:
            *(_DWORD *)a6 = 0;
            goto LABEL_54;
          }
          goto LABEL_74;
        }
        if (a4 <= 0x27)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_Stream.cpp";
            __int16 v36 = 1024;
            int v37 = 317;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Stream::_GetPropertyData: bad property data size for kAudioStreamPropertyVirtualFormat", buf, 0x12u);
          }
          char v33 = __cxa_allocate_exception(0x10uLL);
          *(void *)char v33 = off_1F148A5D8;
          v33[2] = 561211770;
        }
LABEL_71:
        a6[4] = 0;
        *(_OWORD *)a6 = 0u;
        *((_OWORD *)a6 + 1) = 0u;
        unsigned int v21 = 40;
        goto LABEL_72;
      }
      if (mSelector != 1936092513)
      {
        if (mSelector == 1936092525)
        {
          if (a4 <= 0x27)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_Stream.cpp";
              __int16 v36 = 1024;
              int v37 = 347;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Stream::_GetPropertyData: bad property data size for kAudioDevicePropertyStreamFormatMatch", buf, 0x12u);
            }
            char v20 = __cxa_allocate_exception(0x10uLL);
            *(void *)char v20 = off_1F148A5D8;
            v20[2] = 561211770;
          }
          goto LABEL_71;
        }
LABEL_74:
        HALS_Object::GetPropertyData((uint64_t)this, a2, (int *)a3, a4, (int *)a5, a6);
        return;
      }
      goto LABEL_49;
    }
    if (mSelector > 1936092450)
    {
      if (mSelector != 1936092451)
      {
        if (mSelector == 1936092479)
        {
          if (a4 <= 0x27)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_Stream.cpp";
              __int16 v36 = 1024;
              int v37 = 338;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Stream::_GetPropertyData: bad property data size for kAudioDevicePropertyStreamFormatSupported", buf, 0x12u);
            }
            uint64_t v18 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v18 = off_1F148A5D8;
            v18[2] = 561211770;
          }
          goto LABEL_71;
        }
        goto LABEL_74;
      }
LABEL_49:
      *a5 = 0;
      return;
    }
    if (mSelector != 1935894638)
    {
      if (mSelector == 1935960434)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_Stream.cpp";
            __int16 v36 = 1024;
            int v37 = 281;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Stream::_GetPropertyData: bad property data size for kAudioStreamPropertyDirection", buf, 0x12u);
          }
          uint64_t v31 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v31 = off_1F148A5D8;
          v31[2] = 561211770;
        }
        v34[0] = MEMORY[0x1E4F143A8];
        v34[1] = 0x40000000;
        v34[2] = ___ZNK11HALS_Stream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
        v34[3] = &__block_descriptor_tmp_15034;
        v34[4] = this;
        v34[5] = a6;
        uint64_t v16 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Stream *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v16, (uint64_t)v34);
        goto LABEL_54;
      }
      goto LABEL_74;
    }
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_Stream.cpp";
        __int16 v36 = 1024;
        int v37 = 299;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Stream::_GetPropertyData: bad property data size for kAudioStreamPropertyStartingChannel", buf, 0x12u);
      }
      uint64_t v30 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v30 = off_1F148A5D8;
      v30[2] = 561211770;
    }
LABEL_51:
    *(_DWORD *)a6 = 1;
LABEL_54:
    unsigned int v21 = 4;
LABEL_72:
    *a5 = v21;
    return;
  }
  if (mSelector > 1885762622)
  {
    if (mSelector > 1885762668)
    {
      if (mSelector == 1885762669)
      {
        if (a4 <= 0x27)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_Stream.cpp";
            __int16 v36 = 1024;
            int v37 = 386;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Stream::_GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormatMatch", buf, 0x12u);
          }
          uint64_t v29 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v29 = off_1F148A5D8;
          v29[2] = 561211770;
        }
        goto LABEL_71;
      }
      if (mSelector != 1935762292) {
        goto LABEL_74;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Stream.cpp";
          __int16 v36 = 1024;
          int v37 = 272;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Stream::_GetPropertyData: bad property data size for kAudioStreamPropertyIsActive", buf, 0x12u);
        }
        int v19 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v19 = off_1F148A5D8;
        void v19[2] = 561211770;
      }
      goto LABEL_51;
    }
    if (mSelector == 1885762623)
    {
      if (a4 <= 0x27)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Stream.cpp";
          __int16 v36 = 1024;
          int v37 = 377;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Stream::_GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormatSupported", buf, 0x12u);
        }
        mach_port_t v27 = __cxa_allocate_exception(0x10uLL);
        *(void *)mach_port_t v27 = off_1F148A5D8;
        uint64_t v27[2] = 561211770;
      }
      goto LABEL_71;
    }
    unsigned __int16 v17 = 29793;
LABEL_35:
    if (mSelector != (v17 | 0x70660000)) {
      goto LABEL_74;
    }
    goto LABEL_49;
  }
  if (mSelector > 1885762591)
  {
    if (mSelector == 1885762592)
    {
      if (a4 <= 0x27)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Stream.cpp";
          __int16 v36 = 1024;
          int v37 = 356;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Stream::_GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormat", buf, 0x12u);
        }
        uint64_t v28 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v28 = off_1F148A5D8;
        v28[2] = 561211770;
      }
      goto LABEL_71;
    }
    unsigned __int16 v17 = 29731;
    goto LABEL_35;
  }
  if (mSelector != 1819107691)
  {
    if (mSelector == 1819569763)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Stream.cpp";
          __int16 v36 = 1024;
          int v37 = 308;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Stream::_GetPropertyData: bad property data size for kAudioStreamPropertyLatency", buf, 0x12u);
        }
        std::logic_error v15 = __cxa_allocate_exception(0x10uLL);
        *(void *)std::logic_error v15 = off_1F148A5D8;
        _DWORD v15[2] = 561211770;
      }
      goto LABEL_53;
    }
    goto LABEL_74;
  }
  uint64_t v24 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 7));
  __int16 v26 = (HALS_ObjectMap *)v24;
  if (v24)
  {
    strcpy(buf, "kamlbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    (*(void (**)(uint64_t, void, unsigned char *, uint64_t, unsigned int *, void *, uint64_t, const void *, HALS_Client *))(*(void *)v24 + 112))(v24, *((unsigned int *)this + 7), buf, a4, a5, a6, a7, a8, a9);
  }
  HALS_ObjectMap::ReleaseObject(v26, v25);
}

void sub_1BAEBB89C(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK11HALS_Stream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(unsigned __int8 *)(*(void *)(result + 32) + 52);
  return result;
}

uint64_t HALS_Stream::GetPropertyDataSize(uint64_t a1, uint64_t a2, int *a3)
{
  int v3 = *a3;
  if (*a3 <= 1935894637)
  {
    if (v3 > 1885762622)
    {
      if (v3 > 1885762668)
      {
        if (v3 == 1885762669) {
          return 40;
        }
        int v4 = 1935762292;
LABEL_25:
        if (v3 == v4) {
          return 4;
        }
        return HALS_Object::GetPropertyDataSize(a1, a2, a3);
      }
      if (v3 == 1885762623) {
        return 40;
      }
      unsigned __int16 v5 = 29793;
    }
    else
    {
      if (v3 <= 1885762591)
      {
        if (v3 == 1819107691) {
          return 8;
        }
        int v4 = 1819569763;
        goto LABEL_25;
      }
      if (v3 == 1885762592) {
        return 40;
      }
      unsigned __int16 v5 = 29731;
    }
    if (v3 != (v5 | 0x70660000)) {
      return HALS_Object::GetPropertyDataSize(a1, a2, a3);
    }
    return 0;
  }
  if (v3 <= 1936092512)
  {
    if (v3 <= 1936092450)
    {
      if (v3 == 1935894638) {
        return 4;
      }
      int v4 = 1935960434;
      goto LABEL_25;
    }
    if (v3 != 1936092451)
    {
      unsigned __int16 v6 = 27967;
      goto LABEL_29;
    }
    return 0;
  }
  if (v3 > 1936092531)
  {
    if (v3 != 1936092532)
    {
      if (v3 != 1952542835)
      {
        int v4 = 1952805485;
        goto LABEL_25;
      }
      return 4;
    }
    return 40;
  }
  if (v3 == 1936092513) {
    return 0;
  }
  unsigned __int16 v6 = 28013;
LABEL_29:
  if (v3 == (v6 | 0x73660000)) {
    return 40;
  }
  return HALS_Object::GetPropertyDataSize(a1, a2, a3);
}

uint64_t HALS_Stream::IsPropertySettable(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result = 0;
  int v4 = *a3;
  if (*a3 > 1935894637)
  {
    if (v4 <= 1936092512)
    {
      if (v4 <= 1936092450)
      {
        BOOL v6 = v4 == 1935894638;
        int v7 = 1935960434;
        goto LABEL_24;
      }
      BOOL v6 = v4 == 1936092451;
      unsigned __int16 v8 = 27967;
    }
    else
    {
      if (v4 > 1936092531)
      {
        if (v4 != 1952805485 && v4 != 1952542835)
        {
          if (v4 != 1936092532) {
            return HALS_Object::IsPropertySettable(0, a2, a3);
          }
          return 1;
        }
        return result;
      }
      BOOL v6 = v4 == 1936092513;
      unsigned __int16 v8 = 28013;
    }
    int v7 = v8 | 0x73660000;
LABEL_24:
    if (!v6 && v4 != v7) {
      return HALS_Object::IsPropertySettable(0, a2, a3);
    }
    return result;
  }
  if (v4 > 1885762622)
  {
    if (v4 > 1885762668)
    {
      BOOL v6 = v4 == 1885762669;
      int v7 = 1935762292;
    }
    else
    {
      BOOL v6 = v4 == 1885762623;
      int v7 = 1885762657;
    }
    goto LABEL_24;
  }
  if (v4 <= 1885762591)
  {
    BOOL v6 = v4 == 1819107691;
    int v7 = 1819569763;
    goto LABEL_24;
  }
  if (v4 == 1885762592) {
    return 1;
  }
  if (v4 != 1885762595) {
    return HALS_Object::IsPropertySettable(0, a2, a3);
  }
  return result;
}

uint64_t HALS_Stream::HasProperty(HALS_Stream *this, unsigned int a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  signed int mSelector = a3->mSelector;
  uint64_t v5 = 1;
  if ((int)a3->mSelector > 1935762291)
  {
    if (mSelector <= 1936092478)
    {
      if (mSelector > 1935960433)
      {
        if (mSelector == 1935960434) {
          return v5;
        }
        int v9 = 1936092451;
      }
      else
      {
        if (mSelector == 1935762292) {
          return v5;
        }
        int v9 = 1935894638;
      }
      goto LABEL_33;
    }
    if (mSelector > 1937007733)
    {
      if (mSelector == 1937007734) {
        return v5;
      }
      if (mSelector != 1952542835)
      {
        int v9 = 1952805485;
LABEL_33:
        if (mSelector == v9) {
          return v5;
        }
      }
    }
    else
    {
      unsigned int v8 = mSelector - 1936092479;
      if (v8 <= 0x35 && ((1 << v8) & 0x20400400000001) != 0) {
        return v5;
      }
    }
    return 0;
  }
  if (mSelector <= 1870098019)
  {
    if (mSelector <= 1819107690)
    {
      if (mSelector == 1650682995) {
        return v5;
      }
      int v9 = 1668047219;
    }
    else
    {
      if (mSelector == 1819107691)
      {
        uint64_t v12 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 7));
        std::logic_error v14 = (HALS_ObjectMap *)v12;
        if (v12)
        {
          uint64_t v16 = 0x676C6F626C6D616BLL;
          int v17 = 0;
          uint64_t v5 = (*(uint64_t (**)(uint64_t, void, uint64_t *, HALS_Client *))(*(void *)v12 + 88))(v12, *((unsigned int *)this + 7), &v16, a4);
        }
        else
        {
          uint64_t v5 = 0;
        }
        HALS_ObjectMap::ReleaseObject(v14, v13);
        return v5;
      }
      if (mSelector == 1819569763) {
        return v5;
      }
      int v9 = 1869638759;
    }
    goto LABEL_33;
  }
  if (mSelector > 1885762656)
  {
    if (mSelector == 1885762657) {
      return v5;
    }
    int v9 = 1885762669;
    goto LABEL_33;
  }
  if (((mSelector - 1885762592) > 0x1F || ((1 << (mSelector - 32)) & 0x80000009) == 0)
    && mSelector != 1870098020)
  {
    return 0;
  }
  return v5;
}

void sub_1BAEBBE30(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void HALS_Stream::~HALS_Stream(HALS_Stream *this)
{
  HALS_Object::~HALS_Object(this);

  JUMPOUT(0x1C1859840);
}

void HALS_Stream::GetCurrentVirtualFormat(HALS_Stream *this, AudioStreamBasicDescription *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((unsigned int *)this + 4);
  strcpy(buf, "tmfsbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  LODWORD(v19[0]) = 0;
  uint64_t v5 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(HALS_Stream *, uint64_t, unsigned char *, uint64_t, void *, AudioStreamBasicDescription *, void, void, void))(*(void *)this + 112))(this, v4, buf, 40, v19, a2, 0, 0, 0);
  if (a2->mSampleRate <= 0.0)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    BOOL v6 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = pthread_self();
      mach_port_t v17 = pthread_mach_thread_np(v16);
      int v18 = *((_DWORD *)this + 4);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v17;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "HALS_Stream.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 441;
      LOWORD(v21) = 1024;
      *(_DWORD *)((char *)&v21 + 2) = v18;
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Invalid stream virtual format %u sample rate is 0", buf, 0x1Eu);
    }
  }
  uint64_t v7 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
  int v9 = (HALS_ObjectMap *)v7;
  if (v7)
  {
    *(void *)AudioObjectPropertyAddress buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x3002000000;
    unsigned int v21 = __Block_byref_object_copy__65_18653;
    uint64_t v22 = __Block_byref_object_dispose__66_18654;
    char v23 = 0;
    char v24 = 0;
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 0x40000000;
    void v19[2] = ___ZNK11HALS_Device39GetClientChannelCountFromDSPDescriptionEv_block_invoke;
    void v19[3] = &unk_1E6235B30;
    v19[4] = buf;
    v19[5] = v7;
    long long v10 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 56))(v7);
    HALB_CommandGate::ExecuteCommand(v10, (uint64_t)v19);
    uint64_t v11 = *(void *)(*(void *)&buf[8] + 40);
    _Block_object_dispose(buf, 8);
    if ((v11 & 0xFF00000000) != 0)
    {
      AudioFormatFlags mFormatFlags = a2->mFormatFlags;
      if ((mFormatFlags & 0x20) != 0)
      {
        UInt32 mChannelsPerFrame = 1;
      }
      else
      {
        UInt32 mChannelsPerFrame = a2->mChannelsPerFrame;
        if (!mChannelsPerFrame)
        {
          UInt32 v14 = (a2->mBitsPerChannel + 7) >> 3;
LABEL_13:
          UInt32 v15 = v14 * v11;
          a2->AudioFormatFlags mFormatFlags = mFormatFlags & 0xFFFFFFDF;
          a2->mBytesPerPacket = v15;
          a2->mFramesPerPacket = 1;
          a2->mBytesPerFrame = v15;
          a2->UInt32 mChannelsPerFrame = v11;
          goto LABEL_14;
        }
      }
      UInt32 v14 = a2->mBytesPerFrame / mChannelsPerFrame;
      goto LABEL_13;
    }
  }
LABEL_14:
  HALS_ObjectMap::ReleaseObject(v9, v8);
}

void sub_1BAEBC12C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void DSP_Host_OffloadDictionary::make_empty(DSP_Host_OffloadDictionary *this)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  v6[1] = Mutable;
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&cf, Mutable);
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)v6, v3);
  uint64_t v4 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = v6[0];
  v6[0] = v4;
  if (v4) {
    CFRelease(v4);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1BAEBC228(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  CFTypeRef v3 = va_arg(va1, const void *);
  uint64_t v5 = va_arg(va1, void);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_OffloadDictionary::get_debug_string(DSP_Host_OffloadDictionary *this, uint64_t a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  CFDictionaryRef v4 = *(const __CFDictionary **)(a2 + 16);
  if (v4 && CFDictionaryGetCount(v4))
  {
    DSP_Host_OffloadDictionary::get_offload_id_list(&v15, a2);
    std::vector<std::string>::pointer begin = v15.__begin_;
    std::vector<std::string>::pointer end = v15.__end_;
    if (v15.__begin_ != v15.__end_)
    {
      uint64_t v7 = "'";
      do
      {
        if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v8 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        size_t v9 = strlen(v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)v7, v9);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)p_p, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"'", 1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        ++begin;
        uint64_t v7 = " '";
      }
      while (begin != end);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"<no offloads>", 13);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(this, (uint64_t)v18);
  v16[0] = *MEMORY[0x1E4FBA408];
  uint64_t v12 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v17 = v12;
  v18[0] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1859700](&v20);
}

void sub_1BAEBC4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
}

void DSP_Host_OffloadDictionary::get_offload_id_list(std::vector<std::string> *this, uint64_t a2)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  CFDictionaryRef v3 = *(const __CFDictionary **)(a2 + 16);
  if (v3 && CFDictionaryGetCount(v3))
  {
    CFDictionaryRef v5 = *(const __CFDictionary **)(a2 + 16);
    if (!v5)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFIndex Count = CFDictionaryGetCount(v5);
    __p[0] = 0;
    std::vector<__CFString const*>::vector(&keys, Count, __p);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a2 + 16), (const void **)keys, 0);
    uint64_t v7 = (CFTypeRef *)keys;
    long long v8 = v20;
    if (keys != v20)
    {
      do
      {
        CFTypeRef v9 = *v7;
        if (*v7) {
          CFRetain(*v7);
        }
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v9);
        if (!cf)
        {
          std::logic_error v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v13, "Could not construct");
          __cxa_throw(v13, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::convert_as<std::string,0>((uint64_t)__p, (const __CFString *)cf);
        if (cf) {
          CFRelease(cf);
        }
        if (v18)
        {
          std::vector<std::string>::pointer end = this->__end_;
          if (end >= this->__end_cap_.__value_)
          {
            std::vector<std::string>::pointer v12 = std::vector<std::string>::__push_back_slow_path<std::string const&>(this, (long long *)__p);
            char v11 = HIBYTE(v17);
          }
          else
          {
            char v11 = HIBYTE(v17);
            if (SHIBYTE(v17) < 0)
            {
              std::string::__init_copy_ctor_external(this->__end_, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
            }
            else
            {
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
              end->__r_.__value_.__r.__words[2] = v17;
            }
            std::vector<std::string>::pointer v12 = end + 1;
            this->__end_ = end + 1;
          }
          this->__end_ = v12;
          if (v11 < 0) {
            operator delete(__p[0]);
          }
        }
        ++v7;
      }
      while (v7 != (CFTypeRef *)v8);
      uint64_t v7 = (CFTypeRef *)keys;
    }
    if (v7)
    {
      uint64_t v20 = (void **)v7;
      operator delete(v7);
    }
  }
}

void sub_1BAEBC6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  __cxa_free_exception(v18);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void *std::vector<__CFString const*>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<__CFString const*>::__vallocate[abi:ne180100](a1, a2);
    BOOL v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1BAEBC7CC(_Unwind_Exception *exception_object)
{
  CFDictionaryRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL DSP_Host_OffloadDictionary::has_all_id(DSP_Host_OffloadDictionary *this)
{
  CFDictionaryRef v2 = (const __CFDictionary *)*((void *)this + 2);
  if (!v2 || !CFDictionaryGetCount(v2)) {
    return 0;
  }
  CFDictionaryRef v3 = (const __CFDictionary *)*((void *)this + 2);
  if (!v3)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  return applesauce::CF::details::has_key<__CFString const*>(v3, @"all available");
}

void sub_1BAEBC878(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

DSP_Host_OffloadDictionary *DSP_Host_OffloadDictionary::remove(DSP_Host_OffloadDictionary *this, const DSP_Host_OffloadDictionary *a2)
{
  CFDictionaryRef v3 = (const __CFDictionary *)*((void *)this + 2);
  if (v3)
  {
    if (CFDictionaryGetCount(v3))
    {
      CFDictionaryRef v5 = (const __CFDictionary *)*((void *)a2 + 2);
      if (v5)
      {
        if (CFDictionaryGetCount(v5))
        {
          if (DSP_Host_OffloadDictionary::has_all_id(a2))
          {
            DSP_Host_OffloadDictionary::make_empty(this);
          }
          else
          {
            DSP_Host_OffloadDictionary::get_offload_id_list(&v26, (uint64_t)this);
            CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
            uint64_t v25 = Mutable;
            std::vector<std::string>::pointer begin = v26.__begin_;
            for (std::vector<std::string>::pointer i = v26.__end_; begin != i; ++begin)
            {
              if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v24, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
              }
              else
              {
                long long v9 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
                v24.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v9;
              }
              if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v10 = &v24;
              }
              else {
                long long v10 = (std::string *)v24.__r_.__value_.__r.__words[0];
              }
              if (v10)
              {
                if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  CFIndex size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
                }
                else {
                  CFIndex size = v24.__r_.__value_.__l.__size_;
                }
                std::vector<std::string>::pointer v12 = (__CFString *)CFStringCreateWithBytes(0, (const UInt8 *)v10, size, 0x8000100u, 0);
                char v23 = v12;
                if (!v12)
                {
                  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(exception, "Could not construct");
                  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
              }
              else
              {
                std::vector<std::string>::pointer v12 = 0;
                char v23 = 0;
              }
              CFDictionaryRef v13 = (const __CFDictionary *)*((void *)a2 + 2);
              if (!v13)
              {
                char v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v18, "Could not construct");
                __cxa_throw(v18, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              if (!applesauce::CF::details::has_key<applesauce::CF::StringRef &>(v13, v12))
              {
                CFDictionaryRef v14 = (const __CFDictionary *)*((void *)this + 2);
                if (!v14)
                {
                  uint64_t v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v20, "Could not construct");
                  __cxa_throw(v20, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,applesauce::CF::StringRef &>(&cf, v14, v12);
                if (v22) {
                  mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>(Mutable, v12, cf);
                }
                std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
              }
              if (v12) {
                CFRelease(v12);
              }
              if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v24.__r_.__value_.__l.__data_);
              }
            }
            mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&cf, Mutable);
            CFTypeRef v15 = cf;
            CFTypeRef cf = 0;
            applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v24, v15);
            uint64_t v16 = (const void *)*((void *)this + 2);
            *((void *)this + 2) = v24.__r_.__value_.__r.__words[0];
            v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
            if (v16) {
              CFRelease(v16);
            }
            if (cf) {
              CFRelease(cf);
            }
            if (Mutable) {
              CFRelease(Mutable);
            }
            v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
          }
        }
      }
    }
  }
  return this;
}

void sub_1BAEBCB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, uint64_t a11, char a12, __int16 *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, const void *a20,__int16 a21,char a22,char a23)
{
  std::string __p = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL applesauce::CF::details::has_key<applesauce::CF::StringRef &>(const __CFDictionary *a1, const void *a2)
{
  return a2 && CFDictionaryContainsKey(a1, a2) != 0;
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,applesauce::CF::StringRef &>(unsigned char *a1, CFDictionaryRef theDict, void *key)
{
  if (!key) {
    goto LABEL_6;
  }
  Value = CFDictionaryGetValue(theDict, key);
  CFDictionaryRef v5 = Value;
  if (!Value) {
    goto LABEL_6;
  }
  CFRetain(Value);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFDictionaryGetTypeID())
  {
    CFRelease(v5);
LABEL_6:
    char v7 = 0;
    *a1 = 0;
    goto LABEL_7;
  }
  *(void *)a1 = v5;
  char v7 = 1;
LABEL_7:
  a1[8] = v7;
}

BOOL DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary *this, const DSP_Host_OffloadDictionary *a2)
{
  DSP_Host_OffloadDictionary::get_offload_id_list(&v13, (uint64_t)this);
  DSP_Host_OffloadDictionary::get_offload_id_list(&v12, (uint64_t)a2);
  unint64_t v3 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v13.__end_ - (char *)v13.__begin_) >> 3));
  if (v13.__end_ == v13.__begin_) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v3;
  }
  std::__introsort<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_0 &,std::string *,false>((unint64_t)v13.__begin_, (__n128 *)v13.__end_, v4, 1);
  unint64_t v5 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v12.__end_ - (char *)v12.__begin_) >> 3));
  if (v12.__end_ == v12.__begin_) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  std::__introsort<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *,false>((unint64_t)v12.__begin_, (__n128 *)v12.__end_, v6, 1);
  std::vector<std::string>::pointer begin = v13.__begin_;
  std::vector<std::string>::pointer end = v13.__end_;
  std::vector<std::string>::pointer v9 = v12.__begin_;
  if ((char *)v13.__end_ - (char *)v13.__begin_ == (char *)v12.__end_ - (char *)v12.__begin_)
  {
    if (v13.__begin_ == v13.__end_)
    {
      BOOL v10 = 1;
    }
    else
    {
      do
      {
        BOOL v10 = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>((unsigned __int8 *)begin, (unsigned __int8 *)v9);
        if (!v10) {
          break;
        }
        ++begin;
        ++v9;
      }
      while (begin != end);
    }
  }
  else
  {
    BOOL v10 = 0;
  }
  CFDictionaryRef v14 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  v12.__begin_ = (std::vector<std::string>::pointer)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  return v10;
}

void sub_1BAEBCDCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_0 &,std::string *,false>(unint64_t a1, __n128 *a2, uint64_t a3, char a4)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  while (2)
  {
    BOOL v10 = &a2[-2].n128_u64[1];
    uint64_t v104 = a2 - 3;
    uint64_t v106 = a2;
    char v11 = &a2[-5].n128_u64[1];
    std::vector<std::string> v12 = (__n128 *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
          if (v5 || !v4)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, (void *)a1) & 0x80) != 0)
                {
                  __n128 v41 = *(__n128 *)a1;
                  unint64_t v109 = *(void *)(a1 + 16);
                  __n128 v108 = v41;
                  __n128 v42 = *(__n128 *)v10;
                  *(void *)(a1 + 16) = v10[2];
                  *(__n128 *)a1 = v42;
                  __n128 v43 = v108;
                  void v10[2] = v109;
                  *(__n128 *)BOOL v10 = v43;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)a1, (void *)(a1 + 24), v10);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((__n128 *)a1, (void *)(a1 + 24), (void *)(a1 + 48), v10);
                break;
              case 5uLL:
                uint64_t v44 = (__n128 *)(a1 + 24);
                unsigned int v45 = (__n128 *)(a1 + 48);
                uint64_t v46 = (__n128 *)(a1 + 72);
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((__n128 *)a1, (void *)(a1 + 24), (void *)(a1 + 48), (void *)(a1 + 72));
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, (void *)(a1 + 72)) & 0x80) != 0)
                {
                  __n128 v108 = *v46;
                  __n128 v47 = v108;
                  unint64_t v109 = *(void *)(a1 + 88);
                  unint64_t v48 = v109;
                  unint64_t v49 = v10[2];
                  *uint64_t v46 = *(__n128 *)v10;
                  *(void *)(a1 + 88) = v49;
                  void v10[2] = v48;
                  *(__n128 *)BOOL v10 = v47;
                  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 72), (void *)(a1 + 48)) & 0x80) != 0)
                  {
                    uint64_t v50 = *(void *)(a1 + 64);
                    __n128 v51 = *v45;
                    __n128 *v45 = *v46;
                    *(void *)(a1 + 64) = *(void *)(a1 + 88);
                    *uint64_t v46 = v51;
                    *(void *)(a1 + 88) = v50;
                    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 48), (void *)(a1 + 24)) & 0x80) != 0)
                    {
                      uint64_t v52 = *(void *)(a1 + 40);
                      __n128 v53 = *v44;
                      *uint64_t v44 = *v45;
                      *(void *)(a1 + 40) = *(void *)(a1 + 64);
                      __n128 *v45 = v53;
                      *(void *)(a1 + 64) = v52;
                      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), (void *)a1) & 0x80) != 0)
                      {
                        __n128 v54 = *(__n128 *)a1;
                        unint64_t v109 = *(void *)(a1 + 16);
                        __n128 v108 = v54;
                        *(__n128 *)a1 = *v44;
                        *(void *)(a1 + 16) = *(void *)(a1 + 40);
                        *uint64_t v44 = v108;
                        *(void *)(a1 + 40) = v109;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 575)
          {
            char v55 = (__n128 *)(a1 + 24);
            BOOL v57 = (__n128 *)a1 == a2 || v55 == a2;
            if (a4)
            {
              if (!v57)
              {
                uint64_t v58 = 0;
                n128_u64 = (void *)a1;
                do
                {
                  uint64_t v60 = n128_u64;
                  n128_u64 = v55->n128_u64;
                  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, v60) & 0x80) != 0)
                  {
                    __n128 v61 = *(__n128 *)n128_u64;
                    unint64_t v109 = n128_u64[2];
                    __n128 v108 = v61;
                    n128_u64[1] = 0;
                    n128_u64[2] = 0;
                    void *n128_u64 = 0;
                    uint64_t v62 = v58;
                    while (1)
                    {
                      uint64_t v63 = a1 + v62;
                      *(_OWORD *)(v63 + 24) = *(_OWORD *)(a1 + v62);
                      *(void *)(v63 + 40) = *(void *)(a1 + v62 + 16);
                      *(unsigned char *)(v63 + 23) = 0;
                      *(unsigned char *)uint64_t v63 = 0;
                      if (!v62) {
                        break;
                      }
                      v62 -= 24;
                      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v108, (void *)(v62 + a1)) & 0x80) == 0)
                      {
                        uint64_t v64 = a1 + v62 + 24;
                        goto LABEL_85;
                      }
                    }
                    uint64_t v64 = a1;
LABEL_85:
                    __n128 v65 = v108;
                    *(void *)(v64 + 16) = v109;
                    *(__n128 *)uint64_t v64 = v65;
                  }
                  char v55 = (__n128 *)(n128_u64 + 3);
                  v58 += 24;
                }
                while (n128_u64 + 3 != (void *)a2);
              }
            }
            else if (!v57)
            {
              do
              {
                std::string v98 = (void *)a1;
                a1 = (unint64_t)v55;
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, v98) & 0x80) != 0)
                {
                  __n128 v99 = *(__n128 *)a1;
                  unint64_t v109 = *(void *)(a1 + 16);
                  __n128 v108 = v99;
                  *(void *)(a1 + 8) = 0;
                  *(void *)(a1 + 16) = 0;
                  *(void *)a1 = 0;
                  unint64_t v100 = a1;
                  do
                  {
                    unint64_t v101 = v100 - 24;
                    *(_OWORD *)unint64_t v100 = *(_OWORD *)(v100 - 24);
                    *(void *)(v100 + 16) = *(void *)(v100 - 8);
                    *(unsigned char *)(v100 - 1) = 0;
                    *(unsigned char *)(v100 - 24) = 0;
                    char v102 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v108, (void *)(v100 - 48));
                    unint64_t v100 = v101;
                  }
                  while (v102 < 0);
                  __n128 v103 = v108;
                  *(void *)(v101 + 16) = v109;
                  *(__n128 *)unint64_t v101 = v103;
                }
                char v55 = (__n128 *)(a1 + 24);
              }
              while ((__n128 *)(a1 + 24) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((__n128 *)a1 != a2)
            {
              int64_t v66 = (v14 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = a1 + 24 * v69;
                  if (2 * v67 + 2 < (uint64_t)v14
                    && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24 * v69), (void *)(v70 + 24)) & 0x80u) != 0)
                  {
                    v70 += 24;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  uint64_t v71 = (__n128 *)(a1 + 24 * v68);
                  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v70, v71) & 0x80) == 0)
                  {
                    __n128 v72 = *v71;
                    unint64_t v109 = v71[1].n128_u64[0];
                    __n128 v108 = v72;
                    v71->n128_u64[1] = 0;
                    v71[1].n128_u64[0] = 0;
                    v71->n128_u64[0] = 0;
                    do
                    {
                      int v73 = (__n128 *)v70;
                      __n128 v74 = *(__n128 *)v70;
                      v71[1].n128_u64[0] = *(void *)(v70 + 16);
                      __n128 *v71 = v74;
                      *(unsigned char *)(v70 + 23) = 0;
                      *(unsigned char *)unint64_t v70 = 0;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v75 = (2 * v69) | 1;
                      unint64_t v70 = a1 + 24 * v75;
                      uint64_t v76 = 2 * v69 + 2;
                      if (v76 < (uint64_t)v14
                        && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24 * v75), (void *)(v70 + 24)) & 0x80u) != 0)
                      {
                        v70 += 24;
                        uint64_t v75 = v76;
                      }
                      uint64_t v71 = v73;
                      uint64_t v69 = v75;
                    }
                    while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v70, &v108) & 0x80) == 0);
                    __n128 v77 = v108;
                    v73[1].n128_u64[0] = v109;
                    __n128 *v73 = v77;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v78 = v13 / 0x18uLL;
              uint64_t v79 = v106;
              do
              {
                uint64_t v80 = 0;
                int v81 = v79;
                unint64_t v105 = *(void *)a1;
                v110.n128_u64[0] = *(void *)(a1 + 8);
                *(unint64_t *)((char *)v110.n128_u64 + 7) = *(void *)(a1 + 15);
                unsigned __int8 v107 = *(unsigned char *)(a1 + 23);
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)a1 = 0;
                unint64_t v82 = a1;
                do
                {
                  uint64_t v83 = v82 + 24 * v80 + 24;
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  uint64_t v85 = v84 + 2;
                  if (v84 + 2 < v78
                    && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v83, (void *)(v83 + 24)) & 0x80u) != 0)
                  {
                    v83 += 24;
                    uint64_t v80 = v85;
                  }
                  if (*(char *)(v82 + 23) < 0) {
                    operator delete(*(void **)v82);
                  }
                  __n128 v86 = *(__n128 *)v83;
                  *(void *)(v82 + 16) = *(void *)(v83 + 16);
                  *(__n128 *)unint64_t v82 = v86;
                  *(unsigned char *)(v83 + 23) = 0;
                  *(unsigned char *)uint64_t v83 = 0;
                  unint64_t v82 = v83;
                }
                while (v80 <= (uint64_t)((unint64_t)(v78 - 2) >> 1));
                uint64_t v79 = (__n128 *)((char *)v79 - 24);
                if ((__int8 *)v83 == &v81[-2].n128_i8[8])
                {
                  *(void *)uint64_t v83 = v105;
                  uint64_t v96 = *(uint64_t *)((char *)v110.n128_i64 + 7);
                  *(void *)(v83 + 8) = v110.n128_u64[0];
                  *(void *)(v83 + 15) = v96;
                  *(unsigned char *)(v83 + 23) = v107;
                }
                else
                {
                  __n128 v87 = *v79;
                  *(void *)(v83 + 16) = v81[-1].n128_u64[1];
                  *(__n128 *)uint64_t v83 = v87;
                  v81[-2].n128_u64[1] = v105;
                  unint64_t v88 = v110.n128_u64[0];
                  *(unint64_t *)((char *)v81[-1].n128_u64 + 7) = *(unint64_t *)((char *)v110.n128_u64 + 7);
                  v81[-1].n128_u64[0] = v88;
                  v81[-1].n128_u8[15] = v107;
                  uint64_t v89 = v83 - a1 + 24;
                  if (v89 >= 25)
                  {
                    unint64_t v90 = (v89 / 0x18uLL - 2) >> 1;
                    unint64_t v91 = a1 + 24 * v90;
                    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v91, (void *)v83) & 0x80) != 0)
                    {
                      __n128 v92 = *(__n128 *)v83;
                      unint64_t v109 = *(void *)(v83 + 16);
                      __n128 v108 = v92;
                      *(void *)(v83 + 8) = 0;
                      *(void *)(v83 + 16) = 0;
                      *(void *)uint64_t v83 = 0;
                      do
                      {
                        uint64_t v93 = v91;
                        long long v94 = *(_OWORD *)v91;
                        *(void *)(v83 + 16) = *(void *)(v91 + 16);
                        *(_OWORD *)uint64_t v83 = v94;
                        *(unsigned char *)(v91 + 23) = 0;
                        *(unsigned char *)unint64_t v91 = 0;
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                        unint64_t v91 = a1 + 24 * v90;
                        uint64_t v83 = v93;
                      }
                      while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v91, &v108) & 0x80) != 0);
                      __n128 v95 = v108;
                      *(void *)(v93 + 16) = v109;
                      *(__n128 *)uint64_t v93 = v95;
                    }
                  }
                }
              }
              while (v78-- > 2);
            }
            return;
          }
          CFTypeRef v15 = (void *)(a1 + 24 * (v14 >> 1));
          if ((unint64_t)v13 >= 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)a1, (void *)(a1 + 24 * (v14 >> 1)), v10);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)(a1 + 24), (void *)(a1 + 24 * (v14 >> 1) - 24), v104);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)(a1 + 48), (void *)(a1 + 24 + 24 * (v14 >> 1)), v11);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)(a1 + 24 * (v14 >> 1) - 24), v15, (void *)(a1 + 24 + 24 * (v14 >> 1)));
            __n128 v16 = *(__n128 *)a1;
            unint64_t v109 = *(void *)(a1 + 16);
            __n128 v108 = v16;
            uint64_t v17 = v15[2];
            *(_OWORD *)a1 = *(_OWORD *)v15;
            *(void *)(a1 + 16) = v17;
            __n128 v18 = v108;
            _DWORD v15[2] = v109;
            *(__n128 *)CFTypeRef v15 = v18;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)(a1 + 24 * (v14 >> 1)), (void *)a1, v10);
          }
          --a3;
          a2 = v106;
          if ((a4 & 1) != 0
            || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 - 24), (void *)a1) & 0x80) != 0)
          {
            break;
          }
          __n128 v31 = *(__n128 *)a1;
          unint64_t v111 = *(void *)(a1 + 16);
          __n128 v110 = v31;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v10) & 0x80) != 0)
          {
            std::vector<std::string> v12 = (__n128 *)a1;
            do
              std::vector<std::string> v12 = (__n128 *)((char *)v12 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v12) & 0x80) == 0);
          }
          else
          {
            uint64_t v32 = (__n128 *)(a1 + 24);
            do
            {
              std::vector<std::string> v12 = v32;
              if (v32 >= v106) {
                break;
              }
              char v33 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v32);
              uint64_t v32 = (__n128 *)((char *)v12 + 24);
            }
            while ((v33 & 0x80) == 0);
          }
          long long v34 = v106;
          if (v12 < v106)
          {
            long long v34 = v106;
            do
              long long v34 = (__n128 *)((char *)v34 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v34) & 0x80) != 0);
          }
          while (v12 < v34)
          {
            __n128 v35 = *v12;
            unint64_t v109 = v12[1].n128_u64[0];
            __n128 v108 = v35;
            __n128 v36 = *v34;
            v12[1].n128_u64[0] = v34[1].n128_u64[0];
            *std::vector<std::string> v12 = v36;
            __n128 v37 = v108;
            v34[1].n128_u64[0] = v109;
            *long long v34 = v37;
            do
              std::vector<std::string> v12 = (__n128 *)((char *)v12 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v12) & 0x80) == 0);
            do
              long long v34 = (__n128 *)((char *)v34 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v34) & 0x80) != 0);
          }
          uint64_t v38 = &v12[-2].n128_i8[8];
          BOOL v4 = (unint64_t)&v12[-2].n128_u64[1] >= a1;
          BOOL v5 = &v12[-2].n128_i8[8] == (__int8 *)a1;
          if (&v12[-2].n128_i8[8] == (__int8 *)a1)
          {
            if (v12[-1].n128_i8[15] < 0) {
              operator delete(*(void **)a1);
            }
          }
          else
          {
            if (*(char *)(a1 + 23) < 0) {
              operator delete(*(void **)a1);
            }
            long long v39 = *(_OWORD *)v38;
            *(void *)(a1 + 16) = v12[-1].n128_u64[1];
            *(_OWORD *)a1 = v39;
            v12[-1].n128_u8[15] = 0;
            v12[-2].n128_u8[8] = 0;
          }
          a4 = 0;
          __n128 v40 = v110;
          v12[-1].n128_u64[1] = v111;
          *(__n128 *)uint64_t v38 = v40;
        }
        __n128 v19 = *(__n128 *)a1;
        unint64_t v111 = *(void *)(a1 + 16);
        __n128 v110 = v19;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        uint64_t v20 = (__n128 *)a1;
        do
        {
          unsigned int v21 = v20;
          uint64_t v20 = (__n128 *)((char *)v20 + 24);
        }
        while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, &v110) & 0x80) != 0);
        char v22 = v106;
        if (v21 == (__n128 *)a1)
        {
          char v22 = v106;
          do
          {
            if (v20 >= v22) {
              break;
            }
            char v22 = (__n128 *)((char *)v22 - 24);
          }
          while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, &v110) & 0x80) == 0);
        }
        else
        {
          do
            char v22 = (__n128 *)((char *)v22 - 24);
          while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, &v110) & 0x80) == 0);
        }
        std::vector<std::string> v12 = v20;
        if (v20 < v22)
        {
          char v23 = v22;
          do
          {
            __n128 v108 = *v12;
            __n128 v24 = v108;
            unint64_t v109 = v12[1].n128_u64[0];
            unint64_t v25 = v109;
            unint64_t v26 = v23[1].n128_u64[0];
            *std::vector<std::string> v12 = *v23;
            v12[1].n128_u64[0] = v26;
            v23[1].n128_u64[0] = v25;
            *char v23 = v24;
            do
              std::vector<std::string> v12 = (__n128 *)((char *)v12 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, &v110) & 0x80) != 0);
            do
              char v23 = (__n128 *)((char *)v23 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v23, &v110) & 0x80) == 0);
          }
          while (v12 < v23);
        }
        mach_port_t v27 = &v12[-2].n128_i8[8];
        if (&v12[-2].n128_i8[8] == (__int8 *)a1)
        {
          if (v12[-1].n128_i8[15] < 0) {
            operator delete(*(void **)a1);
          }
        }
        else
        {
          if (*(char *)(a1 + 23) < 0) {
            operator delete(*(void **)a1);
          }
          long long v28 = *(_OWORD *)v27;
          *(void *)(a1 + 16) = v12[-1].n128_u64[1];
          *(_OWORD *)a1 = v28;
          v12[-1].n128_u8[15] = 0;
          v12[-2].n128_u8[8] = 0;
        }
        __n128 v29 = v110;
        v12[-1].n128_u64[1] = v111;
        *(__n128 *)mach_port_t v27 = v29;
        if (v20 >= v22) {
          break;
        }
LABEL_35:
        std::__introsort<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_0 &,std::string *,false>(a1, &v12[-2].n128_i8[8], a3, a4 & 1);
        a4 = 0;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_0 &,std::string *>((__n128 *)a1, (__n128 *)((char *)v12 - 24));
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_0 &,std::string *>(v12, v106))
      {
        break;
      }
      if (!v30) {
        goto LABEL_35;
      }
    }
    a2 = (__n128 *)((char *)v12 - 24);
    if (!v30) {
      continue;
    }
    break;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *,false>(unint64_t a1, __n128 *a2, uint64_t a3, char a4)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  while (2)
  {
    BOOL v10 = &a2[-2].n128_u64[1];
    uint64_t v104 = a2 - 3;
    uint64_t v106 = a2;
    char v11 = &a2[-5].n128_u64[1];
    std::vector<std::string> v12 = (__n128 *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
          if (v5 || !v4)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, (void *)a1) & 0x80) != 0)
                {
                  __n128 v41 = *(__n128 *)a1;
                  unint64_t v109 = *(void *)(a1 + 16);
                  __n128 v108 = v41;
                  __n128 v42 = *(__n128 *)v10;
                  *(void *)(a1 + 16) = v10[2];
                  *(__n128 *)a1 = v42;
                  __n128 v43 = v108;
                  void v10[2] = v109;
                  *(__n128 *)BOOL v10 = v43;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)a1, (void *)(a1 + 24), v10);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((__n128 *)a1, (void *)(a1 + 24), (void *)(a1 + 48), v10);
                break;
              case 5uLL:
                uint64_t v44 = (__n128 *)(a1 + 24);
                unsigned int v45 = (__n128 *)(a1 + 48);
                uint64_t v46 = (__n128 *)(a1 + 72);
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((__n128 *)a1, (void *)(a1 + 24), (void *)(a1 + 48), (void *)(a1 + 72));
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, (void *)(a1 + 72)) & 0x80) != 0)
                {
                  __n128 v108 = *v46;
                  __n128 v47 = v108;
                  unint64_t v109 = *(void *)(a1 + 88);
                  unint64_t v48 = v109;
                  unint64_t v49 = v10[2];
                  *uint64_t v46 = *(__n128 *)v10;
                  *(void *)(a1 + 88) = v49;
                  void v10[2] = v48;
                  *(__n128 *)BOOL v10 = v47;
                  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 72), (void *)(a1 + 48)) & 0x80) != 0)
                  {
                    uint64_t v50 = *(void *)(a1 + 64);
                    __n128 v51 = *v45;
                    __n128 *v45 = *v46;
                    *(void *)(a1 + 64) = *(void *)(a1 + 88);
                    *uint64_t v46 = v51;
                    *(void *)(a1 + 88) = v50;
                    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 48), (void *)(a1 + 24)) & 0x80) != 0)
                    {
                      uint64_t v52 = *(void *)(a1 + 40);
                      __n128 v53 = *v44;
                      *uint64_t v44 = *v45;
                      *(void *)(a1 + 40) = *(void *)(a1 + 64);
                      __n128 *v45 = v53;
                      *(void *)(a1 + 64) = v52;
                      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), (void *)a1) & 0x80) != 0)
                      {
                        __n128 v54 = *(__n128 *)a1;
                        unint64_t v109 = *(void *)(a1 + 16);
                        __n128 v108 = v54;
                        *(__n128 *)a1 = *v44;
                        *(void *)(a1 + 16) = *(void *)(a1 + 40);
                        *uint64_t v44 = v108;
                        *(void *)(a1 + 40) = v109;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 575)
          {
            char v55 = (__n128 *)(a1 + 24);
            BOOL v57 = (__n128 *)a1 == a2 || v55 == a2;
            if (a4)
            {
              if (!v57)
              {
                uint64_t v58 = 0;
                n128_u64 = (void *)a1;
                do
                {
                  uint64_t v60 = n128_u64;
                  n128_u64 = v55->n128_u64;
                  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, v60) & 0x80) != 0)
                  {
                    __n128 v61 = *(__n128 *)n128_u64;
                    unint64_t v109 = n128_u64[2];
                    __n128 v108 = v61;
                    n128_u64[1] = 0;
                    n128_u64[2] = 0;
                    void *n128_u64 = 0;
                    uint64_t v62 = v58;
                    while (1)
                    {
                      uint64_t v63 = a1 + v62;
                      *(_OWORD *)(v63 + 24) = *(_OWORD *)(a1 + v62);
                      *(void *)(v63 + 40) = *(void *)(a1 + v62 + 16);
                      *(unsigned char *)(v63 + 23) = 0;
                      *(unsigned char *)uint64_t v63 = 0;
                      if (!v62) {
                        break;
                      }
                      v62 -= 24;
                      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v108, (void *)(v62 + a1)) & 0x80) == 0)
                      {
                        uint64_t v64 = a1 + v62 + 24;
                        goto LABEL_85;
                      }
                    }
                    uint64_t v64 = a1;
LABEL_85:
                    __n128 v65 = v108;
                    *(void *)(v64 + 16) = v109;
                    *(__n128 *)uint64_t v64 = v65;
                  }
                  char v55 = (__n128 *)(n128_u64 + 3);
                  v58 += 24;
                }
                while (n128_u64 + 3 != (void *)a2);
              }
            }
            else if (!v57)
            {
              do
              {
                std::string v98 = (void *)a1;
                a1 = (unint64_t)v55;
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, v98) & 0x80) != 0)
                {
                  __n128 v99 = *(__n128 *)a1;
                  unint64_t v109 = *(void *)(a1 + 16);
                  __n128 v108 = v99;
                  *(void *)(a1 + 8) = 0;
                  *(void *)(a1 + 16) = 0;
                  *(void *)a1 = 0;
                  unint64_t v100 = a1;
                  do
                  {
                    unint64_t v101 = v100 - 24;
                    *(_OWORD *)unint64_t v100 = *(_OWORD *)(v100 - 24);
                    *(void *)(v100 + 16) = *(void *)(v100 - 8);
                    *(unsigned char *)(v100 - 1) = 0;
                    *(unsigned char *)(v100 - 24) = 0;
                    char v102 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v108, (void *)(v100 - 48));
                    unint64_t v100 = v101;
                  }
                  while (v102 < 0);
                  __n128 v103 = v108;
                  *(void *)(v101 + 16) = v109;
                  *(__n128 *)unint64_t v101 = v103;
                }
                char v55 = (__n128 *)(a1 + 24);
              }
              while ((__n128 *)(a1 + 24) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((__n128 *)a1 != a2)
            {
              int64_t v66 = (v14 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = a1 + 24 * v69;
                  if (2 * v67 + 2 < (uint64_t)v14
                    && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24 * v69), (void *)(v70 + 24)) & 0x80u) != 0)
                  {
                    v70 += 24;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  uint64_t v71 = (__n128 *)(a1 + 24 * v68);
                  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v70, v71) & 0x80) == 0)
                  {
                    __n128 v72 = *v71;
                    unint64_t v109 = v71[1].n128_u64[0];
                    __n128 v108 = v72;
                    v71->n128_u64[1] = 0;
                    v71[1].n128_u64[0] = 0;
                    v71->n128_u64[0] = 0;
                    do
                    {
                      int v73 = (__n128 *)v70;
                      __n128 v74 = *(__n128 *)v70;
                      v71[1].n128_u64[0] = *(void *)(v70 + 16);
                      __n128 *v71 = v74;
                      *(unsigned char *)(v70 + 23) = 0;
                      *(unsigned char *)unint64_t v70 = 0;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v75 = (2 * v69) | 1;
                      unint64_t v70 = a1 + 24 * v75;
                      uint64_t v76 = 2 * v69 + 2;
                      if (v76 < (uint64_t)v14
                        && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24 * v75), (void *)(v70 + 24)) & 0x80u) != 0)
                      {
                        v70 += 24;
                        uint64_t v75 = v76;
                      }
                      uint64_t v71 = v73;
                      uint64_t v69 = v75;
                    }
                    while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v70, &v108) & 0x80) == 0);
                    __n128 v77 = v108;
                    v73[1].n128_u64[0] = v109;
                    __n128 *v73 = v77;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v78 = v13 / 0x18uLL;
              uint64_t v79 = v106;
              do
              {
                uint64_t v80 = 0;
                int v81 = v79;
                unint64_t v105 = *(void *)a1;
                v110.n128_u64[0] = *(void *)(a1 + 8);
                *(unint64_t *)((char *)v110.n128_u64 + 7) = *(void *)(a1 + 15);
                unsigned __int8 v107 = *(unsigned char *)(a1 + 23);
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)a1 = 0;
                unint64_t v82 = a1;
                do
                {
                  uint64_t v83 = v82 + 24 * v80 + 24;
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  uint64_t v85 = v84 + 2;
                  if (v84 + 2 < v78
                    && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v83, (void *)(v83 + 24)) & 0x80u) != 0)
                  {
                    v83 += 24;
                    uint64_t v80 = v85;
                  }
                  if (*(char *)(v82 + 23) < 0) {
                    operator delete(*(void **)v82);
                  }
                  __n128 v86 = *(__n128 *)v83;
                  *(void *)(v82 + 16) = *(void *)(v83 + 16);
                  *(__n128 *)unint64_t v82 = v86;
                  *(unsigned char *)(v83 + 23) = 0;
                  *(unsigned char *)uint64_t v83 = 0;
                  unint64_t v82 = v83;
                }
                while (v80 <= (uint64_t)((unint64_t)(v78 - 2) >> 1));
                uint64_t v79 = (__n128 *)((char *)v79 - 24);
                if ((__int8 *)v83 == &v81[-2].n128_i8[8])
                {
                  *(void *)uint64_t v83 = v105;
                  uint64_t v96 = *(uint64_t *)((char *)v110.n128_i64 + 7);
                  *(void *)(v83 + 8) = v110.n128_u64[0];
                  *(void *)(v83 + 15) = v96;
                  *(unsigned char *)(v83 + 23) = v107;
                }
                else
                {
                  __n128 v87 = *v79;
                  *(void *)(v83 + 16) = v81[-1].n128_u64[1];
                  *(__n128 *)uint64_t v83 = v87;
                  v81[-2].n128_u64[1] = v105;
                  unint64_t v88 = v110.n128_u64[0];
                  *(unint64_t *)((char *)v81[-1].n128_u64 + 7) = *(unint64_t *)((char *)v110.n128_u64 + 7);
                  v81[-1].n128_u64[0] = v88;
                  v81[-1].n128_u8[15] = v107;
                  uint64_t v89 = v83 - a1 + 24;
                  if (v89 >= 25)
                  {
                    unint64_t v90 = (v89 / 0x18uLL - 2) >> 1;
                    unint64_t v91 = a1 + 24 * v90;
                    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v91, (void *)v83) & 0x80) != 0)
                    {
                      __n128 v92 = *(__n128 *)v83;
                      unint64_t v109 = *(void *)(v83 + 16);
                      __n128 v108 = v92;
                      *(void *)(v83 + 8) = 0;
                      *(void *)(v83 + 16) = 0;
                      *(void *)uint64_t v83 = 0;
                      do
                      {
                        uint64_t v93 = v91;
                        long long v94 = *(_OWORD *)v91;
                        *(void *)(v83 + 16) = *(void *)(v91 + 16);
                        *(_OWORD *)uint64_t v83 = v94;
                        *(unsigned char *)(v91 + 23) = 0;
                        *(unsigned char *)unint64_t v91 = 0;
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                        unint64_t v91 = a1 + 24 * v90;
                        uint64_t v83 = v93;
                      }
                      while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v91, &v108) & 0x80) != 0);
                      __n128 v95 = v108;
                      *(void *)(v93 + 16) = v109;
                      *(__n128 *)uint64_t v93 = v95;
                    }
                  }
                }
              }
              while (v78-- > 2);
            }
            return;
          }
          CFTypeRef v15 = (void *)(a1 + 24 * (v14 >> 1));
          if ((unint64_t)v13 >= 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)a1, (void *)(a1 + 24 * (v14 >> 1)), v10);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)(a1 + 24), (void *)(a1 + 24 * (v14 >> 1) - 24), v104);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)(a1 + 48), (void *)(a1 + 24 + 24 * (v14 >> 1)), v11);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)(a1 + 24 * (v14 >> 1) - 24), v15, (void *)(a1 + 24 + 24 * (v14 >> 1)));
            __n128 v16 = *(__n128 *)a1;
            unint64_t v109 = *(void *)(a1 + 16);
            __n128 v108 = v16;
            uint64_t v17 = v15[2];
            *(_OWORD *)a1 = *(_OWORD *)v15;
            *(void *)(a1 + 16) = v17;
            __n128 v18 = v108;
            _DWORD v15[2] = v109;
            *(__n128 *)CFTypeRef v15 = v18;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)(a1 + 24 * (v14 >> 1)), (void *)a1, v10);
          }
          --a3;
          a2 = v106;
          if ((a4 & 1) != 0
            || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 - 24), (void *)a1) & 0x80) != 0)
          {
            break;
          }
          __n128 v31 = *(__n128 *)a1;
          unint64_t v111 = *(void *)(a1 + 16);
          __n128 v110 = v31;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v10) & 0x80) != 0)
          {
            std::vector<std::string> v12 = (__n128 *)a1;
            do
              std::vector<std::string> v12 = (__n128 *)((char *)v12 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v12) & 0x80) == 0);
          }
          else
          {
            uint64_t v32 = (__n128 *)(a1 + 24);
            do
            {
              std::vector<std::string> v12 = v32;
              if (v32 >= v106) {
                break;
              }
              char v33 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v32);
              uint64_t v32 = (__n128 *)((char *)v12 + 24);
            }
            while ((v33 & 0x80) == 0);
          }
          long long v34 = v106;
          if (v12 < v106)
          {
            long long v34 = v106;
            do
              long long v34 = (__n128 *)((char *)v34 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v34) & 0x80) != 0);
          }
          while (v12 < v34)
          {
            __n128 v35 = *v12;
            unint64_t v109 = v12[1].n128_u64[0];
            __n128 v108 = v35;
            __n128 v36 = *v34;
            v12[1].n128_u64[0] = v34[1].n128_u64[0];
            *std::vector<std::string> v12 = v36;
            __n128 v37 = v108;
            v34[1].n128_u64[0] = v109;
            *long long v34 = v37;
            do
              std::vector<std::string> v12 = (__n128 *)((char *)v12 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v12) & 0x80) == 0);
            do
              long long v34 = (__n128 *)((char *)v34 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v34) & 0x80) != 0);
          }
          uint64_t v38 = &v12[-2].n128_i8[8];
          BOOL v4 = (unint64_t)&v12[-2].n128_u64[1] >= a1;
          BOOL v5 = &v12[-2].n128_i8[8] == (__int8 *)a1;
          if (&v12[-2].n128_i8[8] == (__int8 *)a1)
          {
            if (v12[-1].n128_i8[15] < 0) {
              operator delete(*(void **)a1);
            }
          }
          else
          {
            if (*(char *)(a1 + 23) < 0) {
              operator delete(*(void **)a1);
            }
            long long v39 = *(_OWORD *)v38;
            *(void *)(a1 + 16) = v12[-1].n128_u64[1];
            *(_OWORD *)a1 = v39;
            v12[-1].n128_u8[15] = 0;
            v12[-2].n128_u8[8] = 0;
          }
          a4 = 0;
          __n128 v40 = v110;
          v12[-1].n128_u64[1] = v111;
          *(__n128 *)uint64_t v38 = v40;
        }
        __n128 v19 = *(__n128 *)a1;
        unint64_t v111 = *(void *)(a1 + 16);
        __n128 v110 = v19;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        uint64_t v20 = (__n128 *)a1;
        do
        {
          unsigned int v21 = v20;
          uint64_t v20 = (__n128 *)((char *)v20 + 24);
        }
        while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, &v110) & 0x80) != 0);
        char v22 = v106;
        if (v21 == (__n128 *)a1)
        {
          char v22 = v106;
          do
          {
            if (v20 >= v22) {
              break;
            }
            char v22 = (__n128 *)((char *)v22 - 24);
          }
          while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, &v110) & 0x80) == 0);
        }
        else
        {
          do
            char v22 = (__n128 *)((char *)v22 - 24);
          while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, &v110) & 0x80) == 0);
        }
        std::vector<std::string> v12 = v20;
        if (v20 < v22)
        {
          char v23 = v22;
          do
          {
            __n128 v108 = *v12;
            __n128 v24 = v108;
            unint64_t v109 = v12[1].n128_u64[0];
            unint64_t v25 = v109;
            unint64_t v26 = v23[1].n128_u64[0];
            *std::vector<std::string> v12 = *v23;
            v12[1].n128_u64[0] = v26;
            v23[1].n128_u64[0] = v25;
            *char v23 = v24;
            do
              std::vector<std::string> v12 = (__n128 *)((char *)v12 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, &v110) & 0x80) != 0);
            do
              char v23 = (__n128 *)((char *)v23 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v23, &v110) & 0x80) == 0);
          }
          while (v12 < v23);
        }
        mach_port_t v27 = &v12[-2].n128_i8[8];
        if (&v12[-2].n128_i8[8] == (__int8 *)a1)
        {
          if (v12[-1].n128_i8[15] < 0) {
            operator delete(*(void **)a1);
          }
        }
        else
        {
          if (*(char *)(a1 + 23) < 0) {
            operator delete(*(void **)a1);
          }
          long long v28 = *(_OWORD *)v27;
          *(void *)(a1 + 16) = v12[-1].n128_u64[1];
          *(_OWORD *)a1 = v28;
          v12[-1].n128_u8[15] = 0;
          v12[-2].n128_u8[8] = 0;
        }
        __n128 v29 = v110;
        v12[-1].n128_u64[1] = v111;
        *(__n128 *)mach_port_t v27 = v29;
        if (v20 >= v22) {
          break;
        }
LABEL_35:
        std::__introsort<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *,false>(a1, &v12[-2].n128_i8[8], a3, a4 & 1);
        a4 = 0;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((__n128 *)a1, (__n128 *)((char *)v12 - 24));
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(v12, v106))
      {
        break;
      }
      if (!v30) {
        goto LABEL_35;
      }
    }
    a2 = (__n128 *)((char *)v12 - 24);
    if (!v30) {
      continue;
    }
    break;
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(void *a1, void *a2, void *a3)
{
  char v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, a1);
  uint64_t result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, a2);
  if (v6 < 0)
  {
    if ((char)result < 0)
    {
      uint64_t v17 = a1[2];
      long long v18 = *(_OWORD *)a1;
      uint64_t v20 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v20;
    }
    else
    {
      uint64_t v14 = a1[2];
      long long v15 = *(_OWORD *)a1;
      uint64_t v16 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v16;
      *(_OWORD *)a2 = v15;
      a2[2] = v14;
      uint64_t result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, a2);
      if ((result & 0x80) == 0) {
        return result;
      }
      uint64_t v17 = a2[2];
      long long v18 = *(_OWORD *)a2;
      uint64_t v19 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v19;
    }
    *(_OWORD *)a3 = v18;
    a3[2] = v17;
  }
  else if ((char)result < 0)
  {
    uint64_t v8 = a2[2];
    long long v9 = *(_OWORD *)a2;
    uint64_t v10 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v10;
    *(_OWORD *)a3 = v9;
    a3[2] = v8;
    uint64_t result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, a1);
    if ((result & 0x80) != 0)
    {
      uint64_t v11 = a1[2];
      long long v12 = *(_OWORD *)a1;
      uint64_t v13 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v13;
      *(_OWORD *)a2 = v12;
      a2[2] = v11;
    }
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(__n128 *a1, void *a2, void *a3, void *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, a2, a3);
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a4, a3) & 0x80) != 0)
  {
    uint64_t v9 = a3[2];
    long long v10 = *(_OWORD *)a3;
    uint64_t v11 = a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v11;
    *(_OWORD *)a4 = v10;
    a4[2] = v9;
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, a2) & 0x80) != 0)
    {
      uint64_t v12 = a2[2];
      long long v13 = *(_OWORD *)a2;
      uint64_t v14 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v14;
      *(_OWORD *)a3 = v13;
      a3[2] = v12;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, a1) & 0x80) != 0)
      {
        unint64_t v15 = a1[1].n128_u64[0];
        __n128 result = *a1;
        unint64_t v16 = a2[2];
        *a1 = *(__n128 *)a2;
        a1[1].n128_u64[0] = v16;
        *(__n128 *)a2 = result;
        a2[2] = v15;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(__n128 *a1, __n128 *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      char v6 = (__n128 *)((char *)a2 - 24);
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a2[-2].n128_u64[1], a1) & 0x80) != 0)
      {
        unint64_t v7 = a1[1].n128_u64[0];
        __n128 v8 = *a1;
        unint64_t v9 = v6[1].n128_u64[0];
        *a1 = *v6;
        a1[1].n128_u64[0] = v9;
        __n128 *v6 = v8;
        v6[1].n128_u64[0] = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a2[-2].n128_u64[1]);
      return 1;
    case 5uLL:
      uint64_t v17 = (__n128 *)((char *)a1 + 24);
      long long v18 = a1 + 3;
      uint64_t v19 = &a1[4].n128_i8[8];
      uint64_t v20 = &a2[-2].n128_u64[1];
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1]);
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, &a1[4].n128_u64[1]) & 0x80) != 0)
      {
        unint64_t v21 = a1[5].n128_u64[1];
        __n128 v22 = *(__n128 *)v19;
        unint64_t v23 = v20[2];
        *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
        a1[5].n128_u64[1] = v23;
        *(__n128 *)uint64_t v20 = v22;
        v20[2] = v21;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[4].n128_u64[1], (__n128 *)a1[3].n128_u64) & 0x80) != 0)
        {
          unint64_t v24 = a1[4].n128_u64[0];
          __n128 v25 = *v18;
          *long long v18 = *(__n128 *)v19;
          a1[4].n128_u64[0] = a1[5].n128_u64[1];
          *(__n128 *)uint64_t v19 = v25;
          a1[5].n128_u64[1] = v24;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((__n128 *)a1[3].n128_u64, &a1[1].n128_u64[1]) & 0x80) != 0)
          {
            unint64_t v26 = a1[2].n128_u64[1];
            __n128 v27 = *v17;
            *uint64_t v17 = *v18;
            a1[2].n128_u64[1] = a1[4].n128_u64[0];
            *long long v18 = v27;
            a1[4].n128_u64[0] = v26;
            if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[1].n128_u64[1], a1) & 0x80) != 0)
            {
              unint64_t v28 = a1[1].n128_u64[0];
              __n128 v29 = *a1;
              *a1 = *v17;
              a1[1].n128_u64[0] = a1[2].n128_u64[1];
              *uint64_t v17 = v29;
              a1[2].n128_u64[1] = v28;
            }
          }
        }
      }
      return 1;
    default:
      long long v10 = a1 + 3;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64);
      uint64_t v11 = &a1[4].n128_u64[1];
      if (&a1[4].n128_i8[8] == (__int8 *)a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, v10) & 0x80) != 0)
    {
      long long v30 = *(_OWORD *)v11;
      unint64_t v31 = v11[2];
      v11[1] = 0;
      void v11[2] = 0;
      unint64_t *v11 = 0;
      uint64_t v14 = v12;
      while (1)
      {
        unint64_t v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 72) = *(__n128 *)((char *)a1 + v14 + 48);
        *((void *)v15 + 11) = *(unint64_t *)((char *)a1[4].n128_u64 + v14);
        v15[71] = 0;
        v15[48] = 0;
        if (v14 == -48) {
          break;
        }
        v14 -= 24;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v30, (void *)v15 + 3) & 0x80) == 0)
        {
          uint64_t v16 = (uint64_t)&a1[4].n128_i64[1] + v14;
          goto LABEL_12;
        }
      }
      uint64_t v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)uint64_t v16 = v30;
      *(void *)(v16 + 16) = v31;
      if (++v13 == 8) {
        return v11 + 3 == (unint64_t *)a2;
      }
    }
    long long v10 = (__n128 *)v11;
    v12 += 24;
    v11 += 3;
    if (v11 == (unint64_t *)a2) {
      return 1;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_0 &,std::string *>(__n128 *a1, __n128 *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      char v6 = (__n128 *)((char *)a2 - 24);
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a2[-2].n128_u64[1], a1) & 0x80) != 0)
      {
        unint64_t v7 = a1[1].n128_u64[0];
        __n128 v8 = *a1;
        unint64_t v9 = v6[1].n128_u64[0];
        *a1 = *v6;
        a1[1].n128_u64[0] = v9;
        __n128 *v6 = v8;
        v6[1].n128_u64[0] = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a2[-2].n128_u64[1]);
      return 1;
    case 5uLL:
      uint64_t v17 = (__n128 *)((char *)a1 + 24);
      long long v18 = a1 + 3;
      uint64_t v19 = &a1[4].n128_i8[8];
      uint64_t v20 = &a2[-2].n128_u64[1];
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1]);
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, &a1[4].n128_u64[1]) & 0x80) != 0)
      {
        unint64_t v21 = a1[5].n128_u64[1];
        __n128 v22 = *(__n128 *)v19;
        unint64_t v23 = v20[2];
        *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
        a1[5].n128_u64[1] = v23;
        *(__n128 *)uint64_t v20 = v22;
        v20[2] = v21;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[4].n128_u64[1], (__n128 *)a1[3].n128_u64) & 0x80) != 0)
        {
          unint64_t v24 = a1[4].n128_u64[0];
          __n128 v25 = *v18;
          *long long v18 = *(__n128 *)v19;
          a1[4].n128_u64[0] = a1[5].n128_u64[1];
          *(__n128 *)uint64_t v19 = v25;
          a1[5].n128_u64[1] = v24;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((__n128 *)a1[3].n128_u64, &a1[1].n128_u64[1]) & 0x80) != 0)
          {
            unint64_t v26 = a1[2].n128_u64[1];
            __n128 v27 = *v17;
            *uint64_t v17 = *v18;
            a1[2].n128_u64[1] = a1[4].n128_u64[0];
            *long long v18 = v27;
            a1[4].n128_u64[0] = v26;
            if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[1].n128_u64[1], a1) & 0x80) != 0)
            {
              unint64_t v28 = a1[1].n128_u64[0];
              __n128 v29 = *a1;
              *a1 = *v17;
              a1[1].n128_u64[0] = a1[2].n128_u64[1];
              *uint64_t v17 = v29;
              a1[2].n128_u64[1] = v28;
            }
          }
        }
      }
      return 1;
    default:
      long long v10 = a1 + 3;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64);
      uint64_t v11 = &a1[4].n128_u64[1];
      if (&a1[4].n128_i8[8] == (__int8 *)a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, v10) & 0x80) != 0)
    {
      long long v30 = *(_OWORD *)v11;
      unint64_t v31 = v11[2];
      v11[1] = 0;
      void v11[2] = 0;
      unint64_t *v11 = 0;
      uint64_t v14 = v12;
      while (1)
      {
        unint64_t v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 72) = *(__n128 *)((char *)a1 + v14 + 48);
        *((void *)v15 + 11) = *(unint64_t *)((char *)a1[4].n128_u64 + v14);
        v15[71] = 0;
        v15[48] = 0;
        if (v14 == -48) {
          break;
        }
        v14 -= 24;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v30, (void *)v15 + 3) & 0x80) == 0)
        {
          uint64_t v16 = (uint64_t)&a1[4].n128_i64[1] + v14;
          goto LABEL_12;
        }
      }
      uint64_t v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)uint64_t v16 = v30;
      *(void *)(v16 + 16) = v31;
      if (++v13 == 8) {
        return v11 + 3 == (unint64_t *)a2;
      }
    }
    long long v10 = (__n128 *)v11;
    v12 += 24;
    v11 += 3;
    if (v11 == (unint64_t *)a2) {
      return 1;
    }
  }
}

void DSP_Host_OffloadDictionary::deep_copy(DSP_Host_OffloadDictionary *this)
{
}

void sub_1BAEBEAA0(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

DSP_Host_OffloadDictionary *DSP_Host_OffloadDictionary::deep_copy_from(DSP_Host_OffloadDictionary *this, const __CFString *a2)
{
  uint64_t v4 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(v4);
  }
  if (a2)
  {
    CFDictionaryRef v5 = PropertyListDeepImmutableCopy(a2);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v8, v5);
    char v6 = (const void *)*((void *)this + 2);
    *((void *)this + 2) = v8;
    __n128 v8 = v6;
    if (v6) {
      CFRelease(v6);
    }
  }
  return this;
}

void std::__introsort<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::deep_copy_from_changed(__CFDictionary const*)::$_0 &,std::string *,false>(unint64_t a1, __n128 *a2, uint64_t a3, char a4)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  while (2)
  {
    long long v10 = &a2[-2].n128_u64[1];
    uint64_t v104 = a2 - 3;
    uint64_t v106 = a2;
    uint64_t v11 = &a2[-5].n128_u64[1];
    uint64_t v12 = (__n128 *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
          if (v5 || !v4)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, (void *)a1) & 0x80) != 0)
                {
                  __n128 v41 = *(__n128 *)a1;
                  unint64_t v109 = *(void *)(a1 + 16);
                  __n128 v108 = v41;
                  __n128 v42 = *(__n128 *)v10;
                  *(void *)(a1 + 16) = v10[2];
                  *(__n128 *)a1 = v42;
                  __n128 v43 = v108;
                  void v10[2] = v109;
                  *(__n128 *)long long v10 = v43;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)a1, (void *)(a1 + 24), v10);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((__n128 *)a1, (void *)(a1 + 24), (void *)(a1 + 48), v10);
                break;
              case 5uLL:
                uint64_t v44 = (__n128 *)(a1 + 24);
                unsigned int v45 = (__n128 *)(a1 + 48);
                uint64_t v46 = (__n128 *)(a1 + 72);
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((__n128 *)a1, (void *)(a1 + 24), (void *)(a1 + 48), (void *)(a1 + 72));
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, (void *)(a1 + 72)) & 0x80) != 0)
                {
                  __n128 v108 = *v46;
                  __n128 v47 = v108;
                  unint64_t v109 = *(void *)(a1 + 88);
                  unint64_t v48 = v109;
                  unint64_t v49 = v10[2];
                  *uint64_t v46 = *(__n128 *)v10;
                  *(void *)(a1 + 88) = v49;
                  void v10[2] = v48;
                  *(__n128 *)long long v10 = v47;
                  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 72), (void *)(a1 + 48)) & 0x80) != 0)
                  {
                    uint64_t v50 = *(void *)(a1 + 64);
                    __n128 v51 = *v45;
                    __n128 *v45 = *v46;
                    *(void *)(a1 + 64) = *(void *)(a1 + 88);
                    *uint64_t v46 = v51;
                    *(void *)(a1 + 88) = v50;
                    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 48), (void *)(a1 + 24)) & 0x80) != 0)
                    {
                      uint64_t v52 = *(void *)(a1 + 40);
                      __n128 v53 = *v44;
                      *uint64_t v44 = *v45;
                      *(void *)(a1 + 40) = *(void *)(a1 + 64);
                      __n128 *v45 = v53;
                      *(void *)(a1 + 64) = v52;
                      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), (void *)a1) & 0x80) != 0)
                      {
                        __n128 v54 = *(__n128 *)a1;
                        unint64_t v109 = *(void *)(a1 + 16);
                        __n128 v108 = v54;
                        *(__n128 *)a1 = *v44;
                        *(void *)(a1 + 16) = *(void *)(a1 + 40);
                        *uint64_t v44 = v108;
                        *(void *)(a1 + 40) = v109;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 575)
          {
            char v55 = (__n128 *)(a1 + 24);
            BOOL v57 = (__n128 *)a1 == a2 || v55 == a2;
            if (a4)
            {
              if (!v57)
              {
                uint64_t v58 = 0;
                n128_u64 = (void *)a1;
                do
                {
                  uint64_t v60 = n128_u64;
                  n128_u64 = v55->n128_u64;
                  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, v60) & 0x80) != 0)
                  {
                    __n128 v61 = *(__n128 *)n128_u64;
                    unint64_t v109 = n128_u64[2];
                    __n128 v108 = v61;
                    n128_u64[1] = 0;
                    n128_u64[2] = 0;
                    void *n128_u64 = 0;
                    uint64_t v62 = v58;
                    while (1)
                    {
                      uint64_t v63 = a1 + v62;
                      *(_OWORD *)(v63 + 24) = *(_OWORD *)(a1 + v62);
                      *(void *)(v63 + 40) = *(void *)(a1 + v62 + 16);
                      *(unsigned char *)(v63 + 23) = 0;
                      *(unsigned char *)uint64_t v63 = 0;
                      if (!v62) {
                        break;
                      }
                      v62 -= 24;
                      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v108, (void *)(v62 + a1)) & 0x80) == 0)
                      {
                        uint64_t v64 = a1 + v62 + 24;
                        goto LABEL_85;
                      }
                    }
                    uint64_t v64 = a1;
LABEL_85:
                    __n128 v65 = v108;
                    *(void *)(v64 + 16) = v109;
                    *(__n128 *)uint64_t v64 = v65;
                  }
                  char v55 = (__n128 *)(n128_u64 + 3);
                  v58 += 24;
                }
                while (n128_u64 + 3 != (void *)a2);
              }
            }
            else if (!v57)
            {
              do
              {
                std::string v98 = (void *)a1;
                a1 = (unint64_t)v55;
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, v98) & 0x80) != 0)
                {
                  __n128 v99 = *(__n128 *)a1;
                  unint64_t v109 = *(void *)(a1 + 16);
                  __n128 v108 = v99;
                  *(void *)(a1 + 8) = 0;
                  *(void *)(a1 + 16) = 0;
                  *(void *)a1 = 0;
                  unint64_t v100 = a1;
                  do
                  {
                    unint64_t v101 = v100 - 24;
                    *(_OWORD *)unint64_t v100 = *(_OWORD *)(v100 - 24);
                    *(void *)(v100 + 16) = *(void *)(v100 - 8);
                    *(unsigned char *)(v100 - 1) = 0;
                    *(unsigned char *)(v100 - 24) = 0;
                    char v102 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v108, (void *)(v100 - 48));
                    unint64_t v100 = v101;
                  }
                  while (v102 < 0);
                  __n128 v103 = v108;
                  *(void *)(v101 + 16) = v109;
                  *(__n128 *)unint64_t v101 = v103;
                }
                char v55 = (__n128 *)(a1 + 24);
              }
              while ((__n128 *)(a1 + 24) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((__n128 *)a1 != a2)
            {
              int64_t v66 = (v14 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = a1 + 24 * v69;
                  if (2 * v67 + 2 < (uint64_t)v14
                    && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24 * v69), (void *)(v70 + 24)) & 0x80u) != 0)
                  {
                    v70 += 24;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  uint64_t v71 = (__n128 *)(a1 + 24 * v68);
                  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v70, v71) & 0x80) == 0)
                  {
                    __n128 v72 = *v71;
                    unint64_t v109 = v71[1].n128_u64[0];
                    __n128 v108 = v72;
                    v71->n128_u64[1] = 0;
                    v71[1].n128_u64[0] = 0;
                    v71->n128_u64[0] = 0;
                    do
                    {
                      int v73 = (__n128 *)v70;
                      __n128 v74 = *(__n128 *)v70;
                      v71[1].n128_u64[0] = *(void *)(v70 + 16);
                      __n128 *v71 = v74;
                      *(unsigned char *)(v70 + 23) = 0;
                      *(unsigned char *)unint64_t v70 = 0;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v75 = (2 * v69) | 1;
                      unint64_t v70 = a1 + 24 * v75;
                      uint64_t v76 = 2 * v69 + 2;
                      if (v76 < (uint64_t)v14
                        && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24 * v75), (void *)(v70 + 24)) & 0x80u) != 0)
                      {
                        v70 += 24;
                        uint64_t v75 = v76;
                      }
                      uint64_t v71 = v73;
                      uint64_t v69 = v75;
                    }
                    while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v70, &v108) & 0x80) == 0);
                    __n128 v77 = v108;
                    v73[1].n128_u64[0] = v109;
                    __n128 *v73 = v77;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v78 = v13 / 0x18uLL;
              uint64_t v79 = v106;
              do
              {
                uint64_t v80 = 0;
                int v81 = v79;
                unint64_t v105 = *(void *)a1;
                v110.n128_u64[0] = *(void *)(a1 + 8);
                *(unint64_t *)((char *)v110.n128_u64 + 7) = *(void *)(a1 + 15);
                unsigned __int8 v107 = *(unsigned char *)(a1 + 23);
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)a1 = 0;
                unint64_t v82 = a1;
                do
                {
                  uint64_t v83 = v82 + 24 * v80 + 24;
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  uint64_t v85 = v84 + 2;
                  if (v84 + 2 < v78
                    && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v83, (void *)(v83 + 24)) & 0x80u) != 0)
                  {
                    v83 += 24;
                    uint64_t v80 = v85;
                  }
                  if (*(char *)(v82 + 23) < 0) {
                    operator delete(*(void **)v82);
                  }
                  __n128 v86 = *(__n128 *)v83;
                  *(void *)(v82 + 16) = *(void *)(v83 + 16);
                  *(__n128 *)unint64_t v82 = v86;
                  *(unsigned char *)(v83 + 23) = 0;
                  *(unsigned char *)uint64_t v83 = 0;
                  unint64_t v82 = v83;
                }
                while (v80 <= (uint64_t)((unint64_t)(v78 - 2) >> 1));
                uint64_t v79 = (__n128 *)((char *)v79 - 24);
                if ((__int8 *)v83 == &v81[-2].n128_i8[8])
                {
                  *(void *)uint64_t v83 = v105;
                  uint64_t v96 = *(uint64_t *)((char *)v110.n128_i64 + 7);
                  *(void *)(v83 + 8) = v110.n128_u64[0];
                  *(void *)(v83 + 15) = v96;
                  *(unsigned char *)(v83 + 23) = v107;
                }
                else
                {
                  __n128 v87 = *v79;
                  *(void *)(v83 + 16) = v81[-1].n128_u64[1];
                  *(__n128 *)uint64_t v83 = v87;
                  v81[-2].n128_u64[1] = v105;
                  unint64_t v88 = v110.n128_u64[0];
                  *(unint64_t *)((char *)v81[-1].n128_u64 + 7) = *(unint64_t *)((char *)v110.n128_u64 + 7);
                  v81[-1].n128_u64[0] = v88;
                  v81[-1].n128_u8[15] = v107;
                  uint64_t v89 = v83 - a1 + 24;
                  if (v89 >= 25)
                  {
                    unint64_t v90 = (v89 / 0x18uLL - 2) >> 1;
                    unint64_t v91 = a1 + 24 * v90;
                    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v91, (void *)v83) & 0x80) != 0)
                    {
                      __n128 v92 = *(__n128 *)v83;
                      unint64_t v109 = *(void *)(v83 + 16);
                      __n128 v108 = v92;
                      *(void *)(v83 + 8) = 0;
                      *(void *)(v83 + 16) = 0;
                      *(void *)uint64_t v83 = 0;
                      do
                      {
                        uint64_t v93 = v91;
                        long long v94 = *(_OWORD *)v91;
                        *(void *)(v83 + 16) = *(void *)(v91 + 16);
                        *(_OWORD *)uint64_t v83 = v94;
                        *(unsigned char *)(v91 + 23) = 0;
                        *(unsigned char *)unint64_t v91 = 0;
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                        unint64_t v91 = a1 + 24 * v90;
                        uint64_t v83 = v93;
                      }
                      while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v91, &v108) & 0x80) != 0);
                      __n128 v95 = v108;
                      *(void *)(v93 + 16) = v109;
                      *(__n128 *)uint64_t v93 = v95;
                    }
                  }
                }
              }
              while (v78-- > 2);
            }
            return;
          }
          unint64_t v15 = (void *)(a1 + 24 * (v14 >> 1));
          if ((unint64_t)v13 >= 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)a1, (void *)(a1 + 24 * (v14 >> 1)), v10);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)(a1 + 24), (void *)(a1 + 24 * (v14 >> 1) - 24), v104);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)(a1 + 48), (void *)(a1 + 24 + 24 * (v14 >> 1)), v11);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)(a1 + 24 * (v14 >> 1) - 24), v15, (void *)(a1 + 24 + 24 * (v14 >> 1)));
            __n128 v16 = *(__n128 *)a1;
            unint64_t v109 = *(void *)(a1 + 16);
            __n128 v108 = v16;
            uint64_t v17 = v15[2];
            *(_OWORD *)a1 = *(_OWORD *)v15;
            *(void *)(a1 + 16) = v17;
            __n128 v18 = v108;
            _DWORD v15[2] = v109;
            *(__n128 *)unint64_t v15 = v18;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)(a1 + 24 * (v14 >> 1)), (void *)a1, v10);
          }
          --a3;
          a2 = v106;
          if ((a4 & 1) != 0
            || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 - 24), (void *)a1) & 0x80) != 0)
          {
            break;
          }
          __n128 v31 = *(__n128 *)a1;
          unint64_t v111 = *(void *)(a1 + 16);
          __n128 v110 = v31;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v10) & 0x80) != 0)
          {
            uint64_t v12 = (__n128 *)a1;
            do
              uint64_t v12 = (__n128 *)((char *)v12 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v12) & 0x80) == 0);
          }
          else
          {
            uint64_t v32 = (__n128 *)(a1 + 24);
            do
            {
              uint64_t v12 = v32;
              if (v32 >= v106) {
                break;
              }
              char v33 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v32);
              uint64_t v32 = (__n128 *)((char *)v12 + 24);
            }
            while ((v33 & 0x80) == 0);
          }
          long long v34 = v106;
          if (v12 < v106)
          {
            long long v34 = v106;
            do
              long long v34 = (__n128 *)((char *)v34 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v34) & 0x80) != 0);
          }
          while (v12 < v34)
          {
            __n128 v35 = *v12;
            unint64_t v109 = v12[1].n128_u64[0];
            __n128 v108 = v35;
            __n128 v36 = *v34;
            v12[1].n128_u64[0] = v34[1].n128_u64[0];
            *uint64_t v12 = v36;
            __n128 v37 = v108;
            v34[1].n128_u64[0] = v109;
            *long long v34 = v37;
            do
              uint64_t v12 = (__n128 *)((char *)v12 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v12) & 0x80) == 0);
            do
              long long v34 = (__n128 *)((char *)v34 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v34) & 0x80) != 0);
          }
          uint64_t v38 = &v12[-2].n128_i8[8];
          BOOL v4 = (unint64_t)&v12[-2].n128_u64[1] >= a1;
          BOOL v5 = &v12[-2].n128_i8[8] == (__int8 *)a1;
          if (&v12[-2].n128_i8[8] == (__int8 *)a1)
          {
            if (v12[-1].n128_i8[15] < 0) {
              operator delete(*(void **)a1);
            }
          }
          else
          {
            if (*(char *)(a1 + 23) < 0) {
              operator delete(*(void **)a1);
            }
            long long v39 = *(_OWORD *)v38;
            *(void *)(a1 + 16) = v12[-1].n128_u64[1];
            *(_OWORD *)a1 = v39;
            v12[-1].n128_u8[15] = 0;
            v12[-2].n128_u8[8] = 0;
          }
          a4 = 0;
          __n128 v40 = v110;
          v12[-1].n128_u64[1] = v111;
          *(__n128 *)uint64_t v38 = v40;
        }
        __n128 v19 = *(__n128 *)a1;
        unint64_t v111 = *(void *)(a1 + 16);
        __n128 v110 = v19;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        uint64_t v20 = (__n128 *)a1;
        do
        {
          unint64_t v21 = v20;
          uint64_t v20 = (__n128 *)((char *)v20 + 24);
        }
        while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, &v110) & 0x80) != 0);
        __n128 v22 = v106;
        if (v21 == (__n128 *)a1)
        {
          __n128 v22 = v106;
          do
          {
            if (v20 >= v22) {
              break;
            }
            __n128 v22 = (__n128 *)((char *)v22 - 24);
          }
          while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, &v110) & 0x80) == 0);
        }
        else
        {
          do
            __n128 v22 = (__n128 *)((char *)v22 - 24);
          while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, &v110) & 0x80) == 0);
        }
        uint64_t v12 = v20;
        if (v20 < v22)
        {
          unint64_t v23 = v22;
          do
          {
            __n128 v108 = *v12;
            __n128 v24 = v108;
            unint64_t v109 = v12[1].n128_u64[0];
            unint64_t v25 = v109;
            unint64_t v26 = v23[1].n128_u64[0];
            *uint64_t v12 = *v23;
            v12[1].n128_u64[0] = v26;
            v23[1].n128_u64[0] = v25;
            *unint64_t v23 = v24;
            do
              uint64_t v12 = (__n128 *)((char *)v12 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, &v110) & 0x80) != 0);
            do
              unint64_t v23 = (__n128 *)((char *)v23 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v23, &v110) & 0x80) == 0);
          }
          while (v12 < v23);
        }
        __n128 v27 = &v12[-2].n128_i8[8];
        if (&v12[-2].n128_i8[8] == (__int8 *)a1)
        {
          if (v12[-1].n128_i8[15] < 0) {
            operator delete(*(void **)a1);
          }
        }
        else
        {
          if (*(char *)(a1 + 23) < 0) {
            operator delete(*(void **)a1);
          }
          long long v28 = *(_OWORD *)v27;
          *(void *)(a1 + 16) = v12[-1].n128_u64[1];
          *(_OWORD *)a1 = v28;
          v12[-1].n128_u8[15] = 0;
          v12[-2].n128_u8[8] = 0;
        }
        __n128 v29 = v110;
        v12[-1].n128_u64[1] = v111;
        *(__n128 *)__n128 v27 = v29;
        if (v20 >= v22) {
          break;
        }
LABEL_35:
        std::__introsort<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::deep_copy_from_changed(__CFDictionary const*)::$_0 &,std::string *,false>(a1, &v12[-2].n128_i8[8], a3, a4 & 1);
        a4 = 0;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::deep_copy_from_changed(__CFDictionary const*)::$_0 &,std::string *>((__n128 *)a1, (__n128 *)((char *)v12 - 24));
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::deep_copy_from_changed(__CFDictionary const*)::$_0 &,std::string *>(v12, v106))
      {
        break;
      }
      if (!v30) {
        goto LABEL_35;
      }
    }
    a2 = (__n128 *)((char *)v12 - 24);
    if (!v30) {
      continue;
    }
    break;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::deep_copy_from_changed(__CFDictionary const*)::$_1 &,std::string *,false>(unint64_t a1, __n128 *a2, uint64_t a3, char a4)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  while (2)
  {
    long long v10 = &a2[-2].n128_u64[1];
    uint64_t v104 = a2 - 3;
    uint64_t v106 = a2;
    uint64_t v11 = &a2[-5].n128_u64[1];
    uint64_t v12 = (__n128 *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
          if (v5 || !v4)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, (void *)a1) & 0x80) != 0)
                {
                  __n128 v41 = *(__n128 *)a1;
                  unint64_t v109 = *(void *)(a1 + 16);
                  __n128 v108 = v41;
                  __n128 v42 = *(__n128 *)v10;
                  *(void *)(a1 + 16) = v10[2];
                  *(__n128 *)a1 = v42;
                  __n128 v43 = v108;
                  void v10[2] = v109;
                  *(__n128 *)long long v10 = v43;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)a1, (void *)(a1 + 24), v10);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((__n128 *)a1, (void *)(a1 + 24), (void *)(a1 + 48), v10);
                break;
              case 5uLL:
                uint64_t v44 = (__n128 *)(a1 + 24);
                unsigned int v45 = (__n128 *)(a1 + 48);
                uint64_t v46 = (__n128 *)(a1 + 72);
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((__n128 *)a1, (void *)(a1 + 24), (void *)(a1 + 48), (void *)(a1 + 72));
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, (void *)(a1 + 72)) & 0x80) != 0)
                {
                  __n128 v108 = *v46;
                  __n128 v47 = v108;
                  unint64_t v109 = *(void *)(a1 + 88);
                  unint64_t v48 = v109;
                  unint64_t v49 = v10[2];
                  *uint64_t v46 = *(__n128 *)v10;
                  *(void *)(a1 + 88) = v49;
                  void v10[2] = v48;
                  *(__n128 *)long long v10 = v47;
                  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 72), (void *)(a1 + 48)) & 0x80) != 0)
                  {
                    uint64_t v50 = *(void *)(a1 + 64);
                    __n128 v51 = *v45;
                    __n128 *v45 = *v46;
                    *(void *)(a1 + 64) = *(void *)(a1 + 88);
                    *uint64_t v46 = v51;
                    *(void *)(a1 + 88) = v50;
                    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 48), (void *)(a1 + 24)) & 0x80) != 0)
                    {
                      uint64_t v52 = *(void *)(a1 + 40);
                      __n128 v53 = *v44;
                      *uint64_t v44 = *v45;
                      *(void *)(a1 + 40) = *(void *)(a1 + 64);
                      __n128 *v45 = v53;
                      *(void *)(a1 + 64) = v52;
                      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), (void *)a1) & 0x80) != 0)
                      {
                        __n128 v54 = *(__n128 *)a1;
                        unint64_t v109 = *(void *)(a1 + 16);
                        __n128 v108 = v54;
                        *(__n128 *)a1 = *v44;
                        *(void *)(a1 + 16) = *(void *)(a1 + 40);
                        *uint64_t v44 = v108;
                        *(void *)(a1 + 40) = v109;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 575)
          {
            char v55 = (__n128 *)(a1 + 24);
            BOOL v57 = (__n128 *)a1 == a2 || v55 == a2;
            if (a4)
            {
              if (!v57)
              {
                uint64_t v58 = 0;
                n128_u64 = (void *)a1;
                do
                {
                  uint64_t v60 = n128_u64;
                  n128_u64 = v55->n128_u64;
                  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, v60) & 0x80) != 0)
                  {
                    __n128 v61 = *(__n128 *)n128_u64;
                    unint64_t v109 = n128_u64[2];
                    __n128 v108 = v61;
                    n128_u64[1] = 0;
                    n128_u64[2] = 0;
                    void *n128_u64 = 0;
                    uint64_t v62 = v58;
                    while (1)
                    {
                      uint64_t v63 = a1 + v62;
                      *(_OWORD *)(v63 + 24) = *(_OWORD *)(a1 + v62);
                      *(void *)(v63 + 40) = *(void *)(a1 + v62 + 16);
                      *(unsigned char *)(v63 + 23) = 0;
                      *(unsigned char *)uint64_t v63 = 0;
                      if (!v62) {
                        break;
                      }
                      v62 -= 24;
                      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v108, (void *)(v62 + a1)) & 0x80) == 0)
                      {
                        uint64_t v64 = a1 + v62 + 24;
                        goto LABEL_85;
                      }
                    }
                    uint64_t v64 = a1;
LABEL_85:
                    __n128 v65 = v108;
                    *(void *)(v64 + 16) = v109;
                    *(__n128 *)uint64_t v64 = v65;
                  }
                  char v55 = (__n128 *)(n128_u64 + 3);
                  v58 += 24;
                }
                while (n128_u64 + 3 != (void *)a2);
              }
            }
            else if (!v57)
            {
              do
              {
                std::string v98 = (void *)a1;
                a1 = (unint64_t)v55;
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, v98) & 0x80) != 0)
                {
                  __n128 v99 = *(__n128 *)a1;
                  unint64_t v109 = *(void *)(a1 + 16);
                  __n128 v108 = v99;
                  *(void *)(a1 + 8) = 0;
                  *(void *)(a1 + 16) = 0;
                  *(void *)a1 = 0;
                  unint64_t v100 = a1;
                  do
                  {
                    unint64_t v101 = v100 - 24;
                    *(_OWORD *)unint64_t v100 = *(_OWORD *)(v100 - 24);
                    *(void *)(v100 + 16) = *(void *)(v100 - 8);
                    *(unsigned char *)(v100 - 1) = 0;
                    *(unsigned char *)(v100 - 24) = 0;
                    char v102 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v108, (void *)(v100 - 48));
                    unint64_t v100 = v101;
                  }
                  while (v102 < 0);
                  __n128 v103 = v108;
                  *(void *)(v101 + 16) = v109;
                  *(__n128 *)unint64_t v101 = v103;
                }
                char v55 = (__n128 *)(a1 + 24);
              }
              while ((__n128 *)(a1 + 24) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((__n128 *)a1 != a2)
            {
              int64_t v66 = (v14 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = a1 + 24 * v69;
                  if (2 * v67 + 2 < (uint64_t)v14
                    && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24 * v69), (void *)(v70 + 24)) & 0x80u) != 0)
                  {
                    v70 += 24;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  uint64_t v71 = (__n128 *)(a1 + 24 * v68);
                  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v70, v71) & 0x80) == 0)
                  {
                    __n128 v72 = *v71;
                    unint64_t v109 = v71[1].n128_u64[0];
                    __n128 v108 = v72;
                    v71->n128_u64[1] = 0;
                    v71[1].n128_u64[0] = 0;
                    v71->n128_u64[0] = 0;
                    do
                    {
                      int v73 = (__n128 *)v70;
                      __n128 v74 = *(__n128 *)v70;
                      v71[1].n128_u64[0] = *(void *)(v70 + 16);
                      __n128 *v71 = v74;
                      *(unsigned char *)(v70 + 23) = 0;
                      *(unsigned char *)unint64_t v70 = 0;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v75 = (2 * v69) | 1;
                      unint64_t v70 = a1 + 24 * v75;
                      uint64_t v76 = 2 * v69 + 2;
                      if (v76 < (uint64_t)v14
                        && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24 * v75), (void *)(v70 + 24)) & 0x80u) != 0)
                      {
                        v70 += 24;
                        uint64_t v75 = v76;
                      }
                      uint64_t v71 = v73;
                      uint64_t v69 = v75;
                    }
                    while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v70, &v108) & 0x80) == 0);
                    __n128 v77 = v108;
                    v73[1].n128_u64[0] = v109;
                    __n128 *v73 = v77;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v78 = v13 / 0x18uLL;
              uint64_t v79 = v106;
              do
              {
                uint64_t v80 = 0;
                int v81 = v79;
                unint64_t v105 = *(void *)a1;
                v110.n128_u64[0] = *(void *)(a1 + 8);
                *(unint64_t *)((char *)v110.n128_u64 + 7) = *(void *)(a1 + 15);
                unsigned __int8 v107 = *(unsigned char *)(a1 + 23);
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)a1 = 0;
                unint64_t v82 = a1;
                do
                {
                  uint64_t v83 = v82 + 24 * v80 + 24;
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  uint64_t v85 = v84 + 2;
                  if (v84 + 2 < v78
                    && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v83, (void *)(v83 + 24)) & 0x80u) != 0)
                  {
                    v83 += 24;
                    uint64_t v80 = v85;
                  }
                  if (*(char *)(v82 + 23) < 0) {
                    operator delete(*(void **)v82);
                  }
                  __n128 v86 = *(__n128 *)v83;
                  *(void *)(v82 + 16) = *(void *)(v83 + 16);
                  *(__n128 *)unint64_t v82 = v86;
                  *(unsigned char *)(v83 + 23) = 0;
                  *(unsigned char *)uint64_t v83 = 0;
                  unint64_t v82 = v83;
                }
                while (v80 <= (uint64_t)((unint64_t)(v78 - 2) >> 1));
                uint64_t v79 = (__n128 *)((char *)v79 - 24);
                if ((__int8 *)v83 == &v81[-2].n128_i8[8])
                {
                  *(void *)uint64_t v83 = v105;
                  uint64_t v96 = *(uint64_t *)((char *)v110.n128_i64 + 7);
                  *(void *)(v83 + 8) = v110.n128_u64[0];
                  *(void *)(v83 + 15) = v96;
                  *(unsigned char *)(v83 + 23) = v107;
                }
                else
                {
                  __n128 v87 = *v79;
                  *(void *)(v83 + 16) = v81[-1].n128_u64[1];
                  *(__n128 *)uint64_t v83 = v87;
                  v81[-2].n128_u64[1] = v105;
                  unint64_t v88 = v110.n128_u64[0];
                  *(unint64_t *)((char *)v81[-1].n128_u64 + 7) = *(unint64_t *)((char *)v110.n128_u64 + 7);
                  v81[-1].n128_u64[0] = v88;
                  v81[-1].n128_u8[15] = v107;
                  uint64_t v89 = v83 - a1 + 24;
                  if (v89 >= 25)
                  {
                    unint64_t v90 = (v89 / 0x18uLL - 2) >> 1;
                    unint64_t v91 = a1 + 24 * v90;
                    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v91, (void *)v83) & 0x80) != 0)
                    {
                      __n128 v92 = *(__n128 *)v83;
                      unint64_t v109 = *(void *)(v83 + 16);
                      __n128 v108 = v92;
                      *(void *)(v83 + 8) = 0;
                      *(void *)(v83 + 16) = 0;
                      *(void *)uint64_t v83 = 0;
                      do
                      {
                        uint64_t v93 = v91;
                        long long v94 = *(_OWORD *)v91;
                        *(void *)(v83 + 16) = *(void *)(v91 + 16);
                        *(_OWORD *)uint64_t v83 = v94;
                        *(unsigned char *)(v91 + 23) = 0;
                        *(unsigned char *)unint64_t v91 = 0;
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                        unint64_t v91 = a1 + 24 * v90;
                        uint64_t v83 = v93;
                      }
                      while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v91, &v108) & 0x80) != 0);
                      __n128 v95 = v108;
                      *(void *)(v93 + 16) = v109;
                      *(__n128 *)uint64_t v93 = v95;
                    }
                  }
                }
              }
              while (v78-- > 2);
            }
            return;
          }
          unint64_t v15 = (void *)(a1 + 24 * (v14 >> 1));
          if ((unint64_t)v13 >= 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)a1, (void *)(a1 + 24 * (v14 >> 1)), v10);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)(a1 + 24), (void *)(a1 + 24 * (v14 >> 1) - 24), v104);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)(a1 + 48), (void *)(a1 + 24 + 24 * (v14 >> 1)), v11);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)(a1 + 24 * (v14 >> 1) - 24), v15, (void *)(a1 + 24 + 24 * (v14 >> 1)));
            __n128 v16 = *(__n128 *)a1;
            unint64_t v109 = *(void *)(a1 + 16);
            __n128 v108 = v16;
            uint64_t v17 = v15[2];
            *(_OWORD *)a1 = *(_OWORD *)v15;
            *(void *)(a1 + 16) = v17;
            __n128 v18 = v108;
            _DWORD v15[2] = v109;
            *(__n128 *)unint64_t v15 = v18;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)(a1 + 24 * (v14 >> 1)), (void *)a1, v10);
          }
          --a3;
          a2 = v106;
          if ((a4 & 1) != 0
            || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 - 24), (void *)a1) & 0x80) != 0)
          {
            break;
          }
          __n128 v31 = *(__n128 *)a1;
          unint64_t v111 = *(void *)(a1 + 16);
          __n128 v110 = v31;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v10) & 0x80) != 0)
          {
            uint64_t v12 = (__n128 *)a1;
            do
              uint64_t v12 = (__n128 *)((char *)v12 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v12) & 0x80) == 0);
          }
          else
          {
            uint64_t v32 = (__n128 *)(a1 + 24);
            do
            {
              uint64_t v12 = v32;
              if (v32 >= v106) {
                break;
              }
              char v33 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v32);
              uint64_t v32 = (__n128 *)((char *)v12 + 24);
            }
            while ((v33 & 0x80) == 0);
          }
          long long v34 = v106;
          if (v12 < v106)
          {
            long long v34 = v106;
            do
              long long v34 = (__n128 *)((char *)v34 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v34) & 0x80) != 0);
          }
          while (v12 < v34)
          {
            __n128 v35 = *v12;
            unint64_t v109 = v12[1].n128_u64[0];
            __n128 v108 = v35;
            __n128 v36 = *v34;
            v12[1].n128_u64[0] = v34[1].n128_u64[0];
            *uint64_t v12 = v36;
            __n128 v37 = v108;
            v34[1].n128_u64[0] = v109;
            *long long v34 = v37;
            do
              uint64_t v12 = (__n128 *)((char *)v12 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v12) & 0x80) == 0);
            do
              long long v34 = (__n128 *)((char *)v34 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v34) & 0x80) != 0);
          }
          uint64_t v38 = &v12[-2].n128_i8[8];
          BOOL v4 = (unint64_t)&v12[-2].n128_u64[1] >= a1;
          BOOL v5 = &v12[-2].n128_i8[8] == (__int8 *)a1;
          if (&v12[-2].n128_i8[8] == (__int8 *)a1)
          {
            if (v12[-1].n128_i8[15] < 0) {
              operator delete(*(void **)a1);
            }
          }
          else
          {
            if (*(char *)(a1 + 23) < 0) {
              operator delete(*(void **)a1);
            }
            long long v39 = *(_OWORD *)v38;
            *(void *)(a1 + 16) = v12[-1].n128_u64[1];
            *(_OWORD *)a1 = v39;
            v12[-1].n128_u8[15] = 0;
            v12[-2].n128_u8[8] = 0;
          }
          a4 = 0;
          __n128 v40 = v110;
          v12[-1].n128_u64[1] = v111;
          *(__n128 *)uint64_t v38 = v40;
        }
        __n128 v19 = *(__n128 *)a1;
        unint64_t v111 = *(void *)(a1 + 16);
        __n128 v110 = v19;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        uint64_t v20 = (__n128 *)a1;
        do
        {
          unint64_t v21 = v20;
          uint64_t v20 = (__n128 *)((char *)v20 + 24);
        }
        while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, &v110) & 0x80) != 0);
        __n128 v22 = v106;
        if (v21 == (__n128 *)a1)
        {
          __n128 v22 = v106;
          do
          {
            if (v20 >= v22) {
              break;
            }
            __n128 v22 = (__n128 *)((char *)v22 - 24);
          }
          while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, &v110) & 0x80) == 0);
        }
        else
        {
          do
            __n128 v22 = (__n128 *)((char *)v22 - 24);
          while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, &v110) & 0x80) == 0);
        }
        uint64_t v12 = v20;
        if (v20 < v22)
        {
          unint64_t v23 = v22;
          do
          {
            __n128 v108 = *v12;
            __n128 v24 = v108;
            unint64_t v109 = v12[1].n128_u64[0];
            unint64_t v25 = v109;
            unint64_t v26 = v23[1].n128_u64[0];
            *uint64_t v12 = *v23;
            v12[1].n128_u64[0] = v26;
            v23[1].n128_u64[0] = v25;
            *unint64_t v23 = v24;
            do
              uint64_t v12 = (__n128 *)((char *)v12 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, &v110) & 0x80) != 0);
            do
              unint64_t v23 = (__n128 *)((char *)v23 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v23, &v110) & 0x80) == 0);
          }
          while (v12 < v23);
        }
        __n128 v27 = &v12[-2].n128_i8[8];
        if (&v12[-2].n128_i8[8] == (__int8 *)a1)
        {
          if (v12[-1].n128_i8[15] < 0) {
            operator delete(*(void **)a1);
          }
        }
        else
        {
          if (*(char *)(a1 + 23) < 0) {
            operator delete(*(void **)a1);
          }
          long long v28 = *(_OWORD *)v27;
          *(void *)(a1 + 16) = v12[-1].n128_u64[1];
          *(_OWORD *)a1 = v28;
          v12[-1].n128_u8[15] = 0;
          v12[-2].n128_u8[8] = 0;
        }
        __n128 v29 = v110;
        v12[-1].n128_u64[1] = v111;
        *(__n128 *)__n128 v27 = v29;
        if (v20 >= v22) {
          break;
        }
LABEL_35:
        std::__introsort<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::deep_copy_from_changed(__CFDictionary const*)::$_1 &,std::string *,false>(a1, &v12[-2].n128_i8[8], a3, a4 & 1);
        a4 = 0;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::deep_copy_from_changed(__CFDictionary const*)::$_1 &,std::string *>((__n128 *)a1, (__n128 *)((char *)v12 - 24));
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::deep_copy_from_changed(__CFDictionary const*)::$_1 &,std::string *>(v12, v106))
      {
        break;
      }
      if (!v30) {
        goto LABEL_35;
      }
    }
    a2 = (__n128 *)((char *)v12 - 24);
    if (!v30) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::deep_copy_from_changed(__CFDictionary const*)::$_1 &,std::string *>(__n128 *a1, __n128 *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      char v6 = (__n128 *)((char *)a2 - 24);
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a2[-2].n128_u64[1], a1) & 0x80) != 0)
      {
        unint64_t v7 = a1[1].n128_u64[0];
        __n128 v8 = *a1;
        unint64_t v9 = v6[1].n128_u64[0];
        *a1 = *v6;
        a1[1].n128_u64[0] = v9;
        __n128 *v6 = v8;
        v6[1].n128_u64[0] = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a2[-2].n128_u64[1]);
      return 1;
    case 5uLL:
      uint64_t v17 = (__n128 *)((char *)a1 + 24);
      __n128 v18 = a1 + 3;
      __n128 v19 = &a1[4].n128_i8[8];
      uint64_t v20 = &a2[-2].n128_u64[1];
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1]);
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, &a1[4].n128_u64[1]) & 0x80) != 0)
      {
        unint64_t v21 = a1[5].n128_u64[1];
        __n128 v22 = *(__n128 *)v19;
        unint64_t v23 = v20[2];
        *(_OWORD *)__n128 v19 = *(_OWORD *)v20;
        a1[5].n128_u64[1] = v23;
        *(__n128 *)uint64_t v20 = v22;
        v20[2] = v21;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[4].n128_u64[1], (__n128 *)a1[3].n128_u64) & 0x80) != 0)
        {
          unint64_t v24 = a1[4].n128_u64[0];
          __n128 v25 = *v18;
          *__n128 v18 = *(__n128 *)v19;
          a1[4].n128_u64[0] = a1[5].n128_u64[1];
          *(__n128 *)__n128 v19 = v25;
          a1[5].n128_u64[1] = v24;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((__n128 *)a1[3].n128_u64, &a1[1].n128_u64[1]) & 0x80) != 0)
          {
            unint64_t v26 = a1[2].n128_u64[1];
            __n128 v27 = *v17;
            *uint64_t v17 = *v18;
            a1[2].n128_u64[1] = a1[4].n128_u64[0];
            *__n128 v18 = v27;
            a1[4].n128_u64[0] = v26;
            if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[1].n128_u64[1], a1) & 0x80) != 0)
            {
              unint64_t v28 = a1[1].n128_u64[0];
              __n128 v29 = *a1;
              *a1 = *v17;
              a1[1].n128_u64[0] = a1[2].n128_u64[1];
              *uint64_t v17 = v29;
              a1[2].n128_u64[1] = v28;
            }
          }
        }
      }
      return 1;
    default:
      long long v10 = a1 + 3;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64);
      uint64_t v11 = &a1[4].n128_u64[1];
      if (&a1[4].n128_i8[8] == (__int8 *)a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, v10) & 0x80) != 0)
    {
      long long v30 = *(_OWORD *)v11;
      unint64_t v31 = v11[2];
      v11[1] = 0;
      void v11[2] = 0;
      unint64_t *v11 = 0;
      uint64_t v14 = v12;
      while (1)
      {
        unint64_t v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 72) = *(__n128 *)((char *)a1 + v14 + 48);
        *((void *)v15 + 11) = *(unint64_t *)((char *)a1[4].n128_u64 + v14);
        v15[71] = 0;
        v15[48] = 0;
        if (v14 == -48) {
          break;
        }
        v14 -= 24;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v30, (void *)v15 + 3) & 0x80) == 0)
        {
          uint64_t v16 = (uint64_t)&a1[4].n128_i64[1] + v14;
          goto LABEL_12;
        }
      }
      uint64_t v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)uint64_t v16 = v30;
      *(void *)(v16 + 16) = v31;
      if (++v13 == 8) {
        return v11 + 3 == (unint64_t *)a2;
      }
    }
    long long v10 = (__n128 *)v11;
    v12 += 24;
    v11 += 3;
    if (v11 == (unint64_t *)a2) {
      return 1;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::deep_copy_from_changed(__CFDictionary const*)::$_0 &,std::string *>(__n128 *a1, __n128 *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      char v6 = (__n128 *)((char *)a2 - 24);
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a2[-2].n128_u64[1], a1) & 0x80) != 0)
      {
        unint64_t v7 = a1[1].n128_u64[0];
        __n128 v8 = *a1;
        unint64_t v9 = v6[1].n128_u64[0];
        *a1 = *v6;
        a1[1].n128_u64[0] = v9;
        __n128 *v6 = v8;
        v6[1].n128_u64[0] = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a2[-2].n128_u64[1]);
      return 1;
    case 5uLL:
      uint64_t v17 = (__n128 *)((char *)a1 + 24);
      __n128 v18 = a1 + 3;
      __n128 v19 = &a1[4].n128_i8[8];
      uint64_t v20 = &a2[-2].n128_u64[1];
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1]);
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, &a1[4].n128_u64[1]) & 0x80) != 0)
      {
        unint64_t v21 = a1[5].n128_u64[1];
        __n128 v22 = *(__n128 *)v19;
        unint64_t v23 = v20[2];
        *(_OWORD *)__n128 v19 = *(_OWORD *)v20;
        a1[5].n128_u64[1] = v23;
        *(__n128 *)uint64_t v20 = v22;
        v20[2] = v21;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[4].n128_u64[1], (__n128 *)a1[3].n128_u64) & 0x80) != 0)
        {
          unint64_t v24 = a1[4].n128_u64[0];
          __n128 v25 = *v18;
          *__n128 v18 = *(__n128 *)v19;
          a1[4].n128_u64[0] = a1[5].n128_u64[1];
          *(__n128 *)__n128 v19 = v25;
          a1[5].n128_u64[1] = v24;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((__n128 *)a1[3].n128_u64, &a1[1].n128_u64[1]) & 0x80) != 0)
          {
            unint64_t v26 = a1[2].n128_u64[1];
            __n128 v27 = *v17;
            *uint64_t v17 = *v18;
            a1[2].n128_u64[1] = a1[4].n128_u64[0];
            *__n128 v18 = v27;
            a1[4].n128_u64[0] = v26;
            if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[1].n128_u64[1], a1) & 0x80) != 0)
            {
              unint64_t v28 = a1[1].n128_u64[0];
              __n128 v29 = *a1;
              *a1 = *v17;
              a1[1].n128_u64[0] = a1[2].n128_u64[1];
              *uint64_t v17 = v29;
              a1[2].n128_u64[1] = v28;
            }
          }
        }
      }
      return 1;
    default:
      long long v10 = a1 + 3;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64);
      uint64_t v11 = &a1[4].n128_u64[1];
      if (&a1[4].n128_i8[8] == (__int8 *)a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, v10) & 0x80) != 0)
    {
      long long v30 = *(_OWORD *)v11;
      unint64_t v31 = v11[2];
      v11[1] = 0;
      void v11[2] = 0;
      unint64_t *v11 = 0;
      uint64_t v14 = v12;
      while (1)
      {
        unint64_t v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 72) = *(__n128 *)((char *)a1 + v14 + 48);
        *((void *)v15 + 11) = *(unint64_t *)((char *)a1[4].n128_u64 + v14);
        v15[71] = 0;
        v15[48] = 0;
        if (v14 == -48) {
          break;
        }
        v14 -= 24;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v30, (void *)v15 + 3) & 0x80) == 0)
        {
          uint64_t v16 = (uint64_t)&a1[4].n128_i64[1] + v14;
          goto LABEL_12;
        }
      }
      uint64_t v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)uint64_t v16 = v30;
      *(void *)(v16 + 16) = v31;
      if (++v13 == 8) {
        return v11 + 3 == (unint64_t *)a2;
      }
    }
    long long v10 = (__n128 *)v11;
    v12 += 24;
    v11 += 3;
    if (v11 == (unint64_t *)a2) {
      return 1;
    }
  }
}

void DSP_Host_OffloadDictionary::create_into(DSP_Host_OffloadDictionary *this, const __CFDictionary **a2)
{
  DSP_Host_OffloadDictionary::deep_copy((DSP_Host_OffloadDictionary *)&v2);
}

void OS::CF::MutableDictionary::SetValueForKey<OS::CF::Dictionary>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
  {
    if (a3) {
      CFDictionarySetValue(a1, a2, a3);
    }
  }
}

void HALS_PlugInObject::CacheCustomPropertyInfo(HALS_PlugInObject *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    MEMORY[0x1C1859810](v2, 0x1000C803E1C8BA9);
  }
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = *(void *)(v3 + 400);
  BOOL v5 = *(std::__shared_weak_count **)(v3 + 408);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *((unsigned int *)this + 5);
  uint64_t v16 = 0x676C6F6263757374;
  int v17 = 0;
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(*(void *)v4 + 552))(v4, v6, 0, &v16);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v7)
  {
    uint64_t v8 = *((void *)this + 1);
    uint64_t v9 = *(void *)(v8 + 400);
    long long v10 = *(std::__shared_weak_count **)(v8 + 408);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *((unsigned int *)this + 5);
    uint64_t v16 = 0x676C6F6263757374;
    int v17 = 0;
    unsigned int v12 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *, void, void))(*(void *)v9 + 568))(v9, v11, 0, &v16, 0, 0);
    unsigned int v13 = v12 / 0xC;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (v12 >= 0xC)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v13);
      unint64_t v15 = v14;
      do
      {
        *(void *)unint64_t v15 = 0;
        *((_DWORD *)v15 + 2) = 0;
        v15 += 12;
      }
      while (v15 != &v14[12 * v13]);
      operator new[]();
    }
  }
}

void sub_1BAEC0908(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL HALS_PlugInObject::IsCustomProperty(HALS_PlugInObject *this, int a2)
{
  unint64_t v2 = *((unsigned int *)this + 8);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (_DWORD *)*((void *)this + 3);
  if (*v3 == a2) {
    return 1;
  }
  unint64_t v5 = 0;
  uint64_t v6 = v3 + 3;
  while (v2 - 1 != v5)
  {
    int v7 = *v6;
    v6 += 3;
    ++v5;
    if (v7 == a2) {
      return v5 < v2;
    }
  }
  unint64_t v5 = *((unsigned int *)this + 8);
  return v5 < v2;
}

void HALS_PlugInObject::HALS_PlugInObject(HALS_PlugInObject *this, HALS_PlugIn *a2, int a3)
{
  *(void *)this = &unk_1F1480510;
  *((void *)this + 1) = a2;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = a3;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  uint64_t v3 = (HALS_PlugIn *)((char *)a2 + 328);
  if (!a2) {
    uint64_t v3 = 0;
  }
  if (v3 != this) {
    HALS_ObjectMap::RetainObject(a2, a2);
  }
}

void HALS_PlugInObject::~HALS_PlugInObject(HALS_PlugInObject *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F1480510;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    uint64_t v3 = (HALS_PlugInObject *)(v2 + 328);
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3 != this)
  {
    uint64_t v4 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 4));
    uint64_t v6 = (HALS_ObjectMap *)v4;
    if (v4)
    {
      uint64_t v7 = *(void *)(v4 + 400);
      uint64_t v8 = (std::__shared_weak_count *)*((void *)v6 + 51);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v7) {
        (*(void (**)(uint64_t, void))(*(void *)v7 + 128))(v7, *((unsigned int *)this + 5));
      }
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
    else
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v14, "com.apple.coreaudio", "AMCP");
      uint64_t v9 = *v14;
      if (*(void *)v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v15);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        unsigned int v12 = pthread_self();
        mach_port_t v13 = pthread_mach_thread_np(v12);
        LODWORD(v14) = 67109634;
        HIDWORD(v14) = v13;
        *(_WORD *)unint64_t v15 = 2080;
        *(void *)&_DWORD v15[2] = "HALS_PlugInObject.cpp";
        __int16 v16 = 1024;
        int v17 = 52;
        _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Could not retrieve the owning plugin from the object map", (uint8_t *)&v14, 0x18u);
      }
    }
    HALS_ObjectMap::ReleaseObject(*((HALS_ObjectMap **)this + 1), v5);
    HALS_ObjectMap::ReleaseObject(v6, v10);
  }
  uint64_t v11 = *((void *)this + 3);
  if (v11) {
    MEMORY[0x1C1859810](v11, 0x1000C803E1C8BA9);
  }
}

void sub_1BAEC0BE0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInObject::HasResourceBundle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v4 + 400);
  uint64_t v6 = *(std::__shared_weak_count **)(v4 + 408);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (!v7) {
    return 0;
  }
  uint64_t v14 = 0x676C6F6272737263;
  int v15 = 0;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(v8 + 400);
  long long v10 = *(std::__shared_weak_count **)(v8 + 408);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2) {
    uint64_t v11 = *(unsigned int *)(a2 + 232);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v9 + 552))(v9, 1, v11, &v14);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return v12;
}

void sub_1BAEC0CFC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *HALS_PlugInObject::CopyResourceBundlePath(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v4 + 400);
  uint64_t v6 = *(std::__shared_weak_count **)(v4 + 408);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFURLRef v7 = (const __CFURL *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v7)
  {
    CFTypeRef cf = CFURLCopyFileSystemPath(v7, kCFURLPOSIXPathStyle);
    char v21 = 1;
    if (!cf)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unint64_t v24 = 136315394;
        *(void *)&unsigned char v24[4] = "HALS_PlugInObject.cpp";
        __int16 v25 = 1024;
        int v26 = 150;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: couldn't allocate the plug-in's path for kAudioDevicePropertyResourceBundle", v24, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    uint64_t v18 = 0x676C6F6272737263;
    LODWORD(v19) = 0;
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = *(void *)(v8 + 400);
    long long v10 = *(std::__shared_weak_count **)(v8 + 408);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (a2) {
      uint64_t v11 = *(unsigned int *)(a2 + 232);
    }
    else {
      uint64_t v11 = 0;
    }
    CFStringRef theString = 0;
    int v22 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void, void, uint64_t, int *, CFStringRef *))(*(void *)v9 + 576))(v9, 1, v11, &v18, 0, 0, 8, &v22, &theString);
    CFStringRef v13 = theString;
    *(void *)unint64_t v24 = theString;
    v24[8] = 1;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (v13 && CFStringGetLength(v13))
    {
      int HasPrefix = CFStringHasPrefix(*(CFStringRef *)v24, @"/");
      CFTypeRef v15 = cf;
      if (!HasPrefix)
      {
        uint64_t v12 = (void *)CFStringCreateWithFormat(0, 0, @"%@/%@", cf, *(void *)v24, v18, v19);
        goto LABEL_24;
      }
      if (cf) {
        goto LABEL_21;
      }
    }
    else
    {
      CFTypeRef v15 = cf;
      if (cf)
      {
LABEL_21:
        CFRetain(v15);
        uint64_t v12 = (void *)cf;
LABEL_24:
        CACFString::~CACFString((CACFString *)v24);
        CACFString::~CACFString((CACFString *)&cf);
        return v12;
      }
    }
    uint64_t v12 = 0;
    goto LABEL_24;
  }
  return 0;
}

void sub_1BAEC0FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  CACFString::~CACFString((CACFString *)va);
  _Unwind_Resume(a1);
}

void HALS_MetaDeviceDescription::UpdateRawDescription(CFDictionaryRef *this)
{
  OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)v27, this[2]);
  OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)v25);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v23, this[2], @"subdevices");
  CFArrayRef Size = OS::CF::ArrayBase<__CFArray const*>::GetSize(v24);
  if (Size)
  {
    CFArrayRef v3 = Size;
    CFIndex v4 = 0;
    while (1)
    {
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::UntypedObject>((const __CFArray *)v21, (uint64_t)v23, v4);
      CFTypeID TypeID = OS::CF::UntypedObject::GetTypeID(v22);
      if (TypeID == (const void *)CFDictionaryGetTypeID()) {
        break;
      }
      uint64_t v6 = OS::CF::UntypedObject::GetTypeID(v22);
      if (v6 == (const void *)CFArrayGetTypeID())
      {
        OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)&v19);
        OS::CF::UntypedObject::As<OS::CF::Array>(&v17, (uint64_t)v21);
        CFArrayRef v7 = OS::CF::ArrayBase<__CFArray const*>::GetSize(v18);
        if (v7)
        {
          CFArrayRef v8 = v7;
          for (CFIndex i = 0; (const __CFArray *)i != v8; ++i)
          {
            OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)&v14, (uint64_t)&v17, i);
            if (cf)
            {
              OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v12, cf);
              v12[0] = &unk_1F14898A0;
              HALS_MetaDeviceDescription::UpdateSubDevice(v13, (uint64_t)this, (uint64_t)v12);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v12);
              OS::CF::MutableArray::AppendValue<OS::CF::Dictionary>(theArray, (const void *)v13[1]);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v13);
            }
            OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v14);
          }
        }
        CFArrayRef Copy = theArray;
        if (theArray) {
          CFArrayRef Copy = CFArrayCreateCopy(0, theArray);
        }
        uint64_t v14 = &unk_1F1489968;
        CFTypeRef cf = Copy;
        if (v26 && Copy) {
          CFArrayAppendValue(v26, Copy);
        }
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v14);
LABEL_18:
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v17);
LABEL_19:
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v19);
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v21);
      if ((const __CFArray *)++v4 == v3) {
        goto LABEL_21;
      }
    }
    OS::CF::UntypedObject::As<OS::CF::Dictionary>(&v19, (uint64_t)v21);
    if (theArray)
    {
      OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v16, theArray);
      v16[0] = &unk_1F14898A0;
      HALS_MetaDeviceDescription::UpdateSubDevice(&v17, (uint64_t)this, (uint64_t)v16);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v16);
      OS::CF::MutableArray::AppendValue<OS::CF::Dictionary>(v26, v18);
      goto LABEL_18;
    }
    goto LABEL_19;
  }
LABEL_21:
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>(v28, @"subdevices", v26);
  CFDictionaryRef v11 = v28;
  if (v28) {
    CFDictionaryRef v11 = CFDictionaryCreateCopy(0, v28);
  }
  OS::CF::UntypedObject::operator=((uint64_t)(this + 1), (uint64_t)v11);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v23);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v25);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v27);
}

void sub_1BAEC12B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va1);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va2);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va3);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v7 - 96));
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v7 - 80));
  _Unwind_Resume(a1);
}

void HALS_MetaDeviceDescription::UpdateSubDeviceList(CFDictionaryRef *this, HALS_Device *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v38, this[2], @"subdevices");
  CFArrayRef Size = OS::CF::ArrayBase<__CFArray const*>::GetSize(v39);
  long long v36 = 0uLL;
  CFDictionaryRef v37 = 0;
  long long v34 = 0uLL;
  CFDictionaryRef v35 = 0;
  if ((HALS_MetaDeviceDescription::IsStackRequested(this) & 1) == 0)
  {
    if (!Size) {
      goto LABEL_36;
    }
    CFIndex v12 = 0;
    unsigned int v13 = 0;
    while (1)
    {
      *(void *)uint64_t v44 = 0;
      CFTypeRef cf = 0;
      uint64_t v46 = 0;
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::UntypedObject>((const __CFArray *)&v42, (uint64_t)v38, v12);
      CFTypeID TypeID = OS::CF::UntypedObject::GetTypeID(v43);
      if (TypeID == (const void *)CFDictionaryGetTypeID()) {
        break;
      }
      CFTypeRef v15 = OS::CF::UntypedObject::GetTypeID(v43);
      if (v15 == (const void *)CFArrayGetTypeID())
      {
        OS::CF::UntypedObject::As<OS::CF::Array>(&v40, (uint64_t)&v42);
        if (v41)
        {
          CFArrayRef v16 = OS::CF::ArrayBase<__CFArray const*>::GetSize((const __CFArray *)v41);
          if (v16)
          {
            CFArrayRef v17 = v16;
            for (CFIndex i = 0; (const __CFArray *)i != v17; ++i)
            {
              OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v33, (uint64_t)&v40, i);
              if (v33[1]) {
                HALS_MetaDeviceDescription::AddOrUpdateSubDevice((uint64_t)this, a2, (uint64_t)v33, (void **)v44, (void **)&v34);
              }
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v33);
            }
          }
        }
        goto LABEL_22;
      }
LABEL_23:
      uint64_t v20 = *(void **)v44;
      uint64_t v19 = cf;
      if (*(CFTypeRef *)v44 != cf)
      {
        char v21 = (void *)*((void *)&v36 + 1);
        if (*((void *)&v36 + 1) >= (unint64_t)v37)
        {
          uint64_t v22 = std::vector<std::vector<HALS_MetaSubDevice *>>::__push_back_slow_path<std::vector<HALS_MetaSubDevice *> const&>((uint64_t *)&v36, (uint64_t)v44);
        }
        else
        {
          **((void **)&v36 + 1) = 0;
          v21[1] = 0;
          v21[2] = 0;
          std::vector<HALS_MetaSubDevice *>::__init_with_size[abi:ne180100]<HALS_MetaSubDevice **,HALS_MetaSubDevice **>(v21, v20, (uint64_t)v19, (v19 - (unsigned char *)v20) >> 3);
          uint64_t v22 = (uint64_t)(v21 + 3);
        }
        *((void *)&v36 + 1) = v22;
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v42);
      if (v20) {
        operator delete(v20);
      }
      CFIndex v12 = ++v13;
      if ((unint64_t)Size <= v13) {
        goto LABEL_36;
      }
    }
    OS::CF::UntypedObject::As<OS::CF::Dictionary>(&v40, (uint64_t)&v42);
    if (v41) {
      HALS_MetaDeviceDescription::AddOrUpdateSubDevice((uint64_t)this, a2, (uint64_t)&v40, (void **)v44, (void **)&v34);
    }
LABEL_22:
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v40);
    goto LABEL_23;
  }
  *(void *)uint64_t v44 = 0;
  CFTypeRef cf = 0;
  uint64_t v46 = 0;
  if (Size)
  {
    CFIndex v5 = 0;
    unsigned int v6 = 1;
    do
    {
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)&v42, (uint64_t)v38, v5);
      if (v43) {
        HALS_MetaDeviceDescription::AddOrUpdateSubDevice((uint64_t)this, a2, (uint64_t)&v42, (void **)v44, (void **)&v34);
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v42);
      CFIndex v5 = v6;
    }
    while ((unint64_t)Size > v6++);
    uint64_t v9 = *(void **)v44;
    CFArrayRef v8 = cf;
    if (*(CFTypeRef *)v44 != cf)
    {
      long long v10 = (void *)*((void *)&v36 + 1);
      if (*((void *)&v36 + 1) >= (unint64_t)v37)
      {
        uint64_t v11 = std::vector<std::vector<HALS_MetaSubDevice *>>::__push_back_slow_path<std::vector<HALS_MetaSubDevice *> const&>((uint64_t *)&v36, (uint64_t)v44);
      }
      else
      {
        **((void **)&v36 + 1) = 0;
        v10[1] = 0;
        void v10[2] = 0;
        std::vector<HALS_MetaSubDevice *>::__init_with_size[abi:ne180100]<HALS_MetaSubDevice **,HALS_MetaSubDevice **>(v10, v9, (uint64_t)v8, (v8 - (unsigned char *)v9) >> 3);
        uint64_t v11 = (uint64_t)(v10 + 3);
      }
      *((void *)&v36 + 1) = v11;
    }
    if (v9) {
      operator delete(v9);
    }
  }
LABEL_36:
  HALS_MetaDeviceDescription::TeardownSubDeviceList((HALS_MetaDeviceDescription *)this);
  unint64_t v23 = (void **)(this + 3);
  if (this[3])
  {
    std::vector<std::vector<std::byte>>::__clear[abi:ne180100]((uint64_t *)this + 3);
    operator delete(*v23);
    *unint64_t v23 = 0;
    this[4] = 0;
    this[5] = 0;
  }
  CFDictionaryRef v24 = this[6];
  *(_OWORD *)(this + 3) = v36;
  this[5] = v37;
  CFDictionaryRef v37 = 0;
  long long v36 = 0uLL;
  this[7] = v24;
  if (v24)
  {
    operator delete(v24);
    this[6] = 0;
    this[7] = 0;
    this[8] = 0;
  }
  *((_OWORD *)this + 3) = v34;
  this[8] = v35;
  CFDictionaryRef v35 = 0;
  long long v34 = 0uLL;
  this[12] = 0;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v40, this[2], @"master");
  OS::CF::String::AsCString((CFIndex)&v40, (UInt8 *)v44, 256);
  if (v41)
  {
    __int16 v25 = (HALS_MetaSubDevice ***)this[3];
    for (CFDictionaryRef j = this[4]; v25 != (HALS_MetaSubDevice ***)j; v25 += 3)
    {
      uint64_t v27 = *v25;
      unint64_t v28 = v25[1];
      while (v27 != v28)
      {
        __n128 v29 = (OS::CF::UntypedObject *)HALS_MetaSubDevice::CopyRealDeviceUID(*v27);
        __n128 v42 = &unk_1F1489A20;
        __n128 v43 = v29;
        if (OS::CF::operator==((CFStringRef)v29, v41))
        {
          long long v30 = *v27;
          this[12] = *v27;
        }
        else
        {
          long long v30 = this[12];
        }
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v42);
        if (v30) {
          goto LABEL_50;
        }
        ++v27;
      }
    }
  }
LABEL_50:
  if (!this[12])
  {
    unint64_t v31 = (void **)this[3];
    if (this[4] != (CFDictionaryRef)v31) {
      this[12] = (CFDictionaryRef)**v31;
    }
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v40);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v44, this[2], @"clock");
  OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)&v42, cf);
  __n128 v42 = &unk_1F1489A20;
  CFDictionaryRef ClockSubDevice = (const __CFDictionary *)HALS_MetaDeviceDescription::AllocateClockSubDevice((uint64_t)this, (uint64_t)&v42);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v42);
  if (ClockSubDevice)
  {
    this[13] = ClockSubDevice;
    (**(void (***)(const __CFDictionary *))ClockSubDevice)(ClockSubDevice);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v44);
  *(void *)uint64_t v44 = &v36;
  std::vector<std::vector<std::byte>>::__destroy_vector::operator()[abi:ne180100]((void ***)v44);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v38);
}

void sub_1BAEC17C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char *a24)
{
  if (v24) {
    operator delete(v24);
  }
  if (__p) {
    operator delete(__p);
  }
  a24 = &a15;
  std::vector<std::vector<std::byte>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a18);
  _Unwind_Resume(a1);
}

void HALS_MetaDeviceDescription::UpdateSubTapList(HALS_MetaDeviceDescription *this)
{
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v16, *((CFDictionaryRef *)this + 2), @"taps");
  CFArrayRef Size = OS::CF::ArrayBase<__CFArray const*>::GetSize(v17);
  if (Size)
  {
    unint64_t v3 = (unint64_t)Size;
    CFIndex v4 = 0;
    unsigned int v5 = 0;
    long long v9 = 0u;
    do
    {
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::UntypedObject>((const __CFArray *)v15, (uint64_t)v16, v4);
      OS::CF::UntypedObject::As<OS::CF::Dictionary>(&v13, (uint64_t)v15);
      if (theDict)
      {
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v11, theDict, @"uid");
        if (v12)
        {
          v10[0] = 0;
          v10[1] = 0;
          HALS_System::GetInstance(&v18, 0, v10);
          uint64_t v7 = (HALS_ObjectMap *)HALS_System::CopyTapByUUID(v18, v12);
          if (v19) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v19);
          }
          if (v7
            && (!*((unsigned char *)v7 + 83)
             || HALS_MetaDeviceDescription::IsPrivate((const __CFDictionary **)this)))
          {
            operator new();
          }
          HALS_ObjectMap::ReleaseObject(v7, v6);
        }
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v11);
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v13);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v15);
      CFIndex v4 = ++v5;
    }
    while (v3 > v5);
  }
  else
  {
    long long v9 = 0u;
  }
  HALS_MetaDeviceDescription::TeardownSubTapList(this);
  CFArrayRef v8 = (void *)*((void *)this + 9);
  if (v8)
  {
    *((void *)this + 10) = v8;
    operator delete(v8);
    *((void *)this + 9) = 0;
    *((void *)this + 10) = 0;
    *((void *)this + 11) = 0;
  }
  *(_OWORD *)((char *)this + 72) = v9;
  *((void *)this + 11) = 0;
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v16);
}

void sub_1BAEC1D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, CFTypeRef cf,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if ((void)a9) {
    operator delete((void *)a9);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a18);
  _Unwind_Resume(a1);
}

void HALS_MetaDeviceDescription::TeardownSubTapList(HALS_MetaDeviceDescription *this)
{
  uint64_t v2 = (HALS_ObjectMap **)*((void *)this + 9);
  unint64_t v3 = (HALS_ObjectMap **)*((void *)this + 10);
  if (v2 != v3)
  {
    do
    {
      if (*v2)
      {
        (*(void (**)(HALS_ObjectMap *))(*(void *)*v2 + 8))(*v2);
        HALS_ObjectMap::ObjectIsDead(*v2, v4);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (HALS_ObjectMap **)*((void *)this + 9);
  }
  *((void *)this + 10) = v2;
}

const __CFArray *OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::UntypedObject>(const __CFArray *result, uint64_t a2, CFIndex a3)
{
  *(void *)BOOL result = &unk_1F1489918;
  *((void *)result + 1) = 0;
  if ((a3 & 0x8000000000000000) == 0)
  {
    CFArrayRef v4 = result;
    BOOL result = *(const __CFArray **)(a2 + 8);
    if (result)
    {
      BOOL result = (const __CFArray *)CFArrayGetCount(result);
      if ((uint64_t)result > a3)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 8), a3);
        uint64_t v7 = (uint64_t)ValueAtIndex;
        if (ValueAtIndex)
        {
          CFRetain(ValueAtIndex);
          uint64_t v8 = (uint64_t)v4;
          uint64_t v9 = v7;
        }
        else
        {
          uint64_t v8 = (uint64_t)v4;
          uint64_t v9 = 0;
        }
        return (const __CFArray *)OS::CF::UntypedObject::operator=(v8, v9);
      }
    }
  }
  return result;
}

const __CFBoolean *HALS_MetaDeviceDescription::IsPrivate(const __CFDictionary **this)
{
  if (!OS::CF::DictionaryBase<__CFDictionary const*>::HasKey(this[2], @"private")) {
    return 0;
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(v4, this[2], @"private");
  CFBooleanRef v2 = OS::CF::Boolean::AsBool(v4[1]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v4);
  return v2;
}

const __CFDictionary *OS::CF::DictionaryBase<__CFDictionary const*>::HasKey(const __CFDictionary *result, const void *a2)
{
  if (result) {
    return (const __CFDictionary *)(CFDictionaryContainsKey(result, a2) != 0);
  }
  return result;
}

const __CFBoolean *HALS_MetaDeviceDescription::IsStackRequested(const __CFDictionary **this)
{
  if (!OS::CF::DictionaryBase<__CFDictionary const*>::HasKey(this[2], @"stacked")) {
    return 0;
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(v4, this[2], @"stacked");
  CFBooleanRef v2 = OS::CF::Boolean::AsBool(v4[1]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v4);
  return v2;
}

void HALS_MetaDeviceDescription::AddOrUpdateSubDevice(uint64_t a1, HALS_ObjectMap *a2, uint64_t a3, void **a4, void **a5)
{
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v36, *(CFDictionaryRef *)(a3 + 8), @"uid");
  if (v37)
  {
    v35[0] = 0;
    v35[1] = 0;
    HALS_System::GetInstance(&v38, 0, v35);
    uint64_t v11 = HALS_System::CopyDeviceByUID(v38, v37, 0);
    if (v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v39);
    }
    if (v11 && v11 != a2 && HALS_IODevice::GetTransportType(v11) != 1735554416)
    {
      int v12 = *((_DWORD *)v11 + 4);
      uint64_t v13 = *(void *)(a1 + 24);
      uint64_t v14 = *(void *)(a1 + 32);
      while (v13 != v14)
      {
        for (CFIndex i = *(HALS_MetaSubDevice ***)v13; i != *(HALS_MetaSubDevice ***)(v13 + 8); ++i)
        {
          CFArrayRef v16 = *i;
          if (HALS_MetaSubDevice::GetRealDeviceObjectID(*i) == v12)
          {
            CFArrayRef v17 = *(char **)(v13 + 8);
            int64_t v18 = v17 - (char *)(i + 1);
            if (v17 != (char *)(i + 1)) {
              memmove(i, i + 1, v17 - (char *)(i + 1));
            }
            *(void *)(v13 + 8) = (char *)i + v18;
            if (v16)
            {
LABEL_18:
              uint64_t v19 = *(void *)(a3 + 8);
              uint64_t v38 = (HALS_System *)MEMORY[0x1E4F143A8];
              uint64_t v39 = 0x40000000;
              uint64_t v40 = ___ZN18HALS_MetaSubDevice16SetSubDeviceInfoEP11HALS_DevicePK14__CFDictionary_block_invoke;
              CFStringRef v41 = &__block_descriptor_tmp_17_9867;
              __n128 v42 = v16;
              __n128 v43 = v11;
              uint64_t v44 = v19;
              uint64_t v20 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(void *)v16 + 56))(v16);
              HALB_CommandGate::ExecuteCommand(v20, (uint64_t)&v38);
              if (HALS_MetaDeviceDescription::CanBeActive((const __CFDictionary **)a1, v11)) {
                a5 = a4;
              }
              CFDictionaryRef v24 = (HALS_MetaSubDevice **)a5[1];
              unint64_t v23 = (unint64_t)a5[2];
              if ((unint64_t)v24 >= v23)
              {
                uint64_t v26 = ((char *)v24 - (unsigned char *)*a5) >> 3;
                if ((unint64_t)(v26 + 1) >> 61) {
                  std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v27 = v23 - (void)*a5;
                uint64_t v28 = v27 >> 2;
                if (v27 >> 2 <= (unint64_t)(v26 + 1)) {
                  uint64_t v28 = v26 + 1;
                }
                if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v29 = v28;
                }
                if (v29) {
                  unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v29);
                }
                else {
                  long long v10 = 0;
                }
                long long v30 = (HALS_MetaSubDevice **)(v29 + 8 * v26);
                unint64_t v31 = v29 + 8 * (void)v10;
                HALS_MetaSubDevice *v30 = v16;
                __int16 v25 = v30 + 1;
                char v33 = (char *)*a5;
                uint64_t v32 = (char *)a5[1];
                if (v32 != *a5)
                {
                  do
                  {
                    long long v34 = (HALS_MetaSubDevice *)*((void *)v32 - 1);
                    v32 -= 8;
                    *--long long v30 = v34;
                  }
                  while (v32 != v33);
                  uint64_t v32 = (char *)*a5;
                }
                *a5 = v30;
                a5[1] = v25;
                a5[2] = (void *)v31;
                if (v32) {
                  operator delete(v32);
                }
              }
              else
              {
                *CFDictionaryRef v24 = v16;
                __int16 v25 = v24 + 1;
              }
              a5[1] = v25;
              goto LABEL_44;
            }
            goto LABEL_26;
          }
        }
        v13 += 24;
      }
      char v21 = *(HALS_MetaSubDevice ***)(a1 + 48);
      uint64_t v22 = *(HALS_MetaSubDevice ***)(a1 + 56);
      while (1)
      {
        if (v21 == v22) {
          goto LABEL_26;
        }
        if (HALS_MetaSubDevice::GetRealDeviceObjectID(*v21) == v12) {
          break;
        }
        ++v21;
      }
      CFArrayRef v16 = *v21;
      if (v16) {
        goto LABEL_18;
      }
LABEL_26:
      operator new();
    }
LABEL_44:
    HALS_ObjectMap::ReleaseObject(v11, v10);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v36);
}

void sub_1BAEC24AC(void *a1)
{
  MEMORY[0x1C1859840](v2, 0x10E1C4011717AD3);
  HALS_ObjectMap::ReleaseObject(v1, v4);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAEC247CLL);
}

void sub_1BAEC251C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va);
  _Unwind_Resume(a1);
}

void *std::vector<HALS_MetaSubDevice *>::__init_with_size[abi:ne180100]<HALS_MetaSubDevice **,HALS_MetaSubDevice **>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    CFArrayRef v4 = result;
    if (a4 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    BOOL result = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4);
    uint64_t v7 = result;
    void *v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      BOOL result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1BAEC25AC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<HALS_MetaSubDevice *>>::__push_back_slow_path<std::vector<HALS_MetaSubDevice *> const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  uint64_t v20 = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[24 * v2];
  CFArrayRef v17 = v7;
  v18.i64[0] = (uint64_t)v8;
  v18.i64[1] = (uint64_t)v8;
  uint64_t v19 = &v7[24 * v6];
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = 0;
  std::vector<HALS_MetaSubDevice *>::__init_with_size[abi:ne180100]<HALS_MetaSubDevice **,HALS_MetaSubDevice **>(v8, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  uint64_t v9 = v18.i64[0];
  uint64_t v10 = v18.i64[1] + 24;
  v18.i64[1] += 24;
  int v12 = (void *)*a1;
  uint64_t v11 = (void *)a1[1];
  if (v11 == (void *)*a1)
  {
    int64x2_t v14 = vdupq_n_s64((unint64_t)v11);
  }
  else
  {
    do
    {
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      v9 -= 24;
      *(void *)(v9 + 16) = 0;
      long long v13 = *(_OWORD *)(v11 - 3);
      v11 -= 3;
      *(_OWORD *)uint64_t v9 = v13;
      *(void *)(v9 + 16) = v11[2];
      void *v11 = 0;
      v11[1] = 0;
      void v11[2] = 0;
    }
    while (v11 != v12);
    int64x2_t v14 = *(int64x2_t *)a1;
    uint64_t v10 = v18.i64[1];
  }
  *a1 = v9;
  a1[1] = v10;
  int64x2_t v18 = v14;
  CFTypeRef v15 = (char *)a1[2];
  a1[2] = (uint64_t)v19;
  uint64_t v19 = v15;
  CFArrayRef v17 = (char *)v14.i64[0];
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v17);
  return v10;
}

void sub_1BAEC272C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

CFTypeID OS::CF::UntypedObject::As<OS::CF::Array>(void *a1, uint64_t a2)
{
  CFTypeID TypeID = OS::CF::UntypedObject::GetTypeID(*(const void **)(a2 + 8));
  CFTypeID result = CFArrayGetTypeID();
  if (TypeID == (const void *)result)
  {
    unint64_t v6 = *(const void **)(a2 + 8);
    if (v6) {
      CFTypeID result = (CFTypeID)CFRetain(v6);
    }
    a1[1] = v6;
  }
  else
  {
    a1[1] = 0;
  }
  *a1 = &unk_1F1489968;
  return result;
}

void HALS_MetaDeviceDescription::TeardownSubDeviceList(HALS_MetaDeviceDescription *this)
{
  unint64_t v3 = (HALS_ObjectMap ***)*((void *)this + 3);
  CFArrayRef v4 = (HALS_ObjectMap ***)*((void *)this + 4);
  unint64_t v2 = (uint64_t *)((char *)this + 24);
  while (v3 != v4)
  {
    unsigned int v5 = *v3;
    unint64_t v6 = v3[1];
    while (v5 != v6)
    {
      if (*v5)
      {
        (*(void (**)(HALS_ObjectMap *))(*(void *)*v5 + 8))(*v5);
        HALS_ObjectMap::ObjectIsDead(*v5, v7);
      }
      ++v5;
    }
    v3 += 3;
  }
  std::vector<std::vector<std::byte>>::__clear[abi:ne180100](v2);
  uint64_t v8 = *((void *)this + 13);
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    HALS_ObjectMap::ObjectIsDead(*((HALS_ObjectMap **)this + 13), v9);
  }
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
}

uint64_t HALS_MetaDeviceDescription::AllocateClockSubDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 8))
  {
    v10[0] = 0;
    v10[1] = 0;
    HALS_System::GetInstance(&v11, 0, v10);
    CFArrayRef v4 = HALS_System::CopyClockDeviceByUID(v11, *(const __CFString **)(a2 + 8), v3);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v12);
    }
    if (v4)
    {
      v9[2] = (uint64_t)&unk_1F14898A0;
      v9[3] = 0;
      operator new();
    }
    v9[0] = 0;
    v9[1] = 0;
    HALS_System::GetInstance(&v11, 0, v9);
    unint64_t v6 = HALS_System::CopyDeviceByUID(v11, *(const __CFString **)(a2 + 8), 0);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v12);
    }
    if (v6)
    {
      uint64_t v11 = (HALS_System *)&unk_1F14898A0;
      int v12 = 0;
      operator new();
    }
    HALS_ObjectMap::ReleaseObject(0, v5);
    HALS_ObjectMap::ReleaseObject(0, v7);
  }
  return 0;
}

void sub_1BAEC2B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  MEMORY[0x1C1859840](v16, 0x10E1C4011717AD3);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va);
  HALS_ObjectMap::ReleaseObject(v17, v19);
  HALS_ObjectMap::ReleaseObject(v15, v20);
  _Unwind_Resume(a1);
}

void HALS_MetaSubDevice::HALS_MetaSubDevice<HALS_Device>(HALS_MetaSubDevice *a1, HALS_MetaDevice *a2, uint64_t a3, __CFString *a4, __CFDictionary *a5)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a3;
  HALS_MetaSubDevice::HALS_MetaSubDevice(a1, a2, a4, a5, a5);
}

void sub_1BAEC2D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a57) {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&a17);
  }
  HALS_Listener::~HALS_Listener((HALS_Listener *)&a9);
  HALS_MetaSubDevice::~HALS_MetaSubDevice(v57);
  _Unwind_Resume(a1);
}

BOOL HALS_MetaDeviceDescription::CanBeActive(const __CFDictionary **this, HALS_Device *a2)
{
  if (HALS_IODevice::GetTransportType(a2) == 1735554416) {
    return 0;
  }
  int HogModeOwner = HALS_Device::GetHogModeOwner(a2);
  if (HogModeOwner != -1 && HogModeOwner != *((_DWORD *)*this + 328)) {
    return 0;
  }
  int TotalNumberChannels = HALS_Device::GetTotalNumberChannels(a2, 1);
  int v6 = HALS_Device::GetTotalNumberChannels(a2, 0);
  if ((HALS_MetaDeviceDescription::IsStackRequested(this) & 1) != 0
    || (CFDictionaryRef v7 = this[3], this[4] - v7 == 24) && *((void *)v7 + 1) - *(void *)v7 >= 9uLL)
  {
    if (!v6) {
      return 0;
    }
  }
  else if (!(TotalNumberChannels | v6))
  {
    return 0;
  }
  double NominalSampleRate = HALS_MetaDeviceDescription::GetNominalSampleRate((HALS_MetaDeviceDescription *)this);
  for (unsigned int i = 0; ; ++i)
  {
    BOOL v10 = i >= HALS_IODevice::GetNumberStreams(a2, 0);
    BOOL result = v10;
    if (v10) {
      break;
    }
    int v12 = (HALS_Stream *)HALS_IODevice::CopyStreamByIndex(a2, 0, i);
    int64x2_t v14 = v12;
    BOOL v15 = !v12
       || (HALS_Stream::GetCurrentVirtualFormat(v12, &v16), v16.mFormatID == 1819304813)
       && (v16.mFormatFlags & 0x40) == 0
       || NominalSampleRate == v16.mSampleRate
       || NominalSampleRate == 0.0;
    HALS_ObjectMap::ReleaseObject(v14, v13);
    if (!v15) {
      return 0;
    }
  }
  return result;
}

void sub_1BAEC2ED8(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

double HALS_MetaDeviceDescription::GetNominalSampleRate(HALS_MetaDeviceDescription *this)
{
  uint64_t v1 = (HALS_MetaSubDevice *)*((void *)this + 13);
  if (v1 || (uint64_t v1 = (HALS_MetaSubDevice *)*((void *)this + 12)) != 0)
  {
    uint64_t v2 = HALS_MetaSubDevice::CopyRealIODevice(v1);
    CFArrayRef v4 = (HALS_ObjectMap *)v2;
    if (v2) {
      double v5 = (*(double (**)(uint64_t))(*(void *)v2 + 264))(v2);
    }
    else {
      double v5 = 0.0;
    }
  }
  else
  {
    uint64_t v7 = *((void *)this + 9);
    if (((*((void *)this + 10) - v7) & 0x7FFFFFFF8) == 0) {
      return 0.0;
    }
    uint64_t v8 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(*(void *)v7 + 72));
    CFArrayRef v4 = (HALS_ObjectMap *)v8;
    if (v8)
    {
      uint64_t v10 = *(void *)(v8 + 248);
      uint64_t v9 = *(std::__shared_weak_count **)(v8 + 256);
      if (v9)
      {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        double v5 = *(double *)(v10 + 24);
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      else
      {
        double v5 = *(double *)(v10 + 24);
      }
    }
    else
    {
      double v5 = 0.0;
    }
  }
  HALS_ObjectMap::ReleaseObject(v4, v3);
  return v5;
}

OS::CF::MutableDictionary *OS::CF::MutableDictionary::MutableDictionary(OS::CF::MutableDictionary *this, CFDictionaryRef theDict)
{
  if (theDict) {
    MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  }
  else {
    MutableCFArrayRef Copy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  }
  *(void *)this = &unk_1F1486FB0;
  *((void *)this + 1) = MutableCopy;
  return this;
}

void HALS_MetaDeviceDescription::UpdateSubDevice(void *a1, uint64_t a2, uint64_t a3)
{
  OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)v32);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v30, *(CFDictionaryRef *)(a3 + 8), @"uid");
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>(theDict, @"uid", cf);
  v29[0] = 0;
  v29[1] = 0;
  HALS_System::GetInstance(&v36, 0, v29);
  int v6 = HALS_System::CopyDeviceByUID(v36, (const __CFString *)cf, 0);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (v6 && HALS_IODevice::GetTransportType(v6) != 1735554416)
  {
    uint64_t v9 = (std::__shared_weak_count *)HALS_Device::CopyServerLocalizedName(v6);
    long long v36 = (HALS_System *)&unk_1F1489A20;
    CFDictionaryRef v37 = v9;
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>(theDict, @"name", v9);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v36);
    int TotalNumberChannels = HALS_Device::GetTotalNumberChannels(v6, 1);
    OS::CF::Number::Number<unsigned int>(&v36, TotalNumberChannels);
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, @"channels-in", v37);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v36);
    int v11 = HALS_Device::GetTotalNumberChannels(v6, 0);
    OS::CF::Number::Number<unsigned int>(&v36, v11);
    uint64_t v7 = theDict;
    uint64_t v8 = v37;
  }
  else
  {
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v36, *(CFDictionaryRef *)(a3 + 8), @"name");
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>(theDict, @"name", v37);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v36);
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v36, *(CFDictionaryRef *)(a3 + 8), @"channels-in");
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, @"channels-in", v37);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v36);
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v36, *(CFDictionaryRef *)(a3 + 8), @"channels-out");
    uint64_t v7 = theDict;
    uint64_t v8 = v37;
  }
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(v7, @"channels-out", v8);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v36);
  CFStringRef v12 = (const __CFString *)cf;
  if (cf) {
    CFRetain(cf);
  }
  long long v34 = &unk_1F1489A20;
  CFStringRef v35 = v12;
  uint64_t v13 = *(HALS_MetaSubDevice ****)(a2 + 24);
  for (unsigned int i = *(HALS_MetaSubDevice ****)(a2 + 32); v13 != i; v13 += 3)
  {
    BOOL v15 = *v13;
    AudioStreamBasicDescription v16 = v13[1];
    while (v15 != v16)
    {
      CFArrayRef v17 = (std::__shared_weak_count *)HALS_MetaSubDevice::CopyRealDeviceUID(*v15);
      long long v36 = (HALS_System *)&unk_1F1489A20;
      CFDictionaryRef v37 = v17;
      if (OS::CF::operator==((CFStringRef)v17, v35))
      {
        int64x2_t v18 = *v15;
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v36);
        if (v18)
        {
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v34);
          int ExtraLatency = HALS_MetaSubDevice::GetExtraLatency(v18, 1);
          OS::CF::Number::Number<unsigned int>(&v36, ExtraLatency);
          OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, @"latency-in", v37);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v36);
          int v20 = HALS_MetaSubDevice::GetExtraLatency(v18, 0);
          OS::CF::Number::Number<unsigned int>(&v36, v20);
          OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, @"latency-out", v37);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v36);
          IsDriftCorrectionOuint64_t n = HALS_MetaSubDevice::IsDriftCorrectionOn(v18);
          OS::CF::Number::Number<int>(&v36, IsDriftCorrectionOn);
          OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, @"drift", v37);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v36);
          DriftCorrectionAlgorithuint64_t m = HALS_MetaSubDevice::GetDriftCorrectionAlgorithm(v18);
          OS::CF::Number::Number<unsigned int>(&v36, DriftCorrectionAlgorithm);
          OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, @"drift algorithm", v37);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v36);
          int DriftCorrectionQuality = HALS_MetaSubDevice::GetDriftCorrectionQuality(v18);
          OS::CF::Number::Number<unsigned int>(&v36, DriftCorrectionQuality);
          OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, @"drift quality", v37);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v36);
          IsSynchPaddingOuint64_t n = HALS_MetaSubDevice::IsSynchPaddingOn(v18);
          OS::CF::Number::Number<int>(&v36, IsSynchPaddingOn ^ 1);
          __int16 v25 = theDict;
          uint64_t v26 = v37;
          goto LABEL_19;
        }
      }
      else
      {
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v36);
      }
      ++v15;
    }
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v34);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v36, *(CFDictionaryRef *)(a3 + 8), @"latency-in");
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, @"latency-in", v37);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v36);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v36, *(CFDictionaryRef *)(a3 + 8), @"latency-out");
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, @"latency-out", v37);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v36);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v36, *(CFDictionaryRef *)(a3 + 8), @"drift");
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, @"drift", v37);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v36);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v36, *(CFDictionaryRef *)(a3 + 8), @"drift algorithm");
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, @"drift algorithm", v37);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v36);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v36, *(CFDictionaryRef *)(a3 + 8), @"drift quality");
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, @"drift quality", v37);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v36);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v36, *(CFDictionaryRef *)(a3 + 8), @"don't pad");
  __int16 v25 = theDict;
  uint64_t v26 = v37;
LABEL_19:
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(v25, @"don't pad", v26);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v36);
  uint64_t v27 = theDict;
  if (theDict) {
    CFDictionaryRef Copy = CFDictionaryCreateCopy(0, theDict);
  }
  else {
    CFDictionaryRef Copy = 0;
  }
  *a1 = &unk_1F14898A0;
  a1[1] = Copy;
  HALS_ObjectMap::ReleaseObject(v6, v27);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v30);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v32);
}

void sub_1BAEC35D4(void *a1)
{
}

void sub_1BAEC35E0(void *a1)
{
}

void sub_1BAEC35EC(void *a1)
{
}

void sub_1BAEC35F8(void *a1)
{
}

void sub_1BAEC3604(void *a1)
{
}

void sub_1BAEC3610(void *a1)
{
}

void sub_1BAEC361C(void *a1)
{
}

void sub_1BAEC3628(void *a1)
{
}

void sub_1BAEC3634(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  HALS_ObjectMap::ReleaseObject(v18, a2);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a11);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a13);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::CopyServerLocalizedName(HALS_Device *this)
{
  uint64_t v2 = *((unsigned int *)this + 4);
  uint64_t v5 = 0x676C6F626E616D6CLL;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  (*(void (**)(HALS_Device *, uint64_t, uint64_t *, uint64_t, char *, uint64_t *, void, void, void))(*(void *)this + 112))(this, v2, &v5, 8, (char *)&v6 + 4, &v7, 0, 0, 0);
  uint64_t result = v7;
  if (!v7)
  {
    uint64_t v4 = *((unsigned int *)this + 4);
    uint64_t v5 = 0x676C6F626C6E616DLL;
    LODWORD(v6) = 0;
    uint64_t v9 = 0;
    int v8 = 0;
    (*(void (**)(HALS_Device *, uint64_t, uint64_t *, uint64_t, int *, uint64_t *, void, void, void))(*(void *)this + 112))(this, v4, &v5, 8, &v8, &v9, 0, 0, 0);
    return v9;
  }
  return result;
}

void sub_1BAEC3780(void *a1)
{
}

void sub_1BAEC3790(void *a1)
{
}

void HALS_MetaDeviceDescription::~HALS_MetaDeviceDescription(HALS_MetaDeviceDescription *this)
{
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void **)((char *)this + 24);
  std::vector<std::vector<std::byte>>::__destroy_vector::operator()[abi:ne180100](&v4);
  OS::CF::UntypedObject::~UntypedObject((HALS_MetaDeviceDescription *)((char *)this + 8));
}

CFDictionaryRef HALS_MetaDeviceDescription::CopyRawDescription(CFDictionaryRef *this)
{
  HALS_MetaDeviceDescription::UpdateRawDescription(this);
  CFDictionaryRef v2 = this[2];
  if (v2) {
    CFRetain(v2);
  }
  return v2;
}

uint64_t HALS_MetaDeviceDescription::GetStackedChannelPolicy(const __CFDictionary **this)
{
  CFDictionaryRef v2 = OS::CF::DictionaryBase<__CFDictionary const*>::HasKey(this[2], @"stacked channel policy");
  if (v2)
  {
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(v6, this[2], @"stacked channel policy");
    unsigned __int8 v3 = OS::CF::Boolean::AsBool(v6[1]);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v6);
    if (v3) {
      return 0;
    }
  }
  platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(v2);
  return (*(uint64_t (**)(uint64_t *))(*platform_behaviors + 32))(platform_behaviors);
}

const __CFBoolean *HALS_MetaDeviceDescription::IsHidden(const __CFDictionary **this)
{
  if (!OS::CF::DictionaryBase<__CFDictionary const*>::HasKey(this[2], @"hidden")) {
    return 0;
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(v4, this[2], @"hidden");
  CFBooleanRef v2 = OS::CF::Boolean::AsBool(v4[1]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v4);
  return v2;
}

uint64_t HALS_MetaDeviceDescription::IsolatedUseCaseID(const __CFDictionary **this)
{
  if (!OS::CF::DictionaryBase<__CFDictionary const*>::HasKey(this[2], @"isolated use case")) {
    return 0;
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v4, this[2], @"isolated use case");
  unsigned int v2 = OS::CF::Number::GetValue<unsigned int>(v4[1], 0);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v4);
  return v2 | 0x100000000;
}

CFTypeRef HALS_MetaDeviceDescription::CopyDeviceName(CFDictionaryRef theDict)
{
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v3, theDict, @"name");
  CFTypeRef v1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v3);
  return v1;
}

void OS::CF::MutableDictionary::RemoveKey(OS::CF::MutableDictionary *this, const __CFString *a2)
{
  if (this) {
    CFDictionaryRemoveValue(this, a2);
  }
}

uint64_t HALS_MetaDeviceDescription::CanBeDefaultDevice(const __CFDictionary **this, int a2, int a3)
{
  if ((HALS_MetaDeviceDescription::IsPrivate(this) & 1) != 0
    || (HALS_MetaDeviceDescription::IsHidden(this) & 1) != 0)
  {
    return 0;
  }
  int NumberStreamsExcludingReferenceStreams = HALS_Device::GetNumberStreamsExcludingReferenceStreams(*this, a2);
  uint64_t result = 0;
  unint64_t v8 = (unint64_t)(this[10] - this[9]) >> 3;
  if (!a2) {
    LODWORD(v8) = 0;
  }
  if (NumberStreamsExcludingReferenceStreams != v8)
  {
    CFDictionaryRef v9 = this[3];
    CFDictionaryRef v10 = this[4];
    if (v9 == v10)
    {
      return 1;
    }
    else
    {
      do
      {
        int v11 = *(uint64_t **)v9;
        CFStringRef v12 = (uint64_t *)*((void *)v9 + 1);
        while (v11 != v12)
        {
          uint64_t v13 = (HALS_IODevice *)HALS_MetaSubDevice::CopyRealDevice<HALS_Device>(*v11);
          BOOL v15 = v13;
          BOOL v16 = !v13
             || !HALS_IODevice::GetNumberStreams(v13, a2)
             || HALS_Device::CanBeDefaultDevice(v15, a2, a3);
          HALS_ObjectMap::ReleaseObject(v15, v14);
          if (!v16) {
            return 0;
          }
          ++v11;
        }
        CFDictionaryRef v9 = (const __CFDictionary *)((char *)v9 + 24);
        uint64_t result = 1;
      }
      while (v9 != v10);
    }
  }
  return result;
}

void sub_1BAEC3B68(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

CFTypeRef HALS_MetaDeviceDescription::CopyTapList(CFDictionaryRef theDict)
{
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)&v3, theDict, @"taps");
  CFTypeRef v1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v3);
  return v1;
}

void get_tap_sample_rate_range(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  int64x2_t v2 = vdupq_n_s64(0x40CF400000000000uLL);
  CA::ValueRangeList::AddRange((double **)a1, (double *)v2.i64);
  int64x2_t v2 = vdupq_n_s64(0x40D5888000000000uLL);
  CA::ValueRangeList::AddRange((double **)a1, (double *)v2.i64);
  int64x2_t v2 = vdupq_n_s64(0x40E5888000000000uLL);
  CA::ValueRangeList::AddRange((double **)a1, (double *)v2.i64);
  int64x2_t v2 = vdupq_n_s64(0x40E7700000000000uLL);
  CA::ValueRangeList::AddRange((double **)a1, (double *)v2.i64);
  int64x2_t v2 = vdupq_n_s64(0x40F5888000000000uLL);
  CA::ValueRangeList::AddRange((double **)a1, (double *)v2.i64);
  int64x2_t v2 = vdupq_n_s64(0x40F7700000000000uLL);
  CA::ValueRangeList::AddRange((double **)a1, (double *)v2.i64);
  int64x2_t v2 = vdupq_n_s64(0x4107700000000000uLL);
  CA::ValueRangeList::AddRange((double **)a1, (double *)v2.i64);
}

void sub_1BAEC3CC8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_MetaDeviceDescription::GetSubDeviceByIndex(uint64_t **this, HALS_MetaDeviceDescription *a2, int a3)
{
  if (this != (uint64_t **)a2)
  {
    int v3 = 0;
    do
    {
      for (unsigned int i = *this; i != this[1]; ++i)
      {
        if (v3 == a3)
        {
          uint64_t v5 = *i;
          int v3 = a3;
          if (*i) {
            return v5;
          }
        }
        else
        {
          ++v3;
        }
      }
      this += 3;
    }
    while (this != (uint64_t **)a2);
  }
  return 0;
}

BOOL HALS_MetaDeviceDescription::IsDeviceInRawDescription(CFDictionaryRef *this, const __CFString *cf)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v26 = &unk_1F1489A20;
  CFStringRef v27 = cf;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v24, this[2], @"subdevices");
  CFArrayRef Size = OS::CF::ArrayBase<__CFArray const*>::GetSize(v25);
  if (Size)
  {
    unint64_t v5 = (unint64_t)Size;
    CFIndex v6 = 0;
    unsigned int v7 = 0;
    while (1)
    {
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::UntypedObject>((const __CFArray *)v22, (uint64_t)v24, v6);
      CFTypeID TypeID = OS::CF::UntypedObject::GetTypeID(v23);
      if (TypeID == (const void *)CFDictionaryGetTypeID())
      {
        OS::CF::UntypedObject::As<OS::CF::Dictionary>(&v20, (uint64_t)v22);
        if (theDict)
        {
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v18, theDict, @"uid");
          if (v19) {
            BOOL v9 = OS::CF::operator==((CFStringRef)v19, v27);
          }
          else {
            BOOL v9 = 0;
          }
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v18);
          goto LABEL_27;
        }
      }
      else
      {
        CFDictionaryRef v10 = OS::CF::UntypedObject::GetTypeID(v23);
        if (v10 != (const void *)CFArrayGetTypeID())
        {
          BOOL v9 = 0;
          goto LABEL_28;
        }
        OS::CF::UntypedObject::As<OS::CF::Array>(&v20, (uint64_t)v22);
        if (theDict)
        {
          CFArrayRef v11 = OS::CF::ArrayBase<__CFArray const*>::GetSize(theDict);
          if (v11)
          {
            CFArrayRef v12 = v11;
            unint64_t v13 = 1;
            do
            {
              OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v18, (uint64_t)&v20, v13 - 1);
              if (v19)
              {
                OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v16, v19, @"uid");
                if (theString1) {
                  BOOL v9 = OS::CF::operator==(theString1, v27);
                }
                else {
                  BOOL v9 = 0;
                }
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v16);
              }
              else
              {
                BOOL v9 = 0;
              }
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v18);
              if (v9) {
                break;
              }
            }
            while (v13++ < (unint64_t)v12);
            goto LABEL_27;
          }
        }
      }
      BOOL v9 = 0;
LABEL_27:
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v20);
LABEL_28:
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v22);
      if (!v9)
      {
        CFIndex v6 = ++v7;
        if (v5 > v7) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  BOOL v9 = 0;
LABEL_32:
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v24);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v26);
  return v9;
}

const __CFArray *OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Array>(const __CFArray *result, uint64_t a2, CFIndex a3)
{
  *(void *)uint64_t result = &unk_1F1489968;
  *((void *)result + 1) = 0;
  if ((a3 & 0x8000000000000000) == 0)
  {
    CFArrayRef v4 = result;
    uint64_t result = *(const __CFArray **)(a2 + 8);
    if (result)
    {
      uint64_t result = (const __CFArray *)CFArrayGetCount(result);
      if ((uint64_t)result > a3)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 8), a3);
        unsigned int v7 = ValueAtIndex;
        CFTypeID v8 = ValueAtIndex ? CFGetTypeID(ValueAtIndex) : 0;
        uint64_t result = (const __CFArray *)CFArrayGetTypeID();
        if ((const __CFArray *)v8 == result)
        {
          if (v7)
          {
            CFRetain(v7);
            uint64_t v9 = (uint64_t)v4;
            uint64_t v10 = (uint64_t)v7;
          }
          else
          {
            uint64_t v9 = (uint64_t)v4;
            uint64_t v10 = 0;
          }
          return (const __CFArray *)OS::CF::UntypedObject::operator=(v9, v10);
        }
      }
    }
  }
  return result;
}

void HALS_MetaDeviceDescription::SetSubDSPTypesForClient(uint64_t a1, void *a2)
{
  OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)v15, *(CFDictionaryRef *)(a1 + 16));
  if (a2[2])
  {
    CFIndex v6 = (void *)*a2;
    CFArrayRef v4 = a2 + 1;
    unint64_t v5 = v6;
    if (v6 != v4)
    {
      while (1)
      {
        int v7 = *((_DWORD *)v5 + 7);
        if (v7 == 3) {
          break;
        }
        if (v7 == 2)
        {
          int v8 = 1;
LABEL_7:
          OS::CF::Number::Number<unsigned int>(&v13, v8);
          OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, @"vocal isolation type", v14);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v13);
        }
        uint64_t v9 = (void *)v5[1];
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (void *)v5[2];
            BOOL v11 = *v10 == (void)v5;
            unint64_t v5 = v10;
          }
          while (!v11);
        }
        unint64_t v5 = v10;
        if (v10 == v4) {
          goto LABEL_16;
        }
      }
      int v8 = 2;
      goto LABEL_7;
    }
  }
  else
  {
    OS::CF::Number::Number<unsigned int>(&v13, 0);
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, @"vocal isolation type", v14);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v13);
  }
LABEL_16:
  CFDictionaryRef Copy = theDict;
  if (theDict) {
    CFDictionaryRef Copy = CFDictionaryCreateCopy(0, theDict);
  }
  OS::CF::UntypedObject::operator=(a1 + 8, (uint64_t)Copy);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v15);
}

BOOL HALS_MetaDeviceDescription::IsDeviceInRawDescription(CFDictionaryRef *this, HALS_Device *a2)
{
  CFStringRef v3 = (const __CFString *)(*(uint64_t (**)(HALS_Device *))(*(void *)a2 + 208))(a2);
  v6[0] = &unk_1F1489A20;
  v6[1] = v3;
  IsDeviceInRawDescriptiouint64_t n = HALS_MetaDeviceDescription::IsDeviceInRawDescription(this, v3);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v6);
  return IsDeviceInRawDescription;
}

uint64_t AMCP::DAL::Multi_Reader_Synchronized_Mixer::remove_source(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    AMCP::DAL::Synchronized_Mixer::remove_source((AMCP::Log::Scope_Registry *)a1, a2, 0);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 156));
  int v5 = *(_DWORD *)(a1 + 164);
  *(_DWORD *)(a1 + 164) = v5 - 1;
  if (v5 == 1)
  {
    *(unsigned char *)(a1 + 168) = 1;
  }
  else if (v5 <= 0)
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    CFIndex v6 = **(NSObject ***)buf;
    if (*(void *)v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v31);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      unint64_t v9 = 0;
      uint64_t v10 = 0;
      int v11 = 47;
      do
      {
        CFArrayRef v12 = &aLibraryCachesC_150[v9];
        if (v11 == 47) {
          uint64_t v10 = &aLibraryCachesC_150[v9];
        }
        int v11 = v12[1];
        if (!v12[1]) {
          break;
        }
      }
      while (v9++ < 0xFFF);
      if (v10) {
        int64x2_t v14 = v10 + 1;
      }
      else {
        int64x2_t v14 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Multi_Reader_Synchronized_Mixer.cpp";
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)unint64_t v31 = 2080;
      *(void *)&v31[2] = v14;
      __int16 v32 = 1024;
      int v33 = 42;
      __int16 v34 = 2080;
      *(void *)CFStringRef v35 = "not (m_refcount >= 0)";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v21);
    std::logic_error::logic_error(&v22, &v21);
    v22.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v23, &v22);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v28 = -1;
    v23.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    CFDictionaryRef v24 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    *(void *)&void v35[6] = "virtual BOOL AMCP::DAL::Multi_Reader_Synchronized_Mixer::remove_source(const Source_ID &, Buffer_Alignment)";
    long long v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Multi_Reader_Synchronized_Mixer.cpp";
    int v37 = 42;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    long long v19 = v16;
    uint64_t v20 = v17;
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    int64x2_t v18 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 156));
  return 0;
}

void sub_1BAEC44E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  os_unfair_lock_unlock(v27);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Multi_Reader_Synchronized_Mixer::add_source(os_unfair_lock_s *a1, unsigned int *a2, int a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    AMCP::DAL::Synchronized_Mixer::add_source((AMCP::Log::Scope_Registry *)a1, a2, 0);
  }
  os_unfair_lock_lock(a1 + 39);
  uint32_t os_unfair_lock_opaque = a1[41]._os_unfair_lock_opaque;
  if ((os_unfair_lock_opaque & 0x80000000) != 0)
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    CFIndex v6 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      unint64_t v9 = 0;
      uint64_t v10 = 0;
      int v11 = 47;
      do
      {
        CFArrayRef v12 = &aLibraryCachesC_150[v9];
        if (v11 == 47) {
          uint64_t v10 = &aLibraryCachesC_150[v9];
        }
        int v11 = v12[1];
        if (!v12[1]) {
          break;
        }
      }
      while (v9++ < 0xFFF);
      if (v10) {
        int64x2_t v14 = v10 + 1;
      }
      else {
        int64x2_t v14 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Multi_Reader_Synchronized_Mixer.cpp";
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)long long v30 = 2080;
      *(void *)&v30[2] = v14;
      __int16 v31 = 1024;
      int v32 = 24;
      __int16 v33 = 2080;
      *(void *)__int16 v34 = "not (m_refcount >= 0)";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v20);
    std::logic_error::logic_error(&v21, &v20);
    v21.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v22, &v21);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    v22.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    std::logic_error v23 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    *(void *)&void v34[6] = "virtual void AMCP::DAL::Multi_Reader_Synchronized_Mixer::add_source(const Source_ID &, Buffer_Alignment)";
    CFStringRef v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Multi_Reader_Synchronized_Mixer.cpp";
    int v36 = 24;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    uint64_t v17 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  a1[41]._uint32_t os_unfair_lock_opaque = os_unfair_lock_opaque + 1;

  os_unfair_lock_unlock(a1 + 39);
}

void sub_1BAEC4864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  os_unfair_lock_unlock(v27);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Multi_Reader_Synchronized_Mixer::commit_direct_write(os_unfair_lock_s *a1, unsigned int *a2, uint64_t a3)
{
  CFIndex v6 = a1 + 39;
  os_unfair_lock_lock(a1 + 39);
  AMCP::DAL::Synchronized_Mixer::commit_direct_write((uint64_t)a1, a2, a3);

  os_unfair_lock_unlock(v6);
}

void sub_1BAEC4970(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Multi_Reader_Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(uint64_t a1, int *a2, void *a3, int a4)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 156));
    int v8 = *(_DWORD *)(a1 + 164);
    if (v8 < 0)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      unint64_t v9 = **(NSObject ***)buf;
      if (*(void *)v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v33);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        unint64_t v12 = 0;
        uint64_t v13 = 0;
        int v14 = 47;
        do
        {
          long long v15 = &aLibraryCachesC_150[v12];
          if (v14 == 47) {
            uint64_t v13 = &aLibraryCachesC_150[v12];
          }
          int v14 = v15[1];
          if (!v15[1]) {
            break;
          }
        }
        while (v12++ < 0xFFF);
        if (v13) {
          uint64_t v17 = v13 + 1;
        }
        else {
          uint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Multi_Reader_Synchronized_Mixer.cpp";
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v11;
        *(_WORD *)__int16 v33 = 2080;
        *(void *)&void v33[2] = v17;
        __int16 v34 = 1024;
        int v35 = 76;
        __int16 v36 = 2080;
        *(void *)uint64_t v37 = "not (m_refcount >= 0)";
        _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v31);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v23);
      std::logic_error::logic_error(&v24, &v23);
      v24.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v25, &v24);
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      int v30 = -1;
      v25.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      uint64_t v26 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v25);
      *(void *)&v37[6] = "virtual void AMCP::DAL::Multi_Reader_Synchronized_Mixer::set_anchor_time_and_nominal_buffer_s"
                           "ize(const Source_ID &, const DAL_Time_Range &, Buffer_Alignment)";
      uint64_t v38 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Multi_Reader_Synchronized_Mixer.cpp";
      int v39 = 76;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v18);
      long long v21 = v18;
      uint64_t v22 = v19;
      long long v18 = 0uLL;
      uint64_t v19 = 0;
      std::string v20 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    if (v8 == 1 || *(unsigned char *)(a1 + 168))
    {
      *(unsigned char *)(a1 + 168) = 0;
      AMCP::DAL::Ring_Buffer_Base::set_anchor_time_and_nominal_buffer_size(a1, v7, (uint64_t)a3);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 156));
  }
  else
  {
    AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(a1, a2, a3);
  }
}

void sub_1BAEC4CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26)
{
  os_unfair_lock_unlock(v26);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Multi_Reader_Synchronized_Mixer::get_allowed_read_range(AMCP::DAL::Multi_Reader_Synchronized_Mixer *this@<X0>, uint64_t a2@<X8>)
{
  if (*((_DWORD *)this + 40))
  {
    AMCP::DAL::DAL_Buffer::get_timebase((AMCP::DAL::DAL_Buffer *)&v5, (uint64_t)this);
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range(a2, &v5, 0.0, 4294967300.0);
    CFStringRef v3 = v6;
    if (v6)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else
  {
    CFArrayRef v4 = *(void (**)(void))(*(void *)this + 64);
    v4();
  }
}

void AMCP::DAL::Multi_Reader_Synchronized_Mixer::get_time_range(AMCP::DAL::Multi_Reader_Synchronized_Mixer *this@<X0>, uint64_t a2@<X8>)
{
  CFArrayRef v4 = (os_unfair_lock_s *)((char *)this + 156);
  os_unfair_lock_lock((os_unfair_lock_t)this + 39);
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 8);
  uint64_t v5 = *((void *)this + 4);
  *(void *)(a2 + 16) = *((void *)this + 3);
  *(void *)(a2 + 24) = v5;
  uint64_t v6 = *((void *)this + 5);
  *(void *)(a2 + 32) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a2 + 40) = *((_OWORD *)this + 3);
  uint64_t v7 = *((void *)this + 9);
  *(void *)(a2 + 56) = *((void *)this + 8);
  *(void *)(a2 + 64) = v7;
  uint64_t v8 = *((void *)this + 10);
  *(void *)(a2 + 72) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }

  os_unfair_lock_unlock(v4);
}

void AMCP::DAL::Multi_Reader_Synchronized_Mixer::~Multi_Reader_Synchronized_Mixer(AMCP::DAL::Multi_Reader_Synchronized_Mixer *this)
{
  AMCP::DAL::Synchronized_Mixer::~Synchronized_Mixer(this);

  JUMPOUT(0x1C1859840);
}

void HALB_AsyncLogMessage::perform(HALB_AsyncLogMessage *this)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *((void *)this + 34);
  unint64_t v3 = mach_absolute_time();
  double v4 = (double)v3 * 0.0000000416666667;
  if (*(double *)&_LastSyncOffset + 0.5 >= v4)
  {
    double v5 = *(double *)&_BootAbsoluteTime;
  }
  else
  {
    unint64_t v3 = gettimeofday((timeval *)v52, 0);
    _LastSyncOffset = *(void *)&v4;
    double v5 = (double)*(uint64_t *)v52 - *MEMORY[0x1E4F1CF70] + (double)*(int *)&v52[8] * 0.000001 - v4;
    *(double *)&_BootAbsoluteTime = v5;
  }
  unint64_t v6 = CATimeUtilities::GregorianDateFromAbsoluteTime((CATimeUtilities *)v3, v5 + (double)v2 * 0.0000000416666667);
  signed int v8 = llround(v7 * 1000000.0);
  snprintf(__str, 0x40uLL, "%02d:%02d:%02d.%06d", (int)(v6 >> 24) >> 24, SHIDWORD(v6) >> 24, v8 / 1000000, v8 % 1000000);
  if (*((_DWORD *)this + 80))
  {
    unint64_t v9 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 72));
    mach_port_t v11 = v9;
    if (!v9) {
      goto LABEL_15;
    }
    int v12 = *((_DWORD *)v9 + 5);
    if (v12 <= 1701078389)
    {
      if (v12 == 1633773415)
      {
LABEL_13:
        uint64_t v14 = (*(uint64_t (**)(HALS_ObjectMap *))(*(void *)v9 + 216))(v9);
        BOOL v15 = v14 != 0;
        goto LABEL_16;
      }
      int v13 = 1633969526;
    }
    else
    {
      if (v12 == 1701078390 || v12 == 1701733488) {
        goto LABEL_13;
      }
      int v13 = 1919182198;
    }
    if (v12 == v13) {
      goto LABEL_13;
    }
    int v16 = *((_DWORD *)v9 + 6);
    if (v12 != v16)
    {
      BOOL v15 = 0;
      uint64_t v14 = 0;
      if (v16 <= 1701078389)
      {
        if (v16 == 1633773415) {
          goto LABEL_13;
        }
        int v51 = 1633969526;
      }
      else
      {
        if (v16 == 1701078390 || v16 == 1919182198) {
          goto LABEL_13;
        }
        int v51 = 1701733488;
      }
      if (v16 == v51) {
        goto LABEL_13;
      }
    }
    else
    {
LABEL_15:
      uint64_t v14 = 0;
      BOOL v15 = 0;
    }
LABEL_16:
    HALS_ObjectMap::ReleaseObject(v11, v10);
    switch(*((_DWORD *)this + 80))
    {
      case 0:
        goto LABEL_17;
      case 1:
        BOOL v23 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
        if (v15)
        {
          if (!v23) {
            goto LABEL_20;
          }
          uint64_t v24 = *((void *)this + 35);
          *(_DWORD *)uint64_t v52 = 136316418;
          *(void *)&v52[4] = "HALB_AsyncLog.cpp";
          *(_WORD *)&v52[12] = 1024;
          *(_DWORD *)&v52[14] = 133;
          __int16 v53 = 2080;
          __n128 v54 = __str;
          __int16 v55 = 2048;
          uint64_t v56 = v24;
          __int16 v57 = 2080;
          uint64_t v58 = (char *)this + 16;
          __int16 v59 = 2080;
          uint64_t v60 = v14;
          long long v18 = MEMORY[0x1E4F14500];
          uint64_t v19 = "%25s:%-5d  %s thread %llx: %s: arg1: %s";
        }
        else
        {
          if (!v23) {
            goto LABEL_20;
          }
          uint64_t v37 = *((void *)this + 35);
          uint64_t v38 = *((void *)this + 36);
          *(_DWORD *)uint64_t v52 = 136316418;
          *(void *)&v52[4] = "HALB_AsyncLog.cpp";
          *(_WORD *)&v52[12] = 1024;
          *(_DWORD *)&v52[14] = 137;
          __int16 v53 = 2080;
          __n128 v54 = __str;
          __int16 v55 = 2048;
          uint64_t v56 = v37;
          __int16 v57 = 2080;
          uint64_t v58 = (char *)this + 16;
          __int16 v59 = 2048;
          uint64_t v60 = v38;
          long long v18 = MEMORY[0x1E4F14500];
          uint64_t v19 = "%25s:%-5d  %s thread %llx: %s: arg1: %llu";
        }
        uint32_t v20 = 58;
        goto LABEL_19;
      case 2:
        BOOL v25 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
        if (v15)
        {
          if (!v25) {
            goto LABEL_20;
          }
          uint64_t v26 = *((void *)this + 35);
          uint64_t v27 = *((void *)this + 37);
          *(_DWORD *)uint64_t v52 = 136316674;
          *(void *)&v52[4] = "HALB_AsyncLog.cpp";
          *(_WORD *)&v52[12] = 1024;
          *(_DWORD *)&v52[14] = 144;
          __int16 v53 = 2080;
          __n128 v54 = __str;
          __int16 v55 = 2048;
          uint64_t v56 = v26;
          __int16 v57 = 2080;
          uint64_t v58 = (char *)this + 16;
          __int16 v59 = 2080;
          uint64_t v60 = v14;
          __int16 v61 = 2048;
          uint64_t v62 = v27;
          long long v18 = MEMORY[0x1E4F14500];
          uint64_t v19 = "%25s:%-5d  %s thread %llx: %s: arg1: %s arg2: %llu";
        }
        else
        {
          if (!v25) {
            goto LABEL_20;
          }
          uint64_t v39 = *((void *)this + 35);
          uint64_t v40 = *((void *)this + 36);
          uint64_t v41 = *((void *)this + 37);
          *(_DWORD *)uint64_t v52 = 136316674;
          *(void *)&v52[4] = "HALB_AsyncLog.cpp";
          *(_WORD *)&v52[12] = 1024;
          *(_DWORD *)&v52[14] = 148;
          __int16 v53 = 2080;
          __n128 v54 = __str;
          __int16 v55 = 2048;
          uint64_t v56 = v39;
          __int16 v57 = 2080;
          uint64_t v58 = (char *)this + 16;
          __int16 v59 = 2048;
          uint64_t v60 = v40;
          __int16 v61 = 2048;
          uint64_t v62 = v41;
          long long v18 = MEMORY[0x1E4F14500];
          uint64_t v19 = "%25s:%-5d  %s thread %llx: %s: arg1: %llu arg2: %llu";
        }
        uint32_t v20 = 68;
        goto LABEL_19;
      case 3:
        BOOL v28 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
        if (v15)
        {
          if (!v28) {
            goto LABEL_20;
          }
          uint64_t v29 = *((void *)this + 35);
          uint64_t v30 = *((void *)this + 37);
          uint64_t v31 = *((void *)this + 38);
          *(_DWORD *)uint64_t v52 = 136316930;
          *(void *)&v52[4] = "HALB_AsyncLog.cpp";
          *(_WORD *)&v52[12] = 1024;
          *(_DWORD *)&v52[14] = 155;
          __int16 v53 = 2080;
          __n128 v54 = __str;
          __int16 v55 = 2048;
          uint64_t v56 = v29;
          __int16 v57 = 2080;
          uint64_t v58 = (char *)this + 16;
          __int16 v59 = 2080;
          uint64_t v60 = v14;
          __int16 v61 = 2048;
          uint64_t v62 = v30;
          __int16 v63 = 2048;
          uint64_t v64 = v31;
          long long v18 = MEMORY[0x1E4F14500];
          uint64_t v19 = "%25s:%-5d  %s thread %llx: %s: arg1: %s arg2: %llu arg3: %llu";
        }
        else
        {
          if (!v28) {
            goto LABEL_20;
          }
          uint64_t v42 = *((void *)this + 35);
          uint64_t v43 = *((void *)this + 36);
          uint64_t v44 = *((void *)this + 37);
          uint64_t v45 = *((void *)this + 38);
          *(_DWORD *)uint64_t v52 = 136316930;
          *(void *)&v52[4] = "HALB_AsyncLog.cpp";
          *(_WORD *)&v52[12] = 1024;
          *(_DWORD *)&v52[14] = 159;
          __int16 v53 = 2080;
          __n128 v54 = __str;
          __int16 v55 = 2048;
          uint64_t v56 = v42;
          __int16 v57 = 2080;
          uint64_t v58 = (char *)this + 16;
          __int16 v59 = 2048;
          uint64_t v60 = v43;
          __int16 v61 = 2048;
          uint64_t v62 = v44;
          __int16 v63 = 2048;
          uint64_t v64 = v45;
          long long v18 = MEMORY[0x1E4F14500];
          uint64_t v19 = "%25s:%-5d  %s thread %llx: %s: arg1: %llu arg2: %llu arg3: %llu";
        }
        uint32_t v20 = 78;
        goto LABEL_19;
      case 4:
        BOOL v32 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
        if (v15)
        {
          if (!v32) {
            goto LABEL_20;
          }
          uint64_t v33 = *((void *)this + 35);
          uint64_t v34 = *((void *)this + 37);
          uint64_t v35 = *((void *)this + 38);
          uint64_t v36 = *((void *)this + 39);
          *(_DWORD *)uint64_t v52 = 136317186;
          *(void *)&v52[4] = "HALB_AsyncLog.cpp";
          *(_WORD *)&v52[12] = 1024;
          *(_DWORD *)&v52[14] = 166;
          __int16 v53 = 2080;
          __n128 v54 = __str;
          __int16 v55 = 2048;
          uint64_t v56 = v33;
          __int16 v57 = 2080;
          uint64_t v58 = (char *)this + 16;
          __int16 v59 = 2080;
          uint64_t v60 = v14;
          __int16 v61 = 2048;
          uint64_t v62 = v34;
          __int16 v63 = 2048;
          uint64_t v64 = v35;
          __int16 v65 = 2048;
          uint64_t v66 = v36;
          long long v18 = MEMORY[0x1E4F14500];
          uint64_t v19 = "%25s:%-5d  %s thread %llx: %s: arg1: %s arg2: %llu arg3: %llu arg4: %llu";
        }
        else
        {
          if (!v32) {
            goto LABEL_20;
          }
          uint64_t v46 = *((void *)this + 35);
          uint64_t v47 = *((void *)this + 36);
          uint64_t v48 = *((void *)this + 37);
          uint64_t v49 = *((void *)this + 38);
          uint64_t v50 = *((void *)this + 39);
          *(_DWORD *)uint64_t v52 = 136317186;
          *(void *)&v52[4] = "HALB_AsyncLog.cpp";
          *(_WORD *)&v52[12] = 1024;
          *(_DWORD *)&v52[14] = 170;
          __int16 v53 = 2080;
          __n128 v54 = __str;
          __int16 v55 = 2048;
          uint64_t v56 = v46;
          __int16 v57 = 2080;
          uint64_t v58 = (char *)this + 16;
          __int16 v59 = 2048;
          uint64_t v60 = v47;
          __int16 v61 = 2048;
          uint64_t v62 = v48;
          __int16 v63 = 2048;
          uint64_t v64 = v49;
          __int16 v65 = 2048;
          uint64_t v66 = v50;
          long long v18 = MEMORY[0x1E4F14500];
          uint64_t v19 = "%25s:%-5d  %s thread %llx: %s: arg1: %llu arg2: %llu arg3: %llu arg4: %llu";
        }
        uint32_t v20 = 88;
        break;
      default:
        goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_17:
  if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_20;
  }
  uint64_t v17 = *((void *)this + 35);
  *(_DWORD *)uint64_t v52 = 136316162;
  *(void *)&v52[4] = "HALB_AsyncLog.cpp";
  *(_WORD *)&v52[12] = 1024;
  *(_DWORD *)&v52[14] = 127;
  __int16 v53 = 2080;
  __n128 v54 = __str;
  __int16 v55 = 2048;
  uint64_t v56 = v17;
  __int16 v57 = 2080;
  uint64_t v58 = (char *)this + 16;
  long long v18 = MEMORY[0x1E4F14500];
  uint64_t v19 = "%25s:%-5d  %s thread %llx: %s";
  uint32_t v20 = 48;
LABEL_19:
  _os_log_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_DEFAULT, v19, v52, v20);
LABEL_20:
  uint64_t v21 = *((void *)this + 41);
  if (v21)
  {
    unsigned __int8 v22 = atomic_load((unsigned __int8 *)(v21 + 32));
    if (v22) {
      OSAtomicEnqueue((OSQueueHead *)(v21 + 16), this, 0x150uLL);
    }
    else {
      (*(void (**)(HALB_AsyncLogMessage *))(*(void *)this + 8))(this);
    }
  }
}

void sub_1BAEC576C(_Unwind_Exception *exception_object)
{
}

void HALB_AsyncLogMessage::~HALB_AsyncLogMessage(HALB_AsyncLogMessage *this)
{
}

uint64_t (**std::any_cast[abi:ne180100]<std::string const>(uint64_t (**result)(uint64_t, void, void, void *, void *)))(uint64_t, void, void, void *, void *)
{
  if (result)
  {
    if (*result) {
    else
    }
      return 0;
  }
  return result;
}

void std::__throw_bad_any_cast[abi:ne180100]()
{
  exceptiouint64_t n = (std::bad_any_cast *)__cxa_allocate_exception(8uLL);
  exception->__vftable = 0;
  uint64_t v1 = std::bad_any_cast::bad_any_cast(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA330], (void (*)(void *))std::bad_any_cast::~bad_any_cast);
}

uint64_t (**std::any_cast[abi:ne180100]<unsigned int const>(uint64_t (**result)(uint64_t, void, void, void, void *)))(uint64_t, void, void, void, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void, void *))(*result)(3, result, 0, MEMORY[0x1E4FBA3B0], &std::__any_imp::__unique_typeinfo<unsigned int>::__id);
    }
    else {
      return 0;
    }
  }
  return result;
}

std::bad_cast *std::bad_any_cast::bad_any_cast(std::bad_any_cast *this)
{
  uint64_t result = std::bad_cast::bad_cast(this);
  result->__vftable = (std::bad_cast_vtbl *)(MEMORY[0x1E4FBA4C0] + 16);
  return result;
}

void HALB_CaptureFile_NameBuilder::FindAndBuild(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v5 = a1;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a1 != a2)
  {
    while (*(_DWORD *)v5 != a3)
    {
      v5 += 40;
      if (v5 == a2) {
        return;
      }
    }
  }
  if (v5 != a2)
  {
    switch(*(_DWORD *)v5)
    {
      case 0:
        unint64_t v6 = (const std::string::value_type **)std::any_cast[abi:ne180100]<std::string const>((uint64_t (**)(uint64_t, void, void, void *, void *))(v5 + 8));
        if (!v6) {
          std::__throw_bad_any_cast[abi:ne180100]();
        }
        if (*((char *)v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *v6, (std::string::size_type)v6[1]);
        }
        else
        {
          long long v7 = *(_OWORD *)v6;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v6[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        goto LABEL_61;
      case 1:
        uint64_t v17 = (const std::string::value_type **)std::any_cast[abi:ne180100]<std::string const>((uint64_t (**)(uint64_t, void, void, void *, void *))(v5 + 8));
        if (!v17) {
          std::__throw_bad_any_cast[abi:ne180100]();
        }
        if (*((char *)v17 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *v17, (std::string::size_type)v17[1]);
        }
        else
        {
          long long v18 = *(_OWORD *)v17;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v17[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        goto LABEL_61;
      case 2:
        uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(v5 + 8);
        uint64_t v9 = v5 + 8;
        signed int v8 = v10;
        if (!v10) {
          goto LABEL_67;
        }
        if (!v11) {
          goto LABEL_67;
        }
        BOOL v12 = *v11 == 1;
        if (*v11 == 1) {
          int v13 = "-in";
        }
        else {
          int v13 = "-out";
        }
        uint64_t v14 = 3;
        goto LABEL_37;
      case 3:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"-Index_", 7);
        goto LABEL_18;
      case 4:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"-", 1);
LABEL_18:
        if (!std::any_cast[abi:ne180100]<unsigned int const>((uint64_t (**)(uint64_t, void, void, void, void *))(v5 + 8))) {
          goto LABEL_67;
        }
        std::ostream::operator<<();
        return;
      case 5:
        uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(v5 + 8);
        uint64_t v20 = v5 + 8;
        uint64_t v19 = v21;
        if (!v21) {
          goto LABEL_67;
        }
        if (!v22) {
          goto LABEL_67;
        }
        if (*v22 == 1)
        {
          int v13 = "-software_reference";
        }
        else
        {
          if (*v22 != 2) {
            return;
          }
          int v13 = "-hardware_reference";
        }
        uint64_t v27 = 19;
LABEL_65:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v13, v27);
        break;
      case 6:
        BOOL v25 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(v5 + 8);
        uint64_t v24 = v5 + 8;
        BOOL v23 = v25;
        if (!v25
        {
LABEL_67:
          std::__throw_bad_any_cast[abi:ne180100]();
        }
        BOOL v12 = *v26 == 0;
        if (*v26) {
          int v13 = "-PostDSP";
        }
        else {
          int v13 = "-PreDSP";
        }
        uint64_t v14 = 7;
LABEL_37:
        if (v12) {
          uint64_t v27 = v14;
        }
        else {
          uint64_t v27 = v14 + 1;
        }
        goto LABEL_65;
      case 7:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"-", 1);
        BOOL v15 = (const std::string::value_type **)std::any_cast[abi:ne180100]<std::string const>((uint64_t (**)(uint64_t, void, void, void *, void *))(v5 + 8));
        if (!v15) {
          std::__throw_bad_any_cast[abi:ne180100]();
        }
        if (*((char *)v15 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *v15, (std::string::size_type)v15[1]);
        }
        else
        {
          long long v16 = *(_OWORD *)v15;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v15[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
LABEL_61:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        return;
      default:
        return;
    }
  }
}

void sub_1BAEC5C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, int a10, __int16 a11, char a12, char a13)
{
  if (a2)
  {
    if (a13 < 0) {
      operator delete((void *)__p);
    }
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p) = 136315394;
      *(void *)((char *)&__p + 4) = "HALB_CaptureFile_NameBuilder.cpp";
      WORD6(__p) = 1024;
      *(_DWORD *)((char *)&__p + 14) = 66;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALB_CaptureFile_NameBuilder::BuildOne: Caught exception", (uint8_t *)&__p, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAEC5BDCLL);
  }
  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorIDv8_fNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_(void *a1, char *__src, unint64_t a3, char *a4)
{
  if (a3)
  {
    double v4 = a4;
    unint64_t v6 = __src;
    uint64_t v9 = (char *)a1[1];
    uint64_t v8 = a1[2];
    if (a3 <= (v8 - (uint64_t)v9) >> 5)
    {
      uint64_t v15 = v9 - __src;
      long long v16 = (char *)a1[1];
      uint64_t v17 = a3;
      if (a3 <= (v9 - __src) >> 5) {
        goto LABEL_16;
      }
      uint64_t v18 = 0;
      uint64_t v17 = v15 >> 5;
      long long v16 = &v9[32 * (a3 - (v15 >> 5))];
      uint64_t v19 = 32 * a3 - 32 * (v15 >> 5);
      do
      {
        uint64_t v20 = &v9[v18];
        long long v21 = *((_OWORD *)a4 + 1);
        *(_OWORD *)uint64_t v20 = *(_OWORD *)a4;
        *((_OWORD *)v20 + 1) = v21;
        v18 += 32;
      }
      while (v19 != v18);
      a1[1] = v16;
      if (v9 != __src)
      {
LABEL_16:
        unsigned __int8 v22 = &__src[32 * a3];
        BOOL v23 = &v16[-32 * a3];
        uint64_t v24 = v16;
        if (v23 < v9)
        {
          uint64_t v24 = v16;
          do
          {
            long long v25 = *(_OWORD *)v23;
            long long v26 = *((_OWORD *)v23 + 1);
            v23 += 32;
            *(_OWORD *)uint64_t v24 = v25;
            *((_OWORD *)v24 + 1) = v26;
            v24 += 32;
          }
          while (v23 < v9);
        }
        a1[1] = v24;
        if (v16 != v22) {
          memmove(&v16[-32 * ((v16 - v22) >> 5)], __src, v16 - v22);
        }
        if (v6 <= v4)
        {
          if (a1[1] <= (unint64_t)v4) {
            unint64_t v27 = 0;
          }
          else {
            unint64_t v27 = a3;
          }
          v4 += 32 * v27;
        }
        do
        {
          long long v28 = *((_OWORD *)v4 + 1);
          *(_OWORD *)unint64_t v6 = *(_OWORD *)v4;
          *((_OWORD *)v6 + 1) = v28;
          v6 += 32;
          --v17;
        }
        while (v17);
      }
    }
    else
    {
      uint64_t v10 = (char *)*a1;
      unint64_t v11 = a3 + ((uint64_t)&v9[-*a1] >> 5);
      if (v11 >> 59) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v12 = v8 - (void)v10;
      if (v12 >> 4 > v11) {
        unint64_t v11 = v12 >> 4;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        if (v13 >> 59) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v14 = (char *)operator new(32 * v13);
      }
      else
      {
        uint64_t v14 = 0;
      }
      uint64_t v29 = &v14[32 * ((v6 - v10) >> 5)];
      uint64_t v30 = &v29[32 * a3];
      uint64_t v31 = 32 * a3;
      BOOL v32 = v29;
      do
      {
        long long v33 = *((_OWORD *)v4 + 1);
        *(_OWORD *)BOOL v32 = *(_OWORD *)v4;
        *((_OWORD *)v32 + 1) = v33;
        v32 += 32;
        v31 -= 32;
      }
      while (v31);
      uint64_t v34 = (char *)*a1;
      if ((char *)*a1 != v6)
      {
        uint64_t v35 = v6;
        do
        {
          long long v36 = *((_OWORD *)v35 - 2);
          long long v37 = *((_OWORD *)v35 - 1);
          v35 -= 32;
          *((_OWORD *)v29 - 2) = v36;
          *((_OWORD *)v29 - 1) = v37;
          v29 -= 32;
        }
        while (v35 != v34);
        uint64_t v9 = (char *)a1[1];
      }
      uint64_t v38 = &v14[32 * v13];
      if (v9 != v6) {
        memmove(v30, v6, v9 - v6);
      }
      uint64_t v39 = (char *)*a1;
      *a1 = v29;
      a1[1] = &v30[v9 - v6];
      a1[2] = v38;
      if (v39)
      {
        operator delete(v39);
      }
    }
  }
}

void ramstadPrecalculateCoeffs<float>(int a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, float *a6, double a7)
{
  if (a1 >= 1)
  {
    double v9 = a7 * 3.14159265;
    uint64_t v10 = a1;
    unint64_t v11 = (double *)(a2 + 8);
    uint64_t v12 = (double *)(a3 + 8);
    unint64_t v13 = (double *)(a4 + 176);
    do
    {
      long double v14 = v9 * *(v11 - 1);
      double v15 = *v11;
      v11 += 2;
      double v16 = v9 * v15;
      double v17 = exp(v14);
      float v18 = (v17 + v17) * cos(v9 * v15);
      *a5++ = v18;
      float v19 = exp(v14 + v14);
      *a6++ = -v19;
      long double v20 = v9 * *(v12 - 1);
      double v21 = *v12;
      v12 += 2;
      long double v22 = hypot(v20, v9 * v21);
      *(v13 - 22) = v22 + v22;
      *(v13 - 11) = atan2(v9 * v21, v20);
      *unint64_t v13 = v14;
      v13[22] = v17;
      v13[11] = v16;
      ++v13;
      --v10;
    }
    while (v10);
  }
}

void ramstadBackEndCoeffs<float>(int a1, uint64_t a2, float *a3, _DWORD *a4, double a5)
{
  if (a1 >= 1)
  {
    uint64_t v8 = a1;
    double v9 = (double *)(a2 + 176);
    do
    {
      double v10 = *(v9 - 22);
      long double v11 = v10 * exp(*v9 * a5);
      double v12 = *(v9 - 11);
      double v13 = v9[11];
      double v14 = cos(v12 + v13 * a5);
      double v15 = v9[22];
      long double v16 = cos(v12 - v13 + v13 * a5);
      float v17 = v11 * v14;
      *a3++ = v17;
      *(float *)&long double v16 = v11 * -(v15 * v16);
      *a4++ = LODWORD(v16);
      ++v9;
      --v8;
    }
    while (v8);
  }
}

void _ZNSt3__16vectorIDv8_dNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_(void *a1, char *__src, unint64_t a3, char *a4)
{
  if (a3)
  {
    double v4 = a4;
    unint64_t v6 = __src;
    double v9 = (char *)a1[1];
    uint64_t v8 = a1[2];
    if (a3 <= (v8 - (uint64_t)v9) >> 6)
    {
      uint64_t v15 = v9 - __src;
      long double v16 = (char *)a1[1];
      uint64_t v17 = a3;
      if (a3 <= (v9 - __src) >> 6) {
        goto LABEL_16;
      }
      uint64_t v18 = 0;
      uint64_t v17 = v15 >> 6;
      long double v16 = &v9[64 * (a3 - (v15 >> 6))];
      uint64_t v19 = (a3 << 6) - (v15 >> 6 << 6);
      do
      {
        long double v20 = &v9[v18];
        long long v22 = *(_OWORD *)a4;
        long long v21 = *((_OWORD *)a4 + 1);
        long long v23 = *((_OWORD *)a4 + 3);
        *((_OWORD *)v20 + 2) = *((_OWORD *)a4 + 2);
        *((_OWORD *)v20 + 3) = v23;
        *(_OWORD *)long double v20 = v22;
        *((_OWORD *)v20 + 1) = v21;
        v18 += 64;
      }
      while (v19 != v18);
      a1[1] = v16;
      if (v9 != __src)
      {
LABEL_16:
        uint64_t v24 = &__src[64 * a3];
        long long v25 = &v16[-64 * a3];
        long long v26 = v16;
        if (v25 < v9)
        {
          long long v26 = v16;
          do
          {
            long long v28 = *(_OWORD *)v25;
            long long v27 = *((_OWORD *)v25 + 1);
            long long v29 = *((_OWORD *)v25 + 3);
            *((_OWORD *)v26 + 2) = *((_OWORD *)v25 + 2);
            *((_OWORD *)v26 + 3) = v29;
            *(_OWORD *)long long v26 = v28;
            *((_OWORD *)v26 + 1) = v27;
            v26 += 64;
            v25 += 64;
          }
          while (v25 < v9);
        }
        a1[1] = v26;
        if (v16 != v24) {
          memmove(&v16[-64 * ((v16 - v24) >> 6)], __src, v16 - v24);
        }
        if (v6 <= v4)
        {
          if (a1[1] <= (unint64_t)v4) {
            unint64_t v30 = 0;
          }
          else {
            unint64_t v30 = a3;
          }
          v4 += 64 * v30;
        }
        do
        {
          long long v32 = *(_OWORD *)v4;
          long long v31 = *((_OWORD *)v4 + 1);
          long long v33 = *((_OWORD *)v4 + 3);
          *((_OWORD *)v6 + 2) = *((_OWORD *)v4 + 2);
          *((_OWORD *)v6 + 3) = v33;
          *(_OWORD *)unint64_t v6 = v32;
          *((_OWORD *)v6 + 1) = v31;
          v6 += 64;
          --v17;
        }
        while (v17);
      }
    }
    else
    {
      double v10 = (char *)*a1;
      unint64_t v11 = a3 + ((uint64_t)&v9[-*a1] >> 6);
      if (v11 >> 58) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v12 = v8 - (void)v10;
      if (v12 >> 5 > v11) {
        unint64_t v11 = v12 >> 5;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v13 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        if (v13 >> 58) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        double v14 = (char *)operator new(v13 << 6);
      }
      else
      {
        double v14 = 0;
      }
      uint64_t v34 = &v14[64 * ((v6 - v10) >> 6)];
      uint64_t v35 = &v34[64 * a3];
      unint64_t v36 = a3 << 6;
      long long v37 = v34;
      do
      {
        long long v39 = *(_OWORD *)v4;
        long long v38 = *((_OWORD *)v4 + 1);
        long long v40 = *((_OWORD *)v4 + 3);
        *((_OWORD *)v37 + 2) = *((_OWORD *)v4 + 2);
        *((_OWORD *)v37 + 3) = v40;
        *(_OWORD *)long long v37 = v39;
        *((_OWORD *)v37 + 1) = v38;
        v37 += 64;
        v36 -= 64;
      }
      while (v36);
      uint64_t v41 = (char *)*a1;
      if ((char *)*a1 != v6)
      {
        uint64_t v42 = v6;
        do
        {
          long long v43 = *((_OWORD *)v42 - 4);
          v42 -= 64;
          long long v45 = *((_OWORD *)v42 + 2);
          long long v44 = *((_OWORD *)v42 + 3);
          long long v46 = *((_OWORD *)v42 + 1);
          *((_OWORD *)v34 - 4) = v43;
          v34 -= 64;
          *((_OWORD *)v34 + 2) = v45;
          *((_OWORD *)v34 + 3) = v44;
          *((_OWORD *)v34 + 1) = v46;
        }
        while (v42 != v41);
        double v9 = (char *)a1[1];
      }
      uint64_t v47 = &v14[64 * v13];
      if (v9 != v6) {
        memmove(v35, v6, v9 - v6);
      }
      uint64_t v48 = (char *)*a1;
      *a1 = v34;
      a1[1] = &v35[v9 - v6];
      a1[2] = v47;
      if (v48)
      {
        operator delete(v48);
      }
    }
  }
}

void ramstadPrecalculateCoeffs<double>(int a1, uint64_t a2, uint64_t a3, uint64_t a4, long double *a5, long double *a6, double a7)
{
  if (a1 >= 1)
  {
    double v9 = a7 * 3.14159265;
    uint64_t v10 = a1;
    unint64_t v11 = (double *)(a2 + 8);
    uint64_t v12 = (double *)(a3 + 8);
    unint64_t v13 = (double *)(a4 + 176);
    do
    {
      long double v14 = v9 * *(v11 - 1);
      double v15 = *v11;
      v11 += 2;
      double v16 = v9 * v15;
      double v17 = exp(v14);
      *a5++ = (v17 + v17) * cos(v9 * v15);
      *a6++ = -exp(v14 + v14);
      long double v18 = v9 * *(v12 - 1);
      double v19 = *v12;
      v12 += 2;
      long double v20 = hypot(v18, v9 * v19);
      *(v13 - 22) = v20 + v20;
      *(v13 - 11) = atan2(v9 * v19, v18);
      *unint64_t v13 = v14;
      v13[22] = v17;
      v13[11] = v16;
      ++v13;
      --v10;
    }
    while (v10);
  }
}

void ramstadBackEndCoeffs<double>(int a1, uint64_t a2, double *a3, double *a4, double a5)
{
  if (a1 >= 1)
  {
    uint64_t v8 = a1;
    double v9 = (double *)(a2 + 176);
    do
    {
      double v10 = *(v9 - 22);
      long double v11 = v10 * exp(*v9 * a5);
      double v12 = *(v9 - 11);
      double v13 = v9[11];
      double v14 = cos(v12 + v13 * a5);
      double v15 = v9[22];
      long double v16 = cos(v12 - v13 + v13 * a5);
      *a3++ = v11 * v14;
      *a4++ = v11 * -(v15 * v16);
      ++v9;
      --v8;
    }
    while (v8);
  }
}

char *std::vector<float>::assign(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 2)
  {
    double v13 = a1[1];
    unint64_t v14 = (v13 - result) >> 2;
    if (v14 >= a2) {
      uint64_t v15 = a2;
    }
    else {
      uint64_t v15 = (v13 - result) >> 2;
    }
    if (v15)
    {
      long double v16 = result;
      do
      {
        *(_DWORD *)long double v16 = *a3;
        v16 += 4;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[4 * a2];
    }
    else
    {
      double v17 = &v13[4 * (a2 - v14)];
      uint64_t v18 = 4 * a2 - 4 * v14;
      do
      {
        *(_DWORD *)double v13 = *a3;
        v13 += 4;
        v18 -= 4;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    uint64_t v8 = v6 >> 1;
    if (v6 >> 1 <= a2) {
      uint64_t v8 = a2;
    }
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v9 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    uint64_t result = std::vector<unsigned int>::__vallocate[abi:ne180100](a1, v9);
    double v10 = a1[1];
    long double v11 = &v10[4 * a2];
    uint64_t v12 = 4 * a2;
    do
    {
      *(_DWORD *)double v10 = *a3;
      v10 += 4;
      v12 -= 4;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

unint64_t boost::container::flat_map<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>,std::less<std::tuple<int,int,double,BOOL>>,void>::priv_subscript(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t v1 = qword_1E9F79CD8;
  uint64_t v2 = qword_1E9F79CE0;
  if (qword_1E9F79CD8) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = qword_1E9F79CE0 == 0;
  }
  if (!v3) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  unint64_t v5 = qword_1E9F79CD8;
  if (qword_1E9F79CE0)
  {
    unint64_t v5 = qword_1E9F79CD8;
    unint64_t v6 = qword_1E9F79CE0;
    do
    {
      if (v6 != 1 && !v5) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v5) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unsigned __int8 v7 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>(v5 + 40 * (v6 >> 1), a1);
      if (v7 != 129 && (v7 & 0x80u) != 0)
      {
        v5 += 40 * (v6 >> 1) + 40;
        v6 += ~(v6 >> 1);
      }
      else
      {
        v6 >>= 1;
      }
    }
    while (v6);
  }
  uint64_t v8 = (const char *)(v1 + 40 * v2);
  if ((const char *)v5 == v8) {
    goto LABEL_19;
  }
  if (!v5) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  unsigned __int8 v9 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>(a1, v5);
  if (v9 != 129 && (char)v9 < 0)
  {
LABEL_19:
    long long v32 = *(_OWORD *)a1;
    uint64_t v10 = *(void *)(a1 + 16);
    v34[0] = 0;
    v34[1] = 0;
    uint64_t v33 = v10;
    if (v1 > v5 || v5 > (unint64_t)v8)
    {
      long long v25 = "this->priv_in_range_or_end(hint)";
      int v26 = 879;
      long long v27 = "flat_tree.hpp";
      long long v28 = "insert_unique";
      goto LABEL_66;
    }
    long long v29 = 0;
    if ((const char *)v5 != v8)
    {
      if (!v5) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unsigned __int8 v12 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>((uint64_t)&v32, v5);
      if (v12 == 129 || ((char)v12 & 0x80000000) == 0)
      {
        unint64_t v30 = v1 + 40 * v2;
        if (!boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>,boost::container::dtl::select1st<std::tuple<int,int,double,BOOL>>,std::less<std::tuple<int,int,double,BOOL>>,boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>>>::priv_insert_unique_prepare(v5, &v30, (uint64_t)&v32, (uint64_t *)&v29))goto LABEL_51; {
LABEL_37:
        }
        uint64_t v15 = v29;
        uint64_t v16 = qword_1E9F79CD8;
        if (qword_1E9F79CD8 > (unint64_t)v29) {
          goto LABEL_63;
        }
        uint64_t v17 = qword_1E9F79CE0;
        if (!qword_1E9F79CD8 && qword_1E9F79CE0) {
          __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
        }
        unint64_t v18 = qword_1E9F79CD8 + 40 * qword_1E9F79CE0;
        if ((unint64_t)v29 > v18)
        {
LABEL_63:
          long long v25 = "this->priv_in_range_or_end(position)";
          int v26 = 1862;
          long long v27 = "vector.hpp";
          long long v28 = "emplace";
        }
        else
        {
          if (qword_1E9F79CE8 >= (unint64_t)qword_1E9F79CE0)
          {
            if (qword_1E9F79CE8 == qword_1E9F79CE0)
            {
              boost::container::vector<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>,boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>>,boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>*,boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>>>(&v31, v29, &v32);
            }
            else
            {
              if ((char *)v18 == v29)
              {
                long long v23 = v32;
                *((void *)v29 + 2) = v33;
                *(_OWORD *)uint64_t v15 = v23;
                *(_OWORD *)(v16 + 40 * v17 + 24) = *(_OWORD *)v34;
                v34[0] = 0;
                v34[1] = 0;
                ++qword_1E9F79CE0;
              }
              else
              {
                uint64_t v19 = v18 - 40;
                *(_OWORD *)unint64_t v18 = *(_OWORD *)(v18 - 40);
                *(void *)(v18 + 16) = *(void *)(v18 - 24);
                *(_OWORD *)(v16 + 40 * v17 + 24) = *(_OWORD *)(v18 - 16);
                *(void *)(v18 - 16) = 0;
                *(void *)(v18 - 8) = 0;
                ++qword_1E9F79CE0;
                if ((char *)(v18 - 40) != v15)
                {
                  do
                  {
                    long double v20 = (char *)(v19 - 40);
                    boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>::operator=(v19, v19 - 40);
                    uint64_t v19 = (uint64_t)v20;
                  }
                  while (v20 != v15);
                }
                *(_OWORD *)uint64_t v15 = v32;
                unsigned char v15[16] = v33;
                long long v21 = *(_OWORD *)v34;
                v34[0] = 0;
                v34[1] = 0;
                long long v22 = (std::__shared_weak_count *)*((void *)v15 + 4);
                *(_OWORD *)(v15 + 24) = v21;
                if (v22) {
                  std::__shared_weak_count::__release_weak(v22);
                }
              }
              long long v31 = v15;
            }
            goto LABEL_54;
          }
          long long v25 = "this->m_holder.capacity() >= this->m_holder.m_size";
          int v26 = 2821;
          long long v27 = "vector.hpp";
          long long v28 = "priv_insert_forward_range";
        }
LABEL_66:
        __assert_rtn(v28, v27, v26, v25);
      }
      uint64_t v8 = (const char *)v5;
    }
    long long v29 = (char *)v8;
    if (v8 != (const char *)v1)
    {
      if (!v8) {
        __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
      }
      unsigned __int8 v13 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>((uint64_t)(v8 - 40), (uint64_t)&v32);
      if (v13 == 129 || ((char)v13 & 0x80000000) == 0)
      {
        unsigned __int8 v14 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>((uint64_t)&v32, (uint64_t)(v8 - 40));
        if (v14 == 129 || ((char)v14 & 0x80000000) == 0)
        {
          long long v29 = (char *)(v8 - 40);
          goto LABEL_51;
        }
        long long v31 = v8 - 40;
        if (!boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>,boost::container::dtl::select1st<std::tuple<int,int,double,BOOL>>,std::less<std::tuple<int,int,double,BOOL>>,boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>>>::priv_insert_unique_prepare(v1, &v31, (uint64_t)&v32, (uint64_t *)&v29))
        {
LABEL_51:
          if (!qword_1E9F79CD8 && v29) {
            __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
          }
          long long v31 = v29;
LABEL_54:
          if (v34[1]) {
            std::__shared_weak_count::__release_weak(v34[1]);
          }
          unint64_t v5 = (unint64_t)v31;
          if (!v31) {
            __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
          }
          return v5 + 24;
        }
      }
    }
    goto LABEL_37;
  }
  return v5 + 24;
}

void sub_1BAEC6B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void std::__shared_ptr_emplace<RamstadKernel>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  BOOL v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
}

void std::__shared_ptr_emplace<RamstadKernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14808E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<RamstadKernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14808E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 < *(_DWORD *)a2) {
    uint64_t v2 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v2 = 1;
  }
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
  {
    int v3 = *(_DWORD *)(a1 + 4);
    int v4 = *(_DWORD *)(a2 + 4);
    BOOL v5 = v3 == v4;
    uint64_t v2 = v3 < v4 ? 0xFFFFFFFFLL : 1;
    if (v5)
    {
      double v6 = *(double *)(a1 + 8);
      double v7 = *(double *)(a2 + 8);
      if (v6 == v7) {
        LODWORD(v2) = 0;
      }
      else {
        LODWORD(v2) = -127;
      }
      if (v6 > v7) {
        LODWORD(v2) = 1;
      }
      if (v6 < v7) {
        uint64_t v2 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v2 = v2;
      }
      if (!v2)
      {
        unsigned int v8 = *(unsigned __int8 *)(a1 + 16);
        unsigned int v9 = *(unsigned __int8 *)(a2 + 16);
        BOOL v10 = v8 == v9;
        if (v8 < v9) {
          LODWORD(v2) = -1;
        }
        else {
          LODWORD(v2) = 1;
        }
        if (v10) {
          return 0;
        }
        else {
          return v2;
        }
      }
    }
  }
  return v2;
}

uint64_t boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  int v4 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v3;
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void boost::container::vector<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>,boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>>,boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>*,boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>>>(void *a1, const char *a2, long long *a3)
{
  if (qword_1E9F79CE8 != qword_1E9F79CE0) {
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  }
  if (qword_1E9F79CE8 == 0x333333333333333) {
    goto LABEL_30;
  }
  if ((unint64_t)qword_1E9F79CE8 >> 61 > 4) {
    uint64_t v3 = -1;
  }
  else {
    uint64_t v3 = 8 * qword_1E9F79CE8;
  }
  if ((unint64_t)qword_1E9F79CE8 >> 61) {
    unint64_t v4 = v3;
  }
  else {
    unint64_t v4 = 8 * qword_1E9F79CE8 / 5uLL;
  }
  if (v4 >= 0x333333333333333) {
    unint64_t v4 = 0x333333333333333;
  }
  unint64_t v5 = qword_1E9F79CE8 + 1 > v4 ? qword_1E9F79CE8 + 1 : v4;
  if (v5 > 0x333333333333333) {
LABEL_30:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  uint64_t v9 = qword_1E9F79CD8;
  BOOL v10 = (char *)operator new(40 * v5);
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = qword_1E9F79CD8;
  uint64_t v13 = qword_1E9F79CD8 + 40 * qword_1E9F79CE0;
  unsigned __int8 v14 = v10;
  if ((const char *)qword_1E9F79CD8 != a2)
  {
    uint64_t v15 = qword_1E9F79CD8;
    unsigned __int8 v14 = v10;
    do
    {
      long long v16 = *(_OWORD *)v15;
      *((void *)v14 + 2) = *(void *)(v15 + 16);
      *(_OWORD *)unsigned __int8 v14 = v16;
      *(_OWORD *)(v14 + 24) = *(_OWORD *)(v15 + 24);
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0;
      v14 += 40;
      v15 += 40;
    }
    while ((const char *)v15 != a2);
  }
  long long v17 = *a3;
  *((void *)v14 + 2) = *((void *)a3 + 2);
  *(_OWORD *)unsigned __int8 v14 = v17;
  *(_OWORD *)(v14 + 24) = *(long long *)((char *)a3 + 24);
  *((void *)a3 + 3) = 0;
  *((void *)a3 + 4) = 0;
  if ((const char *)v13 != a2)
  {
    unint64_t v18 = v14 + 64;
    uint64_t v19 = a2;
    do
    {
      long long v20 = *(_OWORD *)v19;
      *((void *)v18 - 1) = *((void *)v19 + 2);
      *(_OWORD *)((char *)v18 - 24) = v20;
      *unint64_t v18 = *(_OWORD *)(v19 + 24);
      unint64_t v18 = (_OWORD *)((char *)v18 + 40);
      *((void *)v19 + 3) = 0;
      *((void *)v19 + 4) = 0;
      v19 += 40;
    }
    while (v19 != (const char *)v13);
  }
  if (v12)
  {
    uint64_t v21 = qword_1E9F79CE0;
    if (qword_1E9F79CE0)
    {
      long long v22 = (std::__shared_weak_count **)(v12 + 32);
      do
      {
        if (*v22) {
          std::__shared_weak_count::__release_weak(*v22);
        }
        v22 += 5;
        --v21;
      }
      while (v21);
    }
    operator delete((void *)qword_1E9F79CD8);
  }
  qword_1E9F79CD8 = v11;
  ++qword_1E9F79CE0;
  qword_1E9F79CE8 = v5;
  *a1 = &a2[v11 - v9];
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>,boost::container::dtl::select1st<std::tuple<int,int,double,BOOL>>,std::less<std::tuple<int,int,double,BOOL>>,boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>>>::priv_insert_unique_prepare(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = a1;
  if (*a2 != a1)
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((*a2 - a1) >> 3);
    do
    {
      if (v8 != 1 && !v7) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v7) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unsigned __int8 v9 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>(v7 + 40 * (v8 >> 1), a3);
      if (v9 != 129 && (v9 & 0x80u) != 0)
      {
        v7 += 40 * (v8 >> 1) + 40;
        v8 += ~(v8 >> 1);
      }
      else
      {
        v8 >>= 1;
      }
    }
    while (v8);
  }
  *a4 = v7;
  if (v7 == *a2) {
    return 1;
  }
  if (!v7) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  unsigned __int8 v10 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>(a3, v7);
  return v10 != 129 && (v10 & 0x80u) != 0;
}

unint64_t boost::container::flat_map<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>,std::less<std::tuple<int,int,double,BOOL>>,void>::priv_subscript(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t v1 = qword_1E9F79C78;
  uint64_t v2 = qword_1E9F79C80;
  if (qword_1E9F79C78) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = qword_1E9F79C80 == 0;
  }
  if (!v3) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  unint64_t v5 = qword_1E9F79C78;
  if (qword_1E9F79C80)
  {
    unint64_t v5 = qword_1E9F79C78;
    unint64_t v6 = qword_1E9F79C80;
    do
    {
      if (v6 != 1 && !v5) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v5) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unsigned __int8 v7 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>(v5 + 40 * (v6 >> 1), a1);
      if (v7 != 129 && (v7 & 0x80u) != 0)
      {
        v5 += 40 * (v6 >> 1) + 40;
        v6 += ~(v6 >> 1);
      }
      else
      {
        v6 >>= 1;
      }
    }
    while (v6);
  }
  unint64_t v8 = (const char *)(v1 + 40 * v2);
  if ((const char *)v5 == v8) {
    goto LABEL_19;
  }
  if (!v5) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  unsigned __int8 v9 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>(a1, v5);
  if (v9 != 129 && (char)v9 < 0)
  {
LABEL_19:
    long long v32 = *(_OWORD *)a1;
    uint64_t v10 = *(void *)(a1 + 16);
    v34[0] = 0;
    v34[1] = 0;
    uint64_t v33 = v10;
    if (v1 > v5 || v5 > (unint64_t)v8)
    {
      long long v25 = "this->priv_in_range_or_end(hint)";
      int v26 = 879;
      long long v27 = "flat_tree.hpp";
      long long v28 = "insert_unique";
      goto LABEL_66;
    }
    long long v29 = 0;
    if ((const char *)v5 != v8)
    {
      if (!v5) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unsigned __int8 v12 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>((uint64_t)&v32, v5);
      if (v12 == 129 || ((char)v12 & 0x80000000) == 0)
      {
        unint64_t v30 = v1 + 40 * v2;
        if (!boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>,boost::container::dtl::select1st<std::tuple<int,int,double,BOOL>>,std::less<std::tuple<int,int,double,BOOL>>,boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>>>::priv_insert_unique_prepare(v5, &v30, (uint64_t)&v32, (uint64_t *)&v29))goto LABEL_51; {
LABEL_37:
        }
        uint64_t v15 = v29;
        uint64_t v16 = qword_1E9F79C78;
        if (qword_1E9F79C78 > (unint64_t)v29) {
          goto LABEL_63;
        }
        uint64_t v17 = qword_1E9F79C80;
        if (!qword_1E9F79C78 && qword_1E9F79C80) {
          __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
        }
        unint64_t v18 = qword_1E9F79C78 + 40 * qword_1E9F79C80;
        if ((unint64_t)v29 > v18)
        {
LABEL_63:
          long long v25 = "this->priv_in_range_or_end(position)";
          int v26 = 1862;
          long long v27 = "vector.hpp";
          long long v28 = "emplace";
        }
        else
        {
          if (qword_1E9F79C88 >= (unint64_t)qword_1E9F79C80)
          {
            if (qword_1E9F79C88 == qword_1E9F79C80)
            {
              boost::container::vector<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>,boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>>,boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>*,boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>>>(&v31, v29, &v32);
            }
            else
            {
              if ((char *)v18 == v29)
              {
                long long v23 = v32;
                *((void *)v29 + 2) = v33;
                *(_OWORD *)uint64_t v15 = v23;
                *(_OWORD *)(v16 + 40 * v17 + 24) = *(_OWORD *)v34;
                v34[0] = 0;
                v34[1] = 0;
                ++qword_1E9F79C80;
              }
              else
              {
                uint64_t v19 = v18 - 40;
                *(_OWORD *)unint64_t v18 = *(_OWORD *)(v18 - 40);
                *(void *)(v18 + 16) = *(void *)(v18 - 24);
                *(_OWORD *)(v16 + 40 * v17 + 24) = *(_OWORD *)(v18 - 16);
                *(void *)(v18 - 16) = 0;
                *(void *)(v18 - 8) = 0;
                ++qword_1E9F79C80;
                if ((char *)(v18 - 40) != v15)
                {
                  do
                  {
                    long long v20 = (char *)(v19 - 40);
                    boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>::operator=(v19, v19 - 40);
                    uint64_t v19 = (uint64_t)v20;
                  }
                  while (v20 != v15);
                }
                *(_OWORD *)uint64_t v15 = v32;
                unsigned char v15[16] = v33;
                long long v21 = *(_OWORD *)v34;
                v34[0] = 0;
                v34[1] = 0;
                long long v22 = (std::__shared_weak_count *)*((void *)v15 + 4);
                *(_OWORD *)(v15 + 24) = v21;
                if (v22) {
                  std::__shared_weak_count::__release_weak(v22);
                }
              }
              long long v31 = v15;
            }
            goto LABEL_54;
          }
          long long v25 = "this->m_holder.capacity() >= this->m_holder.m_size";
          int v26 = 2821;
          long long v27 = "vector.hpp";
          long long v28 = "priv_insert_forward_range";
        }
LABEL_66:
        __assert_rtn(v28, v27, v26, v25);
      }
      unint64_t v8 = (const char *)v5;
    }
    long long v29 = (char *)v8;
    if (v8 != (const char *)v1)
    {
      if (!v8) {
        __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
      }
      unsigned __int8 v13 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>((uint64_t)(v8 - 40), (uint64_t)&v32);
      if (v13 == 129 || ((char)v13 & 0x80000000) == 0)
      {
        unsigned __int8 v14 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>((uint64_t)&v32, (uint64_t)(v8 - 40));
        if (v14 == 129 || ((char)v14 & 0x80000000) == 0)
        {
          long long v29 = (char *)(v8 - 40);
          goto LABEL_51;
        }
        long long v31 = v8 - 40;
        if (!boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>,boost::container::dtl::select1st<std::tuple<int,int,double,BOOL>>,std::less<std::tuple<int,int,double,BOOL>>,boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>>>::priv_insert_unique_prepare(v1, &v31, (uint64_t)&v32, (uint64_t *)&v29))
        {
LABEL_51:
          if (!qword_1E9F79C78 && v29) {
            __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
          }
          long long v31 = v29;
LABEL_54:
          if (v34[1]) {
            std::__shared_weak_count::__release_weak(v34[1]);
          }
          unint64_t v5 = (unint64_t)v31;
          if (!v31) {
            __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
          }
          return v5 + 24;
        }
      }
    }
    goto LABEL_37;
  }
  return v5 + 24;
}

void sub_1BAEC7564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void std::__shared_ptr_emplace<RamstadKernelD>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  BOOL v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
}

void std::__shared_ptr_emplace<RamstadKernelD>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1480898;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<RamstadKernelD>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1480898;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void boost::container::vector<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>,boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>>,boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>*,boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>>>(void *a1, const char *a2, long long *a3)
{
  if (qword_1E9F79C88 != qword_1E9F79C80) {
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  }
  if (qword_1E9F79C88 == 0x333333333333333) {
    goto LABEL_30;
  }
  if ((unint64_t)qword_1E9F79C88 >> 61 > 4) {
    uint64_t v3 = -1;
  }
  else {
    uint64_t v3 = 8 * qword_1E9F79C88;
  }
  if ((unint64_t)qword_1E9F79C88 >> 61) {
    unint64_t v4 = v3;
  }
  else {
    unint64_t v4 = 8 * qword_1E9F79C88 / 5uLL;
  }
  if (v4 >= 0x333333333333333) {
    unint64_t v4 = 0x333333333333333;
  }
  unint64_t v5 = qword_1E9F79C88 + 1 > v4 ? qword_1E9F79C88 + 1 : v4;
  if (v5 > 0x333333333333333) {
LABEL_30:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  uint64_t v9 = qword_1E9F79C78;
  uint64_t v10 = (char *)operator new(40 * v5);
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = qword_1E9F79C78;
  uint64_t v13 = qword_1E9F79C78 + 40 * qword_1E9F79C80;
  unsigned __int8 v14 = v10;
  if ((const char *)qword_1E9F79C78 != a2)
  {
    uint64_t v15 = qword_1E9F79C78;
    unsigned __int8 v14 = v10;
    do
    {
      long long v16 = *(_OWORD *)v15;
      *((void *)v14 + 2) = *(void *)(v15 + 16);
      *(_OWORD *)unsigned __int8 v14 = v16;
      *(_OWORD *)(v14 + 24) = *(_OWORD *)(v15 + 24);
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0;
      v14 += 40;
      v15 += 40;
    }
    while ((const char *)v15 != a2);
  }
  long long v17 = *a3;
  *((void *)v14 + 2) = *((void *)a3 + 2);
  *(_OWORD *)unsigned __int8 v14 = v17;
  *(_OWORD *)(v14 + 24) = *(long long *)((char *)a3 + 24);
  *((void *)a3 + 3) = 0;
  *((void *)a3 + 4) = 0;
  if ((const char *)v13 != a2)
  {
    unint64_t v18 = v14 + 64;
    uint64_t v19 = a2;
    do
    {
      long long v20 = *(_OWORD *)v19;
      *((void *)v18 - 1) = *((void *)v19 + 2);
      *(_OWORD *)((char *)v18 - 24) = v20;
      *unint64_t v18 = *(_OWORD *)(v19 + 24);
      unint64_t v18 = (_OWORD *)((char *)v18 + 40);
      *((void *)v19 + 3) = 0;
      *((void *)v19 + 4) = 0;
      v19 += 40;
    }
    while (v19 != (const char *)v13);
  }
  if (v12)
  {
    uint64_t v21 = qword_1E9F79C80;
    if (qword_1E9F79C80)
    {
      long long v22 = (std::__shared_weak_count **)(v12 + 32);
      do
      {
        if (*v22) {
          std::__shared_weak_count::__release_weak(*v22);
        }
        v22 += 5;
        --v21;
      }
      while (v21);
    }
    operator delete((void *)qword_1E9F79C78);
  }
  qword_1E9F79C78 = v11;
  ++qword_1E9F79C80;
  qword_1E9F79C88 = v5;
  *a1 = &a2[v11 - v9];
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>,boost::container::dtl::select1st<std::tuple<int,int,double,BOOL>>,std::less<std::tuple<int,int,double,BOOL>>,boost::container::new_allocator<boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>>>>::priv_insert_unique_prepare(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = a1;
  if (*a2 != a1)
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((*a2 - a1) >> 3);
    do
    {
      if (v8 != 1 && !v7) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v7) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unsigned __int8 v9 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>(v7 + 40 * (v8 >> 1), a3);
      if (v9 != 129 && (v9 & 0x80u) != 0)
      {
        v7 += 40 * (v8 >> 1) + 40;
        v8 += ~(v8 >> 1);
      }
      else
      {
        v8 >>= 1;
      }
    }
    while (v8);
  }
  *a4 = v7;
  if (v7 == *a2) {
    return 1;
  }
  if (!v7) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  unsigned __int8 v10 = std::__tuple_compare_three_way[abi:ne180100]<int,int,double,BOOL,int,int,double,BOOL,0ul,1ul,2ul,3ul>(a3, v7);
  return v10 != 129 && (v10 & 0x80u) != 0;
}

void RamstadSRC::RamstadSRC(RamstadSRC *this, double a2, double a3, unsigned int a4, unsigned int a5, double a6)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((double *)this + 4) = a2;
  *((double *)this + 5) = a3;
  *((_OWORD *)this + 7) = 0u;
  uint64_t v7 = (void *)((char *)this + 112);
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  if (a5 >= 0x40) {
    int v8 = 11;
  }
  else {
    int v8 = 8;
  }
  double v9 = dbl_1BAFF96B0[a5 == 33];
  *((unsigned char *)this + 93) = a5 > 0x5F;
  *((double *)this + 13) = v9;
  double v10 = a2 / a3;
  *((void *)this + 12) = 0x3E80000000000000;
  *((unsigned char *)this + 92) = 0;
  *((_DWORD *)this + 12) = a4;
  *((_DWORD *)this + 13) = 256;
  uint64_t v11 = vcvtmd_s64_f64(v10);
  *((_DWORD *)this + 14) = v8;
  *((_DWORD *)this + 15) = v11;
  signed int v12 = vcvtmd_s64_f64((v10 - floor(v10)) * 2147483650.0);
  *((void *)this + 10) = (v11 << 32 >> 1) + v12;
  *((void *)this + 32) = -1;
  *((_DWORD *)this + 66) = -1;
  *((_DWORD *)this + 17) = v12;
  *((_DWORD *)this + 18) = 0;
  *((_DWORD *)this + 22) = 1;
  double v13 = fmin(0.9999 / v10, 1.0) * v9;
  if (a5 >= 0x40) {
    unint64_t v14 = (3 * a4 + 1) >> 1;
  }
  else {
    unint64_t v14 = a4;
  }
  if (a5 < 0x60)
  {
    long long v90 = 0uLL;
    long long v91 = 0uLL;
    _ZNSt3__16vectorIDv8_fNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_(v7, 0, v14, (char *)&v90);
    _ZNSt3__16vectorIDv8_fNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_((void *)this + 17, *((char **)this + 17), v14, (char *)&v90);
    {
      GetKernelFactory(void)::sFactory.__m_.__sig = 850045863;
      *(_OWORD *)GetKernelFactory(void)::sFactory.__m_.__opaque = 0u;
      *(_OWORD *)&GetKernelFactory(void)::sFactory.__m_.__opaque[16] = 0u;
      *(_OWORD *)&GetKernelFactory(void)::sFactory.__m_.__opaque[32] = 0u;
      *(_OWORD *)&GetKernelFactory(void)::sFactory.__m_.__opaque[48] = 0u;
      *(_OWORD *)&qword_1E9F79CE0 = 0u;
    }
    int v29 = *((_DWORD *)this + 13);
    int v30 = *((_DWORD *)this + 14);
    int v31 = *((unsigned __int8 *)this + 92);
    std::mutex::lock(&GetKernelFactory(void)::sFactory);
    int v32 = v31 ^ 1;
    unint64_t v34 = qword_1E9F79CD8;
    uint64_t v33 = qword_1E9F79CE0;
    unint64_t v35 = qword_1E9F79CD8;
    if (!qword_1E9F79CD8 && qword_1E9F79CE0) {
LABEL_51:
    }
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    while (1)
    {
      unint64_t v36 = v34 + 40 * v33;
      if (v35 == v36) {
        break;
      }
      uint64_t v37 = *(void *)(v35 + 32);
      if (!v37 || *(void *)(v37 + 8) == -1)
      {
        if (v34 > v35) {
          goto LABEL_92;
        }
        if (!v34 && v33) {
          __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
        }
        if (v35 >= v36) {
LABEL_92:
        }
          __assert_rtn("erase", "vector.hpp", 2092, "this->priv_in_range(position)");
        if (v35 + 40 != v36)
        {
          uint64_t v38 = v35;
          do
          {
            uint64_t v39 = v38 + 40;
            uint64_t v40 = boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>::operator=(v38, v38 + 40)+ 80;
            uint64_t v38 = v39;
          }
          while (v40 != v36);
        }
        uint64_t v41 = *(std::__shared_weak_count **)(v36 - 8);
        if (v41) {
          std::__shared_weak_count::__release_weak(v41);
        }
        unint64_t v34 = qword_1E9F79CD8;
        uint64_t v33 = --qword_1E9F79CE0;
      }
      else
      {
        v35 += 40;
      }
      if (v34) {
        BOOL v42 = 1;
      }
      else {
        BOOL v42 = v33 == 0;
      }
      if (!v42) {
        goto LABEL_51;
      }
    }
    int v98 = v30;
    int v99 = v29;
    double v100 = v13;
    char v101 = v31 ^ 1;
    uint64_t v48 = (void *)boost::container::flat_map<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>,std::less<std::tuple<int,int,double,BOOL>>,void>::priv_subscript((uint64_t)&v98);
    uint64_t v49 = (std::__shared_weak_count *)v48[1];
    if (v49)
    {
      uint64_t v50 = std::__shared_weak_count::lock(v49);
      int v51 = v50;
      if (v50 && *v48)
      {
        *(void *)&long long v52 = *v48;
        *((void *)&v52 + 1) = v50;
        long long v89 = v52;
        goto LABEL_89;
      }
    }
    else
    {
      int v51 = 0;
    }
    __n128 v74 = (char *)operator new(0x58uLL);
    uint64_t v75 = v74;
    *((void *)v74 + 1) = 0;
    *((void *)v74 + 2) = 0;
    *(void *)__n128 v74 = &unk_1F14808E8;
    *((double *)v74 + 3) = v13;
    uint64_t v76 = v74 + 24;
    double v77 = 1.0 / (double)v29;
    *(_OWORD *)(v74 + 40) = 0u;
    *((_DWORD *)v74 + 8) = v30;
    *((_DWORD *)v74 + 9) = v29;
    *(_OWORD *)(v74 + 56) = 0u;
    *(_OWORD *)(v74 + 72) = 0u;
    long long v94 = 0u;
    long long v95 = 0u;
    uint64_t v129 = 0;
    long long v127 = 0u;
    long long v128 = 0u;
    long long v125 = 0u;
    long long v126 = 0u;
    int64_t v78 = (char **)(v74 + 64);
    long long v123 = 0u;
    long long v124 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    long long v119 = 0u;
    long long v120 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    long long v115 = 0u;
    long long v116 = 0u;
    long long v113 = 0u;
    long long v114 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    int v79 = v29 + v32;
    long long v102 = 0u;
    if (v30 > 10)
    {
      *((_DWORD *)v74 + 8) = 11;
      _ZNSt3__16vectorIDv8_fNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_((void *)v74 + 5, 0, 4uLL, (char *)&v94);
      _ZNSt3__16vectorIDv8_fNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_(v78, *v78, 4 * v79, (char *)&v94);
      uint64_t v82 = *((void *)v75 + 5);
      ramstadPrecalculateCoeffs<float>(*((_DWORD *)v75 + 8), (uint64_t)&kRamstadASRCPoles22, (uint64_t)&kRamstadASRCResidues22, (uint64_t)&v102, (float *)v82, (float *)(v82 + 64), *((double *)v75 + 3));
      *(_OWORD *)(v82 + 48) = *(_OWORD *)(v82 + 32);
      *(_OWORD *)(v82 + 112) = *(_OWORD *)(v82 + 96);
      if (v79 >= 1)
      {
        uint64_t v83 = (uint64_t)(*v78 + 64);
        double v84 = 0.0;
        do
        {
          ramstadBackEndCoeffs<float>(*((_DWORD *)v75 + 8), (uint64_t)&v102, (float *)(v83 - 64), (_DWORD *)v83, v84);
          *(_OWORD *)(v83 - 16) = *(_OWORD *)(v83 - 32);
          *(_OWORD *)(v83 + 48) = *(_OWORD *)(v83 + 32);
          v83 += 128;
          double v84 = v77 + v84;
          --v79;
        }
        while (v79);
      }
    }
    else
    {
      *((_DWORD *)v74 + 8) = 8;
      _ZNSt3__16vectorIDv8_fNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_((void *)v74 + 5, 0, 2uLL, (char *)&v94);
      _ZNSt3__16vectorIDv8_fNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_(v78, *v78, 2 * v79, (char *)&v94);
      ramstadPrecalculateCoeffs<float>(*((_DWORD *)v75 + 8), (uint64_t)&kRamstadASRCPoles16, (uint64_t)&kRamstadASRCResidues16, (uint64_t)&v102, *((float **)v75 + 5), (float *)(*((void *)v75 + 5) + 32), *((double *)v75 + 3));
      if (v79 >= 1)
      {
        uint64_t v80 = *v78;
        double v81 = 0.0;
        do
        {
          ramstadBackEndCoeffs<float>(*((_DWORD *)v75 + 8), (uint64_t)&v102, (float *)v80, (_DWORD *)v80 + 8, v81);
          v80 += 64;
          double v81 = v77 + v81;
          --v79;
        }
        while (v79);
      }
    }
    if (v51) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v51);
    }
    uint64_t v85 = (void *)boost::container::flat_map<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>,std::less<std::tuple<int,int,double,BOOL>>,void>::priv_subscript((uint64_t)&v98);
    *(void *)&long long v86 = v76;
    *((void *)&v86 + 1) = v75;
    long long v89 = v86;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v75 + 2, 1uLL, memory_order_relaxed);
    __n128 v87 = (std::__shared_weak_count *)v85[1];
    *uint64_t v85 = v76;
    v85[1] = v75;
    if (v87) {
      std::__shared_weak_count::__release_weak(v87);
    }
LABEL_89:
    std::mutex::unlock(&GetKernelFactory(void)::sFactory);
    uint64_t v71 = (std::__shared_weak_count *)*((void *)this + 1);
    *(_OWORD *)this = v89;
    if (!v71) {
      goto LABEL_75;
    }
    goto LABEL_74;
  }
  long long v92 = 0uLL;
  long long v93 = 0uLL;
  long long v90 = 0uLL;
  long long v91 = 0uLL;
  _ZNSt3__16vectorIDv8_dNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_((void *)this + 20, 0, v14, (char *)&v90);
  _ZNSt3__16vectorIDv8_dNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_((void *)this + 23, *((char **)this + 23), v14, (char *)&v90);
  {
    GetKernelFactoryD(void)::sFactory.__m_.__sig = 850045863;
    *(_OWORD *)GetKernelFactoryD(void)::sFactory.__m_.__opaque = 0u;
    *(_OWORD *)&GetKernelFactoryD(void)::sFactory.__m_.__opaque[16] = 0u;
    *(_OWORD *)&GetKernelFactoryD(void)::sFactory.__m_.__opaque[32] = 0u;
    *(_OWORD *)&GetKernelFactoryD(void)::sFactory.__m_.__opaque[48] = 0u;
    *(_OWORD *)&qword_1E9F79C80 = 0u;
  }
  int v15 = *((_DWORD *)this + 13);
  int v16 = *((_DWORD *)this + 14);
  int v17 = *((unsigned __int8 *)this + 92);
  std::mutex::lock(&GetKernelFactoryD(void)::sFactory);
  int v18 = v17 ^ 1;
  unint64_t v20 = qword_1E9F79C78;
  uint64_t v19 = qword_1E9F79C80;
  unint64_t v21 = qword_1E9F79C78;
  if (!qword_1E9F79C78 && qword_1E9F79C80) {
LABEL_29:
  }
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  while (1)
  {
    unint64_t v22 = v20 + 40 * v19;
    if (v21 == v22) {
      break;
    }
    uint64_t v23 = *(void *)(v21 + 32);
    if (!v23 || *(void *)(v23 + 8) == -1)
    {
      if (v20 > v21) {
        goto LABEL_91;
      }
      if (!v20 && v19) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (v21 >= v22) {
LABEL_91:
      }
        __assert_rtn("erase", "vector.hpp", 2092, "this->priv_in_range(position)");
      if (v21 + 40 != v22)
      {
        uint64_t v24 = v21;
        do
        {
          uint64_t v25 = v24 + 40;
          uint64_t v26 = boost::container::dtl::pair<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernel>>::operator=(v24, v24 + 40)+ 80;
          uint64_t v24 = v25;
        }
        while (v26 != v22);
      }
      long long v27 = *(std::__shared_weak_count **)(v22 - 8);
      if (v27) {
        std::__shared_weak_count::__release_weak(v27);
      }
      unint64_t v20 = qword_1E9F79C78;
      uint64_t v19 = --qword_1E9F79C80;
    }
    else
    {
      v21 += 40;
    }
    if (v20) {
      BOOL v28 = 1;
    }
    else {
      BOOL v28 = v19 == 0;
    }
    if (!v28) {
      goto LABEL_29;
    }
  }
  int v98 = v16;
  int v99 = v15;
  double v100 = v13;
  char v101 = v17 ^ 1;
  long long v43 = (void *)boost::container::flat_map<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>,std::less<std::tuple<int,int,double,BOOL>>,void>::priv_subscript((uint64_t)&v98);
  long long v44 = (std::__shared_weak_count *)v43[1];
  if (v44)
  {
    long long v45 = std::__shared_weak_count::lock(v44);
    long long v46 = v45;
    if (v45 && *v43)
    {
      *(void *)&long long v47 = *v43;
      *((void *)&v47 + 1) = v45;
      long long v88 = v47;
      goto LABEL_73;
    }
  }
  else
  {
    long long v46 = 0;
  }
  __int16 v53 = (char *)operator new(0x58uLL);
  __n128 v54 = v53;
  *((void *)v53 + 1) = 0;
  *((void *)v53 + 2) = 0;
  *((double *)v53 + 3) = v13;
  __int16 v55 = v53 + 24;
  *(void *)__int16 v53 = &unk_1F1480898;
  *((_DWORD *)v53 + 8) = v16;
  *((_DWORD *)v53 + 9) = v15;
  double v56 = 1.0 / (double)v15;
  *(_OWORD *)(v53 + 40) = 0u;
  *(_OWORD *)(v53 + 56) = 0u;
  *(_OWORD *)(v53 + 72) = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  uint64_t v129 = 0;
  long long v127 = 0u;
  long long v128 = 0u;
  __int16 v57 = (double **)(v53 + 64);
  long long v125 = 0u;
  long long v126 = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  long long v121 = 0u;
  long long v122 = 0u;
  long long v119 = 0u;
  long long v120 = 0u;
  long long v117 = 0u;
  long long v118 = 0u;
  long long v115 = 0u;
  long long v116 = 0u;
  long long v113 = 0u;
  long long v114 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  int v58 = v15 + v18;
  long long v102 = 0u;
  if (v16 > 10)
  {
    *((_DWORD *)v53 + 8) = 11;
    _ZNSt3__16vectorIDv8_dNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_((void *)v53 + 5, 0, 4uLL, (char *)&v94);
    _ZNSt3__16vectorIDv8_dNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_(v57, (char *)*v57, 4 * v58, (char *)&v94);
    uint64_t v61 = *((void *)v54 + 5);
    ramstadPrecalculateCoeffs<double>(*((_DWORD *)v54 + 8), (uint64_t)&kRamstadASRCPoles22, (uint64_t)&kRamstadASRCResidues22, (uint64_t)&v102, (long double *)v61, (long double *)(v61 + 128), *((double *)v54 + 3));
    long long v62 = *(_OWORD *)(v61 + 80);
    *(_OWORD *)(v61 + 96) = *(_OWORD *)(v61 + 64);
    *(_OWORD *)(v61 + 112) = v62;
    long long v63 = *(_OWORD *)(v61 + 208);
    *(_OWORD *)(v61 + 224) = *(_OWORD *)(v61 + 192);
    *(_OWORD *)(v61 + 240) = v63;
    if (v58 >= 1)
    {
      uint64_t v64 = (uint64_t)(*v57 + 16);
      double v65 = 0.0;
      do
      {
        ramstadBackEndCoeffs<double>(*((_DWORD *)v54 + 8), (uint64_t)&v102, (double *)(v64 - 128), (double *)v64, v65);
        long long v66 = *(_OWORD *)(v64 - 48);
        *(_OWORD *)(v64 - 32) = *(_OWORD *)(v64 - 64);
        *(_OWORD *)(v64 - 16) = v66;
        long long v67 = *(_OWORD *)(v64 + 80);
        *(_OWORD *)(v64 + 96) = *(_OWORD *)(v64 + 64);
        *(_OWORD *)(v64 + 112) = v67;
        v64 += 256;
        double v65 = v56 + v65;
        --v58;
      }
      while (v58);
    }
  }
  else
  {
    *((_DWORD *)v53 + 8) = 8;
    _ZNSt3__16vectorIDv8_dNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_((void *)v53 + 5, 0, 2uLL, (char *)&v94);
    _ZNSt3__16vectorIDv8_dNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEmRS6_(v57, (char *)*v57, 2 * v58, (char *)&v94);
    ramstadPrecalculateCoeffs<double>(*((_DWORD *)v54 + 8), (uint64_t)&kRamstadASRCPoles16, (uint64_t)&kRamstadASRCResidues16, (uint64_t)&v102, *((long double **)v54 + 5), (long double *)(*((void *)v54 + 5) + 64), *((double *)v54 + 3));
    if (v58 >= 1)
    {
      __int16 v59 = *v57;
      double v60 = 0.0;
      do
      {
        ramstadBackEndCoeffs<double>(*((_DWORD *)v54 + 8), (uint64_t)&v102, v59, v59 + 8, v60);
        v59 += 16;
        double v60 = v56 + v60;
        --v58;
      }
      while (v58);
    }
  }
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  uint64_t v68 = (void *)boost::container::flat_map<std::tuple<int,int,double,BOOL>,std::weak_ptr<RamstadKernelD>,std::less<std::tuple<int,int,double,BOOL>>,void>::priv_subscript((uint64_t)&v98);
  *(void *)&long long v69 = v55;
  *((void *)&v69 + 1) = v54;
  long long v88 = v69;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v54 + 2, 1uLL, memory_order_relaxed);
  unint64_t v70 = (std::__shared_weak_count *)v68[1];
  void *v68 = v55;
  v68[1] = v54;
  if (v70) {
    std::__shared_weak_count::__release_weak(v70);
  }
LABEL_73:
  std::mutex::unlock(&GetKernelFactoryD(void)::sFactory);
  uint64_t v71 = (std::__shared_weak_count *)*((void *)this + 3);
  *((_OWORD *)this + 1) = v88;
  if (v71) {
LABEL_74:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
LABEL_75:
  unint64_t v72 = *((unsigned int *)this + 12);
  LODWORD(v102) = 0;
  std::vector<float>::assign((char **)this + 26, v72, &v102);
  unint64_t v73 = *((unsigned int *)this + 12);
  LODWORD(v102) = 0;
  std::vector<float>::assign((char **)this + 29, v73, &v102);
}

void sub_1BAEC8404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, void **a13, void **a14)
{
  unint64_t v20 = (std::__shared_weak_count_vtbl *)*v18;
  if (*v18)
  {
    v17[3].__vftable = v20;
    operator delete(v20);
  }
  unint64_t v21 = (std::__shared_weak_count_vtbl *)*v19;
  if (*v19)
  {
    v17[2].__vftable = v21;
    operator delete(v21);
  }
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v22);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  std::mutex::unlock(&GetKernelFactory(void)::sFactory);
  uint64_t v23 = (void *)v14[29];
  if (v23)
  {
    v14[30] = v23;
    operator delete(v23);
  }
  uint64_t v24 = *v15;
  if (*v15)
  {
    v14[27] = v24;
    operator delete(v24);
  }
  uint64_t v25 = *a13;
  if (*a13)
  {
    v14[24] = v25;
    operator delete(v25);
  }
  uint64_t v26 = *a11;
  if (*a11)
  {
    v14[21] = v26;
    operator delete(v26);
  }
  long long v27 = *a14;
  if (*a14)
  {
    v14[18] = v27;
    operator delete(v27);
  }
  BOOL v28 = *a12;
  if (*a12)
  {
    v14[15] = v28;
    operator delete(v28);
  }
  int v29 = (std::__shared_weak_count *)v14[3];
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  int v30 = (std::__shared_weak_count *)v14[1];
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  _Unwind_Resume(a1);
}

void RamstadSRC::~RamstadSRC(RamstadSRC *this)
{
  uint64_t v2 = (void *)*((void *)this + 29);
  if (v2)
  {
    *((void *)this + 30) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 26);
  if (v3)
  {
    *((void *)this + 27) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 23);
  if (v4)
  {
    *((void *)this + 24) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 20);
  if (v5)
  {
    *((void *)this + 21) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 17);
  if (v6)
  {
    *((void *)this + 18) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 14);
  if (v7)
  {
    *((void *)this + 15) = v7;
    operator delete(v7);
  }
  int v8 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  double v9 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

double RamstadSRC::processMono(RamstadSRC *this, const float *a2, float *a3, int a4, int a5, int a6, int a7)
{
  if (*((_DWORD *)this + 12) != 1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "RamstadSRC::processMono, wrong channel count");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  RamstadSRC::checkPreflight(this, a4, a5);
  if (*((unsigned char *)this + 93))
  {
    if (*((unsigned char *)this + 92))
    {
      int v14 = *((_DWORD *)this + 15);
      int v16 = *((_DWORD *)this + 17);
      unsigned int v15 = *((_DWORD *)this + 18);
      int v17 = *((_DWORD *)this + 22);
      uint64_t v18 = *((void *)this + 2);
      uint64_t v19 = *(float64x2_t **)(v18 + 16);
      uint64_t v20 = *(void *)(v18 + 40);
      unint64_t v21 = (float64x2_t *)*((void *)this + 20);
      unint64_t v22 = (float64x2_t *)*((void *)this + 23);
      int v23 = *((_DWORD *)this + 13);
      if (*((_DWORD *)this + 14) == 8)
      {
        if (a5 < 1)
        {
          int v25 = 0;
        }
        else
        {
          int v24 = 0;
          int v25 = 0;
          do
          {
            float64x2_t v27 = v21[2];
            float64x2_t v26 = v21[3];
            int v28 = v17;
            float64x2_t v30 = *v21;
            float64x2_t v29 = v21[1];
            if (v17 >= 1)
            {
              do
              {
                float64x2_t v31 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*a2), 0);
                float64x2_t v32 = vmlaq_f64(v31, v27, v19[2]);
                float64x2_t v33 = vmlaq_f64(v31, v26, v19[3]);
                float64x2_t v34 = vmlaq_f64(v31, v30, *v19);
                float64x2_t v35 = vmlaq_f64(vmlaq_f64(v31, v29, v19[1]), v22[1], v19[5]);
                float64x2_t v36 = vmlaq_f64(v34, *v22, v19[4]);
                float64x2_t v37 = vmlaq_f64(v33, v22[3], v19[7]);
                float64x2_t v38 = vmlaq_f64(v32, v22[2], v19[6]);
                *unint64_t v22 = v30;
                v22[1] = v29;
                _OWORD v22[2] = v27;
                void v22[3] = v26;
                v21[2] = v38;
                v21[3] = v37;
                a2 += a6;
                float64x2_t v30 = v36;
                *unint64_t v21 = v36;
                v21[1] = v35;
                float64x2_t v29 = v35;
                float64x2_t v27 = v38;
                float64x2_t v26 = v37;
                --v28;
              }
              while (v28);
            }
            v25 += v17;
            uint64_t v39 = (float64x2_t *)(v20 + ((uint64_t)(int)(2 * v15) << 6));
            float v40 = vaddvq_f64(vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v39[4], *v22), v30, *v39), vmlaq_f64(vmulq_f64(v39[6], v22[2]), v27, v39[2])), vaddq_f64(vmlaq_f64(vmulq_f64(v39[5], v22[1]), v29, v39[1]), vmlaq_f64(vmulq_f64(v39[7], v22[3]), v26, v39[3]))));
            *a3 = v40;
            a3 += a7;
            int v41 = v15 + v16;
            if (v41 < v23) {
              int v17 = v14;
            }
            else {
              int v17 = v14 + 1;
            }
            if (v41 < v23) {
              int v42 = 0;
            }
            else {
              int v42 = v23;
            }
            unsigned int v15 = v41 - v42;
            ++v24;
          }
          while (v24 != a5);
        }
        int v200 = a4 - v25;
        if (a4 > v25)
        {
          if (v17 < v200) {
            int v200 = v17;
          }
          if (v200 >= 1)
          {
            float64x2_t v202 = v21[2];
            float64x2_t v201 = v21[3];
            float64x2_t v204 = *v21;
            float64x2_t v203 = v21[1];
            int v205 = v200;
            do
            {
              float64x2_t v206 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*a2), 0);
              float64x2_t v207 = vmlaq_f64(v206, v202, v19[2]);
              float64x2_t v208 = vmlaq_f64(v206, v201, v19[3]);
              float64x2_t v209 = vmlaq_f64(v206, v204, *v19);
              float64x2_t v210 = vmlaq_f64(vmlaq_f64(v206, v203, v19[1]), v22[1], v19[5]);
              float64x2_t v211 = vmlaq_f64(v209, *v22, v19[4]);
              float64x2_t v212 = vmlaq_f64(v208, v22[3], v19[7]);
              float64x2_t v213 = vmlaq_f64(v207, v22[2], v19[6]);
              *unint64_t v22 = v204;
              v22[1] = v203;
              _OWORD v22[2] = v202;
              void v22[3] = v201;
              v21[2] = v213;
              v21[3] = v212;
              a2 += a6;
              float64x2_t v204 = v211;
              *unint64_t v21 = v211;
              v21[1] = v210;
              float64x2_t v203 = v210;
              float64x2_t v202 = v213;
              float64x2_t v201 = v212;
              --v205;
            }
            while (v205);
          }
LABEL_156:
          v17 -= v200;
        }
      }
      else
      {
        if (a5 < 1)
        {
          int v95 = 0;
        }
        else
        {
          int v94 = 0;
          int v95 = 0;
          do
          {
            if (v17 < 1)
            {
              float64x2_t v112 = v21[6];
              float64x2_t v111 = v21[7];
              float64x2_t v114 = v21[4];
              float64x2_t v113 = v21[5];
            }
            else
            {
              int v96 = v17;
              do
              {
                float64x2_t v97 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*a2), 0);
                float64x2_t v98 = *v21;
                float64x2_t v99 = v21[1];
                float64x2_t v100 = v21[2];
                float64x2_t v101 = v21[3];
                float64x2_t v102 = vmlaq_f64(vmlaq_f64(v97, *v21, *v19), *v22, v19[8]);
                float64x2_t v103 = vmlaq_f64(vmlaq_f64(v97, v99, v19[1]), v22[1], v19[9]);
                float64x2_t v104 = vmlaq_f64(vmlaq_f64(v97, v100, v19[2]), v22[2], v19[10]);
                float64x2_t v105 = vmlaq_f64(vmlaq_f64(v97, v101, v19[3]), v22[3], v19[11]);
                _OWORD v22[2] = v100;
                void v22[3] = v101;
                *unint64_t v22 = v98;
                v22[1] = v99;
                v21[2] = v104;
                v21[3] = v105;
                *unint64_t v21 = v102;
                v21[1] = v103;
                float64x2_t v107 = v21[4];
                float64x2_t v106 = v21[5];
                float64x2_t v109 = v21[6];
                float64x2_t v108 = v21[7];
                float64x2_t v110 = vmlaq_f64(v97, v107, v19[4]);
                float64x2_t v111 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v108, v19[7]), v22[7], v19[15]);
                float64x2_t v112 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v109, v19[6]), v22[6], v19[14]);
                float64x2_t v113 = vmlaq_f64(vmlaq_f64(v97, v106, v19[5]), v22[5], v19[13]);
                float64x2_t v114 = vmlaq_f64(v110, v22[4], v19[12]);
                _DWORD v22[4] = v107;
                v22[5] = v106;
                void v22[6] = v109;
                v22[7] = v108;
                v21[6] = v112;
                v21[7] = v111;
                void v21[4] = v114;
                v21[5] = v113;
                a2 += a6;
                --v96;
              }
              while (v96);
            }
            v95 += v17;
            long long v115 = (float64x2_t *)(v20 + ((uint64_t)(int)(4 * v15) << 6));
            float64x2_t v116 = vmlaq_f64(vmulq_f64(v115[13], v22[5]), v113, v115[5]);
            int64x2_t v117 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v115[8], *v22), *v21, *v115), vmlaq_f64(vmulq_f64(v115[10], v22[2]), v21[2], v115[2])), vaddq_f64(vmlaq_f64(vmulq_f64(v115[9], v22[1]), v21[1], v115[1]), vmlaq_f64(vmulq_f64(v115[11], v22[3]), v21[3], v115[3])));
            int64x2_t v118 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v115[12], v22[4]), v114, v115[4]), vmlaq_f64(vmulq_f64(v115[14], v22[6]), v112, v115[6])), vaddq_f64(v116, vmlaq_f64(vmulq_f64(v115[15], v22[7]), v111, v115[7])));
            *(float *)v117.i32 = vaddvq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v117, v118), (float64x2_t)vzip2q_s64(v117, v118)));
            *a3 = *(float *)v117.i32;
            a3 += a7;
            int v119 = v15 + v16;
            if (v119 < v23) {
              int v17 = v14;
            }
            else {
              int v17 = v14 + 1;
            }
            if (v119 < v23) {
              int v120 = 0;
            }
            else {
              int v120 = v23;
            }
            unsigned int v15 = v119 - v120;
            ++v94;
          }
          while (v94 != a5);
        }
        int v200 = a4 - v95;
        if (a4 > v95)
        {
          if (v17 < v200) {
            int v200 = v17;
          }
          if (v200 >= 1)
          {
            int v214 = v200;
            do
            {
              float64x2_t v215 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*a2), 0);
              float64x2_t v216 = *v21;
              float64x2_t v217 = v21[1];
              float64x2_t v218 = v21[2];
              float64x2_t v219 = v21[3];
              float64x2_t v220 = vmlaq_f64(vmlaq_f64(v215, *v21, *v19), *v22, v19[8]);
              float64x2_t v221 = vmlaq_f64(vmlaq_f64(v215, v217, v19[1]), v22[1], v19[9]);
              float64x2_t v222 = vmlaq_f64(vmlaq_f64(v215, v218, v19[2]), v22[2], v19[10]);
              float64x2_t v223 = vmlaq_f64(vmlaq_f64(v215, v219, v19[3]), v22[3], v19[11]);
              _OWORD v22[2] = v218;
              void v22[3] = v219;
              *unint64_t v22 = v216;
              v22[1] = v217;
              v21[2] = v222;
              v21[3] = v223;
              *unint64_t v21 = v220;
              v21[1] = v221;
              float64x2_t v225 = v21[4];
              float64x2_t v224 = v21[5];
              float64x2_t v227 = v21[6];
              float64x2_t v226 = v21[7];
              float64x2_t v228 = vmlaq_f64(v215, v225, v19[4]);
              float64x2_t v229 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v226, v19[7]), v22[7], v19[15]);
              float64x2_t v230 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v227, v19[6]), v22[6], v19[14]);
              float64x2_t v231 = vmlaq_f64(vmlaq_f64(v215, v224, v19[5]), v22[5], v19[13]);
              float64x2_t v232 = vmlaq_f64(v228, v22[4], v19[12]);
              _DWORD v22[4] = v225;
              v22[5] = v224;
              void v22[6] = v227;
              v22[7] = v226;
              v21[6] = v230;
              v21[7] = v229;
              void v21[4] = v232;
              v21[5] = v231;
              a2 += a6;
              --v214;
            }
            while (v214);
          }
          goto LABEL_156;
        }
      }
    }
    else
    {
      int v63 = *((_DWORD *)this + 17);
      unsigned int v15 = *((_DWORD *)this + 18);
      int v17 = *((_DWORD *)this + 22);
      uint64_t v64 = *((void *)this + 2);
      double v65 = *(float64x2_t **)(v64 + 16);
      uint64_t v66 = *(void *)(v64 + 40);
      long long v67 = (float64x2_t *)*((void *)this + 20);
      uint64_t v68 = (float64x2_t *)*((void *)this + 23);
      int v69 = *((_DWORD *)this + 15);
      if (*((_DWORD *)this + 14) == 8)
      {
        if (a5 < 1)
        {
          int v70 = 0;
        }
        else
        {
          int v70 = 0;
          int v71 = 0;
          do
          {
            float64x2_t v73 = v67[2];
            float64x2_t v72 = v67[3];
            int v74 = v17;
            float64x2_t v76 = *v67;
            float64x2_t v75 = v67[1];
            if (v17 >= 1)
            {
              do
              {
                float64x2_t v77 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*a2), 0);
                float64x2_t v78 = vmlaq_f64(v77, v73, v65[2]);
                float64x2_t v79 = vmlaq_f64(v77, v72, v65[3]);
                float64x2_t v80 = vmlaq_f64(v77, v76, *v65);
                float64x2_t v81 = vmlaq_f64(vmlaq_f64(v77, v75, v65[1]), v68[1], v65[5]);
                float64x2_t v82 = vmlaq_f64(v80, *v68, v65[4]);
                float64x2_t v83 = vmlaq_f64(v79, v68[3], v65[7]);
                float64x2_t v84 = vmlaq_f64(v78, v68[2], v65[6]);
                float64x2_t *v68 = v76;
                v68[1] = v75;
                v68[2] = v73;
                v68[3] = v72;
                v67[2] = v84;
                v67[3] = v83;
                a2 += a6;
                float64x2_t v76 = v82;
                float64x2_t *v67 = v82;
                v67[1] = v81;
                float64x2_t v75 = v81;
                float64x2_t v73 = v84;
                float64x2_t v72 = v83;
                --v74;
              }
              while (v74);
            }
            v70 += v17;
            uint64_t v85 = (v15 >> 22) & 0x1FE;
            long long v86 = (float64x2_t *)(v66 + (v85 << 6));
            __n128 v87 = (float64x2_t *)(v66 + ((unint64_t)(v85 + 2) << 6));
            float64x2_t v88 = v68[2];
            float64x2_t v89 = v68[3];
            float64x2_t v90 = v68[1];
            int64x2_t v91 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v86[4], *v68), v76, *v86), vmlaq_f64(vmulq_f64(v86[6], v88), v73, v86[2])), vaddq_f64(vmlaq_f64(vmulq_f64(v86[5], v90), v75, v86[1]), vmlaq_f64(vmulq_f64(v86[7], v89), v72, v86[3])));
            int64x2_t v92 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(*v68, v87[4]), v76, *v87), vmlaq_f64(vmulq_f64(v88, v87[6]), v73, v87[2])), vaddq_f64(vmlaq_f64(vmulq_f64(v90, v87[5]), v75, v87[1]), vmlaq_f64(vmulq_f64(v89, v87[7]), v72, v87[3])));
            float64x2_t v93 = vaddq_f64((float64x2_t)vzip1q_s64(v92, v91), (float64x2_t)vzip2q_s64(v92, v91));
            *(float *)v93.f64 = v93.f64[1]
                              + *((double *)this + 12) * (double)(v15 & 0x7FFFFF) * (v93.f64[0] - v93.f64[1]);
            *a3 = *(float *)v93.f64;
            a3 += a7;
            LODWORD(v87) = v15 + v63;
            unsigned int v15 = (v15 + v63) & 0x7FFFFFFF;
            int v17 = v69 + (v87 >> 31);
            ++v71;
          }
          while (v71 != a5);
        }
        int v200 = a4 - v70;
        if (a4 > v70)
        {
          if (v17 < v200) {
            int v200 = v17;
          }
          if (v200 >= 1)
          {
            float64x2_t v267 = v67[2];
            float64x2_t v266 = v67[3];
            float64x2_t v269 = *v67;
            float64x2_t v268 = v67[1];
            int v270 = v200;
            do
            {
              float64x2_t v271 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*a2), 0);
              float64x2_t v272 = vmlaq_f64(v271, v267, v65[2]);
              float64x2_t v273 = vmlaq_f64(v271, v266, v65[3]);
              float64x2_t v274 = vmlaq_f64(v271, v269, *v65);
              float64x2_t v275 = vmlaq_f64(vmlaq_f64(v271, v268, v65[1]), v68[1], v65[5]);
              float64x2_t v276 = vmlaq_f64(v274, *v68, v65[4]);
              float64x2_t v277 = vmlaq_f64(v273, v68[3], v65[7]);
              float64x2_t v278 = vmlaq_f64(v272, v68[2], v65[6]);
              float64x2_t *v68 = v269;
              v68[1] = v268;
              v68[2] = v267;
              v68[3] = v266;
              v67[2] = v278;
              v67[3] = v277;
              a2 += a6;
              float64x2_t v269 = v276;
              float64x2_t *v67 = v276;
              v67[1] = v275;
              float64x2_t v268 = v275;
              float64x2_t v267 = v278;
              float64x2_t v266 = v277;
              --v270;
            }
            while (v270);
          }
          goto LABEL_156;
        }
      }
      else
      {
        if (a5 < 1)
        {
          int v160 = 0;
        }
        else
        {
          int v160 = 0;
          int v161 = 0;
          do
          {
            if (v17 < 1)
            {
              float64x2_t v178 = v67[6];
              float64x2_t v177 = v67[7];
              float64x2_t v180 = v67[4];
              float64x2_t v179 = v67[5];
            }
            else
            {
              int v162 = v17;
              do
              {
                float64x2_t v163 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*a2), 0);
                float64x2_t v164 = *v67;
                float64x2_t v165 = v67[1];
                float64x2_t v166 = v67[2];
                float64x2_t v167 = v67[3];
                float64x2_t v168 = vmlaq_f64(vmlaq_f64(v163, *v67, *v65), *v68, v65[8]);
                float64x2_t v169 = vmlaq_f64(vmlaq_f64(v163, v165, v65[1]), v68[1], v65[9]);
                float64x2_t v170 = vmlaq_f64(vmlaq_f64(v163, v166, v65[2]), v68[2], v65[10]);
                float64x2_t v171 = vmlaq_f64(vmlaq_f64(v163, v167, v65[3]), v68[3], v65[11]);
                v68[2] = v166;
                v68[3] = v167;
                float64x2_t *v68 = v164;
                v68[1] = v165;
                v67[2] = v170;
                v67[3] = v171;
                float64x2_t *v67 = v168;
                v67[1] = v169;
                float64x2_t v173 = v67[4];
                float64x2_t v172 = v67[5];
                float64x2_t v175 = v67[6];
                float64x2_t v174 = v67[7];
                float64x2_t v176 = vmlaq_f64(v163, v173, v65[4]);
                float64x2_t v177 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v174, v65[7]), v68[7], v65[15]);
                float64x2_t v178 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v175, v65[6]), v68[6], v65[14]);
                float64x2_t v179 = vmlaq_f64(vmlaq_f64(v163, v172, v65[5]), v68[5], v65[13]);
                float64x2_t v180 = vmlaq_f64(v176, v68[4], v65[12]);
                v68[4] = v173;
                v68[5] = v172;
                v68[6] = v175;
                v68[7] = v174;
                v67[6] = v178;
                v67[7] = v177;
                v67[4] = v180;
                v67[5] = v179;
                a2 += a6;
                --v162;
              }
              while (v162);
            }
            v160 += v17;
            uint64_t v181 = (v15 >> 21) & 0x3FC;
            v182 = (float64x2_t *)(v66 + (v181 << 6));
            uint64_t v183 = (float64x2_t *)(v66 + ((unint64_t)(v181 + 4) << 6));
            float64x2_t v184 = v67[1];
            float64x2_t v186 = v67[2];
            float64x2_t v185 = v67[3];
            float64x2_t v187 = v68[2];
            float64x2_t v188 = v68[3];
            float64x2_t v189 = v68[1];
            float64x2_t v190 = v68[6];
            float64x2_t v191 = v68[7];
            float64x2_t v192 = v68[4];
            float64x2_t v193 = v68[5];
            int64x2_t v194 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v182[8], *v68), *v67, *v182), vmlaq_f64(vmulq_f64(v182[10], v187), v186, v182[2])), vaddq_f64(vmlaq_f64(vmulq_f64(v182[9], v189), v184, v182[1]), vmlaq_f64(vmulq_f64(v182[11], v188), v185, v182[3])));
            int64x2_t v195 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v182[12], v192), v180, v182[4]), vmlaq_f64(vmulq_f64(v182[14], v190), v178, v182[6])), vaddq_f64(vmlaq_f64(vmulq_f64(v182[13], v193), v179, v182[5]), vmlaq_f64(vmulq_f64(v182[15], v191), v177, v182[7])));
            float64x2_t v196 = vmlaq_f64(vmulq_f64(v193, v183[13]), v179, v183[5]);
            int64x2_t v197 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(*v68, v183[8]), *v67, *v183), vmlaq_f64(vmulq_f64(v187, v183[10]), v186, v183[2])), vaddq_f64(vmlaq_f64(vmulq_f64(v189, v183[9]), v184, v183[1]), vmlaq_f64(vmulq_f64(v188, v183[11]), v185, v183[3])));
            int64x2_t v198 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v192, v183[12]), v180, v183[4]), vmlaq_f64(vmulq_f64(v190, v183[14]), v178, v183[6])), vaddq_f64(v196, vmlaq_f64(vmulq_f64(v191, v183[15]), v177, v183[7])));
            float64x2_t v199 = vaddq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v197, v194), (float64x2_t)vzip2q_s64(v197, v194)), vaddq_f64((float64x2_t)vzip1q_s64(v198, v195), (float64x2_t)vzip2q_s64(v198, v195)));
            *(float *)v199.f64 = v199.f64[1]
                               + *((double *)this + 12) * (double)(v15 & 0x7FFFFF) * (v199.f64[0] - v199.f64[1]);
            *a3 = *(float *)v199.f64;
            a3 += a7;
            LODWORD(v183) = v15 + v63;
            unsigned int v15 = (v15 + v63) & 0x7FFFFFFF;
            int v17 = v69 + (v183 >> 31);
            ++v161;
          }
          while (v161 != a5);
        }
        int v200 = a4 - v160;
        if (a4 > v160)
        {
          if (v17 < v200) {
            int v200 = v17;
          }
          if (v200 >= 1)
          {
            int v289 = v200;
            do
            {
              float64x2_t v290 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*a2), 0);
              float64x2_t v291 = *v67;
              float64x2_t v292 = v67[1];
              float64x2_t v293 = v67[2];
              float64x2_t v294 = v67[3];
              float64x2_t v295 = vmlaq_f64(vmlaq_f64(v290, *v67, *v65), *v68, v65[8]);
              float64x2_t v296 = vmlaq_f64(vmlaq_f64(v290, v292, v65[1]), v68[1], v65[9]);
              float64x2_t v297 = vmlaq_f64(vmlaq_f64(v290, v293, v65[2]), v68[2], v65[10]);
              float64x2_t v298 = vmlaq_f64(vmlaq_f64(v290, v294, v65[3]), v68[3], v65[11]);
              v68[2] = v293;
              v68[3] = v294;
              float64x2_t *v68 = v291;
              v68[1] = v292;
              v67[2] = v297;
              v67[3] = v298;
              float64x2_t *v67 = v295;
              v67[1] = v296;
              float64x2_t v300 = v67[4];
              float64x2_t v299 = v67[5];
              float64x2_t v302 = v67[6];
              float64x2_t v301 = v67[7];
              float64x2_t v303 = vmlaq_f64(v290, v300, v65[4]);
              float64x2_t v304 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v301, v65[7]), v68[7], v65[15]);
              float64x2_t v305 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v302, v65[6]), v68[6], v65[14]);
              float64x2_t v306 = vmlaq_f64(vmlaq_f64(v290, v299, v65[5]), v68[5], v65[13]);
              float64x2_t v307 = vmlaq_f64(v303, v68[4], v65[12]);
              v68[4] = v300;
              v68[5] = v299;
              v68[6] = v302;
              v68[7] = v301;
              v67[6] = v305;
              v67[7] = v304;
              v67[4] = v307;
              v67[5] = v306;
              a2 += a6;
              --v289;
            }
            while (v289);
          }
          goto LABEL_156;
        }
      }
    }
  }
  else if (*((unsigned char *)this + 92))
  {
    int v43 = *((_DWORD *)this + 15);
    int v44 = *((_DWORD *)this + 17);
    unsigned int v15 = *((_DWORD *)this + 18);
    int v17 = *((_DWORD *)this + 22);
    long long v45 = *(float32x4_t **)(*(void *)this + 16);
    uint64_t v46 = *(void *)(*(void *)this + 40);
    long long v47 = (float32x4_t *)*((void *)this + 14);
    uint64_t v48 = (float32x4_t *)*((void *)this + 17);
    int v49 = *((_DWORD *)this + 13);
    if (*((_DWORD *)this + 14) == 8)
    {
      if (a5 < 1)
      {
        int v51 = 0;
      }
      else
      {
        int v50 = 0;
        int v51 = 0;
        do
        {
          float32x4_t v53 = *v47;
          float32x4_t v54 = v47[1];
          int v55 = v17;
          if (v17 >= 1)
          {
            do
            {
              float32x4_t v56 = vld1q_dup_f32(a2);
              uint64_t v52 = 4 * a6;
              a2 = (const float *)((char *)a2 + v52);
              float32x4_t v57 = vmlaq_f32(v56, v54, v45[1]);
              float32x4_t v58 = vmlaq_f32(vmlaq_f32(v56, v53, *v45), *v48, v45[2]);
              float32x4_t v59 = vmlaq_f32(v57, v48[1], v45[3]);
              float32x4_t *v48 = v53;
              v48[1] = v54;
              float32x4_t *v47 = v58;
              v47[1] = v59;
              float32x4_t v53 = v58;
              float32x4_t v54 = v59;
              --v55;
            }
            while (v55);
          }
          v51 += v17;
          int8x16_t v60 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)(v46 + 32 * (int)(2 * v15) + 32), *v48), v53, *(float32x4_t *)(v46 + 32 * (int)(2 * v15))), vmlaq_f32(vmulq_f32(*(float32x4_t *)(v46 + 32 * (int)(2 * v15) + 48), v48[1]), v54, *(float32x4_t *)(v46 + 32 * (int)(2 * v15) + 16)));
          *a3 = vaddv_f32(vadd_f32(*(float32x2_t *)v60.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL)));
          a3 += a7;
          int v61 = v15 + v44;
          if (v61 < v49) {
            int v17 = v43;
          }
          else {
            int v17 = v43 + 1;
          }
          if (v61 < v49) {
            int v62 = 0;
          }
          else {
            int v62 = v49;
          }
          unsigned int v15 = v61 - v62;
          ++v50;
        }
        while (v50 != a5);
      }
      int v200 = a4 - v51;
      if (a4 > v51)
      {
        if (v17 < v200) {
          int v200 = v17;
        }
        if (v200 >= 1)
        {
          float32x4_t v259 = *v47;
          float32x4_t v258 = v47[1];
          int v261 = v200;
          do
          {
            float32x4_t v262 = vld1q_dup_f32(a2);
            uint64_t v260 = 4 * a6;
            a2 = (const float *)((char *)a2 + v260);
            float32x4_t v263 = vmlaq_f32(v262, v258, v45[1]);
            float32x4_t v264 = vmlaq_f32(vmlaq_f32(v262, v259, *v45), *v48, v45[2]);
            float32x4_t v265 = vmlaq_f32(v263, v48[1], v45[3]);
            float32x4_t *v48 = v259;
            v48[1] = v258;
            float32x4_t *v47 = v264;
            v47[1] = v265;
            float32x4_t v259 = v264;
            float32x4_t v258 = v265;
            --v261;
          }
          while (v261);
        }
        goto LABEL_156;
      }
    }
    else
    {
      if (a5 < 1)
      {
        int v143 = 0;
      }
      else
      {
        int v142 = 0;
        int v143 = 0;
        do
        {
          if (v17 < 1)
          {
            float32x4_t v153 = v47[2];
            float32x4_t v152 = v47[3];
          }
          else
          {
            int v145 = v17;
            do
            {
              float32x4_t v146 = vld1q_dup_f32(a2);
              uint64_t v144 = 4 * a6;
              a2 = (const float *)((char *)a2 + v144);
              float32x4_t v147 = v47[1];
              float32x4_t v148 = vmlaq_f32(vmlaq_f32(v146, *v47, *v45), *v48, v45[4]);
              float32x4_t v149 = vmlaq_f32(vmlaq_f32(v146, v147, v45[1]), v48[1], v45[5]);
              float32x4_t *v48 = *v47;
              v48[1] = v147;
              float32x4_t *v47 = v148;
              v47[1] = v149;
              float32x4_t v150 = v47[2];
              float32x4_t v151 = v47[3];
              float32x4_t v152 = vmlaq_f32(vmlaq_f32((float32x4_t)0, v151, v45[3]), v48[3], v45[7]);
              float32x4_t v153 = vmlaq_f32(vmlaq_f32(v146, v150, v45[2]), v48[2], v45[6]);
              v48[2] = v150;
              void v48[3] = v151;
              v47[2] = v153;
              v47[3] = v152;
              --v145;
            }
            while (v145);
          }
          v143 += v17;
          uint64_t v154 = (float32x4_t *)(v46 + 32 * (int)(4 * v15));
          float32x4_t v155 = vmlaq_f32(vmulq_f32(v154[6], v48[2]), v153, v154[2]);
          int8x16_t v156 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v154[4], *v48), *v47, *v154), vmlaq_f32(vmulq_f32(v154[5], v48[1]), v47[1], v154[1]));
          *(float32x2_t *)v156.i8 = vadd_f32(*(float32x2_t *)v156.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v156, v156, 8uLL));
          int8x16_t v157 = (int8x16_t)vaddq_f32(v155, vmlaq_f32(vmulq_f32(v154[7], v48[3]), v152, v154[3]));
          *(float32x2_t *)v157.i8 = vadd_f32(*(float32x2_t *)v157.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v157, v157, 8uLL));
          *a3 = vaddv_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v156.i8, *(int32x2_t *)v157.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v156.i8, *(int32x2_t *)v157.i8)));
          a3 += a7;
          int v158 = v15 + v44;
          if (v158 < v49) {
            int v17 = v43;
          }
          else {
            int v17 = v43 + 1;
          }
          if (v158 < v49) {
            int v159 = 0;
          }
          else {
            int v159 = v49;
          }
          unsigned int v15 = v158 - v159;
          ++v142;
        }
        while (v142 != a5);
      }
      int v200 = a4 - v143;
      if (a4 > v143)
      {
        if (v17 < v200) {
          int v200 = v17;
        }
        if (v200 >= 1)
        {
          int v280 = v200;
          do
          {
            float32x4_t v281 = vld1q_dup_f32(a2);
            uint64_t v279 = 4 * a6;
            a2 = (const float *)((char *)a2 + v279);
            float32x4_t v282 = v47[1];
            float32x4_t v283 = vmlaq_f32(vmlaq_f32(v281, *v47, *v45), *v48, v45[4]);
            float32x4_t v284 = vmlaq_f32(vmlaq_f32(v281, v282, v45[1]), v48[1], v45[5]);
            float32x4_t *v48 = *v47;
            v48[1] = v282;
            float32x4_t *v47 = v283;
            v47[1] = v284;
            float32x4_t v285 = v47[2];
            float32x4_t v286 = v47[3];
            float32x4_t v287 = vmlaq_f32(vmlaq_f32((float32x4_t)0, v286, v45[3]), v48[3], v45[7]);
            float32x4_t v288 = vmlaq_f32(vmlaq_f32(v281, v285, v45[2]), v48[2], v45[6]);
            v48[2] = v285;
            void v48[3] = v286;
            v47[2] = v288;
            v47[3] = v287;
            --v280;
          }
          while (v280);
        }
        goto LABEL_156;
      }
    }
  }
  else
  {
    int v121 = *((_DWORD *)this + 17);
    unsigned int v15 = *((_DWORD *)this + 18);
    int v17 = *((_DWORD *)this + 22);
    long long v122 = *(float32x4_t **)(*(void *)this + 16);
    uint64_t v123 = *(void *)(*(void *)this + 40);
    long long v124 = (float32x4_t *)*((void *)this + 14);
    long long v125 = (float32x4_t *)*((void *)this + 17);
    int v126 = *((_DWORD *)this + 15);
    if (*((_DWORD *)this + 14) == 8)
    {
      if (a5 < 1)
      {
        int v127 = 0;
      }
      else
      {
        int v127 = 0;
        int v128 = 0;
        do
        {
          float32x4_t v130 = *v124;
          float32x4_t v131 = v124[1];
          int v132 = v17;
          if (v17 >= 1)
          {
            do
            {
              float32x4_t v133 = vld1q_dup_f32(a2);
              uint64_t v129 = 4 * a6;
              a2 = (const float *)((char *)a2 + v129);
              float32x4_t v134 = vmlaq_f32(v133, v131, v122[1]);
              float32x4_t v135 = vmlaq_f32(vmlaq_f32(v133, v130, *v122), *v125, v122[2]);
              float32x4_t v136 = vmlaq_f32(v134, v125[1], v122[3]);
              *long long v125 = v130;
              v125[1] = v131;
              float32x4_t *v124 = v135;
              v124[1] = v136;
              float32x4_t v130 = v135;
              float32x4_t v131 = v136;
              --v132;
            }
            while (v132);
          }
          v127 += v17;
          float v137 = *((double *)this + 12) * (double)(v15 & 0x7FFFFF);
          uint64_t v138 = (v15 >> 22) & 0x1FE;
          float32x4_t v139 = v125[1];
          int8x16_t v140 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)(v123 + 32 * v138 + 32), *v125), v130, *(float32x4_t *)(v123 + 32 * v138)), vmlaq_f32(vmulq_f32(*(float32x4_t *)(v123 + 32 * v138 + 48), v139), v131, *(float32x4_t *)(v123 + 32 * v138 + 16)));
          *(float32x2_t *)v140.i8 = vadd_f32(*(float32x2_t *)v140.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v140, v140, 8uLL));
          int8x16_t v141 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(*v125, *(float32x4_t *)(v123 + 32 * (v138 + 2) + 32)), v130, *(float32x4_t *)(v123 + 32 * (v138 + 2))), vmlaq_f32(vmulq_f32(v139, *(float32x4_t *)(v123 + 32 * (v138 + 2) + 48)), v131, *(float32x4_t *)(v123 + 32 * (v138 + 2) + 16)));
          *(float32x2_t *)v141.i8 = vadd_f32(*(float32x2_t *)v141.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v141, v141, 8uLL));
          *(float32x2_t *)v141.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v141.i8, *(int32x2_t *)v140.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v141.i8, *(int32x2_t *)v140.i8));
          *a3 = *(float *)&v141.i32[1] + (float)(v137 * (float)(*(float *)v141.i32 - *(float *)&v141.i32[1]));
          a3 += a7;
          LODWORD(v138) = v15 + v121;
          unsigned int v15 = (v15 + v121) & 0x7FFFFFFF;
          int v17 = v126 + (v138 >> 31);
          ++v128;
        }
        while (v128 != a5);
      }
      int v200 = a4 - v127;
      if (a4 > v127)
      {
        if (v17 < v200) {
          int v200 = v17;
        }
        if (v200 >= 1)
        {
          float32x4_t v309 = *v124;
          float32x4_t v308 = v124[1];
          int v311 = v200;
          do
          {
            float32x4_t v312 = vld1q_dup_f32(a2);
            uint64_t v310 = 4 * a6;
            a2 = (const float *)((char *)a2 + v310);
            float32x4_t v313 = vmlaq_f32(v312, v308, v122[1]);
            float32x4_t v314 = vmlaq_f32(vmlaq_f32(v312, v309, *v122), *v125, v122[2]);
            float32x4_t v315 = vmlaq_f32(v313, v125[1], v122[3]);
            *long long v125 = v309;
            v125[1] = v308;
            float32x4_t *v124 = v314;
            v124[1] = v315;
            float32x4_t v309 = v314;
            float32x4_t v308 = v315;
            --v311;
          }
          while (v311);
        }
        goto LABEL_156;
      }
    }
    else
    {
      if (a5 < 1)
      {
        int v233 = 0;
      }
      else
      {
        int v233 = 0;
        int v234 = 0;
        do
        {
          if (v17 < 1)
          {
            float32x4_t v244 = v124[2];
            float32x4_t v243 = v124[3];
          }
          else
          {
            int v236 = v17;
            do
            {
              float32x4_t v237 = vld1q_dup_f32(a2);
              uint64_t v235 = 4 * a6;
              a2 = (const float *)((char *)a2 + v235);
              float32x4_t v238 = v124[1];
              float32x4_t v239 = vmlaq_f32(vmlaq_f32(v237, *v124, *v122), *v125, v122[4]);
              float32x4_t v240 = vmlaq_f32(vmlaq_f32(v237, v238, v122[1]), v125[1], v122[5]);
              *long long v125 = *v124;
              v125[1] = v238;
              float32x4_t *v124 = v239;
              v124[1] = v240;
              float32x4_t v241 = v124[2];
              float32x4_t v242 = v124[3];
              float32x4_t v243 = vmlaq_f32(vmlaq_f32((float32x4_t)0, v242, v122[3]), v125[3], v122[7]);
              float32x4_t v244 = vmlaq_f32(vmlaq_f32(v237, v241, v122[2]), v125[2], v122[6]);
              v125[2] = v241;
              v125[3] = v242;
              v124[2] = v244;
              v124[3] = v243;
              --v236;
            }
            while (v236);
          }
          v233 += v17;
          float v245 = *((double *)this + 12) * (double)(v15 & 0x7FFFFF);
          uint64_t v246 = (v15 >> 21) & 0x3FC;
          v247 = (float32x4_t *)(v123 + 32 * v246);
          mach_port_t v248 = (float32x4_t *)(v123 + 32 * (v246 + 4));
          float32x4_t v249 = v124[1];
          float32x4_t v250 = v125[1];
          float32x4_t v252 = v125[2];
          float32x4_t v251 = v125[3];
          int8x16_t v253 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v247[4], *v125), *v124, *v247), vmlaq_f32(vmulq_f32(v247[5], v250), v249, v247[1]));
          *(float32x2_t *)v253.i8 = vadd_f32(*(float32x2_t *)v253.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v253, v253, 8uLL));
          int8x16_t v254 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v247[6], v252), v244, v247[2]), vmlaq_f32(vmulq_f32(v247[7], v251), v243, v247[3]));
          *(float32x2_t *)v254.i8 = vadd_f32(*(float32x2_t *)v254.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v254, v254, 8uLL));
          float32x4_t v255 = vmlaq_f32(vmulq_f32(v252, v248[6]), v244, v248[2]);
          int8x16_t v256 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(*v125, v248[4]), *v124, *v248), vmlaq_f32(vmulq_f32(v250, v248[5]), v249, v248[1]));
          *(float32x2_t *)v256.i8 = vadd_f32(*(float32x2_t *)v256.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v256, v256, 8uLL));
          int8x16_t v257 = (int8x16_t)vaddq_f32(v255, vmlaq_f32(vmulq_f32(v251, v248[7]), v243, v248[3]));
          *(float32x2_t *)v257.i8 = vadd_f32(*(float32x2_t *)v257.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v257, v257, 8uLL));
          *(float32x2_t *)v256.i8 = vadd_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v256.i8, *(int32x2_t *)v253.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v256.i8, *(int32x2_t *)v253.i8)), vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v257.i8, *(int32x2_t *)v254.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v257.i8, *(int32x2_t *)v254.i8)));
          *a3 = *(float *)&v256.i32[1] + (float)(v245 * (float)(*(float *)v256.i32 - *(float *)&v256.i32[1]));
          a3 += a7;
          LODWORD(v248) = v15 + v121;
          unsigned int v15 = (v15 + v121) & 0x7FFFFFFF;
          int v17 = v126 + (v248 >> 31);
          ++v234;
        }
        while (v234 != a5);
      }
      int v200 = a4 - v233;
      if (a4 > v233)
      {
        if (v17 < v200) {
          int v200 = v17;
        }
        if (v200 >= 1)
        {
          int v317 = v200;
          do
          {
            float32x4_t v318 = vld1q_dup_f32(a2);
            uint64_t v316 = 4 * a6;
            a2 = (const float *)((char *)a2 + v316);
            float32x4_t v319 = v124[1];
            float32x4_t v320 = vmlaq_f32(vmlaq_f32(v318, *v124, *v122), *v125, v122[4]);
            float32x4_t v321 = vmlaq_f32(vmlaq_f32(v318, v319, v122[1]), v125[1], v122[5]);
            *long long v125 = *v124;
            v125[1] = v319;
            float32x4_t *v124 = v320;
            v124[1] = v321;
            float32x4_t v322 = v124[2];
            float32x4_t v323 = v124[3];
            float32x4_t v324 = vmlaq_f32(vmlaq_f32((float32x4_t)0, v323, v122[3]), v125[3], v122[7]);
            float32x4_t v325 = vmlaq_f32(vmlaq_f32(v318, v322, v122[2]), v125[2], v122[6]);
            v125[2] = v322;
            v125[3] = v323;
            v124[2] = v325;
            v124[3] = v324;
            --v317;
          }
          while (v317);
        }
        goto LABEL_156;
      }
    }
  }
  *((_DWORD *)this + 18) = v15;
  *((_DWORD *)this + 22) = v17;
  double result = NAN;
  *((void *)this + 32) = -1;
  *((_DWORD *)this + 66) = -1;
  return result;
}

void sub_1BAEC9920(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  *(void *)(v1 + 256) = -1;
  *(_DWORD *)(v1 + 264) = -1;
  _Unwind_Resume(a1);
}

_DWORD *RamstadSRC::checkPreflight(_DWORD *this, int a2, int a3)
{
  unint64_t v4 = this;
  int v5 = this[66];
  if (v5 == -1)
  {
    this = (_DWORD *)RamstadSRC::outputSamplesForInputSamples((RamstadSRC *)this, a2, &v7);
    if (v4[66] == a3) {
      return this;
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "RamstadSRC process called without preflight and arguments don't match preflight.");
LABEL_10:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v5 != a3)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "RamstadSRC process called for different number of output samples than preflight.");
    goto LABEL_10;
  }
  if (this[64] > a2 || this[65] < a2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "RamstadSRC process called for number of input samples than outside range of preflight.");
    goto LABEL_10;
  }
  return this;
}

void sub_1BAEC9A2C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t RamstadSRC::outputSamplesForInputSamples(RamstadSRC *this, int a2, int *a3)
{
  int v5 = 0;
  uint64_t v6 = 0;
  *a3 = 0;
  int v7 = *((_DWORD *)this + 22);
  BOOL v8 = __OFSUB__(a2, v7);
  int v9 = a2 - v7;
  if (v9 < 0 == v8)
  {
    if (*((unsigned char *)this + 92))
    {
      uint64_t v11 = *((int *)this + 13) * (uint64_t)v9;
      uint64_t v12 = *((int *)this + 18);
      uint64_t v13 = *((int *)this + 16);
    }
    else
    {
      uint64_t v12 = (uint64_t)v9 << 31;
      uint64_t v11 = *((int *)this + 18);
      uint64_t v13 = *((void *)this + 10);
    }
    uint64_t v14 = ((v12 + v11 + v13 - 1) / v13) + 1;
    unsigned int v15 = vcvtpd_s64_f64(*((double *)this + 5) / *((double *)this + 4));
    int v16 = v14 + 2 * v15;
    for (int i = v14 - 2 * v15; ; int i = v6)
    {
      while (1)
      {
        uint64_t v6 = v14;
        int v5 = RamstadSRC::inputSamplesForOutputSamples(this, v14);
        if (v5 <= a2) {
          break;
        }
        uint64_t v14 = (i + (((int)v6 - i) >> 1));
        int v16 = v6;
        if (v14 == v6) {
          goto LABEL_11;
        }
      }
      if ((v16 - v6) < 2) {
        break;
      }
      uint64_t v14 = (v6 + ((v16 - (int)v6) >> 1));
    }
LABEL_11:
    *a3 = v5;
  }
  *((_DWORD *)this + 64) = v5;
  *((_DWORD *)this + 65) = a2;
  *((_DWORD *)this + 66) = v6;
  return v6;
}

uint64_t RamstadSRC::inputSamplesForOutputSamples(RamstadSRC *this, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (a2 < 1) {
    return 0;
  }
  if (*((unsigned char *)this + 92)) {
    unint64_t v3 = (*((int *)this + 18) + *((int *)this + 16) * v2) / *((int *)this + 13);
  }
  else {
    unint64_t v3 = (unint64_t)(*((int *)this + 18) + *((void *)this + 10) * v2) >> 31;
  }
  uint64_t v4 = (*((_DWORD *)this + 22) + v3);
  *((_DWORD *)this + 64) = v4;
  *((_DWORD *)this + 65) = v4;
  *((_DWORD *)this + 66) = a2;
  return v4;
}

double RamstadSRC::processStereo(RamstadSRC *this, const float *a2, const float *a3, float *a4, float *a5, int a6, int a7, int a8, int a9)
{
  if (*((_DWORD *)this + 12) != 2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "RamstadSRC::processStereo, wrong channel count");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  RamstadSRC::checkPreflight(this, a6, a7);
  if (!*((unsigned char *)this + 93))
  {
    if (*((unsigned char *)this + 92))
    {
      int v71 = *((_DWORD *)this + 15);
      int v72 = *((_DWORD *)this + 17);
      unsigned int v18 = *((_DWORD *)this + 18);
      int v20 = *((_DWORD *)this + 22);
      float64x2_t v73 = *(float32x4_t **)(*(void *)this + 16);
      uint64_t v74 = *(void *)(*(void *)this + 40);
      float64x2_t v75 = (float32x4_t *)*((void *)this + 14);
      float64x2_t v76 = (float32x4_t *)*((void *)this + 17);
      int v77 = *((_DWORD *)this + 13);
      if (*((_DWORD *)this + 14) == 8)
      {
        if (a7 < 1)
        {
          int v79 = 0;
        }
        else
        {
          int v78 = 0;
          int v79 = 0;
          do
          {
            if (v20 < 1)
            {
              float32x4_t v93 = v75[2];
              float32x4_t v94 = v75[3];
            }
            else
            {
              uint64_t v80 = 0;
              int v81 = v20;
              do
              {
                float64x2_t v82 = &a2[v80];
                float64x2_t v83 = &a3[v80];
                float32x4_t v84 = vld1q_dup_f32(v82);
                float32x4_t v85 = vld1q_dup_f32(v83);
                float32x4_t v86 = v75[1];
                float32x4_t v87 = vmlaq_f32(v84, v86, v73[1]);
                float32x4_t v88 = vmlaq_f32(vmlaq_f32(v84, *v75, *v73), *v76, v73[2]);
                float32x4_t v89 = vmlaq_f32(v87, v76[1], v73[3]);
                float32x4_t *v76 = *v75;
                v76[1] = v86;
                float32x4_t *v75 = v88;
                v75[1] = v89;
                float32x4_t v90 = v75[2];
                float32x4_t v91 = v75[3];
                float32x4_t v92 = vmlaq_f32(v85, v91, v73[1]);
                float32x4_t v93 = vmlaq_f32(vmlaq_f32(v85, v90, *v73), v76[2], v73[2]);
                float32x4_t v94 = vmlaq_f32(v92, v76[3], v73[3]);
                v76[2] = v90;
                v76[3] = v91;
                v75[2] = v93;
                v75[3] = v94;
                v80 += a8;
                --v81;
              }
              while (v81);
              a2 = (const float *)((char *)a2 + v80 * 4);
              a3 = (const float *)((char *)a3 + v80 * 4);
            }
            v79 += v20;
            int v95 = (float32x4_t *)(v74 + 32 * (int)(2 * v18));
            float32x4_t v96 = v95[1];
            float32x4_t v98 = v95[2];
            float32x4_t v97 = v95[3];
            float32x4_t v99 = vmlaq_f32(vmulq_f32(v97, v76[3]), v94, v96);
            float32x4_t v100 = vmlaq_f32(vmulq_f32(v98, v76[2]), v93, *v95);
            int8x16_t v101 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v98, *v76), *v75, *v95), vmlaq_f32(vmulq_f32(v97, v76[1]), v75[1], v96));
            *a4 = vaddv_f32(vadd_f32(*(float32x2_t *)v101.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v101, v101, 8uLL)));
            int8x16_t v102 = (int8x16_t)vaddq_f32(v100, v99);
            *a5 = vaddv_f32(vadd_f32(*(float32x2_t *)v102.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v102, v102, 8uLL)));
            a4 += a9;
            a5 += a9;
            int v103 = v18 + v72;
            if (v103 < v77) {
              int v20 = v71;
            }
            else {
              int v20 = v71 + 1;
            }
            if (v103 < v77) {
              int v104 = 0;
            }
            else {
              int v104 = v77;
            }
            unsigned int v18 = v103 - v104;
            ++v78;
          }
          while (v78 != a7);
        }
        int v408 = a6 - v79;
        if (a6 <= v79) {
          goto LABEL_155;
        }
        if (v20 < v408) {
          int v408 = v20;
        }
        if (v408 >= 1)
        {
          uint64_t v515 = 0;
          int v516 = v408;
          do
          {
            v517 = &a2[v515];
            v518 = &a3[v515];
            float32x4_t v519 = vld1q_dup_f32(v517);
            float32x4_t v520 = vld1q_dup_f32(v518);
            float32x4_t v521 = v75[1];
            float32x4_t v522 = vmlaq_f32(v519, v521, v73[1]);
            float32x4_t v523 = vmlaq_f32(vmlaq_f32(v519, *v75, *v73), *v76, v73[2]);
            float32x4_t v524 = vmlaq_f32(v522, v76[1], v73[3]);
            float32x4_t *v76 = *v75;
            v76[1] = v521;
            float32x4_t *v75 = v523;
            v75[1] = v524;
            float32x4_t v525 = v75[2];
            float32x4_t v526 = v75[3];
            float32x4_t v527 = vmlaq_f32(v520, v526, v73[1]);
            float32x4_t v528 = vmlaq_f32(vmlaq_f32(v520, v525, *v73), v76[2], v73[2]);
            float32x4_t v529 = vmlaq_f32(v527, v76[3], v73[3]);
            v76[2] = v525;
            v76[3] = v526;
            v75[2] = v528;
            v75[3] = v529;
            v515 += a8;
            --v516;
          }
          while (v516);
        }
      }
      else
      {
        if (a7 < 1)
        {
          int v277 = 0;
        }
        else
        {
          int v276 = 0;
          int v277 = 0;
          do
          {
            if (v20 < 1)
            {
              float32x4_t v293 = v75[4];
              float32x4_t v294 = v75[5];
            }
            else
            {
              uint64_t v278 = 0;
              int v279 = v20;
              do
              {
                int v280 = &a2[v278];
                float32x4_t v281 = &a3[v278];
                float32x4_t v282 = vld1q_dup_f32(v280);
                float32x4_t v283 = v75[1];
                float32x4_t v284 = vld1q_dup_f32(v281);
                float32x4_t v285 = vmlaq_f32(vmlaq_f32(v282, *v75, *v73), *v76, v73[4]);
                float32x4_t v286 = vmlaq_f32(vmlaq_f32(v282, v283, v73[1]), v76[1], v73[5]);
                float32x4_t *v76 = *v75;
                v76[1] = v283;
                float32x4_t *v75 = v285;
                v75[1] = v286;
                float32x4_t v287 = v75[2];
                float32x4_t v288 = v75[3];
                float32x4_t v289 = vmlaq_f32(vmlaq_f32(v284, v287, *v73), v76[2], v73[4]);
                float32x4_t v290 = vmlaq_f32(vmlaq_f32(v284, v288, v73[1]), v76[3], v73[5]);
                v76[2] = v287;
                v76[3] = v288;
                v75[2] = v289;
                v75[3] = v290;
                float32x4_t v291 = v75[4];
                float32x4_t v292 = v75[5];
                float32x4_t v293 = vmlaq_f32(vmlaq_f32(v282, v291, v73[2]), v76[4], v73[6]);
                float32x4_t v294 = vmlaq_f32(vmlaq_f32(v284, v292, v73[3]), v76[5], v73[7]);
                v76[4] = v291;
                v76[5] = v292;
                v75[4] = v293;
                v75[5] = v294;
                v278 += a8;
                --v279;
              }
              while (v279);
              a2 = (const float *)((char *)a2 + v278 * 4);
              a3 = (const float *)((char *)a3 + v278 * 4);
            }
            v277 += v20;
            float64x2_t v295 = (float32x4_t *)(v74 + 32 * (int)(4 * v18));
            float32x4_t v296 = v295[1];
            float32x4_t v298 = v295[4];
            float32x4_t v297 = v295[5];
            float32x4_t v299 = vmlaq_f32(vmulq_f32(v297, v76[1]), v75[1], v296);
            float32x4_t v300 = vmlaq_f32(vmulq_f32(v298, *v76), *v75, *v295);
            float32x4_t v301 = vmlaq_f32(vmulq_f32(v297, v76[3]), v75[3], v296);
            float32x4_t v302 = vmlaq_f32(vmulq_f32(v298, v76[2]), v75[2], *v295);
            int8x16_t v303 = (int8x16_t)vmlaq_f32(vmulq_f32(v295[7], v76[5]), v294, v295[3]);
            int8x16_t v304 = (int8x16_t)vmlaq_f32(vmulq_f32(v295[6], v76[4]), v293, v295[2]);
            int8x16_t v305 = (int8x16_t)vaddq_f32(v300, v299);
            *(float32x2_t *)v305.i8 = vadd_f32(*(float32x2_t *)v305.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v305, v305, 8uLL));
            int32x2_t v306 = (int32x2_t)vadd_f32(*(float32x2_t *)v304.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v304, v304, 8uLL));
            *a4 = vaddv_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v305.i8, v306), (float32x2_t)vzip2_s32(*(int32x2_t *)v305.i8, v306)));
            int8x16_t v307 = (int8x16_t)vaddq_f32(v302, v301);
            *(float32x2_t *)v307.i8 = vadd_f32(*(float32x2_t *)v307.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v307, v307, 8uLL));
            int32x2_t v308 = (int32x2_t)vadd_f32(*(float32x2_t *)v303.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v303, v303, 8uLL));
            *a5 = vaddv_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v307.i8, v308), (float32x2_t)vzip2_s32(*(int32x2_t *)v307.i8, v308)));
            a4 += a9;
            a5 += a9;
            int v309 = v18 + v72;
            if (v309 < v77) {
              int v20 = v71;
            }
            else {
              int v20 = v71 + 1;
            }
            if (v309 < v77) {
              int v310 = 0;
            }
            else {
              int v310 = v77;
            }
            unsigned int v18 = v309 - v310;
            ++v276;
          }
          while (v276 != a7);
        }
        int v408 = a6 - v277;
        if (a6 <= v277) {
          goto LABEL_155;
        }
        if (v20 < v408) {
          int v408 = v20;
        }
        if (v408 >= 1)
        {
          uint64_t v556 = 0;
          int v557 = v408;
          do
          {
            v558 = &a2[v556];
            v559 = &a3[v556];
            float32x4_t v560 = vld1q_dup_f32(v558);
            float32x4_t v561 = v75[1];
            float32x4_t v562 = vld1q_dup_f32(v559);
            float32x4_t v563 = vmlaq_f32(vmlaq_f32(v560, *v75, *v73), *v76, v73[4]);
            float32x4_t v564 = vmlaq_f32(vmlaq_f32(v560, v561, v73[1]), v76[1], v73[5]);
            float32x4_t *v76 = *v75;
            v76[1] = v561;
            float32x4_t *v75 = v563;
            v75[1] = v564;
            float32x4_t v565 = v75[2];
            float32x4_t v566 = v75[3];
            float32x4_t v567 = vmlaq_f32(vmlaq_f32(v562, v565, *v73), v76[2], v73[4]);
            float32x4_t v568 = vmlaq_f32(vmlaq_f32(v562, v566, v73[1]), v76[3], v73[5]);
            v76[2] = v565;
            v76[3] = v566;
            v75[2] = v567;
            v75[3] = v568;
            float32x4_t v569 = v75[4];
            float32x4_t v570 = v75[5];
            float32x4_t v571 = vmlaq_f32(vmlaq_f32(v560, v569, v73[2]), v76[4], v73[6]);
            float32x4_t v572 = vmlaq_f32(vmlaq_f32(v562, v570, v73[3]), v76[5], v73[7]);
            v76[4] = v569;
            v76[5] = v570;
            v75[4] = v571;
            v75[5] = v572;
            v556 += a8;
            --v557;
          }
          while (v557);
        }
      }
      goto LABEL_154;
    }
    int v234 = *((_DWORD *)this + 17);
    unsigned int v233 = *((_DWORD *)this + 18);
    int v235 = *((_DWORD *)this + 22);
    int v236 = *(float32x4_t **)(*(void *)this + 16);
    uint64_t v237 = *(void *)(*(void *)this + 40);
    float32x4_t v238 = (float32x4_t *)*((void *)this + 14);
    float32x4_t v239 = (float32x4_t *)*((void *)this + 17);
    int v240 = *((_DWORD *)this + 15);
    if (*((_DWORD *)this + 14) == 8)
    {
      if (a7 >= 1)
      {
        int v241 = 0;
        int v242 = 0;
        while (1)
        {
          v241 += v235;
          if (v241 > *((_DWORD *)this + 64)) {
            goto LABEL_174;
          }
          if (v235 < 1)
          {
            float32x4_t v255 = v238[2];
            float32x4_t v256 = v238[3];
          }
          else
          {
            uint64_t v243 = 0;
            do
            {
              float32x4_t v244 = &a2[v243];
              float v245 = &a3[v243];
              float32x4_t v246 = vld1q_dup_f32(v244);
              float32x4_t v247 = vld1q_dup_f32(v245);
              float32x4_t v248 = v238[1];
              float32x4_t v249 = vmlaq_f32(v246, v248, v236[1]);
              float32x4_t v250 = vmlaq_f32(vmlaq_f32(v246, *v238, *v236), *v239, v236[2]);
              float32x4_t v251 = vmlaq_f32(v249, v239[1], v236[3]);
              float32x4_t *v239 = *v238;
              v239[1] = v248;
              *float32x4_t v238 = v250;
              v238[1] = v251;
              float32x4_t v252 = v238[2];
              float32x4_t v253 = v238[3];
              float32x4_t v254 = vmlaq_f32(v247, v253, v236[1]);
              float32x4_t v255 = vmlaq_f32(vmlaq_f32(v247, v252, *v236), v239[2], v236[2]);
              float32x4_t v256 = vmlaq_f32(v254, v239[3], v236[3]);
              v239[2] = v252;
              v239[3] = v253;
              v238[2] = v255;
              v238[3] = v256;
              v243 += a8;
              --v235;
            }
            while (v235);
            a2 = (const float *)((char *)a2 + v243 * 4);
            a3 = (const float *)((char *)a3 + v243 * 4);
          }
          float v257 = *((double *)this + 12) * (double)(v233 & 0x7FFFFF);
          uint64_t v258 = (v233 >> 22) & 0x1FE;
          float32x4_t v259 = (float32x4_t *)(v237 + 32 * v258);
          uint64_t v260 = (float32x4_t *)(v237 + 32 * (v258 + 2));
          float32x4_t v261 = v259[1];
          float32x4_t v262 = v238[1];
          float32x4_t v264 = v259[2];
          float32x4_t v263 = v259[3];
          float32x4_t v265 = v239[1];
          float32x4_t v267 = v239[2];
          float32x4_t v266 = v239[3];
          int8x16_t v268 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v264, *v239), *v238, *v259), vmlaq_f32(vmulq_f32(v263, v265), v262, v261));
          *(float32x2_t *)v268.i8 = vadd_f32(*(float32x2_t *)v268.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v268, v268, 8uLL));
          int8x16_t v269 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v264, v267), v255, *v259), vmlaq_f32(vmulq_f32(v263, v266), v256, v261));
          *(float32x2_t *)v269.i8 = vadd_f32(*(float32x2_t *)v269.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v269, v269, 8uLL));
          float32x4_t v270 = v260[1];
          float32x4_t v272 = v260[2];
          float32x4_t v271 = v260[3];
          float32x4_t v273 = vmlaq_f32(vmulq_f32(v267, v272), v255, *v260);
          int8x16_t v274 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(*v239, v272), *v238, *v260), vmlaq_f32(vmulq_f32(v265, v271), v262, v270));
          *(float32x2_t *)v274.i8 = vadd_f32(*(float32x2_t *)v274.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v274, v274, 8uLL));
          *(float32x2_t *)v274.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v274.i8, *(int32x2_t *)v268.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v274.i8, *(int32x2_t *)v268.i8));
          int8x16_t v275 = (int8x16_t)vaddq_f32(v273, vmlaq_f32(vmulq_f32(v266, v271), v256, v270));
          *(float32x2_t *)v275.i8 = vadd_f32(*(float32x2_t *)v275.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v275, v275, 8uLL));
          *(float32x2_t *)v275.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v275.i8, *(int32x2_t *)v269.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v275.i8, *(int32x2_t *)v269.i8));
          *a4 = *(float *)&v274.i32[1] + (float)(v257 * (float)(*(float *)v274.i32 - *(float *)&v274.i32[1]));
          *a5 = *(float *)&v275.i32[1] + (float)(v257 * (float)(*(float *)v275.i32 - *(float *)&v275.i32[1]));
          a4 += a9;
          a5 += a9;
          LODWORD(v260) = v233 + v234;
          unsigned int v233 = (v233 + v234) & 0x7FFFFFFF;
          int v235 = v240 + (v260 >> 31);
          if (++v242 == a7) {
            goto LABEL_158;
          }
        }
      }
      int v241 = 0;
LABEL_158:
      int v604 = a6 - v241;
      if (a6 > v241)
      {
        if (v235 < v604) {
          int v604 = v235;
        }
        if (v604 >= 1)
        {
          uint64_t v605 = 0;
          int v606 = v604;
          do
          {
            v607 = &a2[v605];
            v608 = &a3[v605];
            float32x4_t v609 = vld1q_dup_f32(v607);
            float32x4_t v610 = vld1q_dup_f32(v608);
            float32x4_t v611 = v238[1];
            float32x4_t v612 = vmlaq_f32(v609, v611, v236[1]);
            float32x4_t v613 = vmlaq_f32(vmlaq_f32(v609, *v238, *v236), *v239, v236[2]);
            float32x4_t v614 = vmlaq_f32(v612, v239[1], v236[3]);
            float32x4_t *v239 = *v238;
            v239[1] = v611;
            *float32x4_t v238 = v613;
            v238[1] = v614;
            float32x4_t v615 = v238[2];
            float32x4_t v616 = v238[3];
            float32x4_t v617 = vmlaq_f32(v610, v616, v236[1]);
            float32x4_t v618 = vmlaq_f32(vmlaq_f32(v610, v615, *v236), v239[2], v236[2]);
            float32x4_t v619 = vmlaq_f32(v617, v239[3], v236[3]);
            v239[2] = v615;
            v239[3] = v616;
            v238[2] = v618;
            v238[3] = v619;
            v605 += a8;
            --v606;
          }
          while (v606);
        }
LABEL_172:
        v235 -= v604;
      }
    }
    else
    {
      if (a7 >= 1)
      {
        int v465 = 0;
        int v466 = 0;
        while (1)
        {
          v466 += v235;
          if (v466 > *((_DWORD *)this + 64)) {
            break;
          }
          if (v235 < 1)
          {
            float32x4_t v481 = v238[4];
            float32x4_t v482 = v238[5];
          }
          else
          {
            uint64_t v467 = 0;
            do
            {
              v468 = &a2[v467];
              v469 = &a3[v467];
              float32x4_t v470 = vld1q_dup_f32(v468);
              float32x4_t v471 = v238[1];
              float32x4_t v472 = vld1q_dup_f32(v469);
              float32x4_t v473 = vmlaq_f32(vmlaq_f32(v470, *v238, *v236), *v239, v236[4]);
              float32x4_t v474 = vmlaq_f32(vmlaq_f32(v470, v471, v236[1]), v239[1], v236[5]);
              float32x4_t *v239 = *v238;
              v239[1] = v471;
              *float32x4_t v238 = v473;
              v238[1] = v474;
              float32x4_t v475 = v238[2];
              float32x4_t v476 = v238[3];
              float32x4_t v477 = vmlaq_f32(vmlaq_f32(v472, v475, *v236), v239[2], v236[4]);
              float32x4_t v478 = vmlaq_f32(vmlaq_f32(v472, v476, v236[1]), v239[3], v236[5]);
              v239[2] = v475;
              v239[3] = v476;
              v238[2] = v477;
              v238[3] = v478;
              float32x4_t v479 = v238[4];
              float32x4_t v480 = v238[5];
              float32x4_t v481 = vmlaq_f32(vmlaq_f32(v470, v479, v236[2]), v239[4], v236[6]);
              float32x4_t v482 = vmlaq_f32(vmlaq_f32(v472, v480, v236[3]), v239[5], v236[7]);
              v239[4] = v479;
              v239[5] = v480;
              v238[4] = v481;
              v238[5] = v482;
              v467 += a8;
              --v235;
            }
            while (v235);
            a2 = (const float *)((char *)a2 + v467 * 4);
            a3 = (const float *)((char *)a3 + v467 * 4);
          }
          float v483 = *((double *)this + 12) * (double)(v233 & 0x7FFFFF);
          uint64_t v484 = (v233 >> 21) & 0x3FC;
          v485 = (float32x4_t *)(v237 + 32 * v484);
          v486 = (float32x4_t *)(v237 + 32 * (v484 + 4));
          float32x4_t v487 = v485[1];
          float32x4_t v488 = v238[1];
          float32x4_t v490 = v485[4];
          float32x4_t v489 = v485[5];
          float32x4_t v491 = v239[1];
          float32x4_t v492 = vmlaq_f32(vmulq_f32(v489, v491), v488, v487);
          float32x4_t v493 = v238[2];
          float32x4_t v494 = v238[3];
          float32x4_t v496 = v239[2];
          float32x4_t v495 = v239[3];
          float32x4_t v497 = vmlaq_f32(vmulq_f32(v489, v495), v494, v487);
          float32x4_t v499 = v239[4];
          float32x4_t v498 = v239[5];
          int8x16_t v500 = (int8x16_t)vmlaq_f32(vmulq_f32(v485[7], v498), v482, v485[3]);
          int8x16_t v501 = (int8x16_t)vmlaq_f32(vmulq_f32(v485[6], v499), v481, v485[2]);
          int8x16_t v502 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v490, *v239), *v238, *v485), v492);
          *(float32x2_t *)v502.i8 = vadd_f32(*(float32x2_t *)v502.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v502, v502, 8uLL));
          *(float32x2_t *)v487.f32 = vadd_f32(*(float32x2_t *)v501.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v501, v501, 8uLL));
          int8x16_t v503 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v490, v496), v493, *v485), v497);
          *(float32x2_t *)v503.i8 = vadd_f32(*(float32x2_t *)v503.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v503, v503, 8uLL));
          *(float32x2_t *)v490.f32 = vadd_f32(*(float32x2_t *)v500.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v500, v500, 8uLL));
          float32x4_t v504 = v486[1];
          float32x4_t v506 = v486[4];
          float32x4_t v505 = v486[5];
          float32x4_t v507 = vmlaq_f32(vmulq_f32(v491, v505), v488, v504);
          float32x4_t v508 = vmlaq_f32(vmulq_f32(v495, v505), v494, v504);
          float32x4_t v509 = vmlaq_f32(vmulq_f32(v496, v506), v493, *v486);
          int8x16_t v510 = (int8x16_t)vmlaq_f32(vmulq_f32(v498, v486[7]), v482, v486[3]);
          int8x16_t v511 = (int8x16_t)vmlaq_f32(vmulq_f32(v499, v486[6]), v481, v486[2]);
          int8x16_t v512 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(*v239, v506), *v238, *v486), v507);
          *(float32x2_t *)v512.i8 = vadd_f32(*(float32x2_t *)v512.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v512, v512, 8uLL));
          int32x2_t v513 = (int32x2_t)vadd_f32(*(float32x2_t *)v511.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v511, v511, 8uLL));
          *(float32x2_t *)v512.i8 = vadd_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v512.i8, *(int32x2_t *)v502.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v512.i8, *(int32x2_t *)v502.i8)), vadd_f32((float32x2_t)vzip1_s32(v513, *(int32x2_t *)v487.f32), (float32x2_t)vzip2_s32(v513, *(int32x2_t *)v487.f32)));
          int8x16_t v514 = (int8x16_t)vaddq_f32(v509, v508);
          *(float32x2_t *)v514.i8 = vadd_f32(*(float32x2_t *)v514.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v514, v514, 8uLL));
          *(float32x2_t *)v502.i8 = vadd_f32(*(float32x2_t *)v510.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v510, v510, 8uLL));
          *(float32x2_t *)v514.i8 = vadd_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v514.i8, *(int32x2_t *)v503.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v514.i8, *(int32x2_t *)v503.i8)), vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v502.i8, *(int32x2_t *)v490.f32), (float32x2_t)vzip2_s32(*(int32x2_t *)v502.i8, *(int32x2_t *)v490.f32)));
          *a4 = *(float *)&v512.i32[1] + (float)(v483 * (float)(*(float *)v512.i32 - *(float *)&v512.i32[1]));
          *a5 = *(float *)&v514.i32[1] + (float)(v483 * (float)(*(float *)v514.i32 - *(float *)&v514.i32[1]));
          a4 += a9;
          a5 += a9;
          LODWORD(v486) = v233 + v234;
          unsigned int v233 = (v233 + v234) & 0x7FFFFFFF;
          int v235 = v240 + (v486 >> 31);
          if (++v465 == a7) {
            goto LABEL_166;
          }
        }
LABEL_174:
        v637 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v637, "RamstadSRC::processStereoFrac preflight prediction failed.");
        __cxa_throw(v637, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v466 = 0;
LABEL_166:
      int v604 = a6 - v466;
      if (a6 > v466)
      {
        if (v235 < v604) {
          int v604 = v235;
        }
        if (v604 >= 1)
        {
          uint64_t v620 = 0;
          int v621 = v604;
          do
          {
            v622 = &a2[v620];
            v623 = &a3[v620];
            float32x4_t v624 = vld1q_dup_f32(v622);
            float32x4_t v625 = v238[1];
            float32x4_t v626 = vld1q_dup_f32(v623);
            float32x4_t v627 = vmlaq_f32(vmlaq_f32(v624, *v238, *v236), *v239, v236[4]);
            float32x4_t v628 = vmlaq_f32(vmlaq_f32(v624, v625, v236[1]), v239[1], v236[5]);
            float32x4_t *v239 = *v238;
            v239[1] = v625;
            *float32x4_t v238 = v627;
            v238[1] = v628;
            float32x4_t v629 = v238[2];
            float32x4_t v630 = v238[3];
            float32x4_t v631 = vmlaq_f32(vmlaq_f32(v626, v629, *v236), v239[2], v236[4]);
            float32x4_t v632 = vmlaq_f32(vmlaq_f32(v626, v630, v236[1]), v239[3], v236[5]);
            v239[2] = v629;
            v239[3] = v630;
            v238[2] = v631;
            v238[3] = v632;
            float32x4_t v633 = v238[4];
            float32x4_t v634 = v238[5];
            float32x4_t v635 = vmlaq_f32(vmlaq_f32(v624, v633, v236[2]), v239[4], v236[6]);
            float32x4_t v636 = vmlaq_f32(vmlaq_f32(v626, v634, v236[3]), v239[5], v236[7]);
            v239[4] = v633;
            v239[5] = v634;
            v238[4] = v635;
            v238[5] = v636;
            v620 += a8;
            --v621;
          }
          while (v621);
        }
        goto LABEL_172;
      }
    }
    *((_DWORD *)this + 18) = v233;
    *((_DWORD *)this + 22) = v235;
    goto LABEL_156;
  }
  if (*((unsigned char *)this + 92))
  {
    int v17 = *((_DWORD *)this + 15);
    int v19 = *((_DWORD *)this + 17);
    unsigned int v18 = *((_DWORD *)this + 18);
    int v20 = *((_DWORD *)this + 22);
    uint64_t v21 = *((void *)this + 2);
    unint64_t v22 = *(float64x2_t **)(v21 + 16);
    uint64_t v23 = *(void *)(v21 + 40);
    int v24 = (float64x2_t *)*((void *)this + 20);
    int v25 = (float64x2_t *)*((void *)this + 23);
    int v26 = *((_DWORD *)this + 13);
    if (*((_DWORD *)this + 14) == 8)
    {
      if (a7 < 1)
      {
        int v28 = 0;
      }
      else
      {
        int v27 = 0;
        int v28 = 0;
        do
        {
          if (v20 < 1)
          {
            float64x2_t v54 = v24[6];
            float64x2_t v53 = v24[7];
            float64x2_t v52 = v24[4];
            float64x2_t v51 = v24[5];
          }
          else
          {
            uint64_t v29 = 0;
            int v30 = v20;
            do
            {
              float64x2_t v31 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2[v29]), 0);
              float64x2_t v32 = *v24;
              float64x2_t v33 = v24[1];
              float64x2_t v34 = v24[2];
              float64x2_t v35 = v24[3];
              float64x2_t v36 = vmlaq_f64(v31, v35, v22[3]);
              float64x2_t v37 = vmlaq_f64(v31, v34, v22[2]);
              float64x2_t v38 = vmlaq_f64(v31, v33, v22[1]);
              float64x2_t v39 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a3[v29]), 0);
              float64x2_t v40 = vmlaq_f64(vmlaq_f64(v31, *v24, *v22), *v25, v22[4]);
              float64x2_t v41 = vmlaq_f64(v38, v25[1], v22[5]);
              float64x2_t v42 = vmlaq_f64(v37, v25[2], v22[6]);
              float64x2_t v43 = vmlaq_f64(v36, v25[3], v22[7]);
              CFTypeRef v25[2] = v34;
              void v25[3] = v35;
              *int v25 = v32;
              v25[1] = v33;
              v24[2] = v42;
              v24[3] = v43;
              *int v24 = v40;
              v24[1] = v41;
              float64x2_t v45 = v24[4];
              float64x2_t v44 = v24[5];
              float64x2_t v47 = v24[6];
              float64x2_t v46 = v24[7];
              float64x2_t v48 = vmlaq_f64(v39, v47, v22[2]);
              float64x2_t v49 = vmlaq_f64(v39, v46, v22[3]);
              float64x2_t v50 = vmlaq_f64(v39, v45, *v22);
              float64x2_t v51 = vmlaq_f64(vmlaq_f64(v39, v44, v22[1]), v25[5], v22[5]);
              float64x2_t v52 = vmlaq_f64(v50, v25[4], v22[4]);
              float64x2_t v53 = vmlaq_f64(v49, v25[7], v22[7]);
              float64x2_t v54 = vmlaq_f64(v48, v25[6], v22[6]);
              void v25[4] = v45;
              void v25[5] = v44;
              v25[6] = v47;
              void v25[7] = v46;
              void v24[6] = v54;
              v24[7] = v53;
              unsigned char v24[4] = v52;
              v24[5] = v51;
              v29 += a8;
              --v30;
            }
            while (v30);
            a2 = (const float *)((char *)a2 + v29 * 4);
            a3 = (const float *)((char *)a3 + v29 * 4);
          }
          v28 += v20;
          int v55 = (float64x2_t *)(v23 + ((uint64_t)(int)(2 * v18) << 6));
          float64x2_t v56 = v55[1];
          float64x2_t v58 = v55[2];
          float64x2_t v57 = v55[3];
          float64x2_t v59 = v55[6];
          float64x2_t v60 = v55[7];
          float64x2_t v61 = v55[4];
          float64x2_t v62 = v55[5];
          float64x2_t v63 = vmlaq_f64(vmulq_f64(v59, v25[6]), v54, v58);
          float64x2_t v64 = vmlaq_f64(vmulq_f64(v61, v25[4]), v52, *v55);
          float64x2_t v65 = vmlaq_f64(vmulq_f64(v60, v25[7]), v53, v57);
          float64x2_t v66 = vmlaq_f64(vmulq_f64(v62, v25[5]), v51, v56);
          float v67 = vaddvq_f64(vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v61, *v25), *v24, *v55), vmlaq_f64(vmulq_f64(v59, v25[2]), v24[2], v58)), vaddq_f64(vmlaq_f64(vmulq_f64(v62, v25[1]), v24[1], v56), vmlaq_f64(vmulq_f64(v60, v25[3]), v24[3], v57))));
          *a4 = v67;
          float v68 = vaddvq_f64(vaddq_f64(vaddq_f64(v64, v63), vaddq_f64(v66, v65)));
          *a5 = v68;
          a4 += a9;
          a5 += a9;
          int v69 = v18 + v19;
          if (v69 < v26) {
            int v20 = v17;
          }
          else {
            int v20 = v17 + 1;
          }
          if (v69 < v26) {
            int v70 = 0;
          }
          else {
            int v70 = v26;
          }
          unsigned int v18 = v69 - v70;
          ++v27;
        }
        while (v27 != a7);
      }
      int v408 = a6 - v28;
      if (a6 <= v28) {
        goto LABEL_155;
      }
      if (v20 < v408) {
        int v408 = v20;
      }
      if (v408 >= 1)
      {
        uint64_t v409 = 0;
        int v410 = v408;
        do
        {
          float64x2_t v411 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2[v409]), 0);
          float64x2_t v412 = *v24;
          float64x2_t v413 = v24[1];
          float64x2_t v414 = v24[2];
          float64x2_t v415 = v24[3];
          float64x2_t v416 = vmlaq_f64(v411, v415, v22[3]);
          float64x2_t v417 = vmlaq_f64(v411, v414, v22[2]);
          float64x2_t v418 = vmlaq_f64(v411, v413, v22[1]);
          float64x2_t v419 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a3[v409]), 0);
          float64x2_t v420 = vmlaq_f64(vmlaq_f64(v411, *v24, *v22), *v25, v22[4]);
          float64x2_t v421 = vmlaq_f64(v418, v25[1], v22[5]);
          float64x2_t v422 = vmlaq_f64(v417, v25[2], v22[6]);
          float64x2_t v423 = vmlaq_f64(v416, v25[3], v22[7]);
          CFTypeRef v25[2] = v414;
          void v25[3] = v415;
          *int v25 = v412;
          v25[1] = v413;
          v24[2] = v422;
          v24[3] = v423;
          *int v24 = v420;
          v24[1] = v421;
          float64x2_t v425 = v24[4];
          float64x2_t v424 = v24[5];
          float64x2_t v427 = v24[6];
          float64x2_t v426 = v24[7];
          float64x2_t v428 = vmlaq_f64(v419, v427, v22[2]);
          float64x2_t v429 = vmlaq_f64(v419, v426, v22[3]);
          float64x2_t v430 = vmlaq_f64(v419, v425, *v22);
          float64x2_t v431 = vmlaq_f64(vmlaq_f64(v419, v424, v22[1]), v25[5], v22[5]);
          float64x2_t v432 = vmlaq_f64(v430, v25[4], v22[4]);
          float64x2_t v433 = vmlaq_f64(v429, v25[7], v22[7]);
          float64x2_t v434 = vmlaq_f64(v428, v25[6], v22[6]);
          void v25[4] = v425;
          void v25[5] = v424;
          v25[6] = v427;
          void v25[7] = v426;
          void v24[6] = v434;
          v24[7] = v433;
          unsigned char v24[4] = v432;
          v24[5] = v431;
          v409 += a8;
          --v410;
        }
        while (v410);
      }
    }
    else
    {
      if (a7 < 1)
      {
        int v177 = 0;
      }
      else
      {
        int v176 = 0;
        int v177 = 0;
        do
        {
          if (v20 < 1)
          {
            float64x2_t v207 = v24[10];
            float64x2_t v206 = v24[11];
            float64x2_t v205 = v24[8];
            float64x2_t v204 = v24[9];
          }
          else
          {
            uint64_t v178 = 0;
            int v179 = v20;
            do
            {
              float64x2_t v180 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2[v178]), 0);
              float64x2_t v181 = *v24;
              float64x2_t v182 = v24[1];
              float64x2_t v183 = v24[2];
              float64x2_t v184 = v24[3];
              float64x2_t v185 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a3[v178]), 0);
              float64x2_t v186 = vmlaq_f64(vmlaq_f64(v180, *v24, *v22), *v25, v22[8]);
              float64x2_t v187 = vmlaq_f64(vmlaq_f64(v180, v182, v22[1]), v25[1], v22[9]);
              float64x2_t v188 = vmlaq_f64(vmlaq_f64(v180, v183, v22[2]), v25[2], v22[10]);
              float64x2_t v189 = vmlaq_f64(vmlaq_f64(v180, v184, v22[3]), v25[3], v22[11]);
              CFTypeRef v25[2] = v183;
              void v25[3] = v184;
              *int v25 = v181;
              v25[1] = v182;
              v24[2] = v188;
              v24[3] = v189;
              *int v24 = v186;
              v24[1] = v187;
              float64x2_t v190 = v24[4];
              float64x2_t v191 = v24[5];
              float64x2_t v192 = v24[6];
              float64x2_t v193 = v24[7];
              float64x2_t v194 = vmlaq_f64(vmlaq_f64(v185, v190, *v22), v25[4], v22[8]);
              float64x2_t v195 = vmlaq_f64(vmlaq_f64(v185, v191, v22[1]), v25[5], v22[9]);
              float64x2_t v196 = vmlaq_f64(vmlaq_f64(v185, v192, v22[2]), v25[6], v22[10]);
              float64x2_t v197 = vmlaq_f64(vmlaq_f64(v185, v193, v22[3]), v25[7], v22[11]);
              void v25[4] = v190;
              void v25[5] = v191;
              v25[6] = v192;
              void v25[7] = v193;
              void v24[6] = v196;
              v24[7] = v197;
              unsigned char v24[4] = v194;
              v24[5] = v195;
              float64x2_t v199 = v24[8];
              float64x2_t v198 = v24[9];
              float64x2_t v201 = v24[10];
              float64x2_t v200 = v24[11];
              float64x2_t v202 = vmlaq_f64(v185, v201, v22[6]);
              float64x2_t v203 = vmlaq_f64(v180, v199, v22[4]);
              float64x2_t v204 = vmlaq_f64(vmlaq_f64(v180, v198, v22[5]), v25[9], v22[13]);
              float64x2_t v205 = vmlaq_f64(v203, v25[8], v22[12]);
              float64x2_t v206 = vmlaq_f64(vmlaq_f64(v185, v200, v22[7]), v25[11], v22[15]);
              float64x2_t v207 = vmlaq_f64(v202, v25[10], v22[14]);
              unsigned char v25[8] = v199;
              v25[9] = v198;
              v25[10] = v201;
              v25[11] = v200;
              v24[10] = v207;
              v24[11] = v206;
              unsigned char v24[8] = v205;
              v24[9] = v204;
              v178 += a8;
              --v179;
            }
            while (v179);
            a2 = (const float *)((char *)a2 + v178 * 4);
            a3 = (const float *)((char *)a3 + v178 * 4);
          }
          v177 += v20;
          float64x2_t v208 = (float64x2_t *)(v23 + ((uint64_t)(int)(4 * v18) << 6));
          float64x2_t v209 = v208[1];
          float64x2_t v211 = v208[2];
          float64x2_t v210 = v208[3];
          float64x2_t v212 = v208[10];
          float64x2_t v213 = v208[11];
          float64x2_t v214 = v208[8];
          float64x2_t v215 = v208[9];
          float64x2_t v216 = vmlaq_f64(vmulq_f64(v212, v25[2]), v24[2], v211);
          float64x2_t v217 = vmlaq_f64(vmulq_f64(v214, *v25), *v24, *v208);
          float64x2_t v218 = vmlaq_f64(vmulq_f64(v213, v25[3]), v24[3], v210);
          float64x2_t v219 = vmlaq_f64(vmulq_f64(v215, v25[1]), v24[1], v209);
          float64x2_t v220 = vmlaq_f64(vmulq_f64(v212, v25[6]), v24[6], v211);
          float64x2_t v221 = vmlaq_f64(vmulq_f64(v214, v25[4]), v24[4], *v208);
          float64x2_t v222 = vmlaq_f64(vmulq_f64(v213, v25[7]), v24[7], v210);
          float64x2_t v223 = vmlaq_f64(vmulq_f64(v215, v25[5]), v24[5], v209);
          float64x2_t v224 = vmlaq_f64(vmulq_f64(v208[15], v25[11]), v206, v208[7]);
          float64x2_t v225 = vmlaq_f64(vmulq_f64(v208[14], v25[10]), v207, v208[6]);
          float64x2_t v226 = vmlaq_f64(vmulq_f64(v208[13], v25[9]), v204, v208[5]);
          int64x2_t v227 = (int64x2_t)vaddq_f64(vaddq_f64(v217, v216), vaddq_f64(v219, v218));
          int64x2_t v228 = (int64x2_t)vaddq_f64(vmlaq_f64(vmulq_f64(v208[12], v25[8]), v205, v208[4]), v226);
          *(float *)v227.i32 = vaddvq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v227, v228), (float64x2_t)vzip2q_s64(v227, v228)));
          *a4 = *(float *)v227.i32;
          int64x2_t v229 = (int64x2_t)vaddq_f64(vaddq_f64(v221, v220), vaddq_f64(v223, v222));
          int64x2_t v230 = (int64x2_t)vaddq_f64(v225, v224);
          *(float *)v229.i32 = vaddvq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v229, v230), (float64x2_t)vzip2q_s64(v229, v230)));
          *a5 = *(float *)v229.i32;
          a4 += a9;
          a5 += a9;
          int v231 = v18 + v19;
          if (v231 < v26) {
            int v20 = v17;
          }
          else {
            int v20 = v17 + 1;
          }
          if (v231 < v26) {
            int v232 = 0;
          }
          else {
            int v232 = v26;
          }
          unsigned int v18 = v231 - v232;
          ++v176;
        }
        while (v176 != a7);
      }
      int v408 = a6 - v177;
      if (a6 <= v177) {
        goto LABEL_155;
      }
      if (v20 < v408) {
        int v408 = v20;
      }
      if (v408 >= 1)
      {
        uint64_t v435 = 0;
        int v436 = v408;
        do
        {
          float64x2_t v437 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2[v435]), 0);
          float64x2_t v438 = *v24;
          float64x2_t v439 = v24[1];
          float64x2_t v440 = v24[2];
          float64x2_t v441 = v24[3];
          float64x2_t v442 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a3[v435]), 0);
          float64x2_t v443 = vmlaq_f64(vmlaq_f64(v437, *v24, *v22), *v25, v22[8]);
          float64x2_t v444 = vmlaq_f64(vmlaq_f64(v437, v439, v22[1]), v25[1], v22[9]);
          float64x2_t v445 = vmlaq_f64(vmlaq_f64(v437, v440, v22[2]), v25[2], v22[10]);
          float64x2_t v446 = vmlaq_f64(vmlaq_f64(v437, v441, v22[3]), v25[3], v22[11]);
          CFTypeRef v25[2] = v440;
          void v25[3] = v441;
          *int v25 = v438;
          v25[1] = v439;
          v24[2] = v445;
          v24[3] = v446;
          *int v24 = v443;
          v24[1] = v444;
          float64x2_t v447 = v24[4];
          float64x2_t v448 = v24[5];
          float64x2_t v449 = v24[6];
          float64x2_t v450 = v24[7];
          float64x2_t v451 = vmlaq_f64(vmlaq_f64(v442, v447, *v22), v25[4], v22[8]);
          float64x2_t v452 = vmlaq_f64(vmlaq_f64(v442, v448, v22[1]), v25[5], v22[9]);
          float64x2_t v453 = vmlaq_f64(vmlaq_f64(v442, v449, v22[2]), v25[6], v22[10]);
          float64x2_t v454 = vmlaq_f64(vmlaq_f64(v442, v450, v22[3]), v25[7], v22[11]);
          void v25[4] = v447;
          void v25[5] = v448;
          v25[6] = v449;
          void v25[7] = v450;
          void v24[6] = v453;
          v24[7] = v454;
          unsigned char v24[4] = v451;
          v24[5] = v452;
          float64x2_t v456 = v24[8];
          float64x2_t v455 = v24[9];
          float64x2_t v458 = v24[10];
          float64x2_t v457 = v24[11];
          float64x2_t v459 = vmlaq_f64(v442, v458, v22[6]);
          float64x2_t v460 = vmlaq_f64(v437, v456, v22[4]);
          float64x2_t v461 = vmlaq_f64(vmlaq_f64(v437, v455, v22[5]), v25[9], v22[13]);
          float64x2_t v462 = vmlaq_f64(v460, v25[8], v22[12]);
          float64x2_t v463 = vmlaq_f64(vmlaq_f64(v442, v457, v22[7]), v25[11], v22[15]);
          float64x2_t v464 = vmlaq_f64(v459, v25[10], v22[14]);
          unsigned char v25[8] = v456;
          v25[9] = v455;
          v25[10] = v458;
          v25[11] = v457;
          v24[10] = v464;
          v24[11] = v463;
          unsigned char v24[8] = v462;
          v24[9] = v461;
          v435 += a8;
          --v436;
        }
        while (v436);
      }
    }
  }
  else
  {
    int v105 = *((_DWORD *)this + 17);
    unsigned int v18 = *((_DWORD *)this + 18);
    int v20 = *((_DWORD *)this + 22);
    uint64_t v106 = *((void *)this + 2);
    float64x2_t v107 = *(float64x2_t **)(v106 + 16);
    uint64_t v108 = *(void *)(v106 + 40);
    float64x2_t v109 = (float64x2_t *)*((void *)this + 20);
    float64x2_t v110 = (float64x2_t *)*((void *)this + 23);
    int v111 = *((_DWORD *)this + 15);
    if (*((_DWORD *)this + 14) == 8)
    {
      if (a7 < 1)
      {
        int v112 = 0;
      }
      else
      {
        int v112 = 0;
        int v113 = 0;
        do
        {
          if (v20 < 1)
          {
            float64x2_t v139 = v109[6];
            float64x2_t v138 = v109[7];
            float64x2_t v137 = v109[4];
            float64x2_t v136 = v109[5];
          }
          else
          {
            uint64_t v114 = 0;
            int v115 = v20;
            do
            {
              float64x2_t v116 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2[v114]), 0);
              float64x2_t v117 = *v109;
              float64x2_t v118 = v109[1];
              float64x2_t v119 = v109[2];
              float64x2_t v120 = v109[3];
              float64x2_t v121 = vmlaq_f64(v116, v120, v107[3]);
              float64x2_t v122 = vmlaq_f64(v116, v119, v107[2]);
              float64x2_t v123 = vmlaq_f64(v116, v118, v107[1]);
              float64x2_t v124 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a3[v114]), 0);
              float64x2_t v125 = vmlaq_f64(vmlaq_f64(v116, *v109, *v107), *v110, v107[4]);
              float64x2_t v126 = vmlaq_f64(v123, v110[1], v107[5]);
              float64x2_t v127 = vmlaq_f64(v122, v110[2], v107[6]);
              float64x2_t v128 = vmlaq_f64(v121, v110[3], v107[7]);
              v110[2] = v119;
              v110[3] = v120;
              float64x2_t *v110 = v117;
              v110[1] = v118;
              v109[2] = v127;
              v109[3] = v128;
              *float64x2_t v109 = v125;
              v109[1] = v126;
              float64x2_t v130 = v109[4];
              float64x2_t v129 = v109[5];
              float64x2_t v132 = v109[6];
              float64x2_t v131 = v109[7];
              float64x2_t v133 = vmlaq_f64(v124, v132, v107[2]);
              float64x2_t v134 = vmlaq_f64(v124, v131, v107[3]);
              float64x2_t v135 = vmlaq_f64(v124, v130, *v107);
              float64x2_t v136 = vmlaq_f64(vmlaq_f64(v124, v129, v107[1]), v110[5], v107[5]);
              float64x2_t v137 = vmlaq_f64(v135, v110[4], v107[4]);
              float64x2_t v138 = vmlaq_f64(v134, v110[7], v107[7]);
              float64x2_t v139 = vmlaq_f64(v133, v110[6], v107[6]);
              v110[4] = v130;
              v110[5] = v129;
              v110[6] = v132;
              v110[7] = v131;
              v109[6] = v139;
              v109[7] = v138;
              v109[4] = v137;
              v109[5] = v136;
              v114 += a8;
              --v115;
            }
            while (v115);
            a2 = (const float *)((char *)a2 + v114 * 4);
            a3 = (const float *)((char *)a3 + v114 * 4);
          }
          v112 += v20;
          float v140 = *((double *)this + 12) * (double)(v18 & 0x7FFFFF);
          uint64_t v141 = (v18 >> 22) & 0x1FE;
          int v142 = (float64x2_t *)(v108 + (v141 << 6));
          int v143 = (float64x2_t *)(v108 + ((unint64_t)(v141 + 2) << 6));
          float64x2_t v144 = v142[1];
          float64x2_t v146 = v142[2];
          float64x2_t v145 = v142[3];
          float64x2_t v147 = v109[1];
          float64x2_t v149 = v109[2];
          float64x2_t v148 = v109[3];
          float64x2_t v150 = v142[6];
          float64x2_t v151 = v142[7];
          float64x2_t v152 = v142[4];
          float64x2_t v153 = v142[5];
          float64x2_t v154 = v110[2];
          float64x2_t v155 = v110[3];
          float64x2_t v156 = v110[1];
          float64x2_t v157 = vmlaq_f64(vmulq_f64(v153, v156), v147, v144);
          float64x2_t v158 = v110[6];
          float64x2_t v159 = v110[7];
          float64x2_t v160 = v110[4];
          float64x2_t v161 = v110[5];
          float64x2_t v162 = vmlaq_f64(vmulq_f64(v153, v161), v136, v144);
          int64x2_t v163 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v152, *v110), *v109, *v142), vmlaq_f64(vmulq_f64(v150, v154), v149, v146)), vaddq_f64(v157, vmlaq_f64(vmulq_f64(v151, v155), v148, v145)));
          int64x2_t v164 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v152, v160), v137, *v142), vmlaq_f64(vmulq_f64(v150, v158), v139, v146)), vaddq_f64(v162, vmlaq_f64(vmulq_f64(v151, v159), v138, v145)));
          float64x2_t v165 = v143[1];
          float64x2_t v167 = v143[2];
          float64x2_t v166 = v143[3];
          float64x2_t v168 = v143[6];
          float64x2_t v169 = v143[7];
          float64x2_t v170 = v143[4];
          float64x2_t v171 = v143[5];
          float64x2_t v172 = vmlaq_f64(vmulq_f64(v156, v171), v147, v165);
          float64x2_t v173 = vmlaq_f64(vmulq_f64(v161, v171), v136, v165);
          int64x2_t v174 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(*v110, v170), *v109, *v143), vmlaq_f64(vmulq_f64(v154, v168), v149, v167)), vaddq_f64(v172, vmlaq_f64(vmulq_f64(v155, v169), v148, v166)));
          *(float32x2_t *)v174.i8 = vcvt_f32_f64(vaddq_f64((float64x2_t)vzip1q_s64(v174, v163), (float64x2_t)vzip2q_s64(v174, v163)));
          int64x2_t v175 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v160, v170), v137, *v143), vmlaq_f64(vmulq_f64(v158, v168), v139, v167)), vaddq_f64(v173, vmlaq_f64(vmulq_f64(v159, v169), v138, v166)));
          *(float32x2_t *)v175.i8 = vcvt_f32_f64(vaddq_f64((float64x2_t)vzip1q_s64(v175, v164), (float64x2_t)vzip2q_s64(v175, v164)));
          *a4 = *(float *)&v174.i32[1] + (float)(v140 * (float)(*(float *)v174.i32 - *(float *)&v174.i32[1]));
          *a5 = *(float *)&v175.i32[1] + (float)(v140 * (float)(*(float *)v175.i32 - *(float *)&v175.i32[1]));
          a4 += a9;
          a5 += a9;
          LODWORD(v143) = v18 + v105;
          unsigned int v18 = (v18 + v105) & 0x7FFFFFFF;
          int v20 = v111 + (v143 >> 31);
          ++v113;
        }
        while (v113 != a7);
      }
      int v408 = a6 - v112;
      if (a6 <= v112) {
        goto LABEL_155;
      }
      if (v20 < v408) {
        int v408 = v20;
      }
      if (v408 >= 1)
      {
        uint64_t v530 = 0;
        int v531 = v408;
        do
        {
          float64x2_t v532 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2[v530]), 0);
          float64x2_t v533 = *v109;
          float64x2_t v534 = v109[1];
          float64x2_t v535 = v109[2];
          float64x2_t v536 = v109[3];
          float64x2_t v537 = vmlaq_f64(v532, v536, v107[3]);
          float64x2_t v538 = vmlaq_f64(v532, v535, v107[2]);
          float64x2_t v539 = vmlaq_f64(v532, v534, v107[1]);
          float64x2_t v540 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a3[v530]), 0);
          float64x2_t v541 = vmlaq_f64(vmlaq_f64(v532, *v109, *v107), *v110, v107[4]);
          float64x2_t v542 = vmlaq_f64(v539, v110[1], v107[5]);
          float64x2_t v543 = vmlaq_f64(v538, v110[2], v107[6]);
          float64x2_t v544 = vmlaq_f64(v537, v110[3], v107[7]);
          v110[2] = v535;
          v110[3] = v536;
          float64x2_t *v110 = v533;
          v110[1] = v534;
          v109[2] = v543;
          v109[3] = v544;
          *float64x2_t v109 = v541;
          v109[1] = v542;
          float64x2_t v546 = v109[4];
          float64x2_t v545 = v109[5];
          float64x2_t v548 = v109[6];
          float64x2_t v547 = v109[7];
          float64x2_t v549 = vmlaq_f64(v540, v548, v107[2]);
          float64x2_t v550 = vmlaq_f64(v540, v547, v107[3]);
          float64x2_t v551 = vmlaq_f64(v540, v546, *v107);
          float64x2_t v552 = vmlaq_f64(vmlaq_f64(v540, v545, v107[1]), v110[5], v107[5]);
          float64x2_t v553 = vmlaq_f64(v551, v110[4], v107[4]);
          float64x2_t v554 = vmlaq_f64(v550, v110[7], v107[7]);
          float64x2_t v555 = vmlaq_f64(v549, v110[6], v107[6]);
          v110[4] = v546;
          v110[5] = v545;
          v110[6] = v548;
          v110[7] = v547;
          v109[6] = v555;
          v109[7] = v554;
          v109[4] = v553;
          v109[5] = v552;
          v530 += a8;
          --v531;
        }
        while (v531);
      }
    }
    else
    {
      if (a7 < 1)
      {
        int v312 = 0;
      }
      else
      {
        int v311 = 0;
        int v312 = 0;
        do
        {
          if (v20 < 1)
          {
            float64x2_t v342 = v109[10];
            float64x2_t v341 = v109[11];
            float64x2_t v340 = v109[8];
            float64x2_t v339 = v109[9];
          }
          else
          {
            uint64_t v313 = 0;
            int v314 = v20;
            do
            {
              float64x2_t v315 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2[v313]), 0);
              float64x2_t v316 = *v109;
              float64x2_t v317 = v109[1];
              float64x2_t v318 = v109[2];
              float64x2_t v319 = v109[3];
              float64x2_t v320 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a3[v313]), 0);
              float64x2_t v321 = vmlaq_f64(vmlaq_f64(v315, *v109, *v107), *v110, v107[8]);
              float64x2_t v322 = vmlaq_f64(vmlaq_f64(v315, v317, v107[1]), v110[1], v107[9]);
              float64x2_t v323 = vmlaq_f64(vmlaq_f64(v315, v318, v107[2]), v110[2], v107[10]);
              float64x2_t v324 = vmlaq_f64(vmlaq_f64(v315, v319, v107[3]), v110[3], v107[11]);
              v110[2] = v318;
              v110[3] = v319;
              float64x2_t *v110 = v316;
              v110[1] = v317;
              v109[2] = v323;
              v109[3] = v324;
              *float64x2_t v109 = v321;
              v109[1] = v322;
              float64x2_t v325 = v109[4];
              float64x2_t v326 = v109[5];
              float64x2_t v327 = v109[6];
              float64x2_t v328 = v109[7];
              float64x2_t v329 = vmlaq_f64(vmlaq_f64(v320, v325, *v107), v110[4], v107[8]);
              float64x2_t v330 = vmlaq_f64(vmlaq_f64(v320, v326, v107[1]), v110[5], v107[9]);
              float64x2_t v331 = vmlaq_f64(vmlaq_f64(v320, v327, v107[2]), v110[6], v107[10]);
              float64x2_t v332 = vmlaq_f64(vmlaq_f64(v320, v328, v107[3]), v110[7], v107[11]);
              v110[4] = v325;
              v110[5] = v326;
              v110[6] = v327;
              v110[7] = v328;
              v109[6] = v331;
              v109[7] = v332;
              v109[4] = v329;
              v109[5] = v330;
              float64x2_t v334 = v109[8];
              float64x2_t v333 = v109[9];
              float64x2_t v336 = v109[10];
              float64x2_t v335 = v109[11];
              float64x2_t v337 = vmlaq_f64(v320, v336, v107[6]);
              float64x2_t v338 = vmlaq_f64(v315, v334, v107[4]);
              float64x2_t v339 = vmlaq_f64(vmlaq_f64(v315, v333, v107[5]), v110[9], v107[13]);
              float64x2_t v340 = vmlaq_f64(v338, v110[8], v107[12]);
              float64x2_t v341 = vmlaq_f64(vmlaq_f64(v320, v335, v107[7]), v110[11], v107[15]);
              float64x2_t v342 = vmlaq_f64(v337, v110[10], v107[14]);
              v110[8] = v334;
              v110[9] = v333;
              v110[10] = v336;
              v110[11] = v335;
              v109[10] = v342;
              v109[11] = v341;
              v109[8] = v340;
              v109[9] = v339;
              v313 += a8;
              --v314;
            }
            while (v314);
            a2 = (const float *)((char *)a2 + v313 * 4);
            a3 = (const float *)((char *)a3 + v313 * 4);
          }
          uint64_t v343 = (v18 >> 21) & 0x3FC;
          unint64_t v344 = (float64x2_t *)(v108 + (v343 << 6));
          v345 = (float64x2_t *)(v108 + ((unint64_t)(v343 + 4) << 6));
          float64x2_t v346 = v344[1];
          float64x2_t v348 = v344[2];
          float64x2_t v347 = v344[3];
          float64x2_t v639 = v109[1];
          float64x2_t v350 = v109[2];
          float64x2_t v349 = v109[3];
          float64x2_t v352 = v344[10];
          float64x2_t v351 = v344[11];
          float64x2_t v354 = v344[8];
          float64x2_t v353 = v344[9];
          float64x2_t v356 = v110[2];
          float64x2_t v355 = v110[3];
          float64x2_t v357 = v110[1];
          float64x2_t v358 = vmlaq_f64(vmulq_f64(v352, v356), v350, v348);
          float64x2_t v359 = vmlaq_f64(vmulq_f64(v354, *v110), *v109, *v344);
          float64x2_t v360 = vmlaq_f64(vmulq_f64(v351, v355), v349, v347);
          float64x2_t v361 = vmlaq_f64(vmulq_f64(v353, v357), v639, v346);
          float64x2_t v362 = v109[4];
          float64x2_t v363 = v109[5];
          float64x2_t v364 = v109[6];
          float64x2_t v365 = v109[7];
          float64x2_t v366 = v110[6];
          float64x2_t v367 = v110[7];
          float64x2_t v368 = v110[4];
          float64x2_t v369 = v110[5];
          float64x2_t v370 = vmlaq_f64(vmulq_f64(v352, v366), v364, v348);
          float64x2_t v371 = vmlaq_f64(vmulq_f64(v354, v368), v362, *v344);
          float64x2_t v372 = vmlaq_f64(vmulq_f64(v351, v367), v365, v347);
          float64x2_t v373 = vmlaq_f64(vmulq_f64(v353, v369), v363, v346);
          float64x2_t v374 = v345[2];
          float64x2_t v375 = v345[10];
          float64x2_t v376 = v345[11];
          float64x2_t v377 = vmlaq_f64(vmulq_f64(v356, v375), v350, v374);
          float64x2_t v379 = v345[8];
          float64x2_t v378 = v345[9];
          float64x2_t v380 = vmlaq_f64(vmulq_f64(*v110, v379), *v109, *v345);
          float64x2_t v381 = vmulq_f64(v368, v379);
          float64x2_t v382 = vmlaq_f64(vmulq_f64(v366, v375), v364, v374);
          float64x2_t v383 = vmlaq_f64(v381, v362, *v345);
          float64x2_t v385 = v110[10];
          float64x2_t v384 = v110[11];
          float64x2_t v386 = vmlaq_f64(vmulq_f64(v344[15], v384), v341, v344[7]);
          float64x2_t v387 = vmlaq_f64(vmulq_f64(v344[14], v385), v342, v344[6]);
          float64x2_t v388 = v345[3];
          float64x2_t v389 = vmlaq_f64(vmulq_f64(v355, v376), v349, v388);
          float64x2_t v390 = v345[1];
          float64x2_t v391 = vmlaq_f64(vmulq_f64(v357, v378), v639, v390);
          float64x2_t v392 = vmlaq_f64(vmulq_f64(v369, v378), v363, v390);
          float64x2_t v393 = vmlaq_f64(vmulq_f64(v384, v345[15]), v341, v345[7]);
          float64x2_t v395 = v110[8];
          float64x2_t v394 = v110[9];
          float64x2_t v396 = vmlaq_f64(vmulq_f64(v385, v345[14]), v342, v345[6]);
          int64x2_t v397 = (int64x2_t)vaddq_f64(vaddq_f64(v359, v358), vaddq_f64(v361, v360));
          int64x2_t v398 = (int64x2_t)vaddq_f64(vmlaq_f64(vmulq_f64(v344[12], v395), v340, v344[4]), vmlaq_f64(vmulq_f64(v344[13], v394), v339, v344[5]));
          int64x2_t v399 = (int64x2_t)vaddq_f64(vaddq_f64(v371, v370), vaddq_f64(v373, v372));
          int64x2_t v400 = (int64x2_t)vaddq_f64(v387, v386);
          int64x2_t v401 = (int64x2_t)vaddq_f64(vaddq_f64(v380, v377), vaddq_f64(v391, v389));
          int64x2_t v402 = (int64x2_t)vaddq_f64(vmlaq_f64(vmulq_f64(v395, v345[12]), v340, v345[4]), vmlaq_f64(vmulq_f64(v394, v345[13]), v339, v345[5]));
          float64x2_t v403 = vaddq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v401, v397), (float64x2_t)vzip2q_s64(v401, v397)), vaddq_f64((float64x2_t)vzip1q_s64(v402, v398), (float64x2_t)vzip2q_s64(v402, v398)));
          int64x2_t v404 = (int64x2_t)vaddq_f64(vaddq_f64(v383, v382), vaddq_f64(v392, vmlaq_f64(vmulq_f64(v367, v376), v365, v388)));
          int64x2_t v405 = (int64x2_t)vaddq_f64(v396, v393);
          float v406 = *((double *)this + 12) * (double)(v18 & 0x7FFFFF);
          *(float32x2_t *)&v403.f64[0] = vcvt_f32_f64(v403);
          *(float32x2_t *)v404.i8 = vcvt_f32_f64(vaddq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v404, v399), (float64x2_t)vzip2q_s64(v404, v399)), vaddq_f64((float64x2_t)vzip1q_s64(v405, v400), (float64x2_t)vzip2q_s64(v405, v400))));
          *a4 = *((float *)v403.f64 + 1) + (float)(v406 * (float)(*(float *)v403.f64 - *((float *)v403.f64 + 1)));
          *a5 = *(float *)&v404.i32[1] + (float)(v406 * (float)(*(float *)v404.i32 - *(float *)&v404.i32[1]));
          v312 += v20;
          a4 += a9;
          a5 += a9;
          unsigned int v407 = v18 + v105;
          unsigned int v18 = (v18 + v105) & 0x7FFFFFFF;
          int v20 = v111 + (v407 >> 31);
          ++v311;
        }
        while (v311 != a7);
      }
      int v408 = a6 - v312;
      if (a6 <= v312) {
        goto LABEL_155;
      }
      if (v20 < v408) {
        int v408 = v20;
      }
      if (v408 >= 1)
      {
        uint64_t v573 = 0;
        int v574 = v408;
        do
        {
          float64x2_t v575 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2[v573]), 0);
          float64x2_t v576 = *v109;
          float64x2_t v577 = v109[1];
          float64x2_t v578 = v109[2];
          float64x2_t v579 = v109[3];
          float64x2_t v580 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a3[v573]), 0);
          float64x2_t v581 = vmlaq_f64(vmlaq_f64(v575, *v109, *v107), *v110, v107[8]);
          float64x2_t v582 = vmlaq_f64(vmlaq_f64(v575, v577, v107[1]), v110[1], v107[9]);
          float64x2_t v583 = vmlaq_f64(vmlaq_f64(v575, v578, v107[2]), v110[2], v107[10]);
          float64x2_t v584 = vmlaq_f64(vmlaq_f64(v575, v579, v107[3]), v110[3], v107[11]);
          v110[2] = v578;
          v110[3] = v579;
          float64x2_t *v110 = v576;
          v110[1] = v577;
          v109[2] = v583;
          v109[3] = v584;
          *float64x2_t v109 = v581;
          v109[1] = v582;
          float64x2_t v585 = v109[4];
          float64x2_t v586 = v109[5];
          float64x2_t v587 = v109[6];
          float64x2_t v588 = v109[7];
          float64x2_t v589 = vmlaq_f64(vmlaq_f64(v580, v585, *v107), v110[4], v107[8]);
          float64x2_t v590 = vmlaq_f64(vmlaq_f64(v580, v586, v107[1]), v110[5], v107[9]);
          float64x2_t v591 = vmlaq_f64(vmlaq_f64(v580, v587, v107[2]), v110[6], v107[10]);
          float64x2_t v592 = vmlaq_f64(vmlaq_f64(v580, v588, v107[3]), v110[7], v107[11]);
          v110[4] = v585;
          v110[5] = v586;
          v110[6] = v587;
          v110[7] = v588;
          v109[6] = v591;
          v109[7] = v592;
          v109[4] = v589;
          v109[5] = v590;
          float64x2_t v594 = v109[8];
          float64x2_t v593 = v109[9];
          float64x2_t v596 = v109[10];
          float64x2_t v595 = v109[11];
          float64x2_t v597 = vmlaq_f64(v580, v596, v107[6]);
          float64x2_t v598 = vmlaq_f64(v575, v594, v107[4]);
          float64x2_t v599 = vmlaq_f64(vmlaq_f64(v575, v593, v107[5]), v110[9], v107[13]);
          float64x2_t v600 = vmlaq_f64(v598, v110[8], v107[12]);
          float64x2_t v601 = vmlaq_f64(vmlaq_f64(v580, v595, v107[7]), v110[11], v107[15]);
          float64x2_t v602 = vmlaq_f64(v597, v110[10], v107[14]);
          v110[8] = v594;
          v110[9] = v593;
          v110[10] = v596;
          v110[11] = v595;
          v109[10] = v602;
          v109[11] = v601;
          v109[8] = v600;
          v109[9] = v599;
          v573 += a8;
          --v574;
        }
        while (v574);
      }
    }
  }
LABEL_154:
  v20 -= v408;
LABEL_155:
  *((_DWORD *)this + 18) = v18;
  *((_DWORD *)this + 22) = v20;
LABEL_156:
  double result = NAN;
  *((void *)this + 32) = -1;
  *((_DWORD *)this + 66) = -1;
  return result;
}

void sub_1BAECB7A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  *(void *)(v1 + 256) = -1;
  *(_DWORD *)(v1 + 264) = -1;
  _Unwind_Resume(a1);
}

void HALS_IOContextDescription::~HALS_IOContextDescription(HALS_IOContextDescription *this)
{
  HALS_IOContextDescription::~HALS_IOContextDescription(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  const void *v6;
  void *v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void v11[5];
  void *v12;
  void v13[3];
  long long v14;
  void *v15;

  *(void *)this = &unk_1F1480938;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  void v11[2] = ___ZN25HALS_IOContextDescriptionD2Ev_block_invoke;
  v11[3] = &__block_descriptor_tmp_15470;
  _DWORD v11[4] = this;
  uint64_t v12 = v11;
  v13[0] = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<int({block_pointer})(HALS_IOEngineInfo &)>;
  v13[1] = &v12;
  unint64_t v3 = *((void *)this + 4);
  uint64_t v4 = *((void *)this + 5);
  int v5 = (char *)this + 32;
  unsigned int v15 = v13;
  *(void *)&uint64_t v14 = _ZN5caulk12function_refIFiRN15VisitableVectorINSt3__110unique_ptrI17HALS_IOEngineInfoNS2_14default_deleteIS4_EEEEE13ItemWithIndexEEE15functor_invokerIZN21HALS_IOEngineInfoList12engine_applyIJEEEiNS0_IFiRS4_EEEDpRKT_EUlSA_E_EEiRKNS_7details15erased_callableISB_EESA_;
  *((void *)&v14 + 1) = &v15;
  VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::apply<>(v3, v4, &v14);
  uint64_t v6 = (const void *)*((void *)this + 1);
  if (v6) {
    CFRelease(v6);
  }
  if (*((char *)this + 471) < 0) {
    operator delete(*((void **)this + 56));
  }
  if (*((unsigned char *)this + 424))
  {
    int v7 = (void *)*((void *)this + 50);
    if (v7)
    {
      *((void *)this + 51) = v7;
      operator delete(v7);
    }
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)this + 48));
  BOOL v8 = *((void *)this + 46);
  *((void *)this + 46) = 0;
  if (v8) {
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v8);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)this + 44));
  *(void *)&uint64_t v14 = (char *)this + 256;
  std::vector<HALS_IOContextDescription::HostedDSPDescription::ReferenceStreamRequest>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  HALB_IOBufferManager_Server::~HALB_IOBufferManager_Server((HALS_IOContextDescription *)((char *)this + 152));
  for (int i = 128; i != 80; i -= 24)
  {
    double v10 = *(void **)((char *)this + i);
    if (v10) {
      operator delete(v10);
    }
  }
  *(void *)&uint64_t v14 = (char *)this + 80;
  std::vector<HALS_IOStackDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  *(void *)&uint64_t v14 = (char *)this + 56;
  std::vector<HALS_IOStreamInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  *(void *)&uint64_t v14 = v5;
  std::vector<std::unique_ptr<HALS_IOEngineInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
}

uint64_t ___ZN25HALS_IOContextDescriptionD2Ev_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 8))
  {
    unint64_t v3 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(*(void *)(a1 + 32)
                                                                                                  + 440));
    if (v3) {
      BOOL v4 = *(unsigned char *)(a2 + 860) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        int v8 = 136315394;
        int v9 = "HALS_IOContextDescription.cpp";
        __int16 v10 = 1024;
        int v11 = 232;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContextDescription::~HALS_IOContextDescription: IOContextDescription has outlived owning IOContext", (uint8_t *)&v8, 0x12u);
      }
    }
    else
    {
      (*(void (**)(void, HALS_ObjectMap *))(**(void **)(a2 + 8) + 208))(*(void *)(a2 + 8), v3);
    }
    *(unsigned char *)(a2 + 860) = 0;
    HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a2 + 8), v5);
    HALS_ObjectMap::ReleaseObject(v3, v6);
  }
  return 0;
}

void sub_1BAECBAD0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::apply<>(uint64_t result, uint64_t a2, long long *a3)
{
  long long v8 = *a3;
  uint64_t v9 = *((void *)a3 + 2);
  if (result != a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    char v6 = 1;
    do
    {
      if (v6) {
        uint64_t v5 = 0;
      }
      else {
        ++v5;
      }
      v10[0] = v4;
      v10[1] = v5;
      double result = ((uint64_t (*)(char *, void *))v8)((char *)&v8 + 8, v10);
      char v6 = 0;
      v4 += 8;
      if (result) {
        BOOL v7 = 1;
      }
      else {
        BOOL v7 = v4 == a2;
      }
    }
    while (!v7);
  }
  return result;
}

void std::vector<HALS_IOContextDescription::HostedDSPDescription::ReferenceStreamRequest>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (const void **)**a1;
  if (v2)
  {
    uint64_t v4 = (const void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        char v6 = v4 - 2;
        std::__destroy_at[abi:ne180100]<HALS_IOContextDescription::HostedDSPDescription::ReferenceStreamRequest,0>(*(v4 - 1));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<HALS_IOStackDescription>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        char v6 = v4 - 32;
        BOOL v7 = (void **)(v4 - 24);
        std::vector<HALS_IOStreamGroup>::__destroy_vector::operator()[abi:ne180100](&v7);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<HALS_IOStreamInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void (***)(void))**a1;
  if (v2)
  {
    uint64_t v4 = (void (***)(void))v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      char v6 = v4 - 53;
      BOOL v7 = v4 - 53;
      do
      {
        (**v7)(v7);
        v6 -= 53;
        BOOL v8 = v7 == v2;
        v7 -= 53;
      }
      while (!v8);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<HALS_IOEngineInfo>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<HALS_IOEngineInfo>>::__clear[abi:ne180100](v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<HALS_IOEngineInfo>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  unint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    double result = v4;
    *unint64_t v3 = 0;
    if (v4) {
      double result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void std::vector<HALS_IOStreamGroup>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        char v6 = v4;
        std::vector<HALS_IOStreamInfo>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<HALS_IOContextDescription::HostedDSPDescription::ReferenceStreamRequest,0>(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

uint64_t _ZN5caulk12function_refIFiRN15VisitableVectorINSt3__110unique_ptrI17HALS_IOEngineInfoNS2_14default_deleteIS4_EEEEE13ItemWithIndexEEE15functor_invokerIZN21HALS_IOEngineInfoList12engine_applyIJEEEiNS0_IFiRS4_EEEDpRKT_EUlSA_E_EEiRKNS_7details15erased_callableISB_EESA_(uint64_t (****a1)(uint64_t, uint64_t), uint64_t **a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = *a2;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)**a2 + 16))(**a2);
  if (result)
  {
    uint64_t v5 = *v3;
    uint64_t v6 = (uint64_t)(*v2 + 1);
    BOOL v7 = **v2;
    return v7(v6, v5);
  }
  return result;
}

void *caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<int({block_pointer})(HALS_IOEngineInfo &)>(void **a1)
{
  return (*(void *(**)(void *__return_ptr))(**a1 + 16))(*a1);
}

uint64_t HALS_IOContextDescription::ActiveInputsOnly::should_exclude(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(void, uint64_t, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), 1, *(unsigned int *)(a2 + 8)) ^ 1;
}

void HALS_IOContextDescription::ActiveInputsOnly::~ActiveInputsOnly(HALS_IOContextDescription::ActiveInputsOnly *this)
{
}

uint64_t HALS_IOContextDescription::ActiveOutputsOnly::should_exclude(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(void, void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), 0, *(unsigned int *)(a2 + 8)) ^ 1;
}

void HALS_IOContextDescription::ActiveOutputsOnly::~ActiveOutputsOnly(HALS_IOContextDescription::ActiveOutputsOnly *this)
{
}

uint64_t HALS_IOContextDescription::InactiveInputsOnly::should_exclude(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), 1, *(unsigned int *)(a2 + 8));
}

void HALS_IOContextDescription::InactiveInputsOnly::~InactiveInputsOnly(HALS_IOContextDescription::InactiveInputsOnly *this)
{
}

Float64 CalculateSafetyViolation_Write(HALS_IOClock *a1, unsigned int a2, const AudioTimeStamp *a3)
{
  if (a1)
  {
    unint64_t v7 = 0;
    double v8 = 0.0;
    HALS_IOClock::GetRaw0Time(a1, &v8, &v7);
    return a3->mSampleTime
         - (floor(*((double *)a1 + 5 * *((unsigned int *)a1 + 48) + 26) * (double)(mach_absolute_time() - v7))
          + v8
          + (double)a2);
  }
  return result;
}

uint64_t HALS_IOContextDescription::GetDeviceIDFromEngineID(HALS_IOContextDescription *this)
{
  if (!this) {
    return 0;
  }
  uint64_t v1 = HALS_ObjectMap::CopyObjectByObjectID(this);
  unint64_t v3 = (HALS_ObjectMap *)v1;
  if (v1 && (uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 320))(v1)) != 0) {
    uint64_t v5 = *(unsigned int *)(v4 + 16);
  }
  else {
    uint64_t v5 = 0;
  }
  HALS_ObjectMap::ReleaseObject(v3, v2);
  return v5;
}

void sub_1BAECC1A0(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<HALS_IOStackDescription>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    uint64_t v5 = (void **)(i - 24);
    std::vector<HALS_IOStreamGroup>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<HALS_IOStreamInfo>>(unint64_t a1)
{
  if (a1 >= 0x9A90E7D95BC60ALL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(424 * a1);
}

uint64_t *std::vector<HALS_IOStreamInfo>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  for (uint64_t i = 424; ; i -= 424)
  {
    uint64_t v8 = v6 + i;
    if (v4 + i - 424 == v5) {
      break;
    }
    uint64_t v9 = v4 + i - 848;
    Float64 result = (uint64_t *)std::construct_at[abi:ne180100]<HALS_IOStreamInfo,HALS_IOStreamInfo const&,HALS_IOStreamInfo*>(v8 - 848, v9);
  }
  uint64_t v10 = v8 - 424;
  a2[1] = v10;
  uint64_t v11 = *v3;
  *uint64_t v3 = v10;
  a2[1] = v11;
  uint64_t v12 = v3[1];
  v3[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = v3[2];
  v3[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<HALS_IOStreamInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 424;
    (**(void (***)(void))(i - 424))();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::construct_at[abi:ne180100]<HALS_IOStreamInfo,HALS_IOStreamInfo const&,HALS_IOStreamInfo*>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F1489938;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 40);
  long long v7 = *(_OWORD *)(a2 + 53);
  *(void *)(a1 + 72) = 0;
  uint64_t v8 = a1 + 72;
  *(_OWORD *)(a1 + 53) = v7;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 72), *(const void **)(a2 + 72), *(void *)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 96);
  HALS_IODSPInfo::HALS_IODSPInfo((HALS_IODSPInfo *)(v8 + 40), (const HALS_IODSPInfo *)(a2 + 112));
  long long v9 = *(_OWORD *)(a2 + 360);
  long long v10 = *(_OWORD *)(a2 + 376);
  long long v11 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 401) = *(_OWORD *)(a2 + 401);
  *(_OWORD *)(a1 + 376) = v10;
  *(_OWORD *)(a1 + 392) = v11;
  *(_OWORD *)(a1 + 360) = v9;
  return a1;
}

void sub_1BAECC490(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 80) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IODSPInfo::HALS_IODSPInfo(HALS_IODSPInfo *this, const HALS_IODSPInfo *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  long long v5 = *(const void **)a2;
  uint64_t v4 = *((void *)a2 + 1);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    std::vector<HALS_IODSPInfo::EngineStreamInfo>::__vallocate[abi:ne180100](this, v6 >> 7);
    long long v7 = (char *)*((void *)this + 1);
    memmove(v7, v5, v6);
    *((void *)this + 1) = &v7[128 * (v6 >> 7)];
  }
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 2);
  *((void *)this + 6) = *((void *)a2 + 6);
  std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100]((uint64_t *)this + 7, (void *)a2 + 7);
  uint64_t v8 = *((void *)a2 + 11);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)this + 11) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *((void *)a2 + 12);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((void *)this + 12) = v9;
  std::__optional_copy_base<CA::ChannelLayout,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 112, (uint64_t)a2 + 112);
  uint64_t v10 = *((void *)a2 + 18);
  *((void *)this + 19) = 0;
  *((void *)this + 18) = v10;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((void *)this + 19, *((const void **)a2 + 19), *((void *)a2 + 20), *((void *)a2 + 20) - *((void *)a2 + 19));
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((void *)this + 22, *((const void **)a2 + 22), *((void *)a2 + 23), *((void *)a2 + 23) - *((void *)a2 + 22));
  long long v11 = *(_OWORD *)((char *)a2 + 200);
  long long v12 = *(_OWORD *)((char *)a2 + 216);
  *(_OWORD *)((char *)this + 232) = *(_OWORD *)((char *)a2 + 232);
  *(_OWORD *)((char *)this + 216) = v12;
  *(_OWORD *)((char *)this + 200) = v11;
}

void sub_1BAECC5E4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](uint64_t *a1, void *a2)
{
  a1[1] = 0;
  uint64_t v3 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  uint64_t v4 = a2 + 1;
  long long v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(a1, v3, *((_DWORD *)v5 + 7), *((_DWORD *)v5 + 7));
      int64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          long long v7 = v6;
          int64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          long long v5 = v7;
        }
        while (!v8);
      }
      long long v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_1BAECC708(_Unwind_Exception *a1)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_copy_base<CA::ChannelLayout,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_1BAECC774(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<HALS_IODSPInfo::EngineStreamInfo>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 57) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  Float64 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HALS_IODSPInfo::EngineStreamInfo>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[128 * v4];
  return result;
}

void *std::vector<HALS_IOStreamGroup>::__init_with_size[abi:ne180100]<HALS_IOStreamGroup*,HALS_IOStreamGroup*>(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    int64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    Float64 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_IOStreamGroup>,HALS_IOStreamGroup*,HALS_IOStreamGroup*,HALS_IOStreamGroup*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BAECC840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<HALS_IOStreamGroup>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_IOStreamGroup>,HALS_IOStreamGroup*,HALS_IOStreamGroup*,HALS_IOStreamGroup*>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  long long v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  std::runtime_error v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    int64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<HALS_IOStreamInfo>::__init_with_size[abi:ne180100]<HALS_IOStreamInfo*,HALS_IOStreamInfo*>(v4, *v6, v6[1], 0x21CFB2B78C13521DLL * ((v6[1] - *v6) >> 3));
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HALS_IOStreamGroup>,HALS_IOStreamGroup*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1BAECC914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<HALS_IOStreamInfo>::__init_with_size[abi:ne180100]<HALS_IOStreamInfo*,HALS_IOStreamInfo*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int64_t v6 = result;
    std::vector<HALS_IOStreamInfo>::__vallocate[abi:ne180100](result, a4);
    Float64 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_IOStreamInfo>,HALS_IOStreamInfo*,HALS_IOStreamInfo*,HALS_IOStreamInfo*>(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BAECC98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<HALS_IOStreamInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HALS_IOStreamGroup>,HALS_IOStreamGroup*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void ****)(a1 + 16);
    uint64_t v4 = **(void ****)(a1 + 8);
    while (v3 != v4)
    {
      v3 -= 3;
      long long v5 = v3;
      std::vector<HALS_IOStreamInfo>::__destroy_vector::operator()[abi:ne180100](&v5);
    }
  }
  return a1;
}

char *std::vector<HALS_IOStreamInfo>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x9A90E7D95BC60ALL) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  Float64 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HALS_IOStreamInfo>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[424 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_IOStreamInfo>,HALS_IOStreamInfo*,HALS_IOStreamInfo*,HALS_IOStreamInfo*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      *(void *)uint64_t v7 = &unk_1F1489938;
      long long v8 = *(_OWORD *)(a1 + v6 + 8);
      long long v9 = *(_OWORD *)(a1 + v6 + 24);
      long long v10 = *(_OWORD *)(a1 + v6 + 40);
      *(_OWORD *)(v7 + 53) = *(_OWORD *)(a1 + v6 + 53);
      *(_OWORD *)(v7 + 40) = v10;
      *(_OWORD *)(v7 + 24) = v9;
      *(_OWORD *)(v7 + 8) = v8;
      *(void *)(a3 + v6 + 72) = 0;
      *(void *)(v7 + 80) = 0;
      *(void *)(v7 + 88) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a3 + v6 + 72), *(const void **)(a1 + v6 + 72), *(void *)(a1 + v6 + 80), (uint64_t)(*(void *)(a1 + v6 + 80) - *(void *)(a1 + v6 + 72)) >> 2);
      *(_OWORD *)(v7 + 96) = *(_OWORD *)(a1 + v6 + 96);
      HALS_IODSPInfo::HALS_IODSPInfo((HALS_IODSPInfo *)(a3 + v6 + 112), (const HALS_IODSPInfo *)(a1 + v6 + 112));
      long long v11 = (_OWORD *)(a3 + v6 + 360);
      long long v12 = *(_OWORD *)(a1 + v6 + 360);
      long long v13 = *(_OWORD *)(a1 + v6 + 376);
      long long v14 = *(_OWORD *)(a1 + v6 + 392);
      *(_OWORD *)((char *)v11 + 41) = *(_OWORD *)(a1 + v6 + 401);
      v11[1] = v13;
      void v11[2] = v14;
      _OWORD *v11 = v12;
      v6 += 424;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_1BAECCB68(_Unwind_Exception *exception_object)
{
  long long v5 = *v2;
  if (*v2)
  {
    *(void *)(v3 + 80) = v5;
    operator delete(v5);
  }
  if ((void (***)(void))v3 != v1)
  {
    uint64_t v6 = v3 - 424;
    uint64_t v7 = (void (***)(void))(v3 - 424);
    do
    {
      (**v7)(v7);
      v6 -= 424;
      BOOL v8 = v7 == v1;
      v7 -= 53;
    }
    while (!v8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HALS_IOStreamGroup *,HALS_IOStreamGroup *,HALS_IOStreamGroup *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  if (a1 != a2)
  {
    for (uint64_t i = a1; i != a2; i += 3)
    {
      if (a3 != i)
      {
        uint64_t v7 = *i;
        uint64_t v6 = i[1];
        unint64_t v8 = 0x21CFB2B78C13521DLL * ((v6 - *i) >> 3);
        uint64_t v9 = a3[2];
        uint64_t v10 = *a3;
        if (0x21CFB2B78C13521DLL * ((v9 - *a3) >> 3) >= v8)
        {
          if (0x21CFB2B78C13521DLL * ((a3[1] - v10) >> 3) >= v8)
          {
            uint64_t v21 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HALS_IOStreamInfo *,HALS_IOStreamInfo *,HALS_IOStreamInfo *>(*i, i[1], *a3);
            uint64_t v22 = a3[1];
            if (v22 != v21)
            {
              uint64_t v23 = v22 - 424;
              int v24 = (void (***)(void))(v22 - 424);
              do
              {
                (**v24)(v24);
                v23 -= 424;
                BOOL v15 = v24 == (void (***)(void))v21;
                v24 -= 53;
              }
              while (!v15);
            }
            a3[1] = v21;
            goto LABEL_27;
          }
          uint64_t v20 = v7 + 8 * ((a3[1] - v10) >> 3);
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HALS_IOStreamInfo *,HALS_IOStreamInfo *,HALS_IOStreamInfo *>(*i, v20, *a3);
          uint64_t v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_IOStreamInfo>,HALS_IOStreamInfo*,HALS_IOStreamInfo*,HALS_IOStreamInfo*>(v20, v6, a3[1]);
        }
        else
        {
          if (v10)
          {
            uint64_t v11 = a3[1];
            long long v12 = (void *)*a3;
            if (v11 != v10)
            {
              uint64_t v13 = v11 - 424;
              long long v14 = (void (***)(void))(v11 - 424);
              do
              {
                (**v14)(v14);
                v13 -= 424;
                BOOL v15 = v14 == (void (***)(void))v10;
                v14 -= 53;
              }
              while (!v15);
              long long v12 = (void *)*a3;
            }
            a3[1] = v10;
            operator delete(v12);
            uint64_t v9 = 0;
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
          }
          if (v8 > 0x9A90E7D95BC609) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v16 = 0x21CFB2B78C13521DLL * (v9 >> 3);
          uint64_t v17 = 2 * v16;
          if (2 * v16 <= v8) {
            uint64_t v17 = v8;
          }
          if (v16 >= 0x4D4873ECADE304) {
            unint64_t v18 = 0x9A90E7D95BC609;
          }
          else {
            unint64_t v18 = v17;
          }
          std::vector<HALS_IOStreamInfo>::__vallocate[abi:ne180100](a3, v18);
          uint64_t v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_IOStreamInfo>,HALS_IOStreamInfo*,HALS_IOStreamInfo*,HALS_IOStreamInfo*>(v7, v6, a3[1]);
        }
        a3[1] = v19;
      }
LABEL_27:
      a3 += 3;
    }
  }
  return a3;
}

void sub_1BAECCE1C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BAECCE24(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HALS_IOStreamInfo *,HALS_IOStreamInfo *,HALS_IOStreamInfo *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    uint64_t v5 = 0;
    uint64_t v42 = a1 + 176;
    for (uint64_t i = a3; ; i += 424)
    {
      uint64_t v7 = v4 + v5;
      uint64_t v8 = v3 + v5;
      long long v9 = *(_OWORD *)(v4 + v5 + 8);
      long long v10 = *(_OWORD *)(v4 + v5 + 24);
      long long v11 = *(_OWORD *)(v4 + v5 + 40);
      *(_OWORD *)(v8 + 53) = *(_OWORD *)(v4 + v5 + 53);
      *(_OWORD *)(v8 + 40) = v11;
      *(_OWORD *)(v8 + 24) = v10;
      *(_OWORD *)(v8 + 8) = v9;
      if (v4 != v3) {
        break;
      }
      *(_OWORD *)(v8 + 96) = *(_OWORD *)(v7 + 96);
LABEL_27:
      uint64_t v29 = *(void *)(v4 + v5 + 192);
      uint64_t v28 = *(void *)(v4 + v5 + 200);
      if (v28) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v30 = v3 + v5;
      float64x2_t v31 = *(std::__shared_weak_count **)(v3 + v5 + 200);
      *(void *)(v30 + 192) = v29;
      *(void *)(v30 + 200) = v28;
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      uint64_t v32 = v3 + v5;
      uint64_t v33 = v4 + v5;
      uint64_t v34 = *(void *)(v4 + v5 + 208);
      *(_DWORD *)(v32 + 216) = *(_DWORD *)(v4 + v5 + 216);
      *(void *)(v32 + 208) = v34;
      std::__optional_storage_base<CA::ChannelLayout,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<CA::ChannelLayout,false> const&>(v3 + v5 + 224, v4 + v5 + 224);
      *(void *)(v32 + 256) = *(void *)(v4 + v5 + 256);
      if (v7 != v8)
      {
        std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>((void *)(v32 + 264), *(char **)(v33 + 264), *(char **)(v33 + 272), *(void *)(v33 + 272) - *(void *)(v33 + 264));
        std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>((void *)(v32 + 288), *(char **)(v33 + 288), *(char **)(v33 + 296), *(void *)(v33 + 296) - *(void *)(v33 + 288));
      }
      long long v35 = *(_OWORD *)(v33 + 312);
      long long v36 = *(_OWORD *)(v33 + 328);
      *(_OWORD *)(v32 + 337) = *(_OWORD *)(v33 + 337);
      *(_OWORD *)(v32 + 312) = v35;
      *(_OWORD *)(v32 + 328) = v36;
      long long v37 = *(_OWORD *)(v33 + 360);
      long long v38 = *(_OWORD *)(v33 + 376);
      long long v39 = *(_OWORD *)(v33 + 392);
      *(_OWORD *)(v32 + 401) = *(_OWORD *)(v33 + 401);
      *(_OWORD *)(v32 + 376) = v38;
      *(_OWORD *)(v32 + 392) = v39;
      *(_OWORD *)(v32 + 360) = v37;
      v5 += 424;
      if (v4 + v5 == a2)
      {
        v3 += v5;
        return v3;
      }
    }
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v8 + 72), *(char **)(v7 + 72), *(void *)(v7 + 80), (uint64_t)(*(void *)(v7 + 80) - *(void *)(v7 + 72)) >> 2);
    long long v12 = *(char **)(v8 + 112);
    *(_OWORD *)(v8 + 96) = *(_OWORD *)(v7 + 96);
    uint64_t v13 = *(char **)(v7 + 112);
    long long v14 = *(unsigned char **)(v7 + 120);
    size_t v15 = v14 - v13;
    unint64_t v16 = (v14 - v13) >> 7;
    uint64_t v17 = *(void *)(v8 + 128);
    if (v16 <= (v17 - (uint64_t)v12) >> 7)
    {
      uint64_t v23 = *(unsigned char **)(a3 + v5 + 120);
      unint64_t v24 = (v23 - v12) >> 7;
      if (v24 >= v16)
      {
        if (v14 != v13) {
          memmove(v12, v13, v14 - v13);
        }
        uint64_t v3 = a3;
        uint64_t v20 = (char **)(i + 120);
        uint64_t v4 = a1;
        goto LABEL_26;
      }
      if (v23 != v12)
      {
        uint64_t v25 = (v23 - v12) >> 7;
        memmove(v12, v13, v23 - v12);
        unint64_t v24 = v25;
        long long v12 = *(char **)(a3 + v5 + 120);
      }
      uint64_t v3 = a3;
      uint64_t v20 = (char **)(i + 120);
      uint64_t v22 = &v13[128 * v24];
      size_t v15 = v14 - v22;
      if (v14 == v22)
      {
LABEL_22:
        uint64_t v4 = a1;
LABEL_26:
        *uint64_t v20 = &v12[v15];
        uint64_t v26 = v3 + v5;
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v3 + v5 + 136), *(char **)(v4 + v5 + 136), *(void *)(v4 + v5 + 144), (uint64_t)(*(void *)(v4 + v5 + 144) - *(void *)(v4 + v5 + 136)) >> 2);
        int v27 = *(_DWORD *)(v4 + v5 + 160);
        *(unsigned char *)(v26 + 164) = *(unsigned char *)(v4 + v5 + 164);
        *(_DWORD *)(v26 + 160) = v27;
        std::__tree<DSP_Host_Types::AudioProcessingType>::__assign_multi<std::__tree_const_iterator<DSP_Host_Types::AudioProcessingType,std::__tree_node<DSP_Host_Types::AudioProcessingType,void *> *,long>>(v3 + v5 + 168, *(void **)(v4 + v5 + 168), (void *)(v42 + v5));
        goto LABEL_27;
      }
      uint64_t v21 = v12;
    }
    else
    {
      if (v12)
      {
        *(void *)(a3 + v5 + 120) = v12;
        operator delete(v12);
        uint64_t v17 = 0;
        *(void *)(v8 + 112) = 0;
        *(void *)(v8 + 120) = 0;
        *(void *)(v8 + 128) = 0;
      }
      if ((v15 & 0x8000000000000000) != 0) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v18 = v17 >> 6;
      if (v17 >> 6 <= v16) {
        uint64_t v18 = (v14 - v13) >> 7;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFF80) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v18;
      }
      std::vector<HALS_IODSPInfo::EngineStreamInfo>::__vallocate[abi:ne180100]((void *)(v8 + 112), v19);
      uint64_t v3 = a3;
      uint64_t v20 = (char **)(a3 + v5 + 120);
      long long v12 = *v20;
      if (v14 == v13) {
        goto LABEL_22;
      }
      uint64_t v21 = *(void **)(a3 + v5 + 120);
      uint64_t v22 = v13;
    }
    memmove(v21, v22, v15);
    goto LABEL_22;
  }
  return v3;
}

void std::__optional_storage_base<CA::ChannelLayout,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<CA::ChannelLayout,false> const&>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2 && *(unsigned char *)(a1 + 24))
    {
      uint64_t v3 = *(char **)(a2 + 8);
      unint64_t v4 = (unint64_t)&v3[-*(void *)a2];
      uint64_t v5 = *(char **)a2;
      std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>((void *)a1, v5, v3, v4);
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v6 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v6;
      operator delete(v6);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
    *(unsigned char *)(a1 + 24) = 1;
  }
}

void *std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = result[2];
  long long v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    Float64 result = std::vector<char>::__vallocate[abi:ne180100](v7, v11);
    long long v9 = (char *)v7[1];
    goto LABEL_17;
  }
  long long v12 = (unsigned char *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      Float64 result = memmove(v9, __src, v16);
    }
    size_t v15 = &v9[v16];
    goto LABEL_20;
  }
  long long v14 = &__src[v13];
  if (v12 != v9)
  {
    Float64 result = memmove((void *)*result, __src, v13);
    long long v9 = (char *)v7[1];
  }
  if (a3 != v14) {
    Float64 result = memmove(v9, v14, a3 - v14);
  }
  size_t v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

void HALS_IOContextDescription::SetFromCFRepresentation_ClearAllState(HALS_IOContextDescription *this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void (***)(void))*((void *)this + 7);
  uint64_t v2 = (void (***)(void))*((void *)this + 8);
  if (v2 != v3)
  {
    unint64_t v4 = v2 - 53;
    uint64_t v5 = v2 - 53;
    do
    {
      (**v5)(v5);
      v4 -= 53;
      BOOL v6 = v5 == v3;
      v5 -= 53;
    }
    while (!v6);
  }
  *((void *)this + 8) = v3;
  uint64_t v8 = *((void *)this + 10);
  uint64_t v7 = *((void *)this + 11);
  if (v7 != v8)
  {
    do
    {
      uint64_t v9 = v7 - 32;
      *(void *)size_t v16 = v7 - 24;
      std::vector<HALS_IOStreamGroup>::__destroy_vector::operator()[abi:ne180100]((void ***)v16);
      uint64_t v7 = v9;
    }
    while (v9 != v8);
  }
  *((void *)this + 11) = v8;
  *((void *)this + 3) = 0;
  size_t v11 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 110));
  if (!v11 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)size_t v16 = 136315394;
    *(void *)&v16[4] = "HALS_IOContextDescription.cpp";
    __int16 v17 = 1024;
    int v18 = 399;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContextDescription::SetFromCFRepresentation: IOContextDescription has outlived owning IOContext", v16, 0x12u);
  }
  long long v12 = (uint64_t *)*((void *)this + 4);
  size_t v13 = (uint64_t *)*((void *)this + 5);
  while (v12 != v13)
  {
    std::vector<std::unique_ptr<HALS_IOProcessor>>::__clear[abi:ne180100]((void *)(*v12 + 720));
    std::vector<std::unique_ptr<HALS_IOProcessor>>::__clear[abi:ne180100]((void *)(*v12 + 696));
    uint64_t v14 = *v12;
    if (v11)
    {
      uint64_t v15 = *(void *)(v14 + 8);
      if (v15)
      {
        if (*(unsigned char *)(v14 + 860))
        {
          (*(void (**)(uint64_t, HALS_ObjectMap *))(*(void *)v15 + 208))(v15, v11);
          uint64_t v14 = *v12;
        }
      }
    }
    *(unsigned char *)(v14 + 860) = 0;
    *(_DWORD *)(v14 + 744) = 0;
    ++v12;
  }
  *((_DWORD *)this + 55) = 0;
  HALS_ObjectMap::ReleaseObject(v11, v10);
}

void sub_1BAECD4C0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void HALS_IOContextDescription::SetFromCFRepresentation_FindMaster(HALS_IOContextDescription *this, CFTypeRef cf)
{
  CFRetain(cf);
  size_t v13 = &unk_1F14898A0;
  CFDictionaryRef v14 = (CFDictionaryRef)cf;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v11, (CFDictionaryRef)cf, @"clock device uid");
  if (v12)
  {
    uint64_t EngineInfo = HALS_IOContextDescription::SetFromCFRepresentation_MakeEngineInfo(this, v12);
    *((void *)this + 3) = EngineInfo;
    if (EngineInfo) {
      goto LABEL_8;
    }
  }
  else if (*((void *)this + 3))
  {
    goto LABEL_8;
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v9, v14, @"master uid");
  if (v10) {
    *((void *)this + 3) = HALS_IOContextDescription::SetFromCFRepresentation_MakeEngineInfo(this, v10);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v9);
LABEL_8:
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v9, v14, @"taps");
  if (!*((void *)this + 3) && v10 && OS::CF::ArrayBase<__CFArray const*>::GetSize((const __CFArray *)v10))
  {
    OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v7, (uint64_t)v9, 0);
    if (theDict)
    {
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v5, theDict, @"uid");
      *((void *)this + 3) = HALS_IOContextDescription::SetFromCFRepresentation_MakeEngineInfo(this, v6);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v5);
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v7);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v9);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v11);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v13);
}

void sub_1BAECD634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a9);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a11);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a13);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a15);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v15 - 32));
  _Unwind_Resume(a1);
}

void HALS_IOContextDescription::SetFromCFRepresentation_ProcessInputStreams(HALS_IOContextDescription *this, const __CFDictionary *cf)
{
  CFDictionaryRef v2 = cf;
  uint64_t v216 = *MEMORY[0x1E4F143B8];
  CFRetain(cf);
  CFDictionaryRef v178 = v2;
  int v177 = &unk_1F14898A0;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v175, v2, @"grid-in");
  if (!v176 || !*((void *)this + 45))
  {
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v175);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v177);
LABEL_195:
    CFRetain(v2);
    v167[1] = v2;
    v167[0] = (CFDictionaryRef)&unk_1F14898A0;
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v166, v2, @"grid-in");
    CFArrayRef v97 = (const __CFArray *)*((void *)&v166[0] + 1);
    if (*((void *)&v166[0] + 1))
    {
      for (unsigned int i = 0; (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v97) > i; ++i)
      {
        OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v158, (uint64_t)v166, i);
        if (v158[1])
        {
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v150, v158[1], @"uid");
          CFDictionaryRef EngineInfo = (const __CFDictionary *)HALS_IOContextDescription::SetFromCFRepresentation_MakeEngineInfo(this, v150[1]);
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v190, v158[1], @"index");
          uint64_t v100 = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)theDict, 0);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v190);
          if (EngineInfo)
          {
            HALS_IOContextDescription::SetFromCFRepresentation_UpdateEngineInfo((HALS_IOContextDescription *)1, v158[1], EngineInfo, v101);
            int8x16_t v102 = (AMCP::Log::Scope_Registry *)IsolatedUseCaseID_FromDescription(v167[1]);
            int v103 = v102;
            int v104 = *((_DWORD *)this + 110);
            uint64_t v105 = *((void *)EngineInfo + 1);
            if (v105)
            {
              char v106 = (*(uint64_t (**)(void))(*(void *)v105 + 568))(*((void *)EngineInfo + 1));
              float64x2_t v107 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v105 + 400))(v105, 1);
              if (v107 <= v100)
              {
                if (((unint64_t)v103 & 0xFF00000000) != 0) {
                  char v108 = v106;
                }
                else {
                  char v108 = 1;
                }
                if ((v108 & 1) == 0)
                {
                  AMCP::Log::Scope_Registry::get(v107);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v190, "com.apple.coreaudio", "AMCP");
                  float64x2_t v109 = **(NSObject ***)v190;
                  if ((void)theDict) {
                    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)theDict);
                  }
                  float64x2_t v107 = (AMCP::Log::Scope_Registry *)os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT);
                  if (v107)
                  {
                    float64x2_t v110 = pthread_self();
                    mach_port_t v111 = pthread_mach_thread_np(v110);
                    int v112 = *((_DWORD *)this + 4);
                    *(_DWORD *)float64x2_t v190 = 67110403;
                    *(_DWORD *)&v190[4] = v111;
                    LOWORD(theDict) = 2080;
                    *(void *)((char *)&theDict + 2) = "HALS_IOContextDescription.cpp";
                    WORD5(theDict) = 1024;
                    HIDWORD(theDict) = 769;
                    __int16 v192 = 1024;
                    int v193 = v104;
                    __int16 v194 = 1024;
                    *(_DWORD *)float64x2_t v195 = v112;
                    *(_WORD *)&v195[4] = 2081;
                    *(void *)&v195[6] = "Isolated Audio Use Case specified, but this device does not support it.";
                    _os_log_impl(&dword_1BAA78000, v109, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d (Context ID: %u) (Device ID: %u) %{private}s", v190, 0x2Eu);
                  }
                }
                AMCP::Log::Scope_Registry::get(v107);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v190, "com.apple.coreaudio", "AMCP");
                int v113 = **(NSObject ***)v190;
                if ((void)theDict) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)theDict);
                }
                if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v114 = pthread_self();
                  mach_port_t v115 = pthread_mach_thread_np(v114);
                  if (((unint64_t)v103 & 0xFF00000000) != 0) {
                    unsigned int v116 = v103;
                  }
                  else {
                    unsigned int v116 = 0;
                  }
                  int v117 = bswap32(v116);
                  *(_DWORD *)&v190[1] = v117;
                  if (((char)v117 - 32) > 0x5E
                    || (((__int16)v117 >> 8) - 32) > 0x5E
                    || ((v117 << 8 >> 24) - 32) > 0x5E
                    || ((v117 >> 24) - 32) > 0x5E)
                  {
                    std::to_string((std::string *)buf, v116);
                  }
                  else
                  {
                    strcpy((char *)&v190[5], "'");
                    v190[0] = 39;
                    std::string::basic_string[abi:ne180100]<0>(buf, (char *)v190);
                  }
                  float64x2_t v122 = buf;
                  if (buf[23] < 0) {
                    float64x2_t v122 = *(unsigned char **)buf;
                  }
                  int v123 = *((_DWORD *)this + 4);
                  *(_DWORD *)float64x2_t v190 = 67110659;
                  *(_DWORD *)&v190[4] = v115;
                  LOWORD(theDict) = 2080;
                  *(void *)((char *)&theDict + 2) = "HALS_IOContextDescription.cpp";
                  WORD5(theDict) = 1024;
                  HIDWORD(theDict) = 775;
                  __int16 v192 = 1024;
                  int v193 = v104;
                  __int16 v194 = 2081;
                  *(void *)float64x2_t v195 = v122;
                  *(_WORD *)&v195[8] = 1024;
                  *(_DWORD *)&v195[10] = v100;
                  __int16 v196 = 1024;
                  int v197 = v123;
                  _os_log_error_impl(&dword_1BAA78000, v113, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d (Context ID: %u) (%{private}s) Description specifies an out of range stream index (%u) for this device / engine (Device ID: %u)", v190, 0x34u);
                  if ((buf[23] & 0x80000000) != 0) {
                    operator delete(*(void **)buf);
                  }
                }
              }
            }
            else
            {
              AMCP::Log::Scope_Registry::get(v102);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v190, "com.apple.coreaudio", "AMCP");
              float64x2_t v118 = **(NSObject ***)v190;
              if ((void)theDict) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)theDict);
              }
              if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
              {
                float64x2_t v119 = pthread_self();
                mach_port_t v120 = pthread_mach_thread_np(v119);
                *(_DWORD *)float64x2_t v190 = 67109890;
                *(_DWORD *)&v190[4] = v120;
                LOWORD(theDict) = 2080;
                *(void *)((char *)&theDict + 2) = "HALS_IOContextDescription.cpp";
                WORD5(theDict) = 1024;
                HIDWORD(theDict) = 780;
                __int16 v192 = 1024;
                int v193 = v104;
                _os_log_impl(&dword_1BAA78000, v118, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d (Context ID: %u) Description specifies a stream index for a device / engine that is currently not present.", v190, 0x1Eu);
              }
            }
            HALS_IOStreamInfo::HALS_IOStreamInfo((HALS_IOStreamInfo *)v190);
            CFDictionaryRef v215 = EngineInfo;
            if ((unint64_t)v103 >> 32
              && (*(unsigned int (**)(void))(**((void **)EngineInfo + 1) + 568))(*((void *)EngineInfo
                                                                                                  + 1)))
            {
              int v210 = (int)v103;
              char v211 = 1;
            }
            LOBYTE(theDict) = 1;
            DWORD1(theDict) = v100;
            uint64_t v121 = *((void *)EngineInfo + 1);
            if (v121)
            {
              v185[0] = 0;
              memset(buf, 0, sizeof(buf));
              (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)v121 + 432))(v121, 1, v100, buf);
              long long v212 = *(_OWORD *)buf;
              long long v213 = *(_OWORD *)&buf[16];
              uint64_t v214 = v185[0];
              if (v199)
              {
                long long v206 = *(_OWORD *)buf;
                long long v207 = *(_OWORD *)&buf[16];
                uint64_t v208 = v185[0];
                if (!v209) {
                  char v209 = 1;
                }
              }
              int v198 = (*(uint64_t (**)(void, void, void))(**((void **)EngineInfo + 1) + 424))(*((void *)EngineInfo + 1), theDict, DWORD1(theDict));
            }
            HALS_IOStreamGroup::push_back((HALS_IOContextDescription *)((char *)this + 56), (HALS_IOStreamInfo *)v190);
            HALS_IOStreamInfo::~HALS_IOStreamInfo((HALS_IOStreamInfo *)v190);
          }
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v150);
        }
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v158);
        CFArrayRef v97 = (const __CFArray *)*((void *)&v166[0] + 1);
      }
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v166);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v167);
    return;
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v190, v178, @"device id");
  unsigned int v140 = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)theDict, 0);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v190);
  int v142 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 111));
  CFDictionaryRef v139 = v2;
  int v143 = (uint64_t **)((char *)this + 344);
  std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v174, (void *)this + 43);
  std::string __p = 0;
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  LOBYTE(v2) = 0;
  for (unsigned int j = 0; (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v176) > j; unsigned int j = v6 + 1)
  {
    unsigned int v6 = j;
    OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v190, (uint64_t)v175, j);
    if ((void)theDict)
    {
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)buf, (CFDictionaryRef)theDict, @"uid");
      uint64_t v7 = (HALS_IODevice *)HALS_IOContextDescription::SetFromCFRepresentation_MakeEngineInfo(this, *(const __CFString **)&buf[8]);
      if (v7)
      {
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v167, (CFDictionaryRef)theDict, @"index");
        unsigned int v8 = OS::CF::Number::GetValue<unsigned int>(v167[1], 0);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v167);
        if (v8 < (*(unsigned int (**)(void))(**((void **)v7 + 1) + 400))())
        {
          uint64_t v146 = v8 | 0x300000000;
          if (v2)
          {
            LODWORD(v2) = 1;
          }
          else
          {
            std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v173, v174);
            DeviceFromEngine = HALS_IOContextDescription_HostedDSP::LocalEngineStreamInfo::getDeviceFromEngine(v7);
            int IsHostingInputDSP = HALS_IOContextDescription_HostedDSP::IsHostingInputDSP(v173, (void **)DeviceFromEngine, v142);
            std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)v173[1]);
            uint64_t v11 = v8 | 0x300000000;
            if (IsHostingInputDSP) {
              uint64_t v11 = v8;
            }
            uint64_t v146 = v11;
            LODWORD(v2) = IsHostingInputDSP != 0;
          }
          if (((v2 | (*(unsigned int (**)(void *))(**((void **)v7 + 1) + 568))(*((void **)v7 + 1)) ^ 1) & 1) == 0)
          {
            if (*((unsigned char *)this + 340))
            {
              uint64_t v146 = v146;
              LOBYTE(v2) = 1;
            }
            else
            {
              LOBYTE(v2) = 0;
            }
          }
          if ((unint64_t)v3 >= v4)
          {
            uint64_t v12 = ((char *)v3 - (char *)__p) >> 4;
            unint64_t v13 = v12 + 1;
            if ((unint64_t)(v12 + 1) >> 60) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v4 - (void)__p) >> 3 > v13) {
              unint64_t v13 = (uint64_t)(v4 - (void)__p) >> 3;
            }
            if (v4 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v14 = v13;
            }
            if (v14) {
              unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v14);
            }
            else {
              uint64_t v15 = 0;
            }
            size_t v16 = (HALS_IODevice **)(v14 + 16 * v12);
            *size_t v16 = v7;
            v16[1] = (HALS_IODevice *)v146;
            if (v3 == __p)
            {
              uint64_t v19 = (uint64_t *)(v14 + 16 * v12);
              int v18 = __p;
            }
            else
            {
              unint64_t v17 = v14 + 16 * v12;
              int v18 = __p;
              do
              {
                uint64_t v19 = (uint64_t *)(v17 - 16);
                *(_OWORD *)(v17 - 16) = *((_OWORD *)v3 - 1);
                v3 -= 2;
                v17 -= 16;
              }
              while (v3 != __p);
            }
            unint64_t v4 = v14 + 16 * v15;
            uint64_t v3 = (uint64_t *)(v16 + 2);
            if (v18) {
              operator delete(v18);
            }
            std::string __p = v19;
          }
          else
          {
            *uint64_t v3 = (uint64_t)v7;
            v3[1] = v146;
            v3 += 2;
          }
        }
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v190);
  }
  if (__p == v3)
  {
    char v32 = 0;
    CFDictionaryRef v2 = v139;
    goto LABEL_192;
  }
  if ((v2 & 1) == 0)
  {
    uint64_t v20 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)v140);
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v172, v174);
    char v21 = HALS_IOContextDescription_HostedDSP::IsHostingInputDSP(v172, (void **)v20, v142);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)v172[1]);
    if ((v21 & 1) == 0)
    {
      AMCP::Log::Scope_Registry::get(v22);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v190, "com.apple.coreaudio", "AMCP");
      uint64_t v33 = **(NSObject ***)v190;
      if ((void)theDict) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)theDict);
      }
      CFDictionaryRef v2 = v139;
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        float64x2_t v124 = pthread_self();
        mach_port_t v125 = pthread_mach_thread_np(v124);
        unint64_t v126 = 0;
        float64x2_t v127 = 0;
        int v128 = 47;
        do
        {
          float64x2_t v129 = &aLibraryCachesC_186[v126];
          if (v128 == 47) {
            float64x2_t v127 = &aLibraryCachesC_186[v126];
          }
          int v128 = v129[1];
          if (!v129[1]) {
            break;
          }
          BOOL v27 = v126++ >= 0xFFF;
        }
        while (!v27);
        if (v127) {
          float64x2_t v130 = v127 + 1;
        }
        else {
          float64x2_t v130 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/DSP/HALS_IOContextDescription_HostedDSP.cpp";
        }
        *(_DWORD *)float64x2_t v190 = 67109634;
        *(_DWORD *)&v190[4] = v125;
        LOWORD(theDict) = 2080;
        *(void *)((char *)&theDict + 2) = v130;
        WORD5(theDict) = 1024;
        HIDWORD(theDict) = 195;
        _os_log_error_impl(&dword_1BAA78000, v33, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] During context configuration, none of the associated devices have this DSP type enabled for the client.", v190, 0x18u);
      }
      goto LABEL_62;
    }
    uint64_t v24 = *((void *)this + 44);
    if (v24)
    {
      uint64_t v25 = (_DWORD *)((char *)this + 352);
      do
      {
        unsigned int v26 = *(_DWORD *)(v24 + 28);
        BOOL v27 = v26 >= 8;
        if (v26 >= 8) {
          uint64_t v28 = (uint64_t *)v24;
        }
        else {
          uint64_t v28 = (uint64_t *)(v24 + 8);
        }
        if (v27) {
          uint64_t v25 = (_DWORD *)v24;
        }
        uint64_t v24 = *v28;
      }
      while (*v28);
      if (v25 != (_DWORD *)((char *)this + 352) && v25[7] <= 8u)
      {
        AMCP::Log::Scope_Registry::get(v22);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v190, "com.apple.coreaudio", "AMCP");
        uint64_t v29 = **(NSObject ***)v190;
        CFDictionaryRef v2 = v139;
        if ((void)theDict) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)theDict);
        }
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          float64x2_t v131 = pthread_self();
          mach_port_t v132 = pthread_mach_thread_np(v131);
          unint64_t v133 = 0;
          float64x2_t v134 = 0;
          int v135 = 47;
          do
          {
            float64x2_t v136 = &aLibraryCachesC_186[v133];
            if (v135 == 47) {
              float64x2_t v134 = &aLibraryCachesC_186[v133];
            }
            int v135 = v136[1];
            if (!v136[1]) {
              break;
            }
            BOOL v27 = v133++ >= 0xFFF;
          }
          while (!v27);
          if (v134) {
            float64x2_t v137 = v134 + 1;
          }
          else {
            float64x2_t v137 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/DSP/HALS_IOContextDescription_HostedDSP.cpp";
          }
          *(_DWORD *)float64x2_t v190 = 67109634;
          *(_DWORD *)&v190[4] = v132;
          LOWORD(theDict) = 2080;
          *(void *)((char *)&theDict + 2) = v137;
          WORD5(theDict) = 1024;
          HIDWORD(theDict) = 207;
          _os_log_error_impl(&dword_1BAA78000, v29, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp][offloads] DSP Offloading must be set/valid in at least one subdevice to be used.", v190, 0x18u);
        }
        std::__tree<DSP_Host_Types::AudioProcessingType>::__erase_unique<DSP_Host_Types::AudioProcessingType>(v143, 8u);
        uint64_t v31 = *((void *)this + 46);
        *((void *)this + 46) = 0;
        if (v31) {
          std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v31);
        }
LABEL_62:
        HALS_ObjectMap::ReleaseObject(v20, v30);
        char v32 = 0;
        goto LABEL_192;
      }
    }
    *((_DWORD *)__p + 3) = 0;
    HALS_ObjectMap::ReleaseObject(v20, v23);
  }
  uint64_t v34 = *((void *)this + 32);
  uint64_t v35 = *((void *)this + 33);
  if (v34 != v35)
  {
    while (1)
    {
      if (!*(unsigned char *)v34) {
        goto LABEL_104;
      }
      *(_DWORD *)(v34 + 4) = 0;
      CFStringRef v36 = *(const __CFString **)(v34 + 8);
      if (!v36) {
        goto LABEL_105;
      }
      uint64_t v37 = HALS_IOContextDescription::SetFromCFRepresentation_MakeEngineInfo(this, v36);
      long long v38 = HALS_IOContextDescription_HostedDSP::LocalEngineStreamInfo::getDeviceFromEngine((HALS_IODevice *)v37);
      long long v39 = v38;
      if (!v38) {
        goto LABEL_105;
      }
      uint64_t v40 = HALS_IODevice::GetNumberStreams(v38, 1) ? (uint64_t)v39 : 0;
      long long theDict = 0uLL;
      *(void *)float64x2_t v190 = 0;
      HALS_Device::CopyStreamList(v40, 1, (char **)v190);
      uint64_t v42 = *(HALS_Stream ***)v190;
      float64x2_t v43 = (HALS_Stream **)theDict;
      if (*(void *)v190 != (void)theDict) {
        break;
      }
LABEL_75:
      HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)v190, v41);
LABEL_105:
      v34 += 16;
      if (v34 == v35) {
        goto LABEL_106;
      }
    }
    unsigned int v44 = 0;
    while (!HALS_Stream::IsReferenceStream(*v42))
    {
      ++v44;
      if (++v42 == v43) {
        goto LABEL_75;
      }
    }
    HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)v190, v41);
    if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v37 + 8) + 400))(*(void *)(v37 + 8), 1) <= v44) {
      goto LABEL_105;
    }
    *(unsigned char *)(v37 + 762) = 1;
    float64x2_t v45 = __p;
    if (__p != v3)
    {
      float64x2_t v45 = __p;
      while (*v45 != v37 || *((_DWORD *)v45 + 2) != v44)
      {
        v45 += 2;
        if (v45 == v3) {
          goto LABEL_85;
        }
      }
    }
    if (v45 == v3)
    {
LABEL_85:
      if ((unint64_t)v3 >= v4)
      {
        uint64_t v147 = v44 | 0x100000000;
        uint64_t v46 = ((char *)v3 - (char *)__p) >> 4;
        unint64_t v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 60) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v4 - (void)__p) >> 3 > v47) {
          unint64_t v47 = (uint64_t)(v4 - (void)__p) >> 3;
        }
        if (v4 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v48 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v48 = v47;
        }
        if (v48) {
          unint64_t v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v48);
        }
        else {
          uint64_t v49 = 0;
        }
        float64x2_t v50 = (uint64_t *)(v48 + 16 * v46);
        *float64x2_t v50 = v37;
        v50[1] = v147;
        if (__p == v3)
        {
          float64x2_t v53 = (uint64_t *)(v48 + 16 * v46);
          float64x2_t v52 = __p;
        }
        else
        {
          unint64_t v51 = v48 + 16 * v46;
          float64x2_t v52 = __p;
          do
          {
            float64x2_t v53 = (uint64_t *)(v51 - 16);
            *(_OWORD *)(v51 - 16) = *((_OWORD *)v3 - 1);
            v3 -= 2;
            v51 -= 16;
          }
          while (v3 != __p);
        }
        unint64_t v4 = v48 + 16 * v49;
        uint64_t v3 = v50 + 2;
        if (v52) {
          operator delete(v52);
        }
        std::string __p = v53;
      }
      else
      {
        *uint64_t v3 = v37;
        v3[1] = v44 | 0x100000000;
        v3 += 2;
      }
    }
    else
    {
      *((_DWORD *)v45 + 3) = 2;
    }
LABEL_104:
    *(_DWORD *)(v34 + 4) = 1;
    goto LABEL_105;
  }
LABEL_106:
  HALS_IOStreamInfo::HALS_IOStreamInfo((HALS_IOStreamInfo *)v190);
  CFDictionaryRef v215 = 0;
  LOBYTE(theDict) = 1;
  DWORD1(theDict) = 0;
  int v199 = 1;
  float64x2_t v54 = (int *)((char *)this + 336);
  if (v211 == *((unsigned char *)this + 340))
  {
    if (v211) {
      int v210 = *v54;
    }
  }
  else if (v211)
  {
    char v211 = 0;
  }
  else
  {
    int v210 = *v54;
    char v211 = 1;
  }
  if (__p != v3)
  {
    int v55 = 0;
    uint64_t v56 = 0;
    float64x2_t v138 = (AudioStreamBasicDescription *)((char *)this + 288);
    float64x2_t v57 = (HALS_IOContextDescription *)((char *)this + 56);
    for (uint64_t k = __p; k != v3; k += 2)
    {
      if (!*k) {
        continue;
      }
      uint64_t v59 = *(void *)(*k + 8);
      if (!v59) {
        continue;
      }
      uint64_t v60 = (*(uint64_t (**)(uint64_t))(*(void *)v59 + 320))(v59);
      if (!v60) {
        continue;
      }
      int v61 = *(_DWORD *)(v60 + 16);
      int v62 = *((_DWORD *)k + 2);
      v167[0] = (CFDictionaryRef)*k;
      LODWORD(v167[1]) = v61;
      *(void *)&long long v168 = 0;
      DWORD2(v168) = 0;
      *(void *)&long long v169 = 0;
      DWORD2(v169) = 0;
      *(_DWORD *)float64x2_t v170 = 0;
      memset(&v170[8], 0, 40);
      *(_DWORD *)float64x2_t v171 = v62;
      v171[28] = 0;
      memset(&v171[4], 0, 21);
      if ((*(unsigned int (**)(void))(**(void **)(*k + 8) + 568))())
      {
        if (v171[28] == *((unsigned __int8 *)this + 340))
        {
          if (v171[28]) {
            *(_DWORD *)&v171[24] = *v54;
          }
        }
        else if (v171[28])
        {
          v171[28] = 0;
        }
        else
        {
          *(_DWORD *)&v171[24] = *v54;
          v171[28] = 1;
        }
      }
      *(_DWORD *)&v171[4] = *((_DWORD *)k + 3);
      (*(void (**)(void, uint64_t, void, unsigned char *))(**(void **)(*k + 8) + 432))(*(void *)(*k + 8), 1, *((unsigned int *)k + 2), &v170[8]);
      unsigned int v63 = *((_DWORD *)k + 3);
      if (v63)
      {
        if (v63 >= 3) {
          goto LABEL_142;
        }
        if (!v55)
        {
          long long v162 = *(_OWORD *)&v170[16];
          long long v163 = *(_OWORD *)&v170[32];
          long long v164 = *(_OWORD *)v171;
          long long v165 = *(_OWORD *)&v171[16];
          *(_OWORD *)float64x2_t v158 = *(_OWORD *)v167;
          long long v159 = v168;
          long long v160 = v169;
          long long v161 = *(_OWORD *)v170;
          HALS_IODSPInfo::AddStream(&v200, (long long *)v158);
          int v55 = 0;
          goto LABEL_139;
        }
      }
      else
      {
        if (v203 != (_DWORD *)v143) {
          std::__tree<DSP_Host_Types::AudioProcessingType>::__assign_multi<std::__tree_const_iterator<DSP_Host_Types::AudioProcessingType,std::__tree_node<DSP_Host_Types::AudioProcessingType,void *> *,long>>((uint64_t)v203, *v143, (void *)this + 44);
        }
        v203[10] = *v54;
        char v204 = *((unsigned char *)this + 340);
        unsigned int v205 = v140;
        if (*((void *)this + 46)) {
          DSP_Host_OffloadDictionary::deep_copy((DSP_Host_OffloadDictionary *)buf);
        }
        float64x2_t v64 = this;
        if (*((unsigned char *)this + 328))
        {
          HALS_IOContextDescription::UpdateDSPStreamFormat(this, v138);
          float64x2_t v64 = this;
          if (!*((unsigned char *)this + 328)) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          if (*((_DWORD *)this + 70) == 1)
          {
            long long v65 = *((_OWORD *)this + 19);
            long long v206 = *(_OWORD *)&v138->mSampleRate;
            long long v207 = v65;
            uint64_t v208 = *((void *)this + 40);
            if (!v209) {
              char v209 = 1;
            }
          }
        }
        int v201 = *((_DWORD *)this + 108);
        char v202 = *((unsigned char *)this + 436);
        uint64_t v67 = *((void *)v64 + 7);
        uint64_t v66 = *((void *)v64 + 8);
        HALS_IOStreamGroup::push_back(v57, (HALS_IOStreamInfo *)v190);
        uint64_t v56 = 0x21CFB2B78C13521DLL * ((v66 - v67) >> 3);
        if (*((_DWORD *)k + 3) >= 3u)
        {
          int v55 = 1;
LABEL_142:
          if (*((unsigned char *)this + 340)) {
            *(_DWORD *)&v171[4] = 4;
          }
          HALS_IOStreamInfo::HALS_IOStreamInfo((HALS_IOStreamInfo *)buf);
          v189[30] = (uint64_t)v167[0];
          uint8_t buf[8] = 1;
          *(_DWORD *)&unsigned char buf[12] = *(_DWORD *)v171;
          int v186 = 2;
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v189, 9u, 9);
          long long v154 = *(_OWORD *)&v170[16];
          long long v155 = *(_OWORD *)&v170[32];
          long long v156 = *(_OWORD *)v171;
          long long v157 = *(_OWORD *)&v171[16];
          *(_OWORD *)float64x2_t v150 = *(_OWORD *)v167;
          long long v151 = v168;
          long long v152 = v169;
          long long v153 = *(_OWORD *)v170;
          HALS_IODSPInfo::AddStream(&v187, (long long *)v150);
          HALS_IOStreamGroup::push_back(v57, (HALS_IOStreamInfo *)buf);
          HALS_IOStreamInfo::~HALS_IOStreamInfo((HALS_IOStreamInfo *)buf);
          continue;
        }
      }
      float v68 = (char **)(*(void *)v57 + 424 * v56 + 112);
      v166[4] = *(_OWORD *)&v170[16];
      v166[5] = *(_OWORD *)&v170[32];
      v166[6] = *(_OWORD *)v171;
      v166[7] = *(_OWORD *)&v171[16];
      v166[0] = *(_OWORD *)v167;
      v166[1] = v168;
      v166[2] = v169;
      v166[3] = *(_OWORD *)v170;
      HALS_IODSPInfo::AddStream(v68, v166);
      int v55 = 1;
LABEL_139:
      if (*((_DWORD *)k + 3) >= 2u) {
        goto LABEL_142;
      }
    }
  }
  if (*((void *)this + 7) != *((void *)this + 8))
  {
    int v69 = (AMCP::Log::Scope_Registry *)HALS_IOContextDescription::HostedDSPDescription::DebugString_DSPTypes((HALS_IOContextDescription::HostedDSPDescription *)&v181, (uint64_t)this + 256);
    CFDictionaryRef v2 = v139;
    unint64_t v70 = v183;
    if ((v183 & 0x80u) != 0) {
      unint64_t v70 = (unint64_t)p_dst;
    }
    if (v70)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
      if ((v183 & 0x80u) == 0) {
        int v71 = &v181;
      }
      else {
        int v71 = v181;
      }
      if ((v183 & 0x80u) == 0) {
        uint64_t v72 = v183;
      }
      else {
        uint64_t v72 = (uint64_t)p_dst;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)v71, v72);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)" ", 1);
      float64x2_t v73 = (HALS_ObjectMap *)*((void *)this + 7);
      uint64_t v141 = (HALS_ObjectMap *)*((void *)this + 8);
      if (v73 != v141)
      {
        int v74 = 0;
        do
        {
          int v148 = v74;
          int v75 = (*(uint64_t (**)(HALS_IOContextDescription *, uint64_t))(*(void *)this + 16))(this, 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)"[", 1);
          uint64_t v76 = *((void *)v73 + 14);
          uint64_t v77 = *((void *)v73 + 15);
          float64x2_t v144 = v73;
          if (v76 != v77)
          {
            if (v75) {
              int v78 = "";
            }
            else {
              int v78 = "~";
            }
            uint64_t v79 = v75 ^ 1u;
            do
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)"(", 1);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)v78, v79);
              uint64_t v80 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)" (#", 3);
              int v81 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)") ", 2);
              unsigned int v82 = *(_DWORD *)(v76 + 100) - 1;
              float64x2_t v83 = "PRIM";
              if (v82 <= 4) {
                float64x2_t v83 = off_1E6230A10[v82];
              }
              size_t v84 = strlen(v83);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)v83, v84);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)")", 1);
              v76 += 128;
            }
            while (v76 != v77);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)"]", 1);
          int v74 = v148 + 1;
          float64x2_t v73 = (HALS_ObjectMap *)((char *)v144 + 424);
        }
        while ((HALS_ObjectMap *)((char *)v144 + 424) != v141);
      }
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>(&__dst, (uint64_t)&buf[24]);
      *(_OWORD *)float64x2_t v167 = __dst;
      *(void *)&long long v168 = v180;
      BYTE8(v168) = 1;
      *(void *)AudioObjectPropertyAddress buf = *MEMORY[0x1E4FBA408];
      uint64_t v85 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA408] + 64);
      *(void *)&buf[16] = v85;
      *(void *)&unsigned char buf[24] = MEMORY[0x1E4FBA470] + 16;
      CFDictionaryRef v2 = v139;
      if (SHIBYTE(v186) < 0) {
        operator delete((void *)v185[7]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      int v69 = (AMCP::Log::Scope_Registry *)MEMORY[0x1C1859700](&v188);
      if ((v183 & 0x80) == 0) {
        goto LABEL_171;
      }
    }
    else
    {
      LOBYTE(v167[0]) = 0;
      BYTE8(v168) = 0;
      if ((v183 & 0x80) == 0)
      {
LABEL_171:
        if (BYTE8(v168))
        {
          AMCP::Log::Scope_Registry::get(v69);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          float32x4_t v86 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
          {
            float32x4_t v87 = pthread_self();
            mach_port_t v88 = pthread_mach_thread_np(v87);
            unint64_t v89 = 0;
            float32x4_t v90 = 0;
            int v91 = 47;
            do
            {
              float32x4_t v92 = &aLibraryCachesC_186[v89];
              if (v91 == 47) {
                float32x4_t v90 = &aLibraryCachesC_186[v89];
              }
              int v91 = v92[1];
              if (!v92[1]) {
                break;
              }
              BOOL v27 = v89++ >= 0xFFF;
            }
            while (!v27);
            int v93 = *((_DWORD *)this + 110);
            if (v90) {
              float32x4_t v94 = v90 + 1;
            }
            else {
              float32x4_t v94 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/DSP/HALS_IOContextDescription_HostedDSP.cpp";
            }
            int v95 = v167;
            if (SBYTE7(v168) < 0) {
              int v95 = (CFDictionaryRef *)v167[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 67110403;
            *(_DWORD *)&uint8_t buf[4] = v88;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = v94;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&unsigned char buf[20] = 327;
            *(_WORD *)&unsigned char buf[24] = 1024;
            *(_DWORD *)&buf[26] = v93;
            *(_WORD *)&unsigned char buf[30] = 1024;
            LODWORD(v185[0]) = v140;
            WORD2(v185[0]) = 2081;
            *(void *)((char *)v185 + 6) = v95;
            _os_log_impl(&dword_1BAA78000, v86, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d [hal_dsp][comp] (Context ID: %d)(Device ID: %d)%{private}s", buf, 0x2Eu);
          }
        }
        goto LABEL_188;
      }
    }
    operator delete(v181);
    goto LABEL_171;
  }
  LOBYTE(v167[0]) = 0;
  BYTE8(v168) = 0;
  CFDictionaryRef v2 = v139;
LABEL_188:
  *(void *)&long long __dst = *((void *)this + 3);
  float64x2_t v181 = caulk::function_ref<int ()(unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContextDescription::ForceDSPToUseMasterEngineSampleRate(void)::$_0>;
  p_dst = &__dst;
  *(void *)AudioObjectPropertyAddress buf = caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_IOContextDescription::ApplyToInput(caulk::function_ref<int ()(unsigned int,HALS_IOStreamInfo&)>)::$_0>;
  *(void *)&uint8_t buf[8] = &v181;
  VisitableVector<HALS_IOStreamInfo>::apply<>(*((void *)this + 7), *((void *)this + 8), (long long *)buf);
  if (BYTE8(v168) && SBYTE7(v168) < 0) {
    operator delete(v167[0]);
  }
  HALS_IOStreamInfo::~HALS_IOStreamInfo((HALS_IOStreamInfo *)v190);
  char v32 = 1;
LABEL_192:
  if (__p) {
    operator delete(__p);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)v174[1]);
  HALS_ObjectMap::ReleaseObject(v142, v96);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v175);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v177);
  if ((v32 & 1) == 0) {
    goto LABEL_195;
  }
}

void sub_1BAECEED8(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,HALS_ObjectMap *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p)
{
  HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)&STACK[0x500], a2);
  if (__p) {
    operator delete(__p);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)STACK[0x2F0]);
  HALS_ObjectMap::ReleaseObject(a21, v26);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x300]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x310]);
  _Unwind_Resume(a1);
}

void sub_1BAECEFC0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BAECEFC4);
  }
  JUMPOUT(0x1BAECF0D0);
}

void sub_1BAECEFE0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAECEFE4);
  }
  __clang_call_terminate(a1);
}

void sub_1BAECEFEC()
{
}

void sub_1BAECF004()
{
}

void sub_1BAECF00C()
{
}

void sub_1BAECF038()
{
}

void sub_1BAECF050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

void sub_1BAECF0C8(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAECF0D0);
  }
  __clang_call_terminate(a1);
}

void HALS_IOContextDescription::SetFromCFRepresentation_ProcessOutputStreams(HALS_IOContextDescription *this, CFTypeRef cf)
{
  uint64_t v163 = *MEMORY[0x1E4F143B8];
  CFRetain(cf);
  v146[1] = cf;
  v146[0] = &unk_1F14898A0;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v144, (CFDictionaryRef)cf, @"grid-out");
  CFArrayRef v4 = v145;
  if (v145)
  {
    uint64_t v5 = 0;
    unsigned int v6 = 0;
    unsigned int v7 = 0;
    uint64_t v117 = *((void *)this + 49);
    float64x2_t v119 = 0;
    uint64_t v114 = (char *)this + 376;
    int v113 = (char *)this + 400;
    int v112 = (AudioStreamBasicDescription *)((char *)this + 288);
    float64x2_t v109 = (uint64_t *)((char *)this + 80);
    mach_port_t v111 = (void *)((char *)this + 384);
    char v108 = (char *)this + 96;
    while ((unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v4) > v7)
    {
      int v141 = 0;
      unint64_t v143 = 0;
      int64x2_t v142 = 0uLL;
      unsigned int v110 = v7;
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v139, (uint64_t)v144, v7);
      if (v140)
      {
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)buf, v140, @"channels");
        int v141 = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v148.i64[0], 0);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v137, v140, @"stream groups");
        for (unsigned int i = 0; (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v138) > i; ++i)
        {
          OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Array>((const __CFArray *)v135, (uint64_t)v137, i);
          CFArrayRef v9 = v136;
          if (v136)
          {
            unsigned int v116 = i;
            uint64_t v10 = this;
            unsigned int v11 = 0;
            uint64_t v132 = 0;
            uint64_t v133 = 0;
            uint64_t v134 = 0;
            while ((unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v9) > v11)
            {
              unsigned int v12 = v11;
              OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v130, (uint64_t)v135, v11);
              if (theDict)
              {
                OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v128, theDict, @"uid");
                CFDictionaryRef EngineInfo = (const __CFDictionary *)HALS_IOContextDescription::SetFromCFRepresentation_MakeEngineInfo(v10, v129);
                if (EngineInfo)
                {
                  HALS_IOContextDescription::SetFromCFRepresentation_UpdateEngineInfo(0, theDict, EngineInfo, v13);
                  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)buf, theDict, @"index");
                  unsigned __int32 v15 = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v148.i64[0], 0);
                  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
                  if (v117)
                  {
                    CFDictionaryRef v16 = (const __CFDictionary *)v15;
                    if (v6 >= v119)
                    {
                      uint64_t v32 = (v6 - v5) >> 4;
                      unint64_t v33 = v32 + 1;
                      if ((unint64_t)(v32 + 1) >> 60) {
                        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                      }
                      if ((v119 - v5) >> 3 > v33) {
                        unint64_t v33 = (v119 - v5) >> 3;
                      }
                      if ((unint64_t)(v119 - v5) >= 0x7FFFFFFFFFFFFFF0) {
                        unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v34 = v33;
                      }
                      if (v34)
                      {
                        if (v34 >> 60) {
                          std::__throw_bad_array_new_length[abi:ne180100]();
                        }
                        uint64_t v35 = (char *)operator new(16 * v34);
                      }
                      else
                      {
                        uint64_t v35 = 0;
                      }
                      CFStringRef v36 = (const __CFDictionary **)&v35[16 * v32];
                      *CFStringRef v36 = EngineInfo;
                      v36[1] = v16;
                      if (v6 == v5)
                      {
                        long long v38 = &v35[16 * v32];
                      }
                      else
                      {
                        uint64_t v37 = &v35[16 * v32];
                        do
                        {
                          long long v38 = v37 - 16;
                          *((_OWORD *)v37 - 1) = *((_OWORD *)v6 - 1);
                          v6 -= 16;
                          v37 -= 16;
                        }
                        while (v6 != v5);
                      }
                      float64x2_t v119 = &v35[16 * v34];
                      unsigned int v6 = (char *)(v36 + 2);
                      if (v5) {
                        operator delete(v5);
                      }
                      uint64_t v5 = v38;
                    }
                    else
                    {
                      *(void *)unsigned int v6 = EngineInfo;
                      *((void *)v6 + 1) = v15;
                      v6 += 16;
                    }
                  }
                  else
                  {
                    HALS_IOStreamInfo::HALS_IOStreamInfo((HALS_IOStreamInfo *)buf);
                    *(void *)&v162[48] = EngineInfo;
                    v148.i8[0] = 0;
                    v148.i32[1] = v15;
                    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v126, theDict, @"channel map");
                    CFArrayRef v17 = v127;
                    if (v127)
                    {
                      unsigned int v18 = 0;
                      v150[28] = 1;
                      while ((unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v17) > v18)
                      {
                        unsigned int v19 = v18;
                        OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Number>(&v121, (uint64_t)v126, v18);
                        int v20 = OS::CF::Number::GetValue<int>(*((const __CFNumber **)&v121 + 1), 0xFFFFFFFFLL);
                        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v121);
                        char v21 = v152;
                        if ((unint64_t)v152 >= v153)
                        {
                          uint64_t v23 = (char *)__p;
                          uint64_t v24 = (v152 - (unsigned char *)__p) >> 2;
                          unint64_t v25 = v24 + 1;
                          if ((unint64_t)(v24 + 1) >> 62) {
                            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                          }
                          uint64_t v26 = v153 - (void)__p;
                          if ((uint64_t)(v153 - (void)__p) >> 1 > v25) {
                            unint64_t v25 = v26 >> 1;
                          }
                          BOOL v27 = (unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL;
                          unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
                          if (!v27) {
                            unint64_t v28 = v25;
                          }
                          if (v28)
                          {
                            unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v28);
                            char v21 = v152;
                            uint64_t v23 = (char *)__p;
                          }
                          else
                          {
                            uint64_t v29 = 0;
                          }
                          uint64_t v30 = (char *)(v28 + 4 * v24);
                          *(_DWORD *)uint64_t v30 = v20;
                          uint64_t v22 = v30 + 4;
                          while (v21 != v23)
                          {
                            int v31 = *((_DWORD *)v21 - 1);
                            v21 -= 4;
                            *((_DWORD *)v30 - 1) = v31;
                            v30 -= 4;
                          }
                          std::string __p = v30;
                          long long v152 = v22;
                          unint64_t v153 = v28 + 4 * v29;
                          if (v23) {
                            operator delete(v23);
                          }
                        }
                        else
                        {
                          *(_DWORD *)long long v152 = v20;
                          uint64_t v22 = v21 + 4;
                        }
                        long long v152 = v22;
                        unsigned int v18 = v19 + 1;
                        CFArrayRef v17 = v127;
                      }
                    }
                    if (*((void *)EngineInfo + 1))
                    {
                      *(void *)&long long v123 = 0;
                      long long v121 = 0u;
                      long long v122 = 0u;
                      (*(void (**)(void *, void, void, long long *))(**((void **)EngineInfo + 1)
                                                                                   + 432))(*((void **)EngineInfo + 1), v148.u8[0], v148.u32[1], &v121);
                      *(_OWORD *)&v162[8] = v121;
                      *(_OWORD *)&v162[24] = v122;
                      *(void *)&v162[40] = v123;
                      if (HIDWORD(v154))
                      {
                        long long v158 = v121;
                        long long v159 = v122;
                        uint64_t v160 = v123;
                        if (!v161) {
                          char v161 = 1;
                        }
                      }
                      DWORD2(v154) = (*(uint64_t (**)(void *, void, void))(**((void **)EngineInfo + 1)
                                                                                         + 424))(*((void **)EngineInfo + 1), v148.u8[0], v148.u32[1]);
                    }
                    HALS_IOStreamGroup::push_back((HALS_IOStreamGroup *)&v132, (HALS_IOStreamInfo *)buf);
                    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v126);
                    HALS_IOStreamInfo::~HALS_IOStreamInfo((HALS_IOStreamInfo *)buf);
                  }
                }
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v128);
              }
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v130);
              unsigned int v11 = v12 + 1;
              CFArrayRef v9 = v136;
            }
            if (v117)
            {
              long long v39 = v5;
              this = v10;
              if (v5 != v6)
              {
                HALS_IOStreamInfo::HALS_IOStreamInfo((HALS_IOStreamInfo *)buf);
                *(void *)&v162[48] = 0;
                v148.i8[0] = 0;
                uint64_t v40 = v5;
                v148.i32[1] = 0;
                HIDWORD(v154) = 1;
                do
                {
                  uint64_t v41 = *(void *)v40;
                  uint64_t v42 = *(void *)(*(void *)v40 + 8);
                  if (v42)
                  {
                    int DeviceIDFromEngineID = HALS_IOContextDescription::GetDeviceIDFromEngineID((HALS_IOContextDescription *)*(unsigned int *)(v42 + 16));
                    uint64_t v41 = *(void *)v40;
                  }
                  else
                  {
                    int DeviceIDFromEngineID = 0;
                  }
                  int v44 = *((_DWORD *)v40 + 2);
                  *(void *)&long long v121 = v41;
                  DWORD2(v121) = DeviceIDFromEngineID;
                  *(void *)&long long v122 = 0;
                  DWORD2(v122) = 0;
                  *(void *)&long long v123 = 0;
                  DWORD2(v123) = 0;
                  *(_DWORD *)float64x2_t v124 = 0;
                  memset(&v124[8], 0, 40);
                  *(_DWORD *)mach_port_t v125 = v44;
                  v125[28] = 0;
                  memset(&v125[4], 0, 21);
                  (*(void (**)(void))(**(void **)(*(void *)v40 + 8) + 432))();
                  v120[4] = *(_OWORD *)&v124[16];
                  v120[5] = *(_OWORD *)&v124[32];
                  v120[6] = *(_OWORD *)v125;
                  v120[7] = *(_OWORD *)&v125[16];
                  v120[0] = v121;
                  v120[1] = v122;
                  v120[2] = v123;
                  v120[3] = *(_OWORD *)v124;
                  HALS_IODSPInfo::AddStream(v155, v120);
                  v40 += 16;
                }
                while (v40 != v6);
                if (v156 != v114) {
                  std::__tree<DSP_Host_Types::AudioProcessingType>::__assign_multi<std::__tree_const_iterator<DSP_Host_Types::AudioProcessingType,std::__tree_node<DSP_Host_Types::AudioProcessingType,void *> *,long>>((uint64_t)v156, *(void **)v114, v111);
                }
                std::__optional_storage_base<CA::ChannelLayout,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<CA::ChannelLayout,false> const&>((uint64_t)&v157, (uint64_t)v113);
                if (*((unsigned char *)v10 + 328))
                {
                  HALS_IOContextDescription::UpdateDSPStreamFormat(v10, v112);
                  if (!*((unsigned char *)v10 + 328)) {
                    std::__throw_bad_optional_access[abi:ne180100]();
                  }
                  if (*((_DWORD *)v10 + 70) == 1)
                  {
                    long long v45 = *(_OWORD *)&v112->mBytesPerPacket;
                    long long v158 = *(_OWORD *)&v112->mSampleRate;
                    long long v159 = v45;
                    uint64_t v160 = *(void *)&v112->mBitsPerChannel;
                    if (!v161) {
                      char v161 = 1;
                    }
                  }
                }
                HALS_IOStreamGroup::push_back((HALS_IOStreamGroup *)&v132, (HALS_IOStreamInfo *)buf);
                HALS_IOStreamInfo::~HALS_IOStreamInfo((HALS_IOStreamInfo *)buf);
                long long v39 = v6;
              }
            }
            else
            {
              long long v39 = v6;
              this = v10;
            }
            if (v132 != v133)
            {
              uint64_t v46 = (void *)v142.i64[1];
              if (v142.i64[1] >= v143)
              {
                unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((v142.i64[1] - v142.i64[0]) >> 3);
                unint64_t v49 = v48 + 1;
                if (v48 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556 * ((uint64_t)(v143 - v142.i64[0]) >> 3) > v49) {
                  unint64_t v49 = 0x5555555555555556 * ((uint64_t)(v143 - v142.i64[0]) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v143 - v142.i64[0]) >> 3) >= 0x555555555555555) {
                  unint64_t v50 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v50 = v49;
                }
                *((void *)&v149 + 1) = &v143;
                if (v50) {
                  unint64_t v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v50);
                }
                else {
                  uint64_t v51 = 0;
                }
                float64x2_t v52 = (void *)(v50 + 24 * v48);
                *(void *)AudioObjectPropertyAddress buf = v50;
                v148.i64[0] = (uint64_t)v52;
                v148.i64[1] = (uint64_t)v52;
                *(void *)&long long v149 = v50 + 24 * v51;
                void *v52 = 0;
                v52[1] = 0;
                v52[2] = 0;
                std::vector<HALS_IOStreamInfo>::__init_with_size[abi:ne180100]<HALS_IOStreamInfo*,HALS_IOStreamInfo*>(v52, v132, v133, 0x21CFB2B78C13521DLL * ((v133 - v132) >> 3));
                uint64_t v53 = v148.i64[0];
                uint64_t v47 = v148.i64[1] + 24;
                v148.i64[1] += 24;
                float64x2_t v54 = (void *)v142.i64[1];
                int v55 = (void *)v142.i64[0];
                if (v142.i64[1] == v142.i64[0])
                {
                  int64x2_t v57 = vdupq_n_s64(v142.u64[1]);
                }
                else
                {
                  do
                  {
                    *(void *)(v53 - 24) = 0;
                    *(void *)(v53 - 16) = 0;
                    v53 -= 24;
                    *(void *)(v53 + 16) = 0;
                    long long v56 = *(_OWORD *)(v54 - 3);
                    v54 -= 3;
                    *(_OWORD *)uint64_t v53 = v56;
                    *(void *)(v53 + 16) = v54[2];
                    void *v54 = 0;
                    v54[1] = 0;
                    CFTypeRef v54[2] = 0;
                  }
                  while (v54 != v55);
                  int64x2_t v57 = v142;
                  uint64_t v47 = v148.i64[1];
                }
                v142.i64[0] = v53;
                v142.i64[1] = v47;
                int64x2_t v148 = v57;
                unint64_t v58 = v143;
                unint64_t v143 = v149;
                *(void *)&long long v149 = v58;
                *(void *)AudioObjectPropertyAddress buf = v57.i64[0];
                std::__split_buffer<HALS_IOStreamGroup>::~__split_buffer((uint64_t)buf);
              }
              else
              {
                *(void *)v142.i64[1] = 0;
                v46[1] = 0;
                v46[2] = 0;
                std::vector<HALS_IOStreamInfo>::__init_with_size[abi:ne180100]<HALS_IOStreamInfo*,HALS_IOStreamInfo*>(v46, v132, v133, 0x21CFB2B78C13521DLL * ((v133 - v132) >> 3));
                uint64_t v47 = (uint64_t)(v46 + 3);
              }
              v142.i64[1] = v47;
            }
            *(void *)AudioObjectPropertyAddress buf = &v132;
            std::vector<HALS_IOStreamInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
            unsigned int v6 = v39;
            unsigned int i = v116;
          }
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v135);
        }
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v137);
      }
      int64x2_t v59 = v142;
      if (v142.i64[0] != v142.i64[1])
      {
        unint64_t v61 = *((void *)this + 11);
        unint64_t v60 = *((void *)this + 12);
        if (v61 >= v60)
        {
          uint64_t v63 = (uint64_t)(v61 - *v109) >> 5;
          if ((unint64_t)(v63 + 1) >> 59) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v64 = v60 - *v109;
          uint64_t v65 = v64 >> 4;
          if (v64 >> 4 <= (unint64_t)(v63 + 1)) {
            uint64_t v65 = v63 + 1;
          }
          if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v66 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v66 = v65;
          }
          *((void *)&v149 + 1) = v108;
          if (v66)
          {
            if (v66 >> 59) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v67 = (char *)operator new(32 * v66);
          }
          else
          {
            uint64_t v67 = 0;
          }
          float v68 = &v67[32 * v63];
          *(void *)AudioObjectPropertyAddress buf = v67;
          v148.i64[0] = (uint64_t)v68;
          v148.i64[1] = (uint64_t)v68;
          *(void *)&long long v149 = &v67[32 * v66];
          *(_DWORD *)float v68 = v141;
          *((void *)v68 + 2) = 0;
          *((void *)v68 + 3) = 0;
          *((void *)v68 + 1) = 0;
          std::vector<HALS_IOStreamGroup>::__init_with_size[abi:ne180100]<HALS_IOStreamGroup*,HALS_IOStreamGroup*>((void *)v68 + 1, (uint64_t *)v59.i64[0], (uint64_t *)v59.i64[1], 0xAAAAAAAAAAAAAAABLL * ((v59.i64[1] - v59.i64[0]) >> 3));
          v148.i64[1] += 32;
          std::vector<std::pair<unsigned int,std::vector<unsigned int>>>::__swap_out_circular_buffer(v109, buf);
          unint64_t v62 = *((void *)this + 11);
          std::__split_buffer<HALS_IOStackDescription>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          *(_DWORD *)unint64_t v61 = v141;
          *(void *)(v61 + 8) = 0;
          *(void *)(v61 + 16) = 0;
          *(void *)(v61 + 24) = 0;
          std::vector<HALS_IOStreamGroup>::__init_with_size[abi:ne180100]<HALS_IOStreamGroup*,HALS_IOStreamGroup*>((void *)(v61 + 8), (uint64_t *)v142.i64[0], (uint64_t *)v142.i64[1], 0xAAAAAAAAAAAAAAABLL * ((v142.i64[1] - v142.i64[0]) >> 3));
          unint64_t v62 = v61 + 32;
          *((void *)this + 11) = v62;
        }
        *((void *)this + 11) = v62;
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v139);
      *(void *)AudioObjectPropertyAddress buf = &v142;
      std::vector<HALS_IOStreamGroup>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      unsigned int v7 = v110 + 1;
      CFArrayRef v4 = v145;
    }
    if (v5) {
      operator delete(v5);
    }
  }
  unint64_t v70 = *((void *)this + 7);
  unint64_t v69 = *((void *)this + 8);
  unint64_t v71 = v70;
  if (v70 < v69)
  {
    unint64_t v71 = *((void *)this + 7);
    do
    {
      if (*(_DWORD *)(v71 + 108) == 1) {
        break;
      }
      v71 += 424;
    }
    while (v71 < v69);
  }
  if (v69 != v71 && v70 != v69)
  {
    uint64_t v72 = 0;
    float64x2_t v73 = 0;
    unint64_t v118 = 0;
    unint64_t v115 = *((void *)this + 8);
    do
    {
      *(void *)AudioObjectPropertyAddress buf = &unk_1F1489938;
      long long v74 = *(_OWORD *)(v70 + 24);
      long long v75 = *(_OWORD *)(v70 + 40);
      int64x2_t v76 = *(int64x2_t *)(v70 + 8);
      *(_OWORD *)&v150[13] = *(_OWORD *)(v70 + 53);
      long long v149 = v74;
      *(_OWORD *)float64x2_t v150 = v75;
      int64x2_t v148 = v76;
      long long v152 = 0;
      unint64_t v153 = 0;
      std::string __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v70 + 72), *(void *)(v70 + 80), (uint64_t)(*(void *)(v70 + 80) - *(void *)(v70 + 72)) >> 2);
      long long v154 = *(_OWORD *)(v70 + 96);
      HALS_IODSPInfo::HALS_IODSPInfo((HALS_IODSPInfo *)v155, (const HALS_IODSPInfo *)(v70 + 112));
      long long v77 = *(_OWORD *)(v70 + 360);
      long long v78 = *(_OWORD *)(v70 + 376);
      long long v79 = *(_OWORD *)(v70 + 392);
      *(_OWORD *)&v162[41] = *(_OWORD *)(v70 + 401);
      *(_OWORD *)&v162[16] = v78;
      *(_OWORD *)&v162[32] = v79;
      *(_OWORD *)long long v162 = v77;
      if (!HIDWORD(v154) || (uint64_t v80 = v155[0], v155[1] == v155[0]) || !v155[0]) {
        uint64_t v80 = &v162[48];
      }
      uint64_t v81 = *(void *)(*(void *)v80 + 8);
      if (v81)
      {
        uint64_t v82 = (*(uint64_t (**)(uint64_t))(*(void *)v81 + 320))(v81);
        if (v82)
        {
          int v83 = *(_DWORD *)(v82 + 16);
          if ((unint64_t)v72 >= v118)
          {
            uint64_t v84 = (v72 - v73) >> 2;
            unint64_t v85 = v84 + 1;
            if ((unint64_t)(v84 + 1) >> 62) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v118 - (void)v73) >> 1 > v85) {
              unint64_t v85 = (uint64_t)(v118 - (void)v73) >> 1;
            }
            if (v118 - (unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v86 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v86 = v85;
            }
            if (v86) {
              unint64_t v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v86);
            }
            else {
              uint64_t v87 = 0;
            }
            mach_port_t v88 = (char *)(v86 + 4 * v84);
            *(_DWORD *)mach_port_t v88 = v83;
            for (unsigned int j = v88 + 4; v72 != v73; v88 -= 4)
            {
              int v90 = *((_DWORD *)v72 - 1);
              v72 -= 4;
              *((_DWORD *)v88 - 1) = v90;
            }
            unint64_t v118 = v86 + 4 * v87;
            if (v73) {
              operator delete(v73);
            }
            uint64_t v72 = j;
            float64x2_t v73 = v88;
            unint64_t v69 = v115;
          }
          else
          {
            *(_DWORD *)uint64_t v72 = v83;
            v72 += 4;
          }
        }
      }
      HALS_IOStreamInfo::~HALS_IOStreamInfo((HALS_IOStreamInfo *)buf);
      v70 += 424;
    }
    while (v70 != v69);
    if (v73 != v72)
    {
      float32x4_t v92 = *(_DWORD **)(v71 + 144);
      int v93 = v73;
      do
      {
        int v94 = *(_DWORD *)v93;
        int v95 = v92;
        if (*(_DWORD **)(v71 + 136) != v92)
        {
          int v95 = *(_DWORD **)(v71 + 136);
          while (*v95 != v94)
          {
            if (++v95 == v92) {
              goto LABEL_153;
            }
          }
        }
        if (v92 == v95)
        {
LABEL_153:
          AMCP::Log::Scope_Registry::get(v91);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          float32x4_t v96 = **(NSObject ***)buf;
          if (v148.i64[0]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v148.i64[0]);
          }
          int v91 = (AMCP::Log::Scope_Registry *)os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG);
          if (v91)
          {
            char v106 = pthread_self();
            mach_port_t v107 = pthread_mach_thread_np(v106);
            *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v107;
            v148.i16[0] = 2080;
            *(uint64_t *)((char *)v148.i64 + 2) = (uint64_t)"HALS_IODSPInfo.cpp";
            v148.i16[5] = 1024;
            v148.i32[3] = 181;
            LOWORD(v149) = 1024;
            *(_DWORD *)((char *)&v149 + 2) = v94;
            _os_log_debug_impl(&dword_1BAA78000, v96, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] Adding reference candidate with (Device ID: %u)", buf, 0x1Eu);
          }
          float32x4_t v98 = *(char **)(v71 + 144);
          unint64_t v97 = *(void *)(v71 + 152);
          if ((unint64_t)v98 >= v97)
          {
            int v91 = *(AMCP::Log::Scope_Registry **)(v71 + 136);
            uint64_t v99 = (v98 - (char *)v91) >> 2;
            unint64_t v100 = v99 + 1;
            if ((unint64_t)(v99 + 1) >> 62) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v101 = v97 - (void)v91;
            if (v101 >> 1 > v100) {
              unint64_t v100 = v101 >> 1;
            }
            if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v102 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v102 = v100;
            }
            if (v102)
            {
              unint64_t v102 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v102);
              int v91 = *(AMCP::Log::Scope_Registry **)(v71 + 136);
              float32x4_t v98 = *(char **)(v71 + 144);
            }
            else
            {
              uint64_t v103 = 0;
            }
            int v104 = (_DWORD *)(v102 + 4 * v99);
            _DWORD *v104 = v94;
            float32x4_t v92 = v104 + 1;
            while (v98 != (char *)v91)
            {
              int v105 = *((_DWORD *)v98 - 1);
              v98 -= 4;
              *--int v104 = v105;
            }
            *(void *)(v71 + 136) = v104;
            *(void *)(v71 + 144) = v92;
            *(void *)(v71 + 152) = v102 + 4 * v103;
            if (v91) {
              operator delete(v91);
            }
          }
          else
          {
            *(_DWORD *)float32x4_t v98 = v94;
            float32x4_t v92 = v98 + 4;
          }
          *(void *)(v71 + 144) = v92;
        }
        v93 += 4;
      }
      while (v93 != v72);
      uint64_t v72 = v73;
    }
    if (v72) {
      operator delete(v72);
    }
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v144);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v146);
}

void sub_1BAECFF8C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void HALS_IOContextDescription::SetFromCFRepresentation_ProcessEngines(HALS_IOContextDescription *this)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (int8x16_t *)*((void *)this + 4);
  CFDictionaryRef v2 = (int8x16_t *)*((void *)this + 5);
  if (v3 != v2)
  {
    while (*(_DWORD *)(v3->i64[0] + 744))
    {
      uint64_t v3 = (int8x16_t *)((char *)v3 + 8);
      if (v3 == v2)
      {
        uint64_t v3 = (int8x16_t *)*((void *)this + 5);
        goto LABEL_19;
      }
    }
    CFArrayRef v4 = (int8x16_t *)((char *)v2 - 8);
    while (1)
    {
      uint64_t v5 = (char *)v4 - (char *)v3;
      if (v4 == v3) {
        break;
      }
      unsigned int v6 = (uint64_t *)v4;
      uint64_t v7 = v4->i64[0];
      CFArrayRef v4 = (int8x16_t *)((char *)v4 - 8);
      if (*(_DWORD *)(v7 + 744))
      {
        uint64_t v8 = (v5 >> 3) + 1;
        if (v5 < 17)
        {
LABEL_15:
          unint64_t v13 = 0;
          unint64_t v9 = 0;
        }
        else
        {
          if (v8 >= 0xFFFFFFFFFFFFFFFLL) {
            unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v9 = (v5 >> 3) + 1;
          }
          uint64_t v10 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
          while (1)
          {
            unsigned int v11 = (uint64_t *)operator new(8 * v9, v10);
            if (v11) {
              break;
            }
            BOOL v12 = v9 > 1;
            v9 >>= 1;
            if (!v12) {
              goto LABEL_15;
            }
          }
          unint64_t v13 = v11;
        }
        uint64_t v3 = (int8x16_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,HALS_IOContextDescription::SetFromCFRepresentation_ProcessEngines(void)::$_0 &,std::__wrap_iter<std::unique_ptr<HALS_IOEngineInfo> *>,long,std::pair<std::unique_ptr<HALS_IOEngineInfo> *,long>>(v3, v6, v8, v13, v9);
        if (v13) {
          operator delete(v13);
        }
        break;
      }
    }
  }
LABEL_19:
  unsigned __int32 v15 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 110));
  if (!v15 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v24 = 136315394;
    unint64_t v25 = "HALS_IOContextDescription.cpp";
    __int16 v26 = 1024;
    int v27 = 1040;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContextDescription::SetFromCFRepresentation_ProcessEngines: IOContextDescription has outlived owning IOContext", (uint8_t *)&v24, 0x12u);
  }
  for (unsigned int i = v3; i != *((int8x16_t **)this + 5); unsigned int i = (int8x16_t *)((char *)i + 8))
  {
    uint64_t v17 = i->i64[0];
    unsigned int v18 = *(HALS_ObjectMap **)(i->i64[0] + 8);
    if (v18)
    {
      if (v15)
      {
        if (*(unsigned char *)(v17 + 860))
        {
          (*(void (**)(HALS_ObjectMap *, HALS_ObjectMap *))(*(void *)v18 + 208))(v18, v15);
          uint64_t v17 = i->i64[0];
          unsigned int v18 = *(HALS_ObjectMap **)(i->i64[0] + 8);
        }
      }
      *(unsigned char *)(v17 + 860) = 0;
      HALS_ObjectMap::ReleaseObject_LongTerm(v18, v14);
      *(void *)(i->i64[0] + 8) = 0;
    }
  }
  if (v3 != i)
  {
    while (i != v3)
    {
      uint64_t v20 = i[-1].i64[1];
      unsigned int i = (int8x16_t *)((char *)i - 8);
      uint64_t v19 = v20;
      i->i64[0] = 0;
      if (v20) {
        (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      }
    }
    *((void *)this + 5) = v3;
  }
  if (v15)
  {
    for (unsigned int j = (int8x16_t *)*((void *)this + 4); j != v3; unsigned int j = (int8x16_t *)((char *)j + 8))
    {
      uint64_t v22 = j->i64[0];
      if (*(_DWORD *)(j->i64[0] + 744) == 1)
      {
        uint64_t v23 = *(void *)(v22 + 8);
        if (v23 && !*(unsigned char *)(v22 + 860))
        {
          (*(void (**)(uint64_t, HALS_ObjectMap *))(*(void *)v23 + 200))(v23, v15);
          uint64_t v22 = j->i64[0];
          *(unsigned char *)(j->i64[0] + 860) = 1;
        }
        *(_DWORD *)(v22 + 744) = 2;
      }
    }
  }
  HALS_ObjectMap::ReleaseObject(v15, v14);
}

void sub_1BAED042C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__stable_partition_impl<std::_ClassicAlgPolicy,HALS_IOContextDescription::SetFromCFRepresentation_ProcessEngines(void)::$_0 &,std::__wrap_iter<std::unique_ptr<HALS_IOEngineInfo> *>,long,std::pair<std::unique_ptr<HALS_IOEngineInfo> *,long>>(int8x16_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned int v6 = (uint64_t *)a1;
  if (a3 == 3)
  {
    uint64_t v10 = (uint64_t)&a1->i64[1];
    uint64_t v9 = a1->i64[1];
    if (!*(_DWORD *)(v9 + 744))
    {
      a1->i64[1] = *a2;
      *a2 = v9;
      *a1 = vextq_s8(*a1, *a1, 8uLL);
      return (uint64_t *)v10;
    }
    uint64_t v11 = a1->i64[0];
    a1->i64[0] = v9;
    a1->i64[1] = v11;
    a1->i64[1] = *a2;
    *a2 = v11;
    return a2;
  }
  if (a3 == 2)
  {
    uint64_t v8 = a1->i64[0];
    a1->i64[0] = *a2;
    *a2 = v8;
    return a2;
  }
  if (a5 >= a3)
  {
    uint64_t v20 = a1->i64[0];
    a1->i64[0] = 0;
    char v21 = &a1->i64[1];
    *a4 = v20;
    uint64_t v22 = a4 + 1;
    unint64_t v23 = 1;
    while (v21 != a2)
    {
      uint64_t v24 = *v21;
      int v25 = *(_DWORD *)(*v21 + 744);
      *char v21 = 0;
      if (v25)
      {
        uint64_t v26 = *v6;
        uint64_t *v6 = v24;
        if (v26) {
          (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
        }
        ++v6;
      }
      else
      {
        *v22++ = v24;
        ++v23;
      }
      ++v21;
    }
    uint64_t v27 = *a2;
    *a2 = 0;
    uint64_t v28 = *v6;
    uint64_t *v6 = v27;
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
    }
    uint64_t v10 = (uint64_t)(v6 + 1);
    if (v22 > a4)
    {
      uint64_t v29 = a4;
      uint64_t v30 = v6 + 1;
      do
      {
        uint64_t v31 = *v29;
        uint64_t *v29 = 0;
        uint64_t v32 = *v30;
        uint64_t *v30 = v31;
        if (v32) {
          (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
        }
        ++v29;
        ++v30;
      }
      while (v29 < v22);
    }
    if (v23)
    {
      for (unint64_t i = 0; i < v23; ++i)
      {
        uint64_t v34 = a4[i];
        a4[i] = 0;
        if (v34) {
          (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
        }
      }
    }
  }
  else
  {
    if (a3 >= 0) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = a3 + 1;
    }
    uint64_t v16 = v15 >> 1;
    uint64_t v17 = &a1->i64[v15 >> 1];
    unsigned int v18 = (__int8 *)(v17 - 1);
    if (*(_DWORD *)(*(v17 - 1) + 744))
    {
      uint64_t v19 = v15 >> 1;
LABEL_40:
      long long v38 = (uint64_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,HALS_IOContextDescription::SetFromCFRepresentation_ProcessEngines(void)::$_0 &,std::__wrap_iter<std::unique_ptr<HALS_IOEngineInfo> *>,long,std::pair<std::unique_ptr<HALS_IOEngineInfo> *,long>>(a1, v18, v19, a4, a5);
    }
    else
    {
      uint64_t v35 = 8 - 8 * v16;
      uint64_t v36 = v16;
      while (v35)
      {
        uint64_t v19 = v36 - 1;
        int v37 = *(_DWORD *)(a1[-1].i64[v36] + 744);
        v35 += 8;
        --v36;
        if (v37)
        {
          unsigned int v18 = &a1->i8[-v35];
          goto LABEL_40;
        }
      }
      long long v38 = (uint64_t *)a1;
    }
    uint64_t v39 = a3 - v16;
    if (*(_DWORD *)(*v17 + 744))
    {
      uint64_t v10 = (uint64_t)(a2 + 1);
      uint64_t v40 = &v6[v16 + 1];
      while (v40 != a2)
      {
        --v39;
        uint64_t v41 = *v40++;
        if (!*(_DWORD *)(v41 + 744))
        {
          uint64_t v42 = v40 - 1;
          goto LABEL_47;
        }
      }
    }
    else
    {
      uint64_t v42 = v17;
LABEL_47:
      uint64_t v10 = std::__stable_partition_impl<std::_ClassicAlgPolicy,HALS_IOContextDescription::SetFromCFRepresentation_ProcessEngines(void)::$_0 &,std::__wrap_iter<std::unique_ptr<HALS_IOEngineInfo> *>,long,std::pair<std::unique_ptr<HALS_IOEngineInfo> *,long>>(v42, a2, v39, a4, a5);
    }
    if (v38 != v17)
    {
      if (v17 != (uint64_t *)v10)
      {
        uint64_t v43 = *v38;
        *v38++ = *v17;
        for (unsigned int j = v17; ; *v38++ = *j)
        {
          *j++ = v43;
          if (j == (uint64_t *)v10) {
            break;
          }
          if (v38 == v17) {
            uint64_t v17 = j;
          }
          uint64_t v43 = *v38;
        }
        if (v38 == v17) {
          return v17;
        }
        long long v45 = v38;
        uint64_t v46 = v17;
        do
        {
          while (1)
          {
            uint64_t v47 = *v45;
            *v45++ = *v46;
            *v46++ = v47;
            if (v46 == (uint64_t *)v10) {
              break;
            }
            if (v45 == v17) {
              uint64_t v17 = v46;
            }
          }
          uint64_t v46 = v17;
        }
        while (v45 != v17);
      }
      return v38;
    }
  }
  return (uint64_t *)v10;
}

uint64_t HALS_IOContextDescription::SetFromCFRepresentation_MakeEngineInfo(HALS_IOContextDescription *this, const __CFString *a2)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  v64[1] = 0;
  uint64_t v65 = 0;
  v64[0] = 0;
  HALS_System::GetInstance(v73, 0, v64);
  CFArrayRef v4 = HALS_System::CopyDeviceByUID(*(HALS_System **)v73, a2, 0);
  uint64_t v5 = *(AMCP::Feature_Flags **)&v73[8];
  if (*(void *)&v73[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v73[8]);
  }
  int v6 = AMCP::Feature_Flags::allow_unified_device_engine_replacer(v5);
  if (!v4 || !v6) {
    goto LABEL_37;
  }
  uint64_t v7 = *((unsigned int *)v4 + 4);
  strcpy(v73, "Ereabolg");
  v73[9] = 0;
  *(_WORD *)&v73[10] = 0;
  int v69 = 0;
  LODWORD(v70) = 0;
  (*(void (**)(HALS_IODevice *, uint64_t, unsigned char *, uint64_t, int *, CFTypeRef *, void, void, void))(*(void *)v4 + 112))(v4, v7, v73, 4, &v69, &v70, 0, 0, 0);
  if (!v70) {
    goto LABEL_31;
  }
  uint64_t v8 = *((unsigned int *)v4 + 4);
  strcpy(v73, "Ureabolg");
  v73[9] = 0;
  *(_WORD *)&v73[10] = 0;
  CFTypeRef v70 = 0;
  int v69 = 0;
  (*(void (**)(HALS_IODevice *, uint64_t, unsigned char *, uint64_t, int *, CFTypeRef *, void, void, void))(*(void *)v4 + 112))(v4, v8, v73, 8, &v69, &v70, 0, 0, 0);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v70);
  if (!cf) {
    goto LABEL_31;
  }
  *(void *)unint64_t v71 = 0;
  uint64_t v72 = 0;
  HALS_System::GetInstance(v73, 0, (uint64_t *)v71);
  uint64_t v10 = HALS_System::CopyDeviceByUID(*(HALS_System **)v73, (const __CFString *)cf, 0);
  if (*(void *)&v73[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v73[8]);
  }
  if (!v10) {
    goto LABEL_21;
  }
  int NumberStreams = HALS_IODevice::GetNumberStreams(v4, 0);
  int v12 = HALS_IODevice::GetNumberStreams(v4, 1);
  int v13 = HALS_IODevice::GetNumberStreams(v10, 0);
  unint64_t v14 = (AMCP::Log::Scope_Registry *)HALS_IODevice::GetNumberStreams(v10, 1);
  if (NumberStreams != v13 || v12 != v14)
  {
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v73, "com.apple.coreaudio", "AMCP");
    unint64_t v23 = **(NSObject ***)v73;
    if (*(void *)&v73[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v73[8]);
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      unint64_t v58 = pthread_self();
      mach_port_t v59 = pthread_mach_thread_np(v58);
      *(_DWORD *)float64x2_t v73 = 67109634;
      *(_DWORD *)&v73[4] = v59;
      *(_WORD *)&v73[8] = 2080;
      *(void *)&v73[10] = "HALS_Device.cpp";
      __int16 v74 = 1024;
      int v75 = 5689;
      _os_log_error_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d The engine replacer number of streams differs from this device", v73, 0x18u);
    }
LABEL_21:
    uint64_t v24 = 0;
    int v25 = 1;
    goto LABEL_28;
  }
  CFTypeRef v70 = 0;
  CFTypeRef v70 = (CFTypeRef)HALS_IODevice::CopyIOEngine(v10);
  uint64_t v15 = (std::__shared_weak_count *)HALS_IODevice::CopyIOEngine(v10);
  unint64_t v66 = (HALS_System *)&v70;
  uint64_t v67 = v15;
  HALS_ObjectMap::RetainObject((HALS_ObjectMap *)v15, v16);
  uint64_t v17 = (AMCP::Log::Scope_Registry *)HALS_Device::CopyIOEngineReplacer(void)const::$_0::operator()((HALS_ObjectMap ***)&v66, NumberStreams);
  if (v17)
  {
    AMCP::Log::Scope_Registry::get(v17);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v73, "com.apple.coreaudio", "AMCP");
    unsigned int v18 = **(NSObject ***)v73;
    if (*(void *)&v73[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v73[8]);
    }
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      goto LABEL_26;
    }
    uint64_t v20 = pthread_self();
    mach_port_t v21 = pthread_mach_thread_np(v20);
    *(_DWORD *)float64x2_t v73 = 67109634;
    *(_DWORD *)&v73[4] = v21;
    *(_WORD *)&v73[8] = 2080;
    *(void *)&v73[10] = "HALS_Device.cpp";
    __int16 v74 = 1024;
    int v75 = 5717;
    uint64_t v22 = "%6u %32s:%-5d The engine replacer output format differs from this device";
    goto LABEL_90;
  }
  uint64_t v26 = (AMCP::Log::Scope_Registry *)HALS_Device::CopyIOEngineReplacer(void)const::$_0::operator()((HALS_ObjectMap ***)&v66, NumberStreams);
  if (!v26)
  {
    int v25 = 0;
    uint64_t v24 = (HALS_ObjectMap *)v70;
    goto LABEL_27;
  }
  AMCP::Log::Scope_Registry::get(v26);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v73, "com.apple.coreaudio", "AMCP");
  unsigned int v18 = **(NSObject ***)v73;
  if (*(void *)&v73[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v73[8]);
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    unint64_t v60 = pthread_self();
    mach_port_t v61 = pthread_mach_thread_np(v60);
    *(_DWORD *)float64x2_t v73 = 67109634;
    *(_DWORD *)&v73[4] = v61;
    *(_WORD *)&v73[8] = 2080;
    *(void *)&v73[10] = "HALS_Device.cpp";
    __int16 v74 = 1024;
    int v75 = 5724;
    uint64_t v22 = "%6u %32s:%-5d The engine replacer input format differs from this device";
LABEL_90:
    _os_log_error_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_ERROR, v22, v73, 0x18u);
  }
LABEL_26:
  uint64_t v24 = 0;
  int v25 = 1;
LABEL_27:
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v15, v19);
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v15, v27);
LABEL_28:
  HALS_ObjectMap::ReleaseObject(v10, v9);
  if (cf) {
    CFRelease(cf);
  }
  if (v25) {
LABEL_31:
  }
    uint64_t v24 = 0;
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  if (!v24)
  {
LABEL_37:
    uint64_t v24 = 0;
    goto LABEL_38;
  }
  uint64_t v28 = (*(uint64_t (**)(HALS_ObjectMap *))(*(void *)v24 + 320))(v24);
  uint64_t v29 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v28 + 200))(v28);
  uint64_t v30 = v29;
  if (v29) {
    CFRetain(v29);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v73, v30);
  uint64_t v31 = *(const void **)v73;
  uint64_t v65 = *(void *)v73;
  if (*(void *)v73)
  {
    CFRetain(*(CFTypeRef *)v73);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v31);
    char v32 = 0;
    goto LABEL_41;
  }
LABEL_38:
  if (a2) {
    CFRetain(a2);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, a2);
  uint64_t v31 = 0;
  char v32 = 1;
LABEL_41:
  unint64_t v33 = (HALS_Object *)cf;
  if (!cf)
  {
    uint64_t EngineInfoForDeviceUID = 0;
    goto LABEL_85;
  }
  if (v24)
  {
    uint64_t v34 = (uint64_t *)*((void *)this + 4);
    uint64_t v35 = (uint64_t *)*((void *)this + 5);
    if (v34 != v35)
    {
      while (*(HALS_ObjectMap **)(*v34 + 8) != v24)
      {
        if (++v34 == v35) {
          goto LABEL_50;
        }
      }
    }
    if (v34 == v35) {
      goto LABEL_50;
    }
    uint64_t EngineInfoForDeviceUID = *v34;
    if (!*v34) {
      goto LABEL_50;
    }
  }
  else
  {
    uint64_t EngineInfoForDeviceUID = HALS_IOContextDescription::GetEngineInfoForDeviceUID(this, (CFStringRef)cf);
    if (!EngineInfoForDeviceUID)
    {
LABEL_50:
      v63[0] = 0;
      v63[1] = 0;
      HALS_System::GetInstance(&v66, 0, v63);
      CFStringRef v37 = (const __CFString *)cf;
      long long v38 = HALS_System::CopyDeviceByUID(v66, (const __CFString *)cf, 0);
      uint64_t v39 = v38;
      if (!v38 || (uint64_t v41 = HALS_IODevice::CopyIOEngine(v38)) == 0)
      {
        *(void *)unint64_t v71 = 0;
        uint64_t v72 = 0;
        HALS_System::GetInstance(v73, 0, (uint64_t *)v71);
        uint64_t v43 = (HALS_ObjectMap *)HALS_System::CopyTapByUUID(*(HALS_System **)v73, v37);
        if (*(void *)&v73[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v73[8]);
        }
        if (v43)
        {
          int v44 = (HALS_MultiTap *)*((void *)v43 + 31);
          long long v45 = (std::__shared_weak_count *)*((void *)v43 + 32);
          if (v45)
          {
            atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v41 = HALS_MultiTap::copy_engine(v44);
            std::__shared_weak_count::__release_shared[abi:ne180100](v45);
          }
          else
          {
            uint64_t v41 = HALS_MultiTap::copy_engine(v44);
          }
        }
        else
        {
          uint64_t v41 = 0;
        }
        HALS_ObjectMap::ReleaseObject(v43, v42);
      }
      HALS_ObjectMap::ReleaseObject(v39, v40);
      if (v67) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v67);
      }
      if (v41) {
        goto LABEL_76;
      }
      v62[0] = 0;
      v62[1] = 0;
      HALS_System::GetInstance(v73, 0, v62);
      uint64_t v51 = HALS_System::CopyClockDeviceByUID(*(HALS_System **)v73, (const __CFString *)cf, v50);
      uint64_t v53 = v51;
      if (v51) {
        uint64_t v54 = HALS_IODevice::CopyIOEngine(v51);
      }
      else {
        uint64_t v54 = 0;
      }
      HALS_ObjectMap::ReleaseObject(v53, v52);
      if (*(void *)&v73[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v73[8]);
      }
      if (v54) {
LABEL_76:
      }
        operator new();
      uint64_t EngineInfoForDeviceUID = 0;
      goto LABEL_83;
    }
  }
  if (!*(_DWORD *)(EngineInfoForDeviceUID + 744))
  {
    uint64_t v46 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 110));
    if (v46)
    {
      int v47 = *(_DWORD *)(EngineInfoForDeviceUID + 856);
      int v48 = *((_DWORD *)this + 111);
      if (v47 == v48)
      {
LABEL_82:
        UpdateEngineInfoCache((HALS_IOEngineInfo *)EngineInfoForDeviceUID, v47);
        *(_DWORD *)(EngineInfoForDeviceUID + 744) = 1;
        HALS_ObjectMap::ReleaseObject(v46, v55);
        goto LABEL_83;
      }
      uint64_t v49 = *(void *)(EngineInfoForDeviceUID + 8);
      if (v49 && *(unsigned char *)(EngineInfoForDeviceUID + 860))
      {
        (*(void (**)(uint64_t, HALS_ObjectMap *))(*(void *)v49 + 208))(v49, v46);
        int v48 = *((_DWORD *)this + 111);
      }
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)float64x2_t v73 = 136315394;
        *(void *)&v73[4] = "HALS_IOContextDescription.cpp";
        *(_WORD *)&v73[12] = 1024;
        *(_DWORD *)&v73[14] = 455;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContextDescription::SetFromCFRepresentation_MakeEngineInfo: IOContextDescription has outlived owning IOContext", v73, 0x12u);
      }
      int v47 = *(_DWORD *)(EngineInfoForDeviceUID + 856);
      int v48 = *((_DWORD *)this + 111);
      if (v47 == v48) {
        goto LABEL_82;
      }
    }
    *(unsigned char *)(EngineInfoForDeviceUID + 860) = 0;
    int v47 = v48;
    goto LABEL_82;
  }
LABEL_83:
  if (cf) {
    CFRelease(cf);
  }
LABEL_85:
  HALS_ObjectMap::ReleaseObject(v24, v33);
  HALS_ObjectMap::ReleaseObject(v4, v56);
  if ((v32 & 1) == 0) {
    CFRelease(v31);
  }
  return EngineInfoForDeviceUID;
}

void sub_1BAED1318(_Unwind_Exception *exception_object, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, const void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a2)
  {
    HALS_ObjectMap::ReleaseObject(v31, a2);
    HALS_ObjectMap::ReleaseObject(v31, v33);
    HALS_ObjectMap::ReleaseObject(v30, v34);
    applesauce::CF::StringRef::~StringRef(&a20);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAED0B44);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOContextDescription::SetFromCFRepresentation_UpdateEngineInfo(HALS_IOContextDescription *this, CFDictionaryRef theDict, const __CFDictionary *a3, HALS_IOEngineInfo *a4)
{
  unsigned int v6 = this;
  if (theDict) {
    CFRetain(theDict);
  }
  uint64_t v19 = &unk_1F14898A0;
  CFDictionaryRef theDicta = theDict;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(&v17, theDict, @"synch padding");
  BOOL v7 = OS::CF::Boolean::AsBool(v18, 1);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v17);
  *((unsigned char *)a3 + 296) = v7;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(&v17, theDicta, @"drift");
  BOOL v8 = OS::CF::Boolean::AsBool(v18, 0);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v17);
  uint64_t v9 = *((void *)a3 + 1);
  if (v9)
  {
    if (v8) {
      char v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 456))(v9) ^ 1;
    }
    else {
      char v10 = 0;
    }
    *((unsigned char *)a3 + 297) = v10;
  }
  else
  {
    *((unsigned char *)a3 + 297) = v8;
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v17, theDicta, @"drift algorithm");
  int v11 = OS::CF::Number::GetValue<unsigned int>(v18, 0);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v17);
  *((_DWORD *)a3 + 75) = v11;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v17, theDicta, @"drift quality");
  unsigned int v12 = OS::CF::Number::GetValue<unsigned int>(v18, 64);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v17);
  unsigned int v13 = *((_DWORD *)a3 + 76);
  if (v13 <= v12) {
    unsigned int v13 = v12;
  }
  *((_DWORD *)a3 + 76) = v13;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v17, theDicta, @"extra latency");
  int v14 = OS::CF::Number::GetValue<int>(v18, 0);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v17);
  uint64_t v15 = (char *)a3 + 4 * v6;
  int v16 = *((_DWORD *)v15 + 82);
  if (v16 <= v14) {
    int v16 = v14;
  }
  *((_DWORD *)v15 + 82) = v16;
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v19);
}

void sub_1BAED173C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va);
  _Unwind_Resume(a1);
}

void HALS_IOStreamInfo::HALS_IOStreamInfo(HALS_IOStreamInfo *this)
{
  *(void *)this = &unk_1F1489938;
  *((unsigned char *)this + 8) = 0;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((unsigned char *)this + 68) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(void *)((char *)this + 20) = 0;
  *(void *)((char *)this + 12) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *((void *)this + 22) = 0;
  *((unsigned char *)this + 164) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 145) = 0u;
  *((void *)this + 21) = (char *)this + 176;
  *((unsigned char *)this + 212) = 0;
  *((unsigned char *)this + 224) = 0;
  *((unsigned char *)this + 248) = 0;
  *((_WORD *)this + 128) = 0;
  *((_DWORD *)this + 65) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  *((unsigned char *)this + 208) = 0;
  std::vector<char>::value_type __x = 0;
  std::vector<char>::vector((std::vector<char> *)this + 11, 8uLL, &__x);
  **((_DWORD **)this + 33) = 0;
  std::vector<char>::value_type v3 = 0;
  std::vector<char>::vector((std::vector<char> *)this + 12, 0x18uLL, &v3);
  **((_DWORD **)this + 36) = 1;
  *((unsigned char *)this + 312) = 0;
  *((unsigned char *)this + 352) = 0;
  *((unsigned char *)this + 360) = 0;
  *((unsigned char *)this + 364) = 0;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((unsigned char *)this + 416) = 0;
}

void sub_1BAED1874(_Unwind_Exception *a1)
{
  CFArrayRef v4 = v2;
  unsigned int v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 272) = v6;
    operator delete(v6);
  }
  if (*(unsigned char *)(v1 + 248))
  {
    BOOL v7 = *(void **)(v1 + 224);
    if (v7)
    {
      *(void *)(v1 + 232) = v7;
      operator delete(v7);
    }
  }
  BOOL v8 = *(std::__shared_weak_count **)(v1 + 200);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(void **)(v1 + 176));
  uint64_t v9 = *(void **)(v1 + 136);
  if (v9)
  {
    *(void *)(v1 + 144) = v9;
    operator delete(v9);
  }
  char v10 = *(void **)(v1 + 112);
  if (v10)
  {
    *(void *)(v1 + 120) = v10;
    operator delete(v10);
  }
  int v11 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 80) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_IOStreamGroup::push_back(HALS_IOStreamGroup *this, HALS_IOStreamInfo *a2)
{
  CFArrayRef v4 = (char *)this + 16;
  unint64_t v5 = *((void *)this + 2);
  unint64_t v6 = *((void *)this + 1);
  if (v6 >= v5)
  {
    uint64_t v9 = 0x21CFB2B78C13521DLL * ((uint64_t)(v6 - *(void *)this) >> 3);
    if ((unint64_t)(v9 + 1) > 0x9A90E7D95BC609) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x21CFB2B78C13521DLL * ((uint64_t)(v5 - *(void *)this) >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x4D4873ECADE304) {
      unint64_t v12 = 0x9A90E7D95BC609;
    }
    else {
      unint64_t v12 = v11;
    }
    unsigned int v18 = v4;
    if (v12) {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HALS_IOStreamInfo>>(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v12;
    uint64_t v15 = v12 + 424 * v9;
    unint64_t v17 = v12 + 424 * v13;
    std::construct_at[abi:ne180100]<HALS_IOStreamInfo,HALS_IOStreamInfo const&,HALS_IOStreamInfo*>(v15, (uint64_t)a2);
    uint64_t v16 = v15 + 424;
    std::vector<HALS_IOStreamInfo>::__swap_out_circular_buffer((uint64_t *)this, &v14);
    unint64_t v8 = *((void *)this + 1);
    uint64_t result = std::__split_buffer<HALS_IOStreamInfo>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    uint64_t result = std::construct_at[abi:ne180100]<HALS_IOStreamInfo,HALS_IOStreamInfo const&,HALS_IOStreamInfo*>(*((void *)this + 1), (uint64_t)a2);
    unint64_t v8 = v6 + 424;
    *((void *)this + 1) = v6 + 424;
  }
  *((void *)this + 1) = v8;
  return result;
}

void sub_1BAED1A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *HALS_IOContextDescription::UpdateDSPStreamFormat(HALS_IOContextDescription *this, const AudioStreamBasicDescription *a2)
{
  v12[4] = *MEMORY[0x1E4F143B8];
  char v10 = 0;
  CFArrayRef v4 = (char *)operator new(0x38uLL);
  *(void *)CFArrayRef v4 = &unk_1F1480CC8;
  long long v5 = *(_OWORD *)&a2->mBytesPerPacket;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)&a2->mSampleRate;
  *(_OWORD *)(v4 + 24) = v5;
  *((void *)v4 + 5) = *(void *)&a2->mBitsPerChannel;
  *((void *)v4 + 6) = &v10;
  v12[3] = v4;
  HALS_IOContextDescription::DiscoverDSPStreams((uint64_t)this, (uint64_t)v12);
  uint64_t result = std::__function::__value_func<void ()(HALS_DSPStream *)>::~__value_func[abi:ne180100](v12);
  if (v10)
  {
    long long v7 = *(_OWORD *)&a2->mBytesPerPacket;
    *(_OWORD *)&_DWORD v11[4] = *(_OWORD *)&a2->mSampleRate;
    *(_OWORD *)&v11[20] = v7;
    *(void *)&v11[36] = *(void *)&a2->mBitsPerChannel;
    int v8 = *((unsigned __int8 *)this + 328);
    *((_DWORD *)this + 70) = 1;
    long long v9 = *(_OWORD *)&v11[16];
    *(_OWORD *)((char *)this + 284) = *(_OWORD *)v11;
    *(_OWORD *)((char *)this + 300) = v9;
    *(_OWORD *)((char *)this + 312) = *(_OWORD *)&v11[28];
    if (!v8) {
      *((unsigned char *)this + 328) = 1;
    }
  }
  return result;
}

void sub_1BAED1B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__function::__value_func<void ()(HALS_DSPStream *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<HALS_IOStreamGroup>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    CFArrayRef v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    unint64_t v6 = v4;
    std::vector<HALS_IOStreamInfo>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void HALS_IOContextDescription::DiscoverDSPStreams(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 24))
  {
    v26[0] = 0;
    v26[1] = 0;
    int v25 = v26;
    std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v25, *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 16));
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    while (v3 != v4)
    {
      uint64_t v5 = *(void *)(*(void *)v3 + 8);
      if (v5)
      {
        unsigned int DeviceIDFromEngineID = HALS_IOContextDescription::GetDeviceIDFromEngineID((HALS_IOContextDescription *)*(unsigned int *)(v5 + 16));
        if (DeviceIDFromEngineID) {
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v25, DeviceIDFromEngineID, DeviceIDFromEngineID);
        }
      }
      v3 += 8;
    }
    uint64_t v7 = (uint64_t)v25;
    if (v25 != v26)
    {
      do
      {
        long long v9 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v7 + 28));
        if (v9)
        {
          char v10 = 0;
          uint64_t v11 = 0;
          __int16 v24 = 256;
          uint64_t v12 = MEMORY[0x1E4F143A8];
          do
          {
            char v13 = *((unsigned char *)&v24 + v11);
            char v14 = v10;
            int v15 = *(_DWORD *)(a1 + 444);
            uint64_t v30 = 0;
            uint64_t v31 = &v30;
            uint64_t v32 = 0x2000000000;
            uint64_t v33 = 0;
            v27[0] = v12;
            v27[1] = 0x40000000;
            uint64_t v27[2] = ___ZNK11HALS_Device22CopyDSPStreamForClientEbj_block_invoke;
            v27[3] = &unk_1E6235A68;
            v27[4] = &v30;
            v27[5] = v9;
            char v29 = v13;
            int v28 = v15;
            uint64_t v16 = (HALB_Mutex *)(*(uint64_t (**)(HALS_ObjectMap *))(*(void *)v9 + 56))(v9);
            HALB_CommandGate::ExecuteCommand(v16, (uint64_t)v27);
            unint64_t v17 = (HALS_ObjectMap *)v31[3];
            _Block_object_dispose(&v30, 8);
            if (v17)
            {
              v27[0] = v17;
              uint64_t v19 = *(void *)(a2 + 24);
              if (!v19) {
                std::__throw_bad_function_call[abi:ne180100]();
              }
              (*(void (**)(uint64_t, void *))(*(void *)v19 + 48))(v19, v27);
            }
            HALS_ObjectMap::ReleaseObject(v17, v18);
            char v10 = 1;
            uint64_t v11 = 1;
          }
          while ((v14 & 1) == 0);
        }
        HALS_ObjectMap::ReleaseObject(v9, v8);
        uint64_t v20 = *(void **)(v7 + 8);
        if (v20)
        {
          do
          {
            mach_port_t v21 = (void **)v20;
            uint64_t v20 = (void *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            mach_port_t v21 = *(void ***)(v7 + 16);
            BOOL v22 = *v21 == (void *)v7;
            uint64_t v7 = (uint64_t)v21;
          }
          while (!v22);
        }
        uint64_t v7 = (uint64_t)v21;
      }
      while (v21 != v26);
    }
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v26[0]);
  }
}

void sub_1BAED1E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
}

void *std::__function::__value_func<void ()(HALS_DSPStream *)>::~__value_func[abi:ne180100](void *a1)
{
  CFDictionaryRef v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<HALS_IOContextDescription::UpdateDSPStreamFormat(AudioStreamBasicDescription const&)::$_0,std::allocator<HALS_IOContextDescription::UpdateDSPStreamFormat(AudioStreamBasicDescription const&)::$_0>,void ()(HALS_DSPStream *)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContextDescription::UpdateDSPStreamFormat(AudioStreamBasicDescription const&)::$_0,std::allocator<HALS_IOContextDescription::UpdateDSPStreamFormat(AudioStreamBasicDescription const&)::$_0>,void ()(HALS_DSPStream *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN25HALS_IOContextDescription21UpdateDSPStreamFormatERK27AudioStreamBasicDescriptionE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOContextDescription::UpdateDSPStreamFormat(AudioStreamBasicDescription const&)::$_0,std::allocator<HALS_IOContextDescription::UpdateDSPStreamFormat(AudioStreamBasicDescription const&)::$_0>,void ()(HALS_DSPStream *)>::operator()(uint64_t a1, HALS_DSPStream **a2)
{
  **(unsigned char **)(a1 + 48) = 1;
}

__n128 std::__function::__func<HALS_IOContextDescription::UpdateDSPStreamFormat(AudioStreamBasicDescription const&)::$_0,std::allocator<HALS_IOContextDescription::UpdateDSPStreamFormat(AudioStreamBasicDescription const&)::$_0>,void ()(HALS_DSPStream *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1480CC8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContextDescription::UpdateDSPStreamFormat(AudioStreamBasicDescription const&)::$_0,std::allocator<HALS_IOContextDescription::UpdateDSPStreamFormat(AudioStreamBasicDescription const&)::$_0>,void ()(HALS_DSPStream *)>::__clone(uint64_t a1)
{
  CFDictionaryRef v2 = (char *)operator new(0x38uLL);
  *(void *)CFDictionaryRef v2 = &unk_1F1480CC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

void std::__function::__func<HALS_IOContextDescription::UpdateDSPStreamFormat(AudioStreamBasicDescription const&)::$_0,std::allocator<HALS_IOContextDescription::UpdateDSPStreamFormat(AudioStreamBasicDescription const&)::$_0>,void ()(HALS_DSPStream *)>::~__func()
{
}

BOOL OS::CF::Boolean::AsBool(OS::CF::Boolean *this, uint64_t a2)
{
  if (this) {
    return CFBooleanGetValue(this) != 0;
  }
  return a2;
}

uint64_t HALS_IOContextDescription::GetEngineInfoForDeviceUID(HALS_IOContextDescription *this, CFStringRef theString1)
{
  uint64_t v2 = *((void *)this + 4);
  uint64_t v3 = *((void *)this + 5);
  if (v2 == v3) {
    return 0;
  }
  while (1)
  {
    CFStringRef v6 = *(const __CFString **)(*(void *)v2 + 16);
    if (v6)
    {
      if (CFEqual(theString1, v6)) {
        break;
      }
    }
    v2 += 8;
    if (v2 == v3)
    {
      uint64_t v2 = v3;
      break;
    }
  }
  if (v2 == *((void *)this + 5)) {
    return 0;
  }
  else {
    return *(void *)v2;
  }
}

void UpdateEngineInfoCache(HALS_IOEngineInfo *a1, int a2)
{
  if (a1)
  {
    uint64_t v3 = *((void *)a1 + 1);
    if (v3)
    {
      *((_DWORD *)a1 + 214) = a2;
      *((double *)a1 + 96) = (*(double (**)(uint64_t))(*(void *)v3 + 328))(v3);
      *((_DWORD *)a1 + 194) = (*(uint64_t (**)(void))(**((void **)a1 + 1) + 336))();
      *((_DWORD *)a1 + 195) = (*(uint64_t (**)(void))(**((void **)a1 + 1) + 360))();
      *((unsigned char *)a1 + 784) = (*(uint64_t (**)(void))(**((void **)a1 + 1) + 368))();
      *((_DWORD *)a1 + 77) = (*(uint64_t (**)(void))(**((void **)a1 + 1) + 384))();
      *((_DWORD *)a1 + 79) = (*(uint64_t (**)(void))(**((void **)a1 + 1) + 344))();
      *((_DWORD *)a1 + 78) = (*(uint64_t (**)(void))(**((void **)a1 + 1) + 344))();
      *((unsigned char *)a1 + 750) = (*(unsigned int (**)(void))(**((void **)a1 + 1) + 408))() != 0;
      *((unsigned char *)a1 + 751) = (*(unsigned int (**)(void))(**((void **)a1 + 1) + 408))() != 0;
      *((_DWORD *)a1 + 188) = (*(uint64_t (**)(void))(**((void **)a1 + 1) + 400))();
      *((_DWORD *)a1 + 189) = (*(uint64_t (**)(void))(**((void **)a1 + 1) + 400))();
      uint64_t v4 = (HALS_IODevice *)(*(uint64_t (**)(void))(**((void **)a1 + 1) + 320))();
      if (v4)
      {
        uint64_t v5 = v4;
        int TransportType = HALS_IODevice::GetTransportType(v4);
        *((unsigned char *)a1 + 760) = TransportType == 1651274862;
        if (TransportType == 1651274862 && (*((unsigned char *)a1 + 750) || *((unsigned char *)a1 + 751)))
        {
          uint64_t v7 = (HALS_Control *)(*(uint64_t (**)(HALS_IODevice *, uint64_t, uint64_t, void))(*(void *)v5 + 640))(v5, 1685287523, 1869968496, 0);
          long long v9 = v7;
          if (v7) {
            *((unsigned char *)a1 + 761) = HALS_Control::GetSelectorControlValue(v7) == 1769173099;
          }
          HALS_ObjectMap::ReleaseObject(v9, v8);
        }
      }
    }
  }
}

void sub_1BAED24C0(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IsolatedUseCaseID_FromDescription(CFDictionaryRef theDict)
{
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v10, theDict, @"device id");
  uint64_t v1 = (HALS_ObjectMap *)OS::CF::Number::GetValue<unsigned int>(v10[1], 0);
  uint64_t v2 = HALS_ObjectMap::CopyObjectByObjectID(v1);
  uint64_t v4 = (HALS_ObjectMap *)v2;
  if (v2)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 464))(v2);
    if ((v5 & 0xFF00000000) != 0) {
      uint64_t v6 = 0x100000000;
    }
    else {
      uint64_t v6 = 0;
    }
    if ((v5 & 0xFF00000000) != 0) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = 0;
    }
    if ((v5 & 0xFF00000000) != 0) {
      uint64_t v8 = v5 & 0xFFFFFF00;
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  HALS_ObjectMap::ReleaseObject(v4, v3);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v10);
  return v7 | v6 | v8;
}

void sub_1BAED25A8(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HALS_ObjectMap::ReleaseObject(v9, a2);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a9);
  _Unwind_Resume(a1);
}

void HALS_IOContextDescription::SetToEmpty(HALS_IOContextDescription *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 110));
  if (!v3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "HALS_IOContextDescription.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1087;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContextDescription::SetToEmpty: IOContextDescription has outlived owning IOContext", buf, 0x12u);
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 1174405120;
  void v14[2] = ___ZN25HALS_IOContextDescription10SetToEmptyEv_block_invoke;
  v14[3] = &__block_descriptor_tmp_80_15589;
  v14[4] = this;
  int v15 = v3;
  HALS_ObjectMap::RetainObject(v3, v2);
  uint64_t v16 = v14;
  v17[0] = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<int({block_pointer})(HALS_IOEngineInfo &)>;
  v17[1] = &v16;
  unsigned int v18 = v17;
  *(void *)AudioObjectPropertyAddress buf = _ZN5caulk12function_refIFiRN15VisitableVectorINSt3__110unique_ptrI17HALS_IOEngineInfoNS2_14default_deleteIS4_EEEEE13ItemWithIndexEEE15functor_invokerIZN21HALS_IOEngineInfoList12engine_applyIJEEEiNS0_IFiRS4_EEEDpRKT_EUlSA_E_EEiRKNS_7details15erased_callableISB_EESA_;
  *(void *)&uint8_t buf[8] = &v18;
  VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::apply<>(*((void *)this + 4), *((void *)this + 5), (long long *)buf);
  *((void *)this + 3) = 0;
  std::vector<std::unique_ptr<HALS_IOEngineInfo>>::__clear[abi:ne180100]((void *)this + 4);
  uint64_t v5 = (void (***)(void))*((void *)this + 7);
  uint64_t v4 = (void (***)(void))*((void *)this + 8);
  if (v4 != v5)
  {
    uint64_t v6 = v4 - 53;
    uint64_t v7 = v4 - 53;
    do
    {
      (**v7)(v7);
      v6 -= 53;
      BOOL v8 = v7 == v5;
      v7 -= 53;
    }
    while (!v8);
  }
  *((void *)this + 8) = v5;
  uint64_t v10 = *((void *)this + 10);
  uint64_t v9 = *((void *)this + 11);
  if (v9 != v10)
  {
    do
    {
      uint64_t v11 = v9 - 32;
      *(void *)AudioObjectPropertyAddress buf = v9 - 24;
      std::vector<HALS_IOStreamGroup>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      uint64_t v9 = v11;
    }
    while (v11 != v10);
  }
  *((void *)this + 11) = v10;
  *((void *)this + 17) = 0;
  *((void *)this + 14) = 0;
  HALS_IOContextDescription::CalculateEngineSynchOffsets(this);
  *((_WORD *)this + 108) = 0;
  *((unsigned char *)this + 219) = 0;
  *((_DWORD *)this + 55) = 0;
  if (v3) {
    (*(void (**)(void *))(**((void **)v3 + 12) + 208))(*((void **)v3 + 12));
  }
  HALS_ObjectMap::ReleaseObject(v15, v12);
  HALS_ObjectMap::ReleaseObject(v3, v13);
}

void sub_1BAED2824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, HALS_ObjectMap *a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t HALS_IOContextDescription::PushStreamUsageToEngines(HALS_IOContextDescription *this, char a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN25HALS_IOContextDescription24PushStreamUsageToEnginesEb_block_invoke;
  v3[3] = &__block_descriptor_tmp_81_15577;
  v3[4] = this;
  char v4 = a2;
  uint64_t v5 = v3;
  v6[0] = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<int({block_pointer})(HALS_IOEngineInfo &)>;
  v6[1] = &v5;
  BOOL v8 = v6;
  *(void *)&long long v7 = _ZN5caulk12function_refIFiRN15VisitableVectorINSt3__110unique_ptrI17HALS_IOEngineInfoNS2_14default_deleteIS4_EEEEE13ItemWithIndexEEE15functor_invokerIZN21HALS_IOEngineInfoList12engine_applyIJEEEiNS0_IFiRS4_EEEDpRKT_EUlSA_E_EEiRKNS_7details15erased_callableISB_EESA_;
  *((void *)&v7 + 1) = &v8;
  return VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::apply<>(*((void *)this + 4), *((void *)this + 5), &v7);
}

void *HALS_IOContextDescription::CalculateEngineSynchOffsets(void *this)
{
  v37[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = this[3];
  if (v1)
  {
    uint64_t v2 = this;
    this = *(void **)(v1 + 8);
    if (this)
    {
      if (v2[4] != v2[5])
      {
        v37[0] = 0;
        this = (void *)(*(uint64_t (**)(void *))(*this + 328))(this);
        uint64_t v4 = v2[4];
        uint64_t v5 = v2[5];
        if (v4 != v5)
        {
          double v6 = v3;
          do
          {
            this = *(void **)(*(void *)v4 + 8);
            if (this && *(unsigned char *)(*(void *)v4 + 296))
            {
              double v7 = (*(double (**)(void *))(*this + 328))(this);
              char v8 = 0;
              uint64_t v9 = 0;
              char v10 = 1;
              do
              {
                char v11 = v10;
                int v12 = (*(uint64_t (**)(void, void))(**(void **)(*(void *)v4 + 8) + 352))(*(void *)(*(void *)v4 + 8), v8 & 1);
                this = (void *)(*(uint64_t (**)(void))(**(void **)(*(void *)v4 + 8) + 344))();
                char v10 = 0;
                unsigned int v13 = this + v12;
                unsigned int v14 = vcvtad_u64_f64(v6 / v7 * (double)(this + v12));
                if (v7 != v6) {
                  unsigned int v13 = v14;
                }
                if (*((_DWORD *)v37 + v9) > v13) {
                  unsigned int v13 = *((_DWORD *)v37 + v9);
                }
                *((_DWORD *)v37 + v9) = v13;
                char v8 = 1;
                uint64_t v9 = 1;
              }
              while ((v11 & 1) != 0);
            }
            v4 += 8;
          }
          while (v4 != v5);
          int v15 = (uint64_t *)v2[4];
          for (uint64_t i = (uint64_t *)v2[5]; v15 != i; ++v15)
          {
            uint64_t v17 = *v15;
            uint64_t v18 = *(void *)(*v15 + 8);
            if (v18 && *(unsigned char *)(v17 + 296))
            {
              double v19 = (*(double (**)(uint64_t))(*(void *)v18 + 328))(v18);
              char v20 = 0;
              uint64_t v21 = 0;
              uint64_t v22 = *v15;
              char v23 = 1;
              do
              {
                char v24 = v23;
                int v25 = (*(uint64_t (**)(void, void))(**(void **)(v22 + 8) + 352))(*(void *)(v22 + 8), v20 & 1);
                int v26 = (*(uint64_t (**)(void))(**(void **)(*v15 + 8) + 344))();
                uint64_t v27 = *v15;
                *(_DWORD *)(*v15 + 4 * v21 + 312) = v26;
                if (v19 == v6) {
                  unsigned int v28 = *((_DWORD *)v37 + v21) - v25 - v26;
                }
                else {
                  unsigned int v28 = (v19
                }
                                     / v6
                                     * (double)(*((_DWORD *)v37 + v21)
                                              - vcvtad_u64_f64(v6 / v19 * (double)(v26 + v25))));
                this = (void *)(*(uint64_t (**)(void))(**(void **)(v27 + 8) + 336))(*(void *)(v27 + 8));
                uint64_t v22 = *v15;
                int v29 = *(_DWORD *)(*v15 + 4 * v21 + 328);
                if (this && (int v30 = v29 + v28, v29 + v28 >= this >> 2))
                {
                  int v29 = 0;
                  unsigned int v28 = 0;
                }
                else
                {
                  int v30 = 0;
                }
                char v23 = 0;
                uint64_t v31 = (_DWORD *)(v22 + 4 * v21);
                v31[80] = v29;
                v31[84] = v28;
                v31[86] = v30;
                char v20 = 1;
                uint64_t v21 = 1;
              }
              while ((v24 & 1) != 0);
            }
            else
            {
              char v32 = 0;
              uint64_t v33 = 0;
              char v34 = 1;
              do
              {
                char v35 = v34;
                this = *(void **)(v17 + 8);
                if (this)
                {
                  this = (void *)(*(uint64_t (**)(void *, void))(*this + 344))(this, v32 & 1);
                  uint64_t v17 = *v15;
                }
                char v34 = 0;
                uint64_t v36 = (_DWORD *)(v17 + 4 * v33);
                v36[78] = this;
                v36[80] = v36[82];
                v36[84] = 0;
                v36[86] = 0;
                char v32 = 1;
                uint64_t v33 = 1;
              }
              while ((v35 & 1) != 0);
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t ___ZN25HALS_IOContextDescription24PushStreamUsageToEnginesEb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    uint64_t v5 = *(void **)(a1 + 32);
    if (*(unsigned char *)(a1 + 40))
    {
      uint64_t v7 = v5[10];
      uint64_t v6 = v5[11];
      if (v6 == v7)
      {
LABEL_23:
        if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 496))(v3)) {
          *(unsigned char *)(a2 + 748) = 1;
        }
      }
      else
      {
        unint64_t v8 = 0;
        unint64_t v9 = 0;
        while (1)
        {
          uint64_t v10 = v7 + 32 * v8;
          uint64_t v12 = *(void *)(v10 + 8);
          uint64_t v11 = *(void *)(v10 + 16);
          unsigned int v13 = (uint64_t *)(v10 + 8);
          if (v11 != v12) {
            break;
          }
LABEL_21:
          unint64_t v8 = (v9 + 1);
          unint64_t v9 = v8;
          if (v8 >= (v6 - v7) >> 5)
          {
            uint64_t v3 = *(void *)(a2 + 8);
            goto LABEL_23;
          }
        }
        uint64_t v14 = 0;
        unsigned int v15 = 0;
        while (1)
        {
          uint64_t v16 = (uint64_t *)(v12 + 24 * v14);
          uint64_t v17 = *v16;
          uint64_t v18 = v16[1];
          if (*v16 != v18) {
            break;
          }
LABEL_19:
          uint64_t v14 = ++v15;
          if (0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3) <= v15)
          {
            uint64_t v7 = v5[10];
            uint64_t v6 = v5[11];
            goto LABEL_21;
          }
        }
        while (1)
        {
          if (!*(_DWORD *)(v17 + 108)
            || ((v19 = *(void *)(v17 + 112), *(void *)(v17 + 120) != v19) ? (BOOL v20 = v19 == 0) : (BOOL v20 = 1), v20))
          {
            uint64_t v19 = v17 + 408;
          }
          if (*(void *)(*(void *)v19 + 8) == *(void *)(a2 + 8)
            && ((*(uint64_t (**)(void *, void, unint64_t))(*v5 + 16))(v5, 0, v9) & 1) != 0)
          {
            break;
          }
          v17 += 424;
          if (v17 == v18)
          {
            uint64_t v12 = *v13;
            uint64_t v11 = v13[1];
            goto LABEL_19;
          }
        }
      }
    }
    if (*(unsigned char *)(a1 + 40)) {
      uint64_t v21 = (_DWORD *)(a2 + 752);
    }
    else {
      uint64_t v21 = (_DWORD *)(a2 + 756);
    }
    if (*v21) {
      operator new[]();
    }
  }
  return 0;
}

void sub_1BAED329C(void *a1)
{
}

uint64_t ___ZN25HALS_IOContextDescription10SetToEmptyEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a2 + 696);
  std::vector<std::unique_ptr<HALS_IOProcessor>>::__clear[abi:ne180100]((void *)(a2 + 720));
  std::vector<std::unique_ptr<HALS_IOProcessor>>::__clear[abi:ne180100](v4);
  uint64_t v5 = *(HALS_ObjectMap **)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(HALS_Object **)(a1 + 40);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a2 + 860) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      (*(void (**)(HALS_ObjectMap *))(*(void *)v5 + 208))(v5);
      uint64_t v5 = *(HALS_ObjectMap **)(a2 + 8);
    }
    *(unsigned char *)(a2 + 860) = 0;
    HALS_ObjectMap::ReleaseObject_LongTerm(v5, v6);
    *(void *)(a2 + 8) = 0;
  }
  return 0;
}

void __destroy_helper_block_e8_40c37_ZTS13HALS_ReleaserI14HALS_IOContextE(uint64_t a1, HALS_Object *a2)
{
}

void __copy_helper_block_e8_40c37_ZTS13HALS_ReleaserI14HALS_IOContextE(uint64_t a1, HALS_Object *a2)
{
  uint64_t v2 = (HALS_ObjectMap *)*((void *)a2 + 5);
  *(void *)(a1 + 40) = v2;
  HALS_ObjectMap::RetainObject(v2, a2);
}

void *HALS_IOContextDescription::UpdateInputStreamVisibility(void *this)
{
  uint64_t v1 = this[4];
  uint64_t v2 = this[5];
  if (v1 != v2)
  {
    uint64_t v3 = this;
    do
    {
      this = *(void **)(*(void *)v1 + 8);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *, uint64_t, void))(*this + 408))(this, 1, *((unsigned int *)v3 + 111));
        *(unsigned char *)(*(void *)v1 + 750) = this != 0;
      }
      v1 += 8;
    }
    while (v1 != v2);
  }
  return this;
}

uint64_t HALS_IOContextDescription::SetFromCFRepresentation_ProcessDSPTypes(__CFDictionary const*)::$_0::operator()(unsigned int *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *a1;
  *(_OWORD *)AudioObjectPropertyAddress buf = xmmword_1BAFF96C0;
  std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](&v16, (unsigned int *)buf, 4);
  *(_OWORD *)AudioObjectPropertyAddress buf = xmmword_1BAFF96C0;
  std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v15, (unsigned int *)buf, 4);
  *(_OWORD *)AudioObjectPropertyAddress buf = xmmword_1BB03746C;
  *(_OWORD *)&buf[16] = unk_1BB03747C;
  std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v14, (unsigned int *)buf, 8);
  uint64_t v3 = v17[0];
  if (!v17[0]) {
    goto LABEL_10;
  }
  uint64_t v4 = v17;
  do
  {
    uint64_t v5 = v3;
    uint64_t v6 = v4;
    unsigned int v7 = *((_DWORD *)v3 + 7);
    unint64_t v8 = v3 + 1;
    if (v7 >= v2)
    {
      unint64_t v8 = v5;
      uint64_t v4 = (void **)v5;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (v3);
  if (v4 == v17) {
    goto LABEL_10;
  }
  if (v7 < v2) {
    uint64_t v5 = v6;
  }
  if (*((_DWORD *)v5 + 7) > v2) {
LABEL_10:
  }
    uint64_t v4 = v17;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)v14[1]);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)v15[1]);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v17[0]);
  if (v4 == v17)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_IOContextDescription.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 608;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  [hal_dsp] Processing type is not supported on this platform", buf, 0x12u);
    }
    int v12 = 0;
    uint64_t v11 = 0;
    unsigned int v10 = 0;
  }
  else
  {
    unsigned int v9 = *a1;
    if (HALS_IOContextDescription::SetFromCFRepresentation_ProcessDSPTypes(__CFDictionary const*)::isAppleInternal
      || v9 != 2)
    {
      unsigned int v10 = v9 & 0xFFFFFF00;
      int v12 = *a1;
      uint64_t v11 = 0x100000000;
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_IOContextDescription.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 618;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  [hal_dsp] Vocal Isolation Conferencing mode is unsupported", buf, 0x12u);
      }
      unsigned int v10 = 0;
      uint64_t v11 = 0x100000000;
      int v12 = 3;
    }
  }
  return v11 | v10 | v12;
}

void sub_1BAED3654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19)
{
}

void HALS_IOContextDescription::CalculateMaximumIOBufferFrameSize(HALS_IOContextDescription *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 328))(v3);
      uint64_t v5 = *((void *)this + 4);
      uint64_t v6 = *((void *)this + 5);
      if (v5 != v6)
      {
        double v7 = v4;
        unsigned int v8 = -1;
        do
        {
          uint64_t v9 = *(void *)(*(void *)v5 + 8);
          if (v9)
          {
            unsigned int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 336))(v9);
            double v11 = (*(double (**)(void))(**(void **)(*(void *)v5 + 8) + 328))();
            if (v11 != v7) {
              unsigned int v10 = (v7 / v11 * (double)v10);
            }
            if (v10 < v8) {
              unsigned int v8 = v10;
            }
          }
          v5 += 8;
        }
        while (v5 != v6);
      }
    }
  }
}

uint64_t HALS_IOContextDescription::PickMasterEngine(HALS_IOContextDescription *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  *((void *)this + 3) = 0;
  uint64_t v2 = *((void *)this + 1);
  if (!v2) {
    goto LABEL_9;
  }
  CFRetain(*((CFTypeRef *)this + 1));
  char v3 = 0;
  uint64_t v4 = 0;
  *(void *)&long long v12 = &unk_1F14898A0;
  *((void *)&v12 + 1) = v2;
  unsigned int v13 = (uint64_t (*)(uint64_t **, uint64_t, uint64_t))@"clock device uid";
  uint64_t v14 = @"master uid";
  do
  {
    char v5 = v3;
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v10, *((CFDictionaryRef *)&v12 + 1), *(&v13 + v4));
    if (theString1)
    {
      uint64_t EngineInfoForDeviceUID = HALS_IOContextDescription::GetEngineInfoForDeviceUID(this, theString1);
      if (EngineInfoForDeviceUID)
      {
        if (*(void *)(EngineInfoForDeviceUID + 8)) {
          *((void *)this + 3) = EngineInfoForDeviceUID;
        }
      }
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v10);
    char v3 = 1;
    uint64_t v4 = 1;
  }
  while ((v5 & 1) == 0);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v12);
  uint64_t v7 = *((void *)this + 3);
  if (!v7)
  {
LABEL_9:
    for (uint64_t i = (uint64_t *)*((void *)this + 4); ; ++i)
    {
      if (i == *((uint64_t **)this + 5))
      {
        uint64_t v7 = 0;
        goto LABEL_16;
      }
      uint64_t v7 = *i;
      if (*i)
      {
        if (*(void *)(v7 + 8)) {
          break;
        }
      }
    }
    *((void *)this + 3) = v7;
  }
LABEL_16:
  uint64_t v10 = v7;
  unsigned int v13 = caulk::function_ref<int ()(unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContextDescription::ForceDSPToUseMasterEngineSampleRate(void)::$_0>;
  uint64_t v14 = (__CFString *)&v10;
  *(void *)&long long v12 = caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_IOContextDescription::ApplyToInput(caulk::function_ref<int ()(unsigned int,HALS_IOStreamInfo&)>)::$_0>;
  *((void *)&v12 + 1) = &v13;
  return VisitableVector<HALS_IOStreamInfo>::apply<>(*((void *)this + 7), *((void *)this + 8), &v12);
}

void sub_1BAED3948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_IOContextDescription::ApplyToInput(caulk::function_ref<int ()(unsigned int,HALS_IOStreamInfo&)>)::$_0>(uint64_t (***a1)(uint64_t, void, void), uint64_t a2)
{
  return (**a1)((uint64_t)(*a1 + 1), *(unsigned int *)(a2 + 8), *(void *)a2);
}

uint64_t caulk::function_ref<int ()(unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContextDescription::ForceDSPToUseMasterEngineSampleRate(void)::$_0>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = **a1;
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v6 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 328))(v4);
      if (*(_DWORD *)(a3 + 108))
      {
        double v8 = v7;
        if (*(unsigned char *)(a3 + 352)
          || (HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v14, (uint64_t *)(a3 + 112)), *(unsigned char *)(a3 + 352)))
        {
          if (*(double *)(a3 + 312) != v8)
          {
            AMCP::Log::Scope_Registry::get(v6);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v14, "com.apple.coreaudio", "AMCP");
            uint64_t v9 = *v14;
            if (*(void *)v15) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v15);
            }
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
            {
              double v11 = pthread_self();
              mach_port_t v12 = pthread_mach_thread_np(v11);
              uint64_t v13 = *(void *)(a3 + 312);
              LODWORD(v14) = 67110146;
              HIDWORD(v14) = v12;
              *(_WORD *)uint64_t v15 = 2080;
              *(void *)&_DWORD v15[2] = "HALS_IODSPInfo.cpp";
              __int16 v16 = 1024;
              int v17 = 148;
              __int16 v18 = 2048;
              uint64_t v19 = v13;
              __int16 v20 = 2048;
              double v21 = v8;
              _os_log_debug_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] Replacing client sample rate on DSP Info from %6.1f to %6.1f", (uint8_t *)&v14, 0x2Cu);
            }
          }
          *(double *)(a3 + 312) = v8;
        }
      }
    }
  }
  return 0;
}

uint64_t HALS_IOContextDescription::DeviceDied(HALS_IOContextDescription *this, const __CFString *a2)
{
  uint64_t result = HALS_IOContextDescription::GetEngineInfoForDeviceUID(this, a2);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(result + 288);
    *(void *)(v5 + 288) = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    HALS_ObjectMap::ReleaseObject_LongTerm(*(HALS_ObjectMap **)(v5 + 8), v4);
    *(void *)(v5 + 8) = 0;
    *(unsigned char *)(v5 + 860) = 0;
    return HALS_IOContextDescription::PickMasterEngine(this);
  }
  return result;
}

uint64_t HALS_IOContextDescription::HasClockDevice(HALS_IOContextDescription *this, const __CFString *a2)
{
  if (!this) {
    goto LABEL_5;
  }
  CFRetain(this);
  v8[0] = &unk_1F14898A0;
  v8[1] = this;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v6, this, @"clock device uid");
  CFStringRef v4 = theString1;
  if (theString1) {
    LOBYTE(a2) = CFEqual(theString1, a2);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v6);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v8);
  if (!v4) {
LABEL_5:
  }
    LOBYTE(a2) = 0;
  return a2 & 1;
}

void sub_1BAED3C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t HALS_IOContextDescription::GetOutputStackDescriptionForChannel(HALS_IOContextDescription *this, unsigned int a2, HALS_IOStackDescription *a3, unsigned int *a4)
{
  unint64_t v4 = *((void *)this + 11) - *((void *)this + 10);
  if ((v4 & 0x1FFFFFFFE0) == 0) {
    return 0;
  }
  unsigned int v6 = a2;
  unint64_t v8 = 0;
  unsigned int v9 = 0;
  uint64_t v10 = (char *)a3 + 8;
  char v34 = (uint64_t *)((char *)a3 + 24);
  if (((v4 >> 5) & 0xFFFFFFFE) != 0) {
    uint64_t v11 = (v4 >> 5);
  }
  else {
    uint64_t v11 = 1;
  }
  uint64_t v33 = v11;
  while (1)
  {
    uint64_t v12 = *((void *)this + 10);
    if (v8 >= (*((void *)this + 11) - v12) >> 5) {
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v13 = (HALS_IOStackDescription *)(v12 + 32 * v8);
    int v14 = *(_DWORD *)v13;
    *(_DWORD *)a3 = *(_DWORD *)v13;
    if (v13 != a3)
    {
      __int16 v16 = (uint64_t *)*((void *)v13 + 1);
      uint64_t v15 = (uint64_t *)*((void *)v13 + 2);
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (v15 - v16);
      uint64_t v18 = *v34;
      uint64_t v19 = *(uint64_t **)v10;
      if (0xAAAAAAAAAAAAAAABLL * ((*v34 - *(void *)v10) >> 3) >= v17)
      {
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a3 + 2) - (void)v19) >> 3) >= v17)
        {
          uint64_t v27 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HALS_IOStreamGroup *,HALS_IOStreamGroup *,HALS_IOStreamGroup *>(v16, v15, *(uint64_t **)v10);
          unsigned int v28 = (void **)*((void *)a3 + 2);
          while (v28 != (void **)v27)
          {
            v28 -= 3;
            char v35 = v28;
            std::vector<HALS_IOStreamInfo>::__destroy_vector::operator()[abi:ne180100](&v35);
          }
          unsigned int v6 = a2;
          goto LABEL_27;
        }
        int v26 = &v16[(uint64_t)(*((void *)a3 + 2) - (void)v19) >> 3];
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HALS_IOStreamGroup *,HALS_IOStreamGroup *,HALS_IOStreamGroup *>(v16, v26, *(uint64_t **)v10);
        int v25 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_IOStreamGroup>,HALS_IOStreamGroup*,HALS_IOStreamGroup*,HALS_IOStreamGroup*>((uint64_t)v34, v26, v15, *((void **)a3 + 2));
      }
      else
      {
        if (v19)
        {
          __int16 v20 = (void **)*((void *)a3 + 2);
          double v21 = *(uint64_t **)v10;
          if (v20 != (void **)v19)
          {
            do
            {
              v20 -= 3;
              char v35 = v20;
              std::vector<HALS_IOStreamInfo>::__destroy_vector::operator()[abi:ne180100](&v35);
            }
            while (v20 != (void **)v19);
            double v21 = *(uint64_t **)v10;
          }
          *((void *)a3 + 2) = v19;
          operator delete(v21);
          uint64_t v18 = 0;
          *(void *)uint64_t v10 = 0;
          *((void *)v10 + 1) = 0;
          *((void *)v10 + 2) = 0;
          unsigned int v6 = a2;
        }
        if (v17 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (v18 >> 3);
        uint64_t v23 = 2 * v22;
        if (2 * v22 <= v17) {
          uint64_t v23 = 0xAAAAAAAAAAAAAAABLL * (v15 - v16);
        }
        if (v22 >= 0x555555555555555) {
          unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v24 = v23;
        }
        std::vector<std::string>::__vallocate[abi:ne180100](v10, v24);
        int v25 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_IOStreamGroup>,HALS_IOStreamGroup*,HALS_IOStreamGroup*,HALS_IOStreamGroup*>((uint64_t)v34, v16, v15, *((void **)a3 + 2));
      }
      uint64_t v27 = v25;
LABEL_27:
      *((void *)a3 + 2) = v27;
      int v14 = *(_DWORD *)a3;
    }
    unsigned int v29 = v14 + v9;
    if (v29 > v6) {
      break;
    }
    ++v8;
    unsigned int v9 = v29;
    if (v8 == v33) {
      return 0;
    }
  }
  *a4 = v6 - v9;
  return 1;
}

void sub_1BAED3EF8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void *HALS_IOContextDescription::SetStreamIsEnabledAtIndex(void *this, int a2, unsigned int a3, int a4)
{
  if (a2)
  {
    if (this[17] <= (unint64_t)a3) {
      return this;
    }
    uint64_t v4 = this[16];
  }
  else
  {
    if (this[14] <= (unint64_t)a3) {
      return this;
    }
    uint64_t v4 = this[13];
  }
  unint64_t v5 = (unint64_t)a3 >> 6;
  uint64_t v6 = 1 << a3;
  if (a4) {
    uint64_t v7 = *(void *)(v4 + 8 * v5) | v6;
  }
  else {
    uint64_t v7 = *(void *)(v4 + 8 * v5) & ~v6;
  }
  *(void *)(v4 + 8 * v5) = v7;
  return this;
}

void *HALS_IOContextDescription::RegisterBuffers(HALS_IOContextDescription *this)
{
  _DWORD v11[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 104;
  int v8 = *((_DWORD *)this + 110);
  v7[0] = (char *)this + 104;
  v7[1] = &v8;
  uint64_t v3 = (uint64_t *)*((void *)this + 28);
  *(void *)&long long v6 = caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0>;
  *((void *)&v6 + 1) = v7;
  VisitableVector<HALS_IOStreamInfo>::apply<>(*v3, v3[1], &v6);
  uint64_t v4 = (uint64_t *)*((void *)this + 29);
  v11[0] = &unk_1F1468430;
  v11[1] = v2;
  void v11[2] = &v8;
  v11[3] = v11;
  uint64_t v10 = v11;
  *(void *)&long long v9 = caulk::function_ref<int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::functor_invoker<HALS_IOStreamGrid::apply_to_streams(std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>;
  *((void *)&v9 + 1) = &v10;
  VisitableVector<HALS_IOStackDescription>::apply<>(*v4, v4[1], &v9);
  return std::__function::__value_func<int ()(unsigned long,HALS_IOStreamInfo &)>::~__value_func[abi:ne180100](v11);
}

void sub_1BAED4044(_Unwind_Exception *a1)
{
  std::__function::__value_func<int ()(unsigned long,HALS_IOStreamInfo &)>::~__value_func[abi:ne180100]((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void *HALS_IOContextDescription::UnregisterBuffers(HALS_IOContextDescription *this)
{
  v12[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 104;
  uint64_t v3 = *((unsigned int *)this + 110);
  int v8 = (char *)this + 104;
  int v9 = v3;
  uint64_t v4 = (uint64_t *)*((void *)this + 28);
  *(void *)&long long v7 = caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0>;
  *((void *)&v7 + 1) = &v8;
  VisitableVector<HALS_IOStreamInfo>::apply<>(*v4, v4[1], &v7);
  unint64_t v5 = (uint64_t *)*((void *)this + 29);
  v12[0] = &unk_1F14684B0;
  v12[1] = v2;
  void v12[2] = v3;
  v12[3] = v12;
  uint64_t v11 = v12;
  *(void *)&long long v10 = caulk::function_ref<int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::functor_invoker<HALS_IOStreamGrid::apply_to_streams(std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>;
  *((void *)&v10 + 1) = &v11;
  VisitableVector<HALS_IOStackDescription>::apply<>(*v5, v5[1], &v10);
  return std::__function::__value_func<int ()(unsigned long,HALS_IOStreamInfo &)>::~__value_func[abi:ne180100](v12);
}

void sub_1BAED4144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__function::__value_func<int ()(unsigned long,HALS_IOStreamInfo &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContextDescription::AllocateProcessors(void)::$_1>(AMCP::Log::Scope_Registry *a1, uint64_t a2, HALS_IOStackDescription *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a6 + 8))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v15, "com.apple.coreaudio", "AMCP");
    long long v6 = *v15;
    if (*(void *)v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v16);
    }
    uint64_t v7 = 560947818;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      LODWORD(v15) = 67109634;
      HIDWORD(v15) = v9;
      *(_WORD *)__int16 v16 = 2080;
      *(void *)&void v16[2] = "HALS_IOProcessorFactory.cpp";
      __int16 v17 = 1024;
      int v18 = 143;
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_IOProcessorFactory::allocate_output_processors: trying to allocate output processor from input stream info!", (uint8_t *)&v15, 0x18u);
    }
  }
  else
  {
    uint64_t v12 = **(void **)a1;
    if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)) {
      BOOL v13 = *(unsigned char *)(a6 + 416) == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13)
    {
      uint64_t v15 = (NSObject **)&unk_1F146C9E0;
      HALS_IOProcessorFactoryWorker::do_allocate_processor((uint64_t)&v15, v12, a6, 0, 0, a3);
    }
    return 0;
  }
  return v7;
}

uint64_t caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_IOContextDescription::AllocateProcessors(void)::$_0>(AMCP::Log::Scope_Registry *a1, uint64_t *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (*(unsigned char *)(*a2 + 8))
  {
    uint64_t v3 = **(void **)a1;
    if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 16))(v3) && *(unsigned char *)(v2 + 416)) {
      uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
    }
    else {
      uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
    }
    unint64_t v5 = *(uint64_t (**)(void))(*(void *)v4 + 16);
    return v5();
  }
  else
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    uint64_t v7 = *v10;
    if (*(void *)v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109634;
      HIDWORD(v10) = v9;
      *(_WORD *)uint64_t v11 = 2080;
      *(void *)&void v11[2] = "HALS_IOProcessorFactory.cpp";
      __int16 v12 = 1024;
      int v13 = 121;
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_IOProcessorFactory::allocate_input_processors: trying to allocate input processor from output stream info!", (uint8_t *)&v10, 0x18u);
    }
    return 560947818;
  }
}

uint64_t caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContextDescription::FreeProcessors(void)::$_1>(AMCP::Log::Scope_Registry *a1, int a2, int a3, int a4, int a5, HALS_IOProcessorFactory *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 8))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v11, "com.apple.coreaudio", "AMCP");
    long long v6 = *v11;
    if (*(void *)v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v12);
    }
    uint64_t v7 = 560947818;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      LODWORD(v11) = 67109634;
      HIDWORD(v11) = v9;
      *(_WORD *)__int16 v12 = 2080;
      *(void *)&void v12[2] = "HALS_IOProcessorFactory.cpp";
      __int16 v13 = 1024;
      int v14 = 177;
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_IOContextDescription::AllocateProcessors: trying to free output processor from input stream info!", (uint8_t *)&v11, 0x18u);
    }
  }
  else
  {
    HALS_IOProcessorFactory::free_processor(this, 0);
    return 0;
  }
  return v7;
}

uint64_t caulk::function_ref<int ()(unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContextDescription::FreeProcessors(void)::$_0>(AMCP::Log::Scope_Registry *a1, int a2, HALS_IOProcessorFactory *this)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 8))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v16, "com.apple.coreaudio", "AMCP");
    int v8 = *v16;
    if (*(void *)v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v17);
    }
    uint64_t v9 = 560947818;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      long long v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      LODWORD(v16) = 67109634;
      HIDWORD(v16) = v11;
      *(_WORD *)__int16 v17 = 2080;
      *(void *)&v17[2] = "HALS_IOProcessorFactory.cpp";
      __int16 v18 = 1024;
      int v19 = 163;
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_IOProcessorFactoryWorker::free_input_processor: trying to free input processor from output stream info!", (uint8_t *)&v16, 0x18u);
    }
    return v9;
  }
  HALS_IOProcessorFactory::free_processor(this, (HALS_IOStreamInfo *)1);
  unint64_t v5 = (void *)*((void *)this + 14);
  long long v6 = (void *)*((void *)this + 15);
  if (v5 == v6) {
    return 0;
  }
  while (1)
  {
    uint64_t v7 = (HALS_IOProcessor *)v5[13];
    if (v7) {
      break;
    }
LABEL_8:
    v5 += 16;
    if (v5 == v6) {
      return 0;
    }
  }
  if (*((unsigned char *)v7 + 8))
  {
    HALS_IOProcessorList::DestroyProcessor((void *)(*v5 + 24 * *((unsigned __int8 *)this + 8) + 696), v7);
    v5[13] = 0;
    uint64_t v4 = (AMCP::Log::Scope_Registry *)v5[14];
    if (v4) {
      uint64_t v4 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(AMCP::Log::Scope_Registry *))(*(void *)v4 + 8))(v4);
    }
    v5[14] = 0;
    goto LABEL_8;
  }
  AMCP::Log::Scope_Registry::get(v4);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v16, "com.apple.coreaudio", "AMCP");
  __int16 v12 = *v16;
  if (*(void *)v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v17);
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    int v14 = pthread_self();
    mach_port_t v15 = pthread_mach_thread_np(v14);
    LODWORD(v16) = 67110146;
    HIDWORD(v16) = v15;
    *(_WORD *)__int16 v17 = 2080;
    *(void *)&v17[2] = "HALS_IOProcessorFactory.cpp";
    __int16 v18 = 1024;
    int v19 = 213;
    __int16 v20 = 2082;
    double v21 = "input";
    __int16 v22 = 2082;
    uint64_t v23 = "output";
    _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_IOProcessorFactoryWorker::free_processor_for_dsp: trying to free %{public}s processor but it is for %{public}s", (uint8_t *)&v16, 0x2Cu);
  }
  return 0;
}

uint64_t caulk::function_ref<int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::functor_invoker<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_1>(_DWORD **a1, HALS_IOStackDescription **a2)
{
  uint64_t v2 = *a1;
  memset(&v12, 0, sizeof(v12));
  uint64_t v3 = (uint64_t *)*((void *)*a2 + 1);
  if (*((uint64_t **)*a2 + 2) != v3)
  {
    uint64_t v4 = *v3;
    if (-1944890851 * ((unint64_t)(v3[1] - *v3) >> 3) && v4 != 0)
    {
      if (!*(_DWORD *)(v4 + 108)
        || ((long long v6 = *(uint64_t **)(v4 + 112), *(uint64_t **)(v4 + 120) != v6) ? (v7 = v6 == 0) : (v7 = 1), v7))
      {
        long long v6 = (uint64_t *)(v4 + 408);
      }
      uint64_t v8 = *v6;
      if (*(void *)(*v6 + 8) && *(void *)(v4 + 56))
      {
        HALS_IOStackDescription::GetFormat(*a2, &v12);
        uint64_t v9 = *(unsigned int *)(v8 + 308);
        UInt32 v10 = *(_DWORD *)(v4 + 64) - v9;
        if (v12.mBytesPerFrame && v10 >= *v2 * v12.mBytesPerFrame) {
          UInt32 v10 = *v2 * v12.mBytesPerFrame;
        }
        bzero((void *)(*(void *)(v4 + 56) + v9), v10);
      }
    }
  }
  return 0;
}

uint64_t caulk::function_ref<int ()(unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_0>(_DWORD **a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a3 + 108);
  if (!v4 || ((v5 = *(uint64_t **)(a3 + 112), *(uint64_t **)(a3 + 120) != v5) ? (BOOL v6 = v5 == 0) : (BOOL v6 = 1), v6)) {
    unint64_t v5 = (uint64_t *)(a3 + 408);
  }
  uint64_t v7 = *v5;
  if (*(void *)(*v5 + 8) && *(void *)(a3 + 56))
  {
    uint64_t v8 = *a1;
    if (v4)
    {
      HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v13, (uint64_t *)(a3 + 112));
    }
    else
    {
      long long v9 = *(_OWORD *)(a3 + 384);
      long long v13 = *(_OWORD *)(a3 + 368);
      long long v14 = v9;
      uint64_t v15 = *(void *)(a3 + 400);
    }
    if (DWORD2(v13) == 1819304813 && (BYTE12(v13) & 0x40) == 0) {
      DWORD2(v14) = 4 * HIDWORD(v14);
    }
    uint64_t v10 = *(unsigned int *)(v7 + 308);
    unsigned int v11 = *(_DWORD *)(a3 + 64) - v10;
    if (DWORD2(v14) && v11 >= *v8 * DWORD2(v14)) {
      unsigned int v11 = *v8 * DWORD2(v14);
    }
    bzero((void *)(*(void *)(a3 + 56) + v10), v11);
  }
  return 0;
}

uint64_t HALS_IOContextDescription::ClearInactiveInputSharedBuffers(uint64_t this, int a2)
{
  int v7 = a2;
  v6[0] = &unk_1F1480A30;
  v6[1] = this;
  uint64_t v8 = caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ConstItemWithIndex &)>::functor_invoker<HALS_IOContextDescription::ClearInactiveInputSharedBuffers::$_0>;
  long long v9 = &v7;
  uint64_t v2 = *(void *)(this + 56);
  uint64_t v3 = *(void *)(this + 64);
  if (v2 != v3)
  {
    uint64_t v4 = 0;
    char v5 = 1;
    do
    {
      if (v5) {
        uint64_t v4 = 0;
      }
      else {
        ++v4;
      }
      v11[0] = v2;
      v11[1] = v4;
      this = (*(uint64_t (**)(void *, void *))(v6[0] + 16))(v6, v11);
      if ((this & 1) == 0)
      {
        v10[0] = v2;
        v10[1] = v4;
        this = v8(&v9, v10);
        if (this) {
          break;
        }
      }
      char v5 = 0;
      v2 += 424;
    }
    while (v2 != v3);
  }
  return this;
}

uint64_t caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ConstItemWithIndex &)>::functor_invoker<HALS_IOContextDescription::ClearInactiveInputSharedBuffers(unsigned int)::$_0>(_DWORD **a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = *(_DWORD *)(*a2 + 108);
  if (!v3 || ((uint64_t v4 = *(uint64_t **)(v2 + 112), *(uint64_t **)(v2 + 120) != v4) ? (v5 = v4 == 0) : (v5 = 1), v5)) {
    uint64_t v4 = (uint64_t *)(v2 + 408);
  }
  uint64_t v6 = *v4;
  if (*(void *)(*v4 + 8) && *(void *)(v2 + 56))
  {
    int v7 = *a1;
    if (v3)
    {
      HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v12, (uint64_t *)(v2 + 112));
    }
    else
    {
      long long v8 = *(_OWORD *)(v2 + 384);
      long long v12 = *(_OWORD *)(v2 + 368);
      long long v13 = v8;
      uint64_t v14 = *(void *)(v2 + 400);
    }
    if (DWORD2(v12) == 1819304813 && (BYTE12(v12) & 0x40) == 0) {
      DWORD2(v13) = 4 * HIDWORD(v13);
    }
    uint64_t v9 = *(unsigned int *)(v6 + 308);
    unsigned int v10 = *(_DWORD *)(v2 + 64) - v9;
    if (DWORD2(v13) && v10 >= *v7 * DWORD2(v13)) {
      unsigned int v10 = *v7 * DWORD2(v13);
    }
    bzero((void *)(*(void *)(v2 + 56) + v9), v10);
  }
  return 0;
}

uint64_t HALS_IOContextDescription::EndianSwapSharedBuffers(HALS_IOContextDescription *this, int a2, int a3)
{
  if (a2)
  {
    int v5 = a3;
    v6[0] = caulk::function_ref<int ()(unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_0>;
    v6[1] = &v5;
    *(void *)&long long v7 = caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_IOContextDescription::ApplyToInput(caulk::function_ref<int ()(unsigned int,HALS_IOStreamInfo&)>)::$_0>;
    *((void *)&v7 + 1) = v6;
    return VisitableVector<HALS_IOStreamInfo>::apply<>(*((void *)this + 7), *((void *)this + 8), &v7);
  }
  else
  {
    LODWORD(v7) = a3;
    *(void *)&long long v4 = caulk::function_ref<int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::functor_invoker<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_1>;
    *((void *)&v4 + 1) = &v7;
    return VisitableVector<HALS_IOStackDescription>::apply<>(*((void *)this + 10), *((void *)this + 11), &v4);
  }
}

uint64_t caulk::function_ref<int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::functor_invoker<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_1>(_DWORD **a1, HALS_IOStackDescription **a2)
{
  uint64_t v2 = *a1;
  memset(&v15, 0, sizeof(v15));
  int v3 = (uint64_t *)*((void *)*a2 + 1);
  if (*((uint64_t **)*a2 + 2) != v3)
  {
    uint64_t v4 = *v3;
    if (-1944890851 * ((unint64_t)(v3[1] - *v3) >> 3) && v4 != 0)
    {
      if (!*(_DWORD *)(v4 + 108)
        || ((uint64_t v6 = *(uint64_t **)(v4 + 112), *(uint64_t **)(v4 + 120) != v6) ? (v7 = v6 == 0) : (v7 = 1), v7))
      {
        uint64_t v6 = (uint64_t *)(v4 + 408);
      }
      uint64_t v8 = *v6;
      if (*(void *)(*v6 + 8))
      {
        if (*(void *)(v4 + 56))
        {
          HALS_IOStackDescription::GetFormat(*a2, &v15);
          if (v15.mFormatID == 1819304813)
          {
            UInt32 mChannelsPerFrame = v15.mChannelsPerFrame;
            if (v15.mBytesPerFrame / v15.mChannelsPerFrame == 2)
            {
              uint64_t v12 = *v2 * v15.mChannelsPerFrame;
              if (v12)
              {
                long long v13 = (_WORD *)(*(void *)(v4 + 56) + *(unsigned int *)(v8 + 308));
                do
                {
                  *long long v13 = bswap32((unsigned __int16)*v13) >> 16;
                  ++v13;
                  --v12;
                }
                while (v12);
              }
            }
            else if (v15.mBytesPerFrame / v15.mChannelsPerFrame == 4 && *v2 * v15.mChannelsPerFrame)
            {
              unint64_t v10 = 0;
              uint64_t v11 = *(void *)(v4 + 56) + *(unsigned int *)(v8 + 308);
              do
              {
                *(_DWORD *)(v11 + 4 * v10) = bswap32(*(_DWORD *)(v11 + 4 * v10));
                ++v10;
              }
              while (v10 < mChannelsPerFrame * *v2);
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t caulk::function_ref<int ()(unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_0>(_DWORD **a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a3 + 108);
  if (!v4 || ((v5 = *(uint64_t **)(a3 + 112), *(uint64_t **)(a3 + 120) != v5) ? (BOOL v6 = v5 == 0) : (BOOL v6 = 1), v6)) {
    int v5 = (uint64_t *)(a3 + 408);
  }
  uint64_t v7 = *v5;
  if (*(void *)(*v5 + 8) && *(void *)(a3 + 56))
  {
    uint64_t v8 = *a1;
    if (v4)
    {
      HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v16, (uint64_t *)(a3 + 112));
    }
    else
    {
      long long v9 = *(_OWORD *)(a3 + 384);
      long long v16 = *(_OWORD *)(a3 + 368);
      long long v17 = v9;
      uint64_t v18 = *(void *)(a3 + 400);
    }
    if (DWORD2(v16) == 1819304813)
    {
      if ((BYTE12(v16) & 0x40) == 0) {
        DWORD2(v17) = 4 * HIDWORD(v17);
      }
      int v10 = HIDWORD(v17);
      if (DWORD2(v17) / HIDWORD(v17) == 2)
      {
        uint64_t v13 = (*v8 * HIDWORD(v17));
        if (v13)
        {
          uint64_t v14 = (_WORD *)(*(void *)(a3 + 56) + *(unsigned int *)(v7 + 308));
          do
          {
            *uint64_t v14 = bswap32((unsigned __int16)*v14) >> 16;
            ++v14;
            --v13;
          }
          while (v13);
        }
      }
      else if (DWORD2(v17) / HIDWORD(v17) == 4 && *v8 * HIDWORD(v17))
      {
        unint64_t v11 = 0;
        uint64_t v12 = *(void *)(a3 + 56) + *(unsigned int *)(v7 + 308);
        do
        {
          *(_DWORD *)(v12 + 4 * v11) = bswap32(*(_DWORD *)(v12 + 4 * v11));
          ++v11;
        }
        while (v11 < (v10 * *v8));
      }
    }
  }
  return 0;
}

uint64_t HALS_IOContextDescription::HostedDSPDescription::DebugString_DSPTypes(HALS_IOContextDescription::HostedDSPDescription *this, uint64_t a2)
{
  v38[4] = *MEMORY[0x1E4F143B8];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v29);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v34, (uint64_t)&__p);
  LOBYTE(v35) = 0;
  char v36 = 0;
  v34[0] = &unk_1F1480A80;
  DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing((DSP_Host_Types::StringLookup_AudioProcessing *)v37);
  if (v28 < 0) {
    operator delete(__p);
  }
  long long __dst = this;
  int v4 = *(void **)(a2 + 88);
  if (v4 == (void *)(a2 + 96))
  {
    char v5 = 0;
  }
  else
  {
    char v5 = 0;
    do
    {
      BOOL v6 = *((_DWORD *)v4 + 7) == 7;
      int v35 = *((_DWORD *)v4 + 7);
      char v36 = 1;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)" | ", 3);
      DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::StringLookup_AudioProcessing,unsigned int>::get_string(&__p, (uint64_t)v34);
      if (v28 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (v28 >= 0) {
        uint64_t v8 = v28;
      }
      else {
        uint64_t v8 = v27;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)p_p, v8);
      if (v28 < 0) {
        operator delete(__p);
      }
      long long v9 = (void *)v4[1];
      if (v9)
      {
        do
        {
          int v10 = v9;
          long long v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          int v10 = (void *)v4[2];
          BOOL v11 = *v10 == (void)v4;
          int v4 = v10;
        }
        while (!v11);
      }
      v5 |= v6;
      int v4 = v10;
    }
    while (v10 != (void *)(a2 + 96));
  }
  uint64_t v12 = *(void **)(a2 + 120);
  if (v12 != (void *)(a2 + 128))
  {
    do
    {
      BOOL v13 = *((_DWORD *)v12 + 7) == 7;
      int v35 = *((_DWORD *)v12 + 7);
      char v36 = 1;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)" | ", 3);
      DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::StringLookup_AudioProcessing,unsigned int>::get_string(&__p, (uint64_t)v34);
      if (v28 >= 0) {
        uint64_t v14 = &__p;
      }
      else {
        uint64_t v14 = __p;
      }
      if (v28 >= 0) {
        uint64_t v15 = v28;
      }
      else {
        uint64_t v15 = v27;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)v14, v15);
      if (v28 < 0) {
        operator delete(__p);
      }
      long long v16 = (void *)v12[1];
      if (v16)
      {
        do
        {
          long long v17 = v16;
          long long v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          long long v17 = (void *)v12[2];
          BOOL v11 = *v17 == (void)v12;
          uint64_t v12 = v17;
        }
        while (!v11);
      }
      v5 |= v13;
      uint64_t v12 = v17;
    }
    while (v17 != (void *)(a2 + 128));
  }
  if (*(unsigned char *)(a2 + 84) || (v5 & 1) != 0)
  {
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)" | Isolated Use Case ID: ", 25);
    unsigned int v20 = *(unsigned __int8 *)(a2 + 84);
    if (*(unsigned char *)(a2 + 84)) {
      unsigned int v20 = *(_DWORD *)(a2 + 80);
    }
    v19.i32[0] = bswap32(v20);
    *(int8x8_t *)v19.i8 = vzip1_s8(*(int8x8_t *)v19.i8, *(int8x8_t *)v19.i8);
    v21.i64[0] = 0x1F0000001FLL;
    v21.i64[1] = 0x1F0000001FLL;
    v22.i64[0] = 0x5F0000005FLL;
    v22.i64[1] = 0x5F0000005FLL;
    *(int8x8_t *)v19.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v22, (uint32x4_t)vsraq_n_s32(v21, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v19.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v19.i8, (int8x8_t)0x2E002E002E002ELL);
    char v28 = 4;
    LODWORD(__p) = vmovn_s16(v19).u32[0];
    BYTE4(__p) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&__p, 4);
    if (v28 < 0) {
      operator delete(__p);
    }
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__dst, (uint64_t)v31);
  v34[0] = &unk_1F1480A80;
  std::__function::__value_func<char const* ()(DSP_Host_Types::AudioProcessingType)>::~__value_func[abi:ne180100](v38);
  std::__function::__value_func<DSP_Host_Types::AudioProcessingType ()(char const*)>::~__value_func[abi:ne180100](v37);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v34);
  v29[0] = *MEMORY[0x1E4FBA408];
  uint64_t v23 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v29 + *(void *)(v29[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v30 = v23;
  v31[0] = MEMORY[0x1E4FBA470] + 16;
  if (v32 < 0) {
    operator delete((void *)v31[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1859700](&v33);
}

void sub_1BAED5350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::StringLookup_AudioProcessing,unsigned int>::~StringifiedKvp((DSP_Dictionariable::DictionariableKvp *)(v18 - 184));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void HALS_IOContextDescription::HostedDSPDescription::ReferenceStreamRequest::~ReferenceStreamRequest(HALS_IOContextDescription::HostedDSPDescription::ReferenceStreamRequest *this)
{
  uint64_t v1 = (const void *)*((void *)this + 1);
  if (v1) {
    CFRelease(v1);
  }
}

void *std::__function::__func<HALS_IOContextDescription::UpdateForDSPAdaptedLatency(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::UpdateForDSPAdaptedLatency(unsigned int)::$_0>,void ()(HALS_DSPStream *)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContextDescription::UpdateForDSPAdaptedLatency(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::UpdateForDSPAdaptedLatency(unsigned int)::$_0>,void ()(HALS_DSPStream *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN25HALS_IOContextDescription26UpdateForDSPAdaptedLatencyEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOContextDescription::UpdateForDSPAdaptedLatency(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::UpdateForDSPAdaptedLatency(unsigned int)::$_0>,void ()(HALS_DSPStream *)>::operator()(AMCP::Log::Scope_Registry *a1, _DWORD **a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  int v3 = *((_DWORD *)a1 + 2);
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v11, "com.apple.coreaudio", "AMCP");
  int v4 = *v11;
  if ((void)v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v12);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    BOOL v6 = pthread_self();
    mach_port_t v7 = pthread_mach_thread_np(v6);
    int v8 = v2[12];
    int v9 = v2[22];
    int v10 = v2[4];
    LODWORD(v11) = 67110658;
    HIDWORD(v11) = v7;
    LOWORD(v12) = 2080;
    *(void *)((char *)&v12 + 2) = "HALS_DSPStream.cpp";
    WORD5(v12) = 1024;
    HIDWORD(v12) = 657;
    LOWORD(v13) = 1024;
    *(_DWORD *)((char *)&v13 + 2) = v8;
    HIWORD(v13) = 1024;
    *(_DWORD *)uint64_t v14 = v9;
    *(_WORD *)&v14[4] = 1024;
    *(_DWORD *)&v14[6] = v10;
    *(_WORD *)&void v14[10] = 1024;
    int v15 = v3;
    _os_log_debug_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] (Device ID: %d) (Client ID: %d) (Object ID: %d) Setting DSP Stream adapted latency %d", (uint8_t *)&v11, 0x30u);
  }
  BOOL v11 = (NSObject **)MEMORY[0x1E4F143A8];
  *(void *)&long long v12 = 0x40000000;
  *((void *)&v12 + 1) = ___ZN14HALS_DSPStream23SetCurrentLatencyFramesEj_block_invoke;
  BOOL v13 = &__block_descriptor_tmp_25_15781;
  *(void *)uint64_t v14 = v2;
  *(_DWORD *)&v14[8] = v3;
  char v5 = (HALB_Mutex *)(*(uint64_t (**)(_DWORD *))(*(void *)v2 + 56))(v2);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)&v11);
}

uint64_t std::__function::__func<HALS_IOContextDescription::UpdateForDSPAdaptedLatency(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::UpdateForDSPAdaptedLatency(unsigned int)::$_0>,void ()(HALS_DSPStream *)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F1480C38;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *std::__function::__func<HALS_IOContextDescription::UpdateForDSPAdaptedLatency(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::UpdateForDSPAdaptedLatency(unsigned int)::$_0>,void ()(HALS_DSPStream *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F1480C38;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void std::__function::__func<HALS_IOContextDescription::UpdateForDSPAdaptedLatency(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::UpdateForDSPAdaptedLatency(unsigned int)::$_0>,void ()(HALS_DSPStream *)>::~__func()
{
}

void HALS_IOContextDescription::HostedDSPDescription::ResetRequests(HALS_IOContextDescription::HostedDSPDescription *this)
{
  uint64_t v3 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  if (v2 != *(void *)this)
  {
    do
    {
      uint64_t v4 = v2 - 16;
      std::__destroy_at[abi:ne180100]<HALS_IOContextDescription::HostedDSPDescription::ReferenceStreamRequest,0>(*(const void **)(v2 - 8));
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  *((void *)this + 1) = v3;
  if (*((unsigned char *)this + 72)) {
    *((unsigned char *)this + 72) = 0;
  }
  if (*((unsigned char *)this + 180)) {
    *((unsigned char *)this + 180) = 0;
  }
}

uint64_t for_all_taps(CFDictionaryRef theDict, uint64_t a2)
{
  if (theDict) {
    CFRetain(theDict);
  }
  v24[0] = &unk_1F14898A0;
  v24[1] = theDict;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v22, theDict, @"taps");
  CFArrayRef v4 = v23;
  if (v23)
  {
    char v5 = 0;
    unsigned int v6 = 0;
    char v7 = 1;
    while ((unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v4) > v6 && (v7 & 1) != 0)
    {
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v20, (uint64_t)v22, v6);
      if (theDicta)
      {
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v18, theDicta, @"uid");
        v15[0] = 0;
        v15[1] = 0;
        HALS_System::GetInstance(&v16, 0, v15);
        int v9 = (HALS_ObjectMap *)HALS_System::CopyTapByUUID(v16, v19);
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        if (v9)
        {
          uint64_t v14 = v9;
          HALS_ObjectMap::RetainObject(v9, v8);
          uint64_t v10 = *(void *)(a2 + 24);
          if (!v10) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          char v7 = (*(uint64_t (**)(uint64_t, HALS_ObjectMap **))(*(void *)v10 + 48))(v10, &v14);
          HALS_ObjectMap::ReleaseObject(v14, v11);
          char v5 = 1;
        }
        else
        {
          char v7 = 1;
        }
        HALS_ObjectMap::ReleaseObject(v9, v8);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v18);
      }
      else
      {
        char v7 = 1;
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v20);
      ++v6;
      CFArrayRef v4 = v23;
    }
    uint64_t v12 = v5 & 1;
  }
  else
  {
    uint64_t v12 = 0;
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v22);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v24);
  return v12;
}

void sub_1BAED5894(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, HALS_ObjectMap *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  HALS_ObjectMap::ReleaseObject(a10, a2);
  HALS_ObjectMap::ReleaseObject(v19, v22);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a15);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a17);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a19);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v20 - 64));
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(HALS_Releaser<HALS_Tap>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<HALS_IOContextDescription::ShouldWaitForTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::ShouldWaitForTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContextDescription::ShouldWaitForTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::ShouldWaitForTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK25HALS_IOContextDescription17ShouldWaitForTapsEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<HALS_IOContextDescription::ShouldWaitForTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::ShouldWaitForTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::operator()(uint64_t a1, HALS_Object *a2)
{
  uint64_t v3 = *(HALS_ObjectMap **)a2;
  *(void *)a2 = 0;
  uint64_t v5 = *((void *)v3 + 31);
  CFArrayRef v4 = (std::__shared_weak_count *)*((void *)v3 + 32);
  if (v4)
  {
    char v6 = 1;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    **(unsigned char **)(a1 + 8) = *(void *)(v5 + 328) != *(void *)(v5 + 336);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    uint64_t v5 = *((void *)v3 + 31);
    char v7 = (std::__shared_weak_count *)*((void *)v3 + 32);
    if (v7)
    {
      char v6 = 0;
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    char v7 = 0;
    **(unsigned char **)(a1 + 8) = *(void *)(v5 + 328) != *(void *)(v5 + 336);
    char v6 = 1;
  }
  uint64_t v8 = *(void *)(v5 + 328);
  uint64_t v9 = *(void *)(v5 + 336);
  if (v8 != v9)
  {
    char v10 = 0;
    uint64_t v11 = v8 + 16;
    while (1)
    {
      uint64_t v12 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**(unsigned int **)(v11 - 16));
      uint64_t v14 = (HALS_ObjectMap *)v12;
      if (!v12) {
        goto LABEL_11;
      }
      if (((*(uint64_t (**)(void))(**(void **)(v12 + 96) + 776))(*(void *)(v12 + 96)) & 1) == 0) {
        break;
      }
      int v15 = 1;
      char v10 = 1;
LABEL_12:
      HALS_ObjectMap::ReleaseObject(v14, v13);
      if (v11 == v9) {
        int v16 = 1;
      }
      else {
        int v16 = v15;
      }
      v11 += 16;
      if (v16 == 1) {
        goto LABEL_18;
      }
    }
    char v10 = 0;
LABEL_11:
    int v15 = 0;
    goto LABEL_12;
  }
  char v10 = 0;
LABEL_18:
  **(unsigned char **)(a1 + 16) = v10 & 1;
  if ((v6 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (**(unsigned char **)(a1 + 8)) {
    BOOL v17 = 0;
  }
  else {
    BOOL v17 = **(unsigned char **)(a1 + 16) == 0;
  }
  HALS_ObjectMap::ReleaseObject(v3, a2);
  return v17;
}

void sub_1BAED5B60(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v4, a2);
  if ((v5 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  HALS_ObjectMap::ReleaseObject(v2, v7);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<HALS_IOContextDescription::ShouldWaitForTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::ShouldWaitForTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1480D48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContextDescription::ShouldWaitForTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::ShouldWaitForTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F1480D48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<HALS_IOContextDescription::ShouldWaitForTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::ShouldWaitForTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::~__func()
{
}

void *std::__function::__func<HALS_IOContextDescription::RegisterContextWithTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::RegisterContextWithTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContextDescription::RegisterContextWithTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::RegisterContextWithTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN25HALS_IOContextDescription23RegisterContextWithTapsEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_IOContextDescription::RegisterContextWithTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::RegisterContextWithTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *(os_unfair_lock_s **)(v2 + 248);
  CFArrayRef v4 = *(std::__shared_weak_count **)(v2 + 256);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    HALS_MultiTap::register_autostart_context(v3, *(_DWORD *)(a1 + 8));
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    HALS_MultiTap::register_autostart_context(*(os_unfair_lock_s **)(v2 + 248), *(_DWORD *)(a1 + 8));
  }
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v2, v5);
  return 1;
}

uint64_t std::__function::__func<HALS_IOContextDescription::RegisterContextWithTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::RegisterContextWithTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F1480DD8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *std::__function::__func<HALS_IOContextDescription::RegisterContextWithTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::RegisterContextWithTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F1480DD8;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void std::__function::__func<HALS_IOContextDescription::RegisterContextWithTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::RegisterContextWithTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::~__func()
{
}

void *std::__function::__func<HALS_IOContextDescription::UnRegisterContextWithTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::UnRegisterContextWithTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContextDescription::UnRegisterContextWithTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::UnRegisterContextWithTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN25HALS_IOContextDescription25UnRegisterContextWithTapsEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_IOContextDescription::UnRegisterContextWithTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::UnRegisterContextWithTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *(os_unfair_lock_s **)(v2 + 248);
  CFArrayRef v4 = *(std::__shared_weak_count **)(v2 + 256);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    HALS_MultiTap::unregister_autostart_context(v3, *(_DWORD *)(a1 + 8));
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    HALS_MultiTap::unregister_autostart_context(*(os_unfair_lock_s **)(v2 + 248), *(_DWORD *)(a1 + 8));
  }
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v2, v5);
  return 1;
}

uint64_t std::__function::__func<HALS_IOContextDescription::UnRegisterContextWithTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::UnRegisterContextWithTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F1480E58;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *std::__function::__func<HALS_IOContextDescription::UnRegisterContextWithTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::UnRegisterContextWithTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F1480E58;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void std::__function::__func<HALS_IOContextDescription::UnRegisterContextWithTaps(unsigned int)::$_0,std::allocator<HALS_IOContextDescription::UnRegisterContextWithTaps(unsigned int)::$_0>,BOOL ()(HALS_Releaser<HALS_Tap>)>::~__func()
{
}

void HALS_IOContextDescription::CreateDriverIOThreadStateChangeDictionary(applesauce::CF::DictionaryRef *a1, uint64_t a2, int a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  int valuePtr = *(_DWORD *)(a2 + 440);
  CFNumberRef v7 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v7)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<__CFString const*,applesauce::CF::NumberRef>(Mutable, @"Context ID", v7);
  CFRelease(v7);
  if (a3)
  {
    if (a3 != 1) {
      goto LABEL_8;
    }
    int valuePtr = 1937010544;
    CFNumberRef v8 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!v8)
    {
      uint64_t v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v12, "Could not construct");
      __cxa_throw(v12, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    int valuePtr = 1937011316;
    CFNumberRef v8 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!v8)
    {
      BOOL v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v13, "Could not construct");
      __cxa_throw(v13, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<__CFString const*,applesauce::CF::NumberRef>(Mutable, @"Event", v8);
  CFRelease(v8);
LABEL_8:
  if (*(unsigned char *)(a2 + 340))
  {
    int valuePtr = *(_DWORD *)(a2 + 336);
    CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!v9)
    {
      uint64_t v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v11, "Could not construct");
      __cxa_throw(v11, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Dictionary_Builder::set_value<__CFString const*,applesauce::CF::NumberRef>(Mutable, @"Isolated Use Case", v9);
    CFRelease(v9);
  }
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary(a1, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1BAED6140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t HALS_DSPStream::GetIOBufferByteSize(HALS_DSPStream *this)
{
  return 0;
}

uint64_t HALS_DSPStream::GetIOBuffer(HALS_DSPStream *this)
{
  return 0;
}

uint64_t HALS_DSPStream::IsMetaStream(HALS_DSPStream *this)
{
  return 0;
}

uint64_t HALS_DSPStream::GetStartingChannel(HALS_DSPStream *this)
{
  return 0;
}

uint64_t HALS_DSPStream::AllowClientAccessToProperty()
{
  return 1;
}

void HALS_DSPStream::GetPropertyData(HALS_DSPStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, unsigned int *a5, void *a6, uint64_t a7, const void *a8, HALS_Client *a9)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1935894637)
  {
    if (mSelector <= 1936092512)
    {
      if (mSelector > 1936092450)
      {
        if (mSelector == 1936092451)
        {
          if (a4 <= 0x37)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_DSPStream.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 388;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioDevicePropertyStreamFormats", buf, 0x12u);
            }
            exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
            *(void *)exceptiouint64_t n = off_1F148A5D8;
            exception[2] = 561211770;
          }
          if (a9 && *((_DWORD *)a9 + 4) == *((_DWORD *)this + 22))
          {
            uint64_t v42 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
            if (v42)
            {
              *(void *)AudioObjectPropertyAddress buf = 0;
              *(void *)&uint8_t buf[8] = buf;
              *(void *)&buf[16] = 0x6002000000;
              int v91 = __Block_byref_object_copy__15749;
              long long v93 = 0u;
              long long v94 = 0u;
              *(void *)float32x4_t v92 = __Block_byref_object_dispose__15750;
              uint64_t v95 = 0;
              *(_OWORD *)&v92[8] = 0u;
              v85[0] = MEMORY[0x1E4F143A8];
              v85[1] = 0x40000000;
              v85[2] = ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_11;
              v85[3] = &unk_1E6235628;
              v85[4] = buf;
              v85[5] = this;
              uint64_t v43 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DSPStream *))(*(void *)this + 56))(this);
              HALB_CommandGate::ExecuteCommand(v43, (uint64_t)v85);
              long long v44 = *(_OWORD *)(*(void *)&buf[8] + 56);
              long long v45 = *(_OWORD *)(*(void *)&buf[8] + 72);
              long long v46 = *(_OWORD *)(*(void *)&buf[8] + 40);
              a6[6] = *(void *)(*(void *)&buf[8] + 88);
              *((_OWORD *)a6 + 1) = v44;
              *((_OWORD *)a6 + 2) = v45;
              *(_OWORD *)a6 = v46;
              _Block_object_dispose(buf, 8);
            }
            else
            {
              a6[6] = 0;
              *((_OWORD *)a6 + 1) = 0u;
              *((_OWORD *)a6 + 2) = 0u;
              *(_OWORD *)a6 = 0u;
            }
            HALS_ObjectMap::ReleaseObject(v42, v41);
            goto LABEL_99;
          }
          goto LABEL_98;
        }
        if (mSelector == 1936092479)
        {
          if (a4 <= 0x27)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_DSPStream.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 414;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioDevicePropertyStreamFormatSupported", buf, 0x12u);
            }
            char v28 = __cxa_allocate_exception(0x10uLL);
            *(void *)char v28 = off_1F148A5D8;
            v28[2] = 561211770;
          }
          goto LABEL_74;
        }
      }
      else
      {
        if (mSelector == 1935894638)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_DSPStream.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 322;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyStartingChannel", buf, 0x12u);
            }
            uint64_t v72 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v72 = off_1F148A5D8;
            v72[2] = 561211770;
          }
          goto LABEL_62;
        }
        if (mSelector == 1935960434)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_DSPStream.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 301;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyDirection", buf, 0x12u);
            }
            CFTypeRef v70 = __cxa_allocate_exception(0x10uLL);
            *(void *)CFTypeRef v70 = off_1F148A5D8;
            v70[2] = 561211770;
          }
          v89[0] = MEMORY[0x1E4F143A8];
          v89[1] = 0x40000000;
          v89[2] = ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
          v89[3] = &__block_descriptor_tmp_15736;
          v89[4] = this;
          v89[5] = a6;
          uint64_t v24 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DSPStream *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v24, (uint64_t)v89);
          goto LABEL_78;
        }
      }
      goto LABEL_102;
    }
    if (mSelector <= 1936092531)
    {
      if (mSelector == 1936092513)
      {
        if (a4 <= 0x37)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_DSPStream.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 362;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyAvailableVirtualFormats", buf, 0x12u);
          }
          uint64_t v80 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v80 = off_1F148A5D8;
          v80[2] = 561211770;
        }
        if (a9 && *((_DWORD *)a9 + 4) == *((_DWORD *)this + 22))
        {
          uint64_t v64 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
          if (v64)
          {
            *(void *)AudioObjectPropertyAddress buf = 0;
            *(void *)&uint8_t buf[8] = buf;
            *(void *)&buf[16] = 0x6002000000;
            int v91 = __Block_byref_object_copy__15749;
            long long v93 = 0u;
            long long v94 = 0u;
            *(void *)float32x4_t v92 = __Block_byref_object_dispose__15750;
            uint64_t v95 = 0;
            *(_OWORD *)&v92[8] = 0u;
            v86[0] = MEMORY[0x1E4F143A8];
            v86[1] = 0x40000000;
            v86[2] = ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_9;
            v86[3] = &unk_1E6235600;
            v86[4] = buf;
            v86[5] = this;
            uint64_t v65 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DSPStream *))(*(void *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v65, (uint64_t)v86);
            long long v66 = *(_OWORD *)(*(void *)&buf[8] + 56);
            long long v67 = *(_OWORD *)(*(void *)&buf[8] + 72);
            long long v68 = *(_OWORD *)(*(void *)&buf[8] + 40);
            a6[6] = *(void *)(*(void *)&buf[8] + 88);
            *((_OWORD *)a6 + 1) = v66;
            *((_OWORD *)a6 + 2) = v67;
            *(_OWORD *)a6 = v68;
            _Block_object_dispose(buf, 8);
          }
          else
          {
            a6[6] = 0;
            *((_OWORD *)a6 + 1) = 0u;
            *((_OWORD *)a6 + 2) = 0u;
            *(_OWORD *)a6 = 0u;
          }
          HALS_ObjectMap::ReleaseObject(v64, v63);
          goto LABEL_99;
        }
        goto LABEL_98;
      }
      if (mSelector == 1936092525)
      {
        if (a4 <= 0x27)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_DSPStream.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 423;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioDevicePropertyStreamFormatMatch", buf, 0x12u);
          }
          uint64_t v30 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v30 = off_1F148A5D8;
          v30[2] = 561211770;
        }
        goto LABEL_74;
      }
      goto LABEL_102;
    }
    switch(mSelector)
    {
      case 1936092532:
        if (a4 <= 0x27)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_DSPStream.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 345;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyVirtualFormat", buf, 0x12u);
          }
          long long v78 = __cxa_allocate_exception(0x10uLL);
          *(void *)long long v78 = off_1F148A5D8;
          v78[2] = 561211770;
        }
        int v55 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
        if (v55)
        {
          v87[0] = MEMORY[0x1E4F143A8];
          v87[1] = 0x40000000;
          v87[2] = ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_7;
          v87[3] = &__block_descriptor_tmp_8_15747;
          v87[4] = this;
          v87[5] = a6;
          long long v56 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DSPStream *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v56, (uint64_t)v87);
        }
        else
        {
          a6[4] = 0;
          *(_OWORD *)a6 = 0u;
          *((_OWORD *)a6 + 1) = 0u;
        }
        *a5 = 40;
        HALS_ObjectMap::ReleaseObject(v55, v54);
        break;
      case 1952542835:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_DSPStream.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 522;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyIsReferenceStream", buf, 0x12u);
          }
          uint64_t v76 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v76 = off_1F148A5D8;
          v76[2] = 561211770;
        }
        *(_DWORD *)a6 = 0;
        goto LABEL_78;
      case 1952805485:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_DSPStream.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 310;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyTerminalType", buf, 0x12u);
          }
          int v69 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v69 = off_1F148A5D8;
          v69[2] = 561211770;
        }
        BOOL v17 = (unsigned int *)*((void *)this + 8);
        if (v17 == *((unsigned int **)this + 9))
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_DSPStream.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 311;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: mPhysicalStreamIDs is empty", buf, 0x12u);
          }
          uint64_t v81 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v81 = off_1F148A5D8;
          v81[2] = 1852797029;
        }
        uint64_t v18 = (HALS_Stream *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v17);
        uint64_t v20 = v18;
        if (v18) {
          LODWORD(v18) = HALS_Stream::GetTerminalType(v18);
        }
        *(_DWORD *)a6 = v18;
        *a5 = 4;
        HALS_ObjectMap::ReleaseObject(v20, v19);
        break;
      default:
        goto LABEL_102;
    }
  }
  else
  {
    if (mSelector > 1885762594)
    {
      if (mSelector > 1885762656)
      {
        if (mSelector != 1885762657)
        {
          if (mSelector != 1885762669)
          {
            if (mSelector == 1935762292)
            {
              if (a4 <= 3)
              {
                if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                  *(void *)&uint8_t buf[4] = "HALS_DSPStream.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 292;
                  _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyIsActive", buf, 0x12u);
                }
                int v16 = __cxa_allocate_exception(0x10uLL);
                *(void *)int v16 = off_1F148A5D8;
                void v16[2] = 561211770;
              }
LABEL_62:
              *(_DWORD *)a6 = 1;
LABEL_78:
              unsigned int v47 = 4;
              goto LABEL_100;
            }
            goto LABEL_102;
          }
          if (a4 <= 0x27)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_DSPStream.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 513;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormatMatch", buf, 0x12u);
            }
            int v75 = __cxa_allocate_exception(0x10uLL);
            *(void *)int v75 = off_1F148A5D8;
            v75[2] = 561211770;
          }
          goto LABEL_74;
        }
        if (a4 <= 0x37)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_DSPStream.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 456;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyAvailablePhysicalFormats", buf, 0x12u);
          }
          long long v77 = __cxa_allocate_exception(0x10uLL);
          *(void *)long long v77 = off_1F148A5D8;
          v77[2] = 561211770;
        }
        if (a9 && *((_DWORD *)a9 + 4) == *((_DWORD *)this + 22))
        {
          uint64_t v49 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
          if (v49)
          {
            *(void *)AudioObjectPropertyAddress buf = 0;
            *(void *)&uint8_t buf[8] = buf;
            *(void *)&buf[16] = 0x6002000000;
            int v91 = __Block_byref_object_copy__15749;
            long long v93 = 0u;
            long long v94 = 0u;
            *(void *)float32x4_t v92 = __Block_byref_object_dispose__15750;
            uint64_t v95 = 0;
            *(_OWORD *)&v92[8] = 0u;
            v83[0] = MEMORY[0x1E4F143A8];
            v83[1] = 0x40000000;
            v83[2] = ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_15;
            v83[3] = &unk_1E6235670;
            v83[4] = buf;
            v83[5] = this;
            unint64_t v50 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DSPStream *))(*(void *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v50, (uint64_t)v83);
            long long v51 = *(_OWORD *)(*(void *)&buf[8] + 56);
            long long v52 = *(_OWORD *)(*(void *)&buf[8] + 72);
            long long v53 = *(_OWORD *)(*(void *)&buf[8] + 40);
            a6[6] = *(void *)(*(void *)&buf[8] + 88);
            *((_OWORD *)a6 + 1) = v51;
            *((_OWORD *)a6 + 2) = v52;
            *(_OWORD *)a6 = v53;
            _Block_object_dispose(buf, 8);
          }
          HALS_ObjectMap::ReleaseObject(v49, v48);
          goto LABEL_99;
        }
        goto LABEL_98;
      }
      if (mSelector == 1885762595)
      {
        if (a4 <= 0x37)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_DSPStream.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 478;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormats", buf, 0x12u);
          }
          long long v79 = __cxa_allocate_exception(0x10uLL);
          *(void *)long long v79 = off_1F148A5D8;
          v79[2] = 561211770;
        }
        if (a9 && *((_DWORD *)a9 + 4) == *((_DWORD *)this + 22))
        {
          unint64_t v58 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
          if (v58)
          {
            *(void *)AudioObjectPropertyAddress buf = 0;
            *(void *)&uint8_t buf[8] = buf;
            *(void *)&buf[16] = 0x6002000000;
            int v91 = __Block_byref_object_copy__15749;
            long long v93 = 0u;
            long long v94 = 0u;
            *(void *)float32x4_t v92 = __Block_byref_object_dispose__15750;
            uint64_t v95 = 0;
            *(_OWORD *)&v92[8] = 0u;
            v82[0] = MEMORY[0x1E4F143A8];
            v82[1] = 0x40000000;
            v82[2] = ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_17;
            v82[3] = &unk_1E6235698;
            v82[4] = buf;
            v82[5] = this;
            mach_port_t v59 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DSPStream *))(*(void *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v59, (uint64_t)v82);
            long long v60 = *(_OWORD *)(*(void *)&buf[8] + 56);
            long long v61 = *(_OWORD *)(*(void *)&buf[8] + 72);
            long long v62 = *(_OWORD *)(*(void *)&buf[8] + 40);
            a6[6] = *(void *)(*(void *)&buf[8] + 88);
            *((_OWORD *)a6 + 1) = v60;
            *((_OWORD *)a6 + 2) = v61;
            *(_OWORD *)a6 = v62;
            _Block_object_dispose(buf, 8);
          }
          else
          {
            a6[6] = 0;
            *((_OWORD *)a6 + 1) = 0u;
            *((_OWORD *)a6 + 2) = 0u;
            *(_OWORD *)a6 = 0u;
          }
          HALS_ObjectMap::ReleaseObject(v58, v57);
          goto LABEL_99;
        }
LABEL_98:
        a6[6] = 0;
        *((_OWORD *)a6 + 1) = 0u;
        *((_OWORD *)a6 + 2) = 0u;
        *(_OWORD *)a6 = 0u;
LABEL_99:
        unsigned int v47 = 56;
        goto LABEL_100;
      }
      if (mSelector == 1885762623)
      {
        if (a4 <= 0x27)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_DSPStream.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 504;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormatSupported", buf, 0x12u);
          }
          unsigned int v29 = __cxa_allocate_exception(0x10uLL);
          *(void *)unsigned int v29 = off_1F148A5D8;
          void v29[2] = 561211770;
        }
        goto LABEL_74;
      }
      goto LABEL_102;
    }
    if (mSelector > 1819569762)
    {
      if (mSelector == 1819569763)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_DSPStream.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 331;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyLatency", buf, 0x12u);
          }
          float64x2_t v73 = __cxa_allocate_exception(0x10uLL);
          *(void *)float64x2_t v73 = off_1F148A5D8;
          v73[2] = 561211770;
        }
        v88[0] = MEMORY[0x1E4F143A8];
        v88[1] = 0x40000000;
        v88[2] = ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2;
        v88[3] = &__block_descriptor_tmp_3_15741;
        void v88[4] = this;
        v88[5] = a6;
        char v32 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DSPStream *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v32, (uint64_t)v88);
        AMCP::Log::Scope_Registry::get(v33);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        char v34 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
        {
          int v35 = pthread_self();
          mach_port_t v36 = pthread_mach_thread_np(v35);
          int v37 = *((_DWORD *)this + 12);
          int v38 = *((_DWORD *)this + 22);
          int v39 = *((_DWORD *)this + 4);
          int v40 = *(_DWORD *)a6;
          *(_DWORD *)AudioObjectPropertyAddress buf = 67110658;
          *(_DWORD *)&uint8_t buf[4] = v36;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "HALS_DSPStream.cpp";
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&unsigned char buf[20] = 337;
          LOWORD(v91) = 1024;
          *(_DWORD *)((char *)&v91 + 2) = v37;
          HIWORD(v91) = 1024;
          *(_DWORD *)float32x4_t v92 = v38;
          *(_WORD *)&v92[4] = 1024;
          *(_DWORD *)&v92[6] = v39;
          *(_WORD *)&v92[10] = 1024;
          *(_DWORD *)&v92[12] = v40;
          _os_log_debug_impl(&dword_1BAA78000, v34, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] (Device ID: %d) (Client ID: %d) (Object ID: %d) Getting DSP Stream adapted latency %d", buf, 0x30u);
        }
        goto LABEL_78;
      }
      if (mSelector == 1885762592)
      {
        if (a4 <= 0x27)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_DSPStream.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 432;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormat", buf, 0x12u);
          }
          unint64_t v71 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v71 = off_1F148A5D8;
          v71[2] = 561211770;
        }
        if (a9 && *((_DWORD *)a9 + 4) == *((_DWORD *)this + 22))
        {
          int v26 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
          if (v26)
          {
            v84[0] = MEMORY[0x1E4F143A8];
            v84[1] = 0x40000000;
            v84[2] = ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_13;
            v84[3] = &__block_descriptor_tmp_14_15757;
            v84[4] = this;
            v84[5] = a6;
            uint64_t v27 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DSPStream *))(*(void *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v27, (uint64_t)v84);
          }
          else
          {
            a6[4] = 0;
            *(_OWORD *)a6 = 0u;
            *((_OWORD *)a6 + 1) = 0u;
          }
          HALS_ObjectMap::ReleaseObject(v26, v25);
          goto LABEL_75;
        }
LABEL_74:
        a6[4] = 0;
        *(_OWORD *)a6 = 0u;
        *((_OWORD *)a6 + 1) = 0u;
LABEL_75:
        unsigned int v47 = 40;
LABEL_100:
        *a5 = v47;
        return;
      }
LABEL_102:
      HALS_Stream::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, a9);
      return;
    }
    if (mSelector == 1685287027)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_DSPStream.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 531;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DSPStream::_GetPropertyData: bad property data size for kAudioStreamPropertyIsDSPStream", buf, 0x12u);
        }
        uint64_t v31 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v31 = off_1F148A5D8;
        v31[2] = 561211770;
      }
      goto LABEL_62;
    }
    if (mSelector != 1819107691) {
      goto LABEL_102;
    }
    uint64_t v21 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 7));
    CFArrayRef v23 = (HALS_ObjectMap *)v21;
    if (v21)
    {
      strcpy(buf, "kamlbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      (*(void (**)(uint64_t, void, unsigned char *, uint64_t, unsigned int *, void *, uint64_t, const void *, HALS_Client *))(*(void *)v21 + 112))(v21, *((unsigned int *)this + 7), buf, a4, a5, a6, a7, a8, a9);
    }
    HALS_ObjectMap::ReleaseObject(v23, v22);
  }
}

void sub_1BAED7A68(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(unsigned __int8 *)(*(void *)(result + 32) + 52);
  return result;
}

uint64_t ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(_DWORD *)(*(void *)(result + 32) + 136);
  return result;
}

__n128 ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_7(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  __n128 result = *(__n128 *)(v1 + 96);
  long long v4 = *(_OWORD *)(v1 + 112);
  *(void *)(v2 + 32) = *(void *)(v1 + 128);
  *(__n128 *)uint64_t v2 = result;
  *(_OWORD *)(v2 + 16) = v4;
  return result;
}

__n128 __Block_byref_object_copy__15749(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 40);
  long long v3 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 40) = v2;
  __n128 result = *(__n128 *)(a2 + 80);
  *(__n128 *)(a1 + 80) = result;
  return result;
}

double ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_9(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  double result = *(double *)(v1 + 96);
  long long v3 = *(_OWORD *)(v1 + 120);
  long long v4 = *(_OWORD *)(v1 + 104);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  *(double *)(v5 + 40) = result;
  *(_OWORD *)(v5 + 48) = v4;
  *(_OWORD *)(v5 + 64) = v3;
  *(double *)(v5 + 80) = result;
  *(double *)(v5 + 88) = result;
  return result;
}

double ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_11(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  double result = *(double *)(v1 + 96);
  long long v3 = *(_OWORD *)(v1 + 120);
  long long v4 = *(_OWORD *)(v1 + 104);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  *(double *)(v5 + 40) = result;
  *(_OWORD *)(v5 + 48) = v4;
  *(_OWORD *)(v5 + 64) = v3;
  *(double *)(v5 + 80) = result;
  *(double *)(v5 + 88) = result;
  return result;
}

__n128 ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_13(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  __n128 result = *(__n128 *)(v1 + 96);
  long long v4 = *(_OWORD *)(v1 + 112);
  *(void *)(v2 + 32) = *(void *)(v1 + 128);
  *(__n128 *)uint64_t v2 = result;
  *(_OWORD *)(v2 + 16) = v4;
  return result;
}

double ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_15(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  double result = *(double *)(v1 + 96);
  long long v3 = *(_OWORD *)(v1 + 120);
  long long v4 = *(_OWORD *)(v1 + 104);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  *(double *)(v5 + 40) = result;
  *(_OWORD *)(v5 + 48) = v4;
  *(_OWORD *)(v5 + 64) = v3;
  *(double *)(v5 + 80) = result;
  *(double *)(v5 + 88) = result;
  return result;
}

double ___ZNK14HALS_DSPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_17(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  double result = *(double *)(v1 + 96);
  long long v3 = *(_OWORD *)(v1 + 120);
  long long v4 = *(_OWORD *)(v1 + 104);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  *(double *)(v5 + 40) = result;
  *(_OWORD *)(v5 + 48) = v4;
  *(_OWORD *)(v5 + 64) = v3;
  *(double *)(v5 + 80) = result;
  *(double *)(v5 + 88) = result;
  return result;
}

uint64_t HALS_DSPStream::GetPropertyDataSize(uint64_t a1, uint64_t a2, int *a3)
{
  int v3 = *a3;
  if (*a3 > 1935894637)
  {
    if (v3 <= 1936092512)
    {
      if (v3 <= 1936092450)
      {
        if (v3 == 1935894638) {
          return 4;
        }
        int v4 = 1935960434;
        goto LABEL_19;
      }
      if (v3 == 1936092451) {
        return 56;
      }
      unsigned __int16 v7 = 27967;
    }
    else
    {
      if (v3 > 1936092531)
      {
        if (v3 != 1936092532)
        {
          if (v3 == 1952542835) {
            return 4;
          }
          int v4 = 1952805485;
          goto LABEL_19;
        }
        return 40;
      }
      if (v3 == 1936092513) {
        return 56;
      }
      unsigned __int16 v7 = 28013;
    }
    int v8 = v7 | 0x73660000;
  }
  else
  {
    if (v3 <= 1885762594)
    {
      if (v3 <= 1819569762)
      {
        if (v3 != 1685287027)
        {
          if (v3 == 1819107691) {
            return 8;
          }
          return HALS_Stream::GetPropertyDataSize(a1, a2, a3);
        }
        return 4;
      }
      if (v3 == 1819569763) {
        return 4;
      }
      unsigned __int16 v6 = 29728;
    }
    else
    {
      if (v3 > 1885762656)
      {
        if (v3 != 1885762657)
        {
          if (v3 != 1885762669)
          {
            int v4 = 1935762292;
LABEL_19:
            if (v3 != v4) {
              return HALS_Stream::GetPropertyDataSize(a1, a2, a3);
            }
            return 4;
          }
          return 40;
        }
        return 56;
      }
      if (v3 == 1885762595) {
        return 56;
      }
      unsigned __int16 v6 = 29759;
    }
    int v8 = v6 | 0x70660000;
  }
  if (v3 == v8) {
    return 40;
  }
  return HALS_Stream::GetPropertyDataSize(a1, a2, a3);
}

uint64_t HALS_DSPStream::IsPropertySettable(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = 0;
  int v4 = *a3;
  if (*a3 > 1935894637)
  {
    if (v4 <= 1936092512)
    {
      if (v4 <= 1936092450)
      {
        BOOL v5 = v4 == 1935894638;
        int v6 = 1935960434;
        goto LABEL_27;
      }
      BOOL v5 = v4 == 1936092451;
      unsigned __int16 v9 = 27967;
    }
    else
    {
      if (v4 > 1936092531)
      {
        if (v4 == 1952805485 || v4 == 1952542835) {
          return v3;
        }
        int v8 = 1936092532;
        goto LABEL_21;
      }
      BOOL v5 = v4 == 1936092513;
      unsigned __int16 v9 = 28013;
    }
    int v6 = v9 | 0x73660000;
    goto LABEL_27;
  }
  if (v4 > 1885762594)
  {
    if (v4 <= 1885762656)
    {
      BOOL v5 = v4 == 1885762595;
      int v6 = 1885762623;
    }
    else
    {
      BOOL v5 = v4 == 1885762657 || v4 == 1885762669;
      int v6 = 1935762292;
    }
LABEL_27:
    if (!v5 && v4 != v6) {
      return HALS_Stream::IsPropertySettable(a1, a2, a3);
    }
    return v3;
  }
  if (v4 <= 1819569762)
  {
    BOOL v5 = v4 == 1685287027;
    int v6 = 1819107691;
    goto LABEL_27;
  }
  if (v4 == 1819569763) {
    return v3;
  }
  int v8 = 1885762592;
LABEL_21:
  if (v4 == v8) {
    return 1;
  }
  return HALS_Stream::IsPropertySettable(a1, a2, a3);
}

uint64_t HALS_DSPStream::HasProperty(HALS_DSPStream *this, unsigned int a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  signed int mSelector = a3->mSelector;
  uint64_t v7 = 1;
  if ((int)a3->mSelector > 1935894637)
  {
    if (mSelector <= 1936092478)
    {
      BOOL v13 = mSelector == 1935894638 || mSelector == 1935960434;
      int v14 = 1936092451;
    }
    else
    {
      BOOL v13 = (mSelector - 1936092479) <= 0x35
         && ((1 << (mSelector - 63)) & 0x20400400000001) != 0
         || mSelector == 1952542835;
      int v14 = 1952805485;
    }
    if (v13 || mSelector == v14) {
      return v7;
    }
    goto LABEL_35;
  }
  if (mSelector <= 1885762591)
  {
    if (mSelector == 1685287027) {
      return v7;
    }
    if (mSelector == 1819107691)
    {
      uint64_t v18 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 7));
      uint64_t v20 = (HALS_ObjectMap *)v18;
      if (v18)
      {
        uint64_t v21 = 0x676C6F626C6D616BLL;
        int v22 = 0;
        uint64_t v7 = (*(uint64_t (**)(uint64_t, void, uint64_t *, HALS_Client *))(*(void *)v18 + 88))(v18, *((unsigned int *)this + 7), &v21, a4);
      }
      else
      {
        uint64_t v7 = 0;
      }
      HALS_ObjectMap::ReleaseObject(v20, v19);
      return v7;
    }
    int v15 = 1819569763;
LABEL_34:
    if (mSelector != v15) {
      goto LABEL_35;
    }
    return v7;
  }
  if (mSelector > 1885762656)
  {
    if (mSelector == 1885762657 || mSelector == 1885762669) {
      return v7;
    }
    int v15 = 1935762292;
    goto LABEL_34;
  }
  unsigned int v8 = mSelector - 1885762592;
  BOOL v9 = v8 > 0x1F;
  unsigned int v10 = (1 << v8) & 0x80000009;
  if (!v9 && v10 != 0) {
    return v7;
  }
LABEL_35:

  return HALS_Stream::HasProperty(this, a2, a3, a4);
}

void sub_1BAED81B8(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void HALS_DSPStream::~HALS_DSPStream(HALS_DSPStream *this)
{
  HALS_DSPStream::~HALS_DSPStream(this);

  JUMPOUT(0x1C1859840);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F1480ED8;
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }

  HALS_Object::~HALS_Object(this);
}

__n128 ___ZNK14HALS_DSPStream24GetCurrentPhysicalFormatER27AudioStreamBasicDescription_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  __n128 result = *(__n128 *)(v1 + 96);
  long long v4 = *(_OWORD *)(v1 + 112);
  *(void *)(v2 + 32) = *(void *)(v1 + 128);
  *(__n128 *)uint64_t v2 = result;
  *(_OWORD *)(v2 + 16) = v4;
  return result;
}

void HALS_DSPStream::SetCurrentPhysicalFormat(HALS_DSPStream *this, const AudioStreamBasicDescription *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  long long v4 = **(NSObject ***)buf;
  if (*(void *)v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v15);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v6 = pthread_self();
    mach_port_t v7 = pthread_mach_thread_np(v6);
    int v8 = *((_DWORD *)this + 12);
    int v9 = *((_DWORD *)this + 22);
    int v10 = *((_DWORD *)this + 4);
    int mSampleRate = (int)a2->mSampleRate;
    UInt32 mChannelsPerFrame = a2->mChannelsPerFrame;
    *(_DWORD *)AudioObjectPropertyAddress buf = 67110914;
    *(_DWORD *)&uint8_t buf[4] = v7;
    *(_WORD *)int v15 = 2080;
    *(void *)&uint64_t v15[2] = "HALS_DSPStream.cpp";
    __int16 v16 = 1024;
    int v17 = 568;
    __int16 v18 = 1024;
    int v19 = v8;
    __int16 v20 = 1024;
    int v21 = v9;
    __int16 v22 = 1024;
    int v23 = v10;
    __int16 v24 = 1024;
    UInt32 v25 = mChannelsPerFrame;
    __int16 v26 = 1024;
    int v27 = mSampleRate;
    _os_log_debug_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] (Device ID: %d) (Client ID: %d) (Object ID: %d) Setting DSP Stream format (%d channels, %6.1d rate)", buf, 0x36u);
  }
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 0x40000000;
  void v13[2] = ___ZN14HALS_DSPStream24SetCurrentPhysicalFormatERK27AudioStreamBasicDescription_block_invoke;
  v13[3] = &__block_descriptor_tmp_21_15773;
  _DWORD v13[4] = this;
  v13[5] = a2;
  BOOL v5 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DSPStream *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v13);
}

void ___ZN14HALS_DSPStream24SetCurrentPhysicalFormatERK27AudioStreamBasicDescription_block_invoke(uint64_t a1)
{
  queue[40] = *(dispatch_queue_t *)MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(long long **)(a1 + 40);
  long long v3 = v2[1];
  long long v23 = *v2;
  long long v24 = v3;
  uint64_t v25 = *((void *)v2 + 4);
  long long v4 = (double *)(v1 + 96);
  int v5 = *(_DWORD *)(v1 + 104);
  if (!v5) {
    goto LABEL_35;
  }
  if (*(double *)&v23 != 0.0 && *v4 != 0.0 && *(double *)&v23 != *v4) {
    goto LABEL_35;
  }
  if (DWORD2(v23) && DWORD2(v23) != v5) {
    goto LABEL_35;
  }
  if (v24)
  {
    int v7 = *(_DWORD *)(v1 + 112);
    if (v7 && v24 != v7) {
      goto LABEL_35;
    }
  }
  if (DWORD1(v24) && ((int v9 = *(_DWORD *)(v1 + 116)) != 0 ? (v10 = DWORD1(v24) == v9) : (v10 = 1), !v10)
    || DWORD2(v24) && ((v11 = *(_DWORD *)(v1 + 120)) != 0 ? (BOOL v12 = DWORD2(v24) == v11) : (BOOL v12 = 1), !v12)
    || HIDWORD(v24) && (int v13 = *(_DWORD *)(v1 + 124)) != 0 && HIDWORD(v24) != v13
    || v25 && (int v14 = *(_DWORD *)(v1 + 128)) != 0 && v25 != v14
    || !CA::Implementation::EquivalentFormatFlags((CA::Implementation *)&v23, (const AudioStreamBasicDescription *)(v1 + 96), (const AudioStreamBasicDescription *)1, 1))
  {
LABEL_35:
    long long v15 = *v2;
    long long v16 = v2[1];
    *(void *)(v1 + 128) = *((void *)v2 + 4);
    *(_OWORD *)long long v4 = v15;
    *(_OWORD *)(v1 + 112) = v16;
    int v17 = (dispatch_object_t *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 64))(v1);
    AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)queue, *v17);
    int v18 = *(_DWORD *)(v1 + 16);
    int v19 = *(_DWORD *)(v1 + 48);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZN14HALS_DSPStream24SetCurrentPhysicalFormatERK27AudioStreamBasicDescription_block_invoke_2;
    block[3] = &__block_descriptor_tmp_20_15774;
    int v21 = v18;
    int v22 = v19;
    dispatch_async(queue[0], block);
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)queue);
  }
}

void ___ZN14HALS_DSPStream24SetCurrentPhysicalFormatERK27AudioStreamBasicDescription_block_invoke_2(uint64_t a1, uint64_t a2, const AudioObjectPropertyAddress *a3)
{
  memset(v19, 0, sizeof(v19));
  long long v4 = (void *)*(unsigned int *)(a1 + 32);
  memset(v18, 0, 24);
  v18[3] = v4;
  *(void *)&long long v15 = 0x676C6F6273666D74;
  DWORD2(v15) = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v18, (AudioObjectPropertyAddress *)&v15, a3);
  *(void *)&long long v15 = 0x676C6F6270667420;
  DWORD2(v15) = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v18, (AudioObjectPropertyAddress *)&v15, v5);
  *(void *)&long long v15 = 0x676C6F626C746E63;
  DWORD2(v15) = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v18, (AudioObjectPropertyAddress *)&v15, v6);
  CAPropertyAddressListVector::AppendItem((CAPropertyAddressListVector *)v19, (uint64_t **)v18);
  uint64_t v7 = *(unsigned int *)(a1 + 36);
  long long v15 = 0uLL;
  uint64_t v16 = 0;
  uint64_t v17 = v7;
  std::string __p = (void *)0x676C6F6273666D74;
  LODWORD(v13) = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v15, (AudioObjectPropertyAddress *)&__p, v8);
  std::string __p = (void *)0x676C6F6273746D23;
  LODWORD(v13) = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v15, (AudioObjectPropertyAddress *)&__p, v9);
  std::string __p = (void *)0x676C6F626E737274;
  LODWORD(v13) = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v15, (AudioObjectPropertyAddress *)&__p, v10);
  unsigned int v11 = *(_DWORD *)(a1 + 36);
  std::string __p = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  HALS_NotificationManager::GroupPropertiesChanged(1, v11, 0, (uint64_t)&v15, v19, (uint64_t)&__p);
  if (__p)
  {
    int v13 = __p;
    operator delete(__p);
  }
  if ((void)v15) {
    operator delete((void *)v15);
  }
  if (v18[0]) {
    operator delete(v18[0]);
  }
  v18[0] = v19;
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
}

void sub_1BAED8774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (a16) {
    operator delete(a16);
  }
  a16 = (void *)(v16 - 56);
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

uint64_t ___ZN14HALS_DSPStream23SetCurrentLatencyFramesEj_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 136) = *(_DWORD *)(result + 40);
  return result;
}

void AMCP::DAL::DAL_Timed_Segment::translate_range(double **this, const AMCP::DAL::DAL_Time_Range *a2, uint64_t a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  (*(void (**)(const AMCP::DAL::DAL_Time_Range *, uint64_t))(*(void *)a2 + 16))(a2, a3);
  long long v4 = *this;
  int v5 = this[1];
  if (*this != v5)
  {
    do
    {
      double v7 = *v4;
      double v6 = v4[1];
      AMCP::DAL::DAL_Time::operator-((uint64_t)buf, (AMCP::DAL::DAL_Time *)(v4 + 7), (AMCP::DAL::DAL_Time *)(v4 + 2));
      if ((buf[0] & 2) == 0) {
        AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)buf);
      }
      double v8 = *(double *)v34;
      int v9 = *(AMCP::Log::Scope_Registry **)&v38[6];
      if (*(void *)&v38[6]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v38[6]);
      }
      double v10 = v6 - v7 - v8;
      if (v10 <= -1.0 || v10 >= 1.0)
      {
        AMCP::Log::Scope_Registry::get(v9);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        BOOL v12 = **(NSObject ***)buf;
        if (*(void *)v34) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v34);
        }
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          int v13 = pthread_self();
          mach_port_t v14 = pthread_mach_thread_np(v13);
          *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v14;
          *(_WORD *)char v34 = 2080;
          *(void *)&void v34[2] = "DAL_Timed_Segment.cpp";
          __int16 v35 = 1024;
          int v36 = 92;
          __int16 v37 = 2080;
          *(void *)int v38 = "not (d.get_double() > -1 and d.get_double() < 1)";
          _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v24);
        std::logic_error::logic_error(&v25, &v24);
        v25.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error(&v26, &v25);
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        int v31 = -1;
        v26.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        int v27 = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v26);
        *(void *)&void v38[6] = "rt_safe_vector<Buffer_Time_Translator::Translation_Range> AMCP::DAL::DAL_Timed_Segment::tra"
                             "nslate_range(const DAL_Time_Range &) const";
        int v39 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
        int v40 = 92;
        std::vector<void *>::vector(&v19);
        int v15 = backtrace((void **)v19, (*((void *)&v19 + 1) - (void)v19) >> 3);
        std::vector<void *>::resize((char **)&v19, v15);
        long long v22 = v19;
        uint64_t v23 = v20;
        long long v19 = 0uLL;
        uint64_t v20 = 0;
        int v21 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      if (round(v4[1] - *v4) == 0.0)
      {
        AMCP::Log::Scope_Registry::get(v9);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v16 = **(NSObject ***)buf;
        if (*(void *)v34) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v34);
        }
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          uint64_t v17 = pthread_self();
          mach_port_t v18 = pthread_mach_thread_np(v17);
          *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v18;
          *(_WORD *)char v34 = 2080;
          *(void *)&void v34[2] = "DAL_Timed_Segment.cpp";
          __int16 v35 = 1024;
          int v36 = 93;
          __int16 v37 = 2080;
          *(void *)int v38 = "not (i.m_local_range.length() != 0_S)";
          _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v24);
        std::logic_error::logic_error(&v25, &v24);
        v25.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error(&v26, &v25);
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        int v31 = -1;
        v26.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        int v27 = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v26);
        *(void *)&void v38[6] = "rt_safe_vector<Buffer_Time_Translator::Translation_Range> AMCP::DAL::DAL_Timed_Segment::tra"
                             "nslate_range(const DAL_Time_Range &) const";
        int v39 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
        int v40 = 93;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
        long long v22 = v19;
        uint64_t v23 = v20;
        long long v19 = 0uLL;
        uint64_t v20 = 0;
        int v21 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      v4 += 12;
    }
    while (v4 != v5);
  }
}

void sub_1BAED8E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
}

caulk::rt_safe_memory_resource *AMCP::DAL::DAL_Timed_Segment::get_audio_buffer_lists(AMCP::DAL::DAL_Timed_Segment *this, uint64_t a2)
{
  v29[4] = *MEMORY[0x1E4F143B8];
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  AMCP::DAL::DAL_Timed_Segment::translate_range(&v26, *(const AMCP::DAL::DAL_Time_Range **)(a2 + 80), a2);
  long long v4 = v26;
  int v5 = v27;
  if (v26 != v27)
  {
    double v6 = 0;
    do
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a2 + 80) + 56))(&v24);
      if (v24)
      {
        (*(void (**)(double ***__return_ptr, double, double))(*(void *)v24 + 64))(&v28, *v4, v4[1]);
      }
      else
      {
        uint64_t v28 = 0;
        void v29[3] = 0;
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      unint64_t v7 = *((void *)this + 2);
      if ((unint64_t)v6 >= v7)
      {
        unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v6 - *(void *)this) >> 3);
        unint64_t v11 = v10 + 1;
        if (v10 + 1 > 0x666666666666666) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *(void *)this) >> 3);
        if (2 * v12 > v11) {
          unint64_t v11 = 2 * v12;
        }
        if (v12 >= 0x333333333333333) {
          unint64_t v13 = 0x666666666666666;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          if (v13 > 0x666666666666666 || !*MEMORY[0x1E4FB7E88]) {
            __break(1u);
          }
          uint64_t v14 = caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88]);
        }
        else
        {
          uint64_t v14 = 0;
        }
        int v15 = (uint64_t *)(v14 + 40 * v10);
        unint64_t v16 = v14 + 40 * v13;
        uint64_t v17 = (uint64_t)v28;
        uint64_t v28 = 0;
        *int v15 = v17;
        double v6 = v15 + 5;
        std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100]((uint64_t)(v15 + 1), (uint64_t)v29);
        long long v19 = *(caulk::rt_safe_memory_resource **)this;
        mach_port_t v18 = (caulk::rt_safe_memory_resource *)*((void *)this + 1);
        if (v18 == *(caulk::rt_safe_memory_resource **)this)
        {
          *(void *)this = v15;
          *((void *)this + 1) = v6;
          uint64_t v22 = *((void *)this + 2);
          *((void *)this + 2) = v16;
        }
        else
        {
          do
          {
            uint64_t v20 = *((void *)v18 - 5);
            mach_port_t v18 = (caulk::rt_safe_memory_resource *)((char *)v18 - 40);
            *(void *)mach_port_t v18 = 0;
            *(v15 - 5) = v20;
            v15 -= 5;
            std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100]((uint64_t)(v15 + 1), (uint64_t)v18 + 8);
          }
          while (v18 != v19);
          int v21 = *(caulk::rt_safe_memory_resource **)this;
          mach_port_t v18 = (caulk::rt_safe_memory_resource *)*((void *)this + 1);
          *(void *)this = v15;
          *((void *)this + 1) = v6;
          uint64_t v22 = *((void *)this + 2);
          *((void *)this + 2) = v16;
          if (v18 != v21)
          {
            do
            {
              std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100]((uint64_t *)v18 - 5, 0);
              std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100]((void *)v18 - 4);
              mach_port_t v18 = (caulk::rt_safe_memory_resource *)((char *)v18 - 40);
            }
            while (v18 != v21);
            mach_port_t v18 = v21;
          }
        }
        if (v18) {
          std::allocator_traits<caulk::rt_allocator<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>>>::deallocate[abi:ne180100](v18, 0xCCCCCCCCCCCCCCCDLL * ((v22 - (uint64_t)v18) >> 3));
        }
      }
      else
      {
        uint64_t v8 = (uint64_t)v28;
        uint64_t v28 = 0;
        uint64_t v9 = (uint64_t)(v6 + 1);
        uint64_t *v6 = v8;
        v6 += 5;
        std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100](v9, (uint64_t)v29);
      }
      *((void *)this + 1) = v6;
      std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100]((uint64_t *)&v28, 0);
      std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](v29);
      v4 += 12;
    }
    while (v4 != v5);
  }
  uint64_t v28 = &v26;
  return std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v28);
}

void sub_1BAED92CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::vector<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>,caulk::rt_allocator<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)va);
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *std::vector<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>,caulk::rt_allocator<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>>>::__destroy_vector::operator()[abi:ne180100](caulk::rt_safe_memory_resource *result)
{
  uint64_t v1 = *(caulk::rt_safe_memory_resource ***)result;
  uint64_t v2 = **(caulk::rt_safe_memory_resource ***)result;
  if (v2)
  {
    long long v3 = (caulk::rt_safe_memory_resource ***)result;
    long long v4 = v1[1];
    int v5 = **(caulk::rt_safe_memory_resource ***)result;
    double v6 = v1;
    if (v4 != v2)
    {
      do
      {
        std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100]((uint64_t *)v4 - 5, 0);
        std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100]((void *)v4 - 4);
        long long v4 = (caulk::rt_safe_memory_resource *)((char *)v4 - 40);
      }
      while (v4 != v2);
      double v6 = *v3;
      int v5 = **v3;
    }
    v1[1] = v2;
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((v6[2] - v5) >> 3);
    return std::allocator_traits<caulk::rt_allocator<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>>>::deallocate[abi:ne180100](v5, v7);
  }
  return result;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  if (a2 < 0x666666666666667)
  {
    uint64_t v2 = result;
    __n128 result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
    if (*MEMORY[0x1E4FB7E88]) {
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
    }
  }
  __break(1u);
  return result;
}

void AMCP::DAL::DAL_Timed_Segment::adjust_length(AMCP::DAL::DAL_Timed_Segment *this, const AMCP::DAL::DAL_Time_Delta *a2)
{
  boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)v7, (uint64_t)this, (uint64_t)a2);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v9, this, (const AMCP::DAL::DAL_Time *)v7);
  *(_OWORD *)this = v9;
  *((void *)this + 2) = v10;
  long long v3 = v11;
  long long v11 = 0uLL;
  long long v4 = (std::__shared_weak_count *)*((void *)this + 4);
  *(_OWORD *)((char *)this + 24) = v3;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *(_OWORD *)((char *)this + 40) = v12;
  *((void *)this + 7) = v13;
  long long v5 = v14;
  long long v14 = 0uLL;
  double v6 = (std::__shared_weak_count *)*((void *)this + 9);
  *((_OWORD *)this + 4) = v5;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    if (*((void *)&v14 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14 + 1));
    }
  }
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1BAED9500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::Writable_Range::pad_and_receive_data(uint64_t a1, uint64_t a2, AMCP::DAL::DAL_Time *a3)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  BOOL v6 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)((char *)a3 + 40), a3);
  if (v6)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v14 = **(NSObject ***)buf;
    if (*(void *)v80) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v80);
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      int v15 = pthread_self();
      mach_port_t v16 = pthread_mach_thread_np(v15);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v16;
      *(_WORD *)uint64_t v80 = 2080;
      *(void *)&v80[2] = "DAL_Timed_Segment.cpp";
      __int16 v81 = 1024;
      int v82 = 108;
      __int16 v83 = 2080;
      *(void *)uint64_t v84 = "not (source_range_to_read.get_time_range().end() >= source_range_to_read.get_time_range().start())";
      _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Writable_Range::RecieveData: Bad time range", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v34);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Writable_Range::RecieveData: Bad time range", (uint64_t)&v55);
    std::logic_error::logic_error((std::logic_error *)&v67, &v55);
    long long v67 = (NSObject **)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v48, (const std::logic_error *)&v67);
    uint64_t v50 = 0;
    long long v51 = 0;
    uint64_t v52 = 0;
    int v53 = -1;
    v48.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v49 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v48);
    *(void *)&void v84[6] = "void AMCP::DAL::Writable_Range::pad_and_receive_data(const Source_ID &, const Readable_Range &)";
    unint64_t v85 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
    int v86 = 108;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v73);
    long long v63 = *(_OWORD *)v73;
    long long v62 = &unk_1F148AA90;
    uint64_t v64 = *(void *)&v73[16];
    memset(v73, 0, sizeof(v73));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  (*(void (**)(void **__return_ptr))(**((void **)a3 + 10) + 64))(&v62);
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::intersection((uint64_t)buf, a3, &v62);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v55, (long long *)buf);
  if (v87) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v87);
  }
  if (*(void *)&v84[6]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v84[6]);
  }
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v55);
  double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v58);
  double v8 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v55);
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v58);
  if (round(sample_time) < round(v8))
  {
    caulk::make_empty_time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>((uint64_t)buf, (uint64_t)&v55);
    AMCP::DAL::DAL_Time_Range::operator=((uint64_t)&v55, (uint64_t)buf);
    if (v87) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v87);
    }
    if (*(void *)&v84[6]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v84[6]);
    }
  }
  std::string v41 = v55;
  uint64_t v42 = v56;
  uint64_t v43 = v57;
  if (v57) {
    atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v44 = v58;
  uint64_t v45 = v59;
  uint64_t v46 = v60;
  unsigned int v47 = v61;
  if (v61) {
    atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::DAL::Readable_Range::Readable_Range((uint64_t)&v48, (uint64_t)&v41, (uint64_t)a3);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::difference((uint64_t)buf, a1, &v62);
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::union_range((uint64_t)&v67, (AMCP::DAL::DAL_Time *)buf, (AMCP::DAL::DAL_Time *)&v55);
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::union_range((uint64_t)v73, (AMCP::DAL::DAL_Time *)&v67, (AMCP::DAL::DAL_Time *)v88);
  BOOL v9 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::operator==((uint64_t)v73, a1);
  if (v78) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v78);
  }
  if (*(void *)&v75[6]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v75[6]);
  }
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
  uint64_t v10 = (AMCP::Log::Scope_Registry *)*((void *)&v69 + 1);
  if (*((void *)&v69 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v69 + 1));
  }
  if (!v9)
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v73, "com.apple.coreaudio", "AMCP");
    uint64_t v17 = **(NSObject ***)v73;
    if (*(void *)&v73[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v73[8]);
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v18 = pthread_self();
      mach_port_t v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)float64x2_t v73 = 67109890;
      *(_DWORD *)&v73[4] = v19;
      *(_WORD *)&v73[8] = 2080;
      *(void *)&v73[10] = "DAL_Timed_Segment.cpp";
      *(_WORD *)&unsigned char v73[18] = 1024;
      *(_DWORD *)&v73[20] = 121;
      __int16 v74 = 2080;
      *(void *)int v75 = "not (zero_ranges.first.union_range(data_time_range_to_read).union_range(zero_ranges.second) == get_time_range())";
      _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Union of zero and data ranges should equal this writable range", v73, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v33);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Union of zero and data ranges should equal this writable range", (uint64_t)&v31);
    std::logic_error::logic_error((std::logic_error *)&v29, &v31);
    *(void *)&unsigned long long v29 = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error((std::logic_error *)&v67, (const std::logic_error *)&v29);
    long long v69 = 0uLL;
    CFTypeRef v70 = 0;
    int v71 = -1;
    long long v67 = (NSObject **)&unk_1F1489CC8;
    v68.__imp_.__imp_ = (const char *)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v73, (uint64_t)&v67);
    *(void *)&v75[6] = "void AMCP::DAL::Writable_Range::pad_and_receive_data(const Source_ID &, const Readable_Range &)";
    uint64_t v76 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
    int v77 = 121;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v40.__r_.__value_.__l.__data_);
    char v34 = &unk_1F148AA90;
    std::string v35 = v40;
    memset(&v40, 0, sizeof(v40));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)v73, (long long *)buf);
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)buf, (AMCP::DAL::DAL_Time *)&v85)
    && (!AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v55, (AMCP::DAL::DAL_Time *)&v58)
     || AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)v73, (AMCP::DAL::DAL_Time *)&v55)))
  {
    if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v55, (AMCP::DAL::DAL_Time *)&v58))
    {
      if (!caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::intersects(buf, &v55))
      {
        BOOL v11 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)buf, (AMCP::DAL::DAL_Time *)&v85);
        if (!v11
          || !(BOOL v11 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v55, (AMCP::DAL::DAL_Time *)&v58))
          || !AMCP::DAL::DAL_Time::operator==((AMCP::DAL::DAL_Time *)&v55, (AMCP::DAL::DAL_Time *)&v85)
          && !(BOOL v11 = AMCP::DAL::DAL_Time::operator==((AMCP::DAL::DAL_Time *)buf, (AMCP::DAL::DAL_Time *)&v58)))
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v11);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v67, "com.apple.coreaudio", "AMCP");
          uint64_t v23 = *v67;
          if (v68.__vftable) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v68.__vftable);
          }
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            uint64_t v24 = pthread_self();
            mach_port_t v25 = pthread_mach_thread_np(v24);
            LODWORD(v67) = 67109890;
            HIDWORD(v67) = v25;
            LOWORD(v68.__vftable) = 2080;
            *(std::logic_error_vtbl **)((char *)&v68.__vftable + 2) = (std::logic_error_vtbl *)"DAL_Timed_Segment.cpp";
            WORD1(v68.__imp_.__imp_) = 1024;
            HIDWORD(v68.__imp_.__imp_) = 129;
            LOWORD(v69) = 2080;
            *(void *)((char *)&v69 + 2) = "not (zero_ranges.first.touches(data_time_range_to_read))";
            _os_log_error_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Zero range should be adjacent to valid range.", (uint8_t *)&v67, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v39);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Zero range should be adjacent to valid range.", (uint64_t)&v40);
          std::logic_error::logic_error(&v33, &v40);
          v33.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)&v34, &v33);
          v35.__r_.__value_.__r.__words[2] = 0;
          uint64_t v36 = 0;
          uint64_t v37 = 0;
          int v38 = -1;
          char v34 = &unk_1F1489CC8;
          v35.__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v67, (uint64_t)&v34);
          *((void *)&v69 + 1) = "void AMCP::DAL::Writable_Range::pad_and_receive_data(const Source_ID &, const Readable_Range &)";
          CFTypeRef v70 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
          int v71 = 129;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v29);
          v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
          *(_OWORD *)&v31.__r_.__value_.__r.__words[1] = v29;
          uint64_t v32 = v30;
          unsigned long long v29 = 0uLL;
          uint64_t v30 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
      }
      BOOL v12 = AMCP::DAL::DAL_Time::operator==((AMCP::DAL::DAL_Time *)&v76, (AMCP::DAL::DAL_Time *)&v55);
      if (!v12)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v12);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v67, "com.apple.coreaudio", "AMCP");
        std::logic_error v26 = *v67;
        if (v68.__vftable) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v68.__vftable);
        }
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          int v27 = pthread_self();
          mach_port_t v28 = pthread_mach_thread_np(v27);
          LODWORD(v67) = 67109890;
          HIDWORD(v67) = v28;
          LOWORD(v68.__vftable) = 2080;
          *(std::logic_error_vtbl **)((char *)&v68.__vftable + 2) = (std::logic_error_vtbl *)"DAL_Timed_Segment.cpp";
          WORD1(v68.__imp_.__imp_) = 1024;
          HIDWORD(v68.__imp_.__imp_) = 130;
          LOWORD(v69) = 2080;
          *(void *)((char *)&v69 + 2) = "not (zero_range.end() == data_time_range_to_read.start())";
          _os_log_error_impl(&dword_1BAA78000, v26, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Zero range should end where valid range starts.", (uint8_t *)&v67, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v39);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Zero range should end where valid range starts.", (uint64_t)&v40);
        std::logic_error::logic_error(&v33, &v40);
        v33.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error((std::logic_error *)&v34, &v33);
        v35.__r_.__value_.__r.__words[2] = 0;
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        int v38 = -1;
        char v34 = &unk_1F1489CC8;
        v35.__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v67, (uint64_t)&v34);
        *((void *)&v69 + 1) = "void AMCP::DAL::Writable_Range::pad_and_receive_data(const Source_ID &, const Readable_Range &)";
        CFTypeRef v70 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
        int v71 = 130;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v29);
        v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
        *(_OWORD *)&v31.__r_.__value_.__r.__words[1] = v29;
        uint64_t v32 = v30;
        unsigned long long v29 = 0uLL;
        uint64_t v30 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
    }
    (*(void (**)(void, uint64_t, uint8_t *))(**(void **)(a1 + 80) + 40))(*(void *)(a1 + 80), a2, v73);
    AMCP::DAL::DAL_Time_Range::operator=((uint64_t)v73, (uint64_t)v88);
  }
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v55, (AMCP::DAL::DAL_Time *)&v58)) {
    (*(void (**)(void, uint64_t, std::logic_error *))(**(void **)(a1 + 80) + 24))(*(void *)(a1 + 80), a2, &v48);
  }
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)v73, (AMCP::DAL::DAL_Time *)&v76))
  {
    if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v55, (AMCP::DAL::DAL_Time *)&v58))
    {
      BOOL v13 = AMCP::DAL::DAL_Time::operator==((AMCP::DAL::DAL_Time *)v73, (AMCP::DAL::DAL_Time *)&v58);
      if (!v13)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v13);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v67, "com.apple.coreaudio", "AMCP");
        uint64_t v20 = *v67;
        if (v68.__vftable) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v68.__vftable);
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          int v21 = pthread_self();
          mach_port_t v22 = pthread_mach_thread_np(v21);
          LODWORD(v67) = 67109890;
          HIDWORD(v67) = v22;
          LOWORD(v68.__vftable) = 2080;
          *(std::logic_error_vtbl **)((char *)&v68.__vftable + 2) = (std::logic_error_vtbl *)"DAL_Timed_Segment.cpp";
          WORD1(v68.__imp_.__imp_) = 1024;
          HIDWORD(v68.__imp_.__imp_) = 146;
          LOWORD(v69) = 2080;
          *(void *)((char *)&v69 + 2) = "not (data_time_range_to_read.is_empty() || zero_range.start() == data_time_ran"
                                          "ge_to_read.end())";
          _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Zero range should start where valid range ends.", (uint8_t *)&v67, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v39);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Zero range should start where valid range ends.", (uint64_t)&v40);
        std::logic_error::logic_error(&v33, &v40);
        v33.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error((std::logic_error *)&v34, &v33);
        v35.__r_.__value_.__r.__words[2] = 0;
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        int v38 = -1;
        char v34 = &unk_1F1489CC8;
        v35.__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v67, (uint64_t)&v34);
        *((void *)&v69 + 1) = "void AMCP::DAL::Writable_Range::pad_and_receive_data(const Source_ID &, const Readable_Range &)";
        CFTypeRef v70 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
        int v71 = 146;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v29);
        v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
        *(_OWORD *)&v31.__r_.__value_.__r.__words[1] = v29;
        uint64_t v32 = v30;
        unsigned long long v29 = 0uLL;
        uint64_t v30 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
    }
    (*(void (**)(void, uint64_t, uint8_t *))(**(void **)(a1 + 80) + 40))(*(void *)(a1 + 80), a2, v73);
  }
  if (v78) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v78);
  }
  if (*(void *)&v75[6]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v75[6]);
  }
  if (v90) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v90);
  }
  if (v89) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v89);
  }
  if (v87) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v87);
  }
  if (*(void *)&v84[6]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v84[6]);
  }
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  if (v66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v66);
  }
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
}

void sub_1BAEDA3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&STACK[0x250]);
  std::pair<caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>,caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>>::~pair((void *)(v63 - 256));
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&a42);
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&a53);
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&a63);
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Writable_Range::receive_data(uint64_t a1, int a2, AMCP::DAL::DAL_Time *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  BOOL v5 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)((char *)a3 + 40), a3);
  if (v5)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    BOOL v9 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)uint64_t v30 = 2080;
      *(void *)&v30[2] = "DAL_Timed_Segment.cpp";
      __int16 v31 = 1024;
      int v32 = 163;
      __int16 v33 = 2080;
      *(void *)char v34 = "not (incoming_data.get_time_range().end() >= incoming_data.get_time_range().start())";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Writable_Range::RecieveData: Bad time range", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Writable_Range::RecieveData: Bad time range", (uint64_t)&v20);
    std::logic_error::logic_error(&v21, &v20);
    v21.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v22, &v21);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    v22.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v23 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    *(void *)&void v34[6] = "void AMCP::DAL::Writable_Range::receive_data(const Source_ID &, const Readable_Range &)";
    std::string v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
    int v36 = 163;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    uint64_t v17 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  BOOL v6 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::operator==(a1, (uint64_t)a3);
  if (!v6)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    BOOL v12 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      BOOL v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)uint64_t v30 = 2080;
      *(void *)&v30[2] = "DAL_Timed_Segment.cpp";
      __int16 v31 = 1024;
      int v32 = 164;
      __int16 v33 = 2080;
      *(void *)char v34 = "not (get_time_range() == incoming_data.get_time_range())";
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v20);
    std::logic_error::logic_error(&v21, &v20);
    v21.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v22, &v21);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    v22.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v23 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    *(void *)&void v34[6] = "void AMCP::DAL::Writable_Range::receive_data(const Source_ID &, const Readable_Range &)";
    std::string v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
    int v36 = 164;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    uint64_t v17 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  unint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 80) + 24);

  return v7();
}

void sub_1BAEDAB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v26 - 128);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a24);
  MEMORY[0x1C1859090](&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v25) {
    __cxa_free_exception(v24);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v26 - 129));
  _Unwind_Resume(a1);
}

void AMCP::DAL::Writable_Range::Direct_Write_Range::get_audio_buffer_list(AMCP::DAL::Writable_Range::Direct_Write_Range *this, uint64_t a2, std::__shared_weak_count *a3)
{
  uint64_t v3 = a2;
  long long v4 = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 56))(a2, &v3);
    a3 = v4;
    if (!v4) {
      return;
    }
  }
  else
  {
    *(void *)this = 0;
    *((void *)this + 4) = 0;
    if (!a3) {
      return;
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a3);
}

void sub_1BAEDAC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::Writable_Range::get_direct_write_ranges(AMCP::DAL::Writable_Range *this, uint64_t a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a2 + 80) + 176))(&v23);
  uint64_t v3 = v23;
  uint64_t v4 = v24;
  if (v23 == v24)
  {
LABEL_28:
    int v25 = &v23;
    std::vector<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v25);
    return;
  }
  unint64_t v5 = 0;
  while (1)
  {
    unint64_t v6 = *((void *)this + 2);
    if (v5 < v6)
    {
      std::construct_at[abi:ne180100]<AMCP::DAL::Writable_Range::Direct_Write_Range,AMCP::DAL::Buffer_Time_Translator::Translation_Range const&,AMCP::DAL::Container const&,AMCP::DAL::Writable_Range::Direct_Write_Range*>(v5, v3, *(void *)(v3 + 96), *(void *)(v3 + 104));
      v5 += 112;
      *((void *)this + 1) = v5;
      goto LABEL_24;
    }
    uint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *(void *)this) >> 4);
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) > 0x249249249249249) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - *(void *)this) >> 4);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x124924924924924) {
      unint64_t v10 = 0x249249249249249;
    }
    else {
      unint64_t v10 = v8;
    }
    if (!v10)
    {
      uint64_t v11 = 0;
      goto LABEL_16;
    }
    if (v10 > 0x249249249249249 || !*MEMORY[0x1E4FB7E88]) {
      break;
    }
    uint64_t v11 = caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88]);
LABEL_16:
    unint64_t v12 = v11 + 112 * v10;
    uint64_t v13 = std::construct_at[abi:ne180100]<AMCP::DAL::Writable_Range::Direct_Write_Range,AMCP::DAL::Buffer_Time_Translator::Translation_Range const&,AMCP::DAL::Container const&,AMCP::DAL::Writable_Range::Direct_Write_Range*>(v11 + 112 * v7, v3, *(void *)(v3 + 96), *(void *)(v3 + 104));
    unint64_t v5 = v13 + 112;
    mach_port_t v14 = *(void **)this;
    long long v15 = (caulk::rt_safe_memory_resource *)*((void *)this + 1);
    if (v15 == *(caulk::rt_safe_memory_resource **)this)
    {
      *(void *)this = v13;
      *((void *)this + 1) = v5;
      uint64_t v22 = *((void *)this + 2);
      *((void *)this + 2) = v12;
      if (!v15) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = v13 + v16;
        long long v18 = (void *)((char *)v15 + v16);
        *(_OWORD *)(v17 - 112) = *(_OWORD *)((char *)v15 + v16 - 112);
        long long v19 = *(_OWORD *)((char *)v15 + v16 - 96);
        *(void *)(v17 - 80) = *(void *)((char *)v15 + v16 - 80);
        *(_OWORD *)(v17 - 96) = v19;
        *(_OWORD *)(v17 - 72) = *(_OWORD *)((char *)v15 + v16 - 72);
        *(v18 - 9) = 0;
        *(v18 - 8) = 0;
        long long v20 = *(_OWORD *)((char *)v15 + v16 - 56);
        *(void *)(v17 - 40) = *(void *)((char *)v15 + v16 - 40);
        *(_OWORD *)(v17 - 56) = v20;
        *(_OWORD *)(v17 - 32) = *(_OWORD *)((char *)v15 + v16 - 32);
        *(v18 - 4) = 0;
        *(v18 - 3) = 0;
        *(_OWORD *)(v17 - 16) = *(_OWORD *)((char *)v15 + v16 - 16);
        *(v18 - 2) = 0;
        *(v18 - 1) = 0;
        v16 -= 112;
      }
      while ((void *)((char *)v15 + v16) != v14);
      std::logic_error v21 = *(caulk::rt_safe_memory_resource **)this;
      long long v15 = (caulk::rt_safe_memory_resource *)*((void *)this + 1);
      *(void *)this = v13 + v16;
      *((void *)this + 1) = v5;
      uint64_t v22 = *((void *)this + 2);
      *((void *)this + 2) = v12;
      if (v15 != v21)
      {
        do
        {
          long long v15 = (caulk::rt_safe_memory_resource *)((char *)v15 - 112);
          std::__destroy_at[abi:ne180100]<AMCP::DAL::Writable_Range::Direct_Write_Range,0>(v15);
        }
        while (v15 != v21);
        long long v15 = v21;
      }
      if (!v15) {
        goto LABEL_24;
      }
    }
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Writable_Range::Direct_Write_Range>>::deallocate[abi:ne180100](v15, 0x6DB6DB6DB6DB6DB7 * ((v22 - (uint64_t)v15) >> 4));
LABEL_24:
    *((void *)this + 1) = v5;
    v3 += 112;
    if (v3 == v4) {
      goto LABEL_28;
    }
  }
  __break(1u);
}

void sub_1BAEDAEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::construct_at[abi:ne180100]<AMCP::DAL::Writable_Range::Direct_Write_Range,AMCP::DAL::Buffer_Time_Translator::Translation_Range const&,AMCP::DAL::Container const&,AMCP::DAL::Writable_Range::Direct_Write_Range*>(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  v6.n128_u64[0] = a3;
  v6.n128_u64[1] = a4;
  if (a4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a4 + 8), 1uLL, memory_order_relaxed);
  }
  std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>::pair[abi:ne180100]<AMCP::DAL::Buffer_Time_Translator::Translation_Range&,AMCP::DAL::Container,0>(a1, a2, &v6);
  if (v6.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6.n128_u64[1]);
  }
  return a1;
}

void AMCP::DAL::Writable_Range::commit_direct_write(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a3 + 104);
  uint64_t v4 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 168))(a1);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1BAEDAFC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::create_readable_range(AMCP::DAL *this, const AMCP::DAL::DAL_Time_Range *a2, AMCP::DAL::Ring_Buffer_Base *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint8_t *__return_ptr, AMCP::DAL::Ring_Buffer_Base *))(*(void *)a3 + 64))(buf, a3);
  BOOL v6 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::encompasses((uint64_t)buf, (uint64_t)a2);
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  uint64_t v7 = *(AMCP::Log::Scope_Registry **)&v42[6];
  if (*(void *)&v42[6]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v42[6]);
  }
  if (!v6)
  {
    AMCP::Log::Scope_Registry::get(v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v12 = **(NSObject ***)buf;
    if (*(void *)v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v38);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)int v38 = 2080;
      *(void *)&uint64_t v38[2] = "DAL_Timed_Segment.cpp";
      __int16 v39 = 1024;
      int v40 = 268;
      __int16 v41 = 2080;
      *(void *)uint64_t v42 = "not (buffer.get_time_range().encompasses(range))";
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v28);
    std::logic_error::logic_error(&v29, &v28);
    v29.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v30, &v29);
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    int v35 = -1;
    v30.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    __int16 v31 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
    *(void *)&v42[6] = "Readable_Range AMCP::DAL::create_readable_range(const DAL_Time_Range &, Ring_Buffer_Base &)";
    uint64_t v43 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
    int v44 = 268;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
    long long v26 = v23;
    uint64_t v27 = v24;
    long long v23 = 0uLL;
    uint64_t v24 = 0;
    int v25 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  long long v15 = *(_OWORD *)a2;
  uint64_t v8 = *((void *)a2 + 3);
  uint64_t v16 = *((void *)a2 + 2);
  uint64_t v17 = v8;
  unint64_t v9 = (std::__shared_weak_count *)*((void *)a2 + 4);
  long long v18 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v19 = *(_OWORD *)((char *)a2 + 40);
  uint64_t v10 = *((void *)a2 + 8);
  uint64_t v20 = *((void *)a2 + 7);
  uint64_t v21 = v10;
  uint64_t v11 = (std::__shared_weak_count *)*((void *)a2 + 9);
  uint64_t v22 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::DAL::Ring_Buffer_Base::create_readable_range((uint64_t)a3, (uint64_t)&v15, (uint64_t)this);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
}

void sub_1BAEDB31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34)
{
}

void HALS_IOUAObject::CacheCustomPropertyInfo(HALS_IOUAObject *this)
{
  *((void *)this + 4) = *((void *)this + 3);
  *(void *)&v55.signed int mSelector = 0x676C6F6263757374;
  v55.AudioObjectPropertyElement mElement = 0;
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = *(void *)(v2 + 792);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 800);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL HasProperty = HALS_IOUAUCDriver::GetHasProperty((HALS_IOUAUCDriver *)*(unsigned int *)(v3 + 4), &v55, *((_DWORD *)this + 4));
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (HasProperty)
  {
    uint64_t v6 = *((void *)this + 1);
    uint64_t v7 = *(void *)(v6 + 792);
    uint64_t v8 = *(std::__shared_weak_count **)(v6 + 800);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v9 = *((_DWORD *)this + 4);
    if (HALS_IOUAUCDriver::GetHasProperty((HALS_IOUAUCDriver *)*(unsigned int *)(v7 + 4), (const AudioObjectPropertyAddress *)"tsucbolg", v9)&& (PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v7 + 4), (const AudioObjectPropertyAddress *)"tsucbolg", v9, 0, 0), (unint64_t v56 = PropertySize) != 0))
    {
      std::vector<AudioServerPlugInCustomPropertyInfo>::vector(&__p, PropertySize / 0xC);
      HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v7 + 4), (const AudioObjectPropertyAddress *)"tsucbolg", v9, 0, 0, __p, &v56);
      unint64_t v11 = v56 / 0xC;
      unint64_t v12 = v53;
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v53 - (unsigned char *)__p) >> 2);
      unint64_t v14 = v56 / 0xC - v13;
      if (v56 / 0xC > v13)
      {
        if (0xAAAAAAAAAAAAAAABLL * ((v54 - v53) >> 2) < v14)
        {
          if (0x5555555555555556 * ((v54 - (unsigned char *)__p) >> 2) > v11) {
            unint64_t v11 = 0x5555555555555556 * ((v54 - (unsigned char *)__p) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v54 - (unsigned char *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v15 = 0x1555555555555555;
          }
          else {
            unint64_t v15 = v11;
          }
          uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v15);
          uint64_t v17 = &v16[12 * v13];
          long long v19 = &v16[12 * v18];
          size_t v20 = 12 * ((12 * v14 - 12) / 0xC) + 12;
          bzero(v17, v20);
          uint64_t v21 = &v17[v20];
          long long v23 = __p;
          uint64_t v22 = v53;
          if (v53 != __p)
          {
            do
            {
              uint64_t v24 = *(void *)(v22 - 3);
              v22 -= 3;
              int v25 = v22[2];
              *(void *)(v17 - 12) = v24;
              v17 -= 12;
              *((_DWORD *)v17 + 2) = v25;
            }
            while (v22 != v23);
            uint64_t v22 = __p;
          }
          std::string __p = v17;
          int v53 = v21;
          uint64_t v54 = v19;
          if (v22) {
            operator delete(v22);
          }
          goto LABEL_23;
        }
        size_t v51 = 12 * ((12 * v14 - 12) / 0xC) + 12;
        bzero(v53, v51);
        uint64_t v50 = &v12[v51];
        goto LABEL_64;
      }
      if (v56 / 0xC < v13)
      {
        uint64_t v50 = (char *)__p + 12 * v11;
LABEL_64:
        int v53 = v50;
      }
    }
    else
    {
      std::string __p = 0;
      int v53 = 0;
      uint64_t v54 = 0;
    }
LABEL_23:
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    long long v26 = (char *)__p;
    uint64_t v27 = v53;
    if (__p != v53)
    {
      do
      {
        int v28 = *((_DWORD *)v26 + 1);
        if (v28 == 1886155636 || v28 == 1667658612)
        {
          int v30 = *((_DWORD *)v26 + 2);
          BOOL v31 = !v30 || v30 == 1886155636;
          if (v31 || v30 == 1667658612)
          {
            unint64_t v34 = *((void *)this + 4);
            unint64_t v33 = *((void *)this + 5);
            if (v34 >= v33)
            {
              uint64_t v37 = *((void *)this + 3);
              unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - v37) >> 2);
              unint64_t v39 = v38 + 1;
              if (v38 + 1 > 0x1555555555555555) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - v37) >> 2);
              if (2 * v40 > v39) {
                unint64_t v39 = 2 * v40;
              }
              if (v40 >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v41 = 0x1555555555555555;
              }
              else {
                unint64_t v41 = v39;
              }
              if (v41) {
                unint64_t v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v41);
              }
              else {
                uint64_t v42 = 0;
              }
              unint64_t v43 = v41 + 12 * v38;
              uint64_t v44 = *(void *)v26;
              *(_DWORD *)(v43 + 8) = *((_DWORD *)v26 + 2);
              *(void *)unint64_t v43 = v44;
              uint64_t v46 = (_DWORD *)*((void *)this + 3);
              uint64_t v45 = (_DWORD *)*((void *)this + 4);
              unint64_t v47 = v43;
              if (v45 != v46)
              {
                do
                {
                  uint64_t v48 = *(void *)(v45 - 3);
                  v45 -= 3;
                  int v49 = v45[2];
                  *(void *)(v47 - 12) = v48;
                  v47 -= 12;
                  *(_DWORD *)(v47 + 8) = v49;
                }
                while (v45 != v46);
                uint64_t v45 = (_DWORD *)*((void *)this + 3);
              }
              unint64_t v36 = v43 + 12;
              *((void *)this + 3) = v47;
              *((void *)this + 4) = v43 + 12;
              *((void *)this + 5) = v41 + 12 * v42;
              if (v45) {
                operator delete(v45);
              }
            }
            else
            {
              uint64_t v35 = *(void *)v26;
              *(_DWORD *)(v34 + 8) = *((_DWORD *)v26 + 2);
              *(void *)unint64_t v34 = v35;
              unint64_t v36 = v34 + 12;
            }
            *((void *)this + 4) = v36;
          }
        }
        v26 += 12;
      }
      while (v26 != v27);
      long long v26 = (char *)__p;
    }
    if (v26)
    {
      int v53 = v26;
      operator delete(v26);
    }
  }
}

void sub_1BAEDB7A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

BOOL HALS_IOUAObject::IsCustomProperty(HALS_IOUAObject *this, int a2)
{
  uint64_t v2 = (_DWORD *)*((void *)this + 3);
  uint64_t v3 = (_DWORD *)*((void *)this + 4);
  if (v2 != v3)
  {
    while (*v2 != a2)
    {
      v2 += 3;
      if (v2 == v3)
      {
        uint64_t v2 = (_DWORD *)*((void *)this + 4);
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

void HALS_IOUAObject::~HALS_IOUAObject(HALS_IOUAObject *this, HALS_Object *a2)
{
  HALS_IOUAObject::~HALS_IOUAObject(this, a2);

  JUMPOUT(0x1C1859840);
}

{
  HALS_ObjectMap *v3;
  HALS_IOUAObject *v4;
  void *v5;

  *(void *)this = &unk_1F1481000;
  uint64_t v3 = (HALS_ObjectMap *)*((void *)this + 1);
  uint64_t v4 = (HALS_ObjectMap *)((char *)v3 + 328);
  if (!v3) {
    uint64_t v4 = 0;
  }
  if (v4 != this) {
    HALS_ObjectMap::ReleaseObject(v3, a2);
  }
  unint64_t v5 = (void *)*((void *)this + 3);
  if (v5)
  {
    *((void *)this + 4) = v5;
    operator delete(v5);
  }
}

void HALS_IOUAObject::HALS_IOUAObject(HALS_IOUAObject *this, HALS_IOUADriver *a2, int a3)
{
  *(void *)this = &unk_1F1481000;
  *((void *)this + 1) = a2;
  *((_DWORD *)this + 4) = a3;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  uint64_t v3 = (HALS_IOUADriver *)((char *)a2 + 328);
  if (!a2) {
    uint64_t v3 = 0;
  }
  if (v3 != this) {
    HALS_ObjectMap::RetainObject(a2, a2);
  }
}

void sub_1BAEDB93C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 32) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

BOOL HALS_IOUAObject::IsPropertySettable(HALS_IOUAObject *this, const AudioObjectPropertyAddress *a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  if (!(*(unsigned int (**)(HALS_IOUAObject *, void, const AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 16))(this, a2->mSelector, a3, a4))return 0; {
  uint64_t v6 = *((void *)this + 1);
  }
  uint64_t v7 = *(void *)(v6 + 792);
  uint64_t v8 = *(std::__shared_weak_count **)(v6 + 800);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL IsPropertySettable = HALS_IOUAUCDriver::GetIsPropertySettable((HALS_IOUAUCDriver *)*(unsigned int *)(v7 + 4), a2, *((_DWORD *)this + 4));
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return IsPropertySettable;
}

void sub_1BAEDB9FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOUAObject::GetPropertyDataSize(HALS_IOUAObject *this, _DWORD *a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, HALS_Client *a6)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(HALS_IOUAObject *, void, const AudioObjectPropertyAddress *, uint64_t, const void *, HALS_Client *))(*(void *)this + 16))(this, *a2, a3, a4, a5, a6);
  if (result)
  {
    unsigned int v9 = (_DWORD *)*((void *)this + 3);
    uint64_t v10 = (_DWORD *)*((void *)this + 4);
    if (v9 != v10)
    {
      while (*v9 != *a2)
      {
        v9 += 3;
        if (v9 == v10) {
          goto LABEL_5;
        }
      }
    }
    if (v9 == v10)
    {
LABEL_5:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      unint64_t v11 = **(NSObject ***)buf;
      if (*(void *)v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        unint64_t v12 = pthread_self();
        mach_port_t v13 = pthread_mach_thread_np(v12);
        *(_DWORD *)AudioObjectPropertyAddress buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v13;
        *(_WORD *)std::logic_error v29 = 2080;
        *(void *)&void v29[2] = "HALS_IOUAObject.cpp";
        __int16 v30 = 1024;
        int v31 = 169;
        _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Unknown Property", buf, 0x18u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v20, "Unknown property");
      std::runtime_error::runtime_error(&v21, &v20);
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      int v26 = -1;
      v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      uint64_t v22 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
      uint64_t v32 = "UInt32 HALS_IOUAObject::GetPropertyDataSize(AudioObjectID, const AudioObjectPropertyAddress &, UInt32, const"
            " void *, HALS_Client *) const";
      unint64_t v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAObject.cpp";
      int v34 = 169;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
      uint64_t v17 = &unk_1F148AA90;
      long long v18 = v15;
      uint64_t v19 = v16;
      long long v15 = 0uLL;
      uint64_t v16 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    int v14 = v9[1];
    if (v14 == 1667658612) {
      return 8;
    }
    else {
      return 8 * (v14 == 1886155636);
    }
  }
  return result;
}

void sub_1BAEDBCD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, char a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v20 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a18);
  std::runtime_error::~runtime_error(&a17);
  if (v19) {
    __cxa_free_exception(v18);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v20 - 129));
  _Unwind_Resume(a1);
}

void HALS_IOUAObject::GetPropertyData(HALS_IOUAObject *this, unsigned int *a2, const AudioObjectPropertyAddress *a3, AMCP::Log::Scope_Registry **a4, unsigned int *a5, void *a6, uint64_t a7, const void *a8, HALS_Client *a9)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  int v14 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(HALS_IOUAObject *, void, const AudioObjectPropertyAddress *, AMCP::Log::Scope_Registry **, unsigned int *, void *, uint64_t, const void *))(*(void *)this + 16))(this, *a2, a3, a4, a5, a6, a7, a8);
  if (!v14)
  {
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v37 = **(NSObject ***)buf;
    if (*(void *)v61) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v61);
    }
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      unint64_t v38 = pthread_self();
      mach_port_t v39 = pthread_mach_thread_np(v38);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v39;
      *(_WORD *)long long v61 = 2080;
      *(void *)&v61[2] = "HALS_IOUAObject.cpp";
      __int16 v62 = 1024;
      int v63 = 193;
      _os_log_error_impl(&dword_1BAA78000, v37, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Unknown Property", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v42);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v40, "Unknown property");
    std::runtime_error::runtime_error(&v52, &v40);
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    int v57 = -1;
    v52.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v53 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v52);
    *(void *)&v65[6] = "void HALS_IOUAObject::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &, UInt32"
                         ", UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
    long long v66 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAObject.cpp";
    int v67 = 193;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(buffer);
    std::runtime_error v50 = *(std::runtime_error *)buffer;
    int v49 = &unk_1F148AA90;
    uint64_t v51 = v48;
    buffer[0] = 0;
    buffer[1] = 0;
    uint64_t v48 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  if (a5)
  {
    long long v15 = *(const void **)a5;
    if (*(void *)a5) {
      CFRetain(*(CFTypeRef *)a5);
    }
  }
  else
  {
    long long v15 = 0;
  }
  uint64_t v16 = *((void *)this + 1);
  uint64_t v17 = *(void *)(v16 + 792);
  long long v18 = *(std::__shared_weak_count **)(v16 + 800);
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v19 = *((_DWORD *)this + 4);
  uint64_t v20 = *(void *)a2;
  AudioObjectPropertyElement v21 = a2[2];
  if (v15)
  {
    CFRetain(v15);
    *(void *)&v59.signed int mSelector = v20;
    v59.AudioObjectPropertyElement mElement = v21;
    CFDataRef v22 = IOCFSerialize(v15, 0);
    CFDataRef v58 = v22;
    if (!v22)
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v23 = **(NSObject ***)buf;
      if (*(void *)v61) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v61);
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        uint64_t v24 = pthread_self();
        mach_port_t v25 = pthread_mach_thread_np(v24);
        *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v25;
        *(_WORD *)long long v61 = 2080;
        *(void *)&v61[2] = "HALS_IOUAUCDriver.cpp";
        __int16 v62 = 1024;
        int v63 = 379;
        __int16 v64 = 2080;
        *(void *)uint64_t v65 = "(serialized_qualifer) == nullptr";
        _os_log_error_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to serialize CF qualifer", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v42);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v40, "Failed to serialize CF qualifer");
      std::runtime_error::runtime_error(&v52, &v40);
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      int v57 = -1;
      v52.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      int v53 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v52);
      *(void *)&v65[6] = "CFTypeRef HALS_IOUAUCDriver::get_custom_property_value(AudioObjectID, AudioObjectPropertyAddr"
                           "ess, applesauce::CF::TypeRef)";
      long long v66 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
      int v67 = 379;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(buffer);
      std::runtime_error v50 = *(std::runtime_error *)buffer;
      int v49 = &unk_1F148AA90;
      uint64_t v51 = v48;
      buffer[0] = 0;
      buffer[1] = 0;
      uint64_t v48 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
  }
  else
  {
    CFDataRef v22 = 0;
    CFDataRef v58 = 0;
    *(void *)&v59.signed int mSelector = v20;
    v59.AudioObjectPropertyElement mElement = v21;
  }
  uint64_t v46 = &v58;
  BytePtr = CFDataGetBytePtr(v22);
  CFIndex Length = CFDataGetLength(v58);
  bufferCFArrayRef Size = 0;
  uint64_t PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v17 + 4), &v59, v19, BytePtr, Length);
  bufferCFArrayRef Size = PropertySize;
  if (!PropertySize)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v31 = **(NSObject ***)buf;
    if (*(void *)v61) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v61);
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = pthread_self();
      mach_port_t v33 = pthread_mach_thread_np(v32);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v33;
      *(_WORD *)long long v61 = 2080;
      *(void *)&v61[2] = "HALS_IOUAUCDriver.cpp";
      __int16 v62 = 1024;
      int v63 = 386;
      __int16 v64 = 2080;
      *(void *)uint64_t v65 = "out_size == 0";
      _os_log_error_impl(&dword_1BAA78000, v31, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to get_string_property size", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v42);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v40, "Failed to get_string_property size");
    std::runtime_error::runtime_error(&v52, &v40);
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    int v57 = -1;
    v52.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v53 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v52);
    *(void *)&v65[6] = "CFTypeRef HALS_IOUAUCDriver::get_custom_property_value(AudioObjectID, AudioObjectPropertyAddres"
                         "s, applesauce::CF::TypeRef)";
    long long v66 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v67 = 386;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(buffer);
    std::runtime_error v50 = *(std::runtime_error *)buffer;
    int v49 = &unk_1F148AA90;
    uint64_t v51 = v48;
    buffer[0] = 0;
    buffer[1] = 0;
    uint64_t v48 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  buf[0] = 0;
  std::vector<std::byte>::vector(buffer, PropertySize, buf);
  HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v17 + 4), &v59, v19, BytePtr, Length, buffer[0], &bufferSize);
  CFStringRef errorString = 0;
  std::logic_error v29 = (AMCP::Log::Scope_Registry *)IOCFUnserializeBinary(buffer[0], bufferSize, (CFAllocatorRef)*MEMORY[0x1E4F1CF88], 0, &errorString);
  if (errorString)
  {
    AMCP::Log::Scope_Registry::get(v29);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v34 = **(NSObject ***)buf;
    if (*(void *)v61) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v61);
    }
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      uint64_t v35 = pthread_self();
      mach_port_t v36 = pthread_mach_thread_np(v35);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v36;
      *(_WORD *)long long v61 = 2080;
      *(void *)&v61[2] = "HALS_IOUAUCDriver.cpp";
      __int16 v62 = 1024;
      int v63 = 393;
      __int16 v64 = 2080;
      *(void *)uint64_t v65 = "error";
      _os_log_error_impl(&dword_1BAA78000, v34, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to deserialize string object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v43);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v42, "Failed to deserialize string object");
    std::runtime_error::runtime_error(&v52, &v42);
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    int v57 = -1;
    v52.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v53 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v52);
    *(void *)&v65[6] = "CFTypeRef HALS_IOUAUCDriver::get_custom_property_value(AudioObjectID, AudioObjectPropertyAddres"
                         "s, applesauce::CF::TypeRef)";
    long long v66 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v67 = 393;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v40);
    std::runtime_error v50 = v40;
    int v49 = &unk_1F148AA90;
    uint64_t v51 = v41;
    v40.__vftable = 0;
    v40.__imp_.__imp_ = 0;
    uint64_t v41 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  __int16 v30 = v29;
  if (buffer[0])
  {
    buffer[1] = buffer[0];
    operator delete(buffer[0]);
  }
  applesauce::raii::v1::detail::ScopeGuard<HALS_IOUAUCDriver::get_custom_property_value(unsigned int,AudioObjectPropertyAddress,applesauce::CF::TypeRef)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard((const void ***)&v46);
  *a4 = v30;
  if (v15) {
    CFRelease(v15);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  a3->signed int mSelector = 8;
  if (v15) {
    CFRelease(v15);
  }
}

void sub_1BAEDC6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, std::runtime_error a11, uint64_t a12, uint64_t a13, std::runtime_error a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,const void **a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,char a30)
{
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  applesauce::raii::v1::detail::ScopeGuard<HALS_IOUAUCDriver::get_custom_property_value(unsigned int,AudioObjectPropertyAddress,applesauce::CF::TypeRef)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(&a21);
  applesauce::CF::TypeRef::~TypeRef((const void **)&a9);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  applesauce::CF::TypeRef::~TypeRef(&a10);
  _Unwind_Resume(a1);
}

void HALS_IOUAObject::SetPropertyData(HALS_IOUAObject *this, unsigned int *a2, const AudioObjectPropertyAddress *a3, CFTypeRef *a4, const void *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(HALS_IOUAObject *, void, const AudioObjectPropertyAddress *, CFTypeRef *, const void *, uint64_t, const void *, HALS_Client *))(*(void *)this + 16))(this, *a2, a3, a4, a5, a6, a7, a8);
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get(v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v33 = **(NSObject ***)buf;
    if (*(void *)v54) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v54);
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      int v34 = pthread_self();
      mach_port_t v35 = pthread_mach_thread_np(v34);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v35;
      *(_WORD *)uint64_t v54 = 2080;
      *(void *)&CFTypeRef v54[2] = "HALS_IOUAObject.cpp";
      __int16 v55 = 1024;
      int v56 = 214;
      _os_log_error_impl(&dword_1BAA78000, v33, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Unknown Property", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v52);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v44, "Unknown property");
    std::runtime_error::runtime_error(&v45, &v44);
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    int v50 = -1;
    v45.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v46 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v45);
    *(void *)&v58[6] = "void HALS_IOUAObject::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &, UInt32"
                         ", const void *, UInt32, const void *, HALS_Client *)";
    AudioObjectPropertyAddress v59 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAObject.cpp";
    int v60 = 214;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v39);
    uint64_t v41 = &unk_1F148AA90;
    long long v42 = v39;
    uint64_t v43 = v40;
    long long v39 = 0uLL;
    uint64_t v40 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  if (a4)
  {
    CFTypeRef v13 = *a4;
    if (*a4) {
      CFRetain(*a4);
    }
  }
  else
  {
    CFTypeRef v13 = 0;
  }
  uint64_t v14 = *((void *)this + 1);
  long long v15 = *(HALS_IOUAUCDriver **)(v14 + 792);
  uint64_t v16 = *(std::__shared_weak_count **)(v14 + 800);
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v17 = *((_DWORD *)this + 4);
  uint64_t v18 = *(void *)a2;
  AudioObjectPropertyElement v19 = a2[2];
  if (v13) {
    CFRetain(v13);
  }
  uint64_t v20 = *(const void **)&a3->mSelector;
  if (v20) {
    CFRetain(v20);
  }
  *(void *)&v52.signed int mSelector = v18;
  v52.AudioObjectPropertyElement mElement = v19;
  CFDataRef v21 = IOCFSerialize(v20, 0);
  CFDataRef theData = v21;
  if (!v21)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    char v27 = **(NSObject ***)buf;
    if (*(void *)v54) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v54);
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      int v28 = pthread_self();
      mach_port_t v29 = pthread_mach_thread_np(v28);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v29;
      *(_WORD *)uint64_t v54 = 2080;
      *(void *)&CFTypeRef v54[2] = "HALS_IOUAUCDriver.cpp";
      __int16 v55 = 1024;
      int v56 = 404;
      __int16 v57 = 2080;
      *(void *)CFDataRef v58 = "(data_serialized_data) == nullptr";
      _os_log_error_impl(&dword_1BAA78000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to serialized data CF object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&p_theData);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v44, "Failed to serialized data CF object");
    std::runtime_error::runtime_error(&v45, &v44);
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    int v50 = -1;
    v45.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v46 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v45);
    *(void *)&v58[6] = "void HALS_IOUAUCDriver::set_custom_property_value(AudioObjectID, AudioObjectPropertyAddress, ap"
                         "plesauce::CF::TypeRef, applesauce::CF::TypeRef)";
    AudioObjectPropertyAddress v59 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v60 = 404;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v39);
    uint64_t v41 = &unk_1F148AA90;
    long long v42 = v39;
    uint64_t v43 = v40;
    long long v39 = 0uLL;
    uint64_t v40 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  p_CFDataRef theData = &theData;
  BytePtr = CFDataGetBytePtr(v21);
  CFIndex Length = CFDataGetLength(theData);
  CFDataRef v37 = 0;
  if (v13)
  {
    CFDataRef v24 = IOCFSerialize(v13, 0);
    CFDataRef v37 = v24;
    if (!v24)
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      __int16 v30 = **(NSObject ***)buf;
      if (*(void *)v54) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v54);
      }
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        int v31 = pthread_self();
        mach_port_t v32 = pthread_mach_thread_np(v31);
        *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v32;
        *(_WORD *)uint64_t v54 = 2080;
        *(void *)&CFTypeRef v54[2] = "HALS_IOUAUCDriver.cpp";
        __int16 v55 = 1024;
        int v56 = 414;
        __int16 v57 = 2080;
        *(void *)CFDataRef v58 = "(qualifier_serialized_data) == nullptr";
        _os_log_error_impl(&dword_1BAA78000, v30, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to serialized qualifier CF object", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v44, "Failed to serialized qualifier CF object");
      std::runtime_error::runtime_error(&v45, &v44);
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      int v50 = -1;
      v45.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      uint64_t v46 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v45);
      *(void *)&v58[6] = "void HALS_IOUAUCDriver::set_custom_property_value(AudioObjectID, AudioObjectPropertyAddress, "
                           "applesauce::CF::TypeRef, applesauce::CF::TypeRef)";
      AudioObjectPropertyAddress v59 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
      int v60 = 414;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v39);
      uint64_t v41 = &unk_1F148AA90;
      long long v42 = v39;
      uint64_t v43 = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    *(void *)AudioObjectPropertyAddress buf = &v37;
    mach_port_t v25 = CFDataGetBytePtr(v24);
    if (v37) {
      CFIndex v26 = CFDataGetLength(v37);
    }
    else {
      CFIndex v26 = 0;
    }
  }
  else
  {
    mach_port_t v25 = 0;
    CFIndex v26 = 0;
    *(void *)AudioObjectPropertyAddress buf = &v37;
  }
  HALS_IOUAUCDriver::SetPropertyData(v15, &v52, v17, v25, v26, BytePtr, Length);
  applesauce::raii::v1::detail::ScopeGuard<HALS_IOUAUCDriver::set_custom_property_value(unsigned int,AudioObjectPropertyAddress,applesauce::CF::TypeRef,applesauce::CF::TypeRef)::$_1,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard((const void ***)buf);
  CFRelease(theData);
  if (v20) {
    CFRelease(v20);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v13) {
    CFRelease(v13);
  }
}

void sub_1BAEDD09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, const void *a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, CFTypeRef *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,std::runtime_error a26,char a27)
{
  applesauce::raii::v1::detail::ScopeGuard<HALS_IOUAUCDriver::set_custom_property_value(unsigned int,AudioObjectPropertyAddress,applesauce::CF::TypeRef,applesauce::CF::TypeRef)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(&a17);
  applesauce::CF::TypeRef::~TypeRef((const void **)&a9);
  applesauce::CF::TypeRef::~TypeRef(&a10);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  applesauce::CF::TypeRef::~TypeRef(&a11);
  _Unwind_Resume(a1);
}

uint64_t HALS_Object::GetPropertyTypeInfo(HALS_Object *this, HALB_Info *a2, BOOL *a3, unsigned int *a4)
{
  char v13 = 0;
  *(_DWORD *)a3 = HALB_Info::GetPropertyDataType(a2, &v13, a3);
  char v12 = 0;
  uint64_t result = HALB_Info::GetPropertyQualifierDataType(a2, &v12, v7);
  *a4 = result;
  if (v13) {
    BOOL v9 = v12 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    uint64_t v10 = *((unsigned int *)this + 4);
    uint64_t v14 = 0x676C6F6263757374;
    LODWORD(v15) = 0;
    uint64_t result = (*(uint64_t (**)(HALS_Object *, uint64_t, uint64_t *, void))(*(void *)this + 88))(this, v10, &v14, 0);
    if (result)
    {
      uint64_t v11 = *((unsigned int *)this + 4);
      uint64_t v14 = 0x676C6F6263757374;
      LODWORD(v15) = 0;
      uint64_t result = (*(uint64_t (**)(HALS_Object *, uint64_t, uint64_t *, void, void, void))(*(void *)this + 104))(this, v11, &v14, 0, 0, 0);
      if (result >= 0xC)
      {
        char v13 = 0;
        operator new[]();
      }
    }
  }
  return result;
}

void sub_1BAEDD4B8(_Unwind_Exception *a1)
{
  MEMORY[0x1C1859810](v1, 0x1000C803E1C8BA9);
  _Unwind_Resume(a1);
}

void HALS_Object::SetPropertyData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2, a3, a8);
  exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
  *(void *)exceptiouint64_t n = off_1F148A5D8;
  if (v8) {
    int v10 = 1852797029;
  }
  else {
    int v10 = 2003332927;
  }
  exception[2] = v10;
}

uint64_t HALS_Object::GetPropertyData(uint64_t result, uint64_t a2, int *a3, unsigned int a4, int *a5, uint64_t *a6)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      uint64_t v16 = "HALS_Object.cpp";
      __int16 v17 = 1024;
      int v18 = 452;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Object::GetPropertyData: no where to put the return value", (uint8_t *)&v15, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    int v12 = 1852797029;
LABEL_38:
    exception[2] = v12;
  }
  int v8 = *a3;
  if (*a3 <= 1869638758)
  {
    if (v8 == 1650682995)
    {
      if (a4 > 3)
      {
        int v9 = *(_DWORD *)(result + 24);
        if (v9 == *(_DWORD *)(result + 20))
        {
          uint64_t result = HALB_Info::GetBaseClass((HALB_Info *)*(unsigned int *)(result + 24));
          int v9 = result;
        }
        goto LABEL_19;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_37;
      }
      int v15 = 136315394;
      uint64_t v16 = "HALS_Object.cpp";
      __int16 v17 = 1024;
      int v18 = 459;
      char v13 = MEMORY[0x1E4F14500];
      uint64_t v14 = "%25s:%-5d  HALS_Object::GetPropertyData: bad property data size for kAudioObjectPropertyBaseClass";
      goto LABEL_36;
    }
    if (v8 != 1668047219) {
      goto LABEL_29;
    }
    if (a4 > 3)
    {
      int v9 = *(_DWORD *)(result + 20);
      goto LABEL_19;
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_37;
    }
    int v15 = 136315394;
    uint64_t v16 = "HALS_Object.cpp";
    __int16 v17 = 1024;
    int v18 = 466;
    char v13 = MEMORY[0x1E4F14500];
    uint64_t v14 = "%25s:%-5d  HALS_Object::GetPropertyData: bad property data size for kAudioObjectPropertyClass";
    goto LABEL_36;
  }
  if (v8 == 1869638759)
  {
    if (a4 > 7)
    {
      if (*(unsigned char *)(result + 40))
      {
        *a6 = @"com.apple.audio.V5";
      }
      else
      {
        uint64_t result = *(void *)(result + 32);
        *a6 = result;
        if (result) {
          uint64_t result = (uint64_t)CFRetain((CFTypeRef)result);
        }
      }
      int v10 = 8;
      goto LABEL_23;
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
LABEL_37:
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      int v12 = 561211770;
      goto LABEL_38;
    }
    int v15 = 136315394;
    uint64_t v16 = "HALS_Object.cpp";
    __int16 v17 = 1024;
    int v18 = 480;
    char v13 = MEMORY[0x1E4F14500];
    uint64_t v14 = "%25s:%-5d  HALS_Object::GetPropertyData: bad property data size for kAudioObjectPropertyCreator";
LABEL_36:
    _os_log_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v15, 0x12u);
    goto LABEL_37;
  }
  if (v8 != 1870098020)
  {
    if (v8 == 1937007734)
    {
      if (a4 > 3)
      {
        int v9 = *(_DWORD *)(result + 28);
LABEL_19:
        *(_DWORD *)a6 = v9;
        int v10 = 4;
        goto LABEL_23;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_37;
      }
      int v15 = 136315394;
      uint64_t v16 = "HALS_Object.cpp";
      __int16 v17 = 1024;
      int v18 = 473;
      char v13 = MEMORY[0x1E4F14500];
      uint64_t v14 = "%25s:%-5d  HALS_Object::GetPropertyData: bad property data size for kAudioObjectPropertyOwner";
      goto LABEL_36;
    }
LABEL_29:
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    int v12 = 2003332927;
    goto LABEL_38;
  }
  int v10 = 0;
LABEL_23:
  *a5 = v10;
  return result;
}

uint64_t HALS_Object::GetPropertyDataSize(uint64_t a1, uint64_t a2, int *a3)
{
  int v3 = *a3;
  uint64_t result = 4;
  if (*a3 > 1819107690)
  {
    if (v3 <= 1869638758)
    {
      if (v3 == 1819107691 || v3 == 1819111268) {
        return 8;
      }
      int v7 = 1819173229;
LABEL_22:
      if (v3 == v7) {
        return 8;
      }
LABEL_27:
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      exception[2] = 2003332927;
    }
    if (v3 <= 1936618860)
    {
      if (v3 != 1869638759)
      {
        if (v3 == 1870098020) {
          return 0;
        }
        goto LABEL_27;
      }
      return 8;
    }
    if (v3 == 1936618861) {
      return 8;
    }
    if (v3 != 1937007734) {
      goto LABEL_27;
    }
  }
  else
  {
    if (v3 > 1768187245)
    {
      if (v3 <= 1818454125)
      {
        if (v3 == 1768187246) {
          return result;
        }
        unsigned __int16 v5 = 25454;
        goto LABEL_21;
      }
      if (v3 != 1818454126)
      {
        unsigned __int16 v5 = 28270;
LABEL_21:
        int v7 = v5 | 0x6C630000;
        goto LABEL_22;
      }
      return 8;
    }
    if (v3 != 1650682995 && v3 != 1668047219)
    {
      int v7 = 1719105134;
      goto LABEL_22;
    }
  }
  return result;
}

uint64_t HALS_Object::IsPropertySettable(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result = 0;
  int v4 = *a3;
  if (*a3 > 1819107690)
  {
    if (v4 <= 1869638758)
    {
      BOOL v5 = v4 == 1819107691 || v4 == 1819111268;
      int v6 = 1819173229;
    }
    else if (v4 > 1936618860)
    {
      BOOL v5 = v4 == 1936618861;
      int v6 = 1937007734;
    }
    else
    {
      BOOL v5 = v4 == 1869638759;
      int v6 = 1870098020;
    }
  }
  else if (v4 <= 1768187245)
  {
    BOOL v5 = v4 == 1650682995 || v4 == 1668047219;
    int v6 = 1719105134;
  }
  else
  {
    if (v4 <= 1818454125)
    {
      if (v4 == 1768187246) {
        return 1;
      }
      if (v4 != 1818452846) {
        goto LABEL_27;
      }
      return result;
    }
    BOOL v5 = v4 == 1818454126;
    int v6 = 1818455662;
  }
  if (!v5 && v4 != v6)
  {
LABEL_27:
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  return result;
}

uint64_t HALS_Object::CopyResourceBundle(HALS_Object *this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (HALS_ObjectMap *)*((unsigned int *)this + 7);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = HALS_ObjectMap::CopyObjectByObjectID(v1);
  int v3 = (HALS_ObjectMap *)v2;
  if (!v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      int v9 = "HALS_Object.cpp";
      __int16 v10 = 1024;
      int v11 = 222;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Object::CopyResourceBundle: this object's owner doesn't exist", (uint8_t *)&v8, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 560947818;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 80))(v2);
  HALS_ObjectMap::ReleaseObject(v3, v5);
  return v4;
}

void sub_1BAEDDD9C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t HALS_Object::GetMIGDispatchQueue(HALS_Object *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (HALS_ObjectMap *)*((unsigned int *)this + 7);
  if (!v1)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      __int16 v10 = "HALS_Object.cpp";
      __int16 v11 = 1024;
      int v12 = 210;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Object::GetMIGDispatchQueue: ownerless objects must implement their own dispatch queue", (uint8_t *)&v9, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 560947818;
  }
  uint64_t v2 = HALS_ObjectMap::CopyObjectByObjectID(v1);
  int v3 = (HALS_ObjectMap *)v2;
  if (!v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      __int16 v10 = "HALS_Object.cpp";
      __int16 v11 = 1024;
      int v12 = 212;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Object::GetMIGDispatchQueue: this object's owner doesn't exist", (uint8_t *)&v9, 0x12u);
    }
    int v8 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v8 = off_1F148A5D8;
    void v8[2] = 560947818;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2);
  HALS_ObjectMap::ReleaseObject(v3, v5);
  return v4;
}

{
  HALS_ObjectMap *v1;
  uint64_t v2;
  HALS_ObjectMap *v3;
  uint64_t v4;
  HALS_Object *v5;
  _DWORD *exception;
  _DWORD *v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (HALS_ObjectMap *)*((unsigned int *)this + 7);
  if (!v1)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      __int16 v10 = "HALS_Object.cpp";
      __int16 v11 = 1024;
      int v12 = 202;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Object::GetMIGDispatchQueue: ownerless objects must implement their own dispatch queue", (uint8_t *)&v9, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 560947818;
  }
  uint64_t v2 = HALS_ObjectMap::CopyObjectByObjectID(v1);
  int v3 = (HALS_ObjectMap *)v2;
  if (!v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      __int16 v10 = "HALS_Object.cpp";
      __int16 v11 = 1024;
      int v12 = 204;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Object::GetMIGDispatchQueue: this object's owner doesn't exist", (uint8_t *)&v9, 0x12u);
    }
    int v8 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v8 = off_1F148A5D8;
    void v8[2] = 560947818;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2);
  HALS_ObjectMap::ReleaseObject(v3, v5);
  return v4;
}

void sub_1BAEDDFCC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAEDE204(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t HALS_Object::GetCommandGate(HALS_Object *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (HALS_ObjectMap *)*((unsigned int *)this + 7);
  if (!v1)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      __int16 v10 = "HALS_Object.cpp";
      __int16 v11 = 1024;
      int v12 = 194;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Object::GetCommandGate: ownerless objects must implement their own command gate", (uint8_t *)&v9, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 560947818;
  }
  uint64_t v2 = HALS_ObjectMap::CopyObjectByObjectID(v1);
  int v3 = (HALS_ObjectMap *)v2;
  if (!v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      __int16 v10 = "HALS_Object.cpp";
      __int16 v11 = 1024;
      int v12 = 196;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Object::GetCommandGate: this object's owner doesn't exist", (uint8_t *)&v9, 0x12u);
    }
    int v8 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v8 = off_1F148A5D8;
    void v8[2] = 560947818;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2);
  HALS_ObjectMap::ReleaseObject(v3, v5);
  return v4;
}

{
  HALS_ObjectMap *v1;
  uint64_t v2;
  HALS_ObjectMap *v3;
  uint64_t v4;
  HALS_Object *v5;
  _DWORD *exception;
  _DWORD *v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (HALS_ObjectMap *)*((unsigned int *)this + 7);
  if (!v1)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      __int16 v10 = "HALS_Object.cpp";
      __int16 v11 = 1024;
      int v12 = 186;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Object::GetCommandGate: ownerless objects must implement their own command gate", (uint8_t *)&v9, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 560947818;
  }
  uint64_t v2 = HALS_ObjectMap::CopyObjectByObjectID(v1);
  int v3 = (HALS_ObjectMap *)v2;
  if (!v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      __int16 v10 = "HALS_Object.cpp";
      __int16 v11 = 1024;
      int v12 = 188;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Object::GetCommandGate: this object's owner doesn't exist", (uint8_t *)&v9, 0x12u);
    }
    int v8 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v8 = off_1F148A5D8;
    void v8[2] = 560947818;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2);
  HALS_ObjectMap::ReleaseObject(v3, v5);
  return v4;
}

void sub_1BAEDE43C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAEDE674(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t HALS_Object::IsActive(HALS_Object *this)
{
  int v1 = *((_DWORD *)this + 2);
  uint64_t v2 = v1 != 0;
  int v3 = (HALS_ObjectMap *)*((unsigned int *)this + 7);
  if (v3)
  {
    uint64_t v4 = HALS_ObjectMap::CopyObjectByObjectID(v3);
    int v6 = (HALS_ObjectMap *)v4;
    if (v1) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    }
    HALS_ObjectMap::ReleaseObject(v6, v5);
  }
  return v2;
}

void sub_1BAEDE734(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_Object::_Deactivate(uint64_t this)
{
  *(_DWORD *)(this + 8) = 0;
  return this;
}

void HALS_Object::~HALS_Object(HALS_Object *this)
{
  HALS_Object::~HALS_Object(this);

  JUMPOUT(0x1C1859840);
}

{
  const void *v2;
  HALS_ObjectMap *v3;
  HALB_Mutex *v4;
  int v5;

  *(void *)this = &unk_1F1481040;
  uint64_t v2 = (const void *)*((void *)this + 4);
  if (v2) {
    CFRelease(v2);
  }
  int v3 = (HALS_ObjectMap *)*((unsigned int *)this + 4);
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  if (v3)
  {
    uint64_t v4 = (HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex;
    BOOL v5 = HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
    HALS_ObjectMap::_UnmapObject(v3);
    HALB_Mutex::Locker::~Locker(&v4);
  }
}

void HALS_Object::Deactivate(HALS_Object *this)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = ___ZN11HALS_Object10DeactivateEv_block_invoke;
  v2[3] = &__block_descriptor_tmp_15993;
  v2[4] = this;
  int v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Object *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v2);
}

void sub_1BAEDE8D0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  (*(void (**)(uint64_t))(*(void *)v1 + 32))(v1);
  JUMPOUT(0x1BAEDE8C0);
}

void sub_1BAEDE904(void *a1)
{
}

uint64_t ___ZN11HALS_Object10DeactivateEv_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 32))();
}

void HALS_Object::Activate(HALS_Object *this, HALS_Object *a2)
{
  HALS_ObjectMap::RetainObject(this, a2);
  uint64_t v4 = this;
  while (v4)
  {
    int v5 = *((_DWORD *)v4 + 5);
    int v6 = *((_DWORD *)v4 + 6);
    if (v5 == v6)
    {
      if (v5 == 1634757735 || v5 == 1953656941) {
        goto LABEL_21;
      }
    }
    else if (v5 == 1634757735 || v5 == 1953656941 || v6 == 1634757735 || v6 == 1953656941)
    {
LABEL_21:
      uint64_t v13 = (const void *)*((void *)v4 + 6);
      if (v13)
      {
        CFRetain(v13);
        uint64_t v14 = *((void *)v4 + 6);
      }
      else
      {
        uint64_t v14 = 0;
      }
      *((void *)this + 4) = v14;
      break;
    }
    __int16 v11 = (HALS_Object *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)v4 + 7));
    int v12 = v4;
    uint64_t v4 = v11;
    HALS_ObjectMap::ReleaseObject(v12, v11);
  }
  HALS_ObjectMap::RetainObject(this, v3);
  uint64_t v16 = this;
  while (v16)
  {
    int v17 = *((_DWORD *)v16 + 5);
    if (v17 <= 1701078389)
    {
      if (v17 == 1633773415 || v17 == 1633969526)
      {
LABEL_50:
        *((unsigned char *)this + 40) = (*(uint64_t (**)(HALS_ObjectMap *))(*(void *)v16 + 224))(v16);
        break;
      }
    }
    else if (v17 == 1701078390 || v17 == 1701733488 || v17 == 1919182198)
    {
      goto LABEL_50;
    }
    int v21 = *((_DWORD *)v16 + 6);
    if (v17 != v21)
    {
      if (v21 <= 1701078389)
      {
        if (v21 == 1633773415 || v21 == 1633969526) {
          goto LABEL_50;
        }
      }
      else if (v21 == 1701078390 || v21 == 1701733488 || v21 == 1919182198)
      {
        goto LABEL_50;
      }
    }
    CFDataRef v22 = (HALS_Object *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)v16 + 7));
    uint64_t v23 = v16;
    uint64_t v16 = v22;
    HALS_ObjectMap::ReleaseObject(v23, v22);
  }
  *((_DWORD *)this + 2) = 1;
  HALS_ObjectMap::ReleaseObject(v16, v15);
  HALS_ObjectMap::ReleaseObject(v4, v24);
}

void sub_1BAEDEB08(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void HALS_Object::HALS_Object(HALS_Object *this, int a2, int a3, uint64_t a4, HALS_Object *a5)
{
  *(void *)this = &unk_1F1481040;
  *((_DWORD *)this + 2) = 0;
  *((_WORD *)this + 6) = 1;
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  uint64_t v13 = (HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex;
  int v14 = HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
  int v9 = (HALS_ObjectMap *)HALS_ObjectMap::sNextObjectID++;
  HALB_Mutex::Locker::~Locker(&v13);
  *((_DWORD *)this + 4) = v9;
  *((_DWORD *)this + 5) = a2;
  if (a3) {
    int v11 = a3;
  }
  else {
    int v11 = a2;
  }
  *((_DWORD *)this + 6) = v11;
  if (a4) {
    int v12 = *(_DWORD *)(a4 + 16);
  }
  else {
    int v12 = 0;
  }
  *((_DWORD *)this + 7) = v12;
  *((void *)this + 4) = &stru_1F148AD50;
  *((unsigned char *)this + 40) = 0;
  *((_DWORD *)this + 11) = 0;
  HALS_ObjectMap::MapObject(v9, (uint64_t)this, v10);
}

const __CFString *HALS_Object::CopyLocalizedString(HALS_Object *this, const AudioObjectPropertyAddress *a2, const __CFString *a3)
{
  if (HALB_Info::IsLocalizedStringProperty((HALB_Info *)a2->mSelector, a2))
  {
    uint64_t v6 = (*(uint64_t (**)(HALS_Object *))(*(void *)this + 80))(this);
    v11[0] = &unk_1F1461AA8;
    v11[1] = v6;
    char v12 = 1;
    if (v6)
    {
      CFStringRef v7 = (const __CFString *)(*(uint64_t (**)(HALS_Object *, const AudioObjectPropertyAddress *))(*(void *)this + 184))(this, a2);
      CFStringRef v9 = HALB_CFBundle::CopyLocalizedString((HALB_CFBundle *)v11, a3, v7, a3, v8);
      if (v9 == a3)
      {
        CFRelease(a3);
        CFStringRef v9 = a3;
      }
    }
    else
    {
      CFStringRef v9 = a3;
    }
    HALB_CFBundle::~HALB_CFBundle((HALB_CFBundle *)v11);
    return v9;
  }
  return a3;
}

void sub_1BAEDED4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HALB_CFBundle::~HALB_CFBundle((HALB_CFBundle *)va);
  _Unwind_Resume(a1);
}

void HALS_Object::PropertiesChanged(HALS_Object *this, HALS_NotificationManager *a2, uint64_t a3, unsigned int a4, const AudioObjectPropertyAddress *a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  CFStringRef v9 = *(_opaque_pthread_t **)((*(uint64_t (**)(HALS_Object *))(*(void *)this + 48))(this) + 72);
  if (v9 == pthread_self() && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 136315394;
    char v12 = "HALS_Object.cpp";
    __int16 v13 = 1024;
    int v14 = 639;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Object::PropertiesChanged: Notifications are being sent from inside the command gate.", (uint8_t *)&v11, 0x12u);
  }
  HALS_NotificationManager::PropertiesChanged(a2, a3, a4, a5, v10);
}

void HALS_Object::PropertiesChanged_Sync(HALS_Object *this, HALS_NotificationManager *a2, uint64_t a3, unsigned int a4, const AudioObjectPropertyAddress *a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  CFStringRef v9 = *(_opaque_pthread_t **)((*(uint64_t (**)(HALS_Object *))(*(void *)this + 48))(this) + 72);
  if (v9 == pthread_self() && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 136315394;
    char v12 = "HALS_Object.cpp";
    __int16 v13 = 1024;
    int v14 = 648;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Object::PropertiesChanged_Sync: Notifications are being sent from inside the command gate.", (uint8_t *)&v11, 0x12u);
  }
  HALS_NotificationManager::PropertiesChanged_Sync(a2, a3, a4, a5, v10);
}

uint64_t HALS_Object::IsObjectClassInClassIDList(HALS_Object *this, uint64_t a2, const unsigned int *a3, HALS_Object *a4)
{
  unsigned int v4 = this;
  uint64_t result = 1;
  if (v4 && a2)
  {
    unint64_t v7 = 0;
    unint64_t v8 = v4;
    CFStringRef v9 = (HALB_Info *)a3[5];
    __int16 v10 = (HALB_Info *)a3[6];
    do
    {
      int v11 = *(_DWORD *)(a2 + 4 * v7);
      BOOL IsSubClass = HALB_Info::IsSubClass(v9, v11);
      BOOL v13 = IsSubClass;
      uint64_t result = (v9 != v10) | IsSubClass;
      if (v9 != v10 && !v13) {
        uint64_t result = HALB_Info::IsSubClass(v10, v11);
      }
      if (result) {
        break;
      }
      ++v7;
    }
    while (v7 < v8);
  }
  return result;
}

CFDictionaryRef PropertyListDeepImmutableCopy(const __CFString *cf)
{
  CFStringRef v1 = cf;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!cf) {
    return (CFDictionaryRef)v1;
  }
  CFTypeID v2 = CFGetTypeID(cf);
  if (v2 == CFStringGetTypeID())
  {
    CStringPtr = CFStringGetCStringPtr(v1, 0x8000100u);
    if (CStringPtr)
    {
      unsigned int v4 = CStringPtr;
      CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF88];
      return (CFDictionaryRef)CFStringCreateWithCString(v5, v4, 0x8000100u);
    }
    CFIndex Length = CFStringGetLength(v1);
    __int16 v21 = 0;
    std::vector<unsigned short>::vector(buf, Length, &v21);
    v28.length = (uint64_t)(*(void *)v23 - *(void *)buf) >> 1;
    v28.locatiouint64_t n = 0;
    CFStringGetCharacters(v1, v28, *(UniChar **)buf);
    CFStringRef v1 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E4F1CF88], *(const UniChar **)buf, (uint64_t)(*(void *)v23 - *(void *)buf) >> 1);
    if (*(void *)buf)
    {
      *(void *)uint64_t v23 = *(void *)buf;
      operator delete(*(void **)buf);
    }
    return (CFDictionaryRef)v1;
  }
  if (v2 == CFArrayGetTypeID())
  {
    return ArrayDeepImmutableCopy((const __CFArray *)v1);
  }
  else if (v2 == CFDictionaryGetTypeID())
  {
    return DictionaryDeepImmutableCopy((const __CFDictionary *)v1);
  }
  else if (v2 == CFDataGetTypeID())
  {
    BytePtr = CFDataGetBytePtr((CFDataRef)v1);
    CFIndex v9 = CFDataGetLength((CFDataRef)v1);
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF88];
    return CFDataCreate(v10, BytePtr, v9);
  }
  else
  {
    if (v2 == CFNumberGetTypeID())
    {
      ByteCFArrayRef Size = CFNumberGetByteSize((CFNumberRef)v1);
      CFNumberType Type = CFNumberGetType((CFNumberRef)v1);
      MEMORY[0x1F4188790]();
      BOOL v13 = (char *)&v20 - ((ByteSize + 15) & 0xFFFFFFFFFFFFFFF0);
      CFNumberGetValue((CFNumberRef)v1, Type, v13);
      return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF88], Type, v13);
    }
    if (v2 == CFBooleanGetTypeID())
    {
      CFRetain(v1);
      return (CFDictionaryRef)v1;
    }
    CFTypeID TypeID = (AMCP::Log::Scope_Registry *)CFDateGetTypeID();
    if ((AMCP::Log::Scope_Registry *)v2 != TypeID)
    {
      AMCP::Log::Scope_Registry::get(TypeID);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int v17 = **(NSObject ***)buf;
      if (*(void *)v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v23);
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        int v18 = pthread_self();
        mach_port_t v19 = pthread_mach_thread_np(v18);
        *(_DWORD *)AudioObjectPropertyAddress buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v19;
        *(_WORD *)uint64_t v23 = 2080;
        *(void *)&v23[2] = "CFDeepCopy.cpp";
        __int16 v24 = 1024;
        int v25 = 126;
        _os_log_debug_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Not a supported property list type. Can not make a deep copy for this type.", buf, 0x18u);
      }
      return 0;
    }
    MEMORY[0x1C18582C0](v1);
    CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF88];
    return CFDateCreate(v16, v15);
  }
}

void sub_1BAEDF428(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)(v1 - 64);
  if (v3)
  {
    *(void *)(v1 - 56) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

CFArrayRef ArrayDeepImmutableCopy(const __CFArray *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  CFIndex Count = CFArrayGetCount(a1);
  if (Count)
  {
    uint64_t v3 = Count;
    MEMORY[0x1F4188790]();
    CFAllocatorRef v5 = (const void **)((char *)&callBacks - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v4 >= 0x200) {
      size_t v6 = 512;
    }
    else {
      size_t v6 = v4;
    }
    bzero((char *)&callBacks - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
    if (v3 < 1)
    {
      CFIndex v8 = 0;
    }
    else
    {
      CFIndex v7 = 0;
      CFIndex v8 = 0;
      do
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v7);
        uint64_t v10 = PropertyListDeepImmutableCopy(ValueAtIndex);
        v5[v8] = (const void *)v10;
        if (v10) {
          ++v8;
        }
        ++v7;
      }
      while (v3 != v7);
    }
    long long v14 = *(_OWORD *)(MEMORY[0x1E4F1D518] + 16);
    *(_OWORD *)&callBacks.versiouint64_t n = *MEMORY[0x1E4F1D518];
    *(_OWORD *)&callBacks.release = v14;
    callBacks.equal = *(CFArrayEqualCallBack *)(MEMORY[0x1E4F1D518] + 32);
    callBacks.retaiuint64_t n = 0;
    return CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF88], v5, v8, &callBacks);
  }
  else
  {
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF88];
    char v12 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D518];
    return CFArrayCreate(v11, 0, 0, v12);
  }
}

CFDictionaryRef DictionaryDeepImmutableCopy(const __CFDictionary *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  CFIndex Count = CFDictionaryGetCount(a1);
  if (Count)
  {
    uint64_t v3 = Count;
    unint64_t v4 = 8 * Count;
    MEMORY[0x1F4188790]();
    unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
    size_t v6 = (const void **)((char *)&valueCallBacks - v5);
    if (v4 >= 0x200) {
      size_t v7 = 512;
    }
    else {
      size_t v7 = v4;
    }
    bzero((char *)&valueCallBacks - v5, v7);
    MEMORY[0x1F4188790]();
    CFIndex v8 = (const void **)((char *)&valueCallBacks - v5);
    bzero((char *)&valueCallBacks - v5, v7);
    MEMORY[0x1F4188790]();
    bzero((char *)&valueCallBacks - v5, v7);
    MEMORY[0x1F4188790]();
    bzero((char *)&valueCallBacks - v5, v7);
    CFDictionaryGetKeysAndValues(a1, (const void **)((char *)&valueCallBacks - v5), (const void **)((char *)&valueCallBacks - v5));
    if (v3 < 1)
    {
      CFIndex v9 = 0;
    }
    else
    {
      CFIndex v9 = 0;
      do
      {
        uint64_t v10 = *v6++;
        CFIndex v11 = PropertyListDeepImmutableCopy(v10);
        *(CFIndex *)((char *)&valueCallBacks.version + 8 * v9 - v5) = v11;
        char v12 = *v8++;
        CFIndex v13 = PropertyListDeepImmutableCopy(v12);
        *(CFIndex *)((char *)&valueCallBacks.version + 8 * v9 - v5) = v13;
        if (v11) {
          BOOL v14 = v13 == 0;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14) {
          ++v9;
        }
        --v3;
      }
      while (v3);
    }
    long long v19 = *(_OWORD *)(MEMORY[0x1E4F1D528] + 16);
    *(_OWORD *)&keyCallBacks.versiouint64_t n = *MEMORY[0x1E4F1D528];
    *(_OWORD *)&keyCallBacks.release = v19;
    *(_OWORD *)&keyCallBacks.equal = *(_OWORD *)(MEMORY[0x1E4F1D528] + 32);
    long long v20 = *(_OWORD *)(MEMORY[0x1E4F1D538] + 16);
    *(_OWORD *)&valueCallBacks.versiouint64_t n = *MEMORY[0x1E4F1D538];
    *(_OWORD *)&valueCallBacks.release = v20;
    __int16 v21 = *(Boolean (__cdecl **)(const void *, const void *))(MEMORY[0x1E4F1D538] + 32);
    keyCallBacks.retaiuint64_t n = 0;
    valueCallBacks.equal = v21;
    valueCallBacks.retaiuint64_t n = 0;
    return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF88], (const void **)((char *)&valueCallBacks - v5), (const void **)((char *)&valueCallBacks - v5), v9, &keyCallBacks, &valueCallBacks);
  }
  else
  {
    CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF88];
    uint64_t v16 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D528];
    int v17 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D538];
    return CFDictionaryCreate(v15, 0, 0, 0, v16, v17);
  }
}

void AMCP::Graph::File_Task::~File_Task(AMCP::Graph::File_Task *this)
{
  AMCP::Graph::File_Task::~File_Task(this);

  JUMPOUT(0x1C1859840);
}

{
  *(void *)this = &unk_1F1481118;
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
  std::unique_ptr<AMCP::DAL::File>::reset[abi:ne180100]((std::__shared_weak_count ***)this + 1, 0);
}

std::__shared_weak_count **std::unique_ptr<AMCP::DAL::File>::reset[abi:ne180100](std::__shared_weak_count ***a1, std::__shared_weak_count **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    AMCP::DAL::File::~File(result);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

void *std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2>,void ()(unsigned int)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2>,void ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph9File_Task12create_procsERKNS_19Terminal_IdentifierERKN2CA17StreamDescriptionEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

std::__shared_weak_count **std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2>,void ()(unsigned int)>::operator()(std::__shared_weak_count **result)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = result[1];
  int v2 = LODWORD(v1[4].__vftable) - 1;
  LODWORD(v1[4].__vftable) = v2;
  if (!v2)
  {
    p_shared_owners = (AMCP::Log::Scope_Registry *)&v1->__shared_owners_;
    if (!v1->__shared_owners_)
    {
      AMCP::Log::Scope_Registry::get(p_shared_owners);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      unint64_t v4 = **(NSObject ***)buf;
      if (*(void *)v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v25);
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        unint64_t v5 = pthread_self();
        mach_port_t v6 = pthread_mach_thread_np(v5);
        AMCP::Terminal_Identifier_to_string(&__p, (const void **)&v1->__shared_weak_owners_);
        size_t v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &__p
           : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v6;
        *(_WORD *)int v25 = 2080;
        *(void *)&CFTypeRef v25[2] = "Graph_File_Task.cpp";
        __int16 v26 = 1024;
        int v27 = 116;
        __int16 v28 = 2080;
        *(void *)mach_port_t v29 = "not (m_file != nullptr)";
        *(_WORD *)&v29[8] = 2080;
        *(void *)&unsigned char v29[10] = v7;
        _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s stop_processing called on a file that does not exists: %s", buf, 0x2Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v23);
      __cxa_allocate_exception(0x40uLL);
      AMCP::Terminal_Identifier_to_string(&v15, (const void **)&v1->__shared_weak_owners_);
      if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFIndex v8 = &v15;
      }
      else {
        CFIndex v8 = (std::string *)v15.__r_.__value_.__r.__words[0];
      }
      caulk::make_string((caulk *)"stop_processing called on a file that does not exists: %s", (uint64_t)&v16, v8);
      std::logic_error::logic_error(&v17, &v16);
      v17.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error((std::logic_error *)&__p, &v17);
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      int v22 = -1;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
      *(void *)&v29[6] = "void AMCP::Graph::File_Task::stop_processing()";
      *(void *)&v29[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_File_Task.cpp";
      int v30 = 116;
      std::vector<void *>::vector(&v10);
      int v9 = backtrace((void **)v10, (*((void *)&v10 + 1) - (void)v10) >> 3);
      std::vector<void *>::resize((char **)&v10, v9);
      char v12 = &unk_1F148AA90;
      long long v13 = v10;
      uint64_t v14 = v11;
      long long v10 = 0uLL;
      uint64_t v11 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    return std::unique_ptr<AMCP::DAL::File>::reset[abi:ne180100]((std::__shared_weak_count ***)p_shared_owners, 0);
  }
  return result;
}

void std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2>,void ()(unsigned int)>::destroy_deallocate(void *__p)
{
  int v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2>,void ()(unsigned int)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2>,void ()(unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14812F8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1F14812F8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2>,void ()(unsigned int)>::~__func(void *a1)
{
  *a1 = &unk_1F14812F8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_2>,void ()(unsigned int)>::~__func(void *a1)
{
  *a1 = &unk_1F14812F8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1>,void ()(unsigned int)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1>,void ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph9File_Task12create_procsERKNS_19Terminal_IdentifierERKN2CA17StreamDescriptionEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

AMCP::Log::Scope_Registry *std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1>,void ()(unsigned int)>::operator()(AMCP::Log::Scope_Registry *result)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)result + 1);
  int v2 = *(_DWORD *)(v1 + 96);
  *(_DWORD *)(v1 + 96) = v2 + 1;
  if (!v2)
  {
    if (!*(void *)(v1 + 8))
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "write");
      memset(v30, 0, 32);
      LOBYTE(v30[0]) = 1;
      v30[4] = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      std::string::basic_string[abi:ne180100]<0>(v31, "write time stamps");
      long long v32 = 0u;
      long long v33 = 0u;
      LOBYTE(v32) = 1;
      int v34 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      std::string::basic_string[abi:ne180100]<0>(v35, "create unique name");
      long long v36 = 0u;
      long long v37 = 0u;
      LOBYTE(v36) = 1;
      unint64_t v38 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      get_audio_capture_folder(v18);
      std::string::basic_string[abi:ne180100]<0>(v39, "file location");
      long long v40 = *(_OWORD *)v18;
      uint64_t v41 = v18[2];
      uint64_t v42 = 0;
      memset(v18, 0, 24);
      uint64_t v43 = AMCP::Implementation::In_Place_Storage<std::string>::dispatch;
      AMCP::DAL::generate_time_stamp((AMCP::DAL *)&v20);
      uint64_t v3 = std::string::append(&v20, "_wire_output_", 0xDuLL);
      std::string::size_type v4 = v3->__r_.__value_.__r.__words[0];
      v58.__vftable = (std::logic_error_vtbl *)v3->__r_.__value_.__l.__size_;
      *(std::logic_error_vtbl **)((char *)&v58.__vftable + 7) = *(std::logic_error_vtbl **)((char *)&v3->__r_.__value_.__r.__words[1]
                                                                                          + 7);
      char v5 = HIBYTE(v3->__r_.__value_.__r.__words[2]);
      v3->__r_.__value_.__l.__size_ = 0;
      v3->__r_.__value_.__r.__words[2] = 0;
      v3->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v44, "name");
      *(void *)&v45[7] = *(std::logic_error_vtbl **)((char *)&v58.__vftable + 7);
      v44[3] = v4;
      *(void *)std::runtime_error v45 = v58.__vftable;
      char v46 = v5;
      v58.__vftable = 0;
      *(std::logic_error_vtbl **)((char *)&v58.__vftable + 7) = 0;
      uint64_t v47 = 0;
      uint64_t v48 = AMCP::Implementation::In_Place_Storage<std::string>::dispatch;
      AMCP::Terminal_Identifier_to_string(&__p, (const void **)(v1 + 16));
      std::string::basic_string[abi:ne180100]<0>(v49, "wire id");
      std::string v50 = __p;
      uint64_t v51 = 0;
      memset(&__p, 0, sizeof(__p));
      AudioObjectPropertyAddress v52 = AMCP::Implementation::In_Place_Storage<std::string>::dispatch;
      asbd_to_dictionary((const CA::StreamDescription *)&cf, (uint64_t *)(v1 + 56));
      std::string::basic_string[abi:ne180100]<0>(v53, "asbd");
      memset(&v53[4], 0, 24);
      void v53[3] = cf;
      CFTypeRef cf = 0;
      v53[7] = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
      std::string::basic_string[abi:ne180100]<0>(v54, "write time stamps");
      long long v55 = 0u;
      long long v56 = 0u;
      LOBYTE(v55) = 1;
      __int16 v57 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      *(void *)&long long v16 = buf;
      *((void *)&v16 + 1) = 8;
      AMCP::DAL::DAL_Settings::DAL_Settings((unint64_t)&v21, (uint64_t *)&v16);
      uint64_t v6 = 128;
      while (1)
      {
        size_t v7 = &buf[v6 * 4];
        CFIndex v8 = *(void (**)(void, uint8_t *, void, void))&v25[v6];
        if (v8) {
          v8(0, v7 - 40, 0, 0);
        }
        if ((char)*(v7 - 41) < 0) {
          operator delete(*((void **)v7 - 8));
        }
        v6 -= 16;
        if (!(v6 * 4))
        {
          if (cf) {
            CFRelease(cf);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v20.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v18[2]) < 0) {
            operator delete(v18[0]);
          }
          operator new();
        }
      }
    }
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v9 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      long long v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      AMCP::Terminal_Identifier_to_string(&v21, (const void **)(v1 + 16));
      char v12 = (v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v21
          : (std::string *)v21.__r_.__value_.__r.__words[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)int v27 = 2080;
      *(void *)&uint64_t v27[2] = "Graph_File_Task.cpp";
      __int16 v28 = 1024;
      int v29 = 94;
      LOWORD(v30[0]) = 2080;
      *(void *)((char *)v30 + 2) = "not (m_file == nullptr)";
      WORD1(v30[1]) = 2080;
      *(void *)((char *)&v30[1] + 4) = v12;
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s start_processing called on a file that exists: %s", buf, 0x2Cu);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&cf);
    __cxa_allocate_exception(0x40uLL);
    AMCP::Terminal_Identifier_to_string(&__p, (const void **)(v1 + 16));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    caulk::make_string((caulk *)"start_processing called on a file that exists: %s", (uint64_t)&v20, p_p);
    std::logic_error::logic_error(&v58, &v20);
    v58.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v21, &v58);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    v25[0] = -1;
    v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    v21.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    v30[1] = "void AMCP::Graph::File_Task::start_processing()";
    v30[2] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_File_Task.cpp";
    LODWORD(v30[3]) = 94;
    std::vector<void *>::vector(&v16);
    int v14 = backtrace((void **)v16, (*((void *)&v16 + 1) - (void)v16) >> 3);
    std::vector<void *>::resize((char **)&v16, v14);
    *(_OWORD *)&v18[1] = v16;
    v18[3] = v17;
    long long v16 = 0uLL;
    std::logic_error v17 = 0;
    v18[0] = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return result;
}

void std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1>,void ()(unsigned int)>::destroy_deallocate(void *__p)
{
  int v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1>,void ()(unsigned int)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1>,void ()(unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1481278;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1F1481278;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1>,void ()(unsigned int)>::~__func(void *a1)
{
  *a1 = &unk_1F1481278;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_1>,void ()(unsigned int)>::~__func(void *a1)
{
  *a1 = &unk_1F1481278;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph9File_Task12create_procsERKNS_19Terminal_IdentifierERKN2CA17StreamDescriptionEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::operator()(AMCP::Log::Scope_Registry *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)a1 + 1);
  if (!*(void *)(v5 + 8))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    CFIndex v8 = **(NSObject ***)buf;
    if (*(void *)v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v41);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      AMCP::Terminal_Identifier_to_string(&__p, (const void **)(v5 + 16));
      mach_port_t v11 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)uint64_t v41 = 2080;
      *(void *)&v41[2] = "Graph_File_Task.cpp";
      __int16 v42 = 1024;
      int v43 = 79;
      __int16 v44 = 2080;
      *(void *)std::runtime_error v45 = "not (m_file != nullptr)";
      *(_WORD *)&v45[8] = 2080;
      *(void *)&unsigned char v45[10] = v11;
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s io_proc called on a file that does not exists: %s", buf, 0x2Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v39);
    __cxa_allocate_exception(0x40uLL);
    AMCP::Terminal_Identifier_to_string(&v31, (const void **)(v5 + 16));
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v12 = &v31;
    }
    else {
      char v12 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    caulk::make_string((caulk *)"io_proc called on a file that does not exists: %s", (uint64_t)&v32, v12);
    std::logic_error::logic_error(&v33, &v32);
    v33.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&__p, &v33);
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    int v38 = -1;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(void *)&v45[6] = "void AMCP::Graph::File_Task::io_proc(const IO_Proc_Cycle_Info &, const rt_safe_vector<DAL::Read"
                         "able_Range> &, const rt_safe_vector<DAL::Writable_Range> &)";
    *(void *)&unsigned char v45[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_File_Task.cpp";
    int v46 = 79;
    std::vector<void *>::vector(&v26);
    int v13 = backtrace((void **)v26, (*((void *)&v26 + 1) - (void)v26) >> 3);
    std::vector<void *>::resize((char **)&v26, v13);
    __int16 v28 = &unk_1F148AA90;
    long long v29 = v26;
    uint64_t v30 = v27;
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (a4[1] - *a4 != 88)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v14 = **(NSObject ***)buf;
    if (*(void *)v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v41);
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      std::string v15 = pthread_self();
      mach_port_t v16 = pthread_mach_thread_np(v15);
      AMCP::Terminal_Identifier_to_string(&__p, (const void **)(v5 + 16));
      std::logic_error v17 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v16;
      *(_WORD *)uint64_t v41 = 2080;
      *(void *)&v41[2] = "Graph_File_Task.cpp";
      __int16 v42 = 1024;
      int v43 = 80;
      __int16 v44 = 2080;
      *(void *)std::runtime_error v45 = "not (sources.size() == 1)";
      *(_WORD *)&v45[8] = 2080;
      *(void *)&unsigned char v45[10] = v17;
      _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Expecting only one input to a file writer node: %s", buf, 0x2Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v39);
    __cxa_allocate_exception(0x40uLL);
    AMCP::Terminal_Identifier_to_string(&v31, (const void **)(v5 + 16));
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v18 = &v31;
    }
    else {
      int v18 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    caulk::make_string((caulk *)"Expecting only one input to a file writer node: %s", (uint64_t)&v32, v18);
    std::logic_error::logic_error(&v33, &v32);
    v33.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&__p, &v33);
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    int v38 = -1;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(void *)&v45[6] = "void AMCP::Graph::File_Task::io_proc(const IO_Proc_Cycle_Info &, const rt_safe_vector<DAL::Read"
                         "able_Range> &, const rt_safe_vector<DAL::Writable_Range> &)";
    *(void *)&unsigned char v45[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_File_Task.cpp";
    int v46 = 80;
    std::vector<void *>::vector(&v26);
    int v19 = backtrace((void **)v26, (*((void *)&v26 + 1) - (void)v26) >> 3);
    std::vector<void *>::resize((char **)&v26, v19);
    __int16 v28 = &unk_1F148AA90;
    long long v29 = v26;
    uint64_t v30 = v27;
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (*a5 != a5[1])
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    std::string v20 = **(NSObject ***)buf;
    if (*(void *)v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v41);
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      std::string v21 = pthread_self();
      mach_port_t v22 = pthread_mach_thread_np(v21);
      AMCP::Terminal_Identifier_to_string(&__p, (const void **)(v5 + 16));
      uint64_t v23 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v22;
      *(_WORD *)uint64_t v41 = 2080;
      *(void *)&v41[2] = "Graph_File_Task.cpp";
      __int16 v42 = 1024;
      int v43 = 81;
      __int16 v44 = 2080;
      *(void *)std::runtime_error v45 = "not (dests.empty())";
      *(_WORD *)&v45[8] = 2080;
      *(void *)&unsigned char v45[10] = v23;
      _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Expecting no output from a file writer node: %s", buf, 0x2Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v39);
    __cxa_allocate_exception(0x40uLL);
    AMCP::Terminal_Identifier_to_string(&v31, (const void **)(v5 + 16));
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v24 = &v31;
    }
    else {
      uint64_t v24 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    caulk::make_string((caulk *)"Expecting no output from a file writer node: %s", (uint64_t)&v32, v24);
    std::logic_error::logic_error(&v33, &v32);
    v33.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&__p, &v33);
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    int v38 = -1;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(void *)&v45[6] = "void AMCP::Graph::File_Task::io_proc(const IO_Proc_Cycle_Info &, const rt_safe_vector<DAL::Read"
                         "able_Range> &, const rt_safe_vector<DAL::Writable_Range> &)";
    *(void *)&unsigned char v45[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_File_Task.cpp";
    int v46 = 81;
    std::vector<void *>::vector(&v26);
    int v25 = backtrace((void **)v26, (*((void *)&v26 + 1) - (void)v26) >> 3);
    std::vector<void *>::resize((char **)&v26, v25);
    __int16 v28 = &unk_1F148AA90;
    long long v29 = v26;
    uint64_t v30 = v27;
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  AMCP::DAL::create_timestamp_data((AMCP::DAL *)buf, (const AMCP::DAL::DAL_Time *)(a3 + 80), *(const AMCP::DAL::DAL_Timed_Segment **)(*a4 + 24), *(std::__shared_weak_count **)(*a4 + 32));
  (*(void (**)(void, uint8_t *, void))(***(void ***)(v5 + 8) + 16))(**(void **)(v5 + 8), buf, *a4);
  return std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)buf);
}

void sub_1BAEE17CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,char a33,uint64_t a34,void *a35)
{
  MEMORY[0x1C18590A0](v35);
  if (__p) {
    operator delete(__p);
  }
  if (a11) {
    operator delete(a11);
  }
  *(void *)(v37 - 128) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v37 - 120));
  MEMORY[0x1C18590A0](v37 - 144);
  a35 = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v36 + 24));
  MEMORY[0x1C18590A0](&a33);
  MEMORY[0x1C1859090](&a31);
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  __cxa_free_exception(v35);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v37 - 145));
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14811E8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1F14811E8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14811E8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0,std::allocator<AMCP::Graph::File_Task::create_procs(AMCP::Terminal_Identifier const&,CA::StreamDescription const&)::$_0>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14811E8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<AMCP::Graph::File_Task>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::Graph::File_Task>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1481148;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Graph::File_Task>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1481148;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AMCP::IOAudio1::Control::~Control(AMCP::IOAudio1::Control *this)
{
  AMCP::IOAudio1::Control::~Control(this);

  JUMPOUT(0x1C1859840);
}

{
  io_connect_t *v2;
  io_connect_t *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F1481378;
  AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*(void *)(*(void *)(*((void *)this + 1) + 16) + 32) + 16), *((_DWORD *)this + 4));
  *((_DWORD *)this + 4) = 0;
  uint64_t v2 = (io_connect_t *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    std::default_delete<applesauce::iokit::io_connect_holder>::operator()[abi:ne180100](v2);
  }
  AMCP::Utility::Mach_Port::reset((AMCP::IOAudio1::Control *)((char *)this + 32));
  AMCP::Utility::Mach_Port::~Mach_Port((AMCP::IOAudio1::Control *)((char *)this + 32));
  uint64_t v3 = (io_connect_t *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    std::default_delete<applesauce::iokit::io_connect_holder>::operator()[abi:ne180100](v3);
  }

  AMCP::IOAudio1::Device_Sub_Object::~Device_Sub_Object(this);
}

void *std::__function::__func<AMCP::IOAudio1::Control::Control(AMCP::IOAudio1::Device &,applesauce::iokit::io_object_holder const&)::$_0,std::allocator<AMCP::IOAudio1::Control::Control(AMCP::IOAudio1::Device &,applesauce::iokit::io_object_holder const&)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::Control::Control(AMCP::IOAudio1::Device &,applesauce::iokit::io_object_holder const&)::$_0,std::allocator<AMCP::IOAudio1::Control::Control(AMCP::IOAudio1::Device &,applesauce::iokit::io_object_holder const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio17ControlC1ERNS0_6DeviceERKN10applesauce5iokit16io_object_holderEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio1::Control::Control(AMCP::IOAudio1::Device &,applesauce::iokit::io_object_holder const&)::$_0,std::allocator<AMCP::IOAudio1::Control::Control(AMCP::IOAudio1::Device &,applesauce::iokit::io_object_holder const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 8);
  long long v28 = 0u;
  long long v29 = 0u;
  long long v27 = 0u;
  uint64_t v2 = (AMCP::Utility::Kernel_Error_Category *)AMCP::Utility::Mach_Port::receive_message(*(_DWORD *)(v1 + 32), 0x30u, (mach_msg_header_t *)&v27, (mach_msg_header_t *)1);
  int v3 = (int)v2;
  AMCP::Utility::Kernel_Error_Category::get(v2);
  if (v3) {
    return;
  }
  if (DWORD2(v28) != 1)
  {
    if (DWORD2(v28)) {
      return;
    }
    AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v31, *(std::__shared_mutex_base **)(*(void *)(*(void *)(*(void *)(v1 + 8) + 16) + 32) + 16), *(_DWORD *)(v1 + 16));
    uint64_t v4 = v31;
    if (!v31) {
      goto LABEL_14;
    }
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)uint64_t v36 = 0u;
    int v37 = 1065353216;
    io_registry_entry_t v5 = *(_DWORD *)(v1 + 20);
    if (v5)
    {
      CFMutableDictionaryRef properties = 0;
      uint64_t v6 = IORegistryEntryCreateCFProperties(v5, &properties, 0, 0);
      if (!v6)
      {
        applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, properties);
        unsigned int simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>((AMCP::Core::Core *)v4);
        AMCP::IOAudio1::update_control_value(simple_required, (uint64_t)__p, (io_object_t *)(v1 + 20), (CFDictionaryRef *)&cf);
        CFMutableDictionaryRef properties = (CFMutableDictionaryRef)(v4 + 12);
        LOBYTE(v34) = 1;
        caulk::concurrent::shared_spin_lock::lock(v4 + 12);
        CFIndex v8 = v36[0];
        if (v36[0])
        {
          do
          {
            std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)(v4 + 2), (unsigned int *)(v8[4] + 40), v8 + 4);
            CFIndex v8 = (void *)*v8;
          }
          while (v8);
        }
        std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&properties);
        CFMutableDictionaryRef properties = (CFMutableDictionaryRef)0x676C6F626F776E72;
        int v34 = 0;
        v4[1] = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>((AMCP::Core::Core *)v4, (const AMCP::Address *)&properties, &AMCP::k_object_id_unknown);
        AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*(void *)(*(void *)(*(void *)(v1 + 8) + 16) + 32) + 32), *(_DWORD *)(v1 + 16));
        if (cf) {
          CFRelease(cf);
        }
        std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((void *)v36[0]);
        int v9 = __p[0];
        __p[0] = 0;
        if (v9) {
          operator delete(v9);
        }
LABEL_14:
        if (v32) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v32);
        }
        return;
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
      std::string v21 = (void (*)(void *))MEMORY[0x1E4FBA220];
      long long v26 = std::system_category();
      MEMORY[0x1C1859250](exception, v6, v26, "Error on get_properties");
      mach_port_t v22 = (struct type_info *)MEMORY[0x1E4FBA2F0];
    }
    else
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::string v21 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
      std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
      mach_port_t v22 = (struct type_info *)MEMORY[0x1E4FBA338];
    }
    __cxa_throw(exception, v22, v21);
  }
  uint64_t v10 = *(void *)(*(void *)(v1 + 8) + 16);
  uint64_t v11 = *(void *)(v10 + 32);
  uint64_t v12 = *(void *)(v11 + 32);
  unsigned int v13 = *(_DWORD *)(v10 + 48);
  unsigned int v14 = *(_DWORD *)(v1 + 16);
  unsigned int v15 = *(_DWORD *)(v1 + 20);
  if (v15)
  {
    uint64_t v16 = IOObjectRetain(*(_DWORD *)(v1 + 20));
    if (v16)
    {
      uint64_t v23 = v16;
      uint64_t v24 = __cxa_allocate_exception(0x20uLL);
      int v25 = std::system_category();
      MEMORY[0x1C1859250](v24, v23, v25, "Error on Retain");
      __cxa_throw(v24, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
    uint64_t v10 = *(void *)(*(void *)(v1 + 8) + 16);
    uint64_t v11 = *(void *)(v10 + 32);
  }
  uint64_t v17 = *(void *)(v10 + 40);
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  v36[1] = 0;
  int v18 = operator new(0x20uLL);
  *(void *)&long long v19 = v11;
  *((void *)&v19 + 1) = v17;
  *int v18 = &unk_1F1481A98;
  v18[1] = __PAIR64__(v15, v14);
  *((_OWORD *)v18 + 1) = v19;
  v36[1] = v18;
  AMCP::Core::Conductor::enqueue_config_change(v12, v13, v14, 0, (uint64_t)__p);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](__p);
}

void sub_1BAEE1FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
  {
    __cxa_free_exception(v19);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,std::allocator<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,std::allocator<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio17Control28handle_range_changed_messageEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,std::allocator<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v19, *(std::__shared_mutex_base **)(*(void *)(a1 + 16) + 16), *(_DWORD *)(a1 + 8));
  uint64_t v2 = v19;
  if (!v19) {
    goto LABEL_10;
  }
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)uint64_t v17 = 0u;
  int v18 = 1065353216;
  io_registry_entry_t v5 = *(_DWORD *)(a1 + 12);
  uint64_t v4 = (io_object_t *)(a1 + 12);
  io_registry_entry_t v3 = v5;
  if (!v5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v11 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
    std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
    uint64_t v12 = (struct type_info *)MEMORY[0x1E4FBA338];
    goto LABEL_15;
  }
  CFMutableDictionaryRef properties = 0;
  uint64_t v6 = IORegistryEntryCreateCFProperties(v3, &properties, 0, 0);
  if (v6)
  {
    uint64_t v13 = v6;
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    uint64_t v11 = (void (*)(void *))MEMORY[0x1E4FBA220];
    unsigned int v14 = std::system_category();
    MEMORY[0x1C1859250](exception, v13, v14, "Error on get_properties");
    uint64_t v12 = (struct type_info *)MEMORY[0x1E4FBA2F0];
LABEL_15:
    __cxa_throw(exception, v12, v11);
  }
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, properties);
  unsigned int simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>((AMCP::Core::Core *)v2);
  AMCP::IOAudio1::update_control_value(simple_required, (uint64_t)__p, v4, (CFDictionaryRef *)&cf);
  AMCP::IOAudio1::update_control_range(simple_required, (uint64_t)__p, (CFDictionaryRef *)&cf);
  CFMutableDictionaryRef properties = (CFMutableDictionaryRef)(v2 + 12);
  LOBYTE(v22) = 1;
  caulk::concurrent::shared_spin_lock::lock(v2 + 12);
  CFIndex v8 = v17[0];
  if (v17[0])
  {
    do
    {
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)(v2 + 2), (unsigned int *)(v8[4] + 40), v8 + 4);
      CFIndex v8 = (void *)*v8;
    }
    while (v8);
  }
  std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&properties);
  CFMutableDictionaryRef properties = (CFMutableDictionaryRef)0x676C6F626F776E72;
  int v22 = 0;
  v2[1] = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>((AMCP::Core::Core *)v2, (const AMCP::Address *)&properties, &AMCP::k_object_id_unknown);
  if (cf) {
    CFRelease(cf);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((void *)v17[0]);
  int v9 = __p[0];
  __p[0] = 0;
  if (v9) {
    operator delete(v9);
  }
LABEL_10:
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
}

void sub_1BAEE2254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  __cxa_free_exception(v18);
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::~__hash_table((uint64_t)&a11);
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(a1);
}

void AMCP::IOAudio1::update_control_value(unsigned int a1, uint64_t a2, io_object_t *a3, CFDictionaryRef *a4)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  if (AMCP::is_base_of((AMCP *)0x6C65766C, a1))
  {
    if (*a4)
    {
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&v95, *a4, @"IOAudioLevelControlMinValue");
      if (!(void)v95) {
        goto LABEL_105;
      }
      int v8 = applesauce::CF::convert_to<int,0>((const __CFNumber *)v95);
      if ((void)v95) {
        CFRelease((CFTypeRef)v95);
      }
      if (!*a4) {
        goto LABEL_105;
      }
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&v95, *a4, @"IOAudioLevelControlMinDB");
      if (!(void)v95) {
        goto LABEL_105;
      }
      int v9 = applesauce::CF::convert_to<int,0>((const __CFNumber *)v95);
      if (v9 >= 0) {
        float v10 = 1.0;
      }
      else {
        float v10 = -1.0;
      }
      if ((void)v95) {
        CFRelease((CFTypeRef)v95);
      }
      if (!*a4) {
        goto LABEL_105;
      }
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&v95, *a4, @"IOAudioLevelControlMaxValue");
      if (!(void)v95) {
        goto LABEL_105;
      }
      int v11 = applesauce::CF::convert_to<int,0>((const __CFNumber *)v95);
      if ((void)v95) {
        CFRelease((CFTypeRef)v95);
      }
      if (*a4
        && (applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&v95, *a4, @"IOAudioLevelControlMaxDB"), (void)v95))
      {
        int v12 = applesauce::CF::convert_to<int,0>((const __CFNumber *)v95);
        if (v12 >= 0) {
          float v13 = 1.0;
        }
        else {
          float v13 = -1.0;
        }
        if ((void)v95) {
          CFRelease((CFTypeRef)v95);
        }
        *(float *)&long long v95 = v10
                       * (float)((float)((float)(unsigned __int16)(v9 * (int)v10) * 0.000015259)
                               + (float)(((v9 * (int)v10) >> 16) & 0x7FFF));
        DWORD1(v95) = v8;
        *((float *)&v95 + 2) = v13
                             * (float)((float)((float)(unsigned __int16)(v12 * (int)v13) * 0.000015259)
                                     + (float)(((v12 * (int)v13) >> 16) & 0x7FFF));
        HIDWORD(v95) = v11;
        AMCP::Utility::Level_Map::Level_Map(&__p, (uint64_t *)&v95, 2uLL);
        if (*a4)
        {
          applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&v95, *a4, @"IOAudioControlValue");
          if ((void)v95)
          {
            int v14 = applesauce::CF::convert_to<int,0>((const __CFNumber *)v95);
            if ((void)v95) {
              CFRelease((CFTypeRef)v95);
            }
            float v15 = AMCP::Utility::Level_Map::calculate_decibel_from_raw((AMCP::Utility::Level_Map *)&__p, v14);
            int v16 = *((_DWORD *)__p + 1);
            float v17 = 0.0;
            if (v14 > v16)
            {
              int v18 = *((_DWORD *)v86 - 1);
              float v17 = 1.0;
              if (v18 > v14) {
                float v17 = (float)(v14 - v16) / (float)(v18 - v16);
              }
            }
            long long v88 = 0uLL;
            uint64_t v89 = 0;
            std::vector<std::tuple<float,int>>::__init_with_size[abi:ne180100]<std::tuple<float,int>*,std::tuple<float,int>*>((char *)&v88, (uint64_t *)__p, v86, ((char *)v86 - (unsigned char *)__p) >> 3);
            LOWORD(v90) = v87;
            io_object_t v19 = *a3;
            io_object_t v91 = v19;
            if (v19 && (uint64_t v20 = IOObjectRetain(v19), v20))
            {
              exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
              long long v55 = (void (*)(void *))MEMORY[0x1E4FBA220];
              __int16 v57 = std::system_category();
              MEMORY[0x1C1859250](exception, v20, v57, "Error on Retain");
            }
            else
            {
              std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v83, 0, 1.5836601e190);
              uint64_t v21 = v83;
              unint64_t v22 = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>();
              float32x4_t v92 = &unk_1F14813B0;
              *(float *)&long long v93 = v17;
              long long v94 = &v92;
              long long v95 = 0u;
              long long v96 = 0u;
              unint64_t v97 = 0;
              std::__function::__value_func<float ()(void)>::__value_func[abi:ne180100]((uint64_t)&v95, (uint64_t)&v92);
              unint64_t v97 = AMCP::Implementation::In_Place_Storage<std::function<float ()(void)>>::dispatch;
              std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v21, v22, (AMCP *)&v95);
              if (v97) {
                v97(0, (uint64_t)&v95, 0, 0);
              }
              std::__function::__value_func<float ()(void)>::~__value_func[abi:ne180100](&v92);
              AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(v21);
              unint64_t v23 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
              long long v81 = v88;
              long long v88 = 0uLL;
              uint64_t v24 = v89;
              uint64_t v89 = 0;
              if (v19)
              {
                uint64_t v25 = IOObjectRetain(v19);
                if (v25)
                {
                  std::logic_error v58 = __cxa_allocate_exception(0x20uLL);
                  uint64_t v59 = std::system_category();
                  MEMORY[0x1C1859250](v58, v25, v59, "Error on Retain");
                  __cxa_throw(v58, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
                }
              }
              long long v94 = 0;
              long long v26 = (char *)operator new(0x30uLL);
              *(void *)long long v26 = &unk_1F1481430;
              *(_OWORD *)(v26 + 8) = v81;
              *((void *)v26 + 3) = v24;
              *((_DWORD *)v26 + 10) = v19;
              if (v19)
              {
                uint64_t v27 = IOObjectRetain(v19);
                if (v27)
                {
                  int v60 = __cxa_allocate_exception(0x20uLL);
                  uint64_t v61 = std::system_category();
                  MEMORY[0x1C1859250](v60, v27, v61, "Error on Retain");
                  __cxa_throw(v60, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
                }
              }
              long long v94 = (void **)v26;
              long long v95 = 0u;
              long long v96 = 0u;
              unint64_t v97 = 0;
              std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100]((uint64_t)&v95, (uint64_t)&v92);
              unint64_t v97 = AMCP::Implementation::In_Place_Storage<std::function<void ()(float const&)>>::dispatch;
              std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v21, v23, (AMCP *)&v95);
              if (v97) {
                v97(0, (uint64_t)&v95, 0, 0);
              }
              std::__function::__value_func<void ()(float const&)>::~__value_func[abi:ne180100](&v92);
              if (v19) {
                IOObjectRelease(v19);
              }
              AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(v21);
              std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v21 + 40), &v83);
              if (v84) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v84);
              }
              if (v19) {
                IOObjectRelease(v19);
              }
              long long v88 = 0uLL;
              uint64_t v89 = 0;
              std::vector<std::tuple<float,int>>::__init_with_size[abi:ne180100]<std::tuple<float,int>*,std::tuple<float,int>*>((char *)&v88, (uint64_t *)__p, v86, ((char *)v86 - (unsigned char *)__p) >> 3);
              LOWORD(v90) = v87;
              io_object_t v28 = *a3;
              io_object_t v91 = v28;
              if (!v28 || (uint64_t v29 = IOObjectRetain(v28), !v29))
              {
                std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v83, 0, 1.5836601e190);
                uint64_t v30 = v83;
                unint64_t v31 = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>();
                float32x4_t v92 = &unk_1F14814B0;
                *(float *)&long long v93 = v15;
                long long v94 = &v92;
                long long v95 = 0u;
                long long v96 = 0u;
                unint64_t v97 = 0;
                std::__function::__value_func<float ()(void)>::__value_func[abi:ne180100]((uint64_t)&v95, (uint64_t)&v92);
                unint64_t v97 = AMCP::Implementation::In_Place_Storage<std::function<float ()(void)>>::dispatch;
                std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v30, v31, (AMCP *)&v95);
                if (v97) {
                  v97(0, (uint64_t)&v95, 0, 0);
                }
                std::__function::__value_func<float ()(void)>::~__value_func[abi:ne180100](&v92);
                AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(v30);
                unint64_t v32 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
                long long v82 = v88;
                long long v88 = 0uLL;
                uint64_t v33 = v89;
                uint64_t v89 = 0;
                if (v28)
                {
                  uint64_t v34 = IOObjectRetain(v28);
                  if (v34)
                  {
                    int v63 = __cxa_allocate_exception(0x20uLL);
                    __int16 v64 = std::system_category();
                    MEMORY[0x1C1859250](v63, v34, v64, "Error on Retain");
                    __cxa_throw(v63, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
                  }
                }
                long long v94 = 0;
                uint64_t v35 = (char *)operator new(0x30uLL);
                *(void *)uint64_t v35 = &unk_1F1481530;
                *(_OWORD *)(v35 + 8) = v82;
                *((void *)v35 + 3) = v33;
                *((_DWORD *)v35 + 10) = v28;
                if (v28)
                {
                  uint64_t v36 = IOObjectRetain(v28);
                  if (v36)
                  {
                    uint64_t v65 = __cxa_allocate_exception(0x20uLL);
                    long long v66 = std::system_category();
                    MEMORY[0x1C1859250](v65, v36, v66, "Error on Retain");
                    __cxa_throw(v65, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
                  }
                }
                long long v94 = (void **)v35;
                long long v95 = 0u;
                long long v96 = 0u;
                unint64_t v97 = 0;
                std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100]((uint64_t)&v95, (uint64_t)&v92);
                unint64_t v97 = AMCP::Implementation::In_Place_Storage<std::function<void ()(float const&)>>::dispatch;
                std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v30, v32, (AMCP *)&v95);
                if (v97) {
                  v97(0, (uint64_t)&v95, 0, 0);
                }
                std::__function::__value_func<void ()(float const&)>::~__value_func[abi:ne180100](&v92);
                if (v28) {
                  IOObjectRelease(v28);
                }
                AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(v30);
                std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v30 + 40), &v83);
                if (v84) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v84);
                }
                if (v28) {
                  IOObjectRelease(v28);
                }
                if (__p)
                {
                  int v86 = (uint64_t *)__p;
                  operator delete(__p);
                }
                return;
              }
              exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
              long long v55 = (void (*)(void *))MEMORY[0x1E4FBA220];
              __int16 v62 = std::system_category();
              MEMORY[0x1C1859250](exception, v29, v62, "Error on Retain");
            }
            long long v56 = (struct type_info *)MEMORY[0x1E4FBA2F0];
LABEL_110:
            __cxa_throw(exception, v56, v55);
          }
        }
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        long long v55 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      else
      {
LABEL_105:
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        long long v55 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
    }
    else
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      long long v55 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    long long v56 = (struct type_info *)MEMORY[0x1E4FBA338];
    goto LABEL_110;
  }
  if (!AMCP::is_base_of((AMCP *)0x746F676C, a1))
  {
    if (!AMCP::is_base_of((AMCP *)0x736C6374, a1)) {
      return;
    }
    if (*a4)
    {
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&v95, *a4, @"IOAudioControlValue");
      if ((void)v95)
      {
        int v46 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v95);
        if ((void)v95) {
          CFRelease((CFTypeRef)v95);
        }
        io_object_t v38 = *a3;
        if (!v38 || (uint64_t v47 = IOObjectRetain(v38), !v47))
        {
          std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v92, 0, 1.58366012e190);
          uint64_t v48 = (uint64_t)v92;
          unint64_t v49 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
          *(void *)&long long v88 = &unk_1F14816B0;
          DWORD2(v88) = v46;
          int v90 = &v88;
          long long v95 = 0u;
          long long v96 = 0u;
          unint64_t v97 = 0;
          std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)&v95, (uint64_t)&v88);
          unint64_t v97 = AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
          std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v48, v49, (AMCP *)&v95);
          if (v97) {
            v97(0, (uint64_t)&v95, 0, 0);
          }
          std::__function::__value_func<std::vector<unsigned int> ()(void)>::~__value_func[abi:ne180100](&v88);
          AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(v48);
          unint64_t v50 = AMCP::Implementation::get_type_marker<std::function<void ()(std::vector<unsigned int> const&)>>();
          if (v38)
          {
            uint64_t v51 = IOObjectRetain(v38);
            if (v51)
            {
              int v77 = __cxa_allocate_exception(0x20uLL);
              long long v78 = std::system_category();
              MEMORY[0x1C1859250](v77, v51, v78, "Error on Retain");
              __cxa_throw(v77, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
            }
          }
          int v90 = 0;
          AudioObjectPropertyAddress v52 = (long long *)operator new(0x10uLL);
          *(void *)AudioObjectPropertyAddress v52 = &unk_1F1481730;
          *((_DWORD *)v52 + 2) = v38;
          if (v38)
          {
            uint64_t v53 = IOObjectRetain(v38);
            if (v53)
            {
              long long v79 = __cxa_allocate_exception(0x20uLL);
              uint64_t v80 = std::system_category();
              MEMORY[0x1C1859250](v79, v53, v80, "Error on Retain");
              __cxa_throw(v79, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
            }
          }
          int v90 = v52;
          long long v95 = 0u;
          long long v96 = 0u;
          unint64_t v97 = 0;
          std::__function::__value_func<void ()(std::vector<unsigned int> const&)>::__value_func[abi:ne180100]((uint64_t)&v95, (uint64_t)&v88);
          unint64_t v97 = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::vector<unsigned int> const&)>>::dispatch;
          std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v48, v50, (AMCP *)&v95);
          if (v97) {
            v97(0, (uint64_t)&v95, 0, 0);
          }
          std::__function::__value_func<void ()(std::vector<unsigned int> const&)>::~__value_func[abi:ne180100](&v88);
          if (v38) {
            IOObjectRelease(v38);
          }
          AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(v48);
          std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v48 + 40), &v92);
          if (v93) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v93);
          }
          if (v38) {
            goto LABEL_102;
          }
          return;
        }
        float64x2_t v73 = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
        __int16 v74 = (void (*)(void *))MEMORY[0x1E4FBA220];
        uint64_t v76 = std::system_category();
        MEMORY[0x1C1859250](v73, v47, v76, "Error on Retain");
        int v75 = (struct type_info *)MEMORY[0x1E4FBA2F0];
LABEL_125:
        __cxa_throw(v73, v75, v74);
      }
      float64x2_t v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      __int16 v74 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
      std::runtime_error::runtime_error(v73, "Could not construct");
    }
    else
    {
      float64x2_t v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      __int16 v74 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
      std::runtime_error::runtime_error(v73, "Could not construct");
    }
    int v75 = (struct type_info *)MEMORY[0x1E4FBA338];
    goto LABEL_125;
  }
  *(void *)&long long v95 = @"IOAudioControlValue";
  BOOL_frouint64_t m = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(a4, (const void **)&v95);
  io_object_t v38 = *a3;
  if (v38)
  {
    uint64_t v39 = IOObjectRetain(v38);
    if (v39)
    {
      int v67 = __cxa_allocate_exception(0x20uLL);
      uint64_t v68 = std::system_category();
      MEMORY[0x1C1859250](v67, v39, v68, "Error on Retain");
      __cxa_throw(v67, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v92, 0, 1.58366006e190);
  uint64_t v40 = (uint64_t)v92;
  unint64_t v41 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  *(void *)&long long v88 = &unk_1F14815B0;
  BYTE8(v88) = BOOL_from;
  int v90 = &v88;
  long long v95 = 0u;
  long long v96 = 0u;
  unint64_t v97 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v95, (uint64_t)&v88);
  unint64_t v97 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v40, v41, (AMCP *)&v95);
  if (v97) {
    v97(0, (uint64_t)&v95, 0, 0);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](&v88);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v40);
  unint64_t v42 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
  if (v38)
  {
    uint64_t v43 = IOObjectRetain(v38);
    if (v43)
    {
      long long v69 = __cxa_allocate_exception(0x20uLL);
      CFTypeRef v70 = std::system_category();
      MEMORY[0x1C1859250](v69, v43, v70, "Error on Retain");
      __cxa_throw(v69, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
  }
  int v90 = 0;
  __int16 v44 = (long long *)operator new(0x10uLL);
  *(void *)__int16 v44 = &unk_1F1481630;
  *((_DWORD *)v44 + 2) = v38;
  if (v38)
  {
    uint64_t v45 = IOObjectRetain(v38);
    if (v45)
    {
      int v71 = __cxa_allocate_exception(0x20uLL);
      uint64_t v72 = std::system_category();
      MEMORY[0x1C1859250](v71, v45, v72, "Error on Retain");
      __cxa_throw(v71, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
  }
  int v90 = v44;
  long long v95 = 0u;
  long long v96 = 0u;
  unint64_t v97 = 0;
  std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100]((uint64_t)&v95, (uint64_t)&v88);
  unint64_t v97 = AMCP::Implementation::In_Place_Storage<std::function<void ()(BOOL const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v40, v42, (AMCP *)&v95);
  if (v97) {
    v97(0, (uint64_t)&v95, 0, 0);
  }
  std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:ne180100](&v88);
  if (v38) {
    IOObjectRelease(v38);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(v40);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v40 + 40), &v92);
  if (v93) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v93);
  }
  if (v38) {
LABEL_102:
  }
    IOObjectRelease(v38);
}

void sub_1BAEE32EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a2)
  {
    __cxa_free_exception(v23);
    operator delete(v24);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::IOAudio1::update_control_range(unsigned int a1, uint64_t a2, CFDictionaryRef *a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (AMCP::is_base_of((AMCP *)0x6C65766C, a1))
  {
    cf[0] = @"IOAudioControlValueIsReadOnly";
    LOBYTE(v45) = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(a3, cf);
    AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (char *)&v45, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
    if (cf[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[1]);
    }
    if (!*a3) {
      goto LABEL_89;
    }
    applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, *a3, @"IOAudioLevelControlMinValue");
    if (!cf[0]) {
      goto LABEL_89;
    }
    unsigned int v6 = applesauce::CF::convert_to<int,0>((const __CFNumber *)cf[0]);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (!*a3) {
      goto LABEL_89;
    }
    applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, *a3, @"IOAudioLevelControlMinDB");
    if (!cf[0]) {
      goto LABEL_89;
    }
    int v7 = applesauce::CF::convert_to<int,0>((const __CFNumber *)cf[0]);
    if (v7 >= 0) {
      float v8 = 1.0;
    }
    else {
      float v8 = -1.0;
    }
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (!*a3) {
      goto LABEL_89;
    }
    applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, *a3, @"IOAudioLevelControlMaxValue");
    if (!cf[0]) {
      goto LABEL_89;
    }
    unsigned int v9 = applesauce::CF::convert_to<int,0>((const __CFNumber *)cf[0]);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (!*a3
      || (applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, *a3, @"IOAudioLevelControlMaxDB"), !cf[0]))
    {
LABEL_89:
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v10 = applesauce::CF::convert_to<int,0>((const __CFNumber *)cf[0]);
    if (v10 >= 0) {
      float v11 = 1.0;
    }
    else {
      float v11 = -1.0;
    }
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    *(float *)&unsigned int v12 = v8
                   * (float)((float)((float)(unsigned __int16)(v7 * (int)v8) * 0.000015259)
                           + (float)(((v7 * (int)v8) >> 16) & 0x7FFF));
    cf[0] = (CFTypeRef)__PAIR64__(v6, v12);
    *(float *)&unsigned int v13 = v11
                   * (float)((float)((float)(unsigned __int16)(v10 * (int)v11) * 0.000015259)
                           + (float)(((v10 * (int)v11) >> 16) & 0x7FFF));
    cf[1] = (CFTypeRef)__PAIR64__(v9, v13);
    AMCP::Utility::Level_Map::Level_Map(&__p, (uint64_t *)cf, 2uLL);
    *(double *)CFTypeRef cf = *(float *)&v12;
    *(double *)&cf[1] = *(float *)&v13;
    AMCP::Core::Operation_Utilities::make_typed_property<CA::ValueRange,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1}>((uint64_t *)&v45, 0, (long long *)cf, 1.5836601e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)v45 + 10, &v45);
    if (v46) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v46);
    }
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v37, 0, 1.5836601e190);
    int v14 = (unsigned int *)v37;
    theArray[0] = 0;
    theArray[1] = 0;
    uint64_t v35 = 0;
    std::vector<std::tuple<float,int>>::__init_with_size[abi:ne180100]<std::tuple<float,int>*,std::tuple<float,int>*>((char *)theArray, (uint64_t *)__p, v40, ((char *)v40 - (unsigned char *)__p) >> 3);
    __int16 v36 = v41;
    unint64_t v15 = AMCP::Implementation::get_type_marker<std::function<float ()(float)>>();
    long long v32 = *(_OWORD *)theArray;
    theArray[0] = 0;
    theArray[1] = 0;
    uint64_t v16 = v35;
    uint64_t v35 = 0;
    uint64_t v47 = 0;
    float v17 = (char *)operator new(0x28uLL);
    *(void *)float v17 = &unk_1F14817B0;
    *(_OWORD *)(v17 + 8) = v32;
    *((void *)v17 + 3) = v16;
    uint64_t v47 = v17;
    *(_OWORD *)CFTypeRef cf = 0u;
    long long v49 = 0u;
    unint64_t v50 = 0;
    std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)cf, (uint64_t)&v45);
    unint64_t v50 = AMCP::Implementation::In_Place_Storage<std::function<float ()(float)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v14, v15, (AMCP *)cf);
    if (v50) {
      v50(0, (uint64_t)cf, 0, 0);
    }
    std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](&v45);
    theArray[0] = 0;
    theArray[1] = 0;
    uint64_t v35 = 0;
    std::vector<std::tuple<float,int>>::__init_with_size[abi:ne180100]<std::tuple<float,int>*,std::tuple<float,int>*>((char *)theArray, (uint64_t *)__p, v40, ((char *)v40 - (unsigned char *)__p) >> 3);
    __int16 v36 = v41;
    unint64_t v18 = AMCP::Implementation::get_type_marker<std::function<float ()(float,BOOL)>>();
    long long v33 = *(_OWORD *)theArray;
    theArray[0] = 0;
    theArray[1] = 0;
    uint64_t v19 = v35;
    uint64_t v35 = 0;
    uint64_t v47 = 0;
    uint64_t v20 = (char *)operator new(0x28uLL);
    *(void *)uint64_t v20 = &unk_1F1481830;
    *(_OWORD *)(v20 + 8) = v33;
    *((void *)v20 + 3) = v19;
    uint64_t v47 = v20;
    *(_OWORD *)CFTypeRef cf = 0u;
    long long v49 = 0u;
    unint64_t v50 = 0;
    std::__function::__value_func<float ()(float,BOOL)>::__value_func[abi:ne180100]((uint64_t)cf, (uint64_t)&v45);
    unint64_t v50 = AMCP::Implementation::In_Place_Storage<std::function<float ()(float,BOOL)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v14, v18, (AMCP *)cf);
    if (v50) {
      v50(0, (uint64_t)cf, 0, 0);
    }
    std::__function::__value_func<float ()(float,BOOL)>::~__value_func[abi:ne180100](&v45);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, v14 + 10, &v37);
    if (v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v38);
    }
    if (__p)
    {
      uint64_t v40 = (uint64_t *)__p;
      operator delete(__p);
    }
    return;
  }
  if (AMCP::is_base_of((AMCP *)0x746F676C, a1))
  {
    cf[0] = @"IOAudioControlValueIsReadOnly";
    LOBYTE(v45) = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(a3, cf);
    AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (char *)&v45, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
    if (cf[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[1]);
    }
    return;
  }
  if (!AMCP::is_base_of((AMCP *)0x736C6374, a1)) {
    return;
  }
  cf[0] = @"IOAudioControlValueIsReadOnly";
  LOBYTE(v45) = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(a3, cf);
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (char *)&v45, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
  if (cf[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[1]);
  }
  LOBYTE(v45) = 0;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (char *)&v45, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
  if (cf[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[1]);
  }
  cf[0] = 0;
  cf[1] = 0;
  *(void *)&long long v49 = 0;
  if (!*a3)
  {
    unint64_t v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v31, "Could not construct");
LABEL_92:
    __cxa_throw(v31, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const*>((applesauce::CF::ArrayRef *)theArray, *a3, @"IOAudioSelectorControlAvailableSelections");
  CFArrayRef v21 = theArray[0];
  if (theArray[0])
  {
    CFIndex Count = CFArrayGetCount(theArray[0]);
    CFIndex v23 = Count;
    CFArrayRef v24 = theArray[0];
    if (theArray[0])
    {
      CFIndex v25 = CFArrayGetCount(theArray[0]);
      if (!v23) {
        goto LABEL_80;
      }
      goto LABEL_50;
    }
    CFIndex v25 = 0;
    if (Count)
    {
LABEL_50:
      unint64_t v26 = 0;
      while (1)
      {
        if (v21 == v24 && v25 == v26) {
          goto LABEL_80;
        }
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v37, v21, v26);
        int v44 = 0;
        if (!v37) {
          goto LABEL_90;
        }
        applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&v45, (CFDictionaryRef)v37, @"IOAudioSelectorControlSelectionValue");
        if (!v45) {
          goto LABEL_90;
        }
        int v27 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v45);
        if (v45) {
          CFRelease(v45);
        }
        int v44 = v27;
        if (!v37)
        {
LABEL_90:
          unint64_t v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v31, "Could not construct");
          goto LABEL_92;
        }
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v45, (CFDictionaryRef)v37, @"IOAudioSelectorControlTransportValue");
        if ((_BYTE)v46) {
          break;
        }
        if (!v37) {
          goto LABEL_90;
        }
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&__p, (CFDictionaryRef)v37, @"IOAudioSelectorControlClockSourceKey");
        if (v46 == v40)
        {
          if ((_BYTE)v46)
          {
            io_object_t v28 = (void *)v45;
            CFTypeRef v45 = __p;
            std::string __p = v28;
          }
        }
        else if ((_BYTE)v46)
        {
          std::__optional_destruct_base<applesauce::CF::NumberRef,false>::reset[abi:ne180100]((uint64_t)&v45);
        }
        else
        {
          CFTypeRef v45 = __p;
          std::string __p = 0;
          LOBYTE(v46) = 1;
        }
        std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
        int v43 = 0;
        if ((_BYTE)v46) {
          goto LABEL_68;
        }
        int v29 = 0;
LABEL_70:
        int v43 = v29;
        if (!v37) {
          goto LABEL_90;
        }
        CFTypeRef v42 = 0;
        applesauce::CF::at_or<applesauce::CF::StringRef,__CFString const*>(&__p, (const __CFDictionary *)v37, @"IOAudioSelectorControlSelectionDescriptionKey", &v42);
        if (v42) {
          CFRelease(v42);
        }
        std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::emplace_back<unsigned int &,unsigned int &,applesauce::CF::StringRef&>((uint64_t *)cf, &v44, &v43, (CFTypeRef *)&__p);
        if (__p) {
          CFRelease(__p);
        }
        std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v45);
        if (v37) {
          CFRelease(v37);
        }
        if (v23 == ++v26) {
          goto LABEL_80;
        }
      }
      int v43 = 0;
LABEL_68:
      if (!v45) {
        goto LABEL_90;
      }
      int v29 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v45);
      goto LABEL_70;
    }
  }
LABEL_80:
  std::string __p = (void *)0x676C6F6273636169;
  LODWORD(v40) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>((uint64_t *)&v45, (uint64_t)&__p, (uint64_t)cf[0], (uint64_t)cf[1]);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)v45 + 10, &v45);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (theArray[0]) {
    CFRelease(theArray[0]);
  }
  CFTypeRef v45 = cf;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
}

void sub_1BAEE3E9C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAEE407C(void *a1)
{
  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

void *AMCP::Utility::Level_Map::Level_Map(void *a1, uint64_t *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<void const*>::__vallocate[abi:ne180100](a1, a3);
    unsigned int v6 = (char *)a1[1];
    uint64_t v7 = 8 * a3;
    do
    {
      uint64_t v8 = *a2++;
      *(void *)unsigned int v6 = v8;
      v6 += 8;
      v7 -= 8;
    }
    while (v7);
    a1[1] = v6;
    unsigned int v9 = (_DWORD *)*a1;
  }
  else
  {
    unsigned int v9 = 0;
    unsigned int v6 = 0;
  }
  if ((unint64_t)(v6 - (char *)v9) < 0x10) {
LABEL_12:
  }
    __assert_rtn("Level_Map", "Level_Map.h", 49, "data_is_valid()");
  float v11 = *(float *)v9;
  int v10 = (float *)(v9 + 2);
  float v12 = v11;
  do
  {
    float v13 = v12;
    float v12 = *v10;
    if (v13 >= *v10 || *((_DWORD *)v10 - 1) >= *((_DWORD *)v10 + 1)) {
      goto LABEL_12;
    }
    v10 += 2;
  }
  while (v10 != (float *)v6);
  return a1;
}

void sub_1BAEE417C(_Unwind_Exception *exception_object)
{
  io_registry_entry_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Core::Operation_Utilities::make_typed_property<CA::ValueRange,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1}>(uint64_t *a1, int a2, long long *a3, double a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, a2, a4);
  uint64_t v6 = *a1;
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<CA::ValueRange ()(void)>>();
  int v10 = 0;
  float v11 = &unk_1F1483220;
  long long v12 = *a3;
  float v13 = &v11;
  memset(v9, 0, sizeof(v9));
  std::__function::__value_func<CA::ValueRange ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, (uint64_t)&v11);
  int v10 = AMCP::Implementation::In_Place_Storage<std::function<CA::ValueRange ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v9);
  if (v10) {
    v10(0, (uint64_t)v9, 0, 0);
  }
  std::__function::__value_func<CA::ValueRange ()(void)>::~__value_func[abi:ne180100](&v11);
  return AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(v6);
}

void sub_1BAEE4298(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

char *std::vector<std::tuple<float,int>>::__init_with_size[abi:ne180100]<std::tuple<float,int>*,std::tuple<float,int>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<void const*>::__vallocate[abi:ne180100](result, a4);
    unint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1BAEE4320(_Unwind_Exception *exception_object)
{
  io_registry_entry_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

applesauce::CF::ArrayRef *applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const*>(applesauce::CF::ArrayRef *a1, CFDictionaryRef theDict, const void *a3)
{
  uint64_t v4 = applesauce::CF::details::at_key<__CFString const*>(theDict, a3);
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  io_registry_entry_t v5 = v4;
  CFRetain(v4);

  return applesauce::CF::ArrayRef::ArrayRef(a1, v5);
}

void sub_1BAEE43BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(&v9, a3, a4, (a4 - a3) >> 4);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, *(_DWORD *)(a2 + 8), *(double *)a2);
  uint64_t v6 = *a1;
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>();
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(&v12, v9, v10, (v10 - v9) >> 4);
  uint64_t v19 = 0;
  uint64_t v8 = operator new(0x20uLL);
  *uint64_t v8 = &unk_1F1483A28;
  void v8[2] = 0;
  void v8[3] = 0;
  v8[1] = 0;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(v8 + 1, v12, v13, (v13 - v12) >> 4);
  uint64_t v19 = v8;
  memset(v15, 0, sizeof(v15));
  uint64_t v16 = 0;
  std::__function::__value_func<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v18);
  uint64_t v16 = AMCP::Implementation::In_Place_Storage<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v15);
  if (v16) {
    v16(0, (uint64_t)v15, 0, 0);
  }
  std::__function::__value_func<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::~__value_func[abi:ne180100](v18);
  float v17 = (void **)&v12;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](&v17);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(v6);
  *(void *)&v15[0] = &v9;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)v15);
}

void sub_1BAEE455C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities22make_constant_propertyINSt3__16vectorINS3_5tupleIJjjN10applesauce2CF9StringRefEEEENS3_9allocatorIS9_EEEEEENS3_10shared_ptrINS0_9OperationEEERKNS_7AddressERKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(a2, *(void *)(a1 + 8), *(void *)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::destroy_deallocate(void **a1)
{
  uint64_t v2 = a1 + 1;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](&v2);

  operator delete(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1483A28;
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  return std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(a2 + 1, *(void *)(a1 + 8), *(void *)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = &unk_1F1483A28;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(v2 + 1, *(void *)(a1 + 8), *(void *)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4);
  return v2;
}

void sub_1BAEE473C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1483A28;
  uint64_t v1 = (void **)(a1 + 8);
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](&v1);

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> const&)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1483A28;
  io_registry_entry_t v3 = (void **)(a1 + 8);
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void *std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1>,float ()(float,BOOL)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1>,float ()(float,BOOL)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio1L27update_volume_control_rangeERNS_4Core13Operation_SetERKN10applesauce2CF13DictionaryRefEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

float std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1>,float ()(float,BOOL)>::operator()(uint64_t a1, float *a2)
{
  return AMCP::Utility::Level_Map::calculate_scalar_from_decibel((float **)(a1 + 8), *a2);
}

float AMCP::Utility::Level_Map::calculate_scalar_from_decibel(float **this, float a2)
{
  float v2 = 0.0;
  if (**this < a2)
  {
    if (*(this[1] - 2) <= a2)
    {
      return 1.0;
    }
    else
    {
      int v4 = AMCP::Utility::Level_Map::calculate_raw_from_decibel(this, a2);
      int v5 = *((_DWORD *)*this + 1);
      if (v4 > v5)
      {
        int v6 = *((_DWORD *)this[1] - 1);
        float v2 = 1.0;
        if (v6 > v4) {
          return (float)(v4 - v5) / (float)(v6 - v5);
        }
      }
    }
  }
  return v2;
}

uint64_t AMCP::Utility::Level_Map::calculate_raw_from_decibel(float **this, float a2)
{
  float v2 = *this;
  if (**this >= a2) {
    return *((unsigned int *)v2 + 1);
  }
  io_registry_entry_t v3 = this[1];
  if (*(v3 - 2) > a2)
  {
    if (v3 == v2) {
      goto LABEL_17;
    }
    unint64_t v4 = ((char *)v3 - (char *)v2) >> 3;
    int v5 = *this;
    do
    {
      unint64_t v6 = v4 >> 1;
      unint64_t v7 = &v5[2 * (v4 >> 1)];
      float v9 = *v7;
      uint64_t v8 = v7 + 2;
      v4 += ~(v4 >> 1);
      if (v9 < a2) {
        int v5 = v8;
      }
      else {
        unint64_t v4 = v6;
      }
    }
    while (v4);
    if (v3 == v5)
    {
LABEL_17:
      uint64_t v11 = "search_result != m_map.end()";
      int v12 = 261;
    }
    else
    {
      if (v2 != v5) {
        return (*((_DWORD *)v5 - 1)
      }
                            + (int)(float)((float)((float)(a2 - *(v5 - 2)) / (float)(*v5 - *(v5 - 2)))
                                         * (float)(*((_DWORD *)v5 + 1) - *((_DWORD *)v5 - 1))));
      uint64_t v11 = "search_result != m_map.begin()";
      int v12 = 265;
    }
    __assert_rtn("find_span_for_decibel", "Level_Map.h", v12, v11);
  }
  return *((unsigned int *)v3 - 1);
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1>,float ()(float,BOOL)>::destroy_deallocate(void *__p)
{
  float v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1>,float ()(float,BOOL)>::destroy(uint64_t a1)
{
  float v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

char *std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1>,float ()(float,BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1481830;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t result = std::vector<std::tuple<float,int>>::__init_with_size[abi:ne180100]<std::tuple<float,int>*,std::tuple<float,int>*>((char *)(a2 + 8), *(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
  *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 32);
  return result;
}

void *std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1>,float ()(float,BOOL)>::__clone(uint64_t a1)
{
  float v2 = operator new(0x28uLL);
  *(void *)float v2 = &unk_1F1481830;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 1) = 0;
  std::vector<std::tuple<float,int>>::__init_with_size[abi:ne180100]<std::tuple<float,int>*,std::tuple<float,int>*>((char *)v2 + 8, *(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
  *((_WORD *)v2 + 16) = *(_WORD *)(a1 + 32);
  return v2;
}

void sub_1BAEE4B28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1>,float ()(float,BOOL)>::~__func(void *a1)
{
  *a1 = &unk_1F1481830;
  float v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_1>,float ()(float,BOOL)>::~__func(void *a1)
{
  *a1 = &unk_1F1481830;
  float v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0>,float ()(float)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio1L27update_volume_control_rangeERNS_4Core13Operation_SetERKN10applesauce2CF13DictionaryRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

float std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  return AMCP::Utility::Level_Map::calculate_decibel_from_raw((AMCP::Utility::Level_Map *)(a1 + 8), *(_DWORD *)(*(void *)(a1 + 8) + 4)+ (int)(float)(fmaxf(fminf(*a2, 1.0), 0.0)* (float)(*(_DWORD *)(*(void *)(a1 + 16) - 4) - *(_DWORD *)(*(void *)(a1 + 8) + 4))));
}

float AMCP::Utility::Level_Map::calculate_decibel_from_raw(AMCP::Utility::Level_Map *this, int a2)
{
  uint64_t v2 = *(void *)this;
  if (*(_DWORD *)(*(void *)this + 4) >= a2) {
    return *(float *)v2;
  }
  uint64_t v3 = *((void *)this + 1);
  if (*(_DWORD *)(v3 - 4) > a2)
  {
    if (v3 == v2) {
      goto LABEL_16;
    }
    unint64_t v4 = (v3 - v2) >> 3;
    uint64_t v5 = *(void *)this;
    do
    {
      unint64_t v6 = v4 >> 1;
      uint64_t v7 = v5 + 8 * (v4 >> 1);
      int v8 = *(_DWORD *)(v7 + 4);
      uint64_t v9 = v7 + 8;
      v4 += ~(v4 >> 1);
      if (v8 < a2) {
        uint64_t v5 = v9;
      }
      else {
        unint64_t v4 = v6;
      }
    }
    while (v4);
    if (v3 == v5)
    {
LABEL_16:
      uint64_t v11 = "search_result != m_map.end()";
      int v12 = 238;
    }
    else
    {
      if (v2 != v5) {
        return *(float *)(v5 - 8)
      }
             + (float)((float)((float)(a2 - *(_DWORD *)(v5 - 4)) / (float)(*(_DWORD *)(v5 + 4) - *(_DWORD *)(v5 - 4)))
                     * (float)(*(float *)v5 - *(float *)(v5 - 8)));
      uint64_t v11 = "search_result != m_map.begin()";
      int v12 = 242;
    }
    __assert_rtn("find_span_for_raw", "Level_Map.h", v12, v11);
  }
  return *(float *)(v3 - 8);
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0>,float ()(float)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0>,float ()(float)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

char *std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0>,float ()(float)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14817B0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t result = std::vector<std::tuple<float,int>>::__init_with_size[abi:ne180100]<std::tuple<float,int>*,std::tuple<float,int>*>((char *)(a2 + 8), *(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
  *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 32);
  return result;
}

void *std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0>,float ()(float)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F14817B0;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 1) = 0;
  std::vector<std::tuple<float,int>>::__init_with_size[abi:ne180100]<std::tuple<float,int>*,std::tuple<float,int>*>((char *)v2 + 8, *(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
  *((_WORD *)v2 + 16) = *(_WORD *)(a1 + 32);
  return v2;
}

void sub_1BAEE4EA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0>,float ()(float)>::~__func(void *a1)
{
  *a1 = &unk_1F14817B0;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_range(AMCP::Core::Operation_Set &,applesauce::CF::DictionaryRef const&)::$_0>,float ()(float)>::~__func(void *a1)
{
  *a1 = &unk_1F14817B0;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1}>,CA::ValueRange ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1}>,CA::ValueRange ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities22make_constant_propertyIN2CA10ValueRangeEEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1}>,CA::ValueRange ()(void)>::operator()(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

__n128 std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1}>,CA::ValueRange ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1483220;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1}>,CA::ValueRange ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F1483220;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1}>,CA::ValueRange ()(void)>::~__func()
{
}

void *std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(std::vector<unsigned int> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(std::vector<unsigned int> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio1L29update_selector_control_valueERNS_4Core13Operation_SetERKN10applesauce5iokit16io_object_holderERKNS4_2CF13DictionaryRefEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(std::vector<unsigned int> const&)>::operator()(uint64_t a1, int **a2)
{
  if (*a2 == a2[1]) {
    return;
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
    goto LABEL_9;
  }
  CFStringRef v4 = CFStringCreateWithBytes(0, (const UInt8 *)"IOAudioControlValue", 19, 0x8000100u, 0);
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_9:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v5 = v4;
  int valuePtr = **a2;
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFNumberRef v7 = v6;
  if (!v6)
  {
    uint64_t v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v9, "Could not construct");
    __cxa_throw(v9, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v6);
  CFNumberRef v10 = v7;
  applesauce::iokit::io_object_proxy::set_properties(*(_DWORD *)(a1 + 8), v5, (const void **)&v10);
  CFRelease(v7);
  CFRelease(v7);
  CFRelease(v5);
}

void sub_1BAEE51F8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(std::vector<unsigned int> const&)>::destroy_deallocate(unsigned int *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(std::vector<unsigned int> const&)>::destroy[abi:ne180100](a1[2]);

  operator delete(a1);
}

uint64_t std::__function::__alloc_func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(std::vector<unsigned int> const&)>::destroy[abi:ne180100](uint64_t result)
{
  if (result) {
    return IOObjectRelease(result);
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(std::vector<unsigned int> const&)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(std::vector<unsigned int> const&)>::destroy[abi:ne180100](*(unsigned int *)(a1 + 8));
}

io_object_t *std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(std::vector<unsigned int> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1481730;
  return std::__compressed_pair_elem<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1 const&,0ul>((io_object_t *)(a2 + 8), (io_object_t *)(a1 + 8));
}

io_object_t *std::__compressed_pair_elem<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1 const&,0ul>(io_object_t *a1, io_object_t *a2)
{
  io_object_t v3 = *a2;
  *a1 = *a2;
  if (v3)
  {
    uint64_t v4 = IOObjectRetain(v3);
    if (v4)
    {
      uint64_t v6 = v4;
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      int v8 = std::system_category();
      MEMORY[0x1C1859250](exception, v6, v8, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
  }
  return a1;
}

void sub_1BAEE537C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

io_object_t *std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(std::vector<unsigned int> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = (io_object_t *)(a1 + 8);
  uint64_t v2 = (io_object_t *)operator new(0x10uLL);
  *(void *)uint64_t v2 = &unk_1F1481730;
  std::__compressed_pair_elem<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1 const&,0ul>(v2 + 2, v1);
  return v2;
}

void sub_1BAEE53E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(std::vector<unsigned int> const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1481730;
  io_object_t v1 = *(_DWORD *)(a1 + 8);
  if (v1) {
    IOObjectRelease(v1);
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(std::vector<unsigned int> const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1481730;
  io_object_t v2 = *(_DWORD *)(a1 + 8);
  if (v2) {
    IOObjectRelease(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,std::vector<unsigned int> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,std::vector<unsigned int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio1L29update_selector_control_valueERNS_4Core13Operation_SetERKN10applesauce5iokit16io_object_holderERKNS4_2CF13DictionaryRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_DWORD *std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,std::vector<unsigned int> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 8);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t v4 = operator new(4uLL);
  *a2 = v4;
  _DWORD *v4 = v3;
  __n128 result = v4 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,std::vector<unsigned int> ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14816B0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,std::vector<unsigned int> ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14816B0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void std::__function::__func<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_selector_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,std::vector<unsigned int> ()(void)>::~__func()
{
}

void *std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(BOOL const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(BOOL const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio1L28update_BOOLean_control_valueERNS_4Core13Operation_SetERKN10applesauce5iokit16io_object_holderERKNS4_2CF13DictionaryRefEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(BOOL const&)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
    goto LABEL_7;
  }
  CFStringRef v4 = CFStringCreateWithBytes(0, (const UInt8 *)"IOAudioControlValue", 19, 0x8000100u, 0);
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v5 = v4;
  int valuePtr = *a2;
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFNumberRef v7 = v6;
  if (!v6)
  {
    uint64_t v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v9, "Could not construct");
    __cxa_throw(v9, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v6);
  CFNumberRef v10 = v7;
  applesauce::iokit::io_object_proxy::set_properties(*(_DWORD *)(a1 + 8), v5, (const void **)&v10);
  CFRelease(v7);
  CFRelease(v7);
  CFRelease(v5);
}

void sub_1BAEE5764(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(BOOL const&)>::destroy_deallocate(unsigned int *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(BOOL const&)>::destroy[abi:ne180100](a1[2]);

  operator delete(a1);
}

uint64_t std::__function::__alloc_func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(BOOL const&)>::destroy[abi:ne180100](uint64_t result)
{
  if (result) {
    return IOObjectRelease(result);
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(BOOL const&)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(BOOL const&)>::destroy[abi:ne180100](*(unsigned int *)(a1 + 8));
}

io_object_t *std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(BOOL const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1481630;
  return std::__compressed_pair_elem<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1 const&,0ul>((io_object_t *)(a2 + 8), (io_object_t *)(a1 + 8));
}

io_object_t *std::__compressed_pair_elem<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1 const&,0ul>(io_object_t *a1, io_object_t *a2)
{
  io_object_t v3 = *a2;
  *a1 = *a2;
  if (v3)
  {
    uint64_t v4 = IOObjectRetain(v3);
    if (v4)
    {
      uint64_t v6 = v4;
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      int v8 = std::system_category();
      MEMORY[0x1C1859250](exception, v6, v8, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
  }
  return a1;
}

void sub_1BAEE58E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

io_object_t *std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(BOOL const&)>::__clone(uint64_t a1)
{
  io_object_t v1 = (io_object_t *)(a1 + 8);
  io_object_t v2 = (io_object_t *)operator new(0x10uLL);
  *(void *)io_object_t v2 = &unk_1F1481630;
  std::__compressed_pair_elem<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1 const&,0ul>(v2 + 2, v1);
  return v2;
}

void sub_1BAEE5950(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(BOOL const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1481630;
  io_object_t v1 = *(_DWORD *)(a1 + 8);
  if (v1) {
    IOObjectRelease(v1);
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(BOOL const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1481630;
  io_object_t v2 = *(_DWORD *)(a1 + 8);
  if (v2) {
    IOObjectRelease(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,BOOL ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio1L28update_BOOLean_control_valueERNS_4Core13Operation_SetERKN10applesauce5iokit16io_object_holderERKNS4_2CF13DictionaryRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,BOOL ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14815B0;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

unsigned char *std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14815B0;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

void std::__function::__func<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_BOOLean_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,BOOL ()(void)>::~__func()
{
}

void *std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3>,void ()(float const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3>,void ()(float const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio1L27update_volume_control_valueERNS_4Core13Operation_SetERKN10applesauce5iokit16io_object_holderERKNS4_2CF13DictionaryRefEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3>,void ()(float const&)>::operator()(uint64_t a1, float *a2)
{
  int v3 = AMCP::Utility::Level_Map::calculate_raw_from_decibel((float **)(a1 + 8), *a2);
  if (!*(_DWORD *)(a1 + 40))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
    goto LABEL_7;
  }
  int v4 = v3;
  CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)"IOAudioControlValue", 19, 0x8000100u, 0);
  if (!v5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v6 = v5;
  int valuePtr = v4;
  CFNumberRef v7 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFNumberRef v8 = v7;
  if (!v7)
  {
    CFNumberRef v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Could not construct");
    __cxa_throw(v10, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v7);
  CFNumberRef v11 = v8;
  applesauce::iokit::io_object_proxy::set_properties(*(_DWORD *)(a1 + 40), v6, (const void **)&v11);
  CFRelease(v8);
  CFRelease(v8);
  CFRelease(v6);
}

void sub_1BAEE5CA0(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3>,void ()(float const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3>,void ()(float const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3>,void ()(float const&)>::destroy[abi:ne180100](uint64_t a1)
{
  io_object_t v2 = *(_DWORD *)(a1 + 32);
  if (v2) {
    IOObjectRelease(v2);
  }
  int v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3>,void ()(float const&)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3>,void ()(float const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1481530;
  return std::__compressed_pair_elem<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3 const&,0ul>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<std::tuple<float,int>>::__init_with_size[abi:ne180100]<std::tuple<float,int>*,std::tuple<float,int>*>((char *)a1, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  io_object_t v4 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 32) = v4;
  if (v4)
  {
    uint64_t v5 = IOObjectRetain(v4);
    if (v5)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      CFNumberRef v8 = std::system_category();
      MEMORY[0x1C1859250](exception, v5, v8, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
  }
  return a1;
}

void sub_1BAEE5E90(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  io_object_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3>,void ()(float const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  io_object_t v2 = operator new(0x30uLL);
  void *v2 = &unk_1F1481530;
  std::__compressed_pair_elem<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BAEE5F10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3>,void ()(float const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1481530;
  io_object_t v2 = *(_DWORD *)(a1 + 40);
  if (v2) {
    IOObjectRelease(v2);
  }
  int v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_3>,void ()(float const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1481530;
  io_object_t v2 = *(_DWORD *)(a1 + 40);
  if (v2) {
    IOObjectRelease(v2);
  }
  int v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return a1;
}

void *std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_2,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_2>,float ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_2,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_2>,float ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio1L27update_volume_control_valueERNS_4Core13Operation_SetERKN10applesauce5iokit16io_object_holderERKNS4_2CF13DictionaryRefEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

float std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_2,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_2>,float ()(void)>::operator()(uint64_t a1)
{
  return *(float *)(a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_2,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_2>,float ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14814B0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_2,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_2>,float ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14814B0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_2,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_2>,float ()(void)>::~__func()
{
}

void *std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(float const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(float const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio1L27update_volume_control_valueERNS_4Core13Operation_SetERKN10applesauce5iokit16io_object_holderERKNS4_2CF13DictionaryRefEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(float const&)>::operator()(uint64_t a1, float *a2)
{
  if (!*(_DWORD *)(a1 + 40))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
    goto LABEL_7;
  }
  float v3 = *a2;
  int v4 = *(_DWORD *)(*(void *)(a1 + 16) - 4);
  int v5 = *(_DWORD *)(*(void *)(a1 + 8) + 4);
  CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)"IOAudioControlValue", 19, 0x8000100u, 0);
  if (!v6)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v7 = v6;
  int valuePtr = v5 + (int)(float)(fmaxf(fminf(v3, 1.0), 0.0) * (float)(v4 - v5));
  CFNumberRef v8 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFNumberRef v9 = v8;
  if (!v8)
  {
    CFNumberRef v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
    __cxa_throw(v11, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v8);
  CFNumberRef v12 = v9;
  applesauce::iokit::io_object_proxy::set_properties(*(_DWORD *)(a1 + 40), v7, (const void **)&v12);
  CFRelease(v9);
  CFRelease(v9);
  CFRelease(v7);
}

void sub_1BAEE62AC(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(float const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(float const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(float const&)>::destroy[abi:ne180100](uint64_t a1)
{
  io_object_t v2 = *(_DWORD *)(a1 + 32);
  if (v2) {
    IOObjectRelease(v2);
  }
  float v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(float const&)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(float const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1481430;
  return std::__compressed_pair_elem<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<std::tuple<float,int>>::__init_with_size[abi:ne180100]<std::tuple<float,int>*,std::tuple<float,int>*>((char *)a1, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  io_object_t v4 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 32) = v4;
  if (v4)
  {
    uint64_t v5 = IOObjectRetain(v4);
    if (v5)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      CFNumberRef v8 = std::system_category();
      MEMORY[0x1C1859250](exception, v5, v8, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
  }
  return a1;
}

void sub_1BAEE649C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  io_object_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(float const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  io_object_t v2 = operator new(0x30uLL);
  void *v2 = &unk_1F1481430;
  std::__compressed_pair_elem<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BAEE651C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(float const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1481430;
  io_object_t v2 = *(_DWORD *)(a1 + 40);
  if (v2) {
    IOObjectRelease(v2);
  }
  float v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(float const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1481430;
  io_object_t v2 = *(_DWORD *)(a1 + 40);
  if (v2) {
    IOObjectRelease(v2);
  }
  float v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return a1;
}

void *std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,float ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,float ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio1L27update_volume_control_valueERNS_4Core13Operation_SetERKN10applesauce5iokit16io_object_holderERKNS4_2CF13DictionaryRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

float std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,float ()(void)>::operator()(uint64_t a1)
{
  return *(float *)(a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,float ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14813B0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,float ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14813B0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void std::__function::__func<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_volume_control_value(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&)::$_0>,float ()(void)>::~__func()
{
}

void std::__function::__func<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,std::allocator<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,std::allocator<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__alloc_func<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,std::allocator<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  io_object_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t result = *(unsigned int *)(a1 + 4);
  if (result) {
    return IOObjectRelease(result);
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,std::allocator<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,std::allocator<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0>,void ()(void)>::destroy[abi:ne180100](a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,std::allocator<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1481A98;
  return std::__compressed_pair_elem<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  io_object_t v4 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v4;
  if (v4)
  {
    uint64_t v5 = IOObjectRetain(v4);
    if (v5)
    {
      uint64_t v8 = v5;
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      CFNumberRef v10 = std::system_category();
      MEMORY[0x1C1859250](exception, v8, v10, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
  }
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_1BAEE6840(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,std::allocator<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  io_object_t v2 = operator new(0x20uLL);
  void *v2 = &unk_1F1481A98;
  std::__compressed_pair_elem<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BAEE68A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,std::allocator<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1481A98;
  io_object_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  io_object_t v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    IOObjectRelease(v3);
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0,std::allocator<AMCP::IOAudio1::Control::handle_range_changed_message(void)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1481A98;
  io_object_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  io_object_t v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    IOObjectRelease(v3);
  }
  return a1;
}

uint64_t std::__function::__func<AMCP::IOAudio1::Control::Control(AMCP::IOAudio1::Device &,applesauce::iokit::io_object_holder const&)::$_0,std::allocator<AMCP::IOAudio1::Control::Control(AMCP::IOAudio1::Device &,applesauce::iokit::io_object_holder const&)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14818B0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IOAudio1::Control::Control(AMCP::IOAudio1::Device &,applesauce::iokit::io_object_holder const&)::$_0,std::allocator<AMCP::IOAudio1::Control::Control(AMCP::IOAudio1::Device &,applesauce::iokit::io_object_holder const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F14818B0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IOAudio1::Control::Control(AMCP::IOAudio1::Device &,applesauce::iokit::io_object_holder const&)::$_0,std::allocator<AMCP::IOAudio1::Control::Control(AMCP::IOAudio1::Device &,applesauce::iokit::io_object_holder const&)::$_0>,void ()(void)>::~__func()
{
}

void AMCP::IOAudio1::Control::build_core(AMCP::IOAudio1::Control *this)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  *((_DWORD *)this + 4) = AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(*(void *)(*(void *)(*((void *)this + 1) + 16)
                                                                                                  + 32)
                                                                                      + 16));
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)io_object_t v38 = 0u;
  int v39 = 1065353216;
  io_registry_entry_t v2 = *((_DWORD *)this + 5);
  if (!v2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    unint64_t v22 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
    std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
    CFIndex v23 = (struct type_info *)MEMORY[0x1E4FBA338];
    goto LABEL_100;
  }
  CFMutableDictionaryRef properties = 0;
  uint64_t v3 = IORegistryEntryCreateCFProperties(v2, &properties, 0, 0);
  if (v3)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    unint64_t v22 = (void (*)(void *))MEMORY[0x1E4FBA220];
    CFArrayRef v24 = std::system_category();
    MEMORY[0x1C1859250](exception, v3, v24, "Error on get_properties");
    CFIndex v23 = (struct type_info *)MEMORY[0x1E4FBA2F0];
LABEL_100:
    __cxa_throw(exception, v23, v22);
  }
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v36, properties);
  if (!v36)
  {
    CFIndex v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "Could not construct");
    __cxa_throw(v25, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&properties, (CFDictionaryRef)v36, @"IOAudioControlType");
  if (!properties)
  {
    unint64_t v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v26, "Could not construct");
    __cxa_throw(v26, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v4 = applesauce::CF::convert_to<unsigned int,0>(properties);
  if (properties) {
    CFRelease(properties);
  }
  if (!v36)
  {
    int v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v27, "Could not construct");
    __cxa_throw(v27, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&properties, (CFDictionaryRef)v36, @"IOAudioControlSubType");
  if (!properties)
  {
    io_object_t v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v28, "Could not construct");
    __cxa_throw(v28, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  signed int v5 = applesauce::CF::convert_to<unsigned int,0>(properties);
  uint64_t v6 = properties;
  if (properties) {
    CFRelease(properties);
  }
  if (v4 == 1953458028)
  {
    int v7 = 1953458028;
    if (v5 <= 1885888877)
    {
      if (v5 == 1702259059 || v5 == 1784767339) {
        goto LABEL_35;
      }
      int v8 = 1836414053;
    }
    else
    {
      if (v5 <= 1936682094)
      {
        if (v5 != 1885888878)
        {
          int v8 = 1885893481;
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      if (v5 == 1936682095) {
        goto LABEL_35;
      }
      int v8 = 1937072749;
    }
LABEL_34:
    if (v5 != v8) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v4 != 1936483188)
  {
    if (v4 != 1818588780)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&properties, "com.apple.coreaudio", "AMCP");
      unint64_t v18 = *(NSObject **)properties;
      if ((void)v54) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v54);
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        uint64_t v19 = pthread_self();
        mach_port_t v20 = pthread_mach_thread_np(v19);
        LODWORD(properties) = 67109890;
        HIDWORD(properties) = v20;
        LOWORD(v54) = 2080;
        *(void *)((char *)&v54 + 2) = "IOAudio1_Control.cpp";
        WORD5(v54) = 1024;
        HIDWORD(v54) = 148;
        LOWORD(v55) = 2080;
        *(void *)((char *)&v55 + 2) = "stock_class_id == k_class_id_unknown";
        _os_log_error_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&properties, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v52);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v45, "failed to identify the control");
      std::runtime_error::runtime_error(&v46, &v45);
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      int v51 = -1;
      v46.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      uint64_t v47 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&properties, (uint64_t)&v46);
      *((void *)&v55 + 1) = "std::tuple<Class_ID, Class_ID> AMCP::IOAudio1::calculate_control_class_info(uint32_t, uint32_t)";
      long long v56 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IOAudio1/IOAudio1_Control.cpp";
      LODWORD(v57) = 148;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v40);
      CFTypeRef cf = &unk_1F148AA90;
      long long v43 = v40;
      uint64_t v44 = v41;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    if (v5 != 1937072758 && v5 != 1986817381)
    {
      int v7 = 1818588780;
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  int v7 = 1936483188;
  if (v5 <= 1768845427)
  {
    if (v5 != 1668047723 && v5 != 1684370292)
    {
      int v8 = 1751740518;
      goto LABEL_34;
    }
LABEL_35:
    int v7 = v5;
    goto LABEL_36;
  }
  if (v5 == 1768845428)
  {
LABEL_28:
    signed int v5 = 1685287523;
    int v7 = 1685287523;
    goto LABEL_36;
  }
  if (v5 != 1852597622)
  {
    if (v5 != 1869968496) {
      goto LABEL_36;
    }
    goto LABEL_28;
  }
  signed int v5 = 1852601964;
  int v7 = 1852601964;
LABEL_36:
  if (!v36)
  {
    int v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v29, "Could not construct");
    __cxa_throw(v29, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&properties, (CFDictionaryRef)v36, @"IOAudioControlUsage");
  if (!properties)
  {
    uint64_t v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v30, "Could not construct");
    __cxa_throw(v30, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v9 = applesauce::CF::convert_to<unsigned int,0>(properties);
  if (properties) {
    CFRelease(properties);
  }
  if (v9 != 1768845428)
  {
    if (v9 == 1885434739)
    {
      int v9 = 1886679669;
    }
    else if (v9 != 1869968496)
    {
      int v9 = 1735159650;
    }
  }
  if (!v36)
  {
    unint64_t v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v31, "Could not construct");
    __cxa_throw(v31, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&properties, (CFDictionaryRef)v36, @"IOAudioControlChannelNumber");
  if (!properties)
  {
    long long v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v32, "Could not construct");
    __cxa_throw(v32, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v10 = applesauce::CF::convert_to<unsigned int,0>(properties);
  if (properties) {
    CFRelease(properties);
  }
  LODWORD(v46.__vftable) = *((_DWORD *)this + 4);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&properties, 0, (int *)&v46, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)properties + 10, &properties);
  if ((void)v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v54);
  }
  LODWORD(v46.__vftable) = v7;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&properties, 0, (int *)&v46, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)properties + 10, &properties);
  if ((void)v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v54);
  }
  LODWORD(v46.__vftable) = v5;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&properties, 0, (int *)&v46, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)properties + 10, &properties);
  if ((void)v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v54);
  }
  LODWORD(v46.__vftable) = *(_DWORD *)(*((void *)this + 1) + 32);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&properties, 0, (int *)&v46, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)properties + 10, &properties);
  if ((void)v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v54);
  }
  CFStringRef v11 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.iokit.IOAudio1", 24, 0x8000100u, 0);
  CFTypeRef cf = v11;
  if (!v11)
  {
    long long v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v33, "Could not construct");
    __cxa_throw(v33, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v46.__vftable = (std::runtime_error_vtbl *)0x676C6F626F706C67;
  LODWORD(v46.__imp_.__imp_) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)&properties, (uint64_t)&v46, v11);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)properties + 10, &properties);
  if ((void)v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v54);
  }
  CFRelease(v11);
  int v12 = *((_DWORD *)this + 4);
  CFMutableDictionaryRef properties = *(CFMutableDictionaryRef *)(*(void *)(*(void *)(*((void *)this + 1) + 16) + 32) + 16);
  LODWORD(v54) = v12;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>((uint64_t *)&v46, 0, (long long *)&properties, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)&v46.__vftable[1].what, &v46);
  if (v46.__imp_.__imp_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v46.__imp_.__imp_);
  }
  LODWORD(v46.__vftable) = v9;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&properties, 0, (int *)&v46, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)properties + 10, &properties);
  if ((void)v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v54);
  }
  LODWORD(v46.__vftable) = v10;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&properties, 0, (int *)&v46, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)properties + 10, &properties);
  if ((void)v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v54);
  }
  AMCP::IOAudio1::Device::get_resource_bundle_url((AMCP::IOAudio1::Device *)&cf, *((void *)this + 1));
  if (cf)
  {
    v46.__vftable = (std::runtime_error_vtbl *)0x676C6F6272737263;
    LODWORD(v46.__imp_.__imp_) = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>((uint64_t *)&properties, (uint64_t)&v46, cf);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)properties + 10, &properties);
    if ((void)v54) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v54);
    }
  }
  AMCP::get_class_traits((AMCP *)&properties, v5);
  int v13 = v54;
  if (v58 < 0) {
    operator delete(v57);
  }
  if (*((void *)&v54 + 1))
  {
    *(void *)&long long v55 = *((void *)&v54 + 1);
    operator delete(*((void **)&v54 + 1));
  }
  if (v13) {
    unsigned int v14 = v5;
  }
  else {
    unsigned int v14 = v7;
  }
  AMCP::IOAudio1::update_control_value(v14, (uint64_t)__p, (io_object_t *)this + 5, (CFDictionaryRef *)&v36);
  AMCP::get_class_traits((AMCP *)&properties, v5);
  int v15 = v54;
  if (v58 < 0) {
    operator delete(v57);
  }
  if (*((void *)&v54 + 1))
  {
    *(void *)&long long v55 = *((void *)&v54 + 1);
    operator delete(*((void **)&v54 + 1));
  }
  if (v15) {
    unsigned int v16 = v5;
  }
  else {
    unsigned int v16 = v7;
  }
  AMCP::IOAudio1::update_control_range(v16, (uint64_t)__p, (CFDictionaryRef *)&v36);
  AMCP::Core::Broker::make_core(&v34, *(std::__shared_mutex_base **)(*(void *)(*(void *)(*((void *)this + 1) + 16) + 32) + 16), (uint64_t)__p, *((_DWORD *)this + 4));
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v36) {
    CFRelease(v36);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((void *)v38[0]);
  float v17 = __p[0];
  __p[0] = 0;
  if (v17) {
    operator delete(v17);
  }
}

void sub_1BAEE757C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, void *__p, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,std::runtime_error a27,char a28,uint64_t a29)
{
  if (cf) {
    CFRelease(cf);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(a15);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *AMCP::IOAudio1::Control::create_from_service_list(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  if (a3 != a4) {
    operator new();
  }
  return result;
}

void sub_1BAEE7C1C()
{
  (*(void (**)(uint64_t))(*(void *)v0 + 8))(v0);
  JUMPOUT(0x1BAEE7F44);
}

void sub_1BAEE7C6C()
{
}

void sub_1BAEE7C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
}

void sub_1BAEE7C84(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,NSObject **buf,long long a32,long long a33)
{
  if (a2)
  {
    uint64_t v34 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v35 = v34;
      AMCP::Log::Scope_Registry::get(v34);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
      CFTypeRef v36 = *buf;
      if ((void)a32) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a32);
      }
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        CFTypeRef v37 = pthread_self();
        mach_port_t v38 = pthread_mach_thread_np(v37);
        uint64_t v39 = (*(uint64_t (**)(AMCP::Log::Scope_Registry *))(*(void *)v35 + 16))(v35);
        LODWORD(buf) = 67109890;
        HIDWORD(buf) = v38;
        LOWORD(a32) = 2080;
        *(void *)((char *)&a32 + 2) = "IOAudio1_Control.cpp";
        WORD5(a32) = 1024;
        HIDWORD(a32) = 207;
        LOWORD(a33) = 2080;
        *(void *)((char *)&a33 + 2) = v39;
        _os_log_error_impl(&dword_1BAA78000, v36, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d failed to open a connect to a driver's control: %s", (uint8_t *)&buf, 0x22u);
      }
      __cxa_rethrow();
    }
    AMCP::Log::Scope_Registry::get(v34);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    long long v40 = *buf;
    if ((void)a32) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a32);
    }
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      uint64_t v41 = pthread_self();
      mach_port_t v42 = pthread_mach_thread_np(v41);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v42;
      LOWORD(a32) = 2080;
      *(void *)((char *)&a32 + 2) = "IOAudio1_Control.cpp";
      WORD5(a32) = 1024;
      HIDWORD(a32) = 212;
      _os_log_error_impl(&dword_1BAA78000, v40, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d failed to open a connect to a driver's control", (uint8_t *)&buf, 0x18u);
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x1BAEE7F50);
}

void sub_1BAEE7E50()
{
}

void sub_1BAEE7E70(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BAEE7F50);
}

void sub_1BAEE7E84()
{
}

void sub_1BAEE7E8C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl((uint64_t)&a33);
  boost::exception_detail::error_info_injector<std::system_error>::~error_info_injector((uint64_t)&a20);
  std::runtime_error::~runtime_error(&a17);
  if (v34) {
    __cxa_free_exception(v33);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a32);
  JUMPOUT(0x1BAEE7EFCLL);
}

void sub_1BAEE7EF8(_Unwind_Exception *a1)
{
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&STACK[0x268]);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&STACK[0x3A8]);
  AMCP::Utility::Mach_Port::~Mach_Port(v3);
  signed int v5 = (io_connect_t *)*((void *)v2 + 3);
  *((void *)v2 + 3) = 0;
  if (v5) {
    std::default_delete<applesauce::iokit::io_connect_holder>::operator()[abi:ne180100](v5);
  }
  AMCP::IOAudio1::Device_Sub_Object::~Device_Sub_Object(v2);
  MEMORY[0x1C1859840](v2, 0x10A1C40330624E4);
  STACK[0x268] = v1;
  std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x268]);
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::PCM_Operation_Context::PCM_Operation_Context(uint64_t a1, void *a2)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)(a1 + 128) = 0u;
  uint64_t v4 = a1 + 128;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "source format");
  signed int v5 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  uint64_t v6 = v5;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  if (!v6)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    int v105 = *(NSObject **)__p[0];
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
    if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
    {
      char v106 = pthread_self();
      mach_port_t v107 = pthread_mach_thread_np(v106);
      LODWORD(__p[0]) = 67109890;
      HIDWORD(__p[0]) = v107;
      LOWORD(__p[1]) = 2080;
      *(void **)((char *)&__p[1] + 2) = "PCM_Operation_Context.cpp";
      WORD1(__p[2]) = 1024;
      HIDWORD(__p[2]) = 39;
      LOWORD(__p[3]) = 2080;
      *(void **)((char *)&__p[3] + 2) = "not (settings.has_key(kFormatConversion_Source_Format))";
      _os_log_error_impl(&dword_1BAA78000, v105, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_Operation_Context requires a source format", (uint8_t *)__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v121);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"PCM_Operation_Context requires a source format", (uint64_t)&v128);
    std::logic_error::logic_error(&v124, &v128);
    v124.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v129, &v124);
    long long v131 = 0uLL;
    uint64_t v132 = 0;
    int v133 = -1;
    v129.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    float64x2_t v130 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v129);
    __p[4] = "AMCP::DAL::PCM_Operation_Context::PCM_Operation_Context(const DAL_Settings &)";
    int v135 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
    int v136 = 39;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v125.__r_.__value_.__l.__data_);
    std::string v127 = v125;
    memset(&v125, 0, sizeof(v125));
    unint64_t v126 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "dest format");
  int v7 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  int v8 = v7;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  if (!v8)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    char v108 = *(NSObject **)__p[0];
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
    if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
    {
      float64x2_t v109 = pthread_self();
      mach_port_t v110 = pthread_mach_thread_np(v109);
      LODWORD(__p[0]) = 67109890;
      HIDWORD(__p[0]) = v110;
      LOWORD(__p[1]) = 2080;
      *(void **)((char *)&__p[1] + 2) = "PCM_Operation_Context.cpp";
      WORD1(__p[2]) = 1024;
      HIDWORD(__p[2]) = 40;
      LOWORD(__p[3]) = 2080;
      *(void **)((char *)&__p[3] + 2) = "not (settings.has_key(kFormatConversion_Dest_Format))";
      _os_log_error_impl(&dword_1BAA78000, v108, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_Operation_Context requires a dest format", (uint8_t *)__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v121);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"PCM_Operation_Context requires a dest format", (uint64_t)&v128);
    std::logic_error::logic_error(&v124, &v128);
    v124.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v129, &v124);
    long long v131 = 0uLL;
    uint64_t v132 = 0;
    int v133 = -1;
    v129.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    float64x2_t v130 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v129);
    __p[4] = "AMCP::DAL::PCM_Operation_Context::PCM_Operation_Context(const DAL_Settings &)";
    int v135 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
    int v136 = 40;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v125.__r_.__value_.__l.__data_);
    std::string v127 = v125;
    memset(&v125, 0, sizeof(v125));
    unint64_t v126 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "size bias");
  int v9 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  int v10 = v9;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  if (!v10)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    mach_port_t v111 = *(NSObject **)__p[0];
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
    if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
    {
      int v112 = pthread_self();
      mach_port_t v113 = pthread_mach_thread_np(v112);
      LODWORD(__p[0]) = 67109890;
      HIDWORD(__p[0]) = v113;
      LOWORD(__p[1]) = 2080;
      *(void **)((char *)&__p[1] + 2) = "PCM_Operation_Context.cpp";
      WORD1(__p[2]) = 1024;
      HIDWORD(__p[2]) = 41;
      LOWORD(__p[3]) = 2080;
      *(void **)((char *)&__p[3] + 2) = "not (settings.has_key(kFormatConversion_Size_Bias))";
      _os_log_error_impl(&dword_1BAA78000, v111, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_Operation_Context requires a size bias", (uint8_t *)__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v121);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"PCM_Operation_Context requires a size bias", (uint64_t)&v128);
    std::logic_error::logic_error(&v124, &v128);
    v124.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v129, &v124);
    long long v131 = 0uLL;
    uint64_t v132 = 0;
    int v133 = -1;
    v129.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    float64x2_t v130 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v129);
    __p[4] = "AMCP::DAL::PCM_Operation_Context::PCM_Operation_Context(const DAL_Settings &)";
    int v135 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
    int v136 = 41;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v125.__r_.__value_.__l.__data_);
    std::string v127 = v125;
    memset(&v125, 0, sizeof(v125));
    unint64_t v126 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "source timebase");
  unint64_t v126 = 0;
  v127.__r_.__value_.__r.__words[0] = 0;
  AMCP::DAL::DAL_Settings::at_or<std::shared_ptr<AMCP::Graph::Timebase>>((__n128 *)&v129, a2, (unsigned __int8 *)__p, (__n128 *)&v126);
  CFStringRef v11 = *(std::__shared_weak_count **)(a1 + 64);
  *(std::logic_error *)(a1 + 56) = v129;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v127.__r_.__value_.__r.__words[0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v127.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "dest timebase");
  unint64_t v126 = 0;
  v127.__r_.__value_.__r.__words[0] = 0;
  AMCP::DAL::DAL_Settings::at_or<std::shared_ptr<AMCP::Graph::Timebase>>((__n128 *)&v129, a2, (unsigned __int8 *)__p, (__n128 *)&v126);
  int v12 = *(std::__shared_weak_count **)(a1 + 80);
  *(std::logic_error *)(a1 + 72) = v129;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v127.__r_.__value_.__r.__words[0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v127.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v129, "source format");
  int v13 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)&v129);
  if (v13) {
    AMCP::Thing::convert_to<CA::StreamDescription>((uint64_t)__p, (uint64_t)(v13 + 40));
  }
  else {
    memset(__p, 0, sizeof(__p));
  }
  long long v14 = *(_OWORD *)&__p[2];
  *(_OWORD *)(a1 + 88) = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 104) = v14;
  *(void **)(a1 + 120) = __p[4];
  if (SHIBYTE(v130) < 0) {
    operator delete(v129.__vftable);
  }
  std::string::basic_string[abi:ne180100]<0>(&v129, "dest format");
  int v15 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)&v129);
  if (v15) {
    AMCP::Thing::convert_to<CA::StreamDescription>((uint64_t)__p, (uint64_t)(v15 + 40));
  }
  else {
    memset(__p, 0, sizeof(__p));
  }
  long long v16 = *(_OWORD *)&__p[2];
  *(_OWORD *)uint64_t v4 = *(_OWORD *)__p;
  *(_OWORD *)(v4 + 16) = v16;
  *(void **)(v4 + 32) = __p[4];
  if (SHIBYTE(v130) < 0) {
    operator delete(v129.__vftable);
  }
  double v17 = *(double *)(a1 + 128);
  double v18 = *(double *)(a1 + 88);
  int v20 = *(_DWORD *)(a1 + 152);
  int v19 = *(_DWORD *)(a1 + 156);
  int v22 = *(_DWORD *)(a1 + 112);
  int v21 = *(_DWORD *)(a1 + 116);
  std::string::basic_string[abi:ne180100]<0>(__p, "change clock with drift correction disabled");
  CFIndex v23 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (v23) {
    BOOL v24 = AMCP::Thing::convert_to<BOOL>((uint64_t)(v23 + 40));
  }
  else {
    BOOL v24 = 0;
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "scale");
  int v119 = v22;
  int v120 = v21;
  CFIndex v25 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (v25)
  {
    CFIndex v25 = (unsigned __int8 *)AMCP::Thing::convert_to<BOOL>((uint64_t)(v25 + 40));
    int v26 = (int)v25;
  }
  else
  {
    int v26 = 0;
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  if ((v24 & v26) == 1)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v25);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    uint64_t v114 = *(NSObject **)__p[0];
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
    if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
    {
      unint64_t v115 = pthread_self();
      mach_port_t v116 = pthread_mach_thread_np(v115);
      LODWORD(__p[0]) = 67109890;
      HIDWORD(__p[0]) = v116;
      LOWORD(__p[1]) = 2080;
      *(void **)((char *)&__p[1] + 2) = "PCM_Operation_Context.cpp";
      WORD1(__p[2]) = 1024;
      HIDWORD(__p[2]) = 54;
      LOWORD(__p[3]) = 2080;
      *(void **)((char *)&__p[3] + 2) = "not (!change_clock_without_resampling || !needs_resampling)";
      _os_log_error_impl(&dword_1BAA78000, v114, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Contradictory resampling settings.", (uint8_t *)__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v121);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Contradictory resampling settings.", (uint64_t)&v128);
    std::logic_error::logic_error(&v124, &v128);
    v124.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v129, &v124);
    long long v131 = 0uLL;
    uint64_t v132 = 0;
    int v133 = -1;
    v129.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    float64x2_t v130 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v129);
    __p[4] = "AMCP::DAL::PCM_Operation_Context::PCM_Operation_Context(const DAL_Settings &)";
    int v135 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
    int v136 = 54;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v125.__r_.__value_.__l.__data_);
    std::string v127 = v125;
    memset(&v125, 0, sizeof(v125));
    unint64_t v126 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "volume processing");
  int v27 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "map channels");
  int v117 = v20;
  int v118 = v19;
  if (std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)__p))
  {
    BOOL v28 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v129, "convert format");
    BOOL v28 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)&v129) != 0;
    if (SHIBYTE(v130) < 0) {
      operator delete(v129.__vftable);
    }
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "mix channels to mono");
  int v29 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  if (v27)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "volume processing");
    if (std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)__p))
    {
      std::string::basic_string[abi:ne180100]<0>(&v129, "volume connection");
      BOOL v30 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)&v129) != 0;
      if (SHIBYTE(v130) < 0) {
        operator delete(v129.__vftable);
      }
    }
    else
    {
      BOOL v30 = 0;
    }
    if (SHIBYTE(__p[2]) < 0)
    {
      operator delete(__p[0]);
      if (!v30)
      {
LABEL_76:
        uint64_t v39 = *(char **)(a1 + 176);
        unint64_t v38 = *(void *)(a1 + 184);
        if ((unint64_t)v39 >= v38)
        {
          uint64_t v41 = *(char **)(a1 + 168);
          uint64_t v42 = (v39 - v41) >> 2;
          unint64_t v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 62) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v44 = v38 - (void)v41;
          if (v44 >> 1 > v43) {
            unint64_t v43 = v44 >> 1;
          }
          BOOL v45 = (unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v45) {
            unint64_t v46 = v43;
          }
          if (v46)
          {
            unint64_t v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v46);
            uint64_t v41 = *(char **)(a1 + 168);
            uint64_t v39 = *(char **)(a1 + 176);
          }
          else
          {
            uint64_t v47 = 0;
          }
          uint64_t v48 = (_DWORD *)(v46 + 4 * v42);
          unint64_t v49 = v46 + 4 * v47;
          _DWORD *v48 = 0;
          long long v40 = v48 + 1;
          while (v39 != v41)
          {
            int v50 = *((_DWORD *)v39 - 1);
            v39 -= 4;
            *--uint64_t v48 = v50;
          }
          *(void *)(a1 + 168) = v48;
          *(void *)(a1 + 176) = v40;
          *(void *)(a1 + 184) = v49;
          if (v41) {
            operator delete(v41);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v39 = 0;
          long long v40 = v39 + 4;
        }
        *(void *)(a1 + 176) = v40;
        goto LABEL_92;
      }
    }
    else if (!v30)
    {
      goto LABEL_76;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "volume connection");
    unint64_t v126 = 0;
    v127.__r_.__value_.__r.__words[0] = 0;
    AMCP::DAL::DAL_Settings::at_or<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>((__n128 *)&v129, a2, (unsigned __int8 *)__p, (__n128 *)&v126);
    unint64_t v31 = *(std::__shared_weak_count **)(a1 + 16);
    *(std::logic_error *)(a1 + 8) = v129;
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    if (v127.__r_.__value_.__r.__words[0]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v127.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    caulk::concurrent::atomic_value<AMCP::Graph::Wire_Volume_Connection::Volume_Parameters,2,6>::load((uint64_t)__p, *(void *)(a1 + 8));
    long long v32 = v137;
    long long v33 = v138;
    char v34 = v139;
    long long v35 = *(_OWORD *)(a1 + 56);
    uint64_t v36 = *(void *)(a1 + 64);
    if (v36) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
    }
    LODWORD(v129.__vftable) = 0;
    v129.__imp_.__imp_ = 0;
    float64x2_t v130 = 0;
    long long v131 = v35;
    if (v34)
    {
      v129.__imp_.__imp_ = v32;
      LODWORD(v129.__vftable) = 2;
      int v37 = 3;
      if ((v34 & 2) == 0) {
        goto LABEL_75;
      }
    }
    else
    {
      int v37 = 1;
      if ((v34 & 2) == 0)
      {
LABEL_75:
        AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v129);
        operator new();
      }
    }
    float64x2_t v130 = v33;
    LODWORD(v129.__vftable) = v37;
    goto LABEL_75;
  }
LABEL_92:
  if (!v29) {
    goto LABEL_126;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "mix channels to mono");
  if (std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)__p))
  {
    std::string::basic_string[abi:ne180100]<0>(&v129, "mix map");
    BOOL v51 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)&v129) != 0;
    if (SHIBYTE(v130) < 0) {
      operator delete(v129.__vftable);
    }
  }
  else
  {
    BOOL v51 = 0;
  }
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (!v51) {
      goto LABEL_110;
    }
LABEL_101:
    std::string::basic_string[abi:ne180100]<0>(__p, "mix map");
    char v52 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)__p);
    if (v52)
    {
      AMCP::Thing::convert_to<std::vector<unsigned int>>(&v121, (uint64_t)(v52 + 40));
    }
    else
    {
      long long v121 = 0;
      long long v122 = 0;
      uint64_t v123 = 0;
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if (v121 != v122) {
      operator new();
    }
    if (v121)
    {
      long long v122 = v121;
      operator delete(v121);
    }
    goto LABEL_110;
  }
  operator delete(__p[0]);
  if (v51) {
    goto LABEL_101;
  }
LABEL_110:
  long long v54 = *(char **)(a1 + 176);
  unint64_t v53 = *(void *)(a1 + 184);
  if ((unint64_t)v54 >= v53)
  {
    long long v56 = *(char **)(a1 + 168);
    uint64_t v57 = (v54 - v56) >> 2;
    unint64_t v58 = v57 + 1;
    if ((unint64_t)(v57 + 1) >> 62) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v59 = v53 - (void)v56;
    if (v59 >> 1 > v58) {
      unint64_t v58 = v59 >> 1;
    }
    BOOL v45 = (unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v45) {
      unint64_t v60 = v58;
    }
    if (v60)
    {
      unint64_t v60 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v60);
      long long v56 = *(char **)(a1 + 168);
      long long v54 = *(char **)(a1 + 176);
    }
    else
    {
      uint64_t v61 = 0;
    }
    __int16 v62 = (_DWORD *)(v60 + 4 * v57);
    unint64_t v63 = v60 + 4 * v61;
    *__int16 v62 = 3;
    long long v55 = v62 + 1;
    while (v54 != v56)
    {
      int v64 = *((_DWORD *)v54 - 1);
      v54 -= 4;
      *--__int16 v62 = v64;
    }
    *(void *)(a1 + 168) = v62;
    *(void *)(a1 + 176) = v55;
    *(void *)(a1 + 184) = v63;
    if (v56) {
      operator delete(v56);
    }
  }
  else
  {
    *(_DWORD *)long long v54 = 3;
    long long v55 = v54 + 4;
  }
  *(void *)(a1 + 176) = v55;
LABEL_126:
  if ((v26 & v28) == 1)
  {
    uint64_t v65 = a1 + 72;
    double v66 = v17 / v18;
    double v67 = (double)(v117 * v118) / (double)(v119 * v120);
    if (v67 >= v66) {
      uint64_t v68 = a1 + 88;
    }
    else {
      uint64_t v68 = v4;
    }
    long long v69 = *(_OWORD *)(v68 + 16);
    *(_OWORD *)std::string __p = *(_OWORD *)v68;
    *(_OWORD *)&__p[2] = v69;
    __p[4] = *(void **)(v68 + 32);
    if (v67 >= v66)
    {
      CFTypeRef v70 = (void **)v4;
    }
    else
    {
      uint64_t v65 = a1 + 56;
      CFTypeRef v70 = (void **)(a1 + 88);
    }
    __p[0] = *v70;
    uint64_t v71 = *(void *)(v65 + 8);
    if (v71) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v71 + 8), 1uLL, memory_order_relaxed);
    }
    operator new();
  }
  if (v26)
  {
    AMCP::DAL::PCM_Operation_Context::configure_resampler(a1, a2, a1 + 88, v4);
    float64x2_t v73 = *(int **)(a1 + 176);
    unint64_t v72 = *(void *)(a1 + 184);
    if ((unint64_t)v73 < v72)
    {
      int v74 = 1;
LABEL_142:
      int *v73 = v74;
      uint64_t v76 = v73 + 1;
      goto LABEL_169;
    }
    int v77 = *(int **)(a1 + 168);
    uint64_t v78 = v73 - v77;
    unint64_t v79 = v78 + 1;
    if ((unint64_t)(v78 + 1) >> 62) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v80 = v72 - (void)v77;
    if (v80 >> 1 > v79) {
      unint64_t v79 = v80 >> 1;
    }
    BOOL v45 = (unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v81 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v45) {
      unint64_t v81 = v79;
    }
    if (v81)
    {
      unint64_t v81 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v81);
      int v77 = *(int **)(a1 + 168);
      float64x2_t v73 = *(int **)(a1 + 176);
    }
    else
    {
      uint64_t v82 = 0;
    }
    long long v88 = (_DWORD *)(v81 + 4 * v78);
    unint64_t v89 = v81 + 4 * v82;
    _DWORD *v88 = 1;
    uint64_t v76 = v88 + 1;
    while (v73 != v77)
    {
      int v90 = *--v73;
      *--long long v88 = v90;
    }
    goto LABEL_167;
  }
  if (v28)
  {
    AMCP::DAL::PCM_Operation_Context::configure_audio_converter(a1, a2, (const AudioStreamBasicDescription *)(a1 + 88), (const AudioStreamBasicDescription *)v4);
    float64x2_t v73 = *(int **)(a1 + 176);
    unint64_t v75 = *(void *)(a1 + 184);
    if ((unint64_t)v73 < v75)
    {
      int v74 = 2;
      goto LABEL_142;
    }
    int v77 = *(int **)(a1 + 168);
    uint64_t v83 = v73 - v77;
    unint64_t v84 = v83 + 1;
    if ((unint64_t)(v83 + 1) >> 62) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v85 = v75 - (void)v77;
    if (v85 >> 1 > v84) {
      unint64_t v84 = v85 >> 1;
    }
    BOOL v45 = (unint64_t)v85 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v86 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v45) {
      unint64_t v86 = v84;
    }
    if (v86)
    {
      unint64_t v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v86);
      int v77 = *(int **)(a1 + 168);
      float64x2_t v73 = *(int **)(a1 + 176);
    }
    else
    {
      uint64_t v87 = 0;
    }
    long long v88 = (_DWORD *)(v86 + 4 * v83);
    unint64_t v89 = v86 + 4 * v87;
    _DWORD *v88 = 2;
    uint64_t v76 = v88 + 1;
    while (v73 != v77)
    {
      int v91 = *--v73;
      *--long long v88 = v91;
    }
LABEL_167:
    *(void *)(a1 + 168) = v88;
    *(void *)(a1 + 176) = v76;
    *(void *)(a1 + 184) = v89;
    if (v77) {
      operator delete(v77);
    }
LABEL_169:
    *(void *)(a1 + 176) = v76;
    if (!v24) {
      return a1;
    }
    goto LABEL_170;
  }
  if (!v24) {
    return a1;
  }
LABEL_170:
  float32x4_t v92 = *(_DWORD **)(a1 + 168);
  if (v92 == *(_DWORD **)(a1 + 176))
  {
    unint64_t v93 = *(void *)(a1 + 184);
    if ((unint64_t)v92 >= v93)
    {
      uint64_t v95 = v93 - (void)v92;
      uint64_t v96 = v95 >> 1;
      if ((unint64_t)(v95 >> 1) <= 1) {
        uint64_t v96 = 1;
      }
      if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v97 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v97 = v96;
      }
      uint64_t v98 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v97);
      uint64_t v99 = *(char **)(a1 + 168);
      unint64_t v100 = *(char **)(a1 + 176);
      unint64_t v102 = &v98[v101];
      _DWORD *v98 = 4;
      long long v94 = v98 + 1;
      while (v100 != v99)
      {
        int v103 = *((_DWORD *)v100 - 1);
        v100 -= 4;
        *--uint64_t v98 = v103;
      }
      *(void *)(a1 + 168) = v98;
      *(void *)(a1 + 176) = v94;
      *(void *)(a1 + 184) = v102;
      if (v99) {
        operator delete(v99);
      }
    }
    else
    {
      *float32x4_t v92 = 4;
      long long v94 = v92 + 1;
    }
    *(void *)(a1 + 176) = v94;
  }
  return a1;
}

void sub_1BAEEA7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,void *a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a39);
  uint64_t v59 = *a10;
  uint64_t v60 = a11;
  if (*a10)
  {
    *(void *)(a11 + 48) = v59;
    operator delete(v59);
    uint64_t v60 = a11;
  }
  MEMORY[0x1C1859840](v60, 0x1010C409ECD0874);
  if (__p) {
    operator delete(__p);
  }
  uint64_t v61 = (void *)v57[21];
  if (v61)
  {
    v57[22] = (uint64_t)v61;
    operator delete(v61);
  }
  __int16 v62 = (std::__shared_weak_count *)v57[10];
  if (v62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  }
  unint64_t v63 = (std::__shared_weak_count *)v57[8];
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  uint64_t v64 = v57[5];
  v57[5] = 0;
  if (v64) {
    std::default_delete<AMCP::DAL::DAL_Stereo_To_Mono_Mixer>::operator()[abi:ne180100](v64);
  }
  uint64_t v65 = v57[4];
  v57[4] = 0;
  if (v65) {
    (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
  }
  uint64_t v66 = v57[3];
  v57[3] = 0;
  if (v66) {
    MEMORY[0x1C1859840](v66, 0x1000C40D9C97D19);
  }
  double v67 = (std::__shared_weak_count *)v57[2];
  if (v67) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v67);
  }
  uint64_t v68 = *v57;
  uint64_t *v57 = 0;
  if (v68) {
    (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
  }
  _Unwind_Resume(a1);
}

void AMCP::DAL::PCM_Operation_Context::configure_audio_converter(uint64_t a1, void *a2, const AudioStreamBasicDescription *a3, const AudioStreamBasicDescription *a4)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(buf, "map channels");
  int v8 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, buf);
  if (v8)
  {
    BOOL v9 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "convert format");
    int v8 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
    BOOL v9 = v8 != 0;
    if (SHIBYTE(v35) < 0) {
      operator delete(__p.__vftable);
    }
  }
  if (SHIBYTE(v43) < 0)
  {
    operator delete(*(void **)buf);
    if (!v9) {
      return;
    }
  }
  else if (!v9)
  {
    return;
  }
  if (a3->mSampleRate != a4->mSampleRate)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    double v17 = **(NSObject ***)buf;
    if (*(void *)v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v41);
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      double v18 = pthread_self();
      mach_port_t v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v19;
      *(_WORD *)uint64_t v41 = 2080;
      *(void *)&v41[2] = "PCM_Operation_Context.cpp";
      __int16 v42 = 1024;
      int v43 = 173;
      __int16 v44 = 2080;
      *(void *)BOOL v45 = "not (source_fmt.mSampleRate == dest_fmt.mSampleRate)";
      _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s format conersion can only apply to formats with the same sample rates", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"format conersion can only apply to formats with the same sample rates", (uint64_t)&v33);
    std::logic_error::logic_error((std::logic_error *)&v26, &v33);
    *(void *)&unsigned long long v26 = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error(&__p, (const std::logic_error *)&v26);
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    int v39 = -1;
    __p.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v35 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(void *)&v45[6] = "void AMCP::DAL::PCM_Operation_Context::configure_audio_converter(const DAL_Settings &, const CA"
                         "::StreamDescription &, const CA::StreamDescription &)";
    unint64_t v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
    int v47 = 173;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v30.__r_.__value_.__l.__data_);
    unint64_t v31 = &unk_1F148AA90;
    std::string v32 = v30;
    memset(&v30, 0, sizeof(v30));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  int v10 = (AudioConverterRef *)(a1 + 48);
  CFStringRef v11 = (AMCP::Log::Scope_Registry *)AudioConverterNew(a3, a4, v10);
  if (v11)
  {
    AMCP::Log::Scope_Registry::get(v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v20 = **(NSObject ***)buf;
    if (*(void *)v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v41);
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      int v21 = pthread_self();
      mach_port_t v22 = pthread_mach_thread_np(v21);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v22;
      *(_WORD *)uint64_t v41 = 2080;
      *(void *)&v41[2] = "PCM_Operation_Context.cpp";
      __int16 v42 = 1024;
      int v43 = 175;
      __int16 v44 = 2080;
      *(void *)BOOL v45 = "not (err == noErr)";
      _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_Operation_Context::configure_audio_converter: failed to create the AudioConverter", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"PCM_Operation_Context::configure_audio_converter: failed to create the AudioConverter", (uint64_t)&v33);
    std::logic_error::logic_error((std::logic_error *)&v26, &v33);
    *(void *)&unsigned long long v26 = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error(&__p, (const std::logic_error *)&v26);
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    int v39 = -1;
    __p.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v35 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(void *)&v45[6] = "void AMCP::DAL::PCM_Operation_Context::configure_audio_converter(const DAL_Settings &, const CA"
                         "::StreamDescription &, const CA::StreamDescription &)";
    unint64_t v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
    int v47 = 175;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v30.__r_.__value_.__l.__data_);
    unint64_t v31 = &unk_1F148AA90;
    std::string v32 = v30;
    memset(&v30, 0, sizeof(v30));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "channel map");
  int v12 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, buf);
  int v13 = v12;
  if (SHIBYTE(v43) < 0)
  {
    operator delete(*(void **)buf);
    if (!v13) {
      return;
    }
  }
  else if (!v12)
  {
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "channel map");
  long long v14 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, buf);
  if (v14) {
    AMCP::Thing::convert_to<std::vector<int>>(&v33, (uint64_t)(v14 + 40));
  }
  else {
    memset(&v33, 0, sizeof(v33));
  }
  if (SHIBYTE(v43) < 0) {
    operator delete(*(void **)buf);
  }
  int v15 = (void *)v33.__r_.__value_.__r.__words[0];
  if (v33.__r_.__value_.__r.__words[0] != v33.__r_.__value_.__l.__size_)
  {
    long long v16 = (AMCP::Log::Scope_Registry *)AudioConverterSetProperty(*v10, 0x63686D70u, (LODWORD(v33.__r_.__value_.__r.__words[1])- LODWORD(v33.__r_.__value_.__l.__data_)) & 0xFFFFFFFC, v33.__r_.__value_.__l.__data_);
    if (v16)
    {
      AMCP::Log::Scope_Registry::get(v16);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      CFIndex v23 = **(NSObject ***)buf;
      if (*(void *)v41) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v41);
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        BOOL v24 = pthread_self();
        mach_port_t v25 = pthread_mach_thread_np(v24);
        *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v25;
        *(_WORD *)uint64_t v41 = 2080;
        *(void *)&v41[2] = "PCM_Operation_Context.cpp";
        __int16 v42 = 1024;
        int v43 = 184;
        __int16 v44 = 2080;
        *(void *)BOOL v45 = "not (err == noErr)";
        _os_log_error_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_Operation_Context::configure_audio_converter: failed to set the channel map on the converter", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"PCM_Operation_Context::configure_audio_converter: failed to set the channel map on the converter", (uint64_t)&v30);
      std::logic_error::logic_error(&v28, &v30);
      v28.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&__p, &v28);
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      int v39 = -1;
      __p.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      long long v35 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
      *(void *)&v45[6] = "void AMCP::DAL::PCM_Operation_Context::configure_audio_converter(const DAL_Settings &, const "
                           "CA::StreamDescription &, const CA::StreamDescription &)";
      unint64_t v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
      int v47 = 184;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v26);
      unint64_t v31 = &unk_1F148AA90;
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v26;
      v32.__r_.__value_.__r.__words[2] = v27;
      unsigned long long v26 = 0uLL;
      std::string::size_type v27 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
  }
  if (v15) {
    operator delete(v15);
  }
}

void sub_1BAEEB4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (v35) {
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::PCM_Operation_Context::configure_resampler(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "scale");
  int v7 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (v7)
  {
    int v7 = (unsigned __int8 *)AMCP::Thing::convert_to<BOOL>((uint64_t)(v7 + 40));
    int v8 = (int)v7;
  }
  else
  {
    int v8 = 0;
  }
  if (SHIBYTE(v40) < 0)
  {
    operator delete(__p);
    if (!v8) {
      return;
    }
  }
  else if (!v8)
  {
    return;
  }
  int v9 = *(_DWORD *)(a3 + 12);
  if ((v9 & 0x20) != 0) {
    int v10 = 1;
  }
  else {
    int v10 = *(_DWORD *)(a3 + 28);
  }
  int v11 = *(_DWORD *)(a4 + 12);
  if ((v11 & 0x20) != 0) {
    int v12 = 1;
  }
  else {
    int v12 = *(_DWORD *)(a4 + 28);
  }
  if (v10 != v12)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    double v17 = *(NSObject **)__p;
    if (*(void *)v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v38);
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      double v18 = pthread_self();
      mach_port_t v19 = pthread_mach_thread_np(v18);
      LODWORD(__p) = 67109890;
      HIDWORD(__p) = v19;
      *(_WORD *)uint64_t v38 = 2080;
      *(void *)&uint64_t v38[2] = "PCM_Operation_Context.cpp";
      __int16 v39 = 1024;
      int v40 = 148;
      __int16 v41 = 2080;
      *(void *)__int16 v42 = "not (source_fmt.GetNumberInterleavedChannels() == dest_fmt.GetNumberInterleavedChannels())";
      _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s resample source and dest must have the same numnber of interleaved channels", (uint8_t *)&__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"resample source and dest must have the same numnber of interleaved channels", (uint64_t)&v28);
    std::logic_error::logic_error(&v29, &v28);
    v29.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v30, &v29);
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    int v35 = -1;
    v30.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unint64_t v31 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v30);
    *(void *)&v42[6] = "void AMCP::DAL::PCM_Operation_Context::configure_resampler(const DAL_Settings &, const CA::Stre"
                         "amDescription &, const CA::StreamDescription &)";
    int v43 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
    int v44 = 148;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
    long long v26 = v23;
    uint64_t v27 = v24;
    long long v23 = 0uLL;
    uint64_t v24 = 0;
    mach_port_t v25 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if ((v9 & 0x20) != 0) {
    int v13 = *(_DWORD *)(a3 + 28);
  }
  else {
    int v13 = 1;
  }
  if ((v11 & 0x20) != 0) {
    int v14 = *(_DWORD *)(a4 + 28);
  }
  else {
    int v14 = 1;
  }
  if (v13 != v14)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    int v20 = *(NSObject **)__p;
    if (*(void *)v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v38);
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      int v21 = pthread_self();
      mach_port_t v22 = pthread_mach_thread_np(v21);
      LODWORD(__p) = 67109890;
      HIDWORD(__p) = v22;
      *(_WORD *)uint64_t v38 = 2080;
      *(void *)&uint64_t v38[2] = "PCM_Operation_Context.cpp";
      __int16 v39 = 1024;
      int v40 = 149;
      __int16 v41 = 2080;
      *(void *)__int16 v42 = "not (source_fmt.GetNumberChannelStreams() == dest_fmt.GetNumberChannelStreams())";
      _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s resample source and dest must have the same numnber of noninterleaved channels", (uint8_t *)&__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"resample source and dest must have the same numnber of noninterleaved channels", (uint64_t)&v28);
    std::logic_error::logic_error(&v29, &v28);
    v29.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v30, &v29);
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    int v35 = -1;
    v30.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unint64_t v31 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v30);
    *(void *)&v42[6] = "void AMCP::DAL::PCM_Operation_Context::configure_resampler(const DAL_Settings &, const CA::Stre"
                         "amDescription &, const CA::StreamDescription &)";
    int v43 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
    int v44 = 149;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
    long long v26 = v23;
    uint64_t v27 = v24;
    long long v23 = 0uLL;
    uint64_t v24 = 0;
    mach_port_t v25 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "resampler type");
  int v15 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (v15) {
    int v16 = AMCP::Thing::convert_to<AMCP::Resampler_Type>((uint64_t)(v15 + 40));
  }
  else {
    int v16 = 2;
  }
  if (SHIBYTE(v40) < 0)
  {
    operator delete(__p);
    if (v16) {
      goto LABEL_27;
    }
LABEL_31:
    operator new();
  }
  if (!v16) {
    goto LABEL_31;
  }
LABEL_27:
  if (v16 == 1) {
    operator new();
  }
  if (v16 == 2) {
    operator new();
  }
}

void sub_1BAEEC4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  std::vector<std::unique_ptr<Resampler2>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  MEMORY[0x1C1859840](v48, 0x10A1C40B03752CALL);
  _Unwind_Resume(a1);
}

void std::default_delete<AMCP::DAL::DAL_Stereo_To_Mono_Mixer>::operator()[abi:ne180100](uint64_t a1)
{
  io_registry_entry_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C1859840);
}

void AMCP::DAL::PCM_Operation_Context::~PCM_Operation_Context(AMCP::DAL::PCM_Operation_Context *this)
{
  io_registry_entry_t v2 = (OpaqueAudioConverter *)*((void *)this + 6);
  if (v2) {
    AudioConverterDispose(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 21);
  if (v3)
  {
    *((void *)this + 22) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  signed int v5 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v6) {
    std::default_delete<AMCP::DAL::DAL_Stereo_To_Mono_Mixer>::operator()[abi:ne180100](v6);
  }
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v8) {
    MEMORY[0x1C1859840](v8, 0x1000C40D9C97D19);
  }
  int v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = *(void *)this;
  *(void *)this = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
}

double AMCP::DAL::PCM_Operation_Context::apply(uint64_t is_format_equivalent_besides_sample_rate, uint64_t *a2, double *a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  double v8 = a7;
  double v9 = a6;
  uint64_t v11 = is_format_equivalent_besides_sample_rate;
  uint64_t v207 = *MEMORY[0x1E4F143B8];
  double v170 = a3[1] - *a3;
  double v12 = a6 + v170;
  int v14 = *(char **)(is_format_equivalent_besides_sample_rate + 168);
  int v13 = *(char **)(is_format_equivalent_besides_sample_rate + 176);
  if (v14 == v13)
  {
    double v19 = a6;
    goto LABEL_175;
  }
  int v16 = *(char **)(is_format_equivalent_besides_sample_rate + 168);
  while (*(_DWORD *)v16 != 4)
  {
    v16 += 4;
    if (v16 == v13)
    {
      int v16 = *(char **)(is_format_equivalent_besides_sample_rate + 176);
      break;
    }
  }
  if (v16 != v13)
  {
    if (*(double *)(is_format_equivalent_besides_sample_rate + 88) != *(double *)(is_format_equivalent_besides_sample_rate
                                                                                 + 128))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_format_equivalent_besides_sample_rate);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__B, "com.apple.coreaudio", "AMCP");
      unint64_t v153 = **(NSObject ***)__B;
      if (*(void *)&__B[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__B[8]);
      }
      if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
      {
        long long v154 = pthread_self();
        mach_port_t v155 = pthread_mach_thread_np(v154);
        *(_DWORD *)__B = 67109890;
        *(_DWORD *)&__B[4] = v155;
        *(_WORD *)&__B[8] = 2080;
        *(void *)&__B[10] = "PCM_Operation_Context.cpp";
        *(_WORD *)&__B[18] = 1024;
        *(_DWORD *)&__B[20] = 219;
        *(_WORD *)&__B[24] = 2080;
        *(void *)&__B[26] = "not (m_source_format.mSampleRate == m_dest_format.mSampleRate)";
        _os_log_error_impl(&dword_1BAA78000, v153, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s direct copies should never have different sample rates", __B, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v178);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"direct copies should never have different sample rates", (uint64_t)&v176);
      std::logic_error::logic_error(&v174, &v176);
      v174.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v190, &v174);
      uint64_t v192 = 0;
      uint64_t v193 = 0;
      uint64_t v194 = 0;
      int v195 = -1;
      v190.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      float64x2_t v191 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__B, (uint64_t)&v190);
      *(void *)&__B[32] = "Sample_Time_Range AMCP::DAL::PCM_Operation_Context::apply(const Sample_Group<float> &, const"
                            " Sample_Time_Range &, Container, Sample_Time_Range, const DAL_Settings &) const";
      char v204 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
      int v205 = 219;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v189.__r_.__value_.__l.__data_);
      *(void *)&v180[0] = &unk_1F148AA90;
      *(std::string *)((char *)v180 + 8) = v189;
      memset(&v189, 0, sizeof(v189));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    if (v13 - v14 != 4)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_format_equivalent_besides_sample_rate);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__B, "com.apple.coreaudio", "AMCP");
      long long v156 = **(NSObject ***)__B;
      if (*(void *)&__B[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__B[8]);
      }
      if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
      {
        uint64_t v157 = pthread_self();
        mach_port_t v158 = pthread_mach_thread_np(v157);
        *(_DWORD *)__B = 67109890;
        *(_DWORD *)&__B[4] = v158;
        *(_WORD *)&__B[8] = 2080;
        *(void *)&__B[10] = "PCM_Operation_Context.cpp";
        *(_WORD *)&__B[18] = 1024;
        *(_DWORD *)&__B[20] = 220;
        *(_WORD *)&__B[24] = 2080;
        *(void *)&__B[26] = "not (m_order_of_operations.size() == 1)";
        _os_log_error_impl(&dword_1BAA78000, v156, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Change Clock operation should be processed only independently", __B, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v178);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Change Clock operation should be processed only independently", (uint64_t)&v176);
      std::logic_error::logic_error(&v174, &v176);
      v174.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v190, &v174);
      uint64_t v192 = 0;
      uint64_t v193 = 0;
      uint64_t v194 = 0;
      int v195 = -1;
      v190.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      float64x2_t v191 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__B, (uint64_t)&v190);
      *(void *)&__B[32] = "Sample_Time_Range AMCP::DAL::PCM_Operation_Context::apply(const Sample_Group<float> &, const"
                            " Sample_Time_Range &, Container, Sample_Time_Range, const DAL_Settings &) const";
      char v204 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
      int v205 = 220;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v189.__r_.__value_.__l.__data_);
      *(void *)&v180[0] = &unk_1F148AA90;
      *(std::string *)((char *)v180 + 8) = v189;
      memset(&v189, 0, sizeof(v189));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    double v17 = *(AMCP::DAL::PCM_Data_Handler **)a4;
    double v18 = *(std::__shared_weak_count **)(a4 + 8);
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AMCP::DAL::PCM_Operation_Context::copy_directly_to_destination(a2, v17, a6, a7);
    double v19 = v9;
    if (v18) {
      goto LABEL_179;
    }
    return v19;
  }
  unint64_t v20 = 0;
  double v166 = a7 - a6;
  uint64_t v165 = is_format_equivalent_besides_sample_rate + 128;
  long long v168 = (double *)(is_format_equivalent_besides_sample_rate + 88);
  char v171 = 1;
  double v19 = a6;
  while (2)
  {
    switch(*(_DWORD *)&v14[4 * v20])
    {
      case 0:
        if (!*(void *)(v11 + 24)) {
          goto LABEL_115;
        }
        double v22 = *a3;
        double v21 = a3[1];
        is_format_equivalent_besides_sample_rate = caulk::concurrent::atomic_value<AMCP::Graph::Wire_Volume_Connection::Volume_Parameters,2,6>::load((uint64_t)&v190, *(void *)(v11 + 8));
        if (v202) {
          goto LABEL_131;
        }
        float v23 = *(float *)&v190.__vftable;
        imp = v190.__imp_.__imp_;
        mach_port_t v25 = v191;
        char v26 = v196;
        long long v27 = *(_OWORD *)(v11 + 56);
        uint64_t v28 = *(void *)(v11 + 64);
        if (v28) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
        }
        *(_DWORD *)__B = 0;
        *(void *)&__B[8] = 0;
        *(void *)&__B[16] = 0;
        *(_OWORD *)&__B[24] = v27;
        if (v26)
        {
          *(void *)&__B[8] = imp;
          *(_DWORD *)__B = 2;
          int v29 = 3;
          if ((v26 & 2) == 0) {
            goto LABEL_77;
          }
        }
        else
        {
          int v29 = 1;
          if ((v26 & 2) == 0) {
            goto LABEL_77;
          }
        }
        *(void *)&__B[16] = v25;
        *(_DWORD *)__B = v29;
LABEL_77:
        double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)__B);
        if (*(void *)&__B[32]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__B[32]);
        }
        long long v75 = *(_OWORD *)(v11 + 56);
        uint64_t v76 = v197;
        uint64_t v77 = v198;
        char v78 = v199;
        uint64_t v79 = *(void *)(v11 + 64);
        if (v79) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v79 + 8), 1uLL, memory_order_relaxed);
        }
        *(_DWORD *)__B = 0;
        *(void *)&__B[8] = 0;
        *(void *)&__B[16] = 0;
        *(_OWORD *)&__B[24] = v75;
        if (v78)
        {
          *(void *)&__B[8] = v76;
          *(_DWORD *)__B = 2;
          int v80 = 3;
          if ((v78 & 2) == 0) {
            goto LABEL_86;
          }
        }
        else
        {
          int v80 = 1;
          if ((v78 & 2) == 0) {
            goto LABEL_86;
          }
        }
        *(void *)&__B[16] = v77;
        *(_DWORD *)__B = v80;
LABEL_86:
        double v81 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)__B);
        if (*(void *)&__B[32]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__B[32]);
        }
        double v82 = round(sample_time);
        double v83 = round(v22);
        if (v82 >= v83)
        {
          uint64_t v84 = *(void *)(v11 + 24);
          float v85 = v23;
          double v86 = sample_time;
          double v87 = v81;
LABEL_124:
          AMCP::DAL::DAL_Volume_Processor::set_ramp(v84, v85, v86, v87);
          goto LABEL_129;
        }
        double v88 = round(sample_time + v81);
        if (v82 < v88)
        {
          double v97 = round(v21);
          if (v97 >= v88) {
            double v98 = sample_time + v81;
          }
          else {
            double v98 = v21;
          }
          double v88 = round(v98);
          if (v83 >= v97) {
            double v88 = v97;
          }
        }
        else
        {
          double v83 = v82;
        }
        uint64_t v84 = *(void *)(v11 + 24);
        if (v83 < v88)
        {
          double v87 = v81 - (v22 - sample_time);
          float v85 = v23;
          double v86 = v22;
          goto LABEL_124;
        }
        float v99 = fmaxf(fminf(v23, 1.0), 0.0);
        *(float *)(v84 + 52) = v99;
        double v100 = *(double *)(v84 + 40);
        *(double *)(v84 + 56) = v22;
        *(double *)(v84 + 64) = v100;
        double v101 = (v99 - *(float *)(v84 + 48)) / v100;
        double v102 = ceil(v101 * 1000000.0);
        double v103 = floor(v101 * 1000000.0);
        if (v101 <= 0.0) {
          double v104 = v103;
        }
        else {
          double v104 = v102;
        }
        float v105 = v104 / 1000000.0;
        *(float *)(v84 + 72) = v105;
LABEL_129:
        uint64_t v106 = *(void *)(v11 + 8);
        is_format_equivalent_besides_sample_rate = caulk::concurrent::atomic_value<AMCP::Graph::Wire_Volume_Connection::Volume_Parameters,2,6>::load((uint64_t)__B, v106);
        double v8 = a7;
        if (!v206)
        {
          char v206 = 1;
          is_format_equivalent_besides_sample_rate = caulk::concurrent::atomic_value<AMCP::Graph::Wire_Volume_Connection::Volume_Parameters,2,6>::store(v106, (long long *)__B);
        }
LABEL_131:
        uint64_t v107 = *(void *)(v11 + 24);
        double v108 = *(double *)(v107 + 56);
        double v109 = v108 + *(double *)(v107 + 64);
        double v110 = round(v108);
        double v111 = round(v109);
        if (v110 < v111)
        {
          double v112 = round(v200);
          double v113 = round(v201);
          if (v112 < v113)
          {
            if (v110 < v112) {
              double v108 = v200;
            }
            if (v113 < v111) {
              double v109 = v201;
            }
            double v110 = round(v108);
            double v111 = round(v109);
          }
          else
          {
            double v111 = v113;
            double v110 = v112;
            double v109 = v201;
            double v108 = v200;
          }
        }
        if (v110 < v111)
        {
          if ((*(unsigned char *)(v107 + 12) & 0x20) != 0) {
            uint64_t v121 = 1;
          }
          else {
            uint64_t v121 = *(unsigned int *)(v107 + 28);
          }
          double v122 = v200;
          std::logic_error v124 = (float **)*a2;
          uint64_t v123 = a2[1];
          if (round(v200) < v110)
          {
            if (v124 == (float **)v123)
            {
              uint64_t v123 = *a2;
            }
            else
            {
              vDSP_Length v125 = v121 * vcvtmd_s64_f64(v108 - v200);
              do
              {
                unint64_t v126 = *v124;
                *(_DWORD *)__B = *(_DWORD *)(v107 + 48);
                vDSP_vsmul(v126, 1, (const float *)__B, v126, 1, v125);
                v124 += 2;
              }
              while (v124 != (float **)v123);
              std::logic_error v124 = (float **)*a2;
              uint64_t v123 = a2[1];
            }
          }
          if (v124 != (float **)v123)
          {
            unint64_t v127 = vcvtmd_s64_f64(v108) - vcvtmd_s64_f64(v122);
            unint64_t v128 = v127 * v121;
            unint64_t v129 = (v127 + vcvtmd_s64_f64(v109 - v108)) * v121;
            uint64_t v130 = 4 * v121 * v127;
            long long v131 = v124;
            do
            {
              float v132 = *(float *)(v107 + 48);
              if (v128 < v129)
              {
                int v133 = (float *)((char *)*v131 + v130);
                unint64_t v134 = v128;
                do
                {
                  int v135 = v133;
                  for (uint64_t i = v121; i; --i)
                  {
                    *int v135 = v132 * *v135;
                    ++v135;
                  }
                  float v137 = *(float *)(v107 + 72);
                  float v138 = v132 + v137;
                  if (v137 <= 0.0 || (float v132 = *(float *)(v107 + 52), v138 < v132))
                  {
                    if (v137 >= 0.0)
                    {
                      float v132 = v138;
                    }
                    else
                    {
                      float v132 = v138;
                      if (v138 <= *(float *)(v107 + 52)) {
                        float v132 = *(float *)(v107 + 52);
                      }
                    }
                  }
                  v134 += v121;
                  v133 += v121;
                }
                while (v134 < v129);
              }
              v131 += 2;
            }
            while (v131 != (float **)v123);
            *(float *)(v107 + 48) = v132;
            if (v111 < round(v201))
            {
              vDSP_Length v139 = v121 * vcvtmd_s64_f64(v201 - v109);
              unint64_t v140 = v121 * vcvtmd_s64_f64(v109 - v122);
              do
              {
                int v141 = &(*v124)[v140];
                *(_DWORD *)__B = *(_DWORD *)(v107 + 48);
                vDSP_vsmul(v141, 1, (const float *)__B, v141, 1, v139);
                v124 += 2;
              }
              while (v124 != (float **)v123);
            }
          }
        }
        else
        {
          float v115 = *(float *)(v107 + 48);
          uint64_t v114 = (const float *)(v107 + 48);
          float v116 = v115;
          if (v115 != 1.0)
          {
            uint64_t v117 = *a2;
            uint64_t v118 = a2[1];
            if (v116 == 0.0)
            {
              while (v117 != v118)
              {
                int v119 = *(float **)v117;
                uint64_t v120 = *(void *)(v117 + 8);
                v117 += 16;
                bzero(v119, 4 * v120);
              }
            }
            else
            {
              while (v117 != v118)
              {
                vDSP_vsmul(*(const float **)v117, 1, v114, *(float **)v117, 1, *(void *)(v117 + 8));
                v117 += 16;
              }
            }
          }
        }
        goto LABEL_115;
      case 1:
        is_format_equivalent_besides_sample_rate = *(void *)(v11 + 32);
        if (!is_format_equivalent_besides_sample_rate) {
          goto LABEL_115;
        }
        uint64_t v54 = ((v13 - v14) >> 2) - 1;
        AudioConverterRef v55 = *(AudioConverterRef *)v11;
        if (!*(void *)v11)
        {
          if (v20 != v54)
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_format_equivalent_besides_sample_rate);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__B, "com.apple.coreaudio", "AMCP");
            long long v162 = **(NSObject ***)__B;
            if (*(void *)&__B[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__B[8]);
            }
            if (os_log_type_enabled(v162, OS_LOG_TYPE_ERROR))
            {
              uint64_t v163 = pthread_self();
              mach_port_t v164 = pthread_mach_thread_np(v163);
              *(_DWORD *)__B = 67109890;
              *(_DWORD *)&__B[4] = v164;
              *(_WORD *)&__B[8] = 2080;
              *(void *)&__B[10] = "PCM_Operation_Context.cpp";
              *(_WORD *)&__B[18] = 1024;
              *(_DWORD *)&__B[20] = 260;
              *(_WORD *)&__B[24] = 2080;
              *(void *)&__B[26] = "not (is_last_command)";
              _os_log_error_impl(&dword_1BAA78000, v162, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s not intermediate buffer requires k_resampling to be the last command", __B, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v178);
            __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"not intermediate buffer requires k_resampling to be the last command", (uint64_t)&v176);
            std::logic_error::logic_error(&v174, &v176);
            v174.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
            std::logic_error::logic_error(&v190, &v174);
            uint64_t v192 = 0;
            uint64_t v193 = 0;
            uint64_t v194 = 0;
            int v195 = -1;
            v190.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
            float64x2_t v191 = &unk_1F1489CF0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__B, (uint64_t)&v190);
            *(void *)&__B[32] = "Sample_Time_Range AMCP::DAL::PCM_Operation_Context::apply(const Sample_Group<float> &,"
                                  " const Sample_Time_Range &, Container, Sample_Time_Range, const DAL_Settings &) const";
            char v204 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
            int v205 = 260;
            applesauce::backtrace::snapshot_N<64>::snapshot_N(&v189.__r_.__value_.__l.__data_);
            *(void *)&v180[0] = &unk_1F148AA90;
            *(std::string *)((char *)v180 + 8) = v189;
            memset(&v189, 0, sizeof(v189));
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
          }
          uint64_t v68 = *(void *)(a4 + 8);
          float64x2_t v187 = *(AMCP::DAL::PCM_Data_Handler **)a4;
          uint64_t v188 = v68;
          if (v68) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v68 + 8), 1uLL, memory_order_relaxed);
          }
          double v19 = (*(double (**)(uint64_t, uint64_t *, AMCP::DAL::PCM_Data_Handler **, uint64_t, double, double, double))(*(void *)is_format_equivalent_besides_sample_rate + 16))(is_format_equivalent_besides_sample_rate, a2, &v187, a5, v170, v9, v8);
          double v12 = v69;
          is_format_equivalent_besides_sample_rate = v188;
          if (v188) {
            goto LABEL_74;
          }
          goto LABEL_114;
        }
        if (v20 == v54)
        {
          if (!v20
            || ((uint64_t v56 = *((void *)v55 + 11)) == 0
              ? memset(__B, 0, sizeof(__B))
              : (void *)(*(_OWORD *)__B = *(_OWORD *)(v56 + 8),
                         *(_OWORD *)&__B[16] = *(_OWORD *)(v56 + 24),
                         *(void *)&__B[32] = *(void *)(v56 + 40)),
                is_format_equivalent_besides_sample_rate = AMCP::DAL::is_format_equivalent_besides_sample_rate(v165, (uint64_t)__B), (is_format_equivalent_besides_sample_rate & 1) == 0))
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_format_equivalent_besides_sample_rate);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__B, "com.apple.coreaudio", "AMCP");
            uint64_t v147 = **(NSObject ***)__B;
            if (*(void *)&__B[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__B[8]);
            }
            if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
            {
              int64x2_t v148 = pthread_self();
              mach_port_t v149 = pthread_mach_thread_np(v148);
              *(_DWORD *)__B = 67109890;
              *(_DWORD *)&__B[4] = v149;
              *(_WORD *)&__B[8] = 2080;
              *(void *)&__B[10] = "PCM_Operation_Context.cpp";
              *(_WORD *)&__B[18] = 1024;
              *(_DWORD *)&__B[20] = 269;
              *(_WORD *)&__B[24] = 2080;
              *(void *)&__B[26] = "not (intermediate_buffer_is_source)";
              _os_log_error_impl(&dword_1BAA78000, v147, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s multi processing operations requires an intermediate buffer", __B, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v178);
            __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"multi processing operations requires an intermediate buffer", (uint64_t)&v176);
            std::logic_error::logic_error(&v174, &v176);
            v174.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
            std::logic_error::logic_error(&v190, &v174);
            uint64_t v192 = 0;
            uint64_t v193 = 0;
            uint64_t v194 = 0;
            int v195 = -1;
            v190.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
            float64x2_t v191 = &unk_1F1489CF0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__B, (uint64_t)&v190);
            *(void *)&__B[32] = "Sample_Time_Range AMCP::DAL::PCM_Operation_Context::apply(const Sample_Group<float> &,"
                                  " const Sample_Time_Range &, Container, Sample_Time_Range, const DAL_Settings &) const";
            char v204 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
            int v205 = 269;
            applesauce::backtrace::snapshot_N<64>::snapshot_N(&v189.__r_.__value_.__l.__data_);
            *(void *)&v180[0] = &unk_1F148AA90;
            *(std::string *)((char *)v180 + 8) = v189;
            memset(&v189, 0, sizeof(v189));
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
          }
          unint64_t v93 = (std::__shared_weak_count *)*((void *)v55 + 12);
          if (v93) {
            atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>(v56);
          AMCP::DAL::PCM_Data_Handler::get_other_data<float>((unint64_t *)__B, (AMCP::DAL::PCM_Data_Handler *)v56, v19, v12);
          if (v93) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v93);
          }
          uint64_t v94 = *(void *)(v11 + 32);
          uint64_t v95 = *(std::__shared_weak_count **)(a4 + 8);
          float64x2_t v185 = *(AMCP::DAL::PCM_Data_Handler **)a4;
          int v186 = v95;
          if (v95) {
            atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          double v19 = (*(double (**)(uint64_t, unsigned char *, AMCP::DAL::PCM_Data_Handler **, uint64_t, double, double, double))(*(void *)v94 + 16))(v94, __B, &v185, a5, v12 - v19, v9, v8);
          double v12 = v96;
          float32x4_t v92 = v186;
          if (!v186) {
            goto LABEL_112;
          }
          goto LABEL_111;
        }
        uint64_t v72 = *((void *)v55 + 12);
        uint64_t v183 = *((void *)v55 + 11);
        uint64_t v184 = v72;
        if (v72) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v72 + 8), 1uLL, memory_order_relaxed);
        }
        double v19 = (*(double (**)(uint64_t, uint64_t *, uint64_t *, uint64_t, double, double, double))(*(void *)is_format_equivalent_besides_sample_rate + 16))(is_format_equivalent_besides_sample_rate, a2, &v183, a5, v170, 0.0, v166);
        double v12 = v73;
        is_format_equivalent_besides_sample_rate = v184;
        if (!v184) {
          goto LABEL_114;
        }
        goto LABEL_74;
      case 2:
        if (!*(void *)(v11 + 48)) {
          goto LABEL_115;
        }
        uint64_t v30 = ((v13 - v14) >> 2) - 1;
        AudioConverterRef v31 = *(AudioConverterRef *)v11;
        if (!*(void *)v11)
        {
          if (v20 != v30)
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_format_equivalent_besides_sample_rate);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__B, "com.apple.coreaudio", "AMCP");
            long long v159 = **(NSObject ***)__B;
            if (*(void *)&__B[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__B[8]);
            }
            if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
            {
              uint64_t v160 = pthread_self();
              mach_port_t v161 = pthread_mach_thread_np(v160);
              *(_DWORD *)__B = 67109890;
              *(_DWORD *)&__B[4] = v161;
              *(_WORD *)&__B[8] = 2080;
              *(void *)&__B[10] = "PCM_Operation_Context.cpp";
              *(_WORD *)&__B[18] = 1024;
              *(_DWORD *)&__B[20] = 291;
              *(_WORD *)&__B[24] = 2080;
              *(void *)&__B[26] = "not (is_last_command)";
              _os_log_error_impl(&dword_1BAA78000, v159, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s not intermediate buffer requires k_format_conversion to be the last command", __B, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v178);
            __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"not intermediate buffer requires k_format_conversion to be the last command", (uint64_t)&v176);
            std::logic_error::logic_error(&v174, &v176);
            v174.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
            std::logic_error::logic_error(&v190, &v174);
            uint64_t v192 = 0;
            uint64_t v193 = 0;
            uint64_t v194 = 0;
            int v195 = -1;
            v190.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
            float64x2_t v191 = &unk_1F1489CF0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__B, (uint64_t)&v190);
            *(void *)&__B[32] = "Sample_Time_Range AMCP::DAL::PCM_Operation_Context::apply(const Sample_Group<float> &,"
                                  " const Sample_Time_Range &, Container, Sample_Time_Range, const DAL_Settings &) const";
            char v204 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
            int v205 = 291;
            applesauce::backtrace::snapshot_N<64>::snapshot_N(&v189.__r_.__value_.__l.__data_);
            *(void *)&v180[0] = &unk_1F148AA90;
            *(std::string *)((char *)v180 + 8) = v189;
            memset(&v189, 0, sizeof(v189));
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
          }
          uint64_t v65 = *(void *)(a4 + 8);
          v182[0] = *(void *)a4;
          v182[1] = v65;
          if (v65) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v65 + 8), 1uLL, memory_order_relaxed);
          }
          double v66 = AMCP::DAL::PCM_Operation_Context::convert_audio_format((AudioConverterRef *)v11, a2, v168, v182, v170, v9, v8);
LABEL_69:
          double v19 = v66;
          double v12 = v67;
          if (v65)
          {
            is_format_equivalent_besides_sample_rate = v65;
LABEL_74:
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)is_format_equivalent_besides_sample_rate);
          }
          goto LABEL_114;
        }
        if (v20 != v30)
        {
          double v71 = *a3;
          double v70 = a3[1];
          uint64_t v65 = *((void *)v31 + 12);
          v172[0] = *((void *)v31 + 11);
          v172[1] = v65;
          if (v65) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v65 + 8), 1uLL, memory_order_relaxed);
          }
          double v66 = AMCP::DAL::PCM_Operation_Context::convert_audio_format((AudioConverterRef *)v11, a2, v168, v172, v170, 0.0, v70 - v71);
          goto LABEL_69;
        }
        uint64_t v32 = *((void *)v31 + 11);
        if (v32)
        {
          v180[0] = *(_OWORD *)(v32 + 8);
          v180[1] = *(_OWORD *)(v32 + 24);
          uint64_t v181 = *(void *)(v32 + 40);
          if (!v20) {
            goto LABEL_181;
          }
        }
        else
        {
          uint64_t v181 = 0;
          memset(v180, 0, sizeof(v180));
          if (!v20) {
            goto LABEL_181;
          }
        }
        is_format_equivalent_besides_sample_rate = AMCP::DAL::is_format_equivalent_besides_sample_rate((uint64_t)v168, (uint64_t)v180);
        if ((is_format_equivalent_besides_sample_rate & 1) == 0)
        {
LABEL_181:
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_format_equivalent_besides_sample_rate);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__B, "com.apple.coreaudio", "AMCP");
          float64x2_t v144 = **(NSObject ***)__B;
          if (*(void *)&__B[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__B[8]);
          }
          if (os_log_type_enabled(v144, OS_LOG_TYPE_ERROR))
          {
            CFArrayRef v145 = pthread_self();
            mach_port_t v146 = pthread_mach_thread_np(v145);
            *(_DWORD *)__B = 67109890;
            *(_DWORD *)&__B[4] = v146;
            *(_WORD *)&__B[8] = 2080;
            *(void *)&__B[10] = "PCM_Operation_Context.cpp";
            *(_WORD *)&__B[18] = 1024;
            *(_DWORD *)&__B[20] = 301;
            *(_WORD *)&__B[24] = 2080;
            *(void *)&__B[26] = "not (intermediate_buffer_is_source)";
            _os_log_error_impl(&dword_1BAA78000, v144, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s multi processing operations requires an intermediate buffer", __B, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v179);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"multi processing operations requires an intermediate buffer", (uint64_t)&v189);
          std::logic_error::logic_error(&v178, &v189);
          v178.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error(&v190, &v178);
          uint64_t v192 = 0;
          uint64_t v193 = 0;
          uint64_t v194 = 0;
          int v195 = -1;
          v190.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
          float64x2_t v191 = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__B, (uint64_t)&v190);
          *(void *)&__B[32] = "Sample_Time_Range AMCP::DAL::PCM_Operation_Context::apply(const Sample_Group<float> &, c"
                                "onst Sample_Time_Range &, Container, Sample_Time_Range, const DAL_Settings &) const";
          char v204 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
          int v205 = 301;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v174);
          *(std::logic_error *)&v176.__r_.__value_.__r.__words[1] = v174;
          uint64_t v177 = v175;
          v174.__vftable = 0;
          v174.__imp_.__imp_ = 0;
          uint64_t v175 = 0;
          v176.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        unint64_t v89 = (std::__shared_weak_count *)*((void *)v31 + 12);
        if (v89) {
          atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>(v32);
        AMCP::DAL::PCM_Data_Handler::get_other_data<float>((unint64_t *)__B, (AMCP::DAL::PCM_Data_Handler *)v32, v19, v12);
        if (v89) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v89);
        }
        uint64_t v90 = *(void *)(a4 + 8);
        v173[0] = *(void *)a4;
        v173[1] = v90;
        if (v90) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v90 + 8), 1uLL, memory_order_relaxed);
        }
        double v19 = AMCP::DAL::PCM_Operation_Context::convert_audio_format((AudioConverterRef *)v11, (uint64_t *)__B, (double *)v180, v173, v12 - v19, v9, v8);
        double v12 = v91;
        if (v90)
        {
          float32x4_t v92 = (std::__shared_weak_count *)v90;
LABEL_111:
          std::__shared_weak_count::__release_shared[abi:ne180100](v92);
        }
LABEL_112:
        is_format_equivalent_besides_sample_rate = *(void *)__B;
        if (*(void *)__B)
        {
          *(void *)&__B[8] = *(void *)__B;
          is_format_equivalent_besides_sample_rate = (uint64_t)std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](*(caulk::rt_safe_memory_resource **)__B, (uint64_t)(*(void *)&__B[16] - *(void *)__B) >> 4);
        }
LABEL_114:
        char v171 = 0;
LABEL_115:
        ++v20;
        int v14 = *(char **)(v11 + 168);
        int v13 = *(char **)(v11 + 176);
        if (v20 < (v13 - v14) >> 2) {
          continue;
        }
        if (v171)
        {
LABEL_175:
          if (*(double *)(v11 + 88) != *(double *)(v11 + 128))
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_format_equivalent_besides_sample_rate);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__B, "com.apple.coreaudio", "AMCP");
            float64x2_t v150 = **(NSObject ***)__B;
            if (*(void *)&__B[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__B[8]);
            }
            if (os_log_type_enabled(v150, OS_LOG_TYPE_ERROR))
            {
              long long v151 = pthread_self();
              mach_port_t v152 = pthread_mach_thread_np(v151);
              *(_DWORD *)__B = 67109890;
              *(_DWORD *)&__B[4] = v152;
              *(_WORD *)&__B[8] = 2080;
              *(void *)&__B[10] = "PCM_Operation_Context.cpp";
              *(_WORD *)&__B[18] = 1024;
              *(_DWORD *)&__B[20] = 318;
              *(_WORD *)&__B[24] = 2080;
              *(void *)&__B[26] = "not (m_source_format.mSampleRate == m_dest_format.mSampleRate)";
              _os_log_error_impl(&dword_1BAA78000, v150, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s direct copies should never have different sample rates", __B, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v178);
            __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"direct copies should never have different sample rates", (uint64_t)&v176);
            std::logic_error::logic_error(&v174, &v176);
            v174.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
            std::logic_error::logic_error(&v190, &v174);
            uint64_t v192 = 0;
            uint64_t v193 = 0;
            uint64_t v194 = 0;
            int v195 = -1;
            v190.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
            float64x2_t v191 = &unk_1F1489CF0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__B, (uint64_t)&v190);
            *(void *)&__B[32] = "Sample_Time_Range AMCP::DAL::PCM_Operation_Context::apply(const Sample_Group<float> &,"
                                  " const Sample_Time_Range &, Container, Sample_Time_Range, const DAL_Settings &) const";
            char v204 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
            int v205 = 318;
            applesauce::backtrace::snapshot_N<64>::snapshot_N(&v189.__r_.__value_.__l.__data_);
            *(void *)&v180[0] = &unk_1F148AA90;
            *(std::string *)((char *)v180 + 8) = v189;
            memset(&v189, 0, sizeof(v189));
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
          }
          int64x2_t v142 = *(AMCP::DAL::PCM_Data_Handler **)a4;
          double v18 = *(std::__shared_weak_count **)(a4 + 8);
          if (v18) {
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          AMCP::DAL::PCM_Operation_Context::copy_directly_to_destination(a2, v142, v9, v8);
          double v9 = v19;
          if (v18)
          {
LABEL_179:
            std::__shared_weak_count::__release_shared[abi:ne180100](v18);
            return v9;
          }
        }
        return v19;
      case 3:
        uint64_t v33 = *(void *)(v11 + 40);
        if (v33)
        {
          double v34 = a3[1] - *a3;
          if ((*(unsigned char *)(v33 + 12) & 0x20) != 0)
          {
            uint64_t v57 = *(unsigned int **)(v33 + 40);
            uint64_t v58 = *(void *)(v33 + 48) - (void)v57;
            *(float *)__B = (float)(unint64_t)(v58 >> 2);
            uint64_t v59 = (const float **)(*a2 + 16 * *v57);
            vDSP_Length v60 = vcvtmd_s64_f64(v34);
            if ((unint64_t)v58 >= 5)
            {
              unint64_t v61 = 1;
              do
              {
                vDSP_vadd(*(const float **)(*a2 + 16 * v57[v61++]), 1, *v59, 1, (float *)*v59, 1, v60);
                uint64_t v57 = *(unsigned int **)(v33 + 40);
              }
              while (v61 < (uint64_t)(*(void *)(v33 + 48) - (void)v57) >> 2);
            }
            vDSP_vsdiv(*v59, 1, (const float *)__B, (float *)*v59, 1, v60);
            uint64_t v62 = *(void *)(v33 + 40);
            if ((unint64_t)(*(void *)(v33 + 48) - v62) >= 5)
            {
              size_t v63 = 4 * v60;
              unint64_t v64 = 1;
              do
              {
                is_format_equivalent_besides_sample_rate = (uint64_t)memcpy(*(void **)(*a2+ 16* *(unsigned int *)(v62 + 4 * v64++)), *v59, v63);
                uint64_t v62 = *(void *)(v33 + 40);
              }
              while (v64 < (*(void *)(v33 + 48) - v62) >> 2);
            }
          }
          else
          {
            uint64_t v35 = *(unsigned int *)(v33 + 28);
            int64_t v36 = v35 * vcvtmd_s64_f64(v34);
            if (v36 >= 1)
            {
              int64_t v37 = 0;
              uint64_t v38 = *(unsigned int **)(v33 + 40);
              uint64_t v39 = *(void *)(v33 + 48) - (void)v38;
              uint64_t v40 = v39 >> 2;
              float v41 = (float)(unint64_t)(v39 >> 2);
              unsigned int v44 = *v38;
              __int16 v42 = v38 + 1;
              uint64_t v43 = v44;
              uint64_t v45 = *(void *)*a2;
              if ((unint64_t)(v39 >> 2) <= 2) {
                uint64_t v40 = 2;
              }
              uint64_t v46 = v40 - 1;
              do
              {
                uint64_t v47 = v37 + v43;
                float v48 = *(float *)(v45 + 4 * (v37 + v43));
                if ((unint64_t)v39 < 5)
                {
                  *(float *)(v45 + 4 * v47) = v48 / v41;
                }
                else
                {
                  unint64_t v49 = v42;
                  uint64_t v50 = v46;
                  do
                  {
                    unsigned int v51 = *v49++;
                    float v48 = *(float *)(v45 + 4 * (v37 + v51)) + v48;
                    *(float *)(v45 + 4 * v47) = v48;
                    --v50;
                  }
                  while (v50);
                  *(float *)(v45 + 4 * v47) = v48 / v41;
                  char v52 = v42;
                  is_format_equivalent_besides_sample_rate = v46;
                  do
                  {
                    unsigned int v53 = *v52++;
                    *(_DWORD *)(v45 + 4 * (v37 + v53)) = *(_DWORD *)(v45 + 4 * v47);
                    --is_format_equivalent_besides_sample_rate;
                  }
                  while (is_format_equivalent_besides_sample_rate);
                }
                v37 += v35;
              }
              while (v37 < v36);
            }
          }
        }
        goto LABEL_115;
      default:
        goto LABEL_115;
    }
  }
}

void sub_1BAEEE2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  if (a71) {
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](a71, (uint64_t)(STACK[0x200] - (void)a71) >> 4);
  }
  _Unwind_Resume(a1);
}

AMCP::Log::Scope_Registry *AMCP::DAL::PCM_Operation_Context::copy_directly_to_destination(uint64_t *a1, AMCP::DAL::PCM_Data_Handler *a2, double a3, double a4)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>((uint64_t)a2);
  AMCP::DAL::PCM_Data_Handler::get_other_data<float>((unint64_t *)&v33, a2, a3, a4);
  uint64_t result = v33;
  double v9 = (char *)v34;
  uint64_t v11 = *a1;
  uint64_t v10 = a1[1];
  if (v34 - v33 != v10 - *a1)
  {
    AMCP::Log::Scope_Registry::get(v33);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v16 = **(NSObject ***)buf;
    if (*(void *)v37) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v37);
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      double v17 = pthread_self();
      mach_port_t v18 = pthread_mach_thread_np(v17);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v18;
      *(_WORD *)int64_t v37 = 2080;
      *(void *)&void v37[2] = "PCM_Operation_Context.cpp";
      __int16 v38 = 1024;
      int v39 = 430;
      __int16 v40 = 2080;
      *(void *)float v41 = "not (dest_data.size() == samples.size())";
      _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s source and dest layout must be the same!", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"source and dest layout must be the same!", (uint64_t)&v24);
    std::logic_error::logic_error(&v25, &v24);
    v25.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v26, &v25);
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    int v31 = -1;
    v26.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v27 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v26);
    *(void *)&v41[6] = "void AMCP::DAL::PCM_Operation_Context::copy_directly_to_destination(const Sample_Group<float> &"
                         ", Container, Sample_Time_Range) const";
    __int16 v42 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
    int v43 = 430;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
    double v21 = &unk_1F148AA90;
    long long v22 = v19;
    uint64_t v23 = v20;
    long long v19 = 0uLL;
    uint64_t v20 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  BOOL v12 = v11 == v10 || v33 == v34;
  if (!v12)
  {
    uint64_t v13 = v11 + 16;
    int v14 = (char *)v33 + 16;
    do
    {
      unint64_t v15 = *((void *)v14 - 1);
      if (v15 >= *(void *)(v13 - 8)) {
        unint64_t v15 = *(void *)(v13 - 8);
      }
      if (v15)
      {
        memcpy(*((void **)v14 - 2), *(const void **)(v13 - 16), 4 * v15);
        uint64_t v10 = a1[1];
        double v9 = (char *)v34;
      }
      if (v13 == v10) {
        break;
      }
      v13 += 16;
      BOOL v12 = v14 == v9;
      v14 += 16;
    }
    while (!v12);
    uint64_t result = v33;
  }
  if (result)
  {
    double v34 = result;
    return std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](result, (v35 - (uint64_t)result) >> 4);
  }
  return result;
}

void sub_1BAEEE810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,char a28)
{
  uint64_t v30 = *(caulk::rt_safe_memory_resource **)(v28 - 152);
  if (v30)
  {
    *(void *)(v28 - 144) = v30;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](v30, (uint64_t)(*(void *)(v28 - 136) - (void)v30) >> 4);
  }
  _Unwind_Resume(exception_object);
}

BOOL AMCP::DAL::is_format_equivalent_besides_sample_rate(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) == *(void *)(a2 + 8)
      && *(void *)(a1 + 16) == *(void *)(a2 + 16)
      && *(void *)(a1 + 24) == *(void *)(a2 + 24)
      && *(_DWORD *)(a1 + 32) == (unint64_t)*(unsigned int *)(a2 + 32);
}

double AMCP::DAL::PCM_Operation_Context::convert_audio_format(AudioConverterRef *a1, uint64_t *a2, double *a3, uint64_t *a4, double a5, double a6, double a7)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (!a1[6])
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v19 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = pthread_self();
      mach_port_t v21 = pthread_mach_thread_np(v20);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v21;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "PCM_Operation_Context.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 372;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "not (m_audio_converter)";
      _os_log_error_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&outOutputData);
    std::logic_error::logic_error(&v35, &outOutputData);
    v35.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v37, &v35);
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    int v42 = -1;
    v37.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    __int16 v38 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v37);
    *(void *)&unsigned char buf[32] = "Sample_Time_Range AMCP::DAL::PCM_Operation_Context::convert_audio_format(const Sample_Group<fl"
                          "oat> &, Sample_Time, const CA::StreamDescription &, Container, Sample_Time_Range) const";
    float v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
    int v49 = 372;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v30);
    long long v45 = *(_OWORD *)v30;
    uint64_t v44 = (const AudioBufferList *)&unk_1F148AA90;
    uint64_t v46 = *(void *)&v30[16];
    memset(v30, 0, sizeof(v30));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  int v14 = (double *)*a4;
  if (*a4) {
    double v15 = v14[1];
  }
  else {
    double v15 = 0.0;
  }
  if (*a3 != v15)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v22 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = pthread_self();
      mach_port_t v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v24;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "PCM_Operation_Context.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 373;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "not (source_format.mSampleRate == dest_container.get_format().mSampleRate)";
      _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&outOutputData);
    std::logic_error::logic_error(&v35, &outOutputData);
    v35.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v37, &v35);
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    int v42 = -1;
    v37.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    __int16 v38 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v37);
    *(void *)&unsigned char buf[32] = "Sample_Time_Range AMCP::DAL::PCM_Operation_Context::convert_audio_format(const Sample_Group<fl"
                          "oat> &, Sample_Time, const CA::StreamDescription &, Container, Sample_Time_Range) const";
    float v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
    int v49 = 373;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v30);
    long long v45 = *(_OWORD *)v30;
    uint64_t v44 = (const AudioBufferList *)&unk_1F148AA90;
    uint64_t v46 = *(void *)&v30[16];
    memset(v30, 0, sizeof(v30));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>(*a4);
  AMCP::DAL::PCM_Data_Handler::get_other_data<float>((unint64_t *)&v35, (AMCP::DAL::PCM_Data_Handler *)v14, a6, a7);
  AMCP::DAL::create_abl((caulk::rt_safe_memory_resource **)&v44, a2, (uint64_t)a3);
  uint64_t v16 = *a4;
  if (*a4)
  {
    *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)(v16 + 8);
    *(_OWORD *)&buf[16] = *(_OWORD *)(v16 + 24);
    *(void *)&unsigned char buf[32] = *(void *)(v16 + 40);
  }
  else
  {
    memset(buf, 0, sizeof(buf));
  }
  AMCP::DAL::create_abl((caulk::rt_safe_memory_resource **)&outOutputData, (uint64_t *)&v35, (uint64_t)buf);
  double v17 = (AMCP::Log::Scope_Registry *)AudioConverterConvertComplexBuffer(a1[6], vcvtmd_s64_f64(a5), v44, (AudioBufferList *)outOutputData.__r_.__value_.__l.__data_);
  if (v17)
  {
    AMCP::Log::Scope_Registry::get(v17);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    std::logic_error v25 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      std::logic_error v26 = pthread_self();
      mach_port_t v27 = pthread_mach_thread_np(v26);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v27;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "PCM_Operation_Context.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 381;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "not (the_error == noErr)";
      _os_log_error_impl(&dword_1BAA78000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_Operation_Context::convert_audio_format: AudioConverterConvertComplexBuffer failed", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v34);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"PCM_Operation_Context::convert_audio_format: AudioConverterConvertComplexBuffer failed", (uint64_t)&v32);
    std::logic_error::logic_error(&v33, &v32);
    v33.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v37, &v33);
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    int v42 = -1;
    v37.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    __int16 v38 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v37);
    *(void *)&unsigned char buf[32] = "Sample_Time_Range AMCP::DAL::PCM_Operation_Context::convert_audio_format(const Sample_Group<fl"
                          "oat> &, Sample_Time, const CA::StreamDescription &, Container, Sample_Time_Range) const";
    float v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Operation_Context.cpp";
    int v49 = 381;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v28);
    *(void *)uint64_t v30 = &unk_1F148AA90;
    *(_OWORD *)&char v30[8] = v28;
    uint64_t v31 = v29;
    long long v28 = 0uLL;
    uint64_t v29 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100]((uint64_t *)&outOutputData, 0);
  std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](&outOutputData.__r_.__value_.__l.__size_);
  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100]((uint64_t *)&v44, 0);
  std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](&v45);
  if (v35.__vftable)
  {
    v35.__imp_.__imp_ = (const char *)v35.__vftable;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v35.__vftable, (int64_t)(v36 - (unint64_t)v35.__vftable) >> 4);
  }
  return a6;
}

void sub_1BAEEF0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,caulk::rt_safe_memory_resource *a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100]((uint64_t *)&a39, 0);
  std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](&a40);
  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100]((uint64_t *)(v44 - 216), 0);
  std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100]((void *)(v44 - 208));
  if (a29) {
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](a29, (a31 - (uint64_t)a29) >> 4);
  }
  _Unwind_Resume(a1);
}

uint64_t AMCP::IO_Core::Device::get_class_id(AMCP::IO_Core::Device *this)
{
  return 1684371054;
}

void AMCP::IO_Core::Device::~Device(AMCP::IO_Core::Device *this)
{
  AMCP::IO_Core::Node::~Node(this);

  JUMPOUT(0x1C1859840);
}

uint64_t AMCP::IO_Core::Device_Node_State::for_each_stream_connection(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = (void *)(result + 40 * a2 + 24);
  do
  {
    uint64_t v4 = (void *)*v4;
    if (!v4) {
      break;
    }
    uint64_t v5 = *(void *)(a3 + 24);
    if (!v5) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 48))(v5, v4 + 7);
  }
  while ((result & 1) != 0);
  return result;
}

uint64_t AMCP::IO_Core::Device_Node_State::for_each_stream_connection(uint64_t result, uint64_t a2)
{
  char v3 = 0;
  uint64_t v4 = 0;
  v9[1] = *MEMORY[0x1E4F143B8];
  v9[0] = 1;
  uint64_t v5 = result + 8;
  do
  {
    char v6 = v3;
    for (uint64_t i = *(void **)(v5 + 40 * *((unsigned int *)v9 + v4) + 16); i; uint64_t i = (void *)*i)
    {
      uint64_t v8 = *(void *)(a2 + 24);
      if (!v8) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 48))(v8, i + 7);
    }
    char v3 = 1;
    uint64_t v4 = 1;
  }
  while ((v6 & 1) == 0);
  return result;
}

void *std::__function::__value_func<void ()(AMCP::IO_Core::Stream_Connection &)>::~__value_func[abi:ne180100](void *a1)
{
  io_registry_entry_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_State::prepare_device(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::prepare_device(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_State::prepare_device(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::prepare_device(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core17Device_Node_State14prepare_deviceEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::prepare_device(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::prepare_device(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 208);
  if (v2)
  {
    if (!*(void *)(a2 + 272))
    {
      uint64_t v4 = operator new(0x28uLL);
      v4[1] = 0;
      v4[2] = 0;
      void *v4 = &unk_1F1480328;
      *(void *)&long long v5 = AMCP::DAL::File::File((AMCP::DAL::DALSupport *)(v4 + 3), *(_DWORD *)(a2 + 160), v2);
      *((void *)&v5 + 1) = v4;
      char v6 = *(std::__shared_weak_count **)(a2 + 280);
      *(_OWORD *)(a2 + 272) = v5;
      if (v6)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
  }
}

void sub_1BAEEF530(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::prepare_device(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::prepare_device(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1481BB0;
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_State::prepare_device(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::prepare_device(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F1481BB0;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::prepare_device(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::prepare_device(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::~__func()
{
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_State::set_cycle_meta_data_for_audio_capture(AMCP::Graph::IO_Proc_Cycle_Info const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::set_cycle_meta_data_for_audio_capture(AMCP::Graph::IO_Proc_Cycle_Info const&)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_State::set_cycle_meta_data_for_audio_capture(AMCP::Graph::IO_Proc_Cycle_Info const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::set_cycle_meta_data_for_audio_capture(AMCP::Graph::IO_Proc_Cycle_Info const&)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core17Device_Node_State37set_cycle_meta_data_for_audio_captureERKNS_5Graph18IO_Proc_Cycle_InfoEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::set_cycle_meta_data_for_audio_capture(AMCP::Graph::IO_Proc_Cycle_Info const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::set_cycle_meta_data_for_audio_capture(AMCP::Graph::IO_Proc_Cycle_Info const&)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::operator()(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 208)) {
    return;
  }
  char v3 = *(void **)(a1 + 8);
  uint64_t v4 = (AMCP::DAL::DAL_Time *)(a2 + 224);
  long long v5 = (AMCP::DAL::DAL_Time *)(v3 + 10);
  if (*(unsigned char *)(a2 + 264))
  {
    unint64_t host_time = AMCP::DAL::DAL_Time::get_host_time(v5);
    if (host_time <= AMCP::DAL::DAL_Time::get_host_time(v4)) {
      return;
    }
    if (*(unsigned char *)(a2 + 264))
    {
      *(_DWORD *)(a2 + 224) = *((_DWORD *)v3 + 20);
      *(void *)(a2 + 232) = v3[11];
      uint64_t v7 = v3[13];
      *(void *)(a2 + 240) = v3[12];
      uint64_t v8 = v3[14];
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      double v9 = *(std::__shared_weak_count **)(a2 + 256);
      *(void *)(a2 + 248) = v7;
      *(void *)(a2 + 256) = v8;
      if (v9)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      return;
    }
    long long v5 = (AMCP::DAL::DAL_Time *)(v3 + 10);
  }
  long long v10 = *(_OWORD *)v5;
  *((void *)v4 + 2) = *((void *)v5 + 2);
  *(_OWORD *)uint64_t v4 = v10;
  uint64_t v11 = v3[14];
  *(void *)(a2 + 248) = v3[13];
  *(void *)(a2 + 256) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a2 + 264) = 1;
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_State::set_cycle_meta_data_for_audio_capture(AMCP::Graph::IO_Proc_Cycle_Info const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::set_cycle_meta_data_for_audio_capture(AMCP::Graph::IO_Proc_Cycle_Info const&)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1481C40;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_State::set_cycle_meta_data_for_audio_capture(AMCP::Graph::IO_Proc_Cycle_Info const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::set_cycle_meta_data_for_audio_capture(AMCP::Graph::IO_Proc_Cycle_Info const&)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F1481C40;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::set_cycle_meta_data_for_audio_capture(AMCP::Graph::IO_Proc_Cycle_Info const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::set_cycle_meta_data_for_audio_capture(AMCP::Graph::IO_Proc_Cycle_Info const&)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::~__func()
{
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_State::end_processing(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::end_processing(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_State::end_processing(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::end_processing(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core17Device_Node_State14end_processingEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::end_processing(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::end_processing(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 280);
  *(void *)(a2 + 272) = 0;
  *(void *)(a2 + 280) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::end_processing(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::end_processing(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1481CC0;
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_State::end_processing(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::end_processing(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F1481CC0;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::end_processing(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::end_processing(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::~__func()
{
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core17Device_Node_State16register_buffersEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::operator()(uint64_t a1, uint64_t a2)
{
  v10[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a2 + 192);
  char v6 = *(std::__shared_weak_count **)(a2 + 200);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v5 + 56))(&v7);
  if (v7)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 56))(&v9);
  }
  else
  {
    uint64_t v9 = 0;
    void v10[3] = 0;
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  (*(void (**)(uint64_t, void, void, void, void))(*(void *)v4 + 384))(v4, *(unsigned int *)(a2 + 48), *(unsigned int *)(a2 + 40), *(unsigned int *)(v9 + 12), *(void *)(v9 + 16));
  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100](&v9, 0);
  std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](v10);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1BAEEFA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
    if (!v12)
    {
LABEL_3:
      if (!v11) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v12)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  if (!v11) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  goto LABEL_5;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::destroy(uint64_t a1)
{
  unint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1481D40;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1F1481D40;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::~__func(void *a1)
{
  *a1 = &unk_1F1481D40;
  unint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::register_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::~__func(void *a1)
{
  *a1 = &unk_1F1481D40;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core17Device_Node_State18unregister_buffersEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::operator()(uint64_t a1, uint64_t a2)
{
  v10[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a2 + 192);
  char v6 = *(std::__shared_weak_count **)(a2 + 200);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v5 + 56))(&v7);
  if (v7)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 56))(&v9);
  }
  else
  {
    uint64_t v9 = 0;
    void v10[3] = 0;
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  (*(void (**)(uint64_t, void, void, void, void))(*(void *)v4 + 392))(v4, *(unsigned int *)(a2 + 48), *(unsigned int *)(a2 + 40), *(unsigned int *)(v9 + 12), *(void *)(v9 + 16));
  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100](&v9, 0);
  std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](v10);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1BAEEFDF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
    if (!v12)
    {
LABEL_3:
      if (!v11) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v12)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  if (!v11) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  goto LABEL_5;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::destroy(uint64_t a1)
{
  unint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1481DC0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1F1481DC0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::~__func(void *a1)
{
  *a1 = &unk_1F1481DC0;
  unint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0,std::allocator<AMCP::IO_Core::Device_Node_State::unregister_buffers(void)::$_0>,void ()(AMCP::IO_Core::Stream_Connection &)>::~__func(void *a1)
{
  *a1 = &unk_1F1481DC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::Multi_Reader_Ring_Buffer  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN4AMCP3DAL24Multi_Reader_Ring_BufferEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::Multi_Reader_Ring_Buffer  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<AMCP::DAL::Multi_Reader_Ring_Buffer  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

BOOL CADeprecated::CAMutex::IsOwnedByCurrentThread(atomic_ullong *this)
{
  uint64_t v2 = pthread_self();
  return pthread_equal(v2, (pthread_t)atomic_load_explicit(this + 2, memory_order_acquire)) != 0;
}

BOOL CADeprecated::CAMutex::IsFree(atomic_ullong *this)
{
  return atomic_load_explicit(this + 2, memory_order_acquire) == 0;
}

uint64_t CADeprecated::CAMutex::Try(CADeprecated::CAMutex *this, BOOL *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  uint64_t v4 = pthread_self();
  if (pthread_equal(v4, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)this + 2, memory_order_acquire)))
  {
    BOOL v5 = 0;
  }
  else
  {
    int v6 = pthread_mutex_trylock((pthread_mutex_t *)((char *)this + 24));
    if (v6 == 16)
    {
      BOOL v5 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    if (v6)
    {
      v10[0] = HIBYTE(v6);
      v10[1] = BYTE2(v6);
      void v10[2] = BYTE1(v6);
      int v8 = v6;
      void v10[3] = v6;
      v10[4] = 0;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        BOOL v12 = "CAMutex.cpp";
        __int16 v13 = 1024;
        int v14 = 224;
        __int16 v15 = 1024;
        int v16 = v8;
        __int16 v17 = 2080;
        mach_port_t v18 = v10;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  CAMutex::Try: call to pthread_mutex_trylock failed, Error: %d (%s)", buf, 0x22u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      exception[2] = v8;
    }
    atomic_store((unint64_t)v4, (unint64_t *)this + 2);
    BOOL v5 = 1;
  }
  uint64_t result = 1;
LABEL_7:
  *a2 = v5;
  return result;
}

void CADeprecated::CAMutex::Unlock(CADeprecated::CAMutex *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = pthread_self();
  if (pthread_equal(v2, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)this + 2, memory_order_acquire)))
  {
    atomic_store(0, (unint64_t *)this + 2);
    int v3 = pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 24));
    if (v3)
    {
      int v4 = v3;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v6 = 136315394;
        uint64_t v7 = "CAMutex.cpp";
        __int16 v8 = 1024;
        int v9 = 152;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  CAMutex::Unlock: Could not unlock the mutex", (uint8_t *)&v6, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      exception[2] = v4;
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315394;
    uint64_t v7 = "CAMutex.cpp";
    __int16 v8 = 1024;
    int v9 = 160;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  CAMutex::Unlock: A thread is attempting to unlock a Mutex it doesn't own", (uint8_t *)&v6, 0x12u);
  }
}

BOOL CADeprecated::CAMutex::Lock(CADeprecated::CAMutex *this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = pthread_self();
  int v3 = pthread_equal(v2, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)this + 2, memory_order_acquire));
  if (!v3)
  {
    int v4 = pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
    if (v4)
    {
      int v6 = v4;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315394;
        int v9 = "CAMutex.cpp";
        __int16 v10 = 1024;
        int v11 = 106;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  CAMutex::Lock: Could not lock the mutex", (uint8_t *)&v8, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      exception[2] = v6;
    }
    atomic_store((unint64_t)v2, (unint64_t *)this + 2);
  }
  return v3 == 0;
}

void CADeprecated::CAMutex::~CAMutex(CADeprecated::CAMutex *this)
{
  CADeprecated::CAMutex::~CAMutex(this);

  JUMPOUT(0x1C1859840);
}

{
  *(void *)this = &unk_1F1481F70;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 24));
}

CADeprecated::CAMutex *CADeprecated::CAMutex::CAMutex(CADeprecated::CAMutex *this, const char *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F1481F70;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = 0;
  int v3 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 24), 0);
  if (v3)
  {
    int v5 = v3;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      int v8 = "CAMutex.cpp";
      __int16 v9 = 1024;
      int v10 = 56;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  CAMutex::CAMutex: Could not init the mutex", (uint8_t *)&v7, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v5;
  }
  return this;
}

void HALS_OverloadMessage::perform(HALS_OverloadMessage *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v14 = 0;
  uint64_t v2 = (HALS_ObjectMap *)*((unsigned int *)this + 1);
  uint64_t v3 = HALS_ObjectMap::CopyObjectByObjectID(v2);
  int v5 = (HALS_ObjectMap *)v3;
  if (v3)
  {
    v20.__loc_.__locale_ = (std::locale::__imp *)0x676C6F6261697273;
    LODWORD(v20.__ct_) = 0;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, HALS_ObjectMap *, std::regex_traits<char> *, void, void, void))(*(void *)v3 + 104))(v3, v2, &v20, 0, 0, 0);
    uint64_t v7 = v6;
    if (v6)
    {
      if (v6 >= 8)
      {
        uint64_t v8 = v6 >> 3;
        if (v6 >> 3)
        {
          __int16 v9 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v6 >> 3);
          bzero(v9, 8 * v8);
          int v14 = v9;
        }
        else
        {
          bzero(0, 0);
        }
      }
      LODWORD(v17) = 0;
      (*(void (**)(HALS_ObjectMap *, HALS_ObjectMap *, std::regex_traits<char> *, uint64_t, HALS_System **, void *, void, void, void))(*(void *)v5 + 112))(v5, v2, &v20, v7, &v17, v14, 0, 0, 0);
    }
  }
  HALS_ObjectMap::ReleaseObject(v5, v4);
  int v10 = (HALS_IOContext *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 1));
  if (v10)
  {
    __int16 v13 = v10;
    __int16 v15 = &unk_1F14898A0;
    CFDictionaryRef v16 = (CFDictionaryRef)HALS_IOContext::CopyDescription(v10);
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v18, v16, @"grid-in");
    if (v19) {
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v20, "[a-fA-F0-9:]{17}|[a-fA-F0-9]{12}|[a-fA-F0-9.]{5}|[a-fA-F0-9-]{4}");
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v18);
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>(v12, v16, @"grid-out");
    if (v19) {
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v20, "[a-fA-F0-9:]{17}|[a-fA-F0-9]{12}|[a-fA-F0-9.]{5}|[a-fA-F0-9-]{4}");
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v18);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v15);
    int v10 = v13;
  }
  HALS_ObjectMap::ReleaseObject(v10, v11);
  HALS_OverloadMessage::OverloadDictionary::AssembleDictionary();
}

void sub_1BAEF1258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, HALS_ObjectMap *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54,uint64_t a55,char a56)
{
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v56 - 240));
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v56 - 224));
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)(v56 - 192));
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v56 - 208));
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a41);
  HALS_ObjectMap::ReleaseObject(a11, v58);
  HALS_OverloadMessage::OverloadDictionary::~OverloadDictionary(&a17);
  _Unwind_Resume(a1);
}

void sub_1BAEF13C8(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAEF13D4);
  }
  JUMPOUT(0x1BAEF13DCLL);
}

void HALS_OverloadMessage::OverloadDictionary::AssembleDictionary()
{
}

void sub_1BAEF35B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,char a40,uint64_t a41,char a42,uint64_t a43,char a44,uint64_t a45,char a46,uint64_t a47,char a48,uint64_t a49,char a50,uint64_t a51,char a52,uint64_t a53,char a54,uint64_t a55,char a56,uint64_t a57,char a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  STACK[0x4C0] = (unint64_t)&STACK[0x4A8];
  std::vector<IOContextInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4C0]);
  _Block_object_dispose(&STACK[0x530], 8);
  STACK[0x4C0] = a25;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4C0]);
  if (STACK[0x4A0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x4A0]);
  }
  if (STACK[0x490]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x490]);
  }
  if (a31 < 0) {
    operator delete(__p);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a34);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a36);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a38);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a40);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a42);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a44);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a46);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a48);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a50);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a52);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a54);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a56);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a58);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a60);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a64);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a66);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a68);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a70);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a72);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a73);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x200]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x210]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x220]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x230]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x240]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x250]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x260]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x270]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x280]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x290]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x2A0]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x2B0]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x2C0]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x2D0]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x2E0]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x2F0]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x300]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x310]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x320]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x330]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x340]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x350]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x360]);
  MEMORY[0x1C1859840](a10, 0x1020C40374504DCLL);
  _Unwind_Resume(a1);
}

std::string *OverloadReasonSet::getOverloadReasonList(std::string *this, void *a2)
{
  uint64_t v2 = (uint64_t)this;
  if (*a2)
  {
    uint64_t v4 = 0;
    this->__r_.__value_.__r.__words[0] = 0;
    this->__r_.__value_.__l.__size_ = 0;
    this->__r_.__value_.__r.__words[2] = 0;
    while (((*a2 >> v4) & 1) == 0)
    {
LABEL_12:
      if (++v4 == 64) {
        return this;
      }
    }
    if (*(char *)(v2 + 23) < 0)
    {
      if (!*(void *)(v2 + 8))
      {
LABEL_9:
        int v5 = "PageFaultsOnIOThread";
        if ((v4 - 1) <= 5u) {
          int v5 = off_1E6235778[(v4 - 1)];
        }
        size_t v6 = strlen(v5);
        this = std::string::append((std::string *)v2, v5, v6);
        goto LABEL_12;
      }
    }
    else if (!*(unsigned char *)(v2 + 23))
    {
      goto LABEL_9;
    }
    std::string::append((std::string *)v2, ",", 1uLL);
    goto LABEL_9;
  }

  return (std::string *)std::string::basic_string[abi:ne180100]<0>(this, "Unknown");
}

void sub_1BAEF3A1C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_OverloadMessage::OverloadDictionary::~OverloadDictionary(void **this)
{
  if (*((char *)this + 183) < 0) {
    operator delete(this[20]);
  }
  if (*((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(this + 3));
  uint64_t v2 = *this;
  if (*this)
  {
    this[1] = v2;
    operator delete(v2);
  }
}

void *___Z28AudioStatisticsLibraryLoaderv_block_invoke_16387()
{
  uint64_t result = dlopen("/usr/lib/libAudioStatistics.dylib", 1);
  if (result)
  {
    uint64_t v1 = result;
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(result, "CreateSharedCAReportingClient");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientCreateReporterID");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientCreateReporterIDFromSessionID");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientCreatePerformanceReporterID");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientStartReporter");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientStopReporter");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientSetAudioServiceType");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientGetAudioServiceType");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientSetConfiguration");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientCopyConfiguration");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void, void, void))dlsym(v1, "CAReportingClientSendMessage");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void, void))dlsym(v1, "CAReportingClientSendSingleMessage");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientDestroyReporterID");
    uint64_t result = dlsym(v1, "CAReportingClientRequestMessage");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)result;
  }
  return result;
}

void *OS::CF::Number::Number<unsigned long long>(void *a1, uint64_t a2)
{
  uint64_t valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
  *a1 = &unk_1F14899D0;
  a1[1] = v3;
  return a1;
}

void *OS::CF::Number::Number<double>(void *a1, double a2)
{
  double valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  *a1 = &unk_1F14899D0;
  a1[1] = v3;
  return a1;
}

void *OS::CF::Number::Number<long long>(void *a1, uint64_t a2)
{
  uint64_t valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
  *a1 = &unk_1F14899D0;
  a1[1] = v3;
  return a1;
}

uint64_t GetTransportType(const HALS_Device *a1)
{
  uint64_t v1 = *((unsigned int *)a1 + 4);
  uint64_t v5 = 0x676C6F627472616ELL;
  int v6 = 0;
  unsigned int v3 = 0;
  int v4 = 4;
  (*(void (**)(const HALS_Device *, uint64_t, uint64_t *, uint64_t, int *, unsigned int *, void, void, void))(*(void *)a1 + 112))(a1, v1, &v5, 4, &v4, &v3, 0, 0, 0);
  return v3;
}

const char *GetDeviceTransportName(int a1)
{
  if (a1 > 1735554415)
  {
    if (a1 > 1953002861)
    {
      if (a1 > 1986622067)
      {
        if (a1 == 1986622068) {
          return "Virtual";
        }
        if (a1 == 1986818665) {
          return "SystemCapture";
        }
      }
      else
      {
        if (a1 == 1953002862) {
          return "Thunderbolt";
        }
        if (a1 == 1970496032) {
          return "USB";
        }
      }
    }
    else if (a1 > 1835169138)
    {
      if (a1 == 1835169139) {
        return "MikeyBus";
      }
      if (a1 == 1885563168) {
        return "PCI";
      }
    }
    else
    {
      if (a1 == 1735554416) {
        return "Aggregate";
      }
      if (a1 == 1751412073) {
        return "HDMI";
      }
    }
  }
  else if (a1 > 1651275108)
  {
    if (a1 > 1685090931)
    {
      if (a1 == 1685090932) {
        return "DisplayPort";
      }
      if (a1 == 1700886114) {
        return "AVB";
      }
    }
    else
    {
      if (a1 == 1651275109) {
        return "Bluetooth";
      }
      if (a1 == 1668506482) {
        return "ContinuityScreen";
      }
    }
  }
  else if (a1 > 1651271008)
  {
    if (a1 == 1651271009) {
      return "BluetoothLE";
    }
    if (a1 == 1651274862) {
      return "BuiltIn";
    }
  }
  else
  {
    if (a1 == 825440564) {
      return "FireWire";
    }
    if (a1 == 1634300528) {
      return "AirPlay";
    }
  }
  return "Unknown";
}

uint64_t GetMasterDataSourceValue(const HALS_Device *a1, int a2)
{
  if (a2) {
    uint64_t v2 = 1768845428;
  }
  else {
    uint64_t v2 = 1869968496;
  }
  unsigned int v3 = (HALS_Control *)(*(uint64_t (**)(const HALS_Device *, uint64_t, uint64_t, void))(*(void *)a1 + 640))(a1, 1685287523, v2, 0);
  uint64_t v5 = v3;
  if (v3) {
    uint64_t SelectorControlValue = HALS_Control::GetSelectorControlValue(v3);
  }
  else {
    uint64_t SelectorControlValue = 0;
  }
  HALS_ObjectMap::ReleaseObject(v5, v4);
  return SelectorControlValue;
}

void sub_1BAEF40C0(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

const char *GetMasterDataSourceName(int a1)
{
  if (a1 > 1768778082)
  {
    if (a1 > 1818848868)
    {
      if (a1 == 1818848869) {
        return "Line";
      }
      if (a1 == 1936745574) {
        return "SPDIF";
      }
    }
    else
    {
      if (a1 == 1768778083) {
        return "Internal Microphone";
      }
      if (a1 == 1769173099) {
        return "Internal Speaker";
      }
    }
  }
  else if (a1 > 1702064234)
  {
    if (a1 == 1702064235) {
      return "External Speaker";
    }
    if (a1 == 1751412846) {
      return "Headphones";
    }
  }
  else
  {
    if (a1 == 1667506208) {
      return "CD";
    }
    if (a1 == 1701669219) {
      return "External Microphone";
    }
  }
  return "Unknown";
}

uint64_t AMCP::get_box_property_traits_list(AMCP *this)
{
  {
    AMCP::get_box_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::get_box_property_traits_list(void)::once, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    unsigned int v3 = &v4;
    std::__call_once(&AMCP::get_box_property_traits_list(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_box_property_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_box_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_box_property_traits_list(void)::$_0 &&>>()
{
  void v27[6] = *MEMORY[0x1E4F143B8];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v0, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v1, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v2, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v3, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v4, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v5, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v6, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v7, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v8, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v9, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1651861860, 1, 1, 0, &AMCP::Property_Traits<1651861860u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1953653102u>::k_valid_scopes, 0, 1651861860, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1953653102, 1, 0, 0, &AMCP::Property_Traits<1953653102u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651007861u>::k_valid_scopes, 0, 1953653102, 23);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1651007861, 1, 0, 0, &AMCP::Property_Traits<1651007861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651013225u>::k_valid_scopes, 0, 1651007861, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v21, 1651013225, 1, 0, 0, &AMCP::Property_Traits<1651013225u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651010921u>::k_valid_scopes, 0, 1651013225, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v22, 1651010921, 1, 0, 0, &AMCP::Property_Traits<1651010921u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651536495u>::k_valid_scopes, 0, 1651010921, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v23, 1651536495, 1, 0, 0, &AMCP::Property_Traits<1651536495u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1652060014u>::k_valid_scopes, 0, 1651536495, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v24, 1652060014, 1, 0, 1, &AMCP::Property_Traits<1652060014u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1652060006u>::k_valid_scopes, 0, 1652060014, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v25, 1652060006, 1, 0, 0, &AMCP::Property_Traits<1652060006u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650751011u>::k_valid_scopes, 0, 1652060006, 24);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v26, 1650751011, 1, 0, 0, &AMCP::Property_Traits<1650751011u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682915u>::k_valid_scopes, 0, 0, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v27, 1650682915, 1, 0, 0, &AMCP::Property_Traits<1650682915u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1969841184u>::k_valid_scopes, 0, 0, 14);
  operator new();
}

void sub_1BAEF4A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v16 = v15;
  *(void *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1C1859840](v14, 0x20C40960023A9);
  uint64_t v18 = 1344;
  while (1)
  {
    uint64_t v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(void *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18) {
      _Unwind_Resume(a1);
    }
  }
}

void AMCP::IOAudio2::Control::~Control(AMCP::IOAudio2::Control *this)
{
  AMCP::IOAudio2::Control::~Control(this);

  JUMPOUT(0x1C1859840);
}

{
  AMCP::Log::Scope_Registry *v2;
  int v3;
  NSObject *v4;
  _opaque_pthread_t *v5;
  mach_port_t v6;
  int v7;
  NSObject *v8;
  os_log_type_t v9;
  NSObject *v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  int v13;
  NSObject *v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint8_t buf[8];
  unsigned char v21[10];
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F1482728;
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v18, "com.apple.coreaudio", "AMCP");
  uint64_t v3 = *(_DWORD *)(v18 + 16);
  switch(v3)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v10 = **(NSObject ***)buf;
      if (*(void *)v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v21);
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = pthread_self();
        uint64_t v12 = pthread_mach_thread_np(v11);
        uint64_t v13 = *((_DWORD *)this + 8);
        *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v12;
        *(_WORD *)uint64_t v21 = 2080;
        *(void *)&v21[2] = "IOAudio2_Control.cpp";
        uint64_t v22 = 1024;
        uint64_t v23 = 56;
        uint64_t v24 = 1024;
        uint64_t v25 = v13;
        uint64_t v8 = v10;
        uint64_t v9 = OS_LOG_TYPE_INFO;
        goto LABEL_12;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v14 = **(NSObject ***)buf;
      if (*(void *)v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v21);
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v15 = pthread_self();
        uint64_t v16 = pthread_mach_thread_np(v15);
        uint64_t v17 = *((_DWORD *)this + 8);
        *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v16;
        *(_WORD *)uint64_t v21 = 2080;
        *(void *)&v21[2] = "IOAudio2_Control.cpp";
        uint64_t v22 = 1024;
        uint64_t v23 = 56;
        uint64_t v24 = 1024;
        uint64_t v25 = v17;
        _os_log_debug_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Tore down Control with object id %u", buf, 0x1Eu);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v4 = **(NSObject ***)buf;
      if (*(void *)v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v21);
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = pthread_self();
        uint64_t v6 = pthread_mach_thread_np(v5);
        uint64_t v7 = *((_DWORD *)this + 8);
        *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v6;
        *(_WORD *)uint64_t v21 = 2080;
        *(void *)&v21[2] = "IOAudio2_Control.cpp";
        uint64_t v22 = 1024;
        uint64_t v23 = 56;
        uint64_t v24 = 1024;
        uint64_t v25 = v7;
        uint64_t v8 = v4;
        uint64_t v9 = OS_LOG_TYPE_DEFAULT;
LABEL_12:
        _os_log_impl(&dword_1BAA78000, v8, v9, "%6u %32s:%-5d Tore down Control with object id %u", buf, 0x1Eu);
      }
      break;
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  AMCP::IOAudio2::Device_Sub_Object::~Device_Sub_Object(this);
}

void sub_1BAEF4D64(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AMCP::IOAudio2::Control::build_core(AMCP::IOAudio2::Control *this)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(*(void *)(**((void **)this + 3) + 32)
                                                                                                + 16));
  *((_DWORD *)this + 8) = v2;
  *(_OWORD *)unint64_t v64 = 0u;
  *(_OWORD *)uint64_t v65 = 0u;
  int v66 = 1065353216;
  AMCP::Log::Scope_Registry::get(v2);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v62, "com.apple.coreaudio", "AMCP");
  int v4 = *(_DWORD *)(v62 + 16);
  switch(v4)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v3);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      std::logic_error v33 = **(NSObject ***)buf;
      if (*(void *)v68) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v68);
      }
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        char v34 = pthread_self();
        mach_port_t v35 = pthread_mach_thread_np(v34);
        int v36 = *((_DWORD *)this + 8);
        unsigned int v37 = *((_DWORD *)this + 12);
        v38.i32[0] = bswap32(*((_DWORD *)this + 13));
        int8x8_t v39 = vzip1_s8(v38, v38);
        v40.i64[0] = 0x1F0000001FLL;
        v40.i64[1] = 0x1F0000001FLL;
        v41.i64[0] = 0x1F0000001FLL;
        v41.i64[1] = 0x1F0000001FLL;
        v42.i64[0] = 0x5F0000005FLL;
        v42.i64[1] = 0x5F0000005FLL;
        *(int8x8_t *)v43.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v42, (uint32x4_t)vsraq_n_s32(v41, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v39), 0x18uLL), 0x18uLL))), v39, (int8x8_t)0x2E002E002E002ELL);
        char v61 = 4;
        *(int8x8_t *)v43.i8 = vmovn_s16(v43);
        LODWORD(v59) = v43.i32[0];
        BYTE4(v59) = 0;
        v43.i32[0] = bswap32(v37);
        *(int8x8_t *)v43.i8 = vzip1_s8(*(int8x8_t *)v43.i8, *(int8x8_t *)v43.i8);
        v44.i64[0] = 0x1F0000001FLL;
        v44.i64[1] = 0x1F0000001FLL;
        *(int8x8_t *)v43.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v42, (uint32x4_t)vsraq_n_s32(v44, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v43.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v43.i8, (int8x8_t)0x2E002E002E002ELL);
        char v58 = 4;
        *(int8x8_t *)v43.i8 = vmovn_s16(v43);
        LODWORD(v56) = v43.i32[0];
        BYTE4(v56) = 0;
        int v45 = *((_DWORD *)this + 15);
        v43.i32[0] = bswap32(*((_DWORD *)this + 14));
        *(int8x8_t *)v43.i8 = vzip1_s8(*(int8x8_t *)v43.i8, *(int8x8_t *)v43.i8);
        char v55 = 4;
        *(int8x8_t *)v43.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v42, (uint32x4_t)vsraq_n_s32(v40, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v43.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v43.i8, (int8x8_t)0x2E002E002E002ELL);
        LODWORD(__p[0]) = vmovn_s16(v43).u32[0];
        BYTE4(__p[0]) = 0;
        *(_DWORD *)AudioObjectPropertyAddress buf = 67110914;
        *(_DWORD *)&uint8_t buf[4] = v35;
        *(_WORD *)uint64_t v68 = 2080;
        *(void *)&v68[2] = "IOAudio2_Control.cpp";
        __int16 v69 = 1024;
        int v70 = 64;
        __int16 v71 = 1024;
        int v72 = v36;
        __int16 v73 = 2080;
        int v74 = &v59;
        __int16 v75 = 2080;
        uint64_t v76 = &v56;
        __int16 v77 = 2080;
        char v78 = __p;
        __int16 v79 = 1024;
        int v80 = v45;
        uint64_t v18 = v33;
        os_log_type_t v19 = OS_LOG_TYPE_INFO;
        goto LABEL_16;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v3);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v20 = **(NSObject ***)buf;
      if (*(void *)v68) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v68);
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v21 = pthread_self();
        mach_port_t v22 = pthread_mach_thread_np(v21);
        int v23 = *((_DWORD *)this + 8);
        unsigned int v24 = *((_DWORD *)this + 12);
        v25.i32[0] = bswap32(*((_DWORD *)this + 13));
        int8x8_t v26 = vzip1_s8(v25, v25);
        v27.i64[0] = 0x1F0000001FLL;
        v27.i64[1] = 0x1F0000001FLL;
        v28.i64[0] = 0x1F0000001FLL;
        v28.i64[1] = 0x1F0000001FLL;
        v29.i64[0] = 0x5F0000005FLL;
        v29.i64[1] = 0x5F0000005FLL;
        *(int8x8_t *)v30.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v29, (uint32x4_t)vsraq_n_s32(v28, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v26), 0x18uLL), 0x18uLL))), v26, (int8x8_t)0x2E002E002E002ELL);
        char v61 = 4;
        *(int8x8_t *)v30.i8 = vmovn_s16(v30);
        LODWORD(v59) = v30.i32[0];
        BYTE4(v59) = 0;
        v30.i32[0] = bswap32(v24);
        *(int8x8_t *)v30.i8 = vzip1_s8(*(int8x8_t *)v30.i8, *(int8x8_t *)v30.i8);
        v31.i64[0] = 0x1F0000001FLL;
        v31.i64[1] = 0x1F0000001FLL;
        *(int8x8_t *)v30.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v29, (uint32x4_t)vsraq_n_s32(v31, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v30.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v30.i8, (int8x8_t)0x2E002E002E002ELL);
        char v58 = 4;
        *(int8x8_t *)v30.i8 = vmovn_s16(v30);
        LODWORD(v56) = v30.i32[0];
        BYTE4(v56) = 0;
        int v32 = *((_DWORD *)this + 15);
        v30.i32[0] = bswap32(*((_DWORD *)this + 14));
        *(int8x8_t *)v30.i8 = vzip1_s8(*(int8x8_t *)v30.i8, *(int8x8_t *)v30.i8);
        char v55 = 4;
        *(int8x8_t *)v30.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v29, (uint32x4_t)vsraq_n_s32(v27, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v30.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v30.i8, (int8x8_t)0x2E002E002E002ELL);
        LODWORD(__p[0]) = vmovn_s16(v30).u32[0];
        BYTE4(__p[0]) = 0;
        *(_DWORD *)AudioObjectPropertyAddress buf = 67110914;
        *(_DWORD *)&uint8_t buf[4] = v22;
        *(_WORD *)uint64_t v68 = 2080;
        *(void *)&v68[2] = "IOAudio2_Control.cpp";
        __int16 v69 = 1024;
        int v70 = 64;
        __int16 v71 = 1024;
        int v72 = v23;
        __int16 v73 = 2080;
        int v74 = &v59;
        __int16 v75 = 2080;
        uint64_t v76 = &v56;
        __int16 v77 = 2080;
        char v78 = __p;
        __int16 v79 = 1024;
        int v80 = v32;
        _os_log_debug_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Building Core %u for Control (%s, %s, %s, %u)", buf, 0x42u);
LABEL_17:
        if (v55 < 0) {
          operator delete(__p[0]);
        }
        if (v58 < 0) {
          operator delete(v56);
        }
        if (v61 < 0) {
          operator delete(v59);
        }
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v3);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v5 = **(NSObject ***)buf;
      if (*(void *)v68) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v68);
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = pthread_self();
        mach_port_t v7 = pthread_mach_thread_np(v6);
        int v8 = *((_DWORD *)this + 8);
        unsigned int v9 = *((_DWORD *)this + 12);
        v10.i32[0] = bswap32(*((_DWORD *)this + 13));
        int8x8_t v11 = vzip1_s8(v10, v10);
        v12.i64[0] = 0x1F0000001FLL;
        v12.i64[1] = 0x1F0000001FLL;
        v13.i64[0] = 0x1F0000001FLL;
        v13.i64[1] = 0x1F0000001FLL;
        v14.i64[0] = 0x5F0000005FLL;
        v14.i64[1] = 0x5F0000005FLL;
        *(int8x8_t *)v15.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v14, (uint32x4_t)vsraq_n_s32(v13, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v11), 0x18uLL), 0x18uLL))), v11, (int8x8_t)0x2E002E002E002ELL);
        char v61 = 4;
        *(int8x8_t *)v15.i8 = vmovn_s16(v15);
        LODWORD(v59) = v15.i32[0];
        BYTE4(v59) = 0;
        v15.i32[0] = bswap32(v9);
        *(int8x8_t *)v15.i8 = vzip1_s8(*(int8x8_t *)v15.i8, *(int8x8_t *)v15.i8);
        v16.i64[0] = 0x1F0000001FLL;
        v16.i64[1] = 0x1F0000001FLL;
        *(int8x8_t *)v15.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v14, (uint32x4_t)vsraq_n_s32(v16, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v15.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v15.i8, (int8x8_t)0x2E002E002E002ELL);
        char v58 = 4;
        *(int8x8_t *)v15.i8 = vmovn_s16(v15);
        LODWORD(v56) = v15.i32[0];
        BYTE4(v56) = 0;
        int v17 = *((_DWORD *)this + 15);
        v15.i32[0] = bswap32(*((_DWORD *)this + 14));
        *(int8x8_t *)v15.i8 = vzip1_s8(*(int8x8_t *)v15.i8, *(int8x8_t *)v15.i8);
        char v55 = 4;
        *(int8x8_t *)v15.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v14, (uint32x4_t)vsraq_n_s32(v12, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v15.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v15.i8, (int8x8_t)0x2E002E002E002ELL);
        LODWORD(__p[0]) = vmovn_s16(v15).u32[0];
        BYTE4(__p[0]) = 0;
        *(_DWORD *)AudioObjectPropertyAddress buf = 67110914;
        *(_DWORD *)&uint8_t buf[4] = v7;
        *(_WORD *)uint64_t v68 = 2080;
        *(void *)&v68[2] = "IOAudio2_Control.cpp";
        __int16 v69 = 1024;
        int v70 = 64;
        __int16 v71 = 1024;
        int v72 = v8;
        __int16 v73 = 2080;
        int v74 = &v59;
        __int16 v75 = 2080;
        uint64_t v76 = &v56;
        __int16 v77 = 2080;
        char v78 = __p;
        __int16 v79 = 1024;
        int v80 = v17;
        uint64_t v18 = v5;
        os_log_type_t v19 = OS_LOG_TYPE_DEFAULT;
LABEL_16:
        _os_log_impl(&dword_1BAA78000, v18, v19, "%6u %32s:%-5d Building Core %u for Control (%s, %s, %s, %u)", buf, 0x42u);
        goto LABEL_17;
      }
      break;
  }
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  LODWORD(v59) = *((_DWORD *)this + 8);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v59, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v64, (unsigned int *)(*(void *)buf + 40), buf);
  if (*(void *)v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v68);
  }
  LODWORD(v59) = *((_DWORD *)this + 13);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v59, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v64, (unsigned int *)(*(void *)buf + 40), buf);
  if (*(void *)v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v68);
  }
  LODWORD(v59) = *((_DWORD *)this + 12);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v59, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v64, (unsigned int *)(*(void *)buf + 40), buf);
  if (*(void *)v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v68);
  }
  LODWORD(v59) = *(_DWORD *)(*((void *)this + 3) + 16);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v59, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v64, (unsigned int *)(*(void *)buf + 40), buf);
  if (*(void *)v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v68);
  }
  uint64_t v46 = (__CFString *)CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.iokit.IOAudio2", 24, 0x8000100u, 0);
  uint64_t v56 = v46;
  if (!v46)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v59 = (void *)0x676C6F626F706C67;
  LODWORD(v60) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)buf, (uint64_t)&v59, v46);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v64, (unsigned int *)(*(void *)buf + 40), buf);
  if (*(void *)v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v68);
  }
  CFRelease(v46);
  int v47 = *((_DWORD *)this + 8);
  *(void *)AudioObjectPropertyAddress buf = *(void *)(*(void *)(**((void **)this + 3) + 32) + 16);
  *(_DWORD *)uint64_t v68 = v47;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>((uint64_t *)&v59, 0, (long long *)buf, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v64, (unsigned int *)v59 + 10, &v59);
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  LODWORD(v59) = *((_DWORD *)this + 14);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v59, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v64, (unsigned int *)(*(void *)buf + 40), buf);
  if (*(void *)v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v68);
  }
  LODWORD(v59) = *((_DWORD *)this + 15);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v59, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v64, (unsigned int *)(*(void *)buf + 40), buf);
  if (*(void *)v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v68);
  }
  CFDictionaryRef v48 = (const __CFDictionary *)*((void *)this + 5);
  if (!v48)
  {
    unsigned int v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v51, "Could not construct");
    __cxa_throw(v51, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(buf, v48, @"name");
  if (v68[0])
  {
    uint64_t v56 = (void *)0x676C6F626C6E616DLL;
    int v57 = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)&v59, (uint64_t)&v56, *(CFTypeRef *)buf);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v64, (unsigned int *)v59 + 10, &v59);
    if (v60) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v60);
    }
  }
  AMCP::IOAudio2::Control::update_value((uint64_t)this, (uint64_t)v64);
  AMCP::IOAudio2::Control::update_range((uint64_t)this, (uint64_t)v64);
  AMCP::Core::Broker::make_core(&v52, *(std::__shared_mutex_base **)(*(void *)(**((void **)this + 3) + 32) + 16), (uint64_t)v64, *((_DWORD *)this + 8));
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((void *)v65[0]);
  int v49 = v64[0];
  v64[0] = 0;
  if (v49) {
    operator delete(v49);
  }
}

void sub_1BAEF56AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, ...)
{
  va_start(va, a15);
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void AMCP::IOAudio2::Control::update_value(uint64_t a1, uint64_t a2)
{
  uint64_t v187 = *MEMORY[0x1E4F143B8];
  if (AMCP::is_base_of((AMCP *)0x736C6472, *(_DWORD *)(a1 + 52)))
  {
    CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 40);
    if (v3)
    {
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, v3, @"value");
      if (!*(void *)cf)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v4 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)cf);
      uint64_t v5 = (std::__shared_weak_count *)operator new(0x20uLL);
      v5->__shared_owners_ = 0;
      v5->__shared_weak_owners_ = 0;
      v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14827F8;
      LODWORD(v5[1].__vftable) = v4;
      if (*(void *)cf) {
        CFRelease(*(CFTypeRef *)cf);
      }
      AMCP::IOAudio2::Device::get_device_connection((AMCP::IOAudio2::Device *)connect, **(_DWORD **)(*(void *)(a1 + 24) + 360));
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = **(void **)(a1 + 24);
      uint64_t v9 = *(void *)(v7 + 32);
      int v8 = *(std::__shared_weak_count **)(v7 + 40);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)CFTypeRef cf = v5 + 1;
      *(void *)&cf[8] = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      io_connect_t v10 = connect[0];
      *(_DWORD *)&cf[16] = connect[0];
      uint64_t v11 = IOConnectAddRef(connect[0]);
      if (v11)
      {
        float v132 = __cxa_allocate_exception(0x20uLL);
        int v133 = std::system_category();
        MEMORY[0x1C1859250](v132, v11, v133, "Error on IOConnectAddRef");
        __cxa_throw(v132, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
      }
      *(void *)&cf[20] = v6;
      *(void *)&cf[32] = v9;
      *(void *)&cf[40] = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)theArray, 0, 1.58366012e190);
      CFArrayRef v12 = theArray[0];
      unint64_t v13 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
      uint64_t v183 = &unk_1F1482848;
      uint64_t v184 = v5 + 1;
      float64x2_t v185 = v5;
      int v186 = &v183;
      *(_OWORD *)uint64_t v180 = 0u;
      long long v181 = 0u;
      float64x2_t v182 = 0;
      std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)v180, (uint64_t)&v183);
      float64x2_t v182 = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v12, v13, (AMCP *)v180);
      if (v182) {
        v182(0, (uint64_t)v180, 0, 0);
      }
      std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](&v183);
      AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>((uint64_t)v12);
      unint64_t v14 = AMCP::Implementation::get_type_marker<std::function<void ()(unsigned int const&)>>();
      long long v15 = *(_OWORD *)cf;
      memset(cf, 0, 20);
      int v16 = *(_DWORD *)&cf[16];
      uint64_t v17 = *(void *)&cf[20];
      long long v161 = *(_OWORD *)&cf[32];
      long long v167 = v15;
      *(_OWORD *)&cf[32] = 0uLL;
      int v186 = 0;
      uint64_t v18 = (char *)operator new(0x38uLL);
      *(void *)uint64_t v18 = &unk_1F1482938;
      *(_OWORD *)(v18 + 8) = v167;
      *((_DWORD *)v18 + 6) = v16;
      *(void *)(v18 + 28) = v17;
      *(_OWORD *)(v18 + 40) = v161;
      int v186 = (void **)v18;
      *(_OWORD *)uint64_t v180 = 0u;
      long long v181 = 0u;
      float64x2_t v182 = 0;
      std::__function::__value_func<void ()(unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)v180, (uint64_t)&v183);
      float64x2_t v182 = AMCP::Implementation::In_Place_Storage<std::function<void ()(unsigned int const&)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v12, v14, (AMCP *)v180);
      if (v182) {
        v182(0, (uint64_t)v180, 0, 0);
      }
      std::__function::__value_func<void ()(unsigned int const&)>::~__value_func[abi:ne180100](&v183);
      IOConnectRelease(0);
      AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>((uint64_t)v12);
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)v12 + 10, theArray);
      if (theArray[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)theArray[1]);
      }
      if (*(void *)&cf[40]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&cf[40]);
      }
      IOConnectRelease(*(io_connect_t *)&cf[16]);
      if (*(void *)&cf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&cf[8]);
      }
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
LABEL_76:
      IOConnectRelease(v10);
LABEL_77:
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      return;
    }
LABEL_189:
    int v135 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v135);
    __cxa_throw(v135, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (AMCP::is_base_of((AMCP *)0x6C65766C, *(_DWORD *)(a1 + 52)))
  {
    CFDictionaryRef v19 = *(const __CFDictionary **)(a1 + 40);
    if (v19)
    {
      applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const*>((applesauce::CF::ArrayRef *)v180, v19, @"range map");
      AMCP::IOAudio2::make_level_map((AMCP::IOAudio2 *)cf, (CFArrayRef *)v180);
      uint64_t v5 = (std::__shared_weak_count *)operator new(0x38uLL);
      v5->__shared_owners_ = 0;
      v5->__shared_weak_owners_ = 0;
      v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1482D40;
      v5[1].std::__shared_count = *(std::__shared_count *)cf;
      uint64_t v20 = v5 + 1;
      *(void *)CFTypeRef cf = 0;
      *(void *)&cf[8] = 0;
      v5[1].__shared_weak_owners_ = *(void *)&cf[16];
      *(void *)&cf[16] = 0;
      if (v180[0]) {
        CFRelease(v180[0]);
      }
      CFDictionaryRef v21 = *(const __CFDictionary **)(a1 + 40);
      if (!v21)
      {
        int v136 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v136, "Could not construct");
        __cxa_throw(v136, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, v21, @"value");
      if (!*(void *)cf)
      {
        float v137 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v137, "Could not construct");
        __cxa_throw(v137, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v22 = applesauce::CF::convert_to<int,0>(*(const __CFNumber **)cf);
      int v23 = HIDWORD(v20->~__shared_weak_count);
      float v24 = 0.0;
      if (v22 > v23)
      {
        int v25 = *(_DWORD *)(v5[1].__shared_owners_ - 4);
        float v24 = 1.0;
        if (v25 > v22) {
          float v24 = (float)(v22 - v23) / (float)(v25 - v23);
        }
      }
      int8x8_t v26 = (std::__shared_weak_count *)operator new(0x20uLL);
      v26->__shared_owners_ = 0;
      v26->__shared_weak_owners_ = 0;
      v26->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1482D90;
      LODWORD(v26[1].__vftable) = (int)v24;
      int32x4_t v27 = v26 + 1;
      if (*(void *)cf) {
        CFRelease(*(CFTypeRef *)cf);
      }
      AMCP::IOAudio2::Device::get_device_connection((AMCP::IOAudio2::Device *)&v179, **(_DWORD **)(*(void *)(a1 + 24) + 360));
      int v29 = *(_DWORD *)(a1 + 32);
      int v28 = *(_DWORD *)(a1 + 36);
      uint64_t v30 = **(void **)(a1 + 24);
      int32x4_t v31 = *(std::__shared_weak_count **)(v30 + 40);
      uint64_t v168 = *(void *)(v30 + 32);
      if (v31) {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      theArray[0] = (CFArrayRef)&v5[1];
      theArray[1] = (CFArrayRef)v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)&long long v176 = v26 + 1;
      *((void *)&v176 + 1) = v26;
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)CFTypeRef cf = v5 + 1;
      *(void *)&cf[8] = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)&cf[16] = v26 + 1;
      *(void *)&cf[24] = v26;
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      io_connect_t v162 = v179;
      *(_DWORD *)&cf[32] = v179;
      uint64_t v32 = IOConnectAddRef(v179);
      if (v32)
      {
        float v138 = __cxa_allocate_exception(0x20uLL);
        vDSP_Length v139 = std::system_category();
        MEMORY[0x1C1859250](v138, v32, v139, "Error on IOConnectAddRef");
        __cxa_throw(v138, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
      }
      *(_DWORD *)&cf[36] = v29;
      *(_DWORD *)&cf[40] = v28;
      *(void *)&cf[48] = v168;
      std::logic_error v174 = v31;
      if (v31) {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)connect, 0, 1.5836601e190);
      uint64_t v33 = *(void *)connect;
      unint64_t v34 = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>();
      *(_OWORD *)CFArrayRef theArray = 0u;
      long long v176 = 0u;
      int v186 = 0;
      mach_port_t v35 = (void **)operator new(0x28uLL);
      *mach_port_t v35 = &unk_1F1482E38;
      v35[1] = v20;
      uint64_t v35[2] = v5;
      void v35[3] = v27;
      v35[4] = v26;
      int v186 = v35;
      *(_OWORD *)uint64_t v180 = 0u;
      long long v181 = 0u;
      float64x2_t v182 = 0;
      std::__function::__value_func<float ()(void)>::__value_func[abi:ne180100]((uint64_t)v180, (uint64_t)&v183);
      float64x2_t v182 = AMCP::Implementation::In_Place_Storage<std::function<float ()(void)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v33, v34, (AMCP *)v180);
      if (v182) {
        v182(0, (uint64_t)v180, 0, 0);
      }
      std::__function::__value_func<float ()(void)>::~__value_func[abi:ne180100](&v183);
      AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(v33);
      unint64_t v36 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
      memset(cf, 0, 36);
      uint64_t v37 = *(void *)&cf[36];
      *(void *)&cf[48] = 0;
      std::logic_error v174 = 0;
      int v186 = 0;
      int8x8_t v38 = operator new(0x48uLL);
      void *v38 = &unk_1F1482FB8;
      v38[1] = v20;
      uint64_t v38[2] = v5;
      void v38[3] = v27;
      v38[4] = v26;
      *((_DWORD *)v38 + 10) = v162;
      *(void *)((char *)v38 + 44) = v37;
      v38[7] = v168;
      char v38[8] = v31;
      int v186 = (void **)v38;
      *(_OWORD *)uint64_t v180 = 0u;
      long long v181 = 0u;
      float64x2_t v182 = 0;
      std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100]((uint64_t)v180, (uint64_t)&v183);
      float64x2_t v182 = AMCP::Implementation::In_Place_Storage<std::function<void ()(float const&)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v33, v36, (AMCP *)v180);
      if (v182) {
        v182(0, (uint64_t)v180, 0, 0);
      }
      std::__function::__value_func<void ()(float const&)>::~__value_func[abi:ne180100](&v183);
      IOConnectRelease(0);
      AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(v33);
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v33 + 40), connect);
      if (v178) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v178);
      }
      IOConnectRelease(0);
      theArray[0] = (CFArrayRef)&v5[1];
      theArray[1] = (CFArrayRef)v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)&long long v176 = v26 + 1;
      *((void *)&v176 + 1) = v26;
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)CFTypeRef cf = v5 + 1;
      *(void *)&cf[8] = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)&cf[16] = v26 + 1;
      *(void *)&cf[24] = v26;
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      *(_DWORD *)&cf[32] = v162;
      uint64_t v39 = IOConnectAddRef(v162);
      if (v39)
      {
        unint64_t v140 = __cxa_allocate_exception(0x20uLL);
        int v141 = std::system_category();
        MEMORY[0x1C1859250](v140, v39, v141, "Error on IOConnectAddRef");
        __cxa_throw(v140, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
      }
      *(_DWORD *)&cf[36] = v29;
      *(_DWORD *)&cf[40] = v28;
      *(void *)&cf[48] = v168;
      std::logic_error v174 = v31;
      if (v31) {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)connect, 0, 1.5836601e190);
      uint64_t v40 = *(void *)connect;
      unint64_t v41 = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>();
      *(_OWORD *)CFArrayRef theArray = 0u;
      long long v176 = 0u;
      int v186 = 0;
      uint32x4_t v42 = (void **)operator new(0x28uLL);
      *uint32x4_t v42 = &unk_1F14830C8;
      v42[1] = v20;
      v42[2] = v5;
      v42[3] = v27;
      v42[4] = v26;
      int v186 = v42;
      *(_OWORD *)uint64_t v180 = 0u;
      long long v181 = 0u;
      float64x2_t v182 = 0;
      std::__function::__value_func<float ()(void)>::__value_func[abi:ne180100]((uint64_t)v180, (uint64_t)&v183);
      float64x2_t v182 = AMCP::Implementation::In_Place_Storage<std::function<float ()(void)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v40, v41, (AMCP *)v180);
      if (v182) {
        v182(0, (uint64_t)v180, 0, 0);
      }
      std::__function::__value_func<float ()(void)>::~__value_func[abi:ne180100](&v183);
      AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(v40);
      unint64_t v43 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
      memset(cf, 0, 36);
      uint64_t v44 = *(void *)&cf[36];
      *(void *)&cf[48] = 0;
      std::logic_error v174 = 0;
      int v186 = 0;
      int v45 = operator new(0x48uLL);
      void *v45 = &unk_1F1483148;
      v45[1] = v20;
      v45[2] = v5;
      void v45[3] = v27;
      v45[4] = v26;
      *((_DWORD *)v45 + 10) = v162;
      *(void *)((char *)v45 + 44) = v44;
      v45[7] = v168;
      v45[8] = v31;
      int v186 = (void **)v45;
      *(_OWORD *)uint64_t v180 = 0u;
      long long v181 = 0u;
      float64x2_t v182 = 0;
      std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100]((uint64_t)v180, (uint64_t)&v183);
      float64x2_t v182 = AMCP::Implementation::In_Place_Storage<std::function<void ()(float const&)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v40, v43, (AMCP *)v180);
      if (v182) {
        v182(0, (uint64_t)v180, 0, 0);
      }
      std::__function::__value_func<void ()(float const&)>::~__value_func[abi:ne180100](&v183);
      IOConnectRelease(0);
      AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(v40);
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v40 + 40), connect);
      if (v178) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v178);
      }
      IOConnectRelease(0);
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      IOConnectRelease(v162);
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      goto LABEL_77;
    }
    goto LABEL_189;
  }
  if (AMCP::is_base_of((AMCP *)0x746F676C, *(_DWORD *)(a1 + 52)))
  {
    *(void *)CFTypeRef cf = @"value";
    BOOL_frouint64_t m = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>((CFDictionaryRef *)(a1 + 40), (const void **)cf);
    uint64_t v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1483530;
    LOBYTE(v5[1].__vftable) = BOOL_from;
    AMCP::IOAudio2::Device::get_device_connection((AMCP::IOAudio2::Device *)connect, **(_DWORD **)(*(void *)(a1 + 24) + 360));
    uint64_t v47 = *(void *)(a1 + 32);
    uint64_t v48 = **(void **)(a1 + 24);
    uint64_t v50 = *(void *)(v48 + 32);
    int v49 = *(std::__shared_weak_count **)(v48 + 40);
    if (v49) {
      atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)CFTypeRef cf = v5 + 1;
    *(void *)&cf[8] = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    io_connect_t v10 = connect[0];
    *(_DWORD *)&cf[16] = connect[0];
    uint64_t v51 = IOConnectAddRef(connect[0]);
    if (v51)
    {
      unint64_t v143 = __cxa_allocate_exception(0x20uLL);
      float64x2_t v144 = std::system_category();
      MEMORY[0x1C1859250](v143, v51, v144, "Error on IOConnectAddRef");
      __cxa_throw(v143, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
    *(void *)&cf[20] = v47;
    *(void *)&cf[32] = v50;
    *(void *)&cf[40] = v49;
    if (v49) {
      atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)theArray, 0, 1.58366006e190);
    CFArrayRef v52 = theArray[0];
    unint64_t v53 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
    uint64_t v183 = &unk_1F1483580;
    uint64_t v184 = v5 + 1;
    float64x2_t v185 = v5;
    int v186 = &v183;
    *(_OWORD *)uint64_t v180 = 0u;
    long long v181 = 0u;
    float64x2_t v182 = 0;
    std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v180, (uint64_t)&v183);
    float64x2_t v182 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v52, v53, (AMCP *)v180);
    if (v182) {
      v182(0, (uint64_t)v180, 0, 0);
    }
    std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](&v183);
    AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>((uint64_t)v52);
    unint64_t v54 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
    long long v55 = *(_OWORD *)cf;
    memset(cf, 0, 20);
    int v56 = *(_DWORD *)&cf[16];
    uint64_t v57 = *(void *)&cf[20];
    long long v163 = *(_OWORD *)&cf[32];
    long long v169 = v55;
    *(_OWORD *)&cf[32] = 0uLL;
    int v186 = 0;
    char v58 = (char *)operator new(0x38uLL);
    *(void *)char v58 = &unk_1F1483670;
    *(_OWORD *)(v58 + 8) = v169;
    *((_DWORD *)v58 + 6) = v56;
    *(void *)(v58 + 28) = v57;
    *(_OWORD *)(v58 + 40) = v163;
    int v186 = (void **)v58;
    *(_OWORD *)uint64_t v180 = 0u;
    long long v181 = 0u;
    float64x2_t v182 = 0;
    std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100]((uint64_t)v180, (uint64_t)&v183);
    float64x2_t v182 = AMCP::Implementation::In_Place_Storage<std::function<void ()(BOOL const&)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v52, v54, (AMCP *)v180);
    if (v182) {
      v182(0, (uint64_t)v180, 0, 0);
    }
    std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:ne180100](&v183);
    IOConnectRelease(0);
    AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>((uint64_t)v52);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)v52 + 10, theArray);
    if (theArray[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)theArray[1]);
    }
    if (*(void *)&cf[40]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&cf[40]);
    }
    IOConnectRelease(*(io_connect_t *)&cf[16]);
    if (*(void *)&cf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&cf[8]);
    }
    if (v49) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v49);
    }
    goto LABEL_76;
  }
  if (AMCP::is_base_of((AMCP *)0x736C6374, *(_DWORD *)(a1 + 52)))
  {
    uint64_t v59 = (CFDictionaryRef *)(a1 + 40);
    *(void *)CFTypeRef cf = @"multi-selector";
    BOOL v164 = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>((CFDictionaryRef *)(a1 + 40), (const void **)cf);
    AMCP::IOAudio2::Device::get_device_connection((AMCP::IOAudio2::Device *)&v179, **(_DWORD **)(*(void *)(a1 + 24) + 360));
    uint64_t v60 = *(void *)(a1 + 32);
    uint64_t v61 = **(void **)(a1 + 24);
    uint64_t v62 = *(std::__shared_weak_count **)(v61 + 40);
    uint64_t v159 = *(void *)(v61 + 32);
    if (v62) {
      atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    double v170 = v62;
    size_t v63 = (std::__shared_weak_count *)operator new(0x30uLL);
    v63->__shared_owners_ = 0;
    v63->__shared_weak_owners_ = 0;
    v63->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1483780;
    v63[1].__vftable = 0;
    unint64_t v64 = (void **)&v63[1].__vftable;
    v63[1].__shared_owners_ = 0;
    v63[1].__shared_weak_owners_ = 0;
    if (!*v59)
    {
      CFArrayRef v145 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v145, "Could not construct");
      __cxa_throw(v145, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*>(theArray, *v59, @"value");
    if (LOBYTE(theArray[1]))
    {
      CFArrayRef v65 = theArray[0];
      if (theArray[0])
      {
        CFIndex Count = CFArrayGetCount(theArray[0]);
        CFArrayRef v67 = theArray[0];
        CFIndex v68 = theArray[0] ? CFArrayGetCount(theArray[0]) : 0;
        if (Count)
        {
          unint64_t v102 = 0;
          do
          {
            if (v65 == v67 && v102 == v68) {
              break;
            }
            if (CFArrayGetCount(v65) > v102)
            {
              CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v65, v102);
              double v104 = ValueAtIndex;
              if (ValueAtIndex) {
                continue;
              }
            }
            unint64_t v134 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v134, "Could not find item");
            __cxa_throw(v134, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            CFRetain(ValueAtIndex);
            applesauce::CF::NumberRef::NumberRef((applesauce::CF::NumberRef *)cf, v104);
            if (!*(void *)cf)
            {
              int64x2_t v142 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v142, "Could not construct");
              __cxa_throw(v142, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            int v105 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)cf);
            int v106 = v105;
            shared_owners = (char *)v63[1].__shared_owners_;
            unint64_t shared_weak_owners = v63[1].__shared_weak_owners_;
            if ((unint64_t)shared_owners >= shared_weak_owners)
            {
              double v110 = (char *)*v64;
              uint64_t v111 = (shared_owners - (unsigned char *)*v64) >> 2;
              unint64_t v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 62) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v113 = shared_weak_owners - (void)v110;
              if (v113 >> 1 > v112) {
                unint64_t v112 = v113 >> 1;
              }
              if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v114 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v114 = v112;
              }
              if (v114)
              {
                unint64_t v114 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v114);
                double v110 = (char *)v63[1].__vftable;
                shared_owners = (char *)v63[1].__shared_owners_;
              }
              else
              {
                uint64_t v115 = 0;
              }
              float v116 = (std::__shared_weak_count_vtbl *)(v114 + 4 * v111);
              LODWORD(v116->~__shared_weak_count) = v106;
              double v109 = (_DWORD *)&v116->~__shared_weak_count + 1;
              while (shared_owners != v110)
              {
                int v117 = *((_DWORD *)shared_owners - 1);
                shared_owners -= 4;
                HIDWORD(v116[-1].__on_zero_shared_weak) = v117;
                float v116 = (std::__shared_weak_count_vtbl *)((char *)v116 - 4);
              }
              v63[1].__vftable = v116;
              v63[1].__shared_owners_ = (uint64_t)v109;
              v63[1].__shared_weak_owners_ = v114 + 4 * v115;
              if (v110) {
                operator delete(v110);
              }
            }
            else
            {
              *(_DWORD *)shared_owners = v105;
              double v109 = shared_owners + 4;
            }
            v63[1].__shared_owners_ = (uint64_t)v109;
            if (*(void *)cf) {
              CFRelease(*(CFTypeRef *)cf);
            }
            ++v102;
          }
          while (v102 != Count);
        }
      }
    }
    else
    {
      if (!*v59)
      {
        uint64_t v157 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v157, "Could not construct");
        __cxa_throw(v157, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, *v59, @"value");
      if (!*(void *)cf)
      {
        mach_port_t v158 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v158, "Could not construct");
        __cxa_throw(v158, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v90 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)cf);
      int v91 = v90;
      unint64_t v93 = (char *)v63[1].__shared_owners_;
      unint64_t v92 = v63[1].__shared_weak_owners_;
      if ((unint64_t)v93 >= v92)
      {
        uint64_t v95 = (char *)*v64;
        uint64_t v96 = (v93 - (unsigned char *)*v64) >> 2;
        unint64_t v97 = v96 + 1;
        if ((unint64_t)(v96 + 1) >> 62) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v98 = v92 - (void)v95;
        if (v98 >> 1 > v97) {
          unint64_t v97 = v98 >> 1;
        }
        BOOL v99 = (unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v100 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v99) {
          unint64_t v100 = v97;
        }
        if (v100)
        {
          unint64_t v100 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v100);
          uint64_t v95 = (char *)v63[1].__vftable;
          unint64_t v93 = (char *)v63[1].__shared_owners_;
        }
        else
        {
          uint64_t v101 = 0;
        }
        uint64_t v118 = (std::__shared_weak_count_vtbl *)(v100 + 4 * v96);
        uint64_t v119 = v100 + 4 * v101;
        LODWORD(v118->~__shared_weak_count) = v91;
        uint64_t v94 = (_DWORD *)&v118->~__shared_weak_count + 1;
        while (v93 != v95)
        {
          int v120 = *((_DWORD *)v93 - 1);
          v93 -= 4;
          HIDWORD(v118[-1].__on_zero_shared_weak) = v120;
          uint64_t v118 = (std::__shared_weak_count_vtbl *)((char *)v118 - 4);
        }
        v63[1].__vftable = v118;
        v63[1].__shared_owners_ = (uint64_t)v94;
        v63[1].__shared_weak_owners_ = v119;
        if (v95) {
          operator delete(v95);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v93 = v90;
        uint64_t v94 = v93 + 4;
      }
      v63[1].__shared_owners_ = (uint64_t)v94;
      if (*(void *)cf) {
        CFRelease(*(CFTypeRef *)cf);
      }
    }
    atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
    cf[0] = v164;
    *(void *)&cf[8] = v63 + 1;
    *(void *)&cf[16] = v63;
    atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
    io_connect_t v121 = v179;
    *(_DWORD *)&cf[24] = v179;
    uint64_t v122 = IOConnectAddRef(v179);
    if (v122)
    {
      mach_port_t v146 = __cxa_allocate_exception(0x20uLL);
      uint64_t v147 = std::system_category();
      MEMORY[0x1C1859250](v146, v122, v147, "Error on IOConnectAddRef");
      __cxa_throw(v146, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
    *(void *)&cf[28] = v60;
    *(void *)&cf[40] = v159;
    *(void *)&cf[48] = v170;
    if (v170) {
      atomic_fetch_add_explicit(&v170->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)connect, 0, 1.58366012e190);
    uint64_t v123 = *(void *)connect;
    unint64_t v124 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
    uint64_t v183 = &unk_1F14837D0;
    uint64_t v184 = v63 + 1;
    float64x2_t v185 = v63;
    int v186 = &v183;
    *(_OWORD *)uint64_t v180 = 0u;
    long long v181 = 0u;
    float64x2_t v182 = 0;
    std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)v180, (uint64_t)&v183);
    float64x2_t v182 = AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v123, v124, (AMCP *)v180);
    if (v182) {
      v182(0, (uint64_t)v180, 0, 0);
    }
    std::__function::__value_func<std::vector<unsigned int> ()(void)>::~__value_func[abi:ne180100](&v183);
    AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(v123);
    unint64_t v125 = AMCP::Implementation::get_type_marker<std::function<void ()(std::vector<unsigned int> const&)>>();
    char v126 = cf[0];
    long long v127 = *(_OWORD *)&cf[8];
    memset(&cf[8], 0, 20);
    int v128 = *(_DWORD *)&cf[24];
    uint64_t v129 = *(void *)&cf[28];
    long long v160 = *(_OWORD *)&cf[40];
    long long v166 = v127;
    *(void *)&cf[40] = 0;
    *(void *)&cf[48] = 0;
    int v186 = 0;
    uint64_t v130 = (char *)operator new(0x40uLL);
    *(void *)uint64_t v130 = &unk_1F14838C0;
    char v130[8] = v126;
    *((_OWORD *)v130 + 1) = v166;
    *((_DWORD *)v130 + 8) = v128;
    *(void *)(v130 + 36) = v129;
    *((_OWORD *)v130 + 3) = v160;
    int v186 = (void **)v130;
    *(_OWORD *)uint64_t v180 = 0u;
    long long v181 = 0u;
    float64x2_t v182 = 0;
    std::__function::__value_func<void ()(std::vector<unsigned int> const&)>::__value_func[abi:ne180100]((uint64_t)v180, (uint64_t)&v183);
    float64x2_t v182 = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::vector<unsigned int> const&)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v123, v125, (AMCP *)v180);
    if (v182) {
      v182(0, (uint64_t)v180, 0, 0);
    }
    std::__function::__value_func<void ()(std::vector<unsigned int> const&)>::~__value_func[abi:ne180100](&v183);
    IOConnectRelease(0);
    AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(v123);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v123 + 40), connect);
    if (v178) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v178);
    }
    if (*(void *)&cf[48]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&cf[48]);
    }
    IOConnectRelease(*(io_connect_t *)&cf[24]);
    if (*(void *)&cf[16]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&cf[16]);
    }
    std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)theArray);
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
    if (v170) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v170);
    }
    IOConnectRelease(v121);
  }
  else if (AMCP::is_base_of((AMCP *)0x7370616E, *(_DWORD *)(a1 + 52)))
  {
    CFDictionaryRef v69 = *(const __CFDictionary **)(a1 + 40);
    if (v69)
    {
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, v69, @"value");
      if (!*(void *)cf)
      {
        int64x2_t v148 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v148, "Could not construct");
        __cxa_throw(v148, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v70 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)cf);
      uint64_t v5 = (std::__shared_weak_count *)operator new(0x20uLL);
      v5->__shared_owners_ = 0;
      v5->__shared_weak_owners_ = 0;
      v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14827F8;
      LODWORD(v5[1].__vftable) = v70;
      if (*(void *)cf) {
        CFRelease(*(CFTypeRef *)cf);
      }
      CFDictionaryRef v71 = *(const __CFDictionary **)(a1 + 40);
      if (!v71)
      {
        mach_port_t v149 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v149, "Could not construct");
        __cxa_throw(v149, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, v71, @"left value");
      if (!*(void *)cf)
      {
        float64x2_t v150 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v150, "Could not construct");
        __cxa_throw(v150, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v72 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)cf);
      if (*(void *)cf) {
        CFRelease(*(CFTypeRef *)cf);
      }
      CFDictionaryRef v73 = *(const __CFDictionary **)(a1 + 40);
      if (!v73)
      {
        long long v151 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v151, "Could not construct");
        __cxa_throw(v151, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, v73, @"center value");
      if (!*(void *)cf)
      {
        mach_port_t v152 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v152, "Could not construct");
        __cxa_throw(v152, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v74 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)cf);
      if (*(void *)cf) {
        CFRelease(*(CFTypeRef *)cf);
      }
      CFDictionaryRef v75 = *(const __CFDictionary **)(a1 + 40);
      if (!v75)
      {
        unint64_t v153 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v153, "Could not construct");
        __cxa_throw(v153, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, v75, @"right value");
      if (!*(void *)cf)
      {
        long long v154 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v154, "Could not construct");
        __cxa_throw(v154, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v76 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)cf);
      if (*(void *)cf) {
        CFRelease(*(CFTypeRef *)cf);
      }
      AMCP::IOAudio2::Device::get_device_connection((AMCP::IOAudio2::Device *)connect, **(_DWORD **)(*(void *)(a1 + 24) + 360));
      uint64_t v77 = *(void *)(a1 + 32);
      uint64_t v78 = **(void **)(a1 + 24);
      uint64_t v80 = *(void *)(v78 + 32);
      __int16 v79 = *(std::__shared_weak_count **)(v78 + 40);
      if (v79) {
        atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)CFTypeRef cf = v5 + 1;
      *(void *)&cf[8] = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      *(_DWORD *)&cf[16] = v72;
      *(_DWORD *)&cf[20] = v74;
      io_connect_t v10 = connect[0];
      *(_DWORD *)&cf[24] = v76;
      *(_DWORD *)&cf[28] = connect[0];
      uint64_t v81 = IOConnectAddRef(connect[0]);
      if (v81)
      {
        mach_port_t v155 = __cxa_allocate_exception(0x20uLL);
        long long v156 = std::system_category();
        MEMORY[0x1C1859250](v155, v81, v156, "Error on IOConnectAddRef");
        __cxa_throw(v155, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
      }
      *(void *)&cf[32] = v77;
      *(void *)&cf[40] = v80;
      *(void *)&cf[48] = v79;
      if (v79) {
        atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)theArray, 0, 1.58366012e190);
      CFArrayRef v82 = theArray[0];
      unint64_t v83 = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>();
      int v186 = 0;
      uint64_t v84 = operator new(0x28uLL);
      *uint64_t v84 = &unk_1F1483B38;
      v84[1] = v5 + 1;
      v84[2] = v5;
      *((_DWORD *)v84 + 6) = v72;
      *((_DWORD *)v84 + 7) = v74;
      *((_DWORD *)v84 + 8) = v76;
      int v186 = (void **)v84;
      *(_OWORD *)uint64_t v180 = 0u;
      long long v181 = 0u;
      float64x2_t v182 = 0;
      std::__function::__value_func<float ()(void)>::__value_func[abi:ne180100]((uint64_t)v180, (uint64_t)&v183);
      float64x2_t v182 = AMCP::Implementation::In_Place_Storage<std::function<float ()(void)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v82, v83, (AMCP *)v180);
      if (v182) {
        v182(0, (uint64_t)v180, 0, 0);
      }
      std::__function::__value_func<float ()(void)>::~__value_func[abi:ne180100](&v183);
      AMCP::Core::Operation_Utilities::add_generic_property_getter<float>((uint64_t)v82);
      unint64_t v85 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
      long long v86 = *(_OWORD *)cf;
      *(void *)CFTypeRef cf = 0;
      *(void *)&cf[8] = 0;
      int v87 = *(_DWORD *)&cf[28];
      *(_DWORD *)&cf[28] = 0;
      uint64_t v88 = *(void *)&cf[32];
      long long v165 = *(_OWORD *)&cf[40];
      long long v171 = v86;
      *(void *)&cf[40] = 0;
      *(void *)&cf[48] = 0;
      int v186 = 0;
      unint64_t v89 = (char *)operator new(0x40uLL);
      *(void *)unint64_t v89 = &unk_1F1483BB8;
      *(_OWORD *)(v89 + 8) = v171;
      *((void *)v89 + 3) = *(void *)&cf[16];
      *((_DWORD *)v89 + 8) = *(_DWORD *)&cf[24];
      *((_DWORD *)v89 + 9) = v87;
      *((void *)v89 + 5) = v88;
      *((_OWORD *)v89 + 3) = v165;
      int v186 = (void **)v89;
      *(_OWORD *)uint64_t v180 = 0u;
      long long v181 = 0u;
      float64x2_t v182 = 0;
      std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100]((uint64_t)v180, (uint64_t)&v183);
      float64x2_t v182 = AMCP::Implementation::In_Place_Storage<std::function<void ()(float const&)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v82, v85, (AMCP *)v180);
      if (v182) {
        v182(0, (uint64_t)v180, 0, 0);
      }
      std::__function::__value_func<void ()(float const&)>::~__value_func[abi:ne180100](&v183);
      IOConnectRelease(0);
      AMCP::Core::Operation_Utilities::add_generic_property_setter<float>((uint64_t)v82);
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)v82 + 10, theArray);
      if (theArray[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)theArray[1]);
      }
      if (*(void *)&cf[48]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&cf[48]);
      }
      IOConnectRelease(*(io_connect_t *)&cf[28]);
      if (*(void *)&cf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&cf[8]);
      }
      if (v79) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v79);
      }
      goto LABEL_76;
    }
    goto LABEL_189;
  }
}

void sub_1BAEF7200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, io_connect_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,io_connect_t connect,char a34)
{
  __cxa_free_exception(v35);
  applesauce::CF::NumberRef::~NumberRef((const void **)&__p);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a25);
  std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  IOConnectRelease(connect);
  _Unwind_Resume(a1);
}

void AMCP::IOAudio2::Control::update_range(uint64_t a1, uint64_t a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (AMCP::is_base_of((AMCP *)0x736C6472, *(_DWORD *)(a1 + 52)))
  {
    int v4 = (CFDictionaryRef *)(a1 + 40);
    cf[0] = @"read only";
    LOBYTE(v51) = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(v4, cf);
    AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (char *)&v51, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
    if (cf[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[1]);
    }
    if (*v4)
    {
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, *v4, @"minimum value");
      if (!cf[0])
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      unsigned int v5 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf[0]);
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      if (!*v4)
      {
        uint64_t v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        applesauce::CF::construct_error(v30);
        __cxa_throw(v30, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, *v4, @"maximum value");
      if (!cf[0])
      {
        int32x4_t v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v31, "Could not construct");
        __cxa_throw(v31, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      unint64_t v6 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf[0]);
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      CFTypeRef v51 = (CFTypeRef)(v5 | (v6 << 32));
      AMCP::Core::Operation_Utilities::make_typed_property<std::tuple<unsigned int,unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (uint64_t *)&v51, 1.58366012e190);
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
      goto LABEL_21;
    }
    goto LABEL_91;
  }
  if (AMCP::is_base_of((AMCP *)0x6C65766C, *(_DWORD *)(a1 + 52)))
  {
    uint64_t v7 = (CFDictionaryRef *)(a1 + 40);
    cf[0] = @"read only";
    LOBYTE(v51) = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(v7, cf);
    AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (char *)&v51, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
    if (cf[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[1]);
    }
    if (*v7)
    {
      applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const*>((applesauce::CF::ArrayRef *)&v51, *v7, @"range map");
      AMCP::IOAudio2::make_level_map((AMCP::IOAudio2 *)cf, (CFArrayRef *)&v51);
      int v8 = (char *)operator new(0x38uLL);
      *((void *)v8 + 1) = 0;
      *((void *)v8 + 2) = 0;
      *(void *)int v8 = &unk_1F1482D40;
      uint64_t v9 = (float *)cf[0];
      *((CFTypeRef *)v8 + 3) = cf[0];
      long long v10 = *(_OWORD *)&cf[1];
      cf[0] = 0;
      cf[1] = 0;
      *((_OWORD *)v8 + 2) = v10;
      CFTypeRef cf[2] = 0;
      if (v51)
      {
        CFRelease(v51);
        uint64_t v9 = (float *)*((void *)v8 + 3);
        uint64_t v11 = *((void *)v8 + 4);
      }
      else
      {
        uint64_t v11 = v10;
      }
      double v19 = *(float *)(v11 - 8);
      *(double *)CFTypeRef cf = *v9;
      cf[1] = *(CFTypeRef *)&v19;
      AMCP::Core::Operation_Utilities::make_typed_property<CA::ValueRange,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ValueRange>(AMCP::Address const&,CA::ValueRange const&)::{lambda(void)#1}>((uint64_t *)&v51, 0, (long long *)cf, 1.5836601e190);
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)v51 + 10, &v51);
      if (v52) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v52);
      }
      std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v42, 0, 1.5836601e190);
      uint64_t v20 = (unsigned int *)v42;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
      unint64_t v21 = AMCP::Implementation::get_type_marker<std::function<float ()(float)>>();
      CFTypeRef v51 = &unk_1F14833A0;
      CFArrayRef v52 = (std::__shared_weak_count *)(v8 + 24);
      unint64_t v53 = v8;
      unint64_t v54 = &v51;
      memset(cf, 0, sizeof(cf));
      int v45 = 0;
      std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)cf, (uint64_t)&v51);
      int v45 = AMCP::Implementation::In_Place_Storage<std::function<float ()(float)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v20, v21, (AMCP *)cf);
      if (v45) {
        v45(0, (uint64_t)cf, 0, 0);
      }
      std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](&v51);
      atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
      unint64_t v22 = AMCP::Implementation::get_type_marker<std::function<float ()(float,BOOL)>>();
      CFTypeRef v51 = &unk_1F14834A0;
      CFArrayRef v52 = (std::__shared_weak_count *)(v8 + 24);
      unint64_t v53 = v8;
      unint64_t v54 = &v51;
      memset(cf, 0, sizeof(cf));
      int v45 = 0;
      std::__function::__value_func<float ()(float,BOOL)>::__value_func[abi:ne180100]((uint64_t)cf, (uint64_t)&v51);
      int v45 = AMCP::Implementation::In_Place_Storage<std::function<float ()(float,BOOL)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v20, v22, (AMCP *)cf);
      if (v45) {
        v45(0, (uint64_t)cf, 0, 0);
      }
      std::__function::__value_func<float ()(float,BOOL)>::~__value_func[abi:ne180100](&v51);
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, v20 + 10, &v42);
      if (v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v43);
      }
      CFArrayRef v12 = (std::__shared_weak_count *)v8;
LABEL_43:
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      return;
    }
    goto LABEL_91;
  }
  if (AMCP::is_base_of((AMCP *)0x746F676C, *(_DWORD *)(a1 + 52)))
  {
    cf[0] = @"read only";
    LOBYTE(v51) = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>((CFDictionaryRef *)(a1 + 40), cf);
    AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (char *)&v51, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
    goto LABEL_21;
  }
  if (AMCP::is_base_of((AMCP *)0x736C6374, *(_DWORD *)(a1 + 52)))
  {
    unint64_t v13 = (CFDictionaryRef *)(a1 + 40);
    cf[0] = @"read only";
    LOBYTE(v51) = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(v13, cf);
    AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (char *)&v51, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
    if (cf[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[1]);
    }
    cf[0] = @"multi-selector";
    LOBYTE(v51) = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(v13, cf);
    AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (char *)&v51, 1.58366012e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
    if (cf[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[1]);
    }
    memset(cf, 0, 24);
    if (!*v13)
    {
      int8x8_t v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v38, "Could not construct");
      __cxa_throw(v38, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const*>((applesauce::CF::ArrayRef *)&theArray, *v13, @"selectors");
    CFArrayRef v14 = theArray;
    if (!theArray) {
      goto LABEL_78;
    }
    CFIndex Count = CFArrayGetCount(theArray);
    CFIndex v16 = Count;
    CFArrayRef v17 = theArray;
    if (theArray)
    {
      CFIndex v18 = CFArrayGetCount(theArray);
      if (!v16) {
        goto LABEL_78;
      }
    }
    else
    {
      CFIndex v18 = 0;
      if (!Count)
      {
LABEL_78:
        CFTypeRef v42 = (CFTypeRef)0x676C6F6273636169;
        LODWORD(v43) = 0;
        AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>((uint64_t *)&v51, (uint64_t)&v42, (uint64_t)cf[0], (uint64_t)cf[1]);
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)v51 + 10, &v51);
        if (v52) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v52);
        }
        if (theArray) {
          CFRelease(theArray);
        }
        CFTypeRef v51 = cf;
        std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
        return;
      }
    }
    unint64_t v26 = 0;
    do
    {
      if (v14 == v17 && v18 == v26) {
        break;
      }
      applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v42, v14, v26);
      int v49 = 0;
      if (!v42)
      {
        uint64_t v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v32, "Could not construct");
        __cxa_throw(v32, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&v51, (CFDictionaryRef)v42, @"value");
      if (!v51)
      {
        unint64_t v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v34, "Could not construct");
        __cxa_throw(v34, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v27 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v51);
      if (v51) {
        CFRelease(v51);
      }
      int v49 = v27;
      if (!v42)
      {
        uint64_t v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v33, "Could not construct");
        __cxa_throw(v33, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v51, (CFDictionaryRef)v42, @"kind");
      if ((_BYTE)v52)
      {
        if (!v51)
        {
          uint64_t v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v37, "Could not construct");
          __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        int v28 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v51);
      }
      else
      {
        int v28 = 0;
      }
      int v48 = v28;
      if (!v42)
      {
        mach_port_t v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v35, "Could not construct");
        __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      CFTypeRef v46 = 0;
      applesauce::CF::at_or<applesauce::CF::StringRef,__CFString const*>(&v47, (const __CFDictionary *)v42, @"name", &v46);
      if (v46) {
        CFRelease(v46);
      }
      std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::emplace_back<unsigned int &,unsigned int &,applesauce::CF::StringRef&>((uint64_t *)cf, &v49, &v48, &v47);
      if (v47) {
        CFRelease(v47);
      }
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v51);
      if (v42) {
        CFRelease(v42);
      }
      ++v26;
    }
    while (v16 != v26);
    goto LABEL_78;
  }
  if (AMCP::is_base_of((AMCP *)0x7370616E, *(_DWORD *)(a1 + 52)))
  {
    int v23 = (CFDictionaryRef *)(a1 + 40);
    cf[0] = @"read only";
    LOBYTE(v51) = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(v23, cf);
    AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (char *)&v51, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
    if (cf[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[1]);
    }
    if (*v23)
    {
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, *v23, @"left channel");
      if (!cf[0])
      {
        uint64_t v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v39, "Could not construct");
        __cxa_throw(v39, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      unsigned int v24 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf[0]);
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      if (!*v23)
      {
        uint64_t v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        applesauce::CF::construct_error(v40);
        __cxa_throw(v40, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)cf, *v23, @"right channel");
      if (!cf[0])
      {
        unint64_t v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v41, "Could not construct");
        __cxa_throw(v41, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      unint64_t v25 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf[0]);
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      CFTypeRef v51 = (CFTypeRef)(v24 | (v25 << 32));
      AMCP::Core::Operation_Utilities::make_typed_property<std::tuple<unsigned int,unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (uint64_t *)&v51, 1.58366012e190);
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
LABEL_21:
      CFArrayRef v12 = (std::__shared_weak_count *)cf[1];
      if (!cf[1]) {
        return;
      }
      goto LABEL_43;
    }
LABEL_91:
    unint64_t v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v36);
    __cxa_throw(v36, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
}

void sub_1BAEF8248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21)
{
  __cxa_free_exception(v21);
  applesauce::CF::NumberRef::~NumberRef((const void **)&__p);
  _Unwind_Resume(a1);
}

void sub_1BAEF8594(void *a1)
{
  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Core::Operation_Utilities::make_typed_property<std::tuple<unsigned int,unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1}>(uint64_t *a1, int a2, uint64_t *a3, double a4)
{
  v12[4] = *MEMORY[0x1E4F143B8];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, a2, a4);
  uint64_t v6 = *a1;
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>();
  uint64_t v8 = *a3;
  v12[0] = &unk_1F1482C30;
  v12[1] = v8;
  v12[3] = v12;
  memset(v10, 0, sizeof(v10));
  uint64_t v11 = 0;
  std::__function::__value_func<std::tuple<unsigned int,unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)v12);
  uint64_t v11 = AMCP::Implementation::In_Place_Storage<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v10);
  if (v11) {
    v11(0, (uint64_t)v10, 0, 0);
  }
  std::__function::__value_func<std::tuple<unsigned int,unsigned int> ()(void)>::~__value_func[abi:ne180100](v12);
  return AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(v6);
}

void sub_1BAEF86B8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities22make_constant_propertyINSt3__15tupleIJjjEEEEENS3_10shared_ptrINS0_9OperationEEERKNS_7AddressERKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::operator()(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1F1482C30;
  a2[1] = *(void *)(result + 8);
  return result;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F1482C30;
  result[1] = v3;
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,std::tuple<unsigned int,unsigned int> const&)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::~__func()
{
}

void AMCP::IOAudio2::make_level_map(AMCP::IOAudio2 *this, CFArrayRef *a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (!*a2) {
    goto LABEL_76;
  }
  if (!CFArrayGetCount(*a2))
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
    mach_port_t v35 = *(NSObject **)cf;
    if (*(void *)v53) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v53);
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      unint64_t v36 = pthread_self();
      mach_port_t v37 = pthread_mach_thread_np(v36);
      LODWORD(cf) = 67109890;
      HIDWORD(cf) = v37;
      *(_WORD *)unint64_t v53 = 2080;
      *(void *)&v53[2] = "IOAudio2_Control.cpp";
      __int16 v54 = 1024;
      int v55 = 32;
      __int16 v56 = 2080;
      uint64_t v57 = "in_range_map->get_size() > 0";
      _os_log_error_impl(&dword_1BAA78000, v35, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s there needs to be at least one item in the range map", (uint8_t *)&cf, 0x22u);
    }
    abort();
  }
  if (!*a2)
  {
LABEL_76:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v51, *a2, 0);
  if (!v51)
  {
    unint64_t v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v43, "Could not construct");
    __cxa_throw(v43, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&cf, (CFDictionaryRef)v51, @"start int value");
  if (!cf)
  {
    uint64_t v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v44, "Could not construct");
    __cxa_throw(v44, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v4 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v51) {
    CFRelease(v51);
  }
  if (!*a2)
  {
    int v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v45);
    __cxa_throw(v45, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v51, *a2, 0);
  if (!v51)
  {
    CFTypeRef v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v46, "Could not construct");
    __cxa_throw(v46, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&cf, (CFDictionaryRef)v51, @"start db value");
  if (!cf)
  {
    CFTypeRef v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v47, "Could not construct");
    __cxa_throw(v47, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v5 = applesauce::CF::convert_to<long long,0>((const __CFNumber *)cf);
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v49 = v5;
  if (v51) {
    CFRelease(v51);
  }
  CFArrayRef v6 = *a2;
  unint64_t v48 = v4;
  if (!*a2) {
    goto LABEL_53;
  }
  CFIndex Count = CFArrayGetCount(v6);
  CFIndex v8 = Count;
  CFArrayRef v9 = *a2;
  if (*a2)
  {
    CFIndex v50 = CFArrayGetCount(*a2);
    if (v8) {
      goto LABEL_20;
    }
LABEL_53:
    long long v10 = 0;
    uint64_t v11 = 0;
    goto LABEL_54;
  }
  CFIndex v50 = 0;
  if (!Count) {
    goto LABEL_53;
  }
LABEL_20:
  long long v10 = 0;
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  unint64_t v13 = 0;
  do
  {
    if (v6 == v9 && v13 == v50) {
      break;
    }
    applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&cf, v6, v13);
    if (!cf)
    {
      int8x8_t v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v38, "Could not construct");
      __cxa_throw(v38, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&v51, (CFDictionaryRef)cf, @"integer steps");
    if (!v51)
    {
      uint64_t v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v40, "Could not construct");
      __cxa_throw(v40, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v14 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v51);
    if (v51) {
      CFRelease(v51);
    }
    if (!cf)
    {
      uint64_t v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v39, "Could not construct");
      __cxa_throw(v39, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&v51, (CFDictionaryRef)cf, @"db per step");
    if (!v51)
    {
      unint64_t v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v41, "Could not construct");
      __cxa_throw(v41, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int64_t v15 = applesauce::CF::convert_to<long long,0>((const __CFNumber *)v51);
    if (v51) {
      CFRelease(v51);
    }
    double v16 = (double)v15 * 2.32830644e-10 + (float)(v15 >> 32);
    if ((unint64_t)v11 >= v12)
    {
      uint64_t v18 = ((char *)v11 - (char *)v10) >> 3;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 61) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)(v12 - (void)v10) >> 2 > v19) {
        unint64_t v19 = (uint64_t)(v12 - (void)v10) >> 2;
      }
      if (v12 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v19;
      }
      if (v20) {
        unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v20);
      }
      else {
        uint64_t v21 = 0;
      }
      unint64_t v22 = v20 + 8 * v18;
      float v23 = v16;
      *(float *)unint64_t v22 = v23;
      *(_DWORD *)(v22 + 4) = v14;
      unsigned int v24 = (char *)v22;
      while (v11 != v10)
      {
        uint64_t v25 = *((void *)v11 - 1);
        v11 -= 2;
        *((void *)v24 - 1) = v25;
        v24 -= 8;
      }
      unint64_t v12 = v20 + 8 * v21;
      uint64_t v11 = (float *)(v22 + 8);
      if (v10) {
        operator delete(v10);
      }
      long long v10 = (float *)v24;
    }
    else
    {
      float v17 = v16;
      float *v11 = v17;
      *((_DWORD *)v11 + 1) = v14;
      v11 += 2;
    }
    if (cf) {
      CFRelease(cf);
    }
    ++v13;
  }
  while (v13 != v8);
LABEL_54:
  *(float *)&unsigned int v26 = (double)v49 * 2.32830644e-10 + (float)(v49 >> 32);
  CFTypeRef cf = (CFTypeRef)(v26 | (v48 << 32));
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  AMCP::Utility::Sorted_Vector<std::tuple<float,int>,AMCP::Utility::Extract_Key_Self<std::tuple<float,int>>,std::less<std::tuple<float,int>>,std::allocator<std::tuple<float,int>>>::insert_unique((char **)this, (float *)&cf);
  if (v10 != v11)
  {
    int v27 = v10;
    do
    {
      int v28 = *((_DWORD *)v27 + 1);
      *(float *)&CFTypeRef cf = *(float *)&cf + (float)(*v27 * (float)v28);
      HIDWORD(cf) += v28;
      AMCP::Utility::Sorted_Vector<std::tuple<float,int>,AMCP::Utility::Extract_Key_Self<std::tuple<float,int>>,std::less<std::tuple<float,int>>,std::allocator<std::tuple<float,int>>>::insert_unique((char **)this, (float *)&cf);
      v27 += 2;
    }
    while (v27 != v11);
  }
  uint64_t v30 = *(float **)this;
  int v29 = (float *)*((void *)this + 1);
  if ((unint64_t)v29 - *(void *)this < 0x10) {
LABEL_65:
  }
    __assert_rtn("Level_Map", "Level_Map.h", 67, "data_is_valid()");
  float v32 = *v30;
  int32x4_t v31 = v30 + 2;
  float v33 = v32;
  do
  {
    float v34 = v33;
    float v33 = *v31;
    if (v34 >= *v31 || *((_DWORD *)v31 - 1) >= *((_DWORD *)v31 + 1)) {
      goto LABEL_65;
    }
    v31 += 2;
  }
  while (v31 != v29);
  if (v10) {
    operator delete(v10);
  }
}

void sub_1BAEF8EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control27update_volume_control_rangeERNS_4Core13Operation_SetEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

float std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::operator()(uint64_t a1, float *a2)
{
  return AMCP::Utility::Level_Map::calculate_scalar_from_decibel(*(float ***)(a1 + 8), *a2);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14834A0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1F14834A0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::~__func(void *a1)
{
  *a1 = &unk_1F14834A0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::~__func(void *a1)
{
  *a1 = &unk_1F14834A0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control27update_volume_control_rangeERNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

float std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  return AMCP::Utility::Level_Map::calculate_decibel_from_raw(*(AMCP::Utility::Level_Map **)(a1 + 8), *(_DWORD *)(**(void **)(a1 + 8) + 4)+ (int)(float)(fmaxf(fminf(*a2, 1.0), 0.0)* (float)(*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 8) - 4)- *(_DWORD *)(**(void **)(a1 + 8) + 4))));
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14833A0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1F14833A0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::~__func(void *a1)
{
  *a1 = &unk_1F14833A0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_range(AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::~__func(void *a1)
{
  *a1 = &unk_1F14833A0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<AMCP::Utility::Level_Map>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<AMCP::Utility::Level_Map>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1482D40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Utility::Level_Map>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1482D40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AMCP::Utility::Sorted_Vector<std::tuple<float,int>,AMCP::Utility::Extract_Key_Self<std::tuple<float,int>>,std::less<std::tuple<float,int>>,std::allocator<std::tuple<float,int>>>::insert_unique(char **a1, float *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *a1;
  unint64_t v5 = (float *)a1[1];
  uint64_t v6 = (char *)v5 - *a1;
  if (v5 == (float *)*a1)
  {
    uint64_t v11 = (float *)*a1;
  }
  else
  {
    uint64_t v49 = (char *)((char *)v5 - *a1);
    unint64_t v7 = v6 >> 3;
    float v8 = *a2;
    int v10 = *((_DWORD *)a2 + 1);
    uint64_t v11 = (float *)*a1;
    do
    {
      unint64_t v12 = &v11[2 * (v7 >> 1)];
      BOOL v13 = std::less<std::tuple<float,int>>::operator()[abi:ne180100](*((_DWORD *)v12 + 1), v10, *v12, v8);
      if (v13) {
        v7 += ~(v7 >> 1);
      }
      else {
        v7 >>= 1;
      }
      if (v13) {
        uint64_t v11 = v12 + 2;
      }
    }
    while (v7);
    uint64_t v2 = a2;
    uint64_t v6 = (uint64_t)v49;
  }
  if (v5 == v11
    || (float v14 = *v11,
        int v15 = *((_DWORD *)v11 + 1),
        float v16 = *v2,
        int v17 = *((_DWORD *)v2 + 1),
        std::less<std::tuple<float,int>>::operator()[abi:ne180100](v15, v17, *v11, *v2))
    || std::less<std::tuple<float,int>>::operator()[abi:ne180100](v17, v15, v16, v14))
  {
    unint64_t v18 = (unint64_t)a1[2];
    if ((unint64_t)v5 >= v18)
    {
      unint64_t v23 = (v6 >> 3) + 1;
      if (v23 >> 61) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v24 = (char *)v11 - v4;
      uint64_t v25 = ((char *)v11 - v4) >> 3;
      uint64_t v26 = v18 - (void)v4;
      if (v26 >> 2 > v23) {
        unint64_t v23 = v26 >> 2;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v23;
      }
      if (v27)
      {
        int v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v27);
      }
      else
      {
        int v29 = 0;
        uint64_t v28 = 0;
      }
      unint64_t v36 = &v29[8 * v25];
      mach_port_t v37 = &v29[8 * v28];
      if (v25 == v28)
      {
        if (v24 < 1)
        {
          if (v11 == (float *)v4) {
            unint64_t v39 = 1;
          }
          else {
            unint64_t v39 = v24 >> 2;
          }
          uint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v39);
          unint64_t v36 = &v40[8 * (v39 >> 2)];
          mach_port_t v37 = &v40[8 * v41];
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          unint64_t v38 = v25 + 2;
          if (v25 >= -1) {
            unint64_t v38 = v25 + 1;
          }
          v36 -= 8 * (v38 >> 1);
        }
      }
      *(void *)unint64_t v36 = *(void *)v2;
      CFTypeRef v42 = v36 + 8;
      unint64_t v43 = *a1;
      if (*a1 != (char *)v11)
      {
        uint64_t v44 = v11;
        do
        {
          uint64_t v45 = *((void *)v44 - 1);
          v44 -= 2;
          *((void *)v36 - 1) = v45;
          v36 -= 8;
        }
        while (v44 != (float *)v43);
      }
      for (uint64_t i = (float *)a1[1]; v11 != i; v42 += 8)
      {
        uint64_t v47 = *(void *)v11;
        v11 += 2;
        *(void *)CFTypeRef v42 = v47;
      }
      unint64_t v48 = *a1;
      *a1 = v36;
      a1[1] = v42;
      a1[2] = v37;
      if (v48)
      {
        operator delete(v48);
      }
    }
    else if (v11 == v5)
    {
      *(void *)unint64_t v5 = *(void *)v2;
      a1[1] = (char *)(v5 + 2);
    }
    else
    {
      unint64_t v19 = v11 + 2;
      unint64_t v20 = v5 - 2;
      uint64_t v21 = v5;
      while (v20 < v5)
      {
        uint64_t v22 = *(void *)v20;
        v20 += 2;
        *(void *)uint64_t v21 = v22;
        v21 += 2;
      }
      a1[1] = (char *)v21;
      if (v5 != v19)
      {
        uint64_t v30 = ((char *)v5 - (char *)v19) >> 3;
        int32x4_t v31 = v5 - 1;
        uint64_t v32 = 2 * v30;
        do
        {
          *(v31 - 1) = v11[v32 - 2];
          *int32x4_t v31 = v11[v32 - 1];
          v31 -= 2;
          v32 -= 2;
        }
        while (v32 * 4);
      }
      BOOL v34 = v11 <= v2 && v21 > v2;
      mach_port_t v35 = &v2[2 * v34];
      float *v11 = *v35;
      v11[1] = v35[1];
    }
  }
  else
  {
    float *v11 = v16;
    *((_DWORD *)v11 + 1) = v17;
  }
}

void sub_1BAEF97C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::less<std::tuple<float,int>>::operator()[abi:ne180100](int a1, int a2, float a3, float a4)
{
  if (a3 == a4) {
    int v4 = 0;
  }
  else {
    int v4 = -127;
  }
  if (a3 > a4) {
    int v4 = 1;
  }
  if (a3 < a4) {
    int v4 = -1;
  }
  if (a1 < a2) {
    int v5 = -1;
  }
  else {
    int v5 = 1;
  }
  if (a1 == a2) {
    int v5 = 0;
  }
  if (!v4) {
    int v4 = v5;
  }
  return v4 != -127 && v4 < 0;
}

uint64_t AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1::~$_1(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 28));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control31update_stereo_pan_control_valueERNS_4Core13Operation_SetEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::operator()(uint64_t a1, float *a2)
{
  float v3 = *a2;
  if (*a2 <= 0.0)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 24);
  }
  else if (v3 == 0.5)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 28);
  }
  else if (v3 >= 1.0)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 32);
  }
  else
  {
    if (v3 >= 0.5)
    {
      float v7 = (float)(v3 + -0.5) + (float)(v3 + -0.5);
      int v9 = *(_DWORD *)(a1 + 28);
      int v8 = *(_DWORD *)(a1 + 32);
    }
    else
    {
      float v7 = v3 + v3;
      int v9 = *(_DWORD *)(a1 + 24);
      int v8 = *(_DWORD *)(a1 + 28);
    }
    unsigned int v4 = v9 + (float)(v7 * (float)(v8 - v9));
  }
  mach_port_t v5 = *(_DWORD *)(a1 + 36);
  if (!v5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::iokit::call_method_struct<applesauce::iokit::ReplyScalar<1>,unsigned int const&,unsigned int &>((uint64_t)&__p, v5, *(_DWORD *)(a1 + 44), v4);
  uint64_t v6 = __p;
  if (*(void *)__p == v4)
  {
    **(_DWORD **)(a1 + 8) = v4;
    AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*(void *)(a1 + 48) + 32), *(_DWORD *)(a1 + 40));
  }

  operator delete(v6);
}

void sub_1BAEF99E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void applesauce::iokit::call_method_struct<applesauce::iokit::ReplyScalar<1>,unsigned int const&,unsigned int &>(uint64_t a1, mach_port_t a2, unsigned int a3, unsigned int a4)
{
  input[0] = a3;
  input[1] = a4;
  std::vector<unsigned long long>::vector(&v21);
  uint32_t outputCnt = 1;
  memset(v19, 0, sizeof(v19));
  size_t v18 = 0;
  uint64_t v6 = IOConnectCallMethod(a2, 2u, input, 2u, 0, 0, (uint64_t *)v21, &outputCnt, 0, &v18);
  if (v6)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    int v9 = std::system_category();
    v15.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&v15.__r_.__value_.__r.__words[1] = xmmword_1BAFF94D0;
    strcpy(v15.__r_.__value_.__l.__data_, "Error on IOConnectCallScalarMethod for selector ");
    std::to_string(&v14, 2u);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v10 = &v14;
    }
    else {
      int v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v14.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v15, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v17 = v12->__r_.__value_.__r.__words[2];
    long long v16 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1C1859260](exception, v6, v9, &v16);
    __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  std::vector<unsigned long long>::resize((char **)&v21, outputCnt);
  if (v18)
  {
    std::vector<unsigned char>::__append(v19, v18);
    float v7 = (void *)v19[0];
  }
  else
  {
    float v7 = 0;
  }
  *(_OWORD *)a1 = v21;
  *(void *)(a1 + 16) = v22;
  uint64_t v22 = 0;
  long long v21 = 0uLL;
  if (v7)
  {
    operator delete(v7);
    if ((void)v21)
    {
      *((void *)&v21 + 1) = v21;
      operator delete((void *)v21);
    }
  }
}

void sub_1BAEF9BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v31 & 1) == 0)
    {
LABEL_10:
      BOOL v34 = *(void **)(v32 - 96);
      if (v34)
      {
        *(void *)(v32 - 88) = v34;
        operator delete(v34);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v30);
  goto LABEL_10;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 28));
  float v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1483BB8;
  return std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 16) = v5;
  io_connect_t v6 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 28) = v6;
  uint64_t v7 = IOConnectAddRef(v6);
  if (v7)
  {
    uint64_t v10 = v7;
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    unint64_t v12 = std::system_category();
    MEMORY[0x1C1859250](exception, v10, v12, "Error on IOConnectAddRef");
    __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_1BAEF9DF4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = &unk_1F1483BB8;
  std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BAEF9E70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1483BB8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 36));
  float v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1483BB8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 36));
  float v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control31update_stereo_pan_control_valueERNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

float std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::operator()(uint64_t a1)
{
  unsigned int v1 = **(_DWORD **)(a1 + 8);
  unsigned int v2 = *(_DWORD *)(a1 + 24);
  float result = 0.0;
  unsigned int v4 = v1 - v2;
  if (v1 < v2)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 28);
    float result = 0.5;
    if (v1 != v5)
    {
      unsigned int v6 = *(_DWORD *)(a1 + 32);
      float result = 1.0;
      if (v1 > v6)
      {
        BOOL v7 = v1 >= v5;
        unsigned int v8 = v1 - v5;
        if (v7) {
          return (float)((float)((float)v8 / (float)(v6 - v5)) * 0.5) + 0.5;
        }
        else {
          return (float)((float)v4 / (float)(v5 - v2)) * 0.5;
        }
      }
    }
  }
  return result;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::destroy_deallocate(void *__p)
{
  unsigned int v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::destroy(uint64_t a1)
{
  unsigned int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = &unk_1F1483B38;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(result + 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 32);
  *(void *)(a2 + 24) = v4;
  return result;
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::__clone(uint64_t a1)
{
  float result = operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *float result = &unk_1F1483B38;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  result[3] = *(void *)(a1 + 24);
  *((_DWORD *)result + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1483B38;
  unsigned int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_stereo_pan_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1483B38;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<unsigned int>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14827F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<unsigned int>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14827F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1::~$_1(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 24));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(std::vector<unsigned int> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(std::vector<unsigned int> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control29update_selector_control_valueERNS_4Core13Operation_SetEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(std::vector<unsigned int> const&)>::operator()(uint64_t a1, unsigned int **a2)
{
  if (!*(unsigned char *)(a1 + 8))
  {
    uint64_t v11 = *a2;
    if (*a2 == a2[1]) {
      return;
    }
    mach_port_t v12 = *(_DWORD *)(a1 + 32);
    if (!v12)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::iokit::call_method_struct<applesauce::iokit::ReplyScalar<1>,unsigned int const&,unsigned int const&>((uint64_t)&v51, v12, *(_DWORD *)(a1 + 40), *v11);
    long long v13 = *a2;
    uint64_t v14 = **a2;
    std::vector<unsigned int>::pointer begin = v51.__begin_;
    if (*(void *)v51.__begin_ == v14)
    {
      uint64_t v15 = *(void *)(a1 + 16);
      long long v16 = *(_DWORD **)v15;
      *(void *)(v15 + 8) = *(void *)v15;
      unint64_t v17 = *(void *)(v15 + 16);
      if ((unint64_t)v16 >= v17)
      {
        unint64_t v23 = v17 - (void)v16;
        unint64_t v24 = (uint64_t)(v17 - (void)v16) >> 1;
        if (v24 <= 1) {
          unint64_t v24 = 1;
        }
        if (v23 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v24;
        }
        uint64_t v26 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v25);
        unint64_t v27 = *(_DWORD **)v15;
        uint64_t v28 = *(_DWORD **)(v15 + 8);
        uint64_t v30 = &v26[v29];
        *uint64_t v26 = *v13;
        size_t v18 = v26 + 1;
        while (v28 != v27)
        {
          int v31 = *--v28;
          *--uint64_t v26 = v31;
        }
        *(void *)uint64_t v15 = v26;
        *(void *)(v15 + 8) = v18;
        *(void *)(v15 + 16) = v30;
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        *long long v16 = v14;
        size_t v18 = v16 + 1;
      }
      *(void *)(v15 + 8) = v18;
      AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*(void *)(a1 + 48) + 32), *(_DWORD *)(a1 + 36));
    }
    goto LABEL_36;
  }
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v40, *a2, (uint64_t)a2[1], a2[1] - *a2);
  std::vector<unsigned int>::pointer begin = v40;
  unsigned int v5 = v41;
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  mach_port_t v6 = *(_DWORD *)(a1 + 32);
  if (!v6)
  {
    uint64_t v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v32, "cannot create io_connect_proxy from null io_object");
    __cxa_throw(v32, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  memset(&v51, 0, sizeof(v51));
  uint32_t outputCnt = 0;
  std::vector<unsigned char>::vector(&outputStruct, 0x400uLL);
  uint64_t v7 = v5 - (char *)begin;
  size_t v47 = 1024;
  uint64_t v8 = IOConnectCallMethod(v6, 8u, 0, 0, begin, v5 - (char *)begin, 0, &outputCnt, outputStruct, &v47);
  if (v8)
  {
    float v33 = __cxa_allocate_exception(0x20uLL);
    BOOL v34 = std::system_category();
    v44.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&v44.__r_.__value_.__r.__words[1] = xmmword_1BAFF94D0;
    strcpy(v44.__r_.__value_.__l.__data_, "Error on IOConnectCallScalarMethod for selector ");
    std::to_string(&v43, 8u);
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      mach_port_t v35 = &v43;
    }
    else {
      mach_port_t v35 = (std::string *)v43.__r_.__value_.__r.__words[0];
    }
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v43.__r_.__value_.__l.__size_;
    }
    mach_port_t v37 = std::string::append(&v44, (const std::string::value_type *)v35, size);
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    std::string::size_type v46 = v37->__r_.__value_.__r.__words[2];
    long long v45 = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1C1859260](v33, v8, v34, &v45);
    __cxa_throw(v33, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  std::vector<unsigned long long>::resize((char **)&v51, outputCnt);
  int v9 = outputStruct;
  if (v47 <= v49 - outputStruct)
  {
    if (v47 >= v49 - outputStruct) {
      uint64_t v10 = v49;
    }
    else {
      uint64_t v10 = &outputStruct[v47];
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)&outputStruct, v47 - (v49 - outputStruct));
    int v9 = outputStruct;
    uint64_t v10 = v49;
  }
  if (v51.__begin_) {
    operator delete(v51.__begin_);
  }
  unint64_t v19 = v10 - v9;
  std::vector<unsigned int>::vector(&v51, v19 >> 2);
  memcpy(v51.__begin_, v9, v19 & 0xFFFFFFFFFFFFFFFCLL);
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  unint64_t v20 = v51.__begin_;
  if (v7 == (char *)v51.__end_ - (char *)v51.__begin_ && !memcmp(begin, v51.__begin_, v5 - (char *)begin))
  {
    long long v21 = *(std::vector<unsigned int> **)(a1 + 16);
    uint64_t v22 = v21->__begin_;
    v21->__end_ = v21->__begin_;
    std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(v21, v22, (char *)begin, v5, v7 >> 2);
    AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*(void *)(a1 + 48) + 32), *(_DWORD *)(a1 + 36));
    unint64_t v20 = v51.__begin_;
  }
  if (v20)
  {
    v51.__end_ = v20;
    operator delete(v20);
  }
  if (v9) {
    operator delete(v9);
  }
  if (begin) {
LABEL_36:
  }
    operator delete(begin);
}

void sub_1BAEFA6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  operator delete(v32);
  _Unwind_Resume(a1);
}

void applesauce::iokit::call_method_struct<applesauce::iokit::ReplyScalar<1>,unsigned int const&,unsigned int const&>(uint64_t a1, mach_port_t a2, unsigned int a3, unsigned int a4)
{
  input[0] = a3;
  input[1] = a4;
  std::vector<unsigned long long>::vector(&v21);
  uint32_t outputCnt = 1;
  memset(v19, 0, sizeof(v19));
  size_t v18 = 0;
  uint64_t v6 = IOConnectCallMethod(a2, 2u, input, 2u, 0, 0, (uint64_t *)v21, &outputCnt, 0, &v18);
  if (v6)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    int v9 = std::system_category();
    v15.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&v15.__r_.__value_.__r.__words[1] = xmmword_1BAFF94D0;
    strcpy(v15.__r_.__value_.__l.__data_, "Error on IOConnectCallScalarMethod for selector ");
    std::to_string(&v14, 2u);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v14;
    }
    else {
      uint64_t v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v14.__r_.__value_.__l.__size_;
    }
    mach_port_t v12 = std::string::append(&v15, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v17 = v12->__r_.__value_.__r.__words[2];
    long long v16 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1C1859260](exception, v6, v9, &v16);
    __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  std::vector<unsigned long long>::resize((char **)&v21, outputCnt);
  if (v18)
  {
    std::vector<unsigned char>::__append(v19, v18);
    uint64_t v7 = (void *)v19[0];
  }
  else
  {
    uint64_t v7 = 0;
  }
  *(_OWORD *)a1 = v21;
  *(void *)(a1 + 16) = v22;
  uint64_t v22 = 0;
  long long v21 = 0uLL;
  if (v7)
  {
    operator delete(v7);
    if ((void)v21)
    {
      *((void *)&v21 + 1) = v21;
      operator delete((void *)v21);
    }
  }
}

void sub_1BAEFA9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v31 & 1) == 0)
    {
LABEL_10:
      BOOL v34 = *(void **)(v32 - 96);
      if (v34)
      {
        *(void *)(v32 - 88) = v34;
        operator delete(v34);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v30);
  goto LABEL_10;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(std::vector<unsigned int> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(std::vector<unsigned int> const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(std::vector<unsigned int> const&)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 24));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(std::vector<unsigned int> const&)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(std::vector<unsigned int> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14838C0;
  return std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  io_connect_t v5 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 24) = v5;
  uint64_t v6 = IOConnectAddRef(v5);
  if (v6)
  {
    uint64_t v9 = v6;
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v11 = std::system_category();
    MEMORY[0x1C1859250](exception, v9, v11, "Error on IOConnectAddRef");
    __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  *(void *)(a1 + 28) = *(void *)(a2 + 28);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_1BAEFABE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(std::vector<unsigned int> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = &unk_1F14838C0;
  std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BAEFAC60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(std::vector<unsigned int> const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F14838C0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 32));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(std::vector<unsigned int> const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F14838C0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 32));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0>,std::vector<unsigned int> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0>,std::vector<unsigned int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control29update_selector_control_valueERNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0>,std::vector<unsigned int> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2, *(const void **)v2, *(void *)(v2 + 8), (uint64_t)(*(void *)(v2 + 8) - *(void *)v2) >> 2);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0>,std::vector<unsigned int> ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0>,std::vector<unsigned int> ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0>,std::vector<unsigned int> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14837D0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0>,std::vector<unsigned int> ()(void)>::__clone(uint64_t a1)
{
  float result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *float result = &unk_1F14837D0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0>,std::vector<unsigned int> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14837D0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_selector_control_value(AMCP::Core::Operation_Set &)::$_0>,std::vector<unsigned int> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14837D0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1::~$_1(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 16));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(BOOL const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(BOOL const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control28update_BOOLean_control_valueERNS_4Core13Operation_SetEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(BOOL const&)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  mach_port_t v3 = *(_DWORD *)(a1 + 24);
  if (!v3)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unsigned int v5 = *a2;
  applesauce::iokit::call_method_struct<applesauce::iokit::ReplyScalar<1>,unsigned int const&,unsigned int &>((uint64_t)&__p, v3, *(_DWORD *)(a1 + 32), v5);
  uint64_t v6 = __p;
  if ((v5 == 0) != (*(void *)__p != 0))
  {
    **(unsigned char **)(a1 + 8) = v5;
    AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*(void *)(a1 + 40) + 32), *(_DWORD *)(a1 + 28));
  }

  operator delete(v6);
}

void sub_1BAEFB0C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(BOOL const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(BOOL const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(BOOL const&)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 16));
  mach_port_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(BOOL const&)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(BOOL const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1483670;
  return std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  io_connect_t v5 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  uint64_t v6 = IOConnectAddRef(v5);
  if (v6)
  {
    uint64_t v9 = v6;
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v11 = std::system_category();
    MEMORY[0x1C1859250](exception, v9, v11, "Error on IOConnectAddRef");
    __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  *(void *)(a1 + 20) = *(void *)(a2 + 20);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_1BAEFB26C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(BOOL const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  void *v2 = &unk_1F1483670;
  std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BAEFB2E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(BOOL const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1483670;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 24));
  mach_port_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(BOOL const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1483670;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 24));
  mach_port_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control28update_BOOLean_control_valueERNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return **(unsigned __int8 **)(a1 + 8);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1483580;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  float result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *float result = &unk_1F1483580;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1483580;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_BOOLean_control_value(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1483580;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<BOOL>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1483530;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<BOOL>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1483530;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1::~$_1(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 32));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

uint64_t AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3::~$_3(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 32));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3>,void ()(float const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3>,void ()(float const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control27update_volume_control_valueERNS_4Core13Operation_SetEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3>,void ()(float const&)>::operator()(uint64_t a1, float *a2)
{
  int v3 = AMCP::Utility::Level_Map::calculate_raw_from_decibel(*(float ***)(a1 + 8), *a2);
  mach_port_t v4 = *(_DWORD *)(a1 + 40);
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v5 = v3;
  applesauce::iokit::call_method_struct<applesauce::iokit::ReplyScalar<1>,unsigned int const&,int &>((uint64_t)&__p, v4, *(_DWORD *)(a1 + 48), v3);
  uint64_t v6 = __p;
  if (*(void *)__p == v5)
  {
    **(_DWORD **)(a1 + 24) = v5;
    AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*(void *)(a1 + 56) + 32), *(_DWORD *)(a1 + 44));
  }

  operator delete(v6);
}

void sub_1BAEFB80C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void applesauce::iokit::call_method_struct<applesauce::iokit::ReplyScalar<1>,unsigned int const&,int &>(uint64_t a1, mach_port_t a2, unsigned int a3, int a4)
{
  input[0] = a3;
  input[1] = a4;
  std::vector<unsigned long long>::vector(&v21);
  uint32_t outputCnt = 1;
  memset(v19, 0, sizeof(v19));
  size_t v18 = 0;
  uint64_t v6 = IOConnectCallMethod(a2, 2u, input, 2u, 0, 0, (uint64_t *)v21, &outputCnt, 0, &v18);
  if (v6)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    uint64_t v9 = std::system_category();
    v15.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&v15.__r_.__value_.__r.__words[1] = xmmword_1BAFF94D0;
    strcpy(v15.__r_.__value_.__l.__data_, "Error on IOConnectCallScalarMethod for selector ");
    std::to_string(&v14, 2u);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v14;
    }
    else {
      uint64_t v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v14.__r_.__value_.__l.__size_;
    }
    mach_port_t v12 = std::string::append(&v15, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v17 = v12->__r_.__value_.__r.__words[2];
    long long v16 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1C1859260](exception, v6, v9, &v16);
    __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  std::vector<unsigned long long>::resize((char **)&v21, outputCnt);
  if (v18)
  {
    std::vector<unsigned char>::__append(v19, v18);
    uint64_t v7 = (void *)v19[0];
  }
  else
  {
    uint64_t v7 = 0;
  }
  *(_OWORD *)a1 = v21;
  *(void *)(a1 + 16) = v22;
  uint64_t v22 = 0;
  long long v21 = 0uLL;
  if (v7)
  {
    operator delete(v7);
    if ((void)v21)
    {
      *((void *)&v21 + 1) = v21;
      operator delete((void *)v21);
    }
  }
}

void sub_1BAEFB9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v31 & 1) == 0)
    {
LABEL_10:
      BOOL v34 = *(void **)(v32 - 96);
      if (v34)
      {
        *(void *)(v32 - 88) = v34;
        operator delete(v34);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v30);
  goto LABEL_10;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3>,void ()(float const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3>,void ()(float const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3>,void ()(float const&)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 32));
  int v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  mach_port_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3>,void ()(float const&)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3>,void ()(float const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1483148;
  return std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  io_connect_t v6 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 32) = v6;
  uint64_t v7 = IOConnectAddRef(v6);
  if (v7)
  {
    uint64_t v10 = v7;
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    mach_port_t v12 = std::system_category();
    MEMORY[0x1C1859250](exception, v10, v12, "Error on IOConnectAddRef");
    __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  *(void *)(a1 + 36) = *(void *)(a2 + 36);
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_1BAEFBC34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 24);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3>,void ()(float const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x48uLL);
  void *v2 = &unk_1F1483148;
  std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BAEFBCBC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3>,void ()(float const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1483148;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 40));
  int v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_3>,void ()(float const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1483148;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 40));
  int v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2>,float ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2>,float ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control27update_volume_control_valueERNS_4Core13Operation_SetEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

float std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2>,float ()(void)>::operator()(uint64_t a1)
{
  return AMCP::Utility::Level_Map::calculate_decibel_from_raw(*(AMCP::Utility::Level_Map **)(a1 + 8), **(_DWORD **)(a1 + 24));
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2>,float ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2>,float ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2>,float ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2>,float ()(void)>::destroy(uint64_t a1)
{
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2>,float ()(void)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_1F14830C8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = result[4];
  a2[3] = result[3];
  a2[4] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2>,float ()(void)>::__clone(void *a1)
{
  float result = operator new(0x28uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  *float result = &unk_1F14830C8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1[4];
  result[3] = a1[3];
  result[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2>,float ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14830C8;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2>,float ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14830C8;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control27update_volume_control_valueERNS_4Core13Operation_SetEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::operator()(uint64_t a1, float *a2)
{
  mach_port_t v3 = *(_DWORD *)(a1 + 40);
  if (!v3)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v5 = *(_DWORD *)(**(void **)(a1 + 8) + 4);
  int v6 = v5
     + (int)(float)(fmaxf(fminf(*a2, 1.0), 0.0) * (float)(*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 8) - 4) - v5));
  applesauce::iokit::call_method_struct<applesauce::iokit::ReplyScalar<1>,unsigned int const&,int &>((uint64_t)&__p, v3, *(_DWORD *)(a1 + 48), v6);
  uint64_t v7 = __p;
  if (*(void *)__p == v6)
  {
    **(_DWORD **)(a1 + 24) = v6;
    AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*(void *)(a1 + 56) + 32), *(_DWORD *)(a1 + 44));
  }

  operator delete(v7);
}

void sub_1BAEFC194(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 32));
  mach_port_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1482FB8;
  return std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  io_connect_t v6 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 32) = v6;
  uint64_t v7 = IOConnectAddRef(v6);
  if (v7)
  {
    uint64_t v10 = v7;
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    mach_port_t v12 = std::system_category();
    MEMORY[0x1C1859250](exception, v10, v12, "Error on IOConnectAddRef");
    __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  *(void *)(a1 + 36) = *(void *)(a2 + 36);
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_1BAEFC360(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 24);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x48uLL);
  void *v2 = &unk_1F1482FB8;
  std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BAEFC3E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1482FB8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 40));
  mach_port_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(float const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1482FB8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 40));
  mach_port_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}