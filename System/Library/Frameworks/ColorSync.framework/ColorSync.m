CFTypeID ColorSyncProfileGetTypeID(void)
{
  if (ColorSyncProfileGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
  }
  return ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID;
}

uint64_t colorSyncProfileRetainCount(uint64_t a1, atomic_uint *a2)
{
  if (a1 == -1)
  {
    if (a2[37] != 2 && atomic_fetch_add_explicit(a2 + 4, 0xFFFFFFFF, memory_order_relaxed) == 1)
    {
      colorSyncProfileFinalize((uint64_t)a2);
      CFAllocatorRef v4 = CFGetAllocator(a2);
      CFAllocatorDeallocate(v4, a2);
    }
    return 0;
  }
  if (a1)
  {
    if (a1 == 1 && a2[37] != 2)
    {
      uint64_t result = 0;
      atomic_fetch_add_explicit(a2 + 4, 1u, memory_order_relaxed);
      return result;
    }
    return 0;
  }
  if (a2[37] == 2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return atomic_load((unsigned int *)a2 + 4);
  }
}

void colorSyncProfileFinalize(uint64_t a1)
{
  if (a1)
  {
    v2 = *(const void **)(a1 + 88);
    if (v2) {
      CFRelease(v2);
    }
    v3 = *(const void **)(a1 + 96);
    if (v3) {
      CFRelease(v3);
    }
    CFAllocatorRef v4 = *(const void **)(a1 + 104);
    if (v4) {
      CFRelease(v4);
    }
    v5 = *(const void **)(a1 + 112);
    if (v5) {
      CFRelease(v5);
    }
    v6 = *(const void **)(a1 + 120);
    if (v6) {
      CFRelease(v6);
    }
    v7 = *(const void **)(a1 + 248);
    if (v7) {
      CFRelease(v7);
    }
    if (*(_DWORD *)(a1 + 148) == 1)
    {
      pthread_mutex_destroy((pthread_mutex_t *)(a1 + 24));
    }
  }
}

uint64_t compare_names(void *a1, void *a2)
{
  if (*a1 > *a2) {
    return 1;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t tagValueComparer(uint64_t result, CFTypeRef cf1, uint64_t a3)
{
  if (!*(void *)(a3 + 8))
  {
    uint64_t v4 = result;
    uint64_t result = CFEqual(cf1, *(CFTypeRef *)a3);
    if (result) {
      *(void *)(a3 + 8) = v4;
    }
  }
  return result;
}

uint64_t ColorSyncTRCGetTypeID()
{
  if (ColorSyncTRCGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncTRCGetTypeID_predicate, &__block_literal_global_1420);
  }
  return ColorSyncTRCGetTypeID_kColorSyncTRCRuntimeID;
}

void tagSignatureAppender(const void *a1, uint64_t a2, __CFArray *a3)
{
  if (a1 && CFEqual(a1, @"iccHeader") != 1)
  {
    CFArrayAppendValue(a3, a1);
  }
}

BOOL CMMProfile::Usable(CMMProfile *this)
{
  if (*((_DWORD *)this + 17) != 1633907568) {
    return 0;
  }
  int v2 = *((unsigned __int8 *)this + 43) << 24;
  if (v2 != 0x4000000 && v2 != 0x2000000) {
    return 0;
  }
  CFArrayRef v4 = ColorSyncProfileCopyTagSignatures(*((ColorSyncProfileRef *)this + 2));
  if (!v4)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  CFArrayRef v5 = v4;
  CFIndex Count = CFArrayGetCount(v4);
  if (Count)
  {
    unint64_t v7 = Count;
    BOOL v8 = 0;
    for (i = 0; i != v7; BOOL v8 = ++i >= v7)
    {
      ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(v5, i);
      int FourCharCodeFromSignature = ColorSyncGetFourCharCodeFromSignature(ValueAtIndex);
      int v12 = FourCharCodeFromSignature;
      if (FourCharCodeFromSignature > 1633776230)
      {
        if (FourCharCodeFromSignature <= 1733843289)
        {
          if (FourCharCodeFromSignature <= 1649957209)
          {
            if (FourCharCodeFromSignature != 1633776231)
            {
              int v15 = 1649693251;
              goto LABEL_39;
            }
          }
          else if (FourCharCodeFromSignature != 1649957210 && FourCharCodeFromSignature != 1667851120)
          {
            int v15 = 1733579331;
            goto LABEL_39;
          }
        }
        else if (FourCharCodeFromSignature > 1800688194)
        {
          if (FourCharCodeFromSignature != 1800688195 && FourCharCodeFromSignature != 1918128707)
          {
            int v15 = 1918392666;
            goto LABEL_39;
          }
        }
        else if (FourCharCodeFromSignature != 1733843290 && FourCharCodeFromSignature != 1734438260)
        {
          if (FourCharCodeFromSignature == 1751405638)
          {
            if (ColorSyncProfileIsPQBased(*((ColorSyncProfileRef *)this + 2))
              || ColorSyncProfileIsHLGBased(*((ColorSyncProfileRef *)this + 2)))
            {
              uint64_t v13 = 0;
            }
            else
            {
              uint64_t v13 = 4294967126;
            }
            CMMThrowExceptionOnError(v13);
          }
          continue;
        }
      }
      else if (FourCharCodeFromSignature > 1633763938)
      {
        if (FourCharCodeFromSignature <= 1633768034)
        {
          if (FourCharCodeFromSignature != 1633763939)
          {
            unsigned __int16 v14 = 18275;
LABEL_36:
            int v15 = v14 | 0x61610000;
LABEL_39:
            if (FourCharCodeFromSignature != v15) {
              continue;
            }
          }
        }
        else if (FourCharCodeFromSignature != 1633768035 && FourCharCodeFromSignature != 1633772135)
        {
          unsigned __int16 v14 = 26471;
          goto LABEL_36;
        }
      }
      else if ((FourCharCodeFromSignature - 1093812784) >= 3 {
             && (FourCharCodeFromSignature - 1110589744) >= 3)
      }
      {
        continue;
      }
      uint64_t v16 = *((void *)this + 2);
      if (!*(_DWORD *)(v16 + 148))
      {
        CFDataRef Tag = (const __CFData *)ColorSyncProfileGetTag(*((void *)this + 2), ValueAtIndex);
        if (Tag)
        {
          CFDataRef v18 = Tag;
          uint64_t v33 = 0;
          context[0] = CFDataGetBytePtr(Tag);
          context[1] = CFDataGetLength(v18);
          LOBYTE(v33) = 0;
          v34 = ValueAtIndex;
          uint64_t v35 = 0;
          CFDictionaryApplyFunction(*(CFDictionaryRef *)(v16 + 88), (CFDictionaryApplierFunction)overlap_verifier, context);
          if ((_BYTE)v33)
          {
            CFStringRef v19 = ColorSyncProfileCopyDescriptionString(*((ColorSyncProfileRef *)this + 2));
            CFStringRef v26 = v19;
            v27 = @"No description";
            if (v19) {
              LOBYTE(v27) = (_BYTE)v19;
            }
            ColorSyncLog(2, (uint64_t)"Invalid profile '%@': tags '%@' and '%@' overlap", v20, v21, v22, v23, v24, v25, (char)v27);
            if (v26) {
              CFRelease(v26);
            }
          }
        }
      }
      if (!CMMProfile::GetTag((uint64_t)this, v12)) {
        goto LABEL_55;
      }
    }
  }
  BOOL v8 = 1;
LABEL_55:
  v28 = (void *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v28)
  {
    do
    {
      v29 = (void *)v28[2];
      (*(void (**)(void *))(*v28 + 8))(v28);
      v28 = v29;
    }
    while (v29);
  }
  CFRelease(v5);
  return v8;
}

void sub_18BE09F28(void *a1)
{
}

void CMMParaCurveTag::~CMMParaCurveTag(CMMParaCurveTag *this)
{
  CMMTag::~CMMTag(this);

  CMMBase::operator delete(v1);
}

uint64_t create(CFTypeRef cf, int a2, uint64_t a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (cf)
  {
    CFTypeID v6 = CFGetTypeID(cf);
    if (v6 != CFDataGetTypeID()) {
      return 0;
    }
    BytePtr = CFDataGetBytePtr((CFDataRef)cf);
    if ((unint64_t)CFDataGetLength((CFDataRef)cf) < 0x81 || *((_DWORD *)BytePtr + 9) != 1886610273) {
      return 0;
    }
  }
  else if (a2 != 1)
  {
    return 0;
  }
  if (ColorSyncProfileGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v9 = Instance;
  if (Instance)
  {
    *(_OWORD *)(Instance + 240) = 0u;
    *(_OWORD *)(Instance + 228) = 0u;
    *(_OWORD *)(Instance + 212) = 0u;
    *(_OWORD *)(Instance + 196) = 0u;
    *(_OWORD *)(Instance + 180) = 0u;
    *(_OWORD *)(Instance + 164) = 0u;
    *(_OWORD *)(Instance + 148) = 0u;
    *(_OWORD *)(Instance + 132) = 0u;
    *(_OWORD *)(Instance + 116) = 0u;
    *(_OWORD *)(Instance + 100) = 0u;
    *(_OWORD *)(Instance + 84) = 0u;
    *(_OWORD *)(Instance + 68) = 0u;
    *(_OWORD *)(Instance + 52) = 0u;
    *(_OWORD *)(Instance + 36) = 0u;
    *(_OWORD *)(Instance + 20) = 0u;
    *(_DWORD *)(Instance + 16) = 1;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *(void *)(v9 + 88) = Mutable;
    if (Mutable)
    {
      if (!cf) {
        goto LABEL_37;
      }
      v11 = Mutable;
      int v12 = (UInt8 *)CFDataGetBytePtr((CFDataRef)cf);
      unint64_t Length = CFDataGetLength((CFDataRef)cf);
      if (v12)
      {
        unint64_t v14 = Length;
        if (Length >= 0x80)
        {
          CFDataRef TagData = createTagData(v12, 128, a2 == 1);
          if (TagData)
          {
            CFDataRef v16 = TagData;
            CFDictionarySetValue(v11, @"iccHeader", TagData);
            CFRelease(v16);
            if (v14 >= 0x85)
            {
              unsigned int v17 = *((_DWORD *)v12 + 32);
              if (v17)
              {
                if (v14 >= 0x90)
                {
                  int v18 = 0;
                  unsigned int v43 = bswap32(v17);
                  unint64_t v44 = v14;
                  unint64_t v45 = (unint64_t)&v12[v14 - 1];
                  CFStringRef v19 = (unsigned int *)(v12 + 132);
                  while ((unint64_t)(v19 + 3) <= v45)
                  {
                    CFIndex v20 = bswap32(v19[2]);
                    if ((v20 & 0x80000000) != 0) {
                      break;
                    }
                    unsigned int v21 = v19[1];
                    uint64_t v22 = bswap32(v21);
                    if (v20 + v22 > v14) {
                      break;
                    }
                    v46 = v19 + 3;
                    unsigned int v23 = bswap32(*v19);
                    if (v18)
                    {
                      int v24 = v18;
                      uint64_t v25 = (unsigned int *)(v12 + 132);
                      while (v25[1] != v21)
                      {
                        v25 += 3;
                        if (!--v24) {
                          goto LABEL_26;
                        }
                      }
                      unsigned int v32 = bswap32(*v25);
                      CFStringRef SignatureFromFourCharCode = ColorSyncCreateSignatureFromFourCharCode(v23);
                      CFStringRef v26 = ColorSyncCreateSignatureFromFourCharCode(v32);
                      v29 = v11;
                      CFStringRef v30 = SignatureFromFourCharCode;
                      CFStringRef v31 = v26;
                    }
                    else
                    {
LABEL_26:
                      CFStringRef v26 = ColorSyncCreateSignatureFromFourCharCode(v23);
                      if (CFDictionaryContainsValue(v11, v26) || (CFDataRef v27 = createTagData(&v12[v22], v20, a2 == 1)) == 0)
                      {
                        CFRelease(v26);
                        goto LABEL_58;
                      }
                      CFStringRef SignatureFromFourCharCode = (CFStringRef)v27;
                      v29 = v11;
                      CFStringRef v30 = v26;
                      CFStringRef v31 = SignatureFromFourCharCode;
                    }
                    CFDictionarySetValue(v29, v30, v31);
                    CFRelease(SignatureFromFourCharCode);
                    CFRelease(v26);
                    ++v18;
                    CFStringRef v19 = v46;
                    unint64_t v14 = v44;
                    if (v18 == v43) {
                      goto LABEL_31;
                    }
                  }
                }
                goto LABEL_58;
              }
            }
LABEL_31:
            if (a2 == 1)
            {
              *(void *)(v9 + 104) = CFRetain(cf);
LABEL_36:
              *(void *)(v9 + 128) = computeMD5((const __CFData *)cf);
              *(void *)(v9 + 136) = v35;
LABEL_37:
              *(_DWORD *)(v9 + 148) = a2;
              if (a2 == 1)
              {
                v47.__sig = 0;
                *(void *)v47.__opaque = 0;
                pthread_mutexattr_init(&v47);
                pthread_mutexattr_settype(&v47, 2);
                pthread_mutex_init((pthread_mutex_t *)(v9 + 24), &v47);
                pthread_mutexattr_destroy(&v47);
                *(void *)(v9 + 96) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
              }
LABEL_39:
              if (a3 == 3)
              {
                if (BT2020_luminance_coefficients_predicate != -1) {
                  dispatch_once(&BT2020_luminance_coefficients_predicate, &__block_literal_global_470);
                }
                v39 = &BT2020_luminance_coefficients_coeffs_2;
                v40 = &BT2020_luminance_coefficients_coeffs_1;
                v41 = &BT2020_luminance_coefficients_coeffs_0;
              }
              else if (a3 == 2)
              {
                if (DisplayP3_luminance_coefficients_predicate != -1) {
                  dispatch_once(&DisplayP3_luminance_coefficients_predicate, &__block_literal_global_467);
                }
                v39 = &DisplayP3_luminance_coefficients_coeffs_2;
                v40 = &DisplayP3_luminance_coefficients_coeffs_1;
                v41 = &DisplayP3_luminance_coefficients_coeffs_0;
              }
              else
              {
                int v36 = 0;
                int v37 = 0;
                int v38 = 0;
                if (a3 != 1) {
                  goto LABEL_52;
                }
                if (BT709_luminance_coefficients_predicate != -1) {
                  dispatch_once(&BT709_luminance_coefficients_predicate, &__block_literal_global_464);
                }
                v39 = &BT709_luminance_coefficients_coeffs_2;
                v40 = &BT709_luminance_coefficients_coeffs_1;
                v41 = &BT709_luminance_coefficients_coeffs_0;
              }
              int v38 = *v41;
              int v36 = *v40;
              int v37 = *v39;
LABEL_52:
              *(_DWORD *)(v9 + 152) = v38;
              *(_DWORD *)(v9 + 156) = v36;
              *(_DWORD *)(v9 + 160) = v37;
              *(_DWORD *)(v9 + 164) = 0;
              if (a2) {
                *(unsigned char *)(v9 + 144) = a2 == 2;
              }
              else {
                *(unsigned char *)(v9 + 144) = AppleCMMValidateProfile((CMMProfileMaker *)v9);
              }
              return v9;
            }
            CFDataRef Value = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 88), @"iccHeader");
            v34 = copy_swapped_header(Value);
            *(void *)(v9 + 112) = v34;
            if (v34)
            {
              *(void *)(v9 + 104) = CFRetain(cf);
              if (a2 == 2)
              {
                *(_DWORD *)(v9 + 148) = 2;
                goto LABEL_39;
              }
              goto LABEL_36;
            }
          }
        }
      }
    }
LABEL_58:
    CFRelease((CFTypeRef)v9);
    return 0;
  }
  return v9;
}

CFStringRef ColorSyncCreateSignatureFromFourCharCode(unsigned int a1)
{
  v1 = "0B2A";
  uint64_t v2 = 59;
  while (v2)
  {
    if (*(_DWORD *)v1 == a1)
    {
      uint64_t v2 = 0;
LABEL_15:
      unint64_t v7 = &v1[16 * v2];
      uint64_t v8 = *((void *)v7 + 1);
      if (v8)
      {
        CFRetain(*((CFTypeRef *)v7 + 1));
        return (CFStringRef)v8;
      }
      break;
    }
    unint64_t v3 = v2--;
    unsigned int v4 = *(_DWORD *)&v1[16 * v2];
    if (v4 == a1) {
      goto LABEL_15;
    }
    uint64_t v2 = v3 >> 1;
    unsigned int v5 = *(_DWORD *)&v1[16 * (v3 >> 1)];
    if (v5 == a1) {
      goto LABEL_15;
    }
    if (*(_DWORD *)v1 >= a1 || v5 <= a1)
    {
      v1 += 16 * v2;
      uint64_t v2 = v3 - v2;
      if (v4 <= a1 || v5 >= a1) {
        break;
      }
    }
  }
  *(_DWORD *)bytes = bswap32(a1);
  CFStringRef v9 = CFStringCreateWithBytes(0, bytes, 4, 0x600u, 0);
  if (!v9) {
    __assert_rtn("ColorSyncCreateSignatureFromFourCharCode", "ColorSyncTransform.c", 1248, "sig != NULL");
  }
  return v9;
}

CFDataRef createTagData(UInt8 *bytes, CFIndex length, int a3)
{
  if (a3) {
    return CFDataCreate(0, bytes, length);
  }
  else {
    return CFDataCreateWithBytesNoCopy(0, bytes, length, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  }
}

BOOL ColorSyncProfileIsMatrixBased(ColorSyncProfileRef a1)
{
  if (!a1) {
    return (char)a1;
  }
  v1 = a1;
  CFTypeID v2 = CFGetTypeID(a1);
  if (ColorSyncProfileGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
  }
  if (v2 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID) {
    goto LABEL_28;
  }
  CFDataRef v3 = ColorSyncProfileCopyHeader(v1);
  int v4 = *((_DWORD *)CFDataGetBytePtr(v3) + 4);
  CFRelease(v3);
  BOOL v5 = ColorSyncProfileIsHLGBased(v1) || ColorSyncProfileIsPQBased(v1);
  if (v4 == 1380401696)
  {
    CFDataRef Tag = (const UInt8 *)getTag((uint64_t)v1, @"cicp");
    if (valid_cicp_tag(Tag, 0))
    {
      if (v5)
      {
        LOBYTE(a1) = 1;
        return (char)a1;
      }
      goto LABEL_16;
    }
    if (v5) {
      uint64_t v10 = 3;
    }
    else {
      uint64_t v10 = 6;
    }
    v11 = (CFStringRef *)off_1E54D6BE8;
    while (ColorSyncProfileContainsTag(v1, *v11))
    {
      ++v11;
      if (!--v10)
      {
        LODWORD(a1) = 1;
        goto LABEL_11;
      }
    }
LABEL_28:
    LOBYTE(a1) = 0;
    return (char)a1;
  }
  if (v4 != 1196573017) {
    goto LABEL_28;
  }
  LODWORD(a1) = ColorSyncProfileContainsTag(v1, @"kTRC");
LABEL_11:
  if (((a1 ^ 1 | v5) & 1) == 0)
  {
LABEL_16:
    uint64_t v7 = 0;
    do
    {
      BOOL v8 = ColorSyncProfileContainsTag(v1, ColorSyncProfileIsMatrixBased_must_not_have_tags[v7]);
      if (v8) {
        break;
      }
    }
    while (v7++ != 2);
    LOBYTE(a1) = !v8;
  }
  return (char)a1;
}

BOOL ColorSyncProfileIsHLGBased(ColorSyncProfileRef a1)
{
  v1 = a1;
  if (a1)
  {
    CFTypeID v2 = CFGetTypeID(a1);
    if (ColorSyncProfileGetTypeID_predicate != -1) {
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
    }
    if (v2 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    {
      CFDataRef v3 = copyHeaderData((uint64_t)v1);
      if (v3)
      {
        int v4 = v3;
        BytePtr = CFDataGetBytePtr(v3);
        if (BytePtr && *((_DWORD *)BytePtr + 5) == 1482250784 && *((_DWORD *)BytePtr + 4) == 1380401696)
        {
          CFDataRef Tag = (const UInt8 *)getTag((uint64_t)v1, @"cicp");
          char v16 = 0;
          if (valid_cicp_tag(Tag, &v16) && v16 == 18)
          {
            LOBYTE(v1) = 1;
LABEL_33:
            CFRelease(v4);
            return (char)v1;
          }
          CFDataRef v7 = (const __CFData *)getTag((uint64_t)v1, @"hdTF");
          if (v7)
          {
            CFDataRef v8 = v7;
            CFStringRef v9 = CFDataGetBytePtr(v7);
            LOBYTE(v1) = 0;
            if ((unint64_t)CFDataGetLength(v8) < 0xC || !v9) {
              goto LABEL_33;
            }
            BOOL v10 = *((_DWORD *)v9 + 2) == 541543496;
            goto LABEL_17;
          }
          if (ColorSyncProfileContainsTag(v1, @"aarg")
            && ColorSyncProfileContainsTag(v1, @"aagg")
            && ColorSyncProfileContainsTag(v1, @"aabg"))
          {
            CFDataRef v11 = (const __CFData *)getTag((uint64_t)v1, @"aarg");
            int v12 = getTag((uint64_t)v1, @"aagg");
            uint64_t v13 = getTag((uint64_t)v1, @"aabg");
            if (CFEqual(v11, v12) == 1)
            {
              if (CFEqual(v12, v13))
              {
                unint64_t v14 = CFDataGetBytePtr(v11);
                LOBYTE(v1) = 0;
                if ((unint64_t)CFDataGetLength(v11) < 0xC || !v14) {
                  goto LABEL_33;
                }
                if (get_preliminary_HLG_curve_data_predicate != -1) {
                  dispatch_once(&get_preliminary_HLG_curve_data_predicate, &__block_literal_global_490);
                }
                BOOL v10 = get_preliminary_HLG_curve_data_preliminary_HLG_data == *(void *)v14
                   && dword_1E9155178 == (unint64_t)*((unsigned int *)v14 + 2);
LABEL_17:
                LOBYTE(v1) = v10;
                goto LABEL_33;
              }
            }
          }
        }
        LOBYTE(v1) = 0;
        goto LABEL_33;
      }
    }
    LOBYTE(v1) = 0;
  }
  return (char)v1;
}

CFDataRef ColorSyncProfileCopyHeader(ColorSyncProfileRef prof)
{
  if (!prof) {
    return 0;
  }
  CFTypeID v2 = CFGetTypeID(prof);
  if (ColorSyncProfileGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
  }
  if (v2 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID) {
    return 0;
  }
  if (*((_DWORD *)prof + 37) == 1) {
    pthread_mutex_lock((pthread_mutex_t *)((char *)prof + 24));
  }
  CFDataRef v3 = copyHeaderData((uint64_t)prof);
  if (*((_DWORD *)prof + 37) == 1) {
    pthread_mutex_unlock((pthread_mutex_t *)((char *)prof + 24));
  }
  return v3;
}

__CFData *copyHeaderData(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 148) == 1)
  {
    CFTypeID v2 = (pthread_mutex_t *)(a1 + 24);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
    CFDataRef Value = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 88), @"iccHeader");
    int v4 = copy_swapped_header(Value);
    pthread_mutex_unlock(v2);
    return v4;
  }
  else
  {
    CFRetain(*(CFTypeRef *)(a1 + 112));
    return *(__CFData **)(a1 + 112);
  }
}

BOOL ColorSyncProfileIsPQBased(ColorSyncProfileRef a1)
{
  v1 = a1;
  if (a1)
  {
    CFTypeID v2 = CFGetTypeID(a1);
    if (ColorSyncProfileGetTypeID_predicate != -1) {
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
    }
    if (v2 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    {
      CFDataRef v3 = copyHeaderData((uint64_t)v1);
      if (v3)
      {
        int v4 = v3;
        BytePtr = CFDataGetBytePtr(v3);
        if (BytePtr && *((_DWORD *)BytePtr + 5) == 1482250784 && *((_DWORD *)BytePtr + 4) == 1380401696)
        {
          CFDataRef Tag = (const UInt8 *)getTag((uint64_t)v1, @"cicp");
          char v16 = 0;
          if (valid_cicp_tag(Tag, &v16) && v16 == 16)
          {
            LOBYTE(v1) = 1;
LABEL_33:
            CFRelease(v4);
            return (char)v1;
          }
          CFDataRef v7 = (const __CFData *)getTag((uint64_t)v1, @"hdTF");
          if (v7)
          {
            CFDataRef v8 = v7;
            CFStringRef v9 = CFDataGetBytePtr(v7);
            LOBYTE(v1) = 0;
            if ((unint64_t)CFDataGetLength(v8) < 0xC || !v9) {
              goto LABEL_33;
            }
            BOOL v10 = *((_DWORD *)v9 + 2) == 538988880;
            goto LABEL_17;
          }
          if (ColorSyncProfileContainsTag(v1, @"aarg")
            && ColorSyncProfileContainsTag(v1, @"aagg")
            && ColorSyncProfileContainsTag(v1, @"aabg"))
          {
            CFDataRef v11 = (const __CFData *)getTag((uint64_t)v1, @"aarg");
            int v12 = getTag((uint64_t)v1, @"aagg");
            uint64_t v13 = getTag((uint64_t)v1, @"aabg");
            if (CFEqual(v11, v12) == 1)
            {
              if (CFEqual(v12, v13))
              {
                unint64_t v14 = CFDataGetBytePtr(v11);
                LOBYTE(v1) = 0;
                if ((unint64_t)CFDataGetLength(v11) < 0xC || !v14) {
                  goto LABEL_33;
                }
                if (get_preliminary_PQ_curve_data_predicate != -1) {
                  dispatch_once(&get_preliminary_PQ_curve_data_predicate, &__block_literal_global_487);
                }
                BOOL v10 = get_preliminary_PQ_curve_data_preliminary_PQ_data == *(void *)v14
                   && dword_1E9155190 == (unint64_t)*((unsigned int *)v14 + 2);
LABEL_17:
                LOBYTE(v1) = v10;
                goto LABEL_33;
              }
            }
          }
        }
        LOBYTE(v1) = 0;
        goto LABEL_33;
      }
    }
    LOBYTE(v1) = 0;
  }
  return (char)v1;
}

__CFData *copy_swapped_header(CFDataRef theData)
{
  if (!theData) {
    return 0;
  }
  MutableCopy = CFDataCreateMutableCopy(0, 128, theData);
  CFTypeID v2 = MutableCopy;
  if (MutableCopy)
  {
    CFDataSetLength(MutableCopy, 128);
    MutableBytePtr = CFDataGetMutableBytePtr(v2);
    *(int8x16_t *)MutableBytePtr = vrev32q_s8(*(int8x16_t *)MutableBytePtr);
    int8x8_t v4 = vrev16_s8(*(int8x8_t *)(MutableBytePtr + 24));
    *((int8x8_t *)MutableBytePtr + 2) = vrev32_s8(*(int8x8_t *)(MutableBytePtr + 16));
    *((int8x8_t *)MutableBytePtr + 3) = v4;
    *((_WORD *)MutableBytePtr + 16) = bswap32(*((unsigned __int16 *)MutableBytePtr + 16)) >> 16;
    *((_WORD *)MutableBytePtr + 17) = bswap32(*((unsigned __int16 *)MutableBytePtr + 17)) >> 16;
    *(int8x16_t *)(MutableBytePtr + 36) = vrev32q_s8(*(int8x16_t *)(MutableBytePtr + 36));
    *(int8x16_t *)(MutableBytePtr + 52) = vrev32q_s8(*(int8x16_t *)(MutableBytePtr + 52));
    *(int8x16_t *)(MutableBytePtr + 68) = vrev32q_s8(*(int8x16_t *)(MutableBytePtr + 68));
  }
  return v2;
}

void CMMProfile::~CMMProfile(CMMProfile *this)
{
  *(void *)this = &unk_1ED9811E8;
  uint64_t v2 = *((void *)this + 21);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  CFDataRef v3 = (const void *)*((void *)this + 2);
  if (v3) {
    CFRelease(v3);
  }
  int8x8_t v4 = (void *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v4)
  {
    do
    {
      BOOL v5 = (void *)v4[2];
      (*(void (**)(void *))(*v4 + 8))(v4);
      int8x8_t v4 = v5;
    }
    while (v5);
  }
}

void CMMBase::operator delete(pthread_mutex_t **a1)
{
  if (a1)
  {
    pthread_mutex_lock(*(a1 - 1));
    uint64_t v2 = a1 - 4;
    CFDataRef v3 = (pthread_mutex_t **)*(a1 - 3);
    if (v3 || (CFDataRef v3 = (pthread_mutex_t **)*(a1 - 2)) != 0) {
      const void *v3 = *v2;
    }
    int8x8_t v4 = *v2;
    if (*v2)
    {
      uint64_t v5 = (uint64_t)*(a1 - 2);
      if (v5)
      {
        uint64_t v6 = 0;
        *(void *)&v4->__opaque[8] = v5;
      }
      else
      {
        uint64_t v6 = (uint64_t)*(a1 - 3);
      }
      *(void *)v4->__opaque = v6;
    }
    pthread_mutex_unlock(*(a1 - 1));
    free(a1 - 4);
  }
}

CFDictionaryRef tagDataAdder(const __CFString *key, uint64_t a2)
{
  CFDictionaryRef result = *(const __CFDictionary **)(a2 + 8);
  if (result)
  {
    CFDataRef Value = CFDictionaryGetValue(result, key);
    CFTypeID v6 = CFGetTypeID(Value);
    CFDictionaryRef result = (const __CFDictionary *)CFDataGetTypeID();
    if ((const __CFDictionary *)v6 == result)
    {
      BytePtr = CFDataGetBytePtr((CFDataRef)Value);
      CFIndex Length = CFDataGetLength((CFDataRef)Value);
      CFDataIncreaseLength(*(CFMutableDataRef *)a2, (Length + 3) & 0xFFFFFFFFFFFFFFFCLL);
      MutableBytePtr = CFDataGetMutableBytePtr(*(CFMutableDataRef *)a2);
      memcpy(&MutableBytePtr[*(void *)(a2 + 16)], BytePtr, Length);
      CFDictionaryRef result = (const __CFDictionary *)ColorSyncGetFourCharCodeFromSignature(key);
      uint64_t v11 = *(void *)(a2 + 16);
      uint64_t v10 = *(void *)(a2 + 24);
      int v12 = &MutableBytePtr[12 * v10];
      *((_DWORD *)v12 + 33) = bswap32(result);
      *((_DWORD *)v12 + 34) = bswap32(v11);
      *((_DWORD *)v12 + 35) = bswap32(Length);
      *(void *)(a2 + 16) = v11 + ((Length + 3) & 0xFFFFFFFC);
      *(void *)(a2 + 24) = v10 + 1;
    }
  }
  return result;
}

CFComparisonResult compareTags(const __CFString *a1, const __CFString *a2)
{
  unsigned int FourCharCodeFromSignature = ColorSyncGetFourCharCodeFromSignature(a1);
  unsigned int v5 = ColorSyncGetFourCharCodeFromSignature(a2);
  unint64_t v6 = 0;
  while (FourCharCodeFromSignature != *(_DWORD *)&aCsedmcsdtrpctp[4 * v6])
  {
    if (++v6 == 28)
    {
      unint64_t v6 = 1000;
      break;
    }
  }
  unint64_t v7 = 0;
  while (v5 != *(_DWORD *)&aCsedmcsdtrpctp[4 * v7])
  {
    if (++v7 == 28)
    {
      unint64_t v7 = 1000;
      break;
    }
  }
  if (v6 < 0x3E8 || v7 <= 0x3E7)
  {
    BOOL v9 = v6 >= v7;
    BOOL v10 = v6 == v7;
    uint64_t v11 = -1;
    if (v9) {
      uint64_t v11 = 1;
    }
    if (v10) {
      return 0;
    }
    else {
      return v11;
    }
  }
  else
  {
    return CFStringCompare(a1, a2, 0);
  }
}

CFStringRef ColorSyncGetFourCharCodeFromSignature(const __CFString *result)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    CFStringRef v1 = result;
    CStringPtr = CFStringGetCStringPtr(result, 0x600u);
    *(void *)buffer = 0;
    uint64_t v5 = 0;
    if (CStringPtr)
    {
      unsigned int v3 = *(_DWORD *)CStringPtr;
    }
    else
    {
      if (!CFStringGetCString(v1, buffer, 16, 0x600u)) {
        return (const __CFString *)1061109567;
      }
      unsigned int v3 = *(_DWORD *)buffer;
    }
    return (const __CFString *)bswap32(v3);
  }
  return result;
}

unsigned __int8 *CMMProfile::GetTag(uint64_t a1, int a2)
{
  int8x8_t v4 = *(unsigned __int8 **)(a1 + 160);
  if (!v4)
  {
LABEL_4:
    if (!*(void *)(a1 + 16)) {
      return 0;
    }
    CFStringRef SignatureFromFourCharCode = (__CFString *)ColorSyncCreateSignatureFromFourCharCode(a2);
    if (!ColorSyncProfileContainsTag(*(ColorSyncProfileRef *)(a1 + 16), SignatureFromFourCharCode)
      || !ColorSyncProfileGetTag(*(void *)(a1 + 16), SignatureFromFourCharCode))
    {
      int8x8_t v4 = 0;
LABEL_329:
      CFRelease(SignatureFromFourCharCode);
      return v4;
    }
    *(_OWORD *)theData = 0u;
    long long v161 = 0u;
    uint64_t v6 = *(void *)(a1 + 16);
    v158 = &unk_1ED982EC0;
    uint64_t v159 = v6;
    theData[0] = (CFDataRef)CFRetain(SignatureFromFourCharCode);
    CFDataRef Tag = (const __CFData *)ColorSyncProfileGetTag(v159, theData[0]);
    theData[1] = Tag;
    if (Tag)
    {
      *(void *)&long long v161 = CFDataGetBytePtr(Tag);
      *((void *)&v161 + 1) = CFDataGetLength(theData[1]);
    }
    uint64_t v8 = *(void *)(a1 + 160);
    do
    {
      uint64_t v9 = v8;
      if (!v8) {
        break;
      }
      uint64_t v8 = *(void *)(v8 + 16);
    }
    while (v8);
    if (*((void *)&v161 + 1) >= 8uLL) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = 4294967294;
    }
    CMMThrowExceptionOnError(v10);
    if (a2 <= 1684370274)
    {
      if (a2 <= 1633768034)
      {
        if (a2 <= 1110589743)
        {
          int v11 = -1093812784;
LABEL_95:
          if ((a2 + v11) >= 3) {
            goto LABEL_281;
          }
LABEL_96:
          int v40 = bswap32(*(_DWORD *)v161);
          if (v40 <= 1835430960)
          {
            if (v40 == 1832993312)
            {
              if (*((void *)&v161 + 1) <= 0x20uLL) {
                uint64_t v68 = 4294967126;
              }
              else {
                uint64_t v68 = 0;
              }
              CMMThrowExceptionOnError(v68);
              int8x8_t v4 = (unsigned __int8 *)CMMBase::NewInternal(0x268uLL, *(void ***)(a1 + 24));
              CMMLutTag::CMMLutTag((uint64_t)v4, a2, (uint64_t)&v158, v9, *(void ***)(a1 + 24), *(unsigned __int8 *)(v161 + 8), *(unsigned __int8 *)(v161 + 9));
              int v38 = 0;
              v42 = &unk_1ED981F18;
              goto LABEL_163;
            }
            if (v40 == 1833058592)
            {
              if (*((void *)&v161 + 1) <= 0x20uLL) {
                uint64_t v41 = 4294967126;
              }
              else {
                uint64_t v41 = 0;
              }
              CMMThrowExceptionOnError(v41);
              int8x8_t v4 = (unsigned __int8 *)CMMBase::NewInternal(0x268uLL, *(void ***)(a1 + 24));
              CMMLutTag::CMMLutTag((uint64_t)v4, a2, (uint64_t)&v158, v9, *(void ***)(a1 + 24), *(unsigned __int8 *)(v161 + 9), *(unsigned __int8 *)(v161 + 8));
              int v38 = 0;
              v42 = &unk_1ED981FC8;
LABEL_163:
              *(void *)int8x8_t v4 = v42;
              goto LABEL_305;
            }
LABEL_157:
            if (a2 <= 1633772134) {
              goto LABEL_281;
            }
LABEL_269:
            unsigned __int16 v16 = 29287;
LABEL_270:
            if (a2 == (v16 | 0x61610000)) {
              goto LABEL_271;
            }
LABEL_281:
            v135 = CMMBase::NewInternal(0x38uLL, *(void ***)(a1 + 24));
            int v38 = v135;
            long long v136 = v161;
            void *v135 = &unk_1ED985440;
            *((_DWORD *)v135 + 2) = a2;
            v135[3] = v9;
            v135[4] = *((void *)&v136 + 1);
            v135[2] = 0;
            if (v9) {
              *(void *)(v9 + 16) = v135;
            }
            int8x8_t v4 = 0;
            v135[5] = v136;
            *((_WORD *)v135 + 24) = 0;
            goto LABEL_305;
          }
          if (v40 == 1835430962)
          {
            if (*((void *)&v161 + 1) <= 0x34uLL) {
              uint64_t v69 = 4294967126;
            }
            else {
              uint64_t v69 = 0;
            }
            CMMThrowExceptionOnError(v69);
            v70 = (unsigned __int8 *)CMMBase::NewInternal(0x90uLL, *(void ***)(a1 + 24));
            int8x8_t v4 = v70;
            v157 = *(void ***)(a1 + 24);
            *((_DWORD *)v70 + 2) = a2;
            *((void *)v70 + 4) = 0;
            *((void *)v70 + 5) = 0;
            *((_WORD *)v70 + 24) = 0;
            *((void *)v70 + 2) = 0;
            *((void *)v70 + 3) = v9;
            if (v9) {
              *(void *)(v9 + 16) = v70;
            }
            *(void *)v70 = &unk_1ED981788;
            *((_WORD *)v70 + 60) = 0;
            if ((void)v161)
            {
              if (*((uint64_t *)&v161 + 1) >= 52) {
                int64_t v77 = 44;
              }
              else {
                int64_t v77 = *((void *)&v161 + 1) - 8;
              }
              if (v77 <= 0) {
                uint64_t v78 = 4294967126;
              }
              else {
                uint64_t v78 = 0;
              }
              CMMThrowExceptionOnError(v78);
              memcpy(v4 + 50, (const void *)(v161 + 8), v77);
            }
            uint64_t v79 = 54;
            do
            {
              *(_DWORD *)&v4[v79] = bswap32(*(_DWORD *)&v4[v79]);
              v79 += 4;
            }
            while (v79 != 90);
            unsigned int v80 = bswap32(*((unsigned __int16 *)v4 + 45));
            *((_WORD *)v4 + 45) = HIWORD(v80);
            unsigned int v81 = bswap32(*((unsigned __int16 *)v4 + 46));
            *((_WORD *)v4 + 46) = HIWORD(v81);
            if ((unsigned __int16)(HIWORD(v80) - 4097) <= 0xF000u
              || (unsigned __int16)(HIWORD(v81) - 4097) <= 0xF000u
              || (uint64_t v82 = v4[50], (v82 - 16) < 0xFFFFFFF1)
              || v4[51] - 16 <= 0xFFFFFFF0)
            {
              exception = __cxa_allocate_exception(4uLL);
              _DWORD *exception = -170;
            }
            unint64_t v83 = v4[52];
            unint64_t v84 = 1;
            do
            {
              unint64_t v85 = v84 * v83;
              BOOL v87 = v84 * v83 >= v84 && v85 >= v83;
              CMMThrowExceptionWithLog(v87, "Overflow in Power", v71, v72, v73, v74, v75, v76);
              unint64_t v84 = v85;
              --v82;
            }
            while (v82);
            unint64_t v88 = v85 * v4[51];
            unint64_t v89 = 2 * v4[50] * (unint64_t)*((unsigned __int16 *)v4 + 45);
            unint64_t v90 = v4[51] * (unint64_t)*((unsigned __int16 *)v4 + 46);
            uint64_t v91 = v89 + 52;
            uint64_t v92 = v89 + 52 + 2 * v88;
            uint64_t v93 = v92 + 2 * v90;
            *((void *)v4 + 4) = v93;
            if ((unint64_t)v93 > *((void *)&v161 + 1))
            {
              v147 = __cxa_allocate_exception(4uLL);
              _DWORD *v147 = -170;
            }
            v94 = CMMBase::NewInternal(0x28uLL, v157);
            uint64_t v95 = v161;
            if ((void)v161)
            {
              if (v91 <= *((uint64_t *)&v161 + 1)) {
                uint64_t v96 = v89;
              }
              else {
                uint64_t v96 = *((void *)&v161 + 1) - 52;
              }
              if (v96 <= 0) {
                uint64_t v97 = 4294967126;
              }
              else {
                uint64_t v97 = 0;
              }
              CMMThrowExceptionOnError(v97);
              uint64_t v95 = v161 + 52;
            }
            void *v94 = &unk_1ED985520;
            v94[1] = 1;
            v94[3] = v95;
            v94[4] = v89;
            v94[2] = 0;
            *((void *)v4 + 13) = v94;
            v98 = CMMBase::NewInternal(0x28uLL, v157);
            uint64_t v99 = v161;
            if ((void)v161)
            {
              if (v92 <= *((uint64_t *)&v161 + 1)) {
                uint64_t v100 = 2 * v88;
              }
              else {
                uint64_t v100 = *((void *)&v161 + 1) - v91;
              }
              if (v100 <= 0) {
                uint64_t v101 = 4294967126;
              }
              else {
                uint64_t v101 = 0;
              }
              CMMThrowExceptionOnError(v101);
              uint64_t v99 = v161 + v91;
            }
            void *v98 = &unk_1ED985520;
            v98[1] = 1;
            v98[3] = v99;
            v98[4] = 2 * v88;
            v98[2] = 0;
            *((void *)v4 + 12) = v98;
            v102 = CMMBase::NewInternal(0x28uLL, v157);
            uint64_t v103 = 2 * v90;
            uint64_t v104 = v161;
            if (!(void)v161) {
              goto LABEL_267;
            }
            if (v93 <= *((uint64_t *)&v161 + 1)) {
              uint64_t v105 = 2 * v90;
            }
            else {
              uint64_t v105 = *((void *)&v161 + 1) - v92;
            }
            if (v105 <= 0) {
              uint64_t v106 = 4294967126;
            }
            else {
              uint64_t v106 = 0;
            }
          }
          else
          {
            if (v40 != 1835430961) {
              goto LABEL_157;
            }
            if (*((void *)&v161 + 1) <= 0x30uLL) {
              uint64_t v43 = 4294967126;
            }
            else {
              uint64_t v43 = 0;
            }
            CMMThrowExceptionOnError(v43);
            unint64_t v44 = CMMBase::NewInternal(0x78uLL, *(void ***)(a1 + 24));
            int8x8_t v4 = (unsigned __int8 *)v44;
            unint64_t v45 = *(void ***)(a1 + 24);
            *((_DWORD *)v44 + 2) = a2;
            v44[4] = 0;
            v44[5] = 0;
            *((_WORD *)v44 + 24) = 0;
            v44[2] = 0;
            v44[3] = v9;
            if (v9) {
              *(void *)(v9 + 16) = v44;
            }
            *unint64_t v44 = &unk_1ED981110;
            v46 = (unsigned __int8 *)v44 + 50;
            if ((void)v161)
            {
              if (*((uint64_t *)&v161 + 1) >= 48) {
                int64_t v47 = 40;
              }
              else {
                int64_t v47 = *((void *)&v161 + 1) - 8;
              }
              if (v47 <= 0) {
                uint64_t v48 = 4294967126;
              }
              else {
                uint64_t v48 = 0;
              }
              CMMThrowExceptionOnError(v48);
              memcpy(v4 + 50, (const void *)(v161 + 8), v47);
            }
            uint64_t v49 = 54;
            do
            {
              *(_DWORD *)&v4[v49] = bswap32(*(_DWORD *)&v4[v49]);
              v49 += 4;
            }
            while (v49 != 90);
            CMMThrowExceptionOnCondition(v4[52] < 2u);
            CMMThrowExceptionOnCondition(*v46 - 16 < 0xFFFFFFF1);
            CMMThrowExceptionOnCondition(v4[51] - 16 < 0xFFFFFFF1);
            v156 = v45;
            unint64_t v56 = v4[50];
            if (v4[50])
            {
              unint64_t v57 = v4[52];
              unint64_t v58 = 1;
              do
              {
                unint64_t v59 = v58;
                v58 *= v57;
                BOOL v61 = v58 >= v59 && v58 >= v57;
                CMMThrowExceptionWithLog(v61, "Overflow in Power", v50, v51, v52, v53, v54, v55);
                --v56;
              }
              while (v56);
              unint64_t v56 = (unint64_t)*v46 << 8;
            }
            else
            {
              unint64_t v58 = 1;
            }
            uint64_t v118 = v4[51];
            uint64_t v119 = v58 * v118;
            uint64_t v120 = v56 | 0x30;
            uint64_t v92 = (v56 | 0x30) + v119;
            uint64_t v121 = v92 + (v118 << 8);
            *((void *)v4 + 4) = v121;
            if ((unint64_t)v121 > *((void *)&v161 + 1))
            {
              v146 = __cxa_allocate_exception(4uLL);
              _DWORD *v146 = -170;
            }
            v122 = CMMBase::NewInternal(0x28uLL, v156);
            uint64_t v123 = v161;
            if ((void)v161)
            {
              if (v92 <= *((uint64_t *)&v161 + 1)) {
                uint64_t v124 = v119;
              }
              else {
                uint64_t v124 = *((void *)&v161 + 1) - v120;
              }
              if (v124 <= 0) {
                uint64_t v125 = 4294967126;
              }
              else {
                uint64_t v125 = 0;
              }
              CMMThrowExceptionOnError(v125);
              uint64_t v123 = v161 + v120;
            }
            void *v122 = &unk_1ED985520;
            v122[1] = 1;
            v122[3] = v123;
            v122[4] = v119;
            v122[2] = 0;
            *((void *)v4 + 12) = v122;
            v126 = CMMBase::NewInternal(0x28uLL, v156);
            uint64_t v127 = v161;
            if ((void)v161)
            {
              if (v120 <= *((uint64_t *)&v161 + 1)) {
                uint64_t v128 = v56;
              }
              else {
                uint64_t v128 = *((void *)&v161 + 1) - 48;
              }
              if (v128 <= 0) {
                uint64_t v129 = 4294967126;
              }
              else {
                uint64_t v129 = 0;
              }
              CMMThrowExceptionOnError(v129);
              uint64_t v127 = v161 + 48;
            }
            void *v126 = &unk_1ED985520;
            v126[1] = 1;
            v126[3] = v127;
            v126[4] = v56;
            v126[2] = 0;
            *((void *)v4 + 13) = v126;
            v102 = CMMBase::NewInternal(0x28uLL, v156);
            uint64_t v103 = v118 << 8;
            uint64_t v104 = v161;
            if (!(void)v161)
            {
LABEL_267:
              int v38 = 0;
              void *v102 = &unk_1ED985520;
              v102[1] = 1;
              v102[3] = v104;
              v102[4] = v103;
              v102[2] = 0;
              *((void *)v4 + 14) = v102;
              goto LABEL_305;
            }
            if (v121 <= *((uint64_t *)&v161 + 1)) {
              uint64_t v130 = v118 << 8;
            }
            else {
              uint64_t v130 = *((void *)&v161 + 1) - v92;
            }
            if (v130 <= 0) {
              uint64_t v106 = 4294967126;
            }
            else {
              uint64_t v106 = 0;
            }
          }
          CMMThrowExceptionOnError(v106);
          uint64_t v104 = v161 + v92;
          goto LABEL_267;
        }
        if (a2 <= 1633763938)
        {
          int v11 = -1110589744;
          goto LABEL_95;
        }
        if (a2 != 1633763939 && a2 != 1633765219)
        {
          if (a2 != 1633767247) {
            goto LABEL_281;
          }
          v62 = CMMBase::NewInternal(0x50uLL, *(void ***)(a1 + 24));
          int v38 = v62;
          long long v63 = v161;
          void *v62 = &unk_1ED985440;
          *((_DWORD *)v62 + 2) = 1633767247;
          v62[3] = v9;
          v62[4] = *((void *)&v63 + 1);
          v62[2] = 0;
          if (v9) {
            *(void *)(v9 + 16) = v62;
          }
          v62[5] = v63;
          *((_WORD *)v62 + 24) = 0;
          void *v62 = &unk_1ED981EE0;
          if (*((void *)&v63 + 1) >= 0x20uLL) {
            uint64_t v64 = 0;
          }
          else {
            uint64_t v64 = 4294967126;
          }
          CMMThrowExceptionOnError(v64);
          int8x8_t v4 = 0;
          v65 = (unsigned int *)v38[5];
          *((_DWORD *)v38 + 13) = bswap32(v65[2]);
          *((_DWORD *)v38 + 14) = v65[3];
          *((_DWORD *)v38 + 15) = v65[4];
          *((_DWORD *)v38 + 16) = v65[5];
          *((_DWORD *)v38 + 17) = v65[6];
          *((_DWORD *)v38 + 18) = v65[7];
          goto LABEL_305;
        }
LABEL_268:
        int v38 = CMMBase::NewInternal(0x38uLL, *(void ***)(a1 + 24));
        CMMXYZTag::CMMXYZTag((uint64_t)v38, a2, v161, *((unint64_t *)&v161 + 1), v9);
LABEL_304:
        int8x8_t v4 = 0;
        goto LABEL_305;
      }
      if (a2 <= 1649693250)
      {
        if (a2 > 1633773414)
        {
          if (a2 == 1633773415)
          {
LABEL_271:
            unsigned int v131 = bswap32(*(_DWORD *)v161);
            switch(v131)
            {
              case 0x484C4720u:
                if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
                  uint64_t v141 = 0;
                }
                else {
                  uint64_t v141 = 4294967126;
                }
                CMMThrowExceptionOnError(v141);
                v142 = (CMMCurveTag *)CMMBase::NewInternal(0x58uLL, *(void ***)(a1 + 24));
                int v38 = v142;
                uint64_t v143 = *(void *)(a1 + 160);
                do
                {
                  uint64_t v144 = v143;
                  if (!v143) {
                    break;
                  }
                  uint64_t v143 = *(void *)(v143 + 16);
                }
                while (v143);
                CMMCurveTag::CMMCurveTag(v142, a2, v161, *((uint64_t *)&v161 + 1), v144);
                *int v38 = &unk_1ED9825B0;
                *((_OWORD *)v38 + 4) = xmmword_18BE63680;
                *((_DWORD *)v38 + 20) = 1051372203;
                CMMHLGCurveTag::Initialize((uint64_t)v38);
                goto LABEL_304;
              case 0x50512020u:
                if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
                  uint64_t v137 = 0;
                }
                else {
                  uint64_t v137 = 4294967126;
                }
                CMMThrowExceptionOnError(v137);
                v138 = (CMMCurveTag *)CMMBase::NewInternal(0x60uLL, *(void ***)(a1 + 24));
                int v38 = v138;
                uint64_t v139 = *(void *)(a1 + 160);
                do
                {
                  uint64_t v140 = v139;
                  if (!v139) {
                    break;
                  }
                  uint64_t v139 = *(void *)(v139 + 16);
                }
                while (v139);
                CMMCurveTag::CMMCurveTag(v138, a2, v161, *((uint64_t *)&v161 + 1), v140);
                int8x8_t v4 = 0;
                *int v38 = &unk_1ED982180;
                v38[8] = 0;
                *(_OWORD *)(v38 + 9) = xmmword_18BE63670;
                *((_DWORD *)v38 + 22) = 1100316672;
                CMMPQCurveTag::Initialize((uint64_t)v38);
                goto LABEL_305;
              case 0x70617261u:
                int v38 = CMMBase::NewInternal(0x80uLL, *(void ***)(a1 + 24));
                CMMParaCurveTag::CMMParaCurveTag((CMMCurveTag *)v38, a2, v161, *((uint64_t *)&v161 + 1), v9);
                goto LABEL_304;
            }
LABEL_303:
            int v38 = 0;
            goto LABEL_304;
          }
          goto LABEL_269;
        }
        if (a2 != 1633768035)
        {
          unsigned __int16 v16 = 25191;
          goto LABEL_270;
        }
        goto LABEL_268;
      }
      if (a2 > 1651208307)
      {
        if (a2 != 1651208308)
        {
          if (a2 == 1667851120)
          {
            v111 = (unsigned __int8 *)CMMBase::NewInternal(0x38uLL, *(void ***)(a1 + 24));
            int8x8_t v4 = v111;
            long long v112 = v161;
            *(void *)v111 = &unk_1ED985440;
            *((_DWORD *)v111 + 2) = 1667851120;
            *((void *)v111 + 3) = v9;
            *((void *)v111 + 4) = *((void *)&v112 + 1);
            *((void *)v111 + 2) = 0;
            if (v9) {
              *(void *)(v9 + 16) = v111;
            }
            *((void *)v111 + 5) = v112;
            *((_WORD *)v111 + 24) = 0;
            *(void *)v111 = &unk_1ED980FA0;
            int v113 = *(_DWORD *)v112;
            if (*((void *)&v112 + 1) >= 0xCuLL) {
              uint64_t v114 = 0;
            }
            else {
              uint64_t v114 = 4294967126;
            }
            CMMThrowExceptionOnError(v114);
            if (v113 == 1885563235) {
              uint64_t v115 = 0;
            }
            else {
              uint64_t v115 = 4294967126;
            }
            CMMThrowExceptionOnError(v115);
            int v38 = 0;
            *(_DWORD *)(v4 + 50) = *(_DWORD *)(*((void *)v4 + 5) + 8);
            goto LABEL_305;
          }
          if (a2 != 1668313716) {
            goto LABEL_281;
          }
          uint64_t v13 = (unsigned __int8 *)CMMBase::NewInternal(0x38uLL, *(void ***)(a1 + 24));
          int8x8_t v4 = v13;
          long long v14 = v161;
          *(void *)uint64_t v13 = &unk_1ED985440;
          *((_DWORD *)v13 + 2) = 1668313716;
          *((void *)v13 + 3) = v9;
          *((void *)v13 + 4) = *((void *)&v14 + 1);
          *((void *)v13 + 2) = 0;
          if (v9) {
            *(void *)(v9 + 16) = v13;
          }
          *((void *)v13 + 5) = v14;
          *((_WORD *)v13 + 24) = 0;
          *(void *)uint64_t v13 = &unk_1ED981288;
          if (*((void *)&v14 + 1) >= 9uLL) {
            uint64_t v15 = 0;
          }
          else {
            uint64_t v15 = 4294967126;
          }
          goto LABEL_240;
        }
        goto LABEL_149;
      }
      if (a2 != 1649693251)
      {
        int v12 = 1649957210;
LABEL_148:
        if (a2 != v12) {
          goto LABEL_281;
        }
        goto LABEL_149;
      }
      goto LABEL_154;
    }
    if (a2 <= 1852009521)
    {
      if (a2 > 1733843289)
      {
        if (a2 <= 1751405637)
        {
          if (a2 != 1733843290)
          {
            if (a2 != 1734438260) {
              goto LABEL_281;
            }
            goto LABEL_96;
          }
          goto LABEL_149;
        }
        if (a2 == 1751405638)
        {
          v132 = CMMBase::NewInternal(0x38uLL, *(void ***)(a1 + 24));
          int v38 = v132;
          long long v133 = v161;
          void *v132 = &unk_1ED985440;
          *((_DWORD *)v132 + 2) = 1751405638;
          v132[3] = v9;
          v132[4] = *((void *)&v133 + 1);
          v132[2] = 0;
          if (v9) {
            *(void *)(v9 + 16) = v132;
          }
          v132[5] = v133;
          *((_WORD *)v132 + 24) = 0;
          void *v132 = &unk_1ED982B08;
          if (*((void *)&v133 + 1) >= 0xCuLL) {
            uint64_t v134 = 0;
          }
          else {
            uint64_t v134 = 4294967126;
          }
          CMMThrowExceptionOnError(v134);
          goto LABEL_304;
        }
        if (a2 != 1800688195)
        {
          int v12 = 1819635049;
          goto LABEL_148;
        }
        goto LABEL_154;
      }
      if (a2 <= 1684893283)
      {
        if (a2 == 1684370275)
        {
          int8x8_t v4 = (unsigned __int8 *)CMMBase::NewInternal(0x38uLL, *(void ***)(a1 + 24));
          CMMTextDescTag::CMMTextDescTag((uint64_t)v4, 1684370275, v161, *((unint64_t *)&v161 + 1), v9);
        }
        else
        {
          if (a2 != 1684890724) {
            goto LABEL_281;
          }
          int8x8_t v4 = (unsigned __int8 *)CMMBase::NewInternal(0x38uLL, *(void ***)(a1 + 24));
          CMMTextDescTag::CMMTextDescTag((uint64_t)v4, 1684890724, v161, *((unint64_t *)&v161 + 1), v9);
        }
LABEL_150:
        int v38 = 0;
        goto LABEL_305;
      }
      if (a2 == 1684893284)
      {
        int8x8_t v4 = (unsigned __int8 *)CMMBase::NewInternal(0x38uLL, *(void ***)(a1 + 24));
        CMMTextDescTag::CMMTextDescTag((uint64_t)v4, 1684893284, v161, *((unint64_t *)&v161 + 1), v9);
        goto LABEL_150;
      }
      int v66 = 1733579331;
LABEL_153:
      if (a2 != v66) {
        goto LABEL_281;
      }
LABEL_154:
      unsigned int v67 = bswap32(*(_DWORD *)v161);
      if (v67 == 1668641398)
      {
        v107 = (unsigned __int8 *)CMMBase::NewInternal(0x38uLL, *(void ***)(a1 + 24));
        int8x8_t v4 = v107;
        long long v108 = v161;
        *(void *)v107 = &unk_1ED985440;
        *((_DWORD *)v107 + 2) = a2;
        *((void *)v107 + 3) = v9;
        *((void *)v107 + 4) = *((void *)&v108 + 1);
        *((void *)v107 + 2) = 0;
        if (v9) {
          *(void *)(v9 + 16) = v107;
        }
        *((void *)v107 + 5) = v108;
        *((_WORD *)v107 + 24) = 0;
        *(void *)v107 = &unk_1ED981720;
        CMMCurveTag::Initialize((uint64_t)v107);
      }
      else
      {
        if (v67 != 1885434465) {
          goto LABEL_303;
        }
        int8x8_t v4 = (unsigned __int8 *)CMMBase::NewInternal(0x80uLL, *(void ***)(a1 + 24));
        CMMParaCurveTag::CMMParaCurveTag((CMMCurveTag *)v4, a2, v161, *((uint64_t *)&v161 + 1), v9);
      }
      goto LABEL_150;
    }
    if (a2 <= 1886610800)
    {
      if ((a2 - 1886545200) < 3) {
        goto LABEL_96;
      }
      if (a2 != 1852009522) {
        goto LABEL_281;
      }
      unsigned int v17 = CMMBase::NewInternal(0xA0uLL, *(void ***)(a1 + 24));
      int8x8_t v4 = (unsigned __int8 *)v17;
      int v18 = *(void ***)(a1 + 24);
      int v19 = *(_DWORD *)(a1 + 52);
      if (v19 == 1281450528) {
        int v19 = 1347182946;
      }
      *unsigned int v17 = &unk_1ED985440;
      *((_DWORD *)v17 + 2) = 1852009522;
      v17[4] = 0;
      CFIndex v20 = v17 + 4;
      v17[5] = 0;
      *((_WORD *)v17 + 24) = 0;
      v17[2] = 0;
      v17[3] = v9;
      if (v9) {
        *(void *)(v9 + 16) = v17;
      }
      *unsigned int v17 = &unk_1ED982E88;
      *((_DWORD *)v17 + 13) = v19;
      if (*((void *)&v161 + 1) >= 0x55uLL) {
        uint64_t v21 = 0;
      }
      else {
        uint64_t v21 = 4294967126;
      }
      CMMThrowExceptionOnError(v21);
      int v22 = *((_DWORD *)v4 + 13);
      if (v22 != 1347182946 && v22 != 1482250784)
      {
        v149 = __cxa_allocate_exception(4uLL);
        _DWORD *v149 = -171;
      }
      *((void *)v4 + 7) = 0;
      *((void *)v4 + 8) = 0;
      *((void *)v4 + 9) = 0;
      if ((void)v161)
      {
        if (*((uint64_t *)&v161 + 1) >= 84) {
          int64_t v23 = 76;
        }
        else {
          int64_t v23 = *((void *)&v161 + 1) - 8;
        }
        if (v23 <= 0) {
          uint64_t v24 = 4294967126;
        }
        else {
          uint64_t v24 = 0;
        }
        CMMThrowExceptionOnError(v24);
        memcpy(v4 + 80, (const void *)(v161 + 8), v23);
      }
      uint64_t v25 = 80;
      do
      {
        *(_DWORD *)&v4[v25] = bswap32(*(_DWORD *)&v4[v25]);
        v25 += 4;
      }
      while (v25 != 92);
      uint64_t v26 = *((unsigned int *)v4 + 21);
      uint64_t v27 = *((unsigned int *)v4 + 22);
      if (v27)
      {
        uint64_t v28 = 4294967126;
        if (!(v27 >> 30))
        {
          if (0x7FFFFFFFu / (2 * (int)v27) >= v26) {
            uint64_t v28 = 0;
          }
          else {
            uint64_t v28 = 4294967126;
          }
        }
        CMMThrowExceptionOnError(v28);
      }
      int64_t v29 = (2 * v27 + 38) * v26;
      *CFIndex v20 = v29 + 84;
      if ((unint64_t)(v29 + 84) > *((void *)&v161 + 1))
      {
        v148 = __cxa_allocate_exception(4uLL);
        _DWORD *v148 = -50;
      }
      CFStringRef v30 = CMMBase::NewInternal(0x28uLL, v18);
      *CFStringRef v30 = &unk_1ED985520;
      v30[1] = 1;
      v30[3] = 0;
      v30[4] = v29;
      CFStringRef v31 = CMMBase::NewInternal(v29, v18);
      v30[2] = v31;
      if ((void)v161)
      {
        if (v29 + 84 > *((uint64_t *)&v161 + 1)) {
          int64_t v29 = *((void *)&v161 + 1) - 84;
        }
        if (v29 <= 0) {
          uint64_t v32 = 4294967126;
        }
        else {
          uint64_t v32 = 0;
        }
        CMMThrowExceptionOnError(v32);
        memcpy(v31, (const void *)(v161 + 84), v29);
        CFStringRef v31 = (void *)v30[2];
      }
      uint64_t v33 = CMMTable::FloatData((uint64_t)v31, v30[3]);
      int v34 = *((_DWORD *)v4 + 21);
      if (v34)
      {
        int v35 = 0;
        uint64_t v36 = 2 * (v27 + 3);
        do
        {
          if (v27 != -3)
          {
            uint64_t v37 = 0;
            do
            {
              *(_WORD *)(v33 + v37 + 32) = bswap32(*(unsigned __int16 *)(v33 + v37 + 32)) >> 16;
              v37 += 2;
            }
            while (v36 != v37);
          }
          ++v35;
          v33 += v36 + 32;
        }
        while (v35 != v34);
      }
      int v38 = 0;
      uint64_t v39 = 64;
      if (*((_DWORD *)v4 + 13) == 1482250784) {
        uint64_t v39 = 56;
      }
      *(void *)&v4[v39] = v30;
LABEL_305:
      int v150 = *(_DWORD *)(a1 + 48);
      switch(v150)
      {
        case 1296255029:
          int v151 = 893602898;
          break;
        case 1296255030:
          int v151 = 910380114;
          break;
        case 1296255031:
          int v151 = 927157330;
          break;
        case 1296255032:
          int v151 = 943934546;
          break;
        default:
          if (v150 == 1281450528) {
            int v151 = 1145856354;
          }
          else {
            int v151 = *(_DWORD *)(a1 + 48);
          }
          break;
      }
      uint64_t v152 = CMMGetChannelCountFromCMMSpace(v151);
      if (*(_DWORD *)(a1 + 52) == 1281450528) {
        int v153 = 1347182946;
      }
      else {
        int v153 = *(_DWORD *)(a1 + 52);
      }
      uint64_t v154 = CMMGetChannelCountFromCMMSpace(v153);
      if (v4)
      {
        if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)v4 + 32))(v4, v152, v154))
        {
LABEL_324:
          if (!v4) {
            int8x8_t v4 = (unsigned __int8 *)v38;
          }
          if (!*(void *)(a1 + 160)) {
            *(void *)(a1 + 160) = v4;
          }
          CMMTagDataAccess::~CMMTagDataAccess((CMMTagDataAccess *)&v158);
          goto LABEL_329;
        }
      }
      else
      {
        if (!v38 || !(*(unsigned int (**)(void *, uint64_t, uint64_t))(*v38 + 32))(v38, v152, v154)) {
          goto LABEL_323;
        }
        int8x8_t v4 = (unsigned __int8 *)v38;
        int v38 = 0;
      }
      (*(void (**)(unsigned __int8 *))(*(void *)v4 + 8))(v4);
LABEL_323:
      int8x8_t v4 = 0;
      goto LABEL_324;
    }
    if (a2 <= 1918392665)
    {
      if (a2 != 1886610801)
      {
        int v66 = 1918128707;
        goto LABEL_153;
      }
      v109 = (unsigned __int8 *)CMMBase::NewInternal(0x38uLL, *(void ***)(a1 + 24));
      int8x8_t v4 = v109;
      long long v110 = v161;
      *(void *)v109 = &unk_1ED985440;
      *((_DWORD *)v109 + 2) = 1886610801;
      *((void *)v109 + 3) = v9;
      *((void *)v109 + 4) = *((void *)&v110 + 1);
      *((void *)v109 + 2) = 0;
      if (v9) {
        *(void *)(v9 + 16) = v109;
      }
      *((void *)v109 + 5) = v110;
      *((_WORD *)v109 + 24) = 0;
      *(void *)v109 = &unk_1ED985178;
      if (*((void *)&v110 + 1) >= 0xDuLL) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = 4294967126;
      }
    }
    else
    {
      if (a2 == 1918392666)
      {
LABEL_149:
        int8x8_t v4 = (unsigned __int8 *)CMMBase::NewInternal(0x38uLL, *(void ***)(a1 + 24));
        CMMXYZTag::CMMXYZTag((uint64_t)v4, a2, v161, *((unint64_t *)&v161 + 1), v9);
        goto LABEL_150;
      }
      if (a2 != 1952801640)
      {
        int v12 = 2004119668;
        goto LABEL_148;
      }
      v116 = (unsigned __int8 *)CMMBase::NewInternal(0x38uLL, *(void ***)(a1 + 24));
      int8x8_t v4 = v116;
      long long v117 = v161;
      *(void *)v116 = &unk_1ED985440;
      *((_DWORD *)v116 + 2) = 1952801640;
      *((void *)v116 + 3) = v9;
      *((void *)v116 + 4) = *((void *)&v117 + 1);
      *((void *)v116 + 2) = 0;
      if (v9) {
        *(void *)(v9 + 16) = v116;
      }
      *((void *)v116 + 5) = v117;
      *((_WORD *)v116 + 24) = 0;
      *(void *)v116 = &unk_1ED982EE0;
      if (*((void *)&v117 + 1) >= 0xCuLL) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = 4294967126;
      }
    }
LABEL_240:
    CMMThrowExceptionOnError(v15);
    goto LABEL_150;
  }
  while (*((_DWORD *)v4 + 2) != a2)
  {
    int8x8_t v4 = (unsigned __int8 *)*((void *)v4 + 2);
    if (!v4) {
      goto LABEL_4;
    }
  }
  return v4;
}

CFDataRef ColorSyncProfileCopyFlexGTCInfo(uint64_t a1)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  CFTypeID v2 = CFGetTypeID((CFTypeRef)a1);
  if (ColorSyncProfileGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
  }
  if (v2 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID) {
    return 0;
  }
  CFDataRef Tag = (const __CFData *)ColorSyncProfileGetTag(a1, @"hdgm");
  CFDataRef v4 = Tag;
  if (Tag)
  {
    CFTypeID v5 = CFGetTypeID(Tag);
    if (v5 == CFDataGetTypeID())
    {
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
      uint64_t v6 = *(const void **)(a1 + 248);
      if (v6)
      {
        CFDataRef v4 = (const __CFData *)CFRetain(v6);
      }
      else
      {
        unint64_t Length = CFDataGetLength(v4);
        if (Length >= 0x62)
        {
          unint64_t v9 = Length;
          BytePtr = CFDataGetBytePtr(v4);
          if (BytePtr)
          {
            if (*(_DWORD *)BytePtr == 1885433191
              && !*((_DWORD *)BytePtr + 2)
              && v9 >= bswap32(*((_DWORD *)BytePtr + 3)))
            {
              unsigned int v17 = *((_DWORD *)BytePtr + 4);
              if (v17)
              {
                CFDataRef v4 = 0;
                unint64_t v18 = bswap32(v17);
                if (v18 < 0x59 || v9 - 4 < v18) {
                  goto LABEL_17;
                }
              }
              unsigned int v19 = *((_DWORD *)BytePtr + 5);
              unint64_t v20 = bswap32(v19);
              if (v19)
              {
                CFDataRef v4 = 0;
                if (v20 < 0x59 || v9 - 44 < v20) {
                  goto LABEL_17;
                }
              }
              unsigned int v21 = *((_DWORD *)BytePtr + 6);
              if (v21)
              {
                CFDataRef v4 = 0;
                unint64_t v22 = bswap32(v21);
                if (v22 < 0x59 || v9 - 44 < v22) {
                  goto LABEL_17;
                }
              }
              unsigned int v23 = *((_DWORD *)BytePtr + 7);
              if (v23)
              {
                CFDataRef v4 = 0;
                unint64_t v24 = bswap32(v23);
                if (v24 < 0x59 || v9 - 44 < v24) {
                  goto LABEL_17;
                }
              }
              unsigned int v25 = *((_DWORD *)BytePtr + 8);
              if (v25)
              {
                CFDataRef v4 = 0;
                unint64_t v26 = bswap32(v25);
                if (v26 < 0x59 || v9 - 4 < v26) {
                  goto LABEL_17;
                }
              }
              unsigned int v28 = *((_DWORD *)BytePtr + 9);
              unsigned int v27 = *((_DWORD *)BytePtr + 10);
              unint64_t v29 = bswap32(v28);
              if (v28)
              {
                CFDataRef v4 = 0;
                if (v29 < 0x59 || v9 - bswap32(v27) < v29) {
                  goto LABEL_17;
                }
              }
              unsigned int v30 = *((_DWORD *)BytePtr + 11);
              unsigned int v31 = *((_DWORD *)BytePtr + 12);
              if (v30)
              {
                CFDataRef v4 = 0;
                unint64_t v32 = bswap32(v30);
                if (v32 < 0x59 || v9 - bswap32(v31) < v32) {
                  goto LABEL_17;
                }
              }
              unsigned int v33 = *((_DWORD *)BytePtr + 13);
              unsigned int v34 = *((_DWORD *)BytePtr + 14);
              int v35 = (unsigned int *)BytePtr;
              if (v33)
              {
                CFDataRef v4 = 0;
                unint64_t v36 = bswap32(v33);
                if (v36 < 0x59) {
                  goto LABEL_17;
                }
                unint64_t v11 = v9 - bswap32(v34);
                if (v11 < v36) {
                  goto LABEL_17;
                }
              }
              if (v27 == v31 && v19 == v21 && v21 == v23 && v28 == v30 && v30 == v33 && v27 == v34)
              {
                if (v28
                  && 12 * (unint64_t)bswap32(*(unsigned int *)((char *)v35 + v29 + 4)) + 8 <= bswap32(v27))
                {
                  CFDictionaryRef v54 = craete_gain_map_info((uint64_t)v35 + v20);
                  uint64_t v37 = (char *)v35 + bswap32(v35[9]);
                  unsigned int v38 = *((_DWORD *)v37 + 1);
                  CFIndex v39 = bswap32(v38);
                  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, v39, MEMORY[0x1E4F1D510]);
                  if (v38)
                  {
                    uint64_t v41 = 0;
                    do
                    {
                      uint64_t v42 = v41;
                      uint64_t v43 = (unsigned int *)&v37[12 * v41 + 8];
                      unsigned int valuePtr = bswap32(*v43);
                      unsigned int v56 = bswap32(v43[1]);
                      unsigned int v55 = bswap32(v43[2]);
                      keys = (void *)kColorSyncFlexGTCNodeX;
                      uint64_t v63 = kColorSyncFlexGTCNodeY;
                      uint64_t v64 = kColorSyncFlexGTCNodeSlope;
                      values = 0;
                      CFNumberRef v59 = 0;
                      CFNumberRef v60 = 0;
                      values = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
                      CFNumberRef v59 = CFNumberCreate(0, kCFNumberFloat32Type, &v56);
                      CFNumberRef v60 = CFNumberCreate(0, kCFNumberFloat32Type, &v55);
                      CFDictionaryRef v44 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                      for (uint64_t i = 0; i != 24; i += 8)
                        CFRelease(*(void **)((char *)&values + i));
                      CFArrayAppendValue(Mutable, v44);
                      CFRelease(v44);
                      uint64_t v41 = v42 + 1;
                    }
                    while (v42 + 1 != v39);
                  }
                  unsigned int v46 = bswap32(*(unsigned int *)((char *)v35 + bswap32(v35[4])));
                  unsigned int v47 = v35[8];
                  if (v47) {
                    unsigned int v48 = bswap32(*(unsigned int *)((char *)v35 + bswap32(v47)));
                  }
                  else {
                    unsigned int v48 = 0;
                  }
                  keys = (void *)kColorSyncMonoGainMapParams;
                  uint64_t v63 = kColorSyncMonoFlexGTCNodeTable;
                  uint64_t v64 = kColorSyncPreGainMapCICP;
                  uint64_t v65 = kColorSyncPostGainMapCICP;
                  values = v54;
                  CFNumberRef v59 = Mutable;
                  unsigned int valuePtr = v46;
                  CFIndex v49 = 3;
                  CFNumberRef v60 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
                  if (v48)
                  {
                    unsigned int valuePtr = v48;
                    CFNumberRef v50 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
                    CFIndex v49 = 4;
                  }
                  else
                  {
                    CFNumberRef v50 = 0;
                  }
                  CFNumberRef v61 = v50;
                  CFDataRef v4 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, v49, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                  for (uint64_t j = 0; j != 32; j += 8)
                  {
                    uint64_t v52 = *(void **)((char *)&values + j);
                    if (v52) {
                      CFRelease(v52);
                    }
                  }
                  if (v4) {
                    *(void *)(a1 + 248) = CFRetain(v4);
                  }
                  goto LABEL_17;
                }
              }
              else
              {
                ColorSyncLog(2, (uint64_t)"Not able to use gmap tag", v11, v12, v13, v14, v15, v16, v53);
              }
            }
          }
        }
        CFDataRef v4 = 0;
      }
LABEL_17:
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 24));
      return v4;
    }
    return 0;
  }
  return v4;
}

const void *ColorSyncProfileGetTag(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v4 = CFGetTypeID((CFTypeRef)a1);
  if (ColorSyncProfileGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
  }
  if (v4 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID) {
    return 0;
  }
  CFDataRef Tag = getTag(a1, a2);
  if (*(_DWORD *)(a1 + 148) == 1)
  {
    CFArrayRef v6 = *(const __CFArray **)(a1 + 96);
    if (v6)
    {
      if (Tag)
      {
        v8.length = CFArrayGetCount(v6);
        v8.location = 0;
        if (!CFArrayContainsValue(*(CFArrayRef *)(a1 + 96), v8, Tag)) {
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 96), Tag);
        }
      }
    }
  }
  return Tag;
}

const void *getTag(uint64_t a1, void *key)
{
  if (!a1) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 148) == 1) {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
  }
  CFDataRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 88), key);
  CFTypeID v5 = Value;
  if (Value)
  {
    CFTypeID v6 = CFGetTypeID(Value);
    if (v6 != CFStringGetTypeID() || (CFTypeID v5 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 88), v5)) != 0)
    {
      CFTypeID v7 = CFGetTypeID(v5);
      if (v7 != CFDataGetTypeID()) {
        CFTypeID v5 = 0;
      }
    }
  }
  if (*(_DWORD *)(a1 + 148) == 1) {
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 24));
  }
  return v5;
}

BOOL ColorSyncProfileContainsTag(ColorSyncProfileRef prof, CFStringRef signature)
{
  if (!prof) {
    return 0;
  }
  CFTypeID v4 = CFGetTypeID(prof);
  if (ColorSyncProfileGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
  }
  if (v4 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID) {
    return 0;
  }
  if (*((_DWORD *)prof + 37) == 1) {
    pthread_mutex_lock((pthread_mutex_t *)((char *)prof + 24));
  }
  BOOL v5 = CFDictionaryContainsKey(*((CFDictionaryRef *)prof + 11), signature) != 0;
  if (*((_DWORD *)prof + 37) == 1) {
    pthread_mutex_unlock((pthread_mutex_t *)((char *)prof + 24));
  }
  return v5;
}

uint64_t CMMGetChannelCountFromCMMSpace(int a1)
{
  uint64_t v1 = 0;
  int v2 = 0;
  if (a1 > 1145261137)
  {
    if (a1 > 1282766367)
    {
      if (a1 <= 1482250783)
      {
        if (a1 == 1282766368 || a1 == 1347182946) {
          goto LABEL_57;
        }
        int v10 = 1380401696;
      }
      else
      {
        if (a1 > 1501067551)
        {
          if (a1 == 1501067552) {
            goto LABEL_57;
          }
          int v5 = 1734438260;
LABEL_63:
          if (a1 != v5) {
            goto LABEL_68;
          }
          goto LABEL_64;
        }
        if (a1 == 1482250784) {
          goto LABEL_57;
        }
        int v10 = 1497588338;
      }
    }
    else
    {
      if (a1 <= 1178815569)
      {
        if (a1 == 1145261138)
        {
          int v2 = 1;
          uint64_t v1 = 13;
          goto LABEL_68;
        }
        if (a1 != 1145856354)
        {
          BOOL v3 = a1 == 1162038354;
          uint64_t v4 = 14;
          goto LABEL_25;
        }
        goto LABEL_57;
      }
      if (a1 <= 1212961567)
      {
        if (a1 == 1178815570)
        {
          int v2 = 1;
          uint64_t v1 = 15;
          goto LABEL_68;
        }
        int v5 = 1196573017;
        goto LABEL_63;
      }
      if (a1 == 1212961568) {
        goto LABEL_57;
      }
      int v10 = 1213421088;
    }
LABEL_56:
    if (a1 != v10) {
      goto LABEL_68;
    }
    goto LABEL_57;
  }
  if (a1 <= 943934545)
  {
    if (a1 > 876825681)
    {
      if (a1 <= 910380113)
      {
        if (a1 != 876825682)
        {
          BOOL v3 = a1 == 893602898;
          uint64_t v4 = 5;
LABEL_25:
          int v2 = v3;
          if (v3) {
            uint64_t v1 = v4;
          }
          else {
            uint64_t v1 = 0;
          }
          goto LABEL_68;
        }
LABEL_60:
        int v2 = 1;
        uint64_t v1 = 4;
        goto LABEL_68;
      }
      int v6 = 910380114;
      uint64_t v7 = 6;
      BOOL v8 = a1 == 927157330;
      uint64_t v9 = 7;
      goto LABEL_43;
    }
    if (a1 != 1)
    {
      if (a1 == 843271250)
      {
        int v2 = 1;
        uint64_t v1 = 2;
        goto LABEL_68;
      }
      int v10 = 860048466;
      goto LABEL_56;
    }
LABEL_64:
    int v2 = 1;
    uint64_t v1 = 1;
    goto LABEL_68;
  }
  if (a1 <= 1111706705)
  {
    int v6 = 943934546;
    uint64_t v7 = 8;
    uint64_t v11 = 10;
    if (a1 != 1094929490) {
      uint64_t v11 = 0;
    }
    BOOL v12 = a1 == 960711762 || a1 == 1094929490;
    if (a1 == 960711762) {
      uint64_t v9 = 9;
    }
    else {
      uint64_t v9 = v11;
    }
    goto LABEL_48;
  }
  if (a1 > 1129142559)
  {
    if (a1 != 1129142560)
    {
      if (a1 != 1129142603) {
        goto LABEL_68;
      }
      goto LABEL_60;
    }
LABEL_57:
    int v2 = 1;
    uint64_t v1 = 3;
    goto LABEL_68;
  }
  int v6 = 1111706706;
  uint64_t v7 = 11;
  BOOL v8 = a1 == 1128483922;
  uint64_t v9 = 12;
LABEL_43:
  BOOL v12 = v8;
  if (!v8) {
    uint64_t v9 = 0;
  }
LABEL_48:
  BOOL v13 = a1 == v6;
  int v2 = a1 == v6 || v12;
  if (v13) {
    uint64_t v1 = v7;
  }
  else {
    uint64_t v1 = v9;
  }
LABEL_68:
  if (!a1) {
    int v2 = 1;
  }
  if (v2) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = 4294967126;
  }
  CMMThrowExceptionOnError(v14);
  return v1;
}

uint64_t CMMThrowExceptionOnError(uint64_t result)
{
  if (result)
  {
    int v1 = result;
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v1;
  }
  return result;
}

void *CMMBase::NewInternal(unint64_t a1, void **a2)
{
  if (a1 >= 0xFFFFFFFFFFFFFFC1
    || (size_t v3 = (a1 + 63) & 0xFFFFFFFFFFFFFFE0, v3 != ((a1 + 31) & 0xFFFFFFFFFFFFFFE0) + 32))
  {
    exception = __cxa_allocate_exception(4uLL);
    int v12 = -171;
    goto LABEL_11;
  }
  uint64_t v4 = malloc_type_calloc(1uLL, v3, 0x1A8617E5uLL);
  if (!v4)
  {
    exception = __cxa_allocate_exception(4uLL);
    int v12 = -108;
LABEL_11:
    _DWORD *exception = v12;
  }
  int v5 = v4;
  int v6 = (pthread_mutex_t *)(*a2 + 1);
  v5[3] = v6;
  pthread_mutex_lock(v6);
  uint64_t v7 = (uint64_t)*a2;
  BOOL v8 = (void *)**a2;
  if (v8)
  {
    do
    {
      uint64_t v9 = v8;
      BOOL v8 = (void *)*v8;
    }
    while (v8);
    *uint64_t v9 = v5;
    v5[1] = v9;
  }
  else
  {
    *(void *)uint64_t v7 = v5;
    v5[2] = v7;
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v7 + 8));
  return v5 + 4;
}

void CMMTagDataAccess::~CMMTagDataAccess(CMMTagDataAccess *this)
{
  *(void *)this = &unk_1ED982EC0;
  int v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

{
  pthread_mutex_t **v1;
  uint64_t vars8;

  CMMTagDataAccess::~CMMTagDataAccess(this);

  CMMBase::operator delete(v1);
}

uint64_t CMMCurveTag::Initialize(uint64_t this)
{
  unsigned int v1 = **(_DWORD **)(this + 40);
  *(_DWORD *)(this + 52) = bswap32(v1);
  if (v1 == 1987212643)
  {
    uint64_t v2 = this;
    if (*(void *)(this + 32) >= 0xCuLL) {
      uint64_t v3 = 0;
    }
    else {
      uint64_t v3 = 4294967126;
    }
    CMMThrowExceptionOnError(v3);
    if (*(void *)(v2 + 32) >= 2 * (unint64_t)bswap32(*(_DWORD *)(*(void *)(v2 + 40) + 8)) + 12) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = 4294967126;
    }
    return CMMThrowExceptionOnError(v4);
  }
  return this;
}

uint64_t CMMXYZTag::CMMXYZTag(uint64_t a1, int a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  *(void *)a1 = &unk_1ED985440;
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 16) = 0;
  if (a5) {
    *(void *)(a5 + 16) = a1;
  }
  *(void *)(a1 + 40) = a3;
  *(_WORD *)(a1 + 48) = 0;
  *(void *)a1 = &unk_1ED985610;
  if (a4 >= 0x14) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 4294967126;
  }
  CMMThrowExceptionOnError(v6);
  return a1;
}

void sub_18BE0D6BC(_Unwind_Exception *a1)
{
  CMMTag::~CMMTag(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMTag::Validate(CMMTag *this)
{
  return 0;
}

uint64_t CMMCurveTag::Validate(CMMCurveTag *this)
{
  uint64_t result = (*(uint64_t (**)(CMMCurveTag *))(*(void *)this + 40))(this);
  if (result)
  {
    if (2 * result > *((void *)this + 4) - 12 || *((void *)this + 4) - 12 <= 0) {
      return 4294967126;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t CMMCurveTag::GetCurveCount(CMMCurveTag *this)
{
  return bswap32(*(_DWORD *)(*((void *)this + 5) + 8));
}

void CMMCurveTag::~CMMCurveTag(CMMCurveTag *this)
{
  CMMTag::~CMMTag(this);

  CMMBase::operator delete(v1);
}

void CMMXYZTag::~CMMXYZTag(CMMXYZTag *this)
{
  CMMTag::~CMMTag(this);

  CMMBase::operator delete(v1);
}

void CMMTag::~CMMTag(CMMTag *this)
{
  *(void *)this = &unk_1ED985440;
  uint64_t v1 = *((void *)this + 2);
  if (v1) {
    *(void *)(v1 + 24) = *((void *)this + 3);
  }
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    *(void *)(v2 + 16) = v1;
  }
  if (*((unsigned char *)this + 48)) {
    CMMBase::operator delete(*((pthread_mutex_t ***)this + 5));
  }
}

{
  pthread_mutex_t **v1;
  uint64_t vars8;

  CMMTag::~CMMTag(this);

  CMMBase::operator delete(v1);
}

void *CMMParaCurveTag::Initialize(CMMParaCurveTag *this)
{
  unsigned int v2 = **((_DWORD **)this + 5);
  unsigned int v3 = bswap32(v2);
  if (v2 == 1634886000) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 4294967126;
  }
  CMMThrowExceptionOnError(v4);
  *((_DWORD *)this + 13) = v3;
  uint64_t v5 = *((void *)this + 5);
  if (*((void *)this + 4) <= 0xCuLL) {
    uint64_t v6 = 4294967126;
  }
  else {
    uint64_t v6 = 0;
  }
  CMMThrowExceptionOnError(v6);
  unsigned int v7 = bswap32(*(unsigned __int16 *)(v5 + 8)) >> 16;
  *((_WORD *)this + 28) = v7;
  if (v7 >= 5)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -170;
  }
  *((_DWORD *)this + 15) = dword_18BEB5C80[v7];
  uint64_t v8 = (*(uint64_t (**)(CMMParaCurveTag *, uint64_t, uint64_t))(*(void *)this + 32))(this, 1, 1);
  CMMThrowExceptionOnError(v8);
  int v9 = *((_DWORD *)this + 15);
  int v10 = (_DWORD *)((char *)this + 64);
  for (uint64_t result = memcpy(v10, (const void *)(v5 + 12), 4 * v9); v9; --v9)
  {
    *int v10 = bswap32(*v10);
    ++v10;
  }
  return result;
}

uint64_t CMMParaCurveTag::Validate(CMMParaCurveTag *this)
{
  if (*((unsigned char *)this + 49)) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 4) - 12;
  if (v3 < 1 || v3 < 4 * (unint64_t)*((unsigned int *)this + 15)) {
    return 4294967126;
  }
  uint64_t result = 0;
  *((unsigned char *)this + 49) = 1;
  return result;
}

CMMCurveTag *CMMParaCurveTag::CMMParaCurveTag(CMMCurveTag *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CMMCurveTag::CMMCurveTag(a1, a2, a3, a4, a5);
  *(void *)uint64_t v6 = &unk_1ED982A80;
  CMMParaCurveTag::Initialize(v6);
  return a1;
}

{
  CMMParaCurveTag *v6;

  CMMCurveTag::CMMCurveTag(a1, a2, a3, a4, a5);
  *(void *)uint64_t v6 = &unk_1ED982A80;
  CMMParaCurveTag::Initialize(v6);
  return a1;
}

void sub_18BE0D9B0(_Unwind_Exception *a1)
{
  CMMTag::~CMMTag(v1);
  _Unwind_Resume(a1);
}

void CMMCurveTag::CMMCurveTag(CMMCurveTag *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)this = &unk_1ED985440;
  *((_DWORD *)this + 2) = a2;
  *((void *)this + 3) = a5;
  *((void *)this + 4) = a4;
  *((void *)this + 2) = 0;
  if (a5) {
    *(void *)(a5 + 16) = this;
  }
  *((void *)this + 5) = a3;
  *((_WORD *)this + 24) = 0;
  *(void *)this = &unk_1ED981720;
  CMMCurveTag::Initialize((uint64_t)this);
}

void sub_18BE0DA44(_Unwind_Exception *a1)
{
  CMMTag::~CMMTag(v1);
  _Unwind_Resume(a1);
}

uint64_t computeMD5(const __CFData *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  *(void *)md = 0;
  uint64_t v20 = 0;
  BytePtr = CFDataGetBytePtr(a1);
  CFIndex Length = CFDataGetLength(a1);
  if (!BytePtr) {
    return 0;
  }
  unint64_t v4 = Length;
  uint64_t result = 0;
  if (v4 >= 0x80)
  {
    long long v6 = *(_OWORD *)BytePtr;
    long long v7 = *((_OWORD *)BytePtr + 1);
    long long v8 = *((_OWORD *)BytePtr + 3);
    long long v14 = *((_OWORD *)BytePtr + 2);
    long long v10 = *((_OWORD *)BytePtr + 6);
    long long v9 = *((_OWORD *)BytePtr + 7);
    long long v11 = *((_OWORD *)BytePtr + 4);
    *(_OWORD *)unsigned int v17 = *((_OWORD *)BytePtr + 5);
    *(_OWORD *)&v17[16] = v10;
    long long v15 = v8;
    long long v16 = v11;
    data[0] = v6;
    data[1] = v7;
    long long v18 = v9;
    HIDWORD(v14) = 0;
    LODWORD(v16) = 0;
    *(_OWORD *)&v17[4] = 0uLL;
    memset(&v12, 0, sizeof(v12));
    CC_MD5_Init(&v12);
    CC_MD5_Update(&v12, data, 0x80u);
    if (v4 - 129 <= 0xFFFFFFFE) {
      CC_MD5_Update(&v12, BytePtr + 128, v4 - 128);
    }
    CC_MD5_Final(md, &v12);
    return *(void *)md;
  }
  return result;
}

void TVector<CMMTagInfo,TAllocator<CMMTagInfo>>::~TVector(uint64_t a1)
{
  unsigned int v2 = (pthread_mutex_t ***)(a1 + 8);
  std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::__destroy_vector::operator()[abi:ne180100](&v2);

  CMMBase::operator delete((pthread_mutex_t **)a1);
}

uint64_t CMMLutTagBase::Validate(CMMLutTagBase *this, uint64_t a2, uint64_t a3)
{
  int v4 = *((_DWORD *)this + 2);
  if (v4 > 1734438259)
  {
    if ((v4 - 1886545200) >= 3)
    {
      if (v4 != 1734438260) {
        goto LABEL_17;
      }
      uint64_t v5 = 1;
      uint64_t v6 = 3;
    }
    else
    {
      uint64_t v6 = 3;
      uint64_t v5 = 3;
    }
  }
  else
  {
    uint64_t v5 = a2;
    if ((v4 - 1093812784) < 3)
    {
      uint64_t v6 = a2;
      uint64_t v5 = a3;
    }
    else
    {
      uint64_t v6 = a3;
      if ((v4 - 1110589744) >= 3)
      {
LABEL_17:
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = -170;
      }
    }
  }
  if ((*(uint64_t (**)(CMMLutTagBase *))(*(void *)this + 48))(this) == v6) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 4294967126;
  }
  CMMThrowExceptionOnError(v7);
  if ((*(uint64_t (**)(CMMLutTagBase *))(*(void *)this + 56))(this) == v5) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = 4294967126;
  }
  CMMThrowExceptionOnError(v8);
  return 0;
}

uint64_t CMMLutTag::GetOutputChan(CMMLutTag *this)
{
  return *((unsigned __int8 *)this + 51);
}

uint64_t CMMLutTag::GetInputChan(CMMLutTag *this)
{
  return *((unsigned __int8 *)this + 50);
}

uint64_t CMMThrowExceptionWithLog(uint64_t result, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((result & 1) == 0)
  {
    ColorSyncLog(2, (uint64_t)"ColorSync: %s\n", a3, a4, a5, a6, a7, a8, (char)a2);
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  return result;
}

double tagReferenceAdder(const __CFString *key, uint64_t a2)
{
  CFDictionaryRef v3 = *(const __CFDictionary **)(a2 + 8);
  if (v3)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v3, key);
    CFTypeID v6 = CFGetTypeID(Value);
    if (v6 == CFStringGetTypeID())
    {
      MutableBytePtr = CFDataGetMutableBytePtr(*(CFMutableDataRef *)a2);
      unsigned int FourCharCodeFromSignature = ColorSyncGetFourCharCodeFromSignature(Value);
      uint64_t v10 = *(void *)(a2 + 24);
      if (v10)
      {
        uint64_t v11 = 0;
        CC_MD5_CTX v12 = MutableBytePtr + 132;
        unsigned int v13 = bswap32(FourCharCodeFromSignature);
        long long v14 = v12;
        while (1)
        {
          int v15 = *(_DWORD *)v14;
          v14 += 12;
          if (v13 == v15) {
            break;
          }
          if (v10 == ++v11) {
            return result;
          }
        }
        unsigned int v16 = ColorSyncGetFourCharCodeFromSignature(key);
        uint64_t v17 = *(void *)(a2 + 24);
        long long v18 = &v12[12 * v17];
        *(_DWORD *)long long v18 = bswap32(v16);
        double result = *(double *)&v12[12 * v11 + 4];
        *(double *)(v18 + 4) = result;
        *(void *)(a2 + 24) = v17 + 1;
      }
    }
  }
  return result;
}

CFTypeID ColorSyncTransformGetTypeID(void)
{
  if (ColorSyncTransformGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_34);
  }
  return ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID;
}

CFArrayRef ColorSyncCodeFragmentGetMD5(const __CFArray *result)
{
  if (result)
  {
    CFArrayRef v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 != CFArrayGetTypeID()) {
      return 0;
    }
    double result = (const __CFArray *)CFArrayGetValueAtIndex(v1, 0);
    if (!result) {
      return result;
    }
    CFDictionaryRef v3 = result;
    CFTypeID v4 = CFGetTypeID(result);
    if (v4 == CFDictionaryGetTypeID())
    {
      double result = (const __CFArray *)CFDictionaryGetValue(v3, kColorSyncTransformCodeFragmentMD5);
      if (result) {
        return *(const __CFArray **)CFDataGetBytePtr(result);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t ColorSyncMatrixGetTypeID()
{
  if (ColorSyncMatrixGetTypeID_predicate[0] != -1) {
    dispatch_once(ColorSyncMatrixGetTypeID_predicate, &__block_literal_global_7);
  }
  return ColorSyncMatrixGetTypeID_kColorSyncMatrixRuntimeID;
}

void colorSyncTRCFinalize(uint64_t a1)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 5)
  {
    CFTypeID v2 = *(const void **)(a1 + 56);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(a1 + 56) = 0;
    }
  }
}

uint64_t ColorSyncTRCGetGammaID(unsigned int *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (ColorSyncTRCGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncTRCGetTypeID_predicate, &__block_literal_global_1420);
  }
  if (v2 != ColorSyncTRCGetTypeID_kColorSyncTRCRuntimeID) {
    __assert_rtn("ColorSyncTRCGetGammaID", "ColorSyncTransformFunctions.c", 430, "CFGetTypeID(ref) == ColorSyncTRCGetTypeID()");
  }
  return a1[21];
}

__n128 ColorSyncTRCGetFunction@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeID v4 = CFGetTypeID((CFTypeRef)a1);
  if (ColorSyncTRCGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncTRCGetTypeID_predicate, &__block_literal_global_1420);
  }
  if (v4 != ColorSyncTRCGetTypeID_kColorSyncTRCRuntimeID) {
    __assert_rtn("ColorSyncTRCGetFunction", "ColorSyncTransformFunctions.c", 395, "CFGetTypeID(ref) == ColorSyncTRCGetTypeID()");
  }
  __n128 result = *(__n128 *)(a1 + 16);
  long long v6 = *(_OWORD *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 48);
  return result;
}

ColorSyncProfileRef ColorSyncProfileCreate(CFDataRef data, CFErrorRef *error)
{
  ColorSyncProfileRef result = (ColorSyncProfileRef)create(data, 0, 0);
  if (error) {
    *error = 0;
  }
  return result;
}

float ColorSyncMatrixGetOutputRange(float *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (ColorSyncMatrixGetTypeID_predicate[0] != -1) {
    dispatch_once(ColorSyncMatrixGetTypeID_predicate, &__block_literal_global_7);
  }
  if (v2 != ColorSyncMatrixGetTypeID_kColorSyncMatrixRuntimeID) {
    __assert_rtn("ColorSyncMatrixGetOutputRange", "ColorSyncTransformFunctions.c", 603, "CFGetTypeID(ref) == ColorSyncMatrixGetTypeID()");
  }
  return a1[19];
}

float ColorSyncMatrixGetInputRange(float *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (ColorSyncMatrixGetTypeID_predicate[0] != -1) {
    dispatch_once(ColorSyncMatrixGetTypeID_predicate, &__block_literal_global_7);
  }
  if (v2 != ColorSyncMatrixGetTypeID_kColorSyncMatrixRuntimeID) {
    __assert_rtn("ColorSyncMatrixGetInputRange", "ColorSyncTransformFunctions.c", 596, "CFGetTypeID(ref) == ColorSyncMatrixGetTypeID()");
  }
  return a1[17];
}

void vm_allocator_deallocate(void *a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x18C13AA60);
  }
  free(a1);
}

BOOL CMMLut16Tag::HasCLUT(CMMLut16Tag *this)
{
  if ((unint64_t)(*(uint64_t (**)(CMMLut16Tag *))(*(void *)this + 64))(this) > 2) {
    return 1;
  }
  if ((*(uint64_t (**)(CMMLut16Tag *))(*(void *)this + 64))(this) != 2) {
    return 0;
  }
  if ((*(uint64_t (**)(CMMLut16Tag *))(*(void *)this + 48))(this) != 3
    || (*(uint64_t (**)(CMMLut16Tag *))(*(void *)this + 56))(this) != 3)
  {
    return 1;
  }
  CFDictionaryRef v3 = (const void *)CMMTable::FloatData(*(void *)(*((void *)this + 12) + 16), *(void *)(*((void *)this + 12) + 24));
  return memcmp(v3, &k3x3LinearCLUT16bit, 0x30uLL) != 0;
}

uint64_t CMMLut16Tag::GetCLutPoints(CMMLut16Tag *this)
{
  return *((unsigned __int8 *)this + 52);
}

uint64_t CMMLut16Tag::GetOutputChan(CMMLut16Tag *this)
{
  return *((unsigned __int8 *)this + 51);
}

uint64_t CMMLut16Tag::GetInputChan(CMMLut16Tag *this)
{
  return *((unsigned __int8 *)this + 50);
}

CMMMemMgr *ConversionManager::AddInvGrayConv(CMMMemMgr **this, CMMProfile *a2, char a3)
{
  CFDataRef Tag = CMMProfile::GetTag((uint64_t)a2, 1800688195);
  if (Tag) {
  else
  }
    uint64_t v7 = 0;
  if (*((_DWORD *)a2 + 13) == 1281450528) {
    int v8 = 1347182946;
  }
  else {
    int v8 = *((_DWORD *)a2 + 13);
  }
  if (v7) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = 4294967125;
  }
  CMMThrowExceptionOnError(v9);
  long long v18 = &unk_1ED9855F0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v27 = 1065353216;
  uint64_t v23 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  if (v8 == 1482250784)
  {
    DWORD1(v19) = 0x20000;
    DWORD2(v21) = 1065353216;
  }
  else
  {
    if (v8 != 1347182946) {
      goto LABEL_16;
    }
    LODWORD(v19) = 0x10000;
    DWORD1(v21) = 1065353216;
  }
  CMMMatrix::MakeMatrixConv((CMMMatrix *)&v18, this[1], this[3]);
  this[3] = v10;
  if (!this[2]) {
    this[2] = v10;
  }
LABEL_16:
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  memset(v15, 0, sizeof(v15));
  LODWORD(v15[0]) = 1;
  uint64_t v11 = (*(uint64_t (**)(void *, long long *, CMMMemMgr *, uint64_t *, float))(*(void *)v7 + 72))(v7, v15, this[1], &v17, 1.0);
  unsigned int v12 = (*(uint64_t (**)(void *))(*(void *)v7 + 40))(v7);
  unsigned int v13 = CMMBase::NewInternal(0xB0uLL, (void **)this[1]);
  ColorSyncProfileRef result = (CMMMemMgr *)CMMConvInvertedTRC::CMMConvInvertedTRC((uint64_t)v13, 0, v11, v12, v17, v15, (uint64_t)this[3], 1, a3 ^ 1u);
  this[3] = result;
  if (!this[2]) {
    this[2] = result;
  }
  return result;
}

void ConversionManager::AddInvMatrixConv(uint64_t a1, CMMXYZTag *(*a2)[3], void *a3, int a4, int a5, uint64_t a6, const __CFDictionary *a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v80 = 0;
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  uint64_t v125 = 0;
  v126 = 0;
  memset(v127, 0, sizeof(v127));
  uint64_t v124 = 0;
  memset(v123, 0, sizeof(v123));
  LODWORD(v123[0]) = 1;
  char v81 = a4 ^ 1;
  uint64_t v121 = 0;
  v122 = 0;
  uint64_t v120 = 0;
  memset(v119, 0, sizeof(v119));
  LODWORD(v119[0]) = 1;
  uint64_t v118 = 0;
  memset(v117, 0, sizeof(v117));
  LODWORD(v117[0]) = 1;
  uint64_t v79 = (const void *)*MEMORY[0x1E4F1CFD0];
  do
  {
    unsigned int v12 = &a3[v11];
    uint64_t v14 = v12[1];
    unsigned int v13 = v12 + 1;
    int v15 = *(_DWORD *)(v14 + 52);
    if (v15 == 1212958496)
    {
      if (a5 == 14)
      {
        ConversionManager::AddHLGPCSToDev(a1, v11, &v126, &v125, a3, 14, (float32x2_t *)a6, a7);
      }
      else if (a5 != 10)
      {
        if (a5 != 2) {
          __assert_rtn("AddInvMatrixConv", "CMMConversionManager.cpp", 2607, "0");
        }
        ConversionManager::AddHLGPCSToDev(a1, v11, &v126, &v125, a3, 2, (float32x2_t *)a6, a7);
      }
LABEL_72:
      uint64_t v24 = v125;
      if (v126) {
        long long v21 = v126;
      }
      else {
        long long v21 = v125;
      }
      v126 = v21;
      if (!v125)
      {
        uint64_t v10 = 0;
        char v50 = 1;
        goto LABEL_88;
      }
      goto LABEL_76;
    }
    if (v15 != 1347493920)
    {
      *(void *)&long long v98 = 0;
      if (*(unsigned char *)(a1 + 43) || *(unsigned char *)(a1 + 44))
      {
        if (*(unsigned char *)(a1 + 58) && !*(unsigned char *)(a1 + 49))
        {
          InvertedTRC = v122;
          if (v122) {
            goto LABEL_93;
          }
          BOOL v34 = *(unsigned char *)(a1 + 52) != 0;
          if (*(unsigned char *)(a1 + 52)) {
            float v35 = 0.0049261;
          }
          else {
            float v35 = 1.0;
          }
          if (*(unsigned char *)(a1 + 53))
          {
            if (CMMITUBT1886InvEOTF_Use_Spec_Gamma_For_HLG(__CFDictionary const*)::predicate[0] != -1) {
              dispatch_once(CMMITUBT1886InvEOTF_Use_Spec_Gamma_For_HLG(__CFDictionary const*)::predicate, &__block_literal_global_941);
            }
            if (a7 && CFDictionaryContainsKey(a7, (const void *)kColorSyncUseBT1886ForCoreVideoGamma) == 1) {
              CMMITUBT1886InvEOTF_Use_Spec_Gamma_For_HLG(__CFDictionary const*)::enabled = CFDictionaryGetValue(a7, (const void *)kColorSyncUseBT1886ForCoreVideoGamma) == v79;
            }
            BOOL v36 = CMMITUBT1886InvEOTF_Use_Spec_Gamma_For_HLG(__CFDictionary const*)::enabled != 0;
          }
          else
          {
            BOOL v36 = 1;
          }
          *(void *)&long long v109 = 0;
          long long v107 = 0u;
          long long v108 = 0u;
          long long valuePtr = 0u;
          long long v106 = 0u;
          CMMITUBT1886InvEOTF::CMMITUBT1886InvEOTF((CMMITUBT1886InvEOTF *)&valuePtr, v36, v35);
          TRC = CMMITUBT1886InvEOTF::MakeTRC((uint64_t)&valuePtr, (uint64_t)v123, *(void ***)(a1 + 8));
          InvertedTRC = TRC;
          unsigned int v23 = 0;
          v80 |= v34;
          goto LABEL_102;
        }
        if (*(unsigned char *)(a1 + 43))
        {
          if (*(unsigned char *)(a1 + 61))
          {
            if (!*(unsigned char *)(a1 + 49))
            {
              int v51 = *(unsigned __int8 *)(a1 + 52);
              if (*(unsigned char *)(a1 + 52) || *(unsigned char *)(a1 + 53))
              {
                InvertedTRC = v122;
                if (v122)
                {
LABEL_93:
                  uint64_t v52 = InvertedTRC[1];
                  unsigned int v23 = 0;
                  if (v52) {
                    InvertedTRC[1] = v52 + 1;
                  }
                  goto LABEL_26;
                }
                int v53 = *(unsigned __int8 *)(a1 + 53);
                if (*(unsigned char *)(a1 + 52)) {
                  float v54 = 0.0049261;
                }
                else {
                  float v54 = 1.0;
                }
                *(void *)&long long v109 = 0;
                long long v107 = 0u;
                long long v108 = 0u;
                long long valuePtr = 0u;
                long long v106 = 0u;
                CMMITUBT1886InvEOTF::CMMITUBT1886InvEOTF((CMMITUBT1886InvEOTF *)&valuePtr, v53 == 0, v54);
                TRC = CMMITUBT1886InvEOTF::MakeTRC((uint64_t)&valuePtr, (uint64_t)v123, *(void ***)(a1 + 8));
                InvertedTRC = TRC;
                unsigned int v23 = 0;
                v80 |= v51 != 0;
LABEL_102:
                v122 = TRC;
                goto LABEL_26;
              }
            }
          }
        }
      }
      InvertedTRC = (void *)CMMRGBCurves::MakeInvertedTRC(a3, (uint64_t)v123, *(void *)(a1 + 8), v11, &v98, 1.0);
      unsigned int v23 = (*(uint64_t (**)(void))(*(void *)*v13 + 40))();
      if (*(unsigned char *)(a1 + 43)) {
        DWORD1(v123[0]) = 15;
      }
LABEL_26:
      uint64_t v24 = (CMMConvNode *)CMMBase::NewInternal(0xB0uLL, *(void ***)(a1 + 8));
      uint64_t v25 = v23;
      uint64_t v26 = (void *)v98;
      CMMConvInvertedTRC::CMMConvInvertedTRC((uint64_t)v24, v11, (uint64_t)InvertedTRC, v25, v98, v123, (uint64_t)v10, 3, v81);
      if (InvertedTRC && (uint64_t v27 = InvertedTRC[1]) != 0 && (v28 = v27 - 1, (InvertedTRC[1] = v28) == 0))
      {
        (*(void (**)(void *))(*InvertedTRC + 8))(InvertedTRC);
        if (v26) {
          goto LABEL_30;
        }
      }
      else if (v26)
      {
LABEL_30:
        uint64_t v29 = v26[1];
        if (v29)
        {
          uint64_t v30 = v29 - 1;
          v26[1] = v30;
          if (!v30) {
            (*(void (**)(void *))(*v26 + 8))(v26);
          }
        }
      }
      if (v126) {
        long long v21 = v126;
      }
      else {
        long long v21 = v24;
      }
      uint64_t v125 = v24;
      v126 = v21;
LABEL_76:
      uint64_t v10 = v24;
      goto LABEL_77;
    }
    if (a5 == 10)
    {
      if (a6)
      {
        unsigned int v31 = v11;
        if (!v11)
        {
          uint64_t v32 = *(void *)(a6 + 16);
          if (v32)
          {
            float v33 = (float)(int)bswap32(*(_DWORD *)(*(void *)(v32 + 40) + 12)) * 0.000015259;
LABEL_60:
            if (v33 == 0.0) {
              float v39 = v33;
            }
            else {
              float v39 = v33 / 100.0;
            }
            if (a7)
            {
              if (CFDictionaryContainsKey(a7, @"com.apple.cmm.PQInvOOTFOpticalScale") == 1)
              {
                CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a7, @"com.apple.cmm.PQInvOOTFOpticalScale");
                if (Value)
                {
                  LODWORD(valuePtr) = 0;
                  int v41 = CFNumberGetValue(Value, kCFNumberFloatType, &valuePtr);
                  float v42 = *(float *)&valuePtr;
                  if (!v41) {
                    float v42 = 0.0;
                  }
                  if (v42 != 0.0) {
                    float v39 = v42;
                  }
                }
              }
            }
            *((void *)&v99 + 1) = 0x100000001;
            *((void *)&v98 + 1) = LODWORD(v39);
            *(void *)&long long v98 = &unk_1ED9835F0;
            *(void *)&long long v99 = 0xD00000001;
            *(void *)&long long v100 = 0;
            DWORD2(v100) = 1054168405;
            *((float *)&v100 + 3) = v39;
            *(void *)&long long v102 = 0;
            long long v101 = 0uLL;
            v122 = CMMITUBT1886InvEOTF::MakeTRC((uint64_t)&v98, (uint64_t)v119, *(void ***)(a1 + 8));
            long long v111 = 0u;
            long long v112 = 0u;
            long long v109 = 0u;
            long long v110 = 0u;
            long long v107 = 0u;
            long long v108 = 0u;
            long long valuePtr = 0u;
            long long v106 = 0u;
            CMMParaCurveTag::CMMParaCurveTag((CMMCurveTag *)&valuePtr, 1885434465, (uint64_t)"para", 32, 0);
            *(void *)&long long valuePtr = off_1ED982A18;
            uint64_t v43 = CMMParaCurveTag::MakeInvertedTRC();
            DWORD1(v117[0]) = 15;
            uint64_t v121 = v43;
            CMMTag::~CMMTag((CMMTag *)&valuePtr);
            unsigned int v31 = 0;
LABEL_71:
            ConversionManager::AddTRCSequence(a1, v31, (uint64_t *)&v126, (uint64_t *)&v125, v119, (uint64_t *)&v122, v117, (uint64_t *)&v121);
            goto LABEL_72;
          }
LABEL_59:
          float v33 = 100.0;
          goto LABEL_60;
        }
      }
      else
      {
        unsigned int v31 = v11;
        if (!v11) {
          goto LABEL_59;
        }
      }
      uint64_t v37 = v122[1];
      if (v37) {
        v122[1] = v37 + 1;
      }
      uint64_t v38 = *((void *)v121 + 1);
      if (v38) {
        *((void *)v121 + 1) = v38 + 1;
      }
      goto LABEL_71;
    }
    if (a5 != 2) {
      __assert_rtn("AddInvMatrixConv", "CMMConversionManager.cpp", 2594, "0");
    }
    if (ColorSyncOptionsDisplayReferredToneMappingRequested(a7)) {
      goto LABEL_72;
    }
    float v16 = default_PQInvEOTFOpticalScale(a7, *(unsigned __int8 *)(a1 + 56));
    float v17 = custom_PQInvEOTFOpticalScale(a7, v16);
    if (v17 != 0.0) {
      float v16 = v17;
    }
    *(void *)&long long v108 = 0;
    long long v106 = 0u;
    long long v107 = 0u;
    long long valuePtr = 0u;
    LODWORD(valuePtr) = 1;
    *(void *)&long long v98 = 0;
    uint64_t v18 = CMMRGBCurves::MakeInvertedTRC(a3, (uint64_t)&valuePtr, *(void *)(a1 + 8), v11, &v98, v16);
    long long v19 = CMMBase::NewInternal(0xB8uLL, *(void ***)(a1 + 8));
    long long v20 = (float *)CMMConvInvertedTRC::CMMConvInvertedTRC((uint64_t)v19, v11, v18, 0, v98, &valuePtr, (uint64_t)v10, 3, 1);
    *(void *)long long v20 = &unk_1ED982D50;
    v20[44] = v16;
    if (v126) {
      long long v21 = v126;
    }
    else {
      long long v21 = (CMMConvNode *)v20;
    }
    uint64_t v125 = (CMMConvNode *)v20;
    v126 = v21;
    uint64_t v10 = v20;
LABEL_77:
    {
      uint64_t v45 = CMMTable::FloatData(*(void *)(v44[8] + 16), *(void *)(v44[8] + 24));
      uint64_t v46 = 4098;
      do
      {
        unsigned int v47 = v46 - 1;
        if (v46 == 1)
        {
          int v49 = 0x1000000;
          goto LABEL_86;
        }
        int v48 = *(_DWORD *)(v45 + 4 * (v46-- - 2));
      }
      while (v48 > 0xFFFFFF);
      if (v47 >= 0x1000) {
        unsigned int v47 = 4096;
      }
      int v49 = v47 << 12;
LABEL_86:
      char v50 = 0;
      v127[v11] = v49;
    }
    else
    {
      char v50 = 0;
    }
LABEL_88:
    ++v11;
  }
  while (v11 != 3);
  uint64_t v116 = 0;
  long long v114 = 0u;
  long long v115 = 0u;
  long long v112 = 0u;
  long long v113 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  long long valuePtr = 0u;
  CMMInvMatrix::CMMInvMatrix((CMMInvMatrix *)&valuePtr, a2, (int (*)[3])v127);
  unsigned int v56 = CMMBase::NewInternal(0x160uLL, *(void ***)(a1 + 8));
  CMMConvInvMatrix::CMMConvInvMatrix((uint64_t)v56, (uint64_t)&valuePtr, *(void *)(a1 + 24));
  *unint64_t v57 = &unk_1ED983D50;
  *(void *)(a1 + 24) = v57;
  if (a7
    && (CFDictionaryGetValue(a7, @"com.apple.cmm.SkipPQEETF") == v79
      ? (BOOL v58 = 1)
      : (BOOL v58 = CFDictionaryGetValue(a7, @"com.apple.cmm.SkipToneMappingForBT2100") == v79),
        *(unsigned char *)(a1 + 52)))
  {
    BOOL v59 = CFDictionaryGetValue(a7, @"com.apple.cmm.ApplyToneMappingForBT2100") == v79;
  }
  else
  {
    BOOL v58 = 0;
    BOOL v59 = 0;
  }
  unsigned __int8 v60 = ColorSyncOptionsDisplayReferredToneMappingRequested(a7);
  unsigned __int8 v61 = ColorSyncOptionsReferenceWhiteReferredToneMappingRequested(a7);
  unint64_t FlexTRCOptions = (unint64_t)ColorSyncOptionsGetFlexTRCOptions(0, a7);
  unint64_t FlexLumaScalingOptions = (unint64_t)ColorSyncOptionsGetFlexLumaScalingOptions(0, a7);
  BOOL v64 = 1;
  if ((v61 & 1) == 0 && (v60 & 1) == 0) {
    BOOL v64 = (FlexTRCOptions | FlexLumaScalingOptions) != 0;
  }
  if (*(unsigned char *)(a1 + 42)) {
    goto LABEL_121;
  }
  if (*(unsigned char *)(a1 + 41)) {
    BOOL v64 = 1;
  }
  if (v64 || *(unsigned char *)(a1 + 43)) {
    goto LABEL_121;
  }
  int v65 = a4;
  if (!*(unsigned char *)(a1 + 52)) {
    int v65 = 1;
  }
  if ((v65 | v58) == 1)
  {
LABEL_121:
    if (!(v80 & 1 | !v59)) {
      goto LABEL_122;
    }
  }
  else if ((v80 & 1) == 0)
  {
LABEL_122:
    uint64_t v66 = CMMBase::NewInternal(0x38uLL, *(void ***)(a1 + 8));
    uint64_t v67 = *(void *)(a1 + 24);
    *((_DWORD *)v66 + 2) = 1;
    v66[2] = 0;
    v66[3] = v67;
    if (v67) {
      *(void *)(v67 + 16) = v66;
    }
    v66[5] = 0x3FFFFF0000000000;
    *uint64_t v66 = &unk_1ED9838B8;
    *((_DWORD *)v66 + 12) = 1000434481;
    *((unsigned char *)v66 + 36) = 0;
    *((_DWORD *)v66 + 8) = 256;
    *(void *)(a1 + 24) = v66;
  }
  if (a7)
  {
    if (CFDictionaryGetValue(a7, @"com.apple.cmm.ApplyYCCGammaScaling") == v79)
    {
      long long v70 = *(_OWORD *)(a6 + 56);
      v96[0] = *(_OWORD *)(a6 + 40);
      v96[1] = v70;
      int v97 = *(_DWORD *)(a6 + 72);
      long long v103 = 0u;
      long long v104 = 0u;
      long long v101 = 0u;
      long long v102 = 0u;
      long long v99 = 0u;
      long long v100 = 0u;
      long long v98 = 0u;
      CMMMatrix::CMMMatrix((uint64_t)&v98, (uint64_t)v96);
      CMMMatrix::MakeMatrixConv((CMMMatrix *)&v98, *(CMMMemMgr **)(a1 + 8), *(CMMConvNode **)(a1 + 24));
      *(void *)(a1 + 24) = v71;
      uint64_t v93 = 1987212643;
      int v94 = 0x1000000;
      __int16 v95 = 14337;
      long long v92 = 0u;
      memset(v91, 0, sizeof(v91));
      CMMCurveTag::CMMCurveTag((CMMCurveTag *)v91, 0, (uint64_t)&v93, 14, 0);
      *(void *)&v91[0] = &unk_1ED9854B8;
      DWORD2(v92) = 1067198710;
      uint64_t v90 = 0;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v87 = 0u;
      LODWORD(v87) = 1;
      uint64_t v72 = CMMCurveTag::MakeTRC((uint64_t)v91, (uint64_t)&v87, *(void ***)(a1 + 8), 0);
      *(void *)&long long v87 = 1;
      HIDWORD(v87) = 1;
      *(void *)&long long v88 = 0;
      BYTE8(v87) = 1;
      *((void *)&v88 + 1) = DWORD2(v92) | 0x3F80000000000000;
      uint64_t v90 = 0;
      long long v89 = 0uLL;
      uint64_t v73 = (CMMConvNode *)CMMBase::NewInternal(0xA8uLL, *(void ***)(a1 + 8));
      CMMConvTRC::CMMConvTRC((uint64_t)v73, 0, (uint64_t)v72, 0, &v87, *(void *)(a1 + 24), 1, 1, 1.0, 1, 0);
      *(void *)(a1 + 24) = v73;
      long long v74 = *(_OWORD *)(a6 + 92);
      v84[0] = *(_OWORD *)(a6 + 76);
      v84[1] = v74;
      int v85 = *(_DWORD *)(a6 + 108);
      memset(v86, 0, sizeof(v86));
      CMMMatrix::CMMMatrix((uint64_t)v86, (uint64_t)v84);
      CMMMatrix::MakeMatrixConv((CMMMatrix *)v86, *(CMMMemMgr **)(a1 + 8), v73);
      *(void *)(a1 + 24) = v75;
      CMMTag::~CMMTag((CMMTag *)v91);
    }
    else if (CFDictionaryGetValue(a7, @"com.apple.cmm.ApplyLuminanceScaling") == v79)
    {
      uint64_t v68 = CMMBase::NewInternal(0x48uLL, *(void ***)(a1 + 8));
      uint64_t v69 = *(void *)(a1 + 24);
      *((_DWORD *)v68 + 2) = 1;
      v68[2] = 0;
      v68[3] = v69;
      if (v69) {
        *(void *)(v69 + 16) = v68;
      }
      v68[5] = 0x3F80000000000000;
      *(_DWORD *)((char *)v68 + 33) = 16777217;
      *uint64_t v68 = &unk_1ED984DC8;
      *((_DWORD *)v68 + 12) = 1062284383;
      *((_DWORD *)v68 + 13) = *(_DWORD *)(a6 + 24);
      *((_DWORD *)v68 + 14) = *(_DWORD *)(a6 + 28);
      *((_DWORD *)v68 + 15) = *(_DWORD *)(a6 + 32);
      *((_DWORD *)v68 + 16) = *(_DWORD *)(a6 + 36);
      *(void *)(a1 + 24) = v68;
    }
  }
  uint64_t v76 = *(void *)(a1 + 24);
  if (!*(void *)(a1 + 16)) {
    *(void *)(a1 + 16) = v76;
  }
  *(void *)(v76 + 16) = v21;
  if (v21) {
    *((void *)v21 + 3) = v76;
  }
  if ((v50 & 1) == 0) {
    *(void *)(a1 + 24) = v10;
  }
}

void sub_18BE0F308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

const void *ColorSyncOptionsGetFlexTRCOptions(const ColorSyncProfile *a1, CFTypeRef cf)
{
  if (!cf) {
    return 0;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID() || a1 && !ColorSyncProfileIsPQBased(a1)) {
    return 0;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, @"com.apple.cmm.ApplyToneMaping");
  if (!Value) {
    return 0;
  }
  CFDictionaryRef v6 = Value;
  CFTypeID v7 = CFGetTypeID(Value);
  if (v7 != CFDictionaryGetTypeID()) {
    return 0;
  }

  return CFDictionaryGetValue(v6, @"com.apple.cmm.ApplyFlexTRC");
}

uint64_t CMMConvInvertedTRC::CMMConvInvertedTRC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, uint64_t a7, int a8, char a9)
{
  uint64_t result = CMMConvTRC::CMMConvTRC(a1, a2, a3, a4, a6, a7, a8, 1, 1.0, 1, a9);
  *(void *)uint64_t result = &unk_1ED9832F8;
  *(void *)(result + 168) = a5;
  *(unsigned char *)(result + 35) = 0;
  *(unsigned char *)(result + 36) = a9;
  if (a5)
  {
    uint64_t v11 = *(void *)(a5 + 8);
    if (v11) {
      *(void *)(a5 + 8) = v11 + 1;
    }
  }
  return result;
}

uint64_t CMMRGBCurves::MakeInvertedTRC(void *a1, uint64_t a2, uint64_t a3, unsigned int a4, void *a5, float a6)
{
  uint64_t v11 = a1[1];
  if (!a4) {
    goto LABEL_8;
  }
  unsigned int v12 = &a1[a4 + 1];
  if (!(*(unsigned int (**)(uint64_t, void, void))(*(void *)v11 + 56))(v11, *v12, a1[a4]))
  {
    uint64_t v11 = *v12;
LABEL_8:
    a1[5] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, float))(*(void *)v11 + 72))(v11, a2, a3, a1 + 4, a6);
    goto LABEL_9;
  }
  uint64_t v13 = a1[4];
  uint64_t v14 = *(void *)(v13 + 8);
  if (v14) {
    *(void *)(v13 + 8) = v14 + 1;
  }
  uint64_t v15 = a1[5];
  uint64_t v16 = *(void *)(v15 + 8);
  if (v16) {
    *(void *)(v15 + 8) = v16 + 1;
  }
LABEL_9:
  *a5 = a1[4];
  return a1[5];
}

BOOL CMMCurveTag::SameCurve(CMMCurveTag *this, CMMCurveTag *a2, CMMCurveTag *a3)
{
  unsigned int v5 = (*(uint64_t (**)(CMMCurveTag *))(*(void *)a2 + 40))(a2);
  if (v5 != (*(unsigned int (**)(CMMCurveTag *))(*(void *)a3 + 40))(a3)) {
    return 0;
  }
  if (!v5) {
    return 1;
  }
  CFDictionaryRef v6 = (const void *)(*(uint64_t (**)(CMMCurveTag *))(*(void *)a2 + 48))(a2);
  CFTypeID v7 = (const void *)(*(uint64_t (**)(CMMCurveTag *))(*(void *)a3 + 48))(a3);
  if (v6 == v7) {
    return 1;
  }
  return memcmp(v6, v7, 2 * v5) == 0;
}

uint64_t CMMCurveTag::GetCurveData(CMMCurveTag *this)
{
  return *((void *)this + 5) + 12;
}

const void *ColorSyncOptionsGetFlexLumaScalingOptions(const ColorSyncProfile *a1, CFTypeRef cf)
{
  if (!cf) {
    return 0;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID() || a1 && !ColorSyncProfileIsPQBased(a1)) {
    return 0;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, @"com.apple.cmm.ApplyToneMaping");
  if (!Value) {
    return 0;
  }
  CFDictionaryRef v6 = Value;
  CFTypeID v7 = CFGetTypeID(Value);
  if (v7 != CFDictionaryGetTypeID()) {
    return 0;
  }

  return CFDictionaryGetValue(v6, @"com.apple.cmm.ApplyFlexLumaScaling");
}

CMMTable *CMMCurveTag::MakeTRC(uint64_t a1, uint64_t a2, void **a3, int a4)
{
  unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v9 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  if (a2) {
    *(_DWORD *)(a2 + 4) = 0;
  }
  if (!(v8 | a4))
  {
    if (CMMInitializeLinearGammaTable(void)::predicate == -1)
    {
      if (!a2)
      {
LABEL_13:
        uint64_t v14 = (CMMTable *)CMMLinearGammaTable;
        goto LABEL_14;
      }
LABEL_12:
      long long v12 = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 16);
      long long v11 = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 32);
      long long v13 = *(_OWORD *)CMMLinearGammaFloatLutInfo;
      *(void *)(a2 + 48) = *(void *)(CMMLinearGammaFloatLutInfo + 48);
      *(_OWORD *)(a2 + 16) = v12;
      *(_OWORD *)(a2 + 32) = v11;
      *(_OWORD *)a2 = v13;
      goto LABEL_13;
    }
LABEL_42:
    dispatch_once(&CMMInitializeLinearGammaTable(void)::predicate, &__block_literal_global_977);
    if (!a2) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (a4 || v8 != 1)
  {
    if (a4) {
      goto LABEL_18;
    }
  }
  else
  {
    int v10 = *(unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
    if (v10 == 1)
    {
      if (CMMInitializeLinearGammaTable(void)::predicate == -1)
      {
        if (!a2) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
      goto LABEL_42;
    }
    if ((v10 & 0xFFFFFEFF) == 0xCC01)
    {
      if (CMMInitializeOnePointEightGammaTable(void)::predicate[0] == -1)
      {
        if (!a2)
        {
LABEL_25:
          uint64_t v14 = (CMMTable *)CMMOnePointEightGammaTable;
          goto LABEL_14;
        }
      }
      else
      {
        dispatch_once(CMMInitializeOnePointEightGammaTable(void)::predicate, &__block_literal_global_980);
        if (!a2) {
          goto LABEL_25;
        }
      }
      long long v22 = *(_OWORD *)(CMMOnePointEightGammaFloatLutInfo + 16);
      long long v21 = *(_OWORD *)(CMMOnePointEightGammaFloatLutInfo + 32);
      long long v23 = *(_OWORD *)CMMOnePointEightGammaFloatLutInfo;
      *(void *)(a2 + 48) = *(void *)(CMMOnePointEightGammaFloatLutInfo + 48);
      *(_OWORD *)(a2 + 16) = v22;
      *(_OWORD *)(a2 + 32) = v21;
      *(_OWORD *)a2 = v23;
      goto LABEL_25;
    }
    if (v10 == 13058)
    {
      if (CMMInitializeTwoPointTwoGammaTable(void)::predicate == -1)
      {
        if (!a2) {
          goto LABEL_41;
        }
        goto LABEL_40;
      }
      goto LABEL_48;
    }
  }
  if (IsSRGBGammaCurve(v8, v9))
  {
    if (CMMInitializeSRGBGammaTable(void)::predicate[0] == -1)
    {
      if (!a2)
      {
LABEL_34:
        uint64_t v14 = (CMMTable *)CMMsRGBGammaTable;
        goto LABEL_14;
      }
    }
    else
    {
      dispatch_once(CMMInitializeSRGBGammaTable(void)::predicate, &__block_literal_global_974);
      if (!a2) {
        goto LABEL_34;
      }
    }
    long long v25 = *(_OWORD *)(CMMsRGBGammaFloatLutInfo + 16);
    long long v24 = *(_OWORD *)(CMMsRGBGammaFloatLutInfo + 32);
    long long v26 = *(_OWORD *)CMMsRGBGammaFloatLutInfo;
    *(void *)(a2 + 48) = *(void *)(CMMsRGBGammaFloatLutInfo + 48);
    *(_OWORD *)(a2 + 16) = v25;
    *(_OWORD *)(a2 + 32) = v24;
    *(_OWORD *)a2 = v26;
    goto LABEL_34;
  }
  double v30 = 2.2;
  if (IsPureGammaCurve(v8, v9, &v30) && v30 > 2.19 && v30 < 2.21)
  {
    if (CMMInitializeTwoPointTwoGammaTable(void)::predicate == -1)
    {
      if (!a2)
      {
LABEL_41:
        uint64_t v14 = (CMMTable *)CMMTwoPointTwoGammaTable;
LABEL_14:
        uint64_t v15 = *((void *)v14 + 1);
        if (v15) {
          *((void *)v14 + 1) = v15 + 1;
        }
        return v14;
      }
LABEL_40:
      long long v28 = *(_OWORD *)(CMMTwoPointTwoGammaFloatLutInfo + 16);
      long long v27 = *(_OWORD *)(CMMTwoPointTwoGammaFloatLutInfo + 32);
      long long v29 = *(_OWORD *)CMMTwoPointTwoGammaFloatLutInfo;
      *(void *)(a2 + 48) = *(void *)(CMMTwoPointTwoGammaFloatLutInfo + 48);
      *(_OWORD *)(a2 + 16) = v28;
      *(_OWORD *)(a2 + 32) = v27;
      *(_OWORD *)a2 = v29;
      goto LABEL_41;
    }
LABEL_48:
    dispatch_once(&CMMInitializeTwoPointTwoGammaTable(void)::predicate, &__block_literal_global_970);
    if (!a2) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
LABEL_18:
  uint64_t v14 = (CMMTable *)CMMBase::NewInternal(0x28uLL, a3);
  *(void *)uint64_t v14 = &unk_1ED985520;
  *((void *)v14 + 1) = 1;
  *((void *)v14 + 3) = 0;
  *((void *)v14 + 4) = 21512;
  float v17 = CMMBase::NewInternal(0x5408uLL, a3);
  *((void *)v14 + 2) = v17;
  uint64_t v18 = (unsigned int *)CMMTable::FloatData((uint64_t)v17, *((void *)v14 + 3));
  CMMCurveTag::MakeLut(a1, a2, v18, a4);
  long long v19 = (int *)CMMTable::FloatData(*((void *)v14 + 2), *((void *)v14 + 3));
  MakeLookups(v19);
  if (a2 && !*(_DWORD *)a2) {
    *(void *)(a2 + 16) = CMMTable::MakeFloatCopy(v14, a3, v20);
  }
  return v14;
}

CMMTable *CMMCurveTag::MakeInvertedTRC()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  CFTypeID v2 = v1;
  CFTypeID v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = v0;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(void *)v0 + 48))(v0);
  unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 40))(v7) == 1)
  {
    int v10 = *(unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7);
    if (v10 == 1)
    {
      if (CMMInitializeLinearGammaTable(void)::predicate != -1) {
        dispatch_once(&CMMInitializeLinearGammaTable(void)::predicate, &__block_literal_global_977);
      }
      long long v11 = (CMMTable *)CMMLinearGammaTable;
      uint64_t v12 = *(void *)(CMMLinearGammaTable + 8);
      if (v12) {
        *(void *)(CMMLinearGammaTable + 8) = ++v12;
      }
      const void *v2 = v11;
      if (!v6) {
        goto LABEL_28;
      }
      long long v14 = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 16);
      long long v13 = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 32);
      long long v15 = *(_OWORD *)CMMLinearGammaFloatLutInfo;
      *(void *)(v6 + 48) = *(void *)(CMMLinearGammaFloatLutInfo + 48);
      *(_OWORD *)(v6 + 16) = v14;
      *(_OWORD *)(v6 + 32) = v13;
      *(_OWORD *)uint64_t v6 = v15;
LABEL_27:
      uint64_t v12 = *((void *)v11 + 1);
LABEL_28:
      if (v12) {
        *((void *)v11 + 1) = v12 + 1;
      }
      return v11;
    }
    if ((v10 & 0xFFFFFEFF) == 0xCC01)
    {
      if (CMMInitializeOnePointEightGammaTable(void)::predicate[0] != -1) {
        dispatch_once(CMMInitializeOnePointEightGammaTable(void)::predicate, &__block_literal_global_980);
      }
      const void *v2 = (CMMTable *)CMMOnePointEightGammaTable;
      if (v6)
      {
        long long v17 = *(_OWORD *)(CMMInvOnePointEightGammaFloatLutInfo + 16);
        long long v16 = *(_OWORD *)(CMMInvOnePointEightGammaFloatLutInfo + 32);
        long long v18 = *(_OWORD *)CMMInvOnePointEightGammaFloatLutInfo;
        *(void *)(v6 + 48) = *(void *)(CMMInvOnePointEightGammaFloatLutInfo + 48);
        *(_OWORD *)(v6 + 16) = v17;
        *(_OWORD *)(v6 + 32) = v16;
        *(_OWORD *)uint64_t v6 = v18;
      }
      long long v11 = (CMMTable *)CMMInvOnePointEightGammaTable;
      goto LABEL_27;
    }
    if (v10 == 13058)
    {
      if (CMMInitializeTwoPointTwoGammaTable(void)::predicate != -1) {
        dispatch_once(&CMMInitializeTwoPointTwoGammaTable(void)::predicate, &__block_literal_global_970);
      }
      const void *v2 = (CMMTable *)CMMTwoPointTwoGammaTable;
      if (v6)
      {
        long long v20 = *(_OWORD *)(CMMInvTwoPointTwoGammaFloatLutInfo + 16);
        long long v19 = *(_OWORD *)(CMMInvTwoPointTwoGammaFloatLutInfo + 32);
        long long v21 = *(_OWORD *)CMMInvTwoPointTwoGammaFloatLutInfo;
        *(void *)(v6 + 48) = *(void *)(CMMInvTwoPointTwoGammaFloatLutInfo + 48);
        *(_OWORD *)(v6 + 16) = v20;
        *(_OWORD *)(v6 + 32) = v19;
        *(_OWORD *)uint64_t v6 = v21;
      }
      long long v11 = (CMMTable *)CMMInvTwoPointTwoGammaTable;
      goto LABEL_27;
    }
  }
  if (IsSRGBGammaCurve(v9, v8))
  {
    if (CMMInitializeSRGBGammaTable(void)::predicate[0] != -1) {
      dispatch_once(CMMInitializeSRGBGammaTable(void)::predicate, &__block_literal_global_974);
    }
    const void *v2 = (CMMTable *)CMMsRGBGammaTable;
    if (v6)
    {
      long long v23 = *(_OWORD *)(CMMInvsRGBGammaFloatLutInfo + 16);
      long long v22 = *(_OWORD *)(CMMInvsRGBGammaFloatLutInfo + 32);
      long long v24 = *(_OWORD *)CMMInvsRGBGammaFloatLutInfo;
      *(void *)(v6 + 48) = *(void *)(CMMInvsRGBGammaFloatLutInfo + 48);
      *(_OWORD *)(v6 + 16) = v23;
      *(_OWORD *)(v6 + 32) = v22;
      *(_OWORD *)uint64_t v6 = v24;
    }
    long long v11 = (CMMTable *)CMMInvsRGBGammaTable;
    goto LABEL_27;
  }
  long long v26 = (CMMTable *)CMMBase::NewInternal(0x28uLL, v4);
  *(void *)long long v26 = &unk_1ED985520;
  *((void *)v26 + 1) = 1;
  *((void *)v26 + 3) = 0;
  *((void *)v26 + 4) = 21512;
  *((void *)v26 + 2) = CMMBase::NewInternal(0x5408uLL, v4);
  const void *v2 = v26;
  long long v27 = (unsigned int *)CMMTable::FloatData(*((void *)v26 + 2), *((void *)v26 + 3));
  CMMCurveTag::MakeLut(v7, v6, v27, 0);
  long long v11 = (CMMTable *)CMMBase::NewInternal(0x28uLL, v4);
  *(void *)long long v11 = &unk_1ED985520;
  *((void *)v11 + 1) = 1;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 4) = 21512;
  long long v28 = CMMBase::NewInternal(0x5408uLL, v4);
  *((void *)v11 + 2) = v28;
  long long v29 = (void *)CMMTable::FloatData((uint64_t)v28, *((void *)v11 + 3));
  memcpy(v29, v27, 0x5408uLL);
  bzero(v31, 0x4004uLL);
  InvertLUT((int *)v29, v31);
  MakeLookups((int *)v29);
  if (v6)
  {
    if (*(_DWORD *)v6) {
      CMMCurveTag::InvertFloatParametricLUT(v6);
    }
    else {
      *(void *)(v6 + 16) = CMMTable::MakeFloatCopy(v11, v4, v30);
    }
  }
  return v11;
}

BOOL IsSRGBGammaCurve(unsigned int a1, unsigned __int16 *__s1)
{
  if (a1 != 26)
  {
    if (a1 >= 0x80)
    {
      if (a1 == 1024)
      {
        if (sRGBTRCDataPtr(void)::predicate != -1) {
          dispatch_once(&sRGBTRCDataPtr(void)::predicate, &__block_literal_global_946);
        }
        if (sRGBTRCDataPtr(void)::ptr && !memcmp(__s1, (const void *)sRGBTRCDataPtr(void)::ptr, 0x800uLL)) {
          return 1;
        }
      }
      if ((double)(bswap32(*__s1) >> 16) / 65535.0 <= 0.0001)
      {
        unint64_t v9 = a1 - 1;
        if (fabs((double)(bswap32(__s1[v9]) >> 16) / 65535.0 + -1.0) <= 0.0001
          && vabdd_f64((double)(bswap32(__s1[a1 >> 1]) >> 16) / 65535.0, pow(((double)(a1 >> 1) / (double)v9 + 0.055) / 1.055, 2.4)) <= 0.0001)
        {
          BOOL v7 = 0;
          uint64_t v11 = 1;
          do
          {
            double v12 = (double)v11 / (double)v9;
            unsigned int v13 = __s1[v11];
            if (v12 <= 0.04045) {
              double v14 = v12 / 12.92;
            }
            else {
              double v14 = pow((v12 + 0.055) / 1.055, 2.4);
            }
            if (vabdd_f64((double)(bswap32(v13) >> 16) / 65535.0, v14) > 0.0001) {
              break;
            }
            BOOL v7 = ++v11 >= v9;
          }
          while (v9 != v11);
          return v7;
        }
      }
    }
    return 0;
  }
  if (*__s1) {
    return 0;
  }
  uint64_t v3 = 1;
  unint64_t v4 = 25;
  while (v3 != 26)
  {
    int v5 = __s1[v3];
    int v6 = IsSRGBGammaCurve(unsigned int,unsigned short *)::instagramGamma[v3++];
    if (v5 != v6)
    {
      unint64_t v4 = v3 - 2;
      break;
    }
  }
  return v4 > 0x18;
}

__n128 CMMConvInvMatrix::CMMConvInvMatrix(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a3;
  if (a3) {
    *(void *)(a3 + 16) = a1;
  }
  *(void *)(a1 + 40) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 33) = 0;
  *(void *)a1 = &unk_1ED981B18;
  *(void *)(a1 + 56) = &unk_1ED9855F0;
  long long v3 = *(_OWORD *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 64) = v3;
  long long v5 = *(_OWORD *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 72);
  long long v7 = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 144) = v7;
  *(_OWORD *)(a1 + 112) = v5;
  *(_WORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 32) = 256;
  *(_WORD *)(a1 + 35) = 0;
  *(void *)a1 = &unk_1ED982C48;
  *(void *)(a1 + 168) = &unk_1ED9855F0;
  long long v8 = *(_OWORD *)(a2 + 8);
  long long v9 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 208) = v9;
  *(_OWORD *)(a1 + 176) = v8;
  long long v10 = *(_OWORD *)(a2 + 56);
  long long v11 = *(_OWORD *)(a2 + 72);
  long long v12 = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 240) = v11;
  *(_OWORD *)(a1 + 256) = v12;
  *(_OWORD *)(a1 + 224) = v10;
  *(void *)(a1 + 168) = &unk_1ED981860;
  *(_OWORD *)(a1 + 276) = *(_OWORD *)(a2 + 108);
  __n128 result = *(__n128 *)(a2 + 124);
  long long v14 = *(_OWORD *)(a2 + 140);
  long long v15 = *(_OWORD *)(a2 + 156);
  *(void *)(a1 + 340) = *(void *)(a2 + 172);
  *(_OWORD *)(a1 + 324) = v15;
  *(_OWORD *)(a1 + 308) = v14;
  *(__n128 *)(a1 + 292) = result;
  return result;
}

void CMMInvMatrix::CMMInvMatrix(CMMInvMatrix *this, CMMXYZTag *(*a2)[3], int (*a3)[3])
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 26) = 1065353216;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *(void *)this = &unk_1ED981860;
  CMMMatrix::InitializeMatrix((uint64_t)this, (uint64_t)this + 108, a2, 1.0);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  memset(v33, 0, sizeof(v33));
  do
  {
    uint64_t v7 = v5;
    uint64_t v8 = 3;
    do
    {
      v33[0][v7] = (double)*((int *)this + v7 + 27) * 0.0000152587891;
      ++v7;
      --v8;
    }
    while (v8);
    ++v6;
    v5 += 3;
  }
  while (v6 != 3);
  InvertMatrix3x3((double (*)[3][3])v33);
  uint64_t v9 = 0;
  for (uint64_t i = 0; i != 3; ++i)
  {
    uint64_t v11 = v9;
    uint64_t v12 = 3;
    do
    {
      double v13 = v33[0][v11];
      if (v13 >= 0.0) {
        double v14 = v13 * 65536.0 + 0.5;
      }
      else {
        double v14 = v13 * 65536.0 + -0.5;
      }
      *((_DWORD *)this + v11++ + 2) = (int)v14;
      --v12;
    }
    while (v12);
    v9 += 3;
  }
  uint64_t v15 = 0;
  for (uint64_t j = 0; j != 3; ++j)
  {
    uint64_t v17 = v15;
    uint64_t v18 = 3;
    do
    {
      v33[0][v17] = *((float *)this + v17 + 36);
      ++v17;
      --v18;
    }
    while (v18);
    v15 += 3;
  }
  InvertMatrix3x3((double (*)[3][3])v33);
  uint64_t v19 = 0;
  for (uint64_t k = 0; k != 3; ++k)
  {
    uint64_t v21 = v19;
    uint64_t v22 = 3;
    do
    {
      float v23 = v33[0][v21];
      *((float *)this + v21++ + 11) = v23;
      --v22;
    }
    while (v22);
    v19 += 3;
  }
  uint64_t v24 = 0;
  long long v25 = this;
  do
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    float v28 = 0.0;
    do
    {
      long long v29 = (float *)((char *)v25 + 4 * v26);
      v27 += qword_18BEB4B80[v26] * *((int *)v29 + 2);
      float v28 = v28 + (float)(v29[11] * flt_18BEB4A38[v26++]);
    }
    while (v26 != 3);
    if (v27 != (__int16)v27 && v28 != 0.0)
    {
      uint64_t v30 = 0;
      double v31 = (double)(*a3)[v24] / (double)((v27 + 0x8000) >> 16);
      float v32 = 1.0 / v28;
      do
      {
        if (v31 > 1.0) {
          *(_DWORD *)((char *)v25 + v30 + 8) = vcvtmd_s64_f64(v31 * (double)*(int *)((char *)v25 + v30 + 8) + 0.5);
        }
        *(float *)((char *)v25 + v30 + 44) = v32 * *(float *)((char *)v25 + v30 + 44);
        v30 += 4;
      }
      while (v30 != 12);
    }
    ++v24;
    long long v25 = (CMMInvMatrix *)((char *)v25 + 12);
  }
  while (v24 != 3);
}

double InvertMatrix3x3(double (*a1)[3][3])
{
  double v12 = (*a1)[0][1];
  double v13 = (*a1)[0][0];
  double v2 = (*a1)[0][2];
  double v3 = (*a1)[1][0];
  double v4 = (*a1)[1][1];
  double v5 = (*a1)[1][2];
  double v6 = (*a1)[2][0];
  double v7 = (*a1)[2][1];
  double v8 = (*a1)[2][2];
  double v14 = -((*a1)[0][0] * v5);
  double v9 = v2 * -(v6 * v4) + (*a1)[0][0] * v4 * v8 + v2 * v3 * v7 + -(v3 * v12) * v8 + v12 * v5 * v6 + v14 * v7;
  if (fabs(v9) <= 1.17549435e-38) {
    uint64_t v10 = 4294967126;
  }
  else {
    uint64_t v10 = 0;
  }
  CMMThrowExceptionOnError(v10);
  (*a1)[0][0] = (v4 * v8 - v7 * v5) / v9;
  (*a1)[0][1] = (v7 * v2 - v12 * v8) / v9;
  (*a1)[0][2] = (v12 * v5 - v4 * v2) / v9;
  (*a1)[1][0] = (v6 * v5 - v3 * v8) / v9;
  (*a1)[1][1] = (v13 * v8 - v6 * v2) / v9;
  (*a1)[1][2] = (v14 + v3 * v2) / v9;
  (*a1)[2][0] = (v3 * v7 - v6 * v4) / v9;
  (*a1)[2][1] = (v6 * v12 - v13 * v7) / v9;
  double result = (v13 * v4 - v3 * v12) / v9;
  (*a1)[2][2] = result;
  return result;
}

uint64_t CMMMatrix::InitializeMatrix(uint64_t result, uint64_t a2, void *a3, float a4)
{
  uint64_t v4 = 0;
  *(float *)(result + 104) = a4;
  uint64_t v5 = a3[1];
  double v6 = *(unsigned int **)(*a3 + 40);
  *(_DWORD *)a2 = bswap32(v6[2]);
  *(_DWORD *)(a2 + 12) = bswap32(v6[3]);
  *(_DWORD *)(a2 + 24) = bswap32(v6[4]);
  double v7 = *(unsigned int **)(v5 + 40);
  *(_DWORD *)(a2 + 4) = bswap32(v7[2]);
  *(_DWORD *)(a2 + 16) = bswap32(v7[3]);
  *(_DWORD *)(a2 + 28) = bswap32(v7[4]);
  double v8 = *(unsigned int **)(a3[2] + 40);
  *(_DWORD *)(a2 + 8) = bswap32(v8[2]);
  *(_DWORD *)(a2 + 20) = bswap32(v8[3]);
  *(_DWORD *)(a2 + 32) = bswap32(v8[4]);
  v9.i32[0] = v6[2];
  v9.i32[1] = v7[2];
  v9.i32[2] = v8[2];
  v9.i32[3] = v6[3];
  int8x16_t v10 = vrev32q_s8(v9);
  v11.i64[0] = v10.i32[0];
  v11.i64[1] = v10.i32[1];
  float64x2_t v12 = vcvtq_f64_s64(v11);
  v10.i64[0] = vextq_s8(v10, v10, 8uLL).u64[0];
  v11.i64[0] = v10.i32[0];
  v11.i64[1] = v10.i32[1];
  float64x2_t v13 = (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL);
  v10.i32[0] = v7[3];
  v10.i32[1] = v8[3];
  v10.i32[2] = v6[4];
  v10.i32[3] = v7[4];
  *(float32x4_t *)(a2 + 36) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v12, v13)), vmulq_f64(vcvtq_f64_s64(v11), v13));
  int8x16_t v14 = vrev32q_s8(v10);
  v11.i64[0] = v14.i32[0];
  v11.i64[1] = v14.i32[1];
  float64x2_t v15 = vcvtq_f64_s64(v11);
  v14.i64[0] = vextq_s8(v14, v14, 8uLL).u64[0];
  v11.i64[0] = v14.i32[0];
  v11.i64[1] = v14.i32[1];
  *(float32x4_t *)(a2 + 52) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v15, v13)), vmulq_f64(vcvtq_f64_s64(v11), v13));
  *(float *)v14.i32 = (double)(int)bswap32(v8[4]) * 0.0000152587891;
  *(_DWORD *)(a2 + 68) = v14.i32[0];
  uint64_t v16 = a2;
  do
  {
    for (uint64_t i = 0; i != 12; i += 4)
    {
      double v18 = (double)*(int *)(v16 + i) * 0.0000152587891;
      if (v18 >= 0.0) {
        double v19 = v18 * 32768.0 + 0.5;
      }
      else {
        double v19 = v18 * 32768.0 + -0.5;
      }
      *(_DWORD *)(v16 + i) = (int)v19;
    }
    ++v4;
    v16 += 12;
  }
  while (v4 != 3);
  for (uint64_t j = 0; j != 3; ++j)
  {
    uint64_t v21 = 0;
    double v22 = 0.0;
    float v23 = 0.0;
    do
    {
      double v22 = v22 + (double)*(int *)(a2 + v21);
      float v23 = v23 + *(float *)(a2 + v21 + 36);
      v21 += 4;
    }
    while (v21 != 12);
    if (v22 != 0.0 && v23 != 0.0)
    {
      uint64_t v24 = 0;
      double v25 = (double)dword_18BEB4A2C[j] / v22;
      float v26 = flt_18BEB4A38[j] / v23;
      do
      {
        uint64_t v27 = a2 + v24;
        *(_DWORD *)uint64_t v27 = vcvtmd_s64_f64(v25 * (double)*(int *)(a2 + v24) + 0.5);
        *(float *)(v27 + 36) = v26 * *(float *)(a2 + v24 + 36);
        v24 += 4;
      }
      while (v24 != 12);
    }
    a2 += 12;
  }
  return result;
}

CMMTable *CMMParaCurveTag::MakeInvertedTRC()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  double v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = v5;
  uint64_t v7 = v0;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (*(_WORD *)(v0 + 56) == 3)
  {
    if (*(_DWORD *)(v0 + 64) == 157286
      && *(_DWORD *)(v0 + 68) == 62119
      && *(_DWORD *)(v0 + 72) == 3417
      && *(_DWORD *)(v0 + 76) == 5072
      && !*(_DWORD *)(v0 + 84)
      && !*(_DWORD *)(v0 + 88))
    {
      if (CMMInitializeSRGBGammaTable(void)::predicate[0] != -1) {
        dispatch_once(CMMInitializeSRGBGammaTable(void)::predicate, &__block_literal_global_974);
      }
      uint64_t v14 = CMMsRGBGammaTable;
      uint64_t v15 = *(void *)(CMMsRGBGammaTable + 8);
      if (v15) {
        *(void *)(CMMsRGBGammaTable + 8) = v15 + 1;
      }
      uint64_t *v3 = v14;
      if (v6)
      {
        long long v17 = *(_OWORD *)(CMMInvsRGBGammaFloatLutInfo + 16);
        long long v16 = *(_OWORD *)(CMMInvsRGBGammaFloatLutInfo + 32);
        long long v18 = *(_OWORD *)CMMInvsRGBGammaFloatLutInfo;
        *(void *)(v6 + 48) = *(void *)(CMMInvsRGBGammaFloatLutInfo + 48);
        *(_OWORD *)(v6 + 16) = v17;
        *(_OWORD *)(v6 + 32) = v16;
        *(_OWORD *)uint64_t v6 = v18;
      }
      int8x16_t v9 = (CMMTable *)CMMInvsRGBGammaTable;
      goto LABEL_39;
    }
  }
  else if (!*(_WORD *)(v0 + 56))
  {
    unsigned int v8 = *(_DWORD *)(v0 + 64);
    if (v8 == 0x10000)
    {
      if (CMMInitializeLinearGammaTable(void)::predicate != -1) {
        dispatch_once(&CMMInitializeLinearGammaTable(void)::predicate, &__block_literal_global_977);
      }
      int8x16_t v9 = (CMMTable *)CMMLinearGammaTable;
      uint64_t v10 = *(void *)(CMMLinearGammaTable + 8);
      if (v10) {
        *(void *)(CMMLinearGammaTable + 8) = ++v10;
      }
      uint64_t *v3 = (uint64_t)v9;
      if (!v6) {
        goto LABEL_40;
      }
      long long v12 = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 16);
      long long v11 = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 32);
      long long v13 = *(_OWORD *)CMMLinearGammaFloatLutInfo;
      *(void *)(v6 + 48) = *(void *)(CMMLinearGammaFloatLutInfo + 48);
      *(_OWORD *)(v6 + 16) = v12;
      *(_OWORD *)(v6 + 32) = v11;
      *(_OWORD *)uint64_t v6 = v13;
LABEL_39:
      uint64_t v10 = *((void *)v9 + 1);
LABEL_40:
      if (v10) {
        *((void *)v9 + 1) = v10 + 1;
      }
      return v9;
    }
    if (v8 >> 1 == 58982)
    {
      if (CMMInitializeOnePointEightGammaTable(void)::predicate[0] != -1) {
        dispatch_once(CMMInitializeOnePointEightGammaTable(void)::predicate, &__block_literal_global_980);
      }
      uint64_t v19 = CMMOnePointEightGammaTable;
      uint64_t v20 = *(void *)(CMMOnePointEightGammaTable + 8);
      if (v20) {
        *(void *)(CMMOnePointEightGammaTable + 8) = v20 + 1;
      }
      uint64_t *v3 = v19;
      if (v6)
      {
        long long v22 = *(_OWORD *)(CMMInvOnePointEightGammaFloatLutInfo + 16);
        long long v21 = *(_OWORD *)(CMMInvOnePointEightGammaFloatLutInfo + 32);
        long long v23 = *(_OWORD *)CMMInvOnePointEightGammaFloatLutInfo;
        *(void *)(v6 + 48) = *(void *)(CMMInvOnePointEightGammaFloatLutInfo + 48);
        *(_OWORD *)(v6 + 16) = v22;
        *(_OWORD *)(v6 + 32) = v21;
        *(_OWORD *)uint64_t v6 = v23;
      }
      int8x16_t v9 = (CMMTable *)CMMInvOnePointEightGammaTable;
      goto LABEL_39;
    }
    if (v8 == 144179)
    {
      if (CMMInitializeTwoPointTwoGammaTable(void)::predicate != -1) {
        dispatch_once(&CMMInitializeTwoPointTwoGammaTable(void)::predicate, &__block_literal_global_970);
      }
      uint64_t v24 = CMMTwoPointTwoGammaTable;
      uint64_t v25 = *(void *)(CMMTwoPointTwoGammaTable + 8);
      if (v25) {
        *(void *)(CMMTwoPointTwoGammaTable + 8) = v25 + 1;
      }
      uint64_t *v3 = v24;
      if (v6)
      {
        long long v27 = *(_OWORD *)(CMMInvTwoPointTwoGammaFloatLutInfo + 16);
        long long v26 = *(_OWORD *)(CMMInvTwoPointTwoGammaFloatLutInfo + 32);
        long long v28 = *(_OWORD *)CMMInvTwoPointTwoGammaFloatLutInfo;
        *(void *)(v6 + 48) = *(void *)(CMMInvTwoPointTwoGammaFloatLutInfo + 48);
        *(_OWORD *)(v6 + 16) = v27;
        *(_OWORD *)(v6 + 32) = v26;
        *(_OWORD *)uint64_t v6 = v28;
      }
      int8x16_t v9 = (CMMTable *)CMMInvTwoPointTwoGammaTable;
      goto LABEL_39;
    }
  }
  long long v29 = CMMBase::NewInternal(0x28uLL, v1);
  void *v29 = &unk_1ED985520;
  v29[1] = 1;
  v29[3] = 0;
  v29[4] = 21512;
  v29[2] = CMMBase::NewInternal(0x5408uLL, v4);
  uint64_t *v3 = (uint64_t)v29;
  uint64_t v30 = (int *)CMMTable::FloatData(v29[2], v29[3]);
  CMMParaCurveTag::MakeLut(v7, v6, v30, 0, 1.0);
  int8x16_t v9 = (CMMTable *)CMMBase::NewInternal(0x28uLL, v4);
  *(void *)int8x16_t v9 = &unk_1ED985520;
  *((void *)v9 + 1) = 1;
  *((void *)v9 + 3) = 0;
  *((void *)v9 + 4) = 21512;
  double v31 = CMMBase::NewInternal(0x5408uLL, v4);
  *((void *)v9 + 2) = v31;
  float v32 = (void *)CMMTable::FloatData((uint64_t)v31, *((void *)v9 + 3));
  memcpy(v32, v30, 0x5408uLL);
  bzero(v35, 0x4004uLL);
  InvertLUT((int *)v32, v35);
  MakeLookups((int *)v32);
  if (v6)
  {
    if (*(_DWORD *)v6) {
      CMMCurveTag::InvertFloatParametricLUT(v6);
    }
    else {
      *(void *)(v6 + 16) = CMMTable::MakeFloatCopy(v9, v4, v33);
    }
  }
  return v9;
}

CMMConvNode *CMMConvNode::RemoveNOPs(CMMConvNode *this, unint64_t *a2, BOOL a3)
{
  if ((*a2)--) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 4294967125;
  }
  CMMThrowExceptionOnError(v7);
  if (((*(uint64_t (**)(CMMConvNode *))(*(void *)this + 80))(this) & 1) != 0
    || a3 && (*(unsigned int (**)(CMMConvNode *))(*(void *)this + 224))(this))
  {
    if (*((unsigned char *)this + 35))
    {
      uint64_t v8 = *((void *)this + 3);
      if (v8)
      {
        (*(void (**)(uint64_t))(*(void *)v8 + 48))(v8);
      }
      else
      {
        uint64_t v11 = *((void *)this + 2);
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
        }
      }
    }
    if (*((unsigned char *)this + 36))
    {
      uint64_t v12 = *((void *)this + 2);
      if (v12)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
      }
      else
      {
        uint64_t v13 = *((void *)this + 3);
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v13 + 48))(v13);
        }
      }
    }
    uint64_t v14 = (CMMConvNode *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v14)
    {
      *((void *)v14 + 3) = *((void *)this + 3);
      uint64_t v15 = CMMConvNode::RemoveNOPs(v14, a2, a3);
    }
    else
    {
      uint64_t v15 = 0;
    }
    (*(void (**)(CMMConvNode *))(*(void *)this + 8))(this);
    return (CMMConvNode *)v15;
  }
  else
  {
    int8x16_t v9 = (CMMConvNode *)*((void *)this + 2);
    if (v9)
    {
      uint64_t v10 = CMMConvNode::RemoveNOPs(v9, a2, a3);
      *((void *)this + 2) = v10;
      if (v10) {
        *(void *)(v10 + 24) = this;
      }
    }
  }
  return this;
}

BOOL CMMConvTRC::IsNOP(CMMConvTRC *this)
{
  if (*((unsigned char *)this + 32)) {
    return 1;
  }
  if (*((unsigned char *)this + 35) || *((unsigned char *)this + 36)) {
    return 0;
  }
  if (*((_DWORD *)this + 23) == 7) {
    return 1;
  }
  uint64_t v2 = CMMTable::FloatData(*(void *)(*((void *)this + 8) + 16), *(void *)(*((void *)this + 8) + 24));
  if (!v2) {
    return 1;
  }
  double v3 = (int *)(v2 + 8);
  uint64_t v4 = 0x2000;
  do
  {
    int v5 = *v3++;
    BOOL result = v4 == v5;
    if (v4 != v5) {
      break;
    }
    BOOL v6 = v4 == 16769024;
    v4 += 4096;
  }
  while (!v6);
  return result;
}

BOOL CMMConvTRC::IsFloatingPointNOP(CMMConvTRC *this)
{
  return memcmp((char *)this + 88, &CMMConvTRC::IsFloatingPointNOP(void)const::identity, 0x38uLL) == 0;
}

BOOL CMMConvMatrix::IsNOP(CMMConvMatrix *this)
{
  if (*((unsigned char *)this + 32))
  {
    return 1;
  }
  else if (*((float *)this + 40) == 1.0)
  {
    unint64_t v3 = 0;
    BOOL v1 = 0;
    uint64_t v4 = this;
LABEL_7:
    uint64_t v5 = 0;
    while (*((_DWORD *)v4 + v5 + 16) == (v3 == v5) << 16)
    {
      if (v3 == v5)
      {
        double v6 = *((float *)this + 3 * v3 + v3 + 25);
        if (v6 < 0.99999 || v6 > 1.00001) {
          return v1;
        }
      }
      else
      {
        double v7 = *((float *)v4 + v5 + 25);
        if (v7 < -0.00001 || v7 > 0.00001) {
          return v1;
        }
      }
      if (++v5 == 3)
      {
        if (!*((_DWORD *)this + v3 + 34))
        {
          double v8 = *((float *)this + v3 + 37);
          if (v8 >= -0.00001 && v8 <= 0.00001)
          {
            BOOL v1 = v3 > 1;
            uint64_t v4 = (CMMConvMatrix *)((char *)v4 + 12);
            if (++v3 != 3) {
              goto LABEL_7;
            }
          }
        }
        return v1;
      }
    }
  }
  else
  {
    return 0;
  }
  return v1;
}

uint64_t CMMConvTRC::CMMConvTRC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6, int a7, int a8, float a9, char a10, char a11)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a6;
  if (a6) {
    *(void *)(a6 + 16) = a1;
  }
  *(_DWORD *)(a1 + 40) = 0;
  *(float *)(a1 + 44) = a9;
  *(unsigned char *)(a1 + 33) = a8;
  *(unsigned char *)(a1 + 34) = a10;
  *(unsigned char *)(a1 + 35) = a11;
  *(unsigned char *)(a1 + 36) = 0;
  *(void *)a1 = &unk_1ED980FD8;
  *(void *)(a1 + 64) = a3;
  *(_DWORD *)(a1 + 72) = a2;
  *(_DWORD *)(a1 + 76) = a7;
  *(void *)(a1 + 80) = a4;
  long long v13 = *a5;
  long long v14 = a5[1];
  long long v15 = a5[2];
  *(void *)(a1 + 136) = *((void *)a5 + 6);
  *(_OWORD *)(a1 + 120) = v15;
  *(_OWORD *)(a1 + 104) = v14;
  *(_OWORD *)(a1 + 88) = v13;
  uint64_t v16 = a3;
  if (!*(_DWORD *)(a1 + 88))
  {
    long long v17 = *(void **)(a1 + 104);
    if (!v17)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = -171;
    }
    uint64_t v18 = v17[1];
    if (v18) {
      v17[1] = v18 + 1;
    }
    uint64_t v16 = a3;
    if (a8)
    {
      uint64_t v19 = (float *)CMMTable::FloatData(v17[2], v17[3]);
      uint64_t v20 = (*(void *)(*(void *)(a1 + 104) + 32) >> 2) - 1;
      float v21 = *(float *)((char *)v19 + ((2 * v20) & 0xFFFFFFFFFFFFFFFCLL));
      float v22 = *v19;
      float v23 = (float)(v21 - *v19) + (float)(v21 - *v19);
      float v24 = v19[v20];
      float v25 = (float)(v24 - v21) + (float)(v24 - v21);
      *(float *)(a1 + 144) = v23;
      *(float *)(a1 + 148) = v22;
      *(float *)(a1 + 152) = v25;
      *(float *)(a1 + 156) = v24 - v25;
      uint64_t v16 = *(void *)(a1 + 64);
    }
  }
  uint64_t v26 = *(void *)(v16 + 8);
  if (v26) {
    *(void *)(v16 + 8) = v26 + 1;
  }
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(void *)(a1 + 48) = CMMTable::FloatData(*(void *)(a3 + 16), *(void *)(a3 + 24)) + 16388;
  *(void *)(a1 + 56) = CMMTable::FloatData(*(void *)(a3 + 16), *(void *)(a3 + 24)) + 17412;
  BOOL v27 = (_UNKNOWN *)CMMTable::FloatData(*(void *)(*(void *)(a1 + 64) + 16), *(void *)(*(void *)(a1 + 64) + 24)) == &kOnePointEightGammaData|| CMMTable::FloatData(*(void *)(*(void *)(a1 + 64) + 16), *(void *)(*(void *)(a1 + 64) + 24)) == (void)&kInvOnePointEightGammaData;
  *(unsigned char *)(a1 + 161) = v27;
  return a1;
}

uint64_t CMMTable::FloatData(uint64_t this, uint64_t a2)
{
  if (this)
  {
    if (!a2) {
      goto LABEL_3;
    }
LABEL_7:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  if (!a2) {
    goto LABEL_7;
  }
LABEL_3:
  if (a2) {
    return a2;
  }
  return this;
}

BOOL CMMMatrix::IsFloatingPointNOP(CMMMatrix *this)
{
  if (*((float *)this + 26) == 1.0)
  {
    unint64_t v3 = 0;
    BOOL v1 = 0;
    uint64_t v4 = (char *)this + 44;
    do
    {
      for (uint64_t i = 0; i != 3; ++i)
      {
        if (v3 == i)
        {
          double v6 = *((float *)this + 3 * v3 + v3 + 11);
          if (v6 < 0.99999 || v6 > 1.00001) {
            return v1;
          }
        }
        else
        {
          double v7 = *(float *)&v4[4 * i];
          if (v7 < -0.00001 || v7 > 0.00001) {
            return v1;
          }
        }
      }
      double v8 = *((float *)this + v3 + 23);
      if (v8 < -0.00001) {
        break;
      }
      if (v8 > 0.00001) {
        break;
      }
      BOOL v1 = v3 > 1;
      v4 += 12;
      ++v3;
    }
    while (v3 != 3);
  }
  else
  {
    return 0;
  }
  return v1;
}

BOOL CMMConvMatrix::IsFloatingPointNOP(CMMConvMatrix *this)
{
  return CMMMatrix::IsFloatingPointNOP((CMMConvMatrix *)((char *)this + 56));
}

void CMMConvTRC::~CMMConvTRC(CMMConvTRC *this)
{
  CMMConvTRC::~CMMConvTRC(this);

  CMMBase::operator delete(v1);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *exception;

  *(void *)this = &unk_1ED980FD8;
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    unint64_t v3 = v2[1];
    if (v3)
    {
      uint64_t v4 = v3 - 1;
      v2[1] = v4;
      if (!v4) {
        (*(void (**)(void *))(*v2 + 8))(v2);
      }
    }
  }
  if (!*((_DWORD *)this + 22))
  {
    uint64_t v5 = (void *)*((void *)this + 13);
    if (!v5)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = -171;
    }
    double v6 = v5[1];
    if (v6)
    {
      double v7 = v6 - 1;
      v5[1] = v7;
      if (!v7) {
        (*(void (**)(void *))(*v5 + 8))(v5);
      }
    }
  }
}

void CMMConvInvertedTRC::~CMMConvInvertedTRC(CMMConvInvertedTRC *this)
{
  CMMConvInvertedTRC::~CMMConvInvertedTRC(this);

  CMMBase::operator delete(v1);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1ED9832F8;
  uint64_t v2 = (void *)*((void *)this + 21);
  if (v2)
  {
    unint64_t v3 = v2[1];
    if (v3)
    {
      uint64_t v4 = v3 - 1;
      v2[1] = v4;
      if (!v4) {
        (*(void (**)(void *))(*v2 + 8))(v2);
      }
    }
  }

  CMMConvTRC::~CMMConvTRC(this);
}

uint64_t CMMConvGrayToRGB::IsNOP(CMMConvGrayToRGB *this)
{
  return *((unsigned __int8 *)this + 32);
}

uint64_t CMMConvNode::SetOutputClamp(uint64_t this)
{
  *(unsigned char *)(this + 36) = 1;
  return this;
}

BOOL CMMConvScaleFloatXYZ::IsNOP(CMMConvScaleFloatXYZ *this)
{
  if (*((unsigned char *)this + 32)) {
    return 1;
  }
  float v2 = *((float *)this + 12);
  return v2 >= 1.0 && v2 <= 1.0;
}

_DWORD *CMMConvTRC::SetInputClamp(CMMConvTRC *this)
{
  *((unsigned char *)this + 35) = 1;
  BOOL result = (_DWORD *)*((void *)this + 2);
  if (result)
  {
    if (result)
    {
      if (result[18] > *((_DWORD *)this + 18))
      {
        unint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 24);
        return (_DWORD *)v3();
      }
    }
  }
  return result;
}

CFMutableArrayRef AppleCMMCreateTransformProperty(const __CFData **a1, __CFArray *a2, const __CFDictionary *a3)
{
  CFMutableArrayRef Mutable = a2;
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return Mutable;
  }
  CMMStorage = GetCMMStorage(a1);
  if (!CMMStorage) {
    return 0;
  }
  uint64_t v7 = (uint64_t)CMMStorage;
  if (CFEqual(Mutable, kColorSyncTransformParametricConversionData))
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (!Mutable) {
      return Mutable;
    }
    if (DoFlattenParametricConversion(v7, Mutable, a3))
    {
LABEL_6:
      CFRelease(Mutable);
      return 0;
    }
    goto LABEL_30;
  }
  if (CFEqual(Mutable, (CFTypeRef)kColorSyncTransformIteratorFullType))
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (!Mutable) {
      return Mutable;
    }
    if (!collect_flattened_conversion(*(CMMConvNode **)(v7 + 72), 1, a3, Mutable)) {
      goto LABEL_6;
    }
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(Mutable, 0);
    CFTypeID v10 = CFGetTypeID(ValueAtIndex);
    if (v10 == CFDictionaryGetTypeID()) {
      CFDictionarySetValue((CFMutableDictionaryRef)ValueAtIndex, kColorSyncTransformCodeFragmentType, kColorSyncTransformFullConversionData);
    }
    goto LABEL_30;
  }
  if (CFEqual(Mutable, (CFTypeRef)kColorSyncTransformIteratorCompactType))
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (!Mutable) {
      return Mutable;
    }
    v34.unint64_t A = 0;
    if (a3)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a3, kColorSyncConversionGridPoints);
      if (Value) {
        CFNumberGetValue(Value, kCFNumberSInt32Type, &v34);
      }
      uint64_t v12 = CFDictionaryGetValue(a3, (const void *)kColorSyncNxMFormat);
      unint64_t A = v34.A;
      uint64_t v14 = v7;
      uint64_t v15 = (uint64_t)Mutable;
      CFDictionaryRef v16 = a3;
    }
    else
    {
      uint64_t v14 = v7;
      uint64_t v15 = (uint64_t)Mutable;
      CFDictionaryRef v16 = 0;
      uint64_t v12 = 0;
      unint64_t A = 0;
    }
    if (!DoFlattenCompactConversion(v14, v15, v16, v12, A)) {
      goto LABEL_29;
    }
  }
  else
  {
    if (!CFEqual(Mutable, (CFTypeRef)kColorSyncTransformIteratorSimplifiedType)) {
      return 0;
    }
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (!Mutable) {
      return Mutable;
    }
    v34.unint64_t A = 0;
    if (a3)
    {
      CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(a3, kColorSyncConversionGridPoints);
      if (v17) {
        CFNumberGetValue(v17, kCFNumberSInt32Type, &v34);
      }
      uint64_t v18 = CFDictionaryGetValue(a3, (const void *)kColorSyncNxMFormat);
      unint64_t v19 = v34.A;
    }
    else
    {
      unint64_t v19 = 0;
      uint64_t v18 = 0;
    }
    if (!DoFlattenSimplifiedConversion(v7, Mutable, v18, v19)) {
      goto LABEL_29;
    }
  }
  CFRelease(Mutable);
  CFMutableArrayRef Mutable = 0;
LABEL_29:
  if (!Mutable) {
    return Mutable;
  }
LABEL_30:
  CFTypeID v20 = CFGetTypeID(Mutable);
  if (v20 == CFArrayGetTypeID())
  {
    newValues = 0;
    CFDictionaryRef v21 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, 0);
    if (v21)
    {
      CFDictionaryRef v22 = v21;
      CFTypeID v23 = CFGetTypeID(v21);
      if (v23 == CFDictionaryGetTypeID())
      {
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v22);
        newValues = MutableCopy;
        if (MutableCopy)
        {
          float v25 = MutableCopy;
          CFDataRef Data = CFPropertyListCreateData(0, MutableCopy, kCFPropertyListBinaryFormat_v1_0, 0, 0);
          if (Data)
          {
            CFDataRef v27 = Data;
            *(void *)md = 0;
            uint64_t v37 = 0;
            CC_LONG Length = CFDataGetLength(Data);
            BytePtr = CFDataGetBytePtr(v27);
            memset(&v34, 0, sizeof(v34));
            CC_MD5_Init(&v34);
            CC_MD5_Update(&v34, BytePtr, Length);
            CC_MD5_Final(md, &v34);
            CFRelease(v27);
            CFDataRef v30 = CFDataCreate(0, md, 16);
            if (v30)
            {
              CFDataRef v31 = v30;
              CFDictionarySetValue(v25, kColorSyncTransformCodeFragmentMD5, v30);
              CFRelease(v31);
            }
          }
          CFStringRef v32 = kColorSyncTransformProfileSequnce;
          CFArrayRef ProfileSequence = ColorSyncTransformGetProfileSequence((ColorSyncTransformRef)a1);
          CFDictionarySetValue(v25, v32, ProfileSequence);
          v39.location = 0;
          v39.length = 1;
          CFArrayReplaceValues(Mutable, v39, (const void **)&newValues, 1);
          CFRelease(newValues);
        }
      }
    }
  }
  return Mutable;
}

uint64_t ColorSyncTransformIterate(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v12 = CFGetTypeID((CFTypeRef)a1);
  if (ColorSyncTransformGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_34);
  }
  if (v12 != ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID) {
    return 0;
  }
  if (a2) {
    long long v13 = a2;
  }
  else {
    long long v13 = (const void *)kColorSyncTransformIteratorFullType;
  }
  CFTypeID v14 = CFGetTypeID((CFTypeRef)a1);
  if (ColorSyncTransformGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_34);
  }
  if (v14 != ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID) {
    return 0;
  }
  uint64_t v15 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  CFDictionaryRef v16 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 136), v13);
  if (v16)
  {
    CFNumberRef v17 = v16;
    CFRetain(v16);
    goto LABEL_124;
  }
  CFTypeID v18 = CFGetTypeID((CFTypeRef)a1);
  if (ColorSyncTransformGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_34);
  }
  if (v18 != ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID) {
    goto LABEL_118;
  }
  CFTypeID v19 = CFGetTypeID((CFTypeRef)a1);
  if (ColorSyncTransformGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_34);
  }
  if (v19 != ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID) {
    __assert_rtn("ColorSyncTransformIsNOP", "ColorSyncTransform.c", 1300, "transform != NULL && CFGetTypeID(transform) == ColorSyncTransformGetTypeID()");
  }
  CFTypeID v20 = (const void *)ColorSyncTransformInternalCopyProperty(a1, @"com.apple.cmm.TransformType", 0);
  if (v20)
  {
    CFDictionaryRef v21 = v20;
    int v22 = CFEqual(v20, @"NULLTransform");
    CFRelease(v21);
    if (v22)
    {
LABEL_118:
      CFNumberRef v17 = 0;
      goto LABEL_119;
    }
  }
  if (ColorSyncTransformIteratorGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncTransformIteratorGetTypeID_predicate, &__block_literal_global_1319);
  }
  uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
  CFNumberRef v17 = Instance;
  if (!Instance) {
    goto LABEL_119;
  }
  Instance[1] = 0u;
  Instance[8] = 0u;
  Instance[9] = 0u;
  Instance[6] = 0u;
  Instance[7] = 0u;
  Instance[4] = 0u;
  Instance[5] = 0u;
  Instance[2] = 0u;
  Instance[3] = 0u;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  v160 = (CFArrayRef *)(v17 + 1);
  *((void *)v17 + 4) = Mutable;
  if (!Mutable) {
    goto LABEL_117;
  }
  float v25 = (void *)kColorSyncTransformIteratorFullType;
  if (!v13) {
    goto LABEL_31;
  }
  CFTypeID v26 = CFGetTypeID(v13);
  if (v26 == CFStringGetTypeID()) {
    float v25 = (void *)v13;
  }
  CFTypeID v27 = CFGetTypeID(v13);
  if (v27 == CFDictionaryGetTypeID())
  {
    int v28 = CFDictionaryContainsKey((CFDictionaryRef)v13, (const void *)kColorSyncTransformIterationType);
    uint64_t v29 = (uint64_t)v13;
    if (v28)
    {
      float v25 = (void *)CFDictionaryGetValue((CFDictionaryRef)v13, (const void *)kColorSyncTransformIterationType);
      uint64_t v29 = (uint64_t)v13;
    }
  }
  else
  {
LABEL_31:
    uint64_t v29 = 0;
  }
  value = v25;
  CFArrayRef v30 = (const __CFArray *)ColorSyncTransformInternalCopyProperty(a1, v25, v29);
  CFArrayRef *v160 = v30;
  if (!v30
    || (CFIndex Count = CFArrayGetCount(v30)) == 0
    || (v32 = Count, float v33 = malloc_type_calloc(1uLL, 56 * Count, 0x366C5C3DuLL), (*((void *)v17 + 18) = v33) == 0)
    || (CC_MD5_CTX v34 = malloc_type_calloc(1uLL, 152 * v32, 0x26733402uLL), (*((void *)v17 + 19) = v34) == 0))
  {
LABEL_117:
    CFRelease(v17);
    goto LABEL_118;
  }
  *((void *)v17 + 3) = v32;
  uint64_t v35 = *((void *)v17 + 18) + 32 * v32;
  uint64_t v36 = v35 + 8 * v32;
  *((void *)v17 + 15) = v35;
  *((void *)v17 + 16) = v36;
  *((void *)v17 + 17) = v36 + 8 * v32;
  *(void *)((char *)v17 + 52) = ColorSyncTransformGetSrcComponentCount((void *)a1);
  *(void *)((char *)v17 + 60) = *(void *)(a1 + 96);
  if (*((uint64_t *)v17 + 3) < 1)
  {
    uint64_t v124 = 0;
    uint64_t v116 = value;
    goto LABEL_176;
  }
  CFIndex v37 = 0;
  long long v161 = (uint64_t *)((char *)v17 + 68);
  uint64_t v152 = (const void *)*MEMORY[0x1E4F1CFD0];
  uint64_t v153 = a3;
  unint64_t v38 = 0x1E9154000uLL;
  uint64_t v154 = a6;
  v155 = v13;
  do
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*v160, v37);
    if (!ValueAtIndex) {
      __assert_rtn("get_step_type", "ColorSyncTransformIteration.c", 171, "stepInfo != NULL");
    }
    CFDictionaryRef v40 = ValueAtIndex;
    CFTypeID v41 = CFGetTypeID(ValueAtIndex);
    if (v41 != CFDictionaryGetTypeID()) {
      __assert_rtn("get_step_type", "ColorSyncTransformIteration.c", 172, "CFGetTypeID(stepInfo) == CFDictionaryGetTypeID()");
    }
    CFIndex v162 = v37;
    if (CFDictionaryContainsKey(v40, *(const void **)(v38 + 2800)) != 1)
    {
      if (CFDictionaryContainsKey(v40, kColorSyncConversionParamCurve0) == 1)
      {
        int v42 = 0;
        goto LABEL_64;
      }
      if (CFDictionaryContainsKey(v40, kColorSyncConversionParamCurve1) == 1)
      {
        int v42 = 1;
        goto LABEL_64;
      }
      if (CFDictionaryContainsKey(v40, kColorSyncConversionParamCurve2) == 1)
      {
        int v42 = 2;
        goto LABEL_64;
      }
      if (CFDictionaryContainsKey(v40, kColorSyncConversionParamCurve3) == 1)
      {
        int v42 = 3;
        goto LABEL_64;
      }
      if (CFDictionaryContainsKey(v40, kColorSyncConversionParamCurve4) == 1)
      {
        int v42 = 4;
        goto LABEL_64;
      }
      if (CFDictionaryContainsKey(v40, (const void *)kColorSyncConversionParamPQEOTF) == 1)
      {
        int v42 = 6;
        goto LABEL_64;
      }
      if (CFDictionaryContainsKey(v40, (const void *)kColorSyncConversionParamPQInvEOTF) == 1)
      {
        int v42 = 7;
        goto LABEL_64;
      }
      CFDictionaryRef v43 = v40;
      if (CFDictionaryContainsKey(v40, (const void *)kColorSyncConversionParamHLGInvOETF) == 1)
      {
        int v42 = 8;
        goto LABEL_64;
      }
      if (CFDictionaryContainsKey(v40, (const void *)kColorSyncConversionParamHLGOETF) == 1)
      {
        int v42 = 9;
        goto LABEL_64;
      }
      if (CFDictionaryContainsKey(v40, kColorSyncConversionEXRToneMappingGamma) == 1)
      {
        int v42 = 10;
        goto LABEL_64;
      }
      if (CFDictionaryContainsKey(v40, (const void *)kColorSyncConversionFlexGlobalToneMappingCurve) == 1)
      {
        int v42 = 11;
        goto LABEL_64;
      }
      if (CFDictionaryContainsKey(v40, kColorSyncConversionMatrix) == 1)
      {
        uint64_t v70 = *((void *)v17 + 18) + 32 * v37;
        *(_DWORD *)uint64_t v70 = 2;
        *(void *)(v70 + 8) = -1;
        CFTypeID v71 = CFGetTypeID(v40);
        if (v71 != CFDictionaryGetTypeID()) {
          __assert_rtn("create_matrix", "ColorSyncTransformIteration.c", 516, "CFGetTypeID(stepInfo) == CFDictionaryGetTypeID()");
        }
        memset(v164, 0, sizeof(v164));
        CFArrayRef v72 = (const __CFArray *)CFDictionaryGetValue(v40, kColorSyncConversionMatrix);
        if (!v72) {
          __assert_rtn("create_matrix", "ColorSyncTransformIteration.c", 522, "array != NULL");
        }
        CFArrayRef v73 = v72;
        CFTypeID v74 = CFGetTypeID(v72);
        if (v74 != CFArrayGetTypeID()) {
          __assert_rtn("create_matrix", "ColorSyncTransformIteration.c", 523, "CFGetTypeID(array) == CFArrayGetTypeID()");
        }
        if (CFArrayGetCount(v73) != 3) {
          __assert_rtn("create_matrix", "ColorSyncTransformIteration.c", 524, "CFArrayGetCount(array) == 3");
        }
        CFIndex v75 = 0;
        uint64_t v76 = (_DWORD *)v164 + 2;
        do
        {
          CFArrayRef v77 = (const __CFArray *)CFArrayGetValueAtIndex(v73, v75);
          if (!v77) {
            __assert_rtn("get_matrix_row", "ColorSyncTransformIteration.c", 503, "row != NULL");
          }
          CFArrayRef v78 = v77;
          CFTypeID v79 = CFGetTypeID(v77);
          if (v79 != CFArrayGetTypeID()) {
            __assert_rtn("get_matrix_row", "ColorSyncTransformIteration.c", 504, "CFGetTypeID(row) == CFArrayGetTypeID()");
          }
          if (CFArrayGetCount(v78) != 4) {
            __assert_rtn("get_matrix_row", "ColorSyncTransformIteration.c", 505, "CFArrayGetCount(row) == 4");
          }
          int v80 = CFArrayGetValueAtIndex(v78, 0);
          double float_value = get_float_value(v80);
          *(v76 - 2) = LODWORD(float_value);
          uint64_t v82 = CFArrayGetValueAtIndex(v78, 1);
          double v83 = get_float_value(v82);
          *(v76 - 1) = LODWORD(v83);
          unint64_t v84 = CFArrayGetValueAtIndex(v78, 2);
          double v85 = get_float_value(v84);
          *uint64_t v76 = LODWORD(v85);
          v86 = CFArrayGetValueAtIndex(v78, 3);
          double v87 = get_float_value(v86);
          v76[1] = LODWORD(v87);
          ++v75;
          v76 += 4;
        }
        while (v75 != 3);
        unsigned int properties = get_properties(v43, 1);
        v166[0] = v164[0];
        v166[1] = v164[1];
        v166[2] = v164[2];
        ColorSyncMatrixCreate(v166, properties);
        if (v89)
        {
          uint64_t v90 = v89;
          uint64_t v91 = *((void *)v17 + 16);
          if (*(uint64_t *)((char *)v17 + 76) < 1)
          {
            uint64_t v92 = 0;
LABEL_114:
            CFRetain(v90);
            *(void *)(v91 + 8 * v92) = v90;
            ++*(void *)((char *)v17 + 76);
          }
          else
          {
            uint64_t v92 = 0;
            while (CFEqual(*(CFTypeRef *)(v91 + 8 * v92), v90) != 1)
            {
              if (++v92 >= *(void *)((char *)v17 + 76)) {
                goto LABEL_114;
              }
            }
          }
LABEL_115:
          CFIndex v68 = v162;
          *(void *)(*((void *)v17 + 18) + 32 * v162 + 24) = v92;
          CFRelease(v90);
          goto LABEL_116;
        }
      }
      else
      {
        if (CFDictionaryContainsKey(v40, kColorSyncConversionNDLut) != 1) {
          __assert_rtn("get_step_type", "ColorSyncTransformIteration.c", 241, "0");
        }
        uint64_t v93 = *((void *)v17 + 18) + 32 * v37;
        *(_DWORD *)uint64_t v93 = 3;
        *(void *)(v93 + 8) = -1;
        CFTypeID v94 = CFGetTypeID(v40);
        if (v94 != CFDictionaryGetTypeID()) {
          __assert_rtn("create_nxm", "ColorSyncTransformIteration.c", 539, "CFGetTypeID(stepInfo) == CFDictionaryGetTypeID()");
        }
        CFDataRef v95 = (const __CFData *)CFDictionaryGetValue(v40, kColorSyncConversionNDLut);
        if (!v95) {
          __assert_rtn("create_nxm", "ColorSyncTransformIteration.c", 543, "data != NULL");
        }
        CFDataRef v96 = v95;
        CFTypeID v97 = CFGetTypeID(v95);
        if (v97 != CFDataGetTypeID()) {
          __assert_rtn("create_nxm", "ColorSyncTransformIteration.c", 544, "CFGetTypeID(data) == CFDataGetTypeID()");
        }
        CFNumberRef v98 = (const __CFNumber *)CFDictionaryGetValue(v40, kColorSyncConversionGridPoints);
        CFNumberRef v99 = (const __CFNumber *)CFDictionaryGetValue(v40, kColorSyncConversionInpChan);
        CFNumberRef v100 = (const __CFNumber *)CFDictionaryGetValue(v40, kColorSyncConversionOutChan);
        CFNumberRef v150 = (const __CFNumber *)CFDictionaryGetValue(v43, (const void *)kColorSyncNxMFormat);
        BytePtr = CFDataGetBytePtr(v96);
        CFTypeRef cfa = (CFTypeRef)(int)get_int32_value(v98);
        uint64_t int32_value = (int)get_int32_value(v99);
        uint64_t v149 = (int)get_int32_value(v100);
        LODWORD(v98) = get_int32_value(v150);
        LODWORD(v99) = get_properties(v43, 0);
        CFArrayRef v102 = (const __CFArray *)CFDictionaryGetValue(v43, @"com.apple.cmm.FunctionInputRange");
        CFArrayRef v103 = (const __CFArray *)CFDictionaryGetValue(v43, @"com.apple.cmm.FunctionOutputRange");
        LODWORD(v164[0]) = v98;
        *(void *)((char *)v164 + 4) = int32_value;
        *(void *)((char *)v164 + 12) = v149;
        *(void *)((char *)&v164[1] + 4) = cfa;
        *(void *)((char *)&v164[1] + 12) = BytePtr;
        uint64_t v104 = ColorSyncNxMCreate(v96, (uint64_t)v164, (int)v99, v102, v103);
        if (v104)
        {
          uint64_t v90 = (const void *)v104;
          uint64_t v105 = *((void *)v17 + 17);
          if (*(uint64_t *)((char *)v17 + 84) < 1)
          {
            uint64_t v92 = 0;
LABEL_112:
            CFRetain(v90);
            *(void *)(v105 + 8 * v92) = v90;
            ++*(void *)((char *)v17 + 84);
          }
          else
          {
            uint64_t v92 = 0;
            while (CFEqual(*(CFTypeRef *)(v105 + 8 * v92), v90) != 1)
            {
              if (++v92 >= *(void *)((char *)v17 + 84)) {
                goto LABEL_112;
              }
            }
          }
          goto LABEL_115;
        }
      }
      CFIndex v68 = v162;
      *(void *)(*((void *)v17 + 18) + 32 * v162 + 24) = -1;
LABEL_116:
      a3 = v153;
      a6 = v154;
      long long v13 = v155;
      unint64_t v38 = 0x1E9154000;
      goto LABEL_82;
    }
    int v42 = 5;
LABEL_64:
    *(_DWORD *)(*((void *)v17 + 18) + 32 * v37) = 1;
    CFTypeID v44 = CFGetTypeID(v40);
    if (v44 != CFDictionaryGetTypeID()) {
      __assert_rtn("get_component_for_trc", "ColorSyncTransformIteration.c", 272, "CFGetTypeID(stepInfo) == CFDictionaryGetTypeID()");
    }
    CFNumberRef v45 = (const __CFNumber *)CFDictionaryGetValue(v40, kColorSyncConversionChannelID);
    *(void *)(*((void *)v17 + 18) + 32 * v37 + 8) = (int)get_int32_value(v45);
    CFTypeID v46 = CFGetTypeID(v40);
    if (v46 != CFDictionaryGetTypeID()) {
      __assert_rtn("get_channels_in_stage_count", "ColorSyncTransformIteration.c", 286, "CFGetTypeID(stepInfo) == CFDictionaryGetTypeID()");
    }
    CFNumberRef v47 = (const __CFNumber *)CFDictionaryGetValue(v40, @"com.apple.cmm.ChannelsInStageCount");
    *(void *)(*((void *)v17 + 18) + 32 * v37 + 16) = (int)get_int32_value(v47);
    CFTypeID v48 = CFGetTypeID(v40);
    if (v48 != CFDictionaryGetTypeID()) {
      __assert_rtn("create_trc", "ColorSyncTransformIteration.c", 473, "CFGetTypeID(stepInfo) == CFDictionaryGetTypeID()");
    }
    unsigned int cf = v42;
    CFArrayRef validated_param_array = get_validated_param_array(v40, 0, 1, (void *)kColorSyncConversionParamCurve0);
    char v50 = CFArrayGetValueAtIndex(validated_param_array, 0);
    double v51 = get_float_value(v50);
    int v52 = LODWORD(v51);
    int v53 = get_properties(v40, 0);
    CFNumberRef v54 = (const __CFNumber *)CFDictionaryGetValue(v40, (const void *)kColorSyncTransformGammaID);
    unsigned int v55 = CFDictionaryGetValue(v40, (const void *)kColorSyncTransformPureGammaOriginalTRC);
    unsigned int v56 = get_int32_value(v54);
    BOOL v156 = v55 == v152;
    CFArrayRef v57 = (const __CFArray *)CFDictionaryGetValue(v40, @"com.apple.cmm.FunctionInputRange");
    CFArrayRef v58 = (const __CFArray *)CFDictionaryGetValue(v40, @"com.apple.cmm.FunctionOutputRange");
    if (cf > 0xA || cf == 5) {
      __assert_rtn("ColorSyncTRCCreateWithParams", "ColorSyncTransformFunctions.c", 365, "(trcType >= kColorSyncTRCParametricType0 && trcType <= kColorSyncTRCParametricType4) || (trcType == kColorSyncTRCParametricPQ_EOTF_Type || trcType == kColorSyncTRCParametricPQ_InvOETF_Type) || (trcType == kColorSyncTRCParametricHLG_InvOETF_Type || trcType == kColorSyncTRCParametricHLG_OETF_Type) || (trcType == kColorSyncTRCParametricEXRToneMappingGamma)");
    }
    CFArrayRef v59 = v58;
    create_trc_data();
    uint64_t v61 = v60;
    if (v60)
    {
      uint64_t v62 = 0x7F7FFFFFFF7FFFFFLL;
      if ((v53 & 4) != 0) {
        uint64_t v62 = 0x3F80000000000000;
      }
      *(void *)(v60 + 68) = v62;
      *(_DWORD *)(v60 + 16) = cf;
      *(_DWORD *)(v60 + 20) = v52;
      *(_DWORD *)(v60 + 24) = 0;
      *(_DWORD *)(v60 + 28) = 0;
      *(_DWORD *)(v60 + 32) = 0;
      *(_DWORD *)(v60 + 36) = 0;
      *(_DWORD *)(v60 + 40) = 0;
      *(_DWORD *)(v60 + 44) = 0;
      *(_DWORD *)(v60 + 48) = 0;
      *(_DWORD *)(v60 + 84) = v56;
      if (v57)
      {
        CFNumberRef v63 = (const __CFNumber *)CFArrayGetValueAtIndex(v57, 0);
        CFNumberGetValue(v63, kCFNumberFloat32Type, (void *)(v61 + 68));
        CFNumberRef v64 = (const __CFNumber *)CFArrayGetValueAtIndex(v57, 1);
        CFNumberGetValue(v64, kCFNumberFloat32Type, (void *)(v61 + 72));
      }
      uint64_t v65 = 0x7F7FFFFFFF7FFFFFLL;
      if ((v53 & 2) != 0) {
        uint64_t v65 = 0x3F80000000000000;
      }
      *(void *)(v61 + 76) = v65;
      long long v13 = v155;
      unint64_t v38 = 0x1E9154000;
      if (v59)
      {
        CFNumberRef v66 = (const __CFNumber *)CFArrayGetValueAtIndex(v59, 0);
        CFNumberGetValue(v66, kCFNumberFloat32Type, (void *)(v61 + 76));
        CFNumberRef v67 = (const __CFNumber *)CFArrayGetValueAtIndex(v59, 1);
        CFNumberGetValue(v67, kCFNumberFloat32Type, (void *)(v61 + 80));
      }
      *(_DWORD *)(v61 + 64) = v53;
      *(unsigned char *)(v61 + 88) = v156;
      a3 = v153;
      a6 = v154;
    }
    else
    {
      a3 = v153;
      a6 = v154;
      long long v13 = v155;
      unint64_t v38 = 0x1E9154000;
    }
    CFIndex v68 = v162;
    *(void *)(*((void *)v17 + 18) + 32 * v162 + 24) = add_trc((CFTypeRef)v61, *((void *)v17 + 15), v161);
    if (v61) {
      CFRelease((CFTypeRef)v61);
    }
LABEL_82:
    CFIndex v37 = v68 + 1;
    uint64_t v69 = *((void *)v17 + 3);
  }
  while (v37 < v69);
  uint64_t v116 = value;
  if (v69 < 1) {
    goto LABEL_175;
  }
  uint64_t v117 = 0;
  uint64_t v118 = *((void *)v17 + 19);
  uint64_t v119 = 24;
  *(void *)&long long v120 = -1;
  *((void *)&v120 + 1) = -1;
  do
  {
    uint64_t v121 = (_OWORD *)(v118 + v119);
    v121[6] = v120;
    v121[7] = v120;
    v121[4] = v120;
    v121[5] = v120;
    v121[2] = v120;
    v121[3] = v120;
    *uint64_t v121 = v120;
    v121[1] = v120;
    ++v117;
    uint64_t v122 = *((void *)v17 + 3);
    v119 += 152;
  }
  while (v117 < v122);
  if (v122 < 1)
  {
LABEL_175:
    uint64_t v124 = 0;
  }
  else
  {
    uint64_t v123 = 0;
    uint64_t v124 = 0;
    uint64_t v125 = (void *)(*((void *)v17 + 18) + 24);
    int v126 = -1;
    do
    {
      int v127 = *((_DWORD *)v125 - 6);
      if ((v127 - 2) >= 2)
      {
        if (v127 != 1) {
          __assert_rtn("initialize_stages", "ColorSyncTransformIteration.c", 741, "0");
        }
        if (v126 != 1 || v123 && *(v125 - 2) <= *(v125 - 6))
        {
          uint64_t v130 = 152 * v124++;
          *(_DWORD *)(v118 + v130) = 1;
        }
        uint64_t v131 = v118 + 152 * v124;
        uint64_t v132 = v131 + 8 * *(v125 - 2);
        ++*(void *)(v131 - 144);
        *(void *)(v132 - 128) = *v125;
        *(void *)(v131 - 136) = *(v125 - 1);
      }
      else
      {
        uint64_t v128 = v118 + 152 * v124++;
        *(_DWORD *)uint64_t v128 = v127;
        uint64_t v129 = *(void *)(v128 + 8);
        *(void *)(v128 + 8) = v129 + 1;
        *(void *)(v128 + 8 * v129 + 24) = *v125;
      }
      ++v123;
      v125 += 4;
      int v126 = v127;
    }
    while (v123 < *((void *)v17 + 3));
    if (v124 >= 1)
    {
      uint64_t v133 = 0;
      uint64_t v134 = 24;
      do
      {
        uint64_t v163 = v124;
        if (*(_DWORD *)(v118 + 152 * v133) == 1)
        {
          uint64_t v135 = *(void *)(v118 + 152 * v133 + 16);
          if (v135 < 1)
          {
LABEL_161:
            char v139 = 0;
          }
          else
          {
            long long v136 = (uint64_t *)(v118 + v134);
            while (1)
            {
              uint64_t v138 = *v136++;
              uint64_t v137 = v138;
              if (v138 != -1) {
                break;
              }
              if (!--v135) {
                goto LABEL_161;
              }
            }
            char v139 = ColorSyncTRCGetProperties(*(unsigned int **)(*((void *)v17 + 15) + 8 * v137));
            uint64_t v118 = *((void *)v17 + 19);
          }
          if (*(uint64_t *)(v118 + 152 * v133 + 16) >= 1)
          {
            uint64_t v140 = 0;
            int v141 = v139 & 6;
            do
            {
              if (*(void *)(v118 + v134 + 8 * v140) == -1)
              {
                if (linear_trc_predicate != -1) {
                  dispatch_once(&linear_trc_predicate, &__block_literal_global_64);
                }
                v142 = &linear_trc_linear_clamp;
                if (!v141) {
                  v142 = &linear_trc_linear_no_clamp;
                }
                CFTypeRef v143 = (CFTypeRef)*v142;
                CFRetain((CFTypeRef)*v142);
                uint64_t v144 = add_trc(v143, *((void *)v17 + 15), v161);
                uint64_t v118 = *((void *)v17 + 19);
                *(void *)(v118 + v134 + 8 * v140) = v144;
              }
              ++v140;
            }
            while (v140 < *(void *)(v118 + 152 * v133 + 16));
          }
        }
        ++v133;
        v134 += 152;
        uint64_t v124 = v163;
        long long v13 = v155;
        uint64_t v116 = value;
      }
      while (v133 != v163);
      a3 = v153;
      a6 = v154;
    }
  }
LABEL_176:
  *(void *)((char *)v17 + 44) = v124;
  if (*(uint64_t *)((char *)v17 + 68) >= 1) {
    *(void *)((char *)v17 + 92) = *((void *)v17 + 15);
  }
  if (*(uint64_t *)((char *)v17 + 76) >= 1) {
    *(void *)((char *)v17 + 100) = *((void *)v17 + 16);
  }
  if (*(uint64_t *)((char *)v17 + 84) >= 1) {
    *(void *)((char *)v17 + 108) = *((void *)v17 + 17);
  }
  CFDictionarySetValue(*((CFMutableDictionaryRef *)v17 + 4), (const void *)kColorSyncTransformIterationType, v116);
  v145 = (const void *)ColorSyncTransformInternalCopyProperty(a1, kColorSyncTransformDstSpace, 0);
  CFDictionarySetValue(*((CFMutableDictionaryRef *)v17 + 4), kColorSyncTransformDstSpace, v145);
  CFRelease(v145);
  v146 = (const void *)ColorSyncTransformInternalCopyProperty(a1, kColorSyncTransformSrcSpace, 0);
  CFDictionarySetValue(*((CFMutableDictionaryRef *)v17 + 4), kColorSyncTransformSrcSpace, v146);
  CFRelease(v146);
  CFArrayRef ProfileSequence = ColorSyncTransformGetProfileSequence((ColorSyncTransformRef)a1);
  if (ProfileSequence) {
    CFDictionarySetValue(*((CFMutableDictionaryRef *)v17 + 4), @"com.apple.cmm.ProfileSequence", ProfileSequence);
  }
LABEL_119:
  CFTypeID v106 = CFGetTypeID((CFTypeRef)a1);
  if (ColorSyncTransformGetTypeID_predicate != -1)
  {
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_34);
    if (v17) {
      goto LABEL_121;
    }
    goto LABEL_185;
  }
  if (!v17) {
    goto LABEL_185;
  }
LABEL_121:
  if (!v13 || v106 != ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID)
  {
LABEL_185:
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
    if (v17) {
      goto LABEL_125;
    }
    return 0;
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 136), v13, v17);
  uint64_t v15 = (pthread_mutex_t *)(a1 + 16);
LABEL_124:
  pthread_mutex_unlock(v15);
LABEL_125:
  uint64_t v107 = *((void *)v17 + 4);
  long long v108 = *(unsigned int (**)(uint64_t, _OWORD *, uint64_t))(a3 + 16);
  long long v109 = *(_OWORD *)((char *)v17 + 56);
  long long v110 = *(_OWORD *)((char *)v17 + 88);
  v164[2] = *(_OWORD *)((char *)v17 + 72);
  v165[0] = v110;
  *(_OWORD *)((char *)v165 + 12) = *(_OWORD *)((char *)v17 + 100);
  v164[0] = *(_OWORD *)((char *)v17 + 40);
  v164[1] = v109;
  if (v108(a3, v164, v107))
  {
    if (*(uint64_t *)((char *)v17 + 44) >= 1)
    {
      uint64_t v111 = 0;
      for (uint64_t i = 0; i < *(void *)((char *)v17 + 44); ++i)
      {
        uint64_t v113 = *((void *)v17 + 19);
        int v114 = *(_DWORD *)(v113 + v111);
        switch(v114)
        {
          case 1:
            if (!(*(unsigned int (**)(uint64_t, uint64_t, void, uint64_t))(a4 + 16))(a4, i, *(void *)(v113 + v111 + 16), v113 + v111 + 24))goto LABEL_138; {
            break;
            }
          case 3:
            if (((*(uint64_t (**)(uint64_t, uint64_t, void))(a6 + 16))(a6, i, *(void *)(v113 + v111 + 24)) & 1) == 0) {
              goto LABEL_138;
            }
            break;
          case 2:
            if (((*(uint64_t (**)(uint64_t, uint64_t, void))(a5 + 16))(a5, i, *(void *)(v113 + v111 + 24)) & 1) == 0) {
              goto LABEL_138;
            }
            break;
          default:
            __assert_rtn("ColorSyncTransformIterate", "ColorSyncTransformIteration.c", 943, "0");
        }
        v111 += 152;
      }
    }
    uint64_t v115 = 1;
  }
  else
  {
LABEL_138:
    uint64_t v115 = 0;
  }
  CFRelease(v17);
  return v115;
}

double get_float_value(const void *a1)
{
  int valuePtr = 0;
  if (!a1) {
    return 0.0;
  }
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 != CFNumberGetTypeID()) {
    __assert_rtn("get_float_value", "ColorSyncTransformIteration.c", 262, "CFGetTypeID(num) == CFNumberGetTypeID()");
  }
  if (CFNumberGetValue((CFNumberRef)a1, kCFNumberFloat32Type, &valuePtr) != 1) {
    __assert_rtn("get_float_value", "ColorSyncTransformIteration.c", 263, "CFNumberGetValue(num, kCFNumberFloat32Type, &val) == true");
  }
  LODWORD(result) = valuePtr;
  return result;
}

CFArrayRef get_validated_param_array(const __CFDictionary *a1, const __CFArray *a2, CFIndex a3, void *key)
{
  CFArrayRef v4 = a2;
  if (!a2)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, key);
    if (!Value) {
      __assert_rtn("get_validated_param_array", "ColorSyncTransformIteration.c", 372, "array != NULL");
    }
    CFArrayRef v4 = Value;
    CFTypeID v7 = CFGetTypeID(Value);
    if (v7 != CFArrayGetTypeID()) {
      __assert_rtn("get_validated_param_array", "ColorSyncTransformIteration.c", 373, "CFGetTypeID(array) == CFArrayGetTypeID()");
    }
    if (CFArrayGetCount(v4) < a3) {
      __assert_rtn("get_validated_param_array", "ColorSyncTransformIteration.c", 374, "CFArrayGetCount(array) >= count");
    }
  }
  return v4;
}

CFNumberRef get_int32_value(const __CFNumber *result)
{
  unsigned int valuePtr = 0;
  if (result)
  {
    CFNumberRef v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 != CFNumberGetTypeID()) {
      __assert_rtn("get_int32_value", "ColorSyncTransformIteration.c", 251, "CFGetTypeID(num) == CFNumberGetTypeID()");
    }
    if (CFNumberGetValue(v1, kCFNumberSInt32Type, &valuePtr) != 1) {
      __assert_rtn("get_int32_value", "ColorSyncTransformIteration.c", 252, "CFNumberGetValue(num, kCFNumberSInt32Type, &val) == true");
    }
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

uint64_t ColorSyncTransformInternalCopyProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v6 = CFGetTypeID((CFTypeRef)a1);
  if (ColorSyncTransformGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_34);
  }
  uint64_t v7 = 0;
  if (a2 && v6 == ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 112), a2))
    {
      CFArrayRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 112), a2);
      uint64_t v7 = (uint64_t)Value;
      if (Value) {
        CFRetain(Value);
      }
    }
    else
    {
      int8x16_t v9 = *(uint64_t (**)(uint64_t, const void *, uint64_t))(*(void *)(a1 + 80) + 64);
      if (v9) {
        uint64_t v7 = v9(a1, a2, a3);
      }
      else {
        uint64_t v7 = 0;
      }
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
  }
  return v7;
}

uint64_t get_properties(const __CFDictionary *a1, int a2)
{
  CFArrayRef Value = CFDictionaryGetValue(a1, @"com.apple.cmm.FunctionDoesSignedReflection");
  uint64_t v5 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFTypeID v6 = CFDictionaryGetValue(a1, @"com.apple.cmm.FunctionDoesOutputClamp");
  uint64_t v7 = CFDictionaryGetValue(a1, @"com.apple.cmm.FunctionDoesInputClamp");
  if (a2)
  {
    a2 = 16 * (CFDictionaryGetValue(a1, @"com.apple.cmm.OneChannelActiveMatrix") == v5);
    int v8 = 8 * (CFDictionaryGetValue(a1, @"com.apple.cmm.OneChannelInputMatrix") == v5);
  }
  else
  {
    int v8 = 0;
  }
  return (Value == v5) | (2 * (v6 == v5)) | (4 * (v7 == v5)) | a2 | v8;
}

double create_trc_data()
{
  if (ColorSyncTRCGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncTRCGetTypeID_predicate, &__block_literal_global_1420);
  }
  uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    double result = 0.0;
    Instance[4] = 0u;
    Instance[5] = 0u;
    Instance[2] = 0u;
    Instance[3] = 0u;
    Instance[1] = 0u;
  }
  return result;
}

uint64_t add_trc(CFTypeRef cf2, uint64_t a2, uint64_t *a3)
{
  if (!cf2) {
    return -1;
  }
  if (*a3 < 1)
  {
    uint64_t v6 = 0;
LABEL_9:
    CFRetain(cf2);
    *(void *)(a2 + 8 * v6) = cf2;
    ++*a3;
  }
  else
  {
    uint64_t v6 = 0;
    while (CFEqual(*(CFTypeRef *)(a2 + 8 * v6), cf2) != 1)
    {
      if (++v6 >= *a3) {
        goto LABEL_9;
      }
    }
  }
  return v6;
}

BOOL trc_equal_trc(unsigned int *cf, uint64_t a2)
{
  if (cf == (unsigned int *)a2) {
    return 1;
  }
  BOOL result = 0;
  if (cf && a2)
  {
    CFTypeID v5 = CFGetTypeID(cf);
    if (ColorSyncTRCGetTypeID_predicate != -1) {
      dispatch_once(&ColorSyncTRCGetTypeID_predicate, &__block_literal_global_1420);
    }
    if (v5 != ColorSyncTRCGetTypeID_kColorSyncTRCRuntimeID) {
      return 0;
    }
    CFTypeID v6 = CFGetTypeID((CFTypeRef)a2);
    if (ColorSyncTRCGetTypeID_predicate != -1) {
      dispatch_once(&ColorSyncTRCGetTypeID_predicate, &__block_literal_global_1420);
    }
    if (v6 == ColorSyncTRCGetTypeID_kColorSyncTRCRuntimeID && (unsigned int v7 = cf[4], v7 == *(_DWORD *)(a2 + 16)))
    {
      uint64_t v9 = cf[5];
      uint64_t v8 = cf[6];
      CFTypeID v10 = *(const void **)(cf + 7);
      float v12 = *((float *)cf + 9);
      float v11 = *((float *)cf + 10);
      uint64_t v14 = *(unsigned int *)(a2 + 20);
      uint64_t v13 = *(unsigned int *)(a2 + 24);
      uint64_t v15 = *(const void **)(a2 + 28);
      float v16 = *(float *)&v10;
      float v18 = *(float *)(a2 + 36);
      float v17 = *(float *)(a2 + 40);
      float v19 = *((float *)&v10 + 1);
      switch(v7)
      {
        case 0u:
        case 1u:
        case 2u:
        case 3u:
        case 4u:
          if (*(float *)&v9 == *(float *)&v14) {
            goto LABEL_13;
          }
          return 0;
        case 5u:
          uint64_t v28 = v9 | (v8 << 32);
          if (v28 != (v14 | (v13 << 32)) || v10 != v15 && memcmp(v10, v15, 4 * v28)) {
            return 0;
          }
          goto LABEL_19;
        case 6u:
        case 7u:
        case 8u:
        case 0xAu:
LABEL_13:
          BOOL result = 0;
          if (*(float *)&v8 == *(float *)&v13 && v16 == *(float *)&v15)
          {
            BOOL result = 0;
            if (v19 == *((float *)&v15 + 1) && v12 == v18 && v11 == v17 && *((float *)cf + 11) == *(float *)(a2 + 44)) {
              goto LABEL_19;
            }
          }
          return result;
        case 9u:
          BOOL result = 0;
          if (*(float *)&v8 != *(float *)&v13) {
            return result;
          }
          if (v16 != *(float *)&v15) {
            return result;
          }
          BOOL result = 0;
          if (v19 != *((float *)&v15 + 1) || v12 != v18 || v11 != v17) {
            return result;
          }
LABEL_19:
          int v20 = ColorSyncTRCGetProperties(cf);
          if (v20 != ColorSyncTRCGetProperties((unsigned int *)a2)) {
            return 0;
          }
          float v21 = ColorSyncTRCGetInputRange((float *)cf);
          float v22 = ColorSyncTRCGetInputRange((float *)a2);
          BOOL result = 0;
          if (v21 == v22)
          {
            float v23 = ColorSyncTRCGetOutputRange((float *)cf);
            float v25 = v24;
            BOOL v26 = v23 == ColorSyncTRCGetOutputRange((float *)a2);
            BOOL result = v25 == v27 && v26;
          }
          break;
        default:
          __assert_rtn("trc_equal_trc", "ColorSyncTransformFunctions.c", 139, "0");
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

float ColorSyncTRCGetOutputRange(float *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (ColorSyncTRCGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncTRCGetTypeID_predicate, &__block_literal_global_1420);
  }
  if (v2 != ColorSyncTRCGetTypeID_kColorSyncTRCRuntimeID) {
    __assert_rtn("ColorSyncTRCGetOutputRange", "ColorSyncTransformFunctions.c", 423, "CFGetTypeID(ref) == ColorSyncTRCGetTypeID()");
  }
  return a1[19];
}

float ColorSyncTRCGetInputRange(float *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (ColorSyncTRCGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncTRCGetTypeID_predicate, &__block_literal_global_1420);
  }
  if (v2 != ColorSyncTRCGetTypeID_kColorSyncTRCRuntimeID) {
    __assert_rtn("ColorSyncTRCGetInputRange", "ColorSyncTransformFunctions.c", 416, "CFGetTypeID(ref) == ColorSyncTRCGetTypeID()");
  }
  return a1[17];
}

uint64_t ColorSyncTRCGetProperties(unsigned int *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (ColorSyncTRCGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncTRCGetTypeID_predicate, &__block_literal_global_1420);
  }
  if (v2 != ColorSyncTRCGetTypeID_kColorSyncTRCRuntimeID) {
    __assert_rtn("ColorSyncTRCGetProperties", "ColorSyncTransformFunctions.c", 402, "CFGetTypeID(ref) == ColorSyncTRCGetTypeID()");
  }
  return a1[16];
}

CFArrayRef ColorSyncTransformGetProfileSequence(CFArrayRef transform)
{
  if (transform)
  {
    CFArrayRef v1 = transform;
    CFTypeID v2 = CFGetTypeID(transform);
    if (ColorSyncTransformGetTypeID_predicate != -1) {
      dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_34);
    }
    if (v2 == ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID) {
      return (CFArrayRef)*((void *)v1 + 15);
    }
    else {
      return 0;
    }
  }
  return transform;
}

const UInt8 *GetCMMStorage(const __CFData **a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v2 = CFGetTypeID(a1);
  if (ColorSyncTransformGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_34);
  }
  if (v2 != ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID) {
    return 0;
  }
  CFDataRef v3 = a1[13];
  if (!v3) {
    return 0;
  }

  return CFDataGetBytePtr(v3);
}

CFIndex collect_flattened_conversion(CMMConvNode *a1, char a2, const __CFDictionary *a3, CFArrayRef theArray)
{
  if (a1)
  {
    unsigned int v7 = a1;
    do
    {
      if ((a2 & 1) == 0 || ((*(uint64_t (**)(CMMConvNode *))(*(void *)v7 + 224))(v7) & 1) == 0)
      {
        CFArrayRef v8 = (const __CFArray *)(*(uint64_t (**)(CMMConvNode *, const __CFDictionary *))(*(void *)v7 + 208))(v7, a3);
        if (!v8)
        {
          CFArrayRemoveAllValues(theArray);
          break;
        }
        CFArrayRef v9 = v8;
        CFTypeID v10 = CFGetTypeID(v8);
        if (v10 == CFArrayGetTypeID())
        {
          v13.length = CFArrayGetCount(v9);
          v13.location = 0;
          CFArrayAppendArray(theArray, v9, v13);
        }
        else
        {
          CFArrayAppendValue(theArray, v9);
        }
        CFRelease(v9);
      }
      unsigned int v7 = (CMMConvNode *)*((void *)v7 + 2);
    }
    while (v7);
  }

  return CFArrayGetCount(theArray);
}

__CFDictionary *CMMConvTRC::FlattenConversion(CMMConvTRC *this, const __CFDictionary *a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return Mutable;
  }
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 72);
  if (v5)
  {
    CFNumberRef v6 = v5;
    CFDictionaryAddValue(Mutable, kColorSyncConversionChannelID, v5);
    CFRelease(v6);
  }
  CFNumberRef v7 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 76);
  if (v7)
  {
    CFNumberRef v8 = v7;
    CFDictionaryAddValue(Mutable, @"com.apple.cmm.ChannelsInStageCount", v7);
    CFRelease(v8);
  }
  int v9 = *((_DWORD *)this + 22);
  if (v9)
  {
    if (v9 != 1) {
      goto LABEL_37;
    }
    CFTypeID v10 = &kColorSyncConversionParamCurve0;
    switch(*((_DWORD *)this + 25))
    {
      case 0:
        break;
      case 1:
        CFTypeID v10 = &kColorSyncConversionParamCurve1;
        break;
      case 2:
        CFTypeID v10 = &kColorSyncConversionParamCurve2;
        break;
      case 3:
        CFTypeID v10 = &kColorSyncConversionParamCurve3;
        break;
      case 4:
        CFTypeID v10 = &kColorSyncConversionParamCurve4;
        break;
      case 9:
        CFTypeID v10 = (CFStringRef *)&kColorSyncConversionEXRToneMappingGamma;
        break;
      case 0xA:
        __assert_rtn("FlattenConversion", "CMMConversionClasses.cpp", 1120, "0");
      default:
        __assert_rtn("FlattenConversion", "CMMConversionClasses.cpp", 1123, "0");
    }
    CFStringRef v24 = *v10;
    if (!*v10) {
      goto LABEL_37;
    }
    CFMutableArrayRef v25 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (!v25) {
      goto LABEL_37;
    }
    float v21 = v25;
    uint64_t v26 = 0;
    while (1)
    {
      CFNumberRef v27 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + v26 + 112);
      if (!v27) {
        break;
      }
      CFNumberRef v28 = v27;
      CFArrayAppendValue(v21, v27);
      CFRelease(v28);
      v26 += 4;
      if (v26 == 28)
      {
        CFDictionaryAddValue(Mutable, v24, v21);
        break;
      }
    }
  }
  else
  {
    int valuePtr = 4097;
    float v11 = (const void *)(*(uint64_t (**)(CMMConvTRC *, const __CFDictionary *, int *))(*(void *)this + 248))(this, a2, &valuePtr);
    if (v11)
    {
      float v12 = v11;
      CFDictionaryAddValue(Mutable, kColorSyncConversion1DLut, v11);
      CFRelease(v12);
    }
    CFNumberRef v13 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v13)
    {
      CFNumberRef v14 = v13;
      CFDictionaryAddValue(Mutable, kColorSyncConversionGridPoints, v13);
      CFRelease(v14);
    }
    if (!*((unsigned char *)this + 33)) {
      goto LABEL_37;
    }
    int v44 = 0;
    if (*((unsigned char *)this + 34)) {
      uint64_t v15 = (char *)&v44;
    }
    else {
      uint64_t v15 = (char *)this + 144;
    }
    CFNumberRef v16 = CFNumberCreate(0, kCFNumberFloat32Type, v15);
    if (*((unsigned char *)this + 34)) {
      float v17 = (char *)&v44;
    }
    else {
      float v17 = (char *)this + 148;
    }
    CFNumberRef v18 = CFNumberCreate(0, kCFNumberFloat32Type, v17);
    values = v16;
    CFNumberRef v48 = v18;
    CFArrayRef v19 = CFArrayCreate(0, (const void **)&values, 2, MEMORY[0x1E4F1D510]);
    CFRelease(v16);
    CFRelease(v18);
    if (v19)
    {
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionNegBoundary", v19);
      CFRelease(v19);
    }
    CFNumberRef v20 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 152);
    float v21 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 156);
    v46[0] = v20;
    v46[1] = v21;
    CFArrayRef v22 = CFArrayCreate(0, (const void **)v46, 2, MEMORY[0x1E4F1D510]);
    if (v22)
    {
      CFArrayRef v23 = v22;
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionPosBoundary", v22);
      CFRelease(v23);
    }
    CFRelease(v20);
  }
  CFRelease(v21);
LABEL_37:
  CFNumberRef v29 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 92);
  CFDictionaryAddValue(Mutable, (const void *)kColorSyncTransformGammaID, v29);
  CFRelease(v29);
  CFArrayRef v30 = (const void *)*MEMORY[0x1E4F1CFD0];
  if (*((unsigned char *)this + 96)) {
    CFDataRef v31 = (const void *)*MEMORY[0x1E4F1CFD0];
  }
  else {
    CFDataRef v31 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  CFDictionaryAddValue(Mutable, (const void *)kColorSyncTransformPureGammaOriginalTRC, v31);
  CMMConvNode::AddFixedPointClippingRange(Mutable, v32, *((float *)this + 10), *((float *)this + 11));
  if (*((unsigned char *)this + 34)) {
    CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", v30);
  }
  CMMConvNode::AddClampingInfo(this, Mutable);
  if (*((unsigned char *)this + 35))
  {
    float v34 = *((float *)this + 10);
    float v33 = *((float *)this + 11);
    int valuePtr = LODWORD(v33);
    *(float *)CFTypeID v46 = v34;
    if (v34 != 0.0 || v33 != 1.0)
    {
      CFNumberRef v35 = CFNumberCreate(0, kCFNumberFloat32Type, v46);
      CFNumberRef v36 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
      values = v35;
      CFNumberRef v48 = v36;
      CFArrayRef v37 = CFArrayCreate(0, (const void **)&values, 2, MEMORY[0x1E4F1D510]);
      CFRelease(v35);
      CFRelease(v36);
      if (v37)
      {
        CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionInputRange", v37);
        CFRelease(v37);
      }
    }
  }
  if (*((unsigned char *)this + 36))
  {
    float v39 = *((float *)this + 10);
    float v38 = *((float *)this + 11);
    int valuePtr = LODWORD(v38);
    *(float *)CFTypeID v46 = v39;
    if (v39 != 0.0 || v38 != 1.0)
    {
      CFNumberRef v40 = CFNumberCreate(0, kCFNumberFloat32Type, v46);
      CFNumberRef v41 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
      values = v40;
      CFNumberRef v48 = v41;
      CFArrayRef v42 = CFArrayCreate(0, (const void **)&values, 2, MEMORY[0x1E4F1D510]);
      CFRelease(v40);
      CFRelease(v41);
      if (v42)
      {
        CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionOutputRange", v42);
        CFRelease(v42);
      }
    }
  }
  return Mutable;
}

void CMMConvNode::AddClampingInfo(CMMConvNode *this, CFMutableDictionaryRef theDict)
{
  CFArrayRef v4 = (const void **)MEMORY[0x1E4F1CFD0];
  if (*((unsigned char *)this + 35)) {
    CFDictionaryAddValue(theDict, @"com.apple.cmm.FunctionDoesInputClamp", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  if (*((unsigned char *)this + 36))
  {
    CFNumberRef v5 = *v4;
    CFDictionaryAddValue(theDict, @"com.apple.cmm.FunctionDoesOutputClamp", v5);
  }
}

void CMMConvNode::AddFixedPointClippingRange(CMMConvNode *this, __CFDictionary *a2, float a3, float a4)
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  float v9 = a4;
  float valuePtr = a3;
  if (a3 != 0.0 || a4 != 1.0)
  {
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
    CFNumberRef v7 = CFNumberCreate(0, kCFNumberFloat32Type, &v9);
    values[0] = v6;
    values[1] = v7;
    CFArrayRef v8 = CFArrayCreate(0, (const void **)values, 2, MEMORY[0x1E4F1D510]);
    if (v6) {
      CFRelease(v6);
    }
    if (v7) {
      CFRelease(v7);
    }
    if (v8)
    {
      CFDictionaryAddValue(this, kColorSyncFixedPointRange, v8);
      CFRelease(v8);
    }
  }
}

int8x16_t ColorSyncMatrixCreate(long long *a1, unsigned int a2)
{
  if (ColorSyncMatrixGetTypeID_predicate[0] != -1) {
    dispatch_once(ColorSyncMatrixGetTypeID_predicate, &__block_literal_global_7);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    *(void *)(Instance + 80) = 0;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    long long v6 = *a1;
    long long v7 = a1[2];
    *(_OWORD *)(Instance + 32) = a1[1];
    *(_OWORD *)(Instance + 48) = v7;
    *(_OWORD *)(Instance + 16) = v6;
    *(int32x2_t *)&long long v6 = vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(a2), (int8x8_t)0x200000004));
    v8.i64[0] = (int)v6;
    v8.i64[1] = SDWORD1(v6);
    int8x16_t result = vbslq_s8(v8, (int8x16_t)vdupq_n_s64(0x7F7FFFFFFF7FFFFFuLL), (int8x16_t)vdupq_n_s64(0x3F80000000000000uLL));
    *(int8x16_t *)(Instance + 68) = result;
    *(_DWORD *)(Instance + 64) = a2;
  }
  return result;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvGrayToRGBMatrix>::FlattenConversion(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableArrayRef v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    CFArrayRef v4 = (const void **)MEMORY[0x1E4F1CFD0];
    if (v3)
    {
      CFNumberRef v5 = v3;
      long long v6 = (const void *)*MEMORY[0x1E4F1CFD0];
      long long v7 = (const void *)*MEMORY[0x1E4F1CFC8];
      if (*(unsigned char *)(a1 + 49)) {
        int8x16_t v8 = (const void *)*MEMORY[0x1E4F1CFD0];
      }
      else {
        int8x16_t v8 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelActiveMatrix", v8);
      if (*(unsigned char *)(a1 + 48)) {
        float v9 = v6;
      }
      else {
        float v9 = v7;
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelInputMatrix", v9);
      uint64_t v10 = 0;
      uint64_t v11 = a1 + 100;
      float v12 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      while (1)
      {
        CFMutableArrayRef v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13) {
          break;
        }
        CFNumberRef v14 = v13;
        uint64_t v15 = 0;
        while (1)
        {
          float valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          CFNumberRef v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16) {
            break;
          }
          CFNumberRef v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12) {
            goto LABEL_16;
          }
        }
        CFRelease(v14);
        CFNumberRef v14 = 0;
LABEL_16:
        float v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        CFNumberRef v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        CFNumberRef v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14) {
          break;
        }
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    CFNumberRef v5 = Mutable;
    CFMutableDictionaryRef Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(unsigned char *)(a1 + 34)) {
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", *v4);
    }
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvRGBToGrayMatrix>::FlattenConversion(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableArrayRef v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    CFArrayRef v4 = (const void **)MEMORY[0x1E4F1CFD0];
    if (v3)
    {
      CFNumberRef v5 = v3;
      long long v6 = (const void *)*MEMORY[0x1E4F1CFD0];
      long long v7 = (const void *)*MEMORY[0x1E4F1CFC8];
      if (*(unsigned char *)(a1 + 49)) {
        int8x16_t v8 = (const void *)*MEMORY[0x1E4F1CFD0];
      }
      else {
        int8x16_t v8 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelActiveMatrix", v8);
      if (*(unsigned char *)(a1 + 48)) {
        float v9 = v6;
      }
      else {
        float v9 = v7;
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelInputMatrix", v9);
      uint64_t v10 = 0;
      uint64_t v11 = a1 + 100;
      float v12 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      while (1)
      {
        CFMutableArrayRef v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13) {
          break;
        }
        CFNumberRef v14 = v13;
        uint64_t v15 = 0;
        while (1)
        {
          float valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          CFNumberRef v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16) {
            break;
          }
          CFNumberRef v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12) {
            goto LABEL_16;
          }
        }
        CFRelease(v14);
        CFNumberRef v14 = 0;
LABEL_16:
        float v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        CFNumberRef v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        CFNumberRef v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14) {
          break;
        }
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    CFNumberRef v5 = Mutable;
    CFMutableDictionaryRef Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(unsigned char *)(a1 + 34)) {
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", *v4);
    }
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvRGBToRGBMatrix>::FlattenConversion(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableArrayRef v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    CFArrayRef v4 = (const void **)MEMORY[0x1E4F1CFD0];
    if (v3)
    {
      CFNumberRef v5 = v3;
      long long v6 = (const void *)*MEMORY[0x1E4F1CFD0];
      long long v7 = (const void *)*MEMORY[0x1E4F1CFC8];
      if (*(unsigned char *)(a1 + 49)) {
        int8x16_t v8 = (const void *)*MEMORY[0x1E4F1CFD0];
      }
      else {
        int8x16_t v8 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelActiveMatrix", v8);
      if (*(unsigned char *)(a1 + 48)) {
        float v9 = v6;
      }
      else {
        float v9 = v7;
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelInputMatrix", v9);
      uint64_t v10 = 0;
      uint64_t v11 = a1 + 100;
      float v12 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      while (1)
      {
        CFMutableArrayRef v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13) {
          break;
        }
        CFNumberRef v14 = v13;
        uint64_t v15 = 0;
        while (1)
        {
          float valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          CFNumberRef v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16) {
            break;
          }
          CFNumberRef v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12) {
            goto LABEL_16;
          }
        }
        CFRelease(v14);
        CFNumberRef v14 = 0;
LABEL_16:
        float v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        CFNumberRef v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        CFNumberRef v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14) {
          break;
        }
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    CFNumberRef v5 = Mutable;
    CFMutableDictionaryRef Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(unsigned char *)(a1 + 34)) {
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", *v4);
    }
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvGrayToGrayMatrix>::FlattenConversion(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableArrayRef v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    CFArrayRef v4 = (const void **)MEMORY[0x1E4F1CFD0];
    if (v3)
    {
      CFNumberRef v5 = v3;
      long long v6 = (const void *)*MEMORY[0x1E4F1CFD0];
      long long v7 = (const void *)*MEMORY[0x1E4F1CFC8];
      if (*(unsigned char *)(a1 + 49)) {
        int8x16_t v8 = (const void *)*MEMORY[0x1E4F1CFD0];
      }
      else {
        int8x16_t v8 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelActiveMatrix", v8);
      if (*(unsigned char *)(a1 + 48)) {
        float v9 = v6;
      }
      else {
        float v9 = v7;
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelInputMatrix", v9);
      uint64_t v10 = 0;
      uint64_t v11 = a1 + 100;
      float v12 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      while (1)
      {
        CFMutableArrayRef v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13) {
          break;
        }
        CFNumberRef v14 = v13;
        uint64_t v15 = 0;
        while (1)
        {
          float valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          CFNumberRef v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16) {
            break;
          }
          CFNumberRef v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12) {
            goto LABEL_16;
          }
        }
        CFRelease(v14);
        CFNumberRef v14 = 0;
LABEL_16:
        float v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        CFNumberRef v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        CFNumberRef v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14) {
          break;
        }
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    CFNumberRef v5 = Mutable;
    CFMutableDictionaryRef Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(unsigned char *)(a1 + 34)) {
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", *v4);
    }
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

uint64_t CMMConvNode::IsFloatingPointNOP(CMMConvNode *this)
{
  return 0;
}

__CFDictionary *CMMConvGrayToRGB::FlattenConversion(CMMConvGrayToRGB *this, const __CFDictionary *a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFArrayRef v4 = Mutable;
  if (!Mutable) {
    return v4;
  }
  CFNumberRef v5 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelInputMatrix", (const void *)*MEMORY[0x1E4F1CFD0]);
  long long v6 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  int v19 = 1065353216;
  int valuePtr = 0;
  CFNumberRef v7 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
  CFNumberRef v8 = CFNumberCreate(0, kCFNumberFloat32Type, &v19);
  CFNumberRef v9 = v8;
  if (v6) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10 && v7 != 0)
  {
    int v12 = 0;
    CFMutableArrayRef v13 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    while (1)
    {
      CFMutableArrayRef v14 = CFArrayCreateMutable(0, 0, v13);
      if (!v14) {
        break;
      }
      uint64_t v15 = v14;
      int v16 = 3;
      do
      {
        if (v16 == 3) {
          CFNumberRef v17 = v9;
        }
        else {
          CFNumberRef v17 = v7;
        }
        CFArrayAppendValue(v15, v17);
        --v16;
      }
      while (v16);
      CFArrayAppendValue(v15, v7);
      CFArrayAppendValue(v6, v15);
      CFRelease(v15);
      if (++v12 == 3) {
        goto LABEL_17;
      }
    }
    CFRelease(v6);
    goto LABEL_20;
  }
LABEL_17:
  if (!v6)
  {
LABEL_20:
    long long v6 = v4;
    CFArrayRef v4 = 0;
    goto LABEL_21;
  }
  CFDictionaryAddValue(v4, kColorSyncConversionMatrix, v6);
LABEL_21:
  CFRelease(v6);
  if (v9) {
    CFRelease(v9);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (*((unsigned char *)this + 34)) {
    CFDictionaryAddValue(v4, @"com.apple.cmm.FunctionDoesSignedReflection", v5);
  }
  CMMConvNode::AddClampingInfo(this, v4);
  return v4;
}

BOOL ColorSyncProfileIsWideGamut(ColorSyncProfileRef a1)
{
  if (!a1) {
    return (char)a1;
  }
  ColorSyncProfileRef v1 = a1;
  CFTypeID v2 = CFGetTypeID(a1);
  if (ColorSyncProfileGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
  }
  if (v2 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
  {
    LOBYTE(a1) = 0;
    return (char)a1;
  }
  unint64_t XYZColor = getXYZColor(v1, 0x7258595Au);
  int v4 = XYZColor;
  int v6 = v5;
  unint64_t v7 = HIDWORD(XYZColor);
  unint64_t v8 = getXYZColor(v1, 0x6758595Au);
  int v9 = v8;
  int v11 = v10;
  unint64_t v12 = HIDWORD(v8);
  unint64_t v13 = getXYZColor(v1, 0x6258595Au);
  if (v4 || v7 || v6)
  {
    double v17 = (double)(v6 + v4 + (int)v7);
    double v16 = (double)v4 / v17;
    double v15 = (double)(int)v7 / v17;
  }
  else
  {
    double v15 = -100.0;
    double v16 = -100.0;
  }
  if (v9 || v12 || v11)
  {
    double v20 = (double)(v11 + v9 + (int)v12);
    double v19 = (double)v9 / v20;
    double v18 = (double)(int)v12 / v20;
    if (v13)
    {
LABEL_20:
      int v23 = v14 + v13 + HIDWORD(v13);
      double v21 = (double)(int)v13 / (double)v23;
      double v22 = (double)SHIDWORD(v13) / (double)v23;
      goto LABEL_21;
    }
  }
  else
  {
    double v18 = -100.0;
    double v19 = -100.0;
    if (v13) {
      goto LABEL_20;
    }
  }
  if (HIDWORD(v13) || v14) {
    goto LABEL_20;
  }
  double v21 = -100.0;
  double v22 = -100.0;
LABEL_21:
  LOBYTE(a1) = 0;
  if (v16 != -100.0 && v15 != -100.0 && v19 != -100.0 && v18 != -100.0 && v21 != -100.0 && v22 != -100.0)
  {
    double v24 = sqrt((v15 - v18) * (v15 - v18) + (v16 - v19) * (v16 - v19));
    double v25 = sqrt((v16 - v21) * (v16 - v21) + (v15 - v22) * (v15 - v22));
    double v26 = sqrt((v19 - v21) * (v19 - v21) + (v18 - v22) * (v18 - v22));
    LOBYTE(a1) = sqrt(((v26 + v24 + v25) * 0.5 - v26)* (((v26 + v24 + v25) * 0.5 - v25)* ((v26 + v24 + v25)* 0.5* ((v26 + v24 + v25) * 0.5 - v24)))) > 0.13447;
  }
  return (char)a1;
}

unint64_t getXYZColor(const void *a1, unsigned int a2)
{
  CFStringRef SignatureFromFourCharCode = (__CFString *)ColorSyncCreateSignatureFromFourCharCode(a2);
  unint64_t XYZColor = ColorSyncProfileGetXYZColor(a1, SignatureFromFourCharCode);
  CFRelease(SignatureFromFourCharCode);
  return XYZColor;
}

unint64_t ColorSyncProfileGetXYZColor(const void *a1, void *a2)
{
  if (a1)
  {
    CFTypeID v4 = CFGetTypeID(a1);
    if (ColorSyncProfileGetTypeID_predicate != -1) {
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
    }
    if (a2)
    {
      unint64_t v5 = 0;
      uint64_t v6 = 0;
      if (v4 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
      {
        CFDataRef Tag = (const __CFData *)getTag((uint64_t)a1, a2);
        if (!Tag)
        {
          if (CFEqual(a2, @"rXYZ") || CFEqual(a2, @"bXYZ") || CFEqual(a2, @"gXYZ"))
          {
            CFDataRef v12 = 0;
            CFDataRef v13 = 0;
            CFDataRef v11 = 0;
            int primaries_data_from_cicp = get_primaries_data_from_cicp((uint64_t)a1, &v13, &v12, (uint64_t *)&v11);
            CFDataRef Tag = 0;
            if (primaries_data_from_cicp)
            {
              if (CFEqual(a2, @"rXYZ") == 1)
              {
                CFDataRef Tag = v13;
              }
              else if (CFEqual(a2, @"gXYZ") == 1)
              {
                CFDataRef Tag = v12;
              }
              else if (CFEqual(a2, @"bXYZ") == 1)
              {
                CFDataRef Tag = v11;
              }
              else
              {
                CFDataRef Tag = 0;
              }
            }
          }
          else
          {
            CFDataRef Tag = 0;
          }
        }
        int v9 = verified_icXYZType_data_ptr(Tag);
        if (v9 && *(_DWORD *)v9 == 542792024)
        {
          uint64_t v6 = bswap32(*((_DWORD *)v9 + 2));
          unint64_t v5 = (unint64_t)bswap32(*((_DWORD *)v9 + 3)) << 32;
        }
        else
        {
          unint64_t v5 = 0;
          uint64_t v6 = 0;
        }
      }
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v6 = 0;
    }
  }
  else
  {
    unint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  return v5 | v6;
}

const UInt8 *verified_icXYZType_data_ptr(const __CFData *a1)
{
  if (!a1 || (unint64_t)CFDataGetLength(a1) < 0x14) {
    return 0;
  }

  return CFDataGetBytePtr(a1);
}

uint64_t get_primaries_data_from_cicp(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  int v10 = 0;
  int v7 = ColorSyncProfileContainsSupportedCICP(a1, &v10);
  uint64_t result = 0;
  if (v7)
  {
    uint64_t result = 0;
    switch((char)v10)
    {
      case 1:
        if (get_BT709RedPrimaryData_predicate != -1) {
          dispatch_once(&get_BT709RedPrimaryData_predicate, &__block_literal_global_493);
        }
        *a2 = get_BT709RedPrimaryData_data;
        if (get_BT709GreenPrimaryData_predicate != -1) {
          dispatch_once(&get_BT709GreenPrimaryData_predicate, &__block_literal_global_496);
        }
        *a3 = get_BT709GreenPrimaryData_data;
        if (get_BT709BluPrimaryData_predicate != -1) {
          dispatch_once(&get_BT709BluPrimaryData_predicate, &__block_literal_global_499);
        }
        int v9 = &get_BT709BluPrimaryData_data;
        goto LABEL_38;
      case 5:
        if (get_BT601RedPrimaryData_predicate != -1) {
          dispatch_once(&get_BT601RedPrimaryData_predicate, &__block_literal_global_502);
        }
        *a2 = get_BT601RedPrimaryData_data;
        if (get_BT601GreenPrimaryData_predicate != -1) {
          dispatch_once(&get_BT601GreenPrimaryData_predicate, &__block_literal_global_505);
        }
        *a3 = get_BT601GreenPrimaryData_data;
        if (get_BT601BluePrimaryData_predicate != -1) {
          dispatch_once(&get_BT601BluePrimaryData_predicate, &__block_literal_global_508);
        }
        int v9 = &get_BT601BluePrimaryData_data;
        goto LABEL_38;
      case 9:
        if (get_BT2020RedPrimaryData_predicate != -1) {
          dispatch_once(&get_BT2020RedPrimaryData_predicate, &__block_literal_global_511);
        }
        *a2 = get_BT2020RedPrimaryData_data;
        if (get_BT2020GreenPrimaryData_predicate != -1) {
          dispatch_once(&get_BT2020GreenPrimaryData_predicate, &__block_literal_global_514);
        }
        *a3 = get_BT2020GreenPrimaryData_data;
        if (get_BT2020BluePrimaryData_predicate != -1) {
          dispatch_once(&get_BT2020BluePrimaryData_predicate, &__block_literal_global_517);
        }
        int v9 = &get_BT2020BluePrimaryData_data;
        goto LABEL_38;
      case 11:
        if (get_DCIP3RedPrimaryData_predicate != -1) {
          dispatch_once(&get_DCIP3RedPrimaryData_predicate, &__block_literal_global_520);
        }
        *a2 = get_DCIP3RedPrimaryData_data;
        if (get_DCIP3GreenPrimaryData_predicate != -1) {
          dispatch_once(&get_DCIP3GreenPrimaryData_predicate, &__block_literal_global_523);
        }
        *a3 = get_DCIP3GreenPrimaryData_data;
        if (get_DCIP3BluePrimaryData_predicate != -1) {
          dispatch_once(&get_DCIP3BluePrimaryData_predicate, &__block_literal_global_526);
        }
        int v9 = &get_DCIP3BluePrimaryData_data;
        goto LABEL_38;
      case 12:
        if (get_DisplayP3RedPrimaryData_predicate != -1) {
          dispatch_once(&get_DisplayP3RedPrimaryData_predicate, &__block_literal_global_529);
        }
        *a2 = get_DisplayP3RedPrimaryData_data;
        if (get_DisplayP3GreenPrimaryData_predicate != -1) {
          dispatch_once(&get_DisplayP3GreenPrimaryData_predicate, &__block_literal_global_532);
        }
        *a3 = get_DisplayP3GreenPrimaryData_data;
        if (get_DisplayP3BluePrimaryData_predicate != -1) {
          dispatch_once(&get_DisplayP3BluePrimaryData_predicate, &__block_literal_global_535);
        }
        int v9 = &get_DisplayP3BluePrimaryData_data;
LABEL_38:
        *a4 = *v9;
        uint64_t result = 1;
        break;
      default:
        return result;
    }
  }
  return result;
}

void CMMProfileInfoContainer::CMMProfileInfoContainer(CMMProfileInfoContainer *this, CFArrayRef theArray, const __CFDictionary *a3, CMMMemMgr *a4)
{
  CFIndex Count = CFArrayGetCount(theArray);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = &unk_1ED9812E0;
  *((void *)this + 5) = a4;
  uint64_t v70 = a4;
  *(void *)this = &unk_1ED985498;
  *((void *)this + 6) = 0;
  std::vector<CMMProfileInfo,TAllocator<CMMProfileInfo>>::resize((uint64_t)this + 8, Count);
  *(void *)this = &unk_1ED984FD8;
  CFArrayRef theArraya = theArray;
  CFIndex v9 = CFArrayGetCount(theArray);
  uint64_t v79 = 0;
  uint64_t v80 = -1;
  memset(v81, 0, 15);
  if (v9)
  {
    CFIndex v10 = 0;
    uint64_t v11 = 0;
    CFIndex v68 = v9 - 1;
    CFTypeRef cf2 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
    CFDictionaryRef v69 = a3;
    CFIndex v67 = v9;
    while (1)
    {
      uint64_t v74 = v11;
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArraya, v10);
      long long v78 = 0u;
      CFArrayRef Value = (CMMProfileMaker *)CFDictionaryGetValue(ValueAtIndex, kColorSyncProfile);
      int v14 = CFDictionaryGetValue(ValueAtIndex, kColorSyncRenderingIntent);
      CFArrayRef v73 = CFDictionaryGetValue(ValueAtIndex, kColorSyncTransformTag);
      int v15 = CFDictionaryContainsKey(ValueAtIndex, kColorSyncBlackPointCompensation);
      if (v15)
      {
        double v16 = CFDictionaryGetValue(ValueAtIndex, kColorSyncBlackPointCompensation);
        int v17 = CFEqual(v16, cf2) != 0;
      }
      else
      {
        int v17 = 0;
      }
      if (CFDictionaryContainsKey(ValueAtIndex, kColorSyncExtendedRange))
      {
        double v18 = CFDictionaryGetValue(ValueAtIndex, kColorSyncExtendedRange);
        BOOL v19 = CFEqual(v18, cf2) != 0;
      }
      else
      {
        BOOL v19 = 1;
      }
      BOOL v72 = v19;
      BYTE3(v78) = 0;
      if (CFDictionaryContainsKey(ValueAtIndex, kColorSyncHDRDerivative) == 1)
      {
        double v20 = CFDictionaryGetValue(ValueAtIndex, kColorSyncHDRDerivative);
        BYTE3(v78) = CFEqual(v20, kColorSyncHLGDerivative) != 0;
      }
      BYTE4(v78) = 0;
      if (CFDictionaryContainsKey(ValueAtIndex, kColorSyncHDRDerivative) == 1)
      {
        double v21 = CFDictionaryGetValue(ValueAtIndex, kColorSyncHDRDerivative);
        BYTE4(v78) = CFEqual(v21, kColorSyncPQDerivative) != 0;
      }
      Profile = CMMProfileMaker::MakeProfile(Value, v70, (CMMMemMgr *)((BYTE3(v78) | BYTE4(v78)) != 0));
      uint64_t v76 = (uint64_t)Profile;
      if (CMMProfileMaker::IsMatrixBased((const ColorSyncProfile *)Profile[2], *((_DWORD *)Profile + 12), *((_DWORD *)Profile + 13)))char IsMatrixHDRProfile = 1; {
      else
      }
        char IsMatrixHDRProfile = CMMProfileMaker::IsMatrixHDRProfile((const ColorSyncProfile *)Profile[2], *((_DWORD *)Profile + 12), *((_DWORD *)Profile + 13), 0);
      LOBYTE(v78) = IsMatrixHDRProfile;
      double v24 = (const ColorSyncProfile *)Profile[2];
      CFStringRef SignatureFromFourCharCode = ColorSyncCreateSignatureFromFourCharCode(0x6B545243u);
      LODWORD(v24) = ColorSyncProfileContainsTag(v24, SignatureFromFourCharCode);
      CFRelease(SignatureFromFourCharCode);
      BOOL v26 = v24 && *(_DWORD *)(v76 + 48) == 1196573017;
      BYTE1(v78) = v26;
      BYTE2(v78) = CMMProfileMaker::IsMatrixHDRProfile(*(const ColorSyncProfile **)(v76 + 16), *(_DWORD *)(v76 + 48), *(_DWORD *)(v76 + 52), (BYTE3(v78) | BYTE4(v78)) != 0);
      BYTE10(v78) = v72;
      if (!v15) {
        int v17 = (*(unsigned __int8 *)(v76 + 76) >> 2) & 1;
      }
      BYTE9(v78) = v17;
      if (v69 && !v17 && CFDictionaryContainsKey(v69, kColorSyncBlackPointCompensation))
      {
        CFNumberRef v27 = CFDictionaryGetValue(v69, kColorSyncBlackPointCompensation);
        BYTE9(v78) = CFEqual(v27, cf2) != 0;
      }
      if (CFEqual(v14, kColorSyncRenderingIntentUseProfileHeader))
      {
        unsigned int v28 = *(_DWORD *)(v76 + 96);
        if (v28 >= 4) {
          unsigned int v28 = 0;
        }
      }
      else if (CFEqual(v14, kColorSyncRenderingIntentPerceptual))
      {
        unsigned int v28 = 0;
      }
      else if (CFEqual(v14, kColorSyncRenderingIntentRelative))
      {
        unsigned int v28 = 1;
      }
      else if (CFEqual(v14, kColorSyncRenderingIntentSaturation))
      {
        unsigned int v28 = 2;
      }
      else
      {
        unsigned int v28 = CFEqual(v14, kColorSyncRenderingIntentAbsolute) ? 3 : 0;
      }
      HIDWORD(v77) = v28;
      LODWORD(v77) = (*(uint64_t (**)(uint64_t, const void *, BOOL, BOOL))(*(void *)v76 + 64))(v76, v73, v10 == 0, v10 == v68);
      *(_WORD *)((char *)&v78 + 5) = 0;
      *(_DWORD *)((char *)&v78 + 11) = 0;
      CICPInfo = ColorSyncProfileGetCICPInfo((const UInt8 *)Value);
      if (CICPInfo) {
        break;
      }
      CFDataRef Tag = CMMProfile::GetTag(v76, 1751405638);
      if (!Tag)
      {
        BYTE7(v78) = ColorSyncProfileUsesITU_R709OETF(*(void *)(v76 + 16));
        unsigned int v56 = ColorSyncProfileUsesCoreVideoGamma(*(void *)(v76 + 16));
        BYTE8(v78) = v56;
        uint64_t v31 = v74;
        if (!v56) {
          goto LABEL_41;
        }
        if (get_useITUBT1886ForDegamma(__CFDictionary const*)::predicate[0] != -1) {
          dispatch_once(get_useITUBT1886ForDegamma(__CFDictionary const*)::predicate, &__block_literal_global_955);
        }
        char v57 = get_useITUBT1886ForDegamma(__CFDictionary const*)::enable_from_prefs;
        get_useITUBT1886ForDegamma(__CFDictionary const*)::enabled = get_useITUBT1886ForDegamma(__CFDictionary const*)::enable_from_prefs;
        if (v69)
        {
          if (CFDictionaryContainsKey(v69, (const void *)kColorSyncUseBT1886ForCoreVideoGamma) == 1)
          {
            char v57 = CFDictionaryGetValue(v69, (const void *)kColorSyncUseBT1886ForCoreVideoGamma) == cf2;
            get_useITUBT1886ForDegamma(__CFDictionary const*)::enabled = v57;
          }
          else
          {
            char v57 = get_useITUBT1886ForDegamma(__CFDictionary const*)::enabled;
          }
        }
        BYTE11(v78) = v57;
        if (get_useITUBT1886ForEngamma(__CFDictionary const*)::predicate != -1) {
          dispatch_once(&get_useITUBT1886ForEngamma(__CFDictionary const*)::predicate, &__block_literal_global_959);
        }
        char v66 = get_useITUBT1886ForEngamma(__CFDictionary const*)::enable_from_prefs;
        get_useITUBT1886ForEngamma(__CFDictionary const*)::enabled = get_useITUBT1886ForEngamma(__CFDictionary const*)::enable_from_prefs;
        if (v69)
        {
          if (CFDictionaryContainsKey(v69, (const void *)kColorSyncUseBT1886ForCoreVideoGamma) == 1)
          {
            char v66 = CFDictionaryGetValue(v69, (const void *)kColorSyncUseBT1886ForCoreVideoGamma) == cf2;
            get_useITUBT1886ForEngamma(__CFDictionary const*)::enabled = v66;
          }
          else
          {
            char v66 = get_useITUBT1886ForEngamma(__CFDictionary const*)::enabled;
          }
        }
        BYTE12(v78) = v66;
        goto LABEL_40;
      }
      unsigned int v34 = bswap32(*(_DWORD *)(*((void *)Tag + 5) + 8));
      uint64_t v31 = v74;
      if (v34 == 1212958496)
      {
        BYTE6(v78) = 1;
      }
      else if (v34 == 1347493920)
      {
        BYTE5(v78) = 1;
      }
LABEL_41:
      if (!BYTE7(v78) || ColorSyncOptionsLegacyHDREcosystemRequested(v69)) {
        goto LABEL_53;
      }
      BOOL v32 = current_or_newer_sdk();
      if (!v69 || !CFDictionaryContainsKey(v69, (const void *)kColorSyncTransformUseITU709OETF))
      {
        if (!v32) {
          goto LABEL_53;
        }
LABEL_52:
        *(_WORD *)((char *)&v78 + 11) = 257;
        goto LABEL_53;
      }
      if (CFDictionaryGetValue(v69, (const void *)kColorSyncTransformUseITU709OETF) != cf2) {
        goto LABEL_52;
      }
LABEL_53:
      if (v31) {
        BOOL v35 = BYTE2(v81[1]) == 0;
      }
      else {
        BOOL v35 = 1;
      }
      int v36 = v35;
      if (v10)
      {
        if (BYTE5(v81[0])) {
          unsigned __int8 v37 = 1;
        }
        else {
          unsigned __int8 v37 = BYTE6(v81[0]);
        }
        int v38 = v37;
        if (v69)
        {
LABEL_64:
          CFTypeRef v39 = CFDictionaryGetValue(v69, @"com.apple.cmm.SkipToneMappingForBT2100");
          CFTypeRef v40 = CFDictionaryGetValue(v69, @"com.apple.cmm.ApplyToneMappingForBT2100");
          BOOL v41 = v39 == cf2;
          BOOL v42 = v40 == cf2;
          goto LABEL_67;
        }
      }
      else
      {
        int v38 = 0;
        if (v69) {
          goto LABEL_64;
        }
      }
      BOOL v41 = 0;
      BOOL v42 = 0;
LABEL_67:
      if (v72) {
        int v43 = v36;
      }
      else {
        int v43 = 1;
      }
      if (!v10 || !BYTE2(v78) || !(v43 | v42) || v41 || v38)
      {
        if (BYTE2(v78)) {
          BOOL v46 = 1;
        }
        else {
          BOOL v46 = v10 == 0;
        }
        if (v46 || v72 || BYTE2(v81[0]) == 0) {
          BOOL v41 = 1;
        }
        if (!v41)
        {
          uint64_t v49 = *(void *)(v76 + 16);
          int v50 = ColorSyncProfileUsesITU_R709OETF(v49);
          unsigned int v51 = ColorSyncProfileUsesCoreVideoGamma(v49);
          if (BYTE6(v81[0]))
          {
            unsigned int v52 = v51;
            if (disable_ITUBT1886Inv_on_HLG_to_SDR(void)::predicate != -1) {
              dispatch_once(&disable_ITUBT1886Inv_on_HLG_to_SDR(void)::predicate, &__block_literal_global_966);
            }
            if (disable_ITUBT1886Inv_on_HLG_to_SDR(void)::disabled && v50 | v52) {
              BYTE12(v78) = 0;
            }
          }
        }
        goto LABEL_120;
      }
      int v44 = ColorSyncProfileUsesITU_R709OETF(v31);
      if (v36)
      {
        BOOL v45 = BYTE6(v78) != 0;
        if (!v69) {
          goto LABEL_100;
        }
      }
      else
      {
        BOOL v45 = 0;
        if (!v69) {
          goto LABEL_100;
        }
      }
      if (CFDictionaryContainsKey(v69, @"com.apple.cmm.HLGSurroundLuminance") == 1 && BYTE6(v78))
      {
LABEL_101:
        BOOL v53 = ColorSyncOptionsLegacyHDREcosystemRequested(v69);
        if (!v45) {
          goto LABEL_113;
        }
        goto LABEL_102;
      }
LABEL_100:
      if (ColorSyncOptionsGetHDRMediaReferenceWhite(v69) == 203.0) {
        goto LABEL_101;
      }
      BOOL v53 = 1;
      if (!v45)
      {
LABEL_113:
        BOOL v53 = 0;
        char v54 = 0;
        goto LABEL_114;
      }
LABEL_102:
      if (display_referred_mapping_on_SDR_to_HLG(void)::predicate != -1) {
        dispatch_once(&display_referred_mapping_on_SDR_to_HLG(void)::predicate, &__block_literal_global_962);
      }
      char v54 = display_referred_mapping_on_SDR_to_HLG(void)::enabled;
      if (display_referred_mapping_on_SDR_to_HLG(void)::enabled)
      {
        BOOL v53 = 0;
        char v55 = 0;
        char v54 = 1;
        goto LABEL_115;
      }
LABEL_114:
      char v55 = 1;
LABEL_115:
      BYTE13(v78) = v53;
      BYTE14(v78) = v54;
      if (v36)
      {
        if (v44) {
          BYTE3(v81[1]) = v55;
        }
        unint64_t v58 = *((void *)this + 6) - 1;
        uint64_t v59 = *((void *)this + 1);
        if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 2) - v59) >> 3) <= v58) {
          std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v60 = v59 + 40 * v58;
        *(void *)(v60 + 8) = v79;
        *(void *)(v60 + 16) = v80;
        *(void *)(v60 + 24) = v81[0];
        *(_DWORD *)(v60 + 32) = v81[1];
        *(unsigned char *)(v60 + 36) = BYTE4(v81[1]);
        *(unsigned char *)(v60 + 37) = v53;
        *(unsigned char *)(v60 + 38) = v54;
      }
LABEL_120:
      unint64_t v61 = *((void *)this + 6);
      uint64_t v62 = *((void *)this + 1);
      unint64_t v63 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 2) - v62) >> 3);
      if (v61 >= v63)
      {
        CFIndex v64 = v67;
        do
        {
          std::vector<CMMProfileInfo,TAllocator<CMMProfileInfo>>::resize((uint64_t)this + 8, v63 + 10);
          unint64_t v61 = *((void *)this + 6);
          uint64_t v62 = *((void *)this + 1);
          unint64_t v63 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 2) - v62) >> 3);
        }
        while (v61 >= v63);
      }
      else
      {
        CFIndex v64 = v67;
      }
      *((void *)this + 6) = v61 + 1;
      uint64_t v65 = v62 + 40 * v61;
      *(void *)(v65 + 8) = v76;
      *(void *)(v65 + 16) = v77;
      *(void *)(v65 + 24) = v78;
      *(_DWORD *)(v65 + 32) = DWORD2(v78);
      *(_WORD *)(v65 + 36) = WORD6(v78);
      *(unsigned char *)(v65 + 38) = BYTE14(v78);
      if (BYTE2(v78)) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = *(void *)(v76 + 16);
      }
      uint64_t v79 = v76;
      uint64_t v80 = v77;
      LOWORD(v81[0]) = v78;
      BYTE2(v81[0]) = BYTE2(v78);
      *(void *)((char *)v81 + 3) = *(void *)((char *)&v78 + 3);
      *(_WORD *)((char *)&v81[1] + 3) = *(_WORD *)((char *)&v78 + 11);
      if (++v10 == v64) {
        goto LABEL_138;
      }
    }
    uint64_t v30 = CICPInfo[1];
    BYTE7(v78) = (v30 < 0x10) & (0xC042u >> v30);
    BYTE5(v78) = v30 == 16;
    BYTE6(v78) = v30 == 18;
LABEL_40:
    uint64_t v31 = v74;
    goto LABEL_41;
  }
LABEL_138:
  std::vector<CMMProfileInfo,TAllocator<CMMProfileInfo>>::resize((uint64_t)this + 8, *((void *)this + 6));
}

void sub_18BE164C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  std::vector<CMMProfileInfo,TAllocator<CMMProfileInfo>>::__destroy_vector::operator()[abi:ne180100]((pthread_mutex_t ****)va);
  _Unwind_Resume(a1);
}

uint64_t CMMProfileMaker::IsMatrixHDRProfile(const ColorSyncProfile *a1, int a2, int a3, int a4)
{
  if (a3 != 1482250784 || a2 != 1380401696) {
    return 0;
  }
  CFStringRef SignatureFromFourCharCode = ColorSyncCreateSignatureFromFourCharCode(0x63696370u);
  BOOL v8 = ColorSyncProfileContainsTag(a1, SignatureFromFourCharCode);
  CFRelease(SignatureFromFourCharCode);
  if (!v8)
  {
    CFStringRef v17 = ColorSyncCreateSignatureFromFourCharCode(0x68645446u);
    BOOL v18 = ColorSyncProfileContainsTag(a1, v17);
    CFRelease(v17);
    if (v18)
    {
      CFStringRef v19 = ColorSyncCreateSignatureFromFourCharCode(0x7258595Au);
      BOOL v20 = ColorSyncProfileContainsTag(a1, v19);
      CFRelease(v19);
      if (v20)
      {
        CFStringRef v21 = ColorSyncCreateSignatureFromFourCharCode(0x6758595Au);
        BOOL v22 = ColorSyncProfileContainsTag(a1, v21);
        CFRelease(v21);
        if (v22)
        {
          CFStringRef v23 = ColorSyncCreateSignatureFromFourCharCode(0x6258595Au);
          BOOL v24 = ColorSyncProfileContainsTag(a1, v23);
          CFRelease(v23);
          if (v24)
          {
            CFDataRef Tag = (const __CFData *)ColorSyncProfileGetTag((uint64_t)a1, @"hdTF");
            if (Tag)
            {
              CFDataRef v26 = Tag;
              BytePtr = CFDataGetBytePtr(Tag);
              unint64_t Length = CFDataGetLength(v26);
              if (BytePtr)
              {
                if (Length >= 0xC && *(_DWORD *)BytePtr == 543648115)
                {
                  unsigned int v29 = bswap32(*((_DWORD *)BytePtr + 2));
                  uint64_t result = 1;
                  if (v29 == 1212958496 || v29 == 1347493920) {
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_27:
    CFStringRef v30 = ColorSyncCreateSignatureFromFourCharCode(0x61617267u);
    BOOL v31 = ColorSyncProfileContainsTag(a1, v30);
    CFRelease(v30);
    if (!v31) {
      goto LABEL_59;
    }
    CFStringRef v32 = ColorSyncCreateSignatureFromFourCharCode(0x61616767u);
    BOOL v33 = ColorSyncProfileContainsTag(a1, v32);
    CFRelease(v32);
    if (!v33) {
      goto LABEL_59;
    }
    CFStringRef v34 = ColorSyncCreateSignatureFromFourCharCode(0x61616267u);
    BOOL v35 = ColorSyncProfileContainsTag(a1, v34);
    CFRelease(v34);
    if (!v35) {
      goto LABEL_59;
    }
    CFStringRef v36 = ColorSyncCreateSignatureFromFourCharCode(0x61615263u);
    BOOL v37 = ColorSyncProfileContainsTag(a1, v36);
    CFRelease(v36);
    if (v37
      && (CFStringRef v38 = ColorSyncCreateSignatureFromFourCharCode(0x61614763u),
          BOOL v39 = ColorSyncProfileContainsTag(a1, v38),
          CFRelease(v38),
          v39)
      && CMMProfileMaker::TagExists(a1, (const ColorSyncProfile *)0x61614263))
    {
      if ((a4 & 1) == 0)
      {
        unint64_t v40 = 0;
        while (1)
        {
          uint64_t result = (uint64_t)ColorSyncProfileGetTag((uint64_t)a1, off_1E54D6CA8[v40]);
          if (!result) {
            break;
          }
          CFDataRef v41 = (const __CFData *)result;
          BOOL v42 = CFDataGetBytePtr((CFDataRef)result);
          unint64_t v43 = CFDataGetLength(v41);
          if (v42) {
            BOOL v44 = v43 >= 0xC;
          }
          else {
            BOOL v44 = 0;
          }
          if (!v44) {
            return 0;
          }
          uint64_t result = *(_DWORD *)v42 == 538988880 || *(_DWORD *)v42 == 541543496;
          if (result != 1 || v40++ >= 2) {
            return result;
          }
        }
        return result;
      }
    }
    else
    {
LABEL_59:
      if (!a4) {
        return 0;
      }
      CFStringRef v47 = ColorSyncCreateSignatureFromFourCharCode(0x72545243u);
      BOOL v48 = ColorSyncProfileContainsTag(a1, v47);
      CFRelease(v47);
      if (!v48) {
        return 0;
      }
      CFStringRef v49 = ColorSyncCreateSignatureFromFourCharCode(0x67545243u);
      BOOL v50 = ColorSyncProfileContainsTag(a1, v49);
      CFRelease(v49);
      if (!v50) {
        return 0;
      }
      CFStringRef v51 = ColorSyncCreateSignatureFromFourCharCode(0x62545243u);
      BOOL v52 = ColorSyncProfileContainsTag(a1, v51);
      CFRelease(v51);
      if (!v52) {
        return 0;
      }
      CFStringRef v53 = ColorSyncCreateSignatureFromFourCharCode(0x7258595Au);
      BOOL v54 = ColorSyncProfileContainsTag(a1, v53);
      CFRelease(v53);
      if (!v54
        || !CMMProfileMaker::TagExists(a1, (const ColorSyncProfile *)0x6758595A)
        || !CMMProfileMaker::TagExists(a1, (const ColorSyncProfile *)0x6258595A))
      {
        return 0;
      }
    }
    return 1;
  }
  CFDataRef v9 = (const __CFData *)ColorSyncProfileGetTag((uint64_t)a1, @"cicp");
  if (!v9) {
    goto LABEL_27;
  }
  CFDataRef v10 = v9;
  uint64_t v11 = CFDataGetBytePtr(v9);
  unint64_t v12 = CFDataGetLength(v10);
  uint64_t result = 0;
  if (v11 && v12 >= 0xC)
  {
    if (*(_DWORD *)v11 != 1885563235) {
      return 0;
    }
    int v14 = v11[9];
    unsigned int v15 = v14 & 0xFFFFFFFD;
    char v16 = v14 == 8 ? a4 : 0;
    uint64_t result = 1;
    if (v15 != 16 && (v16 & 1) == 0) {
      return 0;
    }
  }
  return result;
}

const UInt8 *ColorSyncProfileGetCICPInfo(const UInt8 *result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    CFTypeID v2 = CFGetTypeID(result);
    if (ColorSyncProfileGetTypeID_predicate != -1) {
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
    }
    if (v2 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    {
      uint64_t result = *(const UInt8 **)(v1 + 240);
      if (!result)
      {
        int v3 = ColorSyncProfileContainsSupportedCICP(v1, 0);
        uint64_t result = 0;
        if (v3)
        {
          CFDataRef Tag = (const __CFData *)ColorSyncProfileGetTag(v1, @"cicp");
          BytePtr = CFDataGetBytePtr(Tag);
          if (BytePtr) {
            return BytePtr + 8;
          }
          else {
            return 0;
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMMProfileMaker::IsMatrixBased(const ColorSyncProfile *a1, int a2, int a3)
{
  if (a3 != 1482250784) {
    return 0;
  }
  if (a2 > 1282766367)
  {
    if (a2 <= 1482250783)
    {
      if (a2 == 1282766368) {
        goto LABEL_16;
      }
      int v4 = 1380401696;
    }
    else
    {
      if (a2 == 1482250784 || a2 == 1501067552) {
        goto LABEL_16;
      }
      int v4 = 1497588338;
    }
LABEL_15:
    if (a2 != v4) {
      return 0;
    }
    goto LABEL_16;
  }
  if (a2 <= 1212961567)
  {
    if (a2 == 860048466) {
      goto LABEL_16;
    }
    int v4 = 1129142560;
    goto LABEL_15;
  }
  if (a2 != 1212961568 && a2 != 1213421088)
  {
    int v4 = 1281450528;
    goto LABEL_15;
  }
LABEL_16:
  if (ColorSyncProfileContainsSupportedCICP((uint64_t)a1, 0)) {
    return 1;
  }
  CFStringRef SignatureFromFourCharCode = ColorSyncCreateSignatureFromFourCharCode(0x72545243u);
  BOOL v7 = ColorSyncProfileContainsTag(a1, SignatureFromFourCharCode);
  CFRelease(SignatureFromFourCharCode);
  if (v7)
  {
    CFStringRef v8 = ColorSyncCreateSignatureFromFourCharCode(0x67545243u);
    BOOL v9 = ColorSyncProfileContainsTag(a1, v8);
    CFRelease(v8);
    if (v9)
    {
      CFStringRef v10 = ColorSyncCreateSignatureFromFourCharCode(0x62545243u);
      BOOL v11 = ColorSyncProfileContainsTag(a1, v10);
      CFRelease(v10);
      if (v11)
      {
        CFStringRef v12 = ColorSyncCreateSignatureFromFourCharCode(0x7258595Au);
        BOOL v13 = ColorSyncProfileContainsTag(a1, v12);
        CFRelease(v12);
        if (v13
          && CMMProfileMaker::TagExists(a1, (const ColorSyncProfile *)0x6758595A)
          && CMMProfileMaker::TagExists(a1, (const ColorSyncProfile *)0x6258595A))
        {
          return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t ColorSyncProfileContainsSupportedCICP(uint64_t result, _DWORD *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    CFTypeID v4 = CFGetTypeID((CFTypeRef)result);
    if (ColorSyncProfileGetTypeID_predicate != -1) {
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
    }
    if (v4 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    {
      CFDataRef Tag = (const UInt8 *)ColorSyncProfileGetTag(v3, @"cicp");
      uint64_t result = (uint64_t)valid_cicp_tag(Tag, 0);
      if (a2)
      {
        if (result)
        {
          *a2 = *((_DWORD *)CFDataGetBytePtr((CFDataRef)Tag) + 2);
          return 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const UInt8 *valid_cicp_tag(const UInt8 *result, unsigned char *a2)
{
  if (result)
  {
    CFDataRef v3 = (const __CFData *)result;
    CFTypeID v4 = CFGetTypeID(result);
    if (v4 != CFDataGetTypeID() || CFDataGetLength(v3) < 1 || (unint64_t)CFDataGetLength(v3) < 0xC) {
      return 0;
    }
    uint64_t result = CFDataGetBytePtr(v3);
    if (!result) {
      return result;
    }
    if (*(_DWORD *)result == 1885563235
      && ((int v5 = *((_DWORD *)result + 2), v5 == 12) || (v5 & 0xFB) == 1 || (v5 & 0xFD) == 9))
    {
      uint64_t result = 0;
      if (BYTE1(v5) <= 0x12u && ((1 << SBYTE1(v5)) & 0x5E142) != 0)
      {
        if (a2) {
          *a2 = BYTE1(v5);
        }
        return (const UInt8 *)1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL CMMProfileMaker::TagExists(CMMProfileMaker *this, const ColorSyncProfile *a2)
{
  CFStringRef SignatureFromFourCharCode = ColorSyncCreateSignatureFromFourCharCode(a2);
  BOOL v4 = ColorSyncProfileContainsTag(this, SignatureFromFourCharCode);
  CFRelease(SignatureFromFourCharCode);
  return v4;
}

void *CMMProfileMaker::MakeProfile(CMMProfileMaker *this, const ColorSyncProfile *a2, CMMMemMgr *a3)
{
  int v3 = (int)a3;
  CFDataRef v6 = ColorSyncProfileCopyHeader(this);
  if (!v6)
  {
    exception = __cxa_allocate_exception(4uLL);
    int v49 = -171;
LABEL_62:
    _DWORD *exception = v49;
  }
  CFDataRef v7 = v6;
  BytePtr = CFDataGetBytePtr(v6);
  int v10 = *((_DWORD *)BytePtr + 3);
  int v9 = *((_DWORD *)BytePtr + 4);
  int v11 = *((_DWORD *)BytePtr + 5);
  CFRelease(v7);
  if (v10 <= 1852662635)
  {
    if (v10 == 1633842036)
    {
      CFStringRef SignatureFromFourCharCode = ColorSyncCreateSignatureFromFourCharCode(0x41324230u);
      BOOL v24 = ColorSyncProfileContainsTag(this, SignatureFromFourCharCode);
      CFRelease(SignatureFromFourCharCode);
      if (v24)
      {
        int v14 = CMMBase::NewInternal(0xB8uLL, (void **)a2);
        uint64_t v15 = CMMProfile::CMMProfile((uint64_t)v14, this, (uint64_t)a2);
        char v16 = &unk_1ED983278;
        goto LABEL_45;
      }
    }
    else
    {
      if (v10 != 1818848875)
      {
        if (v10 == 1835955314)
        {
          if (v9 == 1196573017)
          {
            CFStringRef v17 = ColorSyncCreateSignatureFromFourCharCode(0x6B545243u);
            BOOL v18 = ColorSyncProfileContainsTag(this, v17);
            CFRelease(v17);
            if (v18)
            {
              int v14 = CMMBase::NewInternal(0xB8uLL, (void **)a2);
              uint64_t v15 = CMMProfile::CMMProfile((uint64_t)v14, this, (uint64_t)a2);
              char v16 = &unk_1ED984C40;
              goto LABEL_45;
            }
          }
          else
          {
            if (CMMProfileMaker::IsMatrixHDRProfile(this, v9, v11, v3))
            {
              int v14 = CMMBase::NewInternal(0x108uLL, (void **)a2);
              uint64_t v15 = CMMProfile::CMMProfile((uint64_t)v14, this, (uint64_t)a2);
              *(_OWORD *)(v15 + 216) = 0u;
              *(_OWORD *)(v15 + 200) = 0u;
              *(_OWORD *)(v15 + 184) = 0u;
              char v16 = &unk_1ED9851B0;
              goto LABEL_45;
            }
            CFStringRef v41 = ColorSyncCreateSignatureFromFourCharCode(0x41324230u);
            BOOL v42 = ColorSyncProfileContainsTag(this, v41);
            CFRelease(v41);
            if (v42 && CMMProfileMaker::TagExists(this, (const ColorSyncProfile *)0x42324130))
            {
              int v14 = CMMBase::NewInternal(0xB8uLL, (void **)a2);
              uint64_t v15 = CMMProfile::CMMProfile((uint64_t)v14, this, (uint64_t)a2);
              char v16 = &unk_1ED9839C0;
              goto LABEL_45;
            }
            if (CMMProfileMaker::IsMatrixBased(this, v9, v11))
            {
              int v14 = CMMBase::NewInternal(0xE8uLL, (void **)a2);
              uint64_t v44 = CMMProfile::CMMProfile((uint64_t)v14, this, (uint64_t)a2);
              *(void *)uint64_t v44 = &unk_1ED984F58;
              *(_OWORD *)(v44 + 184) = 0u;
              *(_OWORD *)(v44 + 200) = 0u;
              *(_OWORD *)(v44 + 216) = 0u;
              return v14;
            }
          }
        }
        goto LABEL_60;
      }
      CFStringRef v25 = ColorSyncCreateSignatureFromFourCharCode(0x41324230u);
      BOOL v26 = ColorSyncProfileContainsTag(this, v25);
      CFRelease(v25);
      if (v26)
      {
        int v14 = CMMBase::NewInternal(0xB8uLL, (void **)a2);
        uint64_t v27 = CMMProfile::CMMProfile((uint64_t)v14, this, (uint64_t)a2);
        *(void *)uint64_t v27 = &unk_1ED983180;
        *(_DWORD *)(v27 + 176) = 808464432;
        return v14;
      }
    }
LABEL_60:
    exception = __cxa_allocate_exception(4uLL);
    int v49 = -170;
    goto LABEL_62;
  }
  if (v10 <= 1935896177)
  {
    if (v10 == 1852662636)
    {
      CFStringRef v21 = ColorSyncCreateSignatureFromFourCharCode(0x6E636C32u);
      BOOL v22 = ColorSyncProfileContainsTag(this, v21);
      CFRelease(v21);
      if (v22)
      {
        int v14 = CMMBase::NewInternal(0xB8uLL, (void **)a2);
        uint64_t v15 = CMMProfile::CMMProfile((uint64_t)v14, this, (uint64_t)a2);
        char v16 = &unk_1ED983AC0;
        goto LABEL_45;
      }
    }
    else if (v10 == 1886549106)
    {
      if (v9 == 1196573017)
      {
        CFStringRef v12 = ColorSyncCreateSignatureFromFourCharCode(0x6B545243u);
        BOOL v13 = ColorSyncProfileContainsTag(this, v12);
        CFRelease(v12);
        if (v13)
        {
          int v14 = CMMBase::NewInternal(0xB8uLL, (void **)a2);
          uint64_t v15 = CMMProfile::CMMProfile((uint64_t)v14, this, (uint64_t)a2);
          char v16 = &unk_1ED983A40;
LABEL_45:
          *(void *)uint64_t v15 = v16;
          return v14;
        }
      }
      else
      {
        CFStringRef v35 = ColorSyncCreateSignatureFromFourCharCode(0x41324230u);
        BOOL v36 = ColorSyncProfileContainsTag(this, v35);
        CFRelease(v35);
        if (v36)
        {
          CFStringRef v37 = ColorSyncCreateSignatureFromFourCharCode(0x42324130u);
          BOOL v38 = ColorSyncProfileContainsTag(this, v37);
          CFRelease(v37);
          if (v38)
          {
            int v14 = CMMBase::NewInternal(0xB8uLL, (void **)a2);
            uint64_t v15 = CMMProfile::CMMProfile((uint64_t)v14, this, (uint64_t)a2);
            char v16 = &unk_1ED983610;
            goto LABEL_45;
          }
        }
      }
    }
    goto LABEL_60;
  }
  if (v10 != 1936744803)
  {
    if (v10 == 1935896178)
    {
      if (v9 == 1196573017)
      {
        CFStringRef v19 = ColorSyncCreateSignatureFromFourCharCode(0x6B545243u);
        BOOL v20 = ColorSyncProfileContainsTag(this, v19);
        CFRelease(v19);
        if (v20)
        {
          int v14 = CMMBase::NewInternal(0xB8uLL, (void **)a2);
          uint64_t v15 = CMMProfile::CMMProfile((uint64_t)v14, this, (uint64_t)a2);
          char v16 = &unk_1ED983690;
          goto LABEL_45;
        }
      }
      else
      {
        CFStringRef v39 = ColorSyncCreateSignatureFromFourCharCode(0x41324230u);
        BOOL v40 = ColorSyncProfileContainsTag(this, v39);
        CFRelease(v39);
        if (v40)
        {
          int v14 = CMMBase::NewInternal(0xB8uLL, (void **)a2);
          uint64_t v15 = CMMProfile::CMMProfile((uint64_t)v14, this, (uint64_t)a2);
          char v16 = &unk_1ED9834E8;
          goto LABEL_45;
        }
        if (CMMProfileMaker::IsMatrixBased(this, v9, v11))
        {
          int v14 = CMMBase::NewInternal(0xB8uLL, (void **)a2);
          uint64_t v15 = CMMProfile::CMMProfile((uint64_t)v14, this, (uint64_t)a2);
          char v16 = &unk_1ED984BC0;
          goto LABEL_45;
        }
      }
    }
    goto LABEL_60;
  }
  CFStringRef v28 = ColorSyncCreateSignatureFromFourCharCode(0x41324230u);
  BOOL v29 = ColorSyncProfileContainsTag(this, v28);
  CFRelease(v28);
  if (!v29) {
    goto LABEL_60;
  }
  CFStringRef v30 = ColorSyncCreateSignatureFromFourCharCode(0x42324130u);
  BOOL v31 = ColorSyncProfileContainsTag(this, v30);
  CFRelease(v30);
  if (!v31) {
    goto LABEL_60;
  }
  int v14 = CMMBase::NewInternal(0xB8uLL, (void **)a2);
  uint64_t v32 = CMMProfile::CMMProfile((uint64_t)v14, this, (uint64_t)a2);
  *(void *)uint64_t v32 = &unk_1ED983730;
  *(unsigned char *)(v32 + 180) = 0;
  if (*(unsigned char *)(v32 + 43) == 2 && *((_DWORD *)v14 + 12) == 1281450528 && *((_DWORD *)v14 + 13) == 1281450528)
  {
    CFDataRef Tag = CMMProfile::GetTag((uint64_t)v14, 1093812784);
    if (Tag) {
    else
    }
      CFStringRef v34 = 0;
    BOOL v45 = (const void *)(*(uint64_t (**)(void *, uint64_t))(*v14 + 88))(v14, 1110589744);
    if (v45)
    {
      if (v34)
      {
        CFStringRef v47 = v46;
        if (v46)
        {
          if ((*(uint64_t (**)(_WORD *))(*(void *)v34 + 64))(v34) == 2
            && (*(uint64_t (**)(_WORD *))(*(void *)v47 + 64))(v47) == 2
            && v34[45] == 2
            && v47[45] == 2
            && v34[46] == 2
            && v47[46] == 2)
          {
            *((unsigned char *)v14 + 180) = 1;
          }
        }
      }
    }
  }
  return v14;
}

void sub_18BE17678(_Unwind_Exception *a1)
{
  CMMProfile::~CMMProfile(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMProfile::CMMProfile(uint64_t a1, CFTypeRef cf, uint64_t a3)
{
  *(void *)a1 = &unk_1ED9811E8;
  *(_DWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 176) = 808464432;
  *(void *)(a1 + 16) = cf;
  *(void *)(a1 + 24) = a3;
  if (!cf)
  {
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 168) = 0;
LABEL_5:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  CFRetain(cf);
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  CFDataRef v5 = ColorSyncProfileCopyHeader((ColorSyncProfileRef)cf);
  if (!v5) {
    goto LABEL_5;
  }
  CFDataRef v6 = v5;
  BytePtr = CFDataGetBytePtr(v5);
  long long v8 = *((_OWORD *)BytePtr + 3);
  long long v10 = *(_OWORD *)BytePtr;
  long long v9 = *((_OWORD *)BytePtr + 1);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)BytePtr + 2);
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v9;
  long long v11 = *((_OWORD *)BytePtr + 7);
  long long v13 = *((_OWORD *)BytePtr + 4);
  long long v12 = *((_OWORD *)BytePtr + 5);
  *(_OWORD *)(a1 + 128) = *((_OWORD *)BytePtr + 6);
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 96) = v13;
  *(_OWORD *)(a1 + 112) = v12;
  CFRelease(v6);
  return a1;
}

void std::vector<CMMProfileInfo,TAllocator<CMMProfileInfo>>::resize(uint64_t a1, unint64_t a2)
{
  CFDataRef v5 = *(pthread_mutex_t ***)a1;
  BOOL v4 = *(pthread_mutex_t ***)(a1 + 8);
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v4 - *(void *)a1) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      CFStringRef v23 = &v5[5 * a2];
      if (v4 != v23)
      {
        BOOL v24 = v4 - 5;
        CFStringRef v25 = v4 - 5;
        BOOL v26 = v4 - 5;
        do
        {
          uint64_t v27 = *v26;
          v26 -= 5;
          ((void (*)(pthread_mutex_t **))v27->__sig)(v25);
          v24 -= 5;
          BOOL v28 = v25 == v23;
          CFStringRef v25 = v26;
        }
        while (!v28);
      }
      *(void *)(a1 + 8) = v23;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)v4) >> 3) >= v7)
    {
      BOOL v29 = &v4[5 * v7];
      CFStringRef v30 = *(pthread_mutex_t ***)(a1 + 8);
      do
      {
        *CFStringRef v30 = (pthread_mutex_t *)&unk_1ED982680;
        v30[1] = 0;
        v30[2] = (pthread_mutex_t *)-1;
        v30[3] = 0;
        *(pthread_mutex_t **)((char *)v30 + 31) = 0;
        v4 += 5;
        v30 += 5;
      }
      while (v30 != v29);
      *(void *)(a1 + 8) = v29;
    }
    else
    {
      if (a2 > 0x666666666666666) {
        std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)v5) >> 3);
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= a2) {
        uint64_t v10 = a2;
      }
      if (v9 >= 0x333333333333333) {
        uint64_t v11 = 0x666666666666666;
      }
      else {
        uint64_t v11 = v10;
      }
      long long v12 = CMMBase::NewInternal(40 * v11, *(void ***)(a1 + 32));
      long long v13 = &v12[5 * a2];
      v14.n128_u64[0] = -1;
      v14.n128_u64[1] = -1;
      uint64_t v15 = &v12[5 * v6];
      char v16 = v15;
      do
      {
        *char v16 = &unk_1ED982680;
        v16[1] = 0;
        v16[2] = -1;
        v16[3] = 0;
        *(void *)((char *)v16 + 31) = 0;
        v15 += 5;
        v16 += 5;
      }
      while (v16 != v13);
      uint64_t v17 = 0;
      CFStringRef v19 = *(pthread_mutex_t ***)a1;
      uint64_t v18 = *(void *)(a1 + 8);
      while (1)
      {
        BOOL v20 = &v12[5 * v6 + v17];
        uint64_t v21 = v18 + v17 * 8;
        if ((pthread_mutex_t **)(v18 + v17 * 8) == v19) {
          break;
        }
        uint64_t v22 = *(void *)(v21 - 32);
        *(v20 - 5) = &unk_1ED982680;
        *(v20 - 4) = v22;
        *(v20 - 3) = *(void *)(v21 - 24);
        v14.n128_u64[0] = *(void *)(v21 - 16);
        *(v20 - 2) = v14.n128_u64[0];
        *((_DWORD *)v20 - 2) = *(_DWORD *)(v21 - 8);
        *((_WORD *)v20 - 2) = *(_WORD *)(v21 - 4);
        *((unsigned char *)v20 - 2) = *(unsigned char *)(v21 - 2);
        v17 -= 5;
      }
      uint64_t v32 = *(pthread_mutex_t ***)a1;
      BOOL v31 = *(pthread_mutex_t ***)(a1 + 8);
      *(void *)a1 = v20;
      *(void *)(a1 + 8) = v13;
      *(void *)(a1 + 16) = &v12[5 * v11];
      if (v31 != v32)
      {
        BOOL v33 = v31 - 5;
        CFStringRef v34 = v31 - 5;
        CFStringRef v35 = v31 - 5;
        do
        {
          BOOL v36 = *v35;
          v35 -= 5;
          ((void (*)(pthread_mutex_t **, __n128))v36->__sig)(v34, v14);
          v33 -= 5;
          BOOL v28 = v34 == v32;
          CFStringRef v34 = v35;
        }
        while (!v28);
      }
      if (v32)
      {
        CMMBase::operator delete(v32);
      }
    }
  }
}

uint64_t CMMProfile::GenericGetConversionType(CMMProfile *this, const __CFString *a2)
{
  if (CFEqual(this, kColorSyncTransformDeviceToPCS)) {
    return 1;
  }
  if (CFEqual(this, kColorSyncTransformPCSToDevice)) {
    return 2;
  }
  if (CFEqual(this, kColorSyncTransformPCSToPCS)) {
    return 3;
  }
  if (CFEqual(this, (CFTypeRef)kColorSyncTransformSceneLinearToPCS)) {
    return 9;
  }
  if (CFEqual(this, (CFTypeRef)kColorSyncTransformPCSToSceneLinear)) {
    return 10;
  }
  if (CFEqual(this, (CFTypeRef)kColorSyncTransformDisplayLinearToPCS)
    || CFEqual(this, (CFTypeRef)kColorSyncTransformPCSToDisplayLinear))
  {
    return 11;
  }
  if (CFEqual(this, (CFTypeRef)kColorSyncTransformDeviceToSceneLinearPCS)) {
    return 13;
  }
  if (CFEqual(this, (CFTypeRef)kColorSyncTransformSceneLinearPCSToDevice)) {
    return 14;
  }
  if (CFEqual(this, kColorSyncTransformGamutCheck)) {
    return 4;
  }
  CMMThrowExceptionOnError(4294967246);
  return 0xFFFFFFFFLL;
}

uint64_t CMMDisplayProfile::GetConversionType(CMMDisplayProfile *this, __CFString *a2)
{
  return CMMProfile::GenericGetConversionType((CMMProfile *)a2, a2);
}

uint64_t ColorSyncProfileUsesITU_R709OETF(uint64_t a1)
{
  CFDataRef Tag = (const __CFData *)ColorSyncProfileGetTag(a1, @"rTRC");
  if (Tag || (uint64_t result = (uint64_t)ColorSyncProfileGetTag(a1, @"aarg"), (Tag = (const __CFData *)result) != 0))
  {
    if (CFDataGetLength(Tag) >= 32)
    {
      BytePtr = CFDataGetBytePtr(Tag);
      if (*(_DWORD *)BytePtr == 1634886000 && *((_WORD *)BytePtr + 4) == 768 && *((_DWORD *)BytePtr + 3) == -466091520)
      {
        int v5 = *((_DWORD *)BytePtr + 4);
        if (v5 == -521666560)
        {
          if (*((_DWORD *)BytePtr + 5) == 538378240 && *((_DWORD *)BytePtr + 6) == -466092032) {
            return *((_DWORD *)BytePtr + 7) == -1139539968;
          }
        }
        else if (v5 == -253231104 {
               && *((_DWORD *)BytePtr + 5) == 269942784
        }
               && *((_DWORD *)BytePtr + 6) == -466092032
               && *((_DWORD *)BytePtr + 7) == -1139539968)
        {
          return 1;
        }
      }
    }
    return 0;
  }
  return result;
}

CFDataRef ColorSyncProfileUsesCoreVideoGamma(uint64_t a1)
{
  CFDataRef Tag = (const __CFData *)ColorSyncProfileGetTag(a1, @"rTRC");
  if (Tag || (CFDataRef result = (const __CFData *)ColorSyncProfileGetTag(a1, @"aarg"), (Tag = result) != 0))
  {
    if (CFDataGetLength(Tag) >= 14
      && (BytePtr = CFDataGetBytePtr(Tag), *(_DWORD *)BytePtr == 1987212643)
      && *((_DWORD *)BytePtr + 2) == 0x1000000)
    {
      return (const __CFData *)(*((__int16 *)BytePtr + 6) == -2559);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL ColorSyncOptionsLegacyHDREcosystemRequested(const __CFDictionary *a1)
{
  BOOL v2 = !current_or_newer_sdk();
  if (a1 && CFDictionaryContainsKey(a1, @"com.apple.cmm.UseLegacyHDREcosystem")) {
    return CFDictionaryGetValue(a1, @"com.apple.cmm.UseLegacyHDREcosystem") == (const void *)*MEMORY[0x1E4F1CFD0];
  }
  return v2;
}

BOOL current_or_newer_sdk()
{
  if (current_or_newer_sdk_predicate != -1) {
    dispatch_once(&current_or_newer_sdk_predicate, &__block_literal_global_1601);
  }
  if (current_or_newer_sdk_linked_on_glow_or_later) {
    BOOL v0 = 0;
  }
  else {
    BOOL v0 = current_or_newer_sdk_linked_on_crystal_or_later == 0;
  }
  return !v0
      || current_or_newer_sdk_linked_on_sapphire_or_later != 0
      || current_or_newer_sdk_linked_on_moonstone_or_later != 0
      || current_or_newer_sdk_linked_on_constellation_or_later != 0;
}

uint64_t CMMColorSpaceProfile::GetConversionType(CMMColorSpaceProfile *this, __CFString *a2)
{
  return CMMProfile::GenericGetConversionType((CMMProfile *)a2, a2);
}

uint64_t ColorSyncMatrixGetProperties(unsigned int *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (ColorSyncMatrixGetTypeID_predicate[0] != -1) {
    dispatch_once(ColorSyncMatrixGetTypeID_predicate, &__block_literal_global_7);
  }
  if (v2 != ColorSyncMatrixGetTypeID_kColorSyncMatrixRuntimeID) {
    __assert_rtn("ColorSyncMatrixGetProperties", "ColorSyncTransformFunctions.c", 584, "CFGetTypeID(ref) == ColorSyncMatrixGetTypeID()");
  }
  return a1[16];
}

__n128 ColorSyncMatrixGetFunction@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeID v4 = CFGetTypeID((CFTypeRef)a1);
  if (ColorSyncMatrixGetTypeID_predicate[0] != -1) {
    dispatch_once(ColorSyncMatrixGetTypeID_predicate, &__block_literal_global_7);
  }
  if (v4 != ColorSyncMatrixGetTypeID_kColorSyncMatrixRuntimeID) {
    __assert_rtn("ColorSyncMatrixGetFunction", "ColorSyncTransformFunctions.c", 577, "CFGetTypeID(ref) == ColorSyncMatrixGetTypeID()");
  }
  long long v5 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 16) = v5;
  __n128 result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void *allocate(size_t a1, unint64_t a2, void *a3)
{
  return malloc_type_malloc(a1, 0x2E4EAA0AuLL);
}

BOOL ColorSyncVerifyGenericGrayGamma2_2(const ColorSyncProfile *a1)
{
  return verify_GenericGrayGamma2_2(a1, 0);
}

BOOL ColorSyncVerifyDisplayP3(const ColorSyncProfile *a1)
{
  return verify_DisplayP3(a1, 0);
}

void ___ZL34CMMInitializeTwoPointTwoGammaTablev_block_invoke()
{
  CFTypeID v4 = 0;
  CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v4);
  BOOL v0 = CMMBase::NewInternal(0x28uLL, (void **)&v4);
  v0[2] = 0;
  v0[3] = &kTwoPointTwoGammaData;
  *BOOL v0 = &unk_1ED985520;
  v0[1] = 0;
  v0[4] = 21512;
  CMMTwoPointTwoGammaTable = (uint64_t)v0;
  uint64_t v1 = CMMBase::NewInternal(0x28uLL, (void **)&v4);
  v1[2] = 0;
  v1[3] = &kInvTwoPointTwoGammaData;
  void *v1 = &unk_1ED985520;
  v1[1] = 0;
  v1[4] = 21512;
  CMMInvTwoPointTwoGammaTable = (uint64_t)v1;
  CFTypeID v2 = CMMBase::NewInternal(0x38uLL, (void **)&v4);
  CMMTwoPointTwoGammaFloatLutInfo = (uint64_t)v2;
  void *v2 = 0x200000001;
  *((unsigned char *)v2 + 8) = 1;
  *((_DWORD *)v2 + 3) = 3;
  v2[2] = 0;
  *(_OWORD *)(v2 + 3) = xmmword_18BE636D0;
  *((_DWORD *)v2 + 10) = 1036726266;
  int v3 = CMMBase::NewInternal(0x38uLL, (void **)&v4);
  CMMInvTwoPointTwoGammaFloatLutInfo = (uint64_t)v3;
  void *v3 = 0x500000001;
  *((unsigned char *)v3 + 8) = 1;
  *((_DWORD *)v3 + 3) = 3;
  v3[2] = 0;
  *(_OWORD *)(v3 + 3) = xmmword_18BE636E0;
  *((_DWORD *)v3 + 10) = 1003171834;
  CMMMemMgr::ReleaseMemList(&v4);
}

void sub_18BE180A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMMemMgr::ReleaseMemList((void **)va);
  _Unwind_Resume(a1);
}

const void *ColorSyncCreateOutputPoppyProfile(const ColorSyncProfile *a1)
{
  uint64_t poppy_index_from_profile = get_poppy_index_from_profile(a1);

  return acquire_output_profile(poppy_index_from_profile);
}

void ___ZL36CMMInitializeOnePointEightGammaTablev_block_invoke()
{
  CFTypeID v4 = 0;
  CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v4);
  BOOL v0 = CMMBase::NewInternal(0x28uLL, (void **)&v4);
  v0[2] = 0;
  v0[3] = &kOnePointEightGammaData;
  *BOOL v0 = &unk_1ED985520;
  v0[1] = 0;
  v0[4] = 21512;
  CMMOnePointEightGammaTable = (uint64_t)v0;
  uint64_t v1 = CMMBase::NewInternal(0x28uLL, (void **)&v4);
  v1[2] = 0;
  v1[3] = &kInvOnePointEightGammaData;
  void *v1 = &unk_1ED985520;
  v1[1] = 0;
  v1[4] = 21512;
  CMMInvOnePointEightGammaTable = (uint64_t)v1;
  CFTypeID v2 = CMMBase::NewInternal(0x38uLL, (void **)&v4);
  CMMOnePointEightGammaFloatLutInfo = (uint64_t)v2;
  void *v2 = 0x300000001;
  *((unsigned char *)v2 + 8) = 1;
  *((_DWORD *)v2 + 3) = 3;
  v2[2] = 0;
  *(_OWORD *)(v2 + 3) = xmmword_18BE636F0;
  *((_DWORD *)v2 + 10) = 1023410176;
  int v3 = CMMBase::NewInternal(0x38uLL, (void **)&v4);
  CMMInvOnePointEightGammaFloatLutInfo = (uint64_t)v3;
  void *v3 = 0x600000001;
  *((unsigned char *)v3 + 8) = 1;
  *((_DWORD *)v3 + 3) = 3;
  v3[2] = 0;
  *(_OWORD *)(v3 + 3) = xmmword_18BE63700;
  *((_DWORD *)v3 + 10) = 989855744;
  CMMMemMgr::ReleaseMemList(&v4);
}

void sub_18BE18234(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMMemMgr::ReleaseMemList((void **)va);
  _Unwind_Resume(a1);
}

void ___ZL29CMMInitializeLinearGammaTablev_block_invoke()
{
  CFTypeID v2 = 0;
  CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v2);
  BOOL v0 = CMMBase::NewInternal(0x28uLL, (void **)&v2);
  v0[2] = 0;
  v0[3] = &kLinearGammaData;
  *BOOL v0 = &unk_1ED985520;
  v0[1] = 0;
  v0[4] = 21512;
  CMMLinearGammaTable = (uint64_t)v0;
  uint64_t v1 = CMMBase::NewInternal(0x38uLL, (void **)&v2);
  CMMLinearGammaFloatLutInfo = (uint64_t)v1;
  void *v1 = 0x700000001;
  *((unsigned char *)v1 + 8) = 1;
  *((_DWORD *)v1 + 3) = 0;
  v1[2] = 0;
  *((_DWORD *)v1 + 6) = 1065353216;
  CMMMemMgr::ReleaseMemList(&v2);
}

void sub_18BE18304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMMemMgr::ReleaseMemList((void **)va);
  _Unwind_Resume(a1);
}

pthread_mutex_t *DoCMMDisposeStorage(pthread_mutex_t *result)
{
  if (result)
  {
    uint64_t v1 = result;
    sig = (void **)result[1].__sig;
    if (sig)
    {
      uint64_t v5 = result[1].__sig;
      CMMMemMgr::RetainMemList((CMMMemMgr *)&v5);
      int v3 = *sig;
      if (*sig)
      {
        do
        {
          CFTypeID v4 = (void *)*v3;
          free(v3);
          int v3 = v4;
        }
        while (v4);
      }
      CMMMemMgr::ReleaseMemList((void **)&v5);
      CMMMemMgr::ReleaseMemList((void **)&v5);
    }
    pthread_mutex_destroy(v1);
    JUMPOUT(0x18C13A510);
  }
  return result;
}

void sub_18BE183C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMMemMgr::ReleaseMemList((void **)va);
  _Unwind_Resume(a1);
}

void ___ZL27CMMInitializeSRGBGammaTablev_block_invoke()
{
  uint64_t v10 = 0;
  CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v10);
  BOOL v0 = CMMBase::NewInternal(0x28uLL, (void **)&v10);
  v0[2] = 0;
  v0[3] = &ksRGBGammaData;
  *BOOL v0 = &unk_1ED985520;
  v0[1] = 0;
  v0[4] = 21512;
  CMMsRGBGammaTable = (uint64_t)v0;
  uint64_t v1 = CMMBase::NewInternal(0x28uLL, (void **)&v10);
  v1[2] = 0;
  v1[3] = &kInvsRGBGammaData;
  void *v1 = &unk_1ED985520;
  v1[1] = 0;
  v1[4] = 21512;
  CMMInvsRGBGammaTable = (uint64_t)v1;
  CFTypeID v2 = CMMBase::NewInternal(0x38uLL, (void **)&v10);
  CMMsRGBGammaFloatLutInfo = (uint64_t)v2;
  void *v2 = 0x100000001;
  *((_DWORD *)v2 + 3) = 3;
  v2[2] = 0;
  *((unsigned char *)v2 + 8) = 0;
  *(_OWORD *)(v2 + 3) = xmmword_18BE636B0;
  *(_OWORD *)(v2 + 5) = xmmword_18BE636C0;
  int v3 = CMMBase::NewInternal(0x38uLL, (void **)&v10);
  CMMInvsRGBGammaFloatLutInfo = (uint64_t)v3;
  float v4 = *(float *)(CMMsRGBGammaFloatLutInfo + 24);
  float v5 = *(float *)(CMMsRGBGammaFloatLutInfo + 28);
  float v6 = *(float *)(CMMsRGBGammaFloatLutInfo + 32);
  float v7 = *(float *)(CMMsRGBGammaFloatLutInfo + 36);
  float v8 = *(float *)(CMMsRGBGammaFloatLutInfo + 40);
  void *v3 = 0x400000001;
  *((_DWORD *)v3 + 3) = 4;
  v3[2] = 0;
  *((unsigned char *)v3 + 8) = 0;
  *((float *)v3 + 6) = 1.0 / v4;
  *((float *)v3 + 7) = 1.0 / powf(v5, v4);
  *((_DWORD *)v3 + 8) = 0;
  float v9 = 1.0 / v7;
  if (v7 == 0.0) {
    float v9 = 0.0;
  }
  *((float *)v3 + 9) = v9;
  *((float *)v3 + 10) = v7 * v8;
  *((float *)v3 + 11) = (float)-v6 / v5;
  v3[6] = 0;
  CMMMemMgr::ReleaseMemList(&v10);
}

void sub_18BE1858C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMMemMgr::ReleaseMemList((void **)va);
  _Unwind_Resume(a1);
}

ColorSyncTransformRef ColorSyncTransformCreate(CFArrayRef profileSequence, CFDictionaryRef options)
{
  if (!profileSequence)
  {
    LODWORD(v6) = 0;
    goto LABEL_43;
  }
  CFTypeID v4 = CFGetTypeID(profileSequence);
  if (v4 != CFArrayGetTypeID()) {
    goto LABEL_21;
  }
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(profileSequence, 0);
  CFDictionaryRef v6 = ValueAtIndex;
  if (ValueAtIndex)
  {
    CFTypeID v7 = CFGetTypeID(ValueAtIndex);
    if (v7 != CFDictionaryGetTypeID()) {
      goto LABEL_21;
    }
    CFArrayRef Value = CFDictionaryGetValue(v6, kColorSyncProfile);
    float v9 = CFDictionaryGetValue(v6, kColorSyncTransformTag);
    if (!Value) {
      goto LABEL_21;
    }
    uint64_t v10 = v9;
    CFTypeID v11 = CFGetTypeID(Value);
    if (ColorSyncProfileGetTypeID_predicate != -1) {
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
    }
    LODWORD(v6) = 0;
    if (v11 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID && v10)
    {
      CFDataRef v12 = ColorSyncProfileCopyHeader((ColorSyncProfileRef)Value);
      if (!CFEqual(v10, kColorSyncTransformDeviceToPCS))
      {
        if (CFEqual(v10, kColorSyncTransformPCSToPCS) || CFEqual(v10, kColorSyncTransformPCSToDevice))
        {
          if (v12)
          {
            BytePtr = CFDataGetBytePtr(v12);
            if (BytePtr)
            {
              __n128 v14 = BytePtr + 20;
              goto LABEL_20;
            }
LABEL_37:
            LODWORD(v6) = 0;
            goto LABEL_38;
          }
          goto LABEL_21;
        }
        if (!CFEqual(v10, kColorSyncTransformDeviceToDevice)
          && !CFEqual(v10, (CFTypeRef)kColorSyncTransformSceneLinearToPCS)
          && !CFEqual(v10, (CFTypeRef)kColorSyncTransformDisplayLinearToPCS)
          && !CFEqual(v10, (CFTypeRef)kColorSyncTransformDeviceToSceneLinearPCS))
        {
          LODWORD(v6) = 0;
          if (!v12) {
            goto LABEL_22;
          }
          goto LABEL_38;
        }
      }
      if (v12)
      {
        long long v13 = CFDataGetBytePtr(v12);
        if (v13)
        {
          __n128 v14 = v13 + 16;
LABEL_20:
          LODWORD(v6) = *v14;
LABEL_38:
          CFRelease(v12);
          goto LABEL_22;
        }
        goto LABEL_37;
      }
LABEL_21:
      LODWORD(v6) = 0;
    }
  }
LABEL_22:
  CFTypeID v16 = CFGetTypeID(profileSequence);
  if (v16 != CFArrayGetTypeID()) {
    goto LABEL_43;
  }
  if (CFArrayGetCount(profileSequence) < 1) {
    goto LABEL_43;
  }
  CFIndex Count = CFArrayGetCount(profileSequence);
  CFDictionaryRef v18 = (const __CFDictionary *)CFArrayGetValueAtIndex(profileSequence, Count - 1);
  if (!v18) {
    goto LABEL_43;
  }
  CFDictionaryRef v19 = v18;
  CFTypeID v20 = CFGetTypeID(v18);
  if (v20 != CFDictionaryGetTypeID()) {
    goto LABEL_43;
  }
  uint64_t v21 = CFDictionaryGetValue(v19, kColorSyncProfile);
  uint64_t v22 = CFDictionaryGetValue(v19, kColorSyncTransformTag);
  if (!v21) {
    goto LABEL_43;
  }
  CFStringRef v23 = v22;
  CFTypeID v24 = CFGetTypeID(v21);
  if (ColorSyncProfileGetTypeID_predicate != -1)
  {
    CFTypeID v38 = v24;
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
    CFTypeID v24 = v38;
  }
  unsigned int v25 = 0;
  if (v24 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID && v23)
  {
    CFDataRef v26 = ColorSyncProfileCopyHeader((ColorSyncProfileRef)v21);
    if (CFEqual(v23, kColorSyncTransformDeviceToPCS) || CFEqual(v23, kColorSyncTransformPCSToPCS))
    {
LABEL_33:
      if (v26)
      {
        uint64_t v27 = CFDataGetBytePtr(v26);
        if (v27)
        {
          BOOL v28 = (unsigned int *)(v27 + 20);
LABEL_36:
          unsigned int v25 = *v28;
LABEL_58:
          CFRelease(v26);
          goto LABEL_44;
        }
        goto LABEL_57;
      }
      goto LABEL_43;
    }
    if (CFEqual(v23, kColorSyncTransformPCSToDevice))
    {
LABEL_40:
      if (v26)
      {
        BOOL v29 = CFDataGetBytePtr(v26);
        if (v29)
        {
          BOOL v28 = (unsigned int *)(v29 + 16);
          goto LABEL_36;
        }
LABEL_57:
        unsigned int v25 = 0;
        goto LABEL_58;
      }
LABEL_43:
      unsigned int v25 = 0;
      goto LABEL_44;
    }
    if (CFEqual(v23, kColorSyncTransformDeviceToDevice)) {
      goto LABEL_33;
    }
    if (CFEqual(v23, kColorSyncTransformGamutCheck))
    {
      unsigned int v25 = 1734438260;
    }
    else
    {
      if (CFEqual(v23, (CFTypeRef)kColorSyncTransformPCSToSceneLinear)
        || CFEqual(v23, (CFTypeRef)kColorSyncTransformPCSToDisplayLinear)
        || CFEqual(v23, (CFTypeRef)kColorSyncTransformSceneLinearPCSToDevice))
      {
        goto LABEL_40;
      }
      unsigned int v25 = 0;
    }
    if (v26) {
      goto LABEL_58;
    }
  }
LABEL_44:
  Runtimeuint64_t Instance = createRuntimeInstance(v6, v25, profileSequence);
  if (RuntimeInstance)
  {
    BOOL v31 = ColorSyncCMMCreateAppleCMM();
    if (profileSequence
      && (v32 = v31, CFTypeID v33 = CFGetTypeID(profileSequence), v33 == CFArrayGetTypeID())
      && (!options || (CFTypeID v34 = CFGetTypeID(options), v34 == CFDictionaryGetTypeID()))
      && (CFStringRef v35 = (unsigned int (*)(_OWORD *, CFArrayRef, CFDictionaryRef))v32[6]) != 0
      && v35(RuntimeInstance, profileSequence, options))
    {
      *((void *)RuntimeInstance + 10) = CFRetain(v32);
      CFDictionarySetValue(*((CFMutableDictionaryRef *)RuntimeInstance + 14), kColorSyncTransformCreator, @"Apple CMM");
      CFRelease(@"Apple CMM");
      if (options) {
        CFTypeRef v36 = CFRetain(options);
      }
      else {
        CFTypeRef v36 = 0;
      }
      *((void *)RuntimeInstance + 16) = v36;
    }
    else
    {
      CFRelease(RuntimeInstance);
      return 0;
    }
  }
  return (ColorSyncTransformRef)RuntimeInstance;
}

_OWORD *createRuntimeInstance(unsigned int a1, unsigned int a2, const void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t ColorSpacetNofComponents = getColorSpacetNofComponents(a1);
  uint64_t v7 = getColorSpacetNofComponents(a2);
  float v8 = 0;
  if (ColorSpacetNofComponents)
  {
    uint64_t v9 = v7;
    if (v7)
    {
      if (ColorSyncTransformGetTypeID_predicate != -1) {
        dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_34);
      }
      uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
      float v8 = Instance;
      if (Instance)
      {
        Instance[1] = 0u;
        Instance[7] = 0u;
        Instance[8] = 0u;
        Instance[5] = 0u;
        Instance[6] = 0u;
        Instance[3] = 0u;
        Instance[4] = 0u;
        Instance[2] = 0u;
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        *((void *)v8 + 14) = Mutable;
        if (Mutable
          && (CFMutableDictionaryRef v12 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]),
              (*((void *)v8 + 17) = v12) != 0))
        {
          CFStringRef SignatureFromFourCharCode = ColorSyncCreateSignatureFromFourCharCode(a1);
          CFStringRef v14 = ColorSyncCreateSignatureFromFourCharCode(a2);
          v17.__sig = 0;
          *(void *)v17.__opaque = 0;
          CFDictionarySetValue(*((CFMutableDictionaryRef *)v8 + 14), kColorSyncTransformSrcSpace, SignatureFromFourCharCode);
          if (a2 == 1734438260) {
            CFStringRef v15 = kColorSyncTransformGamutCheck;
          }
          else {
            CFStringRef v15 = v14;
          }
          CFDictionarySetValue(*((CFMutableDictionaryRef *)v8 + 14), kColorSyncTransformDstSpace, v15);
          CFRelease(SignatureFromFourCharCode);
          CFRelease(v14);
          pthread_mutexattr_init(&v17);
          pthread_mutexattr_settype(&v17, 2);
          pthread_mutex_init((pthread_mutex_t *)(v8 + 1), &v17);
          pthread_mutexattr_destroy(&v17);
          *((void *)v8 + 11) = ColorSpacetNofComponents;
          *((void *)v8 + 12) = v9;
          if (a3) {
            *((void *)v8 + 15) = CFRetain(a3);
          }
        }
        else
        {
          CFRelease(v8);
          return 0;
        }
      }
    }
  }
  return v8;
}

uint64_t getColorSpacetNofComponents(int a1)
{
  uint64_t v1 = 0;
  if (a1 > 1145261137)
  {
    if (a1 <= 1281450527)
    {
      if (a1 <= 1196573016)
      {
        int v2 = 1145261138;
        uint64_t v3 = 13;
        int v7 = 1162038354;
        uint64_t v8 = 14;
        BOOL v9 = a1 == 1178815570;
        uint64_t v10 = 15;
        goto LABEL_24;
      }
      if (a1 != 1196573017)
      {
        if (a1 == 1212961568) {
          return 3;
        }
        int v5 = 1213421088;
        goto LABEL_35;
      }
    }
    else
    {
      if (a1 <= 1482250783)
      {
        if (a1 == 1281450528 || a1 == 1282766368) {
          return 3;
        }
        int v5 = 1380401696;
        goto LABEL_35;
      }
      if (a1 <= 1501067551)
      {
        if (a1 == 1482250784) {
          return 3;
        }
        int v5 = 1497588338;
LABEL_35:
        if (a1 != v5) {
          return v1;
        }
        return 3;
      }
      if (a1 == 1501067552) {
        return 3;
      }
      if (a1 != 1734438260) {
        return v1;
      }
    }
    return 1;
  }
  if (a1 <= 943934545)
  {
    if (a1 <= 893602897)
    {
      if (a1 == 843271250) {
        return 2;
      }
      if (a1 != 860048466)
      {
        int v6 = 876825682;
        goto LABEL_39;
      }
      return 3;
    }
    int v2 = 893602898;
    uint64_t v3 = 5;
    int v7 = 910380114;
    uint64_t v8 = 6;
    BOOL v9 = a1 == 927157330;
    uint64_t v10 = 7;
LABEL_24:
    if (!v9) {
      uint64_t v10 = 0;
    }
    if (a1 == v7) {
      uint64_t v4 = v8;
    }
    else {
      uint64_t v4 = v10;
    }
    goto LABEL_29;
  }
  if (a1 <= 1111706705)
  {
    int v2 = 943934546;
    uint64_t v3 = 8;
    int v7 = 960711762;
    uint64_t v8 = 9;
    BOOL v9 = a1 == 1094929490;
    uint64_t v10 = 10;
    goto LABEL_24;
  }
  if (a1 <= 1129142559)
  {
    int v2 = 1111706706;
    uint64_t v3 = 11;
    uint64_t v4 = 12;
    if (a1 != 1128483922) {
      uint64_t v4 = 0;
    }
LABEL_29:
    if (a1 == v2) {
      return v3;
    }
    else {
      return v4;
    }
  }
  if (a1 == 1129142560) {
    return 3;
  }
  int v6 = 1129142603;
LABEL_39:
  if (a1 == v6) {
    return 4;
  }
  return v1;
}

CFTypeRef ColorSyncCMMCreateAppleCMM()
{
  pthread_mutex_lock(&ColorSyncCMMCreateAppleCMM_mtx);
  if (!ColorSyncCMMCreateAppleCMM_appleCMM)
  {
    if (ColorSyncCMMGetTypeID_predicate[0] != -1) {
      dispatch_once(ColorSyncCMMGetTypeID_predicate, &__block_literal_global_1519);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      *(void *)(Instance + 24) = 0;
      *(void *)(Instance + 32) = @"Apple CMM";
      *(void *)(Instance + 17) = 0;
      *(unsigned char *)(Instance + 16) = 1;
      *(void *)(Instance + 72) = AppleCMMInitializeLinkProfile;
      *(void *)(Instance + 40) = @"com.apple.cmm";
      *(void *)(Instance + 48) = AppleCMMInitializeTransform;
      *(void *)(Instance + 56) = AppleCMMApplyTransform;
      *(void *)(Instance + 64) = AppleCMMCreateTransformProperty;
    }
    ColorSyncCMMCreateAppleCMM_appleCMM = Instance;
  }
  pthread_mutex_unlock(&ColorSyncCMMCreateAppleCMM_mtx);
  uint64_t v1 = (const void *)ColorSyncCMMCreateAppleCMM_appleCMM;

  return CFRetain(v1);
}

uint64_t AppleCMMValidateProfile(CMMProfileMaker *a1)
{
  uint64_t v8 = 0;
  CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v8);
  Profile = CMMProfileMaker::MakeProfile(a1, (const ColorSyncProfile *)&v8, 0);
  uint64_t v3 = (*(uint64_t (**)(_DWORD *))(*(void *)Profile + 16))(Profile);
  int v4 = Profile[2] - 1;
  Profile[2] = v4;
  if (!v4) {
    (*(void (**)(_DWORD *))(*(void *)Profile + 8))(Profile);
  }
  if (v8)
  {
    int v5 = *v8;
    if (*v8)
    {
      do
      {
        int v6 = (void *)*v5;
        free(v5);
        int v5 = v6;
      }
      while (v6);
    }
  }
  CMMMemMgr::ReleaseMemList((void **)&v8);
  return v3;
}

void sub_18BE190A0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (v10)
    {
      int v12 = v10[2] - 1;
      v10[2] = v12;
      if (!v12) {
        (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
      }
    }
    if (a10)
    {
      long long v13 = *a10;
      if (*a10)
      {
        do
        {
          CFStringRef v14 = (void *)*v13;
          free(v13);
          long long v13 = v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    if (v10)
    {
      int v15 = v10[2] - 1;
      v10[2] = v15;
      if (!v15) {
        (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
      }
    }
    if (a10)
    {
      CFTypeID v16 = *a10;
      if (*a10)
      {
        do
        {
          pthread_mutexattr_t v17 = (void *)*v16;
          free(v16);
          CFTypeID v16 = v17;
        }
        while (v17);
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x18BE1907CLL);
}

void sub_18BE1917C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMMemMgr::ReleaseMemList((void **)va);
  _Unwind_Resume(a1);
}

CMMConvNode *ConversionManager::MakeColorMatchSequence(int a1, void *a2, uint64_t a3, CFDictionaryRef theDict)
{
  uint64_t v5 = a2[1];
  uint64_t v4 = a2[2];
  if (v4 == v5)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  if (theDict)
  {
    BOOL v45 = CFDictionaryContainsKey(theDict, @"com.apple.cmm.ApplyToneMaping") == 1;
    uint64_t v5 = a2[1];
    uint64_t v4 = a2[2];
  }
  else
  {
    BOOL v45 = 0;
  }
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 3);
  BOOL v9 = v8 < 2 || v5 == v4 - 40;
  if (v9)
  {
    uint64_t v10 = v5;
    goto LABEL_85;
  }
  uint64_t v44 = a3;
  char v11 = 0;
  while (1)
  {
    int v12 = *(const void ***)(v5 + 8);
    if (!v12) {
      goto LABEL_56;
    }
    BOOL v13 = *(unsigned char *)(v5 + 24) && *(unsigned char *)(v5 + 64)
       || *(unsigned char *)(v5 + 25) && *(unsigned char *)(v5 + 65)
       || *(unsigned char *)(v5 + 24) && *(unsigned char *)(v5 + 65)
       || *(unsigned char *)(v5 + 25) && *(unsigned char *)(v5 + 64);
    CFStringRef v14 = *(const void ***)(v5 + 48);
    unsigned int v15 = *(_DWORD *)(v5 + 16);
    uint64_t v16 = *(unsigned int *)(v5 + 56);
    int v17 = (*((uint64_t (**)(void, void))*v12 + 6))(*(void *)(v5 + 8), v15);
    int v18 = (*((uint64_t (**)(const void **, uint64_t, void))*v14 + 7))(v14, v16, 0);
    if (v13)
    {
      int v21 = 0;
      int v22 = 0;
    }
    else
    {
      int v21 = *(_DWORD *)(v5 + 20);
      int v22 = *(_DWORD *)(v5 + 60);
    }
    int v23 = *(unsigned __int8 *)(v5 + 34);
    int v24 = *(unsigned __int8 *)(v5 + 74);
    if (v17 == v18 && v15 == 1 && v16 == 2 && v23 == v24)
    {
      if (v45) {
        goto LABEL_56;
      }
      if (!CMMProfileInfoContainer::ProfilesIdentical((CMMProfileInfoContainer *)v12, (CMMProfile *)v14, v19, v20))
      {
        uint64_t PoppyIndex = ColorSyncProfileGetPoppyIndex(v12[2]);
        uint64_t v30 = ColorSyncProfileGetPoppyIndex(v14[2]);
        if (PoppyIndex == -1 || PoppyIndex != v30) {
          goto LABEL_56;
        }
      }
      *(void *)(v5 + 48) = 0;
      *(void *)(v5 + 8) = 0;
      int v31 = *((_DWORD *)v12 + 2) - 1;
      *((_DWORD *)v12 + 2) = v31;
      if (!v31) {
        (*((void (**)(const void **))*v12 + 1))(v12);
      }
LABEL_53:
      int v32 = *((_DWORD *)v14 + 2) - 1;
      *((_DWORD *)v14 + 2) = v32;
      if (!v32) {
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    if (v15 != 3 || v16 != 2 || v21 != v22 || v23 != v24)
    {
      if (v15 != 1
        || v16 != 3
        || v21 != v22
        || v23 != v24
        || !CMMProfileInfoContainer::ProfilesIdentical((CMMProfileInfoContainer *)v12, (CMMProfile *)v14, v19, v20))
      {
        goto LABEL_56;
      }
      *(void *)(v5 + 48) = 0;
      goto LABEL_53;
    }
    if (CMMProfileInfoContainer::ProfilesIdentical((CMMProfileInfoContainer *)v12, (CMMProfile *)v14, v19, v20))
    {
      *(void *)(v5 + 8) = 0;
      int v28 = *((_DWORD *)v12 + 2) - 1;
      *((_DWORD *)v12 + 2) = v28;
      if (!v28)
      {
        CFStringRef v14 = v12;
LABEL_54:
        (*((void (**)(const void **))*v14 + 1))(v14);
      }
LABEL_55:
      char v11 = 1;
    }
LABEL_56:
    v5 += 40;
    uint64_t v10 = a2[1];
    uint64_t v4 = a2[2];
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v10) >> 3);
    if (v8 < 2 || v5 == v4 - 40)
    {
      if ((v11 & 1) == 0) {
        goto LABEL_84;
      }
      if (v10 == v4)
      {
        uint64_t v5 = a2[2];
      }
      else
      {
        do
        {
          if (*(void *)(v10 + 8))
          {
            v10 += 40;
          }
          else
          {
            uint64_t v34 = v10;
            if (v10 + 40 != v4)
            {
              uint64_t v34 = v10;
              do
              {
                *(void *)(v34 + 8) = *(void *)(v34 + 48);
                uint64_t v35 = *(void *)(v34 + 64);
                *(void *)(v34 + 16) = *(void *)(v34 + 56);
                *(void *)(v34 + 24) = v35;
                *(_DWORD *)(v34 + 32) = *(_DWORD *)(v34 + 72);
                *(unsigned char *)(v34 + 36) = *(unsigned char *)(v34 + 76);
                *(_WORD *)(v34 + 37) = *(_WORD *)(v34 + 77);
                uint64_t v36 = v34 + 80;
                v34 += 40;
              }
              while (v36 != v4);
              uint64_t v4 = a2[2];
            }
            if (v4 != v34)
            {
              uint64_t v37 = v4 - 40;
              CFTypeID v38 = (void (***)(void))(v4 - 40);
              CFStringRef v39 = (void (***)(void))(v4 - 40);
              do
              {
                BOOL v40 = *v39;
                v39 -= 5;
                (*v40)(v38);
                v37 -= 40;
                BOOL v9 = v38 == (void (***)(void))v34;
                CFTypeID v38 = v39;
              }
              while (!v9);
            }
            a2[2] = v34;
            uint64_t v4 = v34;
          }
        }
        while (v10 != v4);
        uint64_t v5 = a2[1];
      }
      char v11 = 0;
      if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 3) < 2 || v5 == v4 - 40) {
        break;
      }
    }
  }
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 3);
  uint64_t v10 = v5;
LABEL_84:
  a3 = v44;
LABEL_85:
  a2[6] = v8;
  if (v4 == v10)
  {
    if (a3)
    {
      *(void *)a3 = 1;
      *(unsigned char *)(a3 + 8) = 0;
    }
    return 0;
  }
  else
  {
    return ConversionManager::MakeConversionSequence();
  }
}

uint64_t AppleCMMInitializeTransform(uint64_t a1)
{
  if (a1) {
    operator new();
  }
  return 0;
}

void sub_18BE19F60(void *a1, int a2, uint64_t a3, void **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  ConversionManager::~ConversionManager((ConversionManager *)va);
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    if (v8) {
      CFRelease(v8);
    }
    if (a4)
    {
      int v12 = *a4;
      if (*a4)
      {
        do
        {
          BOOL v13 = (void *)*v12;
          free(v12);
          int v12 = v13;
        }
        while (v13);
      }
    }
  }
  else
  {
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    if (v8) {
      CFRelease(v8);
    }
    if (a4)
    {
      CFStringRef v14 = *a4;
      if (*a4)
      {
        do
        {
          unsigned int v15 = (void *)*v14;
          free(v14);
          CFStringRef v14 = v15;
        }
        while (v15);
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x18BE19DE8);
}

void sub_18BE1A07C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  __cxa_end_catch();
  CMMMemMgr::ReleaseMemList((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMDisplayProfile::GetSrcColorSpace(_DWORD *a1, unsigned int a2)
{
  if (a2 > 0xE) {
    goto LABEL_17;
  }
  if (((1 << a2) & 0x540C) != 0) {
    goto LABEL_9;
  }
  if (((1 << a2) & 0x2A02) == 0)
  {
    if (a2 == 4 && (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 24))(a1))
    {
LABEL_9:
      unsigned int v3 = a1[13];
      BOOL v6 = v3 == 1281450528;
      unsigned int v5 = 1347182946;
LABEL_10:
      if (v6) {
        return v5;
      }
      else {
        return v3;
      }
    }
LABEL_17:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -50;
  }
  unsigned int v3 = a1[12];
  switch(v3)
  {
    case 0x4D434835u:
      uint64_t result = 893602898;
      break;
    case 0x4D434836u:
      uint64_t result = 910380114;
      break;
    case 0x4D434837u:
      uint64_t result = 927157330;
      break;
    case 0x4D434838u:
      uint64_t result = 943934546;
      break;
    default:
      unsigned int v5 = 1145856354;
      BOOL v6 = v3 == 1281450528;
      goto LABEL_10;
  }
  return result;
}

uint64_t CMMDisplayProfile::GetDstColorSpace(unsigned int *a1, unsigned int a2, char *a3)
{
  char v4 = 0;
  if (a2 > 0xE) {
    goto LABEL_20;
  }
  if (((1 << a2) & 0x2A0A) != 0)
  {
    uint64_t v6 = a1[13];
    char v4 = 1;
    if (v6 == 1281450528)
    {
      uint64_t v7 = 0;
      uint64_t v6 = 1347182946;
      goto LABEL_21;
    }
LABEL_17:
    if (v6 != -1)
    {
      uint64_t v7 = 0;
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (((1 << a2) & 0x5404) != 0)
  {
    uint64_t v6 = a1[12];
    switch((int)v6)
    {
      case 1296255029:
        goto LABEL_5;
      case 1296255030:
        goto LABEL_11;
      case 1296255031:
        goto LABEL_14;
      case 1296255032:
        goto LABEL_15;
      default:
        goto LABEL_12;
    }
  }
  if (a2 != 4)
  {
LABEL_20:
    uint64_t v7 = 4294967246;
    uint64_t v6 = 0xFFFFFFFFLL;
    goto LABEL_21;
  }
  if (!(*(uint64_t (**)(unsigned int *))(*(void *)a1 + 24))(a1))
  {
    char v4 = 0;
    goto LABEL_20;
  }
  uint64_t v6 = a1[12];
  switch((int)v6)
  {
    case 1296255029:
LABEL_5:
      char v4 = 0;
      uint64_t v7 = 0;
      uint64_t v6 = 893602898;
      break;
    case 1296255030:
LABEL_11:
      char v4 = 0;
      uint64_t v7 = 0;
      uint64_t v6 = 910380114;
      break;
    case 1296255031:
LABEL_14:
      char v4 = 0;
      uint64_t v7 = 0;
      uint64_t v6 = 927157330;
      break;
    case 1296255032:
LABEL_15:
      char v4 = 0;
      uint64_t v7 = 0;
      uint64_t v6 = 943934546;
      break;
    default:
LABEL_12:
      if (v6 != 1281450528)
      {
        char v4 = 0;
        goto LABEL_17;
      }
      char v4 = 0;
      uint64_t v7 = 0;
      uint64_t v6 = 1145856354;
      break;
  }
LABEL_21:
  CMMThrowExceptionOnError(v7);
  if (a3) {
    *a3 = v4;
  }
  return v6;
}

CFDictionaryRef ColorSyncOptionsDisplayReferredToneMappingRequested(const __CFDictionary *result)
{
  if (result)
  {
    uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(result, @"com.apple.cmm.ApplyToneMaping");
    if (result)
    {
      CFDictionaryRef v1 = result;
      CFTypeID v2 = CFGetTypeID(result);
      if (v2 != CFDictionaryGetTypeID()) {
        return 0;
      }
      uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(v1, @"com.apple.cmm.ApplyDisplayReferredToneMapping");
      if (!result) {
        return result;
      }
      CFDictionaryRef v3 = result;
      CFTypeID v4 = CFGetTypeID(result);
      if (v4 == CFDictionaryGetTypeID())
      {
        if (CFDictionaryContainsKey(v3, @"com.apple.cmm.ApplyReferenceWhiteToneMapping")) {
          return (const __CFDictionary *)1;
        }
        else {
          return (const __CFDictionary *)(CFDictionaryContainsKey(v3, @"com.apple.cmm.ApplyPQEETFToneMapping") != 0);
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void CMMMemMgr::ReleaseMemList(void **this)
{
  if (*this)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)*this + 8));
    CFTypeID v2 = (char *)*this;
    int v3 = *((_DWORD *)*this + 18) - 1;
    *((_DWORD *)v2 + 18) = v3;
    pthread_mutex_unlock((pthread_mutex_t *)(v2 + 8));
    if (!v3)
    {
      pthread_mutex_destroy((pthread_mutex_t *)((char *)*this + 8));
      free(*this);
      *this = 0;
    }
  }
}

void CMMMemMgr::CMMMemMgr(CMMMemMgr *this)
{
  CFTypeID v2 = (char *)malloc_type_calloc(1uLL, 0x50uLL, 0x1A8617E5uLL);
  *(void *)this = v2;
  if (v2)
  {
    *((_DWORD *)v2 + 18) = 1;
    pthread_mutex_init((pthread_mutex_t *)(v2 + 8), 0);
  }
}

uint64_t CMMMemMgr::RetainMemList(CMMMemMgr *this)
{
  if (!*(void *)this) {
    return 0;
  }
  pthread_mutex_lock((pthread_mutex_t *)(*(void *)this + 8));
  uint64_t v2 = *(void *)this;
  *(_DWORD *)(v2 + 72) = *(_DWORD *)(*(void *)this + 72) + 1;
  pthread_mutex_unlock((pthread_mutex_t *)(v2 + 8));
  return *(void *)this;
}

void CMMProfileInfoContainer::~CMMProfileInfoContainer(CMMProfileInfoContainer *this)
{
  CMMProfileInfoContainer::~CMMProfileInfoContainer(this);

  CMMBase::operator delete(v1);
}

{
  pthread_mutex_t ***v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  BOOL v7;
  pthread_mutex_t ***v8;

  *(void *)this = &unk_1ED984FD8;
  uint64_t v2 = (pthread_mutex_t ***)((char *)this + 8);
  int v3 = *((void *)this + 1);
  CFTypeID v4 = *((void *)this + 2);
  while (v3 != v4)
  {
    unsigned int v5 = *(_DWORD **)(v3 + 8);
    uint64_t v6 = v5[2] - 1;
    v5[2] = v6;
    if (v5) {
      uint64_t v7 = v6 == 0;
    }
    else {
      uint64_t v7 = 0;
    }
    if (v7)
    {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
      CFTypeID v4 = *((void *)this + 2);
    }
    v3 += 40;
  }
  unint64_t v8 = v2;
  std::vector<CMMProfileInfo,TAllocator<CMMProfileInfo>>::__destroy_vector::operator()[abi:ne180100](&v8);
}

void CMMMatrixDisplayProfile::~CMMMatrixDisplayProfile(CMMMatrixDisplayProfile *this)
{
  CMMProfile::~CMMProfile(this);

  CMMBase::operator delete(v1);
}

void std::vector<CMMProfileInfo,TAllocator<CMMProfileInfo>>::__destroy_vector::operator()[abi:ne180100](pthread_mutex_t ****a1)
{
  CFDictionaryRef v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    CFTypeID v4 = v1[1];
    unsigned int v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 5;
      uint64_t v7 = v4 - 5;
      unint64_t v8 = v4 - 5;
      do
      {
        uint64_t v9 = *v8;
        v8 -= 5;
        ((void (*)(pthread_mutex_t **))v9->__sig)(v7);
        v6 -= 5;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    CMMBase::operator delete(v5);
  }
}

unint64_t CMMProfileInfoContainer::GetMaxNofChannels(CMMProfileInfoContainer *this)
{
  uint64_t v1 = *((void *)this + 2) - *((void *)this + 1);
  if (!v1) {
    return 3;
  }
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  unint64_t v5 = v1 / 40;
  if (v5 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = v5;
  }
  unint64_t v7 = 3;
  do
  {
    uint64_t v8 = *((void *)this + 1);
    if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 2) - v8) >> 3) <= v4) {
      std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v9 = *(void *)(v8 + v3 + 8);
    int v10 = *(_DWORD *)(v9 + 48);
    switch(v10)
    {
      case 1296255029:
        int v11 = 893602898;
        break;
      case 1296255030:
        int v11 = 910380114;
        break;
      case 1296255031:
        int v11 = 927157330;
        break;
      case 1296255032:
        int v11 = 943934546;
        break;
      default:
        if (v10 == 1281450528) {
          int v11 = 1145856354;
        }
        else {
          int v11 = *(_DWORD *)(v9 + 48);
        }
        break;
    }
    int v12 = *(_DWORD *)(v9 + 52);
    if (v12 == 1281450528) {
      int v13 = 1347182946;
    }
    else {
      int v13 = v12;
    }
    if (*(_DWORD *)(v8 + v3 + 16) != 4)
    {
      unint64_t v14 = CMMGetChannelCountFromCMMSpace(v11);
      if (v7 <= v14) {
        unint64_t v7 = v14;
      }
    }
    unint64_t v15 = CMMGetChannelCountFromCMMSpace(v13);
    if (v7 <= v15) {
      unint64_t v7 = v15;
    }
    ++v4;
    v3 += 40;
  }
  while (v6 != v4);
  return v7;
}

void ConversionManager::~ConversionManager(ConversionManager *this)
{
  *(void *)this = &unk_1ED983258;
  uint64_t v2 = (const void *)*((void *)this + 9);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 10);
  if (v3) {
    CFRelease(v3);
  }
}

{
  pthread_mutex_t **v1;
  uint64_t vars8;

  ConversionManager::~ConversionManager(this);

  CMMBase::operator delete(v1);
}

void ColorSyncTransformInternalSetProperty(void *a1, const void *a2, const void *a3)
{
  if (a1)
  {
    CFTypeID v6 = CFGetTypeID(a1);
    if (ColorSyncTransformGetTypeID_predicate == -1)
    {
      if (!a3) {
        return;
      }
    }
    else
    {
      dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_34);
      if (!a3) {
        return;
      }
    }
    if (a2 && v6 == ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID)
    {
      unint64_t v7 = (__CFDictionary *)a1[14];
      CFDictionarySetValue(v7, a2, a3);
    }
  }
}

void ColorSyncTransformInternalSetCMMStorage(uint64_t a1, const void *a2)
{
  CFTypeID v4 = CFGetTypeID((CFTypeRef)a1);
  if (ColorSyncTransformGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_34);
  }
  if (v4 == ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 112), @"com.apple.cmm.cmmstorage", a2);
    *(void *)(a1 + 104) = a2;
  }
}

CFDictionaryRef ColorSyncOptionsSceneReferredToneMappingRequested(const __CFDictionary *result)
{
  if (result)
  {
    uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(result, @"com.apple.cmm.ApplyToneMaping");
    if (result)
    {
      CFDictionaryRef v1 = result;
      CFTypeID v2 = CFGetTypeID(result);
      if (v2 == CFDictionaryGetTypeID()) {
        return (const __CFDictionary *)(CFDictionaryGetValue(v1, @"com.apple.cmm.ApplySceneReferredToneMapping") == (const void *)*MEMORY[0x1E4F1CFD0]);
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

void CMMMonoDisplayProfile::~CMMMonoDisplayProfile(CMMMonoDisplayProfile *this)
{
  CMMProfile::~CMMProfile(this);

  CMMBase::operator delete(v1);
}

unint64_t ConversionManager::GetMaxNofChannels(ConversionManager *this, CMMConvNode *a2)
{
  unint64_t v3 = 0;
  do
  {
    unint64_t v4 = (*(uint64_t (**)(ConversionManager *, CMMConvNode *))(*(void *)this + 176))(this, a2);
    if (v3 <= v4) {
      unint64_t v3 = v4;
    }
    this = (ConversionManager *)*((void *)this + 2);
  }
  while (this);
  if (v3 >= 0xF)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  return v3;
}

uint64_t CMMConvTRC::GetMaxNofChannels(CMMConvTRC *this)
{
  return (*((_DWORD *)this + 18) + 1);
}

uint64_t CMMConvMatrix::GetMaxNofChannels(CMMConvMatrix *this)
{
  return 3;
}

uint64_t get_poppy_index_from_profile(const ColorSyncProfile *a1)
{
  if (!ColorSyncProfileContainsTag(a1, @"aapy")) {
    return -1;
  }
  CFDataRef Tag = (const __CFData *)ColorSyncProfileGetTag((uint64_t)a1, @"aapy");
  if (!Tag) {
    return -1;
  }
  CFDataRef v3 = Tag;
  if (CFDataGetLength(Tag) < 14) {
    return -1;
  }
  BytePtr = CFDataGetBytePtr(v3);
  if (*(_DWORD *)BytePtr != 1635017060) {
    return -1;
  }
  int v5 = BytePtr[12];
  if ((v5 - 1) >= 0xA) {
    LOBYTE(v5) = -1;
  }
  return (char)v5;
}

uint64_t ColorSyncProfileGetPoppyIndex(const void *a1)
{
  if (!a1) {
    goto LABEL_8;
  }
  CFTypeID v2 = CFGetTypeID(a1);
  if (ColorSyncProfileGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
  }
  if (v2 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID) {
LABEL_8:
  }
    __assert_rtn("ColorSyncProfileGetPoppyIndex", "ColorSyncPoppyProfile.c", 619, "profile != NULL && CFGetTypeID(profile) == ColorSyncProfileGetTypeID()");

  return get_poppy_index_from_profile((const ColorSyncProfile *)a1);
}

BOOL CMMProfileInfoContainer::ProfilesIdentical(CMMProfileInfoContainer *this, CMMProfile *a2, CMMProfile *a3, CMMMemMgr *a4)
{
  int v4 = *((_DWORD *)this + 11);
  if (v4 == 1852662636) {
    return 0;
  }
  int v6 = *((_DWORD *)a2 + 11);
  if (v6 == 1852662636 || v4 != v6) {
    return 0;
  }
  if (*((_DWORD *)this + 12) != *((_DWORD *)a2 + 12)) {
    return 0;
  }
  if (*((_DWORD *)this + 13) != *((_DWORD *)a2 + 13)) {
    return 0;
  }
  unint64_t v23 = 0;
  unint64_t v24 = 0;
  uint64_t RelevantTags = CMMProfile::GetRelevantTags(this, &v24);
  uint64_t v10 = CMMProfile::GetRelevantTags(a2, &v23);
  uint64_t v11 = *(void *)(RelevantTags + 8);
  uint64_t v12 = *(void *)(RelevantTags + 16);
  if (v12 - v11 != *(void *)(v10 + 16) - *(void *)(v10 + 8) || v24 != v23) {
    return 0;
  }
  if (v12 != v11)
  {
    uint64_t v13 = 0;
    unsigned int v14 = 1;
    while (1)
    {
      CFStringRef SignatureFromFourCharCode = (__CFString *)ColorSyncCreateSignatureFromFourCharCode(*(_DWORD *)(v11 + 24 * v13 + 8));
      if (!ColorSyncProfileContainsTag(*((ColorSyncProfileRef *)a2 + 2), SignatureFromFourCharCode)) {
        break;
      }
      CFDataRef Tag = ColorSyncProfileGetTag(*((void *)this + 2), SignatureFromFourCharCode);
      int v17 = ColorSyncProfileGetTag(*((void *)a2 + 2), SignatureFromFourCharCode);
      if (!Tag || v17 == 0) {
        break;
      }
      int v19 = CFEqual(Tag, v17);
      BOOL v20 = v19 != 0;
      CFRelease(SignatureFromFourCharCode);
      if (!v19) {
        return v20;
      }
      uint64_t v13 = v14;
      uint64_t v11 = *(void *)(RelevantTags + 8);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(RelevantTags + 16) - v11) >> 3) <= v14++) {
        return 1;
      }
    }
    CFRelease(SignatureFromFourCharCode);
    return 0;
  }
  return 1;
}

uint64_t CMMProfile::GetRelevantTags(CMMProfile *this, unint64_t *a2)
{
  *a2 = 0;
  CFArrayRef v4 = ColorSyncProfileCopyTagSignatures(*((ColorSyncProfileRef *)this + 2));
  if (!v4)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  CFArrayRef v5 = v4;
  CFIndex Count = CFArrayGetCount(v4);
  uint64_t v7 = *((void *)this + 21);
  if (!v7)
  {
    uint64_t v11 = CMMBase::NewInternal(0x38uLL, *((void ***)this + 3));
    *((void *)this + 21) = TVector<CMMTagInfo,TAllocator<CMMTagInfo>>::TVector(v11, Count, *((void *)this + 3));
    if (!Count) {
      goto LABEL_39;
    }
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v7 + 8);
  uint64_t v10 = *(void *)(v7 + 16);
  uint64_t v8 = v7 + 8;
  if (0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3) != Count) {
    std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::resize(v8, Count);
  }
  if (Count)
  {
LABEL_8:
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFDictionaryRef ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(v5, i);
      int FourCharCodeFromSignature = ColorSyncGetFourCharCodeFromSignature(ValueAtIndex);
      unsigned int v15 = FourCharCodeFromSignature;
      if (FourCharCodeFromSignature <= 1667851119)
      {
        if (FourCharCodeFromSignature <= 1110589743)
        {
          int v16 = -1093812784;
LABEL_20:
          if ((FourCharCodeFromSignature + v16) < 3) {
            goto LABEL_31;
          }
          continue;
        }
        if (FourCharCodeFromSignature <= 1649693250)
        {
          int v16 = -1110589744;
          goto LABEL_20;
        }
        if (FourCharCodeFromSignature == 1649693251 || FourCharCodeFromSignature == 1649957210)
        {
LABEL_31:
          CFDataRef Tag = (const __CFData *)ColorSyncProfileGetTag(*((void *)this + 2), ValueAtIndex);
          if (Tag)
          {
            unint64_t Length = CFDataGetLength(Tag);
            unint64_t v20 = *a2;
            if (*a2 <= Length) {
              unint64_t v20 = Length;
            }
            *a2 = v20;
            int v21 = (void *)*((void *)this + 21);
            uint64_t v22 = v21[1];
            unint64_t v23 = v21[6];
            for (uint64_t j = v21[2]; ; uint64_t j = v21[2])
            {
              unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((j - v22) >> 3);
              if (v23 < v25) {
                break;
              }
              std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::resize((uint64_t)(v21 + 1), v25 + 10);
              unint64_t v23 = v21[6];
              uint64_t v22 = v21[1];
            }
            v21[6] = v23 + 1;
            uint64_t v26 = v22 + 24 * v23;
            *(void *)(v26 + 8) = v15;
            *(_DWORD *)(v26 + 16) = 0;
          }
          continue;
        }
        int v17 = 1651208308;
      }
      else if (FourCharCodeFromSignature <= 1886545199)
      {
        if (FourCharCodeFromSignature > 1733843289)
        {
          if (FourCharCodeFromSignature == 1733843290) {
            goto LABEL_31;
          }
          int v17 = 1800688195;
        }
        else
        {
          if (FourCharCodeFromSignature == 1667851120) {
            goto LABEL_31;
          }
          int v17 = 1733579331;
        }
      }
      else
      {
        if (FourCharCodeFromSignature <= 1918128706)
        {
          int v16 = -1886545200;
          goto LABEL_20;
        }
        if (FourCharCodeFromSignature == 1918128707 || FourCharCodeFromSignature == 2004119668) {
          goto LABEL_31;
        }
        int v17 = 1918392666;
      }
      if (FourCharCodeFromSignature == v17) {
        goto LABEL_31;
      }
    }
  }
LABEL_39:
  std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::resize(*((void *)this + 21) + 8, *(void *)(*((void *)this + 21) + 48));
  unint64_t v27 = (*(_DWORD *)a2 + 3) & 0xFFFFFFFC;
  if (v27 >= *(_DWORD *)a2) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = 4294967246;
  }
  CMMThrowExceptionOnError(v28);
  *a2 = v27;
  CFRelease(v5);
  return *((void *)this + 21);
}

void *TVector<CMMTagInfo,TAllocator<CMMTagInfo>>::TVector(void *a1, unint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = &unk_1ED9812C0;
  a1[5] = a3;
  *a1 = &unk_1ED985478;
  a1[6] = 0;
  std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::resize((uint64_t)(a1 + 1), a2);
  return a1;
}

void sub_18BE1B1FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::__destroy_vector::operator()[abi:ne180100]((pthread_mutex_t ****)va);
  _Unwind_Resume(a1);
}

void std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::__destroy_vector::operator()[abi:ne180100](pthread_mutex_t ****a1)
{
  CFDictionaryRef v1 = *a1;
  CFTypeID v2 = **a1;
  if (v2)
  {
    CFArrayRef v4 = v1[1];
    CFArrayRef v5 = **a1;
    if (v4 != v2)
    {
      int v6 = v4 - 3;
      uint64_t v7 = v4 - 3;
      uint64_t v8 = v4 - 3;
      do
      {
        uint64_t v9 = *v8;
        v8 -= 3;
        ((void (*)(pthread_mutex_t **))v9->__sig)(v7);
        v6 -= 3;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      CFArrayRef v5 = **a1;
    }
    v1[1] = v2;
    CMMBase::operator delete(v5);
  }
}

void std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::resize(uint64_t a1, unint64_t a2)
{
  CFArrayRef v5 = *(pthread_mutex_t ***)a1;
  CFArrayRef v4 = *(pthread_mutex_t ***)(a1 + 8);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(void *)a1) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 > v6)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v4) >> 3) >= v7)
    {
      uint64_t v34 = &v4[3 * v7];
      uint64_t v35 = *(void *)(a1 + 8);
      do
      {
        *(void *)uint64_t v35 = &unk_1ED981268;
        *(void *)(v35 + 8) = 0xFFFFFFFFLL;
        *(_DWORD *)(v35 + 16) = 0;
        v4 += 3;
        v35 += 24;
      }
      while ((pthread_mutex_t **)v35 != v34);
      *(void *)(a1 + 8) = v34;
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v5) >> 3);
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= a2) {
      uint64_t v10 = a2;
    }
    if (v9 >= 0x555555555555555) {
      uint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      uint64_t v11 = v10;
    }
    uint64_t v12 = CMMBase::NewInternal(24 * v11, *(void ***)(a1 + 32));
    uint64_t v13 = &v12[3 * v6];
    unsigned int v14 = &v12[3 * a2];
    unsigned int v15 = v13;
    int v16 = v13;
    do
    {
      *int v16 = &unk_1ED981268;
      v16[1] = 0xFFFFFFFFLL;
      *((_DWORD *)v16 + 4) = 0;
      v15 += 3;
      v16 += 3;
    }
    while (v16 != v14);
    int v17 = &v12[3 * v11];
    int v18 = *(pthread_mutex_t ***)a1;
    int v19 = *(pthread_mutex_t ***)(a1 + 8);
    if (v19 == *(pthread_mutex_t ***)a1)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = v17;
    }
    else
    {
      uint64_t v20 = 0;
      do
      {
        int v21 = &v13[v20];
        *(v21 - 3) = &unk_1ED981268;
        *(v21 - 2) = v19[v20 - 2];
        *((_DWORD *)v21 - 2) = v19[v20 - 1];
        v20 -= 3;
      }
      while (&v19[v20] != v18);
      uint64_t v22 = &v13[v20];
      int v19 = *(pthread_mutex_t ***)a1;
      unint64_t v23 = *(pthread_mutex_t ***)(a1 + 8);
      *(void *)a1 = v22;
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = v17;
      if (v23 == v19)
      {
        int v19 = v23;
        if (!v23) {
          return;
        }
        goto LABEL_30;
      }
      unint64_t v24 = v23 - 3;
      unint64_t v25 = v23 - 3;
      uint64_t v26 = v23 - 3;
      do
      {
        unint64_t v27 = *v26;
        v26 -= 3;
        ((void (*)(pthread_mutex_t **))v27->__sig)(v25);
        v24 -= 3;
        BOOL v28 = v25 == v19;
        unint64_t v25 = v26;
      }
      while (!v28);
    }
    if (!v19) {
      return;
    }
LABEL_30:
    CMMBase::operator delete(v19);
    return;
  }
  if (a2 < v6)
  {
    BOOL v29 = &v5[3 * a2];
    if (v4 != v29)
    {
      uint64_t v30 = v4 - 3;
      int v31 = v4 - 3;
      int v32 = v4 - 3;
      do
      {
        CFTypeID v33 = *v32;
        v32 -= 3;
        ((void (*)(pthread_mutex_t **))v33->__sig)(v31);
        v30 -= 3;
        BOOL v28 = v31 == v29;
        int v31 = v32;
      }
      while (!v28);
    }
    *(void *)(a1 + 8) = v29;
  }
}

void CMMMatrixHDRDisplayProfile::~CMMMatrixHDRDisplayProfile(CMMMatrixHDRDisplayProfile *this)
{
  CMMMatrixHDRDisplayProfile::~CMMMatrixHDRDisplayProfile(this);

  CMMBase::operator delete(v1);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t vars8;

  *(void *)this = &unk_1ED9851B0;
  CFTypeID v2 = (void *)*((void *)this + 29);
  if (v2)
  {
    CFDataRef v3 = v2[1];
    if (v3)
    {
      CFArrayRef v4 = v3 - 1;
      v2[1] = v4;
      if (!v4) {
        (*(void (**)(void *))(*v2 + 8))(v2);
      }
    }
  }
  CFArrayRef v5 = (void *)*((void *)this + 30);
  if (v5)
  {
    unint64_t v6 = v5[1];
    if (v6)
    {
      unint64_t v7 = v6 - 1;
      v5[1] = v7;
      if (!v7) {
        (*(void (**)(void *))(*v5 + 8))(v5);
      }
    }
  }
  uint64_t v8 = (void *)*((void *)this + 31);
  if (v8)
  {
    unint64_t v9 = v8[1];
    if (v9)
    {
      uint64_t v10 = v9 - 1;
      v8[1] = v10;
      if (!v10) {
        (*(void (**)(void *))(*v8 + 8))(v8);
      }
    }
  }
  uint64_t v11 = (void *)*((void *)this + 32);
  if (v11)
  {
    uint64_t v12 = v11[1];
    if (v12)
    {
      uint64_t v13 = v12 - 1;
      v11[1] = v13;
      if (!v13) {
        (*(void (**)(void *))(*v11 + 8))(v11);
      }
    }
  }

  CMMProfile::~CMMProfile(this);
}

uint64_t CMMConvGrayToRGB::GetMaxNofChannels(CMMConvGrayToRGB *this)
{
  return 3;
}

uint64_t CMMColorSpaceProfile::GetDstColorSpace(uint64_t a1, int a2, BOOL *a3)
{
  unsigned int v4 = a2 & 0xFFFFFFFD;
  if ((a2 & 0xFFFFFFFD) == 1)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 52);
    if (v5 == 1281450528)
    {
      uint64_t v6 = 0;
      uint64_t v5 = 1347182946;
      goto LABEL_12;
    }
LABEL_9:
    if (v5 != -1)
    {
      uint64_t v6 = 0;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (a2 != 2)
  {
LABEL_11:
    uint64_t v6 = 4294967246;
    uint64_t v5 = 0xFFFFFFFFLL;
    goto LABEL_12;
  }
  uint64_t v5 = *(unsigned int *)(a1 + 48);
  switch((int)v5)
  {
    case 1296255029:
      uint64_t v6 = 0;
      uint64_t v5 = 893602898;
      break;
    case 1296255030:
      uint64_t v6 = 0;
      uint64_t v5 = 910380114;
      break;
    case 1296255031:
      uint64_t v6 = 0;
      uint64_t v5 = 927157330;
      break;
    case 1296255032:
      uint64_t v6 = 0;
      uint64_t v5 = 943934546;
      break;
    default:
      if (v5 != 1281450528) {
        goto LABEL_9;
      }
      uint64_t v6 = 0;
      uint64_t v5 = 1145856354;
      break;
  }
LABEL_12:
  CMMThrowExceptionOnError(v6);
  if (a3) {
    *a3 = v4 == 1;
  }
  return v5;
}

void CMMColorSpaceProfile::~CMMColorSpaceProfile(CMMColorSpaceProfile *this)
{
  CMMProfile::~CMMProfile(this);

  CMMBase::operator delete(v1);
}

unint64_t ColorSyncVerifySRGB(const ColorSyncProfile *a1)
{
  return verify_sRGB(a1, 0);
}

CFDataRef __getSRGBData_block_invoke()
{
  if (getSRGBProfile_predicate != -1) {
    dispatch_once(&getSRGBProfile_predicate, &__block_literal_global_626);
  }
  CFDataRef result = ColorSyncProfileCopyData((ColorSyncProfileRef)getSRGBProfile_sRGBProfile, 0);
  getSRGBData_sRGBCFDataRef Data = (uint64_t)result;
  return result;
}

ColorSyncProfile *ColorSyncProfileCreateSanitizedCopy(ColorSyncProfileRef prof, CFErrorRef *a2, CFErrorRef *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a2) {
    *(unsigned char *)a2 = 0;
  }
  if (!ColorSyncProfileVerify(prof, a2, a3)) {
    return 0;
  }
  if (verifyProfileAgainstSRGB(prof))
  {
    *(unsigned char *)a2 = 1;
    if (getSRGBProfile_predicate != -1) {
      dispatch_once(&getSRGBProfile_predicate, &__block_literal_global_626);
    }
    ColorSyncProfileRef v5 = (ColorSyncProfileRef)getSRGBProfile_sRGBProfile;
    goto LABEL_17;
  }
  ColorSyncMutableProfileRef MutableCopy = ColorSyncProfileCreateMutableCopy(prof);
  if (!MutableCopy) {
    return 0;
  }
  unint64_t v7 = MutableCopy;
  uint64_t v8 = copyHeaderData((uint64_t)MutableCopy);
  if (v8)
  {
    CFDataRef v9 = v8;
    MutableBytePtr = CFDataGetMutableBytePtr(v8);
    if (MutableBytePtr)
    {
      if (!(*((_DWORD *)MutableBytePtr + 2) >> 26))
      {
        *((_OWORD *)MutableBytePtr + 7) = 0u;
        *(_OWORD *)(MutableBytePtr + 100) = 0u;
        *(_OWORD *)(MutableBytePtr + 84) = 0u;
      }
      *((_DWORD *)MutableBytePtr + 19) = 54061;
      *(void *)(MutableBytePtr + 68) = 0x100000000F6D6;
      ColorSyncProfileSetHeader(v7, v9);
    }
    CFRelease(v9);
  }
  if (!colorSyncProfileEqual(prof, v7))
  {
    *(_OWORD *)keys = xmmword_1E54D65C0;
    uint64_t v16 = 0;
    values[0] = @"appleCopy";
    values[1] = v7;
    values[2] = 0;
    CFDictionaryRef v13 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 2, 0, 0);
    Profile = ColorSyncMakeProfile(v13);
    if (v13) {
      CFRelease(v13);
    }
    CFRelease(v7);
    if (!Profile) {
      return (ColorSyncProfile *)CFRetain(prof);
    }
    return Profile;
  }
  CFRelease(v7);
  ColorSyncProfileRef v5 = prof;
LABEL_17:

  return (ColorSyncProfile *)CFRetain(v5);
}

BOOL ColorSyncProfileVerify(ColorSyncProfileRef prof, CFErrorRef *errors, CFErrorRef *warnings)
{
  if (prof)
  {
    ColorSyncProfileRef v3 = prof;
    CFTypeID v4 = CFGetTypeID(prof);
    if (ColorSyncProfileGetTypeID_predicate != -1) {
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
    }
    if (v4 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    {
      int v5 = *((_DWORD *)v3 + 37);
      if (v5 == 2)
      {
        LOBYTE(prof) = 1;
      }
      else if (v5)
      {
        uint64_t v6 = (pthread_mutex_t *)((char *)v3 + 24);
        pthread_mutex_lock((pthread_mutex_t *)((char *)v3 + 24));
        char v7 = AppleCMMValidateProfile(v3);
        pthread_mutex_unlock(v6);
        LOBYTE(prof) = v7;
      }
      else
      {
        LOBYTE(prof) = *((unsigned char *)v3 + 144) != 0;
      }
    }
    else
    {
      LOBYTE(prof) = 0;
    }
  }
  return (char)prof;
}

ColorSyncMutableProfileRef ColorSyncProfileCreateMutableCopy(ColorSyncProfileRef prof)
{
  ColorSyncMutableProfileRef result = ColorSyncProfileCopyData(prof, 0);
  if (result)
  {
    ColorSyncMutableProfileRef v2 = result;
    ColorSyncProfileRef v3 = (ColorSyncProfile *)create(result, 1, 0);
    CFRelease(v2);
    return v3;
  }
  return result;
}

BOOL colorSyncProfileEqual(const ColorSyncProfile *a1, const ColorSyncProfile *a2)
{
  CFDataRef Data = ColorSyncProfileGetData((uint64_t)a1);
  int v5 = ColorSyncProfileGetData((uint64_t)a2);
  if (Data)
  {
    CFDataRef v6 = v5;
    if (v5)
    {
      CFIndex Length = CFDataGetLength(Data);
      if (Length != CFDataGetLength(v6)) {
        return 0;
      }
    }
  }
  ColorSyncMD5 MD5 = ColorSyncProfileGetMD5(a1);
  ColorSyncMD5 v9 = ColorSyncProfileGetMD5(a2);
  return *(void *)MD5.digest == *(void *)v9.digest && *(void *)&MD5.digest[8] == *(void *)&v9.digest[8];
}

__CFData *ColorSyncProfileGetData(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v2 = CFGetTypeID((CFTypeRef)a1);
  if (ColorSyncProfileGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
  }
  if (v2 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 148) != 1) {
    return *(__CFData **)(a1 + 104);
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
  ColorSyncProfileRef v3 = *(const void **)(a1 + 104);
  if (v3) {
    CFRelease(v3);
  }
  ProfileCFDataRef Data = createProfileData((CFDictionaryRef *)a1);
  *(void *)(a1 + 104) = ProfileData;
  if (*(_DWORD *)(a1 + 148) == 1) {
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 24));
  }
  return ProfileData;
}

void ColorSyncProfileSetPrimaries(ColorSyncProfile *a1, uint64_t a2)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  v75[1].f64[1] = 0.0;
  *(float64x2_t *)((char *)v76 + 8) = 0u;
  *(float64x2_t *)((char *)v75 + 8) = 0u;
  v75[0].f64[0] = 1.0;
  v76[0].f64[0] = 1.0;
  v76[1].f64[1] = 0.0;
  double v77 = 1.0;
  long long v69 = 0u;
  memset(v70, 0, sizeof(v70));
  float64x2_t v67 = 0u;
  long long v68 = 0u;
  convertSpecToXYZ(a2, (uint64_t)&v67, 1);
  if (v70[1].f64[1] <= 0.9639
    || v70[1].f64[1] >= 0.9645
    || v70[2].f64[0] <= 0.99997
    || v70[2].f64[0] >= 1.00003
    || v70[2].f64[1] <= 0.8246
    || v70[2].f64[1] >= 0.8252)
  {
    ColorSyncConvertDoubleXYZToD50(&v67, (float64x2_t *)&v70[1].f64[1], &v67, 3, (uint64_t)v75);
    ColorSyncConvertDoubleXYZToD50((float64x2_t *)((char *)&v68 + 8), (float64x2_t *)&v70[1].f64[1], (float64x2_t *)((char *)&v68 + 8), 3, (uint64_t)v75);
    ColorSyncConvertDoubleXYZToD50(v70, (float64x2_t *)&v70[1].f64[1], v70, 3, (uint64_t)v75);
    char v4 = 0;
  }
  else
  {
    *(float64x2_t *)((char *)&v70[1] + 8) = (float64x2_t)xmmword_18BE63660;
    v70[2].f64[1] = 0.8249;
    char v4 = 1;
  }
  bytes[5] = 0;
  __int16 v64 = 0;
  unsigned int v65 = 0;
  uint64_t v66 = 0;
  strcpy((char *)bytes, "XYZ ");
  int v5 = *(const void **)(a2 + 376);
  CFDataRef v6 = (CFAllocatorRef *)MEMORY[0x1E4F1CFA0];
  if (v5)
  {
    if (CFEqual(v5, @"ITU_R709"))
    {
      if (get_itu709_profile_predicate != -1) {
        dispatch_once(&get_itu709_profile_predicate, &__block_literal_global_1010);
      }
      char v7 = &get_itu709_profile_itu709;
    }
    else if (CFEqual(*(CFTypeRef *)(a2 + 376), @"ITU_R2020"))
    {
      if (get_itu2020_profile_predicate != -1) {
        dispatch_once(&get_itu2020_profile_predicate, &__block_literal_global_30);
      }
      char v7 = &get_itu2020_profile_itu2020;
    }
    else if (CFEqual(*(CFTypeRef *)(a2 + 376), @"P3_D65"))
    {
      if (get_dispP3_profile_predicate != -1) {
        dispatch_once(&get_dispP3_profile_predicate, &__block_literal_global_33);
      }
      char v7 = &get_dispP3_profile_dispP3;
    }
    else
    {
      if (!CFEqual(*(CFTypeRef *)(a2 + 376), @"DCI_P3")) {
        __assert_rtn("setPrimariesByName", "ColorSyncMakeDisplayProfile.c", 551, "0");
      }
      if (get_dciP3_profile_predicate != -1) {
        dispatch_once(&get_dciP3_profile_predicate, &__block_literal_global_36);
      }
      char v7 = &get_dciP3_profile_dciP3;
    }
    uint64_t v46 = *v7;
    unsigned int v47 = *(_DWORD *)(a2 + 384);
    CFDataRef Tag = (const __CFData *)ColorSyncProfileGetTag(*v7, @"rXYZ");
    ColorSyncProfileSetTag(a1, @"rXYZ", Tag);
    CFDataRef v49 = (const __CFData *)ColorSyncProfileGetTag(v46, @"gXYZ");
    ColorSyncProfileSetTag(a1, @"gXYZ", v49);
    CFDataRef v50 = (const __CFData *)ColorSyncProfileGetTag(v46, @"bXYZ");
    ColorSyncProfileSetTag(a1, @"bXYZ", v50);
    if (v47 >> 26)
    {
      CFDataRef v51 = (const __CFData *)ColorSyncProfileGetTag(v46, @"chad");
      ColorSyncProfileSetTag(a1, @"chad", v51);
    }
    goto LABEL_127;
  }
  double v8 = v67.f64[0] * 65536.0;
  if (v67.f64[0] * 65536.0 <= 0.0)
  {
    if (v67.f64[0] * 65536.0 >= 0.0) {
      goto LABEL_23;
    }
    double v9 = -0.5;
  }
  else
  {
    double v9 = 0.5;
  }
  double v8 = v8 + v9;
LABEL_23:
  if (v8 >= 2147483650.0)
  {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else if (v8 <= -2147483650.0)
  {
    unsigned int v10 = 0x80000000;
  }
  else
  {
    unsigned int v10 = (int)v8;
  }
  unsigned int v65 = bswap32(v10);
  double v11 = v67.f64[1] * 65536.0;
  if (v67.f64[1] * 65536.0 <= 0.0)
  {
    if (v67.f64[1] * 65536.0 >= 0.0) {
      goto LABEL_33;
    }
    double v12 = -0.5;
  }
  else
  {
    double v12 = 0.5;
  }
  double v11 = v11 + v12;
LABEL_33:
  if (v11 >= 2147483650.0)
  {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else if (v11 <= -2147483650.0)
  {
    unsigned int v13 = 0x80000000;
  }
  else
  {
    unsigned int v13 = (int)v11;
  }
  LODWORD(v66) = bswap32(v13);
  double v14 = *(double *)&v68 * 65536.0;
  if (*(double *)&v68 * 65536.0 <= 0.0)
  {
    if (*(double *)&v68 * 65536.0 >= 0.0) {
      goto LABEL_43;
    }
    double v15 = -0.5;
  }
  else
  {
    double v15 = 0.5;
  }
  double v14 = v14 + v15;
LABEL_43:
  if (v14 >= 2147483650.0)
  {
    unsigned int v16 = 0x7FFFFFFF;
  }
  else if (v14 <= -2147483650.0)
  {
    unsigned int v16 = 0x80000000;
  }
  else
  {
    unsigned int v16 = (int)v14;
  }
  HIDWORD(v66) = bswap32(v16);
  CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
  CFDataRef v18 = CFDataCreateWithBytesNoCopy(0, bytes, 20, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  ColorSyncProfileSetTag(a1, @"rXYZ", v18);
  if (v18) {
    CFRelease(v18);
  }
  double v19 = *((double *)&v68 + 1) * 65536.0;
  if (*((double *)&v68 + 1) * 65536.0 <= 0.0)
  {
    if (*((double *)&v68 + 1) * 65536.0 >= 0.0) {
      goto LABEL_55;
    }
    double v20 = -0.5;
  }
  else
  {
    double v20 = 0.5;
  }
  double v19 = v19 + v20;
LABEL_55:
  if (v19 >= 2147483650.0)
  {
    unsigned int v21 = 0x7FFFFFFF;
  }
  else if (v19 <= -2147483650.0)
  {
    unsigned int v21 = 0x80000000;
  }
  else
  {
    unsigned int v21 = (int)v19;
  }
  unsigned int v65 = bswap32(v21);
  double v22 = *(double *)&v69 * 65536.0;
  if (*(double *)&v69 * 65536.0 <= 0.0)
  {
    if (*(double *)&v69 * 65536.0 >= 0.0) {
      goto LABEL_65;
    }
    double v23 = -0.5;
  }
  else
  {
    double v23 = 0.5;
  }
  double v22 = v22 + v23;
LABEL_65:
  if (v22 >= 2147483650.0)
  {
    unsigned int v24 = 0x7FFFFFFF;
  }
  else if (v22 <= -2147483650.0)
  {
    unsigned int v24 = 0x80000000;
  }
  else
  {
    unsigned int v24 = (int)v22;
  }
  LODWORD(v66) = bswap32(v24);
  double v25 = *((double *)&v69 + 1) * 65536.0;
  if (*((double *)&v69 + 1) * 65536.0 <= 0.0)
  {
    if (*((double *)&v69 + 1) * 65536.0 >= 0.0) {
      goto LABEL_75;
    }
    double v26 = -0.5;
  }
  else
  {
    double v26 = 0.5;
  }
  double v25 = v25 + v26;
LABEL_75:
  if (v25 >= 2147483650.0)
  {
    unsigned int v27 = 0x7FFFFFFF;
  }
  else if (v25 <= -2147483650.0)
  {
    unsigned int v27 = 0x80000000;
  }
  else
  {
    unsigned int v27 = (int)v25;
  }
  HIDWORD(v66) = bswap32(v27);
  CFDataRef v28 = CFDataCreateWithBytesNoCopy(0, bytes, 20, v17);
  ColorSyncProfileSetTag(a1, @"gXYZ", v28);
  if (v28) {
    CFRelease(v28);
  }
  double v29 = v70[0].f64[0] * 65536.0;
  if (v70[0].f64[0] * 65536.0 <= 0.0)
  {
    if (v70[0].f64[0] * 65536.0 >= 0.0) {
      goto LABEL_87;
    }
    double v30 = -0.5;
  }
  else
  {
    double v30 = 0.5;
  }
  double v29 = v29 + v30;
LABEL_87:
  if (v29 >= 2147483650.0)
  {
    unsigned int v31 = 0x7FFFFFFF;
  }
  else if (v29 <= -2147483650.0)
  {
    unsigned int v31 = 0x80000000;
  }
  else
  {
    unsigned int v31 = (int)v29;
  }
  unsigned int v65 = bswap32(v31);
  double v32 = v70[0].f64[1] * 65536.0;
  if (v70[0].f64[1] * 65536.0 <= 0.0)
  {
    if (v70[0].f64[1] * 65536.0 >= 0.0) {
      goto LABEL_97;
    }
    double v33 = -0.5;
  }
  else
  {
    double v33 = 0.5;
  }
  double v32 = v32 + v33;
LABEL_97:
  if (v32 >= 2147483650.0)
  {
    unsigned int v34 = 0x7FFFFFFF;
  }
  else if (v32 <= -2147483650.0)
  {
    unsigned int v34 = 0x80000000;
  }
  else
  {
    unsigned int v34 = (int)v32;
  }
  LODWORD(v66) = bswap32(v34);
  double v35 = v70[1].f64[0] * 65536.0;
  if (v70[1].f64[0] * 65536.0 > 0.0)
  {
    double v36 = 0.5;
LABEL_106:
    double v35 = v35 + v36;
    goto LABEL_107;
  }
  if (v70[1].f64[0] * 65536.0 < 0.0)
  {
    double v36 = -0.5;
    goto LABEL_106;
  }
LABEL_107:
  if (v35 >= 2147483650.0)
  {
    unsigned int v37 = 0x7FFFFFFF;
  }
  else if (v35 <= -2147483650.0)
  {
    unsigned int v37 = 0x80000000;
  }
  else
  {
    unsigned int v37 = (int)v35;
  }
  HIDWORD(v66) = bswap32(v37);
  CFDataRef v38 = CFDataCreateWithBytesNoCopy(0, bytes, 20, v17);
  ColorSyncProfileSetTag(a1, @"bXYZ", v38);
  if (v38) {
    CFRelease(v38);
  }
  if (*(_DWORD *)(a2 + 384) >> 26)
  {
    *(void *)CFTypeID v71 = 842229363;
    float64x2_t v39 = (float64x2_t)vdupq_n_s64(0x40F0000000000000uLL);
    __asm { FMOV            V3.2D, #0.5 }
    int8x16_t v72 = vrev32q_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmlaq_f64(_Q3, v39, v75[0])), (int32x4_t)vcvtq_s64_f64(vmlaq_f64(_Q3, v39, v75[1]))));
    int8x16_t v73 = vrev32q_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmlaq_f64(_Q3, v39, v76[0])), (int32x4_t)vcvtq_s64_f64(vmlaq_f64(_Q3, v39, v76[1]))));
    unsigned int v74 = bswap32((int)(v77 * 65536.0 + 0.5));
    CFDataRef v45 = CFDataCreateWithBytesNoCopy(0, v71, 44, v17);
    ColorSyncProfileSetTag(a1, @"chad", v45);
    if (v45) {
      CFRelease(v45);
    }
  }
LABEL_127:
  if (*(_DWORD *)(a2 + 384) >> 26) {
    char v52 = v4;
  }
  else {
    char v52 = 1;
  }
  if ((v52 & 1) == 0)
  {
    *(float64x2_t *)((char *)&v70[1] + 8) = (float64x2_t)xmmword_18BE63660;
    v70[2].f64[1] = 0.8249;
    double v53 = 63189.8112;
    goto LABEL_135;
  }
  double v53 = v70[1].f64[1] * 65536.0;
  if (v70[1].f64[1] * 65536.0 > 0.0)
  {
LABEL_135:
    double v54 = 0.5;
    goto LABEL_136;
  }
  if (v70[1].f64[1] * 65536.0 >= 0.0) {
    goto LABEL_137;
  }
  double v54 = -0.5;
LABEL_136:
  double v53 = v53 + v54;
LABEL_137:
  if (v53 >= 2147483650.0)
  {
    unsigned int v55 = 0x7FFFFFFF;
  }
  else if (v53 <= -2147483650.0)
  {
    unsigned int v55 = 0x80000000;
  }
  else
  {
    unsigned int v55 = (int)v53;
  }
  unsigned int v65 = bswap32(v55);
  double v56 = v70[2].f64[0] * 65536.0;
  if (v70[2].f64[0] * 65536.0 <= 0.0)
  {
    if (v70[2].f64[0] * 65536.0 >= 0.0) {
      goto LABEL_147;
    }
    double v57 = -0.5;
  }
  else
  {
    double v57 = 0.5;
  }
  double v56 = v56 + v57;
LABEL_147:
  if (v56 >= 2147483650.0)
  {
    unsigned int v58 = 0x7FFFFFFF;
  }
  else if (v56 <= -2147483650.0)
  {
    unsigned int v58 = 0x80000000;
  }
  else
  {
    unsigned int v58 = (int)v56;
  }
  LODWORD(v66) = bswap32(v58);
  double v59 = v70[2].f64[1] * 65536.0;
  if (v70[2].f64[1] * 65536.0 <= 0.0)
  {
    if (v70[2].f64[1] * 65536.0 >= 0.0) {
      goto LABEL_157;
    }
    double v60 = -0.5;
  }
  else
  {
    double v60 = 0.5;
  }
  double v59 = v59 + v60;
LABEL_157:
  if (v59 >= 2147483650.0)
  {
    unsigned int v61 = 0x7FFFFFFF;
  }
  else if (v59 <= -2147483650.0)
  {
    unsigned int v61 = 0x80000000;
  }
  else
  {
    unsigned int v61 = (int)v59;
  }
  HIDWORD(v66) = bswap32(v61);
  CFDataRef v62 = CFDataCreateWithBytesNoCopy(0, bytes, 20, *v6);
  ColorSyncProfileSetTag(a1, @"wtpt", v62);
  if (v62) {
    CFRelease(v62);
  }
}

unint64_t verifyProfileAgainstSRGB(ColorSyncProfileRef prof)
{
  if (getSRGBData_predicate[0] != -1) {
    dispatch_once(getSRGBData_predicate, &__block_literal_global_623);
  }
  CFDataRef v2 = (const __CFData *)getSRGBData_sRGBData;
  CFDataRef v3 = ColorSyncProfileCopyData(prof, 0);
  CFDataRef v4 = v3;
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    BytePtr = CFDataGetBytePtr(v2);
    size_t Length = CFDataGetLength(v2);
    double v9 = CFDataGetBytePtr(v4);
    unint64_t Tag = CFDataGetLength(v4) >= Length && memcmp(BytePtr, v9, Length) == 0;
LABEL_14:
    CFRelease(v4);
    if (!prof) {
      return Tag;
    }
    goto LABEL_15;
  }
  unint64_t Tag = 0;
  if (v3) {
    goto LABEL_14;
  }
  if (!prof) {
    return Tag;
  }
LABEL_15:
  if ((Tag & 1) == 0)
  {
    unint64_t v10 = 0;
    while (1)
    {
      double v11 = off_1E54D6BE8[v10];
      unint64_t Tag = (unint64_t)getTag((uint64_t)prof, v11);
      if (!Tag) {
        return Tag;
      }
      if (getSRGBProfile_predicate != -1) {
        dispatch_once(&getSRGBProfile_predicate, &__block_literal_global_626);
      }
      CFDataRef v12 = (const __CFData *)getTag(getSRGBProfile_sRGBProfile, v11);
      if (!v12) {
        return 0;
      }
      CFDataRef v13 = v12;
      double v14 = CFDataGetBytePtr((CFDataRef)Tag);
      unint64_t v15 = CFDataGetLength((CFDataRef)Tag);
      unsigned int v16 = CFDataGetBytePtr(v13);
      size_t v17 = CFDataGetLength(v13);
      if (v15 < v17 || v14 == 0 || v16 == 0)
      {
        BOOL v22 = 0;
      }
      else
      {
        int v20 = memcmp(v16, v14, v17);
        BOOL v21 = v20 != 0;
        BOOL v22 = v20 == 0;
        if (!v21)
        {
LABEL_34:
          if ((v10 - 3) <= 2 && !v22 && v15 >= 0xF) {
            BOOL v22 = AppleCMMVerifySRGBGamma((const __CFData *)Tag);
          }
          goto LABEL_38;
        }
      }
      if (v15 < 0x14 || v10 > 2) {
        goto LABEL_34;
      }
      BOOL v22 = memcmp(off_1E54D6C70[v10], v14, v17) == 0;
LABEL_38:
      unint64_t Tag = v22;
      if (v10 <= 4)
      {
        ++v10;
        if (v22) {
          continue;
        }
      }
      return Tag;
    }
  }
  return Tag;
}

CFDataRef ColorSyncProfileCopyData(ColorSyncProfileRef prof, CFErrorRef *error)
{
  if (!prof) {
    goto LABEL_10;
  }
  CFTypeID v4 = CFGetTypeID(prof);
  if (ColorSyncProfileGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
  }
  if (v4 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
  {
LABEL_10:
    CFDataRef v7 = 0;
    goto LABEL_11;
  }
  if (*((_DWORD *)prof + 37) == 1)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)prof + 24));
    BOOL v5 = (const void *)*((void *)prof + 13);
    if (v5) {
      CFRelease(v5);
    }
    ProfileCFDataRef Data = createProfileData((CFDictionaryRef *)prof);
    *((void *)prof + 13) = ProfileData;
    if (!ProfileData) {
      goto LABEL_17;
    }
  }
  else
  {
    ProfileCFDataRef Data = (__CFData *)*((void *)prof + 13);
    if (!ProfileData) {
      goto LABEL_17;
    }
  }
  if (CFDataGetLength(ProfileData) >= 1)
  {
    vm_address_t BytePtr = (vm_address_t)CFDataGetBytePtr(*((CFDataRef *)prof + 13));
    unint64_t Length = CFDataGetLength(*((CFDataRef *)prof + 13));
    if (!(Length >> 31))
    {
      unint64_t v11 = Length;
      CFDataRef v12 = 0;
      CFDataRef v13 = 0;
      if (BytePtr && Length)
      {
        double v14 = (void *)MEMORY[0x1E4F14B00];
        uint64_t v15 = -*MEMORY[0x1E4F14B00];
        vm_address_t v16 = v15 & BytePtr;
        CFDataRef v12 = (void *)(((BytePtr + Length + *MEMORY[0x1E4F14B00] - 1) & v15) - (v15 & BytePtr));
        size_t v17 = (char *)mmap(0, (size_t)v12, 3, 4098, 1744830464, 0);
        if (v17 == (char *)-1)
        {
          CFDataRef v12 = 0;
          CFDataRef v13 = 0;
        }
        else
        {
          CFDataRef v13 = &v17[BytePtr - v16];
          BOOL v18 = v11 > 4 * *v14;
          double v19 = (unsigned int *)MEMORY[0x1E4F14960];
          if (!v18 || vm_copy(*MEMORY[0x1E4F14960], BytePtr, v11, (vm_address_t)v13)) {
            memcpy(v13, (const void *)BytePtr, v11);
          }
          if (MEMORY[0x18C13AA70](*v19, v13, v11, 1, 1)) {
            ColorSyncLog(2, (uint64_t)"%s: vm_protect failed: status %d.", v20, v21, v22, v23, v24, v25, (char)"copy_read_only");
          }
        }
      }
      if (v13 == (char *)BytePtr)
      {
        CFDataRef v7 = CFDataCreate(0, (const UInt8 *)BytePtr, v11);
      }
      else
      {
        context.version = 0;
        memset(&context.retain, 0, 40);
        context.info = v12;
        context.deallocate = (CFAllocatorDeallocateCallBack)vm_allocator_deallocate;
        context.preferredSize = 0;
        CFAllocatorRef v26 = CFAllocatorCreate(0, &context);
        CFDataRef v7 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)v13, v11, v26);
        CFRelease(v26);
      }
      goto LABEL_18;
    }
  }
LABEL_17:
  CFDataRef v7 = 0;
LABEL_18:
  if (*((_DWORD *)prof + 37) == 1) {
    pthread_mutex_unlock((pthread_mutex_t *)((char *)prof + 24));
  }
LABEL_11:
  if (error) {
    *error = 0;
  }
  return v7;
}

ColorSyncProfile *ColorSyncMakeProfile(CFTypeRef cf)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)char v81 = *(_OWORD *)"lppa";
  memset(&v81[16], 0, 32);
  *(_OWORD *)&bytes[16] = unk_18BE63A48;
  long long v78 = xmmword_18BE63A58;
  long long v79 = *(_OWORD *)"LPPA";
  long long v80 = xmmword_18BE63A78;
  *(_OWORD *)bytes = xmmword_18BE63A38;
  memset(v76, 0, sizeof(v76));
  *(_DWORD *)CFIndex v75 = 1954047348;
  if (!cf) {
    goto LABEL_15;
  }
  CFTypeID v2 = CFGetTypeID(cf);
  if (v2 != CFDictionaryGetTypeID()) {
    goto LABEL_15;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"profileVersion");
  if (Value)
  {
    CFStringRef v4 = Value;
    CFTypeID v5 = CFGetTypeID(Value);
    if (v5 == CFStringGetTypeID())
    {
      CFIndex Length = CFStringGetLength(v4);
      unint64_t v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
      if (v7 <= 0x1F)
      {
        long long buffer = 0u;
        long long v83 = 0u;
        if (CFStringGetCString(v4, (char *)&buffer, v7, 0x8000100u) == 1)
        {
          double v8 = strchr((char *)&buffer, 46);
          double v9 = v8;
          if (v8)
          {
            unint64_t v10 = strchr(v8 + 1, 46);
            if (v10)
            {
              unint64_t v11 = v10;
              char v12 = atoi(v10 + 1);
              char *v11 = 0;
            }
            else
            {
              char v12 = 0;
            }
            char v46 = atoi(v9 + 1);
            *double v9 = 0;
            LODWORD(v9) = 16 * v46;
          }
          else
          {
            char v12 = 0;
          }
          unsigned int v13 = (v9 | (atoi((const char *)&buffer) << 8) | v12 & 0xF) << 16;
          goto LABEL_16;
        }
      }
LABEL_15:
      unsigned int v13 = 34603008;
      goto LABEL_16;
    }
  }
  if (!CFDictionaryContainsKey((CFDictionaryRef)cf, @"paraR")) {
    goto LABEL_15;
  }
  unsigned int v13 = 34603008;
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"paraG"))
  {
    if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"paraB")) {
      unsigned int v13 = 0x4000000;
    }
    else {
      unsigned int v13 = 34603008;
    }
  }
LABEL_16:
  *(_DWORD *)&bytes[8] = v13;
  *(void *)&long long buffer = time(0);
  double v14 = localtime((const time_t *)&buffer);
  int v15 = LOWORD(v14->tm_min) | (v14->tm_sec << 16);
  unint64_t v16 = ((unint64_t)v14->tm_hour << 48) | ((unint64_t)LOWORD(v14->tm_mday) << 32) | ((v14->tm_mon << 16) + 0x10000) | (unsigned __int16)(v14->tm_year + 1900);
  *(void *)&long long buffer = v16;
  DWORD2(buffer) = v15;
  if (cf)
  {
    CFTypeID v17 = CFGetTypeID(cf);
    if (v17 == CFDictionaryGetTypeID())
    {
      CFArrayRef v18 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, @"Date");
      if (v18)
      {
        CFArrayRef v19 = v18;
        CFTypeID v20 = CFGetTypeID(v18);
        if (v20 == CFArrayGetTypeID() && CFArrayGetCount(v19) == 6)
        {
          CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v19, 0);
          CFNumberGetValue(ValueAtIndex, kCFNumberSInt16Type, &buffer);
          CFNumberRef v22 = (const __CFNumber *)CFArrayGetValueAtIndex(v19, 1);
          CFNumberGetValue(v22, kCFNumberSInt16Type, (char *)&buffer + 2);
          CFNumberRef v23 = (const __CFNumber *)CFArrayGetValueAtIndex(v19, 2);
          CFNumberGetValue(v23, kCFNumberSInt16Type, (char *)&buffer + 4);
          CFNumberRef v24 = (const __CFNumber *)CFArrayGetValueAtIndex(v19, 3);
          CFNumberGetValue(v24, kCFNumberSInt16Type, (char *)&buffer + 6);
          CFNumberRef v25 = (const __CFNumber *)CFArrayGetValueAtIndex(v19, 4);
          CFNumberGetValue(v25, kCFNumberSInt16Type, (char *)&buffer + 8);
          CFNumberRef v26 = (const __CFNumber *)CFArrayGetValueAtIndex(v19, 5);
          CFNumberGetValue(v26, kCFNumberSInt16Type, (char *)&buffer + 10);
          unint64_t v16 = buffer;
          int v15 = DWORD2(buffer);
        }
      }
    }
  }
  *(void *)&bytes[24] = v16;
  LODWORD(v78) = v15;
  snprintf(&v76[4], 0xC7uLL, "Copyright Apple Inc., %4d", (unsigned __int16)v16);
  if (!cf) {
    return 0;
  }
  CFTypeID v27 = CFGetTypeID(cf);
  if (v27 != CFDictionaryGetTypeID()) {
    return 0;
  }
  CFDataRef v28 = (ColorSyncProfile *)CFDictionaryGetValue((CFDictionaryRef)cf, @"profileType");
  double v29 = v28;
  if (!v28) {
    return v29;
  }
  if (!CFEqual(v28, @"abstract"))
  {
    if (CFEqual(v29, @"abstractWithVals"))
    {
      CFNumberRef v34 = longFromDictionary((const __CFDictionary *)cf, @"gridPoints");
      if ((unint64_t)v34 - 51 >= 0xFFFFFFFFFFFFFFCFLL) {
        uint64_t v35 = (uint64_t)v34;
      }
      else {
        uint64_t v35 = 17;
      }
      double v88 = doubleFromDictionary((const __CFDictionary *)cf, @"limitHueMin");
      double v89 = doubleFromDictionary((const __CFDictionary *)cf, @"limitHueMax");
      *(void *)&long long buffer = doubleFromDictionary((const __CFDictionary *)cf, @"brightnessDarks");
      *((void *)&buffer + 1) = doubleFromDictionary((const __CFDictionary *)cf, @"brightnessMids");
      *(void *)&long long v83 = doubleFromDictionary((const __CFDictionary *)cf, @"brightnessLights");
      double v86 = doubleFromDictionary((const __CFDictionary *)cf, @"hue");
      double v87 = doubleFromDictionary((const __CFDictionary *)cf, @"sat");
      double v36 = doubleFromDictionary((const __CFDictionary *)cf, @"tint");
      if (v36 == 0.0)
      {
        double v39 = doubleFromDictionary((const __CFDictionary *)cf, @"tintDarks");
        double v37 = doubleFromDictionary((const __CFDictionary *)cf, @"tintMids");
        double v38 = doubleFromDictionary((const __CFDictionary *)cf, @"tintLights");
      }
      else
      {
        double v37 = v36;
        double v38 = v36 * 0.5;
        double v39 = 0.0;
      }
      *((double *)&v83 + 1) = v39;
      double v84 = v37;
      double v85 = v38;
      CFDataRef v45 = (ColorSyncProfile *)create(0, 1, 0);
      double v29 = v45;
      if (v45)
      {
        qmemcpy(&bytes[12], "tsba baL baL", 12);
        addXYZTag(v45, @"wtpt", *(uint64_t *)((char *)&v80 + 4), HIDWORD(v80));
        addAbstractA2B(v29, v35, (void (*)(float *, float *, float *, uint64_t))_LabToLabValsProc, (uint64_t)&buffer);
      }
    }
    else
    {
      if (CFEqual(v29, @"displayRGB"))
      {
        DisplayRGB = makeDisplayRGB();
      }
      else if (CFEqual(v29, @"appleCopy"))
      {
        DisplayRGB = makeAppleCopy((uint64_t)bytes, (CFDictionaryRef)cf);
      }
      else if (CFEqual(v29, @"calGray"))
      {
        DisplayRGB = makeCalGray((uint64_t)bytes, (const __CFDictionary *)cf);
      }
      else if (CFEqual(v29, @"calRGB"))
      {
        DisplayRGB = makeCalRGB((uint64_t)bytes, (const __CFDictionary *)cf);
      }
      else if (CFEqual(v29, @"concatenate"))
      {
        DisplayRGB = makeConcatenated((uint64_t)bytes, cf);
      }
      else if (CFEqual(v29, @"tableBasedRGB"))
      {
        DisplayRGB = makeTableBasedRGB((uint64_t)bytes, cf);
      }
      else if (CFEqual(v29, @"copyTags"))
      {
        DisplayRGB = (ColorSyncProfile *)makeByCopyingTags((uint64_t)bytes, cf);
      }
      else if (CFEqual(v29, @"copyWithGTC"))
      {
        DisplayRGB = makeCopyWithFlexGTC((uint64_t)bytes, (CFDictionaryRef)cf);
      }
      else if (CFEqual(v29, @"FlexGTC.based.A2B0"))
      {
        DisplayRGB = makeCopyWithFlexGTCBasedA2B0((uint64_t)bytes, (CFDictionaryRef)cf, 0);
      }
      else if (CFEqual(v29, @"XYZ"))
      {
        DisplayRGB = makeXYZProfile((uint64_t)bytes);
      }
      else
      {
        if (!CFEqual(v29, @"Lab")) {
          return 0;
        }
        DisplayRGB = makeLabProfile((uint64_t)bytes, (const __CFDictionary *)cf);
      }
      double v29 = DisplayRGB;
    }
    if (!v29) {
      return v29;
    }
    goto LABEL_73;
  }
  CFNumberRef v30 = longFromDictionary((const __CFDictionary *)cf, @"gridPoints");
  if ((unint64_t)v30 - 51 >= 0xFFFFFFFFFFFFFFCFLL) {
    uint64_t v31 = (uint64_t)v30;
  }
  else {
    uint64_t v31 = 17;
  }
  CFDataRef v32 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)cf, @"refcon");
  if (v32) {
    vm_address_t BytePtr = CFDataGetBytePtr(v32);
  }
  else {
    vm_address_t BytePtr = 0;
  }
  CFDataRef v40 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)cf, @"proc");
  if (!v40) {
    return 0;
  }
  CFStringRef v41 = CFDataGetBytePtr(v40);
  if (!v41) {
    return 0;
  }
  BOOL v42 = (void (*)(float *, float *, float *, uint64_t))v41;
  unint64_t v43 = (ColorSyncProfile *)create(0, 1, 0);
  double v29 = v43;
  if (!v43) {
    return v29;
  }
  qmemcpy(&bytes[12], "tsba baL baL", 12);
  addXYZTag(v43, @"wtpt", *(uint64_t *)((char *)&v80 + 4), HIDWORD(v80));
  addAbstractA2B(v29, v31, v42, (uint64_t)BytePtr);
LABEL_73:
  CFAllocatorRef v47 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
  CFDataRef v48 = CFDataCreateWithBytesNoCopy(0, bytes, 128, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  if (v48)
  {
    CFDataRef v49 = v48;
    ColorSyncProfileSetHeader(v29, v48);
    CFRelease(v49);
  }
  CFStringRef v50 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"description");
  CFDataRef v51 = (__CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"asciiName");
  if ((unint64_t)v50 | (unint64_t)v51) {
    ColorSyncProfileSetDescriptionTag(v29, v50, v51);
  }
  char v52 = (__CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"copyright");
  double v53 = v52;
  if (*(_DWORD *)&bytes[8] >> 26)
  {
    if (!v52) {
      goto LABEL_92;
    }
    CFTypeID v54 = CFGetTypeID(v52);
    if (v54 == CFDictionaryGetTypeID())
    {
      ColorSyncProfileSetLocalizedStringDictionary(v29, @"cprt", v53);
      goto LABEL_96;
    }
    CFTypeID v60 = CFGetTypeID(v53);
    if (v60 == CFStringGetTypeID())
    {
      *(void *)&long long buffer = @"en_US";
      values = v53;
      CFDictionaryRef v61 = CFDictionaryCreate(0, (const void **)&buffer, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!v61) {
        goto LABEL_96;
      }
      double v59 = v61;
      ColorSyncProfileSetLocalizedStringDictionary(v29, @"cprt", v61);
    }
    else
    {
LABEL_92:
      size_t v62 = strlen(&v76[4]);
      unint64_t v63 = (__CFString *)CFStringCreateWithBytes(0, &v76[4], v62, 0x600u, 0);
      if (!v63) {
        goto LABEL_96;
      }
      double v59 = v63;
      *(void *)&long long buffer = @"en_US";
      values = v63;
      CFDictionaryRef v64 = CFDictionaryCreate(0, (const void **)&buffer, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v64)
      {
        CFDictionaryRef v65 = v64;
        ColorSyncProfileSetLocalizedStringDictionary(v29, @"cprt", v64);
        CFRelease(v65);
      }
    }
    goto LABEL_95;
  }
  if (v52 && (CFTypeID v56 = CFGetTypeID(v52), v56 == CFStringGetTypeID()))
  {
    CFStringGetCString(v53, &v76[4], 200, 0x600u);
    v76[203] = 0;
  }
  else if (ColorSyncProfileContainsTag(v29, @"cprt"))
  {
    goto LABEL_96;
  }
  size_t v57 = strlen(&v76[4]);
  CFDataRef v58 = CFDataCreateWithBytesNoCopy(0, v75, v57 + 9, v47);
  if (v58)
  {
    double v59 = v58;
    ColorSyncProfileSetTag(v29, @"cprt", v58);
LABEL_95:
    CFRelease(v59);
  }
LABEL_96:
  CFNumberRef v66 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"luminance");
  if (v66)
  {
    *(void *)&long long buffer = 0;
    if (CFNumberGetValue(v66, kCFNumberDoubleType, &buffer) == 1) {
      addXYZTag(v29, @"lumi", (unint64_t)(int)(*(double *)&buffer * 65536.0 + 0.5) << 32, 0);
    }
  }
  float64x2_t v67 = (const void **)MEMORY[0x1E4F1CFD0];
  if (*(_DWORD *)&bytes[8] >> 26 || CFDictionaryGetValue((CFDictionaryRef)cf, @"addMD5") == *v67)
  {
    *(ColorSyncMD5 *)&v81[4] = ColorSyncProfileGetMD5(v29);
    CFDataRef v68 = CFDataCreateWithBytesNoCopy(0, bytes, 128, v47);
    if (v68)
    {
      CFDataRef v69 = v68;
      ColorSyncProfileSetHeader(v29, v68);
      CFRelease(v69);
    }
  }
  if (CFDictionaryGetValue((CFDictionaryRef)cf, @"createImmutableCopy") == *v67)
  {
    CFDataRef v70 = ColorSyncProfileCopyData(v29, 0);
    if (v70)
    {
      CFDataRef v71 = v70;
      uint64_t v72 = create(v70, 0, 0);
      if (v72)
      {
        int8x16_t v73 = (ColorSyncProfile *)v72;
        CFRelease(v29);
        double v29 = v73;
      }
      CFRelease(v71);
    }
  }
  return v29;
}

ColorSyncMD5 ColorSyncProfileGetMD5(ColorSyncProfileRef prof)
{
  if (prof)
  {
    ColorSyncProfileRef v1 = prof;
    CFTypeID v2 = CFGetTypeID(prof);
    if (ColorSyncProfileGetTypeID_predicate != -1) {
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
    }
    if (v2 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    {
      if (*((_DWORD *)v1 + 37) == 1)
      {
        pthread_mutex_lock((pthread_mutex_t *)((char *)v1 + 24));
        CFDataRef v3 = (const void *)*((void *)v1 + 13);
        if (v3) {
          CFRelease(v3);
        }
        CFDataRef Value = (const __CFData *)CFDictionaryGetValue(*((CFDictionaryRef *)v1 + 11), @"iccHeader");
        ColorSyncMutableProfileRef MutableCopy = CFDataCreateMutableCopy(0, 0, Value);
        if (MutableCopy)
        {
          CFDataRef v6 = MutableCopy;
          Mutablevm_address_t BytePtr = CFDataGetMutableBytePtr(MutableCopy);
          *(void *)(MutableBytePtr + 84) = 0;
          *(void *)(MutableBytePtr + 92) = 0;
          CFDictionarySetValue(*((CFMutableDictionaryRef *)v1 + 11), @"iccHeader", v6);
          CFRelease(v6);
          ProfileCFDataRef Data = createProfileData((CFDictionaryRef *)v1);
          if (ProfileData)
          {
            double v9 = ProfileData;
            *((void *)v1 + 16) = computeMD5(ProfileData);
            *((void *)v1 + 17) = v10;
            if ((MutableBytePtr[8] & 0xFC) != 0)
            {
              *(_OWORD *)(MutableBytePtr + 84) = *((_OWORD *)v1 + 8);
              *((void *)v1 + 13) = createProfileData((CFDictionaryRef *)v1);
              CFRelease(v9);
            }
            else
            {
              *((void *)v1 + 13) = v9;
            }
          }
        }
        pthread_mutex_unlock((pthread_mutex_t *)((char *)v1 + 24));
      }
      prof = (ColorSyncProfileRef)*((void *)v1 + 16);
      uint64_t v11 = *((void *)v1 + 17);
    }
    else
    {
      uint64_t v11 = 0;
      prof = 0;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  *(void *)&result.digest[8] = v11;
  *(void *)result.digest = prof;
  return result;
}

__CFData *createProfileData(CFDictionaryRef *a1)
{
  CFMutableDictionaryRef Mutable = CFDataCreateMutable(0, 0);
  if (Mutable)
  {
    CFDictionaryRef v3 = a1[11];
    if (v3)
    {
      CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v3, @"iccHeader");
      unsigned int Count = CFDictionaryGetCount(a1[11]);
      if (Value)
      {
        if (Count >= 2)
        {
          unsigned int v6 = Count - 1;
          CFDictionaryRef v7 = a1[11];
          context[0] = Mutable;
          context[1] = v7;
          context[3] = 0;
          vm_address_t BytePtr = CFDataGetBytePtr(Value);
          CFDataAppendBytes(Mutable, BytePtr, 128);
          *(_DWORD *)bytes = bswap32(v6);
          CFDataAppendBytes(Mutable, bytes, 4);
          CFDataSetLength(Mutable, 12 * v6 + 132);
          void context[2] = 12 * v6 + 132;
          CFArrayRef v9 = ColorSyncProfileCopyTagSignatures((ColorSyncProfileRef)a1);
          if (v9)
          {
            CFArrayRef v10 = v9;
            CFIndex v11 = CFArrayGetCount(v9);
            v15.location = 0;
            v15.length = v11;
            CFArrayApplyFunction(v10, v15, (CFArrayApplierFunction)tagDataAdder, context);
            v16.location = 0;
            v16.length = v11;
            CFArrayApplyFunction(v10, v16, (CFArrayApplierFunction)tagReferenceAdder, context);
            LODWORD(v11) = bswap32(CFDataGetLength(Mutable));
            *(_DWORD *)CFDataGetMutableBytePtr(Mutable) = v11;
            CFRelease(v10);
          }
        }
      }
    }
  }
  return Mutable;
}

CFArrayRef ColorSyncProfileCopyTagSignatures(ColorSyncProfileRef prof)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (prof)
  {
    CFTypeID v3 = CFGetTypeID(prof);
    if (ColorSyncProfileGetTypeID_predicate != -1) {
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
    }
    if (v3 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID && Mutable != 0)
    {
      if (*((_DWORD *)prof + 37) == 1) {
        pthread_mutex_lock((pthread_mutex_t *)((char *)prof + 24));
      }
      CFDictionaryApplyFunction(*((CFDictionaryRef *)prof + 11), (CFDictionaryApplierFunction)tagSignatureAppender, Mutable);
      if (*((_DWORD *)prof + 37) == 1) {
        pthread_mutex_unlock((pthread_mutex_t *)((char *)prof + 24));
      }
      v6.length = CFArrayGetCount(Mutable);
      v6.location = 0;
      CFArraySortValues(Mutable, v6, (CFComparatorFunction)compareTags, 0);
    }
  }
  return Mutable;
}

void ColorSyncProfileSetHeader(ColorSyncMutableProfileRef prof, CFDataRef header)
{
  if (prof)
  {
    CFTypeID v4 = CFGetTypeID(prof);
    if (ColorSyncProfileGetTypeID_predicate != -1) {
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
    }
    if (v4 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID && *((_DWORD *)prof + 37) == 1)
    {
      CFTypeID v5 = CFGetTypeID(header);
      if (v5 == CFDataGetTypeID())
      {
        ColorSyncMutableProfileRef MutableCopy = CFDataCreateMutableCopy(0, 128, header);
        if (MutableCopy)
        {
          CFDictionaryRef v7 = MutableCopy;
          CFDataSetLength(MutableCopy, 128);
          Mutablevm_address_t BytePtr = CFDataGetMutableBytePtr(v7);
          *(int8x16_t *)Mutablevm_address_t BytePtr = vrev32q_s8(*(int8x16_t *)MutableBytePtr);
          int8x8_t v9 = vrev16_s8(*(int8x8_t *)(MutableBytePtr + 24));
          *((int8x8_t *)MutableBytePtr + 2) = vrev32_s8(*(int8x8_t *)(MutableBytePtr + 16));
          *((int8x8_t *)MutableBytePtr + 3) = v9;
          *((_WORD *)MutableBytePtr + 16) = bswap32(*((unsigned __int16 *)MutableBytePtr + 16)) >> 16;
          *((_WORD *)MutableBytePtr + 17) = bswap32(*((unsigned __int16 *)MutableBytePtr + 17)) >> 16;
          *(int8x16_t *)(MutableBytePtr + 36) = vrev32q_s8(*(int8x16_t *)(MutableBytePtr + 36));
          *(int8x16_t *)(MutableBytePtr + 52) = vrev32q_s8(*(int8x16_t *)(MutableBytePtr + 52));
          *(int8x16_t *)(MutableBytePtr + 68) = vrev32q_s8(*(int8x16_t *)(MutableBytePtr + 68));
          pthread_mutex_lock((pthread_mutex_t *)((char *)prof + 24));
          CFDictionarySetValue(*((CFMutableDictionaryRef *)prof + 11), @"iccHeader", v7);
          CFArrayRef v10 = (const void *)*((void *)prof + 13);
          if (v10)
          {
            CFRelease(v10);
            *((void *)prof + 13) = 0;
          }
          *((void *)prof + 16) = 0;
          *((void *)prof + 17) = 0;
          pthread_mutex_unlock((pthread_mutex_t *)((char *)prof + 24));
          CFRelease(v7);
        }
      }
    }
  }
}

void ColorSyncProfileSetDescriptionTag(const ColorSyncProfile *a1, const __CFString *a2, __CFString *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  CFDataRef v6 = ColorSyncProfileCopyHeader(a1);
  if (!v6) {
    goto LABEL_11;
  }
  CFDataRef v7 = v6;
  vm_address_t BytePtr = CFDataGetBytePtr(v6);
  if (!BytePtr || *((_DWORD *)BytePtr + 9) != 1633907568)
  {
    CFRelease(v7);
    goto LABEL_11;
  }
  unsigned int v9 = *((_DWORD *)BytePtr + 2);
  CFRelease(v7);
  if (!(v9 >> 26))
  {
LABEL_11:
    bzero(buffer, 0x401uLL);
    CFIndex usedBufLen = 0;
    bzero(v27, 0x802uLL);
    if (!a2) {
      goto LABEL_38;
    }
    CFTypeID v11 = CFGetTypeID(a2);
    if (v11 == CFStringGetTypeID())
    {
      CFIndex Length = CFStringGetLength(a2);
      if (CFStringGetCString(a2, buffer, 1024, 0x600u))
      {
        CFIndex v13 = 0;
      }
      else
      {
        v32.location = 0;
        v32.length = Length;
        CFStringGetBytes(a2, v32, 0x600u, 0x3Fu, 0, (UInt8 *)buffer, 1024, 0);
        v33.location = 0;
        v33.length = Length;
        CFStringGetBytes(a2, v33, 0x100u, 0x3Fu, 0, v27, 1024, &usedBufLen);
        CFIndex v13 = ++usedBufLen;
      }
      size_t v19 = strlen(buffer) + 1;
      uint64_t v21 = v27;
      CFTypeID v20 = a1;
      uint64_t v22 = v13;
      goto LABEL_31;
    }
    CFTypeID v14 = CFGetTypeID(a2);
    if (v14 == CFDictionaryGetTypeID())
    {
      ColorSyncProfileSetLocalizedStringDictionary(a1, @"dscm", a2);
      if (!a3) {
        return;
      }
      CFTypeID v15 = CFGetTypeID(a3);
      if (v15 != CFStringGetTypeID()) {
        return;
      }
      CFIndex v16 = CFStringGetLength(a3);
      if (!v16) {
        return;
      }
      v31.length = v16;
      v31.location = 0;
      if (!CFStringGetBytes(a3, v31, 0x600u, 0x3Fu, 0, (UInt8 *)buffer, 1024, 0)) {
        return;
      }
    }
    else
    {
LABEL_38:
      if (ColorSyncProfileContainsTag(a1, @"desc") || ColorSyncProfileContainsTag(a1, @"dscm")) {
        return;
      }
      CFTypeID v17 = a3 ? a3 : @"Unknown";
      CFTypeID v18 = CFGetTypeID(v17);
      if (v18 != CFStringGetTypeID()) {
        return;
      }
      CFStringGetLength(v17);
      if (!CFStringGetCString(v17, buffer, 1024, 0x600u)) {
        return;
      }
    }
    size_t v19 = strlen(buffer) + 1;
    CFTypeID v20 = a1;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
LABEL_31:
    setDESCTag(v20, buffer, v19, v21, v22);
    return;
  }
  if (a2)
  {
    CFTypeID v10 = CFGetTypeID(a2);
    if (v10 == CFDictionaryGetTypeID())
    {
      ColorSyncProfileSetLocalizedStringDictionary(a1, @"desc", a2);
    }
    else
    {
      CFTypeID v23 = CFGetTypeID(a2);
      if (v23 == CFStringGetTypeID())
      {
        *(void *)CFTypeID v27 = @"en_US";
        *(void *)long long buffer = a2;
        CFDictionaryRef v24 = CFDictionaryCreate(0, (const void **)v27, (const void **)buffer, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (v24)
        {
          CFDictionaryRef v25 = v24;
          ColorSyncProfileSetLocalizedStringDictionary(a1, @"desc", v24);
          CFRelease(v25);
        }
      }
    }
  }
}

void ColorSyncProfileSetLocalizedStringDictionary(ColorSyncProfile *a1, const __CFString *a2, const void *a3)
{
  bytes[5] = 0;
  __int16 v34 = 0;
  unsigned int v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  unsigned int v32 = 0;
  strcpy((char *)bytes, "mluc");
  *(void *)CFRange v31 = 0;
  CFMutableArrayRef Mutable = CFDataCreateMutable(0, 0);
  if (!a3) {
    goto LABEL_39;
  }
  CFTypeID v7 = CFGetTypeID(a3);
  if (v7 != CFDictionaryGetTypeID() || !CFDictionaryGetCount((CFDictionaryRef)a3) || !Mutable) {
    goto LABEL_39;
  }
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)a3);
  unsigned int v9 = (const void **)malloc_type_calloc(1uLL, 24 * Count, 0x9F70A7D4uLL);
  if (v9)
  {
    CFTypeID v10 = v9;
    CFStringRef signature = a2;
    CFTypeID v11 = &v9[Count];
    CFDictionaryGetKeysAndValues((CFDictionaryRef)a3, v9, v11);
    if (Count < 1)
    {
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = 0;
      CFIndex v13 = (const __CFString **)v10;
      CFIndex v14 = Count;
      do
      {
        if (localeCFStrToChars(*v13, 0) && (CFStringRef v15 = v13[Count]) != 0 && CFStringGetLength(v15))
        {
          ++v12;
        }
        else
        {
          v13[Count] = 0;
          *CFIndex v13 = 0;
        }
        ++v13;
        --v14;
      }
      while (v14);
    }
    unsigned int v35 = bswap32(v12);
    LODWORD(v36) = 201326592;
    CFDataAppendBytes(Mutable, bytes, 16);
    if (Count >= 1)
    {
      uint64_t v16 = 0;
      CFTypeID v17 = &v10[2 * Count];
      uint64_t v18 = 12 * v12 + 16;
      do
      {
        CFStringRef v19 = (const __CFString *)v10[v16];
        if (v19)
        {
          localeCFStrToChars(v19, (uint64_t)v31);
          unsigned int v20 = 2 * CFStringGetLength((CFStringRef)v11[v16]);
          *(_DWORD *)&v31[4] = v20;
          unsigned int v32 = v18;
          v17[v16] = (const void *)v18;
          if (v16)
          {
            uint64_t v21 = 0;
            while (1)
            {
              uint64_t v22 = v11[v21];
              if (v22)
              {
                if (CFEqual(v11[v16], v22)) {
                  break;
                }
              }
              if (v16 == ++v21)
              {
                unsigned int v20 = *(_DWORD *)&v31[4];
                LODWORD(v23) = v32;
                goto LABEL_27;
              }
            }
            unsigned int v20 = *(_DWORD *)&v31[4];
            v18 -= *(unsigned int *)&v31[4];
            CFTypeID v23 = v17[v21];
            v17[v16] = 0;
          }
          else
          {
            LODWORD(v23) = v18;
          }
LABEL_27:
          v18 += v20;
          *(_DWORD *)&v31[4] = bswap32(v20);
          unsigned int v32 = bswap32(v23);
          CFDataAppendBytes(Mutable, v31, 12);
        }
        ++v16;
      }
      while (v16 != Count);
      for (uint64_t i = 0; i != Count; ++i)
      {
        if (v10[i])
        {
          if (v17[i])
          {
            CFIndex Length = CFStringGetLength((CFStringRef)v11[i]);
            CFNumberRef v26 = (UniChar *)malloc_type_malloc(2 * Length, 0x651D9C10uLL);
            if (v26)
            {
              CFTypeID v27 = (UInt8 *)v26;
              v38.location = 0;
              v38.length = Length;
              CFStringGetCharacters((CFStringRef)v11[i], v38, v26);
              uint64_t v28 = Length & 0x7FFFFFFFFFFFFFFFLL;
              if ((Length & 0x7FFFFFFFFFFFFFFFLL) != 0)
              {
                uint64_t v29 = v27;
                do
                {
                  *(_WORD *)uint64_t v29 = bswap32(*(unsigned __int16 *)v29) >> 16;
                  v29 += 2;
                  --v28;
                }
                while (v28);
              }
              CFDataAppendBytes(Mutable, v27, 2 * Length);
              free(v27);
            }
          }
        }
      }
    }
    ColorSyncProfileSetTag(a1, signature, Mutable);
    free(v10);
LABEL_39:
    if (!Mutable) {
      return;
    }
  }
  CFRelease(Mutable);
}

uint64_t localeCFStrToChars(const __CFString *a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  __int16 v8 = 0;
  *(void *)long long buffer = 0;
  if (a2) {
    *(_DWORD *)a2 = 0;
  }
  uint64_t result = CFStringGetCString(a1, buffer, 9, 0x600u);
  if (result)
  {
    size_t v4 = strlen(buffer);
    uint64_t result = 0;
    if (v4 <= 5 && ((1 << v4) & 0x34) != 0)
    {
      if (a2)
      {
        *(_WORD *)a2 = *(_WORD *)buffer;
        if (v4 == 4)
        {
          uint64_t v5 = 3;
          uint64_t v6 = 2;
          goto LABEL_11;
        }
        if (v4 == 5)
        {
          uint64_t v5 = 4;
          uint64_t v6 = 3;
LABEL_11:
          *(unsigned char *)(a2 + 2) = *(unsigned char *)((unint64_t)buffer | v6);
          *(unsigned char *)(a2 + 3) = *(unsigned char *)((unint64_t)buffer | v5);
        }
      }
      return 1;
    }
  }
  return result;
}

ColorSyncProfile *makeCalRGB(uint64_t a1, const __CFDictionary *a2)
{
  size_t v4 = (ColorSyncProfile *)create(0, 1, 0);
  if (v4)
  {
    qmemcpy((void *)(a1 + 12), "rtnm BGR ZYX", 12);
    uint64_t v70 = 0;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    memset(v47, 0, sizeof(v47));
    double v48 = doubleFromDictionary(a2, @"whitePointx");
    double v5 = doubleFromDictionary(a2, @"whitePointy");
    double v49 = v5;
    if (v48 == 0.0 || v5 == 0.0 || !primariesFromDictionary(a2, (uint64_t)v47) || !checkPrimaries((double *)v47))
    {
      unint64_t v6 = icXYZFromDictionary(a2, @"wtpt");
      addXYZTag(v4, @"wtpt", v6, v7);
      if (CFDictionaryContainsKey(a2, @"bkpt") == 1)
      {
        unint64_t v8 = icXYZFromDictionary(a2, @"bkpt");
        addXYZTag(v4, @"bkpt", v8, v9);
      }
      unint64_t v10 = icXYZD50FromDictionary(a2, @"rXYZ");
      addXYZTag(v4, @"rXYZ", v10, v11);
      unint64_t v12 = icXYZD50FromDictionary(a2, @"gXYZ");
      addXYZTag(v4, @"gXYZ", v12, v13);
      unint64_t v14 = icXYZD50FromDictionary(a2, @"bXYZ");
      addXYZTag(v4, @"bXYZ", v14, v15);
    }
    else
    {
      ColorSyncProfileSetPrimaries(v4, (uint64_t)v47);
    }
    if (!CFDictionaryContainsKey(a2, @"paraR")
      || !CFDictionaryContainsKey(a2, @"paraG")
      || !CFDictionaryContainsKey(a2, @"paraB"))
    {
      uint64_t v16 = @"rGamma";
      if (CFDictionaryContainsKey(a2, @"rGamma")
        || (uint64_t v16 = @"gammaR", CFDictionaryContainsKey(a2, @"gammaR")))
      {
        float v17 = floatFromDictionary(a2, v16);
        addGammaTag(v4, @"rTRC", v17);
      }
      uint64_t v18 = @"gGamma";
      if (CFDictionaryContainsKey(a2, @"gGamma")
        || (uint64_t v18 = @"gammaG", CFDictionaryContainsKey(a2, @"gammaG")))
      {
        float v19 = floatFromDictionary(a2, v18);
        addGammaTag(v4, @"gTRC", v19);
      }
      if (CFDictionaryContainsKey(a2, @"bGamma"))
      {
        unsigned int v20 = @"bGamma";
      }
      else
      {
        if (!CFDictionaryContainsKey(a2, @"gammaB")) {
          return v4;
        }
        unsigned int v20 = @"gammaB";
      }
      float v21 = floatFromDictionary(a2, v20);
      addGammaTag(v4, @"bTRC", v21);
      return v4;
    }
    gammaCurveFromDictionary((uint64_t)&v39, a2, @"paraR");
    ColorSyncProfileSetParametricTRCTag(v4, @"rTRC", v39, v40, v41, v42, v43, v44, v45, v46);
    gammaCurveFromDictionary((uint64_t)&v31, a2, @"paraG");
    ColorSyncProfileSetParametricTRCTag(v4, @"gTRC", v31, v32, v33, v34, v35, v36, v37, v38);
    gammaCurveFromDictionary((uint64_t)&v23, a2, @"paraB");
    ColorSyncProfileSetParametricTRCTag(v4, @"bTRC", v23, v24, v25, v26, v27, v28, v29, v30);
  }
  return v4;
}

void addXYZTag(ColorSyncProfile *a1, const __CFString *a2, uint64_t a3, unsigned int a4)
{
  *(void *)bytes = 542792024;
  unsigned int v8 = bswap32(a3);
  unsigned int v9 = bswap32(HIDWORD(a3));
  unsigned int v10 = bswap32(a4);
  CFDataRef v6 = CFDataCreateWithBytesNoCopy(0, bytes, 20, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  ColorSyncProfileSetTag(a1, a2, v6);
  if (v6) {
    CFRelease(v6);
  }
}

void ColorSyncProfileSetTag(ColorSyncMutableProfileRef prof, CFStringRef signature, CFDataRef data)
{
  if (prof)
  {
    CFTypeID v6 = CFGetTypeID(prof);
    if (ColorSyncProfileGetTypeID_predicate != -1) {
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
    }
    if (v6 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    {
      if (data)
      {
        if (*((_DWORD *)prof + 37) == 1)
        {
          CFTypeID v7 = CFGetTypeID(data);
          if (v7 == CFDataGetTypeID())
          {
            CFDataRef v11 = data;
            CFTypeRef cf2 = 0;
            pthread_mutex_lock((pthread_mutex_t *)((char *)prof + 24));
            CFDictionaryApplyFunction(*((CFDictionaryRef *)prof + 11), (CFDictionaryApplierFunction)tagValueComparer, &v11);
            if (cf2 && !CFEqual(signature, cf2))
            {
              CFDictionarySetValue(*((CFMutableDictionaryRef *)prof + 11), signature, cf2);
            }
            else
            {
              CFDataRef Copy = CFDataCreateCopy(0, data);
              if (Copy)
              {
                CFDataRef v9 = Copy;
                if (CFDictionaryContainsValue(*((CFDictionaryRef *)prof + 11), signature)) {
                  removeReference((uint64_t)prof, signature);
                }
                CFDictionarySetValue(*((CFMutableDictionaryRef *)prof + 11), signature, v9);
                unsigned int v10 = (const void *)*((void *)prof + 13);
                if (v10)
                {
                  CFRelease(v10);
                  *((void *)prof + 13) = 0;
                }
                *((void *)prof + 16) = 0;
                *((void *)prof + 17) = 0;
                CFRelease(v9);
              }
            }
            pthread_mutex_unlock((pthread_mutex_t *)((char *)prof + 24));
          }
        }
      }
    }
  }
}

double doubleFromDictionary(const __CFDictionary *a1, const void *a2)
{
  if (!a2) {
    return 0.0;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  double valuePtr = 0.0;
  double v3 = 0.0;
  if (Value)
  {
    CFNumberRef v4 = Value;
    CFTypeID v5 = CFGetTypeID(Value);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberIsFloatType(v4))
      {
        if (CFNumberGetValue(v4, kCFNumberDoubleType, &valuePtr)) {
          return valuePtr;
        }
        else {
          return 0.0;
        }
      }
    }
  }
  return v3;
}

double gammaCurveFromDictionary(uint64_t a1, CFDictionaryRef theDict, void *key)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)a1 = 255;
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, key);
  if (Value)
  {
    CFArrayRef v6 = Value;
    CFTypeID v7 = CFGetTypeID(Value);
    if (v7 == CFArrayGetTypeID() && CFArrayGetCount(v6) == 8)
    {
      unsigned __int16 valuePtr = 255;
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v6, 0);
      if (CFNumberGetValue(ValueAtIndex, kCFNumberSInt16Type, &valuePtr) == 1 && valuePtr <= 4u)
      {
        *(_WORD *)a1 = valuePtr;
        double v16 = 0.0;
        CFNumberRef v9 = (const __CFNumber *)CFArrayGetValueAtIndex(v6, 1);
        if (CFNumberGetValue(v9, kCFNumberDoubleType, &v16) == 1) {
          *(double *)(a1 + 8) = v16;
        }
        CFNumberRef v10 = (const __CFNumber *)CFArrayGetValueAtIndex(v6, 2);
        if (CFNumberGetValue(v10, kCFNumberDoubleType, &v16) == 1) {
          *(double *)(a1 + 16) = v16;
        }
        CFNumberRef v11 = (const __CFNumber *)CFArrayGetValueAtIndex(v6, 3);
        if (CFNumberGetValue(v11, kCFNumberDoubleType, &v16) == 1) {
          *(double *)(a1 + 24) = v16;
        }
        CFNumberRef v12 = (const __CFNumber *)CFArrayGetValueAtIndex(v6, 4);
        if (CFNumberGetValue(v12, kCFNumberDoubleType, &v16) == 1) {
          *(double *)(a1 + 32) = v16;
        }
        CFNumberRef v13 = (const __CFNumber *)CFArrayGetValueAtIndex(v6, 5);
        if (CFNumberGetValue(v13, kCFNumberDoubleType, &v16) == 1) {
          *(double *)(a1 + 40) = v16;
        }
        CFNumberRef v14 = (const __CFNumber *)CFArrayGetValueAtIndex(v6, 6);
        if (CFNumberGetValue(v14, kCFNumberDoubleType, &v16) == 1) {
          *(double *)(a1 + 48) = v16;
        }
        CFNumberRef v15 = (const __CFNumber *)CFArrayGetValueAtIndex(v6, 7);
        if (CFNumberGetValue(v15, kCFNumberDoubleType, &v16) == 1)
        {
          double result = v16;
          *(double *)(a1 + 56) = v16;
        }
      }
    }
  }
  return result;
}

void ColorSyncProfileSetParametricTRCTag(ColorSyncProfile *a1, const __CFString *a2, unsigned int a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  *(void *)bytes = 1634886000;
  __int16 v14 = __rev16(a3);
  __int16 v15 = 0;
  unsigned int v16 = bswap32((int)(a4 * 65536.0 + 0.5));
  unsigned int v17 = bswap32((int)(a5 * 65536.0 + 0.5));
  unsigned int v18 = bswap32((int)(a6 * 65536.0 + 0.5));
  unsigned int v19 = bswap32((int)(a7 * 65536.0 + 0.5));
  unsigned int v20 = bswap32((int)(a8 * 65536.0 + 0.5));
  unsigned int v21 = bswap32((int)(a9 * 65536.0 + 0.5));
  unsigned int v22 = bswap32((int)(a10 * 65536.0 + 0.5));
  int v23 = 0;
  if (a3 <= 4)
  {
    CFDataRef v12 = CFDataCreateWithBytesNoCopy(0, bytes, qword_18BE63B40[a3], (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    ColorSyncProfileSetTag(a1, a2, v12);
    if (v12) {
      CFRelease(v12);
    }
  }
}

unint64_t icXYZD50FromDictionary(const __CFDictionary *a1, const void *a2)
{
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
  if (!Value) {
    goto LABEL_12;
  }
  CFArrayRef v4 = Value;
  CFTypeID v5 = CFGetTypeID(Value);
  if (v5 != CFArrayGetTypeID()) {
    goto LABEL_12;
  }
  float64x2_t valuePtr = 0uLL;
  uint64_t v23 = 0;
  CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v4, 0);
  if (!CFNumberGetValue(ValueAtIndex, kCFNumberDoubleType, &valuePtr)) {
    goto LABEL_12;
  }
  CFNumberRef v7 = (const __CFNumber *)CFArrayGetValueAtIndex(v4, 1);
  if (!CFNumberGetValue(v7, kCFNumberDoubleType, &valuePtr.f64[1])) {
    goto LABEL_12;
  }
  CFNumberRef v8 = (const __CFNumber *)CFArrayGetValueAtIndex(v4, 2);
  if (!CFNumberGetValue(v8, kCFNumberDoubleType, &v23)) {
    goto LABEL_12;
  }
  CFArrayRef v9 = (const __CFArray *)CFDictionaryGetValue(a1, @"wtpt");
  if (!v9) {
    goto LABEL_12;
  }
  CFArrayRef v10 = v9;
  CFTypeID v11 = CFGetTypeID(v9);
  if (v11 == CFArrayGetTypeID()
    && (float64x2_t v20 = 0uLL,
        uint64_t v21 = 0,
        CFNumberRef v12 = (const __CFNumber *)CFArrayGetValueAtIndex(v10, 0),
        CFNumberGetValue(v12, kCFNumberDoubleType, &v20))
    && (CFNumberRef v13 = (const __CFNumber *)CFArrayGetValueAtIndex(v10, 1),
        CFNumberGetValue(v13, kCFNumberDoubleType, &v20.f64[1]))
    && (CFNumberRef v14 = (const __CFNumber *)CFArrayGetValueAtIndex(v10, 2), CFNumberGetValue(v14, kCFNumberDoubleType, &v21)))
  {
    float64x2_t v18 = 0uLL;
    uint64_t v19 = 0;
    ColorSyncConvertDoubleXYZToD50(&valuePtr, &v20, &v18, 3, 0);
    unsigned int v15 = (int)(v18.f64[0] * 65536.0 + 0.5);
    uint64_t v16 = (int)(v18.f64[1] * 65536.0 + 0.5);
  }
  else
  {
LABEL_12:
    uint64_t v16 = 0;
    unsigned int v15 = 0;
  }
  return v15 | (unint64_t)(v16 << 32);
}

double ColorSyncConvertDoubleXYZToD50(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, int a4, uint64_t a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  long long v23 = xmmword_18BE63660;
  uint64_t v24 = 0x3FEA6594AF4F0D84;
  float64_t v7 = a1[1].f64[0];
  *a3 = *a1;
  a3[1].f64[0] = v7;
  double v29 = 0.0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  ColorSyncGetAdaptationMtx(a4, (double *)&v25, a2, (float64x2_t *)&v23);
  if (a5)
  {
    long long v8 = v25;
    long long v9 = v26;
    *(_OWORD *)a5 = v25;
    *(_OWORD *)(a5 + 16) = v9;
    long long v11 = v27;
    long long v10 = v28;
    *(_OWORD *)(a5 + 32) = v27;
    *(_OWORD *)(a5 + 48) = v10;
    double v12 = v29;
    *(double *)(a5 + 64) = v29;
    double v13 = *((double *)&v8 + 1);
    double v14 = *((double *)&v9 + 1);
    double v15 = *((double *)&v11 + 1);
    double v16 = *((double *)&v10 + 1);
  }
  else
  {
    double v13 = *((double *)&v25 + 1);
    *(void *)&long long v8 = v25;
    double v14 = *((double *)&v26 + 1);
    *(void *)&long long v9 = v26;
    double v15 = *((double *)&v27 + 1);
    *(void *)&long long v11 = v27;
    double v16 = *((double *)&v28 + 1);
    *(void *)&long long v10 = v28;
    double v12 = v29;
  }
  float64x2_t v17 = *a3;
  double v18 = a3[1].f64[0];
  double v19 = a3->f64[1];
  double v20 = vmlad_n_f64(vmuld_lane_f64(*(double *)&v11, *a3, 1), v14, a3->f64[0]) + v18 * v15;
  double v21 = 0.0;
  if (v20 < 0.0 || (double v21 = 1.0, v20 > 1.0)) {
    double v20 = v21;
  }
  double result = v19 * v13 + v17.f64[0] * *(double *)&v8 + v18 * *(double *)&v9;
  a3->f64[0] = result;
  a3->f64[1] = v20;
  a3[1].f64[0] = v19 * v16 + v17.f64[0] * *(double *)&v10 + v18 * v12;
  return result;
}

double ColorSyncGetAdaptationMtx(int a1, double *a2, float64x2_t *a3, float64x2_t *a4)
{
  v27[9] = *(double *)MEMORY[0x1E4F143B8];
  if (a1) {
    int v5 = a1;
  }
  else {
    int v5 = 2;
  }
  if ((v5 - 4) < 0xFFFFFFFD) {
    int v5 = 3;
  }
  CFArrayRef v6 = (double *)&Bradford_mtx;
  if (v5 == 2)
  {
    CFArrayRef v6 = (double *)&vonKries_mtx;
    float64_t v7 = (double *)&invVonKries_mtx;
  }
  else
  {
    float64_t v7 = (double *)&invBradford_mtx;
  }
  if (v5 == 1) {
    long long v8 = (double *)&identity_mtx;
  }
  else {
    long long v8 = v6;
  }
  if (v5 == 1) {
    long long v9 = (double *)&identity_mtx;
  }
  else {
    long long v9 = v7;
  }
  double v10 = a3[1].f64[0];
  double v11 = v8[1];
  double v12 = v8[2];
  double v13 = v8[3];
  double v14 = vmlad_n_f64(vmuld_lane_f64(v11, *a3, 1), *v8, a3->f64[0]) + v10 * v12;
  double v15 = v8[4];
  double v16 = v8[5];
  double v17 = vmlad_n_f64(vmuld_lane_f64(v15, *a3, 1), v13, a3->f64[0]) + v10 * v16;
  double v18 = v8[6];
  double v19 = v8[7];
  double v20 = v8[8];
  double v21 = vmlad_n_f64(vmuld_lane_f64(v19, *a3, 1), v18, a3->f64[0]) + v10 * v20;
  double v22 = a4[1].f64[0];
  double v23 = vmlad_n_f64(vmuld_lane_f64(v11, *a4, 1), *v8, a4->f64[0]) + v22 * v12;
  double v24 = vmlad_n_f64(vmuld_lane_f64(v15, *a4, 1), v13, a4->f64[0]) + v22 * v16;
  double v25 = vmlad_n_f64(vmuld_lane_f64(v19, *a4, 1), v18, a4->f64[0]);
  v27[0] = v23 / v14;
  memset(&v27[1], 0, 24);
  v27[4] = v24 / v17;
  memset(&v27[5], 0, 24);
  UInt8 v27[8] = (v25 + v22 * v20) / v21;
  MatrixMatrix(v8, v27, a2);

  return MatrixMatrix(a2, v9, a2);
}

double MatrixMatrix(double *a1, double *a2, double *a3)
{
  double v3 = *a1;
  double v4 = a1[1];
  double v5 = a1[2];
  double v6 = a1[3];
  double v7 = a1[4];
  double v8 = a1[5];
  double v9 = a1[6];
  double v10 = a1[7];
  double v11 = a1[8];
  double v12 = *a2;
  double v13 = a2[1];
  double v14 = a2[2];
  double v15 = a2[3];
  double v16 = a2[4];
  double v17 = a2[5];
  double v18 = a2[6];
  double v19 = a2[7];
  double v20 = a2[8];
  double v21 = v7 * v13 + v4 * *a2 + v10 * v14;
  *a3 = v6 * v13 + *a1 * *a2 + v9 * v14;
  a3[1] = v21;
  a3[2] = v8 * v13 + v5 * v12 + v11 * v14;
  a3[3] = v6 * v16 + v3 * v15 + v9 * v17;
  a3[4] = v7 * v16 + v4 * v15 + v10 * v17;
  a3[5] = v8 * v16 + v5 * v15 + v11 * v17;
  a3[6] = v6 * v19 + v3 * v18 + v9 * v20;
  a3[7] = v7 * v19 + v4 * v18 + v10 * v20;
  double result = v8 * v19 + v5 * v18 + v11 * v20;
  a3[8] = result;
  return result;
}

unint64_t icXYZFromDictionary(const __CFDictionary *a1, const void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
  if (Value
    && (v3 = Value, CFTypeID v4 = CFGetTypeID(Value), v4 == CFArrayGetTypeID())
    && (int v12 = 0,
        uint64_t valuePtr = 0,
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v3, 0),
        CFNumberGetValue(ValueAtIndex, kCFNumberFloatType, &valuePtr))
    && (CFNumberRef v6 = (const __CFNumber *)CFArrayGetValueAtIndex(v3, 1),
        CFNumberGetValue(v6, kCFNumberFloatType, (char *)&valuePtr + 4))
    && (CFNumberRef v7 = (const __CFNumber *)CFArrayGetValueAtIndex(v3, 2), CFNumberGetValue(v7, kCFNumberFloatType, &v12)))
  {
    unsigned int v8 = (int)(float)((float)(*(float *)&valuePtr * 65536.0) + 0.5);
    uint64_t v9 = (int)(float)((float)(*((float *)&valuePtr + 1) * 65536.0) + 0.5);
  }
  else
  {
    uint64_t v9 = 0;
    unsigned int v8 = 0;
  }
  return v8 | (unint64_t)(v9 << 32);
}

double convertSpecToXYZ(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 && (uint64_t v5 = *(void *)(a1 + 352)) != 0)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    CFNumberRef v6 = (double *)&v34;
    CFNumberRef v7 = (double *)&v33;
    xyFromTemp((unsigned __int16)v5, (double *)&v34, (double *)&v33);
  }
  else
  {
    CFNumberRef v6 = (double *)(a1 + 48);
    CFNumberRef v7 = (double *)(a1 + 56);
  }
  double v8 = *v7;
  double v9 = *(double *)(a1 + 8);
  double v10 = *(double *)(a1 + 16);
  double v11 = *(double *)(a1 + 24);
  double v12 = *(double *)(a1 + 32);
  double v13 = *(double *)(a1 + 40);
  double v14 = *(double *)a1 - v12;
  double v15 = *(double *)a1 - v10;
  double v16 = *v7 * ((v10 - v12) * v9 - v14 * v11 + v15 * v13);
  double v17 = *v6 - v12;
  double v18 = *v6 - v10;
  double v19 = v9 * ((v10 - v12) * *v7 - v17 * v11 + v18 * v13) / v16;
  double v20 = v14 * *v7 - v17 * v9;
  double v21 = *v6 - *(double *)a1;
  double v22 = -(v11 * (v20 + v21 * v13)) / v16;
  double v23 = v13 * (v15 * *v7 - v18 * v9 + v21 * v11) / v16;
  double v24 = *(double *)a1 * v19 / v9;
  double v25 = ((1.0 - *(double *)a1) / v9 + -1.0) * v19;
  double v26 = v10 * v22 / v11;
  double v27 = ((1.0 - v10) / v11 + -1.0) * v22;
  double v28 = v12 * v23 / v13;
  double v29 = ((1.0 - v12) / v13 + -1.0) * v23;
  double v30 = *v6 / *v7;
  double v31 = 1.0 - *v6 - *v7;
  *(double *)a2 = v24;
  *(double *)(a2 + 8) = v19;
  *(double *)(a2 + 16) = v25;
  *(double *)(a2 + 24) = v26;
  *(double *)(a2 + 32) = v22;
  *(double *)(a2 + 40) = v27;
  *(double *)(a2 + 48) = v28;
  *(double *)(a2 + 56) = v23;
  *(double *)(a2 + 64) = v29;
  *(double *)(a2 + 72) = v30;
  *(void *)(a2 + 80) = 0x3FF0000000000000;
  double result = v31 / v8;
  *(double *)(a2 + 88) = result;
  return result;
}

float floatFromDictionary(const __CFDictionary *a1, const void *a2)
{
  if (!a2) {
    return 0.0;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  float valuePtr = 0.0;
  float v3 = 0.0;
  if (Value)
  {
    CFNumberRef v4 = Value;
    CFTypeID v5 = CFGetTypeID(Value);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberIsFloatType(v4))
      {
        if (CFNumberGetValue(v4, kCFNumberFloatType, &valuePtr)) {
          return valuePtr;
        }
        else {
          return 0.0;
        }
      }
    }
  }
  return v3;
}

void addGammaTag(ColorSyncProfile *a1, const __CFString *a2, float a3)
{
  uint64_t v6 = 1987212643;
  int v7 = (a3 != 0.0) << 24;
  __int16 v8 = __rev16((int)(a3 * 256.0 + 0.5));
  CFDataRef v5 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)&v6, 14, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  ColorSyncProfileSetTag(a1, a2, v5);
  if (v5) {
    CFRelease(v5);
  }
}

void setDESCTag(ColorSyncProfile *a1, const void *a2, size_t a3, const void *a4, uint64_t a5)
{
  uint64_t v10 = a3 + 2 * a5 + 90;
  CFMutableArrayRef Mutable = CFDataCreateMutable(0, v10);
  if (Mutable)
  {
    double v12 = Mutable;
    CFDataSetLength(Mutable, v10);
    Mutablevm_address_t BytePtr = CFDataGetMutableBytePtr(v12);
    if (MutableBytePtr)
    {
      double v14 = MutableBytePtr;
      bzero(MutableBytePtr, v10);
      *(_DWORD *)double v14 = 1668506980;
      *((_DWORD *)v14 + 2) = bswap32(a3);
      if (a3)
      {
        memcpy(v14 + 12, a2, a3);
        uint64_t v15 = a3 + 12;
      }
      else
      {
        uint64_t v15 = 12;
      }
      double v16 = &v14[v15];
      *(_DWORD *)double v16 = 0;
      *((_DWORD *)v16 + 1) = bswap32(a5);
      if (a5) {
        swab(a4, &v14[v15 + 8], 2 * a5);
      }
      ColorSyncProfileSetTag(a1, @"desc", v12);
    }
    CFRelease(v12);
  }
}

ColorSyncProfile *makeCalGray(uint64_t a1, const __CFDictionary *a2)
{
  CFNumberRef v4 = (ColorSyncProfile *)create(0, 1, 0);
  if (v4)
  {
    qmemcpy((void *)(a1 + 12), "rtnmYARG ZYX", 12);
    unint64_t v5 = icXYZFromDictionary(a2, @"wtpt");
    addXYZTag(v4, @"wtpt", v5, v6);
    if (CFDictionaryContainsKey(a2, @"bkpt") == 1)
    {
      unint64_t v7 = icXYZFromDictionary(a2, @"bkpt");
      addXYZTag(v4, @"bkpt", v7, v8);
    }
    if (CFDictionaryContainsKey(a2, @"paraK") == 1)
    {
      gammaCurveFromDictionary((uint64_t)&v11, a2, @"paraK");
      ColorSyncProfileSetParametricTRCTag(v4, @"kTRC", v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      float v9 = floatFromDictionary(a2, @"kGamma");
      addGammaTag(v4, @"kTRC", v9);
    }
  }
  return v4;
}

uint64_t __ColorSyncProfileGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID = result;
  return result;
}

uint64_t __ColorSyncTransformIteratorGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  ColorSyncTransformIteratorGetTypeID_kColorSyncTransformIteratorRuntimeID = result;
  return result;
}

uint64_t __ColorSyncTransformGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID = result;
  return result;
}

uint64_t __ColorSyncTRCGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  ColorSyncTRCGetTypeID_kColorSyncTRCRuntimeID = result;
  return result;
}

uint64_t __ColorSyncMatrixGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  ColorSyncMatrixGetTypeID_kColorSyncMatrixRuntimeID = result;
  return result;
}

uint64_t __ColorSyncCMMGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  ColorSyncCMMGetTypeID_kColorSyncCMMRuntimeID = result;
  return result;
}

CFAllocatorRef ___ZL19CMMBytesDeallocatorv_block_invoke()
{
  CFAllocatorRef result = CFAllocatorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CFB8], &context);
  CMMBytesDeallocator(void)::cmmAllocator = (uint64_t)result;
  return result;
}

CMMConvNode *ConversionManager::MakeConversionSequence()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v475 = v3;
  v500 = (ConversionManager *)v0;
  uint64_t v526 = *MEMORY[0x1E4F143B8];
  memset(v510, 0, 24);
  uint64_t v505 = 0;
  uint64_t v506 = 0;
  v502 = &unk_1ED981880;
  long long v503 = 0uLL;
  v504 = 0;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16) - v4;
  if (!v5)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  CFDictionaryRef v6 = v2;
  uint64_t v7 = v1;
  unint64_t v8 = v5 / 40;
  if (v8 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = v8;
  }
  if (*(unsigned char *)(v4 + 34))
  {
    unint64_t v10 = 0;
    unsigned __int16 v11 = (unsigned __int8 *)(v4 + 74);
    while (v9 - 1 != v10)
    {
      int v12 = *v11;
      v11 += 40;
      ++v10;
      if (!v12) {
        goto LABEL_12;
      }
    }
    unint64_t v10 = v9;
LABEL_12:
    BOOL v13 = v10 < v8;
  }
  else
  {
    BOOL v13 = 1;
  }
  BOOL v476 = v13;
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  uint64_t v14 = v0 + 16;
  float HDRMediaReferenceWhite = ColorSyncOptionsGetHDRMediaReferenceWhite(v2);
  BOOL v16 = ColorSyncOptionsLegacyHDREcosystemRequested(v6);
  float v17 = 100.0;
  int v18 = HDRMediaReferenceWhite == 100.0 || v16;
  *(unsigned char *)(v14 + 45) = v18;
  if (!v18) {
    float v17 = HDRMediaReferenceWhite;
  }
  v499 = (CMMConvNode **)v14;
  *(float *)(v14 + 48) = v17;
  CFDictionaryRef theDict = v6;
  uint64_t v482 = v7;
  if (v6)
  {
    CFTypeID v19 = CFGetTypeID(v6);
    BOOL v43 = v19 == CFDictionaryGetTypeID();
    CFDictionaryRef v6 = theDict;
    if (v43)
    {
      CFDictionaryRef v6 = theDict;
      if (CFDictionaryContainsKey(theDict, @"com.apple.cmm.kColorSyncHDRMediaReferenceWhite"))
      {
        if (ColorSyncOptionsGetHDRMediaReferenceWhite(theDict) == 203.0)
        {
          *((_DWORD *)v500 + 16) = 1128988672;
          *((unsigned char *)v500 + 61) = 0;
        }
      }
    }
  }
  if (ColorSyncOptionsReferenceWhiteReferredToneMappingRequested(v6))
  {
    *((_DWORD *)v500 + 16) = 1128988672;
    *((unsigned char *)v500 + 61) = 0;
  }
  if (ColorSyncOptionsDisplayReferredToneMappingRequested(v6))
  {
    *((_DWORD *)v500 + 16) = 1128988672;
    *((unsigned char *)v500 + 61) = 0;
  }
  uint64_t v20 = *(void *)(v7 + 8);
  uint64_t v21 = *(void *)(v7 + 16);
  if (v20 == v21) {
    goto LABEL_724;
  }
  v490 = 0;
  int v22 = 0;
  v474 = (const void *)*MEMORY[0x1E4F1CFD0];
  unsigned int v491 = -1;
  int v23 = 1022739087;
  int v473 = 1036831949;
  do
  {
    uint64_t v24 = v491;
    double v25 = v490;
    unsigned int v491 = *(_DWORD *)(v20 + 16);
    unsigned int v481 = *(_DWORD *)(v20 + 20);
    uint64_t v485 = *(void *)(v7 + 8);
    double v26 = *(const UInt8 ***)(v20 + 8);
    char v501 = 0;
    int v479 = *(unsigned __int8 *)(v20 + 33);
    uint64_t v487 = v20;
    v490 = (CMMProfile *)v26;
    if (*v499)
    {
LABEL_60:
      double v45 = v500;
      unint64_t v46 = *((void *)v500 + 10);
      goto LABEL_61;
    }
    double v27 = (const ColorSyncProfile *)v26[2];
    unint64_t FlexTRCOptions = (void *)ColorSyncOptionsGetFlexTRCOptions(v27, theDict);
    if (FlexTRCOptions)
    {
      unint64_t FlexTRCOptions = ColorSyncProfileCopyFlexGTCInfo((uint64_t)v27);
      if (!FlexTRCOptions) {
        goto LABEL_56;
      }
      double v29 = FlexTRCOptions;
      CICPInfo = ColorSyncProfileGetCICPInfo((const UInt8 *)v27);
      if (!CICPInfo)
      {
        CFRelease(v29);
        unint64_t FlexTRCOptions = 0;
LABEL_56:
        uint64_t v20 = v487;
        goto LABEL_59;
      }
      int v31 = *CICPInfo;
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v29, (const void *)kColorSyncPreGainMapCICP);
      if (Value && (CFNumberRef v33 = Value, v34 = CFGetTypeID(Value), v34 == CFNumberGetTypeID()))
      {
        LODWORD(valuePtr[0]) = 0;
        if (CFNumberGetValue(v33, kCFNumberSInt32Type, valuePtr) == 1) {
          int v35 = LOBYTE(valuePtr[0]);
        }
        else {
          int v35 = 0;
        }
      }
      else
      {
        int v35 = 0;
      }
      CFNumberRef v36 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v29, (const void *)kColorSyncPostGainMapCICP);
      if (v36 && (CFNumberRef v37 = v36, v38 = CFGetTypeID(v36), v38 == CFNumberGetTypeID()))
      {
        LODWORD(valuePtr[0]) = 0;
        int v39 = CFNumberGetValue(v37, kCFNumberSInt32Type, valuePtr);
        unsigned __int8 v40 = valuePtr[0];
        if (v39 != 1) {
          unsigned __int8 v40 = 0;
        }
      }
      else
      {
        unsigned __int8 v40 = 0;
      }
      BOOL v41 = v31 == v35;
      if (!v40) {
        BOOL v41 = 0;
      }
      BOOL v42 = v31 != v40 && v41;
      CFRelease(v29);
      BOOL v43 = v31 == v35 && !v42;
      if (v43) {
        unint64_t FlexTRCOptions = 0;
      }
      else {
        unint64_t FlexTRCOptions = ColorSyncProfileCopyFlexGTCInfo((uint64_t)v27);
      }
      uint64_t v20 = v487;
      double v26 = (const UInt8 **)v490;
    }
LABEL_59:
    uint64_t v44 = *((void *)v500 + 2);
    *((void *)v500 + 9) = FlexTRCOptions;
    if (v44) {
      goto LABEL_60;
    }
    int8x16_t v73 = (const ColorSyncProfile *)v26[2];
    if (ColorSyncOptionsGetFlexLumaScalingOptions(v73, theDict)
      || (unint64_t v46 = (unint64_t)ColorSyncOptionsGetFlexTRCOptions(v73, theDict)) != 0)
    {
      unint64_t v46 = (unint64_t)ColorSyncProfileCopyFlexGTCInfo((uint64_t)v73);
    }
    double v45 = v500;
LABEL_61:
    *((void *)v45 + 10) = v46;
    if (!*((void *)v45 + 2) && *((void *)v45 + 9) | v46)
    {
      *((_DWORD *)v45 + 16) = 1128988672;
      *((unsigned char *)v45 + 61) = 0;
    }
    CFAllocatorRef v47 = ColorSyncProfileGetCICPInfo(v26[2]);
    if (v47) {
      int v48 = *(_DWORD *)v47;
    }
    else {
      int v48 = 0;
    }
    uint64_t v484 = v21 - 40;
    *((_DWORD *)v500 + 22) = v48;
    *((unsigned char *)v500 + 40) = *(unsigned char *)(v20 + 34);
    *((_DWORD *)v500 + 8) = (*((uint64_t (**)(const UInt8 **, void))*v26 + 6))(v26, v491);
    *((_DWORD *)v500 + 9) = (*(uint64_t (**)(CMMProfile *, void, char *))(*(void *)v490 + 56))(v490, v491, &v501);
    uint64_t v49 = v487;
    *(_WORD *)((char *)v500 + 45) = *(_WORD *)(v487 + 27);
    *(_DWORD *)((char *)v500 + 41) = *(_DWORD *)(v487 + 29);
    *(_DWORD *)((char *)v500 + 57) = *(_DWORD *)(v487 + 35);
    if (v20 == v21 - 40)
    {
      char v50 = 0;
      BOOL v51 = 0;
    }
    else
    {
      char v50 = *(unsigned char *)(v487 + 69);
      BOOL v51 = *(unsigned char *)(v487 + 70) != 0;
    }
    uint64_t v52 = v21 - 40;
    uint64_t v53 = v485;
    *((unsigned char *)v500 + 47) = v50;
    *((unsigned char *)v500 + 48) = v51;
    if (v487 == v485)
    {
      char v54 = 0;
      BOOL v55 = 0;
    }
    else
    {
      char v54 = *(unsigned char *)(v487 - 11);
      BOOL v55 = *(unsigned char *)(v487 - 10) != 0;
    }
    *((unsigned char *)v500 + 52) = v54;
    *((unsigned char *)v500 + 53) = v55;
    BOOL v56 = v487 != v484 && *(unsigned char *)(v487 + 68) != 0;
    *((unsigned char *)v500 + 50) = v56;
    BOOL v57 = v487 != v485 && *(unsigned char *)(v487 - 12) != 0;
    *((unsigned char *)v500 + 55) = v57;
    BOOL v58 = v487 != v484 && *(unsigned char *)(v487 + 67) != 0;
    *((unsigned char *)v500 + 49) = v58;
    BOOL v59 = v487 != v485 && *(unsigned char *)(v487 - 13) != 0;
    *((unsigned char *)v500 + 54) = v59;
    BOOL v60 = v487 != v484 && *(unsigned char *)(v487 + 74) != 0;
    *((unsigned char *)v500 + 51) = v60;
    BOOL v61 = v487 != v485 && *(unsigned char *)(v487 - 6) != 0;
    *((unsigned char *)v500 + 56) = v61;
    if (v491 == 4)
    {
      int v483 = 0;
    }
    else
    {
      int v483 = (*(uint64_t (**)(CMMProfile *, CMMProfile *, uint64_t))(*(void *)v490 + 72))(v490, v25, v24);
      uint64_t v49 = v487;
      uint64_t v52 = v21 - 40;
      uint64_t v53 = v485;
    }
    if (v49 != v53)
    {
      int v62 = *((_DWORD *)v500 + 8);
      if (v22 == 1347182946) {
        int v63 = 1145856354;
      }
      else {
        int v63 = v22;
      }
      if (v62 == 1347182946) {
        int v62 = 1145856354;
      }
      if (v63 != v62)
      {
        v465 = __cxa_allocate_exception(4uLL);
        _DWORD *v465 = -178;
      }
    }
    if (v49 == v52) {
      int v480 = 0;
    }
    else {
      int v480 = (*(uint64_t (**)(void, void))(**(void **)(v49 + 48) + 48))(*(void *)(v49 + 48), *(unsigned int *)(v49 + 56));
    }
    if (ColorSyncOptionsGetFlexTRCOptions(*((const ColorSyncProfile **)v490 + 2), theDict)) {
      LODWORD(v64) = *((void *)v500 + 9) == 0;
    }
    else {
      LODWORD(v64) = 0;
    }
    uint64_t v65 = (uint64_t)v490;
    if (!(*(unsigned int (**)(CMMProfile *))(*(void *)v490 + 104))(v490)) {
      goto LABEL_233;
    }
    uint64_t v66 = *((void *)v490 + 25);
    if (v66)
    {
      long long v67 = (unsigned __int8 *)*((void *)v490 + 28);
LABEL_526:
      long long v503 = *(_OWORD *)(v65 + 208);
      v504 = v67;
      v510[0] = *(_OWORD *)(v65 + 184);
      *(void *)&v510[1] = v66;
      LuminanceCoefficients = ColorSyncProfileGetLuminanceCoefficients(*(float **)(v65 + 16));
      if (LuminanceCoefficients) {
        uint64_t v320 = 0;
      }
      else {
        uint64_t v320 = 4294967126;
      }
      CMMThrowExceptionOnError(v320);
      unsigned int v322 = *(_DWORD *)LuminanceCoefficients;
      unsigned int v321 = *((_DWORD *)LuminanceCoefficients + 1);
      unsigned int v324 = *((_DWORD *)LuminanceCoefficients + 2);
      unsigned int v323 = *((_DWORD *)LuminanceCoefficients + 3);
      switch(v491)
      {
        case 1u:
          BOOL v325 = v487 != v484 && *((unsigned char *)v500 + 51) == 0;
          v326 = theDict;
          int v327 = ColorSyncOptionsReferenceWhiteReferredToneMappingRequested(theDict);
          unint64_t FlexLumaScalingOptions = ColorSyncOptionsGetFlexLumaScalingOptions(*((const ColorSyncProfile **)v490 + 2), theDict);
          v329 = ColorSyncOptionsGetFlexTRCOptions(*((const ColorSyncProfile **)v490 + 2), theDict);
          if (v329 && !*((void *)v500 + 10))
          {
            v472 = __cxa_allocate_exception(4uLL);
            _DWORD *v472 = -171;
          }
          if (FlexLumaScalingOptions && !*((void *)v500 + 10))
          {
            v471 = __cxa_allocate_exception(4uLL);
            _DWORD *v471 = -171;
          }
          if (theDict)
          {
            BOOL v330 = FlexLumaScalingOptions != 0;
            v331 = CFDictionaryGetValue(theDict, @"com.apple.cmm.ApplyToneMappingForBT2100");
            BOOL v332 = CFDictionaryGetValue(theDict, @"com.apple.cmm.SkipToneMappingForBT2100") == v474;
            if (v331 == v474) {
              int v333 = 1;
            }
            else {
              int v333 = v327;
            }
            int v327 = v333 | v330;
            v326 = theDict;
            unsigned int v334 = ColorSyncOptionsDisplayReferredToneMappingRequested(theDict);
          }
          else
          {
            unsigned int v334 = 0;
            BOOL v332 = 0;
            if (FlexLumaScalingOptions) {
              int v327 = 1;
            }
          }
          if (v329) {
            int v335 = 1;
          }
          else {
            int v335 = v327;
          }
          if ((*((unsigned char *)v500 + 41) || *((unsigned char *)v500 + 46)) && (((v325 | v335) & 1) != 0 || *((unsigned char *)v500 + 48)))
          {
            if (((!v332 | v334) & 1) == 0) {
              goto LABEL_563;
            }
          }
          else if (!v334)
          {
LABEL_563:
            if (*((unsigned char *)v500 + 42))
            {
              valuePtr[0] = xmmword_18BE63740;
              *(void *)&valuePtr[1] = 0;
              *((void *)&valuePtr[1] + 1) = __PAIR64__(v321, v322);
              *(void *)&valuePtr[2] = __PAIR64__(v323, v324);
              memset((char *)&valuePtr[2] + 8, 0, 72);
              ConversionManager::AddMatrixConv((uint64_t)v500, (const __CFDictionary *)v510, (uint64_t)&v502, *((unsigned __int8 *)v500 + 40), 1, (float32x2_t *)valuePtr, v326);
            }
            else
            {
              ConversionManager::AddMatrixConv((uint64_t)v500, (const __CFDictionary *)v510, (uint64_t)&v502, *((unsigned __int8 *)v500 + 40), 1, 0, v326);
            }
            goto LABEL_566;
          }
          valuePtr[0] = xmmword_18BE63750;
          *(void *)&valuePtr[1] = 0;
          *((void *)&valuePtr[1] + 1) = __PAIR64__(v321, v322);
          *(void *)&valuePtr[2] = __PAIR64__(v323, v324);
          memset((char *)&valuePtr[2] + 8, 0, 72);
          if (*((unsigned char *)v500 + 48)) {
            DWORD2(valuePtr[0]) = 1148846080;
          }
          ConversionManager::AddMatrixConv((uint64_t)v500, (const __CFDictionary *)v510, (uint64_t)&v502, *((unsigned __int8 *)v500 + 40), 1, (float32x2_t *)valuePtr, v326);
          break;
        case 2u:
          valuePtr[0] = xmmword_18BE63730;
          *(void *)&valuePtr[1] = 0;
          *((void *)&valuePtr[1] + 1) = __PAIR64__(v321, v322);
          *(void *)&valuePtr[2] = __PAIR64__(v323, v324);
          memset((char *)&valuePtr[2] + 8, 0, 72);
          ConversionManager::AddInvMatrixConv((uint64_t)v500, (CMMXYZTag *(*)[3])v510, &v502, *((unsigned __int8 *)v500 + 40), 2, (uint64_t)valuePtr, theDict);
          goto LABEL_566;
        case 3u:
          goto LABEL_403;
        case 9u:
          valuePtr[0] = xmmword_18BE63730;
          *(void *)&valuePtr[1] = 0;
          *((void *)&valuePtr[1] + 1) = __PAIR64__(v321, v322);
          *(void *)&valuePtr[2] = __PAIR64__(v323, v324);
          memset((char *)&valuePtr[2] + 8, 0, 72);
          ConversionManager::AddMatrixConv((uint64_t)v500, (const __CFDictionary *)v510, (uint64_t)&v502, *((unsigned __int8 *)v500 + 40), 9, (float32x2_t *)valuePtr, theDict);
          goto LABEL_566;
        case 0xAu:
          valuePtr[0] = xmmword_18BE63730;
          *(void *)&valuePtr[1] = 0;
          *((void *)&valuePtr[1] + 1) = __PAIR64__(v321, v322);
          *(void *)&valuePtr[2] = __PAIR64__(v323, v324);
          memset((char *)&valuePtr[2] + 8, 0, 72);
          ConversionManager::AddInvMatrixConv((uint64_t)v500, (CMMXYZTag *(*)[3])v510, &v502, *((unsigned __int8 *)v500 + 40), 10, (uint64_t)valuePtr, theDict);
          if (v487 != v484) {
            goto LABEL_538;
          }
          goto LABEL_566;
        case 0xDu:
          ConversionManager::AddMatrixConv((uint64_t)v500, (const __CFDictionary *)v510, (uint64_t)&v502, *((unsigned __int8 *)v500 + 40), 13, 0, theDict);
          goto LABEL_566;
        case 0xEu:
          ConversionManager::AddInvMatrixConv((uint64_t)v500, (CMMXYZTag *(*)[3])v510, &v502, *((unsigned __int8 *)v500 + 40), 14, 0, theDict);
          if (v487 != v484)
          {
LABEL_538:
            ConversionManager::AddLinearMatrixConv((CMMMemMgr **)v500, (CMMXYZTag *(*)[3])v510);
            *((_DWORD *)v500 + 9) = 1482250784;
          }
          goto LABEL_566;
        default:
          goto LABEL_566;
      }
      goto LABEL_566;
    }
    long long v68 = (unsigned __int8 **)((char *)v490 + 184);
    LODWORD(valuePtr[0]) = 0;
    int v69 = ColorSyncProfileContainsSupportedCICP(*((void *)v490 + 2), valuePtr);
    if (v69)
    {
      switch(LOBYTE(valuePtr[0]))
      {
        case 0xCu:
          long long v83 = CMMBase::NewInternal(0x38uLL, *((void ***)v490 + 3));
          if (ColorSyncProfileGetDisplayP3RedPrimary_predicate != -1) {
            dispatch_once(&ColorSyncProfileGetDisplayP3RedPrimary_predicate, &__block_literal_global_289);
          }
          uint64_t v84 = *((void *)v490 + 20);
          while (v84)
          {
            uint64_t v85 = v84;
            uint64_t v84 = *(void *)(v84 + 16);
            if (!v84)
            {
              *long long v83 = &unk_1ED985440;
              *((_DWORD *)v83 + 2) = 1918392666;
              v83[3] = v85;
              v83[4] = 20;
              v83[2] = 0;
              *(void *)(v85 + 16) = v83;
              goto LABEL_154;
            }
          }
          *long long v83 = &unk_1ED985440;
          *((_DWORD *)v83 + 2) = 1918392666;
          v83[3] = 0;
          v83[4] = 20;
          v83[2] = 0;
LABEL_154:
          v83[5] = &ColorSyncProfileGetDisplayP3RedPrimary_rXYZ;
          *((_WORD *)v83 + 24) = 0;
          *long long v83 = &unk_1ED985610;
          *((void *)v490 + 23) = v83;
          double v89 = CMMBase::NewInternal(0x38uLL, *((void ***)v490 + 3));
          if (ColorSyncProfileGetDisplayP3GreenPrimary_predicate[0] != -1) {
            dispatch_once(ColorSyncProfileGetDisplayP3GreenPrimary_predicate, &__block_literal_global_292);
          }
          uint64_t v90 = *((void *)v490 + 20);
          while (v90)
          {
            uint64_t v91 = v90;
            uint64_t v90 = *(void *)(v90 + 16);
            if (!v90)
            {
              *double v89 = &unk_1ED985440;
              *((_DWORD *)v89 + 2) = 1733843290;
              v89[3] = v91;
              v89[4] = 20;
              v89[2] = 0;
              *(void *)(v91 + 16) = v89;
              goto LABEL_175;
            }
          }
          *double v89 = &unk_1ED985440;
          *((_DWORD *)v89 + 2) = 1733843290;
          v89[3] = 0;
          v89[4] = 20;
          v89[2] = 0;
LABEL_175:
          v89[5] = &ColorSyncProfileGetDisplayP3GreenPrimary_gXYZ;
          *((_WORD *)v89 + 24) = 0;
          *double v89 = &unk_1ED985610;
          *((void *)v490 + 24) = v89;
          long long v78 = CMMBase::NewInternal(0x38uLL, *((void ***)v490 + 3));
          if (ColorSyncProfileGetDisplayP3BluePrimary_predicate != -1) {
            dispatch_once(&ColorSyncProfileGetDisplayP3BluePrimary_predicate, &__block_literal_global_295);
          }
          uint64_t v65 = (uint64_t)v490;
          uint64_t v97 = *((void *)v490 + 20);
          while (v97)
          {
            uint64_t v98 = v97;
            uint64_t v97 = *(void *)(v97 + 16);
            if (!v97)
            {
              *(void *)long long v78 = &unk_1ED985440;
              v78[2] = 1649957210;
              *((void *)v78 + 3) = v98;
              *((void *)v78 + 4) = 20;
              *((void *)v78 + 2) = 0;
              *(void *)(v98 + 16) = v78;
              goto LABEL_191;
            }
          }
          *(void *)long long v78 = &unk_1ED985440;
          v78[2] = 1649957210;
          *((void *)v78 + 3) = 0;
          *((void *)v78 + 4) = 20;
          *((void *)v78 + 2) = 0;
LABEL_191:
          long long v101 = &ColorSyncProfileGetDisplayP3BluePrimary_bXYZ;
          break;
        case 9u:
          long long v80 = CMMBase::NewInternal(0x38uLL, *((void ***)v490 + 3));
          if (ColorSyncProfileGetBT2020RedPrimary_predicate != -1) {
            dispatch_once(&ColorSyncProfileGetBT2020RedPrimary_predicate, &__block_literal_global_280);
          }
          uint64_t v81 = *((void *)v490 + 20);
          while (v81)
          {
            uint64_t v82 = v81;
            uint64_t v81 = *(void *)(v81 + 16);
            if (!v81)
            {
              *long long v80 = &unk_1ED985440;
              *((_DWORD *)v80 + 2) = 1918392666;
              v80[3] = v82;
              v80[4] = 20;
              v80[2] = 0;
              *(void *)(v82 + 16) = v80;
              goto LABEL_147;
            }
          }
          *long long v80 = &unk_1ED985440;
          *((_DWORD *)v80 + 2) = 1918392666;
          v80[3] = 0;
          v80[4] = 20;
          v80[2] = 0;
LABEL_147:
          v80[5] = &ColorSyncProfileGetBT2020RedPrimary_rXYZ;
          *((_WORD *)v80 + 24) = 0;
          *long long v80 = &unk_1ED985610;
          *((void *)v490 + 23) = v80;
          double v86 = CMMBase::NewInternal(0x38uLL, *((void ***)v490 + 3));
          if (ColorSyncProfileGetBT2020GreenPrimary_predicate[0] != -1) {
            dispatch_once(ColorSyncProfileGetBT2020GreenPrimary_predicate, &__block_literal_global_283);
          }
          uint64_t v87 = *((void *)v490 + 20);
          while (v87)
          {
            uint64_t v88 = v87;
            uint64_t v87 = *(void *)(v87 + 16);
            if (!v87)
            {
              void *v86 = &unk_1ED985440;
              *((_DWORD *)v86 + 2) = 1733843290;
              v86[3] = v88;
              v86[4] = 20;
              v86[2] = 0;
              *(void *)(v88 + 16) = v86;
              goto LABEL_168;
            }
          }
          void *v86 = &unk_1ED985440;
          *((_DWORD *)v86 + 2) = 1733843290;
          v86[3] = 0;
          v86[4] = 20;
          v86[2] = 0;
LABEL_168:
          v86[5] = &ColorSyncProfileGetBT2020GreenPrimary_gXYZ;
          *((_WORD *)v86 + 24) = 0;
          void *v86 = &unk_1ED985610;
          *((void *)v490 + 24) = v86;
          long long v78 = CMMBase::NewInternal(0x38uLL, *((void ***)v490 + 3));
          if (ColorSyncProfileGetBT2020BluePrimary_predicate != -1) {
            dispatch_once(&ColorSyncProfileGetBT2020BluePrimary_predicate, &__block_literal_global_286);
          }
          uint64_t v65 = (uint64_t)v490;
          uint64_t v95 = *((void *)v490 + 20);
          while (v95)
          {
            uint64_t v96 = v95;
            uint64_t v95 = *(void *)(v95 + 16);
            if (!v95)
            {
              *(void *)long long v78 = &unk_1ED985440;
              v78[2] = 1649957210;
              *((void *)v78 + 3) = v96;
              *((void *)v78 + 4) = 20;
              *((void *)v78 + 2) = 0;
              *(void *)(v96 + 16) = v78;
              goto LABEL_189;
            }
          }
          *(void *)long long v78 = &unk_1ED985440;
          v78[2] = 1649957210;
          *((void *)v78 + 3) = 0;
          *((void *)v78 + 4) = 20;
          *((void *)v78 + 2) = 0;
LABEL_189:
          long long v101 = &ColorSyncProfileGetBT2020BluePrimary_bXYZ;
          break;
        case 1u:
          uint64_t v70 = CMMBase::NewInternal(0x38uLL, *((void ***)v490 + 3));
          if (ColorSyncProfileGetBT709RedPrimary_predicate != -1) {
            dispatch_once(&ColorSyncProfileGetBT709RedPrimary_predicate, &__block_literal_global_271);
          }
          uint64_t v71 = *((void *)v490 + 20);
          while (v71)
          {
            uint64_t v72 = v71;
            uint64_t v71 = *(void *)(v71 + 16);
            if (!v71)
            {
              void *v70 = &unk_1ED985440;
              *((_DWORD *)v70 + 2) = 1918392666;
              float64x2_t v70[3] = v72;
              v70[4] = 20;
              v70[2] = 0;
              *(void *)(v72 + 16) = v70;
              goto LABEL_161;
            }
          }
          void *v70 = &unk_1ED985440;
          *((_DWORD *)v70 + 2) = 1918392666;
          float64x2_t v70[3] = 0;
          v70[4] = 20;
          v70[2] = 0;
LABEL_161:
          v70[5] = &ColorSyncProfileGetBT709RedPrimary_rXYZ;
          *((_WORD *)v70 + 24) = 0;
          void *v70 = &unk_1ED985610;
          *((void *)v490 + 23) = v70;
          uint64_t v92 = CMMBase::NewInternal(0x38uLL, *((void ***)v490 + 3));
          if (ColorSyncProfileGetBT709GreenPrimary_predicate[0] != -1) {
            dispatch_once(ColorSyncProfileGetBT709GreenPrimary_predicate, &__block_literal_global_274);
          }
          uint64_t v93 = *((void *)v490 + 20);
          while (v93)
          {
            uint64_t v94 = v93;
            uint64_t v93 = *(void *)(v93 + 16);
            if (!v93)
            {
              *uint64_t v92 = &unk_1ED985440;
              *((_DWORD *)v92 + 2) = 1733843290;
              v92[3] = v94;
              v92[4] = 20;
              v92[2] = 0;
              *(void *)(v94 + 16) = v92;
              goto LABEL_182;
            }
          }
          *uint64_t v92 = &unk_1ED985440;
          *((_DWORD *)v92 + 2) = 1733843290;
          v92[3] = 0;
          v92[4] = 20;
          v92[2] = 0;
LABEL_182:
          v92[5] = &ColorSyncProfileGetBT709GreenPrimary_gXYZ;
          *((_WORD *)v92 + 24) = 0;
          *uint64_t v92 = &unk_1ED985610;
          *((void *)v490 + 24) = v92;
          long long v78 = CMMBase::NewInternal(0x38uLL, *((void ***)v490 + 3));
          if (ColorSyncProfileGetBT709BluePrimary_predicate != -1) {
            dispatch_once(&ColorSyncProfileGetBT709BluePrimary_predicate, &__block_literal_global_277);
          }
          uint64_t v65 = (uint64_t)v490;
          uint64_t v99 = *((void *)v490 + 20);
          while (v99)
          {
            uint64_t v100 = v99;
            uint64_t v99 = *(void *)(v99 + 16);
            if (!v99)
            {
              *(void *)long long v78 = &unk_1ED985440;
              v78[2] = 1649957210;
              *((void *)v78 + 3) = v100;
              *((void *)v78 + 4) = 20;
              *((void *)v78 + 2) = 0;
              *(void *)(v100 + 16) = v78;
              goto LABEL_193;
            }
          }
          *(void *)long long v78 = &unk_1ED985440;
          v78[2] = 1649957210;
          *((void *)v78 + 3) = 0;
          *((void *)v78 + 4) = 20;
          *((void *)v78 + 2) = 0;
LABEL_193:
          long long v101 = &ColorSyncProfileGetBT709BluePrimary_bXYZ;
          break;
        default:
          goto LABEL_232;
      }
      *((void *)v78 + 5) = v101;
      *((_WORD *)v78 + 24) = 0;
      *(void *)long long v78 = &unk_1ED985610;
    }
    else
    {
      unint64_t Tag = CMMProfile::GetTag((uint64_t)v490, 1633768035);
      if (Tag)
      {
        *long long v68 = Tag;
        uint64_t v65 = (uint64_t)v490;
      }
      else
      {
        CFIndex v75 = CMMProfile::GetTag((uint64_t)v490, 1918392666);
        uint64_t v65 = (uint64_t)v490;
        *((void *)v490 + 23) = v75;
        if (!v75) {
          goto LABEL_232;
        }
      }
      uint64_t v76 = CMMProfile::GetTag(v65, 1633765219);
      if (v76)
      {
        uint64_t v65 = (uint64_t)v490;
        *((void *)v490 + 24) = v76;
      }
      else
      {
        double v77 = CMMProfile::GetTag((uint64_t)v490, 1733843290);
        uint64_t v65 = (uint64_t)v490;
        *((void *)v490 + 24) = v77;
        if (!v77) {
          goto LABEL_232;
        }
      }
      long long v78 = CMMProfile::GetTag(v65, 1633763939);
      uint64_t v65 = (uint64_t)v490;
      if (!v78)
      {
        long long v79 = CMMProfile::GetTag((uint64_t)v490, 1649957210);
        uint64_t v65 = (uint64_t)v490;
        *((void *)v490 + 25) = v79;
        if (!v79) {
          goto LABEL_232;
        }
        if (!v64) {
          goto LABEL_204;
        }
        goto LABEL_196;
      }
    }
    *(void *)(v65 + 200) = v78;
    if (!v64) {
      goto LABEL_204;
    }
LABEL_196:
    CFDictionaryRef v64 = (const __CFDictionary *)ColorSyncOptionsGetFlexTRCOptions(*(const ColorSyncProfile **)(v65 + 16), theDict);
    if (v64)
    {
      CFDataRef v102 = ColorSyncProfileCopyFlexGTCInfo(*(void *)(v65 + 16));
      if (v102)
      {
        CFDictionaryRef v103 = (const __CFDictionary *)CMMBase::NewInternal(0x28uLL, *(void ***)(v65 + 24));
        *((void *)v103 + 2) = 0;
        *((void *)v103 + 3) = &kPQEOTFFloat1024Data;
        *(void *)CFDictionaryRef v103 = &unk_1ED985520;
        *((void *)v103 + 1) = 0;
        *((void *)v103 + 4) = 4096;
        if (CFDictionaryContainsKey(v102, (const void *)kColorSyncMonoFlexGTCNodeTable) == 1
          && CFDictionaryContainsKey(v102, (const void *)kColorSyncMonoGainMapParams) == 1)
        {
          uint64_t v104 = (CMMTable *)CFDictionaryGetValue(v102, (const void *)kColorSyncMonoFlexGTCNodeTable);
          CFArrayRef v105 = (const __CFArray *)CFDictionaryGetValue(v102, (const void *)kColorSyncMonoGainMapParams);
          FlexTRCLookup = CMMTable::CreateFlexTRCLookup(v104, v105, v64, v103, *((CMMTable **)v490 + 3), v106, v107);
          *((void *)v490 + 29) = FlexTRCLookup;
          if (FlexTRCLookup) {
            uint64_t v109 = 0;
          }
          else {
            uint64_t v109 = 4294967246;
          }
          CMMThrowExceptionOnError(v109);
          CFRelease(v102);
          LOBYTE(v64) = 0;
          CFDataRef v102 = (const __CFData *)*((void *)v490 + 29);
        }
        else
        {
          uint64_t v115 = (CMMTable *)CFDictionaryGetValue(v102, (const void *)kColorSyncRedFlexGTCNodeTable);
          CFArrayRef v116 = (const __CFArray *)CFDictionaryGetValue(v102, (const void *)kColorSyncRedGainMapParams);
          uint64_t v117 = (CMMTable **)((char *)v490 + 24);
          long long v120 = CMMTable::CreateFlexTRCLookup(v115, v116, v64, v103, *((CMMTable **)v490 + 3), v118, v119);
          *((void *)v490 + 30) = v120;
          if (v120) {
            uint64_t v121 = 0;
          }
          else {
            uint64_t v121 = 4294967246;
          }
          CMMThrowExceptionOnError(v121);
          uint64_t v122 = (CMMTable *)CFDictionaryGetValue(v102, (const void *)kColorSyncGrnFlexGTCNodeTable);
          CFArrayRef v123 = (const __CFArray *)CFDictionaryGetValue(v102, (const void *)kColorSyncGrnGainMapParams);
          int v126 = CMMTable::CreateFlexTRCLookup(v122, v123, v64, v103, *v117, v124, v125);
          *((void *)v490 + 31) = v126;
          if (v126) {
            uint64_t v127 = 0;
          }
          else {
            uint64_t v127 = 4294967246;
          }
          CMMThrowExceptionOnError(v127);
          uint64_t v128 = (CMMTable *)CFDictionaryGetValue(v102, (const void *)kColorSyncBluFlexGTCNodeTable);
          CFArrayRef v129 = (const __CFArray *)CFDictionaryGetValue(v102, (const void *)kColorSyncBluGainMapParams);
          uint64_t v132 = CMMTable::CreateFlexTRCLookup(v128, v129, v64, v103, *v117, v130, v131);
          *((void *)v490 + 32) = v132;
          if (v132) {
            uint64_t v133 = 0;
          }
          else {
            uint64_t v133 = 4294967246;
          }
          CMMThrowExceptionOnError(v133);
          CFRelease(v102);
          CFDataRef v102 = 0;
          LOBYTE(v64) = 1;
        }
        uint64_t v65 = (uint64_t)v490;
        if (!v69)
        {
LABEL_224:
          uint64_t v134 = CMMProfile::GetTag(v65, 1751405638);
          if (v134)
          {
            unsigned int v135 = bswap32(*(_DWORD *)(*((void *)v134 + 5) + 8));
            uint64_t v65 = (uint64_t)v490;
            if (v135 == 1212958496)
            {
              v281 = (CMMHLGCurveTag *)CMMBase::NewInternal(0x58uLL, *((void ***)v490 + 3));
              uint64_t v287 = *((void *)v490 + 20);
              while (1)
              {
                uint64_t v283 = v287;
                if (!v287) {
                  goto LABEL_475;
                }
                uint64_t v287 = *(void *)(v287 + 16);
                if (!v287) {
                  goto LABEL_449;
                }
              }
            }
            if (v135 == 1347493920)
            {
              long long v110 = (CMMPQCurveTag *)CMMBase::NewInternal(0x60uLL, *((void ***)v490 + 3));
              if (v64)
              {
                uint64_t v136 = *((void *)v490 + 30);
                uint64_t v137 = *((void *)v490 + 20);
                while (1)
                {
                  uint64_t v138 = v137;
                  if (!v137) {
                    break;
                  }
                  uint64_t v137 = *(void *)(v137 + 16);
                  if (!v137)
                  {
                    CMMPQCurveTag::CMMPQCurveTag(v110, v136, v138);
                    goto LABEL_512;
                  }
                }
                CMMPQCurveTag::CMMPQCurveTag(v110, v136, 0);
LABEL_512:
                *((void *)v490 + 26) = v139;
                v313 = (CMMPQCurveTag *)CMMBase::NewInternal(0x60uLL, *((void ***)v490 + 3));
                uint64_t v314 = *((void *)v490 + 31);
                uint64_t v315 = *((void *)v490 + 20);
                while (1)
                {
                  uint64_t v316 = v315;
                  if (!v315) {
                    break;
                  }
                  uint64_t v315 = *(void *)(v315 + 16);
                  if (!v315)
                  {
                    CMMPQCurveTag::CMMPQCurveTag(v313, v314, v316);
                    goto LABEL_519;
                  }
                }
                CMMPQCurveTag::CMMPQCurveTag(v313, v314, 0);
LABEL_519:
                *((void *)v490 + 27) = v317;
                v309 = (CMMPQCurveTag *)CMMBase::NewInternal(0x60uLL, *((void ***)v490 + 3));
                uint64_t v310 = *((void *)v490 + 32);
                uint64_t v318 = *((void *)v490 + 20);
                while (1)
                {
                  uint64_t v312 = v318;
                  if (!v318) {
                    goto LABEL_523;
                  }
                  uint64_t v318 = *(void *)(v318 + 16);
                  if (!v318) {
                    goto LABEL_509;
                  }
                }
              }
              uint64_t v301 = *((void *)v490 + 20);
              while (1)
              {
                uint64_t v299 = v301;
                if (!v301) {
                  goto LABEL_516;
                }
                uint64_t v301 = *(void *)(v301 + 16);
                if (!v301) {
                  goto LABEL_481;
                }
              }
            }
LABEL_232:
            *long long v68 = 0;
            *((void *)v490 + 24) = 0;
            *((void *)v490 + 25) = 0;
            goto LABEL_233;
          }
          v280 = CMMProfile::GetTag((uint64_t)v490, 1633776231);
          if (v280)
          {
            uint64_t v65 = (uint64_t)v490;
            *((void *)v490 + 26) = v280;
          }
          else
          {
            v288 = CMMProfile::GetTag((uint64_t)v490, 1918128707);
            uint64_t v65 = (uint64_t)v490;
            *((void *)v490 + 26) = v288;
            if (!v288) {
              goto LABEL_485;
            }
          }
          v289 = CMMProfile::GetTag(v65, 1633773415);
          if (v289)
          {
            uint64_t v65 = (uint64_t)v490;
            *((void *)v490 + 27) = v289;
            goto LABEL_483;
          }
          v300 = CMMProfile::GetTag((uint64_t)v490, 1733579331);
          uint64_t v65 = (uint64_t)v490;
          *((void *)v490 + 27) = v300;
          if (v300)
          {
LABEL_483:
            long long v67 = CMMProfile::GetTag(v65, 1633772135);
            if (v67) {
              goto LABEL_524;
            }
            long long v67 = CMMProfile::GetTag((uint64_t)v490, 1649693251);
            uint64_t v65 = (uint64_t)v490;
            *((void *)v490 + 28) = v67;
            if (v67) {
              goto LABEL_525;
            }
          }
LABEL_485:
          *long long v68 = 0;
          *((void *)v490 + 24) = 0;
          *((void *)v490 + 25) = 0;
          *(void *)(v65 + 216) = 0;
          *(void *)(v65 + 224) = 0;
          *(void *)(v65 + 208) = 0;
          goto LABEL_233;
        }
      }
      else
      {
        LOBYTE(v64) = 0;
        if (!v69) {
          goto LABEL_224;
        }
      }
      goto LABEL_205;
    }
LABEL_204:
    CFDataRef v102 = 0;
    if (!v69) {
      goto LABEL_224;
    }
LABEL_205:
    switch(BYTE1(valuePtr[0]))
    {
      case 8u:
        v284 = (CMMCurveTag *)CMMBase::NewInternal(0x38uLL, *(void ***)(v65 + 24));
        uint64_t v285 = *((void *)v490 + 20);
        while (1)
        {
          uint64_t v286 = v285;
          if (!v285) {
            break;
          }
          uint64_t v285 = *(void *)(v285 + 16);
          if (!v285)
          {
            CMMCurveTag::CMMCurveTag(v284, 0, (uint64_t)"curv", 16, v286);
            goto LABEL_477;
          }
        }
        CMMCurveTag::CMMCurveTag(v284, 0, (uint64_t)"curv", 16, 0);
LABEL_477:
        *(void *)long long v67 = &unk_1ED982618;
        goto LABEL_517;
      case 0x12u:
        v281 = (CMMHLGCurveTag *)CMMBase::NewInternal(0x58uLL, *(void ***)(v65 + 24));
        uint64_t v282 = *((void *)v490 + 20);
        while (1)
        {
          uint64_t v283 = v282;
          if (!v282) {
            break;
          }
          uint64_t v282 = *(void *)(v282 + 16);
          if (!v282)
          {
LABEL_449:
            CMMHLGCurveTag::CMMHLGCurveTag(v281, v283);
            goto LABEL_517;
          }
        }
LABEL_475:
        CMMHLGCurveTag::CMMHLGCurveTag(v281, 0);
        goto LABEL_517;
      case 0x10u:
        long long v110 = (CMMPQCurveTag *)CMMBase::NewInternal(0x60uLL, *(void ***)(v65 + 24));
        if (v64)
        {
          uint64_t v111 = *((void *)v490 + 30);
          uint64_t v112 = *((void *)v490 + 20);
          while (1)
          {
            uint64_t v113 = v112;
            if (!v112) {
              break;
            }
            uint64_t v112 = *(void *)(v112 + 16);
            if (!v112)
            {
              CMMPQCurveTag::CMMPQCurveTag(v110, v111, v113);
              goto LABEL_500;
            }
          }
          CMMPQCurveTag::CMMPQCurveTag(v110, v111, 0);
LABEL_500:
          *((void *)v490 + 26) = v114;
          v304 = (CMMPQCurveTag *)CMMBase::NewInternal(0x60uLL, *((void ***)v490 + 3));
          uint64_t v305 = *((void *)v490 + 31);
          uint64_t v306 = *((void *)v490 + 20);
          while (1)
          {
            uint64_t v307 = v306;
            if (!v306) {
              break;
            }
            uint64_t v306 = *(void *)(v306 + 16);
            if (!v306)
            {
              CMMPQCurveTag::CMMPQCurveTag(v304, v305, v307);
              goto LABEL_506;
            }
          }
          CMMPQCurveTag::CMMPQCurveTag(v304, v305, 0);
LABEL_506:
          *((void *)v490 + 27) = v308;
          v309 = (CMMPQCurveTag *)CMMBase::NewInternal(0x60uLL, *((void ***)v490 + 3));
          uint64_t v310 = *((void *)v490 + 32);
          uint64_t v311 = *((void *)v490 + 20);
          while (1)
          {
            uint64_t v312 = v311;
            if (!v311) {
              break;
            }
            uint64_t v311 = *(void *)(v311 + 16);
            if (!v311)
            {
LABEL_509:
              CMMPQCurveTag::CMMPQCurveTag(v309, v310, v312);
              goto LABEL_524;
            }
          }
LABEL_523:
          CMMPQCurveTag::CMMPQCurveTag(v309, v310, 0);
LABEL_524:
          uint64_t v65 = (uint64_t)v490;
          *((void *)v490 + 28) = v67;
          goto LABEL_525;
        }
        uint64_t v298 = *((void *)v490 + 20);
        while (1)
        {
          uint64_t v299 = v298;
          if (!v298) {
            break;
          }
          uint64_t v298 = *(void *)(v298 + 16);
          if (!v298)
          {
LABEL_481:
            CMMPQCurveTag::CMMPQCurveTag(v110, (uint64_t)v102, v299);
            goto LABEL_517;
          }
        }
LABEL_516:
        CMMPQCurveTag::CMMPQCurveTag(v110, (uint64_t)v102, 0);
LABEL_517:
        uint64_t v65 = (uint64_t)v490;
        *((void *)v490 + 27) = v67;
        *((void *)v490 + 28) = v67;
        *((void *)v490 + 26) = v67;
LABEL_525:
        uint64_t v66 = *(void *)(v65 + 200);
        goto LABEL_526;
    }
    *(_OWORD *)((char *)v490 + 200) = 0u;
    *(_OWORD *)((char *)v490 + 216) = 0u;
    *(_OWORD *)long long v68 = 0u;
LABEL_233:
    char v140 = v483;
    if (v491 != 2) {
      char v140 = 0;
    }
    if ((v140 & 1) == 0)
    {
      uint64_t v141 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v65 + 32))(v65, v491, v481);
      uint64_t v488 = v141;
      uint64_t v65 = (uint64_t)v490;
      if (v141)
      {
        v142 = *(unsigned int **)(v141 + 8);
        if (v142 == *(unsigned int **)(v141 + 16)) {
          goto LABEL_566;
        }
        while (1)
        {
          v489 = v142;
          CFTypeRef v143 = (const void *)(*(uint64_t (**)(CMMProfile *, void))(*(void *)v490 + 88))(v490, v142[2]);
          if (v143) {
          else
          }
            uint64_t v144 = 0;
          v145 = (const void *)(*(uint64_t (**)(CMMProfile *, void))(*(void *)v490 + 88))(v490, v489[2]);
          if (v145)
          {
            v147 = v489;
            if (!v144)
            {
              v148 = v146;
              if (!v146) {
                goto LABEL_773;
              }
              uint64_t v149 = v489[3];
              unsigned int v492 = v489[4];
              int v150 = *((unsigned __int8 *)v500 + 40);
              int v151 = *((unsigned char *)v500 + 40) != 0;
              BOOL HasCLUT = CMMLutTag::HasCLUT(v146);
              BOOL v153 = CMMLutTag::HasCLUT(v148);
              unsigned int v154 = (*(uint64_t (**)(CMMLutTag *))(*(void *)v148 + 48))(v148);
              int v155 = v154;
              uint64_t v478 = v154;
              if (v154 >= 0x10uLL || v154 == 0) {
                uint64_t v157 = 4294967126;
              }
              else {
                uint64_t v157 = 0;
              }
              CMMThrowExceptionOnError(v157);
              unsigned int v158 = (*(uint64_t (**)(CMMLutTag *))(*(void *)v148 + 56))(v148);
              int v159 = v158;
              uint64_t v477 = v158;
              if (v158 >= 0x10uLL || v158 == 0) {
                uint64_t v161 = 4294967126;
              }
              else {
                uint64_t v161 = 0;
              }
              CMMThrowExceptionOnError(v161);
              memset(v516, 0, sizeof(v516));
              uint64_t v517 = 0;
              LODWORD(v516[0]) = 1;
              if (v149 == 1482250784)
              {
                if (v150) {
                  char v162 = 0;
                }
                else {
                  char v162 = v491 == 1;
                }
                if (v150) {
                  int v151 = 1;
                }
                else {
                  int v151 = v491 == 1;
                }
                ConversionManager::AddScalingDownFloatXYZ(v500, v162);
              }
              int v496 = !HasCLUT;
              char v494 = !v153;
              if (v491 == 1) {
                int v163 = v151 ^ 1;
              }
              else {
                int v163 = 0;
              }
              if (v155)
              {
                uint64_t v164 = 0;
                do
                {
                  uint64_t v165 = (*(uint64_t (**)(CMMLutTag *, uint64_t, long long *, void, uint64_t))(*(void *)v148 + 96))(v148, v164, v516, *((void *)v500 + 1), v149);
                  if (v165)
                  {
                    uint64_t v166 = (*(uint64_t (**)(CMMLutTag *, uint64_t))(*(void *)v148 + 80))(v148, v164);
                    v167 = CMMBase::NewInternal(0xA8uLL, *((void ***)v500 + 1));
                    uint64_t v168 = CMMConvTRC::CMMConvTRC((uint64_t)v167, v164, v165, v166, v516, *((void *)v500 + 3), v155, v496, 1.0, v494, v163);
                    *((void *)v500 + 3) = v168;
                    v151 |= v163;
                    if (!*((void *)v500 + 2)) {
                      *v499 = (CMMConvNode *)v168;
                    }
                  }
                  uint64_t v164 = (v164 + 1);
                }
                while (v155 != v164);
              }
              v169 = (_DWORD *)(*(uint64_t (**)(CMMLutTag *))(*(void *)v148 + 104))(v148);
              if (v169)
              {
                memset(valuePtr, 0, 112);
                CMMMatrix::CMMMatrix((uint64_t)valuePtr, v169, 1.0);
                CMMMatrix::MakeMatrixConv((CMMMatrix *)valuePtr, *((CMMMemMgr **)v500 + 1), *((CMMConvNode **)v500 + 3));
                *((void *)v500 + 3) = v170;
                if (!((v491 != 1) | v151 & 1))
                {
                  (*(void (**)(uint64_t))(*(void *)v170 + 24))(v170);
                  int v151 = 1;
                }
                if (!*v499) {
                  *((void *)v500 + 2) = *((void *)v500 + 3);
                }
              }
              if (v155)
              {
                uint64_t v171 = 0;
                int v172 = (v491 == 1) & (v151 ^ 1);
                do
                {
                  uint64_t v173 = (*(uint64_t (**)(CMMLutTag *, uint64_t, long long *, void, uint64_t))(*(void *)v148 + 112))(v148, v171, v516, *((void *)v500 + 1), v149);
                  if (v173)
                  {
                    uint64_t v174 = (*(uint64_t (**)(CMMLutTag *, uint64_t))(*(void *)v148 + 144))(v148, v171);
                    v175 = CMMBase::NewInternal(0xA8uLL, *((void ***)v500 + 1));
                    uint64_t v176 = CMMConvTRC::CMMConvTRC((uint64_t)v175, v171, v173, v174, v516, *((void *)v500 + 3), v155, v496, 1.0, v494, v172);
                    *((void *)v500 + 3) = v176;
                    v151 |= v172;
                    if (!*((void *)v500 + 2)) {
                      *v499 = (CMMConvNode *)v176;
                    }
                  }
                  uint64_t v171 = (v171 + 1);
                }
                while (v155 != v171);
              }
              if (CMMLutTag::HasCLUT(v148))
              {
                ConversionManager::AddCLUTConv((uint64_t)v500, v148, v478, v477);
                uint64_t v177 = *((void *)v500 + 3);
                BOOL v178 = v491 != 1;
                if (!v177) {
                  BOOL v178 = 1;
                }
                if (((v178 | v151) & 1) == 0)
                {
                  (*(void (**)(uint64_t))(*(void *)v177 + 24))(v177);
                  LOBYTE(v151) = 1;
                }
              }
              if (v159)
              {
                uint64_t v179 = 0;
                char v180 = (v491 == 1) & (v151 ^ 1);
                do
                {
                  uint64_t v181 = (*(uint64_t (**)(CMMLutTag *, uint64_t, long long *, void, void))(*(void *)v148 + 120))(v148, v179, v516, *((void *)v500 + 1), v492);
                  if (v181)
                  {
                    uint64_t v182 = (*(uint64_t (**)(CMMLutTag *, uint64_t))(*(void *)v148 + 152))(v148, v179);
                    v183 = CMMBase::NewInternal(0xA8uLL, *((void ***)v500 + 1));
                    uint64_t v184 = CMMConvTRC::CMMConvTRC((uint64_t)v183, v179, v181, v182, v516, *((void *)v500 + 3), v159, v496, 1.0, v494, v180);
                    *((void *)v500 + 3) = v184;
                    LOBYTE(v151) = v180 | v151;
                    if (!*((void *)v500 + 2)) {
                      *v499 = (CMMConvNode *)v184;
                    }
                  }
                  uint64_t v179 = (v179 + 1);
                }
                while (v159 != v179);
              }
              v185 = (_DWORD *)(*(uint64_t (**)(CMMLutTag *))(*(void *)v148 + 128))(v148);
              if (v185)
              {
                memset(valuePtr, 0, 112);
                CMMMatrix::CMMMatrix((uint64_t)valuePtr, v185, 1.0);
                CMMMatrix::MakeMatrixConv((CMMMatrix *)valuePtr, *((CMMMemMgr **)v500 + 1), *((CMMConvNode **)v500 + 3));
                *((void *)v500 + 3) = v186;
                if (!((v491 != 1) | v151 & 1))
                {
                  (*(void (**)(uint64_t))(*(void *)v186 + 24))(v186);
                  LOBYTE(v151) = 1;
                }
                if (!*v499) {
                  *((void *)v500 + 2) = *((void *)v500 + 3);
                }
              }
              if (v159)
              {
                uint64_t v187 = 0;
                char v188 = (v491 == 1) & (v151 ^ 1);
                do
                {
                  uint64_t v189 = (*(uint64_t (**)(CMMLutTag *, uint64_t, long long *, void, void))(*(void *)v148 + 136))(v148, v187, v516, *((void *)v500 + 1), v492);
                  if (v189)
                  {
                    uint64_t v190 = (*(uint64_t (**)(CMMLutTag *, uint64_t))(*(void *)v148 + 88))(v148, v187);
                    v191 = CMMBase::NewInternal(0xA8uLL, *((void ***)v500 + 1));
                    uint64_t v192 = CMMConvTRC::CMMConvTRC((uint64_t)v191, v187, v189, v190, v516, *((void *)v500 + 3), v159, v496, 1.0, v494, v188);
                    *((void *)v500 + 3) = v192;
                    LOBYTE(v151) = v188 | v151;
                    if (!*((void *)v500 + 2)) {
                      *v499 = (CMMConvNode *)v192;
                    }
                  }
                  uint64_t v187 = (v187 + 1);
                }
                while (v159 != v187);
              }
              if (v492 == 1482250784) {
                ConversionManager::AddScalingUpFloatXYZ(v500);
              }
              if ((v491 != 2) | v151 & 1) {
                goto LABEL_369;
              }
              goto LABEL_368;
            }
          }
          else
          {
            v147 = v489;
            if (!v144)
            {
LABEL_773:
              v464 = __cxa_allocate_exception(4uLL);
              _DWORD *v464 = -171;
            }
          }
          uint64_t v193 = v147[3];
          unsigned int v497 = v147[4];
          int v194 = *((unsigned __int8 *)v500 + 40);
          int v195 = *((unsigned char *)v500 + 40) != 0;
          unsigned int v196 = (*(uint64_t (**)(CMMLutTagBase *))(*(void *)v144 + 48))(v144);
          int v197 = v196;
          uint64_t v495 = v196;
          if (v196 >= 0x10uLL || v196 == 0) {
            uint64_t v199 = 4294967126;
          }
          else {
            uint64_t v199 = 0;
          }
          CMMThrowExceptionOnError(v199);
          unsigned int v200 = (*(uint64_t (**)(CMMLutTagBase *))(*(void *)v144 + 56))(v144);
          int v201 = v200;
          uint64_t v493 = v200;
          if (v200 >= 0x10uLL || v200 == 0) {
            uint64_t v203 = 4294967126;
          }
          else {
            uint64_t v203 = 0;
          }
          CMMThrowExceptionOnError(v203);
          if (v193 == 1482250784)
          {
            char v204 = !v194 && v491 == 1;
            int v195 = v194 || v491 == 1;
            ConversionManager::AddScalingDownFloatXYZ(v500, v204);
            if (((*(uint64_t (**)(CMMLutTagBase *))(*(void *)v144 + 160))(v144) & 1) == 0)
            {
              uint64_t v205 = 0;
              v206 = valuePtr;
              *(void *)&valuePtr[0] = &unk_1ED9855F0;
              *((void *)&valuePtr[6] + 1) = 1065353216;
              memset((char *)valuePtr + 8, 0, 96);
              do
              {
                for (uint64_t i = 0; i != 3; ++i)
                {
                  int v208 = (*(uint64_t (**)(CMMLutTagBase *, uint64_t, uint64_t))(*(void *)v144 + 168))(v144, v205, i);
                  v209 = (char *)v206 + 4 * i;
                  *((_DWORD *)v209 + 2) = v208;
                  float v210 = (double)v208 * 0.0000152587891;
                  *((float *)v209 + 11) = v210;
                }
                ++v205;
                v206 = (long long *)((char *)v206 + 12);
              }
              while (v205 != 3);
              CMMMatrix::MakeMatrixConv((CMMMatrix *)valuePtr, *((CMMMemMgr **)v500 + 1), *((CMMConvNode **)v500 + 3));
              *((void *)v500 + 3) = v211;
              if (!*((void *)v500 + 2)) {
                *v499 = v211;
              }
            }
          }
          if (v491 == 1) {
            int v212 = v195 ^ 1;
          }
          else {
            int v212 = 0;
          }
          if (v197)
          {
            uint64_t v213 = 0;
            do
            {
              memset(valuePtr, 0, 56);
              LODWORD(valuePtr[0]) = 1;
              uint64_t v214 = (*(uint64_t (**)(CMMLutTagBase *, uint64_t, long long *, void, uint64_t))(*(void *)v144 + 112))(v144, v213, valuePtr, *((void *)v500 + 1), v193);
              uint64_t v215 = (*(uint64_t (**)(CMMLutTagBase *, uint64_t))(*(void *)v144 + 80))(v144, v213);
              v216 = CMMBase::NewInternal(0xA8uLL, *((void ***)v500 + 1));
              uint64_t v217 = CMMConvTRC::CMMConvTRC((uint64_t)v216, v213, v214, v215, valuePtr, *((void *)v500 + 3), v197, 1, 1.0, 1, v212);
              *((void *)v500 + 3) = v217;
              if (!*((void *)v500 + 2)) {
                *v499 = (CMMConvNode *)v217;
              }
              v195 |= v212;
              uint64_t v213 = (v213 + 1);
            }
            while (v197 != v213);
            BOOL v220 = v491 == 1 && v197 == 3;
            if (v220 & v195)
            {
              if (ConversionManager::exrToneMappingGammaIsRequested(theDict, v218)) {
                ConversionManager::AddEXRToneMapping(v500, theDict, 3);
              }
              int v195 = 1;
            }
          }
          if ((*(unsigned int (**)(CMMLutTagBase *))(*(void *)v144 + 192))(v144))
          {
            ConversionManager::AddCLUTConv((uint64_t)v500, v144, v495, v493);
            uint64_t v221 = *((void *)v500 + 3);
            BOOL v222 = v491 != 1;
            if (!v221) {
              BOOL v222 = 1;
            }
            if (((v222 | v195) & 1) == 0)
            {
              (*(void (**)(uint64_t))(*(void *)v221 + 24))(v221);
              LOBYTE(v195) = 1;
            }
          }
          if (v201)
          {
            uint64_t v223 = 0;
            char v224 = (v491 == 1) & (v195 ^ 1);
            do
            {
              memset(valuePtr, 0, 56);
              LODWORD(valuePtr[0]) = 1;
              uint64_t v225 = (*(uint64_t (**)(CMMLutTagBase *, uint64_t, long long *, void, void))(*(void *)v144 + 120))(v144, v223, valuePtr, *((void *)v500 + 1), v497);
              uint64_t v226 = (*(uint64_t (**)(CMMLutTagBase *, uint64_t))(*(void *)v144 + 88))(v144, v223);
              v227 = CMMBase::NewInternal(0xA8uLL, *((void ***)v500 + 1));
              uint64_t v228 = CMMConvTRC::CMMConvTRC((uint64_t)v227, v223, v225, v226, valuePtr, *((void *)v500 + 3), v201, 1, 1.0, 1, v224);
              *((void *)v500 + 3) = v228;
              if (!*((void *)v500 + 2)) {
                *v499 = (CMMConvNode *)v228;
              }
              LOBYTE(v195) = v224 | v195;
              uint64_t v223 = (v223 + 1);
            }
            while (v201 != v223);
          }
          if (v497 == 1482250784) {
            ConversionManager::AddScalingUpFloatXYZ(v500);
          }
          uint64_t v229 = v488;
          if ((v491 != 2) | v195 & 1) {
            goto LABEL_370;
          }
LABEL_368:
          (*(void (**)(void))(**((void **)v500 + 3) + 48))(*((void *)v500 + 3));
LABEL_369:
          uint64_t v229 = v488;
LABEL_370:
          v142 = v489 + 6;
          if (v489 + 6 == *(unsigned int **)(v229 + 16)) {
            goto LABEL_566;
          }
        }
      }
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v65 + 96))(v65))
    {
      if (v491 == 2)
      {
        pthread_mutex_lock(&ConversionManager::AddLegacyGenericLab(CMMConversionType)::cmmLock);
        if (!legacyPCSToLabChanLTable)
        {
          *(void *)&valuePtr[0] = 0;
          CMMMemMgr::CMMMemMgr((CMMMemMgr *)valuePtr);
          v255 = (int *)CMMBase::NewInternal(0x5408uLL, (void **)valuePtr);
          uint64_t v256 = 0;
          legacyPCSToLabChanLDataPtr = (uint64_t)v255;
          int64x2_t v257 = (int64x2_t)xmmword_18BE63480;
          v258 = v255 + 1;
          do
          {
            if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x1001uLL), (uint64x2_t)v257)).u8[0]) {
              *(v258 - 1) = (unint64_t)(v256 + 2048) >> 12;
            }
            if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x1001uLL), *(uint64x2_t *)&v257)).i32[1]) {
              _DWORD *v258 = (unint64_t)(v256 + 16713983) >> 12;
            }
            int64x2_t v257 = vaddq_s64(v257, vdupq_n_s64(2uLL));
            v258 += 2;
            v256 += 33423870;
          }
          while (v256 != 0xFF20DF1FELL);
          MakeLookups(v255);
          v259 = CMMBase::NewInternal(0x28uLL, (void **)valuePtr);
          uint64_t v260 = legacyPCSToLabChanLDataPtr;
          v259[2] = 0;
          v259[3] = v260;
          void *v259 = &unk_1ED985520;
          v259[1] = 0;
          v259[4] = 21512;
          legacyPCSToLabChanLTable = (uint64_t)v259;
          v261 = (int *)CMMBase::NewInternal(0x5408uLL, (void **)valuePtr);
          uint64_t v262 = 0;
          legacyPCSToLabChanAnBDataPtr = (uint64_t)v261;
          int64x2_t v263 = (int64x2_t)xmmword_18BE63480;
          v264 = v261 + 1;
          do
          {
            if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x1001uLL), (uint64x2_t)v263)).u8[0]) {
              *(v264 - 1) = (unint64_t)(v262 + 2048) >> 12;
            }
            if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x1001uLL), *(uint64x2_t *)&v263)).i32[1]) {
              _DWORD *v264 = (unint64_t)(v262 + 16713983) >> 12;
            }
            int64x2_t v263 = vaddq_s64(v263, vdupq_n_s64(2uLL));
            v264 += 2;
            v262 += 33423870;
          }
          while (v262 != 0xFF20DF1FELL);
          MakeLookups(v261);
          v265 = CMMBase::NewInternal(0x28uLL, (void **)valuePtr);
          uint64_t v266 = legacyPCSToLabChanAnBDataPtr;
          v265[2] = 0;
          v265[3] = v266;
          void *v265 = &unk_1ED985520;
          v265[1] = 0;
          v265[4] = 21512;
          legacyPCSToLabChanAnBTable = (uint64_t)v265;
          CMMMemMgr::ReleaseMemList((void **)valuePtr);
        }
        pthread_mutex_unlock(&ConversionManager::AddLegacyGenericLab(CMMConversionType)::cmmLock);
        uint64_t v248 = legacyPCSToLabChanLTable;
        uint64_t v249 = legacyPCSToLabChanAnBTable;
        if (legacyPCSToLabChanLTable)
        {
LABEL_419:
          if (v249)
          {
            *((void *)&valuePtr[0] + 1) = 0;
            *(void *)&valuePtr[1] = 0;
            uint64_t v267 = *(void *)(v248 + 8);
            if (v267) {
              *(void *)(v248 + 8) = v267 + 1;
            }
            *(void *)&valuePtr[0] = 1;
            HIDWORD(valuePtr[0]) = 3;
            *(long long *)((char *)&valuePtr[1] + 8) = xmmword_18BE63760;
            *(long long *)((char *)&valuePtr[2] + 8) = xmmword_18BE63770;
            v268 = CMMBase::NewInternal(0xA8uLL, *((void ***)v500 + 1));
            uint64_t v269 = CMMConvTRC::CMMConvTRC((uint64_t)v268, 0, v248, 21512, valuePtr, *((void *)v500 + 3), 3, 1, 1.0, 0, 0);
            *((void *)v500 + 3) = v269;
            if (!*((void *)v500 + 2)) {
              *v499 = (CMMConvNode *)v269;
            }
            char v270 = 0;
            int v271 = 1;
            do
            {
              char v272 = v270;
              uint64_t v273 = *(void *)(v249 + 8);
              if (v273) {
                *(void *)(v249 + 8) = v273 + 1;
              }
              v274 = CMMBase::NewInternal(0xA8uLL, *((void ***)v500 + 1));
              *((void *)v500 + 3) = CMMConvTRC::CMMConvTRC((uint64_t)v274, v271, v249, 21512, valuePtr, *((void *)v500 + 3), 3, 1, 1.0, 0, 0);
              int v271 = 2;
              char v270 = 1;
            }
            while ((v272 & 1) == 0);
          }
        }
      }
      else if (v491 == 1)
      {
        pthread_mutex_lock(&ConversionManager::AddLegacyGenericLab(CMMConversionType)::cmmLock);
        if (!legacyLabChanLToPCSTable)
        {
          *(void *)&valuePtr[0] = 0;
          CMMMemMgr::CMMMemMgr((CMMMemMgr *)valuePtr);
          v230 = (int *)CMMBase::NewInternal(0x5408uLL, (void **)valuePtr);
          uint64_t v231 = 0;
          uint64_t v232 = 0;
          legacyLabChanLToPCSDataPtr = (uint64_t)v230;
          int64x2_t v233 = (int64x2_t)xmmword_18BE63480;
          do
          {
            v234.i64[0] = v231;
            v234.i64[1] = v231 + 4112;
            int8x16_t v235 = (int8x16_t)vdupq_n_s64(0x1000000uLL);
            int8x16_t v236 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v235, v234), (int8x16_t)v234, v235);
            if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x1001uLL), (uint64x2_t)v233)).u8[0]) {
              v230[v232] = v236.i32[0];
            }
            if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x1001uLL), *(uint64x2_t *)&v233)).i32[1]) {
              v230[v232 + 1] = v236.i32[2];
            }
            v232 += 2;
            int64x2_t v233 = vaddq_s64(v233, vdupq_n_s64(2uLL));
            v231 += 8224;
          }
          while (v232 != 4098);
          MakeLookups(v230);
          v237 = CMMBase::NewInternal(0x28uLL, (void **)valuePtr);
          uint64_t v238 = legacyLabChanLToPCSDataPtr;
          v237[2] = 0;
          v237[3] = v238;
          void *v237 = &unk_1ED985520;
          v237[1] = 0;
          v237[4] = 21512;
          legacyLabChanLToPCSTable = (uint64_t)v237;
          v239 = (int *)CMMBase::NewInternal(0x5408uLL, (void **)valuePtr);
          uint64_t v240 = 0;
          uint64_t v241 = 0;
          legacyLabChanAnBToPCSDataPtr = (uint64_t)v239;
          int64x2_t v242 = (int64x2_t)xmmword_18BE63480;
          do
          {
            v243.i64[0] = v240;
            v243.i64[1] = v240 + 4112;
            int8x16_t v244 = (int8x16_t)vdupq_n_s64(0x1000000uLL);
            int8x16_t v245 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v244, v243), (int8x16_t)v243, v244);
            if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x1001uLL), (uint64x2_t)v242)).u8[0]) {
              v239[v241] = v245.i32[0];
            }
            if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x1001uLL), *(uint64x2_t *)&v242)).i32[1]) {
              v239[v241 + 1] = v245.i32[2];
            }
            v241 += 2;
            int64x2_t v242 = vaddq_s64(v242, vdupq_n_s64(2uLL));
            v240 += 8224;
          }
          while (v241 != 4098);
          MakeLookups(v239);
          v246 = CMMBase::NewInternal(0x28uLL, (void **)valuePtr);
          uint64_t v247 = legacyLabChanAnBToPCSDataPtr;
          v246[2] = 0;
          v246[3] = v247;
          void *v246 = &unk_1ED985520;
          v246[1] = 0;
          v246[4] = 21512;
          legacyLabChanAnBToPCSTable = (uint64_t)v246;
          CMMMemMgr::ReleaseMemList((void **)valuePtr);
        }
        pthread_mutex_unlock(&ConversionManager::AddLegacyGenericLab(CMMConversionType)::cmmLock);
        uint64_t v248 = legacyLabChanLToPCSTable;
        uint64_t v249 = legacyLabChanAnBToPCSTable;
        *((_DWORD *)v500 + 9) = 1347182946;
        if (v248) {
          goto LABEL_419;
        }
      }
    }
    else
    {
      int v250 = (*(uint64_t (**)(CMMProfile *, _OWORD *, void **))(*(void *)v490 + 40))(v490, v510, &v502);
      if (v491 == 1) {
        int v251 = v250;
      }
      else {
        int v251 = 0;
      }
      if (v251 == 1)
      {
        ConversionManager::AddMatrixConv((uint64_t)v500, (const __CFDictionary *)v510, (uint64_t)&v502, *((unsigned __int8 *)v500 + 40), 1, 0, theDict);
        goto LABEL_566;
      }
      int v252 = v250 ^ 1;
      if (v491 != 2) {
        int v252 = 1;
      }
      CFDictionaryRef v253 = theDict;
      if ((v252 | v483))
      {
        if (v491 == 3) {
          int v254 = v250;
        }
        else {
          int v254 = 0;
        }
        if (v254 == 1)
        {
LABEL_403:
          ConversionManager::AddMatrixConvPCSToPCS(v500, (CMMXYZTag *(*)[3])v510, (CMMRGBCurves *)&v502, *((unsigned __int8 *)v500 + 40), theDict);
        }
        else
        {
          int v279 = *((_DWORD *)v490 + 12);
          if ((v279 - 1296255029) < 4 || v279 == 1281450528)
          {
LABEL_775:
            v466 = __cxa_allocate_exception(4uLL);
            _DWORD *v466 = -171;
          }
          if (v279 == 1196573017 && v491 == 1)
          {
            ConversionManager::AddGrayConv(v500, v490, *((unsigned __int8 *)v500 + 40), theDict);
          }
          else if (v491 == 2 && v279 == 1196573017)
          {
            ConversionManager::AddInvGrayConv((CMMMemMgr **)v500, v490, *((unsigned char *)v500 + 40));
          }
          else
          {
            if (v279 != 1196573017 || v491 != 3) {
              goto LABEL_775;
            }
            int v302 = *((_DWORD *)v490 + 13);
            if (v302 == 1347182946 || v302 == 1281450528)
            {
              BOOL v303 = *((unsigned char *)v500 + 40) != 0;
              ConversionManager::AddInvGrayConv((CMMMemMgr **)v500, v490, *((unsigned char *)v500 + 40));
              ConversionManager::AddGrayConv(v500, v490, v303, 0);
            }
            else
            {
              *(void *)&valuePtr[0] = &unk_1ED9855F0;
              *((void *)&valuePtr[6] + 1) = 1065353216;
              memset((char *)valuePtr + 8, 0, 96);
              ConversionManager::AddXYZToLab((uint64_t)v500);
              DWORD2(valuePtr[0]) = 0x10000;
              HIDWORD(valuePtr[2]) = 1065353216;
              CMMMatrix::MakeMatrixConv((CMMMatrix *)valuePtr, *((CMMMemMgr **)v500 + 1), *((CMMConvNode **)v500 + 3));
              *((void *)v500 + 3) = v392;
              DWORD2(valuePtr[0]) = 0x10000;
              *(int32x2_t *)((char *)&valuePtr[5] + 4) = vdup_n_s32(0x808080u);
              HIDWORD(valuePtr[2]) = 1065353216;
              *(void *)&valuePtr[6] = 0x3F0000003F000000;
              CMMMatrix::MakeMatrixConv((CMMMatrix *)valuePtr, *((CMMMemMgr **)v500 + 1), v392);
              *((void *)v500 + 3) = v393;
              ConversionManager::AddLabToXYZ((uint64_t)v500);
            }
          }
        }
      }
      else
      {
        if (v25)
        {
          int v275 = (*(uint64_t (**)(CMMProfile *))(*(void *)v25 + 104))(v25);
          CFDictionaryRef v253 = theDict;
          if (v275)
          {
            v276 = ColorSyncProfileGetLuminanceCoefficients(*((float **)v490 + 2));
            if (v276) {
              uint64_t v277 = 0;
            }
            else {
              uint64_t v277 = 4294967126;
            }
            goto LABEL_434;
          }
        }
        if (!v253)
        {
          ConversionManager::AddInvMatrixConv((uint64_t)v500, (CMMXYZTag *(*)[3])v510, &v502, *((unsigned __int8 *)v500 + 40), 2, 0, 0);
          goto LABEL_566;
        }
        if (CFDictionaryGetValue(v253, @"com.apple.cmm.ApplyYCCGammaScaling") != v474)
        {
          if (CFDictionaryGetValue(theDict, @"com.apple.cmm.ApplyLuminanceScaling") != v474)
          {
            ConversionManager::AddInvMatrixConv((uint64_t)v500, (CMMXYZTag *(*)[3])v510, &v502, *((unsigned __int8 *)v500 + 40), 2, 0, theDict);
            goto LABEL_566;
          }
          v276 = ColorSyncProfileGetLuminanceCoefficients(*((float **)v490 + 2));
          if (v276) {
            uint64_t v277 = 0;
          }
          else {
            uint64_t v277 = 4294967126;
          }
LABEL_434:
          CMMThrowExceptionOnError(v277);
          long long v278 = *(_OWORD *)v276;
          valuePtr[0] = xmmword_18BE63730;
          *(void *)&valuePtr[1] = 0;
          *(long long *)((char *)&valuePtr[1] + 8) = v278;
          memset((char *)&valuePtr[2] + 8, 0, 72);
          ConversionManager::AddInvMatrixConv((uint64_t)v500, (CMMXYZTag *(*)[3])v510, &v502, *((unsigned __int8 *)v500 + 40), 2, (uint64_t)valuePtr, theDict);
          goto LABEL_566;
        }
        RGBtoYCCMatrix = ColorSyncProfileGetRGBtoYCCMatrix(*((float **)v490 + 2));
        YCCtoRGBMatrix = ColorSyncProfileGetYCCtoRGBMatrix(*((float **)v490 + 2));
        if (YCCtoRGBMatrix) {
          BOOL v292 = RGBtoYCCMatrix == 0;
        }
        else {
          BOOL v292 = 1;
        }
        if (v292) {
          uint64_t v293 = 4294967126;
        }
        else {
          uint64_t v293 = 0;
        }
        CMMThrowExceptionOnError(v293);
        memset((char *)&valuePtr[4] + 8, 0, 40);
        memset((char *)&valuePtr[2] + 8, 0, 32);
        *(void *)&valuePtr[0] = 1120403456;
        DWORD2(valuePtr[0]) = 1120403456;
        memset((char *)valuePtr + 12, 0, 28);
        long long v294 = *(_OWORD *)RGBtoYCCMatrix;
        long long v295 = *((_OWORD *)RGBtoYCCMatrix + 1);
        *((float *)&valuePtr[4] + 2) = RGBtoYCCMatrix[8];
        *(long long *)((char *)&valuePtr[2] + 8) = v294;
        *(long long *)((char *)&valuePtr[3] + 8) = v295;
        long long v296 = *(_OWORD *)YCCtoRGBMatrix;
        long long v297 = *((_OWORD *)YCCtoRGBMatrix + 1);
        *((float *)&valuePtr[6] + 3) = YCCtoRGBMatrix[8];
        *(long long *)((char *)&valuePtr[4] + 12) = v296;
        *(long long *)((char *)&valuePtr[5] + 12) = v297;
        ConversionManager::AddInvMatrixConv((uint64_t)v500, (CMMXYZTag *(*)[3])v510, &v502, *((unsigned __int8 *)v500 + 40), 2, (uint64_t)valuePtr, theDict);
      }
    }
LABEL_566:
    uint64_t v7 = v482;
    uint64_t v336 = v487;
    if (!v501) {
      goto LABEL_636;
    }
    if ((v483 & 1) == 0 && (v481 == 3 || v491 == 3 && *((_DWORD *)v490 + 24) == 3))
    {
      if (v487 == v484)
      {
        if (*((_DWORD *)v500 + 9) == 1482250784)
        {
          *(void *)&valuePtr[0] = CMMProfile::GetWhitePoint(*((CMMProfile **)v490 + 2));
          DWORD2(valuePtr[0]) = v359;
          ConversionManager::AddXYZToXYZ((uint64_t)v500, (int *)&qword_18BE73034, (int *)valuePtr);
          goto LABEL_635;
        }
        goto LABEL_636;
      }
      if (!v480)
      {
        v468 = __cxa_allocate_exception(4uLL);
        _DWORD *v468 = -171;
      }
      uint64_t WhitePoint = CMMProfile::GetWhitePoint(*((CMMProfile **)v490 + 2));
      int v354 = v353;
      *(void *)&valuePtr[0] = WhitePoint;
      DWORD2(valuePtr[0]) = v353;
      uint64_t v355 = *(void *)(v487 + 48);
      if (!v355)
      {
        v467 = __cxa_allocate_exception(4uLL);
        _DWORD *v467 = -171;
      }
      uint64_t v356 = CMMProfile::GetWhitePoint(*(CMMProfile **)(v355 + 16));
      *(void *)&v516[0] = v356;
      DWORD2(v516[0]) = v357;
      if ((int)v356 - 7 < (int)WhitePoint
        && (int)v356 + 7 > (int)WhitePoint
        && HIDWORD(v356) - 7 < SHIDWORD(WhitePoint)
        && HIDWORD(v356) + 7 > SHIDWORD(WhitePoint)
        && v357 - 7 < v354
        && v357 + 7 > v354)
      {
        goto LABEL_635;
      }
      uint64_t v358 = (uint64_t)v500;
      if (*((_DWORD *)v500 + 9) != 1482250784)
      {
        ConversionManager::AddLabToXYZ((uint64_t)v500);
        uint64_t v358 = (uint64_t)v500;
      }
      ConversionManager::AddXYZToXYZ(v358, (int *)&qword_18BE73034, (int *)valuePtr);
      ConversionManager::AddXYZToXYZ((uint64_t)v500, (int *)v516, (int *)&qword_18BE73034);
      if (v480 == 1482250784)
      {
LABEL_635:
        uint64_t v7 = v482;
        uint64_t v336 = v487;
        goto LABEL_636;
      }
LABEL_631:
      ConversionManager::AddXYZToLab((uint64_t)v500);
      goto LABEL_635;
    }
    if (v479) {
      BOOL v337 = v487 == v485;
    }
    else {
      BOOL v337 = 0;
    }
    int v338 = v337;
    int v339 = *((_DWORD *)v490 + 11);
    if (v339 == 1818848875) {
      int v340 = 0;
    }
    else {
      int v340 = v338;
    }
    if (v339 == 1852662636) {
      int v341 = 0;
    }
    else {
      int v341 = v340;
    }
    if (v338 != 1 || v339 == 1818848875 || v339 == 1852662636)
    {
      if (!v341) {
        goto LABEL_628;
      }
      int v342 = 0;
      int v343 = 0;
LABEL_585:
      v344 = v500;
      if (*((_DWORD *)v500 + 9) == 1347182946)
      {
        ConversionManager::AddLabToXYZ((uint64_t)v500);
        v344 = v500;
      }
      v345 = (float *)CMMBase::NewInternal(0x40uLL, *((void ***)v344 + 1));
      v346 = v345;
      uint64_t v347 = *((void *)v500 + 3);
      *((_DWORD *)v345 + 2) = 1;
      *((void *)v345 + 2) = 0;
      *((void *)v345 + 3) = v347;
      if (v347) {
        *(void *)(v347 + 16) = v345;
      }
      float v348 = (float)v343 * 0.000000059605;
      float v349 = (float)v342 * 0.000000059605;
      *((void *)v345 + 5) = 0x3FFFFF0000000000;
      *((_WORD *)v345 + 17) = 0;
      *((unsigned char *)v345 + 36) = 0;
      *(void *)v345 = &unk_1ED985230;
      *((unsigned char *)v345 + 33) = 1;
      v345[12] = v349;
      v345[13] = v348;
      float v350 = DecodeL(v348 * 100.0);
      float v351 = (1.0 - v350) / (1.0 - DecodeL(v349 * 100.0));
      v346[14] = v351;
      v346[15] = 1.0 - v351;
      *((void *)v500 + 3) = v346;
      uint64_t v7 = v482;
      if (!*((void *)v500 + 2)) {
        *v499 = (CMMConvNode *)v346;
      }
      uint64_t v336 = v487;
      if (v480 != 1347182946) {
        goto LABEL_636;
      }
      goto LABEL_631;
    }
    ConversionManager::GetProfileSrcBlackPointLightness();
    if (v487 + 40 == *(void *)(v482 + 16))
    {
      v469 = __cxa_allocate_exception(4uLL);
      _DWORD *v469 = -171;
    }
    int v342 = v360;
    int v361 = *(_DWORD *)(*(void *)(v487 + 48) + 48);
    switch(v361)
    {
      case 1296255029:
        int v362 = 893602898;
        break;
      case 1296255030:
        int v362 = 910380114;
        break;
      case 1296255031:
        int v362 = 927157330;
        break;
      case 1296255032:
        int v362 = 943934546;
        break;
      default:
        int v362 = 1145856354;
        if (v361 != 1281450528) {
          int v362 = *(_DWORD *)(*(void *)(v487 + 48) + 48);
        }
        break;
    }
    if (*(unsigned char *)(v487 + 65) || *(unsigned char *)(v487 + 64) || v362 != 1129142603 && v362 != 1380401696)
    {
      ConversionManager::GetProfileSrcBlackPointLightness();
      int v343 = v363;
LABEL_623:
      uint64_t v336 = v487;
      goto LABEL_624;
    }
    unint64_t v509 = 0;
    v366 = (void *)ConversionManager::CreateBlackPointEstimationTransform((uint64_t)v500, 1, v487 + 40, *(_DWORD *)(v487 + 60), 1, &v509);
    unint64_t v367 = v509;
    if (v509 - 5 >= 0xFFFFFFFFFFFFFFFELL) {
      uint64_t v368 = 0;
    }
    else {
      uint64_t v368 = 4294967125;
    }
    CMMThrowExceptionOnError(v368);
    bzero(valuePtr, 0x3000uLL);
    int v514 = 0;
    uint64_t v513 = 0;
    ConversionManager::GetProfileSrcBlackPointLightness();
    bzero(v512, 0x400uLL);
    bzero(v511, 0x400uLL);
    unsigned int v369 = 0;
    uint64_t v370 = 0;
    uint64_t v371 = (HIDWORD(v513) << 24) / (0x1000000 - v513);
    uint64_t v372 = 4 * v367;
    v373 = (_DWORD *)valuePtr + 2;
    uint64_t v374 = (v514 << 24) / (0x1000000 - v513);
    do
    {
      unint64_t v375 = v369 / 0xFFuLL;
      *(v373 - 2) = v375;
      *(v373 - 1) = (((0x1000000 - v375) * v371) >> 24) + 0x800000;
      _DWORD *v373 = (((0x1000000 - v375) * v374) >> 24) + 0x800000;
      *(float *)&v511[v370] = (float)(int)v375;
      v370 += 4;
      v373 = (_DWORD *)((char *)v373 + v372);
      v369 += 0x1000000;
    }
    while (v370 != 1024);
    *(void *)((char *)v507 + 6) = 0;
    v507[0] = 0;
    if (v366)
    {
      v376 = v366;
      do
      {
        (*(void (**)(void *, long long *, void *, unint64_t, uint64_t))(*v376 + 104))(v376, valuePtr, v507, v367, 256);
        v376 = (void *)v376[2];
      }
      while (v376);
      do
      {
        v377 = (void *)v366[2];
        (*(void (**)(void *))(*v366 + 8))(v366);
        v366 = v377;
      }
      while (v377);
    }
    int v378 = *((_DWORD *)valuePtr + 255 * v367);
    if (v378 <= SLODWORD(valuePtr[0]))
    {
      int v343 = 0;
      goto LABEL_623;
    }
    uint64_t v379 = -255;
    v380 = valuePtr;
    uint64_t v336 = v487;
    do
    {
      int v381 = *((_DWORD *)v380 + 255 * v367);
      if (*((_DWORD *)v380 + 254 * v367) > v381) {
        *((_DWORD *)v380 + 254 * v367) = v381;
      }
      v380 = (long long *)((char *)v380 - 4 * v367);
      BOOL v382 = __CFADD__(v379++, 1);
    }
    while (!v382);
    uint64_t v383 = 0;
    v384 = (int *)valuePtr;
    int v385 = valuePtr[0];
    do
    {
      *(float *)&v512[v383++] = (float)*v384;
      v384 = (int *)((char *)v384 + v372);
    }
    while (v383 != 256);
    int v386 = v378 - v385;
    float v387 = 0.25;
    float v388 = *(float *)&v23;
    if (*(_DWORD *)(v487 + 60) == 1)
    {
      uint64_t v389 = 0;
      float v390 = floor((double)(v385 + (int)((double)v386 * 0.2)) + 0.5);
      while (1)
      {
        float v391 = *(float *)&v511[v389 * 4];
        if (v391 > v390 && vabds_f32(*(float *)&v512[v389], v391) > 671090.0) {
          break;
        }
        if (++v389 == 256)
        {
          int v343 = v513;
          goto LABEL_624;
        }
      }
      float v387 = 0.5;
      float v388 = *(float *)&v473;
    }
    float v394 = 1.0 / (float)v386;
    bzero(v516, 0x400uLL);
    bzero(v515, 0x400uLL);
    int v395 = -1;
    float v396 = *(float *)v512;
    uint64_t v397 = 1;
    int v398 = -1;
    do
    {
      float v399 = (float)(*(float *)&v512[v397] - v396) * v394;
      if (v395 == -1)
      {
        if (v399 >= v388) {
          int v395 = v397;
        }
        else {
          int v395 = -1;
        }
      }
      if (v398 == -1)
      {
        if (v399 < v387)
        {
          if (v395 != -1)
          {
            float v400 = (double)(int)v397 * 0.00392156863;
            *((float *)v516 + v397 - v395) = v400;
            *(float *)&v515[4 * v397 + -4 * v395] = v399;
          }
          int v398 = -1;
          goto LABEL_678;
        }
        int v398 = v397;
      }
      if (v395 != -1) {
        break;
      }
LABEL_678:
      ++v397;
    }
    while (v397 != 255);
    uint64_t v401 = (v398 - v395);
    if ((int)v401 < 3) {
      goto LABEL_720;
    }
    int v498 = v23;
    uint64_t v402 = 0;
    memset(v525, 0, sizeof(v525));
    int v524 = 0;
    uint64_t v523 = 0;
    int v522 = 0;
    uint64_t v521 = 0;
    do
    {
      float v403 = 0.0;
      v404 = (float *)v516;
      v405 = (float *)v515;
      uint64_t v406 = v401;
      do
      {
        float v407 = *v405++;
        double v408 = v407;
        float v409 = *v404++;
        float v403 = v403 + v408 * pow(v409, (double)(int)v402);
        --v406;
      }
      while (v406);
      uint64_t v410 = 0;
      *((float *)&v521 + v402) = v403;
      do
      {
        float v411 = 0.0;
        v412 = (float *)v516;
        uint64_t v413 = v401;
        do
        {
          double v414 = v411;
          float v415 = *v412++;
          double v416 = pow(v415, (double)(int)v410);
          float v411 = v414 + v416 * pow(v415, (double)(int)v402);
          --v413;
        }
        while (v413);
        *(float *)&v525[3 * v402 + v410++] = v411;
      }
      while (v410 != 3);
      ++v402;
    }
    while (v402 != 3);
    unint64_t v417 = 0;
    BOOL v418 = 0;
    uint64_t v419 = 1;
    int v23 = v498;
    while (2)
    {
      unint64_t v420 = v417;
LABEL_690:
      double v421 = *(float *)&v525[3 * v417 + v420];
      if (v417)
      {
        uint64_t v422 = v419;
        do
        {
          double v421 = v421
               - (float)(*(float *)&v525[3 * v417 + (v422 - 2)]
                       * *(float *)&v525[3 * v420 + (v422 - 2)]);
          --v422;
        }
        while (v422 > 1);
      }
      if (v417 != v420)
      {
        float v424 = v421 / *((float *)&v523 + v417);
        *(float *)&v525[3 * v420 + v417] = v424;
LABEL_697:
        if (++v420 == 3)
        {
          BOOL v418 = v417 > 1;
          ++v419;
          if (++v417 != 3) {
            continue;
          }
          goto LABEL_701;
        }
        goto LABEL_690;
      }
      break;
    }
    if (v421 > 0.0)
    {
      float v423 = sqrt(v421);
      *((float *)&v523 + v417) = v423;
      goto LABEL_697;
    }
    if (!v418)
    {
      int v443 = -1;
      uint64_t v336 = v487;
      goto LABEL_721;
    }
LABEL_701:
    uint64_t v425 = 0;
    float v519 = 0.0;
    uint64_t v518 = 0;
    uint64_t v426 = 1;
    do
    {
      double v427 = *((float *)&v521 + v425);
      if (v425)
      {
        uint64_t v428 = v426;
        do
        {
          double v427 = v427
               - (float)(*(float *)&v525[3 * v425 + (v428 - 2)]
                       * *((float *)&v518 + (v428 - 2)));
          --v428;
        }
        while (v428 > 1);
      }
      float v429 = v427 / *((float *)&v523 + v425);
      *((float *)&v518 + v425++) = v429;
      ++v426;
    }
    while (v425 != 3);
    uint64_t v430 = 0;
    v431 = (float *)&v526 + 1;
    unint64_t v432 = 2;
    uint64_t v336 = v487;
    do
    {
      unint64_t v433 = v432;
      double v434 = *((float *)&v518 + v432);
      if (v432-- <= 1)
      {
        v436 = v431;
        uint64_t v437 = v430;
        do
        {
          float v438 = *v436;
          v436 += 3;
          double v434 = v434 - (float)(v438 * *(float *)&v520[4 * v437]);
          BOOL v382 = __CFADD__(v437++, 1);
        }
        while (!v382);
      }
      float v439 = v434 / *((float *)&v523 + v433);
      *((float *)&v518 + v433) = v439;
      --v430;
      v431 -= 4;
    }
    while (v433);
    if (v519 <= 0.000001)
    {
      if (*((float *)&v518 + 1) <= 0.000001) {
        goto LABEL_720;
      }
      double v442 = 0.5 - *(float *)&v518 / *((float *)&v518 + 1);
LABEL_719:
      int v443 = vcvtmd_s64_f64(v442);
    }
    else
    {
      float v440 = (float)(v519 * (float)(*(float *)&v518 * -4.0)) + (float)(*((float *)&v518 + 1) * *((float *)&v518 + 1));
      if (v440 >= 0.0)
      {
        float v441 = (sqrtf(v440) - *((float *)&v518 + 1)) / (v519 + v519);
        if (v441 > 0.0)
        {
          double v442 = v441 + 0.5;
          goto LABEL_719;
        }
      }
LABEL_720:
      int v443 = -1;
    }
LABEL_721:
    unsigned int v444 = v443 & ~(v443 >> 31);
    if (v444 >= 0x800000) {
      int v343 = 0x800000;
    }
    else {
      int v343 = v444;
    }
LABEL_624:
    if (v342 == v343) {
      char v364 = 0;
    }
    else {
      char v364 = v341;
    }
    if (v364) {
      goto LABEL_585;
    }
LABEL_628:
    uint64_t v7 = v482;
    if (v336 != v484)
    {
      int v365 = *((_DWORD *)v500 + 9);
      if (v365 == 1482250784 && v480 == 1347182946) {
        goto LABEL_631;
      }
      if (v365 == 1347182946 && v480 == 1482250784)
      {
        ConversionManager::AddLabToXYZ((uint64_t)v500);
        goto LABEL_635;
      }
    }
LABEL_636:
    int v22 = *((_DWORD *)v500 + 9);
    uint64_t v20 = v336 + 40;
    uint64_t v21 = *(void *)(v7 + 16);
  }
  while (v20 != v21);
LABEL_724:
  v445 = *v499;
  if (*v499)
  {
    unint64_t v446 = 0;
    do
    {
      if (++v446 <= 0x64) {
        uint64_t v447 = 0;
      }
      else {
        uint64_t v447 = 4294967125;
      }
      CMMThrowExceptionOnError(v447);
      v445 = (CMMConvNode *)*((void *)v445 + 2);
    }
    while (v445);
  }
  else
  {
    unint64_t v446 = 0;
  }
  if (v446 <= 1) {
    uint64_t v448 = 1;
  }
  else {
    uint64_t v448 = v446;
  }
  *(void *)&valuePtr[0] = 0;
  uint64_t v449 = (2 * v448) | 1;
LABEL_737:
  v450 = *v499;
  *(void *)&v516[0] = v449;
  if (v450)
  {
    while (1)
    {
      v451 = CMMConvNode::RemoveNOPs(v450, (unint64_t *)v516, v476);
      *v499 = v451;
      if (!v451) {
        break;
      }
      int v452 = 0;
      uint64_t v453 = *((void *)v500 + 1);
      do
      {
        if (((*(uint64_t (**)(CMMConvNode *))(*(void *)v451 + 80))(v451) & 1) == 0) {
          v452 |= (*(uint64_t (**)(CMMConvNode *, uint64_t, long long *))(*(void *)v451 + 16))(v451, v453, valuePtr);
        }
        v451 = (CMMConvNode *)*((void *)v451 + 2);
      }
      while (v451);
      if ((v452 & 1) == 0)
      {
        v451 = *v499;
        break;
      }
      v450 = *(CMMConvNode **)&valuePtr[0];
      if (!*(void *)&valuePtr[0]) {
        goto LABEL_737;
      }
      *v499 = *(CMMConvNode **)&valuePtr[0];
      *(void *)&v516[0] = v449;
    }
  }
  else
  {
    v451 = 0;
  }
  if (v475)
  {
    if (v451)
    {
      if (*((void *)v451 + 2)) {
        int v454 = 0;
      }
      else {
        int v454 = 2
      }
      CFDictionaryRef v456 = theDict;
      int v455 = 0;
      *(_DWORD *)uint64_t v475 = v454;
      do
      {
        int v457 = (*(uint64_t (**)(CMMConvNode *, CFDictionaryRef))(*(void *)v451 + 200))(v451, v456) | v455;
        else {
          int v455 = v457;
        }
        v451 = (CMMConvNode *)*((void *)v451 + 2);
        CFDictionaryRef v456 = theDict;
      }
      while (v451);
      if ((v455 & 8) != 0)
      {
        int v459 = 8;
      }
      else
      {
        if ((v455 & 4) == 0) {
          goto LABEL_761;
        }
        int v459 = 4;
      }
    }
    else
    {
      int v455 = 0;
      *(_DWORD *)uint64_t v475 = 1;
LABEL_761:
      if ((v455 & 2) != 0) {
        int v459 = 2;
      }
      else {
        int v459 = v455;
      }
    }
    *(_DWORD *)(v475 + 4) = v459;
    v451 = *v499;
    if (*v499)
    {
      v460 = *v499;
      while (1)
      {
        BOOL v462 = v461 != 0;
        if (v461) {
          break;
        }
        v460 = (CMMConvNode *)*((void *)v460 + 2);
        if (!v460) {
          goto LABEL_770;
        }
      }
    }
    else
    {
LABEL_770:
      BOOL v462 = 0;
    }
    *(unsigned char *)(v475 + 8) = v462;
  }
  return v451;
}

void sub_18BE23EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CMMConvTRC::Collapse@<X0>(CMMConvTRC *this@<X0>, CMMMemMgr *a2@<X1>, int a3@<W8>)
{
  CFDictionaryRef v6 = this;
  while (1)
  {
    CFDictionaryRef v6 = (CMMConvTRC *)*((void *)v6 + 2);
    if (!v6) {
      return (v6 != 0) & a3;
    }
    if (!v7) {
      break;
    }
    uint64_t v8 = (uint64_t)v7;
    a3 = v7[18];
    if (a3 == *((_DWORD *)this + 18))
    {
      unint64_t v10 = v9;
      LOBYTE(a3) = 0;
      switch(*((_DWORD *)this + 23))
      {
        case 9:
          if (*(_DWORD *)(v8 + 92) != 8) {
            goto LABEL_48;
          }
          goto LABEL_84;
        case 0xB:
          return (v6 != 0) & a3;
        case 0xC:
          if (*(_DWORD *)(v8 + 92) != 13) {
            goto LABEL_19;
          }
          if (*((float *)this + 29) != *(float *)(v8 + 116)) {
            goto LABEL_43;
          }
          goto LABEL_84;
        case 0xE:
          if (*(_DWORD *)(v8 + 92) != 15) {
            goto LABEL_19;
          }
          goto LABEL_84;
        default:
LABEL_19:
          if (v9)
          {
            if (!*((unsigned char *)v9 + 160))
            {
              uint64_t v25 = v9[21];
              if (v25)
              {
                if (CMMTable::FloatData(*(void *)(v25 + 16), *(void *)(v25 + 24)))
                {
                  if (*((unsigned char *)v10 + 160) || (uint64_t v29 = v10[21]) == 0) {
                    double v26 = 0;
                  }
                  else {
                    double v26 = (int *)CMMTable::FloatData(*(void *)(v29 + 16), *(void *)(v29 + 24));
                  }
                  double v30 = (int *)CMMTable::FloatData(*(void *)(*((void *)this + 8) + 16), *(void *)(*((void *)this + 8) + 24));
                  if (v26) {
                    BOOL v31 = v30 == 0;
                  }
                  else {
                    BOOL v31 = 1;
                  }
                  int v32 = v31;
                  int v33 = v32 ^ 1;
                  if (v30 == v26)
                  {
                    int v33 = 1;
                  }
                  else if ((v32 & 1) == 0)
                  {
                    uint64_t v34 = 4097;
                    while (1)
                    {
                      int v36 = *v30++;
                      int v35 = v36;
                      int v37 = *v26++;
                      int v38 = v35 - v37;
                      if (v38 < 0) {
                        int v38 = -v38;
                      }
                      if (v38 >= 2) {
                        goto LABEL_43;
                      }
                      if (!--v34) {
                        goto LABEL_84;
                      }
                    }
                  }
LABEL_83:
                  if (v33) {
                    goto LABEL_84;
                  }
                  goto LABEL_43;
                }
              }
            }
          }
          if (v17)
          {
            int v18 = v17;
            if (!*((unsigned char *)v17 + 160))
            {
              uint64_t v27 = v17[21];
              if (v27)
              {
                if (CMMTable::FloatData(*(void *)(v27 + 16), *(void *)(v27 + 24)))
                {
                  if (*((unsigned char *)v18 + 160) || (uint64_t v39 = v18[21]) == 0) {
                    double v28 = 0;
                  }
                  else {
                    double v28 = (int *)CMMTable::FloatData(*(void *)(v39 + 16), *(void *)(v39 + 24));
                  }
                  unsigned __int8 v40 = (int *)CMMTable::FloatData(*(void *)(*(void *)(v8 + 64) + 16), *(void *)(*(void *)(v8 + 64) + 24));
                  if (v28) {
                    BOOL v41 = v40 == 0;
                  }
                  else {
                    BOOL v41 = 1;
                  }
                  int v42 = v41;
                  int v33 = v42 ^ 1;
                  if (v28 == v40)
                  {
                    int v33 = 1;
                  }
                  else if ((v42 & 1) == 0)
                  {
                    uint64_t v43 = 4097;
                    while (1)
                    {
                      int v45 = *v28++;
                      int v44 = v45;
                      int v46 = *v40++;
                      int v47 = v44 - v46;
                      if (v47 < 0) {
                        int v47 = -v47;
                      }
                      if (v47 >= 2) {
                        goto LABEL_43;
                      }
                      if (!--v43) {
                        goto LABEL_84;
                      }
                    }
                  }
                  goto LABEL_83;
                }
              }
            }
          }
          CFTypeID v19 = (int *)CMMBase::NewInternal(0x8008uLL, (void **)a2);
          uint64_t v20 = (const void *)CMMTable::FloatData(*(void *)(*(void *)(v8 + 64) + 16), *(void *)(*(void *)(v8 + 64) + 24));
          memcpy(v19, v20, 0x4004uLL);
          InvertLUT(v19, v19 + 4097);
          uint64_t v21 = CMMTable::FloatData(*(void *)(*((void *)this + 8) + 16), *(void *)(*((void *)this + 8) + 24));
          int v22 = (int *)v21;
          if ((int *)v21 == v19 || !v21)
          {
            CMMBase::operator delete((pthread_mutex_t **)v19);
            if (v22 == v19 || v22)
            {
LABEL_84:
              (*(void (**)(CMMConvTRC *))(*(void *)this + 72))(this);
              (*(void (**)(uint64_t))(*(void *)v8 + 72))(v8);
              if (*((unsigned char *)this + 35) || *((unsigned char *)this + 36) || *(unsigned char *)(v8 + 35) || *(unsigned char *)(v8 + 36))
              {
                if (CMMInitializeLinearGammaTable(void)::predicate != -1) {
                  dispatch_once(&CMMInitializeLinearGammaTable(void)::predicate, &__block_literal_global_977);
                }
                *(_OWORD *)char v54 = *(_OWORD *)CMMLinearGammaFloatLutInfo;
                *(_OWORD *)&v54[16] = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 16);
                *(_OWORD *)&v54[32] = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 32);
                *(void *)&v54[48] = *(void *)(CMMLinearGammaFloatLutInfo + 48);
                uint64_t v48 = CMMLinearGammaTable;
                uint64_t v49 = *(void *)(CMMLinearGammaTable + 8);
                if (v49) {
                  *(void *)(CMMLinearGammaTable + 8) = v49 + 1;
                }
                uint64_t v50 = *(void *)(v8 + 16);
                BOOL v51 = CMMBase::NewInternal(0xA8uLL, (void **)a2);
                uint64_t v52 = CMMConvTRC::CMMConvTRC((uint64_t)v51, *((_DWORD *)this + 18), v48, 0, (long long *)v54, v8, *((_DWORD *)this + 19), 1, 1.0, 1, 1);
                *(void *)(v52 + 16) = v50;
                if (v50) {
                  *(void *)(v50 + 24) = v52;
                }
                (*(void (**)(CMMConvTRC *))(*(void *)this + 32))(this);
                (*(void (**)(CMMConvTRC *))(*(void *)this + 56))(this);
                (*(void (**)(uint64_t))(*(void *)v8 + 32))(v8);
                (*(void (**)(uint64_t))(*(void *)v8 + 56))(v8);
              }
              goto LABEL_95;
            }
          }
          else
          {
            uint64_t v23 = 0;
            while (1)
            {
              int v24 = *(_DWORD *)(v21 + v23 * 4) - v19[v23];
              if (v24 < 0) {
                int v24 = v19[v23] - *(_DWORD *)(v21 + v23 * 4);
              }
              if (v24 >= 2) {
                break;
              }
              if (++v23 == 4097)
              {
                CMMBase::operator delete((pthread_mutex_t **)v19);
                goto LABEL_84;
              }
            }
            CMMBase::operator delete((pthread_mutex_t **)v19);
          }
LABEL_43:
          if (*(_DWORD *)(v8 + 92) == 7 && *((unsigned __int8 *)this + 36) == *(unsigned __int8 *)(v8 + 36))
          {
            (*(void (**)(uint64_t))(*(void *)v8 + 72))(v8);
            goto LABEL_95;
          }
          if (*((_DWORD *)this + 23) != 7 || *((unsigned __int8 *)this + 36) != *(unsigned __int8 *)(v8 + 36)) {
            goto LABEL_48;
          }
          goto LABEL_10;
      }
    }
  }
  if (!v11) {
    goto LABEL_48;
  }
  uint64_t v58 = 0;
  long long v12 = v11[8];
  long long v57 = v11[9];
  LODWORD(v58) = *((_DWORD *)v11 + 40);
  long long v13 = v11[6];
  long long v55 = v11[7];
  long long v56 = v12;
  long long v14 = v11[5];
  *(_OWORD *)&v54[8] = v11[4];
  *(_OWORD *)&v54[24] = v14;
  *(void *)char v54 = &unk_1ED9855F0;
  *(_OWORD *)&v54[40] = v13;
  uint64_t v15 = *((unsigned int *)this + 18);
  if (v15 > 2) {
    goto LABEL_10;
  }
  if (*(_DWORD *)&v54[4 * v15 + 8] || (BOOL v16 = &v54[4 * v15], *((_DWORD *)v16 + 5)) || *((_DWORD *)v16 + 8))
  {
LABEL_48:
    LOBYTE(a3) = 0;
  }
  else
  {
LABEL_10:
    (*(void (**)(CMMConvTRC *))(*(void *)this + 72))(this);
LABEL_95:
    LOBYTE(a3) = 1;
  }
  return (v6 != 0) & a3;
}

uint64_t CMMConvTRC::GetTransformType(CMMConvTRC *this, const __CFDictionary *a2)
{
  int v2 = *((_DWORD *)this + 22);
  if (v2 == 1) {
    unsigned int v3 = 2;
  }
  else {
    unsigned int v3 = 8;
  }
  if (v2) {
    return v3;
  }
  else {
    return 4;
  }
}

uint64_t CMMProfile::IsMatrixHDRProfile(CMMProfile *this)
{
  return 0;
}

BOOL CMMProfile::UseNamedColor(uint64_t a1, uint64_t a2, int a3)
{
  if (!a2) {
    return 0;
  }
  if (*(_DWORD *)(a2 + 44) == 1852662636 && (a3 == 6 || a3 == 3))
  {
    BOOL result = ColorSyncProfileContainsTag(*(ColorSyncProfileRef *)(a1 + 16), @"ncl2");
    if (!result) {
      return result;
    }
    unint64_t Tag = CMMProfile::GetTag(a1, 1852009522);
    if (Tag) {
    else
    }
      uint64_t v7 = 0;
    uint64_t v8 = CMMProfile::GetTag(a2, 1852009522);
    if (v8) {
    else
    }
      uint64_t v9 = 0;
    if (v9) {
      BOOL v10 = v7 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      uint64_t v11 = 4294967126;
    }
    else {
      uint64_t v11 = 0;
    }
    CMMThrowExceptionOnError(v11);
    int v13 = *(_DWORD *)(a1 + 48);
    switch(v13)
    {
      case 1296255029:
        int v14 = 893602898;
        break;
      case 1296255030:
        int v14 = 910380114;
        break;
      case 1296255031:
        int v14 = 927157330;
        break;
      case 1296255032:
        int v14 = 943934546;
        break;
      default:
        if (v13 == 1281450528) {
          int v14 = 1145856354;
        }
        else {
          int v14 = *(_DWORD *)(a1 + 48);
        }
        break;
    }
    uint64_t v12 = v7[22];
    if (CMMGetChannelCountFromCMMSpace(v14) == v12
      && *((unsigned char *)v7 + 92)
      && *((unsigned char *)v7 + 124)
      && !strcmp((const char *)v7 + 92, v9 + 92)
      && !strcmp((const char *)v7 + 124, v9 + 124))
    {
      return 1;
    }
  }
  return 0;
}

uint64_t CMMProfile::IsLegacyGenericLab(CMMProfile *this)
{
  return 0;
}

uint64_t CMMConvMatrix::Collapse(CMMConvMatrix *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = (const void *)*((void *)this + 2);
  if (!v3
    || ((*(uint64_t (**)(CMMConvMatrix *, CMMMemMgr *, CMMConvNode **))(*(void *)this + 64))(this, a2, a3) & 1) != 0
    || ((*(uint64_t (**)(const void *))(*(void *)v3 + 40))(v3) & 1) != 0)
  {
    return 0;
  }
  uint64_t v8 = v7;
  if (v7
    && !*((_DWORD *)this + 17)
    && !*((_DWORD *)this + 18)
    && !*((_DWORD *)this + 19)
    && !*((_DWORD *)this + 21)
    && !*((_DWORD *)this + 22)
    && !*((_DWORD *)this + 23)
    && !*((_DWORD *)this + 34)
    && !*((_DWORD *)this + 35)
    && !*((_DWORD *)this + 36)
    && *((float *)this + 26) == 0.0
    && *((float *)this + 27) == 0.0
    && *((float *)this + 28) == 0.0
    && *((float *)this + 30) == 0.0
    && *((float *)this + 31) == 0.0
    && *((float *)this + 32) == 0.0
    && *((float *)this + 37) == 0.0
    && *((float *)this + 38) == 0.0
    && *((float *)this + 39) == 0.0)
  {
    *((unsigned char *)this + 32) = 1;
    *((unsigned char *)v7 + 32) = 1;
    *((void *)&v106[6] + 1) = 0;
    *(void *)&v106[0] = &unk_1ED9855F0;
    long long v90 = *((_OWORD *)v7 + 6);
    *(_OWORD *)((char *)&v106[3] + 8) = *((_OWORD *)v7 + 7);
    long long v91 = *((_OWORD *)v7 + 9);
    *(_OWORD *)((char *)&v106[4] + 8) = *((_OWORD *)v7 + 8);
    *(_OWORD *)((char *)&v106[5] + 8) = v91;
    DWORD2(v106[6]) = *((_DWORD *)v7 + 40);
    long long v92 = *((_OWORD *)v7 + 5);
    *(_OWORD *)((char *)v106 + 8) = *((_OWORD *)v7 + 4);
    *(_OWORD *)((char *)&v106[1] + 8) = v92;
    int v93 = *((_DWORD *)this + 16);
    uint64_t v94 = SDWORD1(v106[1]) * (uint64_t)v93;
    int v95 = *((_DWORD *)this + 20);
    uint64_t v96 = (int)v92 * (uint64_t)v95;
    DWORD2(v106[0]) = (unint64_t)(v93 * (uint64_t)SDWORD2(v106[0]) + 0x8000) >> 16;
    HIDWORD(v106[0]) = (unint64_t)(v95 * (uint64_t)SHIDWORD(v106[0]) + 0x8000) >> 16;
    *(_OWORD *)((char *)&v106[2] + 8) = v90;
    LODWORD(v106[2]) = (unint64_t)(SDWORD2(v92) * (uint64_t)v93 + 0x8000) >> 16;
    DWORD1(v106[2]) = (unint64_t)(SHIDWORD(v92) * (uint64_t)v95 + 0x8000) >> 16;
    int v97 = *((_DWORD *)this + 24);
    uint64_t v98 = v97 * (uint64_t)SLODWORD(v106[1]);
    uint64_t v99 = SDWORD1(v92) * (uint64_t)v97;
    uint64_t v100 = (int)v90 * (uint64_t)v97;
    LODWORD(v90) = *((_DWORD *)this + 25);
    unsigned int v101 = *((_DWORD *)this + 29);
    LODWORD(v92) = *((_DWORD *)this + 33);
    v102.i64[0] = __PAIR64__(v101, v90);
    v102.i64[1] = __PAIR64__(v90, v92);
    *(float32x4_t *)((char *)&v106[2] + 12) = vmulq_f32(v102, *(float32x4_t *)((char *)&v106[2] + 12));
    v102.i64[0] = __PAIR64__(v92, v101);
    v102.i64[1] = __PAIR64__(v101, v90);
    *(float32x4_t *)((char *)&v106[3] + 12) = vmulq_f32(v102, *(float32x4_t *)((char *)&v106[3] + 12));
    *((float *)&v106[4] + 3) = *(float *)&v92 * *((float *)&v106[4] + 3);
    LODWORD(v106[1]) = (unint64_t)(v98 + 0x8000) >> 16;
    DWORD1(v106[1]) = (unint64_t)(v94 + 0x8000) >> 16;
    DWORD2(v106[1]) = (unint64_t)(v96 + 0x8000) >> 16;
    HIDWORD(v106[1]) = (unint64_t)(v99 + 0x8000) >> 16;
    DWORD2(v106[2]) = (unint64_t)(v100 + 0x8000) >> 16;
    uint64_t v103 = *((void *)v7 + 2);
    CMMMatrix::MakeMatrixConv((CMMMatrix *)v106, a2, v7);
    uint64_t v105 = v104;
    *(void *)(v104 + 16) = v103;
    if (v103) {
      *(void *)(v103 + 24) = v104;
    }
    if ((*(unsigned int (**)(CMMConvMatrix *))(*(void *)this + 40))(this)) {
      (*(void (**)(uint64_t))(*(void *)v105 + 24))(v105);
    }
    if ((*(unsigned int (**)(CMMConvMatrix *))(*(void *)v8 + 64))(v8)) {
      (*(void (**)(uint64_t))(*(void *)v105 + 48))(v105);
    }
    return 1;
  }
  if (!v9)
  {
    if (v27)
    {
      double v28 = v27;
      {
        *((unsigned char *)this + 32) = 1;
        float v17 = v28 + 2;
        uint64_t v16 = v28[2];
        *((unsigned char *)v28 + 32) = 1;
        memset(&v106[5], 0, 32);
        DWORD2(v106[6]) = 1065353216;
        memset((char *)v106 + 8, 0, 72);
        *(void *)&v106[0] = &unk_1ED983568;
        CMMMatrix::InitializeGrayMatrix((uint64_t)v106, (CMMConvMatrix *)((char *)this + 56), (const CMMMatrix *)(v28 + 7), 0.0);
        uint64_t v21 = CMMBase::NewInternal(0xA8uLL, (void **)a2);
        *((_DWORD *)v21 + 2) = 1;
        v21[2] = 0;
        v21[3] = v28;
        v21[5] = 0x3F80000000000000;
        *(_DWORD *)((char *)v21 + 33) = 0;
        *uint64_t v21 = &unk_1ED981B18;
        v21[7] = &unk_1ED9855F0;
        long long v29 = *(_OWORD *)((char *)&v106[1] + 8);
        *((_OWORD *)v21 + 4) = *(_OWORD *)((char *)v106 + 8);
        *((_OWORD *)v21 + 5) = v29;
        long long v30 = *(_OWORD *)((char *)&v106[3] + 8);
        *((_OWORD *)v21 + 6) = *(_OWORD *)((char *)&v106[2] + 8);
        *((_OWORD *)v21 + 7) = v30;
        long long v31 = *(_OWORD *)((char *)&v106[5] + 8);
        *((_OWORD *)v21 + 8) = *(_OWORD *)((char *)&v106[4] + 8);
        *((_OWORD *)v21 + 9) = v31;
        *((_DWORD *)v21 + 40) = DWORD2(v106[6]);
        *((_WORD *)v21 + 24) = 256;
        *((_WORD *)v21 + 16) = 256;
        *(_WORD *)((char *)v21 + 35) = 0;
        double v26 = &unk_1ED984068;
      }
      else
      {
        if (!result) {
          return result;
        }
        int v45 = (const void *)*((void *)this + 3);
        if (v45)
        {
          if (v46)
          {
            int v47 = v46;
            {
              char v54 = (const void *)v28[2];
              if (v54)
              {
                if (v55)
                {
                  long long v56 = v55;
                  if (v55[160] || (uint64_t v81 = *((void *)v55 + 21)) == 0) {
                    long long v57 = 0;
                  }
                  else {
                    long long v57 = (int *)CMMTable::FloatData(*(void *)(v81 + 16), *(void *)(v81 + 24));
                  }
                  uint64_t v82 = (int *)CMMTable::FloatData(*(void *)(v47[8] + 16), *(void *)(v47[8] + 24));
                  if (v57) {
                    BOOL v83 = v82 == 0;
                  }
                  else {
                    BOOL v83 = 1;
                  }
                  int v84 = v83;
                  if (v82 == v57 || (v84 & 1) != 0)
                  {
                    if (v82 == v57 || v84 != 1)
                    {
LABEL_123:
                      (*(void (**)(void *))(*v47 + 72))(v47);
                      (*(void (**)(unsigned char *))(*(void *)v56 + 72))(v56);
                    }
                  }
                  else
                  {
                    uint64_t v85 = 4097;
                    while (1)
                    {
                      int v87 = *v82++;
                      int v86 = v87;
                      int v88 = *v57++;
                      int v89 = v86 - v88;
                      if (v89 < 0) {
                        int v89 = -v89;
                      }
                      if (v89 >= 2) {
                        break;
                      }
                      if (!--v85) {
                        goto LABEL_123;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        *((unsigned char *)this + 32) = 1;
        float v17 = v28 + 2;
        uint64_t v16 = v28[2];
        *((unsigned char *)v28 + 32) = 1;
        memset(&v106[5], 0, 32);
        DWORD2(v106[6]) = 1065353216;
        memset((char *)v106 + 8, 0, 72);
        *(void *)&v106[0] = &unk_1ED9835D0;
        CMMMatrix::InitializeGrayMatrix((uint64_t)v106, (CMMConvMatrix *)((char *)this + 56), (const CMMMatrix *)(v28 + 7), 0.0);
        uint64_t v21 = CMMBase::NewInternal(0xA8uLL, (void **)a2);
        *((_DWORD *)v21 + 2) = 1;
        v21[2] = 0;
        v21[3] = v28;
        v21[5] = 0x3F80000000000000;
        *(_DWORD *)((char *)v21 + 33) = 0;
        *uint64_t v21 = &unk_1ED981B18;
        v21[7] = &unk_1ED9855F0;
        long long v48 = *(_OWORD *)((char *)&v106[1] + 8);
        *((_OWORD *)v21 + 4) = *(_OWORD *)((char *)v106 + 8);
        *((_OWORD *)v21 + 5) = v48;
        long long v49 = *(_OWORD *)((char *)&v106[3] + 8);
        *((_OWORD *)v21 + 6) = *(_OWORD *)((char *)&v106[2] + 8);
        *((_OWORD *)v21 + 7) = v49;
        long long v50 = *(_OWORD *)((char *)&v106[5] + 8);
        *((_OWORD *)v21 + 8) = *(_OWORD *)((char *)&v106[4] + 8);
        *((_OWORD *)v21 + 9) = v50;
        *((_DWORD *)v21 + 40) = DWORD2(v106[6]);
        *((_WORD *)v21 + 24) = 257;
        *((_WORD *)v21 + 16) = 256;
        *(_WORD *)((char *)v21 + 35) = 0;
        double v26 = &unk_1ED984170;
      }
LABEL_61:
      *uint64_t v21 = v26;
      *float v17 = v21;
      v21[2] = v16;
      if (v16) {
        *(void *)(v16 + 24) = v21;
      }
      return 1;
    }
    if (v8)
    {
      uint64_t result = CMMMatrix::Is3x3((CMMConvMatrix *)((char *)this + 56));
      if (result)
      {
        uint64_t result = CMMMatrix::Is3x3((CMMConvMatrix *)((char *)v8 + 56));
        if (result)
        {
          return CMMConvMatrix::Collapse3x3(this, v8, a2);
        }
      }
      return result;
    }
    return 0;
  }
  BOOL v10 = v9;
  {
    if (!result) {
      return result;
    }
    int v116 = 0;
    uint64_t v115 = 0;
    if (*((_DWORD *)this + 16) == 31595 && *((_DWORD *)this + 19) == 0x8000 && *((_DWORD *)this + 22) == 27030)
    {
      uint64_t v32 = 0;
      *((void *)&v106[6] + 1) = 0;
      long long v33 = *((_OWORD *)v10 + 8);
      *(_OWORD *)((char *)&v106[5] + 8) = *((_OWORD *)v10 + 9);
      DWORD2(v106[6]) = *((_DWORD *)v10 + 40);
      long long v34 = *((_OWORD *)v10 + 6);
      *(_OWORD *)((char *)&v106[3] + 8) = *((_OWORD *)v10 + 7);
      *(_OWORD *)((char *)&v106[4] + 8) = v33;
      long long v35 = *((_OWORD *)v10 + 5);
      *(_OWORD *)((char *)v106 + 8) = *((_OWORD *)v10 + 4);
      *(_OWORD *)((char *)&v106[1] + 8) = v35;
      *(void *)&v106[0] = &unk_1ED9855F0;
      int v36 = (char *)v106 + 8;
      *(_OWORD *)((char *)&v106[2] + 8) = v34;
      do
      {
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        do
        {
          v38 += qword_18BEB4B80[v37] * *(int *)&v36[4 * v37];
          ++v37;
        }
        while (v37 != 3);
        int v39 = 0x1000000 - ((unint64_t)(v38 + 0x8000) >> 16);
        if (v39 < 0) {
          int v39 = -v39;
        }
        *((_DWORD *)&v115 + v32++) = v39 >> 8;
        v36 += 12;
      }
      while (v32 != 3);
      if ((int)v115 <= 1 && SHIDWORD(v115) <= 1 && v116 < 2)
      {
        unsigned __int8 v40 = (const void *)*((void *)this + 3);
        if (v40)
        {
          if (v41)
          {
            int v42 = v41;
            {
              uint64_t v58 = (const void *)*((void *)v10 + 2);
              if (v58)
              {
                uint64_t v107 = v59;
                if (v59)
                {
                  BOOL v60 = v59;
                  BOOL v61 = (const void *)*((void *)v59 + 2);
                  if (v61)
                  {
                    *(void *)&long long v108 = v62;
                    if (v62)
                    {
                      int v63 = v62;
                      CFDictionaryRef v64 = (const void *)v62[2];
                      if (v64)
                      {
                        *((void *)&v108 + 1) = v65;
                        if (v65)
                        {
                          if (!v60[18] && *((_DWORD *)v63 + 18) == 1 && v65[18] == 2)
                          {
                            uint64_t v66 = 0;
                            while (1)
                            {
                              uint64_t v67 = (uint64_t)*(&v107 + v66);
                              if (*(unsigned char *)(v67 + 160) || (uint64_t v69 = *(void *)(v67 + 168)) == 0) {
                                long long v68 = 0;
                              }
                              else {
                                long long v68 = (int *)CMMTable::FloatData(*(void *)(v69 + 16), *(void *)(v69 + 24));
                              }
                              uint64_t v70 = (int *)CMMTable::FloatData(*(void *)(v42[8] + 16), *(void *)(v42[8] + 24));
                              BOOL v71 = !v68 || v70 == 0;
                              BOOL v72 = v71;
                              if (v70 != v68 && !v72) {
                                break;
                              }
                              int v78 = !v72;
                              if (v70 != v68 && v78 == 0) {
                                goto LABEL_47;
                              }
LABEL_101:
                              if (++v66 == 3)
                              {
                                (*(void (**)(void *))(*v42 + 72))(v42);
                                for (uint64_t i = 0; i != 24; i += 8)
                                  (*(void (**)(void))(**(void **)((char *)&v107 + i) + 72))(*(void **)((char *)&v107 + i));
                                goto LABEL_47;
                              }
                            }
                            uint64_t v73 = 4097;
                            while (1)
                            {
                              int v75 = *v70++;
                              int v74 = v75;
                              int v76 = *v68++;
                              int v77 = v74 - v76;
                              if (v77 < 0) {
                                int v77 = -v77;
                              }
                              if (v77 >= 2) {
                                break;
                              }
                              if (!--v73) {
                                goto LABEL_101;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_47:
        *((unsigned char *)this + 32) = 1;
        uint64_t v43 = *((void *)v10 + 2);
        v10[32] = 1;
        int v44 = CMMBase::NewInternal(0x30uLL, (void **)a2);
        *((_DWORD *)v44 + 2) = 1;
        v44[3] = v10;
        v44[5] = 0x3F80000000000000;
        *int v44 = &unk_1ED982B40;
        *(_DWORD *)((char *)v44 + 33) = 1;
        *((void *)v10 + 2) = v44;
        v44[2] = v43;
        if (v43) {
          *(void *)(v43 + 24) = v44;
        }
        return 1;
      }
      float v17 = v10 + 16;
      uint64_t v16 = *((void *)v10 + 2);
      *((unsigned char *)this + 32) = 1;
      v10[32] = 1;
      long long v113 = 0u;
      long long v114 = 0u;
      DWORD2(v114) = 1065353216;
      long long v108 = 0u;
      long long v109 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      uint64_t v112 = 0;
      uint64_t v107 = &unk_1ED9834C8;
      CMMMatrix::InitializeRGBMatrix((uint64_t)&v107, (CMMConvMatrix *)((char *)this + 56), (const CMMMatrix *)(v10 + 56), 0.0);
      BOOL v51 = (CMMConvGrayToRGBMatrix *)CMMBase::NewInternal(0xA8uLL, (void **)a2);
      CMMConvGrayToRGBMatrix::CMMConvGrayToRGBMatrix(v51, (const CMMMatrix *)&v107, (CMMConvNode *)v10, v52, v53);
      double v26 = &unk_1ED983F60;
      goto LABEL_61;
    }
    return 0;
  }
  uint64_t v11 = 0;
  uint64_t v12 = (char *)this + 64;
  int v13 = v10 + 276;
  while (2)
  {
    for (uint64_t j = 0; j != 12; j += 4)
    {
      if (*(_DWORD *)&v12[j] != *(_DWORD *)&v13[j])
      {
        float v17 = v10 + 16;
        uint64_t v16 = *((void *)v10 + 2);
        *((unsigned char *)this + 32) = 1;
        v10[32] = 1;
        memset(&v106[5], 0, 32);
        DWORD2(v106[6]) = 1065353216;
        memset((char *)v106 + 8, 0, 72);
        *(void *)&v106[0] = &unk_1ED983238;
        CMMMatrix::InitializeRGBMatrix((uint64_t)v106, (CMMConvMatrix *)((char *)this + 56), (const CMMMatrix *)(v10 + 56), 0.0);
        uint64_t v21 = CMMBase::NewInternal(0xA8uLL, (void **)a2);
        *((_DWORD *)v21 + 2) = 1;
        v21[2] = 0;
        v21[3] = v10;
        *((void *)v10 + 2) = v21;
        v21[5] = 0x3F80000000000000;
        *(_DWORD *)((char *)v21 + 33) = 0;
        *uint64_t v21 = &unk_1ED981B18;
        v21[7] = &unk_1ED9855F0;
        long long v22 = *(_OWORD *)((char *)&v106[1] + 8);
        *((_OWORD *)v21 + 4) = *(_OWORD *)((char *)v106 + 8);
        long long v23 = *(_OWORD *)((char *)&v106[4] + 8);
        long long v24 = *(_OWORD *)((char *)&v106[5] + 8);
        long long v25 = *(_OWORD *)((char *)&v106[2] + 8);
        *((_OWORD *)v21 + 7) = *(_OWORD *)((char *)&v106[3] + 8);
        *((_OWORD *)v21 + 8) = v23;
        *((_OWORD *)v21 + 9) = v24;
        *((_DWORD *)v21 + 40) = DWORD2(v106[6]);
        *((_OWORD *)v21 + 5) = v22;
        *((_OWORD *)v21 + 6) = v25;
        *((_WORD *)v21 + 24) = 0;
        *((unsigned char *)v21 + 33) = 1;
        *((unsigned char *)v21 + 32) = 0;
        *(_WORD *)((char *)v21 + 35) = 0;
        goto LABEL_26;
      }
    }
    ++v11;
    v13 += 12;
    v12 += 12;
    if (v11 != 3) {
      continue;
    }
    break;
  }
  float v15 = *((float *)this + 40) * *((float *)v10 + 40);
  uint64_t result = 1;
  *((unsigned char *)this + 32) = 1;
  v10[32] = 1;
  if (v15 != 1.0)
  {
    float v17 = v10 + 16;
    uint64_t v16 = *((void *)v10 + 2);
    memset(v106, 0, sizeof(v106));
    CMMMatrix::CMMMatrix((uint64_t)v106, CMMConvMatrix::CollapseToRGB(CMMConvInvMatrix *,CMMMemMgr &)::identityCMM3x4, v15);
    int v18 = (CMMConvRGBToRGBMatrix *)CMMBase::NewInternal(0xA8uLL, (void **)a2);
    CMMConvRGBToRGBMatrix::CMMConvRGBToRGBMatrix(v18, (const CMMMatrix *)v106, (CMMConvNode *)v10, v19, v20);
LABEL_26:
    double v26 = &unk_1ED983E58;
    goto LABEL_61;
  }
  return result;
}

uint64_t CMMConvNode::OutputClamp(CMMConvNode *this)
{
  return *((unsigned __int8 *)this + 36);
}

uint64_t CMMConvNode::InputClamp(CMMConvNode *this)
{
  return *((unsigned __int8 *)this + 35);
}

uint64_t CMMMatrixDisplayProfile::GetMatrixTags(CMMMatrixDisplayProfile *this, CMMXYZTag *(*a2)[3], CMMRGBCurves *a3)
{
  if (*((void *)this + 25)
    || (uint64_t result = CMMProfile::InnerGetMatrixTags(this, (CMMXYZTag *(*)[3])((char *)this + 184), (CMMCurveTag *(*)[3])((char *)this + 208)), result))
  {
    *((void *)a3 + 1) = *((void *)this + 26);
    *((void *)a3 + 2) = *((void *)this + 27);
    *((void *)a3 + 3) = *((void *)this + 28);
    (*a2)[0] = (CMMXYZTag *)*((void *)this + 23);
    (*a2)[1] = (CMMXYZTag *)*((void *)this + 24);
    (*a2)[2] = (CMMXYZTag *)*((void *)this + 25);
    return 1;
  }
  return result;
}

void *CMMMatrixDisplayProfile::GetLutTags(_DWORD *a1, int a2)
{
  if (a2 != 4 || !(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 24))(a1)) {
    return 0;
  }
  int v3 = a1[12];
  if (a1[13] == 1281450528) {
    int v4 = 1347182946;
  }
  else {
    int v4 = a1[13];
  }
  switch(v3)
  {
    case 1296255029:
      int v5 = 893602898;
      break;
    case 1296255030:
      int v5 = 910380114;
      break;
    case 1296255031:
      int v5 = 927157330;
      break;
    case 1296255032:
      int v5 = 943934546;
      break;
    default:
      if (v3 == 1281450528) {
        int v5 = 1145856354;
      }
      else {
        int v5 = a1[12];
      }
      break;
  }

  return CMMProfile::SingleTagContainer((uint64_t)a1, 1734438260, v4, v5);
}

uint64_t CMMProfile::InnerGetMatrixTags(CMMProfile *this, CMMXYZTag *(*a2)[3], CMMCurveTag *(*a3)[3])
{
  int v68 = 0;
  if (ColorSyncProfileContainsSupportedCICP(*((void *)this + 2), &v68))
  {
    switch((char)v68)
    {
      case 1:
        CFDictionaryRef v6 = CMMBase::NewInternal(0x38uLL, *((void ***)this + 3));
        if (ColorSyncProfileGetBT709RedPrimary_predicate != -1) {
          dispatch_once(&ColorSyncProfileGetBT709RedPrimary_predicate, &__block_literal_global_271);
        }
        uint64_t v7 = *((void *)this + 20);
        while (v7)
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(void *)(v7 + 16);
          if (!v7)
          {
            *((_DWORD *)v6 + 2) = 1918392666;
            v6[3] = v8;
            v6[4] = 20;
            v6[2] = 0;
            *(void *)(v8 + 16) = v6;
LABEL_53:
            v6[5] = &ColorSyncProfileGetBT709RedPrimary_rXYZ;
            *((_WORD *)v6 + 24) = 0;
            void *v6 = &unk_1ED985610;
            (*a2)[0] = (CMMXYZTag *)v6;
            double v28 = CMMBase::NewInternal(0x38uLL, *((void ***)this + 3));
            if (ColorSyncProfileGetBT709GreenPrimary_predicate[0] != -1) {
              dispatch_once(ColorSyncProfileGetBT709GreenPrimary_predicate, &__block_literal_global_274);
            }
            uint64_t v29 = *((void *)this + 20);
            while (v29)
            {
              uint64_t v30 = v29;
              uint64_t v29 = *(void *)(v29 + 16);
              if (!v29)
              {
                *((_DWORD *)v28 + 2) = 1733843290;
                v28[3] = v30;
                v28[4] = 20;
                v28[2] = 0;
                *(void *)(v30 + 16) = v28;
                goto LABEL_88;
              }
            }
            *((_DWORD *)v28 + 2) = 1733843290;
            v28[3] = 0;
            v28[4] = 20;
            v28[2] = 0;
LABEL_88:
            v28[5] = &ColorSyncProfileGetBT709GreenPrimary_gXYZ;
            *((_WORD *)v28 + 24) = 0;
            void *v28 = &unk_1ED985610;
            (*a2)[1] = (CMMXYZTag *)v28;
            uint64_t v43 = CMMBase::NewInternal(0x38uLL, *((void ***)this + 3));
            if (ColorSyncProfileGetBT709BluePrimary_predicate != -1) {
              dispatch_once(&ColorSyncProfileGetBT709BluePrimary_predicate, &__block_literal_global_277);
            }
            uint64_t v44 = *((void *)this + 20);
            while (v44)
            {
              uint64_t v45 = v44;
              uint64_t v44 = *(void *)(v44 + 16);
              if (!v44)
              {
                *((_DWORD *)v43 + 2) = 1649957210;
                v43[3] = v45;
                v43[4] = 20;
                v43[2] = 0;
                int v46 = &ColorSyncProfileGetBT709BluePrimary_bXYZ;
                goto LABEL_122;
              }
            }
            *((_DWORD *)v43 + 2) = 1649957210;
            v43[3] = 0;
            v43[4] = 20;
            v43[2] = 0;
            int v46 = &ColorSyncProfileGetBT709BluePrimary_bXYZ;
            goto LABEL_123;
          }
        }
        *((_DWORD *)v6 + 2) = 1918392666;
        v6[3] = 0;
        v6[4] = 20;
        v6[2] = 0;
        goto LABEL_53;
      case 5:
        uint64_t v16 = CMMBase::NewInternal(0x38uLL, *((void ***)this + 3));
        if (ColorSyncProfileGetBT601RedPrimary_predicate != -1) {
          dispatch_once(&ColorSyncProfileGetBT601RedPrimary_predicate, &__block_literal_global_262);
        }
        uint64_t v17 = *((void *)this + 20);
        while (v17)
        {
          uint64_t v18 = v17;
          uint64_t v17 = *(void *)(v17 + 16);
          if (!v17)
          {
            *((_DWORD *)v16 + 2) = 1918392666;
            v16[3] = v18;
            v16[4] = 20;
            v16[2] = 0;
            *(void *)(v18 + 16) = v16;
            goto LABEL_60;
          }
        }
        *((_DWORD *)v16 + 2) = 1918392666;
        v16[3] = 0;
        v16[4] = 20;
        v16[2] = 0;
LABEL_60:
        v16[5] = &ColorSyncProfileGetBT601RedPrimary_rXYZ;
        *((_WORD *)v16 + 24) = 0;
        *uint64_t v16 = &unk_1ED985610;
        (*a2)[0] = (CMMXYZTag *)v16;
        long long v31 = CMMBase::NewInternal(0x38uLL, *((void ***)this + 3));
        if (ColorSyncProfileGetBT601GreenPrimary_predicate != -1) {
          dispatch_once(&ColorSyncProfileGetBT601GreenPrimary_predicate, &__block_literal_global_265);
        }
        uint64_t v32 = *((void *)this + 20);
        while (v32)
        {
          uint64_t v33 = v32;
          uint64_t v32 = *(void *)(v32 + 16);
          if (!v32)
          {
            *((_DWORD *)v31 + 2) = 1733843290;
            v31[3] = v33;
            v31[4] = 20;
            v31[2] = 0;
            *(void *)(v33 + 16) = v31;
            goto LABEL_95;
          }
        }
        *((_DWORD *)v31 + 2) = 1733843290;
        v31[3] = 0;
        v31[4] = 20;
        v31[2] = 0;
LABEL_95:
        v31[5] = &ColorSyncProfileGetBT601GreenPrimary_gXYZ;
        *((_WORD *)v31 + 24) = 0;
        *long long v31 = &unk_1ED985610;
        (*a2)[1] = (CMMXYZTag *)v31;
        uint64_t v43 = CMMBase::NewInternal(0x38uLL, *((void ***)this + 3));
        if (ColorSyncProfileGetBT601BluePrimary_predicate != -1) {
          dispatch_once(&ColorSyncProfileGetBT601BluePrimary_predicate, &__block_literal_global_268);
        }
        uint64_t v47 = *((void *)this + 20);
        while (v47)
        {
          uint64_t v45 = v47;
          uint64_t v47 = *(void *)(v47 + 16);
          if (!v47)
          {
            *((_DWORD *)v43 + 2) = 1649957210;
            v43[3] = v45;
            v43[4] = 20;
            v43[2] = 0;
            int v46 = &ColorSyncProfileGetBT601BluePrimary_bXYZ;
            goto LABEL_122;
          }
        }
        *((_DWORD *)v43 + 2) = 1649957210;
        v43[3] = 0;
        v43[4] = 20;
        v43[2] = 0;
        int v46 = &ColorSyncProfileGetBT601BluePrimary_bXYZ;
        goto LABEL_123;
      case 9:
        float v19 = CMMBase::NewInternal(0x38uLL, *((void ***)this + 3));
        if (ColorSyncProfileGetBT2020RedPrimary_predicate != -1) {
          dispatch_once(&ColorSyncProfileGetBT2020RedPrimary_predicate, &__block_literal_global_280);
        }
        uint64_t v20 = *((void *)this + 20);
        while (v20)
        {
          uint64_t v21 = v20;
          uint64_t v20 = *(void *)(v20 + 16);
          if (!v20)
          {
            *((_DWORD *)v19 + 2) = 1918392666;
            v19[3] = v21;
            v19[4] = 20;
            v19[2] = 0;
            *(void *)(v21 + 16) = v19;
            goto LABEL_67;
          }
        }
        *((_DWORD *)v19 + 2) = 1918392666;
        v19[3] = 0;
        v19[4] = 20;
        v19[2] = 0;
LABEL_67:
        v19[5] = &ColorSyncProfileGetBT2020RedPrimary_rXYZ;
        *((_WORD *)v19 + 24) = 0;
        *float v19 = &unk_1ED985610;
        (*a2)[0] = (CMMXYZTag *)v19;
        long long v34 = CMMBase::NewInternal(0x38uLL, *((void ***)this + 3));
        if (ColorSyncProfileGetBT2020GreenPrimary_predicate[0] != -1) {
          dispatch_once(ColorSyncProfileGetBT2020GreenPrimary_predicate, &__block_literal_global_283);
        }
        uint64_t v35 = *((void *)this + 20);
        while (v35)
        {
          uint64_t v36 = v35;
          uint64_t v35 = *(void *)(v35 + 16);
          if (!v35)
          {
            *((_DWORD *)v34 + 2) = 1733843290;
            v34[3] = v36;
            v34[4] = 20;
            v34[2] = 0;
            *(void *)(v36 + 16) = v34;
            goto LABEL_102;
          }
        }
        *((_DWORD *)v34 + 2) = 1733843290;
        v34[3] = 0;
        v34[4] = 20;
        v34[2] = 0;
LABEL_102:
        v34[5] = &ColorSyncProfileGetBT2020GreenPrimary_gXYZ;
        *((_WORD *)v34 + 24) = 0;
        void *v34 = &unk_1ED985610;
        (*a2)[1] = (CMMXYZTag *)v34;
        uint64_t v43 = CMMBase::NewInternal(0x38uLL, *((void ***)this + 3));
        if (ColorSyncProfileGetBT2020BluePrimary_predicate != -1) {
          dispatch_once(&ColorSyncProfileGetBT2020BluePrimary_predicate, &__block_literal_global_286);
        }
        uint64_t v48 = *((void *)this + 20);
        while (v48)
        {
          uint64_t v45 = v48;
          uint64_t v48 = *(void *)(v48 + 16);
          if (!v48)
          {
            *((_DWORD *)v43 + 2) = 1649957210;
            v43[3] = v45;
            v43[4] = 20;
            v43[2] = 0;
            int v46 = &ColorSyncProfileGetBT2020BluePrimary_bXYZ;
            goto LABEL_122;
          }
        }
        *((_DWORD *)v43 + 2) = 1649957210;
        v43[3] = 0;
        v43[4] = 20;
        v43[2] = 0;
        int v46 = &ColorSyncProfileGetBT2020BluePrimary_bXYZ;
        goto LABEL_123;
      case 11:
        long long v22 = CMMBase::NewInternal(0x38uLL, *((void ***)this + 3));
        if (ColorSyncProfileGetDCIP3RedPrimary_predicate != -1) {
          dispatch_once(&ColorSyncProfileGetDCIP3RedPrimary_predicate, &__block_literal_global_298);
        }
        uint64_t v23 = *((void *)this + 20);
        while (v23)
        {
          uint64_t v24 = v23;
          uint64_t v23 = *(void *)(v23 + 16);
          if (!v23)
          {
            *((_DWORD *)v22 + 2) = 1918392666;
            v22[3] = v24;
            v22[4] = 20;
            v22[2] = 0;
            *(void *)(v24 + 16) = v22;
            goto LABEL_74;
          }
        }
        *((_DWORD *)v22 + 2) = 1918392666;
        v22[3] = 0;
        v22[4] = 20;
        v22[2] = 0;
LABEL_74:
        v22[5] = &ColorSyncProfileGetDCIP3RedPrimary_rXYZ;
        *((_WORD *)v22 + 24) = 0;
        *long long v22 = &unk_1ED985610;
        (*a2)[0] = (CMMXYZTag *)v22;
        uint64_t v37 = CMMBase::NewInternal(0x38uLL, *((void ***)this + 3));
        if (ColorSyncProfileGetDCIP3GreenPrimary_predicate != -1) {
          dispatch_once(&ColorSyncProfileGetDCIP3GreenPrimary_predicate, &__block_literal_global_301);
        }
        uint64_t v38 = *((void *)this + 20);
        while (v38)
        {
          uint64_t v39 = v38;
          uint64_t v38 = *(void *)(v38 + 16);
          if (!v38)
          {
            *((_DWORD *)v37 + 2) = 1733843290;
            v37[3] = v39;
            v37[4] = 20;
            v37[2] = 0;
            *(void *)(v39 + 16) = v37;
            goto LABEL_109;
          }
        }
        *((_DWORD *)v37 + 2) = 1733843290;
        v37[3] = 0;
        v37[4] = 20;
        v37[2] = 0;
LABEL_109:
        v37[5] = &ColorSyncProfileGetDCIP3GreenPrimary_gXYZ;
        *((_WORD *)v37 + 24) = 0;
        *uint64_t v37 = &unk_1ED985610;
        (*a2)[1] = (CMMXYZTag *)v37;
        uint64_t v43 = CMMBase::NewInternal(0x38uLL, *((void ***)this + 3));
        if (ColorSyncProfileGetDCIP3BluePrimary_predicate[0] != -1) {
          dispatch_once(ColorSyncProfileGetDCIP3BluePrimary_predicate, &__block_literal_global_304);
        }
        uint64_t v49 = *((void *)this + 20);
        while (v49)
        {
          uint64_t v45 = v49;
          uint64_t v49 = *(void *)(v49 + 16);
          if (!v49)
          {
            *((_DWORD *)v43 + 2) = 1649957210;
            v43[3] = v45;
            v43[4] = 20;
            v43[2] = 0;
            int v46 = &ColorSyncProfileGetDCIP3BluePrimary_bXYZ;
            goto LABEL_122;
          }
        }
        *((_DWORD *)v43 + 2) = 1649957210;
        v43[3] = 0;
        v43[4] = 20;
        v43[2] = 0;
        int v46 = &ColorSyncProfileGetDCIP3BluePrimary_bXYZ;
        goto LABEL_123;
      case 12:
        long long v25 = CMMBase::NewInternal(0x38uLL, *((void ***)this + 3));
        if (ColorSyncProfileGetDisplayP3RedPrimary_predicate != -1) {
          dispatch_once(&ColorSyncProfileGetDisplayP3RedPrimary_predicate, &__block_literal_global_289);
        }
        uint64_t v26 = *((void *)this + 20);
        break;
      default:
LABEL_128:
        uint64_t result = 0;
        (*a2)[0] = 0;
        (*a2)[1] = 0;
        (*a2)[2] = 0;
        (*a3)[0] = 0;
        (*a3)[1] = 0;
        (*a3)[2] = 0;
        return result;
    }
    while (v26)
    {
      uint64_t v27 = v26;
      uint64_t v26 = *(void *)(v26 + 16);
      if (!v26)
      {
        *((_DWORD *)v25 + 2) = 1918392666;
        v25[3] = v27;
        v25[4] = 20;
        v25[2] = 0;
        *(void *)(v27 + 16) = v25;
        goto LABEL_81;
      }
    }
    *((_DWORD *)v25 + 2) = 1918392666;
    v25[3] = 0;
    v25[4] = 20;
    v25[2] = 0;
LABEL_81:
    v25[5] = &ColorSyncProfileGetDisplayP3RedPrimary_rXYZ;
    *((_WORD *)v25 + 24) = 0;
    *long long v25 = &unk_1ED985610;
    (*a2)[0] = (CMMXYZTag *)v25;
    unsigned __int8 v40 = CMMBase::NewInternal(0x38uLL, *((void ***)this + 3));
    if (ColorSyncProfileGetDisplayP3GreenPrimary_predicate[0] != -1) {
      dispatch_once(ColorSyncProfileGetDisplayP3GreenPrimary_predicate, &__block_literal_global_292);
    }
    uint64_t v41 = *((void *)this + 20);
    while (v41)
    {
      uint64_t v42 = v41;
      uint64_t v41 = *(void *)(v41 + 16);
      if (!v41)
      {
        *((_DWORD *)v40 + 2) = 1733843290;
        v40[3] = v42;
        v40[4] = 20;
        v40[2] = 0;
        *(void *)(v42 + 16) = v40;
        goto LABEL_116;
      }
    }
    *((_DWORD *)v40 + 2) = 1733843290;
    v40[3] = 0;
    v40[4] = 20;
    v40[2] = 0;
LABEL_116:
    v40[5] = &ColorSyncProfileGetDisplayP3GreenPrimary_gXYZ;
    *((_WORD *)v40 + 24) = 0;
    void *v40 = &unk_1ED985610;
    (*a2)[1] = (CMMXYZTag *)v40;
    uint64_t v43 = CMMBase::NewInternal(0x38uLL, *((void ***)this + 3));
    if (ColorSyncProfileGetDisplayP3BluePrimary_predicate != -1) {
      dispatch_once(&ColorSyncProfileGetDisplayP3BluePrimary_predicate, &__block_literal_global_295);
    }
    uint64_t v50 = *((void *)this + 20);
    do
    {
      if (!v50)
      {
        *((_DWORD *)v43 + 2) = 1649957210;
        v43[3] = 0;
        v43[4] = 20;
        v43[2] = 0;
        int v46 = &ColorSyncProfileGetDisplayP3BluePrimary_bXYZ;
        goto LABEL_123;
      }
      uint64_t v45 = v50;
      uint64_t v50 = *(void *)(v50 + 16);
    }
    while (v50);
    *((_DWORD *)v43 + 2) = 1649957210;
    v43[3] = v45;
    v43[4] = 20;
    v43[2] = 0;
    int v46 = &ColorSyncProfileGetDisplayP3BluePrimary_bXYZ;
LABEL_122:
    *(void *)(v45 + 16) = v43;
LABEL_123:
    v43[5] = v46;
    *((_WORD *)v43 + 24) = 0;
    *uint64_t v43 = &unk_1ED985610;
    (*a2)[2] = (CMMXYZTag *)v43;
    switch(BYTE1(v68))
    {
      case 1:
      case 6:
      case 0xE:
      case 0xF:
        BOOL v51 = (CMMCurveTag *)CMMBase::NewInternal(0x80uLL, *((void ***)this + 3));
        uint64_t v52 = *((void *)this + 20);
        do
        {
          uint64_t v53 = v52;
          if (!v52) {
            break;
          }
          uint64_t v52 = *(void *)(v52 + 16);
        }
        while (v52);
        char v54 = CMMParaCurveTag::CMMParaCurveTag(v51, 1885434465, (uint64_t)"para", 32, v53);
        long long v55 = off_1ED982A18;
        goto LABEL_137;
      case 8:
        long long v56 = (CMMCurveTag *)CMMBase::NewInternal(0x38uLL, *((void ***)this + 3));
        uint64_t v57 = *((void *)this + 20);
        do
        {
          uint64_t v58 = v57;
          if (!v57) {
            break;
          }
          uint64_t v57 = *(void *)(v57 + 16);
        }
        while (v57);
        CMMCurveTag::CMMCurveTag(v56, 0, (uint64_t)"curv", 16, v58);
        long long v55 = (void (**)(CMMITUBT709OETF *__hidden))&unk_1ED982618;
        goto LABEL_137;
      case 0xD:
        BOOL v59 = (CMMCurveTag *)CMMBase::NewInternal(0x80uLL, *((void ***)this + 3));
        uint64_t v60 = *((void *)this + 20);
        do
        {
          uint64_t v61 = v60;
          if (!v60) {
            break;
          }
          uint64_t v60 = *(void *)(v60 + 16);
        }
        while (v60);
        char v54 = CMMParaCurveTag::CMMParaCurveTag(v59, 1885434465, (uint64_t)"para", 32, v61);
        long long v55 = (void (**)(CMMITUBT709OETF *__hidden))&unk_1ED9818A0;
LABEL_137:
        *(void *)char v54 = v55;
        break;
      case 0x10:
        int v62 = (CMMPQCurveTag *)CMMBase::NewInternal(0x60uLL, *((void ***)this + 3));
        uint64_t v63 = *((void *)this + 20);
        do
        {
          uint64_t v64 = v63;
          if (!v63) {
            break;
          }
          uint64_t v63 = *(void *)(v63 + 16);
        }
        while (v63);
        CMMPQCurveTag::CMMPQCurveTag(v62, 0, v64);
        break;
      case 0x12:
        uint64_t v65 = (CMMHLGCurveTag *)CMMBase::NewInternal(0x58uLL, *((void ***)this + 3));
        uint64_t v66 = *((void *)this + 20);
        do
        {
          uint64_t v67 = v66;
          if (!v66) {
            break;
          }
          uint64_t v66 = *(void *)(v66 + 16);
        }
        while (v66);
        CMMHLGCurveTag::CMMHLGCurveTag(v65, v67);
        break;
      default:
        goto LABEL_128;
    }
    (*a3)[1] = v54;
    (*a3)[2] = v54;
    (*a3)[0] = v54;
  }
  else
  {
    unint64_t Tag = CMMProfile::GetTag((uint64_t)this, 1633776231);
    if (Tag)
    {
      (*a3)[0] = (CMMCurveTag *)Tag;
    }
    else
    {
      uint64_t result = (uint64_t)CMMProfile::GetTag((uint64_t)this, 1918128707);
      (*a3)[0] = (CMMCurveTag *)result;
      if (!result) {
        return result;
      }
    }
    uint64_t v11 = CMMProfile::GetTag((uint64_t)this, 1633773415);
    if (v11)
    {
      (*a3)[1] = (CMMCurveTag *)v11;
    }
    else
    {
      uint64_t result = (uint64_t)CMMProfile::GetTag((uint64_t)this, 1733579331);
      (*a3)[1] = (CMMCurveTag *)result;
      if (!result) {
        return result;
      }
    }
    uint64_t v12 = CMMProfile::GetTag((uint64_t)this, 1633772135);
    if (v12)
    {
      (*a3)[2] = (CMMCurveTag *)v12;
    }
    else
    {
      uint64_t result = (uint64_t)CMMProfile::GetTag((uint64_t)this, 1649693251);
      (*a3)[2] = (CMMCurveTag *)result;
      if (!result) {
        return result;
      }
    }
    int v13 = CMMProfile::GetTag((uint64_t)this, 1633768035);
    if (v13)
    {
      (*a2)[0] = (CMMXYZTag *)v13;
    }
    else
    {
      uint64_t result = (uint64_t)CMMProfile::GetTag((uint64_t)this, 1918392666);
      (*a2)[0] = (CMMXYZTag *)result;
      if (!result) {
        return result;
      }
    }
    int v14 = CMMProfile::GetTag((uint64_t)this, 1633765219);
    if (v14)
    {
      (*a2)[1] = (CMMXYZTag *)v14;
    }
    else
    {
      uint64_t result = (uint64_t)CMMProfile::GetTag((uint64_t)this, 1733843290);
      (*a2)[1] = (CMMXYZTag *)result;
      if (!result) {
        return result;
      }
    }
    float v15 = CMMProfile::GetTag((uint64_t)this, 1633763939);
    if (v15)
    {
      (*a2)[2] = (CMMXYZTag *)v15;
    }
    else
    {
      uint64_t result = (uint64_t)CMMProfile::GetTag((uint64_t)this, 1649957210);
      (*a2)[2] = (CMMXYZTag *)result;
      if (!result) {
        return result;
      }
    }
  }
  return 1;
}

float ColorSyncOptionsGetHDRMediaReferenceWhite(const void *a1)
{
  if (!a1) {
    return 203.0;
  }
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 != CFDictionaryGetTypeID()) {
    return 203.0;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"com.apple.cmm.kColorSyncHDRMediaReferenceWhite");
  if (!Value)
  {
    if (CFDictionaryContainsKey((CFDictionaryRef)a1, @"com.apple.cmm.ApplyToneMaping") == 1)
    {
      uint64_t v12 = CFDictionaryGetValue((CFDictionaryRef)a1, @"com.apple.cmm.ApplyToneMaping");
      if (v12)
      {
        CFGetTypeID(v12);
        CFDictionaryGetTypeID();
      }
    }
    return 203.0;
  }
  float valuePtr = 0.0;
  if (CFNumberGetValue(Value, kCFNumberFloatType, &valuePtr))
  {
    float v10 = valuePtr;
  }
  else
  {
    float valuePtr = 0.0;
    float v10 = 0.0;
  }
  if (v10 == 0.0) {
    float result = 203.0;
  }
  else {
    float result = v10;
  }
  if (result != 203.0 && result != 100.0)
  {
    double v14 = v10;
    ColorSyncLog(2, (uint64_t)"kColorSyncHDRMediaReferenceWhite %f is neither kColorSync_default_reference_white nor kColorSync_legacy_reference_white - ignored", v4, v5, v6, v7, v8, v9, SLOBYTE(v14));
    return 203.0;
  }
  return result;
}

uint64_t CMMConvTRC::SetNOP(uint64_t this)
{
  *(unsigned char *)(this + 160) = 1;
  *(unsigned char *)(this + 32) = 1;
  return this;
}

uint64_t CMMProfile::GetMatrixTags()
{
  return 0;
}

uint64_t CMMProfile::GetLutTags()
{
  return 0;
}

uint64_t CMMConvGrayToRGBMatrix::Collapse(CMMConvGrayToRGBMatrix *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  return 0;
}

uint64_t CMMConvNode::ResetOutputClamp(uint64_t this)
{
  *(unsigned char *)(this + 36) = 0;
  return this;
}

uint64_t CMMConvNode::ResetInputClamp(uint64_t this)
{
  *(unsigned char *)(this + 35) = 0;
  return this;
}

uint64_t CMMConvRGBToGrayMatrix::Collapse(CMMConvRGBToGrayMatrix *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  return 0;
}

uint64_t CMMMatrix::InitializeRGBMatrix(uint64_t this, const CMMMatrix *a2, const CMMMatrix *a3, float a4)
{
  uint64_t v4 = 0;
  v38[3] = *MEMORY[0x1E4F143B8];
  *(float *)(this + 104) = *((float *)a2 + 26) * *((float *)a3 + 26);
  uint64_t v5 = (char *)a3 + 8;
  uint64_t v6 = (char *)a2 + 8;
  uint64_t v7 = this + 8;
  uint64_t v8 = (float *)((char *)a3 + 44);
  do
  {
    uint64_t v9 = 0;
    float v10 = a2;
    do
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      float v13 = 0.0;
      double v14 = v8;
      do
      {
        v12 += *(int *)((char *)v10 + v11 + 8) * (uint64_t)*((int *)v14 - 9);
        float v15 = *v14++;
        float v13 = v13 + (float)(v15 * *(float *)((char *)v10 + v11 + 44));
        v11 += 12;
      }
      while (v11 != 36);
      *(_DWORD *)(v7 + 12 * v4 + 4 * v9) = (unint64_t)(v12 + 0x8000) >> 16;
      *(float *)(this + 12 * v4 + 4 * v9++ + 44) = v13;
      float v10 = (const CMMMatrix *)((char *)v10 + 4);
    }
    while (v9 != 3);
    ++v4;
    v8 += 3;
  }
  while (v4 != 3);
  uint64_t v16 = 0;
  memset(v38, 0, 24);
  memset(v37, 0, sizeof(v37));
  do
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    do
    {
      v18 += (uint64_t)*(int *)&v6[v17] << 24;
      v17 += 4;
    }
    while (v17 != 12);
    v38[v16++] = v18 >> 16;
    v6 += 12;
  }
  while (v16 != 3);
  for (uint64_t i = 0; i != 3; ++i)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    do
    {
      v21 += v38[v20] * *(int *)&v5[4 * v20];
      ++v20;
    }
    while (v20 != 3);
    v37[i] = (v21 + 0x8000) >> 16;
    v5 += 12;
  }
  uint64_t v22 = 0;
  memset(v36, 0, sizeof(v36));
  uint64_t v23 = this + 8;
  do
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    do
    {
      v25 += (uint64_t)*(int *)(v23 + v24) << 24;
      v24 += 4;
    }
    while (v24 != 12);
    v36[v22++] = (int)(v25 >> 16);
    v23 += 12;
  }
  while (v22 != 3);
  for (uint64_t j = 0; j != 3; ++j)
  {
    uint64_t v27 = 0;
    double v28 = (double)(uint64_t)v37[j] / (double)(uint64_t)v36[j];
    do
    {
      *(_DWORD *)(v7 + v27) = vcvtmd_s64_f64(v28 * (double)*(int *)(v7 + v27) + 0.5);
      v27 += 4;
    }
    while (v27 != 12);
    v7 += 12;
  }
  uint64_t v29 = 0;
  uint64_t v30 = this + 44;
  do
  {
    uint64_t v31 = 0;
    float v32 = 0.0;
    do
    {
      float v32 = v32 + *(float *)(v30 + v31);
      v31 += 4;
    }
    while (v31 != 12);
    if (v32 != 0.0 && v32 != 1.0)
    {
      uint64_t v34 = 0;
      float v35 = 1.0 / v32;
      do
      {
        *(float *)(v30 + v34) = v35 * *(float *)(v30 + v34);
        v34 += 4;
      }
      while (v34 != 12);
    }
    ++v29;
    v30 += 12;
  }
  while (v29 != 3);
  return this;
}

uint64_t CMMMatrix::InitializeGrayMatrix(uint64_t this, const CMMMatrix *a2, const CMMMatrix *a3, float a4)
{
  uint64_t v4 = 0;
  *(float *)(this + 104) = *((float *)a2 + 26) * *((float *)a3 + 26);
  uint64_t v5 = this + 8;
  do
  {
    uint64_t v6 = 0;
    uint64_t v7 = a2;
    do
    {
      if (v4)
      {
        *(_DWORD *)(v5 + 12 * v4 + 4 * v6) = 0;
        *(_DWORD *)(this + 12 * v4 + 4 * v6 + 44) = 0;
      }
      else
      {
        uint64_t v8 = 0;
        uint64_t v9 = 0;
        float v10 = 0.0;
        uint64_t v11 = (float *)((char *)a3 + 44);
        do
        {
          v9 += *(int *)((char *)v7 + v8 + 8) * (uint64_t)*((int *)v11 - 9);
          float v12 = *v11++;
          float v10 = v10 + (float)(v12 * *(float *)((char *)v7 + v8 + 44));
          v8 += 12;
        }
        while (v8 != 36);
        *(_DWORD *)(v5 + 4 * v6) = (unint64_t)(v9 + 0x8000) >> 16;
        *(float *)(this + 44 + 4 * v6) = v10;
      }
      ++v6;
      uint64_t v7 = (const CMMMatrix *)((char *)v7 + 4);
    }
    while (v6 != 3);
    ++v4;
  }
  while (v4 != 3);
  return this;
}

uint64_t CMMConvGrayToGrayMatrix::Collapse(CMMConvGrayToGrayMatrix *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  return 0;
}

uint64_t CMMConvMatrixTemplate<CMMMtxOnly,CMMConvGrayToRGBMatrix>::GetTransformType()
{
  return 2;
}

void CMMConvGrayToRGBMatrix::CMMConvGrayToRGBMatrix(CMMConvGrayToRGBMatrix *this, const CMMMatrix *a2, CMMConvNode *a3, float a4, float a5)
{
  *((_DWORD *)this + 2) = 1;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = a3;
  *((void *)a3 + 2) = this;
  *((void *)this + 5) = 0x3F80000000000000;
  *(_DWORD *)((char *)this + 33) = 0;
  *(void *)this = &unk_1ED981B18;
  *((void *)this + 7) = &unk_1ED9855F0;
  long long v5 = *(_OWORD *)((char *)a2 + 8);
  long long v6 = *(_OWORD *)((char *)a2 + 40);
  *((_OWORD *)this + 5) = *(_OWORD *)((char *)a2 + 24);
  *((_OWORD *)this + 6) = v6;
  *((_OWORD *)this + 4) = v5;
  long long v7 = *(_OWORD *)((char *)a2 + 56);
  long long v8 = *(_OWORD *)((char *)a2 + 72);
  long long v9 = *(_OWORD *)((char *)a2 + 88);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 26);
  *((_OWORD *)this + 8) = v8;
  *((_OWORD *)this + 9) = v9;
  *((_OWORD *)this + 7) = v7;
  *((_WORD *)this + 24) = 1;
  *((_WORD *)this + 16) = 256;
  *(_WORD *)((char *)this + 35) = 0;
  *(void *)this = &unk_1ED984CC0;
}

uint64_t CMMConvMatrixTemplate<CMMMtxOnly,CMMConvRGBToGrayMatrix>::GetTransformType()
{
  return 2;
}

uint64_t CMMConvMatrixTemplate<CMMMtxOnly,CMMConvRGBToRGBMatrix>::GetTransformType()
{
  return 2;
}

uint64_t CMMConvMatrixTemplate<CMMMtxOnly,CMMConvGrayToGrayMatrix>::GetTransformType()
{
  return 2;
}

uint64_t CMMConvGrayToRGB::Collapse(CMMConvGrayToRGB *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  return 0;
}

uint64_t CMMConvScaleFloatXYZ::Collapse(CMMConvScaleFloatXYZ *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  long long v5 = (const void *)*((void *)this + 2);
  long long v6 = (const void *)*((void *)this + 3);
  int v7 = *((unsigned __int8 *)this + 32);
  if (*((unsigned char *)this + 32)) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v5 == 0;
  }
  if (v8)
  {
    long long v9 = 0;
  }
  else
  {
    long long v9 = v10;
    if (v10)
    {
      BOOL IsFloatingPointNOP = CMMMatrix::IsFloatingPointNOP((CMMMatrix *)(v10 + 56));
      *((unsigned char *)this + 32) = !IsFloatingPointNOP;
      if (IsFloatingPointNOP) {
        int v7 = 0;
      }
      else {
        int v7 = (*(uint64_t (**)(char *))(*(void *)v9 + 80))(v9) ^ 1;
      }
      *((unsigned char *)this + 32) = v7;
    }
    else
    {
      int v7 = 0;
    }
  }
  if (v7) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = v6 == 0;
  }
  if (!v12)
  {
    long long v9 = v13;
    if (v13)
    {
      BOOL v14 = CMMMatrix::IsFloatingPointNOP((CMMMatrix *)(v13 + 56));
      *((unsigned char *)this + 32) = !v14;
      if (v14) {
        int v7 = 0;
      }
      else {
        int v7 = (*(uint64_t (**)(char *))(*(void *)v9 + 80))(v9) ^ 1;
      }
      *((unsigned char *)this + 32) = v7;
    }
    else
    {
      int v7 = 0;
    }
  }
  if (v7) {
    BOOL v15 = 1;
  }
  else {
    BOOL v15 = v5 == 0;
  }
  if (v15)
  {
    uint64_t v16 = 0;
    if (!v9) {
      goto LABEL_39;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v16 = result;
    char v18 = (*(uint64_t (**)(uint64_t))(*(void *)result + 224))(result);
    *((unsigned char *)this + 32) = v18 ^ 1;
    if (v18) {
      int v7 = 0;
    }
    else {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 80))(v16) ^ 1;
    }
    *((unsigned char *)this + 32) = v7;
    if (!v9) {
      goto LABEL_39;
    }
  }
  if (v7)
  {
    (*(void (**)(char *))(*(void *)v9 + 72))(v9);
    uint64_t v19 = *((void *)v9 + 2);
    long long v33 = *((_OWORD *)v9 + 9);
    int v34 = *((_DWORD *)v9 + 40);
    *(_OWORD *)&v32[16] = *((_OWORD *)v9 + 7);
    *(_OWORD *)&v32[32] = *((_OWORD *)v9 + 8);
    long long v30 = *((_OWORD *)v9 + 4);
    v20.i32[1] = HIDWORD(*((void *)v9 + 8));
    long long v31 = *((_OWORD *)v9 + 5);
    *(_OWORD *)float v32 = *((_OWORD *)v9 + 6);
    v20.i32[0] = *((_DWORD *)this + 12);
    *(float32x4_t *)&v32[4] = vmulq_n_f32(*(float32x4_t *)&v32[4], *(float *)v20.i32);
    *(float32x4_t *)&v32[20] = vmulq_n_f32(*(float32x4_t *)&v32[20], *(float *)v20.i32);
    *(float *)&v32[36] = *(float *)v20.i32 * *(float *)&v32[36];
    *(float32x2_t *)((char *)&v33 + 4) = vmul_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(v20, 0), *(float32x2_t *)((char *)&v33 + 4));
    *((float *)&v33 + 3) = *(float *)v20.i32 * *((float *)&v33 + 3);
    int v21 = v9[48];
    int v22 = v9[49];
    uint64_t v23 = CMMBase::NewInternal(0xA8uLL, (void **)a2);
    *((_DWORD *)v23 + 2) = 1;
    v23[2] = 0;
    v23[3] = v9;
    *((void *)v9 + 2) = v23;
    v23[5] = 0x3F80000000000000;
    *(_DWORD *)((char *)v23 + 33) = 0;
    *uint64_t v23 = &unk_1ED981B18;
    v23[7] = &unk_1ED9855F0;
    *((_OWORD *)v23 + 4) = v30;
    *((_DWORD *)v23 + 40) = v34;
    *((_OWORD *)v23 + 7) = *(_OWORD *)&v32[16];
    *((_OWORD *)v23 + 8) = *(_OWORD *)&v32[32];
    *((_OWORD *)v23 + 9) = v33;
    *((_OWORD *)v23 + 5) = v31;
    *((_OWORD *)v23 + 6) = *(_OWORD *)v32;
    if (v21)
    {
      *((unsigned char *)v23 + 48) = 1;
      if (v22)
      {
        *((unsigned char *)v23 + 49) = 1;
        *((_WORD *)v23 + 16) = 256;
        *(_WORD *)((char *)v23 + 35) = 0;
        uint64_t v24 = &unk_1ED984170;
      }
      else
      {
        *((unsigned char *)v23 + 49) = 0;
        *((_WORD *)v23 + 16) = 256;
        *(_WORD *)((char *)v23 + 35) = 0;
        uint64_t v24 = &unk_1ED983F60;
      }
    }
    else
    {
      *((unsigned char *)v23 + 48) = 0;
      if (v22)
      {
        *((unsigned char *)v23 + 49) = 1;
        *((_WORD *)v23 + 16) = 256;
        *(_WORD *)((char *)v23 + 35) = 0;
        uint64_t v24 = &unk_1ED984068;
      }
      else
      {
        *((unsigned char *)v23 + 49) = 0;
        *((_WORD *)v23 + 16) = 256;
        *(_WORD *)((char *)v23 + 35) = 0;
        uint64_t v24 = &unk_1ED983E58;
      }
    }
    *uint64_t v23 = v24;
    v23[2] = v19;
    *((void *)v9 + 2) = v23;
    if (v19) {
      *(void *)(v19 + 24) = v23;
    }
    return 1;
  }
LABEL_39:
  uint64_t result = 0;
  if (v16)
  {
    if (v7)
    {
      (*(void (**)(uint64_t))(*(void *)v16 + 72))(v16);
      uint64_t v25 = *(void *)(v16 + 16);
      uint64_t v26 = CMMBase::NewInternal(0x38uLL, (void **)a2);
      float v27 = *((float *)this + 12) * *(float *)(v16 + 48);
      char v28 = *((unsigned char *)this + 35);
      char v29 = *(unsigned char *)(v16 + 36);
      uint64_t result = 1;
      *((_DWORD *)v26 + 2) = 1;
      v26[3] = v16;
      *(void *)(v16 + 16) = v26;
      v26[5] = 0x3FFFFF0000000000;
      *((unsigned char *)v26 + 34) = 0;
      *uint64_t v26 = &unk_1ED9838B8;
      *((float *)v26 + 12) = v27;
      *((unsigned char *)v26 + 35) = v28;
      *((unsigned char *)v26 + 36) = v29;
      *((_WORD *)v26 + 16) = 256;
      v26[2] = v25;
      if (v25) {
        *(void *)(v25 + 24) = v26;
      }
    }
  }
  return result;
}

CMMTable *CMMLut16Tag::MakeOutputLutTable(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, int a5)
{
  if (!*(void *)(a1 + 112))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  OutputTable = (_WORD *)CMMLut16Tag::GetOutputTable((CMMLut16Tag *)a1, a2);
  if (*(_WORD *)(a1 + 90) != 2 || *OutputTable || (__int16)OutputTable[1] != -1)
  {
    uint64_t v11 = (CMMTable *)CMMBase::NewInternal(0x28uLL, a4);
    *(void *)uint64_t v11 = &unk_1ED985520;
    *((void *)v11 + 1) = 1;
    *((void *)v11 + 3) = 0;
    *((void *)v11 + 4) = 21512;
    BOOL v12 = CMMBase::NewInternal(0x5408uLL, a4);
    *((void *)v11 + 2) = v12;
    uint64_t v13 = CMMTable::FloatData((uint64_t)v12, *((void *)v11 + 3));
    (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL))(*(void *)a1 + 104))(a1, a2, v13, a5 == 1347182946);
    if (a3)
    {
      char v25 = 0;
      BOOL v14 = (CMMLut16Tag *)CMMLut16Tag::GetOutputTable((CMMLut16Tag *)a1, a2);
      float v17 = CMMLut16Tag::EvaluateGamma(v14, (unsigned __int16 *)*(unsigned __int16 *)(a1 + 92), &v25, v15);
      if (v25)
      {
        FloatCFDataRef Copy = 0;
        *(_DWORD *)a3 = 1;
        *(_DWORD *)(a3 + 12) = 0;
        *(unsigned char *)(a3 + 8) = 1;
        *(float *)(a3 + 24) = v17;
      }
      else
      {
        *(_DWORD *)a3 = 0;
        FloatCFDataRef Copy = CMMTable::MakeFloatCopy(v11, a4, v16);
      }
      *(void *)(a3 + 16) = FloatCopy;
    }
    return v11;
  }
  if (CMMInitializeLinearGammaTable(void)::predicate == -1)
  {
    if (!a3) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  dispatch_once(&CMMInitializeLinearGammaTable(void)::predicate, &__block_literal_global_977);
  if (a3)
  {
LABEL_13:
    long long v21 = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 16);
    long long v20 = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 32);
    long long v22 = *(_OWORD *)CMMLinearGammaFloatLutInfo;
    *(void *)(a3 + 48) = *(void *)(CMMLinearGammaFloatLutInfo + 48);
    *(_OWORD *)(a3 + 16) = v21;
    *(_OWORD *)(a3 + 32) = v20;
    *(_OWORD *)a3 = v22;
  }
LABEL_14:
  uint64_t v11 = (CMMTable *)CMMLinearGammaTable;
  uint64_t v23 = *(void *)(CMMLinearGammaTable + 8);
  if (v23) {
    *(void *)(CMMLinearGammaTable + 8) = v23 + 1;
  }
  return v11;
}

CMMTable *CMMLut16Tag::MakeInputLutTable(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, int a5)
{
  if (!*(void *)(a1 + 104))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  InputTable = (_WORD *)CMMLut16Tag::GetInputTable((CMMLut16Tag *)a1, a2);
  if (*(_WORD *)(a1 + 90) != 2 || *InputTable || (__int16)InputTable[1] != -1)
  {
    uint64_t v11 = (CMMTable *)CMMBase::NewInternal(0x28uLL, a4);
    *(void *)uint64_t v11 = &unk_1ED985520;
    *((void *)v11 + 1) = 1;
    *((void *)v11 + 3) = 0;
    *((void *)v11 + 4) = 21512;
    BOOL v12 = CMMBase::NewInternal(0x5408uLL, a4);
    *((void *)v11 + 2) = v12;
    uint64_t v13 = CMMTable::FloatData((uint64_t)v12, *((void *)v11 + 3));
    (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL))(*(void *)a1 + 96))(a1, a2, v13, a5 == 1347182946);
    if (a3)
    {
      char v24 = 0;
      BOOL v14 = (CMMLut16Tag *)CMMLut16Tag::GetInputTable((CMMLut16Tag *)a1, a2);
      float v17 = CMMLut16Tag::EvaluateGamma(v14, (unsigned __int16 *)*(unsigned __int16 *)(a1 + 90), &v24, v15);
      *(_DWORD *)a3 = 1;
      *(_OWORD *)(a3 + 4) = 0u;
      *(_OWORD *)(a3 + 20) = 0u;
      *(_OWORD *)(a3 + 36) = 0u;
      *(_DWORD *)(a3 + 52) = 0;
      if (v24)
      {
        *(float *)(a3 + 24) = v17;
        *(unsigned char *)(a3 + 8) = 1;
      }
      else
      {
        *(_DWORD *)a3 = 0;
        *(void *)(a3 + 16) = CMMTable::MakeFloatCopy(v11, a4, v16);
      }
    }
    return v11;
  }
  if (CMMInitializeLinearGammaTable(void)::predicate == -1)
  {
    if (!a3) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  dispatch_once(&CMMInitializeLinearGammaTable(void)::predicate, &__block_literal_global_977);
  if (a3)
  {
LABEL_12:
    long long v20 = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 16);
    long long v19 = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 32);
    long long v21 = *(_OWORD *)CMMLinearGammaFloatLutInfo;
    *(void *)(a3 + 48) = *(void *)(CMMLinearGammaFloatLutInfo + 48);
    *(_OWORD *)(a3 + 16) = v20;
    *(_OWORD *)(a3 + 32) = v19;
    *(_OWORD *)a3 = v21;
  }
LABEL_13:
  uint64_t v11 = (CMMTable *)CMMLinearGammaTable;
  uint64_t v22 = *(void *)(CMMLinearGammaTable + 8);
  if (v22) {
    *(void *)(CMMLinearGammaTable + 8) = v22 + 1;
  }
  return v11;
}

uint64_t CMMLut16Tag::GetOutputLutSize(CMMLut16Tag *this)
{
  return *((unsigned __int16 *)this + 46);
}

uint64_t CMMLut16Tag::GetInputLutSize(CMMLut16Tag *this)
{
  return *((unsigned __int16 *)this + 45);
}

uint64_t CMMLut16Tag::GetOutputTable(CMMLut16Tag *this, int a2)
{
  uint64_t v2 = *((void *)this + 14);
  if (!v2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  return CMMTable::FloatData(*(void *)(v2 + 16), *(void *)(v2 + 24))
       + 2 * *((unsigned __int16 *)this + 46) * a2;
}

uint64_t CMMLut16Tag::GetInputTable(CMMLut16Tag *this, int a2)
{
  uint64_t v2 = *((void *)this + 13);
  if (!v2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  return CMMTable::FloatData(*(void *)(v2 + 16), *(void *)(v2 + 24))
       + 2 * *((unsigned __int16 *)this + 45) * a2;
}

uint64_t CMMColorSpaceProfile::GetSrcColorSpace(uint64_t a1, int a2)
{
  if (a2 == 1)
  {
    unsigned int v2 = *(_DWORD *)(a1 + 48);
    switch(v2)
    {
      case 0x4D434835u:
        uint64_t result = 893602898;
        break;
      case 0x4D434836u:
        uint64_t result = 910380114;
        break;
      case 0x4D434837u:
        uint64_t result = 927157330;
        break;
      case 0x4D434838u:
        uint64_t result = 943934546;
        break;
      default:
        unsigned int v5 = 1145856354;
        BOOL v4 = v2 == 1281450528;
        goto LABEL_7;
    }
  }
  else
  {
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = -50;
    }
    unsigned int v2 = *(_DWORD *)(a1 + 52);
    BOOL v4 = v2 == 1281450528;
    unsigned int v5 = 1347182946;
LABEL_7:
    if (v4) {
      return v5;
    }
    else {
      return v2;
    }
  }
  return result;
}

uint64_t CMMConvGrayToRGB::GetTransformType(CMMConvGrayToRGB *this, const __CFDictionary *a2)
{
  return 2;
}

uint64_t CMMConvMatrix::SetNOP(uint64_t this)
{
  *(unsigned char *)(this + 32) = 1;
  return this;
}

unsigned __int8 *CMMProfile::GetTagByArbitration(uint64_t a1, int a2)
{
  uint64_t result = CMMProfile::GetTag(a1, a2);
  if (!result)
  {
    if ((a2 - 1093812785) < 2)
    {
      int v5 = 1093812784;
    }
    else if ((a2 - 1886545201) < 2)
    {
      int v5 = 1886545200;
    }
    else
    {
      if ((a2 - 1110589745) > 1) {
        return 0;
      }
      int v5 = 1110589744;
    }
    return CMMProfile::GetTag(a1, v5);
  }
  return result;
}

double CMMColorSpaceProfile::GetLutTags(uint64_t a1, int a2, unsigned int a3)
{
  if (!*(unsigned char *)(a1 + 180)) {
    return CMMProfile::GetLutTagsGeneric(a1, a2, a3);
  }
  return result;
}

void *ConversionManager::AddScalingDownFloatXYZ(ConversionManager *this, char a2)
{
  double result = CMMBase::NewInternal(0x38uLL, *((void ***)this + 1));
  uint64_t v5 = *((void *)this + 3);
  *((_DWORD *)result + 2) = 1;
  result[2] = 0;
  result[3] = v5;
  if (v5) {
    *(void *)(v5 + 16) = result;
  }
  result[5] = 0x3FFFFF0000000000;
  *((unsigned char *)result + 34) = 0;
  *double result = &unk_1ED9838B8;
  *((_DWORD *)result + 12) = 1056964736;
  *((unsigned char *)result + 35) = a2;
  *((unsigned char *)result + 36) = 0;
  *((_WORD *)result + 16) = 256;
  *((void *)this + 3) = result;
  if (!*((void *)this + 2)) {
    *((void *)this + 2) = result;
  }
  return result;
}

void *ConversionManager::AddScalingUpFloatXYZ(ConversionManager *this)
{
  double result = CMMBase::NewInternal(0x38uLL, *((void ***)this + 1));
  uint64_t v3 = *((void *)this + 3);
  *((_DWORD *)result + 2) = 1;
  result[2] = 0;
  result[3] = v3;
  if (v3) {
    *(void *)(v3 + 16) = result;
  }
  result[5] = 0x3FFFFF0000000000;
  *double result = &unk_1ED9838B8;
  *((_DWORD *)result + 12) = 1073741568;
  *((unsigned char *)result + 36) = 0;
  *((_DWORD *)result + 8) = 256;
  *((void *)this + 3) = result;
  if (!*((void *)this + 2)) {
    *((void *)this + 2) = result;
  }
  return result;
}

BOOL CMMLut16Tag::IsMatrixNull(CMMLut16Tag *this)
{
  return *(_DWORD *)((char *)this + 54) == 0x10000
      && *(_DWORD *)((char *)this + 70) == 0x10000
      && *(_DWORD *)((char *)this + 86) == 0x10000
      && !*(_DWORD *)((char *)this + 58)
      && !*(_DWORD *)((char *)this + 62)
      && !*(_DWORD *)((char *)this + 66)
      && !*(_DWORD *)((char *)this + 74)
      && !*(_DWORD *)((char *)this + 78)
      && *(_DWORD *)((char *)this + 82) == 0;
}

void *CMMProfile::SingleTagContainer(uint64_t a1, int a2, int a3, int a4)
{
  double result = *(void **)(a1 + 168);
  if (result)
  {
    if (result[2] - result[1] != 24)
    {
      std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::resize((uint64_t)(result + 1), 1uLL);
      double result = *(void **)(a1 + 168);
    }
  }
  else
  {
    long long v9 = CMMBase::NewInternal(0x38uLL, *(void ***)(a1 + 24));
    double result = TVector<CMMTagInfo,TAllocator<CMMTagInfo>>::TVector(v9, 1uLL, *(void *)(a1 + 24));
    *(void *)(a1 + 168) = result;
  }
  float v10 = (_DWORD *)result[1];
  if ((_DWORD *)result[2] == v10) {
    std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::__throw_out_of_range[abi:ne180100]();
  }
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  return result;
}

CFTypeRef create_GenericCMYKProfile()
{
  if (create_GenericCMYKProfile_predicate != -1) {
    dispatch_once(&create_GenericCMYKProfile_predicate, &__block_literal_global_172);
  }
  uint64_t v0 = (const void *)create_GenericCMYKProfile_profile;

  return CFRetain(v0);
}

void ConversionManager::AddGrayConv(ConversionManager *this, CMMProfile *a2, int a3, const __CFDictionary *a4)
{
  unint64_t Tag = CMMProfile::GetTag((uint64_t)a2, 1800688195);
  if (Tag) {
  else
  }
    long long v9 = 0;
  if (*((_DWORD *)a2 + 13) == 1281450528) {
    int v10 = 1347182946;
  }
  else {
    int v10 = *((_DWORD *)a2 + 13);
  }
  if (v9) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = 4294967125;
  }
  CMMThrowExceptionOnError(v11);
  uint64_t v28 = 0;
  memset(v27, 0, sizeof(v27));
  LODWORD(v27[0]) = 1;
  uint64_t v12 = (*(uint64_t (**)(void *, long long *, void, BOOL, float))(*(void *)v9 + 64))(v9, v27, *((void *)this + 1), v10 != 1482250784, 1.0);
  uint64_t v13 = (*(unsigned int (**)(void *))(*(void *)v9 + 40))(v9);
  BOOL v14 = CMMBase::NewInternal(0xA8uLL, *((void ***)this + 1));
  uint64_t v15 = CMMConvTRC::CMMConvTRC((uint64_t)v14, 0, v12, v13, v27, *((void *)this + 3), 1, 1, 1.0, 1, a3 ^ 1u);
  *((void *)this + 3) = v15;
  if (*((void *)this + 2))
  {
    if (!a3) {
      goto LABEL_16;
    }
  }
  else
  {
    *((void *)this + 2) = v15;
    if (!a3) {
      goto LABEL_16;
    }
  }
  if (ConversionManager::exrToneMappingGammaIsRequested(a4, v16)) {
    ConversionManager::AddEXRToneMapping(this, a4, 1);
  }
LABEL_16:
  char v18 = &unk_1ED9855F0;
  uint64_t v25 = 0;
  long long v24 = 0uLL;
  uint64_t v26 = 1065353216;
  uint64_t v23 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  if (v10 == 1347182946)
  {
    *(int32x2_t *)((char *)&v24 + 4) = vdup_n_s32(0x808080u);
    LODWORD(v19) = 0x10000;
    DWORD1(v21) = 1065353216;
    uint64_t v25 = 0x3F0000003F000000;
  }
  else
  {
    if (v10 != 1482250784) {
      return;
    }
    LODWORD(v19) = 31595;
    HIDWORD(v19) = 0x8000;
    DWORD2(v20) = 27030;
    DWORD1(v21) = 1064752592;
    LODWORD(v22) = 1065353216;
    HIDWORD(v22) = 1062415525;
  }
  CMMMatrix::MakeMatrixConv((CMMMatrix *)&v18, *((CMMMemMgr **)this + 1), *((CMMConvNode **)this + 3));
  *((void *)this + 3) = v17;
}

void ConversionManager::AddMatrixConv(uint64_t a1, const __CFDictionary *a2, uint64_t a3, int a4, int a5, float32x2_t *a6, ConversionManager *this)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v261 = *MEMORY[0x1E4F143B8];
  memset(v232, 0, 56);
  LODWORD(v232[0]) = 1;
  uint64_t v217 = (uint64_t *)(a1 + 24);
  char v213 = a4 ^ 1;
  v230 = 0;
  uint64_t v231 = 0;
  uint64_t v229 = 0;
  memset(v228, 0, sizeof(v228));
  LODWORD(v228[0]) = 1;
  uint64_t v227 = 0;
  memset(v226, 0, sizeof(v226));
  LODWORD(v226[0]) = 1;
  int v254 = 0;
  long long v252 = 0u;
  long long v253 = 0u;
  long long v251 = 0u;
  float v10 = 1.0;
  uint64_t v214 = (const void *)*MEMORY[0x1E4F1CFD0];
  uint64_t v221 = (uint64_t *)(a1 + 16);
  *(void *)v219 = a6;
  uint64_t v220 = a3 + 8;
  uint64_t v11 = 1;
  int v218 = a5;
  do
  {
    int v12 = *(_DWORD *)(*(void *)(v220 + 8 * v8) + 52);
    if (v12 != 1212958496)
    {
      if (v12 == 1347493920)
      {
        if (a5 != 9)
        {
          unsigned int v211 = v11;
          uint64_t v212 = v9;
          if (a5 != 1) {
            __assert_rtn("AddMatrixConv", "CMMConversionManager.cpp", 2051, "0");
          }
          if (this)
          {
            int v13 = (CFDictionaryGetValue(this, @"com.apple.cmm.SkipPQEETF") == v214
                || CFDictionaryGetValue(this, @"com.apple.cmm.SkipToneMappingForBT2100") == v214)
               && *(unsigned char *)(a1 + 51) == 0;
            CFNumberRef Value = CFDictionaryGetValue(this, @"com.apple.cmm.ApplyToneMappingForBT2100");
            if (*(unsigned char *)(a1 + 51)) {
              BOOL v38 = Value == v214;
            }
            else {
              BOOL v38 = 1;
            }
            if (v38) {
              BOOL v39 = v13;
            }
            else {
              BOOL v39 = 1;
            }
            if (v39) {
              float v40 = 100.0;
            }
            else {
              float v40 = 10000.0;
            }
            if (CFDictionaryGetValue(this, @"com.apple.cmm.PQEETF3DLut") == v214) {
              int v41 = v13;
            }
            else {
              int v41 = 1;
            }
            if (!v41) {
              float v40 = 1.0;
            }
            a6 = *(float32x2_t **)v219;
            if (!*(void *)v219)
            {
LABEL_92:
              if (this)
              {
                if (CFDictionaryContainsKey(this, @"com.apple.cmm.PQEOTFOpticalScale") == 1)
                {
                  CFNumberRef v47 = (const __CFNumber *)CFDictionaryGetValue(this, @"com.apple.cmm.PQEOTFOpticalScale");
                  if (v47)
                  {
                    LODWORD(valuePtr[0]) = 0;
                    int v48 = CFNumberGetValue(v47, kCFNumberFloatType, valuePtr);
                    float v49 = *(float *)valuePtr;
                    if (!v48) {
                      float v49 = 0.0;
                    }
                    if (v49 != 0.0) {
                      float v40 = v49;
                    }
                  }
                }
              }
              unsigned int v50 = ColorSyncOptionsDisplayReferredToneMappingRequested(this);
              unsigned int v51 = ColorSyncOptionsReferenceWhiteReferredToneMappingRequested(this);
              if (*(unsigned char *)(a1 + 89) == 16)
              {
                BOOL v52 = ColorSyncOptionsGetFlexTRCOptions(0, this) != 0;
                if (*(unsigned char *)(a1 + 89) == 16)
                {
                  BOOL v53 = ColorSyncOptionsGetFlexLumaScalingOptions(0, this) != 0;
                  goto LABEL_104;
                }
              }
              else
              {
                BOOL v52 = 0;
              }
              BOOL v53 = 0;
LABEL_104:
              int v54 = v51 | (v52 || v53);
              if (v54) {
                float v55 = 1.0;
              }
              else {
                float v55 = v40;
              }
              if (*(unsigned char *)(a1 + 48)) {
                int v56 = 0;
              }
              else {
                int v56 = (v54 | v39) ^ 1;
              }
              if ((v50 & 1) == 0)
              {
                memset(valuePtr, 0, 56);
                LODWORD(valuePtr[0]) = 1;
                uint64_t TRC = CMMRGBCurves::MakeTRC(a3, v55, (uint64_t)valuePtr, *(void *)(a1 + 8), v8);
                uint64_t v58 = CMMBase::NewInternal(0xA8uLL, *(void ***)(a1 + 8));
                *(void *)(a1 + 24) = CMMConvPQEOTF::CMMConvPQEOTF(v58, v8, TRC, valuePtr, *(void *)(a1 + 24), v55);
              }
              if (v8 == 2 && (v56 | v50 | v51 | v53 | v52) == 1)
              {
                if (v50)
                {
                  CFDictionaryRef v59 = (const __CFDictionary *)CFDictionaryGetValue(this, @"com.apple.cmm.ApplyToneMaping");
                  CFDictionaryRef v60 = v59;
                  if (v59)
                  {
                    CFTypeID v61 = CFGetTypeID(v59);
                    if (v61 == CFDictionaryGetTypeID())
                    {
                      CFDictionaryRef v62 = (const __CFDictionary *)CFDictionaryGetValue(v60, @"com.apple.cmm.ApplyDisplayReferredToneMapping");
                      CFDictionaryRef v63 = v62;
                      if (v62)
                      {
                        CFTypeID v64 = CFGetTypeID(v62);
                        if (v64 == CFDictionaryGetTypeID())
                        {
                          CFDictionaryRef v65 = (const __CFDictionary *)CFDictionaryGetValue(v63, @"com.apple.cmm.ApplyPQEETFToneMapping");
                          CFDictionaryRef v66 = v65;
                          if (v65 && (CFTypeID v67 = CFGetTypeID(v65), v67 == CFDictionaryGetTypeID()))
                          {
                            CFNumberRef v68 = (const __CFNumber *)CFDictionaryGetValue(v66, @"com.apple.cmm.PQEOTFOpticalScale");
                            if (v68)
                            {
                              LODWORD(valuePtr[0]) = 0;
                              int v69 = CFNumberGetValue(v68, kCFNumberFloatType, valuePtr);
                              float v70 = *(float *)valuePtr;
                              if (!v69) {
                                float v70 = 0.0;
                              }
                              if (v70 != 0.0) {
                                float v55 = v70;
                              }
                            }
                            CFNumberRef v71 = (const __CFNumber *)CFDictionaryGetValue(v66, @"com.apple.cmm.TargetDisplayWhite");
                            if (v71)
                            {
                              LODWORD(valuePtr[0]) = 0;
                              if (CFNumberGetValue(v71, kCFNumberFloatType, valuePtr))
                              {
                                if (*(float *)valuePtr != 0.0) {
                                  *(_DWORD *)(*(void *)v219 + 8) = valuePtr[0];
                                }
                              }
                            }
                            ConversionManager::AddPQEETFToneMapping((void *)a1, *(float **)v219, 0, v55);
                          }
                          else
                          {
                            CFDictionaryRef v90 = (const __CFDictionary *)CFDictionaryGetValue(v63, @"com.apple.cmm.ApplyReferenceWhiteToneMapping");
                            CFDictionaryRef v91 = v90;
                            if (!v90 || (CFTypeID v92 = CFGetTypeID(v90), v92 != CFDictionaryGetTypeID()))
                            {
                              exception = __cxa_allocate_exception(4uLL);
                              _DWORD *exception = -178;
                            }
                            ConversionManager::AddExtendedRangeReferenceWhiteToneMapping((ConversionManager *)a1, v91);
                          }
                          float v10 = 1.0;
                          goto LABEL_184;
                        }
                      }
                    }
                  }
                }
                else
                {
                  float v10 = 1.0;
                  if (v51) {
                    goto LABEL_184;
                  }
                  if (v53)
                  {
                    CFNumberRef v78 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), (const void *)kColorSyncPreGainMapCICP);
                    CFNumberRef v80 = v78;
                    if (v78 && (CFTypeID v81 = CFGetTypeID(v78), v81 == CFNumberGetTypeID()))
                    {
                      LODWORD(valuePtr[0]) = 0;
                      int v82 = CFNumberGetValue(v80, kCFNumberSInt32Type, valuePtr);
                      int v83 = LOBYTE(valuePtr[0]);
                      if (v82 != 1) {
                        int v83 = 0;
                      }
                    }
                    else
                    {
                      int v83 = 0;
                    }
                    if (*(unsigned __int8 *)(a1 + 88) == v83) {
                      ConversionManager::AddFlexLuminanceToneMapping(a1, this, v79);
                    }
                    goto LABEL_184;
                  }
                  if (v52)
                  {
LABEL_184:
                    a5 = v218;
                    uint64_t v9 = v212;
                    uint64_t v11 = v211;
                    goto LABEL_185;
                  }
                  ConversionManager::AddPQEETFToneMapping((void *)a1, *(float **)v219, this, v55);
                }
              }
              if (*(unsigned char *)(a1 + 48))
              {
                if (*(unsigned char *)(a1 + 61)) {
                  float v10 = 1.0;
                }
                else {
                  float v10 = 2.03;
                }
              }
              else if ((*(unsigned char *)(a1 + 51) == 0) & ~v13 | v56 & 1)
              {
                if ((v56 & (v55 != 10000.0)) != 0) {
                  float v10 = 10000.0 / v55;
                }
                else {
                  float v10 = 1.0;
                }
              }
              else
              {
                float v10 = v55 / *(float *)(a1 + 64);
              }
              goto LABEL_184;
            }
          }
          else
          {
            int v13 = 0;
            BOOL v39 = *(unsigned char *)(a1 + 51) != 0;
            if (*(unsigned char *)(a1 + 51)) {
              float v40 = 100.0;
            }
            else {
              float v40 = 10000.0;
            }
            if (!a6) {
              goto LABEL_92;
            }
          }
          float32x2_t v44 = a6[2];
          if (v44)
          {
            float v45 = (float)(int)bswap32(*(_DWORD *)(*(void *)(*(void *)&v44 + 40) + 12)) * 0.000015259;
            if (v45 != v40 && v45 != 0.0) {
              float v40 = v45;
            }
          }
          goto LABEL_92;
        }
        if (a6)
        {
          unsigned int v32 = v8;
          if (!v8)
          {
            float32x2_t v33 = a6[2];
            if (v33)
            {
              uint64_t v34 = v11;
              float v35 = (float)(int)bswap32(*(_DWORD *)(*(void *)(*(void *)&v33 + 40) + 12)) * 0.000015259;
LABEL_132:
              if (v35 == 0.0) {
                float v72 = v35;
              }
              else {
                float v72 = v35 / 100.0;
              }
              if (this)
              {
                if (CFDictionaryContainsKey(this, @"com.apple.cmm.PQOOTFOpticalScale") == 1)
                {
                  CFNumberRef v73 = (const __CFNumber *)CFDictionaryGetValue(this, @"com.apple.cmm.PQOOTFOpticalScale");
                  if (v73)
                  {
                    LODWORD(valuePtr[0]) = 0;
                    int v74 = CFNumberGetValue(v73, kCFNumberFloatType, valuePtr);
                    float v75 = *(float *)valuePtr;
                    if (!v74) {
                      float v75 = 0.0;
                    }
                    if (v75 != 0.0) {
                      float v72 = v75;
                    }
                  }
                }
              }
              long long v245 = 0u;
              long long v246 = 0u;
              long long v244 = 0u;
              memset(valuePtr, 0, sizeof(valuePtr));
              CMMParaCurveTag::CMMParaCurveTag((CMMCurveTag *)valuePtr, 1885434465, (uint64_t)"para", 32, 0);
              *(void *)&valuePtr[0] = off_1ED982A18;
              int v76 = CMMParaCurveTag::MakeTRC((uint64_t)valuePtr, (uint64_t)v226, *(void ***)(a1 + 8), 0, v72);
              DWORD1(v226[0]) = 14;
              v230 = v76;
              long long v236 = 0u;
              long long v237 = 0u;
              long long v235 = 0u;
              *(void *)&long long v234 = LODWORD(v72) | 0x3F99999A00000000;
              int64x2_t v233 = &unk_1ED982E68;
              uint64_t v238 = LODWORD(v72);
              *((void *)&v234 + 1) = 0xC00000001;
              LOBYTE(v235) = 1;
              DWORD1(v235) = 1;
              LODWORD(v236) = 1075419546;
              DWORD1(v236) = powf(v72, 0.41667);
              long long v237 = 0uLL;
              *((void *)&v236 + 1) = 0;
              uint64_t v231 = CMMITUBT1886InvEOTF::MakeTRC((uint64_t)&v233, (uint64_t)v228, *(void ***)(a1 + 8));
              CMMTag::~CMMTag((CMMTag *)valuePtr);
              unsigned int v32 = 0;
LABEL_143:
              ConversionManager::AddTRCSequence(a1, v32, v221, v217, v226, (uint64_t *)&v230, v228, (uint64_t *)&v231);
              a5 = v218;
              uint64_t v11 = v34;
              goto LABEL_185;
            }
LABEL_131:
            uint64_t v34 = v11;
            float v35 = 100.0;
            goto LABEL_132;
          }
        }
        else
        {
          if (!v8) {
            goto LABEL_131;
          }
          unsigned int v32 = v8;
        }
        uint64_t v42 = v231[1];
        if (v42) {
          v231[1] = v42 + 1;
        }
        uint64_t v34 = v11;
        uint64_t v43 = v230[1];
        if (v43) {
          v230[1] = v43 + 1;
        }
        goto LABEL_143;
      }
      if (!*(unsigned char *)(a1 + 43) && !*(unsigned char *)(a1 + 44)) {
        goto LABEL_26;
      }
      if (*(unsigned char *)(a1 + 57) && !*(unsigned char *)(a1 + 49))
      {
        char v18 = v231;
        if (v231)
        {
          uint64_t v17 = v9;
          uint64_t v36 = v231[1];
          unsigned int v19 = 0;
          if (v36) {
            v231[1] = v36 + 1;
          }
        }
        else
        {
          if (*(unsigned char *)(a1 + 47)) {
            float SDRToPQScale = ColorSyncOptionsGetSDRToPQScale(this);
          }
          else {
            float SDRToPQScale = 1.0;
          }
          int v85 = *(unsigned __int8 *)(a1 + 59);
          if (*(unsigned char *)(a1 + 59))
          {
            uint64_t v17 = v9;
          }
          else
          {
            uint64_t v17 = v9;
            if (*(unsigned char *)(a1 + 48)) {
              float SDRToPQScale = 2.03;
            }
          }
          memset((char *)&valuePtr[2] + 8, 0, 32);
          *(long long *)((char *)&valuePtr[1] + 8) = 0u;
          *((void *)&valuePtr[0] + 1) = LODWORD(SDRToPQScale) | 0x3F99999A00000000;
          *(void *)&valuePtr[0] = &unk_1ED982E68;
          *((void *)&valuePtr[4] + 1) = LODWORD(SDRToPQScale);
          *(void *)&valuePtr[1] = 0xC00000001;
          BYTE8(valuePtr[1]) = 1;
          HIDWORD(valuePtr[1]) = 1;
          DWORD2(valuePtr[2]) = 1075419546;
          HIDWORD(valuePtr[2]) = powf(SDRToPQScale, 0.41667);
          memset(&valuePtr[3], 0, 24);
          if (v85)
          {
            DWORD1(valuePtr[1]) = 0;
            DWORD2(valuePtr[2]) = 0x40000000;
            float v86 = fabsf(sqrtf(SDRToPQScale));
            if (SDRToPQScale == -INFINITY) {
              float v86 = INFINITY;
            }
            *((float *)&valuePtr[2] + 3) = v86;
          }
          char v18 = CMMITUBT1886InvEOTF::MakeTRC((uint64_t)valuePtr, (uint64_t)v232, *(void ***)(a1 + 8));
          unsigned int v19 = 0;
          uint64_t v231 = v18;
        }
        goto LABEL_168;
      }
      if (*(unsigned char *)(a1 + 43) && *(unsigned char *)(a1 + 60) && !*(unsigned char *)(a1 + 49) && (a4 & 1) == 0)
      {
        if (v9)
        {
          uint64_t v15 = *(void *)(v9 + 8);
          if (v15) {
            *(void *)(v9 + 8) = v15 + 1;
          }
          uint64_t v16 = v11;
        }
        else
        {
          if (CMMInitializeSRGBGammaTable(void)::predicate[0] != -1) {
            dispatch_once(CMMInitializeSRGBGammaTable(void)::predicate, &__block_literal_global_974);
          }
          uint64_t v9 = CMMsRGBGammaTable;
          uint64_t v16 = *(unsigned int *)CMMsRGBGammaFloatLutInfo;
          long long v84 = *(_OWORD *)(CMMsRGBGammaFloatLutInfo + 20);
          long long v251 = *(_OWORD *)(CMMsRGBGammaFloatLutInfo + 4);
          long long v252 = v84;
          long long v253 = *(_OWORD *)(CMMsRGBGammaFloatLutInfo + 36);
          int v254 = *(_DWORD *)(CMMsRGBGammaFloatLutInfo + 52);
        }
        unsigned int v19 = 0;
        uint64_t v11 = v16;
        LODWORD(v232[0]) = v16;
        *(long long *)((char *)v232 + 4) = v251;
        *(long long *)((char *)&v232[1] + 4) = v252;
        *(long long *)((char *)&v232[2] + 4) = v253;
        DWORD1(v232[3]) = v254;
        uint64_t v17 = v9;
        char v18 = (void *)v9;
      }
      else
      {
LABEL_26:
        uint64_t v17 = v9;
        char v18 = (void *)CMMRGBCurves::MakeTRC(a3, 1.0, (uint64_t)v232, *(void *)(a1 + 8), v8);
        unsigned int v19 = (*(uint64_t (**)(void))(**(void **)(v220 + 8 * v8) + 40))(*(void *)(v220 + 8 * v8));
        if (*(unsigned char *)(a1 + 43)) {
          DWORD1(v232[0]) = 14;
        }
        unsigned int v20 = ColorSyncOptionsReferenceWhiteReferredToneMappingRequested(this);
        if (!*(unsigned char *)(a1 + 47) || (v20 & 1) != 0)
        {
          if ((a4 & v20) != 0) {
            float v10 = 0.203;
          }
        }
        else
        {
          if (*(unsigned char *)(a1 + 56)) {
            int v21 = 1;
          }
          else {
            int v21 = a4;
          }
          float v22 = default_PQInvEOTFOpticalScale(this, v21);
          float v23 = custom_PQInvEOTFOpticalScale(this, v22);
          if (!ColorSyncOptionsDisplayReferredToneMappingRequested(this)) {
            goto LABEL_52;
          }
          CFDictionaryRef v24 = (const __CFDictionary *)CFDictionaryGetValue(this, @"com.apple.cmm.ApplyToneMaping");
          CFDictionaryRef v25 = v24;
          if (!v24) {
            goto LABEL_52;
          }
          CFTypeID v26 = CFGetTypeID(v24);
          if (v26 == CFDictionaryGetTypeID()
            && (CFDictionaryRef v27 = (const __CFDictionary *)CFDictionaryGetValue(v25, @"com.apple.cmm.ApplyDisplayReferredToneMapping"), (v28 = v27) != 0)&& (v29 = CFGetTypeID(v27), v29 == CFDictionaryGetTypeID())&& (v30 = CFDictionaryGetValue(v28, @"com.apple.cmm.ApplyReferenceWhiteToneMapping")) != 0&& (v31 = CFGetTypeID(v30), v31 == CFDictionaryGetTypeID()))
          {
            float v10 = 0.203;
          }
          else
          {
LABEL_52:
            if (v23 == 0.0)
            {
              if (a4)
              {
                if (*(float *)(a1 + 64) != 100.0) {
                  float v10 = v22 * ColorSyncOptionsGetSDRToPQScale(this);
                }
              }
              else
              {
                float v10 = ColorSyncOptionsGetSDRToPQScale(this);
              }
            }
          }
        }
      }
LABEL_168:
      int v87 = CMMBase::NewInternal(0xA8uLL, *(void ***)(a1 + 8));
      *(void *)(a1 + 24) = CMMConvTRC::CMMConvTRC((uint64_t)v87, v8, (uint64_t)v18, v19, v232, *(void *)(a1 + 24), 3, 1, 1.0, 1, v213);
      if (v18)
      {
        uint64_t v88 = v18[1];
        if (v88)
        {
          uint64_t v89 = v88 - 1;
          v18[1] = v89;
          if (!v89) {
            (*(void (**)(void *))(*v18 + 8))(v18);
          }
        }
      }
      a5 = v218;
      uint64_t v9 = v17;
      goto LABEL_185;
    }
    switch(a5)
    {
      case 13:
        ConversionManager::AddHLGDevToPCS(a1, v8, a3, a6, this);
        break;
      case 9:
        if (v8 != 2) {
          goto LABEL_185;
        }
        ConversionManager::AddHLGOOTF(a1, a6, this);
        break;
      case 1:
        ConversionManager::AddHLGDevToPCS(a1, v8, a3, a6, this);
        float v10 = v14;
        break;
      default:
        __assert_rtn("AddMatrixConv", "CMMConversionManager.cpp", 2083, "0");
    }
    a5 = v218;
LABEL_185:
    if (!*v221) {
      *uint64_t v221 = *v217;
    }
    ++v8;
    a6 = *(float32x2_t **)v219;
  }
  while (v8 != 3);
  if (a4)
  {
    if (ConversionManager::exrToneMappingGammaIsRequested(this, a2))
    {
      ConversionManager::AddEXRToneMapping((ConversionManager *)a1, this, 3);
    }
    else if (*(unsigned char *)(a1 + 46))
    {
      if (ColorSyncOptionsDisplayReferredToneMappingRequested(this)) {
        ConversionManager::AddPQEETFToneMapping((void *)a1, *(float **)v219, this, 100.0);
      }
    }
    else if (*(unsigned char *)(a1 + 47))
    {
      if (ColorSyncOptionsDisplayReferredToneMappingRequested(this))
      {
        CFDictionaryRef v93 = (const __CFDictionary *)CFDictionaryGetValue(this, @"com.apple.cmm.ApplyToneMaping");
        CFDictionaryRef v94 = v93;
        if (v93)
        {
          CFTypeID v95 = CFGetTypeID(v93);
          if (v95 == CFDictionaryGetTypeID())
          {
            CFDictionaryRef v96 = (const __CFDictionary *)CFDictionaryGetValue(v94, @"com.apple.cmm.ApplyDisplayReferredToneMapping");
            CFDictionaryRef v97 = v96;
            if (v96)
            {
              CFTypeID v98 = CFGetTypeID(v96);
              if (v98 == CFDictionaryGetTypeID())
              {
                CFDictionaryRef v99 = (const __CFDictionary *)CFDictionaryGetValue(v97, @"com.apple.cmm.ApplyPQEETFToneMapping");
                CFDictionaryRef v100 = v99;
                if (v99)
                {
                  CFTypeID v101 = CFGetTypeID(v99);
                  if (v101 == CFDictionaryGetTypeID())
                  {
                    CFNumberRef v102 = (const __CFNumber *)CFDictionaryGetValue(v100, @"com.apple.cmm.XRReflectanceScale");
                    if (v102)
                    {
                      LODWORD(valuePtr[0]) = 0;
                      int v103 = CFNumberGetValue(v102, kCFNumberFloatType, valuePtr);
                      float v104 = *(float *)valuePtr;
                      if (!v103) {
                        float v104 = 0.0;
                      }
                      if (v104 != 0.0) {
                        float v10 = v104;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v225 = 0;
  memset(v224, 0, sizeof(v224));
  uint64_t v223 = &unk_1ED9855F0;
  CMMMatrix::InitializeMatrix((uint64_t)&v223, (uint64_t)v224, a2, v10);
  CMMMatrix::MakeMatrixConv((CMMMatrix *)&v223, *(CMMMemMgr **)(a1 + 8), *(CMMConvNode **)(a1 + 24));
  *(void *)(a1 + 24) = v105;
  if (!*(void *)(a1 + 16)) {
    *uint64_t v221 = v105;
  }
  if (*(unsigned char *)(a1 + 89) != 16)
  {
    unsigned __int8 v116 = ColorSyncOptionsReferenceWhiteReferredToneMappingRequested(this);
    goto LABEL_230;
  }
  unint64_t FlexLumaScalingOptions = ColorSyncOptionsGetFlexLumaScalingOptions(0, this);
  if (*(unsigned char *)(a1 + 89) != 16)
  {
    unsigned __int8 v116 = ColorSyncOptionsReferenceWhiteReferredToneMappingRequested(this);
    if (FlexLumaScalingOptions)
    {
LABEL_236:
      CFNumberRef v125 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), (const void *)kColorSyncPreGainMapCICP);
      CFNumberRef v126 = v125;
      if (v125 && (CFTypeID v127 = CFGetTypeID(v125), v127 == CFNumberGetTypeID()))
      {
        LODWORD(valuePtr[0]) = 0;
        if (CFNumberGetValue(v126, kCFNumberSInt32Type, valuePtr) == 1) {
          unsigned __int8 v128 = valuePtr[0];
        }
        else {
          unsigned __int8 v128 = 0;
        }
      }
      else
      {
        unsigned __int8 v128 = 0;
      }
      CFNumberRef v129 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), (const void *)kColorSyncPostGainMapCICP);
      CFNumberRef v130 = v129;
      if (v129)
      {
        CFTypeID v131 = CFGetTypeID(v129);
        if (v131 == CFNumberGetTypeID())
        {
          LODWORD(valuePtr[0]) = 0;
          if (CFNumberGetValue(v130, kCFNumberSInt32Type, valuePtr) == 1) {
            LOBYTE(v130) = valuePtr[0];
          }
          else {
            LOBYTE(v130) = 0;
          }
        }
        else
        {
          LOBYTE(v130) = 0;
        }
      }
      if (*(unsigned __int8 *)(a1 + 88) != v128)
      {
        memset(v256, 0, sizeof(v256));
        ConversionManager::ColorantsForPrimaries(a1, v256, v128);
        uint64_t v250 = 0;
        long long v248 = 0u;
        long long v249 = 0u;
        long long v246 = 0u;
        long long v247 = 0u;
        long long v244 = 0u;
        long long v245 = 0u;
        memset(valuePtr, 0, sizeof(valuePtr));
        CMMInvMatrix::CMMInvMatrix((CMMInvMatrix *)valuePtr, (CMMXYZTag *(*)[3])v256, (int (*)[3])dword_18BEB4CD8);
        v147 = CMMBase::NewInternal(0x160uLL, *(void ***)(a1 + 8));
        __n128 v148 = CMMConvInvMatrix::CMMConvInvMatrix((uint64_t)v147, (uint64_t)valuePtr, *(void *)(a1 + 24));
        void *v149 = &unk_1ED983D50;
        *(void *)(a1 + 24) = v149;
        ConversionManager::AddFlexLuminanceToneMapping(a1, this, (int32x4_t)v148);
        uint64_t v238 = 0;
        uint64_t v242 = 0;
        long long v237 = 0u;
        long long v236 = 0u;
        long long v235 = 0u;
        long long v234 = 0u;
        int64x2_t v233 = &unk_1ED9855F0;
        uint64_t v239 = 0;
        uint64_t v241 = 0;
        uint64_t v240 = 0;
        CMMMatrix::InitializeMatrix((uint64_t)&v233, (uint64_t)&v234, v256, 1.0);
        CMMMatrix::MakeMatrixConv((CMMMatrix *)&v233, *(CMMMemMgr **)(a1 + 8), *(CMMConvNode **)(a1 + 24));
        *uint64_t v217 = v150;
      }
      if ((_BYTE)v130)
      {
        memset(v256, 0, sizeof(v256));
        ConversionManager::ColorantsForPrimaries(a1, v256, v130);
        uint64_t v250 = 0;
        long long v248 = 0u;
        long long v249 = 0u;
        long long v246 = 0u;
        long long v247 = 0u;
        long long v244 = 0u;
        long long v245 = 0u;
        memset(valuePtr, 0, sizeof(valuePtr));
        CMMInvMatrix::CMMInvMatrix((CMMInvMatrix *)valuePtr, (CMMXYZTag *(*)[3])v256, (int (*)[3])dword_18BEB4CD8);
        int v151 = (CMMConvNode *)CMMBase::NewInternal(0x160uLL, *(void ***)(a1 + 8));
        CMMConvInvMatrix::CMMConvInvMatrix((uint64_t)v151, (uint64_t)valuePtr, *(void *)(a1 + 24));
        *uint64_t v152 = &unk_1ED983D50;
        *(void *)(a1 + 24) = v152;
        uint64_t v238 = 0;
        uint64_t v242 = 0;
        long long v237 = 0u;
        long long v236 = 0u;
        long long v235 = 0u;
        long long v234 = 0u;
        int64x2_t v233 = &unk_1ED9855F0;
        uint64_t v239 = 0;
        uint64_t v241 = 0;
        uint64_t v240 = 0;
        CMMMatrix::InitializeMatrix((uint64_t)&v233, (uint64_t)&v234, v256, 1.0);
        CMMMatrix::MakeMatrixConv((CMMMatrix *)&v233, *(CMMMemMgr **)(a1 + 8), v151);
        *uint64_t v217 = v153;
      }
      return;
    }
LABEL_230:
    if ((v116 & 1) == 0) {
      return;
    }
    goto LABEL_231;
  }
  unint64_t FlexTRCOptions = ColorSyncOptionsGetFlexTRCOptions(0, this);
  unsigned int v108 = ColorSyncOptionsReferenceWhiteReferredToneMappingRequested(this);
  if (FlexLumaScalingOptions) {
    goto LABEL_236;
  }
  if (FlexTRCOptions)
  {
    CFDictionaryRef v109 = *(const __CFDictionary **)(a1 + 72);
    if (v109)
    {
      if (*(unsigned char *)(a1 + 89) == 16)
      {
        CFDictionaryRef v110 = (const __CFDictionary *)ColorSyncOptionsGetFlexTRCOptions(0, this);
        if (v110)
        {
          CFDictionaryRef v111 = v110;
          CFNumberRef v112 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), (const void *)kColorSyncPreGainMapCICP);
          CFNumberRef v113 = v112;
          if (v112 && (CFTypeID v114 = CFGetTypeID(v112), v114 == CFNumberGetTypeID()))
          {
            LODWORD(valuePtr[0]) = 0;
            if (CFNumberGetValue(v113, kCFNumberSInt32Type, valuePtr) == 1) {
              unsigned __int8 v115 = valuePtr[0];
            }
            else {
              unsigned __int8 v115 = 0;
            }
          }
          else
          {
            unsigned __int8 v115 = 0;
          }
          memset(v260, 0, sizeof(v260));
          if (*(unsigned __int8 *)(a1 + 88) != v115)
          {
            ConversionManager::ColorantsForPrimaries(a1, v260, v115);
            uint64_t v250 = 0;
            long long v248 = 0u;
            long long v249 = 0u;
            long long v246 = 0u;
            long long v247 = 0u;
            long long v244 = 0u;
            long long v245 = 0u;
            memset(valuePtr, 0, sizeof(valuePtr));
            CMMInvMatrix::CMMInvMatrix((CMMInvMatrix *)valuePtr, (CMMXYZTag *(*)[3])v260, (int (*)[3])dword_18BEB4CD8);
            uint64_t v161 = CMMBase::NewInternal(0x160uLL, *(void ***)(a1 + 8));
            CMMConvInvMatrix::CMMConvInvMatrix((uint64_t)v161, (uint64_t)valuePtr, *(void *)(a1 + 24));
            *char v162 = &unk_1ED983D50;
            *(void *)(a1 + 24) = v162;
          }
          if (CFDictionaryContainsKey(v109, (const void *)kColorSyncMonoFlexGTCNodeTable) == 1
            && CFDictionaryContainsKey(v109, (const void *)kColorSyncMonoGainMapParams) == 1)
          {
            int v163 = (CMMTable *)CFDictionaryGetValue(v109, (const void *)kColorSyncMonoFlexGTCNodeTable);
            CFArrayRef v164 = (const __CFArray *)CFDictionaryGetValue(v109, (const void *)kColorSyncMonoGainMapParams);
            FlexTRCLookup = CMMTable::CreateFlexTRCLookup(v163, v164, v111, 0, *(CMMTable **)(a1 + 8), v165, v166);
            if (FlexTRCLookup) {
              uint64_t v168 = 0;
            }
            else {
              uint64_t v168 = 4294967246;
            }
            CMMThrowExceptionOnError(v168);
            if (FlexTRCLookup)
            {
              v169 = (CMMPQCurveTag *)CMMBase::NewInternal(0x60uLL, *(void ***)(a1 + 8));
              CMMPQCurveTag::CMMPQCurveTag(v169, (uint64_t)FlexTRCLookup, 0);
              uint64_t v170 = FlexTRCLookup[1];
              if (v170)
              {
                uint64_t v171 = v169;
                int v172 = v169;
                goto LABEL_307;
              }
              uint64_t v171 = v169;
              int v172 = v169;
              goto LABEL_311;
            }
            BOOL v178 = 0;
            FlexTRCLookup = 0;
            uint64_t v184 = 0;
          }
          else
          {
            uint64_t v173 = (CMMTable *)CFDictionaryGetValue(v109, (const void *)kColorSyncRedFlexGTCNodeTable);
            CFArrayRef v174 = (const __CFArray *)CFDictionaryGetValue(v109, (const void *)kColorSyncRedGainMapParams);
            v175 = (CMMTable **)(a1 + 8);
            BOOL v178 = CMMTable::CreateFlexTRCLookup(v173, v174, v111, 0, *(CMMTable **)(a1 + 8), v176, v177);
            uint64_t v179 = v178 ? 0 : 4294967246;
            CMMThrowExceptionOnError(v179);
            char v180 = (CMMTable *)CFDictionaryGetValue(v109, (const void *)kColorSyncGrnFlexGTCNodeTable);
            CFArrayRef v181 = (const __CFArray *)CFDictionaryGetValue(v109, (const void *)kColorSyncGrnGainMapParams);
            uint64_t v184 = CMMTable::CreateFlexTRCLookup(v180, v181, v111, 0, *v175, v182, v183);
            uint64_t v185 = v184 ? 0 : 4294967246;
            CMMThrowExceptionOnError(v185);
            uint64_t v186 = (CMMTable *)CFDictionaryGetValue(v109, (const void *)kColorSyncBluFlexGTCNodeTable);
            CFArrayRef v187 = (const __CFArray *)CFDictionaryGetValue(v109, (const void *)kColorSyncBluGainMapParams);
            FlexTRCLookup = CMMTable::CreateFlexTRCLookup(v186, v187, v111, 0, *v175, v188, v189);
            uint64_t v190 = FlexTRCLookup ? 0 : 4294967246;
            CMMThrowExceptionOnError(v190);
          }
          v169 = (CMMPQCurveTag *)CMMBase::NewInternal(0x60uLL, *(void ***)(a1 + 8));
          CMMPQCurveTag::CMMPQCurveTag(v169, (uint64_t)v178, 0);
          uint64_t v171 = (CMMPQCurveTag *)CMMBase::NewInternal(0x60uLL, *(void ***)(a1 + 8));
          CMMPQCurveTag::CMMPQCurveTag(v171, (uint64_t)v184, 0);
          int v172 = (CMMPQCurveTag *)CMMBase::NewInternal(0x60uLL, *(void ***)(a1 + 8));
          CMMPQCurveTag::CMMPQCurveTag(v172, (uint64_t)FlexTRCLookup, 0);
          if (v178)
          {
            uint64_t v191 = v178[1];
            if (v191)
            {
              uint64_t v192 = v191 - 1;
              v178[1] = v192;
              if (!v192) {
                (*(void (**)(void *))(*v178 + 8))(v178);
              }
            }
          }
          if (v184)
          {
            uint64_t v193 = v184[1];
            if (v193)
            {
              uint64_t v194 = v193 - 1;
              v184[1] = v194;
              if (!v194) {
                (*(void (**)(void *))(*v184 + 8))(v184);
              }
            }
          }
          if (FlexTRCLookup)
          {
            uint64_t v170 = FlexTRCLookup[1];
            if (v170)
            {
LABEL_307:
              uint64_t v195 = v170 - 1;
              FlexTRCLookup[1] = v195;
              if (!v195) {
                (*(void (**)(void *))(*FlexTRCLookup + 8))(FlexTRCLookup);
              }
            }
          }
LABEL_311:
          unsigned int v196 = 0;
          uint64_t v258 = 0;
          uint64_t v259 = 0;
          v256[0] = (CMMXYZTag *)&unk_1ED981880;
          v256[1] = v169;
          v256[2] = v171;
          int64x2_t v257 = v172;
          do
          {
            memset(valuePtr, 0, 56);
            LODWORD(valuePtr[0]) = 1;
            int v197 = (void *)CMMRGBCurves::MakeTRC((uint64_t)v256, 1.0, (uint64_t)valuePtr, *(void *)(a1 + 8), v196);
            v198 = CMMBase::NewInternal(0xA8uLL, *(void ***)(a1 + 8));
            *(void *)(a1 + 24) = CMMConvPQEOTF::CMMConvPQEOTF(v198, v196, (uint64_t)v197, valuePtr, *(void *)(a1 + 24), 1.0);
            if (v197)
            {
              uint64_t v199 = v197[1];
              if (v199)
              {
                uint64_t v200 = v199 - 1;
                v197[1] = v200;
                if (!v200) {
                  (*(void (**)(void *))(*v197 + 8))(v197);
                }
              }
            }
            ++v196;
          }
          while (v196 != 3);
          if (*(unsigned __int8 *)(a1 + 88) != v115)
          {
            memset((char *)valuePtr + 8, 0, 72);
            *(void *)&valuePtr[0] = &unk_1ED9855F0;
            long long v244 = 0uLL;
            long long v245 = 0uLL;
            CMMMatrix::InitializeMatrix((uint64_t)valuePtr, (uint64_t)valuePtr + 8, v260, 1.0);
            CMMMatrix::MakeMatrixConv((CMMMatrix *)valuePtr, *(CMMMemMgr **)(a1 + 8), *(CMMConvNode **)(a1 + 24));
            *(void *)(a1 + 24) = v201;
          }
          CFNumberRef v202 = (const __CFNumber *)CFDictionaryGetValue(v109, (const void *)kColorSyncPostGainMapCICP);
          CFNumberRef v203 = v202;
          if (v202)
          {
            CFTypeID v204 = CFGetTypeID(v202);
            if (v204 == CFNumberGetTypeID())
            {
              LODWORD(valuePtr[0]) = 0;
              int v205 = CFNumberGetValue(v203, kCFNumberSInt32Type, valuePtr);
              unsigned __int8 v206 = valuePtr[0];
              if (v205 != 1) {
                unsigned __int8 v206 = 0;
              }
              if (v206)
              {
                memset(v255, 0, sizeof(v255));
                ConversionManager::ColorantsForPrimaries(a1, v255, v206);
                uint64_t v250 = 0;
                long long v248 = 0u;
                long long v249 = 0u;
                long long v246 = 0u;
                long long v247 = 0u;
                long long v244 = 0u;
                long long v245 = 0u;
                memset(valuePtr, 0, sizeof(valuePtr));
                CMMInvMatrix::CMMInvMatrix((CMMInvMatrix *)valuePtr, (CMMXYZTag *(*)[3])v255, (int (*)[3])dword_18BEB4CD8);
                v207 = (CMMConvNode *)CMMBase::NewInternal(0x160uLL, *(void ***)(a1 + 8));
                CMMConvInvMatrix::CMMConvInvMatrix((uint64_t)v207, (uint64_t)valuePtr, *(void *)(a1 + 24));
                *int v208 = &unk_1ED983D50;
                uint64_t v136 = (void *)(a1 + 24);
                *(void *)(a1 + 24) = v208;
                uint64_t v238 = 0;
                uint64_t v242 = 0;
                long long v237 = 0u;
                long long v236 = 0u;
                long long v235 = 0u;
                long long v234 = 0u;
                int64x2_t v233 = &unk_1ED9855F0;
                uint64_t v239 = 0;
                uint64_t v241 = 0;
                uint64_t v240 = 0;
                CMMMatrix::InitializeMatrix((uint64_t)&v233, (uint64_t)&v234, v255, 1.0);
                CMMMatrix::MakeMatrixConv((CMMMatrix *)&v233, *(CMMMemMgr **)(a1 + 8), v207);
                goto LABEL_272;
              }
            }
          }
        }
      }
    }
    return;
  }
  if (!v108) {
    return;
  }
LABEL_231:
  if (*(unsigned char *)(a1 + 42))
  {
    CFDictionaryRef ReferenceWhiteToneMappingOptions = (const __CFDictionary *)ColorSyncOptionsGetReferenceWhiteToneMappingOptions(this);
    float v118 = 0.5;
    float v119 = 1.0;
    float v120 = 2.6667;
    if (ReferenceWhiteToneMappingOptions
      && (CFDictionaryRef v121 = ReferenceWhiteToneMappingOptions,
          CFTypeID v122 = CFGetTypeID(ReferenceWhiteToneMappingOptions),
          v122 == CFDictionaryGetTypeID()))
    {
      float v123 = float_from_dictionary_with_default(v121, @"com.apple.cmm.RWTMSourcePeak", 1000.0);
      float v124 = float_from_dictionary_with_default(v121, @"com.apple.cmm.RWTMSourceReferenceWhite", 203.0);
      float v119 = float_from_dictionary_with_default(v121, @"com.apple.cmm.RWTMEDRHeadroom", 1.0);
      float v118 = float_from_dictionary_with_default(v121, @"com.apple.cmm.RWTMTargetReferenceWhiteBase", 0.5);
      float v120 = float_from_dictionary_with_default(v121, @"com.apple.cmm.RWTMReferenceWhiteThreshold", 2.6667);
    }
    else
    {
      float v124 = 203.0;
      float v123 = 1000.0;
    }
    int v132 = *(unsigned __int8 *)(a1 + 51);
    memset(v256, 0, sizeof(v256));
    ConversionManager::ColorantsForPrimaries(a1, v256, 9);
    uint64_t v250 = 0;
    long long v248 = 0u;
    long long v249 = 0u;
    long long v246 = 0u;
    long long v247 = 0u;
    long long v244 = 0u;
    long long v245 = 0u;
    memset(valuePtr, 0, sizeof(valuePtr));
    CMMInvMatrix::CMMInvMatrix((CMMInvMatrix *)valuePtr, (CMMXYZTag *(*)[3])v256, (int (*)[3])dword_18BEB4CD8);
    uint64_t v133 = CMMBase::NewInternal(0x160uLL, *(void ***)(a1 + 8));
    CMMConvInvMatrix::CMMConvInvMatrix((uint64_t)v133, (uint64_t)valuePtr, *(void *)(a1 + 24));
    *uint64_t v134 = &unk_1ED983D50;
    *(void *)(a1 + 24) = v134;
    if (!*(void *)(a1 + 16)) {
      *uint64_t v221 = (uint64_t)v134;
    }
    if (!v132) {
      float v119 = 1.0;
    }
    unsigned int v135 = (CMMConvRWToneMapping *)CMMBase::NewInternal(0x60uLL, *(void ***)(a1 + 8));
    CMMConvRWToneMapping::CMMConvRWToneMapping(v135, 1000.0, v123, v124, v119, v118, v120, *(CMMConvNode **)(a1 + 24));
    uint64_t v136 = (void *)(a1 + 24);
    *(void *)(a1 + 24) = v137;
    uint64_t v238 = 0;
    uint64_t v242 = 0;
    long long v237 = 0u;
    long long v236 = 0u;
    long long v235 = 0u;
    long long v234 = 0u;
    int64x2_t v233 = &unk_1ED9855F0;
    uint64_t v239 = 0;
    uint64_t v241 = 0;
    uint64_t v240 = 0;
    CMMMatrix::InitializeMatrix((uint64_t)&v233, (uint64_t)&v234, v256, 1.0);
    CMMMatrix::MakeMatrixConv((CMMMatrix *)&v233, *(CMMMemMgr **)(a1 + 8), v135);
  }
  else if (*(unsigned char *)(a1 + 41))
  {
    CFDictionaryRef v139 = (const __CFDictionary *)ColorSyncOptionsGetReferenceWhiteToneMappingOptions(this);
    float v140 = 0.5;
    float v141 = 1.0;
    float v142 = 2.6667;
    if (v139 && (CFDictionaryRef v143 = v139, v144 = CFGetTypeID(v139), v144 == CFDictionaryGetTypeID()))
    {
      float v145 = float_from_dictionary_with_default(v143, @"com.apple.cmm.RWTMSourcePeak", 1000.0);
      float v146 = float_from_dictionary_with_default(v143, @"com.apple.cmm.RWTMSourceReferenceWhite", 203.0);
      float v141 = float_from_dictionary_with_default(v143, @"com.apple.cmm.RWTMEDRHeadroom", 1.0);
      float v140 = float_from_dictionary_with_default(v143, @"com.apple.cmm.RWTMTargetReferenceWhiteBase", 0.5);
      float v142 = float_from_dictionary_with_default(v143, @"com.apple.cmm.RWTMReferenceWhiteThreshold", 2.6667);
    }
    else
    {
      float v146 = 203.0;
      float v145 = 1000.0;
    }
    int v154 = *(unsigned __int8 *)(a1 + 51);
    memset(v256, 0, sizeof(v256));
    ConversionManager::ColorantsForPrimaries(a1, v256, 9);
    uint64_t v250 = 0;
    long long v248 = 0u;
    long long v249 = 0u;
    long long v246 = 0u;
    long long v247 = 0u;
    long long v244 = 0u;
    long long v245 = 0u;
    memset(valuePtr, 0, sizeof(valuePtr));
    CMMInvMatrix::CMMInvMatrix((CMMInvMatrix *)valuePtr, (CMMXYZTag *(*)[3])v256, (int (*)[3])dword_18BEB4CD8);
    int v155 = CMMBase::NewInternal(0x160uLL, *(void ***)(a1 + 8));
    CMMConvInvMatrix::CMMConvInvMatrix((uint64_t)v155, (uint64_t)valuePtr, *(void *)(a1 + 24));
    *BOOL v156 = &unk_1ED983D50;
    *(void *)(a1 + 24) = v156;
    if (!*(void *)(a1 + 16)) {
      *uint64_t v221 = (uint64_t)v156;
    }
    if (!v154) {
      float v141 = 1.0;
    }
    uint64_t v157 = (CMMConvRWToneMapping *)CMMBase::NewInternal(0x60uLL, *(void ***)(a1 + 8));
    CMMConvRWToneMapping::CMMConvRWToneMapping(v157, 10000.0, v145, v146, v141, v140, v142, *(CMMConvNode **)(a1 + 24));
    uint64_t v136 = (void *)(a1 + 24);
    *(void *)(a1 + 24) = v158;
    uint64_t v238 = 0;
    uint64_t v242 = 0;
    long long v237 = 0u;
    long long v236 = 0u;
    long long v235 = 0u;
    long long v234 = 0u;
    int64x2_t v233 = &unk_1ED9855F0;
    uint64_t v239 = 0;
    uint64_t v241 = 0;
    uint64_t v240 = 0;
    CMMMatrix::InitializeMatrix((uint64_t)&v233, (uint64_t)&v234, v256, 1.0);
    CMMMatrix::MakeMatrixConv((CMMMatrix *)&v233, *(CMMMemMgr **)(a1 + 8), v157);
  }
  else
  {
    if (!a4) {
      return;
    }
    memset(v256, 0, sizeof(v256));
    ConversionManager::ColorantsForPrimaries(a1, v256, 9);
    uint64_t v250 = 0;
    long long v248 = 0u;
    long long v249 = 0u;
    long long v246 = 0u;
    long long v247 = 0u;
    long long v244 = 0u;
    long long v245 = 0u;
    memset(valuePtr, 0, sizeof(valuePtr));
    CMMInvMatrix::CMMInvMatrix((CMMInvMatrix *)valuePtr, (CMMXYZTag *(*)[3])v256, (int (*)[3])dword_18BEB4CD8);
    int v159 = CMMBase::NewInternal(0x160uLL, *(void ***)(a1 + 8));
    CMMConvInvMatrix::CMMConvInvMatrix((uint64_t)v159, (uint64_t)valuePtr, *(void *)(a1 + 24));
    void *v160 = &unk_1ED983D50;
    *(void *)(a1 + 24) = v160;
    if (!*(void *)(a1 + 16)) {
      *uint64_t v221 = (uint64_t)v160;
    }
    ConversionManager::AddExtendedRangeReferenceWhiteToneMapping((ConversionManager *)a1, this);
    uint64_t v238 = 0;
    uint64_t v242 = 0;
    long long v237 = 0u;
    long long v236 = 0u;
    long long v235 = 0u;
    long long v234 = 0u;
    int64x2_t v233 = &unk_1ED9855F0;
    uint64_t v239 = 0;
    uint64_t v241 = 0;
    uint64_t v240 = 0;
    CMMMatrix::InitializeMatrix((uint64_t)&v233, (uint64_t)&v234, v256, 1.0);
    uint64_t v136 = (void *)(a1 + 24);
    CMMMatrix::MakeMatrixConv((CMMMatrix *)&v233, *(CMMMemMgr **)(a1 + 8), *(CMMConvNode **)(a1 + 24));
  }
LABEL_272:
  *uint64_t v136 = v138;
}

void sub_18BE29E28(_Unwind_Exception *a1)
{
}

CFDictionaryRef ColorSyncOptionsReferenceWhiteReferredToneMappingRequested(const __CFDictionary *result)
{
  if (result)
  {
    double result = (const __CFDictionary *)CFDictionaryGetValue(result, @"com.apple.cmm.ApplyToneMaping");
    if (result)
    {
      CFDictionaryRef v1 = result;
      CFTypeID v2 = CFGetTypeID(result);
      if (v2 == CFDictionaryGetTypeID())
      {
        double result = (const __CFDictionary *)CFDictionaryGetValue(v1, @"com.apple.cmm.ApplyReferenceWhiteToneMapping");
        if (result)
        {
          CFTypeID v3 = CFGetTypeID(result);
          return (const __CFDictionary *)(v3 == CFDictionaryGetTypeID());
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t CMMRGBCurves::MakeTRC(uint64_t a1, float a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v7 = *(void *)(a1 + 8);
  if (!a5)
  {
    uint64_t result = (*(uint64_t (**)(float))(*(void *)v7 + 64))(a2);
LABEL_7:
    *(void *)(a1 + 32) = result;
    return result;
  }
  uint64_t v8 = (void *)(a1 + 8 + 8 * a5);
  if (!(*(unsigned int (**)(uint64_t, void, void))(*(void *)v7 + 56))(v7, *v8, *(void *)(a1 + 8 + 8 * (a5 - 1))))
  {
    uint64_t result = (*(uint64_t (**)(float))(*(void *)*v8 + 64))(a2);
    goto LABEL_7;
  }
  uint64_t result = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(result + 8);
  if (v10) {
    *(void *)(result + 8) = v10 + 1;
  }
  return result;
}

void CMMMatrix::MakeMatrixConv(CMMMatrix *this, CMMMemMgr *a2, CMMConvNode *a3)
{
  uint64_t v5 = (char *)this + 8;
  int v6 = *((_DWORD *)this + 3);
  int v7 = *((_DWORD *)this + 4);
  BOOL v8 = v7 == 0;
  if (v6)
  {
    if (v7)
    {
      if (*((_DWORD *)this + 5)
        && *((_DWORD *)this + 7)
        && *((_DWORD *)this + 8)
        && *((_DWORD *)this + 9)
        && !*((_DWORD *)this + 20)
        && !*((_DWORD *)this + 21)
        && !*((_DWORD *)this + 22))
      {
        uint64_t v9 = (CMMConvMatrix *)CMMBase::NewInternal(0xA8uLL, (void **)a2);
        CMMConvMatrix::CMMConvMatrix(v9, this, a3, 2.0, v10, 0, 0);
LABEL_78:
        char v18 = &unk_1ED983C48;
        goto LABEL_74;
      }
      goto LABEL_12;
    }
LABEL_27:
    if (*(_DWORD *)v5)
    {
      BOOL v12 = 0;
      int v7 = 0;
      BOOL v8 = 1;
    }
    else
    {
      if (!*((_DWORD *)this + 5)
        && !*((_DWORD *)this + 6)
        && !*((_DWORD *)this + 7)
        && !*((_DWORD *)this + 8)
        && !*((_DWORD *)this + 9)
        && !*((_DWORD *)this + 10)
        && !*((_DWORD *)this + 20)
        && !*((_DWORD *)this + 21)
        && !*((_DWORD *)this + 22))
      {
        BOOL v38 = (CMMConvMatrix *)CMMBase::NewInternal(0xA8uLL, (void **)a2);
        CMMConvMatrix::CMMConvMatrix(v38, this, a3, 1.0, v39, 1, 0);
        char v18 = &unk_1ED9848A8;
        goto LABEL_74;
      }
      int v7 = 0;
      BOOL v8 = 1;
      BOOL v12 = 1;
    }
    goto LABEL_39;
  }
  if (!v7)
  {
    if (!*((_DWORD *)this + 6)
      && !*((_DWORD *)this + 7)
      && !*((_DWORD *)this + 9)
      && !*((_DWORD *)this + 10)
      && !*((_DWORD *)this + 20)
      && !*((_DWORD *)this + 21)
      && !*((_DWORD *)this + 22))
    {
      long long v30 = (CMMConvMatrix *)CMMBase::NewInternal(0xA8uLL, (void **)a2);
      CMMConvMatrix::CMMConvMatrix(v30, this, a3, 2.0, v31, 0, 1);
      char v18 = &unk_1ED984698;
      goto LABEL_74;
    }
    if (!*((_DWORD *)this + 5)
      && !*((_DWORD *)this + 7)
      && !*((_DWORD *)this + 8)
      && !*((_DWORD *)this + 9)
      && !*((_DWORD *)this + 20)
      && !*((_DWORD *)this + 21)
      && !*((_DWORD *)this + 22))
    {
      unsigned int v32 = (CMMConvMatrix *)CMMBase::NewInternal(0xA8uLL, (void **)a2);
      CMMConvMatrix::CMMConvMatrix(v32, this, a3, 1.0, v33, 0, 0);
      char v18 = &unk_1ED983B40;
      goto LABEL_74;
    }
    goto LABEL_27;
  }
LABEL_12:
  BOOL v12 = *(_DWORD *)v5 == 0;
LABEL_39:
  if (!*(void *)((char *)this + 20)
    && !*((_DWORD *)this + 7)
    && !*((_DWORD *)this + 8)
    && !*((_DWORD *)this + 9)
    && !*((_DWORD *)this + 10)
    && !*((_DWORD *)this + 20)
    && !*((_DWORD *)this + 21)
    && !*((_DWORD *)this + 22))
  {
    uint64_t v34 = (CMMConvMatrix *)CMMBase::NewInternal(0xA8uLL, (void **)a2);
    CMMConvMatrix::CMMConvMatrix(v34, this, a3, 1.0, v35, 0, 0);
    char v18 = &unk_1ED9849B0;
    goto LABEL_74;
  }
  if (v8)
  {
    if (!*((_DWORD *)this + 6) && !*((_DWORD *)this + 7) && !*((_DWORD *)this + 9) && !*((_DWORD *)this + 21))
    {
      CFTypeID v26 = (CMMConvMatrix *)CMMBase::NewInternal(0xA8uLL, (void **)a2);
      CMMConvMatrix::CMMConvMatrix(v26, this, a3, 2.0, v27, 0, 0);
      char v18 = &unk_1ED984380;
      goto LABEL_74;
    }
    if (v12 && !*((_DWORD *)this + 7) && !*((_DWORD *)this + 8) && !*((_DWORD *)this + 20))
    {
      CFDictionaryRef v24 = (CMMConvMatrix *)CMMBase::NewInternal(0xA8uLL, (void **)a2);
      CMMConvMatrix::CMMConvMatrix(v24, this, a3, 1.0, v25, 0, 0);
      char v18 = &unk_1ED984488;
      goto LABEL_74;
    }
  }
  if (!(v6 | v7 | *((_DWORD *)this + 5))
    && !*((_DWORD *)this + 6)
    && !*((_DWORD *)this + 7)
    && !*((_DWORD *)this + 8)
    && !*((_DWORD *)this + 9))
  {
    if (!*((_DWORD *)this + 10) && !*((_DWORD *)this + 20))
    {
      CFDictionaryRef v28 = (CMMConvMatrix *)CMMBase::NewInternal(0xA8uLL, (void **)a2);
      CMMConvMatrix::CMMConvMatrix(v28, this, a3, 1.0, v29, 0, 1);
      char v18 = &unk_1ED984590;
      goto LABEL_74;
    }
    if (!*((_DWORD *)this + 9)
      && !*((_DWORD *)this + 10)
      && !*((_DWORD *)this + 20)
      && !*((_DWORD *)this + 21)
      && !*((_DWORD *)this + 22))
    {
      uint64_t v36 = (CMMConvMatrix *)CMMBase::NewInternal(0xA8uLL, (void **)a2);
      CMMConvMatrix::CMMConvMatrix(v36, this, a3, 1.0, v37, 1, 0);
      char v18 = &unk_1ED9847A0;
      goto LABEL_74;
    }
  }
  if (!*((_DWORD *)this + 20) && !*((_DWORD *)this + 21) && !*((_DWORD *)this + 22))
  {
    uint64_t v11 = CMMBase::NewInternal(0xA8uLL, (void **)a2);
    *((_DWORD *)v11 + 2) = 1;
    v11[2] = 0;
    v11[3] = a3;
    if (a3) {
      *((void *)a3 + 2) = v11;
    }
    v11[5] = 0x3FFFFF0000000000;
    *(_DWORD *)((char *)v11 + 33) = 0;
    void *v11 = &unk_1ED981B18;
    v11[7] = &unk_1ED9855F0;
    long long v19 = *(_OWORD *)v5;
    long long v20 = *((_OWORD *)v5 + 2);
    *((_OWORD *)v11 + 5) = *((_OWORD *)v5 + 1);
    *((_OWORD *)v11 + 6) = v20;
    *((_OWORD *)v11 + 4) = v19;
    long long v21 = *((_OWORD *)v5 + 3);
    long long v22 = *((_OWORD *)v5 + 4);
    long long v23 = *((_OWORD *)v5 + 5);
    *((_DWORD *)v11 + 40) = *((_DWORD *)v5 + 24);
    *((_OWORD *)v11 + 8) = v22;
    *((_OWORD *)v11 + 9) = v23;
    *((_OWORD *)v11 + 7) = v21;
    *((_WORD *)v11 + 24) = 0;
    *((_WORD *)v11 + 16) = 256;
    *(_WORD *)((char *)v11 + 35) = 0;
    goto LABEL_78;
  }
  uint64_t v11 = CMMBase::NewInternal(0xA8uLL, (void **)a2);
  *((_DWORD *)v11 + 2) = 1;
  v11[2] = 0;
  v11[3] = a3;
  if (a3) {
    *((void *)a3 + 2) = v11;
  }
  v11[5] = 0x3F80000000000000;
  *(_DWORD *)((char *)v11 + 33) = 0;
  void *v11 = &unk_1ED981B18;
  v11[7] = &unk_1ED9855F0;
  long long v13 = *(_OWORD *)v5;
  long long v14 = *((_OWORD *)v5 + 2);
  *((_OWORD *)v11 + 5) = *((_OWORD *)v5 + 1);
  *((_OWORD *)v11 + 6) = v14;
  *((_OWORD *)v11 + 4) = v13;
  long long v15 = *((_OWORD *)v5 + 3);
  long long v16 = *((_OWORD *)v5 + 4);
  long long v17 = *((_OWORD *)v5 + 5);
  *((_DWORD *)v11 + 40) = *((_DWORD *)v5 + 24);
  *((_OWORD *)v11 + 8) = v16;
  *((_OWORD *)v11 + 9) = v17;
  *((_OWORD *)v11 + 7) = v15;
  *((_WORD *)v11 + 24) = 0;
  *((_WORD *)v11 + 16) = 256;
  *(_WORD *)((char *)v11 + 35) = 0;
  char v18 = &unk_1ED984278;
LABEL_74:
  void *v11 = v18;
}

void CMMConvMatrix::CMMConvMatrix(CMMConvMatrix *this, const CMMMatrix *a2, CMMConvNode *a3, float a4, float a5, char a6, char a7)
{
  *((_DWORD *)this + 2) = 1;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = a3;
  if (a3) {
    *((void *)a3 + 2) = this;
  }
  *((_DWORD *)this + 10) = 0;
  *((float *)this + 11) = a4;
  *(_DWORD *)((char *)this + 33) = 0;
  *(void *)this = &unk_1ED981B18;
  *((void *)this + 7) = &unk_1ED9855F0;
  long long v7 = *(_OWORD *)((char *)a2 + 8);
  long long v8 = *(_OWORD *)((char *)a2 + 40);
  *((_OWORD *)this + 5) = *(_OWORD *)((char *)a2 + 24);
  *((_OWORD *)this + 6) = v8;
  *((_OWORD *)this + 4) = v7;
  long long v9 = *(_OWORD *)((char *)a2 + 56);
  long long v10 = *(_OWORD *)((char *)a2 + 72);
  long long v11 = *(_OWORD *)((char *)a2 + 88);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 26);
  *((_OWORD *)this + 8) = v10;
  *((_OWORD *)this + 9) = v11;
  *((_OWORD *)this + 7) = v9;
  *((unsigned char *)this + 48) = a7;
  *((unsigned char *)this + 49) = a6;
  *((_WORD *)this + 16) = 256;
  *(_WORD *)((char *)this + 35) = 0;
}

const __CFDictionary *ConversionManager::exrToneMappingGammaIsRequested(const __CFDictionary *this, const __CFDictionary *a2)
{
  if (this)
  {
    this = (const __CFDictionary *)CFDictionaryGetValue(this, @"com.apple.cmm.ApplyToneMaping");
    if (this)
    {
      CFDictionaryRef v2 = this;
      CFTypeID v3 = CFGetTypeID(this);
      if (v3 == CFDictionaryGetTypeID())
      {
        this = (const __CFDictionary *)CFDictionaryGetValue(v2, @"com.apple.cmm.ApplyEXRToneMappingGamma");
        if (this)
        {
          CFTypeID v4 = CFGetTypeID(this);
          return (const __CFDictionary *)(v4 == CFDictionaryGetTypeID());
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return this;
}

uint64_t CMMParaCurveTag::GetCurveCount(CMMParaCurveTag *this)
{
  return 0;
}

uint64_t CMMParaCurveTag::SameCurve(CMMParaCurveTag *this, CMMCurveTag *lpsrc, CMMCurveTag *a3)
{
  if (lpsrc)
  {
    if (a3)
    {
LABEL_3:
      goto LABEL_6;
    }
  }
  else
  {
    unint64_t v5 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  unint64_t v6 = 0;
LABEL_6:
  if (v5 | v6)
  {
    uint64_t v9 = 0;
    if (v5 && v6) {
      return *(unsigned __int16 *)(v5 + 56) == *(unsigned __int16 *)(v6 + 56)
    }
          && memcmp((const void *)(v5 + 64), (const void *)(v6 + 64), 4 * *(unsigned int *)(v6 + 60)) == 0;
    return v9;
  }
  else
  {
    long long v7 = *(uint64_t (**)(CMMCurveTag *, CMMCurveTag *, CMMCurveTag *))(*(void *)lpsrc + 56);
    return v7(lpsrc, lpsrc, a3);
  }
}

void *CMMParaCurveTag::MakeTRC(uint64_t a1, uint64_t a2, void **a3, int a4, float a5)
{
  if (*(_WORD *)(a1 + 56) == 3)
  {
    if (*(_DWORD *)(a1 + 64) != 157286
      || *(_DWORD *)(a1 + 68) != 62119
      || *(_DWORD *)(a1 + 72) != 3417
      || *(_DWORD *)(a1 + 76) != 5072
      || *(_DWORD *)(a1 + 84)
      || *(_DWORD *)(a1 + 88))
    {
      goto LABEL_30;
    }
    if (CMMInitializeSRGBGammaTable(void)::predicate[0] == -1)
    {
      if (!a2)
      {
LABEL_17:
        long long v14 = (void *)CMMsRGBGammaTable;
        goto LABEL_28;
      }
    }
    else
    {
      dispatch_once(CMMInitializeSRGBGammaTable(void)::predicate, &__block_literal_global_974);
      if (!a2) {
        goto LABEL_17;
      }
    }
    long long v16 = *(_OWORD *)(CMMsRGBGammaFloatLutInfo + 16);
    long long v15 = *(_OWORD *)(CMMsRGBGammaFloatLutInfo + 32);
    long long v17 = *(_OWORD *)CMMsRGBGammaFloatLutInfo;
    *(void *)(a2 + 48) = *(void *)(CMMsRGBGammaFloatLutInfo + 48);
    *(_OWORD *)(a2 + 16) = v16;
    *(_OWORD *)(a2 + 32) = v15;
    *(_OWORD *)a2 = v17;
    goto LABEL_17;
  }
  if (*(_WORD *)(a1 + 56)) {
    goto LABEL_30;
  }
  unsigned int v10 = *(_DWORD *)(a1 + 64);
  if (v10 == 0x10000)
  {
    if (CMMInitializeLinearGammaTable(void)::predicate == -1)
    {
      if (!a2)
      {
LABEL_7:
        long long v14 = (void *)CMMLinearGammaTable;
        goto LABEL_28;
      }
    }
    else
    {
      dispatch_once(&CMMInitializeLinearGammaTable(void)::predicate, &__block_literal_global_977);
      if (!a2) {
        goto LABEL_7;
      }
    }
    long long v12 = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 16);
    long long v11 = *(_OWORD *)(CMMLinearGammaFloatLutInfo + 32);
    long long v13 = *(_OWORD *)CMMLinearGammaFloatLutInfo;
    *(void *)(a2 + 48) = *(void *)(CMMLinearGammaFloatLutInfo + 48);
    *(_OWORD *)(a2 + 16) = v12;
    *(_OWORD *)(a2 + 32) = v11;
    *(_OWORD *)a2 = v13;
    goto LABEL_7;
  }
  if (v10 >> 1 == 58982)
  {
    if (CMMInitializeOnePointEightGammaTable(void)::predicate[0] == -1)
    {
      if (!a2)
      {
LABEL_22:
        long long v14 = (void *)CMMOnePointEightGammaTable;
        goto LABEL_28;
      }
    }
    else
    {
      dispatch_once(CMMInitializeOnePointEightGammaTable(void)::predicate, &__block_literal_global_980);
      if (!a2) {
        goto LABEL_22;
      }
    }
    long long v19 = *(_OWORD *)(CMMOnePointEightGammaFloatLutInfo + 16);
    long long v18 = *(_OWORD *)(CMMOnePointEightGammaFloatLutInfo + 32);
    long long v20 = *(_OWORD *)CMMOnePointEightGammaFloatLutInfo;
    *(void *)(a2 + 48) = *(void *)(CMMOnePointEightGammaFloatLutInfo + 48);
    *(_OWORD *)(a2 + 16) = v19;
    *(_OWORD *)(a2 + 32) = v18;
    *(_OWORD *)a2 = v20;
    goto LABEL_22;
  }
  if (v10 != 144179)
  {
LABEL_30:
    long long v14 = CMMBase::NewInternal(0x28uLL, a3);
    *long long v14 = &unk_1ED985520;
    v14[1] = 1;
    v14[3] = 0;
    v14[4] = 21512;
    float v25 = CMMBase::NewInternal(0x5408uLL, a3);
    v14[2] = v25;
    CFTypeID v26 = (int *)CMMTable::FloatData((uint64_t)v25, v14[3]);
    CMMParaCurveTag::MakeLut(a1, a2, v26, a4, a5);
    float v27 = (int *)CMMTable::FloatData(v14[2], v14[3]);
    MakeLookups(v27);
    return v14;
  }
  if (CMMInitializeTwoPointTwoGammaTable(void)::predicate != -1)
  {
    dispatch_once(&CMMInitializeTwoPointTwoGammaTable(void)::predicate, &__block_literal_global_970);
    if (!a2) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (a2)
  {
LABEL_26:
    long long v22 = *(_OWORD *)(CMMTwoPointTwoGammaFloatLutInfo + 16);
    long long v21 = *(_OWORD *)(CMMTwoPointTwoGammaFloatLutInfo + 32);
    long long v23 = *(_OWORD *)CMMTwoPointTwoGammaFloatLutInfo;
    *(void *)(a2 + 48) = *(void *)(CMMTwoPointTwoGammaFloatLutInfo + 48);
    *(_OWORD *)(a2 + 16) = v22;
    *(_OWORD *)(a2 + 32) = v21;
    *(_OWORD *)a2 = v23;
  }
LABEL_27:
  long long v14 = (void *)CMMTwoPointTwoGammaTable;
LABEL_28:
  uint64_t v24 = v14[1];
  if (v24) {
    v14[1] = v24 + 1;
  }
  return v14;
}

CMMTable *CMMLinearGamma::MakeTRC(uint64_t a1, uint64_t a2, void **a3)
{
  return CMMCurveTag::MakeTRC(a1, a2, a3, 0);
}

void *CMMITUBT1886InvEOTF::MakeTRC(uint64_t a1, uint64_t a2, void **a3)
{
  unint64_t v6 = CMMBase::NewInternal(0x28uLL, a3);
  void *v6 = &unk_1ED985520;
  v6[1] = 1;
  v6[3] = 0;
  v6[4] = 21512;
  long long v7 = CMMBase::NewInternal(0x5408uLL, a3);
  v6[2] = v7;
  float v8 = *(float *)(a1 + 40);
  float v9 = *(float *)(a1 + 44);
  unsigned int v10 = (int *)CMMTable::FloatData((uint64_t)v7, v6[3]);
  CMMITUBT1886Base::MakeLut(v10, v8, v9);
  long long v11 = *(_OWORD *)(a1 + 16);
  long long v12 = *(_OWORD *)(a1 + 32);
  long long v13 = *(_OWORD *)(a1 + 48);
  *(void *)(a2 + 48) = *(void *)(a1 + 64);
  *(_OWORD *)(a2 + 16) = v12;
  *(_OWORD *)(a2 + 32) = v13;
  *(_OWORD *)a2 = v11;
  long long v14 = (int *)CMMTable::FloatData(v6[2], v6[3]);
  MakeLookups(v14);
  return v6;
}

void CMMITUBT1886Base::MakeLut(int *a1, float a2, float a3)
{
  uint64_t v4 = 0;
  long double v5 = a2;
  double v6 = a3;
  double v7 = ceil(a2);
  double v8 = floor(a2);
  float v9 = a1;
  do
  {
    double v10 = (double)v4 * 0.0000000596046448 * v6;
    double v11 = 0.0;
    if (v10 > 0.0 || v7 == v8)
    {
      double v13 = pow(v10, v5);
      if (fabs(v13) == INFINITY || v13 >= 0.0 && (double v11 = v13, v13 > 1.0)) {
        double v11 = 1.0;
      }
    }
    int v14 = vcvtmd_s64_f64(v11 * 16777216.0 + 0.5);
    *float v9 = v14;
    int v15 = 0x1000000;
    if (v14 <= 0x1000000)
    {
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_15;
      }
      int v15 = 0;
    }
    *float v9 = v15;
LABEL_15:
    v4 += 4096;
    ++v9;
  }
  while (v4 != 16781312);
  int v16 = a1[4096];
  int v17 = a1[1] - *a1;
  if (v17 < 0) {
    int v17 = *a1 - a1[1];
  }
  if (v17 < 0x1000) {
    a1[1] = *a1;
  }
  int v18 = v16 - a1[4095];
  if (v18 < 0) {
    int v18 = a1[4095] - v16;
  }
  if (v18 <= 0xFFF) {
    a1[4095] = v16;
  }
}

int *MakeLookups(int *result)
{
  uint64_t v1 = 0;
  unint64_t v2 = 0x8000;
  do
  {
    unsigned int v3 = (v2 >> 16) >> 12;
    uint64_t v4 = (v2 >> 16) & 0xFFF;
    int v5 = result[v3];
    if (v4) {
      v5 += (unint64_t)(v4 * (result[v3 + 1] - (uint64_t)v5) + 2048) >> 12;
    }
    result[v1 + 4097] = v5 >> 12;
    ++v1;
    v2 += 0x101010100;
  }
  while (v1 != 256);
  double v6 = result + 4353;
  uint64_t v7 = 4097;
  do
  {
    int v8 = *result++;
    *v6++ = (255 * v8 + 0x800000) >> 24;
    --v7;
  }
  while (v7);
  return result;
}

void CMMLut16Tag::~CMMLut16Tag(CMMLut16Tag *this)
{
  CMMLut16Tag::~CMMLut16Tag(this);

  CMMBase::operator delete(v1);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t vars8;

  *(void *)this = &unk_1ED981788;
  unint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    unsigned int v3 = v2[1];
    if (v3)
    {
      uint64_t v4 = v3 - 1;
      v2[1] = v4;
      if (!v4) {
        (*(void (**)(void *))(*v2 + 8))(v2);
      }
    }
  }
  int v5 = (void *)*((void *)this + 13);
  if (v5)
  {
    double v6 = v5[1];
    if (v6)
    {
      uint64_t v7 = v6 - 1;
      v5[1] = v7;
      if (!v7) {
        (*(void (**)(void *))(*v5 + 8))(v5);
      }
    }
  }
  int v8 = (void *)*((void *)this + 14);
  if (v8)
  {
    float v9 = v8[1];
    if (v9)
    {
      double v10 = v9 - 1;
      v8[1] = v10;
      if (!v10) {
        (*(void (**)(void *))(*v8 + 8))(v8);
      }
    }
  }

  CMMTag::~CMMTag(this);
}

void CMMLutAtoBTag::~CMMLutAtoBTag(CMMLutAtoBTag *this)
{
  CMMLutTag::~CMMLutTag(this);

  CMMBase::operator delete(v1);
}

void CMMLutBtoATag::~CMMLutBtoATag(CMMLutBtoATag *this)
{
  CMMLutTag::~CMMLutTag(this);

  CMMBase::operator delete(v1);
}

void CMMLutTag::~CMMLutTag(CMMLutTag *this)
{
  *(void *)this = &unk_1ED985540;
  unint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    uint64_t v3 = v2[1];
    if (v3)
    {
      uint64_t v4 = v3 - 1;
      v2[1] = v4;
      if (!v4) {
        (*(void (**)(void *))(*v2 + 8))(v2);
      }
    }
  }

  CMMTag::~CMMTag(this);
}

void CMMTable::~CMMTable(CMMTable *this)
{
  *(void *)this = &unk_1ED985520;
  unint64_t v2 = (pthread_mutex_t **)*((void *)this + 2);
  if (v2) {
    CMMBase::operator delete(v2);
  }

  CMMBase::operator delete((pthread_mutex_t **)this);
}

{
  pthread_mutex_t **v1;

  *(void *)this = &unk_1ED985520;
  uint64_t v1 = (pthread_mutex_t **)*((void *)this + 2);
  if (v1) {
    CMMBase::operator delete(v1);
  }
}

ColorSyncProfileRef __get_dispP3_profile_block_invoke()
{
  ColorSyncProfileRef result = ColorSyncProfileCreateWithName(kColorSyncDisplayP3Profile);
  get_dispP3_profile_dispP3 = (uint64_t)result;
  return result;
}

CFTypeRef create_DisplayP3Profile()
{
  if (create_DisplayP3Profile_predicate[0] != -1) {
    dispatch_once(create_DisplayP3Profile_predicate, &__block_literal_global_175);
  }
  uint64_t v0 = (const void *)create_DisplayP3Profile_profile;

  return CFRetain(v0);
}

ColorSyncProfileRef __getAdobeRGBProfile_block_invoke()
{
  ColorSyncProfileRef result = ColorSyncProfileCreateWithName(kColorSyncAdobeRGB1998Profile);
  getAdobeRGBProfile_adobeRGB = (uint64_t)result;
  return result;
}

CFTypeRef create_AdobeRGB1998Profile()
{
  if (create_AdobeRGB1998Profile_predicate != -1) {
    dispatch_once(&create_AdobeRGB1998Profile_predicate, &__block_literal_global_190);
  }
  uint64_t v0 = (const void *)create_AdobeRGB1998Profile_profile;

  return CFRetain(v0);
}

CFTypeRef create_DisplayP3_709OETFProfile()
{
  if (create_DisplayP3_709OETFProfile_predicate != -1) {
    dispatch_once(&create_DisplayP3_709OETFProfile_predicate, &__block_literal_global_184);
  }
  uint64_t v0 = (const void *)create_DisplayP3_709OETFProfile_profile;

  return CFRetain(v0);
}

ColorSyncProfileRef __bt2020HLGProfile_block_invoke()
{
  ColorSyncProfileRef result = ColorSyncProfileCreateWithName((CFStringRef)kColorSyncITUR2020_HLGProfile);
  bt2020HLGProfile_profile = (uint64_t)result;
  return result;
}

CFTypeRef create_ITUR2020_HLGProfile()
{
  if (create_ITUR2020_HLGProfile_predicate != -1) {
    dispatch_once(&create_ITUR2020_HLGProfile_predicate, &__block_literal_global_220);
  }
  uint64_t v0 = (const void *)create_ITUR2020_HLGProfile_profile;

  return CFRetain(v0);
}

ColorSyncProfileRef __bt2020PQProfile_block_invoke()
{
  ColorSyncProfileRef result = ColorSyncProfileCreateWithName((CFStringRef)kColorSyncITUR2020_PQProfile);
  bt2020PQProfile_profile = (uint64_t)result;
  return result;
}

CFTypeRef create_ITUR2020_PQProfile()
{
  if (create_ITUR2020_PQProfile_predicate != -1) {
    dispatch_once(&create_ITUR2020_PQProfile_predicate, &__block_literal_global_223);
  }
  uint64_t v0 = (const void *)create_ITUR2020_PQProfile_profile;

  return CFRetain(v0);
}

CFTypeRef create_GenericLabProfile()
{
  if (create_GenericLabProfile_predicate != -1) {
    dispatch_once(&create_GenericLabProfile_predicate, &__block_literal_global_193);
  }
  uint64_t v0 = (const void *)create_GenericLabProfile_profile;

  return CFRetain(v0);
}

CFTypeRef create_ITUR2020sRGBGammaProfile()
{
  if (create_ITUR2020sRGBGammaProfile_predicate != -1) {
    dispatch_once(&create_ITUR2020sRGBGammaProfile_predicate, &__block_literal_global_217);
  }
  uint64_t v0 = (const void *)create_ITUR2020sRGBGammaProfile_profile;

  return CFRetain(v0);
}

CFTypeRef create_DisplayP3_PQProfile()
{
  if (create_DisplayP3_PQProfile_predicate != -1) {
    dispatch_once(&create_DisplayP3_PQProfile_predicate, &__block_literal_global_181);
  }
  uint64_t v0 = (const void *)create_DisplayP3_PQProfile_profile;

  return CFRetain(v0);
}

CFTypeRef create_ITUR709_HLGProfile()
{
  if (create_ITUR709_HLGProfile_predicate != -1) {
    dispatch_once(&create_ITUR709_HLGProfile_predicate, &__block_literal_global_211);
  }
  uint64_t v0 = (const void *)create_ITUR709_HLGProfile_profile;

  return CFRetain(v0);
}

CFTypeRef create_ITUR709_PQProfile()
{
  if (create_ITUR709_PQProfile_predicate != -1) {
    dispatch_once(&create_ITUR709_PQProfile_predicate, &__block_literal_global_208);
  }
  uint64_t v0 = (const void *)create_ITUR709_PQProfile_profile;

  return CFRetain(v0);
}

CFTypeRef create_ITUR2100_PQProfile()
{
  if (create_ITUR2100_PQProfile_predicate != -1) {
    dispatch_once(&create_ITUR2100_PQProfile_predicate, &__block_literal_global_229);
  }
  uint64_t v0 = (const void *)create_ITUR2100_PQProfile_profile;

  return CFRetain(v0);
}

CFTypeRef create_ITUR2100_HLGProfile()
{
  if (create_ITUR2100_HLGProfile_predicate != -1) {
    dispatch_once(&create_ITUR2100_HLGProfile_predicate, &__block_literal_global_226);
  }
  uint64_t v0 = (const void *)create_ITUR2100_HLGProfile_profile;

  return CFRetain(v0);
}

CFTypeRef create_DisplayP3_HLGProfile()
{
  if (create_DisplayP3_HLGProfile_predicate != -1) {
    dispatch_once(&create_DisplayP3_HLGProfile_predicate, &__block_literal_global_178);
  }
  uint64_t v0 = (const void *)create_DisplayP3_HLGProfile_profile;

  return CFRetain(v0);
}

ColorSyncProfileRef __getGenericGrayGamma2_2Profile_block_invoke()
{
  ColorSyncProfileRef result = ColorSyncProfileCreateWithName(kColorSyncGenericGrayGamma22Profile);
  getGenericGrayGamma2_2Profile_genericGray2_2 = (uint64_t)result;
  return result;
}

CFTypeRef create_GenericGrayGamma22Profile()
{
  if (create_GenericGrayGamma22Profile_predicate[0] != -1) {
    dispatch_once(create_GenericGrayGamma22Profile_predicate, &__block_literal_global_166);
  }
  uint64_t v0 = (const void *)create_GenericGrayGamma22Profile_profile;

  return CFRetain(v0);
}

CFTypeRef create_CoreVideo709Profile()
{
  if (create_CoreVideo709Profile_predicate != -1) {
    dispatch_once(&create_CoreVideo709Profile_predicate, &__block_literal_global_238_993);
  }
  uint64_t v0 = (const void *)create_CoreVideo709Profile_profile;

  return CFRetain(v0);
}

CFTypeRef create_CoreVideoLegacy709Profile()
{
  if (create_CoreVideoLegacy709Profile_predicate != -1) {
    dispatch_once(&create_CoreVideoLegacy709Profile_predicate, &__block_literal_global_241_990);
  }
  uint64_t v0 = (const void *)create_CoreVideoLegacy709Profile_profile;

  return CFRetain(v0);
}

ColorSyncProfileRef __get_itu709_profile_block_invoke()
{
  ColorSyncProfileRef result = ColorSyncProfileCreateWithName(kColorSyncITUR709Profile);
  get_itu709_profile_itu709 = (uint64_t)result;
  return result;
}

CFTypeRef create_ITUR709Profile()
{
  if (create_ITUR709Profile_predicate[0] != -1) {
    dispatch_once(create_ITUR709Profile_predicate, &__block_literal_global_205);
  }
  uint64_t v0 = (const void *)create_ITUR709Profile_profile;

  return CFRetain(v0);
}

ColorSyncProfileRef __getSRGBProfile_block_invoke()
{
  ColorSyncProfileRef result = ColorSyncProfileCreateWithName(kColorSyncSRGBProfile);
  getSRGBProfile_sRGBProfile = (uint64_t)result;
  return result;
}

const UInt8 *___ZL14sRGBTRCDataPtrv_block_invoke()
{
  uint64_t v0 = ColorSyncProfileCreateWithName(kColorSyncSRGBProfile);
  sRGBTRCDataPtr(void)::sRGBTRCDataRef = (uint64_t)ColorSyncProfileCopyTag(v0, @"rTRC");
  ColorSyncProfileRef result = CFDataGetBytePtr((CFDataRef)sRGBTRCDataPtr(void)::sRGBTRCDataRef);
  sRGBTRCDataPtr(void)::ptr = (uint64_t)(result + 12);
  return result;
}

ColorSyncProfileRef ColorSyncProfileCreateWithName(CFStringRef name)
{
  if (!name) {
    return 0;
  }
  if (ColorSyncProfileCreateWithName_predicate != -1) {
    dispatch_once(&ColorSyncProfileCreateWithName_predicate, &__block_literal_global_987);
  }
  unint64_t v2 = (CFStringRef *)ColorSyncProfileCreateWithName_name_creator_pair_array;
  uint64_t v3 = 28;
  if (!ColorSyncProfileCreateWithName_name_creator_pair_count) {
    uint64_t v3 = 0;
  }
  while (v3)
  {
    if (*v2 == name)
    {
      uint64_t v3 = 0;
LABEL_19:
      CFNumberRef Value = (uint64_t (*)(void))v2[2 * v3 + 1];
      if (Value) {
        goto LABEL_21;
      }
      break;
    }
    unint64_t v4 = v3--;
    CFStringRef v5 = v2[2 * v3];
    if (v5 == name) {
      goto LABEL_19;
    }
    uint64_t v3 = v4 >> 1;
    CFStringRef v6 = v2[2 * (v4 >> 1)];
    if (v6 == name) {
      goto LABEL_19;
    }
    if (*v2 >= name || v6 <= name)
    {
      v2 += 2 * v3;
      uint64_t v3 = v4 - v3;
      if (v5 <= name || v6 >= name) {
        break;
      }
    }
  }
  CFNumberRef Value = (uint64_t (*)(void))CFDictionaryGetValue((CFDictionaryRef)ColorSyncProfileCreateWithName_name_to_function_map, name);
  if (!Value) {
    return 0;
  }
LABEL_21:

  return (ColorSyncProfileRef)Value();
}

CFDataRef ColorSyncProfileCopyTag(ColorSyncProfileRef prof, CFStringRef signature)
{
  if (!prof) {
    return 0;
  }
  CFTypeID v4 = CFGetTypeID(prof);
  if (ColorSyncProfileGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
  }
  if (v4 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID) {
    return 0;
  }
  if (*((_DWORD *)prof + 37) == 1) {
    pthread_mutex_lock((pthread_mutex_t *)((char *)prof + 24));
  }
  CFDataRef Tag = (const __CFData *)getTag((uint64_t)prof, (void *)signature);
  if (Tag) {
    CFDataRef Copy = CFDataCreateCopy(0, Tag);
  }
  else {
    CFDataRef Copy = 0;
  }
  if (*((_DWORD *)prof + 37) == 1) {
    pthread_mutex_unlock((pthread_mutex_t *)((char *)prof + 24));
  }
  return Copy;
}

CFTypeRef create_sRGBProfile()
{
  if (create_sRGBProfile_predicate != -1) {
    dispatch_once(&create_sRGBProfile_predicate, &__block_literal_global_187);
  }
  uint64_t v0 = (const void *)create_sRGBProfile_profile;

  return CFRetain(v0);
}

uint64_t __current_or_newer_sdk_block_invoke()
{
  current_or_newer_sdk_linked_on_glow_or_later = dyld_program_sdk_at_least();
  current_or_newer_sdk_linked_on_crystal_or_later = dyld_program_sdk_at_least();
  current_or_newer_sdk_linked_on_sapphire_or_later = dyld_program_sdk_at_least();
  current_or_newer_sdk_linked_on_moonstone_or_later = dyld_program_sdk_at_least();
  uint64_t result = dyld_program_sdk_at_least();
  current_or_newer_sdk_linked_on_constellation_or_later = result;
  return result;
}

uint64_t CMMLutTag::CMMLutTag(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void **a5, unsigned int a6, unsigned int a7)
{
  *(void *)(a1 + 32) = 0;
  long long v12 = (unint64_t *)(a1 + 32);
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 48) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a4;
  if (a4) {
    *(void *)(a4 + 16) = a1;
  }
  *(void *)a1 = &unk_1ED985540;
  uint64_t v13 = *(void *)(a3 + 40);
  *(void *)(a1 + 32) = v13;
  if ((unint64_t)v13 <= 0x20)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  if (*(void *)(a3 + 32))
  {
    if (v13 >= 34) {
      int64_t v14 = 26;
    }
    else {
      int64_t v14 = v13 - 8;
    }
    if (v14 <= 0) {
      uint64_t v15 = 4294967126;
    }
    else {
      uint64_t v15 = 0;
    }
    CMMThrowExceptionOnError(v15);
    memcpy((void *)(a1 + 50), (const void *)(*(void *)(a3 + 32) + 8), v14);
  }
  *(int8x16_t *)(a1 + 54) = vrev32q_s8(*(int8x16_t *)(a1 + 54));
  *(_DWORD *)(a1 + 70) = bswap32(*(_DWORD *)(a1 + 70));
  CMMThrowExceptionOnCondition(*(unsigned __int8 *)(a1 + 50) - 16 < 0xFFFFFFF1);
  CMMThrowExceptionOnCondition(*(unsigned __int8 *)(a1 + 51) - 16 < 0xFFFFFFF1);
  uint32x4_t v16 = *(uint32x4_t *)(a1 + 54);
  LODWORD(v17) = *(_DWORD *)(a1 + 70);
  unsigned int v18 = vmaxvq_u32(v16);
  if (v18 <= v17) {
    unint64_t v17 = v17;
  }
  else {
    unint64_t v17 = v18;
  }
  if (*(void *)(a1 + 32) <= v17)
  {
    CFTypeID v81 = __cxa_allocate_exception(4uLL);
    *CFTypeID v81 = -171;
  }
  *(_DWORD *)(a1 + 100) = 0;
  uint64_t v19 = v16.u32[3];
  long long v20 = (void *)(a1 + 76);
  if (v16.i32[3])
  {
    if (*(void *)(a3 + 32))
    {
      uint64_t v21 = *(void *)(a3 + 40);
      if (v16.u32[3] + 21 <= v21) {
        int64_t v22 = 21;
      }
      else {
        int64_t v22 = v21 - v16.u32[3];
      }
      if (v22 <= 0) {
        uint64_t v23 = 4294967126;
      }
      else {
        uint64_t v23 = 0;
      }
      CMMThrowExceptionOnError(v23);
      memcpy((void *)(a1 + 76), (const void *)(*(void *)(a3 + 32) + v19), v22);
    }
    uint64_t v24 = *(unsigned __int8 *)(a1 + 50);
    unsigned int v25 = *(unsigned __int8 *)(a1 + 51);
    if (*(unsigned __int8 *)(a1 + 92) - 1 >= 2) {
      uint64_t v26 = 4294967126;
    }
    else {
      uint64_t v26 = 0;
    }
    CMMThrowExceptionOnError(v26);
    unsigned int v85 = a6;
    unsigned int v27 = a7;
    unint64_t v28 = *(unsigned __int8 *)v20;
    if (v24 >= 2)
    {
      uint64_t v29 = v24 - 1;
      long long v30 = (unsigned __int8 *)(a1 + 77);
      do
      {
        if (v28)
        {
          uint64_t v31 = (v28 * (unsigned __int128)*v30) >> 64;
          v28 *= *v30;
          if (v31) {
            uint64_t v32 = 4294967126;
          }
          else {
            uint64_t v32 = 0;
          }
        }
        else
        {
          uint64_t v32 = 0;
        }
        CMMThrowExceptionOnError(v32);
        ++v30;
        --v29;
      }
      while (v29);
    }
    if (v28)
    {
      unint64_t v33 = *(unsigned __int8 *)(a1 + 92) * (unint64_t)v25;
      uint64_t v34 = v33 * v28;
      if (is_mul_ok(v28, v33)) {
        uint64_t v35 = 0;
      }
      else {
        uint64_t v35 = 4294967126;
      }
    }
    else
    {
      uint64_t v34 = 0;
      uint64_t v35 = 0;
    }
    a7 = v27;
    CMMThrowExceptionOnError(v35);
    a6 = v85;
    if (v34) {
      uint64_t v37 = 0;
    }
    else {
      uint64_t v37 = 4294967126;
    }
    CMMThrowExceptionOnError(v37);
    uint64_t v38 = (*(_DWORD *)(a1 + 66) + 20);
    if (*(void *)(a1 + 32) < (unint64_t)(v34 + v38))
    {
      long long v84 = __cxa_allocate_exception(4uLL);
      *long long v84 = -171;
    }
    float v39 = CMMBase::NewInternal(0x28uLL, a5);
    uint64_t v40 = *(void *)(a3 + 32);
    if (v40)
    {
      uint64_t v41 = *(void *)(a3 + 40);
      if (v34 + v38 <= v41) {
        uint64_t v42 = v34;
      }
      else {
        uint64_t v42 = v41 - v38;
      }
      if (v42 <= 0) {
        uint64_t v43 = 4294967126;
      }
      else {
        uint64_t v43 = 0;
      }
      CMMThrowExceptionOnError(v43);
      uint64_t v40 = *(void *)(a3 + 32) + v38;
    }
    void *v39 = &unk_1ED985520;
    v39[1] = 1;
    v39[3] = v40;
    v39[4] = v34;
    v39[2] = 0;
    *(void *)(a1 + 104) = v39;
    uint64_t v36 = v34 + 20;
    int v44 = *(unsigned __int8 *)(a1 + 76);
    *(_DWORD *)(a1 + 100) = v44;
    unint64_t v45 = *(unsigned __int8 *)(a1 + 50);
    if (v45 >= 2)
    {
      int v46 = (unsigned __int8 *)(a1 + 77);
      unint64_t v47 = v45 - 1;
      while (1)
      {
        int v48 = *v46++;
        if (v44 != v48) {
          break;
        }
        if (!--v47) {
          goto LABEL_60;
        }
      }
      *(_DWORD *)(a1 + 100) = 0;
    }
  }
  else
  {
    uint64_t v36 = 0;
    *long long v20 = 0;
    *(void *)(a1 + 84) = 0;
    *(void *)(a1 + 89) = 0;
    *(void *)(a1 + 104) = 0;
  }
LABEL_60:
  uint64_t v87 = 0;
  unsigned int v86 = 0;
  CMMLutTag::InitializeCurveTable(a1, (_DWORD *)(a1 + 480), a5, a6, *(_DWORD *)(a1 + 70), a3, (_DWORD *)&v87 + 1);
  CMMLutTag::InitializeCurveTable(a1, (_DWORD *)(a1 + 208), a5, a7, *(_DWORD *)(a1 + 54), a3, &v87);
  CMMLutTag::InitializeCurveTable(a1, (_DWORD *)(a1 + 344), a5, 3u, *(_DWORD *)(a1 + 62), a3, &v86);
  int v49 = *(_DWORD *)(a1 + 70);
  int v50 = *(_DWORD *)(a1 + 54);
  int v51 = *(_DWORD *)(a1 + 62);
  if (v49 == v50)
  {
    unsigned int v53 = v87;
    unsigned int v52 = HIDWORD(v87);
    if (v49 == v51)
    {
      unsigned int v54 = 0;
      unsigned int v55 = 0;
      if (v87 <= v86) {
        unsigned int v53 = v86;
      }
      if (HIDWORD(v87) <= v53) {
        unsigned int v52 = v53;
      }
    }
    else
    {
      unsigned int v55 = 0;
      if (HIDWORD(v87) <= v87) {
        unsigned int v52 = v87;
      }
      unsigned int v54 = v86;
    }
  }
  else
  {
    if (v87 <= v86) {
      unsigned int v56 = v86;
    }
    else {
      unsigned int v56 = v87;
    }
    BOOL v57 = v50 == v51;
    if (v50 == v51) {
      unsigned int v54 = 0;
    }
    else {
      unsigned int v54 = v86;
    }
    if (v57) {
      unsigned int v55 = v56;
    }
    else {
      unsigned int v55 = v87;
    }
    unsigned int v52 = HIDWORD(v87);
  }
  uint64_t v58 = v55 + v52 + v54;
  unint64_t v59 = *v12;
  unint64_t v60 = v36 + v58 + 32;
  if (*v12 < v60)
  {
    int v82 = __cxa_allocate_exception(4uLL);
    *int v82 = -171;
  }
  uint64_t v61 = *(unsigned int *)(a1 + 58);
  if (v61)
  {
    if (*(void *)(a3 + 40) >= (unint64_t)(v61 + 48)) {
      uint64_t v62 = 0;
    }
    else {
      uint64_t v62 = 4294967294;
    }
    CMMThrowExceptionOnError(v62);
    uint64_t v63 = *(void *)(a3 + 32);
    if (v63)
    {
      uint64_t v64 = *(void *)(a3 + 40);
      if (v64 - v61 > 0 || v61 + 48 <= v64) {
        uint64_t v66 = 0;
      }
      else {
        uint64_t v66 = 4294967126;
      }
      CMMThrowExceptionOnError(v66);
      uint64_t v63 = *(void *)(a3 + 32) + v61;
    }
    uint64_t v67 = 0;
    int v68 = 0;
    uint64_t v69 = a1;
    do
    {
      for (uint64_t i = 0; i != 3; ++i)
      {
        int v71 = bswap32(*(_DWORD *)(v63 + 4 * (v68 + i)));
        uint64_t v72 = v69 + 4 * i;
        *(_DWORD *)(v72 + 112) = v71;
        float v73 = (double)v71 * 0.0000152587891;
        *(float *)(v72 + 160) = v73;
      }
      v68 += 3;
      int v74 = bswap32(*(_DWORD *)(v63 + 4 * v67 + 36));
      *(_DWORD *)(a1 + 112 + 16 * v67 + 12) = v74;
      float v75 = (double)v74 * 0.0000152587891;
      *(float *)(a1 + 16 * v67++ + 172) = v75;
      v69 += 16;
    }
    while (v67 != 3);
    unint64_t v59 = *v12;
    uint64_t v76 = 48;
  }
  else
  {
    for (uint64_t j = 0; j != 48; j += 16)
    {
      CFNumberRef v78 = (void *)(a1 + j);
      v78[14] = 0;
      v78[15] = 0;
      v78[20] = 0;
      v78[21] = 0;
    }
    uint64_t v76 = 0;
    *(_DWORD *)(a1 + 152) = 0x10000;
    *(_DWORD *)(a1 + 132) = 0x10000;
    *(_DWORD *)(a1 + 112) = 0x10000;
    *(_DWORD *)(a1 + 200) = 1065353216;
    *(_DWORD *)(a1 + 180) = 1065353216;
    *(_DWORD *)(a1 + 160) = 1065353216;
  }
  if (v59 < v60 + v76)
  {
    int v83 = __cxa_allocate_exception(4uLL);
    *int v83 = -171;
  }
  return a1;
}

void sub_18BE2C3B4(_Unwind_Exception *a1)
{
  CMMTag::~CMMTag(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMLutTag::InitializeCurveTable(uint64_t result, _DWORD *a2, void **a3, unsigned int a4, int a5, uint64_t a6, _DWORD *a7)
{
  *a2 = 0;
  if (a5)
  {
    if (a4 >= 0x10) {
      uint64_t v8 = 16;
    }
    else {
      uint64_t v8 = a4;
    }
    if (v8)
    {
      LODWORD(v10) = a5;
      uint64_t v12 = result;
      uint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = *(void *)(v12 + 32) - v10;
        if (v14 <= 0xB) {
          break;
        }
        if (*(void *)(a6 + 32))
        {
          if (v14 >= 0x400) {
            unint64_t v14 = 1024;
          }
          int64_t v15 = v14 + v10;
          int64_t v16 = *(void *)(a6 + 40);
          if (v16 - v10 > 0 || v15 <= v16) {
            uint64_t v18 = 0;
          }
          else {
            uint64_t v18 = 4294967126;
          }
          CMMThrowExceptionOnError(v18);
          uint64_t v19 = (unsigned int *)(*(void *)(a6 + 32) + v10);
        }
        else
        {
          uint64_t v19 = 0;
        }
        unsigned int v20 = bswap32(*v19);
        unsigned int v21 = v19[2];
        if (v20 == 1885434465)
        {
          unsigned int v26 = bswap32(v21) >> 16;
          if (v26 >= 5)
          {
LABEL_35:
            exception = __cxa_allocate_exception(4uLL);
            int v29 = -170;
LABEL_36:
            _DWORD *exception = v29;
          }
          uint64_t v23 = dword_18BEB5C94[v26];
          unint64_t v10 = (v23 + v10);
          if (*(void *)(v12 + 32) < v10) {
            break;
          }
          unsigned int v25 = (CMMCurveTag *)CMMBase::NewInternal(0x80uLL, a3);
          CMMParaCurveTag::CMMParaCurveTag(v25, v13, (uint64_t)v19, v23, 0);
        }
        else
        {
          if (v20 != 1668641398) {
            goto LABEL_35;
          }
          unsigned int v22 = 2 * bswap32(v21);
          uint64_t v23 = (v22 + 15) & 0xFFFFFFFC;
          if (v23 >= v22 + 12) {
            uint64_t v24 = 0;
          }
          else {
            uint64_t v24 = 4294967246;
          }
          CMMThrowExceptionOnError(v24);
          if ((v23 + (unint64_t)v10) >> 32
            || *(void *)(v12 + 32) < (unint64_t)(v23 + v10))
          {
            break;
          }
          unsigned int v25 = (CMMCurveTag *)CMMBase::NewInternal(0x38uLL, a3);
          CMMCurveTag::CMMCurveTag(v25, v13, (uint64_t)v19, v23, 0);
          LODWORD(v10) = v23 + v10;
        }
        uint64_t v27 = (*(uint64_t (**)(CMMCurveTag *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 1, 1);
        uint64_t result = CMMThrowExceptionOnError(v27);
        *(void *)&a2[2 * v13 + 2] = v25;
        ++*a2;
        *a7 += v23;
        if (v8 == ++v13) {
          return result;
        }
      }
      exception = __cxa_allocate_exception(4uLL);
      int v29 = -171;
      goto LABEL_36;
    }
  }
  else
  {
    *a7 = 0;
  }
  return result;
}

void sub_18BE2C680(_Unwind_Exception *a1)
{
  CMMTag::~CMMTag(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMThrowExceptionOnCondition(uint64_t result)
{
  if (result)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -170;
  }
  return result;
}

CFDataRef ColorSyncVerifyGenericLab(const ColorSyncProfile *a1)
{
  return verify_GenericLab(a1, 0);
}

CFDataRef ColorSyncVerifyDisplayP3ITU709(const ColorSyncProfile *a1)
{
  return verify_DisplayP3ITU709(a1, 0);
}

unint64_t ColorSyncVerifyCoreVideo709(const ColorSyncProfile *a1)
{
  return verify_CoreVideo709(a1, 0);
}

uint64_t ColorSyncVerifyAdobeRGB(const ColorSyncProfile *a1)
{
  return verify_AdobeRGB(a1, 0);
}

uint64_t colorSyncTransformFinalize(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    unint64_t v2 = *(const void **)(result + 80);
    if (v2) {
      CFRelease(v2);
    }
    uint64_t v3 = *(const void **)(v1 + 112);
    if (v3) {
      CFRelease(v3);
    }
    CFTypeID v4 = *(const void **)(v1 + 120);
    if (v4) {
      CFRelease(v4);
    }
    CFStringRef v5 = *(const void **)(v1 + 128);
    if (v5) {
      CFRelease(v5);
    }
    CFStringRef v6 = *(const void **)(v1 + 136);
    if (v6) {
      CFRelease(v6);
    }
    return pthread_mutex_destroy((pthread_mutex_t *)(v1 + 16));
  }
  return result;
}

CFTypeRef create_GenericRGBProfile()
{
  if (create_GenericRGBProfile_predicate != -1) {
    dispatch_once(&create_GenericRGBProfile_predicate, &__block_literal_global_169);
  }
  uint64_t v0 = (const void *)create_GenericRGBProfile_profile;

  return CFRetain(v0);
}

void __create_sRGBProfile_block_invoke()
{
  CFDataRef v0 = CFDataCreateWithBytesNoCopy(0, sRGB_Profile_data, 3144, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  create_sRGBProfile_profile = (uint64_t)ColorSyncProfileCreateSigleton(v0, 0xAB894ADB2EDA3F1DLL, 0xDD817D7C5F3CA260, @"/System/Library/ColorSync/Profiles/sRGB Profile.icc", 0, 3u);

  CFRelease(v0);
}

void *ColorSyncProfileCreateSigleton(const void *a1, uint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, unsigned int a6)
{
  unint64_t v10 = (void *)create(a1, 2, a5);
  double v11 = v10;
  if (v10)
  {
    v10[16] = a2;
    v10[17] = a3;
    if (a4) {
      v10[15] = CFURLCreateWithFileSystemPath(0, a4, kCFURLPOSIXPathStyle, 0);
    }
    if (a6 - 1 <= 4) {
      v11[30] = (char *)&valid_cicp + 4 * a6 - 4;
    }
  }
  return v11;
}

CFDataRef __getGenericGrayGamma2_2Data_block_invoke()
{
  if (getGenericGrayGamma2_2Profile_predicate != -1) {
    dispatch_once(&getGenericGrayGamma2_2Profile_predicate, &__block_literal_global_541);
  }
  CFDataRef result = ColorSyncProfileCopyData((ColorSyncProfileRef)getGenericGrayGamma2_2Profile_genericGray2_2, 0);
  getGenericGrayGamma2_2Data_genericGray2_2CFDataRef Data = (uint64_t)result;
  return result;
}

double __ColorSyncProfileGetBT709RedPrimary_block_invoke()
{
  *(void *)&double result = 542792024;
  ColorSyncProfileGetBT709RedPrimary_rXYZ = xmmword_18BE63610;
  dword_1EB28A790 = -1878851584;
  return result;
}

double __ColorSyncProfileGetBT709GreenPrimary_block_invoke()
{
  *(void *)&double result = 542792024;
  ColorSyncProfileGetBT709GreenPrimary_gXYZ = xmmword_18BE63600;
  dword_1EB28A760 = -635961344;
  return result;
}

double __ColorSyncProfileGetBT709BluePrimary_block_invoke()
{
  *(void *)&double result = 542792024;
  ColorSyncProfileGetBT709BluePrimary_bXYZ = xmmword_18BE635F0;
  dword_1EB28A740 = -810156032;
  return result;
}

void colorSyncTransformIteratorFinalize(void *a1)
{
  if (a1)
  {
    if (*(uint64_t *)((char *)a1 + 68) >= 1)
    {
      uint64_t v2 = 0;
      do
        CFRelease(*(CFTypeRef *)(*(void *)((char *)a1 + 92) + 8 * v2++));
      while (v2 < *(void *)((char *)a1 + 68));
    }
    if (*(uint64_t *)((char *)a1 + 76) >= 1)
    {
      uint64_t v3 = 0;
      do
        CFRelease(*(CFTypeRef *)(*(void *)((char *)a1 + 100) + 8 * v3++));
      while (v3 < *(void *)((char *)a1 + 76));
    }
    if (*(uint64_t *)((char *)a1 + 84) >= 1)
    {
      uint64_t v4 = 0;
      do
        CFRelease(*(CFTypeRef *)(*(void *)((char *)a1 + 108) + 8 * v4++));
      while (v4 < *(void *)((char *)a1 + 84));
    }
    CFStringRef v5 = (const void *)a1[2];
    if (v5) {
      CFRelease(v5);
    }
    CFStringRef v6 = (const void *)a1[4];
    if (v6) {
      CFRelease(v6);
    }
    uint64_t v7 = (void *)a1[18];
    if (v7) {
      free(v7);
    }
    uint64_t v8 = (void *)a1[19];
    if (v8)
    {
      free(v8);
    }
  }
}

unint64_t verify_sRGB(ColorSyncProfileRef prof, CFDataRef cf)
{
  if (cf)
  {
    CFDataRef v3 = 0;
    if (prof) {
      goto LABEL_3;
    }
  }
  else
  {
    unsigned int cf = ColorSyncProfileCopyData(prof, 0);
    CFDataRef v3 = cf;
    if (prof)
    {
LABEL_3:
      unint64_t v4 = verifyProfileAgainstSRGB(prof);
      if (!v3) {
        return v4;
      }
      goto LABEL_8;
    }
  }
  CFStringRef v5 = (const ColorSyncProfile *)create(cf, 0, 0);
  if (!v5)
  {
    unint64_t v4 = 0;
    if (!v3) {
      return v4;
    }
    goto LABEL_8;
  }
  CFStringRef v6 = v5;
  unint64_t v4 = verifyProfileAgainstSRGB(v5);
  CFRelease(v6);
  if (v3) {
LABEL_8:
  }
    CFRelease(v3);
  return v4;
}

BOOL ColorSyncVerifyProfileByName(const void *a1, const ColorSyncProfile *a2)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFStringGetTypeID()) {
    return 0;
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncITUR2020_PQProfile) == 1)
  {
    if (bt2020PQProfile_predicate != -1) {
      dispatch_once(&bt2020PQProfile_predicate, &__block_literal_global_578);
    }
    uint64_t v5 = bt2020PQProfile_profile;
    CFStringRef v6 = a2;
    CFDataRef v7 = 0;
LABEL_13:
    int v9 = 1;
    unint64_t v10 = 0;
LABEL_14:
    return verify_hdr(v6, 0, v7, v5, v9, (uint64_t)v10);
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncDisplayP3_PQProfile) == 1)
  {
    if (displayP3PQ_CICP_tag_predicate != -1) {
      dispatch_once(&displayP3PQ_CICP_tag_predicate, &__block_literal_global_581);
    }
    uint64_t v8 = displayP3PQ_CICP_tag_cicp;
    if (pre_cicp_DisplayP3PQProfile_predicate != -1) {
      dispatch_once(&pre_cicp_DisplayP3PQProfile_predicate, &__block_literal_global_584);
    }
    uint64_t v5 = pre_cicp_DisplayP3PQProfile_profile;
    CFStringRef v6 = a2;
    CFDataRef v7 = (const __CFData *)v8;
    goto LABEL_13;
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncITUR2020_HLGProfile) == 1)
  {
    if (bt2020HLGProfile_predicate != -1) {
      dispatch_once(&bt2020HLGProfile_predicate, &__block_literal_global_587);
    }
    uint64_t v5 = bt2020HLGProfile_profile;
    unint64_t v10 = @"aaOO";
    CFStringRef v6 = a2;
    CFDataRef v7 = 0;
    int v9 = 2;
    goto LABEL_14;
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncDisplayP3_HLGProfile) == 1)
  {
    return verify_displayP3_HLG(a2);
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncITUR709_PQProfile) == 1)
  {
    return verify_BT709_PQ(a2);
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncITUR709_HLGProfile) == 1)
  {
    return verify_BT709_HLG(a2);
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncITUR2020_sRGBGammaProfile) == 1)
  {
    CFDataRef Data = ColorSyncProfileGetData((uint64_t)a2);
    return verify_ITUR2020_sRGBGamma_data(Data);
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncITUR2100_PQProfile) == 1)
  {
    return verify_BT2100_PQ(a2);
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncITUR2100_HLGProfile) != 1) {
    return 0;
  }

  return verify_BT2100_HLG(a2);
}

double __ColorSyncProfileGetDisplayP3RedPrimary_block_invoke()
{
  *(void *)&double result = 542792024;
  ColorSyncProfileGetDisplayP3RedPrimary_rXYZ = xmmword_18BE63550;
  dword_1EB28AA70 = -1140850689;
  return result;
}

double __ColorSyncProfileGetDisplayP3GreenPrimary_block_invoke()
{
  *(void *)&double result = 542792024;
  ColorSyncProfileGetDisplayP3GreenPrimary_gXYZ = xmmword_18BE63540;
  dword_1EB28AA40 = -1190526976;
  return result;
}

double __ColorSyncProfileGetDisplayP3BluePrimary_block_invoke()
{
  *(void *)&double result = 542792024;
  ColorSyncProfileGetDisplayP3BluePrimary_bXYZ = xmmword_18BE63530;
  dword_1EB28AA20 = -1178075136;
  return result;
}

double __ColorSyncProfileGetBT2020RedPrimary_block_invoke()
{
  *(void *)&double result = 542792024;
  ColorSyncProfileGetBT2020RedPrimary_rXYZ = xmmword_18BE635B0;
  dword_1EB28AA00 = -2113929217;
  return result;
}

double __ColorSyncProfileGetBT2020GreenPrimary_block_invoke()
{
  *(void *)&double result = 542792024;
  ColorSyncProfileGetBT2020GreenPrimary_gXYZ = xmmword_18BE635A0;
  dword_1EB28A9D0 = -1392050176;
  return result;
}

double __ColorSyncProfileGetBT2020BluePrimary_block_invoke()
{
  *(void *)&double result = 542792024;
  ColorSyncProfileGetBT2020BluePrimary_bXYZ = xmmword_18BE63590;
  dword_1EB28A9B0 = -20250624;
  return result;
}

BOOL verify_hdr(ColorSyncProfileRef a1, CFTypeRef cf, const __CFData *a3, uint64_t a4, int a5, uint64_t a6)
{
  if (a1)
  {
    unint64_t v10 = a1;
    double v11 = 0;
  }
  else
  {
    unint64_t v10 = (const ColorSyncProfile *)create(cf, 0, 0);
    double v11 = v10;
  }
  if (ColorSyncProfileIsHLGBased(v10) || ColorSyncProfileIsPQBased(v10))
  {
    CFDataRef Tag = (const UInt8 *)ColorSyncProfileGetTag((uint64_t)v10, @"cicp");
    char v40 = 0;
    if (a3)
    {
      CFDataRef v13 = (const __CFData *)Tag;
      if (Tag)
      {
        if (valid_cicp_tag(Tag, &v40))
        {
          vm_address_t BytePtr = CFDataGetBytePtr(a3);
          int64_t v15 = CFDataGetBytePtr(v13);
          BOOL v16 = 0;
          if (BytePtr && v15) {
            return BytePtr[8] == v15[8] && BytePtr[10] == v15[10] && BytePtr[9] == v15[9] && BytePtr[11] == v15[11];
          }
          return v16;
        }
      }
    }
    if (v10)
    {
      unint64_t v17 = 0;
      while (1)
      {
        uint64_t v18 = off_1E54D69B8[v17];
        CFDataRef v19 = (const __CFData *)getTag((uint64_t)v10, v18);
        if (!v19)
        {
          CFDataRef v19 = (const __CFData *)getTag((uint64_t)v10, off_1E54D69A0[v17]);
          if (!v19) {
            break;
          }
        }
        CFDataRef v20 = (const __CFData *)getTag(a4, v18);
        if (!v20) {
          break;
        }
        BOOL v21 = tags_are_equal(v19, v20);
        if (v17 <= 1)
        {
          ++v17;
          if (v21) {
            continue;
          }
        }
        if (!v21) {
          break;
        }
        CFDataRef v22 = (const __CFData *)getTag((uint64_t)v10, @"hdTF");
        if (v22)
        {
          CFDataRef v23 = v22;
          CFDataRef v24 = (const __CFData *)getTag(a4, @"hdTF");
          if (!v24) {
            __assert_rtn("verify_hdr", "ColorSyncProfile.c", 6518, "hdrProfileTagData != NULL");
          }
          BOOL v16 = tags_are_equal(v23, v24);
          goto LABEL_66;
        }
        unint64_t v25 = 0;
        while (1)
        {
          CFDataRef v26 = (const __CFData *)getTag((uint64_t)v10, off_1E54D69D0[v25]);
          if (!v26) {
            goto LABEL_65;
          }
          CFDataRef v27 = v26;
          unint64_t v28 = CFDataGetBytePtr(v26);
          BOOL v29 = (unint64_t)CFDataGetLength(v27) <= 0xB || v28 == 0;
          int v30 = !v29;
          if (a5 == 1 && v30)
          {
            if (get_preliminary_PQ_curve_data_predicate != -1) {
              dispatch_once(&get_preliminary_PQ_curve_data_predicate, &__block_literal_global_487);
            }
            uint64_t v31 = &get_preliminary_PQ_curve_data_preliminary_PQ_data;
          }
          else
          {
            char v32 = v30 ^ 1;
            if (a5 != 2) {
              char v32 = 1;
            }
            if (v32) {
              goto LABEL_65;
            }
            if (get_preliminary_HLG_curve_data_predicate != -1) {
              dispatch_once(&get_preliminary_HLG_curve_data_predicate, &__block_literal_global_490);
            }
            uint64_t v31 = &get_preliminary_HLG_curve_data_preliminary_HLG_data;
          }
          uint64_t v33 = *v31 ^ *(void *)v28 | (*((_DWORD *)v31 + 2) ^ *((_DWORD *)v28 + 2));
          BOOL v29 = v33 == 0;
          BOOL v34 = v33 != 0;
          BOOL v16 = v29;
          if (v25 <= 1)
          {
            ++v25;
            if (!v34) {
              continue;
            }
          }
          if (a5 == 2 && a6 && !v34)
          {
            CFDataRef v35 = (const __CFData *)getTag((uint64_t)v10, @"aaOO");
            if (!v35) {
              goto LABEL_65;
            }
            CFDataRef v36 = v35;
            uint64_t v37 = CFDataGetBytePtr(v35);
            BOOL v16 = 0;
            if ((unint64_t)CFDataGetLength(v36) >= 0x20 && v37)
            {
              if (get_preliminary_OOTF_tag_data_predicate != -1) {
                dispatch_once(&get_preliminary_OOTF_tag_data_predicate, &__block_literal_global_575);
              }
              BOOL v16 = get_preliminary_OOTF_tag_data_preliminary_OOTF_data == *(void *)v37
                 && *(void *)&dword_1E9155728 == *((void *)v37 + 1);
            }
          }
          goto LABEL_66;
        }
      }
    }
  }
LABEL_65:
  BOOL v16 = 0;
LABEL_66:
  if (v11) {
    CFRelease(v11);
  }
  return v16;
}

uint64_t ColorSyncPureGammaOriginalTRC(unsigned __int8 *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (ColorSyncTRCGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncTRCGetTypeID_predicate, &__block_literal_global_1420);
  }
  if (v2 != ColorSyncTRCGetTypeID_kColorSyncTRCRuntimeID) {
    __assert_rtn("ColorSyncPureGammaOriginalTRC", "ColorSyncTransformFunctions.c", 437, "CFGetTypeID(ref) == ColorSyncTRCGetTypeID()");
  }
  return a1[88];
}

BOOL verify_GenericGrayGamma2_2(const ColorSyncProfile *a1, const __CFData *cf)
{
  if (getGenericGrayGamma2_2Data_predicate != -1) {
    dispatch_once(&getGenericGrayGamma2_2Data_predicate, &__block_literal_global_538);
  }
  CFDataRef v4 = (const __CFData *)getGenericGrayGamma2_2Data_genericGray2_2Data;
  if (cf)
  {
    CFDataRef v5 = 0;
  }
  else
  {
    unsigned int cf = ColorSyncProfileCopyData(a1, 0);
    CFDataRef v5 = cf;
  }
  if (v4) {
    BOOL v6 = cf == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6
    || (vm_address_t BytePtr = CFDataGetBytePtr(v4),
        size_t Length = CFDataGetLength(v4),
        int v9 = CFDataGetBytePtr(cf),
        CFDataGetLength(cf) < Length))
  {
    BOOL v10 = 0;
    if (!v4) {
      goto LABEL_36;
    }
  }
  else
  {
    BOOL v10 = memcmp(BytePtr, v9, Length) == 0;
    if (!v4) {
      goto LABEL_36;
    }
  }
  if (!v10 && cf)
  {
    if (a1)
    {
      double v11 = 0;
    }
    else
    {
      double v11 = (const ColorSyncProfile *)create(cf, 0, 0);
      a1 = v11;
      if (!v11) {
        goto LABEL_36;
      }
    }
    CFDataRef Tag = (const __CFData *)getTag((uint64_t)a1, @"kTRC");
    if (Tag)
    {
      CFDataRef v13 = Tag;
      unint64_t v14 = copyHeaderData((uint64_t)a1);
      if (v14)
      {
        int64_t v15 = v14;
        BOOL v16 = CFDataGetBytePtr(v14);
        if (v16 && *((_DWORD *)v16 + 4) == 1196573017)
        {
          if (getGenericGrayGamma2_2Profile_predicate != -1) {
            dispatch_once(&getGenericGrayGamma2_2Profile_predicate, &__block_literal_global_541);
          }
          CFDataRef v17 = (const __CFData *)getTag(getGenericGrayGamma2_2Profile_genericGray2_2, @"kTRC");
          if (v17)
          {
            CFDataRef v18 = v17;
            CFDataRef v19 = CFDataGetBytePtr(v13);
            unint64_t v20 = CFDataGetLength(v13);
            BOOL v21 = CFDataGetBytePtr(v18);
            size_t v22 = CFDataGetLength(v18);
            if (v20 >= v22 && v19 && v21) {
              BOOL v10 = memcmp(v21, v19, v22) == 0;
            }
            if (!v10 && v20 >= 0xE) {
              BOOL v10 = AppleCMMVerifySRGBGamma(v13);
            }
          }
        }
        CFRelease(v15);
      }
    }
    if (v11) {
      CFRelease(v11);
    }
  }
LABEL_36:
  if (v5) {
    CFRelease(v5);
  }
  return v10;
}

const void *acquire_output_profile(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 9) {
    return 0;
  }
  block[7] = v1;
  block[8] = v2;
  if (use_poppy_profiles_from_file_predicate != -1) {
    dispatch_once(&use_poppy_profiles_from_file_predicate, &__block_literal_global_9);
  }
  if (use_poppy_profiles_from_file_enabled)
  {
    if (acquire_output_profile_predicate[0] != -1) {
      dispatch_once(acquire_output_profile_predicate, &__block_literal_global_1352);
    }
    if (acquire_output_profile_fd < 0) {
      goto LABEL_13;
    }
  }
  else
  {
    acquire_output_profile_fd = 0;
    acquire_output_profile_data = (uint64_t)"ypaa";
    acquire_output_profile_header = (uint64_t)"ypaa";
  }
  CFDataRef v5 = (dispatch_once_t *)((char *)&acquire_output_profile_predicates + 8 * a1);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __acquire_output_profile_block_invoke_2;
  block[3] = &__block_descriptor_tmp_6_1353;
  block[4] = a1;
  if (*v5 != -1) {
    dispatch_once(v5, block);
  }
LABEL_13:
  double result = (const void *)acquire_output_profile_profiles[a1];
  if (result)
  {
    CFRetain(result);
    return (const void *)acquire_output_profile_profiles[a1];
  }
  return result;
}

CFTypeRef create_ITUR2020Profile()
{
  if (create_ITUR2020Profile_predicate != -1) {
    dispatch_once(&create_ITUR2020Profile_predicate, &__block_literal_global_214);
  }
  CFDataRef v0 = (const void *)create_ITUR2020Profile_profile;

  return CFRetain(v0);
}

void __ColorSyncProfileCreateWithName_block_invoke()
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  keys = (void *)kColorSyncGenericGrayProfile;
  CFStringRef v8 = kColorSyncGenericGrayGamma22Profile;
  CFStringRef v9 = kColorSyncGenericRGBProfile;
  CFStringRef v10 = kColorSyncGenericCMYKProfile;
  CFStringRef v11 = kColorSyncDisplayP3Profile;
  uint64_t v12 = (CFTypeRef (*)())kColorSyncDisplayP3_HLGProfile;
  CFStringRef v13 = (CFStringRef)kColorSyncDisplayP3_PQProfile;
  unint64_t v14 = (CFTypeRef (*)())kColorSyncDisplayP3_709OETFProfile;
  CFStringRef v15 = kColorSyncSRGBProfile;
  CFStringRef v16 = kColorSyncAdobeRGB1998Profile;
  CFStringRef v17 = kColorSyncGenericLabProfile;
  CFStringRef v18 = kColorSyncGenericXYZProfile;
  CFStringRef v19 = kColorSyncACESCGLinearProfile;
  CFStringRef v20 = kColorSyncDCIP3Profile;
  CFStringRef v21 = kColorSyncITUR709Profile;
  size_t v22 = (CFTypeRef (*)())kColorSyncITUR709_PQProfile;
  CFStringRef v23 = (CFStringRef)kColorSyncITUR709_HLGProfile;
  CFStringRef v24 = kColorSyncITUR2020Profile;
  CFStringRef v25 = (CFStringRef)kColorSyncITUR2020_sRGBGammaProfile;
  CFDataRef v26 = (CFTypeRef (*)())kColorSyncITUR2020_HLGProfile;
  CFStringRef v27 = (CFStringRef)kColorSyncITUR2020_PQProfile;
  unint64_t v28 = (CFTypeRef (*)())kColorSyncITUR2100_HLGProfile;
  CFStringRef v29 = (CFStringRef)kColorSyncITUR2100_PQProfile;
  CFStringRef v30 = kColorSyncROMMRGBProfile;
  CFStringRef v31 = (CFStringRef)kColorSyncPerceptualStandardRGBProfile;
  char v32 = (CFTypeRef (*)())kColorSyncCoreVideo709Profile;
  CFStringRef v33 = @"com.apple.ColorSync.CoreVideoLegacy709";
  v5[10] = xmmword_1ED9868C0;
  v5[11] = *(_OWORD *)&off_1ED9868D0;
  v5[12] = xmmword_1ED9868E0;
  BOOL v6 = off_1ED9868F0;
  v5[6] = xmmword_1ED986880;
  v5[7] = *(_OWORD *)&off_1ED986890;
  v5[8] = xmmword_1ED9868A0;
  v5[9] = *(_OWORD *)&off_1ED9868B0;
  v5[2] = xmmword_1ED986840;
  v5[3] = *(_OWORD *)&off_1ED986850;
  v5[4] = xmmword_1ED986860;
  v5[5] = *(_OWORD *)&off_1ED986870;
  v5[0] = xmmword_1ED986820;
  v5[1] = *(_OWORD *)&off_1ED986830;
  ColorSyncProfileCreateWithName_name_to_function_map = (uint64_t)CFDictionaryCreate(0, (const void **)&keys, (const void **)v5, 27, MEMORY[0x1E4F1D530], 0);
  keys = (void *)kColorSyncGenericGrayProfile;
  CFStringRef v8 = (CFStringRef)create_GenericGrayProfile;
  CFStringRef v9 = kColorSyncGenericGrayGamma22Profile;
  CFStringRef v10 = (CFStringRef)create_GenericGrayGamma22Profile;
  CFStringRef v11 = kColorSyncGenericRGBProfile;
  uint64_t v12 = create_GenericRGBProfile;
  CFStringRef v13 = kColorSyncGenericCMYKProfile;
  unint64_t v14 = create_GenericCMYKProfile;
  CFStringRef v15 = kColorSyncDisplayP3Profile;
  CFStringRef v16 = (CFStringRef)create_DisplayP3Profile;
  CFStringRef v17 = (CFStringRef)kColorSyncDisplayP3_HLGProfile;
  CFStringRef v18 = (CFStringRef)create_DisplayP3_HLGProfile;
  CFStringRef v19 = (CFStringRef)kColorSyncDisplayP3_PQProfile;
  CFStringRef v20 = (CFStringRef)create_DisplayP3_PQProfile;
  CFStringRef v21 = (CFStringRef)kColorSyncDisplayP3_709OETFProfile;
  size_t v22 = create_DisplayP3_709OETFProfile;
  CFStringRef v23 = kColorSyncSRGBProfile;
  CFStringRef v24 = (CFStringRef)create_sRGBProfile;
  CFStringRef v25 = kColorSyncAdobeRGB1998Profile;
  CFDataRef v26 = create_AdobeRGB1998Profile;
  CFStringRef v27 = kColorSyncGenericLabProfile;
  unint64_t v28 = create_GenericLabProfile;
  CFStringRef v29 = kColorSyncGenericXYZProfile;
  CFStringRef v30 = (CFStringRef)create_GenericXYZProfile;
  CFStringRef v31 = kColorSyncACESCGLinearProfile;
  char v32 = create_ACESCGLinearProfile;
  CFStringRef v33 = kColorSyncDCIP3Profile;
  BOOL v34 = create_DCIP3Profile;
  CFStringRef v35 = kColorSyncITUR709Profile;
  CFDataRef v36 = create_ITUR709Profile;
  uint64_t v37 = kColorSyncITUR709_PQProfile;
  uint64_t v38 = create_ITUR709_PQProfile;
  uint64_t v39 = kColorSyncITUR709_HLGProfile;
  char v40 = create_ITUR709_HLGProfile;
  CFStringRef v41 = kColorSyncITUR2020Profile;
  uint64_t v42 = create_ITUR2020Profile;
  uint64_t v43 = kColorSyncITUR2020_sRGBGammaProfile;
  int v44 = create_ITUR2020sRGBGammaProfile;
  uint64_t v45 = kColorSyncITUR2020_HLGProfile;
  int v46 = create_ITUR2020_HLGProfile;
  uint64_t v47 = kColorSyncITUR2020_PQProfile;
  int v48 = create_ITUR2020_PQProfile;
  uint64_t v49 = kColorSyncITUR2100_HLGProfile;
  int v50 = create_ITUR2100_HLGProfile;
  uint64_t v51 = kColorSyncITUR2100_PQProfile;
  unsigned int v52 = create_ITUR2100_PQProfile;
  CFStringRef v53 = kColorSyncROMMRGBProfile;
  unsigned int v54 = create_ROMMRGBProfile;
  CFStringRef v55 = kColorSyncWebSafeColorsProfile;
  unsigned int v56 = create_WebSafeColorsProfile;
  uint64_t v57 = kColorSyncPerceptualStandardRGBProfile;
  uint64_t v58 = create_PerceptualStandardRGBProfile;
  uint64_t v59 = kColorSyncCoreVideo709Profile;
  unint64_t v60 = create_CoreVideo709Profile;
  uint64_t v61 = @"com.apple.ColorSync.CoreVideoLegacy709";
  uint64_t v62 = create_CoreVideoLegacy709Profile;
  CFDataRef v0 = (char *)malloc_type_malloc(0x1C0uLL, 0xE0040372BB24AuLL);
  uint64_t v1 = (uint64_t)v0;
  if (v0)
  {
    ColorSyncProfileCreateWithName_name_creator_pair_count = 1;
    size_t v2 = 28;
LABEL_7:
    uint64_t v3 = 0;
    size_t v4 = v2;
    do
    {
      *(_OWORD *)&v0[v3] = *(_OWORD *)((char *)&keys + v3);
      v3 += 16;
      --v4;
    }
    while (v4);
    qsort(v0, v2, 0x10uLL, (int (__cdecl *)(const void *, const void *))compare_names);
    goto LABEL_10;
  }
  if (ColorSyncProfileCreateWithName_name_creator_pair_count) {
    size_t v2 = 28;
  }
  else {
    size_t v2 = 0;
  }
  if (ColorSyncProfileCreateWithName_name_creator_pair_count) {
    goto LABEL_7;
  }
LABEL_10:
  ColorSyncProfileCreateWithName_name_creator_pair_array = v1;
}

BOOL verify_DisplayP3(ColorSyncProfileRef prof, const __CFData *cf)
{
  ColorSyncProfileRef v2 = prof;
  if (cf)
  {
    CFDataRef v3 = cf;
    CFDataRef v4 = 0;
  }
  else
  {
    CFDataRef v3 = ColorSyncProfileCopyData(prof, 0);
    CFDataRef v4 = v3;
    if (!v3) {
      return 0;
    }
  }
  CFTypeID v5 = CFGetTypeID(v3);
  if (v5 == CFDataGetTypeID() && (CFDataGetLength(v3) == 536 || CFDataGetLength(v3) == 548))
  {
    vm_address_t BytePtr = CFDataGetBytePtr(v3);
    BOOL v7 = *(void *)(BytePtr + 84) == 0xC34785388EA3FDECLL && *(void *)(BytePtr + 92) == 0x2F18DA7A4FBDB46DLL;
    if (v7
      || (*(void *)(BytePtr + 84) == 0xCD46BD67980EBBE5
        ? (BOOL v8 = *(void *)(BytePtr + 92) == 0x98751BBD6E44BE4BLL)
        : (BOOL v8 = 0),
          v8
       || (*(void *)(BytePtr + 84) == 0x4D107F2582951ACALL
         ? (BOOL v9 = *(void *)(BytePtr + 92) == 0x8215EAD1D5139938)
         : (BOOL v9 = 0),
           v9
        || (*(void *)(BytePtr + 84) == 0xBC27C634E15DDCC1
          ? (BOOL v10 = *(void *)(BytePtr + 92) == 0xC7C26BEAD5AF03B7)
          : (BOOL v10 = 0),
            v10))))
    {
      BOOL v12 = 1;
      goto LABEL_35;
    }
    if (v2)
    {
      ColorSyncProfileRef v11 = 0;
      goto LABEL_28;
    }
    ColorSyncProfileRef v2 = (ColorSyncProfileRef)create(v3, 0, 0);
    ColorSyncProfileRef v11 = v2;
    if (v2)
    {
LABEL_28:
      ColorSyncProfileRef v13 = ColorSyncProfileCreateWithName(kColorSyncDisplayP3Profile);
      unint64_t v14 = 0;
      while (1)
      {
        CFStringRef v15 = off_1E54D6BE8[v14];
        CFDataRef Tag = getTag((uint64_t)v2, v15);
        if (!Tag) {
          break;
        }
        CFStringRef v17 = Tag;
        CFStringRef v18 = getTag((uint64_t)v13, v15);
        int v19 = CFEqual(v18, v17);
        if (v14 <= 4)
        {
          ++v14;
          if (v19) {
            continue;
          }
        }
        if (v19)
        {
          BOOL v12 = 1;
          goto LABEL_46;
        }
        break;
      }
      if (create_DisplayP3_legacy_Profile_predicate != -1) {
        dispatch_once(&create_DisplayP3_legacy_Profile_predicate, &__block_literal_global_160);
      }
      CFTypeRef v21 = CFRetain((CFTypeRef)create_DisplayP3_legacy_Profile_profile);
      unint64_t v22 = 0;
      while (1)
      {
        CFStringRef v23 = off_1E54D6BE8[v22];
        CFStringRef v24 = getTag((uint64_t)v2, v23);
        if (!v24) {
          break;
        }
        CFStringRef v25 = v24;
        CFDataRef v26 = getTag((uint64_t)v21, v23);
        int v27 = CFEqual(v26, v25);
        BOOL v12 = v27 != 0;
        if (v22 <= 4)
        {
          ++v22;
          if (v27) {
            continue;
          }
        }
        goto LABEL_46;
      }
      BOOL v12 = 0;
LABEL_46:
      if (v11) {
        CFRelease(v11);
      }
      goto LABEL_35;
    }
  }
  BOOL v12 = 0;
LABEL_35:
  if (v4) {
    CFRelease(v4);
  }
  return v12;
}

uint64_t verify_AdobeRGB(ColorSyncProfileRef prof, const __CFData *cf)
{
  if (getAdobeRGBData_predicate != -1) {
    dispatch_once(&getAdobeRGBData_predicate, &__block_literal_global_547);
  }
  CFDataRef v4 = (const __CFData *)getAdobeRGBData_adobeRGBData;
  if (cf)
  {
    CFDataRef v5 = 0;
  }
  else
  {
    CFDataRef v5 = ColorSyncProfileCopyData(prof, 0);
    unsigned int cf = v5;
  }
  if (v4) {
    BOOL v6 = cf == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6
    || (vm_address_t BytePtr = CFDataGetBytePtr(v4),
        size_t Length = CFDataGetLength(v4),
        BOOL v9 = CFDataGetBytePtr(cf),
        CFDataGetLength(cf) < Length))
  {
    uint64_t Tag = 0;
    if (!v4) {
      goto LABEL_77;
    }
  }
  else
  {
    uint64_t Tag = memcmp(BytePtr, v9, Length) == 0;
    if (!v4) {
      goto LABEL_77;
    }
  }
  if (Tag || !cf)
  {
LABEL_77:
    if (!v5) {
      return Tag;
    }
LABEL_78:
    CFRelease(v5);
    return Tag;
  }
  if (prof)
  {
    ColorSyncProfileRef v11 = 0;
  }
  else
  {
    prof = (ColorSyncProfileRef)create(cf, 0, 0);
    ColorSyncProfileRef v11 = prof;
    if (!prof) {
      goto LABEL_77;
    }
  }
  CFIndex v12 = CFStringGetLength(@"Nikon Adobe RGB 4.0.0.3001");
  CFStringRef v13 = (const __CFString *)ColorSyncProfileCopyASCIIDescriptionString(prof);
  CFStringRef v14 = v13;
  if (v13) {
    CFStringRef v13 = (const __CFString *)CFStringGetLength(v13);
  }
  if ((uint64_t)v13 < v12
    || (v58.location = 0,
        v58.length = v12,
        CFStringCompareWithOptions(v14, @"Nikon Adobe RGB 4.0.0.3001", v58, 0)))
  {
    if (v14) {
      CFRelease(v14);
    }
    unint64_t v15 = 0;
    while (1)
    {
      CFStringRef v16 = off_1E54D6BE8[v15];
      uint64_t Tag = (uint64_t)getTag((uint64_t)prof, v16);
      if (!Tag)
      {
LABEL_75:
        if (v11) {
          CFRelease(v11);
        }
        goto LABEL_77;
      }
      if (getAdobeRGBProfile_predicate != -1) {
        dispatch_once(&getAdobeRGBProfile_predicate, &__block_literal_global_550);
      }
      CFDataRef v17 = (const __CFData *)getTag(getAdobeRGBProfile_adobeRGB, v16);
      if (!v17
        || ((CFDataRef v18 = v17,
             int v19 = CFDataGetBytePtr((CFDataRef)Tag),
             unint64_t v20 = CFDataGetLength((CFDataRef)Tag),
             CFTypeRef v21 = CFDataGetBytePtr(v18),
             size_t v22 = CFDataGetLength(v18),
             v20 >= v22)
          ? (BOOL v23 = v19 == 0)
          : (BOOL v23 = 1),
            !v23 ? (BOOL v24 = v21 == 0) : (BOOL v24 = 1),
            v24))
      {
LABEL_74:
        uint64_t Tag = 0;
        goto LABEL_75;
      }
      if (!memcmp(v21, v19, v22))
      {
        uint64_t Tag = 1;
        goto LABEL_71;
      }
      if ((v15 - 3) <= 2) {
        break;
      }
      CFTypeID v30 = CFGetTypeID(v18);
      if (v30 != CFDataGetTypeID()) {
        goto LABEL_74;
      }
      CFTypeID v31 = CFGetTypeID((CFTypeRef)Tag);
      if (v31 != CFDataGetTypeID()) {
        goto LABEL_74;
      }
      *(void *)&long long v53 = 0;
      CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v53);
      char v32 = CMMBase::NewInternal(0x38uLL, (void **)&v53);
      CMMXYZTag::CMMXYZTag((uint64_t)v32, v18);
      CFStringRef v33 = CMMBase::NewInternal(0x38uLL, (void **)&v53);
      CMMXYZTag::CMMXYZTag((uint64_t)v33, (CFDataRef)Tag);
      BOOL v34 = 0;
      CFStringRef v35 = (unsigned int *)v32[5];
      signed int v36 = bswap32(v35[2]);
      uint64_t v37 = (unsigned int *)v33[5];
      unsigned int v38 = bswap32(v37[2]);
      if (v36 >= (int)(v38 - 1) && v36 <= (int)(v38 + 1))
      {
        BOOL v34 = 0;
        signed int v39 = bswap32(v35[3]);
        unsigned int v40 = bswap32(v37[3]);
        if (v39 >= (int)(v40 - 1) && v39 <= (int)(v40 + 1))
        {
          signed int v41 = bswap32(v35[4]);
          unsigned int v42 = bswap32(v37[4]);
          signed int v43 = v42 - 1;
          signed int v44 = v42 + 1;
          BOOL v34 = v41 >= v43 && v41 <= v44;
        }
      }
      (*(void (**)(void *))(*v32 + 8))(v32);
      (*(void (**)(void *))(*v33 + 8))(v33);
      CMMMemMgr::ReleaseMemList((void **)&v53);
      uint64_t Tag = v34;
LABEL_71:
      if (v15 <= 4)
      {
        ++v15;
        if (Tag) {
          continue;
        }
      }
      goto LABEL_75;
    }
    CFStringRef v25 = (unsigned int *)CFDataGetBytePtr((CFDataRef)Tag);
    CFIndex v26 = CFDataGetLength((CFDataRef)Tag);
    uint64_t Tag = 0;
    if (!v25) {
      goto LABEL_75;
    }
    uint64_t v27 = v26;
    if (!v26) {
      goto LABEL_75;
    }
    uint64_t v57 = 0;
    CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v57);
    unsigned int v28 = bswap32(*v25);
    if (v28 == 1668641398)
    {
      CFStringRef v29 = (CMMCurveTag *)CMMBase::NewInternal(0x38uLL, (void **)&v57);
      CMMCurveTag::CMMCurveTag(v29, 0, (uint64_t)v25, v27, 0);
    }
    else
    {
      if (v28 != 1885434465)
      {
        uint64_t Tag = 0;
LABEL_70:
        CMMMemMgr::ReleaseMemList(&v57);
        goto LABEL_71;
      }
      CFStringRef v29 = (CMMCurveTag *)CMMBase::NewInternal(0x80uLL, (void **)&v57);
      CMMParaCurveTag::CMMParaCurveTag(v29, 0, (uint64_t)v25, v27, 0);
    }
    uint64_t v56 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v53 = 0u;
    LODWORD(v53) = 1;
    int v46 = (void *)(*(uint64_t (**)(CMMCurveTag *, long long *, void **, void, float))(*(void *)v29 + 64))(v29, &v53, &v57, 0, 1.0);
    if (v46)
    {
      uint64_t Tag = DWORD1(v53) == 2;
      uint64_t v47 = v46[1];
      if (v47)
      {
        uint64_t v48 = v47 - 1;
        v46[1] = v48;
        if (!v48) {
          (*(void (**)(void *))(*v46 + 8))(v46);
        }
      }
    }
    else
    {
      uint64_t Tag = 0;
    }
    uint64_t v49 = v54;
    if ((void)v54)
    {
      uint64_t v50 = *(void *)(v54 + 8);
      if (v50)
      {
        uint64_t v51 = v50 - 1;
        *(void *)(v54 + 8) = v51;
        if (!v51) {
          (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
        }
      }
    }
    (*(void (**)(CMMCurveTag *))(*(void *)v29 + 8))(v29);
    goto LABEL_70;
  }
  CFRelease(v14);
  if (v11) {
    CFRelease(v11);
  }
  uint64_t Tag = 1;
  if (v5) {
    goto LABEL_78;
  }
  return Tag;
}

void sub_18BE2F0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  CMMMemMgr::ReleaseMemList((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMXYZTag::CMMXYZTag(uint64_t a1, CFDataRef theData)
{
  vm_address_t BytePtr = CFDataGetBytePtr(theData);
  unint64_t Length = CFDataGetLength(theData);
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = Length;
  *(void *)(a1 + 40) = BytePtr;
  *(_WORD *)(a1 + 48) = 0;
  *(void *)a1 = &unk_1ED985610;
  if (Length >= 0x14) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 4294967126;
  }
  CMMThrowExceptionOnError(v6);
  return a1;
}

void sub_18BE2F15C(_Unwind_Exception *a1)
{
  CMMTag::~CMMTag(v1);
  _Unwind_Resume(a1);
}

CFTypeRef ColorSyncProfileCopyASCIIDescriptionString(CFTypeRef result)
{
  if (!result) {
    return result;
  }
  CFTypeRef v1 = result;
  CFTypeID v2 = CFGetTypeID(result);
  if (ColorSyncProfileGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
  }
  if (v2 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID) {
    return 0;
  }
  double result = (CFTypeRef)*((void *)v1 + 11);
  if (!result) {
    return result;
  }
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)result, @"desc");
  if (Value
    && ((CFDataRef v4 = Value, v5 = CFGetTypeID(Value), v5 != CFStringGetTypeID())
     || (CFDataRef v4 = (const __CFData *)CFDictionaryGetValue(*((CFDictionaryRef *)v1 + 11), v4)) != 0)
    && (CFTypeID v6 = CFGetTypeID(v4), v6 == CFDataGetTypeID())
    && CFDataGetLength(v4) >= 9
    && (BOOL v7 = (unsigned int *)CFDataGetBytePtr(v4)) != 0)
  {
    if (*v7 == 1668506980)
    {
      unsigned int v8 = 1684370275;
      vm_address_t BytePtr = CFDataGetBytePtr(v4);
      unint64_t Length = CFDataGetLength(v4);
      if (Length >= 0xD)
      {
        unsigned int v11 = *((_DWORD *)BytePtr + 2);
        if (v11)
        {
          CFIndex v12 = bswap32(v11);
          if (Length >= v12 + 12)
          {
            double result = CFStringCreateWithBytes(0, BytePtr + 12, v12, 0x600u, 0);
            if (result) {
              return result;
            }
          }
        }
      }
    }
    else
    {
      unsigned int v8 = bswap32(*v7);
    }
  }
  else
  {
    unsigned int v8 = 0;
  }
  CFStringRef v13 = CFDictionaryGetValue(*((CFDictionaryRef *)v1 + 11), @"dscm");
  if (v13)
  {
    CFStringRef v14 = v13;
    CFTypeID v15 = CFGetTypeID(v13);
    if (v15 != CFStringGetTypeID() || (CFStringRef v14 = CFDictionaryGetValue(*((CFDictionaryRef *)v1 + 11), v14)) != 0)
    {
      CFTypeID v16 = CFGetTypeID(v14);
      if (v16 == CFDataGetTypeID() && CFDataGetLength((CFDataRef)v14) >= 9)
      {
        if (CFDataGetBytePtr((CFDataRef)v14)) {
          unsigned int v8 = bswap32(*(_DWORD *)CFDataGetBytePtr((CFDataRef)v14));
        }
        if (v8 == 1835824483)
        {
          double result = copy_description_from_DSCMTag((const __CFData *)v14, 0, 0);
          if (result) {
            return result;
          }
          unsigned int v8 = 1835824483;
        }
        else
        {
          unsigned int v8 = 0;
        }
      }
    }
  }
  CFDataRef v17 = CFDictionaryGetValue(*((CFDictionaryRef *)v1 + 11), @"desc");
  if (v17)
  {
    CFDataRef v18 = v17;
    CFTypeID v19 = CFGetTypeID(v17);
    if (v19 != CFStringGetTypeID() || (CFDataRef v18 = CFDictionaryGetValue(*((CFDictionaryRef *)v1 + 11), v18)) != 0)
    {
      CFTypeID v20 = CFGetTypeID(v18);
      if (v20 == CFDataGetTypeID() && CFDataGetLength((CFDataRef)v18) >= 9)
      {
        CFTypeRef v21 = (unsigned int *)CFDataGetBytePtr((CFDataRef)v18);
        if (v21) {
          unsigned int v8 = bswap32(*v21);
        }
      }
      if (v8 == 1684370275)
      {
        double result = copy_descriptionFromDESCTag((const __CFData *)v18, 0, 0);
      }
      else
      {
        if (v8 != 1835824483)
        {
LABEL_45:
          size_t v22 = kColorSyncBadDescription;
          goto LABEL_46;
        }
        double result = copy_description_from_DSCMTag((const __CFData *)v18, 0, 0);
      }
      if (result) {
        return result;
      }
      goto LABEL_45;
    }
  }
  size_t v22 = kColorSyncMissingDescription;
LABEL_46:
  BOOL v23 = *v22;

  return CFRetain(v23);
}

CFStringRef ColorSyncProfileCopyDescriptionString(ColorSyncProfileRef prof)
{
  return (CFStringRef)ColorSyncProfileCopyLocalizedDescriptionString(prof, 0, 0);
}

CFTypeRef ColorSyncProfileCopyLocalizedDescriptionString(CFTypeRef result, unsigned int a2, unsigned int a3)
{
  if (result)
  {
    CFTypeRef v5 = result;
    CFTypeID v6 = CFGetTypeID(result);
    if (ColorSyncProfileGetTypeID_predicate != -1) {
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
    }
    if (v6 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID) {
      return 0;
    }
    double result = (CFTypeRef)*((void *)v5 + 11);
    if (result)
    {
      if ((BOOL v7 = CFDictionaryGetValue((CFDictionaryRef)result, @"dscm")) == 0
        || (unsigned int v8 = v7, v9 = CFGetTypeID(v7), v9 == CFStringGetTypeID())
        && (unsigned int v8 = CFDictionaryGetValue(*((CFDictionaryRef *)v5 + 11), v8)) == 0
        || (CFTypeID v10 = CFGetTypeID(v8), v10 != CFDataGetTypeID())
        || CFDataGetLength((CFDataRef)v8) < 9
        || !CFDataGetBytePtr((CFDataRef)v8)
        || *(_DWORD *)CFDataGetBytePtr((CFDataRef)v8) != 1668639853
        || (double result = copy_description_from_DSCMTag((const __CFData *)v8, a2, a3)) == 0)
      {
        CFDataRef Value = CFDictionaryGetValue(*((CFDictionaryRef *)v5 + 11), @"desc");
        if (!Value
          || (CFIndex v12 = Value, v13 = CFGetTypeID(Value), v13 == CFStringGetTypeID())
          && (CFIndex v12 = CFDictionaryGetValue(*((CFDictionaryRef *)v5 + 11), v12)) == 0)
        {
          CFDataRef v17 = kColorSyncMissingDescription;
LABEL_29:
          CFStringRef v18 = *v17;
          return copyLoacalizedStringFromResources(v18, 1);
        }
        CFTypeID v14 = CFGetTypeID(v12);
        if (v14 == CFDataGetTypeID() && CFDataGetLength((CFDataRef)v12) >= 9)
        {
          vm_address_t BytePtr = (unsigned int *)CFDataGetBytePtr((CFDataRef)v12);
          if (BytePtr)
          {
            unsigned int v16 = bswap32(*BytePtr);
            if (v16 == 1684370275)
            {
              double result = copy_descriptionFromDESCTag((const __CFData *)v12, a2, a3);
LABEL_27:
              if (result) {
                return result;
              }
              goto LABEL_28;
            }
            if (v16 == 1835824483)
            {
              double result = copy_description_from_DSCMTag((const __CFData *)v12, a2, a3);
              goto LABEL_27;
            }
          }
        }
LABEL_28:
        CFDataRef v17 = kColorSyncBadDescription;
        goto LABEL_29;
      }
    }
  }
  return result;
}

CFTypeRef copy_description_from_DSCMTag(const __CFData *a1, int a2, int a3)
{
  if ((unint64_t)CFDataGetLength(a1) >= 0x11)
  {
    int v6 = a3 | a2;
    if (!(a3 | a2) || (BOOL v7 = (const void *)CFBundleCopyLocalizationForLocalizationInfo()) == 0) {
      BOOL v7 = CFRetain(@"en_US");
    }
    unsigned int v8 = copy_description_dict_from_DSCMTag(a1);
    if (!v8)
    {
      CFTypeRef v11 = 0;
      goto LABEL_11;
    }
    CFTypeID v9 = v8;
    CFDataRef Value = CFDictionaryGetValue(v8, v7);
    if (Value)
    {
      CFTypeRef v11 = Value;
      CFRetain(Value);
LABEL_8:
      CFRelease(v9);
LABEL_11:
      CFRelease(v7);
      return v11;
    }
    CFStringRef v13 = (const __CFString *)CFDictionaryGetValue(v9, @"en_US");
    CFStringRef v14 = v13;
    if (v6)
    {
      if (v13)
      {
        CFTypeRef v11 = copyLoacalizedStringFromResources(v13, 0);
        if (v11) {
          goto LABEL_8;
        }
      }
    }
    CFTypeID v15 = (const void *)CFBundleCopyLocalizationForLocalizationInfo();
    if (!v15) {
      CFTypeID v15 = CFRetain(@"en_US");
    }
    CFIndex v26 = v15;
    uint64_t v27 = 0;
    CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)findDescByLanguage, &v26);
    unsigned int v16 = v27;
    CFRelease(v15);
    if (v16)
    {
      CFTypeRef v11 = CFRetain(v16);
      if (v11) {
        goto LABEL_8;
      }
    }
    CFTypeID v17 = CFGetTypeID(v9);
    if (v17 != CFDictionaryGetTypeID()) {
      goto LABEL_33;
    }
    CFIndex Count = CFDictionaryGetCount(v9);
    CFTypeRef v11 = (CFTypeRef)Count;
    if (Count)
    {
      CFTypeID v19 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
      if (!v19) {
        goto LABEL_33;
      }
      CFTypeID v20 = v19;
      CFDictionaryGetKeysAndValues(v9, v19, 0);
      CFArrayRef v21 = CFArrayCreate(0, v20, (CFIndex)v11, MEMORY[0x1E4F1D510]);
      CFTypeRef v11 = v21;
      if (v21)
      {
        CFArrayRef v22 = CFBundleCopyPreferredLocalizationsFromArray(v21);
        if (v22)
        {
          CFArrayRef v23 = v22;
          if (CFArrayGetCount(v22) < 1)
          {
            CFStringRef v25 = 0;
          }
          else
          {
            CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v23, 0);
            CFStringRef v25 = CFDictionaryGetValue(v9, ValueAtIndex);
          }
          CFRelease(v23);
        }
        else
        {
          CFStringRef v25 = 0;
        }
        CFRelease(v11);
        free(v20);
        if (v25)
        {
          CFTypeRef v11 = CFRetain(v25);
          goto LABEL_34;
        }
LABEL_33:
        CFTypeRef v11 = 0;
        goto LABEL_34;
      }
      free(v20);
    }
LABEL_34:
    if (v14 && !v11) {
      CFTypeRef v11 = CFRetain(v14);
    }
    goto LABEL_8;
  }
  return 0;
}

__CFDictionary *copy_description_dict_from_DSCMTag(const __CFData *a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  vm_address_t BytePtr = CFDataGetBytePtr(a1);
  unint64_t Length = CFDataGetLength(a1);
  if (Length < 0x1C) {
    return 0;
  }
  unsigned int v4 = *((_DWORD *)BytePtr + 2);
  if (!v4) {
    return 0;
  }
  unint64_t v5 = Length;
  unint64_t v6 = bswap32(v4);
  unint64_t v7 = 4 * (v6 + 2 * v6);
  if (v7 > Length - 8) {
    return 0;
  }
  if (v7 > Length - 12 || *((_DWORD *)BytePtr + 3) != 201326592) {
    return 0;
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v10 = 0;
    unint64_t v11 = v5;
    if (v6 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v6;
    }
    do
    {
      uint64_t v13 = (12 * v10);
      uint64_t v14 = v13 + 16;
      if (v11 < v13 + 28 || v14 > 0xFFFFFFF2) {
        goto LABEL_48;
      }
      unsigned int v16 = &BytePtr[v14];
      unsigned int v17 = *((_DWORD *)v16 + 1);
      unsigned int v18 = bswap32(v17);
      uint64_t v19 = bswap32(*((_DWORD *)v16 + 2));
      BOOL v20 = v17 && v5 >= v19 + v18;
      if (!v20 || v19 >= ~v18) {
        goto LABEL_48;
      }
      int v22 = *((unsigned __int16 *)v16 + 1);
      UniChar v23 = *(_WORD *)v16;
      int v40 = 0;
      UniChar chars = v23;
      if (v22)
      {
        LOBYTE(v40) = 95;
        *(_WORD *)((char *)&v40 + 1) = v22;
      }
      CFStringRef v24 = CFStringCreateWithFormat(0, 0, @"%s", &chars);
      CFStringRef v25 = v24;
      if (v18 > 1)
      {
        CFIndex v26 = &BytePtr[v19];
        int v27 = *(unsigned __int16 *)v26;
        LODWORD(v28) = v18 >> 1;
        bzero(&chars, 0x802uLL);
        if (v28 >= 0x400) {
          CFIndex v28 = 1024;
        }
        else {
          CFIndex v28 = v28;
        }
        if (v27 == 65279)
        {
          --v28;
          __memcpy_chk();
          unint64_t v11 = v5;
        }
        else if (v27 == 65534)
        {
          --v28;
          unint64_t v11 = v5;
          if (v28)
          {
            CFStringRef v29 = &BytePtr[v19 + 2];
            p_UniChar chars = &chars;
            CFIndex v31 = v28;
            do
            {
              unsigned int v32 = *(unsigned __int16 *)v29;
              v29 += 2;
              *p_chars++ = bswap32(v32) >> 16;
              --v31;
            }
            while (v31);
          }
        }
        else
        {
          CFStringRef v33 = &chars;
          CFIndex v34 = v28;
          unint64_t v11 = v5;
          do
          {
            unsigned int v35 = *(unsigned __int16 *)v26;
            v26 += 2;
            *v33++ = bswap32(v35) >> 16;
            --v34;
          }
          while (v34);
        }
        CFStringRef v36 = CFStringCreateWithCharacters(0, &chars, v28);
        CFStringRef v37 = v36;
        if (v25 && v36)
        {
          CFDictionarySetValue(Mutable, v25, v36);
          CFRelease(v25);
          CFStringRef v25 = v37;
        }
        else
        {
          if (v25) {
            CFRelease(v25);
          }
          CFStringRef v25 = v37;
          if (!v37) {
            goto LABEL_48;
          }
        }
      }
      else if (!v24)
      {
        goto LABEL_48;
      }
      CFRelease(v25);
LABEL_48:
      ++v10;
    }
    while (v10 != v12);
  }
  if (!CFDictionaryGetCount(Mutable))
  {
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

CFTypeRef create_ROMMRGBProfile()
{
  if (create_ROMMRGBProfile_predicate != -1) {
    dispatch_once(&create_ROMMRGBProfile_predicate, &__block_literal_global_232);
  }
  CFDataRef v0 = (const void *)create_ROMMRGBProfile_profile;

  return CFRetain(v0);
}

CFDataRef __getAdobeRGBData_block_invoke()
{
  if (getAdobeRGBProfile_predicate != -1) {
    dispatch_once(&getAdobeRGBProfile_predicate, &__block_literal_global_550);
  }
  CFDataRef result = ColorSyncProfileCopyData((ColorSyncProfileRef)getAdobeRGBProfile_adobeRGB, 0);
  getAdobeRGBData_adobeRGBCFDataRef Data = (uint64_t)result;
  return result;
}

BOOL verify_BT709_PQ(ColorSyncProfileRef a1)
{
  if (bt709PQ_CICP_tag_predicate != -1) {
    dispatch_once(&bt709PQ_CICP_tag_predicate, &__block_literal_global_596);
  }
  CFDataRef v2 = (const __CFData *)bt709PQ_CICP_tag_cicp;
  if (pre_cicp_BT709_PQProfile_predicate != -1) {
    dispatch_once(&pre_cicp_BT709_PQProfile_predicate, &__block_literal_global_599);
  }
  uint64_t v3 = pre_cicp_BT709_PQProfile_profile;

  return verify_hdr(a1, 0, v2, v3, 1, 0);
}

BOOL verify_BT709_HLG(ColorSyncProfileRef a1)
{
  if (bt709HLG_CICP_tag_predicate != -1) {
    dispatch_once(&bt709HLG_CICP_tag_predicate, &__block_literal_global_602);
  }
  CFDataRef v2 = (const __CFData *)bt709HLG_CICP_tag_cicp;
  if (pre_cicp_ITUR709_HLGProfile_predicate != -1) {
    dispatch_once(&pre_cicp_ITUR709_HLGProfile_predicate, &__block_literal_global_605);
  }
  uint64_t v3 = pre_cicp_ITUR709_HLGProfile_profile;

  return verify_hdr(a1, 0, v2, v3, 1, 0);
}

BOOL verify_BT2100_PQ(ColorSyncProfileRef a1)
{
  if (bt2100PQ_CICP_tag_predicate[0] != -1) {
    dispatch_once(bt2100PQ_CICP_tag_predicate, &__block_literal_global_611);
  }
  CFDataRef v2 = (const __CFData *)bt2100PQ_CICP_tag_cicp;
  if (pre_cicp_BT2100PQProfile_predicate != -1) {
    dispatch_once(&pre_cicp_BT2100PQProfile_predicate, &__block_literal_global_614);
  }
  uint64_t v3 = pre_cicp_BT2100PQProfile_profile;

  return verify_hdr(a1, 0, v2, v3, 1, 0);
}

ColorSyncProfile *makeDisplayRGB()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  CFDictionaryRef v2 = v1;
  uint64_t v3 = v0;
  uint64_t v423 = *MEMORY[0x1E4F143B8];
  uint64_t v408 = 0;
  long long v406 = 0u;
  long long v407 = 0u;
  *(_OWORD *)v405 = 0u;
  long long v403 = 0u;
  memset(v404, 0, sizeof(v404));
  long long v401 = 0u;
  long long v402 = 0u;
  long long v399 = 0u;
  long long v400 = 0u;
  LODWORD(v408) = *(_DWORD *)(v0 + 8);
  CFNumberRef v4 = longFromDictionary(v1, @"whiteTemp");
  if (v4)
  {
    if ((xyFromTemp((unsigned __int16)v4, (double *)&v402, (double *)&v402 + 1) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    *(void *)&long long v402 = doubleFromDictionary(v2, @"whitePointx");
    double v5 = doubleFromDictionary(v2, @"whitePointy");
    unint64_t v6 = 0;
    *((double *)&v402 + 1) = v5;
    if (*(double *)&v402 == 0.0 || v5 == 0.0) {
      return v6;
    }
  }
  if (CFDictionaryContainsKey(v2, @"phosphorSet"))
  {
    CFDataRef Value = CFDictionaryGetValue(v2, @"phosphorSet");
    if (!Value) {
      return 0;
    }
    unsigned int v8 = Value;
    CFTypeID v9 = CFGetTypeID(Value);
    if (v9 != CFStringGetTypeID()) {
      return 0;
    }
    int v10 = CFEqual(v8, @"P22-EBU");
    long long v11 = xmmword_18BE63380;
    long long v12 = xmmword_18BE63390;
    long long v13 = xmmword_18BE633A0;
    if (!v10)
    {
      int v14 = CFEqual(v8, @"HDTV");
      long long v12 = xmmword_18BE63390;
      long long v13 = xmmword_18BE633A0;
      long long v11 = xmmword_18BE63380;
      if (!v14)
      {
        int v15 = CFEqual(v8, @"CCIR709");
        long long v11 = xmmword_18BE633B0;
        long long v12 = xmmword_18BE633C0;
        long long v13 = xmmword_18BE633D0;
        if (!v15)
        {
          if (CFEqual(v8, @"sRGB"))
          {
            long long v13 = xmmword_18BE633D0;
            long long v11 = xmmword_18BE633B0;
            long long v12 = xmmword_18BE633C0;
          }
          else if (CFEqual(v8, @"AdobeRGB98"))
          {
            long long v12 = xmmword_18BE633E0;
            long long v13 = xmmword_18BE633D0;
            long long v11 = xmmword_18BE633B0;
          }
          else
          {
            int v17 = CFEqual(v8, @"WideRGB");
            long long v11 = xmmword_18BE633F0;
            long long v12 = xmmword_18BE63400;
            long long v13 = xmmword_18BE63410;
            if (!v17)
            {
              int v18 = CFEqual(v8, @"700/525/450nm");
              long long v12 = xmmword_18BE63400;
              long long v13 = xmmword_18BE63410;
              long long v11 = xmmword_18BE633F0;
              if (!v18)
              {
                if (!CFEqual(v8, @"Trinitron")) {
                  return 0;
                }
                long long v11 = xmmword_18BE63420;
                long long v12 = xmmword_18BE63430;
                long long v13 = xmmword_18BE63440;
              }
            }
          }
        }
      }
    }
    long long v399 = v13;
    long long v400 = v12;
    long long v401 = v11;
  }
  else
  {
    unsigned int v16 = CFDictionaryGetValue(v2, @"skipPhosphorsCheck");
    if (!primariesFromDictionary(v2, (uint64_t)&v399)
      || v16 != (const void *)*MEMORY[0x1E4F1CFD0] && !checkPrimaries((double *)&v399))
    {
      return 0;
    }
  }
  BOOL v19 = CFDictionaryContainsKey(v2, @"paraR")
     && CFDictionaryContainsKey(v2, @"paraG")
     && CFDictionaryContainsKey(v2, @"paraB") != 0;
  BOOL v20 = CFDictionaryContainsKey(v2, @"tableR")
     && CFDictionaryContainsKey(v2, @"tableG")
     && CFDictionaryContainsKey(v2, @"tableB") != 0;
  CFArrayRef v21 = CFDictionaryGetValue(v2, @"sRGBGamma");
  int v22 = (const void *)*MEMORY[0x1E4F1CFD0];
  if (v21 == (const void *)*MEMORY[0x1E4F1CFD0])
  {
    BYTE9(v406) = 1;
    *(_OWORD *)((char *)v404 + 8) = ksRGBCurve;
    *(_OWORD *)((char *)&v404[1] + 8) = unk_18BE63AC8;
    *(_OWORD *)((char *)&v404[2] + 8) = xmmword_18BE63AD8;
    *(_OWORD *)((char *)&v404[3] + 8) = unk_18BE63AE8;
    *(_OWORD *)((char *)&v404[4] + 8) = ksRGBCurve;
    *(_OWORD *)((char *)&v404[5] + 8) = unk_18BE63AC8;
    *(_OWORD *)((char *)&v404[6] + 8) = xmmword_18BE63AD8;
    *(_OWORD *)((char *)&v404[7] + 8) = unk_18BE63AE8;
    *(_OWORD *)((char *)&v404[11] + 8) = unk_18BE63AE8;
    *(_OWORD *)((char *)&v404[8] + 8) = ksRGBCurve;
    *(_OWORD *)((char *)&v404[9] + 8) = unk_18BE63AC8;
    *(_OWORD *)((char *)&v404[10] + 8) = xmmword_18BE63AD8;
    goto LABEL_40;
  }
  if (v19)
  {
    BYTE9(v406) = 1;
    gammaCurveFromDictionary((uint64_t)v404 + 8, v2, @"paraR");
    gammaCurveFromDictionary((uint64_t)&v404[4] + 8, v2, @"paraG");
    gammaCurveFromDictionary((uint64_t)&v404[8] + 8, v2, @"paraB");
    unint64_t v6 = 0;
    if (WORD4(v404[0]) == 255 || WORD4(v404[4]) == 255 || WORD4(v404[8]) == 255) {
      return v6;
    }
    goto LABEL_40;
  }
  if (v20)
  {
    BYTE10(v406) = 1;
    uint64_t v61 = gammaTableFromDictionary(v2, @"tableR");
    uint64_t v63 = v62;
    *((void *)&v404[12] + 1) = v61;
    *(void *)&v404[13] = v62;
    uint64_t v64 = gammaTableFromDictionary(v2, @"tableG");
    uint64_t v66 = v65;
    *((void *)&v404[14] + 1) = v64;
    *(void *)&v404[15] = v65;
    *((void *)&v404[13] + 1) = gammaTableFromDictionary(v2, @"tableB");
    *(void *)&v404[14] = v67;
    if (v63)
    {
      unint64_t v6 = 0;
      if (!v66 || !v67) {
        return v6;
      }
      goto LABEL_40;
    }
    return 0;
  }
  gammaFromDictionary(v2, @"gammaR");
  double v72 = v71;
  *(double *)&long long v403 = v71;
  gammaFromDictionary(v2, @"gammaG");
  double v74 = v73;
  *((double *)&v403 + 1) = v73;
  gammaFromDictionary(v2, @"gammaB");
  unint64_t v6 = 0;
  *(double *)v404 = v75;
  if (v72 == 0.0 || v74 == 0.0 || v75 == 0.0) {
    return v6;
  }
LABEL_40:
  if (CFDictionaryContainsKey(v2, @"tableChans")
    || CFDictionaryContainsKey(v2, @"tableEntries")
    || CFDictionaryContainsKey(v2, @"tableEntrySize")
    || CFDictionaryContainsKey(v2, @"tableData"))
  {
    CFNumberRef v23 = longFromDictionary(v2, @"tableChans");
    if (((unint64_t)v23 & 0xFFFFFFFFFFFFFFFDLL) == 1)
    {
      CFNumberRef v24 = v23;
      CFNumberRef v25 = longFromDictionary(v2, @"tableEntries");
      if ((unint64_t)v25 - 2 <= 0x3FE)
      {
        CFNumberRef v26 = v25;
        CFNumberRef v27 = longFromDictionary(v2, @"tableEntrySize");
        if ((unint64_t)v27 - 1 <= 1)
        {
          CFNumberRef v28 = v27;
          CFDataRef v29 = (const __CFData *)CFDictionaryGetValue(v2, @"tableData");
          if (v29)
          {
            CFDataRef v30 = v29;
            CFTypeID v31 = CFGetTypeID(v29);
            if (v31 == CFDataGetTypeID() && CFDataGetLength(v30) >= (void)v26 * (void)v24 * (void)v28)
            {
              WORD4(v404[15]) = (_WORD)v24;
              WORD5(v404[15]) = (_WORD)v26;
              WORD6(v404[15]) = (_WORD)v28;
              v405[0] = (void *)CFDataGetBytePtr(v30);
            }
          }
        }
      }
    }
  }
  *(void *)&long long v406 = longFromDictionary(v2, @"targetWhite");
  gammaFromDictionary(v2, @"targetGamma");
  v405[1] = v32;
  BYTE11(v406) = 1;
  if (CFDictionaryContainsKey(v2, @"slopeLimitGamma"))
  {
    CFStringRef v33 = CFDictionaryGetValue(v2, @"slopeLimitGamma");
    if (v33)
    {
      CFIndex v34 = v33;
      CFTypeID v35 = CFGetTypeID(v33);
      if (v35 == CFBooleanGetTypeID())
      {
        if (CFEqual(v34, v22)) {
          BYTE11(v406) = 0;
        }
      }
    }
  }
  if (CFDictionaryContainsKey(v2, @"noVCGT"))
  {
    CFStringRef v36 = CFDictionaryGetValue(v2, @"noVCGT");
    if (v36)
    {
      CFStringRef v37 = v36;
      CFTypeID v38 = CFGetTypeID(v36);
      if (v38 == CFBooleanGetTypeID())
      {
        if (CFEqual(v37, v22)) {
          BYTE13(v406) = 1;
        }
      }
    }
  }
  if (CFDictionaryContainsKey(v2, @"noNDIN"))
  {
    signed int v39 = CFDictionaryGetValue(v2, @"noNDIN");
    if (v39)
    {
      int v40 = v39;
      CFTypeID v41 = CFGetTypeID(v39);
      if (v41 == CFBooleanGetTypeID())
      {
        if (CFEqual(v40, v22)) {
          BYTE14(v406) = 1;
        }
      }
    }
  }
  if (CFDictionaryContainsKey(v2, @"noParametricVCGT"))
  {
    unsigned int v42 = CFDictionaryGetValue(v2, @"noParametricVCGT");
    if (v42)
    {
      signed int v43 = v42;
      CFTypeID v44 = CFGetTypeID(v42);
      if (v44 == CFBooleanGetTypeID())
      {
        if (CFEqual(v43, v22)) {
          HIBYTE(v406) = 1;
        }
      }
    }
  }
  if (CFDictionaryContainsKey(v2, @"allowLargeVCGT"))
  {
    uint64_t v45 = CFDictionaryGetValue(v2, @"allowLargeVCGT");
    if (v45)
    {
      int v46 = v45;
      CFTypeID v47 = CFGetTypeID(v45);
      if (v47 == CFBooleanGetTypeID())
      {
        if (CFEqual(v46, v22)) {
          LOBYTE(v407) = 1;
        }
      }
    }
  }
  uint64_t v48 = (ColorSyncProfile *)create(0, 1, 0);
  unint64_t v6 = v48;
  if (!v48) {
    goto LABEL_568;
  }
  qmemcpy((void *)(v3 + 12), "rtnm BGR ZYX", 12);
  ColorSyncProfileSetPrimaries(v48, (uint64_t)&v399);
  *(_WORD *)&v411[4] = 0;
  *(_DWORD *)float v411 = 0;
  double v49 = *(double *)&v405[1];
  __asm { FMOV            V2.2D, #0.5 }
  if (_ZF && !BYTE9(v406))
  {
    unint64_t v54 = WORD4(v404[15]);
    if (WORD4(v404[15]) && BYTE8(v406))
    {
      *(_OWORD *)bytes = v403;
      *(void *)&bytes[16] = *(void *)&v404[0];
      long long v55 = (UInt8 *)v405[0];
      unint64_t v56 = WORD5(v404[15]);
      uint64_t v57 = WORD6(v404[15]);
      CFRange v58 = (double *)bytes;
      uint64_t v59 = v6;
      int v60 = 0;
LABEL_193:
      fillCurvTable(v59, (uint64_t)v55, v54, v56, v57, v58, v60);
      goto LABEL_219;
    }
    double v76 = *(double *)&v403;
    BOOL v77 = *(double *)v404 <= 1.8 && *((double *)&v403 + 1) <= 1.8;
    BOOL v78 = v77 && *(double *)&v403 <= 1.8;
    if (!v78 && !BYTE11(v406))
    {
      *(_OWORD *)v377 = _Q2;
      bzero(bytes, 0x1800uLL);
      *(double *)unint64_t v420 = v76;
      *(void *)&v420[8] = *((void *)&v403 + 1);
      *(void *)&v420[16] = *(void *)&v404[0];
      double v79 = 2.2;
      if (v76 >= 2.25 || (double v80 = 2.2, v76 <= 2.15))
      {
        if (v76 >= 1.85 || (double v80 = 1.8, v76 <= 1.75))
        {
          _NF = v76 > 0.95 && v76 < 1.05;
          double v80 = 1.0;
          if (!_NF) {
            double v80 = v76;
          }
        }
      }
      if (*((double *)&v403 + 1) >= 2.25 || (double v82 = 2.2, *((double *)&v403 + 1) <= 2.15))
      {
        if (*((double *)&v403 + 1) >= 1.85 || *((double *)&v403 + 1) <= 1.75)
        {
          BOOL v108 = *((double *)&v403 + 1) > 0.95 && *((double *)&v403 + 1) < 1.05;
          double v82 = 1.0;
          if (!v108) {
            double v82 = *((double *)&v403 + 1);
          }
        }
        else
        {
          double v82 = 1.8;
        }
      }
      if (*(double *)v404 >= 2.25 || *(double *)v404 <= 2.15)
      {
        if (*(double *)v404 >= 1.85 || *(double *)v404 <= 1.75)
        {
          BOOL v112 = *(double *)v404 > 0.95 && *(double *)v404 < 1.05;
          double v79 = 1.0;
          if (!v112) {
            double v79 = *(double *)v404;
          }
        }
        else
        {
          double v79 = 1.8;
        }
      }
      double v113 = 1.8;
      if (v80 > 1.8) {
        double v113 = (v80 + -1.8) * 0.6 / 0.4 + 1.8;
      }
      double v114 = 1.8;
      if (v82 > 1.8) {
        double v114 = (v82 + -1.8) * 0.6 / 0.4 + 1.8;
      }
      double v115 = 1.8;
      if (v79 > 1.8) {
        double v115 = (v79 + -1.8) * 0.6 / 0.4 + 1.8;
      }
      double v116 = 0.0;
      double v117 = 0.0;
      if (v80 > 1.8) {
        double v117 = (v80 + -1.8) * 0.0521327014 / 0.4;
      }
      if (v82 > 1.8) {
        double v116 = (v82 + -1.8) * 0.0521327014 / 0.4;
      }
      double v118 = 0.0;
      if (v79 > 1.8) {
        double v118 = (v79 + -1.8) * 0.0521327014 / 0.4;
      }
      uint64_t v119 = 0;
      double v348 = 1.0 - v118;
      double v346 = 1.0 - v117;
      double v347 = 1.0 - v116;
      float64x2_t v344 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v116, 0);
      float64x2_t v345 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v117, 0);
      float64x2_t v343 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v118, 0);
      uint64x2_t v120 = (uint64x2_t)xmmword_18BE63450;
      uint64x2_t v121 = (uint64x2_t)xmmword_18BE63460;
      uint64x2_t v122 = (uint64x2_t)xmmword_18BE63470;
      uint64x2_t v123 = (uint64x2_t)xmmword_18BE63480;
      do
      {
        int64x2_t v358 = (int64x2_t)v123;
        int64x2_t v388 = (int64x2_t)v122;
        int64x2_t v392 = (int64x2_t)v121;
        int64x2_t __yb = (int64x2_t)v120;
        float64x2_t v124 = vcvtq_f64_u64(v123);
        float64x2_t v125 = vcvtq_f64_u64(v122);
        float64x2_t v126 = vcvtq_f64_u64(v121);
        float64x2_t v127 = vcvtq_f64_u64(v120);
        float64x2_t v128 = (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL);
        float64x2_t v364 = vaddq_f64(v345, vdivq_f64(vmulq_n_f64(v127, v346), v128));
        float64x2_t v362 = vaddq_f64(v345, vdivq_f64(vmulq_n_f64(v126, v346), v128));
        float64x2_t v360 = vaddq_f64(v345, vdivq_f64(vmulq_n_f64(v125, v346), v128));
        float64x2_t v353 = vaddq_f64(v345, vdivq_f64(vmulq_n_f64(v124, v346), v128));
        float64x2_t v373 = vaddq_f64(v344, vdivq_f64(vmulq_n_f64(v127, v347), v128));
        float64x2_t v371 = vaddq_f64(v344, vdivq_f64(vmulq_n_f64(v126, v347), v128));
        float64x2_t v367 = vaddq_f64(v344, vdivq_f64(vmulq_n_f64(v124, v347), v128));
        float64x2_t v369 = vaddq_f64(v344, vdivq_f64(vmulq_n_f64(v125, v347), v128));
        *(float64x2_t *)profb = vaddq_f64(v343, vdivq_f64(vmulq_n_f64(v126, v348), v128));
        float64x2_t v385 = vaddq_f64(v343, vdivq_f64(vmulq_n_f64(v127, v348), v128));
        float64x2_t __xa = vaddq_f64(v343, vdivq_f64(vmulq_n_f64(v125, v348), v128));
        *(float64x2_t *)lengtha = vaddq_f64(v343, vdivq_f64(vmulq_n_f64(v124, v348), v128));
        long double v355 = pow(v353.f64[0], v113);
        v353.f64[0] = pow(v353.f64[1], v113);
        long double v351 = pow(v360.f64[0], v113);
        v360.f64[0] = pow(v360.f64[1], v113);
        long double v350 = pow(v362.f64[0], v113);
        v362.f64[0] = pow(v362.f64[1], v113);
        long double v349 = pow(v364.f64[0], v113);
        long double v129 = pow(v364.f64[1], v113);
        v131.f64[0] = v349;
        v130.f64[0] = v350;
        v131.f64[1] = v129;
        v130.f64[1] = v362.f64[0];
        v132.f64[0] = v351;
        v132.f64[1] = v360.f64[0];
        v133.f64[0] = v355;
        v133.f64[1] = v353.f64[0];
        float64x2_t v365 = (float64x2_t)vdupq_n_s64(0x40EFFFE000000000uLL);
        uint64_t v134 = (int16x8_t *)&bytes[v119];
        *(int16x8_t *)&bytes[v119] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)v377, v365, v133))), (int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)v377, v365, v132)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)v377, v365, v130))), (int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)v377, v365, v131)))));
        v362.f64[0] = pow(v367.f64[0], v114);
        v367.f64[0] = pow(v367.f64[1], v114);
        v360.f64[0] = pow(v369.f64[0], v114);
        v369.f64[0] = pow(v369.f64[1], v114);
        long double v356 = pow(v371.f64[0], v114);
        v371.f64[0] = pow(v371.f64[1], v114);
        v353.f64[0] = pow(v373.f64[0], v114);
        long double v135 = pow(v373.f64[1], v114);
        v137.f64[0] = v353.f64[0];
        v136.f64[0] = v356;
        v137.f64[1] = v135;
        v136.f64[1] = v371.f64[0];
        v139.f64[0] = v360.f64[0];
        v138.f64[0] = v362.f64[0];
        v139.f64[1] = v369.f64[0];
        v138.f64[1] = v367.f64[0];
        v134[128] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)v377, v365, v138))), (int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)v377, v365, v139)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)v377, v365, v136))), (int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)v377, v365, v137)))));
        v373.f64[0] = pow(*(long double *)lengtha, v115);
        lengtha[0] = pow(*(long double *)&lengtha[1], v115);
        v371.f64[0] = pow(__xa.f64[0], v115);
        __xa.f64[0] = pow(__xa.f64[1], v115);
        v369.f64[0] = pow(*(long double *)profb, v115);
        profb[0] = COERCE_COLORSYNCMUTABLEPROFILEREF(pow(*(long double *)&profb[1], v115));
        v367.f64[0] = pow(v385.f64[0], v115);
        long double v140 = pow(v385.f64[1], v115);
        v142.f64[0] = v367.f64[0];
        v141.f64[0] = v369.f64[0];
        v142.f64[1] = v140;
        *(ColorSyncMutableProfileRef *)&v141.f64[1] = profb[0];
        v144.f64[0] = v371.f64[0];
        v143.f64[0] = v373.f64[0];
        v144.f64[1] = __xa.f64[0];
        *(void *)&v143.f64[1] = lengtha[0];
        v134[256] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)v377, v365, v143))), (int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)v377, v365, v144)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)v377, v365, v141))), (int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)v377, v365, v142)))));
        int64x2_t v145 = vdupq_n_s64(8uLL);
        uint64x2_t v121 = (uint64x2_t)vaddq_s64(v392, v145);
        uint64x2_t v122 = (uint64x2_t)vaddq_s64(v388, v145);
        uint64x2_t v123 = (uint64x2_t)vaddq_s64(v358, v145);
        uint64x2_t v120 = (uint64x2_t)vaddq_s64(__yb, v145);
        v119 += 16;
      }
      while (v119 != 2048);
      long long v55 = bytes;
      CFRange v58 = (double *)v420;
      uint64_t v59 = v6;
      unint64_t v54 = 3;
      goto LABEL_192;
    }
    double v93 = *(double *)&v403 * 256.0;
    if (*(double *)&v403 * 256.0 <= 0.0)
    {
      if (*(double *)&v403 * 256.0 >= 0.0) {
        goto LABEL_146;
      }
      double v94 = -0.5;
    }
    else
    {
      double v94 = 0.5;
    }
    double v93 = v93 + v94;
LABEL_146:
    if (v93 >= 32767.0)
    {
      LOWORD(v105) = 0x7FFF;
    }
    else if (v93 <= -32768.0)
    {
      LOWORD(v105) = 0x8000;
    }
    else
    {
      int v105 = (int)v93;
    }
    *(_WORD *)float v411 = v105;
    double v109 = *((double *)&v403 + 1) * 256.0;
    if (*((double *)&v403 + 1) * 256.0 <= 0.0)
    {
      if (*((double *)&v403 + 1) * 256.0 >= 0.0) {
        goto LABEL_168;
      }
      double v110 = -0.5;
    }
    else
    {
      double v110 = 0.5;
    }
    double v109 = v109 + v110;
LABEL_168:
    if (v109 >= 32767.0)
    {
      LOWORD(v111) = 0x7FFF;
    }
    else if (v109 <= -32768.0)
    {
      LOWORD(v111) = 0x8000;
    }
    else
    {
      int v111 = (int)v109;
    }
    *(_WORD *)&v411[2] = v111;
    double v146 = *(double *)v404 * 256.0;
    if (*(double *)v404 * 256.0 <= 0.0)
    {
      if (*(double *)v404 * 256.0 >= 0.0)
      {
LABEL_200:
        if (v146 >= 32767.0)
        {
          LOWORD(v148) = 0x7FFF;
        }
        else if (v146 <= -32768.0)
        {
          LOWORD(v148) = 0x8000;
        }
        else
        {
          int v148 = (int)v146;
        }
        *(_WORD *)&v411[4] = v148;
        goto LABEL_215;
      }
      double v147 = -0.5;
    }
    else
    {
      double v147 = 0.5;
    }
    double v146 = v146 + v147;
    goto LABEL_200;
  }
  double v69 = 1.8;
  if (*(double *)&v405[1] > 1.8 && !BYTE11(v406) && !BYTE9(v406))
  {
    *(_OWORD *)v376 = _Q2;
    bzero(bytes, 0x800uLL);
    *(double *)unint64_t v420 = v49;
    *(double *)&v420[8] = v49;
    *(double *)&v420[16] = v49;
    if (v49 >= 2.25 || v49 <= 2.15)
    {
      double v70 = 0.0;
      if (v49 < 1.85 && v49 > 1.75 || v49 < 1.05 && v49 > 0.95) {
        goto LABEL_129;
      }
    }
    else
    {
      double v49 = 2.2;
    }
    double v69 = (v49 + -1.8) * 0.6 / 0.4 + 1.8;
    double v70 = (v49 + -1.8) * 0.0521327014 / 0.4;
LABEL_129:
    uint64_t v83 = 0;
    double v361 = 1.0 - v70;
    uint64x2_t v84 = (uint64x2_t)xmmword_18BE63450;
    uint64x2_t v85 = (uint64x2_t)xmmword_18BE63460;
    uint64x2_t v86 = (uint64x2_t)xmmword_18BE63470;
    uint64x2_t v87 = (uint64x2_t)xmmword_18BE63480;
    float64x2_t v357 = (float64x2_t)vdupq_n_s64(0x40EFFFE000000000uLL);
    float64x2_t v359 = (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL);
    float64x2_t v352 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v70, 0);
    int64x2_t v354 = vdupq_n_s64(8uLL);
    do
    {
      int64x2_t length = (int64x2_t)v87;
      int64x2_t v387 = (int64x2_t)v86;
      int64x2_t v391 = (int64x2_t)v85;
      int64x2_t __ya = (int64x2_t)v84;
      *(float64x2_t *)profa = vaddq_f64(v352, vdivq_f64(vmulq_n_f64(vcvtq_f64_u64(v85), v361), v359));
      float64x2_t v384 = vaddq_f64(v352, vdivq_f64(vmulq_n_f64(vcvtq_f64_u64(v84), v361), v359));
      float64x2_t __x = vaddq_f64(v352, vdivq_f64(vmulq_n_f64(vcvtq_f64_u64(v86), v361), v359));
      float64x2_t v370 = vaddq_f64(v352, vdivq_f64(vmulq_n_f64(vcvtq_f64_u64(v87), v361), v359));
      long double v372 = pow(v370.f64[0], v69);
      v370.f64[0] = pow(v370.f64[1], v69);
      long double v368 = pow(__x.f64[0], v69);
      __x.f64[0] = pow(__x.f64[1], v69);
      long double v366 = pow(*(long double *)profa, v69);
      profa[0] = COERCE_COLORSYNCMUTABLEPROFILEREF(pow(*(long double *)&profa[1], v69));
      long double v363 = pow(v384.f64[0], v69);
      long double v88 = pow(v384.f64[1], v69);
      v89.f64[0] = v372;
      v91.f64[0] = v363;
      v90.f64[0] = v366;
      v91.f64[1] = v88;
      *(ColorSyncMutableProfileRef *)&v90.f64[1] = profa[0];
      v92.f64[0] = v368;
      v92.f64[1] = __x.f64[0];
      v89.f64[1] = v370.f64[0];
      *(int16x8_t *)&bytes[v83] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)v376, v357, v89))), (int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)v376, v357, v92)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)v376, v357, v90))), (int32x4_t)vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(*(float64x2_t *)v376, v357, v91)))));
      uint64x2_t v85 = (uint64x2_t)vaddq_s64(v391, v354);
      uint64x2_t v86 = (uint64x2_t)vaddq_s64(v387, v354);
      uint64x2_t v87 = (uint64x2_t)vaddq_s64(length, v354);
      uint64x2_t v84 = (uint64x2_t)vaddq_s64(__ya, v354);
      v83 += 16;
    }
    while (v83 != 2048);
    long long v55 = bytes;
    CFRange v58 = (double *)v420;
    uint64_t v59 = v6;
    unint64_t v54 = 1;
LABEL_192:
    unint64_t v56 = 1024;
    uint64_t v57 = 2;
    int v60 = 1;
    goto LABEL_193;
  }
  if (BYTE9(v406))
  {
    ColorSyncProfileSetParametricTRCTag(v6, @"rTRC", WORD4(v404[0]), *(double *)&v404[1], *((double *)&v404[1] + 1), *(double *)&v404[2], *((double *)&v404[2] + 1), *(double *)&v404[3], *((double *)&v404[3] + 1), *(double *)&v404[4]);
    ColorSyncProfileSetParametricTRCTag(v6, @"gTRC", WORD4(v404[4]), *(double *)&v404[5], *((double *)&v404[5] + 1), *(double *)&v404[6], *((double *)&v404[6] + 1), *(double *)&v404[7], *((double *)&v404[7] + 1), *(double *)&v404[8]);
    ColorSyncProfileSetParametricTRCTag(v6, @"bTRC", WORD4(v404[8]), *(double *)&v404[9], *((double *)&v404[9] + 1), *(double *)&v404[10], *((double *)&v404[10] + 1), *(double *)&v404[11], *((double *)&v404[11] + 1), *(double *)&v404[12]);
    goto LABEL_219;
  }
  if (!BYTE10(v406))
  {
    double v106 = *(double *)&v405[1] * 256.0;
    if (*(double *)&v405[1] * 256.0 <= 0.0)
    {
      if (*(double *)&v405[1] * 256.0 >= 0.0)
      {
LABEL_209:
        if (v106 >= 32767.0)
        {
          LOWORD(v149) = 0x7FFF;
        }
        else if (v106 <= -32768.0)
        {
          LOWORD(v149) = 0x8000;
        }
        else
        {
          int v149 = (int)v106;
        }
        *(_WORD *)&v411[4] = v149;
        *(_WORD *)&v411[2] = v149;
        *(_WORD *)float v411 = v149;
LABEL_215:
        uint64_t v150 = 0;
        CFAllocatorRef v151 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
        do
        {
          *(void *)bytes = 1987212643;
          *(_DWORD *)&UInt8 bytes[8] = 0x1000000;
          *(_WORD *)&bytes[12] = bswap32(*(unsigned __int16 *)&v411[2 * v150]) >> 16;
          CFDataRef v152 = CFDataCreateWithBytesNoCopy(0, bytes, 14, v151);
          ColorSyncProfileSetTag(v6, off_1E54D7360[v150], v152);
          if (v152) {
            CFRelease(v152);
          }
          ++v150;
        }
        while (v150 != 3);
        goto LABEL_219;
      }
      double v107 = -0.5;
    }
    else
    {
      double v107 = 0.5;
    }
    double v106 = v106 + v107;
    goto LABEL_209;
  }
  uint64_t v95 = 0;
  *(_OWORD *)bytes = *(_OWORD *)((char *)&v404[12] + 8);
  *(_OWORD *)&bytes[16] = *(_OWORD *)((char *)&v404[13] + 8);
  *(_OWORD *)&unsigned char bytes[32] = *(_OWORD *)((char *)&v404[14] + 8);
  uint64_t v96 = *((void *)&v404[12] + 1);
  uint64_t v97 = 2 * *((void *)&v404[12] + 1) + 12;
  do
  {
    CFTypeID v98 = malloc_type_calloc(1uLL, v97, 0x5D67B0A5uLL);
    CFDictionaryRef v99 = v98;
    *(_DWORD *)CFTypeID v98 = 1987212643;
    *((_DWORD *)v98 + 2) = bswap32(*(_DWORD *)&bytes[16 * v95]);
    if (v96)
    {
      CFDictionaryRef v100 = *(unsigned __int16 **)&bytes[16 * v95 + 8];
      CFTypeID v101 = v98 + 6;
      uint64_t v102 = v96;
      do
      {
        unsigned int v103 = *v100++;
        *v101++ = bswap32(v103) >> 16;
        --v102;
      }
      while (v102);
    }
    CFDataRef v104 = CFDataCreate(0, (const UInt8 *)v98, v97);
    ColorSyncProfileSetTag(v6, off_1E54D7360[v95], v104);
    free(v99);
    if (v104) {
      CFRelease(v104);
    }
    ++v95;
  }
  while (v95 != 3);
LABEL_219:
  if (BYTE13(v406) && !BYTE10(v406)) {
    goto LABEL_448;
  }
  long long v412 = xmmword_18BE634A0;
  long long v413 = xmmword_18BE63490;
  *(_OWORD *)float v411 = xmmword_18BE634B0;
  prof = v6;
  if (!(_WORD)v406)
  {
    signed int v172 = 0x10000;
    int v173 = 0x10000;
    int v174 = 0x10000;
    goto LABEL_266;
  }
  *(void *)bytes = 0;
  *(void *)unint64_t v420 = 0;
  xyFromTemp((unsigned __int16)v406, (double *)bytes, (double *)v420);
  double v153 = *(double *)bytes / *(double *)v420;
  double v154 = (1.0 - *(double *)bytes) / *(double *)v420 + -1.0;
  long long v415 = 0u;
  long long v416 = 0u;
  memset(bytes, 0, sizeof(bytes));
  convertSpecToXYZ((uint64_t)&v399, (uint64_t)bytes, 0);
  double v155 = *(double *)&bytes[32] * *(double *)&v415 - *(double *)&bytes[40] * *(double *)&bytes[56];
  double v156 = *(double *)&bytes[24] * *(double *)&v415 - *(double *)&bytes[40] * *(double *)&bytes[48];
  double v157 = -v156;
  double v158 = *(double *)&bytes[24] * *(double *)&bytes[56] - *(double *)&bytes[32] * *(double *)&bytes[48];
  double v159 = -(*(double *)&bytes[8] * *(double *)&v415 - *(double *)&bytes[16] * *(double *)&bytes[56]);
  double v160 = *(double *)bytes * v155 - v156 * *(double *)&bytes[8] + *(double *)&bytes[16] * v158;
  double v161 = v157 / v160;
  double v162 = -(*(double *)bytes * *(double *)&bytes[56] - *(double *)&bytes[8] * *(double *)&bytes[48]) / v160;
  double v163 = v161 + v155 / v160 * v153 + v158 / v160 * v154;
  double v164 = (*(double *)bytes * *(double *)&v415 - *(double *)&bytes[16] * *(double *)&bytes[48]) / v160
       + v159 / v160 * v153
       + v162 * v154;
  double v165 = -(*(double *)bytes * *(double *)&bytes[40] - *(double *)&bytes[16] * *(double *)&bytes[24]) / v160
       + (*(double *)&bytes[8] * *(double *)&bytes[40] - *(double *)&bytes[16] * *(double *)&bytes[32]) / v160 * v153
       + (*(double *)bytes * *(double *)&bytes[32] - *(double *)&bytes[8] * *(double *)&bytes[24]) / v160 * v154;
  if (v164 <= v163) {
    double v166 = v163;
  }
  else {
    double v166 = (*(double *)bytes * *(double *)&v415 - *(double *)&bytes[16] * *(double *)&bytes[48]) / v160
  }
         + v159 / v160 * v153
         + v162 * v154;
  if (v165 <= v166) {
    double v167 = v166;
  }
  else {
    double v167 = -(*(double *)bytes * *(double *)&bytes[40] - *(double *)&bytes[16] * *(double *)&bytes[24]) / v160
  }
         + (*(double *)&bytes[8] * *(double *)&bytes[40] - *(double *)&bytes[16] * *(double *)&bytes[32]) / v160 * v153
         + (*(double *)bytes * *(double *)&bytes[32] - *(double *)&bytes[8] * *(double *)&bytes[24]) / v160 * v154;
  double v168 = v164 / v167;
  *(double *)unint64_t v420 = v163 / v167;
  *(double *)&v420[8] = v164 / v167;
  double v169 = v165 / v167;
  *(double *)&v420[16] = v165 / v167;
  if (v163 / v167 > 1.0) {
    *(void *)unint64_t v420 = 0x3FF0000000000000;
  }
  if (v168 > 1.0) {
    *(void *)&v420[8] = 0x3FF0000000000000;
  }
  if (v169 > 1.0) {
    *(void *)&v420[16] = 0x3FF0000000000000;
  }
  inverseNativeGammaLookup((uint64_t)&v399, (long double *)v420, v169, 1.0, v165, v167, v163 / v167, v163, v161, v158 / v160);
  double v170 = *(double *)v420 * 65536.0;
  if (*(double *)v420 * 65536.0 <= 0.0)
  {
    if (v170 >= 0.0) {
      goto LABEL_240;
    }
    double v171 = -0.5;
  }
  else
  {
    double v171 = 0.5;
  }
  double v170 = v170 + v171;
LABEL_240:
  if (v170 >= 2147483650.0)
  {
    int v174 = 0x7FFFFFFF;
  }
  else if (v170 <= -2147483650.0)
  {
    int v174 = 0x80000000;
  }
  else
  {
    int v174 = (int)v170;
  }
  DWORD1(v412) = v174;
  double v175 = *(double *)&v420[8] * 65536.0;
  if (*(double *)&v420[8] * 65536.0 <= 0.0)
  {
    if (v175 >= 0.0) {
      goto LABEL_250;
    }
    double v176 = -0.5;
  }
  else
  {
    double v176 = 0.5;
  }
  double v175 = v175 + v176;
LABEL_250:
  if (v175 >= 2147483650.0)
  {
    int v173 = 0x7FFFFFFF;
  }
  else if (v175 <= -2147483650.0)
  {
    int v173 = 0x80000000;
  }
  else
  {
    int v173 = (int)v175;
  }
  LODWORD(v413) = v173;
  double v177 = *(double *)&v420[16] * 65536.0;
  if (*(double *)&v420[16] * 65536.0 > 0.0)
  {
    double v178 = 0.5;
LABEL_259:
    double v177 = v177 + v178;
    goto LABEL_260;
  }
  if (v177 < 0.0)
  {
    double v178 = -0.5;
    goto LABEL_259;
  }
LABEL_260:
  if (v177 >= 2147483650.0)
  {
    signed int v172 = 0x7FFFFFFF;
  }
  else if (v177 <= -2147483650.0)
  {
    signed int v172 = 0x80000000;
  }
  else
  {
    signed int v172 = (int)v177;
  }
  HIDWORD(v413) = v172;
LABEL_266:
  __y = v405[1];
  if (*(double *)&v405[1] == 0.0)
  {
    int v217 = 0x10000;
    int v218 = 0x10000;
    unsigned int v219 = 0x10000;
    goto LABEL_291;
  }
  memset(v419, 0, 64);
  long long v417 = 0u;
  long long v418 = 0u;
  long long v415 = 0u;
  long long v416 = 0u;
  memset(bytes, 0, sizeof(bytes));
  *(_WORD *)bytes = -1;
  LOWORD(v415) = -1;
  LOWORD(v419[0]) = -1;
  if (ColorSyncProfileGetTag((uint64_t)prof, @"aarg")
    && ColorSyncProfileGetTag((uint64_t)prof, @"aabg")
    && ColorSyncProfileGetTag((uint64_t)prof, @"aagg"))
  {
    int v393 = v174;
    uint64_t v179 = bytes;
    char v180 = (char *)&v415;
    CFArrayRef v181 = (char *)v419;
    CFDataRef Tag = (const __CFData *)ColorSyncProfileGetTag((uint64_t)prof, @"aarg");
    CFDataRef v183 = (const __CFData *)ColorSyncProfileGetTag((uint64_t)prof, @"aabg");
    CFDataRef v184 = (const __CFData *)ColorSyncProfileGetTag((uint64_t)prof, @"aagg");
    vm_address_t BytePtr = CFDataGetBytePtr(Tag);
    v421.i64[0] = (uint64_t)BytePtr;
    uint64_t v186 = CFDataGetBytePtr(v183);
    v421.i64[1] = (uint64_t)v186;
    CFArrayRef v187 = CFDataGetBytePtr(v184);
    uint64_t v188 = 0;
    double v422 = *(double *)&v187;
    uint64_t v189 = bytes;
    float64x2_t v190 = (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL);
    do
    {
      uint64_t v191 = v421.i64[v188];
      switch(bswap32(*(unsigned __int16 *)(v191 + 8)) >> 16)
      {
        case 0u:
          int v192 = bswap32(*(_DWORD *)(v191 + 12));
          *(_WORD *)uint64_t v189 = 0;
          *((double *)v189 + 1) = (double)v192 * 0.0000152587891;
          break;
        case 1u:
          int v193 = bswap32(*(_DWORD *)(v191 + 20));
          *(_WORD *)uint64_t v189 = 1;
          int8x8_t v194 = vrev32_s8(*(int8x8_t *)(v191 + 12));
          v195.i64[0] = v194.i32[0];
          v195.i64[1] = v194.i32[1];
          *(float64x2_t *)(v189 + 8) = vmulq_f64(vcvtq_f64_s64(v195), v190);
          *((double *)v189 + 3) = (double)v193 * 0.0000152587891;
          break;
        case 2u:
          *(_WORD *)uint64_t v189 = 2;
          int8x8_t v196 = vrev32_s8(*(int8x8_t *)(v191 + 12));
          v197.i64[0] = v196.i32[0];
          v197.i64[1] = v196.i32[1];
          *(float64x2_t *)(v189 + 8) = vmulq_f64(vcvtq_f64_s64(v197), v190);
          int8x8_t v198 = vrev32_s8(*(int8x8_t *)(v191 + 20));
          v197.i64[0] = v198.i32[0];
          v197.i64[1] = v198.i32[1];
          *(float64x2_t *)(v189 + 24) = vmulq_f64(vcvtq_f64_s64(v197), v190);
          break;
        case 3u:
          int v199 = bswap32(*(_DWORD *)(v191 + 28));
          *(_WORD *)uint64_t v189 = 3;
          int8x8_t v200 = vrev32_s8(*(int8x8_t *)(v191 + 12));
          v201.i64[0] = v200.i32[0];
          v201.i64[1] = v200.i32[1];
          *(float64x2_t *)(v189 + 8) = vmulq_f64(vcvtq_f64_s64(v201), v190);
          int8x8_t v202 = vrev32_s8(*(int8x8_t *)(v191 + 20));
          v201.i64[0] = v202.i32[0];
          v201.i64[1] = v202.i32[1];
          *(float64x2_t *)(v189 + 24) = vmulq_f64(vcvtq_f64_s64(v201), v190);
          *((double *)v189 + 5) = (double)v199 * 0.0000152587891;
          break;
        case 4u:
          int v203 = bswap32(*(_DWORD *)(v191 + 36));
          *(_WORD *)uint64_t v189 = 3;
          int8x8_t v204 = vrev32_s8(*(int8x8_t *)(v191 + 12));
          v205.i64[0] = v204.i32[0];
          v205.i64[1] = v204.i32[1];
          *(float64x2_t *)(v189 + 8) = vmulq_f64(vcvtq_f64_s64(v205), v190);
          int8x8_t v206 = vrev32_s8(*(int8x8_t *)(v191 + 20));
          v205.i64[0] = v206.i32[0];
          v205.i64[1] = v206.i32[1];
          *(float64x2_t *)(v189 + 24) = vmulq_f64(vcvtq_f64_s64(v205), v190);
          int8x8_t v207 = vrev32_s8(*(int8x8_t *)(v191 + 28));
          v205.i64[0] = v207.i32[0];
          v205.i64[1] = v207.i32[1];
          *(float64x2_t *)(v189 + 40) = vmulq_f64(vcvtq_f64_s64(v205), v190);
          *((double *)v189 + 7) = (double)v203 * 0.0000152587891;
          break;
        default:
          break;
      }
      v189 += 64;
      ++v188;
    }
    while (v188 != 3);
    if (!HIBYTE(v406))
    {
      *(_DWORD *)&v420[52] = 0;
      *(_OWORD *)&v420[36] = 0u;
      *(_OWORD *)&v420[20] = 0u;
      *(_OWORD *)&v420[4] = 0u;
      *(_DWORD *)unint64_t v420 = 1885823862;
      *(void *)&v420[8] = *((void *)BytePtr + 1);
      *(void *)&v420[16] = *((void *)v186 + 1);
      uint64_t v208 = *((void *)v187 + 1);
      *(void *)&v209.f64[0] = v403;
      v209.f64[1] = *(float64_t *)v404;
      *(int8x16_t *)&v420[32] = vrev64q_s8((int8x16_t)vcvtq_n_s64_f64(v209, 0x20uLL));
      *(void *)&v420[24] = v208;
      *(void *)&v420[48] = bswap64(vcvtd_n_s64_f64(*((double *)&v403 + 1), 0x20uLL));
      CFDataRef v210 = CFDataCreateWithBytesNoCopy(0, v420, 56, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
      ColorSyncProfileSetTag(prof, @"vcgp", v210);
      if (v210) {
        CFRelease(v210);
      }
    }
    int v211 = 1;
    int v174 = v393;
  }
  else
  {
    int v211 = 0;
    uint64_t v179 = (UInt8 *)v404 + 8;
    char v180 = (char *)&v404[4] + 8;
    CFArrayRef v181 = (char *)&v404[8] + 8;
  }
  unsigned int v212 = WORD4(v404[15]);
  if (WORD4(v404[15]) && BYTE8(v406))
  {
    char v410 = 0;
    __int16 v409 = 0;
    double v213 = *(double *)&v405[1] / *(double *)&v403;
    double v214 = *(double *)&v405[1] / *((double *)&v403 + 1);
    double v215 = 2.2;
    if (*(double *)&v405[1] / *(double *)&v403 >= 2.25 || (double v216 = 2.2, v213 <= 2.15))
    {
      if (v213 >= 1.85 || v213 <= 1.75)
      {
        BOOL v257 = v213 > 0.95 && v213 < 1.05;
        double v216 = 1.0;
        if (!v257) {
          double v216 = *(double *)&v405[1] / *(double *)&v403;
        }
      }
      else
      {
        double v216 = 1.8;
      }
    }
    double v258 = *(double *)&v405[1] / *(double *)v404;
    if (v214 >= 2.25 || (double v259 = 2.2, v214 <= 2.15))
    {
      if (v214 >= 1.85 || v214 <= 1.75)
      {
        BOOL v260 = v214 > 0.95 && v214 < 1.05;
        double v259 = 1.0;
        if (!v260) {
          double v259 = *(double *)&v405[1] / *((double *)&v403 + 1);
        }
      }
      else
      {
        double v259 = 1.8;
      }
    }
    if (v258 >= 2.25 || v258 <= 2.15)
    {
      if (v258 >= 1.85 || v258 <= 1.75)
      {
        BOOL v261 = v258 > 0.95 && v258 < 1.05;
        double v215 = 1.0;
        if (!v261) {
          double v215 = *(double *)&v405[1] / *(double *)v404;
        }
      }
      else
      {
        double v215 = 1.8;
      }
    }
    double v262 = 0.0;
    double v263 = 0.0;
    if (v216 > 1.8) {
      double v263 = (v216 + -1.8) * 0.04045 / 0.4;
    }
    if (v259 > 1.8) {
      double v262 = (v259 + -1.8) * 0.04045 / 0.4;
    }
    double v394 = 0.0;
    double v264 = 0.0;
    if (v215 > 1.8) {
      double v264 = (v215 + -1.8) * 0.04045 / 0.4;
    }
    if (v216 > 1.8 && v263 > 0.0) {
      double v394 = (v216 + -1.8) * 0.0773993808 / 0.4;
    }
    double v265 = 0.0;
    double v266 = 0.0;
    if (v259 > 1.8)
    {
      double v266 = 0.0;
      if (v262 > 0.0) {
        double v266 = (v259 + -1.8) * 0.0773993808 / 0.4;
      }
    }
    double v389 = v266;
    if (v215 > 1.8 && v264 > 0.0) {
      double v265 = (v215 + -1.8) * 0.0773993808 / 0.4;
    }
    if (*(double *)&v405[1] == 0.0) {
      unint64_t v267 = 48;
    }
    else {
      unint64_t v267 = ((unint64_t)WORD4(v404[15]) << 9) | 0x12;
    }
    v268 = malloc_type_calloc(1uLL, v267, 0x2DEE6C3FuLL);
    if (v268)
    {
      uint64_t v269 = 0;
      _DWORD *v268 = 1952932726;
      v268[2] = 0;
      *((_WORD *)v268 + 6) = __rev16(v212);
      *(_DWORD *)((char *)v268 + 14) = 33554433;
      int v378 = (UInt8 *)v268;
      char v270 = (char *)v268 + 18;
      v271.f64[0] = v394;
      v271.f64[1] = v389;
      float64x2_t v395 = v271;
      __asm { FMOV            V0.2D, #1.0 }
      float64x2_t v386 = _Q0;
      float64x2_t v390 = (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL);
      do
      {
        double v273 = (double)(unint64_t)(255 - v269);
        double v274 = v273 / 255.0;
        double v275 = v265 * v273 / 255.0;
        float64x2_t v276 = vdivq_f64(vmulq_n_f64(v395, v273), v390);
        int8x16_t v421 = vbslq_s8((int8x16_t)vcgtq_f64(v276, v386), (int8x16_t)v386, (int8x16_t)v276);
        if (v275 <= 1.0) {
          double v277 = v275;
        }
        else {
          double v277 = 1.0;
        }
        double v422 = v277;
        *(void *)&v420[8] = pow(v274, *(long double *)&__y);
        *(void *)&v420[16] = *(void *)&v420[8];
        *(void *)unint64_t v420 = *(void *)&v420[8];
        inverseNativeGammaLookup((uint64_t)&v399, (long double *)v420, *(double *)&v420[8], v278, v279, v280, v281, v282, v283, v284);
        for (uint64_t i = 0; i != 3; ++i)
        {
          if (i == 1) {
            uint64_t v286 = 8;
          }
          else {
            uint64_t v286 = 16;
          }
          if (!i) {
            uint64_t v286 = 0;
          }
          if (*((unsigned char *)&v409 + i))
          {
            *(void *)&v420[v286] = v421.i64[i];
          }
          else
          {
            double v287 = *(double *)&v421.i64[i];
            if (*(double *)&v420[v286] < v287)
            {
              *(double *)&v420[v286] = v287;
              *((unsigned char *)&v409 + i) = 1;
            }
          }
        }
        double v288 = *(double *)&v420[8];
        double v289 = *(double *)&v420[16];
        double v290 = (double)v174 * 0.0000152587891 * *(double *)v420 * 65535.0;
        if (v290 <= 0.0)
        {
          if (v290 < 0.0) {
            double v290 = v290 + -0.5;
          }
        }
        else
        {
          double v290 = v290 + 0.5;
        }
        if (v290 >= 65535.0)
        {
          __int16 v291 = -1;
        }
        else if (v290 <= 0.0)
        {
          __int16 v291 = 0;
        }
        else
        {
          __int16 v291 = __rev16((int)v290);
        }
        *(_WORD *)&v270[2 * (255 - v269)] = v291;
        if (v212 == 3)
        {
          double v292 = (double)v173 * 0.0000152587891 * v288 * 65535.0;
          if (v292 <= 0.0)
          {
            if (v292 < 0.0) {
              double v292 = v292 + -0.5;
            }
          }
          else
          {
            double v292 = v292 + 0.5;
          }
          double v293 = (double)v172 * 0.0000152587891 * v289;
          __int16 v294 = __rev16((int)v292);
          if (v292 <= 0.0) {
            __int16 v294 = 0;
          }
          if (v292 >= 65535.0) {
            __int16 v294 = -1;
          }
          *(_WORD *)&v270[2 * (511 - v269)] = v294;
          double v295 = v293 * 65535.0;
          if (v295 <= 0.0)
          {
            if (v295 < 0.0) {
              double v295 = v295 + -0.5;
            }
          }
          else
          {
            double v295 = v295 + 0.5;
          }
          if (v295 >= 65535.0)
          {
            __int16 v296 = -1;
          }
          else if (v295 <= 0.0)
          {
            __int16 v296 = 0;
          }
          else
          {
            __int16 v296 = __rev16((int)v295);
          }
          *(_WORD *)&v270[2 * (767 - v269)] = v296;
        }
        ++v269;
      }
      while (v269 != 256);
      CFDataRef v297 = CFDataCreateWithBytesNoCopy(0, v378, v267, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
      ColorSyncProfileSetTag(prof, @"vcgt", v297);
      if (v297) {
        CFRelease(v297);
      }
      free(v378);
    }
LABEL_447:
    unint64_t v6 = prof;
    goto LABEL_448;
  }
  if (((BYTE9(v406) == 0) & ~v211) == 0 && (_BYTE)v407)
  {
    int v221 = v174;
    BOOL v222 = (UInt8 *)malloc_type_calloc(1uLL, 0x1812uLL, 0x38B24782uLL);
    if (v222)
    {
      uint64_t v223 = v222;
      *(_DWORD *)BOOL v222 = 1952932726;
      *((void *)v222 + 1) = 0x4030000000000;
      *((_WORD *)v222 + 8) = 512;
      double v224 = (double)v221 * 0.0000152587891;
      double v225 = (double)v172 * 0.0000152587891;
      uint64_t v226 = 2056;
      uint64_t v227 = v222;
      do
      {
        *(void *)unint64_t v420 = applyParametricGamma((uint64_t)v179, (double)(unint64_t)(v226 - 1033) / 1023.0);
        *(void *)&v420[8] = applyParametricGamma((uint64_t)v180, (double)(unint64_t)(v226 - 1033) / 1023.0);
        *(void *)&v420[16] = applyParametricGamma((uint64_t)v181, (double)(unint64_t)(v226 - 1033) / 1023.0);
        inverseNativeGammaLookup((uint64_t)&v399, (long double *)v420, *(double *)&v420[16], v228, v229, v230, v231, v232, v233, v234);
        double v235 = (double)v173 * 0.0000152587891 * *(double *)&v420[8];
        double v236 = *(double *)&v420[16];
        double v237 = v224 * *(double *)v420 * 65535.0;
        BOOL v238 = v237 <= 0.0;
        double v239 = v237 + -0.5;
        if (v237 >= 0.0) {
          double v239 = v224 * *(double *)v420 * 65535.0;
        }
        double v240 = v237 + 0.5;
        if (v238) {
          double v240 = v239;
        }
        __int16 v241 = __rev16((int)v240);
        if (v240 <= 0.0) {
          __int16 v241 = 0;
        }
        if (v240 >= 65535.0) {
          __int16 v241 = -1;
        }
        *((_WORD *)v227 + 1032) = v241;
        double v242 = v235 * 65535.0;
        if (v242 <= 0.0)
        {
          if (v242 < 0.0) {
            double v242 = v242 + -0.5;
          }
        }
        else
        {
          double v242 = v242 + 0.5;
        }
        double v243 = v225 * v236;
        __int16 v244 = __rev16((int)v242);
        if (v242 <= 0.0) {
          __int16 v244 = 0;
        }
        if (v242 >= 65535.0) {
          __int16 v244 = -1;
        }
        *((_WORD *)v227 + 2056) = v244;
        double v245 = v243 * 65535.0;
        if (v245 <= 0.0)
        {
          if (v245 < 0.0) {
            double v245 = v245 + -0.5;
          }
        }
        else
        {
          double v245 = v245 + 0.5;
        }
        if (v245 >= 65535.0)
        {
          __int16 v246 = -1;
        }
        else if (v245 <= 0.0)
        {
          __int16 v246 = 0;
        }
        else
        {
          __int16 v246 = __rev16((int)v245);
        }
        *((_WORD *)v227 + 3080) = v246;
        --v226;
        v227 -= 2;
      }
      while (v226 != 1032);
      CFDataRef v247 = CFDataCreateWithBytesNoCopy(0, v223, 6162, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
      ColorSyncProfileSetTag(prof, @"vcgt", v247);
      if (v247) {
        CFRelease(v247);
      }
      free(v223);
    }
    goto LABEL_447;
  }
  double v248 = *(double *)&__y / *(double *)&v403 * 65536.0;
  if (v248 < 0.0) {
    double v249 = v248 + -0.5;
  }
  else {
    double v249 = *(double *)&__y / *(double *)&v403 * 65536.0;
  }
  double v250 = 0.5;
  BOOL v77 = v248 <= 0.0;
  double v251 = v248 + 0.5;
  if (!v77) {
    double v249 = v251;
  }
  if (v249 > -2147483650.0) {
    int v252 = (int)v249;
  }
  else {
    int v252 = 0x80000000;
  }
  if (v249 < 2147483650.0) {
    unsigned int v219 = v252;
  }
  else {
    unsigned int v219 = 0x7FFFFFFF;
  }
  double v253 = *(double *)&__y / *((double *)&v403 + 1) * 65536.0;
  if (v253 <= 0.0)
  {
    if (v253 >= 0.0) {
      goto LABEL_341;
    }
    double v250 = -0.5;
  }
  double v253 = v253 + v250;
LABEL_341:
  if (v253 > -2147483650.0) {
    int v254 = (int)v253;
  }
  else {
    int v254 = 0x80000000;
  }
  if (v253 < 2147483650.0) {
    int v218 = v254;
  }
  else {
    int v218 = 0x7FFFFFFF;
  }
  double v255 = *(double *)&__y / *(double *)v404 * 65536.0;
  if (v255 <= 0.0)
  {
    if (v255 >= 0.0) {
      goto LABEL_362;
    }
    double v256 = -0.5;
  }
  else
  {
    double v256 = 0.5;
  }
  double v255 = v255 + v256;
LABEL_362:
  if (v255 >= 2147483650.0)
  {
    int v217 = 0x7FFFFFFF;
  }
  else if (v255 <= -2147483650.0)
  {
    int v217 = 0x80000000;
  }
  else
  {
    int v217 = (int)v255;
  }
LABEL_291:
  *(void *)((char *)&v412 + 4) = _byteswap_uint64(__PAIR64__(v174, v218));
  *(_DWORD *)&v411[12] = bswap32(v219);
  *(void *)&long long v413 = _byteswap_uint64(__PAIR64__(v173, v217));
  HIDWORD(v413) = bswap32(v172);
  CFDataRef v220 = CFDataCreateWithBytesNoCopy(0, v411, 48, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  unint64_t v6 = prof;
  ColorSyncProfileSetTag(prof, @"vcgt", v220);
  if (v220) {
    CFRelease(v220);
  }
LABEL_448:
  if (BYTE14(v406) && !BYTE10(v406)) {
    goto LABEL_568;
  }
  memset(&bytes[4], 0, 60);
  *(_DWORD *)bytes = 1852400750;
  double v298 = *(double *)&v399 * 65536.0;
  if (*(double *)&v399 * 65536.0 <= 0.0)
  {
    if (*(double *)&v399 * 65536.0 >= 0.0) {
      goto LABEL_455;
    }
    double v299 = -0.5;
  }
  else
  {
    double v299 = 0.5;
  }
  double v298 = v298 + v299;
LABEL_455:
  if (v298 >= 2147483650.0)
  {
    unsigned int v300 = 0x7FFFFFFF;
  }
  else if (v298 <= -2147483650.0)
  {
    unsigned int v300 = 0x80000000;
  }
  else
  {
    unsigned int v300 = (int)v298;
  }
  *(_DWORD *)&bytes[12] = bswap32(v300);
  double v301 = *((double *)&v399 + 1) * 65536.0;
  if (*((double *)&v399 + 1) * 65536.0 <= 0.0)
  {
    if (*((double *)&v399 + 1) * 65536.0 >= 0.0) {
      goto LABEL_465;
    }
    double v302 = -0.5;
  }
  else
  {
    double v302 = 0.5;
  }
  double v301 = v301 + v302;
LABEL_465:
  if (v301 >= 2147483650.0)
  {
    unsigned int v303 = 0x7FFFFFFF;
  }
  else if (v301 <= -2147483650.0)
  {
    unsigned int v303 = 0x80000000;
  }
  else
  {
    unsigned int v303 = (int)v301;
  }
  *(_DWORD *)&bytes[16] = bswap32(v303);
  double v304 = *(double *)&v400 * 65536.0;
  if (*(double *)&v400 * 65536.0 <= 0.0)
  {
    if (*(double *)&v400 * 65536.0 >= 0.0) {
      goto LABEL_475;
    }
    double v305 = -0.5;
  }
  else
  {
    double v305 = 0.5;
  }
  double v304 = v304 + v305;
LABEL_475:
  if (v304 >= 2147483650.0)
  {
    unsigned int v306 = 0x7FFFFFFF;
  }
  else if (v304 <= -2147483650.0)
  {
    unsigned int v306 = 0x80000000;
  }
  else
  {
    unsigned int v306 = (int)v304;
  }
  *(_DWORD *)&bytes[20] = bswap32(v306);
  double v307 = *((double *)&v400 + 1) * 65536.0;
  if (*((double *)&v400 + 1) * 65536.0 <= 0.0)
  {
    if (*((double *)&v400 + 1) * 65536.0 >= 0.0) {
      goto LABEL_485;
    }
    double v308 = -0.5;
  }
  else
  {
    double v308 = 0.5;
  }
  double v307 = v307 + v308;
LABEL_485:
  if (v307 >= 2147483650.0)
  {
    unsigned int v309 = 0x7FFFFFFF;
  }
  else if (v307 <= -2147483650.0)
  {
    unsigned int v309 = 0x80000000;
  }
  else
  {
    unsigned int v309 = (int)v307;
  }
  *(_DWORD *)&bytes[24] = bswap32(v309);
  double v310 = *(double *)&v401 * 65536.0;
  if (*(double *)&v401 * 65536.0 <= 0.0)
  {
    if (*(double *)&v401 * 65536.0 >= 0.0) {
      goto LABEL_495;
    }
    double v311 = -0.5;
  }
  else
  {
    double v311 = 0.5;
  }
  double v310 = v310 + v311;
LABEL_495:
  if (v310 >= 2147483650.0)
  {
    unsigned int v312 = 0x7FFFFFFF;
  }
  else if (v310 <= -2147483650.0)
  {
    unsigned int v312 = 0x80000000;
  }
  else
  {
    unsigned int v312 = (int)v310;
  }
  *(_DWORD *)&bytes[28] = bswap32(v312);
  double v313 = *((double *)&v401 + 1) * 65536.0;
  if (*((double *)&v401 + 1) * 65536.0 <= 0.0)
  {
    if (*((double *)&v401 + 1) * 65536.0 >= 0.0) {
      goto LABEL_505;
    }
    double v314 = -0.5;
  }
  else
  {
    double v314 = 0.5;
  }
  double v313 = v313 + v314;
LABEL_505:
  if (v313 >= 2147483650.0)
  {
    unsigned int v315 = 0x7FFFFFFF;
  }
  else if (v313 <= -2147483650.0)
  {
    unsigned int v315 = 0x80000000;
  }
  else
  {
    unsigned int v315 = (int)v313;
  }
  *(_DWORD *)&unsigned char bytes[32] = bswap32(v315);
  double v316 = *(double *)&v402 * 65536.0;
  if (*(double *)&v402 * 65536.0 <= 0.0)
  {
    if (*(double *)&v402 * 65536.0 >= 0.0) {
      goto LABEL_515;
    }
    double v317 = -0.5;
  }
  else
  {
    double v317 = 0.5;
  }
  double v316 = v316 + v317;
LABEL_515:
  if (v316 >= 2147483650.0)
  {
    unsigned int v318 = 0x7FFFFFFF;
  }
  else if (v316 <= -2147483650.0)
  {
    unsigned int v318 = 0x80000000;
  }
  else
  {
    unsigned int v318 = (int)v316;
  }
  *(_DWORD *)&bytes[36] = bswap32(v318);
  double v319 = *((double *)&v402 + 1) * 65536.0;
  if (*((double *)&v402 + 1) * 65536.0 <= 0.0)
  {
    if (*((double *)&v402 + 1) * 65536.0 >= 0.0) {
      goto LABEL_525;
    }
    double v320 = -0.5;
  }
  else
  {
    double v320 = 0.5;
  }
  double v319 = v319 + v320;
LABEL_525:
  if (v319 >= 2147483650.0)
  {
    unsigned int v321 = 0x7FFFFFFF;
  }
  else if (v319 <= -2147483650.0)
  {
    unsigned int v321 = 0x80000000;
  }
  else
  {
    unsigned int v321 = (int)v319;
  }
  *(_DWORD *)&bytes[40] = bswap32(v321);
  double v322 = *(double *)&v403 * 65536.0;
  if (*(double *)&v403 * 65536.0 <= 0.0)
  {
    if (*(double *)&v403 * 65536.0 >= 0.0) {
      goto LABEL_535;
    }
    double v323 = -0.5;
  }
  else
  {
    double v323 = 0.5;
  }
  double v322 = v322 + v323;
LABEL_535:
  if (v322 >= 2147483650.0)
  {
    unsigned int v324 = 0x7FFFFFFF;
  }
  else if (v322 <= -2147483650.0)
  {
    unsigned int v324 = 0x80000000;
  }
  else
  {
    unsigned int v324 = (int)v322;
  }
  *(_DWORD *)&bytes[44] = bswap32(v324);
  double v325 = *((double *)&v403 + 1) * 65536.0;
  if (*((double *)&v403 + 1) * 65536.0 <= 0.0)
  {
    if (*((double *)&v403 + 1) * 65536.0 >= 0.0) {
      goto LABEL_545;
    }
    double v326 = -0.5;
  }
  else
  {
    double v326 = 0.5;
  }
  double v325 = v325 + v326;
LABEL_545:
  if (v325 >= 2147483650.0)
  {
    unsigned int v327 = 0x7FFFFFFF;
  }
  else if (v325 <= -2147483650.0)
  {
    unsigned int v327 = 0x80000000;
  }
  else
  {
    unsigned int v327 = (int)v325;
  }
  *(_DWORD *)&bytes[48] = bswap32(v327);
  double v328 = *(double *)v404 * 65536.0;
  if (*(double *)v404 * 65536.0 > 0.0)
  {
    double v329 = 0.5;
LABEL_554:
    double v328 = v328 + v329;
    goto LABEL_555;
  }
  if (*(double *)v404 * 65536.0 < 0.0)
  {
    double v329 = -0.5;
    goto LABEL_554;
  }
LABEL_555:
  if (v328 >= 2147483650.0)
  {
    unsigned int v330 = 0x7FFFFFFF;
  }
  else if (v328 <= -2147483650.0)
  {
    unsigned int v330 = 0x80000000;
  }
  else
  {
    unsigned int v330 = (int)v328;
  }
  ssize_t v331 = WORD5(v404[15]) * WORD4(v404[15]) * WORD6(v404[15]);
  *(_DWORD *)&bytes[52] = bswap32(v330);
  *(_DWORD *)&UInt8 bytes[8] = bswap32(v331 + 54);
  *(_WORD *)&bytes[56] = __rev16(WORD4(v404[15]));
  *(_WORD *)&bytes[58] = __rev16(WORD5(v404[15]));
  *(_WORD *)&bytes[60] = __rev16(WORD6(v404[15]));
  if (!v331)
  {
    CFDataRef v337 = CFDataCreateWithBytesNoCopy(0, bytes, 62, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    int v333 = 0;
    goto LABEL_564;
  }
  BOOL v332 = (UInt8 *)malloc_type_malloc(v331 + 62, 0xDDB1BA46uLL);
  if (v332)
  {
    int v333 = v332;
    long long v334 = *(_OWORD *)bytes;
    long long v335 = *(_OWORD *)&bytes[16];
    long long v336 = *(_OWORD *)&bytes[48];
    *((_OWORD *)v332 + 2) = *(_OWORD *)&bytes[32];
    *((_OWORD *)v332 + 3) = v336;
    *(_OWORD *)BOOL v332 = v334;
    *((_OWORD *)v332 + 1) = v335;
    swab(v405[0], v332 + 62, v331);
    CFDataRef v337 = CFDataCreateWithBytesNoCopy(0, v333, v331 + 62, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
LABEL_564:
    if (v337)
    {
      ColorSyncProfileSetTag(v6, @"ndin", v337);
      CFRelease(v337);
    }
    if (v333) {
      free(v333);
    }
  }
LABEL_568:
  if (CFDictionaryContainsKey(v2, @"rXYZ"))
  {
    CFDataRef v338 = (const __CFData *)CFDictionaryGetValue(v2, @"rXYZ");
    ColorSyncProfileSetTag(v6, @"rXYZ", v338);
  }
  if (CFDictionaryContainsKey(v2, @"gXYZ"))
  {
    CFDataRef v339 = (const __CFData *)CFDictionaryGetValue(v2, @"gXYZ");
    ColorSyncProfileSetTag(v6, @"gXYZ", v339);
  }
  if (CFDictionaryContainsKey(v2, @"bXYZ"))
  {
    CFDataRef v340 = (const __CFData *)CFDictionaryGetValue(v2, @"bXYZ");
    ColorSyncProfileSetTag(v6, @"bXYZ", v340);
  }
  if (CFDictionaryContainsKey(v2, @"cicp"))
  {
    int v341 = CFDictionaryGetValue(v2, @"cicp");
    CFTypeID v342 = CFGetTypeID(v341);
    if (v342 == CFDataGetTypeID() && CFDataGetLength((CFDataRef)v341) >= 12) {
      ColorSyncProfileSetTag(v6, @"cicp", (CFDataRef)v341);
    }
  }
  return v6;
}

CFNumberRef longFromDictionary(const __CFDictionary *a1, const void *a2)
{
  if (!a2) {
    return 0;
  }
  CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  uint64_t valuePtr = 0;
  if (result)
  {
    CFNumberRef v3 = result;
    CFTypeID v4 = CFGetTypeID(result);
    if (v4 == CFNumberGetTypeID() && !CFNumberIsFloatType(v3))
    {
      if (CFNumberGetValue(v3, kCFNumberLongType, &valuePtr)) {
        return (const __CFNumber *)valuePtr;
      }
      else {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const void *gammaFromDictionary(const __CFDictionary *a1, const void *a2)
{
  return CFDictionaryGetValue(a1, @"unrestrictedGamma");
}

BOOL primariesFromDictionary(const __CFDictionary *a1, uint64_t a2)
{
  *(double *)a2 = doubleFromDictionary(a1, @"phosphorRx");
  *(double *)(a2 + 8) = doubleFromDictionary(a1, @"phosphorRy");
  *(double *)(a2 + 16) = doubleFromDictionary(a1, @"phosphorGx");
  *(double *)(a2 + 24) = doubleFromDictionary(a1, @"phosphorGy");
  *(double *)(a2 + 32) = doubleFromDictionary(a1, @"phosphorBx");
  double v4 = doubleFromDictionary(a1, @"phosphorBy");
  uint64_t v5 = 0;
  *(double *)(a2 + 40) = v4;
  double v6 = *(double *)a2;
  for (uint64_t i = (double *)&qword_1E54D5DD0; ; i += 9)
  {
    double v8 = *(i - 4);
    double v9 = v8 + -0.00001;
    double v10 = v8 + 0.00001;
    if (v9 < v6 && v10 > v6)
    {
      double v12 = *(double *)(a2 + 8);
      double v13 = *(i - 3);
      double v14 = v13 + -0.00001;
      double v15 = v13 + 0.00001;
      if (v14 < v12 && v15 > v12)
      {
        double v17 = *(double *)(a2 + 16);
        double v18 = *(i - 2);
        double v19 = v18 + -0.00001;
        double v20 = v18 + 0.00001;
        if (v19 < v17 && v20 > v17)
        {
          double v22 = *(double *)(a2 + 24);
          double v23 = *(i - 1);
          double v24 = v23 + -0.00001;
          double v25 = v23 + 0.00001;
          if (v24 < v22 && v25 > v22)
          {
            double v27 = *(double *)(a2 + 32);
            if (*i + -0.00001 < v27 && *i + 0.00001 > v27)
            {
              double v29 = i[1];
              double v30 = v29 + -0.00001;
              double v31 = v29 + 0.00001;
              if (v30 < v4 && v31 > v4)
              {
                double v33 = *(double *)(a2 + 48);
                double v34 = i[2];
                double v35 = v34 + -0.00001;
                double v36 = v34 + 0.00001;
                if (v35 < v33 && v36 > v33)
                {
                  double v38 = *(double *)(a2 + 56);
                  double v39 = i[3];
                  if (v39 + -0.00001 < v38 && v39 + 0.00001 > v38) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
    if (++v5 == 4) {
      return v6 != 0.0
    }
          && *(double *)(a2 + 8) != 0.0
          && *(double *)(a2 + 16) != 0.0
          && *(double *)(a2 + 24) != 0.0
          && *(double *)(a2 + 32) != 0.0
          && v4 != 0.0;
  }
  *(void *)(a2 + 376) = *((void *)&primariesFromDictionary_primaries + 9 * v5 + 8);
  return v6 != 0.0
      && *(double *)(a2 + 8) != 0.0
      && *(double *)(a2 + 16) != 0.0
      && *(double *)(a2 + 24) != 0.0
      && *(double *)(a2 + 32) != 0.0
      && v4 != 0.0;
}

BOOL checkPrimaries(double *a1)
{
  BOOL result = 0;
  double v3 = *a1;
  if (*a1 > 0.0)
  {
    double v4 = a1[1];
    if (v4 > 0.0)
    {
      BOOL result = 0;
      if (v3 + v4 <= 1.0 && v3 + v4 * -2.0 < 0.2)
      {
        BOOL result = 0;
        if (v3 + v4 > 0.7 && v4 - v3 < 0.0)
        {
          BOOL result = 0;
          double v5 = a1[2];
          if (v5 > 0.0)
          {
            double v6 = a1[3];
            if (v6 > 0.0)
            {
              BOOL result = 0;
              if (v5 + v6 < 1.0 && v5 + v6 > 0.6 && v6 - v5 > 0.0)
              {
                BOOL result = 0;
                double v7 = a1[4];
                if (v7 > 0.0)
                {
                  double v8 = a1[5];
                  if (v8 > 0.0)
                  {
                    BOOL result = 0;
                    if (v7 + v8 < 1.0 && v7 + v8 * -2.0 < 0.2)
                    {
                      BOOL result = 0;
                      if (v7 + v8 < 0.5 && v8 - v7 < 0.2)
                      {
                        BOOL result = 0;
                        double v9 = a1[6];
                        double v10 = a1[7];
                        if (v9 + v10 < 0.9 && v9 + v10 > 0.4) {
                          return v10 - v9 < 0.1 && v9 - v10 < 0.1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL verify_displayP3_HLG(ColorSyncProfileRef a1)
{
  if (displayP3HLG_CICP_tag_predicate != -1) {
    dispatch_once(&displayP3HLG_CICP_tag_predicate, &__block_literal_global_590);
  }
  CFDataRef v2 = (const __CFData *)displayP3HLG_CICP_tag_cicp;
  if (pre_cicp_DisplayP3HLGProfile_predicate != -1) {
    dispatch_once(&pre_cicp_DisplayP3HLGProfile_predicate, &__block_literal_global_593);
  }
  uint64_t v3 = pre_cicp_DisplayP3HLGProfile_profile;

  return verify_hdr(a1, 0, v2, v3, 2, @"aaOO");
}

BOOL verify_BT2100_HLG(ColorSyncProfileRef a1)
{
  if (bt2100HLG_CICP_tag_predicate != -1) {
    dispatch_once(&bt2100HLG_CICP_tag_predicate, &__block_literal_global_617);
  }
  CFDataRef v2 = (const __CFData *)bt2100HLG_CICP_tag_cicp;
  if (pre_cicp_BT2100HLGProfile_predicate != -1) {
    dispatch_once(&pre_cicp_BT2100HLGProfile_predicate, &__block_literal_global_620);
  }
  uint64_t v3 = pre_cicp_BT2100HLGProfile_profile;

  return verify_hdr(a1, 0, v2, v3, 2, @"aaOO");
}

CFTypeRef create_GenericXYZProfile()
{
  if (create_GenericXYZProfile_predicate != -1) {
    dispatch_once(&create_GenericXYZProfile_predicate, &__block_literal_global_196);
  }
  uint64_t v0 = (const void *)create_GenericXYZProfile_profile;

  return CFRetain(v0);
}

BOOL verify_ITUR2020_sRGBGamma_data(CFTypeRef cf)
{
  if (verify_ITUR2020_sRGBGamma_data_predicate[0] != -1)
  {
    dispatch_once(verify_ITUR2020_sRGBGamma_data_predicate, &__block_literal_global_608);
    if (cf) {
      goto LABEL_3;
    }
    return 0;
  }
  if (!cf) {
    return 0;
  }
LABEL_3:
  CFTypeID v2 = CFGetTypeID(cf);
  if (v2 != CFDataGetTypeID()
    || CFDataGetLength((CFDataRef)cf) < verify_ITUR2020_sRGBGamma_data_itu2020_sRGBGamma_profile_data_length)
  {
    return 0;
  }
  vm_address_t BytePtr = CFDataGetBytePtr((CFDataRef)verify_ITUR2020_sRGBGamma_data_itu2020_sRGBGamma_profile_data);
  double v5 = CFDataGetBytePtr((CFDataRef)cf);
  return memcmp(BytePtr, v5, verify_ITUR2020_sRGBGamma_data_itu2020_sRGBGamma_profile_data_length) == 0;
}

CFDataRef verify_GenericLab(ColorSyncProfileRef prof, const __CFData *cf)
{
  CFDataRef v2 = cf;
  if (verify_GenericLab_predicate != -1)
  {
    dispatch_once(&verify_GenericLab_predicate, &__block_literal_global_553);
    if (v2) {
      goto LABEL_3;
    }
LABEL_5:
    CFDataRef v2 = ColorSyncProfileCopyData(prof, 0);
    double v4 = v2;
    if (!v2) {
      return v2;
    }
    goto LABEL_6;
  }
  if (!cf) {
    goto LABEL_5;
  }
LABEL_3:
  double v4 = 0;
LABEL_6:
  CFTypeID v5 = CFGetTypeID(v2);
  if (v5 == CFDataGetTypeID() && CFDataGetLength(v2) >= verify_GenericLab_lab_profile_data_length)
  {
    vm_address_t BytePtr = CFDataGetBytePtr((CFDataRef)verify_GenericLab_lab_profile_data);
    double v8 = CFDataGetBytePtr(v2);
    CFDataRef v2 = (CFDataRef)(memcmp(BytePtr, v8, verify_GenericLab_lab_profile_data_length) == 0);
    if (!v4) {
      return v2;
    }
    goto LABEL_9;
  }
  CFDataRef v2 = 0;
  if (v4) {
LABEL_9:
  }
    CFRelease(v4);
  return v2;
}

CFDataRef verify_DisplayP3ITU709(ColorSyncProfileRef prof, const __CFData *cf)
{
  CFDataRef v2 = cf;
  if (verify_DisplayP3ITU709_predicate[0] != -1)
  {
    dispatch_once(verify_DisplayP3ITU709_predicate, &__block_literal_global_559);
    if (v2) {
      goto LABEL_3;
    }
LABEL_5:
    CFDataRef v2 = ColorSyncProfileCopyData(prof, 0);
    double v4 = v2;
    if (!v2) {
      return v2;
    }
    goto LABEL_6;
  }
  if (!cf) {
    goto LABEL_5;
  }
LABEL_3:
  double v4 = 0;
LABEL_6:
  CFTypeID v5 = CFGetTypeID(v2);
  if (v5 == CFDataGetTypeID() && CFDataGetLength(v2) >= verify_DisplayP3ITU709_displayP3ITU709_profile_data_length)
  {
    vm_address_t BytePtr = CFDataGetBytePtr((CFDataRef)verify_DisplayP3ITU709_displayP3ITU709_profile_data);
    double v8 = CFDataGetBytePtr(v2);
    CFDataRef v2 = (CFDataRef)(memcmp(BytePtr, v8, verify_DisplayP3ITU709_displayP3ITU709_profile_data_length) == 0);
    if (!v4) {
      return v2;
    }
    goto LABEL_9;
  }
  CFDataRef v2 = 0;
  if (v4) {
LABEL_9:
  }
    CFRelease(v4);
  return v2;
}

unint64_t verify_CoreVideo709(ColorSyncProfileRef prof, const __CFData *cf)
{
  unint64_t v2 = (unint64_t)cf;
  if (verify_CoreVideo709_predicate != -1)
  {
    dispatch_once(&verify_CoreVideo709_predicate, &__block_literal_global_556);
    if (v2) {
      goto LABEL_3;
    }
LABEL_5:
    unint64_t v2 = (unint64_t)ColorSyncProfileCopyData(prof, 0);
    double v4 = (const void *)v2;
    if (!v2) {
      return v2;
    }
    goto LABEL_6;
  }
  if (!cf) {
    goto LABEL_5;
  }
LABEL_3:
  double v4 = 0;
LABEL_6:
  CFTypeID v5 = CFGetTypeID((CFTypeRef)v2);
  if (v5 == CFDataGetTypeID() && CFDataGetLength((CFDataRef)v2) >= verify_CoreVideo709_corevideo709_profile_data_length)
  {
    vm_address_t BytePtr = CFDataGetBytePtr((CFDataRef)verify_CoreVideo709_corevideo709_profile_data);
    double v7 = CFDataGetBytePtr((CFDataRef)v2);
    if (!memcmp(BytePtr, v7, verify_CoreVideo709_corevideo709_profile_data_length))
    {
      unint64_t v2 = 1;
      if (!v4) {
        return v2;
      }
      goto LABEL_14;
    }
  }
  CFTypeID v8 = CFGetTypeID((CFTypeRef)v2);
  if (v8 != CFDataGetTypeID()
    || CFDataGetLength((CFDataRef)v2) < verify_CoreVideo709_corevideo709_legacy_profile_data_length)
  {
    unint64_t v2 = 0;
    if (!v4) {
      return v2;
    }
    goto LABEL_14;
  }
  double v9 = CFDataGetBytePtr((CFDataRef)verify_CoreVideo709_corevideo709_legacy_profile_data);
  double v10 = CFDataGetBytePtr((CFDataRef)v2);
  unint64_t v2 = memcmp(v9, v10, verify_CoreVideo709_corevideo709_legacy_profile_data_length) == 0;
  if (v4) {
LABEL_14:
  }
    CFRelease(v4);
  return v2;
}

uint64_t DoFlattenCompactConversion(uint64_t a1, uint64_t a2, const __CFDictionary *a3, const void *a4, unint64_t a5)
{
  if ((*(unsigned char *)(a1 + 120) & 2) != 0)
  {
    uint64_t v10 = channels_per_space(*(_DWORD *)(a1 + 88));
    if (*(void *)(a1 + 104) <= (unint64_t)(v10 + channels_per_space(*(_DWORD *)(a1 + 84)) + 1)) {
      return DoFlattenParametricConversion(a1, (CFArrayRef)a2, a3);
    }
  }
  long long v11 = *(void **)(a1 + 72);
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    if (!v11 {
      || (uint64_t v12 = *v11,
    }
    {
      __assert_rtn("flatten_device_to_compact_conversion", "CMMTransform.cpp", 1147, "dynamic_cast <CMMConvGrayToRGB *> (devConv) != NULL");
    }
    double v13 = (const void *)(*(uint64_t (**)(void *, const __CFDictionary *))(v12 + 208))(v11, a3);
    if (v13)
    {
      CFArrayAppendValue((CFMutableArrayRef)a2, v13);
      CFRelease(v13);
      return 0;
    }
    else
    {
      CFArrayRemoveAllValues((CFMutableArrayRef)a2);
      return 4294967126;
    }
  }
  int v46 = *(void **)(a1 + 64);
  CMMMemMgr::RetainMemList((CMMMemMgr *)&v46);
  unint64_t v43 = a5;
  CFTypeID v44 = a4;
  if (v11)
  {
    unsigned int v14 = -1;
    while (1)
    {
      while (1)
      {
        int v15 = (*(uint64_t (**)(void *))(*v11 + 216))(v11);
        uint64_t v16 = *v11;
        if (v15 == 1) {
          break;
        }
        if ((*(unsigned int (**)(void *))(*v11 + 216))(v11) != 4) {
          goto LABEL_22;
        }
        long long v11 = (void *)(*(uint64_t (**)(void *))(*v11 + 232))(v11);
        if (!v11) {
          goto LABEL_19;
        }
      }
      if (v14 != -1 && v17 < v14)
      {
LABEL_22:
        double v19 = (ConversionManager *)v11;
        goto LABEL_23;
      }
      double v18 = (const void *)(*(uint64_t (**)(void *, const __CFDictionary *))(v16 + 208))(v11, a3);
      if (!v18) {
        break;
      }
      CFArrayAppendValue((CFMutableArrayRef)a2, v18);
      CFRelease(v18);
      long long v11 = (void *)v11[2];
      unsigned int v14 = v17;
      double v19 = 0;
      if (!v11) {
        goto LABEL_23;
      }
    }
    CFArrayRemoveAllValues((CFMutableArrayRef)a2);
    double v19 = (ConversionManager *)v11;
  }
  else
  {
LABEL_19:
    double v19 = 0;
  }
LABEL_23:
  CFIndex Count = CFArrayGetCount((CFArrayRef)a2);
  if (v19)
  {
    CFIndex v21 = Count;
    char v22 = 0;
    unsigned int v23 = -1;
    lpsrc = v19;
    double v24 = (CMMConvNode **)v19;
    while (1)
    {
      char v45 = v22;
      double v25 = v24[2];
      CFNumberRef v26 = v24;
      do
      {
        double v27 = v26;
        CFNumberRef v26 = (CMMConvNode **)v26[2];
      }
      while (v26);
      while (1)
      {
        int v30 = (*((uint64_t (**)(CMMConvNode **))*v27 + 27))(v27);
        double v31 = *v27;
        if (v30 != 1) {
          break;
        }
        if (v23 != -1 && v28 > v23) {
          goto LABEL_44;
        }
        double v29 = (const void *)(*((uint64_t (**)(CMMConvNode **, const __CFDictionary *))v31 + 26))(v27, a3);
        if (!v29)
        {
          CFArrayRemoveAllValues((CFMutableArrayRef)a2);
LABEL_44:
          if ((v45 & 1) == 0) {
            goto LABEL_46;
          }
LABEL_45:
          double v25 = v41;
          goto LABEL_46;
        }
        CFArrayInsertValueAtIndex((CFMutableArrayRef)a2, v21, v29);
        CFRelease(v29);
        if (v27 == v24)
        {
          double v25 = (CMMConvNode *)v24;
          goto LABEL_44;
        }
        double v27 = (CMMConvNode **)v27[3];
        unsigned int v23 = v28;
        if (!v27) {
          goto LABEL_44;
        }
      }
      if ((*((unsigned int (**)(CMMConvNode **))*v27 + 27))(v27) != 4) {
        break;
      }
      uint64_t v32 = (*((uint64_t (**)(CMMConvNode **))*v27 + 29))(v27);
      double v24 = (CMMConvNode **)v32;
      double v33 = v41;
      if ((v45 & 1) == 0) {
        double v33 = v25;
      }
      CFTypeID v41 = v33;
      char v22 = 1;
      if (!v32) {
        goto LABEL_45;
      }
    }
    if (v45) {
      goto LABEL_45;
    }
    double v25 = v27[2];
LABEL_46:
    double v19 = lpsrc;
    if (v25 == lpsrc) {
      goto LABEL_56;
    }
    uint64_t v35 = -1;
    double v36 = lpsrc;
    do
    {
      double v36 = (ConversionManager *)*((void *)v36 + 2);
      ++v35;
    }
    while (v36 != v25);
    if (!v35 {
      && ((uint64_t v38 = *(void *)lpsrc,
    }
    {
      CFDictionaryRef v37 = (CFDictionaryRef)(*(uint64_t (**)(ConversionManager *, const __CFDictionary *))(v38 + 208))(lpsrc, a3);
    }
    else
    {
      CFDictionaryRef v37 = compact_and_flatten_sequence((pthread_mutex_t *)a1, lpsrc, v25, (uint64_t)&v46, *(_DWORD *)(a1 + 84), *(_DWORD *)(a1 + 88), (void *)kColorSyncTransformIteratorCompactType, v44, v43);
    }
    CFDictionaryRef v39 = v37;
    if (v37)
    {
      CFArrayInsertValueAtIndex((CFMutableArrayRef)a2, v21, v37);
      CFRelease(v39);
LABEL_56:
      uint64_t v34 = 0;
      goto LABEL_58;
    }
    CFArrayRemoveAllValues((CFMutableArrayRef)a2);
    uint64_t v34 = 4294967126;
  }
  else
  {
    uint64_t v34 = 4294967126;
    if (CFArrayGetCount((CFArrayRef)a2) <= 0) {
      a2 = 4294967126;
    }
    else {
      a2 = 0;
    }
  }
LABEL_58:
  CMMMemMgr::ReleaseMemList(&v46);
  if (v19) {
    return v34;
  }
  return a2;
}

void sub_18BE34154(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  CMMMemMgr::ReleaseMemList((void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18BE340E8);
}

uint64_t channels_per_space(int a1)
{
  uint64_t result = 0;
  if (a1 > 1145261137)
  {
    if (a1 > 1282766367)
    {
      if (a1 <= 1482250783)
      {
        if (a1 == 1282766368 || a1 == 1347182946) {
          return 3;
        }
        int v10 = 1380401696;
        goto LABEL_44;
      }
      if (a1 <= 1501067551)
      {
        if (a1 == 1482250784) {
          return 3;
        }
        int v10 = 1497588338;
        goto LABEL_44;
      }
      if (a1 == 1501067552) {
        return 3;
      }
      int v5 = 1734438260;
    }
    else
    {
      if (a1 <= 1178815569)
      {
        if (a1 == 1145261138) {
          return 13;
        }
        if (a1 != 1145856354)
        {
          BOOL v3 = a1 == 1162038354;
          uint64_t v4 = 14;
LABEL_25:
          if (v3) {
            return v4;
          }
          else {
            return 0;
          }
        }
        return 3;
      }
      if (a1 > 1212961567)
      {
        if (a1 == 1212961568) {
          return 3;
        }
        int v10 = 1213421088;
        goto LABEL_44;
      }
      if (a1 == 1178815570) {
        return 15;
      }
      int v5 = 1196573017;
    }
    if (a1 != v5) {
      return result;
    }
    return 1;
  }
  if (a1 <= 943934545)
  {
    if (a1 > 876825681)
    {
      if (a1 <= 910380113)
      {
        if (a1 != 876825682)
        {
          BOOL v3 = a1 == 893602898;
          uint64_t v4 = 5;
          goto LABEL_25;
        }
        return 4;
      }
      int v6 = 910380114;
      uint64_t v7 = 6;
      BOOL v8 = a1 == 927157330;
      uint64_t v9 = 7;
      goto LABEL_37;
    }
    if (a1 != 1)
    {
      if (a1 == 843271250) {
        return 2;
      }
      int v10 = 860048466;
LABEL_44:
      if (a1 != v10) {
        return result;
      }
      return 3;
    }
    return 1;
  }
  if (a1 <= 1111706705)
  {
    int v6 = 943934546;
    uint64_t v7 = 8;
    uint64_t v11 = 10;
    if (a1 != 1094929490) {
      uint64_t v11 = 0;
    }
    if (a1 == 960711762) {
      uint64_t v9 = 9;
    }
    else {
      uint64_t v9 = v11;
    }
    goto LABEL_39;
  }
  if (a1 > 1129142559)
  {
    if (a1 != 1129142560)
    {
      if (a1 != 1129142603) {
        return result;
      }
      return 4;
    }
    return 3;
  }
  int v6 = 1111706706;
  uint64_t v7 = 11;
  BOOL v8 = a1 == 1128483922;
  uint64_t v9 = 12;
LABEL_37:
  if (!v8) {
    uint64_t v9 = 0;
  }
LABEL_39:
  if (a1 == v6) {
    return v7;
  }
  else {
    return v9;
  }
}

uint64_t DoFlattenParametricConversion(uint64_t a1, CFArrayRef theArray, const __CFDictionary *a3)
{
  if ((*(unsigned char *)(a1 + 120) & 2) == 0 || !collect_flattened_conversion(*(CMMConvNode **)(a1 + 72), 0, a3, theArray)) {
    return 4294967115;
  }
  CFNumberRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, 0);
  CFTypeID v5 = CFGetTypeID(ValueAtIndex);
  if (v5 == CFDictionaryGetTypeID()) {
    CFDictionarySetValue((CFMutableDictionaryRef)ValueAtIndex, kColorSyncTransformCodeFragmentType, kColorSyncTransformParametricConversionData);
  }
  return 0;
}

double CMMProfile::GetLutTagsGeneric(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4 = a1;
  switch(a2)
  {
    case 1:
      int AToBTagSignature = CMMProfile::GetAToBTagSignature(a3);
      if (AToBTagSignature == -1) {
        return result;
      }
      int v7 = AToBTagSignature;
      int v8 = *(_DWORD *)(v4 + 48);
      switch(v8)
      {
        case 1296255029:
          int v9 = 893602898;
          break;
        case 1296255030:
          int v9 = 910380114;
          break;
        case 1296255031:
          int v9 = 927157330;
          break;
        case 1296255032:
          int v9 = 943934546;
          break;
        default:
          if (v8 == 1281450528) {
            int v9 = 1145856354;
          }
          else {
            int v9 = *(_DWORD *)(v4 + 48);
          }
          break;
      }
      if (*(_DWORD *)(v4 + 52) == 1281450528) {
        int v12 = 1347182946;
      }
      else {
        int v12 = *(_DWORD *)(v4 + 52);
      }
      goto LABEL_52;
    case 2:
      int BToATagSignature = CMMProfile::GetBToATagSignature(a3);
      if (BToATagSignature == -1) {
        return result;
      }
      int v7 = BToATagSignature;
      int v14 = *(_DWORD *)(v4 + 48);
      if (*(_DWORD *)(v4 + 52) == 1281450528) {
        int v9 = 1347182946;
      }
      else {
        int v9 = *(_DWORD *)(v4 + 52);
      }
      switch(v14)
      {
        case 1296255029:
          int v12 = 893602898;
          break;
        case 1296255030:
          int v12 = 910380114;
          break;
        case 1296255031:
          int v12 = 927157330;
          break;
        case 1296255032:
          int v12 = 943934546;
          break;
        default:
          if (v14 == 1281450528) {
            int v12 = 1145856354;
          }
          else {
            int v12 = *(_DWORD *)(v4 + 48);
          }
          break;
      }
LABEL_52:
      a1 = v4;
      goto LABEL_53;
    case 3:
      if (a3 >= 4) {
        goto LABEL_77;
      }
      unsigned int v10 = dword_18BE638E0[a3];
      CFStringRef SignatureFromFourCharCode = ColorSyncCreateSignatureFromFourCharCode(v10);
      if (ColorSyncProfileContainsTag(*(ColorSyncProfileRef *)(v4 + 16), SignatureFromFourCharCode))
      {
        if (*(_DWORD *)(v4 + 52) == 1281450528) {
          int v9 = 1347182946;
        }
        else {
          int v9 = *(_DWORD *)(v4 + 52);
        }
        a1 = v4;
        int v7 = v10;
        int v12 = v9;
LABEL_53:
        CMMProfile::SingleTagContainer(a1, v7, v9, v12);
      }
      else
      {
        uint64_t v16 = *(void *)(v4 + 168);
        if (v16)
        {
          uint64_t v18 = *(void *)(v16 + 8);
          uint64_t v19 = *(void *)(v16 + 16);
          uint64_t v17 = v16 + 8;
          if (v19 - v18 != 48) {
            std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::resize(v17, 2uLL);
          }
        }
        else
        {
          double v20 = CMMBase::NewInternal(0x38uLL, *(void ***)(v4 + 24));
          *(void *)(v4 + 168) = TVector<CMMTagInfo,TAllocator<CMMTagInfo>>::TVector(v20, 2uLL, *(void *)(v4 + 24));
        }
        int v21 = 1145856354;
        int v23 = *(_DWORD *)(v4 + 48);
        int v22 = *(_DWORD *)(v4 + 52);
        if (v22 == 1281450528) {
          int v22 = 1347182946;
        }
        HIDWORD(v34) = v22;
        switch(v23)
        {
          case 1296255029:
            int v24 = 893602898;
            break;
          case 1296255030:
            int v24 = 910380114;
            break;
          case 1296255031:
            int v24 = 927157330;
            break;
          case 1296255032:
            int v24 = 943934546;
            break;
          default:
            int v24 = 1145856354;
            if (v23 != 1281450528) {
              int v24 = *(_DWORD *)(v4 + 48);
            }
            break;
        }
        int v35 = v24;
        LODWORD(v34) = CMMProfile::GetBToATagSignature(a3);
        int v25 = *(_DWORD *)(v4 + 48);
        switch(v25)
        {
          case 1296255029:
            int v21 = 893602898;
            break;
          case 1296255030:
            int v21 = 910380114;
            break;
          case 1296255031:
            int v21 = 927157330;
            break;
          case 1296255032:
            int v21 = 943934546;
            break;
          default:
            if (v25 != 1281450528) {
              int v21 = *(_DWORD *)(v4 + 48);
            }
            break;
        }
        int v26 = *(_DWORD *)(v4 + 52);
        if (v26 == 1281450528) {
          int v26 = 1347182946;
        }
        HIDWORD(v32) = v21;
        int v33 = v26;
        if (*(_DWORD *)(v4 + 96) >= 4u) {
          unsigned int v27 = 0;
        }
        else {
          unsigned int v27 = *(_DWORD *)(v4 + 96);
        }
        LODWORD(v32) = CMMProfile::GetAToBTagSignature(v27);
        uint64_t v28 = *(void *)(v4 + 168);
        uint64_t v29 = *(void *)(v28 + 8);
        uint64_t v30 = *(void *)(v28 + 16) - v29;
        if (!v30 || (*(void *)(v29 + 8) = v34, *(_DWORD *)(v29 + 16) = v35, 0xAAAAAAAAAAAAAAABLL * (v30 >> 3) <= 1)) {
          std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::__throw_out_of_range[abi:ne180100]();
        }
        double result = v32;
        *(double *)(v29 + 32) = v32;
        *(_DWORD *)(v29 + 40) = v33;
      }
      return result;
    case 4:
      int v15 = *(_DWORD *)(a1 + 48);
      if (*(_DWORD *)(a1 + 52) == 1281450528) {
        int v9 = 1347182946;
      }
      else {
        int v9 = *(_DWORD *)(a1 + 52);
      }
      switch(v15)
      {
        case 1296255029:
          int v12 = 893602898;
          break;
        case 1296255030:
          int v12 = 910380114;
          break;
        case 1296255031:
          int v12 = 927157330;
          break;
        case 1296255032:
          int v12 = 943934546;
          break;
        default:
          if (v15 == 1281450528) {
            int v12 = 1145856354;
          }
          else {
            int v12 = *(_DWORD *)(a1 + 48);
          }
          break;
      }
      int v7 = 1734438260;
      goto LABEL_53;
    default:
LABEL_77:
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = -171;
  }
}

uint64_t CMMProfile::GetBToATagSignature(unsigned int a1)
{
  if (a1 >= 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  return dword_18BE638D0[a1];
}

uint64_t ColorSyncProfileProducesMatrixTransform(void *a1)
{
  ColorSyncProfileRef v2 = ColorSyncProfileCreateWithName(kColorSyncSRGBProfile);
  ColorSyncTransformRef colorsync_transform = create_colorsync_transform(v2, a1);
  int v4 = ColorSyncTransformIterate((uint64_t)colorsync_transform, 0, (uint64_t)&__block_literal_global, (uint64_t)&__block_literal_global_4, (uint64_t)&__block_literal_global_8, (uint64_t)&__block_literal_global_11);
  if (colorsync_transform) {
    CFRelease(colorsync_transform);
  }
  if (!v4)
  {
    uint64_t v6 = 0;
    if (!v2) {
      return v6;
    }
    goto LABEL_7;
  }
  ColorSyncTransformRef v5 = create_colorsync_transform(a1, v2);
  uint64_t v6 = ColorSyncTransformIterate((uint64_t)v5, 0, (uint64_t)&__block_literal_global_14, (uint64_t)&__block_literal_global_17, (uint64_t)&__block_literal_global_20, (uint64_t)&__block_literal_global_23);
  if (v5) {
    CFRelease(v5);
  }
  if (v2) {
LABEL_7:
  }
    CFRelease(v2);
  return v6;
}

ColorSyncTransformRef create_colorsync_transform(void *a1, void *a2)
{
  ColorSyncTransformRef v2 = 0;
  keys[4] = *(void **)MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    keys[0] = (void *)kColorSyncProfile;
    keys[1] = (void *)kColorSyncRenderingIntent;
    keys[2] = (void *)kColorSyncTransformTag;
    keys[3] = (void *)kColorSyncBlackPointCompensation;
    values[0] = a1;
    values[1] = (void *)kColorSyncRenderingIntentPerceptual;
    BOOL v3 = (void *)*MEMORY[0x1E4F1CFC8];
    values[2] = (void *)kColorSyncTransformDeviceToPCS;
    values[3] = v3;
    v12[0] = (void *)kColorSyncProfile;
    v12[1] = (void *)kColorSyncRenderingIntent;
    v12[2] = (void *)kColorSyncTransformTag;
    v12[3] = (void *)kColorSyncBlackPointCompensation;
    v11[0] = a2;
    v11[1] = (void *)kColorSyncRenderingIntentRelative;
    v11[2] = (void *)kColorSyncTransformPCSToDevice;
    v11[3] = v3;
    int v4 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    ColorSyncTransformRef v5 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    CFDictionaryRef v6 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionaryRef v7 = CFDictionaryCreate(0, (const void **)v12, (const void **)v11, 4, v4, v5);
    v10[0] = v6;
    v10[1] = v7;
    v10[2] = 0;
    CFArrayRef v8 = CFArrayCreate(0, v10, 2, MEMORY[0x1E4F1D510]);
    if (v6) {
      CFRelease(v6);
    }
    if (v7) {
      CFRelease(v7);
    }
    ColorSyncTransformRef v2 = ColorSyncTransformCreate(v8, 0);
    if (v8) {
      CFRelease(v8);
    }
  }
  return v2;
}

uint64_t __ColorSyncProfileProducesMatrixTransform_block_invoke_8()
{
  return 0;
}

uint64_t __ColorSyncProfileProducesMatrixTransform_block_invoke_7()
{
  return 1;
}

uint64_t __ColorSyncProfileProducesMatrixTransform_block_invoke_6()
{
  return 1;
}

uint64_t __ColorSyncProfileProducesMatrixTransform_block_invoke_5()
{
  return 1;
}

uint64_t __ColorSyncProfileProducesMatrixTransform_block_invoke_4()
{
  return 0;
}

uint64_t __ColorSyncProfileProducesMatrixTransform_block_invoke_3()
{
  return 1;
}

uint64_t __ColorSyncProfileProducesMatrixTransform_block_invoke_2()
{
  return 1;
}

uint64_t __ColorSyncProfileProducesMatrixTransform_block_invoke()
{
  return 1;
}

BOOL InvertMatrix(double *a1)
{
  double v1 = *a1;
  double v2 = a1[1];
  double v4 = a1[2];
  double v3 = a1[3];
  double v5 = a1[4];
  double v6 = a1[5];
  double v7 = a1[6];
  double v8 = a1[7];
  double v9 = a1[8];
  double v10 = -(*a1 * v6);
  double v11 = v4 * -(v7 * v5) + *a1 * v5 * v9 + v4 * v3 * v8 + -(v3 * v2) * v9 + v2 * v6 * v7 + v10 * v8;
  double v12 = fabs(v11);
  if (v12 >= 1.17549435e-38)
  {
    *a1 = (v5 * v9 - v8 * v6) / v11;
    a1[1] = (v8 * v4 - v2 * v9) / v11;
    a1[2] = (v2 * v6 - v5 * v4) / v11;
    a1[3] = (v9 * -v3 + v7 * v6) / v11;
    a1[4] = (v4 * -v7 + v1 * v9) / v11;
    a1[5] = (v10 + v3 * v4) / v11;
    a1[6] = (v3 * v8 - v7 * v5) / v11;
    a1[7] = (v8 * -v1 + v7 * v2) / v11;
    a1[8] = (v1 * v5 - v3 * v2) / v11;
  }
  return v12 >= 1.17549435e-38;
}

void ColorSyncLog(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a1 >= 1)
  {
    if (ColorSyncLog_predicate != -1) {
      dispatch_once(&ColorSyncLog_predicate, &__block_literal_global_1);
    }
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v12 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%s", a2);
    CFStringRef v13 = CFStringCreateWithFormatAndArguments(v11, 0, v12, &a9);
    if (v12) {
      CFRelease(v12);
    }
    if (v13)
    {
      CStringPtr = CFStringGetCStringPtr(v13, 0x8000100u);
      if (CStringPtr)
      {
        int v15 = CStringPtr;
        uint64_t v16 = 0;
      }
      else
      {
        CFIndex Length = CFStringGetLength(v13);
        CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
        uint64_t v16 = (char *)malloc_type_calloc(MaximumSizeForEncoding, 1uLL, 0x72FA25BDuLL);
        if (v16 && CFStringGetCString(v13, v16, MaximumSizeForEncoding, 0x8000100u)) {
          int v15 = v16;
        }
        else {
          int v15 = (const char *)&unk_18BF98BC9;
        }
      }
      switch(a1)
      {
        case 3:
          puts(v15);
          break;
        case 2:
          double v20 = ColorSyncLog_log;
          if (os_log_type_enabled((os_log_t)ColorSyncLog_log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            int v22 = v15;
            _os_log_error_impl(&dword_18BE08000, v20, OS_LOG_TYPE_ERROR, "%{public}s", buf, 0xCu);
          }
          break;
        case 1:
          uint64_t v19 = ColorSyncLog_log;
          if (os_log_type_enabled((os_log_t)ColorSyncLog_log, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446210;
            int v22 = v15;
            _os_log_impl(&dword_18BE08000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          }
          break;
      }
      free(v16);
      CFRelease(v13);
    }
  }
}

os_log_t __ColorSyncLog_block_invoke()
{
  MainBundleIfLooksLikeBundle = (__CFBundle *)_CFBundleGetMainBundleIfLooksLikeBundle();
  if (MainBundleIfLooksLikeBundle)
  {
    CFStringRef Identifier = CFBundleGetIdentifier(MainBundleIfLooksLikeBundle);
    if (Identifier)
    {
      CFStringRef v2 = Identifier;
      CFIndex Length = CFStringGetLength(Identifier);
      if (!CFStringGetCString(v2, (char *)&fetch_process_name_name, 1024, 0x8000100u))
      {
        v5.location = 0;
        v5.int64x2_t length = Length;
        CFStringGetBytes(v2, v5, 0x600u, 0x3Fu, 0, (UInt8 *)&fetch_process_name_name, 1024, 0);
      }
    }
  }
  if (!(_BYTE)fetch_process_name_name) {
    strcpy((char *)&fetch_process_name_name, "Unknown process nam");
  }
  os_log_t result = os_log_create("com.apple.colorsync", (const char *)&fetch_process_name_name);
  ColorSyncLog_log = (uint64_t)result;
  return result;
}

uint64_t xyFromTemp(unsigned int a1, double *a2, double *a3)
{
  *a2 = 0.0;
  *a3 = 0.0;
  if (a1 >= 0xFA0)
  {
    double v3 = (double)a1 * 1.00055633;
    if (a1 >> 3 <= 0x36A)
    {
      double v4 = 2967800.0 / (v3 * v3) + -4607000000.0 / (v3 * (v3 * v3));
      double v5 = 0.244063;
      double v6 = 99.11;
LABEL_6:
      double v7 = v6 / v3 + v4 + v5;
      *a2 = v7;
      *a3 = v7 * 2.87 + v7 * v7 * -3.0 + -0.2751;
      return 1;
    }
    if (a1 >> 3 <= 0xC34)
    {
      double v4 = 1901800.0 / (v3 * v3) + -2006400000.0 / (v3 * (v3 * v3));
      double v5 = 0.23704;
      double v6 = 247.48;
      goto LABEL_6;
    }
  }
  return 0;
}

void addAbstractA2B(ColorSyncProfile *a1, uint64_t a2, void (*a3)(float *, float *, float *, uint64_t), uint64_t a4)
{
  uint64_t v8 = a2 * a2 * a2;
  CFMutableArrayRef Mutable = CFDataCreateMutable(0, 6 * v8 + 76);
  if (Mutable)
  {
    double v10 = Mutable;
    CFDataSetLength(Mutable, 6 * v8 + 76);
    Mutablevm_address_t BytePtr = CFDataGetMutableBytePtr(v10);
    if (MutableBytePtr)
    {
      CFStringRef v12 = MutableBytePtr;
      CFDataRef v32 = v10;
      int v33 = a1;
      CFStringRef v13 = CFDataGetMutableBytePtr(v10);
      bzero(v12, 6 * v8 + 76);
      *(_DWORD *)CFStringRef v12 = 846489197;
      *((_WORD *)v13 + 4) = 771;
      v13[10] = a2;
      *(void *)(v13 + 44) = 0x200020000000100;
      *((_DWORD *)v13 + 7) = 256;
      *((_DWORD *)v13 + 3) = 256;
      int v14 = &v13[6 * v8];
      *((_WORD *)v13 + 31) = -1;
      *((_WORD *)v13 + 29) = -1;
      *((_WORD *)v13 + 27) = -1;
      *((_WORD *)v14 + 37) = -1;
      *((_WORD *)v14 + 35) = -1;
      *((_WORD *)v14 + 33) = -1;
      uint64_t v15 = a2 - 1;
      if (a2 >= 1)
      {
        uint64_t v16 = 0;
        double v34 = 100.0 / (double)v15;
        uint64_t v17 = v13 + 64;
        double v18 = 0.0;
        double v19 = 256.0 / (double)v15;
        do
        {
          uint64_t v20 = 0;
          double v35 = v18;
          float v21 = v18;
          double v22 = -128.0;
          do
          {
            double v24 = -128.0;
            uint64_t v25 = a2;
            do
            {
              float v23 = v22;
              float v37 = v23;
              float v38 = v21;
              float v26 = v24;
              float v36 = v26;
              a3(&v38, &v37, &v36, a4);
              unsigned int v27 = (int)(v38 * 652.8 + 0.5) & ~((int)(v38 * 652.8 + 0.5) >> 31);
              if (v27 >= 0xFF00) {
                unsigned int v27 = 65280;
              }
              double v28 = v37 + 128.0;
              *uint64_t v17 = bswap32(v27) >> 16;
              unsigned int v29 = (int)(v28 * 255.0 + 0.5) & ~((int)(v28 * 255.0 + 0.5) >> 31);
              if (v29 >= 0xFFFF) {
                unsigned int v29 = 0xFFFF;
              }
              unsigned int v30 = bswap32(v29) >> 16;
              unsigned int v31 = (int)((v36 + 128.0) * 255.0 + 0.5) & ~((int)((v36 + 128.0) * 255.0 + 0.5) >> 31);
              if (v31 >= 0xFFFF) {
                unsigned int v31 = 0xFFFF;
              }
              v17[1] = v30;
              v17[2] = bswap32(v31) >> 16;
              v17 += 3;
              double v24 = v19 + v24;
              --v25;
            }
            while (v25);
            ++v20;
            double v22 = v19 + v22;
          }
          while (v20 != a2);
          ++v16;
          double v18 = v34 + v35;
        }
        while (v16 != a2);
      }
      double v10 = v32;
      ColorSyncProfileSetTag(v33, @"A2B0", v32);
    }
    CFRelease(v10);
  }
}

const ColorSyncProfile *makeAppleCopy(uint64_t a1, CFDictionaryRef theDict)
{
  os_log_t result = (const ColorSyncProfile *)CFDictionaryGetValue(theDict, @"profileToCopy");
  if (result)
  {
    double v4 = result;
    CFDataRef v5 = ColorSyncProfileCopyHeader(result);
    vm_address_t BytePtr = CFDataGetBytePtr(v5);
    if (BytePtr)
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(BytePtr + 8);
      *(_DWORD *)(a1 + 64) = *((_DWORD *)BytePtr + 16);
      long long v7 = *(_OWORD *)(BytePtr + 84);
      long long v8 = *(_OWORD *)(BytePtr + 100);
      *(_OWORD *)(a1 + 112) = *((_OWORD *)BytePtr + 7);
      *(_OWORD *)(a1 + 100) = v8;
      *(_OWORD *)(a1 + 84) = v7;
    }
    if (v5) {
      CFRelease(v5);
    }
    ColorSyncProfileRemoveTag(v4, @"cprt");
    return (const ColorSyncProfile *)CFRetain(v4);
  }
  return result;
}

const ColorSyncProfile *makeConcatenated(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID()) {
    return 0;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, @"profileSequence");
  Linuint64_t k = ColorSyncProfileCreateLink(Value, 0);
  if (!Link) {
    return 0;
  }
  long long v7 = Link;
  ColorSyncMutableProfileRef MutableCopy = ColorSyncProfileCreateMutableCopy(Link);
  CFDataRef v9 = ColorSyncProfileCopyHeader(MutableCopy);
  if (v9)
  {
    CFDataRef v10 = v9;
    vm_address_t BytePtr = CFDataGetBytePtr(v9);
    if (BytePtr)
    {
      *(void *)(a1 + 12) = *(void *)(BytePtr + 12);
      *(_DWORD *)(a1 + 20) = *((_DWORD *)BytePtr + 5);
    }
    CFRelease(v10);
  }
  CFStringRef v12 = CFDictionaryGetValue((CFDictionaryRef)cf, @"profileClass");
  if (v12) {
    *(_DWORD *)(a1 + 12) = classSignatureFromClassString(v12);
  }
  CFRelease(v7);
  return MutableCopy;
}

ColorSyncProfile *makeTableBasedRGB(uint64_t a1, const void *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  CFTypeID v4 = (ColorSyncProfile *)create(0, 1, 0);
  CFTypeID v5 = CFGetTypeID(a2);
  if (v5 == CFDictionaryGetTypeID())
  {
    CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)a2, @"A2B0");
    unsigned int v31 = Value;
    CFDataRef v32 = CFDictionaryGetValue((CFDictionaryRef)a2, @"A2B1");
    long long v7 = CFDictionaryGetValue((CFDictionaryRef)a2, @"A2B2");
    int v33 = v7;
    if (!v32) {
      CFDataRef v32 = Value;
    }
    if (!v7) {
      int v33 = Value;
    }
    CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a2, @"gridPoints");
    unsigned int valuePtr = 0;
    CFNumberGetValue(v8, kCFNumberSInt32Type, &valuePtr);
    for (uint64_t i = 0; i != 3; ++i)
    {
      if (valuePtr)
      {
        CFDataRef v10 = (const __CFData *)*(&v31 + i);
        if (v10)
        {
          vm_address_t BytePtr = CFDataGetBytePtr(v10);
          if (BytePtr)
          {
            CFStringRef v12 = BytePtr;
            uint64_t v13 = valuePtr;
            int v14 = (char *)malloc_type_calloc((6 * (v13 * v13 * v13) + 81) & 0xFFFFFFFFCLL, 1uLL, 0x68727672uLL);
            if (v14)
            {
              uint64_t v15 = (UInt8 *)v14;
              *(_DWORD *)int v14 = 846489197;
              *((_WORD *)v14 + 4) = 771;
              v14[10] = v13;
              *(void *)(v14 + 44) = 0x200020000000100;
              *((_DWORD *)v14 + 7) = 256;
              *((_DWORD *)v14 + 3) = 256;
              *((_WORD *)v14 + 31) = -1;
              *((_WORD *)v14 + 29) = -1;
              *((_WORD *)v14 + 27) = -1;
              if (v13)
              {
                int v16 = 0;
                int v17 = 0;
                double v18 = v14 + 64;
                do
                {
                  int v19 = 0;
                  int v20 = v16;
                  do
                  {
                    uint64_t v21 = 0;
                    double v22 = v18;
                    do
                    {
                      unsigned int v23 = bswap32(*(unsigned __int16 *)&v12[2 * (v20 + v21 + 1)]);
                      unsigned int v24 = bswap32(*(unsigned __int16 *)&v12[2 * (v20 + v21 + 2)]) >> 16;
                      *double v22 = bswap32(*(unsigned __int16 *)&v12[2 * (v20 + v21)]) >> 16;
                      v22[1] = HIWORD(v23);
                      double v18 = v22 + 3;
                      v22[2] = v24;
                      ++v21;
                      v22 += 3;
                    }
                    while (v13 != v21);
                    ++v19;
                    v20 += v13;
                  }
                  while (v19 != v13);
                  ++v17;
                  v16 += v13 * v13;
                }
                while (v17 != v13);
              }
              uint64_t v25 = &v15[6 * (v13 * v13 * v13) + 52];
              *((_WORD *)v25 + 11) = -1;
              *((_WORD *)v25 + 9) = -1;
              *((_WORD *)v25 + 7) = -1;
              CFDataRef v26 = CFDataCreate(0, v15, (6 * (v13 * v13 * v13) + 81) & 0xFFFFFFFFCLL);
              free(v15);
              if (v26)
              {
                ColorSyncProfileSetTag(v4, off_1E54D5ED0[i], v26);
                CFRelease(v26);
              }
            }
          }
        }
      }
    }
    CFDataRef v27 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)a2, @"aapy");
    if (v27) {
      ColorSyncProfileSetTag(v4, @"aapy", v27);
    }
    double v28 = CFDictionaryGetValue((CFDictionaryRef)a2, @"profileClass");
    *(void *)(a1 + 16) = 0x58595A2052474220;
    addXYZTag(v4, @"wtpt", *(void *)(a1 + 68), *(_DWORD *)(a1 + 76));
    if (v28) {
      *(_DWORD *)(a1 + 12) = classSignatureFromClassString(v28);
    }
  }
  return v4;
}

void *makeByCopyingTags(uint64_t a1, const void *a2)
{
  CFTypeID v4 = (void *)create(0, 1, 0);
  CFTypeID v5 = CFGetTypeID(a2);
  if (v5 == CFDictionaryGetTypeID() && CFDictionaryContainsKey((CFDictionaryRef)a2, @"tags"))
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a2, @"tags");
    if (Value)
    {
      CFDictionaryRef v7 = Value;
      CFTypeID v8 = CFGetTypeID(Value);
      if (v8 == CFDictionaryGetTypeID()) {
        CFDictionaryApplyFunction(v7, (CFDictionaryApplierFunction)tag_adder, v4);
      }
    }
    CFDataRef v9 = CFDictionaryGetValue((CFDictionaryRef)a2, @"profileClass");
    if (v9) {
      *(_DWORD *)(a1 + 12) = classSignatureFromClassString(v9);
    }
    CFStringRef v10 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, @"profileColorSpace");
    if (v10) {
      *(_DWORD *)(a1 + 16) = ColorSyncGetFourCharCodeFromSignature(v10);
    }
    CFStringRef v11 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, @"profilePCS");
    if (v11) {
      *(_DWORD *)(a1 + 20) = ColorSyncGetFourCharCodeFromSignature(v11);
    }
    if (!ColorSyncProfileGetTag((uint64_t)v4, @"wtpt")) {
      addXYZTag((ColorSyncProfile *)v4, @"wtpt", *(void *)(a1 + 68), *(_DWORD *)(a1 + 76));
    }
  }
  return v4;
}

const ColorSyncProfile *makeCopyWithFlexGTC(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef Value = (const ColorSyncProfile *)CFDictionaryGetValue(theDict, @"profileToCopy");
  if (!Value) {
    return 0;
  }
  CFTypeID v5 = (const UInt8 *)Value;
  if (!ColorSyncProfileIsPQBased(Value)) {
    return 0;
  }
  CICPInfo = ColorSyncProfileGetCICPInfo(v5);
  if (!CICPInfo) {
    return 0;
  }
  CFDictionaryRef v7 = CICPInfo;
  int v8 = *(_DWORD *)CICPInfo;
  ColorSyncMutableProfileRef MutableCopy = ColorSyncProfileCreateMutableCopy((ColorSyncProfileRef)v5);
  if (MutableCopy)
  {
    CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)kColorSyncPreGainMapCICP);
    int v86 = v8;
    if (v10 && (v11 = v10, CFTypeID v12 = CFGetTypeID(v10), v12 == CFNumberGetTypeID()))
    {
      valuePtr.CC_LONG A = 0;
      if (CFNumberGetValue(v11, kCFNumberSInt32Type, &valuePtr) == 1) {
        CC_LONG A = valuePtr.A;
      }
      else {
        CC_LONG A = 0;
      }
    }
    else
    {
      CC_LONG A = 0;
    }
    BOOL v15 = (A & 0xFF00) != 0 && A != 0;
    CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)kColorSyncPostGainMapCICP);
    if (v16 && (v17 = v16, CFTypeID v18 = CFGetTypeID(v16), v18 == CFNumberGetTypeID()))
    {
      valuePtr.CC_LONG A = 0;
      if (CFNumberGetValue(v17, kCFNumberSInt32Type, &valuePtr) == 1) {
        CC_LONG v19 = valuePtr.A;
      }
      else {
        CC_LONG v19 = 0;
      }
    }
    else
    {
      CC_LONG v19 = 0;
    }
    BOOL v20 = (v19 & 0xFF00) == 0 || v19 == 0;
    CFTypeID v21 = CFGetTypeID(theDict);
    if (v21 != CFDictionaryGetTypeID()) {
      goto LABEL_87;
    }
    BOOL v84 = v15;
    CFArrayRef v22 = (const __CFArray *)CFDictionaryGetValue(theDict, (const void *)kColorSyncMonoFlexGTCNodeTable);
    if (!v22) {
      goto LABEL_87;
    }
    CFArrayRef v23 = v22;
    CFTypeID v24 = CFGetTypeID(v22);
    if (v24 != CFArrayGetTypeID()) {
      goto LABEL_87;
    }
    CFIndex Count = CFArrayGetCount(v23);
    if (Count < 1) {
      goto LABEL_87;
    }
    CFIndex v26 = Count;
    BOOL v82 = v20;
    CC_LONG v83 = A;
    uint64_t v27 = 1;
    CFArrayRef theArray = v23;
    do
    {
      uint64_t v28 = v26;
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v23, v27 - 1);
      if (!ValueAtIndex) {
        goto LABEL_87;
      }
      CFDictionaryRef v30 = ValueAtIndex;
      CFTypeID v31 = CFGetTypeID(ValueAtIndex);
      if (v31 != CFDictionaryGetTypeID()
        || !verified_float_from_dictionary(v30, (const void *)kColorSyncFlexGTCNodeX, 0)
        || !verified_float_from_dictionary(v30, (const void *)kColorSyncFlexGTCNodeY, 0))
      {
        goto LABEL_87;
      }
      int v32 = verified_float_from_dictionary(v30, (const void *)kColorSyncFlexGTCNodeSlope, 0);
      CFArrayRef v23 = theArray;
      CFIndex v26 = v28;
      if (!v32) {
        break;
      }
    }
    while (v27++ < v28);
    char v34 = v32 ^ 1;
    if (!v28) {
      char v34 = 1;
    }
    if ((v34 & 1) != 0
      || (int v35 = 12 * v28, (v36 = (char *)malloc_type_calloc(1uLL, (12 * v28 + 158), 0x95EBFAD1uLL)) == 0))
    {
LABEL_87:
      CopyWithFlexGTCBasedA2B0 = 0;
      goto LABEL_88;
    }
    float v37 = v36;
    CFIndex v80 = (v35 + 158);
    CFDictionaryRef v38 = (const __CFDictionary *)CFDictionaryGetValue(theDict, (const void *)kColorSyncMonoGainMapParams);
    *(void *)(v37 + 114) = 0;
    CFTypeID v81 = v37;
    *(void *)(v37 + 106) = 0;
    if (v38)
    {
      CFDictionaryRef v39 = v38;
      CFTypeID v40 = CFGetTypeID(v38);
      if (v40 == CFDictionaryGetTypeID())
      {
        valuePtr.CC_LONG A = 0;
        int v41 = verified_float_from_dictionary(v39, (const void *)kColorSyncGainMapMin, &valuePtr);
        *(_DWORD *)(v81 + 122) = bswap32(valuePtr.A);
        if (v41)
        {
          int v42 = verified_float_from_dictionary(v39, (const void *)kColorSyncGainMapMax, &valuePtr);
          *(_DWORD *)(v81 + 126) = bswap32(valuePtr.A);
          if (v42)
          {
            int v43 = verified_float_from_dictionary(v39, (const void *)kColorSyncGainMapGamma, &valuePtr);
            *(_DWORD *)(v81 + 130) = bswap32(valuePtr.A);
            if (v43)
            {
              int v44 = verified_float_from_dictionary(v39, (const void *)kColorSyncGainMapBaselineConst, &valuePtr);
              *(_DWORD *)(v81 + 134) = bswap32(valuePtr.A);
              if (v44)
              {
                int v45 = verified_float_from_dictionary(v39, (const void *)kColorSyncGainMapAlternateConst, &valuePtr);
                *(_DWORD *)(v81 + 138) = bswap32(valuePtr.A);
                if (v45)
                {
                  int v46 = verified_float_from_dictionary(v39, (const void *)kColorSyncGainMapBaselineHeadroom, &valuePtr);
                  *(_DWORD *)(v81 + 142) = bswap32(valuePtr.A);
                  if (v46)
                  {
                    int v47 = verified_float_from_dictionary(v39, (const void *)kColorSyncGainMapAlternateHeadroom, &valuePtr);
                    *(_DWORD *)(v81 + 146) = bswap32(valuePtr.A);
                    if (v47)
                    {
                      if (CFDictionaryContainsKey(v39, (const void *)kColorSyncGUID) == 1)
                      {
                        CFUUIDRef v48 = (const __CFUUID *)CFDictionaryGetValue(v39, (const void *)kColorSyncGUID);
                        if (!v48) {
                          goto LABEL_86;
                        }
                        CFUUIDRef v49 = v48;
                        CFTypeID v50 = CFGetTypeID(v48);
                        if (v50 != CFUUIDGetTypeID()) {
                          goto LABEL_86;
                        }
                        *(CFUUIDBytes *)(v81 + 106) = CFUUIDGetUUIDBytes(v49);
                      }
                      if (v84) {
                        unsigned int v51 = v83;
                      }
                      else {
                        unsigned int v51 = v86 & 0xFFFF00FF | 0x800;
                      }
                      if (v82) {
                        int v52 = 0;
                      }
                      else {
                        int v52 = 1711276032;
                      }
                      int v87 = v52;
                      if (v82) {
                        unsigned int v53 = 0;
                      }
                      else {
                        unsigned int v53 = v19;
                      }
                      unint64_t v54 = CFDictionaryGetValue(theDict, @"FlexGTC.based.A2B0");
                      CFIndex v55 = 0;
                      unint64_t v56 = (const void *)*MEMORY[0x1E4F1CFD0];
                      unsigned int v57 = bswap32(v51);
                      *(_DWORD *)CFTypeID v81 = 1885433191;
                      unsigned int v58 = bswap32(v53);
                      *((_DWORD *)v81 + 2) = 0;
                      *((_DWORD *)v81 + 3) = bswap32(v80);
                      *((_OWORD *)v81 + 1) = xmmword_18BE634C0;
                      *((_DWORD *)v81 + 8) = v87;
                      *((_DWORD *)v81 + 9) = -1778384896;
                      unsigned int v59 = bswap32(v35 + 8);
                      *((_DWORD *)v81 + 10) = v59;
                      *((_DWORD *)v81 + 11) = -1778384896;
                      *((_DWORD *)v81 + 12) = v59;
                      *((_DWORD *)v81 + 13) = -1778384896;
                      long double v88 = v56;
                      if (v54 == v56) {
                        int v60 = 809644609;
                      }
                      else {
                        int v60 = 0;
                      }
                      *((_DWORD *)v81 + 14) = v59;
                      *((_DWORD *)v81 + 15) = v60;
                      *((void *)v81 + 8) = 0;
                      *(_DWORD *)(v81 + 98) = v57;
                      *(_DWORD *)(v81 + 102) = v58;
                      *(_DWORD *)(v81 + 150) = 0;
                      *(_DWORD *)(v81 + 154) = bswap32(v28);
                      uint64_t v61 = v28;
                      uint64_t v62 = v81 + 166;
                      do
                      {
                        CFDictionaryRef v63 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v55);
                        valuePtr.CC_LONG A = 0;
                        verified_float_from_dictionary(v63, (const void *)kColorSyncFlexGTCNodeX, &valuePtr);
                        *(v62 - 2) = bswap32(valuePtr.A);
                        verified_float_from_dictionary(v63, (const void *)kColorSyncFlexGTCNodeY, &valuePtr);
                        *(v62 - 1) = bswap32(valuePtr.A);
                        verified_float_from_dictionary(v63, (const void *)kColorSyncFlexGTCNodeSlope, &valuePtr);
                        _DWORD *v62 = bswap32(valuePtr.A);
                        v62 += 3;
                        ++v55;
                      }
                      while (v61 != v55);
                      CFDictionaryRef v64 = (const __CFDictionary *)CFDictionaryGetValue(theDict, (const void *)kColorSyncMonoGainMapParams);
                      if (CFDictionaryGetValue(v64, (const void *)kColorSyncGUID))
                      {
                        uint64_t v65 = *(void *)(v81 + 106);
                        uint64_t v66 = *(void *)(v81 + 114);
                      }
                      else
                      {
                        *(void *)md = 0;
                        uint64_t v91 = 0;
                        memset(&valuePtr, 0, sizeof(valuePtr));
                        CC_MD5_Init(&valuePtr);
                        CC_MD5_Update(&valuePtr, v81, v80);
                        CC_MD5_Final(md, &valuePtr);
                        uint64_t v65 = *(void *)md;
                        uint64_t v66 = v91;
                      }
                      CFDataRef v67 = CFDataCreate(0, (const UInt8 *)v81, v80);
                      if (v67)
                      {
                        CFDataRef v68 = v67;
                        ColorSyncProfileSetTag(MutableCopy, @"hdgm", v67);
                        CFRelease(v68);
                        double v69 = *v7 - 1 > 0xB
                            ? @"Unknown primaries"
                            : off_1E54D5EE8[(*v7 - 1)];
                        double v70 = v7[1] - 1 > 0x11 ? 0 : *(&off_1E54D5F48 + (v7[1] - 1));
                        CFStringRef v71 = CFStringCreateWithFormat(0, 0, @"%@; %@", v69, v70);
                        *(void *)&valuePtr.CC_LONG A = v65;
                        *(void *)&valuePtr.C = v66;
                        unint64_t v72 = XXH64((uint64_t)&valuePtr);
                        CFStringRef v73 = CFStringCreateWithFormat(0, 0, @"Gain Map Preview %02X%02X%02X%02X%02X%02X%02X%02X", v72, BYTE1(v72), BYTE2(v72), BYTE3(v72), BYTE4(v72), BYTE5(v72), BYTE6(v72), HIBYTE(v72));
                        CFStringRef v74 = CFStringCreateWithFormat(0, 0, @"%@ (%@)", v71, v73);
                        CFRelease(v71);
                        CFRelease(v73);
                        if (v74)
                        {
                          ColorSyncProfileRemoveTag(MutableCopy, @"dscm");
                          ColorSyncProfileSetDescriptionTag(MutableCopy, v74, 0);
                          CFRelease(v74);
                          CFDataRef v75 = ColorSyncProfileCopyHeader((ColorSyncProfileRef)v5);
                          if (v75)
                          {
                            CFDataRef v76 = v75;
                            CFTypeID v77 = CFGetTypeID(v75);
                            if (v77 == CFDataGetTypeID())
                            {
                              vm_address_t BytePtr = CFDataGetBytePtr(v76);
                              if (BytePtr)
                              {
                                if (*((_DWORD *)BytePtr + 9) == 1633907568)
                                {
                                  *(_OWORD *)(a1 + 8) = *(_OWORD *)(BytePtr + 8);
                                  CFRelease(v76);
                                  free(v81);
                                  if (CFDictionaryGetValue(theDict, @"FlexGTC.based.A2B0") != v88) {
                                    return MutableCopy;
                                  }
                                  CopyWithFlexGTCBasedA2B0 = makeCopyWithFlexGTCBasedA2B0(a1, theDict, MutableCopy);
                                  if (!CopyWithFlexGTCBasedA2B0) {
                                    return MutableCopy;
                                  }
LABEL_88:
                                  CFRelease(MutableCopy);
                                  return CopyWithFlexGTCBasedA2B0;
                                }
                              }
                            }
                            CFRelease(v76);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_86:
    free(v81);
    goto LABEL_87;
  }
  return MutableCopy;
}

const ColorSyncProfile *makeCopyWithFlexGTCBasedA2B0(uint64_t a1, CFDictionaryRef theDict, const ColorSyncProfile *MutableCopy)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef Value = (const ColorSyncProfile *)CFDictionaryGetValue(theDict, @"profileToCopy");
  if (!MutableCopy) {
    ColorSyncMutableProfileRef MutableCopy = Value;
  }
  if (MutableCopy)
  {
    CFDictionaryRef v7 = Value;
    if (!ColorSyncProfileIsPQBased(MutableCopy)) {
      return 0;
    }
    unint64_t valuePtr = 0;
    CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"gridPoints");
    uint64_t v50 = a1;
    ColorSyncProfileRef v53 = v7;
    ColorSyncProfileRef prof = MutableCopy;
    if (v8 && (CFNumberRef v9 = v8, v10 = CFGetTypeID(v8), v10 == CFNumberGetTypeID()))
    {
      CFNumberGetValue(v9, kCFNumberLongLongType, &valuePtr);
      unint64_t v11 = valuePtr;
    }
    else
    {
      unint64_t v11 = 13;
    }
    if (v11 <= 5) {
      unint64_t v11 = 5;
    }
    unint64_t v52 = v11;
    unint64_t valuePtr = v11;
    ColorSyncProfileRef v51 = ColorSyncProfileCreateWithName(kColorSyncGenericXYZProfile);
    long long v93 = 0u;
    unsigned long long v92 = 0u;
    long long v67 = 0u;
    unsigned long long v66 = 0u;
    keys = @"com.apple.cmm.FlexGTCTargetHeadroom";
    LODWORD(v79) = 1065353216;
    values = CFNumberCreate(0, kCFNumberFloatType, &v79);
    CFTypeID v12 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    uint64_t v13 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    CFDictionaryRef v14 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *(void *)&unsigned long long v92 = @"com.apple.cmm.ApplyFlexLumaScaling";
    *(void *)&unsigned long long v66 = v14;
    CFDictionaryRef v15 = CFDictionaryCreate(0, (const void **)&v92, (const void **)&v66, 1, v12, v13);
    *((void *)&v92 + 1) = @"com.apple.cmm.ApplyToneMaping";
    *(void *)&long long v93 = @"com.apple.cmm.PQEOTFTable";
    uint64_t v16 = *MEMORY[0x1E4F1CFD0];
    *((void *)&v66 + 1) = v15;
    *(void *)&long long v67 = v16;
    *((void *)&v93 + 1) = @"com.apple.cmm.PQEOTFTableSize";
    LODWORD(v79) = 1024;
    *((void *)&v67 + 1) = CFNumberCreate(0, kCFNumberSInt32Type, &v79);
    CFDictionaryRef v17 = CFDictionaryCreate(0, (const void **)&v92 + 1, (const void **)&v66 + 1, 3, v12, v13);
    CFRelease(values);
    CFRelease(*((CFTypeRef *)&v67 + 1));
    CFRelease(v14);
    CFRelease(v15);
    keys = (void *)kColorSyncProfile;
    unsigned long long v92 = __PAIR128__((unint64_t)kColorSyncTransformTag, (unint64_t)kColorSyncRenderingIntent);
    long long v93 = (unint64_t)kColorSyncExtendedRange;
    values = prof;
    unsigned long long v66 = __PAIR128__((unint64_t)kColorSyncTransformDeviceToPCS, (unint64_t)kColorSyncRenderingIntentUseProfileHeader);
    CFTypeID v18 = (void *)*MEMORY[0x1E4F1CFC8];
    long long v67 = (unint64_t)*MEMORY[0x1E4F1CFC8];
    CFDictionaryRef v19 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 4, v12, v13);
    double v79 = (void *)kColorSyncProfile;
    uint64_t v80 = (uint64_t)kColorSyncRenderingIntent;
    CFStringRef v81 = kColorSyncTransformTag;
    CFStringRef v82 = kColorSyncExtendedRange;
    unint64_t v72 = v51;
    uint64_t v73 = (uint64_t)kColorSyncRenderingIntentUseProfileHeader;
    CFStringRef v74 = kColorSyncTransformPCSToDevice;
    CFDataRef v75 = v18;
    CFDictionaryRef v20 = CFDictionaryCreate(0, (const void **)&v79, (const void **)&v72, 4, v12, v13);
    int v86 = v19;
    uint64_t v87 = (uint64_t)v20;
    CFArrayRef v21 = CFArrayCreate(0, (const void **)&v86, 2, MEMORY[0x1E4F1D510]);
    CFRelease(v19);
    CFRelease(v20);
    ColorSyncTransformRef v22 = ColorSyncTransformCreate(v21, v17);
    CFRelease(v21);
    long double v23 = pow((double)v52, 3.0);
    unint64_t v24 = 3 * (unint64_t)v23;
    unint64_t v25 = (6 * (unint64_t)v23) & 0xFFFFFFFFFFFFFFFCLL;
    CFIndex v26 = (int8x8_t *)malloc_type_calloc(1uLL, v25 + 6298, 0x1F090BuLL);
    if (v26)
    {
      uint64_t v27 = (UInt8 *)v26;
      v26->i32[0] = 541213037;
      v26[1].i16[0] = 771;
      v26[3] = (int8x8_t)0x2000001850;
      uint64_t v28 = (v25 + 6248);
      v64[0] = 0;
      v64[1] = v64;
      v64[2] = 0x2000000000;
      v64[3] = v26 + 4;
      v26[778].i8[2] = v52;
      v26[778].i8[1] = v52;
      v26[778].i8[0] = v52;
      v26[780].i8[0] = 2;
      v63[0] = 0;
      v63[1] = v63;
      v63[2] = 0x2000000000;
      v63[3] = (char *)v26 + 6244;
      v62[0] = 0;
      v62[1] = v62;
      v62[2] = 0x2000000000;
      v62[3] = (char *)v26 + v28;
      v26[3] = vrev32_s8(v26[3]);
      v26[2].i32[0] = bswap32(v28);
      keys = 0;
      *(void *)&unsigned long long v92 = &keys;
      *((void *)&v92 + 1) = 0x6800000000;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v95 = 0u;
      memset(v96, 0, sizeof(v96));
      v60[0] = 0;
      v60[1] = v60;
      v60[2] = 0x2000000000;
      int v61 = 0;
      uint64_t v56 = 0;
      unsigned int v57 = &v56;
      uint64_t v58 = 0x2000000000;
      unsigned int v59 = 0;
      unsigned int v59 = malloc_type_calloc(1uLL, 4 * v24, 0x3C2FD1DBuLL);
      if (v57[3])
      {
        int v86 = (void *)MEMORY[0x1E4F143A8];
        uint64_t v87 = 0x40000000;
        long double v88 = __ColorSyncMakeCopyWithLUTBasedLumaScaling_block_invoke;
        float64x2_t v89 = &unk_1E54D7780;
        p_keys = &keys;
        double v79 = (void *)MEMORY[0x1E4F143A8];
        uint64_t v80 = 0x40000000;
        CFStringRef v81 = (CFStringRef)__ColorSyncMakeCopyWithLUTBasedLumaScaling_block_invoke_2;
        CFStringRef v82 = (CFStringRef)&unk_1E54D77A8;
        CC_LONG v83 = &keys;
        BOOL v84 = v64;
        uint64_t v85 = 1024;
        unint64_t v72 = (void *)MEMORY[0x1E4F143A8];
        uint64_t v73 = 0x40000000;
        CFStringRef v74 = (CFStringRef)__ColorSyncMakeCopyWithLUTBasedLumaScaling_block_invoke_3;
        CFDataRef v75 = &unk_1E54D77D0;
        CFDataRef v76 = &keys;
        CFTypeID v77 = v62;
        BOOL v78 = v60;
        values = (void *)MEMORY[0x1E4F143A8];
        *(void *)&unsigned long long v66 = 0x40000000;
        *((void *)&v66 + 1) = __ColorSyncMakeCopyWithLUTBasedLumaScaling_block_invoke_4;
        *(void *)&long long v67 = &unk_1E54D77F8;
        *((void *)&v67 + 1) = &keys;
        CFDataRef v68 = v63;
        double v70 = v60;
        unint64_t v71 = v52;
        double v69 = &v56;
        if (ColorSyncTransformIterate((uint64_t)v22, v17, (uint64_t)&v86, (uint64_t)&v79, (uint64_t)&v72, (uint64_t)&values))
        {
          CFDataRef v35 = CFDataCreate(0, v27, v25 + 6298);
          ColorSyncMutableProfileRef MutableCopy = ColorSyncProfileCreateMutableCopy(prof);
          ColorSyncProfileSetTag(MutableCopy, @"A2B0", v35);
          if (v35) {
            CFRelease(v35);
          }
          int v44 = v53;
          if (!ColorSyncProfileVerify(MutableCopy, v36, v37))
          {
            ColorSyncLog(2, (uint64_t)"%s failed to create a valid profile", v38, v39, v40, v41, v42, v43, (char)"ColorSyncMakeCopyWithLUTBasedLumaScaling");
            if (MutableCopy)
            {
              CFRelease(MutableCopy);
              ColorSyncMutableProfileRef MutableCopy = 0;
            }
          }
        }
        else
        {
          ColorSyncLog(2, (uint64_t)"ColorSyncTransformIterate falied in %s", v29, v30, v31, v32, v33, v34, (char)"ColorSyncMakeCopyWithLUTBasedLumaScaling");
          ColorSyncMutableProfileRef MutableCopy = 0;
          int v44 = v53;
        }
        free((void *)v57[3]);
      }
      else
      {
        ColorSyncMutableProfileRef MutableCopy = 0;
        int v44 = v53;
      }
      free(v27);
      _Block_object_dispose(&v56, 8);
      _Block_object_dispose(v60, 8);
      _Block_object_dispose(&keys, 8);
      _Block_object_dispose(v62, 8);
      _Block_object_dispose(v63, 8);
      _Block_object_dispose(v64, 8);
      if (!v22) {
        goto LABEL_27;
      }
    }
    else
    {
      ColorSyncMutableProfileRef MutableCopy = 0;
      int v44 = v53;
      if (!v22) {
        goto LABEL_27;
      }
    }
    CFRelease(v22);
LABEL_27:
    if (v17) {
      CFRelease(v17);
    }
    if (MutableCopy)
    {
      CFDataRef v45 = ColorSyncProfileCopyHeader(v44);
      if (v45)
      {
        CFDataRef v46 = v45;
        CFTypeID v47 = CFGetTypeID(v45);
        if (v47 == CFDataGetTypeID())
        {
          vm_address_t BytePtr = CFDataGetBytePtr(v46);
          if (BytePtr)
          {
            if (*((_DWORD *)BytePtr + 9) == 1633907568) {
              *(_OWORD *)(v50 + 8) = *(_OWORD *)(BytePtr + 8);
            }
          }
        }
        CFRelease(v46);
      }
    }
  }
  return MutableCopy;
}

ColorSyncProfile *makeXYZProfile(uint64_t a1)
{
  CFStringRef v2 = (ColorSyncProfile *)create(0, 1, 0);
  if (v2)
  {
    qmemcpy((void *)(a1 + 12), "caps ZYX ZYX", 12);
    uint64_t v5 = 846489197;
    int v6 = 131843;
    long long v7 = xmmword_18BE634D0;
    long long v8 = xmmword_18BE634D0;
    long long v10 = xmmword_18BE63AF8;
    long long v11 = unk_18BE63B08;
    long long v12 = xmmword_18BE63B18;
    uint64_t v9 = 0x200020000000100;
    unint64_t v14 = 0xFFFF0000FFFF0000;
    long long v13 = unk_18BE63B28;
    CFDataRef v3 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)&v5, 124, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    ColorSyncProfileSetTag(v2, @"A2B0", v3);
    ColorSyncProfileSetTag(v2, @"B2A0", v3);
    CFRelease(v3);
    ColorSyncProfileSetDescriptionTag(v2, @"Custom XYZ Profile", 0);
    addXYZTag(v2, @"wtpt", *(void *)(a1 + 68), *(_DWORD *)(a1 + 76));
  }
  return v2;
}

ColorSyncProfile *makeLabProfile(uint64_t a1, const __CFDictionary *a2)
{
  CFTypeID v4 = (ColorSyncProfile *)create(0, 1, 0);
  if (v4)
  {
    qmemcpy((void *)(a1 + 12), "caps baL baL", 12);
    uint64_t v11 = 846489197;
    int v12 = 131843;
    long long v13 = xmmword_18BE634D0;
    long long v14 = xmmword_18BE634D0;
    long long v16 = xmmword_18BE63AF8;
    long long v17 = unk_18BE63B08;
    long long v18 = xmmword_18BE63B18;
    uint64_t v15 = 0x200020000000100;
    unint64_t v20 = 0xFFFF0000FFFF0000;
    long long v19 = unk_18BE63B28;
    CFDataRef v5 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)&v11, 124, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    ColorSyncProfileSetTag(v4, @"A2B0", v5);
    ColorSyncProfileSetTag(v4, @"B2A0", v5);
    CFRelease(v5);
    ColorSyncProfileSetDescriptionTag(v4, @"Custom Lab Profile", 0);
    unint64_t v6 = icXYZFromDictionary(a2, @"wtpt");
    addXYZTag(v4, @"wtpt", v6, v7);
    unint64_t v8 = icXYZFromDictionary(a2, @"bkpt");
    addXYZTag(v4, @"bkpt", v8, v9);
  }
  return v4;
}

unint64_t verified_float_from_dictionary(const __CFDictionary *a1, const void *a2, _DWORD *a3)
{
  unint64_t result = (unint64_t)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    CFNumberRef v5 = (const __CFNumber *)result;
    CFTypeID v6 = CFGetTypeID((CFTypeRef)result);
    if (v6 == CFNumberGetTypeID())
    {
      unint64_t result = CFNumberIsFloatType(v5);
      if (result)
      {
        int valuePtr = 0;
        int Value = CFNumberGetValue(v5, kCFNumberFloatType, &valuePtr);
        unint64_t result = Value != 0;
        if (a3)
        {
          if (Value) {
            *a3 = valuePtr;
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t classSignatureFromClassString(const void *a1)
{
  uint64_t v2 = 1935896178;
  CFTypeID v3 = CFGetTypeID(a1);
  if (v3 == CFStringGetTypeID())
  {
    if (CFEqual(a1, kColorSyncSigDisplayClass))
    {
      return 1835955314;
    }
    else if (CFEqual(a1, kColorSyncSigOutputClass))
    {
      return 1886549106;
    }
    else if (CFEqual(a1, kColorSyncSigLinkClass))
    {
      return 1818848875;
    }
    else if (CFEqual(a1, kColorSyncSigAbstractClass))
    {
      return 1633842036;
    }
    else if (CFEqual(a1, kColorSyncSigColorSpaceClass))
    {
      return 1936744803;
    }
    else if (CFEqual(a1, kColorSyncSigColorSpaceClass))
    {
      return 1852662636;
    }
    else
    {
      return 1935896178;
    }
  }
  return v2;
}

void tag_adder(CFStringRef signature, CFDataRef data, ColorSyncMutableProfileRef prof)
{
}

uint64_t gammaTableFromDictionary(const __CFDictionary *a1, const void *a2)
{
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(a1, a2);
  if (!Value) {
    return 0;
  }
  CFDataRef v3 = Value;
  CFTypeID v4 = CFGetTypeID(Value);
  if (v4 != CFDataGetTypeID() || (CFDataGetLength(v3) & 1) != 0) {
    return 0;
  }
  CFIndex Length = CFDataGetLength(v3);
  if (Length >= 0) {
    uint64_t v6 = Length;
  }
  else {
    uint64_t v6 = Length + 1;
  }
  uint64_t v7 = v6 >> 1;
  CFDataGetBytePtr(v3);
  return v7;
}

float _LabToLabValsProc(float *a1, float *a2, float *a3, double *a4)
{
  double v8 = a4[8];
  double v9 = a4[9];
  if (v8 == 0.0 && v9 == 0.0)
  {
    long double v10 = *a3;
    float v11 = 1.0;
  }
  else
  {
    float v12 = v8;
    float v13 = v9;
    long double v10 = *a3;
    float v14 = atan2(v10, *a2) * 57.2957795;
    BOOL v15 = v14 < v12;
    if (v14 > v13) {
      BOOL v15 = 1;
    }
    if (v12 >= v13) {
      BOOL v15 = 0;
    }
    BOOL v16 = v12 > v13;
    if (v14 >= v12) {
      BOOL v16 = 0;
    }
    if (v14 <= v13) {
      BOOL v16 = 0;
    }
    float v11 = 1.0;
    if (v16 || v15) {
      float v11 = 0.0;
    }
  }
  float v17 = *a1 / 100.0;
  float v18 = (float)(v17 * 2.0) + -1.0;
  float v19 = (float)(v17 * -2.0) + 2.0;
  if (v17 < 0.5) {
    float v19 = v17 + v17;
  }
  float v20 = (float)(v17 * -2.0) + 1.0;
  if (v18 < 0.0) {
    float v18 = 0.0;
  }
  if (v19 < 0.0) {
    float v19 = 0.0;
  }
  if (v20 < 0.0) {
    float v20 = 0.0;
  }
  double v21 = a4[6];
  float v22 = v10 + (float)(v11 * v18) * a4[5];
  float v23 = v22 + (float)(v11 * v19) * a4[4];
  float v24 = v23 + (float)(v11 * v20) * a4[3];
  *a3 = v24;
  float v25 = *a2;
  float v26 = sqrtf((float)(v24 * v24) + (float)(v25 * v25));
  double v27 = v11;
  float v28 = a4[7] * v11;
  if (v28 <= 0.0)
  {
    double v30 = (v28 / 100.0 + 1.0) * v26;
  }
  else
  {
    if (v26 >= 130.0) {
      goto LABEL_27;
    }
    float v29 = v28 / 50.0 + 1.0;
    double v30 = pow(v26 / -130.0 + 1.0, v29) * -130.0 + 130.0;
  }
  float v26 = v30;
LABEL_27:
  float v31 = 0.0 - v27 * *a4;
  float v32 = 50.0 - v27 * a4[1];
  float v33 = 100.0 - v27 * a4[2];
  float v34 = v33 - v31;
  double v35 = log(1.0 / (float)((float)(v32 - v31) / (float)(v33 - v31)));
  float v36 = (float)(*a1 - v31) / v34;
  float v37 = 0.0;
  if (v36 >= 0.0)
  {
    if (v36 <= 1.0)
    {
      float v38 = 0.693147181 / v35;
      float v37 = pow(v36, v38) * 100.0;
    }
    else
    {
      float v37 = 100.0;
    }
  }
  *a1 = v37;
  float v39 = atan2(v24, v25) * 57.2957795;
  float v40 = v39 + v27 * v21;
  float v41 = v40 * 0.0174532925;
  __double2 v42 = __sincos_stret(v41);
  float v43 = v42.__cosval * v26;
  *a2 = v43;
  float result = v42.__sinval * v26;
  *a3 = result;
  return result;
}

CFStringRef colorSyncTransformCopyDebugDescription(uint64_t a1)
{
  if (a1)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      CFArrayRef v3 = *(const __CFArray **)(a1 + 120);
      if (v3)
      {
        v9.int64x2_t length = CFArrayGetCount(v3);
        v9.location = 0;
        CFArrayApplyFunction(*(CFArrayRef *)(a1 + 120), v9, (CFArrayApplierFunction)description_adder, Mutable);
      }
    }
    CFAllocatorRef v4 = CFGetAllocator((CFTypeRef)a1);
    CFStringRef v5 = CFStringCreateWithFormat(v4, 0, @"<ColorSyncTransform %p;cmm:%@;\nproperties:%@;\noptions:%@;\nsequence:%@>",
           a1,
           *(void *)(a1 + 80),
           *(void *)(a1 + 112),
           *(void *)(a1 + 128),
           Mutable);
    if (Mutable) {
      CFRelease(Mutable);
    }
    return v5;
  }
  else
  {
    CFAllocatorRef v7 = CFGetAllocator(0);
    return CFStringCreateWithFormat(v7, 0, @"<NULL ColorSyncTransform>");
  }
}

void description_adder(const void *a1, __CFArray *a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 == CFDictionaryGetTypeID())
  {
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)a1);
    if (MutableCopy)
    {
      uint64_t v6 = MutableCopy;
      CFDataRef Value = (const ColorSyncProfile *)CFDictionaryGetValue(MutableCopy, kColorSyncProfile);
      if (Value)
      {
        CFStringRef v8 = ColorSyncProfileCopyDescriptionString(Value);
        if (v8)
        {
          CFStringRef v9 = v8;
          CFDictionarySetValue(v6, kColorSyncProfile, v8);
          CFRelease(v9);
          CFArrayAppendValue(a2, v6);
        }
      }
      CFRelease(v6);
    }
  }
}

CFStringRef colorSyncTransformCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, @"<ColorSyncTransform %p>", a1);
}

uint64_t colorSyncTransformEqual(void *cf, void *a2)
{
  if (cf == a2) {
    return 1;
  }
  uint64_t result = 0;
  if (!cf || !a2) {
    return result;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (ColorSyncTransformGetTypeID_predicate != -1)
  {
    CFTypeID v15 = v5;
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_34);
    CFTypeID v5 = v15;
  }
  if (v5 != ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID) {
    return 0;
  }
  CFTypeID v6 = CFGetTypeID(a2);
  if (ColorSyncTransformGetTypeID_predicate != -1)
  {
    CFTypeID v16 = v6;
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_34);
    CFTypeID v6 = v16;
  }
  if (v6 != ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID) {
    return 0;
  }
  CFAllocatorRef v7 = (const void *)cf[15];
  CFStringRef v8 = (const void *)a2[15];
  if (v7)
  {
    if (!v8) {
      return 0;
    }
  }
  else if (v8)
  {
    return 0;
  }
  CFStringRef v9 = (const void *)cf[14];
  uint64_t v10 = a2[14];
  if (v9)
  {
    if (!v10) {
      return 0;
    }
  }
  else if (v10)
  {
    return 0;
  }
  uint64_t v11 = a2[16];
  if (cf[16])
  {
    if (v11) {
      goto LABEL_21;
    }
    return 0;
  }
  if (v11) {
    return 0;
  }
LABEL_21:
  if (v7 && v8)
  {
    uint64_t result = CFEqual(v7, v8);
    if (!result) {
      return result;
    }
    CFStringRef v9 = (const void *)cf[14];
  }
  if (!v9 || (v12 = (const void *)a2[14]) == 0 || (uint64_t result = CFEqual(v9, v12), result))
  {
    float v13 = (const void *)cf[16];
    if (!v13) {
      return 1;
    }
    float v14 = (const void *)a2[16];
    if (!v14) {
      return 1;
    }
    uint64_t result = CFEqual(v13, v14);
    if (result) {
      return 1;
    }
  }
  return result;
}

void ColorSyncTransformSetProperty(ColorSyncTransformRef transform, CFTypeRef key, CFTypeRef property)
{
  if (!key
    || (CFTypeID v6 = CFGetTypeID(key), v6 != CFStringGetTypeID())
    || !CFStringHasPrefix((CFStringRef)key, @"com.apple.cmm")
    && !CFEqual(key, kColorSyncTransformCreator)
    && !CFEqual(key, kColorSyncTransformSrcSpace)
    && !CFEqual(key, kColorSyncTransformDstSpace))
  {
    ColorSyncTransformInternalSetProperty(transform, key, property);
  }
}

void *ColorSyncTransformGetSrcComponentCount(void *result)
{
  if (result)
  {
    double v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (ColorSyncTransformGetTypeID_predicate != -1) {
      dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_34);
    }
    if (v2 == ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID) {
      return (void *)v1[11];
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t ColorSyncTransformGetDstComponentCount(uint64_t result)
{
  if (result) {
    return *(void *)(result + 96);
  }
  return result;
}

BOOL ColorSyncTransformConvert(ColorSyncTransformRef transform, size_t width, size_t height, void *dst, ColorSyncDataDepth dstDepth, ColorSyncDataLayout dstLayout, size_t dstBytesPerRow, const void *src, ColorSyncDataDepth srcDepth, ColorSyncDataLayout srcLayout, size_t srcBytesPerRow, CFDictionaryRef options)
{
  v25[1] = *MEMORY[0x1E4F143B8];
  if (!transform) {
    goto LABEL_11;
  }
  uint64_t v14 = *(void *)&dstLayout;
  uint64_t v15 = *(void *)&dstDepth;
  CFTypeID v20 = CFGetTypeID(transform);
  if (ColorSyncTransformGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_34);
  }
  if (v20 == ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID)
  {
    if ((v15 != 8 || !v14) && (srcDepth != kColorSync10BitInteger || !srcLayout))
    {
      float v24 = src;
      v25[0] = dst;
      double v21 = *(uint64_t (**)(ColorSyncTransformRef, size_t, size_t, uint64_t, void *, uint64_t, uint64_t, size_t, uint64_t, const void **, unint64_t, size_t, CFDictionaryRef))(*((void *)transform + 10) + 56);
      if (v21) {
        return v21(transform, width, height, 1, v25, v15, v14, dstBytesPerRow, 1, &v24, __PAIR64__(srcLayout, srcDepth), srcBytesPerRow, options);
      }
    }
  }
  else
  {
LABEL_11:
    ColorSyncLog(2, (uint64_t)"ColorSync: ColorSyncTransform is not valid\n", height, (uint64_t)dst, *(uint64_t *)&dstDepth, *(uint64_t *)&dstLayout, dstBytesPerRow, (uint64_t)src, v23);
  }
  return 0;
}

uint64_t ColorSyncTransformCreateWithName()
{
  if (createRuntimeInstance(0x52474220u, 0x52474220u, 0))
  {
    ColorSyncCMMCreateAppleCMM();
    operator new();
  }
  return 0;
}

void sub_18BE37D90(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    CFAllocatorRef v4 = *(void ***)(v2 - 88);
    if (v4)
    {
      CFTypeID v5 = *v4;
      if (*v4)
      {
        do
        {
          CFTypeID v6 = (void *)*v5;
          free(v5);
          CFTypeID v5 = v6;
        }
        while (v6);
      }
    }
  }
  else
  {
    CFAllocatorRef v7 = *(void ***)(v2 - 88);
    if (v7)
    {
      CFStringRef v8 = *v7;
      if (*v7)
      {
        do
        {
          CFStringRef v9 = (void *)*v8;
          free(v8);
          CFStringRef v8 = v9;
        }
        while (v9);
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x18BE37CA0);
}

void sub_18BE37E00(_Unwind_Exception *a1)
{
  CMMMemMgr::ReleaseMemList((void **)(v1 - 88));
  _Unwind_Resume(a1);
}

CFTypeRef ColorSyncCreateCodeFragmentPriv(const void *a1, uint64_t a2)
{
  pthread_mutex_lock(&ColorSyncCreateCodeFragmentPriv_mtx);
  BOOL v4 = 0;
  if (a1 && ColorSyncCreateCodeFragmentPriv_lastSequence) {
    BOOL v4 = CFEqual(a1, (CFTypeRef)ColorSyncCreateCodeFragmentPriv_lastSequence) != 0;
  }
  if (a2 | ColorSyncCreateCodeFragmentPriv_lastOptions)
  {
    BOOL v5 = 0;
    if (a2 && ColorSyncCreateCodeFragmentPriv_lastOptions) {
      BOOL v5 = CFEqual((CFTypeRef)a2, (CFTypeRef)ColorSyncCreateCodeFragmentPriv_lastOptions) != 0;
    }
  }
  else
  {
    BOOL v5 = 1;
  }
  if (!v4) {
    goto LABEL_14;
  }
  if (!ColorSyncCreateCodeFragmentPriv_lastCodeFragment) {
    BOOL v5 = 0;
  }
  if (!v5)
  {
LABEL_14:
    if (ColorSyncCreateCodeFragmentPriv_lastSequence) {
      CFRelease((CFTypeRef)ColorSyncCreateCodeFragmentPriv_lastSequence);
    }
    ColorSyncCreateCodeFragmentPriv_lastSequence = (uint64_t)a1;
    if (a1) {
      CFRetain(a1);
    }
    if (ColorSyncCreateCodeFragmentPriv_lastOptions) {
      CFRelease((CFTypeRef)ColorSyncCreateCodeFragmentPriv_lastOptions);
    }
    ColorSyncCreateCodeFragmentPriv_lastOptions = a2;
    if (a2) {
      CFRetain((CFTypeRef)a2);
    }
    if (ColorSyncCreateCodeFragmentPriv_lastCodeFragment) {
      CFRelease((CFTypeRef)ColorSyncCreateCodeFragmentPriv_lastCodeFragment);
    }
    ColorSyncTransformRef v7 = ColorSyncTransformCreate((CFArrayRef)a1, (CFDictionaryRef)a2);
    ColorSyncTransformRef v8 = v7;
    if (a2)
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, kColorSyncTransformCodeFragmentType);
      BOOL v10 = Value != 0;
      if (Value) {
        CFStringRef v11 = Value;
      }
      else {
        CFStringRef v11 = kColorSyncTransformParametricConversionData;
      }
      float v12 = (const void *)ColorSyncTransformInternalCopyProperty((uint64_t)v8, v11, a2);
    }
    else
    {
      float v12 = (const void *)ColorSyncTransformInternalCopyProperty((uint64_t)v7, kColorSyncTransformParametricConversionData, 0);
      BOOL v10 = 0;
    }
    ColorSyncCreateCodeFragmentPriv_lastCodeFragment = (uint64_t)v12;
    if (!v10 && !v12)
    {
      float v12 = (const void *)ColorSyncTransformInternalCopyProperty((uint64_t)v8, kColorSyncTransformSimplifiedConversionData, a2);
      ColorSyncCreateCodeFragmentPriv_lastCodeFragment = (uint64_t)v12;
    }
    if (v12)
    {
      CFTypeRef v6 = CFRetain(v12);
      if (!v8) {
        goto LABEL_36;
      }
    }
    else
    {
      CFTypeRef v6 = 0;
      if (!v8) {
        goto LABEL_36;
      }
    }
    CFRelease(v8);
    goto LABEL_36;
  }
  CFTypeRef v6 = CFRetain((CFTypeRef)ColorSyncCreateCodeFragmentPriv_lastCodeFragment);
LABEL_36:
  pthread_mutex_unlock(&ColorSyncCreateCodeFragmentPriv_mtx);
  return v6;
}

uint64_t ColorSyncDefaultsGetBoolean(const char *a1, char *a2)
{
  BOOL v4 = getenv(a1);
  if (v4)
  {
    CFStringRef v5 = CFStringCreateWithCString(0, v4, 0x600u);
    if (v5) {
      goto LABEL_3;
    }
    return 0;
  }
  CFStringRef v10 = CFStringCreateWithCString(0, a1, 0x600u);
  uint64_t v9 = (uint64_t)v10;
  if (v10)
  {
    CFStringRef v11 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
    CFStringRef v12 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
    CFStringRef v5 = (const __CFString *)CFPreferencesCopyValue(v10, (CFStringRef)*MEMORY[0x1E4F1D3D8], (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
    if (!v5)
    {
      CFStringRef v5 = (const __CFString *)CFPreferencesCopyValue((CFStringRef)v9, (CFStringRef)*MEMORY[0x1E4F1D3B8], v11, v12);
      if (!v5) {
        CFStringRef v5 = (const __CFString *)CFPreferencesCopyValue((CFStringRef)v9, @"com.apple.ColorSync", v11, v12);
      }
    }
    CFRelease((CFTypeRef)v9);
    if (v5)
    {
LABEL_3:
      CFTypeID v6 = CFGetTypeID(v5);
      if (v6 == CFBooleanGetTypeID())
      {
        if (a2)
        {
          BOOL v7 = CFBooleanGetValue((CFBooleanRef)v5) == 0;
LABEL_6:
          char v8 = !v7;
          *a2 = v8;
        }
      }
      else
      {
        if (v6 == CFStringGetTypeID())
        {
          if (CFStringCompare(v5, @"Yes", 1uLL) == kCFCompareEqualTo
            || CFStringCompare(v5, @"True", 1uLL) == kCFCompareEqualTo
            || CFStringCompare(v5, @"1", 1uLL) == kCFCompareEqualTo)
          {
            uint64_t v9 = 1;
            if (a2) {
              *a2 = 1;
            }
            goto LABEL_31;
          }
          if (CFStringCompare(v5, @"No", 1uLL) == kCFCompareEqualTo
            || CFStringCompare(v5, @"False", 1uLL) == kCFCompareEqualTo
            || CFStringCompare(v5, @"0", 1uLL) == kCFCompareEqualTo)
          {
            if (a2) {
              *a2 = 0;
            }
            goto LABEL_10;
          }
        }
        if (v6 != CFNumberGetTypeID()
          || (int valuePtr = 0, !CFNumberGetValue((CFNumberRef)v5, kCFNumberIntType, &valuePtr)))
        {
          uint64_t v9 = 0;
          goto LABEL_31;
        }
        if (a2)
        {
          BOOL v7 = valuePtr == 0;
          goto LABEL_6;
        }
      }
LABEL_10:
      uint64_t v9 = 1;
LABEL_31:
      CFRelease(v5);
      return v9;
    }
    return 0;
  }
  return v9;
}

CFStringRef colorSyncProfileCopyDebugDescription(const ColorSyncProfile *a1)
{
  if (a1)
  {
    CFStringRef v2 = ColorSyncProfileCopyDescriptionString(a1);
    if (v2)
    {
      CFStringRef v3 = v2;
      CFDataRef v4 = ColorSyncProfileCopyHeader(a1);
      CFDataRef v5 = v4;
      if (v4 && (CFTypeID v6 = CFGetTypeID(v4), v6 == CFDataGetTypeID()) && (unint64_t)CFDataGetLength(v5) >= 0x80)
      {
        CFMutableArrayRef Mutable = CFStringCreateMutable(0, 0);
        if (Mutable)
        {
          vm_address_t BytePtr = CFDataGetBytePtr(v5);
          CFStringAppendFormat(Mutable, 0, @"\n\tProfile size:\t%d", *(unsigned int *)BytePtr);
          CFStringAppendFormat(Mutable, 0, @"\n\tVersion:\t\t%x", *((unsigned int *)BytePtr + 2));
          int v9 = *((_DWORD *)BytePtr + 3);
          CFStringRef v10 = @"???";
          if (v9 <= 1852662635)
          {
            switch(v9)
            {
              case 1633842036:
                CFStringRef v10 = @"Abstract profile";
                break;
              case 1818848875:
                CFStringRef v10 = @"Link profile";
                break;
              case 1835955314:
                CFStringRef v10 = @"Display profile";
                break;
            }
          }
          else if (v9 > 1935896177)
          {
            if (v9 == 1936744803)
            {
              CFStringRef v10 = @"Color Space profile";
            }
            else if (v9 == 1935896178)
            {
              CFStringRef v10 = @"Input profile";
            }
          }
          else if (v9 == 1852662636)
          {
            CFStringRef v10 = @"Named Color profile";
          }
          else if (v9 == 1886549106)
          {
            CFStringRef v10 = @"Output profile";
          }
          CFStringAppendFormat(Mutable, 0, @"\n\tClass:\t\t\t%@", v10);
          float v17 = color_space(*((_DWORD *)BytePtr + 4));
          CFStringAppendFormat(Mutable, 0, @"\n\tColor Space:\t%@", v17);
          float v18 = color_space(*((_DWORD *)BytePtr + 5));
          CFStringAppendFormat(Mutable, 0, @"\n\tPCS:\t\t\t%@", v18);
        }
      }
      else
      {
        CFMutableArrayRef Mutable = 0;
      }
      CFArrayRef v13 = ColorSyncProfileCopyTagSignatures(a1);
      CFAllocatorRef v14 = CFGetAllocator(a1);
      CFStringRef v15 = CFStringCreateWithFormat(v14, 0, @"<ColorSyncProfile %p\nheader:%@\ntags:\n%@;\ntagCopies:\n%@;\ndata: %@;\nurl:  %@;\ndesc: %@>",
              a1,
              Mutable,
              v13,
              *((void *)a1 + 12),
              *((void *)a1 + 13),
              *((void *)a1 + 15),
              v3);
      if (v5) {
        CFRelease(v5);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      if (v13) {
        CFRelease(v13);
      }
      CFRelease(v3);
      return v15;
    }
    CFAllocatorRef v11 = CFGetAllocator(a1);
    CFStringRef v12 = @"<NULL ColorSyncProfile description>";
  }
  else
  {
    CFAllocatorRef v11 = CFGetAllocator(0);
    CFStringRef v12 = @"<NULL ColorSyncProfile>";
  }

  return CFStringCreateWithFormat(v11, 0, v12);
}

__CFString *color_space(int a1)
{
  uint64_t v1 = @"???";
  if (a1 <= 1129142602)
  {
    if (a1 > 943934545)
    {
      int v2 = 1111706705;
      CFDataRef v4 = @"11 Color";
      CFStringRef v15 = @"CMY";
      if (a1 != 1129142560) {
        CFStringRef v15 = @"???";
      }
      if (a1 == 1128483922) {
        CFTypeID v16 = @"12 Color";
      }
      else {
        CFTypeID v16 = v15;
      }
      if (a1 != 1111706706) {
        CFDataRef v4 = v16;
      }
      int v7 = 943934546;
      char v8 = @"2 Color";
      int v9 = @"8 Color";
      int v10 = 960711762;
      BOOL v11 = a1 == 1094929490;
      CFStringRef v12 = @"10 Color";
    }
    else
    {
      int v2 = 893602897;
      CFDataRef v4 = @"5 Color";
      CFDataRef v5 = @"7 Color";
      if (a1 != 927157330) {
        CFDataRef v5 = @"???";
      }
      if (a1 == 910380114) {
        CFTypeID v6 = @"6 Color";
      }
      else {
        CFTypeID v6 = v5;
      }
      if (a1 != 893602898) {
        CFDataRef v4 = v6;
      }
      int v7 = 843271250;
      char v8 = @"2 Color";
      int v9 = @"3 Color";
      int v10 = 860048466;
      BOOL v11 = a1 == 876825682;
      CFStringRef v12 = @"4 Color";
    }
    goto LABEL_39;
  }
  if (a1 <= 1213421087)
  {
    int v2 = 1178815569;
    CFDataRef v4 = @"15 Color";
    CFArrayRef v13 = @"HLS";
    if (a1 != 1212961568) {
      CFArrayRef v13 = @"???";
    }
    if (a1 == 1196573017) {
      CFAllocatorRef v14 = @"GRAY";
    }
    else {
      CFAllocatorRef v14 = v13;
    }
    if (a1 != 1178815570) {
      CFDataRef v4 = v14;
    }
    int v7 = 1129142603;
    char v8 = @"CMYK";
    int v9 = @"13 Color";
    int v10 = 1145261138;
    BOOL v11 = a1 == 1162038354;
    CFStringRef v12 = @"14 Color";
LABEL_39:
    if (v11) {
      uint64_t v1 = v12;
    }
    if (a1 == v10) {
      uint64_t v1 = v9;
    }
    if (a1 == v7) {
      uint64_t v1 = v8;
    }
    goto LABEL_45;
  }
  if (a1 > 1380401695)
  {
    int v2 = 1497588337;
    CFStringRef v3 = @"Yxy";
    if (a1 != 1501067552) {
      CFStringRef v3 = @"???";
    }
    if (a1 == 1497588338) {
      CFDataRef v4 = @"YCbCr";
    }
    else {
      CFDataRef v4 = v3;
    }
    if (a1 == 1482250784) {
      uint64_t v1 = @"XYZ";
    }
    if (a1 == 1380401696) {
      uint64_t v1 = @"RGB";
    }
LABEL_45:
    if (a1 <= v2) {
      return v1;
    }
    else {
      return v4;
    }
  }
  if (a1 == 1282766368) {
    uint64_t v1 = @"Luv";
  }
  if (a1 == 1281450528) {
    uint64_t v1 = @"Lab";
  }
  if (a1 == 1213421088) {
    return @"HSV";
  }
  else {
    return v1;
  }
}

int8x16_t ColorSyncSwapProfileHeader(uint64_t a1)
{
  *(int8x16_t *)a1 = vrev32q_s8(*(int8x16_t *)a1);
  int8x8_t v1 = vrev16_s8(*(int8x8_t *)(a1 + 24));
  *(int8x8_t *)(a1 + 16) = vrev32_s8(*(int8x8_t *)(a1 + 16));
  *(int8x8_t *)(a1 + 24) = v1;
  *(_WORD *)(a1 + 32) = bswap32(*(unsigned __int16 *)(a1 + 32)) >> 16;
  *(_WORD *)(a1 + 34) = bswap32(*(unsigned __int16 *)(a1 + 34)) >> 16;
  *(int8x16_t *)(a1 + 36) = vrev32q_s8(*(int8x16_t *)(a1 + 36));
  *(int8x16_t *)(a1 + 52) = vrev32q_s8(*(int8x16_t *)(a1 + 52));
  int8x16_t result = vrev32q_s8(*(int8x16_t *)(a1 + 68));
  *(int8x16_t *)(a1 + 68) = result;
  return result;
}

CFStringRef copy_descriptionFromDESCTag(const __CFData *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  vm_address_t BytePtr = CFDataGetBytePtr(a1);
  unint64_t Length = CFDataGetLength(a1);
  if (Length < 0xD) {
    return 0;
  }
  unint64_t v8 = Length;
  unsigned int v49 = *((_DWORD *)BytePtr + 2);
  CFIndex v9 = bswap32(v49);
  int v10 = BytePtr + 12;
  if (Length < v9 + 12) {
    CFIndex v11 = 0;
  }
  else {
    CFIndex v11 = v9;
  }
  if (Length < v9 + 12) {
    int v10 = 0;
  }
  CFUUIDRef v48 = v10;
  CFIndex v12 = v11 + 12;
  if (Length >= v11 + 16) {
    CFIndex v12 = v11 + 16;
  }
  if (Length >= v12 + 4)
  {
    unint64_t v13 = bswap32(*(_DWORD *)&BytePtr[v12]);
    v12 += 4;
  }
  else
  {
    unint64_t v13 = 0;
  }
  unint64_t v14 = v12 + 2 * v13;
  CFStringRef v15 = &BytePtr[v12];
  if (Length >= v14) {
    unint64_t v16 = v13;
  }
  else {
    unint64_t v16 = 0;
  }
  if (Length >= v14) {
    float v17 = &BytePtr[v12];
  }
  else {
    float v17 = 0;
  }
  unint64_t v18 = v12 + 2 * v16;
  if (Length >= v18 + 2)
  {
    CFStringEncoding v50 = bswap32(*(unsigned __int16 *)&BytePtr[v18]) >> 16;
    v18 += 2;
  }
  else
  {
    CFStringEncoding v50 = 0;
  }
  unint64_t v51 = __PAIR64__(a3, a2);
  if (Length <= v18)
  {
    LOBYTE(v20) = 0;
  }
  else
  {
    int v19 = BytePtr[v18++];
    BOOL v26 = v19 != 0;
    unsigned int v20 = v19 - 1;
    if (!v26) {
      unsigned int v20 = 0;
    }
    if (v20 >= 0x43) {
      LOBYTE(v20) = 67;
    }
  }
  CFStringRef v21 = 0;
  unint64_t v22 = v18 + v20;
  char v23 = &BytePtr[v18];
  if (Length >= v22) {
    char v24 = v20;
  }
  else {
    char v24 = 0;
  }
  if (Length >= v22) {
    float v25 = v23;
  }
  else {
    float v25 = 0;
  }
  if (v17) {
    BOOL v26 = v16 >= 2;
  }
  else {
    BOOL v26 = 0;
  }
  if (v26)
  {
    bzero(chars, 0x802uLL);
    uint64_t v27 = 1024;
    if (v16 < 0x400) {
      uint64_t v27 = v16;
    }
    int v28 = *(unsigned __int16 *)v17;
    if (v28 == 65279)
    {
      CFIndex v29 = v27 - 2;
      __memcpy_chk();
    }
    else if (v28 == 65534)
    {
      CFIndex v29 = v27 - 2;
      if (v27 != 2)
      {
        double v30 = (unsigned __int16 *)(v17 + 2);
        float v31 = chars;
        CFIndex v32 = v29;
        do
        {
          unsigned int v33 = *v30++;
          *v31++ = bswap32(v33) >> 16;
          --v32;
        }
        while (v32);
      }
    }
    else
    {
      CFIndex v29 = v27 - 1;
      float v34 = chars;
      CFIndex v35 = v29;
      do
      {
        unsigned int v36 = *(unsigned __int16 *)v15;
        v15 += 2;
        *v34++ = bswap32(v36) >> 16;
        --v35;
      }
      while (v35);
    }
    CFStringRef v21 = CFStringCreateWithCharacters(0, (const UniChar *)chars, v29);
  }
  if (v24 && !v21 && v25)
  {
    if (v50 != 1536 && v50)
    {
      CFStringRef v21 = 0;
    }
    else
    {
      memset(v66, 0, sizeof(v66));
      long long v65 = 0u;
      long long v64 = 0u;
      long long v63 = 0u;
      long long v62 = 0u;
      long long v61 = 0u;
      long long v60 = 0u;
      long long v59 = 0u;
      long long v58 = 0u;
      long long v57 = 0u;
      long long v56 = 0u;
      long long v55 = 0u;
      long long v54 = 0u;
      long long v53 = 0u;
      *(_OWORD *)&chars[1] = 0u;
      chars[0] = v24;
      __memcpy_chk();
      CFStringRef v21 = CFStringCreateWithPascalString(0, chars, v50);
    }
  }
  if (v8 < v9 + 12 || !v11 || v21) {
    goto LABEL_75;
  }
  float v37 = (UniChar *)malloc_type_malloc(2 * v11, 0x1000040BDFB0063uLL);
  if (!v37) {
    return 0;
  }
  float v38 = v37;
  if (v49)
  {
    float v39 = v48 - 1;
    LOBYTE(v40) = 1;
    CFIndex v41 = v9;
    do
    {
      int v42 = v39[v41];
      uint64_t v40 = (v39[v41] == 0) & v40;
      if (v40) {
        __int16 v43 = v39[v41];
      }
      else {
        __int16 v43 = 63;
      }
      v9 -= v40;
      if ((v42 - 127) < 0xA1u && v42 != 0) {
        LOWORD(v42) = v43;
      }
      v37[--v41] = v42;
    }
    while (v41);
  }
  if (!v9)
  {
    *float v37 = 63;
    CFIndex v9 = 1;
  }
  CFStringRef v21 = CFStringCreateWithCharacters(0, v37, v9);
  free(v38);
LABEL_75:
  if (v21)
  {
    if (v51)
    {
      CFTypeRef v45 = copyLoacalizedStringFromResources(v21, 1);
      if (v45)
      {
        CFTypeRef v46 = v45;
        CFRelease(v21);
        return (const __CFString *)v46;
      }
    }
  }
  return v21;
}

CFTypeRef copyLoacalizedStringFromResources(const __CFString *cf, int a2)
{
  CFStringRef v3 = cf;
  if (copyLoacalizedStringFromResources_predicate != -1)
  {
    dispatch_once(&copyLoacalizedStringFromResources_predicate, &__block_literal_global_478_580);
    if (v3) {
      goto LABEL_3;
    }
    return 0;
  }
  if (!cf) {
    return 0;
  }
LABEL_3:
  if (copyLoacalizedStringFromResources_csBundle)
  {
    CFStringRef ValueForInfoDictionaryKey = (const __CFString *)CFBundleGetValueForInfoDictionaryKey((CFBundleRef)copyLoacalizedStringFromResources_csBundle, v3);
    CFStringRef v5 = a2 ? v3 : 0;
    CFStringRef v3 = ValueForInfoDictionaryKey ? ValueForInfoDictionaryKey : v5;
    if (!v3) {
      return 0;
    }
  }

  return CFRetain(v3);
}

CFBundleRef __copyLoacalizedStringFromResources_block_invoke()
{
  CFBundleRef result = CFBundleGetBundleWithIdentifier(@"com.apple.ColorSync");
  copyLoacalizedStringFromResources_csBundle = (uint64_t)result;
  return result;
}

uint64_t findDescByLanguage(const __CFString *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = CFStringHasPrefix(a1, *(CFStringRef *)a3);
  if (result) {
    *(void *)(a3 + 8) = a2;
  }
  return result;
}

CFStringRef colorSyncProfileCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, @"<ColorSyncProfile %p>", a1);
}

char *__use_xpc_only_block_invoke()
{
  uint64_t result = getenv("COLORSYNC_XPC_ONLY");
  if (result) {
    use_xpc_only_xpc_only = 1;
  }
  return result;
}

ColorSyncProfileRef ColorSyncProfileCreateWithURL(CFURLRef url, CFErrorRef *error)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!url) {
    goto LABEL_12;
  }
  CFTypeID v4 = CFGetTypeID(url);
  if (v4 != CFURLGetTypeID()) {
    goto LABEL_12;
  }
  CFTypeID v5 = CFGetTypeID(url);
  if (v5 != CFURLGetTypeID()) {
    goto LABEL_12;
  }
  bzero(buffer, 0x401uLL);
  if (!CFURLGetFileSystemRepresentation(url, 1u, buffer, 1025) || access((const char *)buffer, 4)) {
    goto LABEL_12;
  }
  if (use_xpc_only_predicate != -1) {
    dispatch_once(&use_xpc_only_predicate, &__block_literal_global_473);
  }
  if (use_xpc_only_xpc_only) {
    goto LABEL_12;
  }
  int v6 = open((const char *)buffer, 0, 0);
  if (v6 < 0) {
    goto LABEL_12;
  }
  int v7 = v6;
  memset(&v16, 0, sizeof(v16));
  if (fstat(v6, &v16)) {
    goto LABEL_11;
  }
  if ((v16.st_mode & 0xF000) != 0x8000) {
    goto LABEL_11;
  }
  if (v16.st_size < 1) {
    goto LABEL_11;
  }
  if (v16.st_size > 0x1FFFFFFF) {
    goto LABEL_11;
  }
  int v10 = malloc_type_malloc(v16.st_size, 0x9758719DuLL);
  if (!v10) {
    goto LABEL_11;
  }
  CFIndex v11 = v10;
  bzero(v10, v16.st_size);
  ssize_t v12 = read(v7, v11, v16.st_size);
  if (v12 != v16.st_size)
  {
    free(v11);
LABEL_11:
    close(v7);
LABEL_12:
    unint64_t v8 = 0;
    goto LABEL_13;
  }
  CFIndex v13 = v12;
  close(v7);
  if (colorSyncBytesDeallocator_predicate != -1) {
    dispatch_once(&colorSyncBytesDeallocator_predicate, &__block_literal_global_999);
  }
  CFDataRef v14 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)v11, v13, (CFAllocatorRef)colorSyncBytesDeallocator_colorSyncAllocator);
  if (!v14) {
    goto LABEL_12;
  }
  CFDataRef v15 = v14;
  unint64_t v8 = (const ColorSyncProfile *)create(v14, 0, 0);
  CFRelease(v15);
  if (v8) {
    *((void *)v8 + 15) = CFRetain(url);
  }
LABEL_13:
  if (error) {
    *error = 0;
  }
  return v8;
}

CFURLRef ColorSyncProfileGetURL(CFURLRef prof, CFErrorRef *error)
{
  if (!prof)
  {
LABEL_6:
    if (!error) {
      return prof;
    }
    goto LABEL_7;
  }
  CFURLRef v3 = prof;
  CFTypeID v4 = CFGetTypeID(prof);
  if (ColorSyncProfileGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
  }
  if (v4 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
  {
    ColorSyncProfileRef prof = (CFURLRef)*((void *)v3 + 15);
    goto LABEL_6;
  }
  ColorSyncProfileRef prof = 0;
  if (!error) {
    return prof;
  }
LABEL_7:
  *error = 0;
  return prof;
}

ColorSyncMutableProfileRef ColorSyncProfileCreateMutable(void)
{
  return (ColorSyncMutableProfileRef)create(0, 1, 0);
}

CFTypeRef ColorSyncProfileCreateImmutableCopy(_DWORD *a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v2 = CFGetTypeID(a1);
  if (ColorSyncProfileGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
  }
  if (v2 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID) {
    return 0;
  }
  if (a1[37] == 1)
  {
    CFDataRef v3 = ColorSyncProfileCopyData((ColorSyncProfileRef)a1, 0);
    if (v3)
    {
      CFDataRef v4 = v3;
      uint64_t v5 = create(v3, 0, 0);
      CFRelease(v4);
      return (CFTypeRef)v5;
    }
    return 0;
  }

  return CFRetain(a1);
}

ColorSyncProfileRef ColorSyncProfileCreateLink(CFArrayRef profileInfo, CFDictionaryRef options)
{
  if (!profileInfo) {
    return 0;
  }
  CFTypeID v4 = CFGetTypeID(profileInfo);
  if (v4 != CFArrayGetTypeID()) {
    return 0;
  }
  uint64_t v5 = (const void *)create(0, 1, 0);
  if (v5)
  {
    if ((v6 = ColorSyncCMMCreateAppleCMM(), CFTypeID v7 = CFGetTypeID(profileInfo), v7 != CFArrayGetTypeID())
      || options && (CFTypeID v8 = CFGetTypeID(options), v8 != CFDictionaryGetTypeID())
      || (CFIndex v9 = (uint64_t (*)(const void *, CFArrayRef, CFDictionaryRef))v6[9]) == 0
      || (v9(v5, profileInfo, options) & 1) == 0)
    {
      CFRelease(v5);
      return 0;
    }
  }
  return (ColorSyncProfileRef)v5;
}

__CFDictionary *ColorSyncProfileCopyLocalizedStringDictionary(void *a1, const void *a2)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (ColorSyncProfileGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
  }
  if (v4 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID) {
    return 0;
  }
  CFDictionaryRef v5 = (const __CFDictionary *)a1[11];
  if (!v5) {
    return 0;
  }
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v5, a2);
  if (!Value) {
    return 0;
  }
  CFDataRef v7 = Value;
  if (*(_DWORD *)CFDataGetBytePtr(Value) != 1668639853 || *(_DWORD *)CFDataGetBytePtr(v7) != 1668639853) {
    return 0;
  }

  return copy_description_dict_from_DSCMTag(v7);
}

void removeReference(uint64_t a1, const void *a2)
{
  CFTypeID v8 = a2;
  key = 0;
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 88), (CFDictionaryApplierFunction)tagValueComparer, &v8);
  CFTypeID v4 = key;
  if (key)
  {
    CFDictionaryRef v5 = *(const __CFDictionary **)(a1 + 88);
    CFDataRef Value = CFDictionaryGetValue(v5, a2);
    CFDictionarySetValue(v5, v4, Value);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 88), a2);
    CFDataRef v7 = key;
    do
    {
      key = 0;
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 88), (CFDictionaryApplierFunction)tagValueComparer, &v8);
      if (!key) {
        break;
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 88), key, v7);
    }
    while (key);
  }
}

void ColorSyncProfileRemoveTag(ColorSyncMutableProfileRef prof, CFStringRef signature)
{
  if (prof)
  {
    CFTypeID v4 = CFGetTypeID(prof);
    if (ColorSyncProfileGetTypeID_predicate != -1) {
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
    }
    if (v4 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    {
      if (signature)
      {
        if (*((_DWORD *)prof + 37) == 1)
        {
          CFTypeID v5 = CFGetTypeID(signature);
          if (v5 == CFStringGetTypeID())
          {
            pthread_mutex_lock((pthread_mutex_t *)((char *)prof + 24));
            if (CFDictionaryContainsKey(*((CFDictionaryRef *)prof + 11), signature))
            {
              if (CFDictionaryContainsValue(*((CFDictionaryRef *)prof + 11), signature)) {
                removeReference((uint64_t)prof, signature);
              }
              else {
                CFDictionaryRemoveValue(*((CFMutableDictionaryRef *)prof + 11), signature);
              }
              int v6 = (const void *)*((void *)prof + 13);
              if (v6)
              {
                CFRelease(v6);
                *((void *)prof + 13) = 0;
              }
              *((void *)prof + 16) = 0;
              *((void *)prof + 17) = 0;
            }
            pthread_mutex_unlock((pthread_mutex_t *)((char *)prof + 24));
          }
        }
      }
    }
  }
}

void ColorSyncIterateInstalledProfiles(ColorSyncProfileIterateCallback callBack, uint32_t *seed, void *userInfo, CFErrorRef *error)
{
  CFTypeID v4 = userInfo;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (error) {
    *error = 0;
  }
  if (callBack)
  {
    CFIndex v32 = seed;
    v33[0] = kColorSyncACESCGLinearProfile;
    v33[1] = kColorSyncAdobeRGB1998Profile;
    v33[2] = kColorSyncDCIP3Profile;
    v33[3] = kColorSyncDisplayP3Profile;
    v33[4] = kColorSyncGenericCMYKProfile;
    v33[5] = kColorSyncGenericGrayGamma22Profile;
    v33[6] = kColorSyncGenericGrayProfile;
    v33[7] = kColorSyncGenericLabProfile;
    v33[8] = kColorSyncGenericRGBProfile;
    v33[9] = kColorSyncGenericXYZProfile;
    v33[10] = kColorSyncITUR2020Profile;
    v33[11] = kColorSyncITUR709Profile;
    v33[12] = kColorSyncROMMRGBProfile;
    v33[13] = kColorSyncSRGBProfile;
    v33[14] = kColorSyncWebSafeColorsProfile;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      uint64_t v7 = 0;
      CFTypeID v8 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
      CFIndex v9 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
      do
      {
        int v10 = ColorSyncProfileCreateWithName((CFStringRef)v33[v7]);
        CFIndex v11 = CFDictionaryCreateMutable(0, 0, v8, v9);
        if (v11)
        {
          CFURLRef URL = ColorSyncProfileGetURL(v10, 0);
          if (URL) {
            CFDictionarySetValue(v11, kColorSyncProfileURL, URL);
          }
          CFDataRef v13 = ColorSyncProfileCopyHeader(v10);
          if (v13)
          {
            CFDataRef v14 = v13;
            CFDataRef v15 = v8;
            vm_address_t BytePtr = (unsigned int *)CFDataGetBytePtr(v13);
            CFDictionarySetValue(v11, kColorSyncProfileHeader, v14);
            CFStringRef SignatureFromFourCharCode = ColorSyncCreateSignatureFromFourCharCode(BytePtr[3]);
            CFDictionarySetValue(v11, kColorSyncProfileClass, SignatureFromFourCharCode);
            CFRelease(SignatureFromFourCharCode);
            CFStringRef v18 = ColorSyncCreateSignatureFromFourCharCode(BytePtr[4]);
            CFDictionarySetValue(v11, kColorSyncProfileColorSpace, v18);
            CFRelease(v18);
            CFStringRef v19 = ColorSyncCreateSignatureFromFourCharCode(BytePtr[5]);
            CFDictionarySetValue(v11, kColorSyncProfilePCS, v19);
            CFRelease(v19);
            CFStringRef v20 = ColorSyncProfileCopyDescriptionString(v10);
            if (v20)
            {
              CFStringRef v21 = v20;
              CFDictionarySetValue(v11, kColorSyncProfileDescription, v20);
              CFRelease(v21);
            }
            CFTypeRef v22 = ColorSyncProfileCopyASCIIDescriptionString(v10);
            if (v22)
            {
              char v23 = v22;
              CFDictionarySetValue(v11, (const void *)kColorSyncProfileASCIIDescription, v22);
              CFRelease(v23);
            }
            ColorSyncMD5 bytes = ColorSyncProfileGetMD5(v10);
            CFDataRef v24 = CFDataCreate(0, bytes.digest, 16);
            if (v24)
            {
              CFDataRef v25 = v24;
              CFDictionarySetValue(v11, kColorSyncProfileMD5Digest, v24);
              CFRelease(v25);
            }
            CFRelease(v14);
            CFTypeID v8 = v15;
          }
        }
        if (v10) {
          CFRelease(v10);
        }
        CFArrayAppendValue(Mutable, v11);
        CFRelease(v11);
        ++v7;
      }
      while (v7 != 15);
    }
    CFTypeID v4 = userInfo;
    seed = v32;
    if (v32) {
      goto LABEL_21;
    }
  }
  else
  {
    CFMutableArrayRef Mutable = 0;
    if (seed) {
LABEL_21:
    }
      ++*seed;
  }
  if (Mutable)
  {
    CFIndex Count = CFArrayGetCount(Mutable);
    CFIndex v27 = Count - 1;
    if (Count >= 1)
    {
      CFIndex v28 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v28);
        if (!((unsigned int (*)(const void *, void *))callBack)(ValueAtIndex, v4)) {
          break;
        }
      }
      while (v27 != v28++);
    }
    CFRelease(Mutable);
  }
}

double __ColorSyncProfileGetDCIP3BluePrimary_block_invoke()
{
  *(void *)&double result = 542792024;
  ColorSyncProfileGetDCIP3BluePrimary_bXYZ = xmmword_18BE63560;
  dword_1E9155680 = 1355284480;
  return result;
}

double __ColorSyncProfileGetDCIP3GreenPrimary_block_invoke()
{
  *(void *)&double result = 542792024;
  ColorSyncProfileGetDCIP3GreenPrimary_gXYZ = xmmword_18BE63570;
  dword_1E9155660 = 285933568;
  return result;
}

double __ColorSyncProfileGetDCIP3RedPrimary_block_invoke()
{
  *(void *)&double result = 542792024;
  ColorSyncProfileGetDCIP3RedPrimary_rXYZ = xmmword_18BE63580;
  dword_1E9155640 = -872415233;
  return result;
}

double __ColorSyncProfileGetBT601BluePrimary_block_invoke()
{
  *(void *)&double result = 542792024;
  ColorSyncProfileGetBT601BluePrimary_bXYZ = xmmword_18BE635C0;
  dword_1E9155620 = -1682702336;
  return result;
}

double __ColorSyncProfileGetBT601GreenPrimary_block_invoke()
{
  *(void *)&double result = 542792024;
  ColorSyncProfileGetBT601GreenPrimary_gXYZ = xmmword_18BE635D0;
  dword_1E9155600 = -652607488;
  return result;
}

double __ColorSyncProfileGetBT601RedPrimary_block_invoke()
{
  *(void *)&double result = 542792024;
  ColorSyncProfileGetBT601RedPrimary_rXYZ = xmmword_18BE635E0;
  dword_1E91555E0 = -1207762944;
  return result;
}

BOOL ColorSyncProfileWriteToFile(const ColorSyncProfile *a1, char *a2)
{
  BOOL v2 = 0;
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    CFDataRef v3 = a2;
    if (a2)
    {
      CFDataRef v4 = ColorSyncProfileCopyData(a1, 0);
      if (v4)
      {
        CFDataRef v5 = v4;
        bzero(__str, 0x401uLL);
        if (*v3 == 42 && v3[1] == 47)
        {
          if (ColorSyncGetTempDirPath_predicate != -1) {
            dispatch_once(&ColorSyncGetTempDirPath_predicate, &__block_literal_global_627);
          }
          CFIndex v11 = v3 + 2;
          CFDataRef v3 = __str;
          snprintf(__str, 0x400uLL, "%s%s", &ColorSyncGetTempDirPath_tempDirPath, v11);
        }
        int v6 = fopen(v3, "wb");
        if (v6)
        {
          uint64_t v7 = v6;
          vm_address_t BytePtr = CFDataGetBytePtr(v5);
          size_t Length = CFDataGetLength(v5);
          BOOL v2 = fwrite(BytePtr, Length, 1uLL, v7) == 1;
          fclose(v7);
        }
        else
        {
          BOOL v2 = 0;
        }
        CFRelease(v5);
      }
      else
      {
        return 0;
      }
    }
  }
  return v2;
}

BOOL ColorSyncVerifyGenericGrayGamma2_2Data(const __CFData *cf)
{
  return verify_GenericGrayGamma2_2(0, cf);
}

uint64_t ColorSyncVerifyAdobeRGBData(const __CFData *cf)
{
  return verify_AdobeRGB(0, cf);
}

unint64_t ColorSyncVerifySRGBData(const __CFData *cf)
{
  return verify_sRGB(0, cf);
}

BOOL ColorSyncVerifyDisplayP3Data(const __CFData *cf)
{
  return verify_DisplayP3(0, cf);
}

CFDataRef ColorSyncVerifyGenericLabData(const __CFData *cf)
{
  return verify_GenericLab(0, cf);
}

unint64_t ColorSyncVerifyCoreVideo709Data(const __CFData *cf)
{
  return verify_CoreVideo709(0, cf);
}

CFDataRef ColorSyncVerifyDisplayP3ITU709Data(const __CFData *cf)
{
  return verify_DisplayP3ITU709(0, cf);
}

BOOL ColorSyncVerifyICC_DataByName(const void *a1, const void *a2)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFStringGetTypeID()) {
    return 0;
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncITUR2020_PQProfile) == 1)
  {
    if (bt2020PQProfile_predicate != -1) {
      dispatch_once(&bt2020PQProfile_predicate, &__block_literal_global_578);
    }
    uint64_t v5 = bt2020PQProfile_profile;
    int v6 = a2;
    CFDataRef v7 = 0;
LABEL_13:
    int v9 = 1;
    int v10 = 0;
LABEL_14:
    return verify_hdr(0, v6, v7, v5, v9, (uint64_t)v10);
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncDisplayP3_PQProfile) == 1)
  {
    if (displayP3PQ_CICP_tag_predicate != -1) {
      dispatch_once(&displayP3PQ_CICP_tag_predicate, &__block_literal_global_581);
    }
    uint64_t v8 = displayP3PQ_CICP_tag_cicp;
    if (pre_cicp_DisplayP3PQProfile_predicate != -1) {
      dispatch_once(&pre_cicp_DisplayP3PQProfile_predicate, &__block_literal_global_584);
    }
    uint64_t v5 = pre_cicp_DisplayP3PQProfile_profile;
    int v6 = a2;
    CFDataRef v7 = (const __CFData *)v8;
    goto LABEL_13;
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncITUR2020_HLGProfile) == 1)
  {
    if (bt2020HLGProfile_predicate != -1) {
      dispatch_once(&bt2020HLGProfile_predicate, &__block_literal_global_587);
    }
    uint64_t v5 = bt2020HLGProfile_profile;
    int v10 = @"aaOO";
    int v6 = a2;
    CFDataRef v7 = 0;
    int v9 = 2;
    goto LABEL_14;
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncDisplayP3_HLGProfile) == 1)
  {
    return verify_displayP3_HLG_data(a2);
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncITUR709_PQProfile) == 1)
  {
    return verify_BT709_PQ_data(a2);
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncITUR709_HLGProfile) == 1)
  {
    return vverify_BT709_HLG_data(a2);
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncITUR2020_sRGBGammaProfile) == 1)
  {
    return verify_ITUR2020_sRGBGamma_data(a2);
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncITUR2100_PQProfile) == 1)
  {
    return verify_BT2100_PQ_data(a2);
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncITUR2100_HLGProfile) != 1) {
    return 0;
  }

  return verify_BT2100_HLG_data(a2);
}

BOOL verify_displayP3_HLG_data(CFTypeRef cf)
{
  if (displayP3HLG_CICP_tag_predicate != -1) {
    dispatch_once(&displayP3HLG_CICP_tag_predicate, &__block_literal_global_590);
  }
  CFDataRef v2 = (const __CFData *)displayP3HLG_CICP_tag_cicp;
  if (pre_cicp_DisplayP3HLGProfile_predicate != -1) {
    dispatch_once(&pre_cicp_DisplayP3HLGProfile_predicate, &__block_literal_global_593);
  }
  uint64_t v3 = pre_cicp_DisplayP3HLGProfile_profile;

  return verify_hdr(0, cf, v2, v3, 2, @"aaOO");
}

BOOL verify_BT709_PQ_data(CFTypeRef cf)
{
  if (bt709PQ_CICP_tag_predicate != -1) {
    dispatch_once(&bt709PQ_CICP_tag_predicate, &__block_literal_global_596);
  }
  CFDataRef v2 = (const __CFData *)bt709PQ_CICP_tag_cicp;
  if (pre_cicp_BT709_PQProfile_predicate != -1) {
    dispatch_once(&pre_cicp_BT709_PQProfile_predicate, &__block_literal_global_599);
  }
  uint64_t v3 = pre_cicp_BT709_PQProfile_profile;

  return verify_hdr(0, cf, v2, v3, 1, 0);
}

BOOL vverify_BT709_HLG_data(CFTypeRef cf)
{
  if (bt709HLG_CICP_tag_predicate != -1) {
    dispatch_once(&bt709HLG_CICP_tag_predicate, &__block_literal_global_602);
  }
  CFDataRef v2 = (const __CFData *)bt709HLG_CICP_tag_cicp;
  if (pre_cicp_ITUR709_HLGProfile_predicate != -1) {
    dispatch_once(&pre_cicp_ITUR709_HLGProfile_predicate, &__block_literal_global_605);
  }
  uint64_t v3 = pre_cicp_ITUR709_HLGProfile_profile;

  return verify_hdr(0, cf, v2, v3, 1, 0);
}

BOOL verify_BT2100_PQ_data(CFTypeRef cf)
{
  if (bt2100PQ_CICP_tag_predicate[0] != -1) {
    dispatch_once(bt2100PQ_CICP_tag_predicate, &__block_literal_global_611);
  }
  CFDataRef v2 = (const __CFData *)bt2100PQ_CICP_tag_cicp;
  if (pre_cicp_BT2100PQProfile_predicate != -1) {
    dispatch_once(&pre_cicp_BT2100PQProfile_predicate, &__block_literal_global_614);
  }
  uint64_t v3 = pre_cicp_BT2100PQProfile_profile;

  return verify_hdr(0, cf, v2, v3, 1, 0);
}

BOOL verify_BT2100_HLG_data(CFTypeRef cf)
{
  if (bt2100HLG_CICP_tag_predicate != -1) {
    dispatch_once(&bt2100HLG_CICP_tag_predicate, &__block_literal_global_617);
  }
  CFDataRef v2 = (const __CFData *)bt2100HLG_CICP_tag_cicp;
  if (pre_cicp_BT2100HLGProfile_predicate != -1) {
    dispatch_once(&pre_cicp_BT2100HLGProfile_predicate, &__block_literal_global_620);
  }
  uint64_t v3 = pre_cicp_BT2100HLGProfile_profile;

  return verify_hdr(0, cf, v2, v3, 2, @"aaOO");
}

BOOL tags_are_equal(const __CFData *a1, const __CFData *a2)
{
  vm_address_t BytePtr = CFDataGetBytePtr(a1);
  unint64_t Length = CFDataGetLength(a1);
  int v6 = CFDataGetBytePtr(a2);
  size_t v7 = CFDataGetLength(a2);
  BOOL result = 0;
  if (Length >= v7 && BytePtr)
  {
    if (v6) {
      return memcmp(v6, BytePtr, v7) == 0;
    }
  }
  return result;
}

const ColorSyncProfile *ColorSyncDataCanBeIgnoredOnSRGBDevice(const void *a1)
{
  BOOL result = (const ColorSyncProfile *)create(a1, 0, 0);
  if (result)
  {
    CFDataRef v2 = result;
    BOOL v3 = ColorSyncProfileContainsTag(result, @"aapy");
    CFRelease(v2);
    return (const ColorSyncProfile *)v3;
  }
  return result;
}

double ColorSyncProfileGetWhitePoint(const void *a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  unint64_t XYZColor = ColorSyncProfileGetXYZColor(a1, @"wtpt");
  double v3 = (double)(int)XYZColor * 0.0000152587891;
  double v4 = (double)SHIDWORD(XYZColor) * 0.0000152587891;
  double v6 = (double)v5 * 0.0000152587891;
  if (a1)
  {
    CFTypeID v7 = CFGetTypeID(a1);
    if (ColorSyncProfileGetTypeID_predicate != -1) {
      dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
    }
    if (v7 == ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID)
    {
      CFDataRef v8 = ColorSyncProfileCopyHeader((ColorSyncProfileRef)a1);
      if (v8)
      {
        CFDataRef v9 = v8;
        vm_address_t BytePtr = CFDataGetBytePtr(v8);
        if (BytePtr && *((_DWORD *)BytePtr + 9) == 1633907568)
        {
          unsigned int v11 = *((_DWORD *)BytePtr + 2);
          CFRelease(v9);
          if (v11 >> 26)
          {
            CFDataRef Tag = (const __CFData *)ColorSyncProfileGetTag((uint64_t)a1, @"chad");
            if (Tag)
            {
              CFDataRef v13 = Tag;
              CFDataRef v14 = CFDataGetBytePtr(Tag);
              if (v14)
              {
                CFDataRef v15 = (int8x8_t *)v14;
                if (CFDataGetLength(v13) >= 1 && (unint64_t)CFDataGetLength(v13) >= 0x2C)
                {
                  int8x8_t v16 = vrev32_s8(v15[1]);
                  v17.i64[0] = v16.i32[0];
                  v17.i64[1] = v16.i32[1];
                  float64x2_t v18 = (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL);
                  float64x2_t v19 = vmulq_f64(vcvtq_f64_s64(v17), v18);
                  int8x8_t v20 = vrev32_s8(v15[2]);
                  v17.i64[0] = v20.i32[0];
                  v17.i64[1] = v20.i32[1];
                  float64x2_t v24 = v19;
                  float64x2_t v25 = vmulq_f64(vcvtq_f64_s64(v17), v18);
                  *(int8x8_t *)&v19.f64[0] = vrev32_s8(v15[3]);
                  v17.i64[0] = SLODWORD(v19.f64[0]);
                  v17.i64[1] = SHIDWORD(v19.f64[0]);
                  float64x2_t v21 = vmulq_f64(vcvtq_f64_s64(v17), v18);
                  int8x8_t v22 = vrev32_s8(v15[4]);
                  v17.i64[0] = v22.i32[0];
                  v17.i64[1] = v22.i32[1];
                  float64x2_t v26 = v21;
                  float64x2_t v27 = vmulq_f64(vcvtq_f64_s64(v17), v18);
                  double v28 = (double)(int)bswap32(v15[5].u32[0]) * 0.0000152587891;
                  if (InvertMatrix(v24.f64)) {
                    return v4 * v24.f64[1] + v3 * v24.f64[0] + v6 * v25.f64[0];
                  }
                }
              }
            }
          }
        }
        else
        {
          CFRelease(v9);
        }
      }
    }
  }
  return v3;
}

float *ColorSyncProfileGetLuminanceCoefficients(float *a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v2 = CFGetTypeID(a1);
  if (ColorSyncProfileGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
  }
  if (v2 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID) {
    return 0;
  }
  double v3 = a1 + 38;
  if (a1[38] == 0.0)
  {
    add_basic_formulas((uint64_t)a1);
    if (a1[38] == 0.0) {
      return 0;
    }
  }
  return v3;
}

void add_basic_formulas(uint64_t a1)
{
  v94[9] = *(double *)MEMORY[0x1E4F143B8];
  CFDataRef v2 = ColorSyncProfileCopyHeader((ColorSyncProfileRef)a1);
  if (!v2) {
    return;
  }
  CFDataRef v3 = v2;
  vm_address_t BytePtr = CFDataGetBytePtr(v2);
  if (BytePtr && *((_DWORD *)BytePtr + 4) == 1380401696)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
    if (*(float *)(a1 + 152) == 0.0 || *(float *)(a1 + 168) == 0.0 || *(float *)(a1 + 204) == 0.0)
    {
      CFDataRef Tag = (const __CFData *)ColorSyncProfileGetTag(a1, @"wtpt");
      CFDataRef v6 = (const __CFData *)ColorSyncProfileGetTag(a1, @"rXYZ");
      CFDataRef v81 = v6;
      CFDataRef v7 = (const __CFData *)ColorSyncProfileGetTag(a1, @"gXYZ");
      CFDataRef v80 = v7;
      CFDataRef v8 = (const __CFData *)ColorSyncProfileGetTag(a1, @"bXYZ");
      CFDataRef v79 = v8;
      if (v6)
      {
        if (v7)
        {
          CFDataRef v9 = v8;
          if (v8)
          {
LABEL_12:
            int v10 = verified_icXYZType_data_ptr(Tag);
            unsigned int v11 = (int8x8_t *)verified_icXYZType_data_ptr(v6);
            ssize_t v12 = (int8x8_t *)verified_icXYZType_data_ptr(v7);
            CFDataRef v13 = verified_icXYZType_data_ptr(v9);
            if (v10)
            {
              if (v11)
              {
                if (v12)
                {
                  CFDataRef v14 = (int8x8_t *)v13;
                  if (v13)
                  {
                    double WhitePoint = ColorSyncProfileGetWhitePoint((const void *)a1);
                    double v17 = v16;
                    double v19 = v18;
                    v77.f64[0] = WhitePoint;
                    v77.f64[1] = v16;
                    int8x8_t v20 = vrev32_s8(v11[1]);
                    v21.i64[0] = v20.i32[0];
                    v21.i64[1] = v20.i32[1];
                    float64x2_t v22 = (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL);
                    float64x2_t v75 = vmulq_f64(vcvtq_f64_s64(v21), v22);
                    double v76 = (double)(int)bswap32(v11[2].u32[0]) * 0.0000152587891;
                    int8x8_t v23 = vrev32_s8(v12[1]);
                    v21.i64[0] = v23.i32[0];
                    v21.i64[1] = v23.i32[1];
                    float64x2_t v73 = vmulq_f64(vcvtq_f64_s64(v21), v22);
                    int v24 = bswap32(v12[2].u32[0]);
                    double v78 = v18;
                    double v74 = (double)v24 * 0.0000152587891;
                    int8x8_t v25 = vrev32_s8(v14[1]);
                    v21.i64[0] = v25.i32[0];
                    v21.i64[1] = v25.i32[1];
                    int v26 = bswap32(v14[2].u32[0]);
                    float64x2_t v71 = vmulq_f64(vcvtq_f64_s64(v21), v22);
                    double v72 = (double)v26 * 0.0000152587891;
                    float64x2_t v69 = 0uLL;
                    double v70 = 0.0;
                    float64x2_t v67 = 0uLL;
                    double v68 = 0.0;
                    float64x2_t v65 = 0uLL;
                    double v66 = 0.0;
                    ColorSyncConvertDoubleXYZFromD50(&v75, &v77, &v69, 3, 0);
                    ColorSyncConvertDoubleXYZFromD50(&v73, &v77, &v67, 3, 0);
                    ColorSyncConvertDoubleXYZFromD50(&v71, &v77, &v65, 3, 0);
                    float64_t v27 = v69.f64[0] + v69.f64[1] + v70;
                    float64_t v28 = v67.f64[0] + v67.f64[1] + v68;
                    float64_t v29 = v65.f64[0] + v65.f64[1] + v66;
                    v94[0] = v69.f64[0] / v27;
                    v94[1] = v67.f64[0] / v28;
                    v94[2] = v65.f64[0] / v29;
                    v94[3] = v69.f64[1] / v27;
                    v94[4] = v67.f64[1] / v28;
                    v94[5] = v65.f64[1] / v29;
                    v94[6] = v70 / v27;
                    v94[7] = v68 / v28;
                    v94[8] = v66 / v29;
                    double v85 = v69.f64[0] / v27;
                    double v86 = v67.f64[0] / v28;
                    double v87 = v65.f64[0] / v29;
                    double v88 = v69.f64[1] / v27;
                    double v89 = v67.f64[1] / v28;
                    double v90 = v65.f64[1] / v29;
                    double v91 = v70 / v27;
                    double v92 = v68 / v28;
                    double v93 = v66 / v29;
                    if (InvertMatrix(&v85))
                    {
                      double v30 = WhitePoint + v17 + v19;
                      double v31 = v19 / v30;
                      double v32 = v17 / v30;
                      double v33 = WhitePoint / v30 / (v17 / v30);
                      double v34 = v31 / v32;
                      v84[0] = v86 + v33 * v85 + v34 * v87;
                      memset(&v84[1], 0, 24);
                      v84[4] = v89 + v33 * v88 + v34 * v90;
                      memset(&v84[5], 0, 24);
                      v84[8] = v92 + v33 * v91 + v34 * v93;
                      uint64_t v83 = 0;
                      memset(v82, 0, sizeof(v82));
                      MatrixMatrix(v84, v94, v82[0].f64);
                      double v35 = v82[2].f64[1];
                      float64x2_t v36 = *(float64x2_t *)((char *)&v82[1] + 8);
                      float v37 = v82[1].f64[1];
                      if (v37 <= 0.2626
                        || v37 >= 0.2628
                        || (float v38 = v82[2].f64[0], v38 <= 0.6779)
                        || v38 >= 0.6781
                        || (float v39 = v82[2].f64[1], v39 <= 0.0592)
                        || v39 >= 0.0594)
                      {
                        if (v37 <= 0.2289
                          || v37 >= 0.2291
                          || (float v46 = v82[2].f64[0], v46 <= 0.6916)
                          || v46 >= 0.6918
                          || (float v47 = v82[2].f64[1], v47 <= 0.0792)
                          || v47 >= 0.0794)
                        {
                          float64x2_t v48 = (float64x2_t)vdupq_n_s64(0x40C3880000000000uLL);
                          float64x2_t v49 = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)((char *)&v82[1] + 8), v48)), v48);
                          double v50 = round(v82[2].f64[1] * 10000.0) / 10000.0;
                          float32x2_t v44 = vcvt_f32_f64(v49);
                          float v45 = v50;
                          __asm { FMOV            V5.2D, #-0.5 }
                          float64x2_t v56 = vmulq_f64(v49, _Q5);
                          *(void *)&v57.f64[0] = vdupq_laneq_s64((int64x2_t)v56, 1).u64[0];
                          v57.f64[1] = v50 * -0.5;
                          float64x2_t v58 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v49.f64[0], 0);
                          v58.f64[0] = v50;
                          __asm { FMOV            V3.2D, #1.0 }
                          float64x2_t v60 = vsubq_f64(_Q3, v58);
                          float32x2_t v43 = vcvt_f32_f64(vdivq_f64(v56, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v60.f64[0], 0)));
                          float32x2_t v42 = vcvt_f32_f64(vdivq_f64(v57, (float64x2_t)vdupq_laneq_s64((int64x2_t)v60, 1)));
                          __asm { FMOV            V3.2D, #-2.0 }
                          float32x2_t v41 = vcvt_f32_f64(vdivq_f64(vmulq_f64(v58, vmulq_f64(v60, _Q3)), (float64x2_t)vdupq_laneq_s64((int64x2_t)v49, 1)));
                          float32x2_t v40 = vcvt_f32_f64(vaddq_f64(v60, v60));
                          if (v37 > 0.2125 && v37 < 0.2127)
                          {
                            float v62 = v82[2].f64[0];
                            if (v62 > 0.7151 && v62 < 0.7153)
                            {
                              float v63 = v82[2].f64[1];
                              if (v63 > 0.0721 && v63 < 0.0723)
                              {
                                float32x2_t v40 = (float32x2_t)0x3FC98FC53FED844DLL;
                                float64x2_t v36 = (float64x2_t)xmmword_18BE63650;
                                float32x2_t v41 = (float32x2_t)0xBEEFB7E9BE3FCB92;
                                float32x2_t v42 = (float32x2_t)0xBD3B98C8BEE88CE7;
                                float32x2_t v43 = (float32x2_t)0xBEC55326BDEAB368;
                                float32x2_t v44 = (float32x2_t)0x3F3717593E59B3D0;
                                float v45 = 0.0722;
                                double v35 = 0.0722000003;
                              }
                            }
                          }
                        }
                        else
                        {
                          float32x2_t v40 = (float32x2_t)0x3FC563883FEBB2FFLL;
                          float64x2_t v36 = (float64x2_t)xmmword_18BE63640;
                          float32x2_t v41 = (float32x2_t)0xBF02A993BE582A99;
                          float32x2_t v42 = (float32x2_t)0xBD52934BBEE5AEE6;
                          float32x2_t v43 = (float32x2_t)0xBEC05BC0BDFE9100;
                          float32x2_t v44 = (float32x2_t)0x3F3113403E6A7EFALL;
                          float v45 = 0.0793;
                          double v35 = 0.0793000013;
                        }
                      }
                      else
                      {
                        float32x2_t v40 = (float32x2_t)0x3FBCBFB13FF0D1B7;
                        float64x2_t v36 = (float64x2_t)xmmword_18BE63630;
                        float32x2_t v41 = (float32x2_t)0xBF124745BE288CE7;
                        float32x2_t v42 = (float32x2_t)0xBD24A8C1BEEB6AE8;
                        float32x2_t v43 = (float32x2_t)0xBEB88659BE0EF34DLL;
                        float32x2_t v44 = (float32x2_t)0x3F2D91683E86809DLL;
                        float v45 = 0.0593;
                        double v35 = 0.0593000017;
                      }
                      *(float32x2_t *)(a1 + 152) = vcvt_f32_f64(v36);
                      float v64 = v35;
                      *(float *)(a1 + 160) = v64;
                      *(float32x2_t *)(a1 + 168) = v44;
                      *(float *)(a1 + 176) = v45;
                      *(float32x2_t *)(a1 + 180) = v43;
                      *(void *)(a1 + 188) = 0x3F0000003F000000;
                      *(float32x2_t *)(a1 + 196) = v42;
                      *(void *)(a1 + 204) = 1065353216;
                      *(_DWORD *)(a1 + 212) = v40.i32[1];
                      *(_DWORD *)(a1 + 216) = 1065353216;
                      *(float32x2_t *)(a1 + 220) = v41;
                      *(_DWORD *)(a1 + 228) = 1065353216;
                      *(_DWORD *)(a1 + 232) = v40.i32[0];
                      *(_DWORD *)(a1 + 236) = 0;
                    }
                  }
                }
              }
            }
            goto LABEL_40;
          }
        }
      }
      if (get_primaries_data_from_cicp(a1, &v81, &v80, (uint64_t *)&v79))
      {
        CFDataRef v7 = v80;
        CFDataRef v6 = v81;
        CFDataRef v9 = v79;
        goto LABEL_12;
      }
    }
LABEL_40:
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 24));
  }

  CFRelease(v3);
}

float *ColorSyncProfileGetRGBtoYCCMatrix(float *a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v2 = CFGetTypeID(a1);
  if (ColorSyncProfileGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
  }
  if (v2 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID) {
    return 0;
  }
  CFDataRef v3 = a1 + 42;
  if (a1[42] == 0.0)
  {
    add_basic_formulas((uint64_t)a1);
    if (a1[42] == 0.0) {
      return 0;
    }
  }
  return v3;
}

float *ColorSyncProfileGetYCCtoRGBMatrix(float *a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v2 = CFGetTypeID(a1);
  if (ColorSyncProfileGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncProfileGetTypeID_predicate, &__block_literal_global_478);
  }
  if (v2 != ColorSyncProfileGetTypeID_kColorSyncProfileRuntimeID) {
    return 0;
  }
  CFDataRef v3 = a1 + 51;
  if (a1[51] == 0.0)
  {
    add_basic_formulas((uint64_t)a1);
    if (a1[51] == 0.0) {
      return 0;
    }
  }
  return v3;
}

ColorSyncProfile *ColorSyncProfileCreateCopyWithFlexGTC(const ColorSyncProfile *a1, CFErrorRef *a2, CFErrorRef *a3)
{
  values[6] = *(void **)MEMORY[0x1E4F143B8];
  if (!ColorSyncProfileVerify(a1, a2, a3) || !ColorSyncProfileIsPQBased(a1)) {
    return 0;
  }
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)a2);
  CFDataRef v6 = (const void **)malloc_type_calloc(1uLL, 16 * (Count + 5), 0xAF16A1C2uLL);
  CFDataRef v7 = &v6[Count + 5];
  CFDictionaryGetKeysAndValues((CFDictionaryRef)a2, v6, v7);
  values[0] = CFNumberCreate(0, kCFNumberSInt16Type, &ColorSyncProfileCreateCopyWithFlexGTC_iccDate);
  values[1] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18BE63B7E);
  values[2] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18BE63B80);
  values[3] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18BE63B82);
  values[4] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18BE63B84);
  values[5] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18BE63B86);
  CFArrayRef v8 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 6, MEMORY[0x1E4F1D510]);
  for (uint64_t i = 0; i != 6; ++i)
  {
    int v10 = values[i];
    if (v10) {
      CFRelease(v10);
    }
  }
  v6[Count] = @"profileType";
  uint64_t v11 = 8 * Count + 8;
  *(const void **)((char *)v6 + v11) = @"profileToCopy";
  uint64_t v12 = 8 * Count + 16;
  *(const void **)((char *)v6 + v12) = @"Date";
  uint64_t v13 = 8 * Count + 24;
  *(const void **)((char *)v6 + v13) = @"FlexGTC.based.A2B0";
  uint64_t v14 = 8 * Count + 32;
  *(const void **)((char *)v6 + v14) = @"createImmutableCopy";
  v7[Count] = @"copyWithGTC";
  *(const void **)((char *)v7 + v11) = a1;
  *(const void **)((char *)v7 + v12) = v8;
  CFDataRef v15 = (const void *)*MEMORY[0x1E4F1CFD0];
  *(const void **)((char *)v7 + v13) = (const void *)*MEMORY[0x1E4F1CFD0];
  *(const void **)((char *)v7 + v14) = v15;
  CFDictionaryRef v16 = CFDictionaryCreate(0, v6, v7, Count + 5, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFRelease(v8);
  free(v6);
  Profile = ColorSyncMakeProfile(v16);
  CFRelease(v16);
  return Profile;
}

ColorSyncProfile *ColorSyncProfileCreateCopyWithLUTBasedLumaScaling(void *a1, const void *a2)
{
  values[6] = *(void **)MEMORY[0x1E4F143B8];
  CFDataRef v4 = ColorSyncProfileCopyFlexGTCInfo((uint64_t)a1);
  if (!v4) {
    return 0;
  }
  CFDataRef v5 = v4;
  values[0] = CFNumberCreate(0, kCFNumberSInt16Type, &ColorSyncProfileCreateCopyWithLUTBasedLumaScaling_iccDate);
  values[1] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18BE63B92);
  values[2] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18BE63B94);
  values[3] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18BE63B96);
  values[4] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18BE63B98);
  values[5] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18BE63B9A);
  CFArrayRef v6 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 6, MEMORY[0x1E4F1D510]);
  for (uint64_t i = 0; i != 6; ++i)
  {
    CFArrayRef v8 = values[i];
    if (v8) {
      CFRelease(v8);
    }
  }
  if (a2
    && (CFTypeID v9 = CFGetTypeID(a2), v9 == CFDictionaryGetTypeID())
    && (CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a2, kColorSyncConversionGridPoints)) != 0)
  {
    CFNumberRef v11 = Value;
    CFRetain(Value);
  }
  else
  {
    CFNumberRef v11 = CFNumberCreate(0, kCFNumberLongLongType, &ColorSyncProfileCreateCopyWithLUTBasedLumaScaling_kFlexGTCGridPoints);
  }
  *(_OWORD *)keys = xmmword_1E54D65D8;
  long long v17 = *(_OWORD *)off_1E54D65E8;
  double v18 = @"createImmutableCopy";
  v15[0] = @"FlexGTC.based.A2B0";
  v15[1] = a1;
  v15[2] = v6;
  long long v15[3] = v11;
  v15[4] = *(void **)MEMORY[0x1E4F1CFD0];
  CFDictionaryRef v12 = CFDictionaryCreate(0, (const void **)keys, (const void **)v15, 5, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFRelease(v6);
  Profile = ColorSyncMakeProfile(v12);
  CFRelease(v12);
  CFRelease(v5);
  return Profile;
}

CFDictionaryRef craete_gain_map_info(uint64_t a1)
{
  keys[8] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = (void *)kColorSyncGUID;
  keys[1] = (void *)kColorSyncGainMapMin;
  keys[2] = (void *)kColorSyncGainMapMax;
  keys[3] = (void *)kColorSyncGainMapGamma;
  keys[4] = (void *)kColorSyncGainMapBaselineConst;
  keys[5] = (void *)kColorSyncGainMapAlternateConst;
  keys[6] = (void *)kColorSyncGainMapBaselineHeadroom;
  keys[7] = (void *)kColorSyncGainMapAlternateHeadroom;
  values[0] = CFUUIDCreateFromUUIDBytes(0, *(CFUUIDBytes *)a1);
  unsigned int valuePtr = bswap32(*(_DWORD *)(a1 + 16));
  values[1] = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
  unsigned int valuePtr = bswap32(*(_DWORD *)(a1 + 20));
  values[2] = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
  unsigned int valuePtr = bswap32(*(_DWORD *)(a1 + 24));
  values[3] = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
  unsigned int valuePtr = bswap32(*(_DWORD *)(a1 + 28));
  values[4] = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
  unsigned int valuePtr = bswap32(*(_DWORD *)(a1 + 32));
  values[5] = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
  unsigned int valuePtr = bswap32(*(_DWORD *)(a1 + 36));
  values[6] = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
  unsigned int valuePtr = bswap32(*(_DWORD *)(a1 + 40));
  values[7] = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
  CFDictionaryRef v2 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 8, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  for (uint64_t i = 0; i != 8; ++i)
    CFRelease(values[i]);
  return v2;
}

uint64_t overlap_verifier(uint64_t result, CFTypeRef cf, uint64_t a3)
{
  if (!cf) {
    return result;
  }
  if (*(unsigned char *)(a3 + 16)) {
    return result;
  }
  uint64_t v5 = result;
  CFTypeID v6 = CFGetTypeID(cf);
  BOOL result = CFDataGetTypeID();
  if (v6 != result) {
    return result;
  }
  vm_address_t BytePtr = CFDataGetBytePtr((CFDataRef)cf);
  BOOL result = CFDataGetLength((CFDataRef)cf);
  if (!BytePtr) {
    return result;
  }
  unint64_t v8 = *(void *)a3;
  unint64_t v9 = *(void *)a3 + *(void *)(a3 + 8) - (*(void *)(a3 + 8) != 0);
  if (*(void *)a3 >= (unint64_t)BytePtr)
  {
    unint64_t v11 = (unint64_t)&BytePtr[result - (result != 0)];
    if ((unint64_t)BytePtr >= v8)
    {
      *(unsigned char *)(a3 + 16) = v9 != v11;
      if (v9 == v11) {
        return result;
      }
      goto LABEL_14;
    }
    BOOL v10 = v11 >= v8;
  }
  else
  {
    BOOL v10 = v9 >= (unint64_t)BytePtr;
  }
  char v12 = v10;
  *(unsigned char *)(a3 + 16) = v12;
  if (v10) {
LABEL_14:
  }
    *(void *)(a3 + 32) = v5;
  return result;
}

double ColorSyncConvertDoubleXYZFromD50(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, int a4, double *a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  long long v18 = xmmword_18BE63660;
  uint64_t v19 = 0x3FEA6594AF4F0D84;
  float64_t v8 = a1[1].f64[0];
  *a3 = *a1;
  a3[1].f64[0] = v8;
  double v24 = 0.0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  if (!a5
    || (long long v9 = *((_OWORD *)a5 + 1),
        long long v20 = *(_OWORD *)a5,
        long long v21 = v9,
        long long v10 = *((_OWORD *)a5 + 3),
        long long v22 = *((_OWORD *)a5 + 2),
        long long v23 = v10,
        double v24 = a5[8],
        !InvertMatrix((double *)&v20)))
  {
    ColorSyncGetAdaptationMtx(a4, (double *)&v20, (float64x2_t *)&v18, a2);
  }
  float64x2_t v11 = *a3;
  double v12 = a3[1].f64[0];
  double v13 = a3->f64[1];
  double v14 = vmlad_n_f64(vmuld_lane_f64(*(double *)&v22, *a3, 1), *((double *)&v21 + 1), a3->f64[0])
      + v12 * *((double *)&v22 + 1);
  double v15 = 0.0;
  if (v14 < 0.0 || (double v15 = 1.0, v14 > 1.0)) {
    double v14 = v15;
  }
  double v16 = v13 * *((double *)&v23 + 1) + v11.f64[0] * *(double *)&v23 + v12 * v24;
  double result = v13 * *((double *)&v20 + 1) + v11.f64[0] * *(double *)&v20 + v12 * *(double *)&v21;
  a3->f64[0] = result;
  a3->f64[1] = v14;
  a3[1].f64[0] = v16;
  return result;
}

float64x2_t *ColorSyncConvertXYZToXYZWithChromaticAdaptationMatrix(float64x2_t *result, double *a2, double *a3)
{
  double v3 = result[1].f64[0];
  double v4 = vmlad_n_f64(vmuld_lane_f64(a3[1], *result, 1), *a3, result->f64[0]) + v3 * a3[2];
  double v5 = vmlad_n_f64(vmuld_lane_f64(a3[4], *result, 1), a3[3], result->f64[0]) + v3 * a3[5];
  double v6 = vmlad_n_f64(vmuld_lane_f64(a3[7], *result, 1), a3[6], result->f64[0]);
  *(double *)&uint64_t v7 = 0.0;
  if (v4 < 0.0 || (*(double *)&uint64_t v7 = 1.99996948, v4 > 1.99996948)) {
    double v4 = *(double *)&v7;
  }
  double v8 = v6 + v3 * a3[8];
  double v9 = 0.0;
  if (v5 < 0.0 || (double v9 = 1.0, v5 > 1.0)) {
    double v5 = v9;
  }
  *(double *)&uint64_t v10 = 0.0;
  if (v8 < 0.0 || (*(double *)&uint64_t v10 = 1.99996948, v8 > 1.99996948)) {
    double v8 = *(double *)&v10;
  }
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v8;
  return result;
}

size_t __ColorSyncGetTempDirPath_block_invoke()
{
  size_t result = confstr(65537, &ColorSyncGetTempDirPath_tempDirPath, 0x400uLL);
  if (!result) {
    ColorSyncGetTempDirPath_tempDirPath = 0;
  }
  return result;
}

void CMMFloatBitNChanEncoder::DoEncode()
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = -171;
}

{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = -171;
}

{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = -171;
}

BOOL CMMFloatBitNChanEncoder::IsInPlace(uint64_t a1, uint64_t a2)
{
  return CMMDataBaseClass::IsSameData(*(void *)(a1 + 48), a2);
}

BOOL CMMDataBaseClass::IsSameData(uint64_t a1, uint64_t a2)
{
  if (!a1 || !*(void *)a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  return *(void *)(a1 + 8) == *(void *)(*(void *)a2 + 8);
}

void *CMMFloatBitNChanEncoder::DoEncode(void *result, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v5 = 0;
  result[18] = result[21] + result[16] * result[22];
  do
  {
    uint64_t v6 = result[20];
    if (!v6) {
      break;
    }
    unint64_t v7 = result[19];
    uint64_t v8 = result[22];
    unint64_t v9 = v7 - v8;
    if (v7 - v8 >= result[1] - *a4) {
      unint64_t v9 = result[1] - *a4;
    }
    if (v9)
    {
      unint64_t v10 = result[3];
      unint64_t v11 = v9;
      while (1)
      {
        if (v5 >= v10) {
          goto LABEL_40;
        }
        --v11;
        unint64_t v12 = result[2];
        double v13 = (uint64_t *)result[13];
        uint64_t v14 = *v13;
        if (*v13) {
          break;
        }
        if (!v5)
        {
          uint64_t v17 = result[18];
          goto LABEL_28;
        }
LABEL_25:
        if (v5 < v12) {
          goto LABEL_40;
        }
        *(float *)(a2 + 4 * v5 - 4) = *(float *)(a2 + 4 * v5 - 4) + 1.0;
        result[18] += result[16];
LABEL_29:
        if (!v11) {
          goto LABEL_32;
        }
      }
      uint64_t v15 = 0;
      unint64_t v16 = v5 - v12;
      uint64_t v17 = result[18];
      uint64_t v18 = result[14];
      unint64_t v19 = v5;
      do
      {
        if (v18)
        {
          long long v20 = (int *)(v13[v15 + 1] + 4 * v17);
          uint64_t v21 = v18;
          do
          {
            int v22 = *v20++;
            unint64_t v23 = v19 + 1;
            *(_DWORD *)(a2 + 4 * v19++) = v22;
            --v21;
          }
          while (v21);
        }
        else
        {
          unint64_t v23 = v19;
        }
        ++v15;
        unint64_t v19 = v23;
      }
      while (v15 != v14);
      if (v5)
      {
        uint64_t v24 = 0;
        uint64_t v25 = (float *)(a2 + 4 * v5);
        unint64_t v26 = v5;
        while (!v18)
        {
LABEL_22:
          ++v24;
          v25 += v18;
          if (v24 == v14) {
            goto LABEL_25;
          }
        }
        v26 += v18;
        v16 += v18;
        uint64_t v27 = v18;
        float64_t v28 = v25;
        while (v28[-v12] == *v28)
        {
          ++v28;
          if (!--v27) {
            goto LABEL_22;
          }
        }
      }
LABEL_28:
      v5 += v12;
      *(_DWORD *)(a2 + 4 * v5 - 4) = 1065353216;
      result[18] = v17 + result[16];
      if (v5 >= v10) {
        goto LABEL_32;
      }
      goto LABEL_29;
    }
    unint64_t v11 = 0;
LABEL_32:
    unint64_t v29 = v9 - v11;
    unint64_t v30 = v29 + v8;
    if (v30 == v7)
    {
      unint64_t v30 = 0;
      uint64_t v31 = result[21] + result[17];
      result[18] = v31;
      result[20] = v6 - 1;
      result[21] = v31;
    }
    else if (v30 >= v7)
    {
      goto LABEL_40;
    }
    result[22] = v30;
    unint64_t v32 = *a4 + v29;
    *a4 = v32;
    unint64_t v33 = result[3];
    if (v5 <= v33)
    {
      unint64_t v34 = result[1];
      if (v32 <= v34) {
        continue;
      }
    }
LABEL_40:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  while (v5 != v33 && v32 != v34);
  *a5 = v5 / result[2];
  return result;
}

void CMMFloatBitNChanDecoder::DoDecode()
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = -171;
}

{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = -171;
}

{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = -171;
}

void *CMMFloatBitNChanDecoder::DoDecode(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  BOOL v7 = 0;
  unint64_t v8 = result[1];
  unint64_t v9 = v8 * a4;
  uint64_t v10 = result[14];
  uint64_t v11 = result[19];
  unint64_t v12 = result[20];
  uint64_t v13 = result[18];
  uint64_t v14 = v11 + v12 * v10;
  result[16] = v14;
  do
  {
    if (!v13) {
      break;
    }
    unint64_t v15 = result[17];
    if (v15 == v12)
    {
      unint64_t v16 = 0;
    }
    else
    {
      unint64_t v16 = v15 - v12;
      while (1)
      {
        if (v4 >= 0xC00 / v8 * v8) {
          goto LABEL_37;
        }
        uint64_t v17 = (uint64_t *)result[11];
        uint64_t v18 = *v17;
        if (v7)
        {
          if (v18)
          {
            uint64_t v19 = 0;
            uint64_t v20 = result[12];
            do
            {
              if (v20)
              {
                uint64_t v21 = v17[v19 + 1];
                int v22 = (_DWORD *)(v21 + 4 * v14);
                unint64_t v23 = (int *)(v21 + 4 * v5);
                uint64_t v24 = v20;
                do
                {
                  int v25 = *v23++;
                  *v22++ = v25;
                  --v24;
                }
                while (v24);
              }
              ++v19;
            }
            while (v19 != v18);
          }
        }
        else
        {
          if (v18)
          {
            uint64_t v26 = 0;
            uint64_t v27 = result[12];
            unint64_t v28 = v4;
            do
            {
              if (v27)
              {
                unint64_t v29 = (_DWORD *)(v17[v26 + 1] + 4 * v14);
                uint64_t v30 = v27;
                do
                {
                  unint64_t v31 = v28 + 1;
                  *v29++ = *(_DWORD *)(a2 + 4 * v28++);
                  --v30;
                }
                while (v30);
              }
              else
              {
                unint64_t v31 = v28;
              }
              ++v26;
              unint64_t v28 = v31;
            }
            while (v26 != v18);
          }
          LODWORD(v6) = (int)*(float *)(a2 + 4 * (v8 - 1 + v4));
          if (!v6) {
            goto LABEL_37;
          }
          uint64_t v6 = (int)v6;
          uint64_t v5 = v14;
        }
        if (!v6) {
          goto LABEL_37;
        }
        --v16;
        v14 += v10;
        BOOL v7 = --v6 != 0;
        if (!v6)
        {
          v4 += v8;
          if (v4 == v9) {
            break;
          }
        }
        if (!v16) {
          goto LABEL_31;
        }
      }
      uint64_t v6 = 0;
      BOOL v7 = 0;
      unint64_t v4 = v9;
    }
LABEL_31:
    unint64_t v12 = v15 - v16;
    if (v15 - v16 == v15)
    {
      unint64_t v12 = 0;
      v11 += result[15];
      result[18] = --v13;
      result[19] = v11;
      uint64_t v14 = v11;
    }
    else if (v12 >= v15)
    {
      goto LABEL_37;
    }
    result[20] = v12;
    if (v4 > v9)
    {
LABEL_37:
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = -171;
    }
  }
  while (v4 != v9);
  result[16] = v14;
  return result;
}

uint64_t CMMAlphaCopier::Copy(uint64_t this, unint64_t a2)
{
  while (a2)
  {
    uint64_t v3 = *(void *)(this + 24);
    uint64_t v2 = *(void *)(this + 32);
    uint64_t v5 = *(void *)(this + 88);
    uint64_t v4 = *(void *)(this + 96);
    uint64_t v7 = *(void *)(this + 40);
    uint64_t v6 = *(void *)(this + 48);
    int v8 = *(unsigned __int8 *)(this + 120);
    if (*(unsigned char *)(this + 120))
    {
      unint64_t v9 = *(void *)(this + 80);
      unint64_t v10 = v9 - v4;
      if (v9 - v4 >= a2) {
        unint64_t v10 = a2;
      }
    }
    else
    {
      unint64_t v11 = *(void *)(this + 72);
      unint64_t v9 = *(void *)(this + 80);
      unint64_t v10 = v11 - v5;
      if (v11 - v5 >= v9 - v4) {
        unint64_t v10 = v9 - v4;
      }
      if (v10 >= a2) {
        unint64_t v10 = a2;
      }
      unint64_t v12 = v10 + v5;
      *(void *)(this + 88) = (v10 + v5) % v11;
      if ((v10 + v5) / v11 != 1 && v11 <= v12)
      {
LABEL_56:
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = -171;
      }
      if (v11 <= v12) {
        *(void *)(this + 24) = v3 + *(void *)(this + 56);
      }
    }
    *(void *)(this + 96) = (v10 + v4) % v9;
    if (v9 <= v10 + v4 && (v10 + v4) / v9 != 1) {
      goto LABEL_56;
    }
    if (v9 <= v10 + v4) {
      *(void *)(this + 32) = v2 + *(void *)(this + 64);
    }
    uint64_t v14 = (unsigned char *)(v2 + v6 * v4);
    if (v8)
    {
      if (*(void *)(this + 112) == 1)
      {
        if (v10)
        {
          unint64_t v15 = v10;
          do
          {
            *uint64_t v14 = -1;
            v14 += *(void *)(this + 48);
            --v15;
          }
          while (v15);
        }
      }
      else
      {
        for (unint64_t i = v10; i; --i)
        {
          *(_WORD *)uint64_t v14 = -1;
          v14 += v6;
        }
      }
    }
    else
    {
      unint64_t v16 = (char *)(v3 + v7 * v5);
      unint64_t v17 = *(void *)(this + 104);
      unint64_t v18 = *(void *)(this + 112);
      if (v17 == v18)
      {
        if (v10)
        {
          uint64_t v19 = v7 - v17;
          uint64_t v20 = v6 - v17;
          unint64_t v21 = v10;
          do
          {
            for (uint64_t j = *(void *)(this + 112); j; --j)
            {
              char v23 = *v16++;
              *v14++ = v23;
            }
            v16 += v19;
            v14 += v20;
            --v21;
          }
          while (v21);
        }
      }
      else if (v17 <= v18)
      {
        if (v17 != 1 || v18 != 2) {
          goto LABEL_56;
        }
        for (unint64_t k = v10; k; --k)
        {
          *(_WORD *)uint64_t v14 = *v16 | (*v16 << 8);
          v16 += v7;
          v14 += v6;
        }
      }
      else
      {
        if (v17 != 2 || v18 != 1) {
          goto LABEL_56;
        }
        for (unint64_t m = v10; m; --m)
        {
          if (*(_WORD *)v16)
          {
            unsigned int v26 = *(unsigned __int16 *)v16 / 0x101u;
            if (v26 - 1 > v26 || v26 + 1 < v26) {
              goto LABEL_56;
            }
          }
          else
          {
            LOBYTE(v26) = 0;
          }
          *uint64_t v14 = v26;
          v16 += *(void *)(this + 40);
          v14 += *(void *)(this + 48);
        }
      }
    }
    a2 -= v10;
  }
  return this;
}

uint64_t CMMFloatAlphaCopier::Copy(uint64_t this, unint64_t a2)
{
  if (a2)
  {
    int v2 = *(unsigned __int8 *)(this + 120);
    do
    {
      if (v2)
      {
        uint64_t v3 = 0;
        uint64_t v4 = *(void *)(this + 152);
        uint64_t v5 = *(void *)(this + 216);
        uint64_t v6 = *(void *)(this + 168);
        uint64_t v7 = (_DWORD *)(v4 + 4 * v6 * v5);
        unint64_t v8 = *(void *)(this + 200);
        unint64_t v9 = v8 - v5;
        if (v8 - v5 >= a2) {
          unint64_t v9 = a2;
        }
      }
      else
      {
        uint64_t v10 = *(void *)(this + 144);
        uint64_t v4 = *(void *)(this + 152);
        uint64_t v11 = *(void *)(this + 208);
        uint64_t v5 = *(void *)(this + 216);
        uint64_t v12 = *(void *)(this + 160);
        uint64_t v6 = *(void *)(this + 168);
        unint64_t v13 = *(void *)(this + 192);
        unint64_t v8 = *(void *)(this + 200);
        unint64_t v9 = v13 - v11;
        if (v13 - v11 >= v8 - v5) {
          unint64_t v9 = v8 - v5;
        }
        if (v9 >= a2) {
          unint64_t v9 = a2;
        }
        unint64_t v14 = v9 + v11;
        *(void *)(this + 208) = (v9 + v11) % v13;
        if ((v9 + v11) / v13 != 1 && v13 <= v14)
        {
LABEL_30:
          exception = __cxa_allocate_exception(4uLL);
          _DWORD *exception = -171;
        }
        uint64_t v3 = (_DWORD *)(v10 + 4 * v12 * v11);
        uint64_t v7 = (_DWORD *)(v4 + 4 * v6 * v5);
        if (v13 <= v14) {
          *(void *)(this + 144) = v10 + 4 * *(void *)(this + 176);
        }
      }
      unint64_t v16 = v5 + v9;
      *(void *)(this + 216) = v16 % v8;
      if (v8 <= v16 && v16 / v8 != 1) {
        goto LABEL_30;
      }
      if (v8 <= v16) {
        *(void *)(this + 152) = v4 + 4 * *(void *)(this + 184);
      }
      if (v9)
      {
        uint64_t v17 = 4 * v6;
        uint64_t v18 = 4 * *(void *)(this + 160);
        unint64_t v19 = v9;
        do
        {
          if (v2) {
            uint64_t v20 = (_DWORD *)(this + 224);
          }
          else {
            uint64_t v20 = v3;
          }
          _DWORD *v7 = *v20;
          uint64_t v7 = (_DWORD *)((char *)v7 + v17);
          uint64_t v3 = (_DWORD *)((char *)v3 + v18);
          --v19;
        }
        while (v19);
      }
      a2 -= v9;
    }
    while (a2);
  }
  return this;
}

void CMMConvTRC::ConvertFloat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v196 = *MEMORY[0x1E4F143B8];
  if (a5 && *(unsigned char *)(a1 + 33))
  {
    BOOL v8 = 1;
  }
  else
  {
    if (*(unsigned char *)(a1 + 35))
    {
      BOOL v192 = 0;
      goto LABEL_8;
    }
    BOOL v8 = *(unsigned char *)(a1 + 36) == 0;
  }
  BOOL v192 = v8;
LABEL_8:
  unint64_t v9 = a4 * a3;
  int v10 = *(_DWORD *)(a1 + 88);
  if (v10 == 1)
  {
    switch(*(_DWORD *)(a1 + 100))
    {
      case 0:
        unint64_t v36 = *(unsigned int *)(a1 + 72);
        if (v9 > v36)
        {
          float v37 = *(float *)(a1 + 112);
          do
          {
            float v38 = *(float *)(a2 + 4 * v36);
            int v39 = *(unsigned __int8 *)(a1 + 34);
            if ((LODWORD(v38) & 0x7FFFFFFFu) >= 0x7F800000)
            {
              bzero(__str, 0x400uLL);
              snprintf(__str, 0x400uLL, "CMMConvTRC::ConvertFloat input is not a valid value (%f)", v38);
              CMMThrowExceptionWithLog(0, __str, v40, v41, v42, v43, v44, v45);
            }
            if (v37 != 1.0)
            {
              float v46 = fabsf(v38);
              if (!v39) {
                float v46 = v38;
              }
              float v47 = powf(v46, v37);
              if (v39) {
                BOOL v48 = v38 < 0.0;
              }
              else {
                BOOL v48 = 0;
              }
              if (v48) {
                float v47 = -v47;
              }
              *(float *)(a2 + 4 * v36) = v47;
            }
            BOOL v49 = v192;
            if (!*(unsigned char *)(a1 + 33)) {
              BOOL v49 = 0;
            }
            if (!v49)
            {
              float v50 = *(float *)(a2 + 4 * v36);
              if (v50 <= 1.0) {
                float v51 = *(float *)(a2 + 4 * v36);
              }
              else {
                float v51 = 1.0;
              }
              if (v50 >= 0.0) {
                float v52 = v51;
              }
              else {
                float v52 = 0.0;
              }
              *(float *)(a2 + 4 * v36) = v52;
            }
            v36 += a3;
          }
          while (v36 < v9);
        }
        break;
      case 1:
        unint64_t v53 = *(unsigned int *)(a1 + 72);
        if (v9 > v53)
        {
          float v54 = *(float *)(a1 + 112);
          float v55 = *(float *)(a1 + 116);
          float v56 = *(float *)(a1 + 120);
          do
          {
            float v57 = *(float *)(a2 + 4 * v53);
            int v58 = *(unsigned __int8 *)(a1 + 34);
            if ((LODWORD(v57) & 0x7FFFFFFFu) >= 0x7F800000)
            {
              bzero(__str, 0x400uLL);
              snprintf(__str, 0x400uLL, "CMMConvTRC::ConvertFloat input is not a valid value (%f)", v57);
              CMMThrowExceptionWithLog(0, __str, v59, v60, v61, v62, v63, v64);
            }
            float v65 = fabsf(v57);
            if (v58) {
              float v66 = v65;
            }
            else {
              float v66 = v57;
            }
            float v67 = 0.0;
            if (v66 >= (float)((float)-v56 / v55))
            {
              float v67 = powf(v56 + (float)(v55 * v66), v54);
              if (v58 && v57 < 0.0) {
                float v67 = -v67;
              }
            }
            *(float *)(a2 + 4 * v53) = v67;
            BOOL v69 = v192;
            if (!*(unsigned char *)(a1 + 33)) {
              BOOL v69 = 0;
            }
            if (!v69)
            {
              if (v67 <= 1.0) {
                float v70 = v67;
              }
              else {
                float v70 = 1.0;
              }
              if (v67 >= 0.0) {
                float v71 = v70;
              }
              else {
                float v71 = 0.0;
              }
              *(float *)(a2 + 4 * v53) = v71;
            }
            v53 += a3;
          }
          while (v53 < v9);
        }
        break;
      case 2:
        unint64_t v72 = *(unsigned int *)(a1 + 72);
        if (v9 > v72)
        {
          float v73 = *(float *)(a1 + 116);
          float v189 = *(float *)(a1 + 112);
          float v74 = *(float *)(a1 + 120);
          float v75 = *(float *)(a1 + 124);
          do
          {
            float v76 = *(float *)(a2 + 4 * v72);
            int v77 = *(unsigned __int8 *)(a1 + 34);
            if ((LODWORD(v76) & 0x7FFFFFFFu) >= 0x7F800000)
            {
              bzero(__str, 0x400uLL);
              snprintf(__str, 0x400uLL, "CMMConvTRC::ConvertFloat input is not a valid value (%f)", v76);
              CMMThrowExceptionWithLog(0, __str, v78, v79, v80, v81, v82, v83);
            }
            float v84 = fabsf(v76);
            if (v77)
            {
              BOOL v85 = v76 < 0.0;
            }
            else
            {
              float v84 = v76;
              BOOL v85 = 0;
            }
            if (v85) {
              float v86 = -1.0;
            }
            else {
              float v86 = 1.0;
            }
            if (v84 >= (float)((float)-v74 / v73)) {
              float v87 = v75 + (float)(v86 * powf(v74 + (float)(v73 * v84), v189));
            }
            else {
              float v87 = v75 * v86;
            }
            *(float *)(a2 + 4 * v72) = v87;
            BOOL v88 = v192;
            if (!*(unsigned char *)(a1 + 33)) {
              BOOL v88 = 0;
            }
            if (!v88)
            {
              if (v87 <= 1.0) {
                float v89 = v87;
              }
              else {
                float v89 = 1.0;
              }
              if (v87 >= 0.0) {
                float v90 = v89;
              }
              else {
                float v90 = 0.0;
              }
              *(float *)(a2 + 4 * v72) = v90;
            }
            v72 += a3;
          }
          while (v72 < v9);
        }
        break;
      case 3:
        unint64_t v91 = *(unsigned int *)(a1 + 72);
        if (v9 > v91)
        {
          float v92 = *(float *)(a1 + 112);
          float v190 = *(float *)(a1 + 116);
          float v93 = *(float *)(a1 + 120);
          float v94 = *(float *)(a1 + 124);
          float v95 = *(float *)(a1 + 128);
          do
          {
            float v96 = *(float *)(a2 + 4 * v91);
            int v97 = *(unsigned __int8 *)(a1 + 34);
            if ((LODWORD(v96) & 0x7FFFFFFFu) >= 0x7F800000)
            {
              bzero(__str, 0x400uLL);
              snprintf(__str, 0x400uLL, "CMMConvTRC::ConvertFloat input is not a valid value (%f)", v96);
              CMMThrowExceptionWithLog(0, __str, v98, v99, v100, v101, v102, v103);
            }
            float v104 = fabsf(v96);
            if (v97)
            {
              BOOL v105 = v96 < 0.0;
            }
            else
            {
              float v104 = v96;
              BOOL v105 = 0;
            }
            if (v105) {
              float v106 = -1.0;
            }
            else {
              float v106 = 1.0;
            }
            if (v104 >= v95) {
              float v107 = v106 * powf(v93 + (float)(v190 * v104), v92);
            }
            else {
              float v107 = v104 * (float)(v94 * v106);
            }
            *(float *)(a2 + 4 * v91) = v107;
            BOOL v108 = v192;
            if (!*(unsigned char *)(a1 + 33)) {
              BOOL v108 = 0;
            }
            if (!v108)
            {
              if (v107 <= 1.0) {
                float v109 = v107;
              }
              else {
                float v109 = 1.0;
              }
              if (v107 >= 0.0) {
                float v110 = v109;
              }
              else {
                float v110 = 0.0;
              }
              *(float *)(a2 + 4 * v91) = v110;
            }
            v91 += a3;
          }
          while (v91 < v9);
        }
        break;
      case 4:
        unint64_t v111 = *(unsigned int *)(a1 + 72);
        if (v9 > v111)
        {
          float v112 = *(float *)(a1 + 112);
          float v191 = *(float *)(a1 + 116);
          float v113 = *(float *)(a1 + 120);
          float v114 = *(float *)(a1 + 124);
          float v115 = *(float *)(a1 + 128);
          float v116 = *(float *)(a1 + 132);
          float v117 = *(float *)(a1 + 136);
          do
          {
            float v118 = *(float *)(a2 + 4 * v111);
            int v119 = *(unsigned __int8 *)(a1 + 34);
            if ((LODWORD(v118) & 0x7FFFFFFFu) >= 0x7F800000)
            {
              bzero(__str, 0x400uLL);
              snprintf(__str, 0x400uLL, "CMMConvTRC::ConvertFloat input is not a valid value (%f)", v118);
              CMMThrowExceptionWithLog(0, __str, v120, v121, v122, v123, v124, v125);
            }
            float v126 = fabsf(v118);
            BOOL v127 = v119 == 0;
            if (v119) {
              BOOL v128 = v118 < 0.0;
            }
            else {
              BOOL v128 = 0;
            }
            if (v127) {
              float v126 = v118;
            }
            if (v126 >= v115) {
              float v129 = v116 + powf(v113 + (float)(v191 * v126), v112);
            }
            else {
              float v129 = v117 + (float)(v114 * v126);
            }
            if (v128) {
              float v129 = -v129;
            }
            *(float *)(a2 + 4 * v111) = v129;
            BOOL v130 = v192;
            if (!*(unsigned char *)(a1 + 33)) {
              BOOL v130 = 0;
            }
            if (!v130)
            {
              if (v129 <= 1.0) {
                float v131 = v129;
              }
              else {
                float v131 = 1.0;
              }
              BOOL v48 = v129 < 0.0;
              float v132 = 0.0;
              if (!v48) {
                float v132 = v131;
              }
              *(float *)(a2 + 4 * v111) = v132;
            }
            v111 += a3;
          }
          while (v111 < v9);
        }
        break;
      case 5:
        unint64_t v133 = *(unsigned int *)(a1 + 72);
        if (v9 > v133)
        {
          float v134 = *(float *)(a1 + 116);
          float v135 = *(float *)(a1 + 120);
          float v136 = *(float *)(a1 + 124);
          float v137 = *(float *)(a1 + 128);
          float v138 = *(float *)(a1 + 136);
          float v139 = -*(float *)(a1 + 132);
          do
          {
            float v140 = *(float *)(a2 + 4 * v133);
            float v141 = powf(fabsf(v140), v134);
            float v142 = v138 * powf(fmaxf(v141 - v136, 0.0) / (float)(v137 + (float)(v139 * v141)), v135);
            float v143 = -v142;
            if (v140 >= 0.0) {
              float v143 = v142;
            }
            *(float *)(a2 + 4 * v133) = v143;
            v133 += a3;
          }
          while (v133 < v9);
        }
        break;
      case 6:
        unint64_t v144 = *(unsigned int *)(a1 + 72);
        if (v9 > v144)
        {
          float v145 = *(float *)(a1 + 116);
          float v146 = *(float *)(a1 + 120);
          float v147 = *(float *)(a1 + 124);
          float v148 = *(float *)(a1 + 128);
          float v149 = *(float *)(a1 + 132);
          float v150 = 1.0 / *(float *)(a1 + 136);
          do
          {
            float v151 = *(float *)(a2 + 4 * v144);
            float v152 = powf(v150 * fabsf(v151), v145);
            float v153 = (float)(v147 + (float)(v148 * v152)) / ((float)(v149 * v152) + 1.0);
            float v154 = powf(v153, v146);
            if (v151 < 0.0) {
              float v154 = -v154;
            }
            *(float *)(a2 + 4 * v144) = v154;
            v144 += a3;
          }
          while (v144 < v9);
        }
        break;
      case 7:
        unint64_t v155 = *(unsigned int *)(a1 + 72);
        if (v9 > v155)
        {
          float v156 = *(float *)(a1 + 120);
          float v193 = *(float *)(a1 + 116);
          float v157 = *(float *)(a1 + 124);
          float v158 = *(float *)(a1 + 128);
          float v159 = *(float *)(a1 + 132);
          do
          {
            float v160 = *(float *)(a2 + 4 * v155);
            if (v160 >= 0.0) {
              float v161 = 1.0;
            }
            else {
              float v161 = -1.0;
            }
            float v162 = fabsf(v160);
            if (v162 <= 0.5) {
              float v163 = (float)(v160 * v160) / 3.0;
            }
            else {
              float v163 = v158 * (float)(v156 + expf((float)(v162 - v157) / v193));
            }
            if (v161 <= 0.0) {
              float v163 = -v163;
            }
            *(float *)(a2 + 4 * v155) = v159 * v163;
            v155 += a3;
          }
          while (v155 < v9);
        }
        break;
      case 8:
        unint64_t v164 = *(unsigned int *)(a1 + 72);
        if (v9 > v164)
        {
          float v165 = *(float *)(a1 + 124);
          float v166 = *(float *)(a1 + 128);
          float v167 = *(float *)(a1 + 116);
          double v168 = -*(float *)(a1 + 120);
          do
          {
            float v169 = *(float *)(a2 + 4 * v164);
            if (v169 >= 0.0) {
              float v170 = 1.0;
            }
            else {
              float v170 = -1.0;
            }
            float v171 = fabsf(v169);
            if (v171 <= v166)
            {
              float v173 = sqrtf(v171 * 3.0);
            }
            else
            {
              float v172 = v168 + v171 * 12.0;
              float v173 = v165 + (float)(v167 * logf(v172));
            }
            if (v170 <= 0.0) {
              float v173 = -v173;
            }
            *(float *)(a2 + 4 * v164) = v173;
            v164 += a3;
          }
          while (v164 < v9);
        }
        break;
      case 9:
        unint64_t v174 = *(unsigned int *)(a1 + 72);
        if (v9 > v174)
        {
          float v175 = *(float *)(a1 + 116);
          float v194 = *(float *)(a1 + 112);
          float v176 = *(float *)(a1 + 120);
          float v177 = *(float *)(a1 + 124);
          float v178 = *(float *)(a1 + 128);
          float v179 = *(float *)(a1 + 132);
          do
          {
            float v180 = *(float *)(a2 + 4 * v174);
            if (v180 >= 0.0) {
              float v181 = 1.0;
            }
            else {
              float v181 = -1.0;
            }
            float v182 = fabsf(v180) - v194;
            if (v182 < 0.0) {
              float v182 = 0.0;
            }
            float v183 = v175 * v182;
            if (v183 > v176) {
              float v183 = v176 + (float)(logf((float)((float)(v183 - v176) * v177) + 1.0) / v177);
            }
            float v184 = v179 * powf(v183, v178);
            if (v184 <= 1.0) {
              float v185 = v184;
            }
            else {
              float v185 = 1.0;
            }
            if (v184 >= 0.0) {
              float v186 = v185;
            }
            else {
              float v186 = 0.0;
            }
            if (v181 <= 0.0) {
              float v186 = -v186;
            }
            *(float *)(a2 + 4 * v174) = v186;
            v174 += a3;
          }
          while (v174 < v9);
        }
        break;
      case 0xA:
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = -171;
      default:
        return;
    }
  }
  else if (!v10)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 104);
    unint64_t v12 = v11[4];
    uint64_t v13 = CMMTable::FloatData(v11[2], v11[3]);
    unint64_t v14 = *(unsigned int *)(a1 + 72);
    if (v9 > v14)
    {
      unint64_t v15 = (float *)v13;
      unint64_t v16 = (v12 >> 2) - 1;
      float v17 = *(float *)(a1 + 144);
      float v18 = *(float *)(a1 + 148);
      float v19 = *(float *)(a1 + 152);
      float v20 = *(float *)(a1 + 156);
      uint64_t v188 = (float *)(v13 + 0x4000);
      do
      {
        float v21 = *(float *)(a2 + 4 * v14);
        int v22 = *(unsigned __int8 *)(a1 + 34);
        if ((LODWORD(v21) & 0x7FFFFFFFu) >= 0x7F800000)
        {
          bzero(__str, 0x400uLL);
          snprintf(__str, 0x400uLL, "CMMConvTRC::ConvertFloat input is not a valid value (%f)", v21);
          CMMThrowExceptionWithLog(0, __str, v23, v24, v25, v26, v27, v28);
        }
        BOOL v29 = v21 < 0.0;
        float v30 = fabsf(v21);
        if (!v22)
        {
          BOOL v29 = 0;
          float v30 = v21;
        }
        if (v30 <= 1.0)
        {
          if (v30 >= 0.0)
          {
            float v32 = v30 * (float)v16;
            unint64_t v34 = v32 + 1;
            if (v16 < v34) {
              unint64_t v34 = (v12 >> 2) - 1;
            }
            float v33 = v15[v32];
            float v35 = v33 + (float)((float)(v15[v34] - v33) * (float)(v32 - (float)v32));
            float v31 = -v35;
            if (!v29) {
              float v31 = v35;
            }
          }
          else if (v192)
          {
            float v31 = v18 + (float)(v17 * v30);
          }
          else
          {
            float v31 = *v15;
          }
        }
        else if (v192)
        {
          float v31 = v20 + (float)(v19 * v30);
        }
        else
        {
          float v31 = *v188;
        }
        *(float *)(a2 + 4 * v14) = v31;
        v14 += a3;
      }
      while (v14 < v9);
    }
  }
}

CFDataRef CMMConvTRC::create_flattened_TRC_data(CMMConvTRC *this, CFDictionaryRef theDict, unsigned int *a3)
{
  *a3 = 4097;
  if (!theDict || !CFDictionaryContainsKey(theDict, (const void *)kColorSyncTransformTRCSize)) {
    goto LABEL_21;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)kColorSyncTransformTRCSize);
  unsigned int valuePtr = 4097;
  if (Value && CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr) == 1)
  {
    unsigned int v7 = valuePtr;
    *a3 = valuePtr;
    if (!v7) {
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v7 = *a3;
    if (!*a3)
    {
LABEL_8:
      unsigned int v7 = *((_DWORD *)this + 20);
      *a3 = v7;
    }
  }
  if (v7 == 4097 || (CFIndex v8 = 4 * v7, (Mutable = CFDataCreateMutable(0, v8)) == 0))
  {
LABEL_21:
    float v20 = (const UInt8 *)CMMTable::FloatData(*(void *)(*((void *)this + 13) + 16), *(void *)(*((void *)this + 13) + 24));
    return CFDataCreate(0, v20, 16388);
  }
  int v10 = Mutable;
  CFDataSetLength(Mutable, v8);
  uint64_t v11 = CMMTable::FloatData(*(void *)(*((void *)this + 13) + 16), *(void *)(*((void *)this + 13) + 24));
  Mutablevm_address_t BytePtr = CFDataGetMutableBytePtr(v10);
  uint64_t v13 = *a3;
  if (v13)
  {
    for (uint64_t i = 0; i != v13; ++i)
    {
      float v15 = (float)((float)i * 4096.0) / (float)(v13 - 1);
      unsigned int v16 = vcvtms_u32_f32(v15);
      if (v16 >= 0x1000) {
        unsigned int v17 = 4096;
      }
      else {
        unsigned int v17 = v16;
      }
      float v18 = *(float *)(v11 + 4 * v17);
      if (v16 <= 0xFFF)
      {
        float v19 = v15 - (float)v17;
        if (v19 != 0.0) {
          float v18 = v18 + (float)((float)(*(float *)(v11 + 4 * (v17 + 1)) - v18) * v19);
        }
      }
      *(float *)&MutableBytePtr[4 * i] = v18;
    }
  }
  return v10;
}

void CMMConvNode::PrintInfo(CMMConvNode *this)
{
  uint64_t v4 = 0;
  CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v4);
  int v2 = (const void *)(*(uint64_t (**)(CMMConvNode *, void))(*(void *)this + 208))(this, 0);
  uint64_t v3 = v2;
  if (v2)
  {
    CFShow(v2);
    CFRelease(v3);
  }
  CMMMemMgr::ReleaseMemList(&v4);
}

void sub_18BE3CFA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMMemMgr::ReleaseMemList((void **)va);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
}

uint64_t CMMConvNode::GetNodeAggregate(CMMConvNode *this)
{
  return 0;
}

uint64_t CMMConvTRC::GetFunctionType(CMMConvTRC *this)
{
  return 1;
}

uint64_t CMMConvNode::GetPrecision(CMMConvNode *this)
{
  return 2;
}

uint64_t CMMConvNode::GetNofSubNodes(CMMConvNode *this)
{
  return 1;
}

uint64_t CMMConvNode::GetCLUTPoints(CMMConvNode *this)
{
  return 0;
}

uint64_t CMMConvTRC::ClampOutput(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (unint64_t i = *(unsigned int *)(result + 72); i < a4 * a3; i += a3)
  {
    float v5 = *(float *)(a2 + 4 * i);
    float v6 = *(float *)(result + 44);
    if (v5 <= v6) {
      float v6 = *(float *)(a2 + 4 * i);
    }
    if (v5 >= *(float *)(result + 40)) {
      float v7 = v6;
    }
    else {
      float v7 = *(float *)(result + 40);
    }
    *(float *)(a2 + 4 * i) = v7;
  }
  return result;
}

uint64_t CMMConvTRC::ClampInput(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (unint64_t i = *(unsigned int *)(result + 72); i < a4 * a3; i += a3)
  {
    float v5 = *(float *)(a2 + 4 * i);
    float v6 = *(float *)(result + 44);
    if (v5 <= v6) {
      float v6 = *(float *)(a2 + 4 * i);
    }
    if (v5 >= *(float *)(result + 40)) {
      float v7 = v6;
    }
    else {
      float v7 = *(float *)(result + 40);
    }
    *(float *)(a2 + 4 * i) = v7;
  }
  return result;
}

uint64_t CMMConvTRC::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 256))(a1, a2, a4, a5, *(unsigned __int8 *)(a3 + 1));
}

{
  int v5;
  unint64_t v8;
  uint64_t result;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  _DWORD *exception;

  float v5 = a4;
  CFIndex v8 = a5 * a4;
  size_t result = CMMTable::FloatData(*(void *)(*(void *)(a1 + 64) + 16), *(void *)(*(void *)(a1 + 64) + 24));
  int v10 = *(unsigned int *)(a1 + 72);
  if (v8 > v10)
  {
    uint64_t v11 = v10 + v5;
    do
    {
      unint64_t v12 = *(unsigned int *)(a2 + 4 * v10);
      if (v12 >= 0x1000001)
      {
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = -171;
      }
      uint64_t v13 = v12 >> 12;
      unint64_t v14 = *(_DWORD *)(result + 4 * (v12 >> 12));
      float v15 = v12 & 0xFFF;
      if (v15) {
        v14 += (unint64_t)((*(int *)(result + 4 * (v13 + 1)) - (uint64_t)v14) * v15 + 2048) >> 12;
      }
      *(_DWORD *)(a2 + 4 * v10) = v14;
      int v10 = v11;
      unsigned int v16 = v8 > v11;
      v11 += v5;
    }
    while (v16);
  }
  return result;
}

_DWORD *CMMConvTRC::SetOutputClamp(CMMConvTRC *this)
{
  *((unsigned char *)this + 36) = 1;
  size_t result = (_DWORD *)*((void *)this + 3);
  if (result)
  {
    if (result)
    {
      if (result[18] < *((_DWORD *)this + 18))
      {
        uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 48);
        return (_DWORD *)v3();
      }
    }
  }
  return result;
}

int *InvertLUT(int *result, int *a2)
{
  uint64_t v2 = 0;
  int v3 = *result;
  int v4 = result[4096];
  uint64_t v5 = 4096;
  do
  {
    if (v3 <= v4) {
      uint64_t v6 = v2;
    }
    else {
      uint64_t v6 = v5;
    }
    int v7 = result[v6];
    if (v2)
    {
      if (v7 <= 1) {
        int v7 = 1;
      }
      if (a2[(v2 - 1)] > v7) {
        int v7 = a2[(v2 - 1)];
      }
      a2[v2] = v7;
    }
    else
    {
      *a2 = v7;
    }
    ++v2;
    --v5;
  }
  while (v2 != 4097);
  uint64_t v8 = 0;
  int v9 = 0;
  int v10 = 0;
  uint64_t v11 = a2 + 2;
  int v12 = *a2;
  int v13 = a2[1];
  int v14 = 4096;
  do
  {
    uint64_t v15 = v8 << 12;
    if (v10 <= 4094)
    {
      uint64_t v16 = v10;
      if (v15 < a2[v10 + 1])
      {
LABEL_20:
        int v10 = v16;
      }
      else
      {
        int v17 = v14 - (v10 << 12);
        int v9 = v17 + 16769024;
        int v18 = v17 + 16773120;
        while (1)
        {
          int v12 = v13;
          int v13 = v11[v16];
          if (v16 == 4094) {
            break;
          }
          v14 += 4096;
          uint64_t v19 = v11[v16++];
          if (v15 < v19)
          {
            int v9 = v14 - 4096;
            goto LABEL_20;
          }
        }
        int v10 = 4095;
        int v14 = v18;
      }
    }
    uint64_t v20 = (v13 - v12);
    unsigned int v21 = v14;
    if ((int)v20 >= 1) {
      unsigned int v21 = v9 + ((v20 >> 1) + ((v15 - v12) << 12)) / v20;
    }
    result[v8] = v21;
    if ((v21 & 0x80000000) != 0)
    {
      unsigned int v21 = 0;
    }
    else
    {
      if (v21 < 0x1000001) {
        goto LABEL_29;
      }
      unsigned int v21 = 0x1000000;
    }
    result[v8] = v21;
LABEL_29:
    if (v3 > v4) {
      result[v8] = 0x1000000 - v21;
    }
    ++v8;
  }
  while (v8 != 4097);
  int v22 = result[4096];
  int v23 = result[1] - *result;
  if (v23 < 0) {
    int v23 = *result - result[1];
  }
  if (v23 < 0x800) {
    result[1] = *result;
  }
  int v24 = v22 - result[4095];
  if (v24 < 0) {
    int v24 = result[4095] - v22;
  }
  if (v24 <= 0x7FF) {
    result[4095] = v22;
  }
  return result;
}

void CMMConvPQEOTF::ConvertFloat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(a1 + 92) == 17)
  {
    CMMConvTRC::ConvertFloat(a1, a2, a3, a4, 0);
  }
  else
  {
    unint64_t v7 = a4 * a3;
    unint64_t v8 = *(unsigned int *)(a1 + 72);
    if (a4 * a3 > v8)
    {
      do
      {
        float v9 = *(float *)(a2 + 4 * v8);
        float v10 = powf(fabsf(v9), 0.012683);
        float v11 = powf(fmaxf(v10 + -0.83594, 0.0) / (float)((float)(v10 * -18.688) + 18.852), 6.2774);
        if (v9 < 0.0) {
          float v11 = -v11;
        }
        *(float *)(a2 + 4 * v8) = *(float *)(a1 + 164) * v11;
        v8 += a3;
      }
      while (v8 < v7);
    }
  }
}

CFDataRef CMMConvPQEOTF::create_flattened_TRC_data(CMMConvPQEOTF *this, CFDictionaryRef theDict, unsigned int *a3)
{
  *a3 = 0;
  if (!theDict)
  {
    unsigned int valuePtr = 4097;
LABEL_10:
    unsigned int v6 = 65552;
    *a3 = 65552;
    goto LABEL_11;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"com.apple.cmm.PQEOTFTableSize");
  unsigned int valuePtr = 4097;
  if (Value && CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr) == 1)
  {
    unsigned int v6 = valuePtr;
    *a3 = valuePtr;
  }
  else
  {
    unsigned int v6 = *a3;
  }
  if (v6 != 1024)
  {
    if (v6) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (*((float *)this + 41) == 1.0) {
    return CFDataCreate(0, kPQEOTFFloat1024Data, 4096);
  }
  unsigned int v6 = 1024;
LABEL_11:
  CFIndex v7 = 4 * v6;
  CFMutableArrayRef Mutable = CFDataCreateMutable(0, v7);
  float v9 = Mutable;
  if (Mutable)
  {
    CFDataSetLength(Mutable, v7);
    Mutablevm_address_t BytePtr = CFDataGetMutableBytePtr(v9);
    uint64_t v12 = *a3;
    if (v12)
    {
      float v13 = *((float *)this + 41);
      *(float *)v11.i32 = (float)(v12 - 1);
      uint64x2_t v28 = (uint64x2_t)vdupq_n_s64(v12 - 1);
      float32x2_t v14 = (float32x2_t)vdup_lane_s32(v11, 0);
      uint64_t v15 = (v12 + 1) & 0x1FFFFFFFELL;
      int32x2_t v16 = (int32x2_t)0x100000000;
      uint64x2_t v17 = (uint64x2_t)xmmword_18BE63480;
      int v18 = (float *)(MutableBytePtr + 4);
      float32x2_t v19 = (float32x2_t)vdup_n_s32(0xBF560000);
      float32x2_t v20 = (float32x2_t)vdup_n_s32(0xC1958000);
      float32x2_t v21 = (float32x2_t)vdup_n_s32(0x4196D000u);
      int64x2_t v27 = vdupq_n_s64(2uLL);
      do
      {
        int32x2_t v33 = vmovn_s64((int64x2_t)vcgeq_u64(v28, v17));
        int64x2_t v34 = (int64x2_t)v17;
        float32x2_t v22 = vdiv_f32(vcvt_f32_u32((uint32x2_t)v16), v14);
        float v29 = v22.f32[0];
        float v31 = powf(v22.f32[1], 0.012683);
        v23.f32[0] = powf(v29, 0.012683);
        v23.f32[1] = v31;
        float32x2_t v24 = vdiv_f32(vmaxnm_f32(vadd_f32(v23, v19), 0), vmla_f32(v21, v20, v23));
        float v30 = v24.f32[0];
        float v32 = powf(v24.f32[1], 6.2774);
        v25.f32[0] = powf(v30, 6.2774);
        v25.f32[1] = v32;
        if (v33.i8[0]) {
          *(v18 - 1) = v13 * v25.f32[0];
        }
        if (v33.i8[4]) {
          *int v18 = vmuls_lane_f32(v13, v25, 1);
        }
        uint64x2_t v17 = (uint64x2_t)vaddq_s64(v34, v27);
        int32x2_t v16 = vadd_s32(v16, (int32x2_t)0x200000002);
        v18 += 2;
        v15 -= 2;
      }
      while (v15);
    }
  }
  return v9;
}

__CFDictionary *CMMConvPQEOTF::FlattenConversion(CMMConvPQEOTF *this, const __CFDictionary *a2)
{
  valuePtr[2] = *(const void **)MEMORY[0x1E4F143B8];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return Mutable;
  }
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 72);
  if (v5)
  {
    CFNumberRef v6 = v5;
    CFDictionaryAddValue(Mutable, kColorSyncConversionChannelID, v5);
    CFRelease(v6);
  }
  CFNumberRef v7 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 76);
  if (v7)
  {
    CFNumberRef v8 = v7;
    CFDictionaryAddValue(Mutable, @"com.apple.cmm.ChannelsInStageCount", v7);
    CFRelease(v8);
  }
  float v9 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!a2 || CFDictionaryGetValue(a2, @"com.apple.cmm.PQEOTFTable") != *v9)
  {
    if (*((_DWORD *)this + 23) != 17)
    {
      float v10 = (const void *)kColorSyncConversionParamPQEOTF;
      CFMutableArrayRef v11 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = 0;
        while (1)
        {
          CFNumberRef v14 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + v13 + 112);
          if (!v14) {
            break;
          }
          CFNumberRef v15 = v14;
          CFArrayAppendValue(v12, v14);
          CFRelease(v15);
          v13 += 4;
          if (v13 == 24)
          {
            CFNumberRef v16 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 140);
            if (v16)
            {
              CFNumberRef v17 = v16;
              CFArrayAppendValue(v12, v16);
              CFRelease(v17);
            }
            CFDictionaryAddValue(Mutable, v10, v12);
            break;
          }
        }
        int v18 = v12;
        goto LABEL_23;
      }
      goto LABEL_24;
    }
    goto LABEL_18;
  }
  if (*((_DWORD *)this + 23) == 17)
  {
LABEL_18:
    float32x2_t v19 = (const UInt8 *)CMMTable::FloatData(*(void *)(*((void *)this + 13) + 16), *(void *)(*((void *)this + 13) + 24));
    CFDataRef v20 = CFDataCreate(0, v19, *(void *)(*((void *)this + 13) + 32));
    if (v20)
    {
      CFDataRef v21 = v20;
      CFDictionaryAddValue(Mutable, kColorSyncConversion1DLut, v20);
      CFRelease(v21);
    }
    LODWORD(valuePtr[0]) = 1024;
    goto LABEL_21;
  }
  LODWORD(valuePtr[0]) = 0;
  float v30 = (const void *)(*(uint64_t (**)(CMMConvPQEOTF *, const __CFDictionary *, const void **))(*(void *)this + 248))(this, a2, valuePtr);
  if (v30)
  {
    float v31 = v30;
    CFDictionaryAddValue(Mutable, kColorSyncConversion1DLut, v30);
    CFRelease(v31);
  }
LABEL_21:
  CFNumberRef v22 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
  if (v22)
  {
    CFNumberRef v23 = v22;
    CFDictionaryAddValue(Mutable, kColorSyncConversionGridPoints, v22);
    int v18 = v23;
LABEL_23:
    CFRelease(v18);
  }
LABEL_24:
  CFNumberRef v24 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 92);
  CFDictionaryAddValue(Mutable, (const void *)kColorSyncTransformGammaID, v24);
  CFRelease(v24);
  CFDictionaryAddValue(Mutable, (const void *)kColorSyncTransformPureGammaOriginalTRC, (const void *)*MEMORY[0x1E4F1CFC8]);
  CMMConvNode::AddFixedPointClippingRange(Mutable, v25, *((float *)this + 10), *((float *)this + 11));
  if (*((unsigned char *)this + 34)) {
    CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", *v9);
  }
  CMMConvNode::AddClampingInfo(this, Mutable);
  int v33 = 0;
  float v32 = *((float *)this + 41);
  if (v32 != 1.0)
  {
    CFNumberRef v26 = CFNumberCreate(0, kCFNumberFloat32Type, &v33);
    CFNumberRef v27 = CFNumberCreate(0, kCFNumberFloat32Type, &v32);
    valuePtr[0] = v26;
    valuePtr[1] = v27;
    CFArrayRef v28 = CFArrayCreate(0, valuePtr, 2, MEMORY[0x1E4F1D510]);
    CFRelease(v26);
    CFRelease(v27);
    if (v28)
    {
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionOutputRange", v28);
      CFRelease(v28);
    }
  }
  return Mutable;
}

uint64_t CMMConvPQEOTF::GetPrecision(CMMConvPQEOTF *this)
{
  return 5;
}

uint64_t CMMConvPQEOTF::ClampOutput(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (unint64_t i = *(unsigned int *)(result + 72); i < a4 * a3; i += a3)
  {
    float v5 = *(float *)(a2 + 4 * i);
    float v6 = *(float *)(result + 164);
    if (v5 <= v6) {
      float v6 = *(float *)(a2 + 4 * i);
    }
    if (v5 >= 0.0) {
      float v7 = v6;
    }
    else {
      float v7 = 0.0;
    }
    *(float *)(a2 + 4 * i) = v7;
  }
  return result;
}

uint64_t CMMConvPQEOTF::ClampInput(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (unint64_t i = *(unsigned int *)(result + 72); i < a4 * a3; i += a3)
  {
    float v5 = *(float *)(a2 + 4 * i);
    if (v5 <= 1.0) {
      float v6 = *(float *)(a2 + 4 * i);
    }
    else {
      float v6 = 1.0;
    }
    if (v5 >= 0.0) {
      float v7 = v6;
    }
    else {
      float v7 = 0.0;
    }
    *(float *)(a2 + 4 * i) = v7;
  }
  return result;
}

void CMMConvPQEOTF::~CMMConvPQEOTF(CMMConvPQEOTF *this)
{
  CMMConvTRC::~CMMConvTRC(this);

  CMMBase::operator delete(v1);
}

void CMMConvHLGInvOETF::ConvertFloat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 * a3;
  unint64_t v5 = *(unsigned int *)(a1 + 72);
  if (a4 * a3 > v5)
  {
    do
    {
      float v9 = *(float *)(a2 + 4 * v5);
      float v10 = *(float *)(a1 + 136);
      float v11 = fabsf(v9);
      if (v11 <= 0.5)
      {
        float v12 = v9 * v9;
        double v13 = 3.0;
      }
      else
      {
        float v12 = expf((float)(v11 + -0.55991) / 0.17883) + 0.28467;
        double v13 = 12.0;
      }
      float v14 = v12 / v13;
      float v15 = -v10;
      if (v9 >= 0.0) {
        float v15 = v10;
      }
      *(float *)(a2 + 4 * v5) = v15 * v14;
      v5 += a3;
    }
    while (v5 < v4);
  }
}

__CFData *CMMConvHLGInvOETF::create_flattened_TRC_data(CMMConvHLGInvOETF *this, CFDictionaryRef theDict, unsigned int *a3)
{
  *a3 = 0;
  if (!theDict)
  {
    unsigned int valuePtr = 4097;
LABEL_9:
    unsigned int v6 = 65552;
    *a3 = 65552;
    goto LABEL_10;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"com.apple.cmm.HLGInvOETFTableSize");
  unsigned int valuePtr = 4097;
  if (Value && CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr) == 1)
  {
    unsigned int v6 = valuePtr;
    *a3 = valuePtr;
    if (!v6) {
      goto LABEL_9;
    }
  }
  else
  {
    unsigned int v6 = *a3;
    if (!*a3) {
      goto LABEL_9;
    }
  }
LABEL_10:
  CFIndex v7 = 4 * v6;
  CFMutableArrayRef Mutable = CFDataCreateMutable(0, v7);
  float v9 = Mutable;
  if (Mutable)
  {
    CFDataSetLength(Mutable, v7);
    Mutablevm_address_t BytePtr = CFDataGetMutableBytePtr(v9);
    uint64_t v11 = *a3;
    if (v11)
    {
      float v12 = MutableBytePtr;
      for (uint64_t i = 0; i != v11; ++i)
      {
        float v14 = (float)i / (float)(v11 - 1);
        float v15 = *((float *)this + 34);
        if (v14 <= 0.5)
        {
          float v16 = v14 * v14;
          double v17 = 3.0;
        }
        else
        {
          float v16 = expf((float)(v14 + -0.55991) / 0.17883) + 0.28467;
          double v17 = 12.0;
        }
        float v18 = v16 / v17;
        *(float *)&v12[4 * i] = v15 * v18;
      }
    }
  }
  return v9;
}

__CFDictionary *CMMConvHLGInvOETF::FlattenConversion(CMMConvHLGInvOETF *this, const __CFDictionary *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return Mutable;
  }
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 72);
  if (v5)
  {
    CFNumberRef v6 = v5;
    CFDictionaryAddValue(Mutable, kColorSyncConversionChannelID, v5);
    CFRelease(v6);
  }
  CFNumberRef v7 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 76);
  if (v7)
  {
    CFNumberRef v8 = v7;
    CFDictionaryAddValue(Mutable, @"com.apple.cmm.ChannelsInStageCount", v7);
    CFRelease(v8);
  }
  float v9 = (const void **)MEMORY[0x1E4F1CFD0];
  if (a2 && CFDictionaryGetValue(a2, @"com.apple.cmm.HLGInvOETFTable") == *v9)
  {
    float v37 = 0.0;
    CFDataRef v20 = (const void *)(*(uint64_t (**)(CMMConvHLGInvOETF *, const __CFDictionary *, float *))(*(void *)this + 248))(this, a2, &v37);
    if (v20)
    {
      CFDataRef v21 = v20;
      CFDictionaryAddValue(Mutable, kColorSyncConversion1DLut, v20);
      CFRelease(v21);
    }
    CFNumberRef v22 = CFNumberCreate(0, kCFNumberSInt32Type, &v37);
    if (v22)
    {
      CFNumberRef v23 = v22;
      CFDictionaryAddValue(Mutable, kColorSyncConversionGridPoints, v22);
      CFRelease(v23);
    }
    if (!*((unsigned char *)this + 33)) {
      goto LABEL_28;
    }
    CFNumberRef v24 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 144);
    CFNumberRef v25 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 148);
    values = v24;
    CFNumberRef v40 = v25;
    CFArrayRef v26 = CFArrayCreate(0, (const void **)&values, 2, MEMORY[0x1E4F1D510]);
    CFRelease(v24);
    CFRelease(v25);
    if (v26)
    {
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionNegBoundary", v26);
      CFRelease(v26);
    }
    CFNumberRef v27 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 152);
    CFNumberRef v12 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 156);
    valuePtr[0] = v27;
    valuePtr[1] = v12;
    CFArrayRef v28 = CFArrayCreate(0, valuePtr, 2, MEMORY[0x1E4F1D510]);
    if (v28)
    {
      CFArrayRef v29 = v28;
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionPosBoundary", v28);
      CFRelease(v29);
    }
    CFRelease(v27);
    goto LABEL_27;
  }
  float v10 = (const void *)kColorSyncConversionParamHLGInvOETF;
  CFMutableArrayRef v11 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (v11)
  {
    CFNumberRef v12 = v11;
    uint64_t v13 = 0;
    while (1)
    {
      CFNumberRef v14 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + v13 + 112);
      if (!v14) {
        break;
      }
      CFNumberRef v15 = v14;
      CFArrayAppendValue(v12, v14);
      CFRelease(v15);
      v13 += 4;
      if (v13 == 16)
      {
        float v16 = *((float *)this + 34);
        float v17 = *((float *)this + 32) * v16;
        float v37 = v16 * *((float *)this + 33);
        *(float *)unsigned int valuePtr = v17;
        int v36 = 0;
        values = CFNumberCreate(0, kCFNumberFloat32Type, valuePtr);
        CFNumberRef v40 = CFNumberCreate(0, kCFNumberFloat32Type, &v37);
        uint64_t v18 = 0;
        CFNumberRef v41 = CFNumberCreate(0, kCFNumberFloat32Type, &v36);
        do
        {
          float32x2_t v19 = *(void **)((char *)&values + v18);
          if (v19)
          {
            CFArrayAppendValue(v12, *(void **)((char *)&values + v18));
            CFRelease(v19);
          }
          v18 += 8;
        }
        while (v18 != 24);
        CFDictionaryAddValue(Mutable, v10, v12);
        break;
      }
    }
LABEL_27:
    CFRelease(v12);
  }
LABEL_28:
  CFNumberRef v30 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 92);
  CFDictionaryAddValue(Mutable, (const void *)kColorSyncTransformGammaID, v30);
  CFRelease(v30);
  CFDictionaryAddValue(Mutable, (const void *)kColorSyncTransformPureGammaOriginalTRC, (const void *)*MEMORY[0x1E4F1CFC8]);
  CMMConvNode::AddFixedPointClippingRange(Mutable, v31, *((float *)this + 10), *((float *)this + 11));
  if (*((unsigned char *)this + 34)) {
    CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", *v9);
  }
  CMMConvNode::AddClampingInfo(this, Mutable);
  LODWORD(valuePtr[0]) = 0;
  float v37 = *((float *)this + 41);
  if (v37 != 1.0)
  {
    CFNumberRef v32 = CFNumberCreate(0, kCFNumberFloat32Type, valuePtr);
    CFNumberRef v33 = CFNumberCreate(0, kCFNumberFloat32Type, &v37);
    values = v32;
    CFNumberRef v40 = v33;
    CFArrayRef v34 = CFArrayCreate(0, (const void **)&values, 2, MEMORY[0x1E4F1D510]);
    CFRelease(v32);
    CFRelease(v33);
    if (v34)
    {
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionOutputRange", v34);
      CFRelease(v34);
    }
  }
  return Mutable;
}

uint64_t CMMConvHLGInvOETF::GetPrecision(CMMConvHLGInvOETF *this)
{
  return 5;
}

uint64_t CMMConvHLGInvOETF::ClampOutput(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (unint64_t i = *(unsigned int *)(result + 72); i < a4 * a3; i += a3)
  {
    float v5 = *(float *)(a2 + 4 * i);
    float v6 = *(float *)(result + 164);
    if (v5 <= v6) {
      float v6 = *(float *)(a2 + 4 * i);
    }
    if (v5 >= 0.0) {
      float v7 = v6;
    }
    else {
      float v7 = 0.0;
    }
    *(float *)(a2 + 4 * i) = v7;
  }
  return result;
}

uint64_t CMMConvHLGInvOETF::ClampInput(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (unint64_t i = *(unsigned int *)(result + 72); i < a4 * a3; i += a3)
  {
    float v5 = *(float *)(a2 + 4 * i);
    if (v5 <= 1.0) {
      float v6 = *(float *)(a2 + 4 * i);
    }
    else {
      float v6 = 1.0;
    }
    if (v5 >= 0.0) {
      float v7 = v6;
    }
    else {
      float v7 = 0.0;
    }
    *(float *)(a2 + 4 * i) = v7;
  }
  return result;
}

void CMMConvHLGInvOETF::~CMMConvHLGInvOETF(CMMConvHLGInvOETF *this)
{
  CMMConvTRC::~CMMConvTRC(this);

  CMMBase::operator delete(v1);
}

void CMMConvPQInvEOTF::ConvertFloat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 * a3;
  unint64_t v5 = *(unsigned int *)(a1 + 72);
  if (a4 * a3 > v5)
  {
    float v8 = *(float *)(a1 + 176);
    do
    {
      float v9 = v8 * *(float *)(a2 + 4 * v5);
      float v10 = powf(fabsf(v9), 0.1593);
      float v11 = powf((float)((float)(v10 * 18.852) + 0.83594) / (float)((float)(v10 * 18.688) + 1.0), 78.844);
      if (v9 < 0.0) {
        float v11 = -v11;
      }
      *(float *)(a2 + 4 * v5) = v11;
      v5 += a3;
    }
    while (v5 < v4);
  }
}

__CFData *CMMConvPQInvEOTF::create_flattened_TRC_data(CMMConvPQInvEOTF *this, CFDictionaryRef theDict, unsigned int *a3)
{
  *a3 = 0;
  if (!theDict)
  {
    unsigned int valuePtr = 4097;
LABEL_9:
    unsigned int v6 = 65552;
    *a3 = 65552;
    goto LABEL_10;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"com.apple.cmm.PQInvEOTFTableSize");
  unsigned int valuePtr = 4097;
  if (Value && CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr) == 1)
  {
    unsigned int v6 = valuePtr;
    *a3 = valuePtr;
    if (!v6) {
      goto LABEL_9;
    }
  }
  else
  {
    unsigned int v6 = *a3;
    if (!*a3) {
      goto LABEL_9;
    }
  }
LABEL_10:
  CFIndex v7 = 4 * v6;
  CFMutableArrayRef Mutable = CFDataCreateMutable(0, v7);
  float v9 = Mutable;
  if (Mutable)
  {
    CFDataSetLength(Mutable, v7);
    Mutablevm_address_t BytePtr = CFDataGetMutableBytePtr(v9);
    uint64_t v11 = *a3;
    if (v11)
    {
      CFNumberRef v12 = MutableBytePtr;
      uint64_t v13 = 0;
      float v14 = *((float *)this + 44);
      do
      {
        float v15 = v14 * (float)((float)v13 / (float)(v11 - 1));
        float v16 = powf(fabsf(v15), 0.1593);
        float v17 = powf((float)((float)(v16 * 18.852) + 0.83594) / (float)((float)(v16 * 18.688) + 1.0), 78.844);
        if (v15 < 0.0) {
          float v17 = -v17;
        }
        *(float *)&v12[4 * v13++] = v17;
      }
      while (v11 != v13);
    }
  }
  return v9;
}

__CFDictionary *CMMConvPQInvEOTF::FlattenConversion(CMMConvPQInvEOTF *this, const __CFDictionary *a2)
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return Mutable;
  }
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 72);
  if (v5)
  {
    CFNumberRef v6 = v5;
    CFDictionaryAddValue(Mutable, kColorSyncConversionChannelID, v5);
    CFRelease(v6);
  }
  CFNumberRef v7 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 76);
  if (v7)
  {
    CFNumberRef v8 = v7;
    CFDictionaryAddValue(Mutable, @"com.apple.cmm.ChannelsInStageCount", v7);
    CFRelease(v8);
  }
  float v9 = (const void **)MEMORY[0x1E4F1CFD0];
  if (a2 && CFDictionaryGetValue(a2, @"com.apple.cmm.PQInvEOTFTable") == *v9)
  {
    int valuePtr = 0;
    uint64_t v18 = (const void *)(*(uint64_t (**)(CMMConvPQInvEOTF *, const __CFDictionary *, int *))(*(void *)this + 248))(this, a2, &valuePtr);
    if (v18)
    {
      float32x2_t v19 = v18;
      CFDictionaryAddValue(Mutable, kColorSyncConversion1DLut, v18);
      CFRelease(v19);
    }
    CFNumberRef v20 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v20)
    {
      CFNumberRef v21 = v20;
      CFDictionaryAddValue(Mutable, kColorSyncConversionGridPoints, v20);
      CFRelease(v21);
    }
    if (!*((unsigned char *)this + 33)) {
      goto LABEL_28;
    }
    CFNumberRef v22 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 144);
    CFNumberRef v23 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 148);
    values[0] = v22;
    values[1] = v23;
    CFArrayRef v24 = CFArrayCreate(0, (const void **)values, 2, MEMORY[0x1E4F1D510]);
    CFRelease(v22);
    CFRelease(v23);
    if (v24)
    {
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionNegBoundary", v24);
      CFRelease(v24);
    }
    CFNumberRef v25 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 152);
    CFNumberRef v12 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 156);
    v32[0] = v25;
    v32[1] = v12;
    CFArrayRef v26 = CFArrayCreate(0, (const void **)v32, 2, MEMORY[0x1E4F1D510]);
    if (v26)
    {
      CFArrayRef v27 = v26;
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionPosBoundary", v26);
      CFRelease(v27);
    }
    CFRelease(v25);
    goto LABEL_27;
  }
  float v10 = (const void *)kColorSyncConversionParamPQInvEOTF;
  CFMutableArrayRef v11 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (v11)
  {
    CFNumberRef v12 = v11;
    uint64_t v13 = 0;
    while (1)
    {
      CFNumberRef v14 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + v13 + 112);
      if (!v14) {
        break;
      }
      CFNumberRef v15 = v14;
      CFArrayAppendValue(v12, v14);
      CFRelease(v15);
      v13 += 4;
      if (v13 == 24) {
        goto LABEL_14;
      }
    }
    CFRelease(v12);
    CFNumberRef v12 = 0;
LABEL_14:
    CFNumberRef v16 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 176);
    if (v16)
    {
      CFNumberRef v17 = v16;
      CFArrayAppendValue(v12, v16);
      CFRelease(v17);
    }
    CFDictionaryAddValue(Mutable, v10, v12);
LABEL_27:
    CFRelease(v12);
  }
LABEL_28:
  CFNumberRef v28 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 92);
  CFDictionaryAddValue(Mutable, (const void *)kColorSyncTransformGammaID, v28);
  CFRelease(v28);
  CFDictionaryAddValue(Mutable, (const void *)kColorSyncTransformPureGammaOriginalTRC, (const void *)*MEMORY[0x1E4F1CFC8]);
  CMMConvNode::AddFixedPointClippingRange(Mutable, v29, *((float *)this + 10), *((float *)this + 11));
  if (*((unsigned char *)this + 34)) {
    CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", *v9);
  }
  CMMConvNode::AddClampingInfo(this, Mutable);
  return Mutable;
}

uint64_t CMMConvPQInvEOTF::GetPrecision(CMMConvPQInvEOTF *this)
{
  return 5;
}

void CMMConvPQInvEOTF::~CMMConvPQInvEOTF(CMMConvPQInvEOTF *this)
{
  CMMConvInvertedTRC::~CMMConvInvertedTRC(this);

  CMMBase::operator delete(v1);
}

void CMMConvHLGOETF::ConvertFloat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 * a3;
  unint64_t v5 = *(unsigned int *)(a1 + 72);
  if (a4 * a3 > v5)
  {
    do
    {
      float v9 = *(float *)(a2 + 4 * v5);
      float v10 = fabsf(v9) * *(float *)(a1 + 132);
      if (v10 <= 0.0833333333)
      {
        float v12 = sqrtf(v10 * 3.0);
      }
      else
      {
        float v11 = v10 * 12.0 + -0.284668922;
        float v12 = (float)(logf(v11) * 0.17883) + 0.55991;
      }
      if (v9 >= 0.0) {
        float v13 = 1.0;
      }
      else {
        float v13 = -1.0;
      }
      if (v13 <= 0.0) {
        float v12 = -v12;
      }
      *(float *)(a2 + 4 * v5) = v12;
      v5 += a3;
    }
    while (v5 < v4);
  }
}

__CFData *CMMConvHLGOETF::create_flattened_TRC_data(CMMConvHLGOETF *this, CFDictionaryRef theDict, unsigned int *a3)
{
  *a3 = 0;
  if (!theDict)
  {
    unsigned int valuePtr = 4097;
LABEL_9:
    unsigned int v6 = 65552;
    *a3 = 65552;
    goto LABEL_10;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"com.apple.cmm.HLGOETFCTableSize");
  unsigned int valuePtr = 4097;
  if (Value && CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr) == 1)
  {
    unsigned int v6 = valuePtr;
    *a3 = valuePtr;
    if (!v6) {
      goto LABEL_9;
    }
  }
  else
  {
    unsigned int v6 = *a3;
    if (!*a3) {
      goto LABEL_9;
    }
  }
LABEL_10:
  CFIndex v7 = 4 * v6;
  CFMutableArrayRef Mutable = CFDataCreateMutable(0, v7);
  float v9 = Mutable;
  if (Mutable)
  {
    CFDataSetLength(Mutable, v7);
    Mutablevm_address_t BytePtr = CFDataGetMutableBytePtr(v9);
    uint64_t v11 = *a3;
    if (v11)
    {
      float v12 = MutableBytePtr;
      for (uint64_t i = 0; i != v11; ++i)
      {
        float v14 = (float)((float)i / (float)(v11 - 1)) * *((float *)this + 33);
        if (v14 <= 0.0833333333)
        {
          float v16 = sqrtf(v14 * 3.0);
        }
        else
        {
          float v15 = v14 * 12.0 + -0.284668922;
          float v16 = (float)(logf(v15) * 0.17883) + 0.55991;
        }
        *(float *)&v12[4 * i] = v16;
      }
    }
  }
  return v9;
}

__CFDictionary *CMMConvHLGOETF::FlattenConversion(CMMConvHLGOETF *this, const __CFDictionary *a2)
{
  valuePtr[2] = *(const void **)MEMORY[0x1E4F143B8];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return Mutable;
  }
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 72);
  if (v5)
  {
    CFNumberRef v6 = v5;
    CFDictionaryAddValue(Mutable, kColorSyncConversionChannelID, v5);
    CFRelease(v6);
  }
  CFNumberRef v7 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 76);
  if (v7)
  {
    CFNumberRef v8 = v7;
    CFDictionaryAddValue(Mutable, @"com.apple.cmm.ChannelsInStageCount", v7);
    CFRelease(v8);
  }
  float v9 = (const void **)MEMORY[0x1E4F1CFD0];
  if (a2 && CFDictionaryGetValue(a2, @"com.apple.cmm.HLGOETFTable") == *v9)
  {
    int v31 = 0;
    uint64_t v18 = (const void *)(*(uint64_t (**)(CMMConvHLGOETF *, const __CFDictionary *, int *))(*(void *)this + 248))(this, a2, &v31);
    if (v18)
    {
      float32x2_t v19 = v18;
      CFDictionaryAddValue(Mutable, kColorSyncConversion1DLut, v18);
      CFRelease(v19);
    }
    CFNumberRef v20 = CFNumberCreate(0, kCFNumberSInt32Type, &v31);
    if (v20)
    {
      CFNumberRef v21 = v20;
      CFDictionaryAddValue(Mutable, kColorSyncConversionGridPoints, v20);
      CFRelease(v21);
    }
    if (!*((unsigned char *)this + 33)) {
      goto LABEL_26;
    }
    CFNumberRef v22 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 144);
    CFNumberRef v23 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 148);
    valuePtr[0] = v22;
    valuePtr[1] = v23;
    CFArrayRef v24 = CFArrayCreate(0, valuePtr, 2, MEMORY[0x1E4F1D510]);
    CFRelease(v22);
    CFRelease(v23);
    if (v24)
    {
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionNegBoundary", v24);
      CFRelease(v24);
    }
    CFNumberRef v25 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 152);
    CFNumberRef v12 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 156);
    values[0] = v25;
    values[1] = v12;
    CFArrayRef v26 = CFArrayCreate(0, (const void **)values, 2, MEMORY[0x1E4F1D510]);
    if (v26)
    {
      CFArrayRef v27 = v26;
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionPosBoundary", v26);
      CFRelease(v27);
    }
    CFRelease(v25);
    goto LABEL_25;
  }
  float v10 = (const void *)kColorSyncConversionParamHLGOETF;
  CFMutableArrayRef v11 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (v11)
  {
    CFNumberRef v12 = v11;
    uint64_t v13 = 0;
    while (1)
    {
      CFNumberRef v14 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + v13 + 112);
      if (!v14) {
        break;
      }
      CFNumberRef v15 = v14;
      CFArrayAppendValue(v12, v14);
      CFRelease(v15);
      v13 += 4;
      if (v13 == 20)
      {
        LODWORD(valuePtr[0]) = *((_DWORD *)this + 33);
        CFNumberRef v16 = CFNumberCreate(0, kCFNumberFloat32Type, valuePtr);
        if (v16)
        {
          CFNumberRef v17 = v16;
          CFArrayAppendValue(v12, v16);
          CFRelease(v17);
        }
        CFDictionaryAddValue(Mutable, v10, v12);
        break;
      }
    }
LABEL_25:
    CFRelease(v12);
  }
LABEL_26:
  CFNumberRef v28 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 92);
  CFDictionaryAddValue(Mutable, (const void *)kColorSyncTransformGammaID, v28);
  CFRelease(v28);
  CFDictionaryAddValue(Mutable, (const void *)kColorSyncTransformPureGammaOriginalTRC, (const void *)*MEMORY[0x1E4F1CFC8]);
  CMMConvNode::AddFixedPointClippingRange(Mutable, v29, *((float *)this + 10), *((float *)this + 11));
  if (*((unsigned char *)this + 34)) {
    CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", *v9);
  }
  CMMConvNode::AddClampingInfo(this, Mutable);
  return Mutable;
}

void CMMConvHLGOETF::~CMMConvHLGOETF(CMMConvHLGOETF *this)
{
  CMMConvInvertedTRC::~CMMConvInvertedTRC(this);

  CMMBase::operator delete(v1);
}

uint64_t CMMConvNode::GetFunctionType(CMMConvNode *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t CMMConvNode::FlattenConversion(CMMConvNode *this, const __CFDictionary *a2)
{
  return 0;
}

uint64_t CMMConvNode::GetTransformType(CMMConvNode *this, const __CFDictionary *a2)
{
  return 8;
}

uint64_t CMMConvNode::SetInputClamp(uint64_t this)
{
  *(unsigned char *)(this + 35) = 1;
  return this;
}

BOOL CMMMatrix::Is3x3(CMMMatrix *this)
{
  return !*((_DWORD *)this + 20)
      && !*((_DWORD *)this + 21)
      && !*((_DWORD *)this + 22)
      && *((float *)this + 23) == 0.0
      && *((float *)this + 24) == 0.0
      && *((float *)this + 25) == 0.0;
}

uint64_t CMMConvMatrix::Collapse3x3(CMMConvMatrix *this, CMMConvMatrix *a2, CMMMemMgr *a3)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  int v6 = (*(uint64_t (**)(CMMConvMatrix *))(*(void *)this + 224))(this);
  if ((v6 & 1) == 0)
  {
    *((unsigned char *)this + 32) = 1;
    *((unsigned char *)a2 + 32) = 1;
    uint64_t v42 = 0;
    int v36 = &unk_1ED9855F0;
    long long v7 = *((_OWORD *)a2 + 6);
    *(_OWORD *)CFNumberRef v40 = *((_OWORD *)a2 + 7);
    long long v8 = *((_OWORD *)a2 + 9);
    *(_OWORD *)&v40[16] = *((_OWORD *)a2 + 8);
    long long v41 = v8;
    LODWORD(v42) = *((_DWORD *)a2 + 40);
    long long v9 = *((_OWORD *)a2 + 5);
    long long v37 = *((_OWORD *)a2 + 4);
    long long v38 = v9;
    long long v39 = v7;
    float v10 = (char *)this + 64;
    float64x2_t v61 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 100));
    LODWORD(v9) = *((_DWORD *)this + 38);
    *(double *)&long long v7 = *((float *)this + 37);
    double v62 = *((float *)this + 27);
    uint64_t v63 = v7;
    float64x2_t v64 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 112));
    double v65 = *((float *)this + 30);
    double v66 = *(float *)&v9;
    float64x2_t v67 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 124));
    *(double *)&long long v7 = *((float *)this + 39);
    double v68 = *((float *)this + 33);
    uint64_t v69 = v7;
    long long v70 = xmmword_18BEB4BC0;
    long long v71 = unk_18BEB4BD0;
    float64x2_t v50 = vcvtq_f64_f32(*(float32x2_t *)((char *)&v39 + 4));
    double v51 = *((float *)&v39 + 3);
    double v52 = *((float *)&v41 + 1);
    float64x2_t v53 = vcvtq_f64_f32(*(float32x2_t *)v40);
    double v54 = *(float *)&v40[8];
    double v55 = *((float *)&v41 + 2);
    float64x2_t v56 = vcvtq_f64_f32(*(float32x2_t *)&v40[12]);
    double v57 = *(float *)&v40[20];
    double v58 = *((float *)&v41 + 3);
    long long v59 = xmmword_18BEB4BC0;
    long long v60 = unk_18BEB4BD0;
    long long v48 = 0u;
    long long v49 = 0u;
    float64x2_t v46 = 0u;
    long long v47 = 0u;
    memset(v45, 0, sizeof(v45));
    float64x2_t v43 = 0u;
    long long v44 = 0u;
    MatrixMatrix4x4<double>(v43.f64, v50.f64, v61.f64);
    uint64_t v11 = 0;
    uint64_t v35 = 0;
    int v31 = 0;
    v27[0] = 0;
    memset(v26, 0, sizeof(v26));
    *(void *)&v12.f64[0] = v44;
    v12.f64[1] = v45[0].f64[0];
    *(float32x4_t *)&v27[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v43), v12);
    float32x4_t v28 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)((char *)v45 + 8)), v46);
    float v13 = *(double *)&v47;
    float v29 = v13;
    float v14 = *((double *)&v44 + 1);
    float v15 = v45[1].f64[1];
    float v32 = v14;
    float v33 = v15;
    float v16 = *((float *)this + 40) * *((float *)a2 + 40);
    CFNumberRef v25 = &unk_1ED9855F0;
    uint64_t v30 = 0;
    *(float *)v12.f64 = *((double *)&v47 + 1);
    int v34 = LODWORD(v12.f64[0]);
    *(float *)&uint64_t v35 = v16;
    do
    {
      uint64_t v17 = 0;
      uint64_t v18 = 8;
      do
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = v18;
        do
        {
          v20 += *(int *)((char *)&v36 + v21) * (uint64_t)*(int *)&v10[v19];
          v19 += 4;
          v21 += 12;
        }
        while (v19 != 12);
        *((_DWORD *)v26 + 3 * v11 + v17++) = (unint64_t)(v20 + 0x8000) >> 16;
        v18 += 4;
      }
      while (v17 != 3);
      ++v11;
      v10 += 12;
    }
    while (v11 != 3);
    uint64_t v22 = *((void *)a2 + 2);
    CMMMatrix::MakeMatrixConv((CMMMatrix *)&v25, a3, a2);
    *((void *)a2 + 2) = v23;
    *(void *)(v23 + 16) = v22;
    if (v22) {
      *(void *)(v22 + 24) = v23;
    }
  }
  return v6 ^ 1u;
}

double MatrixMatrix4x4<double>(double *a1, double *a2, double *a3)
{
  double v4 = *a3;
  double v3 = a3[1];
  double v6 = a3[2];
  double v5 = a3[3];
  double v8 = a3[4];
  double v7 = a3[5];
  double v10 = a3[6];
  double v9 = a3[7];
  double v12 = a3[8];
  double v11 = a3[9];
  double v14 = a3[10];
  double v13 = a3[11];
  double v16 = a3[12];
  double v15 = a3[13];
  double v18 = a3[14];
  double v17 = a3[15];
  *a1 = v8 * a2[1] + *a2 * *a3 + a2[2] * v12 + a2[3] * v16;
  a1[1] = v7 * a2[1] + *a2 * v3 + a2[2] * v11 + a2[3] * v15;
  a1[2] = v10 * a2[1] + *a2 * v6 + a2[2] * v14 + a2[3] * v18;
  a1[3] = v9 * a2[1] + *a2 * v5 + a2[2] * v13 + a2[3] * v17;
  a1[4] = v8 * a2[5] + a2[4] * v4 + a2[6] * v12 + a2[7] * v16;
  a1[5] = v7 * a2[5] + a2[4] * v3 + a2[6] * v11 + a2[7] * v15;
  a1[6] = v10 * a2[5] + a2[4] * v6 + a2[6] * v14 + a2[7] * v18;
  a1[7] = v9 * a2[5] + a2[4] * v5 + a2[6] * v13 + a2[7] * v17;
  a1[8] = v8 * a2[9] + a2[8] * v4 + a2[10] * v12 + a2[11] * v16;
  a1[9] = v7 * a2[9] + a2[8] * v3 + a2[10] * v11 + a2[11] * v15;
  a1[10] = v10 * a2[9] + a2[8] * v6 + a2[10] * v14 + a2[11] * v18;
  a1[11] = v9 * a2[9] + a2[8] * v5 + a2[10] * v13 + a2[11] * v17;
  a1[12] = v8 * a2[13] + a2[12] * v4 + a2[14] * v12 + a2[15] * v16;
  a1[13] = v7 * a2[13] + a2[12] * v3 + a2[14] * v11 + a2[15] * v15;
  a1[14] = v10 * a2[13] + a2[12] * v6 + a2[14] * v14 + a2[15] * v18;
  double result = v9 * a2[13] + a2[12] * v5 + a2[14] * v13 + a2[15] * v17;
  a1[15] = result;
  return result;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxGeneric,CMMConvMatrix>::FlattenConversion(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableArrayRef v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    double v4 = (const void **)MEMORY[0x1E4F1CFD0];
    if (v3)
    {
      double v5 = v3;
      double v6 = (const void *)*MEMORY[0x1E4F1CFD0];
      double v7 = (const void *)*MEMORY[0x1E4F1CFC8];
      if (*(unsigned char *)(a1 + 49)) {
        double v8 = (const void *)*MEMORY[0x1E4F1CFD0];
      }
      else {
        double v8 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelActiveMatrix", v8);
      if (*(unsigned char *)(a1 + 48)) {
        double v9 = v6;
      }
      else {
        double v9 = v7;
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelInputMatrix", v9);
      uint64_t v10 = 0;
      uint64_t v11 = a1 + 100;
      double v12 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      while (1)
      {
        CFMutableArrayRef v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13) {
          break;
        }
        double v14 = v13;
        uint64_t v15 = 0;
        while (1)
        {
          float valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          CFNumberRef v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16) {
            break;
          }
          CFNumberRef v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12) {
            goto LABEL_16;
          }
        }
        CFRelease(v14);
        double v14 = 0;
LABEL_16:
        float v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        CFNumberRef v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        CFNumberRef v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14) {
          break;
        }
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    double v5 = Mutable;
    CFMutableArrayRef Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(unsigned char *)(a1 + 34)) {
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", *v4);
    }
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

uint64_t CMMConvMatrixTemplate<CMMMtxGeneric,CMMConvMatrix>::GetTransformType()
{
  return 2;
}

void CMMConvMatrixTemplate<CMMMtxGeneric,CMMConvMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    double v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxGeneric,CMMConvMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    double v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

float *CMMConvMatrixTemplate<CMMMtxGeneric,CMMConvMatrix>::Convert(float *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  float v6 = result[25];
  float v5 = result[26];
  float v7 = result[27];
  float v8 = result[28];
  float v9 = result[29];
  float v10 = result[30];
  float v11 = result[31];
  float v12 = result[32];
  float v13 = result[40];
  BOOL v14 = v13 == 1.0;
  float v15 = v6 * v13;
  float v16 = v5 * v13;
  float v17 = v7 * v13;
  float v18 = v8 * v13;
  float v19 = v9 * v13;
  float v20 = v10 * v13;
  float v21 = v11 * v13;
  float v22 = v12 * v13;
  float v23 = result[33] * v13;
  if (v14)
  {
    float v23 = result[33];
  }
  else
  {
    float v7 = v17;
    float v8 = v18;
    float v9 = v19;
    float v10 = v20;
    float v11 = v21;
    float v12 = v22;
    float v5 = v16;
  }
  if (!v14) {
    float v6 = v15;
  }
  if (a5 * a4)
  {
    unint64_t v24 = 0;
    float v25 = result[37];
    float v26 = result[38];
    float v27 = result[39];
    do
    {
      float32x4_t v28 = (float *)(a2 + 4 * v24);
      float v29 = v28[1];
      float v30 = v28[2];
      float v31 = v26 + (float)((float)((float)(v9 * v29) + (float)(*v28 * v8)) + (float)(v30 * v10));
      float v32 = v27 + (float)((float)((float)(v12 * v29) + (float)(*v28 * v11)) + (float)(v30 * v23));
      float *v28 = v25 + (float)((float)((float)(v5 * v29) + (float)(*v28 * v6)) + (float)(v30 * v7));
      v28[1] = v31;
      v28[2] = v32;
      v24 += a4;
    }
    while (v24 < a5 * a4);
  }
  return result;
}

int *CMMConvMatrixTemplate<CMMMtxGeneric,CMMConvMatrix>::Convert(int *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  unint64_t v5 = a5 * a4;
  if (a5 * a4)
  {
    unint64_t v6 = 0;
    int v7 = result[34];
    int v8 = result[35];
    int v9 = result[36];
    int v11 = result[23];
    int v10 = result[24];
    int v13 = result[21];
    int v12 = result[22];
    int v14 = result[19];
    int v15 = result[20];
    int v17 = result[17];
    int v16 = result[18];
    double result = (int *)result[16];
    do
    {
      float v18 = (int *)(a2 + 4 * v6);
      int v19 = v18[1];
      int v20 = v18[2];
      int v21 = v7
          + ((unint64_t)(v17 * (uint64_t)v19 + (int)result * (uint64_t)*v18 + v16 * (uint64_t)v20 + 0x8000) >> 16);
      int v22 = v8 + ((unint64_t)(v15 * (uint64_t)v19 + v14 * (uint64_t)*v18 + v13 * (uint64_t)v20 + 0x8000) >> 16);
      int v23 = v9 + ((unint64_t)(v11 * (uint64_t)v19 + v12 * (uint64_t)*v18 + v10 * (uint64_t)v20 + 0x8000) >> 16);
      if (v21 >= 0x1000000) {
        int v24 = 0x1000000;
      }
      else {
        int v24 = v7
      }
            + ((unint64_t)(v17 * (uint64_t)v19 + (int)result * (uint64_t)*v18 + v16 * (uint64_t)v20 + 0x8000) >> 16);
      if (v21 < 0) {
        int v24 = 0;
      }
      if (v22 >= 0x1000000) {
        int v25 = 0x1000000;
      }
      else {
        int v25 = v22;
      }
      if (v22 < 0) {
        int v25 = 0;
      }
      *float v18 = v24;
      v18[1] = v25;
      if (v23 >= 0x1000000) {
        int v26 = 0x1000000;
      }
      else {
        int v26 = v23;
      }
      if (v23 >= 0) {
        int v27 = v26;
      }
      else {
        int v27 = 0;
      }
      v18[2] = v27;
      v6 += a4;
    }
    while (v6 < v5);
  }
  return result;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxLabToGray,CMMConvMatrix>::FlattenConversion(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableArrayRef v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    unint64_t v4 = (const void **)MEMORY[0x1E4F1CFD0];
    if (v3)
    {
      unint64_t v5 = v3;
      unint64_t v6 = (const void *)*MEMORY[0x1E4F1CFD0];
      int v7 = (const void *)*MEMORY[0x1E4F1CFC8];
      if (*(unsigned char *)(a1 + 49)) {
        int v8 = (const void *)*MEMORY[0x1E4F1CFD0];
      }
      else {
        int v8 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelActiveMatrix", v8);
      if (*(unsigned char *)(a1 + 48)) {
        int v9 = v6;
      }
      else {
        int v9 = v7;
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelInputMatrix", v9);
      uint64_t v10 = 0;
      uint64_t v11 = a1 + 100;
      int v12 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      while (1)
      {
        CFMutableArrayRef v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13) {
          break;
        }
        int v14 = v13;
        uint64_t v15 = 0;
        while (1)
        {
          float valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          CFNumberRef v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16) {
            break;
          }
          CFNumberRef v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12) {
            goto LABEL_16;
          }
        }
        CFRelease(v14);
        int v14 = 0;
LABEL_16:
        float v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        CFNumberRef v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        CFNumberRef v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14) {
          break;
        }
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    unint64_t v5 = Mutable;
    CFMutableArrayRef Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(unsigned char *)(a1 + 34)) {
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", *v4);
    }
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

uint64_t CMMConvMatrixTemplate<CMMMtxLabToGray,CMMConvMatrix>::GetTransformType()
{
  return 2;
}

void CMMConvMatrixTemplate<CMMMtxLabToGray,CMMConvMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxLabToGray,CMMConvMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t CMMConvMatrixTemplate<CMMMtxLabToGray,CMMConvMatrix>::Convert(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  if (a5 * a4)
  {
    unint64_t v5 = 0;
    float v6 = *(float *)(result + 100) * *(float *)(result + 160);
    do
    {
      *(float *)a2 = v6 * *(float *)a2;
      *(_DWORD *)(a2 + 4) = 0;
      *(_DWORD *)(a2 + 8) = 0;
      v5 += a4;
      a2 += 4 * a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

uint64_t CMMConvMatrixTemplate<CMMMtxLabToGray,CMMConvMatrix>::Convert(uint64_t result, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  if (a5 * a4)
  {
    unint64_t v5 = 0;
    int v6 = *(_DWORD *)(result + 64);
    do
    {
      unint64_t v7 = (unint64_t)(*a2 * (uint64_t)v6 + 0x8000) >> 16;
      if (v7 >= 0x1000000) {
        int v8 = 0x1000000;
      }
      else {
        int v8 = (unint64_t)(*a2 * (uint64_t)v6 + 0x8000) >> 16;
      }
      if ((v7 & 0x80000000) == 0) {
        int v9 = v8;
      }
      else {
        int v9 = 0;
      }
      a2[1] = 0;
      a2[2] = 0;
      *a2 = v9;
      v5 += a4;
      a2 += a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxGrayToLab,CMMConvMatrix>::FlattenConversion(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableArrayRef v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    unint64_t v4 = (const void **)MEMORY[0x1E4F1CFD0];
    if (v3)
    {
      unint64_t v5 = v3;
      int v6 = (const void *)*MEMORY[0x1E4F1CFD0];
      unint64_t v7 = (const void *)*MEMORY[0x1E4F1CFC8];
      if (*(unsigned char *)(a1 + 49)) {
        int v8 = (const void *)*MEMORY[0x1E4F1CFD0];
      }
      else {
        int v8 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelActiveMatrix", v8);
      if (*(unsigned char *)(a1 + 48)) {
        int v9 = v6;
      }
      else {
        int v9 = v7;
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelInputMatrix", v9);
      uint64_t v10 = 0;
      uint64_t v11 = a1 + 100;
      float v12 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      while (1)
      {
        CFMutableArrayRef v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13) {
          break;
        }
        int v14 = v13;
        uint64_t v15 = 0;
        while (1)
        {
          float valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          CFNumberRef v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16) {
            break;
          }
          CFNumberRef v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12) {
            goto LABEL_16;
          }
        }
        CFRelease(v14);
        int v14 = 0;
LABEL_16:
        float v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        CFNumberRef v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        CFNumberRef v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14) {
          break;
        }
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    unint64_t v5 = Mutable;
    CFMutableArrayRef Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(unsigned char *)(a1 + 34)) {
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", *v4);
    }
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

uint64_t CMMConvMatrixTemplate<CMMMtxGrayToLab,CMMConvMatrix>::GetTransformType()
{
  return 2;
}

void CMMConvMatrixTemplate<CMMMtxGrayToLab,CMMConvMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxGrayToLab,CMMConvMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t CMMConvMatrixTemplate<CMMMtxGrayToLab,CMMConvMatrix>::Convert(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  if (a5 * a4)
  {
    unint64_t v5 = 0;
    uint64_t v6 = *(void *)(result + 152);
    float v7 = *(float *)(result + 100) * *(float *)(result + 160);
    do
    {
      *(float *)a2 = v7 * *(float *)a2;
      *(void *)(a2 + 4) = v6;
      v5 += a4;
      a2 += 4 * a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

uint64_t CMMConvMatrixTemplate<CMMMtxGrayToLab,CMMConvMatrix>::Convert(uint64_t result, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  if (a5 * a4)
  {
    unint64_t v5 = 0;
    int v6 = *(_DWORD *)(result + 64);
    int8x8_t v7 = vand_s8((int8x8_t)vcgez_s32(*(int32x2_t *)(result + 140)), (int8x8_t)vmin_u32(*(uint32x2_t *)(result + 140), (uint32x2_t)0x100000001000000));
    do
    {
      unint64_t v8 = (unint64_t)(v6 * (uint64_t)*a2 + 0x8000) >> 16;
      if (v8 >= 0x1000000) {
        int v9 = 0x1000000;
      }
      else {
        int v9 = (unint64_t)(v6 * (uint64_t)*a2 + 0x8000) >> 16;
      }
      if ((v8 & 0x80000000) == 0) {
        int v10 = v9;
      }
      else {
        int v10 = 0;
      }
      *a2 = v10;
      *(int8x8_t *)(a2 + 1) = v7;
      v5 += a4;
      a2 += a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxXYZToLab,CMMConvMatrix>::FlattenConversion(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableArrayRef v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    unint64_t v4 = (const void **)MEMORY[0x1E4F1CFD0];
    if (v3)
    {
      unint64_t v5 = v3;
      int v6 = (const void *)*MEMORY[0x1E4F1CFD0];
      int8x8_t v7 = (const void *)*MEMORY[0x1E4F1CFC8];
      if (*(unsigned char *)(a1 + 49)) {
        unint64_t v8 = (const void *)*MEMORY[0x1E4F1CFD0];
      }
      else {
        unint64_t v8 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelActiveMatrix", v8);
      if (*(unsigned char *)(a1 + 48)) {
        int v9 = v6;
      }
      else {
        int v9 = v7;
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelInputMatrix", v9);
      uint64_t v10 = 0;
      uint64_t v11 = a1 + 100;
      float v12 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      while (1)
      {
        CFMutableArrayRef v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13) {
          break;
        }
        int v14 = v13;
        uint64_t v15 = 0;
        while (1)
        {
          float valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          CFNumberRef v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16) {
            break;
          }
          CFNumberRef v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12) {
            goto LABEL_16;
          }
        }
        CFRelease(v14);
        int v14 = 0;
LABEL_16:
        float v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        CFNumberRef v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        CFNumberRef v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14) {
          break;
        }
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    unint64_t v5 = Mutable;
    CFMutableArrayRef Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(unsigned char *)(a1 + 34)) {
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", *v4);
    }
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

uint64_t CMMConvMatrixTemplate<CMMMtxXYZToLab,CMMConvMatrix>::GetTransformType()
{
  return 2;
}

void CMMConvMatrixTemplate<CMMMtxXYZToLab,CMMConvMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxXYZToLab,CMMConvMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

float *CMMConvMatrixTemplate<CMMMtxXYZToLab,CMMConvMatrix>::Convert(float *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  float v5 = result[26];
  float v7 = result[28];
  float v6 = result[29];
  float v8 = result[32];
  float v9 = result[33];
  float v10 = result[40];
  BOOL v11 = v10 == 1.0;
  float v12 = v5 * v10;
  float v13 = v7 * v10;
  float v14 = v6 * v10;
  float v15 = v8 * v10;
  float v16 = v9 * v10;
  if (!v11)
  {
    float v6 = v14;
    float v8 = v15;
    float v9 = v16;
    float v7 = v13;
    float v5 = v12;
  }
  if (a5 * a4)
  {
    unint64_t v17 = 0;
    float v18 = result[37];
    float v19 = result[38];
    float v20 = result[39];
    do
    {
      int v21 = (float *)(a2 + 4 * v17);
      float v22 = v21[1];
      float v23 = v18 + (float)(v22 * v5);
      float v24 = v19 + (float)((float)(v6 * v22) + (float)(*v21 * v7));
      float v25 = v20 + (float)((float)(v9 * v21[2]) + (float)(v22 * v8));
      *int v21 = v23;
      v21[1] = v24;
      v21[2] = v25;
      v17 += a4;
    }
    while (v17 < a5 * a4);
  }
  return result;
}

uint64_t CMMConvMatrixTemplate<CMMMtxXYZToLab,CMMConvMatrix>::Convert(uint64_t result, int8x8_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  unint64_t v5 = a5 * a4;
  if (a5 * a4)
  {
    int v7 = *(_DWORD *)(result + 92);
    int v6 = *(_DWORD *)(result + 96);
    int v9 = *(_DWORD *)(result + 76);
    int v8 = *(_DWORD *)(result + 80);
    int v10 = *(_DWORD *)(result + 68);
    int v11 = *(_DWORD *)(result + 140) + 24;
    int v12 = *(_DWORD *)(result + 144) + 24;
    float v13 = a2 + 1;
    double result = 1;
    do
    {
      __int32 v14 = v13[-1].i32[1];
      unint64_t v15 = (unint64_t)(v10 * (uint64_t)v14 + 0x8000) >> 16;
      unint64_t v16 = (unint64_t)(v8 * (uint64_t)v14 + v9 * (uint64_t)v13[-1].i32[0] + 0x8000) >> 16;
      int v17 = v16 - 24;
      if ((int)v16 <= 24) {
        int v17 = 0;
      }
      if ((int)v16 >= -24) {
        LODWORD(v16) = -24;
      }
      unsigned int v18 = v11 + v16 + v17;
      unint64_t v19 = (unint64_t)(v6 * (uint64_t)v13->i32[0] + v7 * (uint64_t)v14 + 0x8000) >> 16;
      int v20 = v19 - 24;
      if ((int)v19 <= 24) {
        int v20 = 0;
      }
      if ((int)v19 >= -24) {
        LODWORD(v19) = -24;
      }
      int v21 = v12 + v19 + v20;
      v13[-1] = vand_s8((int8x8_t)vcgez_s32((int32x2_t)__PAIR64__(v18, v15)), (int8x8_t)vmin_u32((uint32x2_t)__PAIR64__(v18, v15), (uint32x2_t)0x100000001000000));
      if (v21 >= 0x1000000) {
        int v22 = 0x1000000;
      }
      else {
        int v22 = v21;
      }
      if (v21 < 0) {
        int v22 = 0;
      }
      v13->i32[0] = v22;
      result += a4;
      float v13 = (int8x8_t *)((char *)v13 + 4 * a4);
    }
    while (result - 1 < v5);
  }
  return result;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxLabToXYZ,CMMConvMatrix>::FlattenConversion(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableArrayRef v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    unint64_t v4 = (const void **)MEMORY[0x1E4F1CFD0];
    if (v3)
    {
      unint64_t v5 = v3;
      int v6 = (const void *)*MEMORY[0x1E4F1CFD0];
      int v7 = (const void *)*MEMORY[0x1E4F1CFC8];
      if (*(unsigned char *)(a1 + 49)) {
        int v8 = (const void *)*MEMORY[0x1E4F1CFD0];
      }
      else {
        int v8 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelActiveMatrix", v8);
      if (*(unsigned char *)(a1 + 48)) {
        int v9 = v6;
      }
      else {
        int v9 = v7;
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelInputMatrix", v9);
      uint64_t v10 = 0;
      uint64_t v11 = a1 + 100;
      int v12 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      while (1)
      {
        CFMutableArrayRef v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13) {
          break;
        }
        __int32 v14 = v13;
        uint64_t v15 = 0;
        while (1)
        {
          float valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          CFNumberRef v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16) {
            break;
          }
          CFNumberRef v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12) {
            goto LABEL_16;
          }
        }
        CFRelease(v14);
        __int32 v14 = 0;
LABEL_16:
        float v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        CFNumberRef v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        CFNumberRef v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14) {
          break;
        }
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    unint64_t v5 = Mutable;
    CFMutableArrayRef Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(unsigned char *)(a1 + 34)) {
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", *v4);
    }
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

uint64_t CMMConvMatrixTemplate<CMMMtxLabToXYZ,CMMConvMatrix>::GetTransformType()
{
  return 2;
}

void CMMConvMatrixTemplate<CMMMtxLabToXYZ,CMMConvMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxLabToXYZ,CMMConvMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

float *CMMConvMatrixTemplate<CMMMtxLabToXYZ,CMMConvMatrix>::Convert(float *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  float v6 = result[25];
  float v5 = result[26];
  float v7 = result[28];
  float v8 = result[31];
  float v9 = result[33];
  float v10 = result[40];
  BOOL v11 = v10 == 1.0;
  float v12 = v6 * v10;
  float v13 = v5 * v10;
  float v14 = v7 * v10;
  float v15 = v8 * v10;
  float v16 = v9 * v10;
  if (!v11)
  {
    float v7 = v14;
    float v8 = v15;
    float v9 = v16;
    float v5 = v13;
    float v6 = v12;
  }
  if (a5 * a4)
  {
    unint64_t v17 = 0;
    float v18 = result[37];
    float v19 = result[38];
    float v20 = result[39];
    do
    {
      int v21 = (float *)(a2 + 4 * v17);
      float v22 = v19 + (float)(*v21 * v7);
      float v23 = v20 + (float)((float)(v9 * v21[2]) + (float)(*v21 * v8));
      *int v21 = v18 + (float)((float)(v5 * v21[1]) + (float)(*v21 * v6));
      v21[1] = v22;
      v21[2] = v23;
      v17 += a4;
    }
    while (v17 < a5 * a4);
  }
  return result;
}

int *CMMConvMatrixTemplate<CMMMtxLabToXYZ,CMMConvMatrix>::Convert(int *result, int8x8_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  unint64_t v5 = a5 * a4;
  if (a5 * a4)
  {
    int v6 = result[34];
    int v7 = result[36];
    int v8 = result[24];
    int v9 = result[22];
    int v10 = result[19];
    BOOL v11 = a2 + 1;
    uint64_t v12 = 1;
    float v14 = result + 16;
    double result = (int *)result[16];
    int v13 = v14[1];
    do
    {
      __int32 v15 = v11[-1].i32[0];
      unsigned int v16 = v6 + ((unint64_t)(v13 * (uint64_t)v11[-1].i32[1] + (int)result * (uint64_t)v15 + 0x8000) >> 16);
      unint64_t v17 = (unint64_t)(v10 * (uint64_t)v15 + 0x8000) >> 16;
      int v18 = v7 + ((unint64_t)(v8 * (uint64_t)v11->i32[0] + v9 * (uint64_t)v15 + 0x8000) >> 16);
      v11[-1] = vand_s8((int8x8_t)vcgez_s32((int32x2_t)__PAIR64__(v17, v16)), (int8x8_t)vmin_u32((uint32x2_t)__PAIR64__(v17, v16), (uint32x2_t)0x100000001000000));
      if (v18 >= 0x1000000) {
        int v19 = 0x1000000;
      }
      else {
        int v19 = v18;
      }
      if (v18 >= 0) {
        int v20 = v19;
      }
      else {
        int v20 = 0;
      }
      v11->i32[0] = v20;
      v12 += a4;
      BOOL v11 = (int8x8_t *)((char *)v11 + 4 * a4);
    }
    while (v12 - 1 < v5);
  }
  return result;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxRow,CMMConvMatrix>::FlattenConversion(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableArrayRef v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    unint64_t v4 = (const void **)MEMORY[0x1E4F1CFD0];
    if (v3)
    {
      unint64_t v5 = v3;
      int v6 = (const void *)*MEMORY[0x1E4F1CFD0];
      int v7 = (const void *)*MEMORY[0x1E4F1CFC8];
      if (*(unsigned char *)(a1 + 49)) {
        int v8 = (const void *)*MEMORY[0x1E4F1CFD0];
      }
      else {
        int v8 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelActiveMatrix", v8);
      if (*(unsigned char *)(a1 + 48)) {
        int v9 = v6;
      }
      else {
        int v9 = v7;
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelInputMatrix", v9);
      uint64_t v10 = 0;
      uint64_t v11 = a1 + 100;
      uint64_t v12 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      while (1)
      {
        CFMutableArrayRef v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13) {
          break;
        }
        float v14 = v13;
        uint64_t v15 = 0;
        while (1)
        {
          float valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          CFNumberRef v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16) {
            break;
          }
          CFNumberRef v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12) {
            goto LABEL_16;
          }
        }
        CFRelease(v14);
        float v14 = 0;
LABEL_16:
        float v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        CFNumberRef v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        CFNumberRef v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14) {
          break;
        }
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    unint64_t v5 = Mutable;
    CFMutableArrayRef Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(unsigned char *)(a1 + 34)) {
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", *v4);
    }
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

uint64_t CMMConvMatrixTemplate<CMMMtxRow,CMMConvMatrix>::GetTransformType()
{
  return 2;
}

void CMMConvMatrixTemplate<CMMMtxRow,CMMConvMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxRow,CMMConvMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

float *CMMConvMatrixTemplate<CMMMtxRow,CMMConvMatrix>::Convert(float *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  if (a5 * a4)
  {
    unint64_t v5 = 0;
    float v6 = result[40];
    float v7 = result[27] * v6;
    float v8 = result[26] * v6;
    float v9 = result[25] * v6;
    uint64_t v10 = (float *)(a2 + 4);
    do
    {
      *(v10 - 1) = (float)((float)(v8 * *v10) + (float)(*(v10 - 1) * v9)) + (float)(*(float *)(a2 + 8 + 4 * v5) * v7);
      *(void *)uint64_t v10 = 0;
      v5 += a4;
      v10 += a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

uint64_t CMMConvMatrixTemplate<CMMMtxRow,CMMConvMatrix>::Convert(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  if (a5 * a4)
  {
    unint64_t v5 = 0;
    int v7 = *(_DWORD *)(result + 68);
    int v6 = *(_DWORD *)(result + 72);
    float v8 = (int *)(a2 + 4);
    int v9 = *(_DWORD *)(result + 64);
    do
    {
      unint64_t v10 = (unint64_t)(v7 * (uint64_t)*v8
                             + v9 * (uint64_t)*(v8 - 1)
                             + v6 * (uint64_t)*(int *)(a2 + 8 + 4 * v5)
                             + 0x8000) >> 16;
      if (v10 >= 0x1000000) {
        double result = 0x1000000;
      }
      else {
        double result = v10;
      }
      if ((v10 & 0x80000000) == 0) {
        int v11 = result;
      }
      else {
        int v11 = 0;
      }
      *(v8 - 1) = v11;
      *(void *)float v8 = 0;
      v5 += a4;
      v8 += a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxXYZToGray,CMMConvMatrix>::FlattenConversion(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableArrayRef v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    unint64_t v4 = (const void **)MEMORY[0x1E4F1CFD0];
    if (v3)
    {
      unint64_t v5 = v3;
      int v6 = (const void *)*MEMORY[0x1E4F1CFD0];
      int v7 = (const void *)*MEMORY[0x1E4F1CFC8];
      if (*(unsigned char *)(a1 + 49)) {
        float v8 = (const void *)*MEMORY[0x1E4F1CFD0];
      }
      else {
        float v8 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelActiveMatrix", v8);
      if (*(unsigned char *)(a1 + 48)) {
        int v9 = v6;
      }
      else {
        int v9 = v7;
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelInputMatrix", v9);
      uint64_t v10 = 0;
      uint64_t v11 = a1 + 100;
      float v12 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      while (1)
      {
        CFMutableArrayRef v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13) {
          break;
        }
        float v14 = v13;
        uint64_t v15 = 0;
        while (1)
        {
          float valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          CFNumberRef v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16) {
            break;
          }
          CFNumberRef v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12) {
            goto LABEL_16;
          }
        }
        CFRelease(v14);
        float v14 = 0;
LABEL_16:
        float v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        CFNumberRef v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        CFNumberRef v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14) {
          break;
        }
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    unint64_t v5 = Mutable;
    CFMutableArrayRef Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(unsigned char *)(a1 + 34)) {
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", *v4);
    }
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

uint64_t CMMConvMatrixTemplate<CMMMtxXYZToGray,CMMConvMatrix>::GetTransformType()
{
  return 2;
}

void CMMConvMatrixTemplate<CMMMtxXYZToGray,CMMConvMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxXYZToGray,CMMConvMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t CMMConvMatrixTemplate<CMMMtxXYZToGray,CMMConvMatrix>::Convert(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  if (a5 * a4)
  {
    unint64_t v5 = 0;
    float v6 = *(float *)(result + 104) * *(float *)(result + 160);
    uint64_t v7 = 4;
    do
    {
      *(float *)(a2 + 4 * v5) = v6 * *(float *)(a2 + v7);
      *(void *)(a2 + v7) = 0;
      v5 += a4;
      v7 += 4 * a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

{
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  _DWORD *exception;

  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  if (a5 * a4)
  {
    unint64_t v5 = 0;
    float v6 = *(_DWORD *)(result + 68);
    uint64_t v7 = 4;
    do
    {
      float v8 = (unint64_t)(*(int *)(a2 + v7) * (uint64_t)v6 + 0x8000) >> 16;
      if (v8 >= 0x1000000) {
        int v9 = 0x1000000;
      }
      else {
        int v9 = (unint64_t)(*(int *)(a2 + v7) * (uint64_t)v6 + 0x8000) >> 16;
      }
      if ((v8 & 0x80000000) == 0) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      *(_DWORD *)(a2 + 4 * v5) = v10;
      *(void *)(a2 + v7) = 0;
      v5 += a4;
      v7 += 4 * a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxDiag,CMMConvMatrix>::FlattenConversion(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableArrayRef v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    unint64_t v4 = (const void **)MEMORY[0x1E4F1CFD0];
    if (v3)
    {
      unint64_t v5 = v3;
      float v6 = (const void *)*MEMORY[0x1E4F1CFD0];
      uint64_t v7 = (const void *)*MEMORY[0x1E4F1CFC8];
      if (*(unsigned char *)(a1 + 49)) {
        float v8 = (const void *)*MEMORY[0x1E4F1CFD0];
      }
      else {
        float v8 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelActiveMatrix", v8);
      if (*(unsigned char *)(a1 + 48)) {
        int v9 = v6;
      }
      else {
        int v9 = v7;
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelInputMatrix", v9);
      uint64_t v10 = 0;
      uint64_t v11 = a1 + 100;
      float v12 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      while (1)
      {
        CFMutableArrayRef v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13) {
          break;
        }
        float v14 = v13;
        uint64_t v15 = 0;
        while (1)
        {
          float valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          CFNumberRef v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16) {
            break;
          }
          CFNumberRef v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12) {
            goto LABEL_16;
          }
        }
        CFRelease(v14);
        float v14 = 0;
LABEL_16:
        float v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        CFNumberRef v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        CFNumberRef v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14) {
          break;
        }
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    unint64_t v5 = Mutable;
    CFMutableArrayRef Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(unsigned char *)(a1 + 34)) {
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", *v4);
    }
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

uint64_t CMMConvMatrixTemplate<CMMMtxDiag,CMMConvMatrix>::GetTransformType()
{
  return 2;
}

void CMMConvMatrixTemplate<CMMMtxDiag,CMMConvMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxDiag,CMMConvMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

float CMMConvMatrixTemplate<CMMMtxDiag,CMMConvMatrix>::Convert(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  if (a5 * a4)
  {
    unint64_t v6 = 0;
    v7.i32[0] = *(_DWORD *)(a1 + 100);
    a6 = *(double *)(a1 + 148);
    float v8 = *(float *)(a1 + 156);
    float v9 = *(float *)(a1 + 160);
    float v10 = *(float *)(a1 + 132) * v9;
    v7.i32[1] = *(_DWORD *)(a1 + 116);
    float32x2_t v11 = vmul_n_f32(v7, v9);
    float v12 = a2 + 1;
    do
    {
      float32_t v13 = v8 + (float)(v12->f32[v6] * v10);
      *a2 = vmla_f32(*(float32x2_t *)&a6, v11, *a2);
      v12->f32[v6] = v13;
      v6 += a4;
      a2 = (float32x2_t *)((char *)a2 + 4 * a4);
    }
    while (v6 < a5 * a4);
  }
  return *(float *)&a6;
}

uint64_t CMMConvMatrixTemplate<CMMMtxDiag,CMMConvMatrix>::Convert(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  if (a5 * a4)
  {
    unint64_t v5 = 0;
    int v6 = *(_DWORD *)(result + 96);
    int v7 = *(_DWORD *)(result + 80);
    int v8 = *(_DWORD *)(result + 64);
    do
    {
      float v9 = (int *)(a2 + 4 * v5);
      unint64_t v10 = (unint64_t)(v8 * (uint64_t)*v9 + 0x8000) >> 16;
      unint64_t v11 = (unint64_t)(v7 * (uint64_t)v9[1] + 0x8000) >> 16;
      unint64_t v12 = (unint64_t)(v6 * (uint64_t)v9[2] + 0x8000) >> 16;
      if (v10 >= 0x1000000) {
        int v13 = 0x1000000;
      }
      else {
        int v13 = (unint64_t)(v8 * (uint64_t)*v9 + 0x8000) >> 16;
      }
      if ((v10 & 0x80000000) == 0) {
        int v14 = v13;
      }
      else {
        int v14 = 0;
      }
      if (v11 >= 0x1000000) {
        double result = 0x1000000;
      }
      else {
        double result = v11;
      }
      if ((v11 & 0x80000000) == 0) {
        int v15 = result;
      }
      else {
        int v15 = 0;
      }
      *float v9 = v14;
      v9[1] = v15;
      if (v12 >= 0x1000000) {
        int v16 = 0x1000000;
      }
      else {
        int v16 = v12;
      }
      if ((v12 & 0x80000000) != 0) {
        int v16 = 0;
      }
      v9[2] = v16;
      v5 += a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxGrayToXYZ,CMMConvMatrix>::FlattenConversion(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableArrayRef v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    unint64_t v4 = (const void **)MEMORY[0x1E4F1CFD0];
    if (v3)
    {
      unint64_t v5 = v3;
      int v6 = (const void *)*MEMORY[0x1E4F1CFD0];
      int v7 = (const void *)*MEMORY[0x1E4F1CFC8];
      if (*(unsigned char *)(a1 + 49)) {
        int v8 = (const void *)*MEMORY[0x1E4F1CFD0];
      }
      else {
        int v8 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelActiveMatrix", v8);
      if (*(unsigned char *)(a1 + 48)) {
        float v9 = v6;
      }
      else {
        float v9 = v7;
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelInputMatrix", v9);
      uint64_t v10 = 0;
      uint64_t v11 = a1 + 100;
      unint64_t v12 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      while (1)
      {
        CFMutableArrayRef v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13) {
          break;
        }
        int v14 = v13;
        uint64_t v15 = 0;
        while (1)
        {
          float valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          CFNumberRef v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16) {
            break;
          }
          CFNumberRef v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12) {
            goto LABEL_16;
          }
        }
        CFRelease(v14);
        int v14 = 0;
LABEL_16:
        float v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        CFNumberRef v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        CFNumberRef v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14) {
          break;
        }
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    unint64_t v5 = Mutable;
    CFMutableArrayRef Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(unsigned char *)(a1 + 34)) {
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", *v4);
    }
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

uint64_t CMMConvMatrixTemplate<CMMMtxGrayToXYZ,CMMConvMatrix>::GetTransformType()
{
  return 2;
}

void CMMConvMatrixTemplate<CMMMtxGrayToXYZ,CMMConvMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxGrayToXYZ,CMMConvMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

float *CMMConvMatrixTemplate<CMMMtxGrayToXYZ,CMMConvMatrix>::Convert(float *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  if (a5 * a4)
  {
    unint64_t v5 = 0;
    float v6 = result[40];
    float v7 = result[31] * v6;
    float v8 = result[28] * v6;
    float v9 = result[25] * v6;
    do
    {
      uint64_t v10 = (float *)(a2 + 4 * v5);
      float v11 = v8 * *v10;
      float v12 = v7 * *v10;
      *uint64_t v10 = v9 * *v10;
      v10[1] = v11;
      v10[2] = v12;
      v5 += a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

uint64_t CMMConvMatrixTemplate<CMMMtxGrayToXYZ,CMMConvMatrix>::Convert(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  if (a5 * a4)
  {
    unint64_t v5 = 0;
    int v6 = *(_DWORD *)(result + 88);
    int v7 = *(_DWORD *)(result + 76);
    int v8 = *(_DWORD *)(result + 64);
    do
    {
      float v9 = (int *)(a2 + 4 * v5);
      unint64_t v10 = (unint64_t)(v8 * (uint64_t)*v9 + 0x8000) >> 16;
      unint64_t v11 = (unint64_t)(v7 * (uint64_t)*v9 + 0x8000) >> 16;
      unint64_t v12 = (unint64_t)(v6 * (uint64_t)*v9 + 0x8000) >> 16;
      if (v10 >= 0x1000000) {
        int v13 = 0x1000000;
      }
      else {
        int v13 = (unint64_t)(v8 * (uint64_t)*v9 + 0x8000) >> 16;
      }
      if ((v10 & 0x80000000) == 0) {
        int v14 = v13;
      }
      else {
        int v14 = 0;
      }
      if (v11 >= 0x1000000) {
        double result = 0x1000000;
      }
      else {
        double result = v11;
      }
      if ((v11 & 0x80000000) == 0) {
        int v15 = result;
      }
      else {
        int v15 = 0;
      }
      *float v9 = v14;
      v9[1] = v15;
      if (v12 >= 0x1000000) {
        int v16 = 0x1000000;
      }
      else {
        int v16 = v12;
      }
      if ((v12 & 0x80000000) == 0) {
        int v17 = v16;
      }
      else {
        int v17 = 0;
      }
      v9[2] = v17;
      v5 += a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvMatrix>::FlattenConversion(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableArrayRef v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    unint64_t v4 = (const void **)MEMORY[0x1E4F1CFD0];
    if (v3)
    {
      unint64_t v5 = v3;
      int v6 = (const void *)*MEMORY[0x1E4F1CFD0];
      int v7 = (const void *)*MEMORY[0x1E4F1CFC8];
      if (*(unsigned char *)(a1 + 49)) {
        int v8 = (const void *)*MEMORY[0x1E4F1CFD0];
      }
      else {
        int v8 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelActiveMatrix", v8);
      if (*(unsigned char *)(a1 + 48)) {
        float v9 = v6;
      }
      else {
        float v9 = v7;
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelInputMatrix", v9);
      uint64_t v10 = 0;
      uint64_t v11 = a1 + 100;
      unint64_t v12 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      while (1)
      {
        CFMutableArrayRef v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13) {
          break;
        }
        int v14 = v13;
        uint64_t v15 = 0;
        while (1)
        {
          float valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          CFNumberRef v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16) {
            break;
          }
          CFNumberRef v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12) {
            goto LABEL_16;
          }
        }
        CFRelease(v14);
        int v14 = 0;
LABEL_16:
        float v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        CFNumberRef v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        CFNumberRef v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14) {
          break;
        }
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    unint64_t v5 = Mutable;
    CFMutableArrayRef Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(unsigned char *)(a1 + 34)) {
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", *v4);
    }
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

uint64_t CMMConvMatrixTemplate<CMMMtxOnly,CMMConvMatrix>::GetTransformType()
{
  return 2;
}

void CMMConvMatrixTemplate<CMMMtxOnly,CMMConvMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxOnly,CMMConvMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

float *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvMatrix>::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  long long v5 = *(_OWORD *)(a1 + 112);
  v9[2] = *(_OWORD *)(a1 + 96);
  v9[3] = v5;
  uint64_t v10 = *(void *)(a1 + 128);
  long long v6 = *(_OWORD *)(a1 + 80);
  v9[0] = *(_OWORD *)(a1 + 64);
  v9[1] = v6;
  return CMMMtxOnly::ConvertFloat((float *)v9, a2, a4, a5, *(float *)(a1 + 160));
}

float *CMMMtxOnly::ConvertFloat(float *result, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  float v6 = result[9];
  float v5 = result[10];
  float v8 = result[11];
  float v7 = result[12];
  float v9 = result[13];
  BOOL v10 = a5 == 1.0;
  float v11 = v6 * a5;
  float v12 = v5 * a5;
  float v13 = v8 * a5;
  float v14 = v7 * a5;
  float v15 = v9 * a5;
  float v16 = result[15] * a5;
  float v17 = result[16] * a5;
  float v18 = result[17] * a5;
  if (a5 == 1.0) {
    float v19 = result[14];
  }
  else {
    float v19 = result[14] * a5;
  }
  if (v10) {
    float v20 = result[15];
  }
  else {
    float v20 = v16;
  }
  if (v10) {
    float v21 = result[16];
  }
  else {
    float v21 = v17;
  }
  if (v10) {
    float v22 = result[17];
  }
  else {
    float v22 = v18;
  }
  if (!v10)
  {
    float v9 = v15;
    float v7 = v14;
    float v8 = v13;
    float v5 = v12;
    float v6 = v11;
  }
  if (a4 * a3)
  {
    unint64_t v23 = 0;
    do
    {
      float v24 = (float *)(a2 + 4 * v23);
      float v25 = v24[1];
      float v26 = v24[2];
      float v27 = (float)((float)(v9 * v25) + (float)(*v24 * v7)) + (float)(v26 * v19);
      float v28 = (float)((float)(v21 * v25) + (float)(*v24 * v20)) + (float)(v26 * v22);
      *float v24 = (float)((float)(v5 * v25) + (float)(*v24 * v6)) + (float)(v26 * v8);
      v24[1] = v27;
      v24[2] = v28;
      v23 += a3;
    }
    while (v23 < a4 * a3);
  }
  return result;
}

int *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvMatrix>::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  long long v5 = *(_OWORD *)(a1 + 112);
  v9[2] = *(_OWORD *)(a1 + 96);
  v9[3] = v5;
  uint64_t v10 = *(void *)(a1 + 128);
  long long v6 = *(_OWORD *)(a1 + 80);
  v9[0] = *(_OWORD *)(a1 + 64);
  v9[1] = v6;
  return CMMMtxOnly::ConvertMax((int *)v9, a2, a4, a5);
}

int *CMMMtxOnly::ConvertMax(int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    do
    {
      long long v5 = (int *)(a2 + 4 * v4);
      int v6 = v5[1];
      int v7 = v5[2];
      unint64_t v8 = (unint64_t)(result[1] * (uint64_t)v6 + *result * (uint64_t)*v5 + result[2] * (uint64_t)v7 + 0x8000) >> 16;
      unint64_t v9 = (unint64_t)(result[4] * (uint64_t)v6 + result[3] * (uint64_t)*v5 + result[5] * (uint64_t)v7 + 0x8000) >> 16;
      unint64_t v10 = (unint64_t)(result[7] * (uint64_t)v6 + result[6] * (uint64_t)*v5 + result[8] * (uint64_t)v7 + 0x8000) >> 16;
      if (v8 >= 0x1000000) {
        int v11 = 0x1000000;
      }
      else {
        int v11 = (unint64_t)(result[1] * (uint64_t)v6 + *result * (uint64_t)*v5 + result[2] * (uint64_t)v7 + 0x8000) >> 16;
      }
      if ((v8 & 0x80000000) != 0) {
        int v11 = 0;
      }
      if (v9 >= 0x1000000) {
        int v12 = 0x1000000;
      }
      else {
        int v12 = v9;
      }
      if ((v9 & 0x80000000) != 0) {
        int v12 = 0;
      }
      int *v5 = v11;
      v5[1] = v12;
      if (v10 >= 0x1000000) {
        int v13 = 0x1000000;
      }
      else {
        int v13 = v10;
      }
      if ((v10 & 0x80000000) == 0) {
        int v14 = v13;
      }
      else {
        int v14 = 0;
      }
      v5[2] = v14;
      v4 += a3;
    }
    while (v4 < a4 * a3);
  }
  return result;
}

void CMMConvMatrixTemplate<CMMMtxOnly,CMMConvGrayToGrayMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    long long v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxOnly,CMMConvGrayToGrayMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    long long v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

float *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvGrayToGrayMatrix>::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  long long v5 = *(_OWORD *)(a1 + 112);
  v9[2] = *(_OWORD *)(a1 + 96);
  v9[3] = v5;
  uint64_t v10 = *(void *)(a1 + 128);
  long long v6 = *(_OWORD *)(a1 + 80);
  v9[0] = *(_OWORD *)(a1 + 64);
  v9[1] = v6;
  return CMMMtxOnly::ConvertFloat((float *)v9, a2, a4, a5, *(float *)(a1 + 160));
}

int *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvGrayToGrayMatrix>::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  long long v5 = *(_OWORD *)(a1 + 112);
  v9[2] = *(_OWORD *)(a1 + 96);
  v9[3] = v5;
  uint64_t v10 = *(void *)(a1 + 128);
  long long v6 = *(_OWORD *)(a1 + 80);
  v9[0] = *(_OWORD *)(a1 + 64);
  v9[1] = v6;
  return CMMMtxOnly::ConvertMax((int *)v9, a2, a4, a5);
}

void CMMConvMatrixTemplate<CMMMtxOnly,CMMConvRGBToGrayMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    long long v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxOnly,CMMConvRGBToGrayMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    long long v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

float *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvRGBToGrayMatrix>::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  long long v5 = *(_OWORD *)(a1 + 112);
  v9[2] = *(_OWORD *)(a1 + 96);
  v9[3] = v5;
  uint64_t v10 = *(void *)(a1 + 128);
  long long v6 = *(_OWORD *)(a1 + 80);
  v9[0] = *(_OWORD *)(a1 + 64);
  v9[1] = v6;
  return CMMMtxOnly::ConvertFloat((float *)v9, a2, a4, a5, *(float *)(a1 + 160));
}

int *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvRGBToGrayMatrix>::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  long long v5 = *(_OWORD *)(a1 + 112);
  v9[2] = *(_OWORD *)(a1 + 96);
  v9[3] = v5;
  uint64_t v10 = *(void *)(a1 + 128);
  long long v6 = *(_OWORD *)(a1 + 80);
  v9[0] = *(_OWORD *)(a1 + 64);
  v9[1] = v6;
  return CMMMtxOnly::ConvertMax((int *)v9, a2, a4, a5);
}

uint64_t CMMMatrix::CMMMatrix(uint64_t result, _DWORD *a2, float a3)
{
  uint64_t v3 = 0;
  *(void *)double result = &unk_1ED9855F0;
  *(_DWORD *)(result + 80) = a2[3] << 8;
  *(_DWORD *)(result + 84) = a2[7] << 8;
  *(_DWORD *)(result + 88) = a2[11] << 8;
  *(_DWORD *)(result + 92) = a2[15];
  *(_DWORD *)(result + 96) = a2[19];
  *(_DWORD *)(result + 100) = a2[23];
  *(float *)(result + 104) = a3;
  uint64_t v4 = result;
  do
  {
    for (uint64_t i = 0; i != 3; ++i)
    {
      uint64_t v6 = v4 + i * 4;
      *(_DWORD *)(v6 + 8) = a2[i];
      *(_DWORD *)(v6 + 44) = a2[i + 12];
    }
    ++v3;
    v4 += 12;
    a2 += 4;
  }
  while (v3 != 3);
  return result;
}

void CMMConvRGBToRGBMatrix::CMMConvRGBToRGBMatrix(CMMConvRGBToRGBMatrix *this, const CMMMatrix *a2, CMMConvNode *a3, float a4, float a5)
{
  *((_DWORD *)this + 2) = 1;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = a3;
  if (a3) {
    *((void *)a3 + 2) = this;
  }
  *((void *)this + 5) = 0x3F80000000000000;
  *(_DWORD *)((char *)this + 33) = 0;
  *(void *)this = &unk_1ED981B18;
  *((void *)this + 7) = &unk_1ED9855F0;
  long long v5 = *(_OWORD *)((char *)a2 + 8);
  long long v6 = *(_OWORD *)((char *)a2 + 40);
  *((_OWORD *)this + 5) = *(_OWORD *)((char *)a2 + 24);
  *((_OWORD *)this + 6) = v6;
  *((_OWORD *)this + 4) = v5;
  long long v7 = *(_OWORD *)((char *)a2 + 56);
  long long v8 = *(_OWORD *)((char *)a2 + 72);
  long long v9 = *(_OWORD *)((char *)a2 + 88);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 26);
  *((_OWORD *)this + 8) = v8;
  *((_OWORD *)this + 9) = v9;
  *((_OWORD *)this + 7) = v7;
  *((_WORD *)this + 24) = 0;
  *((_WORD *)this + 16) = 256;
  *(_WORD *)((char *)this + 35) = 0;
  *(void *)this = &unk_1ED984AB8;
}

void CMMConvMatrixTemplate<CMMMtxOnly,CMMConvGrayToRGBMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    long long v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxOnly,CMMConvGrayToRGBMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    long long v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

float *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvGrayToRGBMatrix>::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  long long v5 = *(_OWORD *)(a1 + 112);
  v9[2] = *(_OWORD *)(a1 + 96);
  v9[3] = v5;
  uint64_t v10 = *(void *)(a1 + 128);
  long long v6 = *(_OWORD *)(a1 + 80);
  v9[0] = *(_OWORD *)(a1 + 64);
  v9[1] = v6;
  return CMMMtxOnly::ConvertFloat((float *)v9, a2, a4, a5, *(float *)(a1 + 160));
}

int *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvGrayToRGBMatrix>::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  long long v5 = *(_OWORD *)(a1 + 112);
  v9[2] = *(_OWORD *)(a1 + 96);
  v9[3] = v5;
  uint64_t v10 = *(void *)(a1 + 128);
  long long v6 = *(_OWORD *)(a1 + 80);
  v9[0] = *(_OWORD *)(a1 + 64);
  v9[1] = v6;
  return CMMMtxOnly::ConvertMax((int *)v9, a2, a4, a5);
}

uint64_t CMMConvGrayToRGB::GetPrecision(CMMConvGrayToRGB *this)
{
  return 1;
}

uint64_t CMMConvGrayToRGB::GetCLUTPoints(CMMConvGrayToRGB *this, int a2)
{
  if (a2) {
    return 0;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void CMMConvGrayToRGB::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    long long v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvGrayToRGB::ClampInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    do
    {
      float v5 = *(float *)(a2 + 4 * v4);
      if (v5 <= 1.0) {
        float v6 = *(float *)(a2 + 4 * v4);
      }
      else {
        float v6 = 1.0;
      }
      if (v5 >= 0.0) {
        float v7 = v6;
      }
      else {
        float v7 = 0.0;
      }
      *(float *)(a2 + 4 * v4) = v7;
      v4 += a3;
    }
    while (v4 < a4 * a3);
  }
}

float CMMConvGrayToRGB::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 * a4)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = a2 + 4 * v5;
      float result = *(float *)v6;
      *(_DWORD *)(v6 + 4) = *(_DWORD *)v6;
      *(float *)(v6 + 8) = result;
      v5 += a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

void CMMConvGrayToRGB::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 * a4)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = (int *)(a2 + 4 * v5);
      int v7 = *v6;
      v6[1] = *v6;
      v6[2] = v7;
      v5 += a4;
    }
    while (v5 < a5 * a4);
  }
}

uint64_t CMMConvNode::SetNOP(uint64_t this)
{
  *(unsigned char *)(this + 32) = 1;
  return this;
}

void CMMConvMatrixTemplate<CMMMtxOnly,CMMConvRGBToRGBMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxOnly,CMMConvRGBToRGBMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

float *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvRGBToRGBMatrix>::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  long long v5 = *(_OWORD *)(a1 + 112);
  v9[2] = *(_OWORD *)(a1 + 96);
  v9[3] = v5;
  uint64_t v10 = *(void *)(a1 + 128);
  long long v6 = *(_OWORD *)(a1 + 80);
  v9[0] = *(_OWORD *)(a1 + 64);
  v9[1] = v6;
  return CMMMtxOnly::ConvertFloat((float *)v9, a2, a4, a5, *(float *)(a1 + 160));
}

int *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvRGBToRGBMatrix>::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  long long v5 = *(_OWORD *)(a1 + 112);
  v9[2] = *(_OWORD *)(a1 + 96);
  v9[3] = v5;
  uint64_t v10 = *(void *)(a1 + 128);
  long long v6 = *(_OWORD *)(a1 + 80);
  v9[0] = *(_OWORD *)(a1 + 64);
  v9[1] = v6;
  return CMMMtxOnly::ConvertMax((int *)v9, a2, a4, a5);
}

uint64_t CMMConvRGBToRGB::GetNodeAggregate(CMMConvRGBToRGB *this)
{
  return *((void *)this + 6);
}

uint64_t CMMConvRGBToRGB::GetFunctionType(CMMConvRGBToRGB *this)
{
  return 4;
}

__CFArray *CMMConvRGBToRGB::FlattenConversion(CMMConvRGBToRGB *this, const __CFDictionary *a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    for (uint64_t i = (void *)*((void *)this + 6); i; uint64_t i = (void *)i[2])
    {
      if (((*(uint64_t (**)(void *))(*i + 224))(i) & 1) == 0)
      {
        long long v6 = (const void *)(*(uint64_t (**)(void *, const __CFDictionary *))(*i + 208))(i, a2);
        if (!v6)
        {
          CFArrayRemoveAllValues(Mutable);
          return Mutable;
        }
        int v7 = v6;
        CFArrayAppendValue(Mutable, v6);
        CFRelease(v7);
      }
    }
  }
  return Mutable;
}

uint64_t CMMConvRGBToRGB::GetTransformType(CMMConvRGBToRGB *this, const __CFDictionary *a2)
{
  LODWORD(v3) = 0;
  unint64_t v4 = (uint64_t **)((char *)this + 48);
  int v5 = -7;
  do
  {
    long long v6 = *v4;
    uint64_t v7 = **v4;
    unint64_t v4 = (uint64_t **)(*v4 + 2);
    uint64_t v3 = (*(unsigned int (**)(uint64_t *, const __CFDictionary *))(v7 + 200))(v6, a2) | v3;
  }
  while (!__CFADD__(v5++, 1));
  return v3;
}

uint64_t CMMConvRGBToRGB::GetPrecision(CMMConvRGBToRGB *this)
{
  return 1;
}

uint64_t CMMConvRGBToRGB::GetNofSubNodes(CMMConvRGBToRGB *this)
{
  return 7;
}

uint64_t CMMConvRGBToRGB::GetMaxNofChannels(CMMConvRGBToRGB *this)
{
  return 3;
}

uint64_t CMMConvRGBToRGB::GetCLUTPoints(CMMConvRGBToRGB *this, int a2)
{
  if (a2) {
    return 0;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void CMMConvRGBToRGB::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    int v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvRGBToRGB::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    int v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t CMMConvRGBToRGB::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v9 = (void *)(a1 + 48);
  int v10 = -7;
  do
  {
    float v11 = (void *)*v9;
    if ((*(unsigned int (**)(void))(*(void *)*v9 + 40))(*v9)) {
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*v11 + 136))(v11, a2, a4, a5);
    }
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*v11 + 112))(v11, a2, a3, a4, a5);
    uint64_t result = (*(uint64_t (**)(void *))(*v11 + 64))(v11);
    if (result) {
      uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v11 + 160))(v11, a2, a4, a5);
    }
    long long v9 = v11 + 2;
  }
  while (!__CFADD__(v10++, 1));
  return result;
}

{
  uint64_t **v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t result;

  long long v9 = (uint64_t **)(a1 + 48);
  int v10 = -7;
  do
  {
    float v11 = *v9;
    float v12 = **v9;
    long long v9 = (uint64_t **)(*v9 + 2);
    uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 104))(v11, a2, a3, a4, a5);
  }
  while (!__CFADD__(v10++, 1));
  return result;
}

void CMMConvRGBToRGB::Convert(float32x4_t *a1, unsigned __int8 *a2, unsigned char *a3, uint64_t a4, uint64_t a5)
{
  int v5 = a5;
  long long v6 = a2;
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (*a3 && a1[115].i8[1])
  {
    if (a4 == 2)
    {
      if ((int)a5 >= 1)
      {
        uint64_t v7 = a1 + 42;
        long long v8 = a2 + 2;
        long long v9 = a2 + 1;
        uint64_t v10 = a1[8].i64[0];
        float32x4_t v61 = a1[107];
        float32x4_t v62 = a1[106];
        float32x4_t v59 = a1[109];
        float32x4_t v60 = a1[108];
        float32x4_t v57 = a1[111];
        float32x4_t v58 = a1[110];
        float32x4_t v55 = a1[113];
        float32x4_t v56 = a1[112];
        float32x4_t v54 = a1[114];
        do
        {
          float v11 = (uint16x4_t *)v63;
          bzero(v63, 0x600uLL);
          unint64_t v12 = 0;
          if (v5 >= 64) {
            unint64_t v13 = 64;
          }
          else {
            unint64_t v13 = v5;
          }
          int v14 = v8;
          float v15 = v9;
          float v16 = v6;
          do
          {
            v17.i32[0] = v7->i32[*v16];
            v18.i32[0] = v7->i32[*v15];
            v17.i32[1] = v7->i32[v16[8]];
            v18.i32[1] = v7->i32[v15[8]];
            v17.i32[2] = v7->i32[v16[16]];
            v18.i32[2] = v7->i32[v15[16]];
            v17.i32[3] = v7->i32[v16[24]];
            v18.i32[3] = v7->i32[v15[24]];
            v19.i32[0] = v7->i32[*v14];
            v19.i32[1] = v7->i32[v14[8]];
            v19.i32[2] = v7->i32[v14[16]];
            v19.i32[3] = v7->i32[v14[24]];
            uint16x4_t *v11 = vmin_u16((uint16x4_t)vraddhn_s32((int32x4_t)vcvtq_u32_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v62, v17), v61, v18), v60, v19)), (int32x4_t)0), (uint16x4_t)0x1000100010001000);
            v11[1] = vmin_u16((uint16x4_t)vraddhn_s32((int32x4_t)vcvtq_u32_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v59, v17), v58, v18), v57, v19)), (int32x4_t)0), (uint16x4_t)0x1000100010001000);
            v11[2] = vmin_u16((uint16x4_t)vraddhn_s32((int32x4_t)vcvtq_u32_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v56, v17), v55, v18), v54, v19)), (int32x4_t)0), (uint16x4_t)0x1000100010001000);
            v16 += 32;
            v15 += 32;
            v14 += 32;
            v12 += 4;
            v11 += 3;
          }
          while (v12 < v13);
          unint64_t v20 = 0;
          float v21 = (unsigned __int16 *)v63;
          do
          {
            unsigned __int8 *v6 = *(unsigned char *)(v10 + *v21);
            *long long v9 = *(unsigned char *)(v10 + v21[4]);
            *long long v8 = *(unsigned char *)(v10 + v21[8]);
            v6[8] = *(unsigned char *)(v10 + v21[1]);
            v9[8] = *(unsigned char *)(v10 + v21[5]);
            v8[8] = *(unsigned char *)(v10 + v21[9]);
            v6[16] = *(unsigned char *)(v10 + v21[2]);
            v9[16] = *(unsigned char *)(v10 + v21[6]);
            v8[16] = *(unsigned char *)(v10 + v21[10]);
            v6[24] = *(unsigned char *)(v10 + v21[3]);
            v9[24] = *(unsigned char *)(v10 + v21[7]);
            v8[24] = *(unsigned char *)(v10 + v21[11]);
            v6 += 32;
            v9 += 32;
            v8 += 32;
            v20 += 4;
            v21 += 12;
          }
          while (v20 < v13);
          v5 -= v13;
        }
        while (v5 > 0);
      }
      return;
    }
LABEL_35:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  if (a4 != 2) {
    goto LABEL_35;
  }
  unint64_t v22 = 2 * a5;
  if (2 * a5)
  {
    unint64_t v23 = 0;
    float v24 = (_DWORD *)a1[4].i64[1];
    int v25 = v24[16];
    int v26 = v24[17];
    int v27 = v24[18];
    int v28 = v24[19];
    int v29 = v24[20];
    int v30 = v24[21];
    int v31 = v24[22];
    int v32 = v24[23];
    int v33 = v24[24];
    uint64_t v34 = a1[6].i64[1];
    uint64_t v35 = a1[7].i64[0];
    uint64_t v36 = a1[7].i64[1];
    uint64_t v37 = a1[8].i64[0];
    uint64_t v39 = a1[8].i64[1];
    uint64_t v38 = a1[9].i64[0];
    do
    {
      int v40 = *(_DWORD *)&v6[4 * v23];
      int v41 = *(_DWORD *)(v34 + 4 * v40);
      int v42 = *(_DWORD *)(v35 + 4 * BYTE1(v40));
      int v43 = *(_DWORD *)(v36 + 4 * BYTE2(v40));
      int v44 = v25 * v41 + v26 * v42 + v27 * v43;
      int v45 = v28 * v41 + v29 * v42 + v30 * v43;
      int v46 = v31 * v41 + v32 * v42 + v33 * v43;
      unsigned int v47 = (v46 + 0x8000) >> 16;
      if (((v44 + 0x8000) >> 16) >= 0x1000) {
        unsigned int v48 = 4096;
      }
      else {
        unsigned int v48 = (v44 + 0x8000) >> 16;
      }
      if (v44 < -32768) {
        unsigned int v48 = 0;
      }
      int v49 = *(unsigned __int8 *)(v37 + v48);
      if (((v45 + 0x8000) >> 16) >= 0x1000) {
        unsigned int v50 = 4096;
      }
      else {
        unsigned int v50 = (v45 + 0x8000) >> 16;
      }
      if (v45 < -32768) {
        unsigned int v50 = 0;
      }
      int v51 = *(unsigned __int8 *)(v39 + v50);
      if (v47 >= 0x1000) {
        unsigned int v47 = 4096;
      }
      if (v46 >= -32768) {
        unsigned int v52 = v47;
      }
      else {
        unsigned int v52 = 0;
      }
      *(_DWORD *)&v6[4 * v23] = v49 | (v51 << 8) | (*(unsigned __int8 *)(v38 + v52) << 16);
      v23 += 2;
    }
    while (v23 < v22);
  }
}

uint64_t CMMConvRGBToRGB::RuntimeAdjust(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 408))
  {
    int v2 = *(unsigned __int8 *)(result + 1841);
    *(unsigned char *)(a2 + 408) = v2;
    if (v2 && !*(unsigned char *)(result + 1840))
    {
      uint64_t v3 = 0;
      uint64_t v4 = *(void *)(result + 104);
      do
      {
        *(float32x4_t *)(result + 672 + v3) = vcvtq_f32_s32(*(int32x4_t *)(v4 + v3));
        v3 += 16;
      }
      while (v3 != 1024);
      *(unsigned char *)(result + 1840) = 1;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 408) = 0;
  }
  return result;
}

uint64_t CMMConvRGBToRGB::IsNOP(CMMConvRGBToRGB *this)
{
  return 0;
}

uint64_t CMMConvRGBToRGB::Collapse(CMMConvRGBToRGB *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  return 0;
}

void CMMConvRGBToRGB::~CMMConvRGBToRGB(CMMConvRGBToRGB *this)
{
  CMMConvRGBToRGB::~CMMConvRGBToRGB(this);

  CMMBase::operator delete(v1);
}

{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  int v2 = 0;
  *(void *)this = &unk_1ED982910;
  do
  {
    uint64_t v3 = (char *)this + v2;
    uint64_t v4 = *(void *)((char *)this + v2 + 48);
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *((void *)v3 + 6) = 0;
    }
    int v5 = *((void *)v3 + 10);
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      *((void *)v3 + 10) = 0;
    }
    v2 += 8;
  }
  while (v2 != 24);
}

uint64_t CMMConvHLGOOTF::GetFunctionType(CMMConvHLGOOTF *this)
{
  return 3;
}

__CFDictionary *CMMConvHLGOOTF::FlattenConversion(CMMConvHLGOOTF *this, const __CFDictionary *a2)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return Mutable;
  }
  int valuePtr = 3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (v5)
  {
    CFNumberRef v6 = v5;
    CFDictionaryAddValue(Mutable, kColorSyncConversionInpChan, v5);
    CFDictionaryAddValue(Mutable, kColorSyncConversionOutChan, v6);
    CFRelease(v6);
  }
  if (a2)
  {
    CFTypeID v7 = CFGetTypeID(a2);
    if (v7 == CFDictionaryGetTypeID()
      && CFDictionaryGetValue(a2, @"com.apple.cmm.HLGOOTF3DLut") == (const void *)*MEMORY[0x1E4F1CFD0])
    {
      HIDWORD(v61) = 0;
      CFTypeID v12 = CFGetTypeID(a2);
      if (v12 == CFDictionaryGetTypeID())
      {
        CFNumberRef Value = CFDictionaryGetValue(a2, (const void *)kColorSyncNxMFormat);
        HIDWORD(v61) = NxMTransformFormatFromValue(Value);
      }
      CFNumberRef v14 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&v61 + 4);
      if (v14)
      {
        CFNumberRef v15 = v14;
        CFDictionaryAddValue(Mutable, (const void *)kColorSyncNxMFormat, v14);
        CFRelease(v15);
      }
      int v16 = HIDWORD(v61);
      LODWORD(v61) = 0;
      CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(a2, @"com.apple.cmm.HLGOOTF3DLutGridPoints");
      *(_DWORD *)ColorSyncMD5 bytes = 0;
      if (v17 && CFNumberGetValue(v17, kCFNumberSInt32Type, bytes) == 1)
      {
        int v22 = *(_DWORD *)bytes;
        LODWORD(v61) = *(_DWORD *)bytes;
      }
      else
      {
        int v22 = v61;
      }
      if (!v22)
      {
        CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(a2, kColorSyncConversionGridPoints);
        if (v23) {
          CFNumberGetValue(v23, kCFNumberSInt32Type, &v61);
        }
      }
      unsigned int v24 = v61;
      if (!v61)
      {
        unsigned int v24 = 32;
        LODWORD(v61) = 32;
      }
      unint64_t v25 = calculate_clut_capacity(v24, 3, 3, 4, v18, v19, v20, v21);
      int v26 = CFDataCreateMutable(0, v25);
      if (v26)
      {
        int v27 = v26;
        int v55 = v16;
        float32x4_t v56 = Mutable;
        CFDataSetLength(v26, v25);
        unsigned int cf = v27;
        Mutablevm_address_t BytePtr = CFDataGetMutableBytePtr(v27);
        if (v25 >> 62) {
          size_t v28 = -1;
        }
        else {
          size_t v28 = 4 * v25;
        }
        float32x4_t v57 = (float *)operator new[](v28, MEMORY[0x1E4FBA2D0]);
        if (NxMLUTFillWithFloatUniformGridData(v57, v61, (v61 * v61 * v61)))
        {
          uint64_t v31 = v61;
          if (v61)
          {
            uint64_t v32 = 0;
            int v33 = MutableBytePtr + 8;
            uint64_t v34 = 12 * v61;
            uint64_t v58 = v34 * v61;
            uint64_t v35 = v57 + 2;
            do
            {
              float32x4_t v59 = v33;
              uint64_t v60 = v32;
              uint64_t v36 = 0;
              uint64_t v37 = v35;
              do
              {
                uint64_t v38 = v37;
                uint64_t v39 = (float *)v33;
                uint64_t v40 = v31;
                do
                {
                  float v41 = *(v38 - 2);
                  float v42 = *(v38 - 1);
                  float v43 = *v38;
                  v38 += 3;
                  *(v39 - 2) = CMMConvHLGOOTF::Reference_HLG_OOTF(this, v41, v42, v43);
                  *((_DWORD *)v39 - 1) = v44;
                  *(_DWORD *)uint64_t v39 = v45;
                  v39 += 3;
                  --v40;
                }
                while (v40);
                ++v36;
                v33 += v34;
                uint64_t v37 = (float *)((char *)v37 + v34);
              }
              while (v36 != v31);
              uint64_t v32 = v60 + 1;
              int v33 = &v59[v58];
              uint64_t v35 = (float *)((char *)v35 + v58);
            }
            while (v60 + 1 != v31);
          }
        }
        if (v55 == 2)
        {
          CFDataRef v11 = cf;
        }
        else
        {
          CFDataRef v11 = NxMLUTCreateData(v55, MutableBytePtr, 1, v61, 3, 3, v29, v30);
          CFRelease(cf);
        }
        CFMutableArrayRef Mutable = v56;
        if (v57) {
          MEMORY[0x18C13A500](v57, 0x1000C8052888210);
        }
        CFNumberRef v46 = CFNumberCreate(0, kCFNumberSInt32Type, &v61);
        if (v11)
        {
          CFNumberRef v47 = v46;
          if (v46)
          {
            CFDictionaryAddValue(v56, kColorSyncConversionGridPoints, v46);
            CFRelease(v47);
          }
          goto LABEL_10;
        }
      }
      else
      {
        CFNumberCreate(0, kCFNumberSInt32Type, &v61);
      }
LABEL_45:
      CFDataRef v11 = Mutable;
      CFMutableArrayRef Mutable = 0;
      goto LABEL_46;
    }
  }
  HIDWORD(v61) = 7;
  CFNumberRef v8 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&v61 + 4);
  if (v8)
  {
    CFNumberRef v9 = v8;
    CFDictionaryAddValue(Mutable, (const void *)kColorSyncNxMFormat, v8);
    CFRelease(v9);
  }
  *(void *)&long long v10 = *((void *)this + 6);
  *((void *)&v10 + 1) = *(void *)((char *)this + 60);
  *(_OWORD *)ColorSyncMD5 bytes = v10;
  uint64_t v64 = *(void *)((char *)this + 68);
  int v65 = 0;
  CFDataRef v11 = CFDataCreate(0, bytes, 28);
  if (!v11) {
    goto LABEL_45;
  }
LABEL_10:
  CFDictionaryAddValue(Mutable, kColorSyncConversion3DLut, v11);
  CFDictionaryAddValue(Mutable, kColorSyncConversionNDLut, v11);
LABEL_46:
  CFRelease(v11);
  if (*((unsigned char *)this + 34)) {
    CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  CMMConvNode::AddClampingInfo(this, Mutable);
  float v48 = *((float *)this + 14);
  unint64_t v61 = LODWORD(v48);
  if (v48 != 1.0)
  {
    CFNumberRef v49 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)&v61 + 4);
    CFNumberRef v50 = CFNumberCreate(0, kCFNumberFloat32Type, &v61);
    *(void *)ColorSyncMD5 bytes = v49;
    *(void *)&UInt8 bytes[8] = v50;
    CFArrayRef v51 = CFArrayCreate(0, (const void **)bytes, 2, MEMORY[0x1E4F1D510]);
    CFRelease(v49);
    CFRelease(v50);
    if (v51)
    {
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionOutputRange", v51);
      CFRelease(v51);
    }
  }
  return Mutable;
}

uint64_t NxMTransformFormatFromValue(const void *a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 != CFStringGetTypeID()) {
    return 0;
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncTextureFormatNxMtoRGBX8)) {
    return 3;
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncTextureFormatNxMtoRGBX16)) {
    return 4;
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncTextureFormatNxMtoRGBXFloat16)) {
    return 5;
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncTextureFormatNxMtoRGBXFloat32)) {
    return 6;
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncNxMLUTFormatFixed16)) {
    return 0;
  }
  if (CFEqual(a1, (CFTypeRef)kColorSyncNxMLUTFormatFloat16)) {
    return 1;
  }
  if (!CFEqual(a1, (CFTypeRef)kColorSyncNxMLUTFormatFloat32)) {
    return 0;
  }
  return 2;
}

unint64_t calculate_clut_capacity(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    uint64_t v10 = a2;
    unint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      v12 *= a1;
      BOOL v15 = v12 >= v13 && v12 >= a1;
      CMMThrowExceptionWithLog(v15, "Overflow in Power", a3, a4, a5, a6, a7, a8);
      --v10;
    }
    while (v10);
    if (!v12)
    {
      unint64_t v16 = 0;
      uint64_t v17 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    unint64_t v12 = 1;
  }
  uint64_t v18 = (v12 * (unsigned __int128)(unint64_t)(a4 * a3)) >> 64;
  unint64_t v16 = a4 * a3 * v12;
  if (v18) {
    uint64_t v17 = 4294967246;
  }
  else {
    uint64_t v17 = 0;
  }
LABEL_16:
  CMMThrowExceptionOnError(v17);
  return v16;
}

uint64_t NxMLUTFillWithFloatUniformGridData(float *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  if (a1 && a2 <= 0x100)
  {
    unint64_t v6 = 3 * a3;
    uint64_t v7 = 12 * a3;
    CFNumberRef v8 = (unsigned __int16 *)operator new[](12 * a3, MEMORY[0x1E4FBA2D0]);
    uint64_t v3 = NxMLUTFillWith16BitUniformGridData(v8, a2, 3uLL, v6);
    if (v3)
    {
      v13[0] = v8;
      v13[1] = 1;
      v13[2] = v6;
      v13[3] = 2 * v6;
      v12[0] = a1;
      v12[1] = 1;
      v12[2] = v6;
      v12[3] = v7;
      ColorSync_vImageConvert_16UToF((uint64_t)v13, (uint64_t)v12, v9, v10);
    }
    if (v8) {
      MEMORY[0x18C13A500](v8, 0x1000C80BDFB0063);
    }
  }
  return v3;
}

float CMMConvHLGOOTF::Reference_HLG_OOTF(CMMConvHLGOOTF *this, float a2, float a3, float a4)
{
  float v5 = (float)((float)(*((float *)this + 16) * a3) + (float)(a2 * *((float *)this + 15)))
     + (float)(a4 * *((float *)this + 17));
  if (a3 <= a4) {
    a3 = a4;
  }
  if (a3 < a2) {
    a3 = a2;
  }
  float v6 = v5 + (float)(a3 * *((float *)this + 18));
  float v7 = fmaxf(fabsf(v6), 1.1755e-38);
  if (v6 >= 0.0) {
    float v8 = *((float *)this + 13);
  }
  else {
    float v8 = -*((float *)this + 13);
  }
  return (float)(v8 * powf(v7, *((float *)this + 12))) * a2;
}

CFDataRef NxMLUTCreateData(int a1, UInt8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10 = a4;
  int v11 = a3;
  if (a5)
  {
    unint64_t v14 = 1;
    uint64_t v15 = a5;
    do
    {
      unint64_t v16 = v14 * v10;
      BOOL v18 = v14 * v10 >= v14 && v16 >= v10;
      CMMThrowExceptionWithLog(v18, "Overflow in Power", a3, a4, a5, a6, a7, a8);
      unint64_t v14 = v16;
      --v15;
    }
    while (v15);
  }
  else
  {
    unint64_t v16 = 1;
  }
  unint64_t v19 = v16 * a6;
  switch(a1)
  {
    case 0:
      CFIndex v20 = 2 * v19;
      if (!v11) {
        goto LABEL_29;
      }
      CFMutableArrayRef Mutable = CFDataCreateMutable(0, 2 * v19);
      int v22 = Mutable;
      if (Mutable)
      {
        CFDataSetLength(Mutable, 2 * v19);
        int v217 = a2;
        uint64_t v218 = 1;
        uint64_t v219 = v19;
        uint64_t v220 = 4 * v19;
        Mutablevm_address_t BytePtr = CFDataGetMutableBytePtr(v22);
        uint64_t v214 = 1;
        uint64_t v215 = v19;
        uint64_t v216 = 2 * v19;
        CFNumberRef v23 = (uint64_t (*)())ColorSync_vImageConvert_Fto16U_ptr__;
        if (!ColorSync_vImageConvert_Fto16U_ptr__)
        {
          if (ColorSyncLoadvImageDYLD_once != -1) {
            dispatch_once(&ColorSyncLoadvImageDYLD_once, &__block_literal_global_1554);
          }
          unsigned int v24 = (uint64_t (*)())ColorSyncLoadvImageDYLD_handle;
          if (ColorSyncLoadvImageDYLD_handle) {
            unsigned int v24 = (uint64_t (*)())dlsym((void *)ColorSyncLoadvImageDYLD_handle, "vImageConvert_FTo16U");
          }
          if (v24) {
            CFNumberRef v23 = v24;
          }
          else {
            CFNumberRef v23 = vImage_smart_null;
          }
          ColorSync_vImageConvert_Fto16U_ptr__ = v23;
        }
        ((void (*)(void **, UInt8 **, void, double, float))v23)(&v217, &MutableBytePtr, 0, 0.0, 0.000015259);
      }
      return v22;
    case 1:
      unint64_t v25 = CFDataCreateMutable(0, 2 * v19);
      int v22 = v25;
      if (v11)
      {
        if (v25)
        {
          CFDataSetLength(v25, 2 * v19);
          int v217 = a2;
          uint64_t v218 = 1;
          uint64_t v219 = v19;
          uint64_t v220 = 4 * v19;
          Mutablevm_address_t BytePtr = CFDataGetMutableBytePtr(v22);
          uint64_t v214 = 1;
          uint64_t v215 = v19;
          uint64_t v216 = 2 * v19;
          ColorSync_vImageConvert_Fto16F((uint64_t)&v217, (uint64_t)&MutableBytePtr);
        }
        return v22;
      }
      if (!v25) {
        return v22;
      }
      CFDataSetLength(v25, 2 * v19);
      int v217 = a2;
      uint64_t v218 = 1;
      uint64_t v219 = v19;
      uint64_t v220 = 2 * v19;
      Mutablevm_address_t BytePtr = CFDataGetMutableBytePtr(v22);
      uint64_t v214 = 1;
      uint64_t v215 = v19;
      uint64_t v216 = 2 * v19;
      p_Mutablevm_address_t BytePtr = &MutableBytePtr;
      goto LABEL_217;
    case 2:
      CFIndex v20 = 4 * v19;
      if (v11)
      {
LABEL_29:
        return CFDataCreate(0, a2, v20);
      }
      float32x4_t v56 = CFDataCreateMutable(0, 4 * v19);
      int v22 = v56;
      if (v56)
      {
        CFDataSetLength(v56, 4 * v19);
        int v217 = a2;
        uint64_t v218 = 1;
        uint64_t v219 = v19;
        uint64_t v220 = 2 * v19;
        Mutablevm_address_t BytePtr = CFDataGetMutableBytePtr(v22);
        uint64_t v214 = 1;
        uint64_t v215 = v19;
        uint64_t v216 = 4 * v19;
        ColorSync_vImageConvert_16UToF((uint64_t)&v217, (uint64_t)&MutableBytePtr, v57, v58);
      }
      return v22;
    case 3:
      if (v11) {
        __assert_rtn("NxMLUTCreateData", "CMMNxMUtils.cpp", 819, "dataIsFloat == false");
      }
      switch(a5)
      {
        case 4:
          if (a6 != 3) {
            __assert_rtn("nxm_copy_CMYK_to_RGBX8_data", "CMMNxMUtils.cpp", 164, "inpChannels == 4 && outChannels == 3");
          }
          unint64_t v77 = v10 * v10;
          uint64_t v78 = CFDataCreateMutable(0, 4 * v77 * v77);
          int v22 = v78;
          if (v78)
          {
            CFDataSetLength(v78, 4 * v77 * v77);
            uint64_t v79 = CFDataGetMutableBytePtr(v22);
            if (v10)
            {
              if (v79)
              {
                uint64_t v80 = 0;
                uint64_t v81 = v79 + 3;
                uint64_t v82 = a2 + 4;
                do
                {
                  uint64_t v83 = 0;
                  float v84 = v82;
                  BOOL v85 = v81;
                  do
                  {
                    uint64_t v86 = 0;
                    float v87 = (unsigned __int16 *)v84;
                    BOOL v88 = v85;
                    do
                    {
                      float v89 = v87;
                      float v90 = v88;
                      unint64_t v91 = v10;
                      do
                      {
                        unsigned int v92 = (*(v89 - 2) + 128) >> 8;
                        if (v92 >= 0xFF) {
                          LOBYTE(v92) = -1;
                        }
                        *(v90 - 3) = v92;
                        unsigned int v93 = (*(v89 - 1) + 128) >> 8;
                        if (v93 >= 0xFF) {
                          LOBYTE(v93) = -1;
                        }
                        *(v90 - 2) = v93;
                        unsigned int v94 = (*v89 + 128) >> 8;
                        if (v94 >= 0xFF) {
                          LOBYTE(v94) = -1;
                        }
                        *(v90 - 1) = v94;
                        *float v90 = -1;
                        v90 += 4;
                        v89 += 3 * v10 * v77;
                        --v91;
                      }
                      while (v91);
                      ++v86;
                      v88 += 4 * v10;
                      v87 += 3 * v77;
                    }
                    while (v86 != v10);
                    ++v83;
                    v85 += 4 * v77;
                    v84 += 6 * v10;
                  }
                  while (v83 != v10);
                  ++v80;
                  v81 += 4 * v10 * v77;
                  v82 += 6;
                }
                while (v80 != v10);
              }
            }
          }
          break;
        case 3:
          if (a6 != 3) {
            __assert_rtn("nxm_copy_RGB_to_RGBX8_data", "CMMNxMUtils.cpp", 134, "inpChannels == 3 && outChannels == 3");
          }
          unint64_t v95 = v10 * v10;
          float v96 = CFDataCreateMutable(0, 4 * v10 * v10 * v10);
          int v22 = v96;
          if (v96)
          {
            CFDataSetLength(v96, 4 * v10 * v10 * v10);
            int v97 = CFDataGetMutableBytePtr(v22);
            if (v10)
            {
              if (v97)
              {
                uint64_t v98 = 0;
                uint64_t v99 = v97 + 3;
                uint64_t v100 = a2 + 4;
                do
                {
                  uint64_t v101 = 0;
                  uint64_t v102 = v100;
                  uint64_t v103 = v99;
                  do
                  {
                    float v104 = v102;
                    BOOL v105 = v103;
                    unint64_t v106 = v10;
                    do
                    {
                      unsigned int v107 = (*((unsigned __int16 *)v104 - 2) + 128) >> 8;
                      if (v107 >= 0xFF) {
                        LOBYTE(v107) = -1;
                      }
                      *(v105 - 3) = v107;
                      unsigned int v108 = (*((unsigned __int16 *)v104 - 1) + 128) >> 8;
                      if (v108 >= 0xFF) {
                        LOBYTE(v108) = -1;
                      }
                      *(v105 - 2) = v108;
                      unsigned int v109 = (*(unsigned __int16 *)v104 + 128) >> 8;
                      if (v109 >= 0xFF) {
                        LOBYTE(v109) = -1;
                      }
                      *(v105 - 1) = v109;
                      *BOOL v105 = -1;
                      v105 += 4;
                      v104 += 6 * v95;
                      --v106;
                    }
                    while (v106);
                    ++v101;
                    v103 += 4 * v10;
                    v102 += 6 * v10;
                  }
                  while (v101 != v10);
                  ++v98;
                  v99 += 4 * v95;
                  v100 += 6;
                }
                while (v98 != v10);
              }
            }
          }
          break;
        case 1:
          if (a6 != 3) {
            __assert_rtn("nxm_copy_GRAY_to_RGBX8_data", "CMMNxMUtils.cpp", 109, "inpChannels == 1 && outChannels == 3");
          }
          int v27 = CFDataCreateMutable(0, 4 * v10);
          int v22 = v27;
          if (v27)
          {
            CFDataSetLength(v27, 4 * v10);
            size_t v28 = CFDataGetMutableBytePtr(v22);
            if (v10)
            {
              if (v28)
              {
                uint64_t v29 = v28 + 3;
                uint64_t v30 = (unsigned __int16 *)(a2 + 4);
                do
                {
                  unsigned int v31 = (*(v30 - 2) + 128) >> 8;
                  if (v31 >= 0xFF) {
                    LOBYTE(v31) = -1;
                  }
                  *(v29 - 3) = v31;
                  unsigned int v32 = (*(v30 - 1) + 128) >> 8;
                  if (v32 >= 0xFF) {
                    LOBYTE(v32) = -1;
                  }
                  *(v29 - 2) = v32;
                  int v33 = *v30;
                  v30 += 3;
                  unsigned int v34 = (v33 + 128) >> 8;
                  if (v34 >= 0xFF) {
                    LOBYTE(v34) = -1;
                  }
                  *(v29 - 1) = v34;
                  unsigned char *v29 = -1;
                  v29 += 4;
                  --v10;
                }
                while (v10);
              }
            }
          }
          break;
        default:
          __assert_rtn("nxm_create_NxM_to_RGBX8_from_fixed16", "CMMNxMUtils.cpp", 204, "0");
      }
      return v22;
    case 4:
      if (v11) {
        __assert_rtn("NxMLUTCreateData", "CMMNxMUtils.cpp", 823, "dataIsFloat == false");
      }
      switch(a5)
      {
        case 4:
          if (a6 != 3) {
            __assert_rtn("nxm_copy_CMYK_to_RGBX16_data", "CMMNxMUtils.cpp", 352, "inpChannels == 4 && outChannels == 3");
          }
          float v110 = CFDataCreateMutable(0, 8 * v10 * v10 * v10 * v10);
          int v22 = v110;
          if (v110)
          {
            CFDataSetLength(v110, 8 * v10 * v10 * v10 * v10);
            unint64_t v111 = CFDataGetMutableBytePtr(v22);
            repackage_CMYK16_to_RGBX16((uint64_t)v111, (unsigned __int16 *)a2, v10);
          }
          break;
        case 3:
          if (a6 != 3) {
            __assert_rtn("nxm_copy_RGB_to_RGBX16_data", "CMMNxMUtils.cpp", 294, "inpChannels == 3 && outChannels == 3");
          }
          float v112 = CFDataCreateMutable(0, 8 * v10 * v10 * v10);
          int v22 = v112;
          if (v112)
          {
            CFDataSetLength(v112, 8 * v10 * v10 * v10);
            float v113 = (unsigned __int16 *)CFDataGetMutableBytePtr(v22);
            repackage_RGB16_to_RGBX16(v113, (unsigned __int16 *)a2, v10);
          }
          break;
        case 1:
          if (a6 != 3) {
            __assert_rtn("nxm_copy_GRAY_to_RGBX16_data", "CMMNxMUtils.cpp", 240, "inpChannels == 1 && outChannels == 3");
          }
          uint64_t v35 = CFDataCreateMutable(0, 8 * v10);
          int v22 = v35;
          if (v35)
          {
            CFDataSetLength(v35, 8 * v10);
            uint64_t v36 = CFDataGetMutableBytePtr(v22);
            if (v10)
            {
              if (v36)
              {
                uint64_t v37 = v36 + 4;
                uint64_t v38 = (__int16 *)(a2 + 4);
                do
                {
                  *(v37 - 2) = *(v38 - 2);
                  *(v37 - 1) = *(v38 - 1);
                  __int16 v39 = *v38;
                  v38 += 3;
                  *uint64_t v37 = v39;
                  v37[1] = -1;
                  v37 += 4;
                  --v10;
                }
                while (v10);
              }
            }
          }
          break;
        default:
          __assert_rtn("nxm_create_NxM_to_RGBX16_from_fixed16", "CMMNxMUtils.cpp", 376, "0");
      }
      return v22;
    case 5:
      if (!v11)
      {
        switch(a5)
        {
          case 4:
            if (a6 != 3) {
              __assert_rtn("nxm_copy_CMYK_fixed16_to_RGBX_float16", "CMMNxMUtils.cpp", 430, "inpChannels == 4 && outChannels == 3");
            }
            unint64_t v172 = v10 * v10 * v10 * v10;
            CFIndex v59 = 8 * v172;
            float v173 = CFDataCreateMutable(0, 8 * v172);
            int v22 = v173;
            if (!v173) {
              return v22;
            }
            uint64_t v174 = 4 * v172;
            CFDataSetLength(v173, v59);
            float v175 = (unsigned __int16 *)CFDataGetMutableBytePtr(v22);
            repackage_CMYK16_to_RGBX16((uint64_t)v175, (unsigned __int16 *)a2, v10);
            break;
          case 3:
            if (a6 != 3) {
              __assert_rtn("nxm_copy_RGB_fixed16_to_RGBX_float16", "CMMNxMUtils.cpp", 407, "inpChannels == 3 && outChannels == 3");
            }
            unint64_t v176 = v10 * v10 * v10;
            CFIndex v59 = 8 * v176;
            float v177 = CFDataCreateMutable(0, 8 * v176);
            int v22 = v177;
            if (!v177) {
              return v22;
            }
            uint64_t v174 = 4 * v176;
            CFDataSetLength(v177, 8 * v176);
            float v175 = (unsigned __int16 *)CFDataGetMutableBytePtr(v22);
            repackage_RGB16_to_RGBX16(v175, (unsigned __int16 *)a2, v10);
            break;
          case 1:
            if (a6 != 3) {
              __assert_rtn("nxm_copy_GRAY_fixed16_to_RGBX_float16", "CMMNxMUtils.cpp", 384, "inpChannels == 1 && outChannels == 3");
            }
            CFIndex v59 = 8 * v10;
            uint64_t v60 = CFDataCreateMutable(0, 8 * v10);
            int v22 = v60;
            if (!v60) {
              return v22;
            }
            uint64_t v61 = 4 * v10;
            CFDataSetLength(v60, 8 * v10);
            float32x4_t v62 = CFDataGetMutableBytePtr(v22);
            if (v10 && v62)
            {
              uint64_t v63 = v62 + 4;
              uint64_t v64 = (__int16 *)(a2 + 4);
              do
              {
                *(v63 - 2) = *(v64 - 2);
                *(v63 - 1) = *(v64 - 1);
                __int16 v65 = *v64;
                v64 += 3;
                *uint64_t v63 = v65;
                v63[1] = -1;
                v63 += 4;
                --v10;
              }
              while (v10);
            }
            int v217 = v62;
            uint64_t v218 = 1;
            uint64_t v219 = v61;
            goto LABEL_216;
          default:
            __assert_rtn("nxm_create_NxM_to_RGBX_float16_from_fixed16", "CMMNxMUtils.cpp", 460, "0");
        }
        int v217 = v175;
        uint64_t v218 = 1;
        uint64_t v219 = v174;
LABEL_216:
        uint64_t v220 = v59;
        p_Mutablevm_address_t BytePtr = (UInt8 **)&v217;
LABEL_217:
        ColorSync_vImageConvert_16Uto16F((uint64_t)&v217, (uint64_t)p_MutableBytePtr);
        return v22;
      }
      switch(a5)
      {
        case 4:
          if (a6 != 3) {
            __assert_rtn("nxm_copy_CMYK_float_to_RGBX_float16", "CMMNxMUtils.cpp", 523, "inpChannels == 4 && outChannels == 3");
          }
          unint64_t v114 = v10 * v10;
          unint64_t v115 = v114 * v114;
          CFIndex v40 = 8 * v114 * v114;
          float v116 = CFDataCreateMutable(0, v40);
          int v22 = v116;
          if (v116)
          {
            uint64_t v42 = 4 * v115;
            CFDataSetLength(v116, 8 * v114 * v114);
            uint64_t v43 = 16 * v115;
            if (((v115 >> 58) & 3) != 0) {
              size_t v117 = -1;
            }
            else {
              size_t v117 = v115 << 6;
            }
            float v118 = (char *)operator new[](v117, MEMORY[0x1E4FBA2D0]);
            CFNumberRef v46 = v118;
            if (v10 && v118)
            {
              uint64_t v119 = 0;
              uint64_t v120 = a2 + 4;
              uint64_t v121 = v118;
              do
              {
                uint64_t v122 = 0;
                uint64_t v123 = v121;
                uint64_t v124 = v120;
                do
                {
                  uint64_t v125 = 0;
                  float v126 = v123;
                  BOOL v127 = v124;
                  do
                  {
                    BOOL v128 = v126;
                    float v129 = v127;
                    unint64_t v130 = v10;
                    do
                    {
                      *(_DWORD *)BOOL v128 = *((_DWORD *)v129 - 1);
                      *(void *)(v128 + 4) = *(void *)v129;
                      *((_DWORD *)v128 + 3) = 1065353216;
                      v129 += 12 * v10 * v114;
                      v128 += 16;
                      --v130;
                    }
                    while (v130);
                    ++v125;
                    v127 += 12 * v114;
                    v126 += 16 * v10;
                  }
                  while (v125 != v10);
                  ++v122;
                  v124 += 12 * v10;
                  v123 += 16 * v114;
                }
                while (v122 != v10);
                ++v119;
                v120 += 12;
                v121 += 16 * v10 * v114;
              }
              while (v119 != v10);
            }
            goto LABEL_182;
          }
          break;
        case 3:
          if (a6 != 3) {
            return 0;
          }
          unint64_t v131 = v10 * v10;
          unint64_t v132 = v10 * v10 * v10;
          CFIndex v40 = 8 * v132;
          unint64_t v133 = CFDataCreateMutable(0, 8 * v132);
          int v22 = v133;
          if (!v133) {
            return v22;
          }
          uint64_t v42 = 4 * v132;
          CFDataSetLength(v133, 8 * v132);
          uint64_t v43 = 16 * v132;
          if (((v132 >> 58) & 3) != 0) {
            size_t v134 = -1;
          }
          else {
            size_t v134 = v132 << 6;
          }
          float v135 = (char *)operator new[](v134, MEMORY[0x1E4FBA2D0]);
          CFNumberRef v46 = v135;
          if (v10 && v135)
          {
            uint64_t v136 = 0;
            float v137 = a2 + 4;
            float v138 = v135;
            do
            {
              uint64_t v139 = 0;
              float v140 = v138;
              float v141 = v137;
              do
              {
                float v142 = v140;
                float v143 = v141;
                unint64_t v144 = v10;
                do
                {
                  *(_DWORD *)float v142 = *((_DWORD *)v143 - 1);
                  *(void *)(v142 + 4) = *(void *)v143;
                  *((_DWORD *)v142 + 3) = 1065353216;
                  v143 += 12 * v131;
                  v142 += 16;
                  --v144;
                }
                while (v144);
                ++v139;
                v141 += 12 * v10;
                v140 += 16 * v10;
              }
              while (v139 != v10);
              ++v136;
              v137 += 12;
              v138 += 16 * v131;
            }
            while (v136 != v10);
          }
          goto LABEL_182;
        case 1:
          if (a6 != 3) {
            __assert_rtn("nxm_copy_GRAY_float_to_RGBX_float16", "CMMNxMUtils.cpp", 468, "inpChannels == 1 && outChannels == 3");
          }
          CFIndex v40 = 8 * v10;
          float v41 = CFDataCreateMutable(0, 8 * v10);
          int v22 = v41;
          if (v41)
          {
            uint64_t v42 = 4 * v10;
            CFDataSetLength(v41, 8 * v10);
            uint64_t v43 = 16 * v10;
            if (((v10 >> 58) & 3) != 0) {
              size_t v44 = -1;
            }
            else {
              size_t v44 = v10 << 6;
            }
            int v45 = (char *)operator new[](v44, MEMORY[0x1E4FBA2D0]);
            CFNumberRef v46 = v45;
            if (v10 && v45)
            {
              CFNumberRef v47 = a2 + 4;
              float v48 = v45;
              do
              {
                *(_DWORD *)float v48 = *((_DWORD *)v47 - 1);
                uint64_t v49 = *v47;
                CFNumberRef v47 = (void *)((char *)v47 + 12);
                *(void *)(v48 + 4) = v49;
                *((_DWORD *)v48 + 3) = 1065353216;
                v48 += 16;
                --v10;
              }
              while (v10);
            }
LABEL_182:
            int v217 = v46;
            uint64_t v218 = 1;
            uint64_t v219 = v42;
            uint64_t v220 = v43;
            Mutablevm_address_t BytePtr = CFDataGetMutableBytePtr(v22);
            uint64_t v214 = 1;
            uint64_t v215 = v42;
            uint64_t v216 = v40;
            ColorSync_vImageConvert_Fto16F((uint64_t)&v217, (uint64_t)&MutableBytePtr);
            if (v46) {
              MEMORY[0x18C13A500](v46, 0x1000C8052888210);
            }
          }
          break;
        default:
          __assert_rtn("nxm_create_NxM_to_RGBX_float16_from_float", "CMMNxMUtils.cpp", 561, "0");
      }
      return v22;
    case 6:
      if (v11)
      {
        switch(a5)
        {
          case 4:
            if (a6 != 3) {
              __assert_rtn("nxm_copy_CMYK_float_to_RGBX_float32", "CMMNxMUtils.cpp", 727, "inpChannels == 4 && outChannels == 3");
            }
            unint64_t v145 = v10 * v10;
            float v146 = CFDataCreateMutable(0, 16 * v145 * v145);
            int v22 = v146;
            if (v146)
            {
              CFDataSetLength(v146, 16 * v145 * v145);
              float v147 = CFDataGetMutableBytePtr(v22);
              if (v10)
              {
                if (v147)
                {
                  uint64_t v148 = 0;
                  float v149 = v147 + 8;
                  float v150 = a2 + 8;
                  do
                  {
                    uint64_t v151 = 0;
                    float v152 = v150;
                    float v153 = v149;
                    do
                    {
                      uint64_t v154 = 0;
                      unint64_t v155 = v152;
                      float v156 = v153;
                      do
                      {
                        float v157 = v155;
                        float v158 = v156;
                        unint64_t v159 = v10;
                        do
                        {
                          *((_DWORD *)v158 - 2) = *((_DWORD *)v157 - 2);
                          *((_DWORD *)v158 - 1) = *((_DWORD *)v157 - 1);
                          *(_DWORD *)float v158 = *(_DWORD *)v157;
                          *((_DWORD *)v158 + 1) = 1065353216;
                          v158 += 16;
                          v157 += 12 * v10 * v145;
                          --v159;
                        }
                        while (v159);
                        ++v154;
                        v156 += 16 * v10;
                        v155 += 12 * v145;
                      }
                      while (v154 != v10);
                      ++v151;
                      v153 += 16 * v145;
                      v152 += 12 * v10;
                    }
                    while (v151 != v10);
                    ++v148;
                    v149 += 16 * v10 * v145;
                    v150 += 12;
                  }
                  while (v148 != v10);
                }
              }
            }
            break;
          case 3:
            if (a6 != 3) {
              __assert_rtn("nxm_copy_RGB_float_to_RGBX_float32", "CMMNxMUtils.cpp", 697, "inpChannels == 3 && outChannels == 3");
            }
            unint64_t v160 = v10 * v10;
            float v161 = CFDataCreateMutable(0, 16 * v10 * v10 * v10);
            int v22 = v161;
            if (v161)
            {
              CFDataSetLength(v161, 16 * v10 * v10 * v10);
              float v162 = CFDataGetMutableBytePtr(v22);
              if (v10)
              {
                if (v162)
                {
                  uint64_t v163 = 0;
                  unint64_t v164 = v162 + 8;
                  float v165 = a2 + 8;
                  do
                  {
                    uint64_t v166 = 0;
                    float v167 = v165;
                    double v168 = v164;
                    do
                    {
                      float v169 = v167;
                      float v170 = v168;
                      unint64_t v171 = v10;
                      do
                      {
                        *((_DWORD *)v170 - 2) = *((_DWORD *)v169 - 2);
                        *((_DWORD *)v170 - 1) = *((_DWORD *)v169 - 1);
                        *(_DWORD *)float v170 = *(_DWORD *)v169;
                        *((_DWORD *)v170 + 1) = 1065353216;
                        v170 += 16;
                        v169 += 12 * v160;
                        --v171;
                      }
                      while (v171);
                      ++v166;
                      v168 += 16 * v10;
                      v167 += 12 * v10;
                    }
                    while (v166 != v10);
                    ++v163;
                    v164 += 16 * v160;
                    v165 += 12;
                  }
                  while (v163 != v10);
                }
              }
            }
            break;
          case 1:
            if (a6 != 3) {
              __assert_rtn("nxm_copy_GRAY_float_to_RGBX_float32", "CMMNxMUtils.cpp", 672, "inpChannels == 1 && outChannels == 3");
            }
            CFNumberRef v50 = CFDataCreateMutable(0, 16 * v10);
            int v22 = v50;
            if (v50)
            {
              CFDataSetLength(v50, 16 * v10);
              CFArrayRef v51 = CFDataGetMutableBytePtr(v22);
              if (v10)
              {
                if (v51)
                {
                  unsigned int v52 = v51 + 8;
                  float64x2_t v53 = (int *)(a2 + 8);
                  do
                  {
                    *(v52 - 2) = *(v53 - 2);
                    *(v52 - 1) = *(v53 - 1);
                    int v54 = *v53;
                    v53 += 3;
                    *unsigned int v52 = v54;
                    v52[1] = 1065353216;
                    v52 += 4;
                    --v10;
                  }
                  while (v10);
                }
              }
            }
            break;
          default:
            __assert_rtn("nxm_copy_NxM_to_RGBX_float32_from_float", "CMMNxMUtils.cpp", 767, "0");
        }
      }
      else
      {
        switch(a5)
        {
          case 4:
            if (a6 != 3) {
              __assert_rtn("nxm_copy_CMYK_fixed16_to_RGBX_float32", "CMMNxMUtils.cpp", 624, "inpChannels == 4 && outChannels == 3");
            }
            unint64_t v178 = v10 * v10;
            float v179 = CFDataCreateMutable(0, 16 * v178 * v178);
            int v22 = v179;
            if (v179)
            {
              CFDataSetLength(v179, 16 * v178 * v178);
              float v180 = CFDataGetMutableBytePtr(v22);
              if (v10)
              {
                if (v180)
                {
                  uint64_t v182 = 0;
                  float v183 = a2 + 2;
                  float32x2_t v184 = (float32x2_t)vdup_n_s32(0x477FFF00u);
                  __asm { FMOV            V3.2S, #1.0 }
                  do
                  {
                    uint64_t v186 = 0;
                    CFArrayRef v187 = v180;
                    uint64_t v188 = v183;
                    do
                    {
                      uint64_t v189 = 0;
                      float v190 = v187;
                      float v191 = (unsigned __int16 *)v188;
                      do
                      {
                        BOOL v192 = v190;
                        float v193 = v191;
                        unint64_t v194 = v10;
                        do
                        {
                          v181.i16[0] = *(v193 - 1);
                          *(float *)v181.i32 = (float)v181.u32[0] / 65535.0;
                          if (*(float *)v181.i32 > 1.0) {
                            *(float *)v181.i32 = 1.0;
                          }
                          *(_DWORD *)BOOL v192 = v181.i32[0];
                          v195.i32[0] = *v193;
                          v195.i32[1] = v193[1];
                          float32x2_t v196 = vdiv_f32(vcvt_f32_u32(v195), v184);
                          int8x8_t v181 = vbsl_s8((int8x8_t)vcgt_f32(v196, _D3), (int8x8_t)_D3, (int8x8_t)v196);
                          *(int8x8_t *)(v192 + 4) = v181;
                          *((_DWORD *)v192 + 3) = 1065353216;
                          v193 += 3 * v10 * v178;
                          v192 += 16;
                          --v194;
                        }
                        while (v194);
                        ++v189;
                        v191 += 3 * v178;
                        v190 += 16 * v10;
                      }
                      while (v189 != v10);
                      ++v186;
                      v188 += 6 * v10;
                      v187 += 16 * v178;
                    }
                    while (v186 != v10);
                    ++v182;
                    v183 += 6;
                    v180 += 16 * v10 * v178;
                  }
                  while (v182 != v10);
                }
              }
            }
            break;
          case 3:
            if (a6 != 3) {
              __assert_rtn("nxm_copy_RGB_fixed16_to_RGBX_float32", "CMMNxMUtils.cpp", 594, "inpChannels == 3 && outChannels == 3");
            }
            unint64_t v197 = v10 * v10;
            int8x8_t v198 = CFDataCreateMutable(0, 16 * v10 * v10 * v10);
            int v22 = v198;
            if (v198)
            {
              CFDataSetLength(v198, 16 * v10 * v10 * v10);
              int v199 = CFDataGetMutableBytePtr(v22);
              if (v10)
              {
                if (v199)
                {
                  uint64_t v201 = 0;
                  int8x8_t v202 = a2 + 2;
                  float32x2_t v203 = (float32x2_t)vdup_n_s32(0x477FFF00u);
                  __asm { FMOV            V3.2S, #1.0 }
                  do
                  {
                    uint64_t v205 = 0;
                    int8x8_t v206 = v199;
                    int8x8_t v207 = v202;
                    do
                    {
                      uint64_t v208 = v206;
                      float64x2_t v209 = v207;
                      unint64_t v210 = v10;
                      do
                      {
                        v200.i16[0] = *((_WORD *)v209 - 1);
                        *(float *)v200.i32 = (float)v200.u32[0] / 65535.0;
                        if (*(float *)v200.i32 > 1.0) {
                          *(float *)v200.i32 = 1.0;
                        }
                        *(_DWORD *)uint64_t v208 = v200.i32[0];
                        v211.i32[0] = *(unsigned __int16 *)v209;
                        v211.i32[1] = *((unsigned __int16 *)v209 + 1);
                        float32x2_t v212 = vdiv_f32(vcvt_f32_u32(v211), v203);
                        int8x8_t v200 = vbsl_s8((int8x8_t)vcgt_f32(v212, _D3), (int8x8_t)_D3, (int8x8_t)v212);
                        *(int8x8_t *)(v208 + 4) = v200;
                        *((_DWORD *)v208 + 3) = 1065353216;
                        v209 += 6 * v197;
                        v208 += 16;
                        --v210;
                      }
                      while (v210);
                      ++v205;
                      v207 += 6 * v10;
                      v206 += 16 * v10;
                    }
                    while (v205 != v10);
                    ++v201;
                    v202 += 6;
                    v199 += 16 * v197;
                  }
                  while (v201 != v10);
                }
              }
            }
            break;
          case 1:
            if (a6 != 3) {
              __assert_rtn("nxm_copy_GRAY_fixed16_to_RGBX_float32", "CMMNxMUtils.cpp", 569, "inpChannels == 1 && outChannels == 3");
            }
            uint64_t v66 = CFDataCreateMutable(0, 16 * v10);
            int v22 = v66;
            if (v66)
            {
              CFDataSetLength(v66, 16 * v10);
              float64x2_t v67 = CFDataGetMutableBytePtr(v22);
              if (v10)
              {
                if (v67)
                {
                  uint64_t v69 = (unsigned __int16 *)(a2 + 2);
                  float32x2_t v70 = (float32x2_t)vdup_n_s32(0x477FFF00u);
                  __asm { FMOV            V3.2S, #1.0 }
                  do
                  {
                    v68.i16[0] = *(v69 - 1);
                    *(float *)v68.i32 = (float)v68.u32[0] / 65535.0;
                    if (*(float *)v68.i32 > 1.0) {
                      *(float *)v68.i32 = 1.0;
                    }
                    *(_DWORD *)float64x2_t v67 = v68.i32[0];
                    v75.i32[0] = *v69;
                    v75.i32[1] = v69[1];
                    float32x2_t v76 = vdiv_f32(vcvt_f32_u32(v75), v70);
                    int8x8_t v68 = vbsl_s8((int8x8_t)vcgt_f32(v76, _D3), (int8x8_t)_D3, (int8x8_t)v76);
                    *(int8x8_t *)(v67 + 4) = v68;
                    *((_DWORD *)v67 + 3) = 1065353216;
                    v69 += 3;
                    v67 += 16;
                    --v10;
                  }
                  while (v10);
                }
              }
            }
            break;
          default:
            __assert_rtn("nxm_copy_NxM_to_RGBX_float32_from_fixed16", "CMMNxMUtils.cpp", 664, "0");
        }
      }
      return v22;
    default:
      return 0;
  }
}

unsigned __int16 *repackage_RGB16_to_RGBX16(unsigned __int16 *result, unsigned __int16 *a2, uint64_t a3)
{
  if (result && a3)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (uint64_t)(result + 2);
    float v5 = a2 + 2;
    do
    {
      uint64_t v6 = 0;
      float v7 = v5;
      uint64_t result = (unsigned __int16 *)v4;
      do
      {
        float v8 = v7;
        __n128 v9 = result;
        uint64_t v10 = a3;
        do
        {
          *(v9 - 2) = *(v8 - 2);
          *(v9 - 1) = *(v8 - 1);
          *__n128 v9 = *v8;
          v9[1] = -1;
          v9 += 4;
          v8 += 3 * a3 * a3;
          --v10;
        }
        while (v10);
        ++v6;
        result += 4 * a3;
        v7 += 3 * a3;
      }
      while (v6 != a3);
      ++v3;
      v4 += 8 * a3 * a3;
      v5 += 3;
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t repackage_CMYK16_to_RGBX16(uint64_t result, unsigned __int16 *a2, uint64_t a3)
{
  if (result && a3)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a3 * a3 * a3;
    uint64_t v5 = 8 * v4;
    uint64_t v6 = (unsigned __int16 *)(result + 4);
    float v7 = a2 + 2;
    uint64_t v8 = 6 * v4;
    do
    {
      uint64_t result = 0;
      __n128 v9 = v7;
      uint64_t v10 = v6;
      do
      {
        uint64_t v11 = 0;
        unint64_t v12 = v9;
        unint64_t v13 = v10;
        do
        {
          unint64_t v14 = v12;
          uint64_t v15 = v13;
          uint64_t v16 = a3;
          do
          {
            *(v15 - 2) = *(v14 - 2);
            *(v15 - 1) = *(v14 - 1);
            *uint64_t v15 = *v14;
            v15[1] = -1;
            v15 += 4;
            unint64_t v14 = (unsigned __int16 *)((char *)v14 + v8);
            --v16;
          }
          while (v16);
          ++v11;
          v13 += 4 * a3;
          v12 += 3 * a3 * a3;
        }
        while (v11 != a3);
        ++result;
        v10 += 4 * a3 * a3;
        v9 += 3 * a3;
      }
      while (result != a3);
      ++v3;
      uint64_t v6 = (unsigned __int16 *)((char *)v6 + v5);
      v7 += 3;
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t NxMLUTFillWith16BitUniformGridData(unsigned __int16 *a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  BOOL v8 = (a2 > 0x100 || a3 <= 1) && (a2 > 0x400 || a3 != 1);
  uint64_t result = 0;
  if (!a1 || v8) {
    return result;
  }
  bzero(v50, 0x800uLL);
  memset(v48, 0, sizeof(v48));
  if (a3)
  {
    unint64_t v17 = 1;
    unint64_t v18 = a3;
    do
    {
      unint64_t v19 = v17 * a2;
      BOOL v21 = v17 * a2 >= v17 && v19 >= a2;
      CMMThrowExceptionWithLog(v21, "Overflow in Power", v11, v12, v13, v14, v15, v16);
      unint64_t v17 = v19;
      --v18;
    }
    while (v18);
    if (!a2) {
      goto LABEL_30;
    }
LABEL_24:
    uint64_t v22 = 0;
    uint64x2_t v23 = (uint64x2_t)vdupq_n_s64(a2 - 1);
    float64x2_t v24 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(a2 - 1)), 0);
    int64x2_t v25 = (int64x2_t)xmmword_18BE63480;
    float64x2_t v26 = (float64x2_t)vdupq_n_s64(0x40EFFFE000000000uLL);
    __asm { FMOV            V4.2D, #0.5 }
    int64x2_t v30 = vdupq_n_s64(2uLL);
    do
    {
      int32x2_t v31 = vmovn_s64((int64x2_t)vcgeq_u64(v23, (uint64x2_t)v25));
      uint64_t v32 = v22 + 1;
      v33.i64[0] = v22;
      v33.i64[1] = v22 + 1;
      int32x2_t v34 = vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vmlaq_f64(_Q4, v26, vdivq_f64(vcvtq_f64_u64(v33), v24)))), (int32x2_t)0xFFFF0000FFFFLL), 0);
      if (v31.i8[0]) {
        v50[v22] = v34.i16[0];
      }
      if (v31.i8[4]) {
        v50[v22 + 1] = v34.i16[2];
      }
      int64x2_t v25 = vaddq_s64(v25, v30);
      v22 += 2;
    }
    while (v32 + 1 != ((a2 + 1) & 0xFFFFFFFFFFFFFFFELL));
    goto LABEL_30;
  }
  unint64_t v19 = 1;
  if (a2) {
    goto LABEL_24;
  }
LABEL_30:
  if (a3)
  {
    uint64_t v35 = 0;
    do
    {
      if (v35)
      {
        unsigned int v36 = 1;
        int v37 = v35;
        do
        {
          unsigned int v38 = v36 * a2;
          BOOL v40 = v36 * a2 >= v36 && v38 >= a2;
          CMMThrowExceptionWithLog(v40, "Overflow in Power", v11, v12, v13, v14, v15, v16);
          unsigned int v36 = v38;
          --v37;
        }
        while (v37);
      }
      else
      {
        unsigned int v38 = 1;
      }
      *((_DWORD *)v48 + v35++) = v38;
    }
    while (v35 != a3);
  }
  if (!v19) {
    return 1;
  }
  unint64_t v41 = 0;
  unsigned int v42 = 0;
  while (1)
  {
    memset(v49, 0, sizeof(v49));
    if (a3 == 1) {
      break;
    }
    uint64_t v43 = a3 - 1;
    do
    {
      unint64_t v44 = *((unsigned int *)v48 + v43);
      *((_DWORD *)v49 + v43) = v41 / v44;
      v41 %= v44;
      --v43;
    }
    while (v43);
    if (v41 < a2) {
      goto LABEL_53;
    }
    if (a3) {
      goto LABEL_54;
    }
LABEL_57:
    unint64_t v41 = ++v42;
    if (v19 <= v42) {
      return 1;
    }
  }
  if (v41 >= a2) {
    return 0;
  }
LABEL_53:
  LODWORD(v49[0]) = v41;
  if (!a3) {
    goto LABEL_57;
  }
LABEL_54:
  unint64_t v45 = 0;
  unint64_t v46 = a3 + a3 * v42 - 1;
  unsigned int v47 = 1;
  while (v46 < a4)
  {
    a1[v46] = v50[*((unsigned int *)v49 + v45)];
    unint64_t v45 = v47;
    --v46;
    ++v47;
    if (v45 >= a3) {
      goto LABEL_57;
    }
  }
  return 0;
}

uint64_t CMMConvHLGOOTF::GetTransformType(CMMConvHLGOOTF *this, CFTypeRef cf)
{
  if (!cf) {
    return 2;
  }
  CFTypeID v3 = CFGetTypeID(cf);
  uint64_t v4 = 2;
  if (v3 == CFDictionaryGetTypeID())
  {
    if (CFDictionaryGetValue((CFDictionaryRef)cf, @"com.apple.cmm.HLGOOTF3DLut") == (const void *)*MEMORY[0x1E4F1CFD0]) {
      return 8;
    }
    else {
      return 2;
    }
  }
  return v4;
}

uint64_t CMMConvHLGOOTF::GetPrecision(CMMConvHLGOOTF *this)
{
  return 5;
}

uint64_t CMMConvHLGOOTF::GetMaxNofChannels(CMMConvHLGOOTF *this)
{
  return 3;
}

uint64_t CMMConvHLGOOTF::ClampOutput(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = (float *)(a2 + 4 * v4);
      float v6 = v5[1];
      float v7 = *(float *)(result + 56);
      if (*v5 <= v7) {
        float v7 = *v5;
      }
      if (*v5 >= 0.0) {
        float v8 = v7;
      }
      else {
        float v8 = 0.0;
      }
      float *v5 = v8;
      float v9 = *(float *)(result + 56);
      float v10 = v5[2];
      if (v6 <= v9) {
        float v9 = v6;
      }
      if (v6 < 0.0) {
        float v9 = 0.0;
      }
      v5[1] = v9;
      float v11 = *(float *)(result + 56);
      if (v10 <= v11) {
        float v11 = v10;
      }
      if (v10 < 0.0) {
        float v11 = 0.0;
      }
      v5[2] = v11;
      v4 += a3;
    }
    while (v4 < a4 * a3);
  }
  return result;
}

void CMMConvHLGOOTF::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvHLGOOTF::Convert(CMMConvHLGOOTF *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = a5 * a4;
  if (a5 * a4)
  {
    unint64_t v9 = 0;
    do
    {
      float v10 = (float *)(a2 + 4 * v9);
      *float v10 = CMMConvHLGOOTF::Reference_HLG_OOTF(this, *v10, v10[1], v10[2]);
      *((_DWORD *)v10 + 1) = v11;
      *((_DWORD *)v10 + 2) = v12;
      v9 += a4;
    }
    while (v9 < v5);
  }
}

void CMMConvHLGOOTF::Convert()
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = -181;
}

uint64_t CMMConvHLGOOTF::IsNOP(CMMConvHLGOOTF *this)
{
  return 0;
}

uint64_t CMMConvHLGOOTF::Collapse(CMMConvHLGOOTF *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  return 0;
}

__CFDictionary *CMMConvInvHLGOOTF::FlattenConversion(CMMConvInvHLGOOTF *this, const __CFDictionary *a2)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return Mutable;
  }
  int valuePtr = 3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (v5)
  {
    CFNumberRef v6 = v5;
    CFDictionaryAddValue(Mutable, kColorSyncConversionInpChan, v5);
    CFDictionaryAddValue(Mutable, kColorSyncConversionOutChan, v6);
    CFRelease(v6);
  }
  if (a2)
  {
    CFTypeID v7 = CFGetTypeID(a2);
    if (v7 == CFDictionaryGetTypeID()
      && CFDictionaryGetValue(a2, @"com.apple.cmm.InvHLGOOTF3DLut") == (const void *)*MEMORY[0x1E4F1CFD0])
    {
      HIDWORD(v61) = 2;
      CFTypeID v12 = CFGetTypeID(a2);
      if (v12 == CFDictionaryGetTypeID())
      {
        CFNumberRef Value = CFDictionaryGetValue(a2, (const void *)kColorSyncNxMFormat);
        HIDWORD(v61) = NxMTransformFormatFromValue(Value);
      }
      CFNumberRef v14 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&v61 + 4);
      if (v14)
      {
        CFNumberRef v15 = v14;
        CFDictionaryAddValue(Mutable, (const void *)kColorSyncNxMFormat, v14);
        CFRelease(v15);
      }
      int v16 = HIDWORD(v61);
      LODWORD(v61) = 0;
      CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(a2, @"com.apple.cmm.InvHLGOOTF3DLutGridPoints");
      *(_DWORD *)ColorSyncMD5 bytes = 0;
      if (v17 && CFNumberGetValue(v17, kCFNumberSInt32Type, bytes) == 1)
      {
        int v22 = *(_DWORD *)bytes;
        LODWORD(v61) = *(_DWORD *)bytes;
      }
      else
      {
        int v22 = v61;
      }
      if (!v22)
      {
        CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(a2, kColorSyncConversionGridPoints);
        if (v23) {
          CFNumberGetValue(v23, kCFNumberSInt32Type, &v61);
        }
      }
      unsigned int v24 = v61;
      if (!v61)
      {
        unsigned int v24 = 32;
        LODWORD(v61) = 32;
      }
      unint64_t v25 = calculate_clut_capacity(v24, 3, 3, 4, v18, v19, v20, v21);
      float64x2_t v26 = CFDataCreateMutable(0, v25);
      if (v26)
      {
        int v27 = v26;
        int v55 = v16;
        float32x4_t v56 = Mutable;
        CFDataSetLength(v26, v25);
        unsigned int cf = v27;
        Mutablevm_address_t BytePtr = CFDataGetMutableBytePtr(v27);
        if (v25 >> 62) {
          size_t v28 = -1;
        }
        else {
          size_t v28 = 4 * v25;
        }
        __n128 v57 = (float *)operator new[](v28, MEMORY[0x1E4FBA2D0]);
        if (NxMLUTFillWithFloatUniformGridData(v57, v61, (v61 * v61 * v61)))
        {
          uint64_t v31 = v61;
          if (v61)
          {
            uint64_t v32 = 0;
            uint64x2_t v33 = MutableBytePtr + 8;
            uint64_t v34 = 12 * v61;
            uint64_t v58 = v34 * v61;
            uint64_t v35 = v57 + 2;
            do
            {
              CFIndex v59 = v33;
              uint64_t v60 = v32;
              uint64_t v36 = 0;
              int v37 = v35;
              do
              {
                unsigned int v38 = v37;
                __int16 v39 = (float *)v33;
                uint64_t v40 = v31;
                do
                {
                  float v41 = *(v38 - 2);
                  float v42 = *(v38 - 1);
                  float v43 = *v38;
                  v38 += 3;
                  *(v39 - 2) = CMMConvInvHLGOOTF::Reference_Inv_HLG_OOTF(this, v41, v42, v43);
                  *((_DWORD *)v39 - 1) = v44;
                  *(_DWORD *)__int16 v39 = v45;
                  v39 += 3;
                  --v40;
                }
                while (v40);
                ++v36;
                v33 += v34;
                int v37 = (float *)((char *)v37 + v34);
              }
              while (v36 != v31);
              uint64_t v32 = v60 + 1;
              uint64x2_t v33 = &v59[v58];
              uint64_t v35 = (float *)((char *)v35 + v58);
            }
            while (v60 + 1 != v31);
          }
        }
        if (v55 == 2)
        {
          CFDataRef v11 = cf;
        }
        else
        {
          CFDataRef v11 = NxMLUTCreateData(v55, MutableBytePtr, 1, v61, 3, 3, v29, v30);
          CFRelease(cf);
        }
        CFMutableArrayRef Mutable = v56;
        if (v57) {
          MEMORY[0x18C13A500](v57, 0x1000C8052888210);
        }
        CFNumberRef v46 = CFNumberCreate(0, kCFNumberSInt32Type, &v61);
        if (v11)
        {
          CFNumberRef v47 = v46;
          if (v46)
          {
            CFDictionaryAddValue(v56, kColorSyncConversionGridPoints, v46);
            CFRelease(v47);
          }
          goto LABEL_10;
        }
      }
      else
      {
        CFNumberCreate(0, kCFNumberSInt32Type, &v61);
      }
LABEL_45:
      CFDataRef v11 = Mutable;
      CFMutableArrayRef Mutable = 0;
      goto LABEL_46;
    }
  }
  HIDWORD(v61) = 7;
  CFNumberRef v8 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&v61 + 4);
  if (v8)
  {
    CFNumberRef v9 = v8;
    CFDictionaryAddValue(Mutable, (const void *)kColorSyncNxMFormat, v8);
    CFRelease(v9);
  }
  *(void *)&long long v10 = *(void *)((char *)this + 76);
  *((void *)&v10 + 1) = *(void *)((char *)this + 60);
  *(_OWORD *)ColorSyncMD5 bytes = v10;
  uint64_t v64 = *(void *)((char *)this + 68);
  int v65 = 1;
  CFDataRef v11 = CFDataCreate(0, bytes, 28);
  if (!v11) {
    goto LABEL_45;
  }
LABEL_10:
  CFDictionaryAddValue(Mutable, kColorSyncConversion3DLut, v11);
  CFDictionaryAddValue(Mutable, kColorSyncConversionNDLut, v11);
LABEL_46:
  CFRelease(v11);
  if (*((unsigned char *)this + 34)) {
    CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  CMMConvNode::AddClampingInfo(this, Mutable);
  *(float *)&unsigned int v48 = 1.0 / *((float *)this + 21);
  unint64_t v61 = v48;
  if (*(float *)&v48 != 1.0)
  {
    CFNumberRef v49 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)&v61 + 4);
    CFNumberRef v50 = CFNumberCreate(0, kCFNumberFloat32Type, &v61);
    *(void *)ColorSyncMD5 bytes = v49;
    *(void *)&UInt8 bytes[8] = v50;
    CFArrayRef v51 = CFArrayCreate(0, (const void **)bytes, 2, MEMORY[0x1E4F1D510]);
    CFRelease(v49);
    CFRelease(v50);
    if (v51)
    {
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionOutputRange", v51);
      CFRelease(v51);
    }
  }
  return Mutable;
}

float CMMConvInvHLGOOTF::Reference_Inv_HLG_OOTF(CMMConvInvHLGOOTF *this, float a2, float a3, float a4)
{
  float v5 = (float)((float)(*((float *)this + 16) * a3) + (float)(a2 * *((float *)this + 15)))
     + (float)(a4 * *((float *)this + 17));
  if (a3 <= a4) {
    a3 = a4;
  }
  if (a3 < a2) {
    a3 = a2;
  }
  float v6 = v5 + (float)(a3 * *((float *)this + 18));
  float v7 = fmaxf(fabsf(v6), 1.1755e-38);
  if (v6 >= 0.0) {
    float v8 = *((float *)this + 20);
  }
  else {
    float v8 = -*((float *)this + 20);
  }
  return (float)(v8 * powf(v7, *((float *)this + 19))) * a2;
}

uint64_t CMMConvInvHLGOOTF::GetTransformType(CMMConvInvHLGOOTF *this, CFTypeRef cf)
{
  if (!cf) {
    return 2;
  }
  CFTypeID v3 = CFGetTypeID(cf);
  uint64_t v4 = 2;
  if (v3 == CFDictionaryGetTypeID())
  {
    if (CFDictionaryGetValue((CFDictionaryRef)cf, @"com.apple.cmm.InvHLGOOTF3DLut") == (const void *)*MEMORY[0x1E4F1CFD0]) {
      return 8;
    }
    else {
      return 2;
    }
  }
  return v4;
}

uint64_t CMMConvInvHLGOOTF::GetPrecision(CMMConvInvHLGOOTF *this)
{
  return 5;
}

uint64_t CMMConvInvHLGOOTF::GetMaxNofChannels(CMMConvInvHLGOOTF *this)
{
  return 3;
}

uint64_t CMMConvInvHLGOOTF::ClampOutput(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    do
    {
      float v5 = (float *)(a2 + 4 * v4);
      float v6 = v5[1];
      float v7 = 1.0 / *(float *)(result + 84);
      if (*v5 <= v7) {
        float v7 = *v5;
      }
      float v8 = v5[2];
      if (*v5 < 0.0) {
        float v7 = 0.0;
      }
      float *v5 = v7;
      float v9 = 1.0 / *(float *)(result + 84);
      if (v6 <= v9) {
        float v9 = v6;
      }
      if (v6 >= 0.0) {
        float v10 = v9;
      }
      else {
        float v10 = 0.0;
      }
      v5[1] = v10;
      float v11 = 1.0 / *(float *)(result + 84);
      if (v8 <= v11) {
        float v11 = v8;
      }
      if (v8 >= 0.0) {
        float v12 = v11;
      }
      else {
        float v12 = 0.0;
      }
      v5[2] = v12;
      v4 += a3;
    }
    while (v4 < a4 * a3);
  }
  return result;
}

void CMMConvInvHLGOOTF::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    float v5 = a2 + 1;
    float32x2_t v6 = (float32x2_t)vdup_n_s32(0x447A0000u);
    do
    {
      float v7 = v5->f32[v4];
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, v6), (int8x8_t)v6, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v8 = 1000.0;
      if (v7 <= 1000.0) {
        float v8 = v7;
      }
      if (v7 >= 0.0) {
        float v9 = v8;
      }
      else {
        float v9 = 0.0;
      }
      v5->f32[v4] = v9;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvInvHLGOOTF::Convert(CMMConvInvHLGOOTF *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = a5 * a4;
  if (a5 * a4)
  {
    unint64_t v9 = 0;
    do
    {
      float v10 = (float *)(a2 + 4 * v9);
      *float v10 = CMMConvInvHLGOOTF::Reference_Inv_HLG_OOTF(this, *v10, v10[1], v10[2]);
      *((_DWORD *)v10 + 1) = v11;
      *((_DWORD *)v10 + 2) = v12;
      v9 += a4;
    }
    while (v9 < v5);
  }
}

uint64_t non-virtual thunk to'CMMConvPQEETF::PrintInfo(CMMConvPQEETF *this)
{
  return CMMConvPQEETF::PrintInfo((CMMConvPQEETF *)((char *)this - 64));
}

uint64_t CMMConvPQEETF::PrintInfo(CMMConvPQEETF *this)
{
  return printf("{\nPQ tone mapping params:\n\tparams->pq_eotf.m1 = % 3.10f\n\tparams->pq_eotf.m2 = % 3.10f\n\n\tparams->pq_eotf.c1 = % 3.10f\n\tparams->pq_eotf.c2 = % 3.10f\n\tparams->pq_eotf.c3 = % 3.10f\n\n\tparams->pq_eetf.masterPeakInv = % 3.10f\n\tparams->pq_eetf.masterBlackInv = % 3.10f\n\tparams->pq_eetf.maxLuunint64_t m = % 3.10f\n\tparams->pq_eetf.minLuunint64_t m = % 3.10f\n\tparams->pq_eetf.KneeStart = % 3.10f\n\tparams->pq_eetf.KneeStartScale = % 3.10f\n\n\tparams->pq_eetf.optical_scale = % 3.10f\n\tparams->luminance_coefficients[0] = % 3.10f\n\tparams->luminance_coefficients[1] = % 3.10f\n"
           "\tparams->luminance_coefficients[2] = % 3.10f\n"
           "\tparams->luminance_coefficients[3] = % 3.10f\n"
           "}\n",
           0.159301758,
           78.84375,
           0.8359375,
           18.8515625,
           18.6875,
           *((float *)this + 4),
           *((float *)this + 5),
           *((float *)this + 6),
           *((float *)this + 7),
           *((float *)this + 8),
           *((float *)this + 9),
           *((float *)this + 10),
           *((float *)this + 11),
           *((float *)this + 12),
           *((float *)this + 13),
           *((float *)this + 14));
}

uint64_t non-virtual thunk to'CMMConvPQEETF::GetFunctionType(CMMConvPQEETF *this)
{
  return 3;
}

__CFDictionary *non-virtual thunk to'CMMConvPQEETF::FlattenConversion(CMMConvPQEETF *this, const __CFDictionary *a2)
{
  return CMMConvPQEETF::FlattenConversion((CMMConvPQEETF *)((char *)this - 64), a2);
}

__CFDictionary *CMMConvPQEETF::FlattenConversion(CMMConvPQEETF *this, const __CFDictionary *a2)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return Mutable;
  }
  int valuePtr = 3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (v5)
  {
    CFNumberRef v6 = v5;
    CFDictionaryAddValue(Mutable, kColorSyncConversionInpChan, v5);
    CFDictionaryAddValue(Mutable, kColorSyncConversionOutChan, v6);
    CFRelease(v6);
  }
  if (!*((unsigned char *)this + 60))
  {
    unsigned int v28 = 9;
    CFNumberRef v18 = CFNumberCreate(0, kCFNumberSInt32Type, &v28);
    if (v18)
    {
      CFNumberRef v19 = v18;
      CFDictionaryAddValue(Mutable, (const void *)kColorSyncNxMFormat, v18);
      CFRelease(v19);
    }
    *(_OWORD *)uint64_t v21 = xmmword_18BE63670;
    int v22 = 1100316672;
    long long v23 = *((_OWORD *)this + 1);
    uint64_t v24 = *((void *)this + 4);
    int v25 = *((_DWORD *)this + 10);
    uint64_t v26 = 0;
    long long v27 = *(_OWORD *)((char *)this + 44);
    CFDataRef v15 = CFDataCreate(0, (const UInt8 *)v21, 72);
    if (v15) {
      goto LABEL_16;
    }
LABEL_17:
    CFDataRef v15 = Mutable;
    CFMutableArrayRef Mutable = 0;
    goto LABEL_18;
  }
  v21[0] = 2;
  if (a2)
  {
    CFTypeID v7 = CFGetTypeID(a2);
    if (v7 == CFDictionaryGetTypeID())
    {
      CFNumberRef Value = CFDictionaryGetValue(a2, (const void *)kColorSyncNxMFormat);
      v21[0] = NxMTransformFormatFromValue(Value);
    }
  }
  CFNumberRef v9 = CFNumberCreate(0, kCFNumberSInt32Type, v21);
  if (v9)
  {
    CFNumberRef v14 = v9;
    CFDictionaryAddValue(Mutable, (const void *)kColorSyncNxMFormat, v9);
    CFRelease(v14);
  }
  unsigned int v28 = 0;
  CFDataRef v15 = CMMConvPQEETFBase::create_3DLUT((float *)this, v21[0], a2, &v28, v10, v11, v12, v13);
  CFNumberRef v16 = CFNumberCreate(0, kCFNumberSInt32Type, &v28);
  if (!v15) {
    goto LABEL_17;
  }
  CFNumberRef v17 = v16;
  if (v16)
  {
    CFDictionaryAddValue(Mutable, kColorSyncConversionGridPoints, v16);
    CFRelease(v17);
  }
LABEL_16:
  CFDictionaryAddValue(Mutable, kColorSyncConversion3DLut, v15);
  CFDictionaryAddValue(Mutable, kColorSyncConversionNDLut, v15);
LABEL_18:
  CFRelease(v15);
  if (*((unsigned char *)this + 98)) {
    CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  CMMConvNode::AddClampingInfo((CMMConvPQEETF *)((char *)this + 64), Mutable);
  return Mutable;
}

__CFData *CMMConvPQEETFBase::create_3DLUT(float *a1, int a2, CFDictionaryRef theDict, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (theDict)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"com.apple.cmm.PQEETF3DLutGridPoints");
    unsigned int valuePtr = 0;
    if (Value && CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr) == 1)
    {
      unsigned int v13 = valuePtr;
      *a4 = valuePtr;
      if (v13) {
        goto LABEL_12;
      }
    }
    else
    {
      unsigned int v13 = *a4;
      if (*a4) {
        goto LABEL_12;
      }
    }
    CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(theDict, kColorSyncConversionGridPoints);
    if (v14) {
      CFNumberGetValue(v14, kCFNumberSInt32Type, a4);
    }
  }
  else
  {
    unsigned int valuePtr = 0;
  }
  unsigned int v13 = *a4;
  if (!*a4)
  {
    unsigned int v13 = 32;
    *a4 = 32;
  }
LABEL_12:
  unint64_t v15 = calculate_clut_capacity(v13, 3, 3, 4, a5, a6, a7, a8);
  CFMutableArrayRef Mutable = CFDataCreateMutable(0, v15);
  CFNumberRef v17 = Mutable;
  if (Mutable)
  {
    CFDataSetLength(Mutable, v15);
    Mutablevm_address_t BytePtr = CFDataGetMutableBytePtr(v17);
    if (v15 >> 62) {
      size_t v19 = -1;
    }
    else {
      size_t v19 = 4 * v15;
    }
    uint64_t v20 = (float *)operator new[](v19, MEMORY[0x1E4FBA2D0]);
    if (NxMLUTFillWithFloatUniformGridData(v20, *a4, *a4 * *a4 * *a4))
    {
      CFNumberRef v50 = MutableBytePtr;
      CFArrayRef v51 = v20;
      unsigned int cf = v17;
      int v49 = a2;
      uint64_t v23 = *a4;
      if (v23)
      {
        uint64_t v24 = 0;
        int v25 = (float *)(MutableBytePtr + 8);
        uint64_t v26 = 12 * v23;
        uint64_t v52 = 12 * v23 * v23;
        long long v27 = v20 + 2;
        do
        {
          float64x2_t v53 = v25;
          uint64_t v54 = v24;
          uint64_t v28 = 0;
          uint64_t v29 = v27;
          do
          {
            uint64_t v30 = v29;
            uint64_t v31 = v25;
            uint64_t v32 = v23;
            do
            {
              float v33 = *(v30 - 2) * 10000.0;
              float v34 = *(v30 - 1) * 10000.0;
              float v35 = *v30;
              v30 += 3;
              float v36 = CMMConvPQEETFBase::ToneMap((CMMConvPQEETFBase *)a1, v33, v34, v35 * 10000.0);
              float v39 = a1[3];
              if (v36 <= v39) {
                float v40 = v36;
              }
              else {
                float v40 = a1[3];
              }
              if (v36 >= 0.0) {
                float v41 = v40;
              }
              else {
                float v41 = 0.0;
              }
              *(v31 - 2) = v41 / v39;
              float v42 = a1[3];
              if (v37 <= v42) {
                float v43 = v37;
              }
              else {
                float v43 = a1[3];
              }
              if (v37 >= 0.0) {
                float v44 = v43;
              }
              else {
                float v44 = 0.0;
              }
              *(v31 - 1) = v44 / v42;
              float v45 = a1[3];
              if (v38 <= v45) {
                float v46 = v38;
              }
              else {
                float v46 = a1[3];
              }
              if (v38 < 0.0) {
                float v46 = 0.0;
              }
              *uint64_t v31 = v46 / v45;
              v31 += 3;
              --v32;
            }
            while (v32);
            ++v28;
            int v25 = (float *)((char *)v25 + v26);
            uint64_t v29 = (float *)((char *)v29 + v26);
          }
          while (v28 != v23);
          uint64_t v24 = v54 + 1;
          int v25 = (float *)((char *)v53 + v52);
          long long v27 = (float *)((char *)v27 + v52);
        }
        while (v54 + 1 != v23);
      }
      if (v49 == 2)
      {
        CFNumberRef v17 = cf;
      }
      else
      {
        CFNumberRef v17 = NxMLUTCreateData(v49, v50, 1, v23, 3, 3, v21, v22);
        CFRelease(cf);
      }
      uint64_t v20 = v51;
    }
    if (v20) {
      MEMORY[0x18C13A500](v20, 0x1000C8052888210);
    }
  }
  return v17;
}

float CMMConvPQEETFBase::ToneMap(CMMConvPQEETFBase *this, float a2, float a3, float a4)
{
  float v4 = a2;
  float v5 = (float)((float)(*((float *)this + 12) * a3) + (float)(*((float *)this + 11) * a2))
     + (float)(*((float *)this + 13) * a4);
  if (v5 != 0.0)
  {
    float v7 = *((float *)this + 10);
    float v8 = powf(fabsf(v5 / v7), 0.1593);
    float v9 = powf((float)((float)(v8 * 18.852) + 0.83594) / (float)((float)(v8 * 18.688) + 1.0), 78.844);
    float v10 = -v9;
    if ((float)(v5 / v7) >= 0.0) {
      float v10 = v9;
    }
    float v11 = *((float *)this + 5);
    float v12 = v10 - v11;
    float v13 = *((float *)this + 4) - v11;
    float v14 = v12 / v13;
    float v15 = *((float *)this + 8);
    if (v14 >= v15)
    {
      float v16 = (float)(v14 - v15) * *((float *)this + 9);
      float v14 = (1.0 - v15) * (float)(v16 - (float)((float)(v16 * (float)(v16 + v16)) - (float)((float)(v16 * v16) * v16)))
          + ((float)-(float)((float)(v16 * (float)(v16 * 3.0)) - (float)((float)(v16 * (float)(v16 + v16)) * v16)) + 1.0)
          * v15
          + (float)(*((float *)this + 6)
                  * (float)((float)(v16 * (float)(v16 * 3.0)) + (float)((float)(v16 * (float)(v16 * -2.0)) * v16)));
    }
    float v17 = *((float *)this + 7);
    if (v14 >= 0.0)
    {
      if (v14 >= 1.0) {
        float v17 = v14;
      }
      else {
        float v17 = v14
      }
            + (float)((float)((float)(1.0 - v14) * (float)((float)(1.0 - v14) * (float)(v17 * (float)(1.0 - v14))))
                    * (float)(1.0 - v14));
    }
    float v18 = v11 + (float)(v17 * v13);
    float v19 = powf(fabsf(v18), 0.012683);
    float v20 = powf(fmaxf(v19 + -0.83594, 0.0) / (float)((float)(v19 * -18.688) + 18.852), 6.2774);
    if (v18 < 0.0) {
      float v20 = -v20;
    }
    return (float)((float)(v7 * v20) / v5) * v4;
  }
  return v4;
}

uint64_t non-virtual thunk to'CMMConvPQEETF::GetTransformType(CMMConvPQEETF *this, const __CFDictionary *a2)
{
  return 8;
}

uint64_t non-virtual thunk to'CMMConvPQEETF::GetMaxNofChannels(CMMConvPQEETF *this)
{
  return 3;
}

void non-virtual thunk to'CMMConvPQEETF::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    float v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void non-virtual thunk to'CMMConvPQEETF::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    float v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void non-virtual thunk to'CMMConvPQEETF::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void CMMConvPQEETF::Convert(CMMConvPQEETFBase *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = a5 * a4;
  if (a5 * a4)
  {
    unint64_t v9 = 0;
    do
    {
      float v10 = (float *)(a2 + 4 * v9);
      *float v10 = CMMConvPQEETFBase::ToneMap(this, *v10, v10[1], v10[2]);
      *((_DWORD *)v10 + 1) = v11;
      *((_DWORD *)v10 + 2) = v12;
      v9 += a4;
    }
    while (v9 < v5);
  }
}

void non-virtual thunk to'CMMConvPQEETF::Convert()
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = -181;
}

uint64_t non-virtual thunk to'CMMConvPQEETF::IsNOP(CMMConvPQEETF *this)
{
  return 0;
}

uint64_t non-virtual thunk to'CMMConvPQEETF::Collapse(CMMConvPQEETF *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  return 0;
}

void non-virtual thunk to'CMMConvPQEETF::~CMMConvPQEETF(pthread_mutex_t **this)
{
}

uint64_t CMMConvPQEETF::GetFunctionType(CMMConvPQEETF *this)
{
  return 3;
}

uint64_t CMMConvPQEETF::GetTransformType(CMMConvPQEETF *this, const __CFDictionary *a2)
{
  return 8;
}

uint64_t CMMConvPQEETF::GetMaxNofChannels(CMMConvPQEETF *this)
{
  return 3;
}

void CMMConvPQEETF::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvPQEETF::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvPQEETF::Convert()
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = -181;
}

uint64_t CMMConvPQEETF::IsNOP(CMMConvPQEETF *this)
{
  return 0;
}

uint64_t CMMConvPQEETF::Collapse(CMMConvPQEETF *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  return 0;
}

uint64_t CMMConvPQEETFBase::GetPrecision(CMMConvPQEETFBase *this)
{
  return 5;
}

uint64_t CMMConvHLGSceneReferredMapping::GetFunctionType(CMMConvHLGSceneReferredMapping *this)
{
  return 3;
}

__CFDictionary *CMMConvHLGSceneReferredMapping::FlattenConversion(CMMConvHLGSceneReferredMapping *this, const __CFDictionary *a2)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return Mutable;
  }
  int valuePtr = 3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (v5)
  {
    CFNumberRef v6 = v5;
    CFDictionaryAddValue(Mutable, kColorSyncConversionInpChan, v5);
    CFDictionaryAddValue(Mutable, kColorSyncConversionOutChan, v6);
    CFRelease(v6);
  }
  if (!*((unsigned char *)this + 48))
  {
    int v56 = 8;
    CFNumberRef v17 = CFNumberCreate(0, kCFNumberSInt32Type, &v56);
    if (v17)
    {
      CFNumberRef v18 = v17;
      CFDictionaryAddValue(Mutable, (const void *)kColorSyncNxMFormat, v17);
      CFRelease(v18);
    }
    *(_OWORD *)&v54[1] = *(_OWORD *)((char *)this + 52);
    uint64_t v55 = *(void *)((char *)this + 68);
    CFDataRef v19 = CFDataCreate(0, (const UInt8 *)&v54[1], 24);
    if (v19) {
      goto LABEL_46;
    }
LABEL_47:
    CFDataRef v19 = Mutable;
    CFMutableArrayRef Mutable = 0;
    goto LABEL_48;
  }
  int v56 = 0;
  if (a2)
  {
    CFTypeID v7 = CFGetTypeID(a2);
    if (v7 == CFDictionaryGetTypeID())
    {
      CFNumberRef Value = CFDictionaryGetValue(a2, (const void *)kColorSyncNxMFormat);
      int v56 = NxMTransformFormatFromValue(Value);
    }
  }
  CFNumberRef v9 = CFNumberCreate(0, kCFNumberSInt32Type, &v56);
  if (v9)
  {
    CFNumberRef v10 = v9;
    CFDictionaryAddValue(Mutable, (const void *)kColorSyncNxMFormat, v9);
    CFRelease(v10);
  }
  int v11 = v56;
  v54[0] = 0;
  if (a2)
  {
    CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(a2, @"com.apple.cmm.HLGSRLS3DLutGridPoints");
    v54[1] = 0;
    if (v12)
    {
      if (CFNumberGetValue(v12, kCFNumberSInt32Type, &v54[1]) == 1)
      {
        v54[0] = v54[1];
        if (v54[1]) {
          goto LABEL_23;
        }
      }
    }
  }
  else
  {
    v54[1] = 0;
  }
  CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(a2, kColorSyncConversionGridPoints);
  if (v20) {
    CFNumberGetValue(v20, kCFNumberSInt32Type, v54);
  }
LABEL_23:
  unsigned int v21 = v54[0];
  if (!v54[0])
  {
    unsigned int v21 = 32;
    v54[0] = 32;
  }
  unint64_t v22 = calculate_clut_capacity(v21, 3, 3, 4, v13, v14, v15, v16);
  uint64_t v23 = CFDataCreateMutable(0, v22);
  if (!v23)
  {
    CFNumberCreate(0, kCFNumberSInt32Type, v54);
    goto LABEL_47;
  }
  uint64_t v24 = v23;
  int v48 = v11;
  int v49 = Mutable;
  CFDataSetLength(v23, v22);
  unsigned int cf = v24;
  Mutablevm_address_t BytePtr = CFDataGetMutableBytePtr(v24);
  if (v22 >> 62) {
    size_t v25 = -1;
  }
  else {
    size_t v25 = 4 * v22;
  }
  CFNumberRef v50 = (float *)operator new[](v25, MEMORY[0x1E4FBA2D0]);
  if (NxMLUTFillWithFloatUniformGridData(v50, v54[0], (v54[0] * v54[0] * v54[0])))
  {
    uint64_t v28 = v54[0];
    if (v54[0])
    {
      uint64_t v29 = 0;
      uint64_t v30 = MutableBytePtr + 8;
      uint64_t v31 = 12 * v54[0];
      uint64_t v51 = v31 * v54[0];
      uint64_t v32 = v50 + 2;
      do
      {
        uint64_t v52 = v30;
        uint64_t v53 = v29;
        uint64_t v33 = 0;
        float v34 = v32;
        do
        {
          float v35 = v34;
          float v36 = (float *)v30;
          uint64_t v37 = v28;
          do
          {
            float v38 = *(v35 - 2);
            float v39 = *(v35 - 1);
            float v40 = *v35;
            v35 += 3;
            *(v36 - 2) = CMMConvHLGSceneReferredMapping::Reference_HLG_SceneReferredMapping(this, v38, v39, v40);
            *((_DWORD *)v36 - 1) = v41;
            *(_DWORD *)float v36 = v42;
            v36 += 3;
            --v37;
          }
          while (v37);
          ++v33;
          v30 += v31;
          float v34 = (float *)((char *)v34 + v31);
        }
        while (v33 != v28);
        uint64_t v29 = v53 + 1;
        uint64_t v30 = &v52[v51];
        uint64_t v32 = (float *)((char *)v32 + v51);
      }
      while (v53 + 1 != v28);
    }
  }
  if (v48 == 2)
  {
    CFDataRef v19 = cf;
  }
  else
  {
    CFDataRef v19 = NxMLUTCreateData(v48, MutableBytePtr, 1, v54[0], 3, 3, v26, v27);
    CFRelease(cf);
  }
  CFMutableArrayRef Mutable = v49;
  if (v50) {
    MEMORY[0x18C13A500](v50, 0x1000C8052888210);
  }
  CFNumberRef v43 = CFNumberCreate(0, kCFNumberSInt32Type, v54);
  if (!v19) {
    goto LABEL_47;
  }
  CFNumberRef v44 = v43;
  if (v43)
  {
    CFDictionaryAddValue(v49, kColorSyncConversionGridPoints, v43);
    CFRelease(v44);
  }
LABEL_46:
  CFDictionaryAddValue(Mutable, kColorSyncConversion3DLut, v19);
  CFDictionaryAddValue(Mutable, kColorSyncConversionNDLut, v19);
LABEL_48:
  CFRelease(v19);
  if (*((unsigned char *)this + 34)) {
    CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  CMMConvNode::AddClampingInfo(this, Mutable);
  return Mutable;
}

float CMMConvHLGSceneReferredMapping::Reference_HLG_SceneReferredMapping(CMMConvHLGSceneReferredMapping *this, float a2, float a3, float a4)
{
  float v4 = *((float *)this + 17);
  float v18 = *((float *)this + 16);
  float v19 = *((float *)this + 15);
  if (a3 <= a4) {
    float v5 = a4;
  }
  else {
    float v5 = a3;
  }
  if (v5 < a2) {
    float v5 = a2;
  }
  float v17 = v5;
  float v7 = *((float *)this + 13);
  float v6 = *((float *)this + 14);
  float v8 = v6 * a2;
  float v9 = v6 * a3;
  float v10 = v6 * a4;
  float v11 = *((float *)this + 18);
  float v12 = powf(v6 * a2, v7);
  float v13 = powf(v9, v7);
  float v14 = (float)((float)((float)(v18 * v13) + (float)(v19 * v12)) + (float)(v4 * powf(v10, v7))) + (float)(v17 * v11);
  if (v14 == 0.0) {
    float v15 = 1.0;
  }
  else {
    float v15 = (float)((float)((float)((float)(v18 * v9) + (float)(v8 * v19)) + (float)(v10 * v4)) + (float)(v17 * v11))
  }
        / v14;
  return v12 * v15;
}

uint64_t CMMConvHLGSceneReferredMapping::GetTransformType(CMMConvHLGSceneReferredMapping *this, const __CFDictionary *a2)
{
  if (*((unsigned char *)this + 48)) {
    return 8;
  }
  else {
    return 2;
  }
}

uint64_t CMMConvHLGSceneReferredMapping::GetPrecision(CMMConvHLGSceneReferredMapping *this)
{
  return 5;
}

uint64_t CMMConvHLGSceneReferredMapping::GetMaxNofChannels(CMMConvHLGSceneReferredMapping *this)
{
  return 3;
}

void CMMConvHLGSceneReferredMapping::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    float v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvHLGSceneReferredMapping::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    float v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvHLGSceneReferredMapping::Convert(CMMConvHLGSceneReferredMapping *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = a5 * a4;
  if (a5 * a4)
  {
    unint64_t v9 = 0;
    do
    {
      float v10 = (float *)(a2 + 4 * v9);
      *float v10 = CMMConvHLGSceneReferredMapping::Reference_HLG_SceneReferredMapping(this, *v10, v10[1], v10[2]);
      *((_DWORD *)v10 + 1) = v11;
      *((_DWORD *)v10 + 2) = v12;
      v9 += a4;
    }
    while (v9 < v5);
  }
}

void CMMConvHLGSceneReferredMapping::Convert()
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = -181;
}

uint64_t CMMConvHLGSceneReferredMapping::IsNOP(CMMConvHLGSceneReferredMapping *this)
{
  return 0;
}

uint64_t CMMConvHLGSceneReferredMapping::Collapse(CMMConvHLGSceneReferredMapping *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  return 0;
}

uint64_t CMMConvLuminanceScaling::GetFunctionType(CMMConvLuminanceScaling *this)
{
  return 3;
}

__CFDictionary *CMMConvLuminanceScaling::FlattenConversion(CMMConvLuminanceScaling *this, const __CFDictionary *a2)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return Mutable;
  }
  int valuePtr = 3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (v5)
  {
    CFNumberRef v6 = v5;
    CFDictionaryAddValue(Mutable, kColorSyncConversionInpChan, v5);
    CFDictionaryAddValue(Mutable, kColorSyncConversionOutChan, v6);
    CFRelease(v6);
  }
  if (a2)
  {
    CFTypeID v7 = CFGetTypeID(a2);
    if (v7 == CFDictionaryGetTypeID()
      && CFDictionaryGetValue(a2, @"com.apple.cmm.HLGOOTF3DLut") == (const void *)*MEMORY[0x1E4F1CFD0])
    {
      int v57 = 0;
      CFTypeID v11 = CFGetTypeID(a2);
      if (v11 == CFDictionaryGetTypeID())
      {
        CFNumberRef Value = CFDictionaryGetValue(a2, (const void *)kColorSyncNxMFormat);
        int v57 = NxMTransformFormatFromValue(Value);
      }
      CFNumberRef v13 = CFNumberCreate(0, kCFNumberSInt32Type, &v57);
      if (v13)
      {
        CFNumberRef v14 = v13;
        CFDictionaryAddValue(Mutable, (const void *)kColorSyncNxMFormat, v13);
        CFRelease(v14);
      }
      int v15 = v57;
      *(void *)uint64_t v55 = 0;
      CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(a2, @"com.apple.cmm.HLGOOTF3DLutGridPoints");
      if (!v16
        || CFNumberGetValue(v16, kCFNumberSInt32Type, &v55[4]) != 1
        || (unsigned int v21 = *(_DWORD *)&v55[4], (*(_DWORD *)v55 = *(_DWORD *)&v55[4]) == 0))
      {
        CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(a2, kColorSyncConversionGridPoints);
        if (v22) {
          CFNumberGetValue(v22, kCFNumberSInt32Type, v55);
        }
        unsigned int v21 = *(_DWORD *)v55;
        if (!*(_DWORD *)v55)
        {
          unsigned int v21 = 32;
          *(_DWORD *)uint64_t v55 = 32;
        }
      }
      unint64_t v23 = calculate_clut_capacity(v21, 3, 3, 4, v17, v18, v19, v20);
      uint64_t v24 = CFDataCreateMutable(0, v23);
      if (v24)
      {
        size_t v25 = v24;
        int v48 = v15;
        CFNumberRef v50 = Mutable;
        CFDataSetLength(v24, v23);
        unsigned int cf = v25;
        Mutablevm_address_t BytePtr = CFDataGetMutableBytePtr(v25);
        if (v23 >> 62) {
          size_t v26 = -1;
        }
        else {
          size_t v26 = 4 * v23;
        }
        uint64_t v51 = (float *)operator new[](v26, MEMORY[0x1E4FBA2D0]);
        if (NxMLUTFillWithFloatUniformGridData(v51, *(unsigned int *)v55, (*(_DWORD *)v55 * *(_DWORD *)v55 * *(_DWORD *)v55)))
        {
          uint64_t v29 = *(unsigned int *)v55;
          if (*(_DWORD *)v55)
          {
            uint64_t v30 = 0;
            uint64_t v31 = MutableBytePtr + 8;
            uint64_t v32 = 12 * *(unsigned int *)v55;
            uint64_t v52 = v32 * *(unsigned int *)v55;
            uint64_t v33 = v51 + 2;
            do
            {
              uint64_t v53 = v31;
              uint64_t v54 = v30;
              uint64_t v34 = 0;
              float v35 = v33;
              do
              {
                float v36 = v35;
                uint64_t v37 = (float *)v31;
                uint64_t v38 = v29;
                do
                {
                  float v39 = *(v36 - 2);
                  float v40 = *(v36 - 1);
                  float v41 = *v36;
                  v36 += 3;
                  *(v37 - 2) = CMMConvLuminanceScaling::scale_RGB(this, v39, v40, v41);
                  *((_DWORD *)v37 - 1) = v42;
                  *(_DWORD *)uint64_t v37 = v43;
                  v37 += 3;
                  --v38;
                }
                while (v38);
                ++v34;
                v31 += v32;
                float v35 = (float *)((char *)v35 + v32);
              }
              while (v34 != v29);
              uint64_t v30 = v54 + 1;
              uint64_t v31 = &v53[v52];
              uint64_t v33 = (float *)((char *)v33 + v52);
            }
            while (v54 + 1 != v29);
          }
        }
        if (v48 == 2)
        {
          CFDataRef v10 = cf;
        }
        else
        {
          CFDataRef v10 = NxMLUTCreateData(v48, MutableBytePtr, 1, *(unsigned int *)v55, 3, 3, v27, v28);
          CFRelease(cf);
        }
        CFMutableArrayRef Mutable = v50;
        if (v51) {
          MEMORY[0x18C13A500](v51, 0x1000C8052888210);
        }
        CFNumberRef v44 = CFNumberCreate(0, kCFNumberSInt32Type, v55);
        if (v10)
        {
          CFNumberRef v45 = v44;
          if (v44)
          {
            CFDictionaryAddValue(v50, kColorSyncConversionGridPoints, v44);
            CFRelease(v45);
          }
          goto LABEL_10;
        }
      }
      else
      {
        CFNumberCreate(0, kCFNumberSInt32Type, v55);
      }
LABEL_43:
      CFDataRef v10 = Mutable;
      CFMutableArrayRef Mutable = 0;
      goto LABEL_44;
    }
  }
  int v57 = 12;
  CFNumberRef v8 = CFNumberCreate(0, kCFNumberSInt32Type, &v57);
  if (v8)
  {
    CFNumberRef v9 = v8;
    CFDictionaryAddValue(Mutable, (const void *)kColorSyncNxMFormat, v8);
    CFRelease(v9);
  }
  *(_OWORD *)&v55[4] = *((_OWORD *)this + 3);
  int v56 = *((_DWORD *)this + 16);
  CFDataRef v10 = CFDataCreate(0, &v55[4], 20);
  if (!v10) {
    goto LABEL_43;
  }
LABEL_10:
  CFDictionaryAddValue(Mutable, kColorSyncConversion3DLut, v10);
  CFDictionaryAddValue(Mutable, kColorSyncConversionNDLut, v10);
LABEL_44:
  CFRelease(v10);
  if (*((unsigned char *)this + 34)) {
    CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  CMMConvNode::AddClampingInfo(this, Mutable);
  return Mutable;
}

float CMMConvLuminanceScaling::scale_RGB(CMMConvLuminanceScaling *this, float a2, float a3, float a4)
{
  float v5 = (float)((float)(*((float *)this + 14) * a3) + (float)(a2 * *((float *)this + 13)))
     + (float)(a4 * *((float *)this + 15));
  if (a3 > a4) {
    a4 = a3;
  }
  if (a4 < a2) {
    a4 = a2;
  }
  float v6 = v5 + (float)(a4 * *((float *)this + 16));
  float v7 = fmaxf(fabsf(v6), 1.1755e-38);
  float v8 = powf(v7, *((float *)this + 12));
  if (v6 < 0.0) {
    float v8 = -v8;
  }
  return (float)(v8 / v7) * a2;
}

uint64_t CMMConvLuminanceScaling::GetTransformType(CMMConvLuminanceScaling *this, CFTypeRef cf)
{
  if (!cf) {
    return 2;
  }
  CFTypeID v3 = CFGetTypeID(cf);
  uint64_t v4 = 2;
  if (v3 == CFDictionaryGetTypeID())
  {
    if (CFDictionaryGetValue((CFDictionaryRef)cf, @"com.apple.cmm.HLGOOTF3DLut") == (const void *)*MEMORY[0x1E4F1CFD0]) {
      return 8;
    }
    else {
      return 2;
    }
  }
  return v4;
}

uint64_t CMMConvLuminanceScaling::GetPrecision(CMMConvLuminanceScaling *this)
{
  return 5;
}

uint64_t CMMConvLuminanceScaling::GetMaxNofChannels(CMMConvLuminanceScaling *this)
{
  return 3;
}

void CMMConvLuminanceScaling::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    float v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvLuminanceScaling::Convert(CMMConvLuminanceScaling *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = a5 * a4;
  if (a5 * a4)
  {
    unint64_t v9 = 0;
    do
    {
      CFDataRef v10 = (float *)(a2 + 4 * v9);
      *CFDataRef v10 = CMMConvLuminanceScaling::scale_RGB(this, *v10, v10[1], v10[2]);
      *((_DWORD *)v10 + 1) = v11;
      *((_DWORD *)v10 + 2) = v12;
      v9 += a4;
    }
    while (v9 < v5);
  }
}

void CMMConvLuminanceScaling::Convert()
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = -181;
}

uint64_t CMMConvLuminanceScaling::IsNOP(CMMConvLuminanceScaling *this)
{
  return 0;
}

uint64_t CMMConvLuminanceScaling::Collapse(CMMConvLuminanceScaling *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  return 0;
}

uint64_t CMMConvRWToneMapping::GetFunctionType(CMMConvRWToneMapping *this)
{
  return 3;
}

__CFDictionary *CMMConvRWToneMapping::FlattenConversion(CMMConvRWToneMapping *this, const __CFDictionary *a2)
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    int valuePtr = 3;
    CFNumberRef v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v4)
    {
      CFNumberRef v5 = v4;
      CFDictionaryAddValue(Mutable, kColorSyncConversionInpChan, v4);
      CFDictionaryAddValue(Mutable, kColorSyncConversionOutChan, v5);
      CFRelease(v5);
    }
    int v24 = 10;
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberSInt32Type, &v24);
    if (v6)
    {
      CFNumberRef v7 = v6;
      CFDictionaryAddValue(Mutable, (const void *)kColorSyncNxMFormat, v6);
      CFRelease(v7);
    }
    int v8 = *((_DWORD *)this + 14);
    *(_DWORD *)ColorSyncMD5 bytes = *((_DWORD *)this + 12);
    int v19 = v8;
    uint64_t v20 = *((void *)this + 8);
    int v21 = 0;
    long long v22 = *(_OWORD *)((char *)this + 72);
    int v23 = *((_DWORD *)this + 22);
    CFDataRef v9 = CFDataCreate(0, bytes, 40);
    if (v9)
    {
      CFDataRef v10 = v9;
      CFDictionaryAddValue(Mutable, kColorSyncConversion3DLut, v9);
      CFDictionaryAddValue(Mutable, kColorSyncConversionNDLut, v10);
    }
    else
    {
      CFDataRef v10 = Mutable;
      CFMutableArrayRef Mutable = 0;
    }
    CFRelease(v10);
    if (*((unsigned char *)this + 34)) {
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    CMMConvNode::AddClampingInfo(this, Mutable);
    float v11 = *((float *)this + 16);
    if (v11 > 1.0)
    {
      int v17 = 0;
      float v16 = v11;
      CFNumberRef v12 = CFNumberCreate(0, kCFNumberFloat32Type, &v17);
      CFNumberRef v13 = CFNumberCreate(0, kCFNumberFloat32Type, &v16);
      values[0] = v12;
      values[1] = v13;
      CFArrayRef v14 = CFArrayCreate(0, (const void **)values, 2, MEMORY[0x1E4F1D510]);
      CFRelease(v12);
      CFRelease(v13);
      if (v14)
      {
        CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionOutputRange", v14);
        CFRelease(v14);
      }
    }
  }
  return Mutable;
}

uint64_t CMMConvRWToneMapping::GetTransformType(CMMConvRWToneMapping *this, const __CFDictionary *a2)
{
  return 2;
}

uint64_t CMMConvRWToneMapping::GetPrecision(CMMConvRWToneMapping *this)
{
  return 5;
}

uint64_t CMMConvRWToneMapping::GetMaxNofChannels(CMMConvRWToneMapping *this)
{
  return 3;
}

uint64_t CMMConvRWToneMapping::ClampOutput(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    do
    {
      CFNumberRef v5 = (float *)(a2 + 4 * v4);
      float v6 = v5[1];
      float v7 = *(float *)(result + 64);
      if (*v5 <= v7) {
        float v7 = *v5;
      }
      if (*v5 >= 0.0) {
        float v8 = v7;
      }
      else {
        float v8 = 0.0;
      }
      float *v5 = v8;
      float v9 = *(float *)(result + 64);
      float v10 = v5[2];
      if (v6 <= v9) {
        float v9 = v6;
      }
      if (v6 < 0.0) {
        float v9 = 0.0;
      }
      v5[1] = v9;
      float v11 = *(float *)(result + 64);
      if (v10 <= v11) {
        float v11 = v10;
      }
      if (v10 < 0.0) {
        float v11 = 0.0;
      }
      v5[2] = v11;
      v4 += a3;
    }
    while (v4 < a4 * a3);
  }
  return result;
}

uint64_t CMMConvRWToneMapping::ClampInput(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    do
    {
      CFNumberRef v5 = (float *)(a2 + 4 * v4);
      float v6 = v5[1];
      float v7 = *(float *)(result + 52);
      if (*v5 <= v7) {
        float v7 = *v5;
      }
      if (*v5 >= 0.0) {
        float v8 = v7;
      }
      else {
        float v8 = 0.0;
      }
      float *v5 = v8;
      float v9 = *(float *)(result + 52);
      float v10 = v5[2];
      if (v6 <= v9) {
        float v9 = v6;
      }
      if (v6 < 0.0) {
        float v9 = 0.0;
      }
      v5[1] = v9;
      float v11 = *(float *)(result + 52);
      if (v10 <= v11) {
        float v11 = v10;
      }
      if (v10 < 0.0) {
        float v11 = 0.0;
      }
      v5[2] = v11;
      v4 += a3;
    }
    while (v4 < a4 * a3);
  }
  return result;
}

float *CMMConvRWToneMapping::Convert(float *result, float32x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 * a4)
  {
    unint64_t v5 = 0;
    float v6 = a2 + 1;
    do
    {
      float v7 = result[12];
      float32x2_t v8 = vmul_n_f32(*a2, v7);
      float v9 = v7 * v6->f32[v5];
      float v10 = v8.f32[1];
      if (v8.f32[0] > v8.f32[1]) {
        float v10 = v8.f32[0];
      }
      if (v10 <= v9) {
        float v10 = v9;
      }
      if (v10 == 0.0)
      {
        float32x2_t v11 = 0;
        float v12 = 0.0;
      }
      else
      {
        if (v10 >= 1.0)
        {
          if (result[14] >= v10)
          {
            float v15 = result[21] * (float)(result[20] + sqrtf(result[19] + (float)(result[18] * v10)));
            float v14 = (float)(v15 * (float)(result[16] * (float)(v15 + (float)((float)(1.0 - v15) * 2.0))))
                + (float)((float)((float)(1.0 - v15) * (float)(1.0 - v15)) * result[17]);
          }
          else
          {
            float v14 = result[16];
          }
          float v13 = v14 / v10;
        }
        else
        {
          float v13 = result[17];
        }
        float32x2_t v11 = vmul_n_f32(v8, v13);
        float v12 = v9 * v13;
      }
      *a2 = v11;
      v6->f32[v5] = v12;
      v5 += a4;
      a2 = (float32x2_t *)((char *)a2 + 4 * a4);
    }
    while (v5 < a5 * a4);
  }
  return result;
}

void CMMConvRWToneMapping::Convert()
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = -181;
}

uint64_t CMMConvRWToneMapping::IsNOP(CMMConvRWToneMapping *this)
{
  return 0;
}

uint64_t CMMConvRWToneMapping::Collapse(CMMConvRWToneMapping *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  return 0;
}

uint64_t CMMConvFlexGTCLumaScaling::GetFunctionType(CMMConvFlexGTCLumaScaling *this)
{
  return 3;
}

__CFDictionary *CMMConvFlexGTCLumaScaling::FlattenConversion(CMMConvFlexGTCLumaScaling *this, const __CFDictionary *a2)
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    int valuePtr = 3;
    CFNumberRef v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v4)
    {
      CFNumberRef v5 = v4;
      CFDictionaryAddValue(Mutable, kColorSyncConversionInpChan, v4);
      CFDictionaryAddValue(Mutable, kColorSyncConversionOutChan, v5);
      CFRelease(v5);
    }
    int v19 = 11;
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberSInt32Type, &v19);
    if (v6)
    {
      CFNumberRef v7 = v6;
      CFDictionaryAddValue(Mutable, (const void *)kColorSyncNxMFormat, v6);
      CFRelease(v7);
    }
    uint64_t v8 = *(void *)(*((void *)this + 10) + 32) + 40;
    float v9 = (char *)malloc_type_calloc(1uLL, v8, 0x8B9A6754uLL);
    *(void *)float v9 = *((void *)this + 6);
    *((_DWORD *)v9 + 2) = *((_DWORD *)this + 14);
    *((_DWORD *)v9 + 3) = *((_DWORD *)this + 15);
    *((_DWORD *)v9 + 4) = *((_DWORD *)this + 16);
    *((_DWORD *)v9 + 5) = *((_DWORD *)this + 17);
    *((_DWORD *)v9 + 6) = *((_DWORD *)this + 18);
    float v10 = (uint64_t *)*((void *)this + 10);
    *(void *)(v9 + 2CMMBase::operator delete(this - 8) = (unint64_t)v10[4] >> 2;
    float32x2_t v11 = (const void *)CMMTable::FloatData(v10[2], v10[3]);
    memcpy(v9 + 36, v11, *(void *)(*((void *)this + 10) + 32));
    CFDataRef v12 = CFDataCreate(0, (const UInt8 *)v9, v8);
    free(v9);
    if (v12)
    {
      CFDictionaryAddValue(Mutable, kColorSyncConversion3DLut, v12);
      CFDictionaryAddValue(Mutable, kColorSyncConversionNDLut, v12);
    }
    else
    {
      CFDataRef v12 = Mutable;
      CFMutableArrayRef Mutable = 0;
    }
    CFRelease(v12);
    if (*((unsigned char *)this + 34)) {
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    CMMConvNode::AddClampingInfo(this, Mutable);
    int v18 = 0;
    float v17 = *((float *)this + 13);
    if (v17 != 1.0)
    {
      CFNumberRef v13 = CFNumberCreate(0, kCFNumberFloat32Type, &v18);
      CFNumberRef v14 = CFNumberCreate(0, kCFNumberFloat32Type, &v17);
      values[0] = v13;
      values[1] = v14;
      CFArrayRef v15 = CFArrayCreate(0, (const void **)values, 2, MEMORY[0x1E4F1D510]);
      CFRelease(v13);
      CFRelease(v14);
      if (v15)
      {
        CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionOutputRange", v15);
        CFRelease(v15);
      }
    }
  }
  return Mutable;
}

uint64_t CMMConvFlexGTCLumaScaling::GetTransformType(CMMConvFlexGTCLumaScaling *this, const __CFDictionary *a2)
{
  return 2;
}

uint64_t CMMConvFlexGTCLumaScaling::GetPrecision(CMMConvFlexGTCLumaScaling *this)
{
  return 5;
}

uint64_t CMMConvFlexGTCLumaScaling::GetMaxNofChannels(CMMConvFlexGTCLumaScaling *this)
{
  return 3;
}

uint64_t CMMConvFlexGTCLumaScaling::ClampOutput(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    do
    {
      CFNumberRef v5 = (float *)(a2 + 4 * v4);
      float v6 = v5[1];
      float v7 = *(float *)(result + 52);
      if (*v5 <= v7) {
        float v7 = *v5;
      }
      if (*v5 >= 0.0) {
        float v8 = v7;
      }
      else {
        float v8 = 0.0;
      }
      float *v5 = v8;
      float v9 = *(float *)(result + 52);
      float v10 = v5[2];
      if (v6 <= v9) {
        float v9 = v6;
      }
      if (v6 < 0.0) {
        float v9 = 0.0;
      }
      v5[1] = v9;
      float v11 = *(float *)(result + 52);
      if (v10 <= v11) {
        float v11 = v10;
      }
      if (v10 < 0.0) {
        float v11 = 0.0;
      }
      v5[2] = v11;
      v4 += a3;
    }
    while (v4 < a4 * a3);
  }
  return result;
}

void CMMConvFlexGTCLumaScaling::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    CFNumberRef v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

uint64_t CMMConvFlexGTCLumaScaling::Convert(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = a5 * a4;
  if (a5 * a4)
  {
    uint64_t v8 = result;
    unint64_t v9 = 0;
    float v10 = *(uint64_t **)(result + 80);
    do
    {
      float v11 = (float *)(a2 + 4 * v9);
      float v12 = *v11;
      float v13 = v11[1];
      float v14 = v11[2];
      if (v13 <= v14) {
        float v15 = v11[2];
      }
      else {
        float v15 = v11[1];
      }
      if (v15 < v12) {
        float v15 = *v11;
      }
      float v16 = (float)((float)((float)(*(float *)(v8 + 60) * v13) + (float)(*v11 * *(float *)(v8 + 56)))
                  + (float)(v14 * *(float *)(v8 + 64)))
          + (float)(v15 * *(float *)(v8 + 68));
      float v17 = fmaxf(fabsf(v16), 1.1755e-38);
      uint64_t result = CMMTable::FloatData(v10[2], v10[3]);
      float v10 = *(uint64_t **)(v8 + 80);
      unint64_t v18 = ((unint64_t)v10[4] >> 2) - 1;
      float v19 = (float)v18;
      float v20 = v17 * (float)v18;
      if (v20 <= (float)v18) {
        float v19 = v17 * (float)v18;
      }
      if (v20 < 0.0) {
        float v19 = 0.0;
      }
      unsigned int v21 = v19;
      float v22 = v19 - (float)v19;
      if (v18 >= v21 + 1) {
        unint64_t v18 = v21 + 1;
      }
      float v23 = *(float *)(result + 4 * v21)
          + (float)((float)(*(float *)(result + 4 * v18) - *(float *)(result + 4 * v21)) * v22);
      float v24 = -v23;
      if (v16 >= 0.0) {
        float v24 = v23;
      }
      float v25 = *(float *)(v8 + 72) * v24;
      float *v11 = v25 * v12;
      v11[1] = v25 * v13;
      v11[2] = v25 * v14;
      v9 += a4;
    }
    while (v9 < v5);
  }
  return result;
}

void CMMConvFlexGTCLumaScaling::Convert()
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = -181;
}

uint64_t CMMConvFlexGTCLumaScaling::IsNOP(CMMConvFlexGTCLumaScaling *this)
{
  return 0;
}

uint64_t CMMConvFlexGTCLumaScaling::Collapse(CMMConvFlexGTCLumaScaling *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  return 0;
}

uint64_t CMMConvCLUTBase::GetFunctionType(CMMConvCLUTBase *this)
{
  return 3;
}

__CFDictionary *CMMConvCLUTBase::FlattenConversion(CMMConvCLUTBase *this, const __CFDictionary *a2)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    int valuePtr = *((void *)this + 7);
    CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v5)
    {
      CFNumberRef v6 = v5;
      CFDictionaryAddValue(Mutable, kColorSyncConversionGridPoints, v5);
      CFRelease(v6);
    }
    int valuePtr = *((void *)this + 8);
    CFNumberRef v7 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v7)
    {
      CFNumberRef v8 = v7;
      CFDictionaryAddValue(Mutable, kColorSyncConversionInpChan, v7);
      CFRelease(v8);
    }
    int valuePtr = *((void *)this + 9);
    CFNumberRef v9 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v9)
    {
      CFNumberRef v10 = v9;
      CFDictionaryAddValue(Mutable, kColorSyncConversionOutChan, v9);
      CFRelease(v10);
    }
    int v20 = 0;
    if (a2)
    {
      CFTypeID v11 = CFGetTypeID(a2);
      if (v11 == CFDictionaryGetTypeID())
      {
        CFNumberRef Value = CFDictionaryGetValue(a2, (const void *)kColorSyncNxMFormat);
        int v20 = NxMTransformFormatFromValue(Value);
      }
    }
    CFNumberRef v13 = CFNumberCreate(0, kCFNumberSInt32Type, &v20);
    if (v13)
    {
      CFNumberRef v16 = v13;
      CFDictionaryAddValue(Mutable, (const void *)kColorSyncNxMFormat, v13);
      CFRelease(v16);
    }
    CFDataRef v17 = NxMLUTCreateData(v20, *((UInt8 **)this + 11), 0, *((void *)this + 7), *((void *)this + 8), *((void *)this + 9), v14, v15);
    if (v17)
    {
      CFDataRef v18 = v17;
      CFDictionaryAddValue(Mutable, kColorSyncConversion3DLut, v17);
      CFDictionaryAddValue(Mutable, kColorSyncConversionNDLut, v18);
      CFRelease(v18);
    }
    if (CFDictionaryGetCount(Mutable) > 5)
    {
      if (*((unsigned char *)this + 34)) {
        CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", (const void *)*MEMORY[0x1E4F1CFD0]);
      }
      CMMConvNode::AddClampingInfo(this, Mutable);
    }
    else
    {
      CFRelease(Mutable);
      return 0;
    }
  }
  return Mutable;
}

uint64_t CMMConvCLUTBase::GetMaxNofChannels(CMMConvCLUTBase *this)
{
  if (*((void *)this + 8) <= *((void *)this + 9)) {
    return *((void *)this + 9);
  }
  else {
    return *((void *)this + 8);
  }
}

uint64_t CMMConvCLUTBase::GetCLUTPoints(CMMConvCLUTBase *this)
{
  return *((void *)this + 7);
}

uint64_t CMMConvCLUTBase::IsNOP(CMMConvCLUTBase *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 7);
  if (v8)
  {
    if (v8 != 2) {
      return 0;
    }
    unint64_t v10 = *((void *)this + 8);
    if (v10 != *((void *)this + 9)) {
      return 0;
    }
    uint64_t v11 = 1;
    if (!v10) {
      goto LABEL_15;
    }
    uint64_t v12 = *((void *)this + 8);
    do
    {
      BOOL v13 = v11 < 0;
      v11 *= 2;
      uint64_t v15 = !v13 && v11 != 0;
      CMMThrowExceptionWithLog(v15, "Overflow in Power", a3, a4, a5, a6, a7, a8);
      --v12;
    }
    while (v12);
    if (v10 >= 0x10)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = -171;
    }
    if (v11)
    {
LABEL_15:
      for (unsigned int i = 0; ; ++i)
      {
        uint64_t v17 = CMMTable::FloatData(*(void *)(*((void *)this + 10) + 16), *(void *)(*((void *)this + 10) + 24));
        unint64_t v18 = i + 1;
        if (v10) {
          break;
        }
LABEL_20:
        uint64_t result = 1;
        if (v11 <= v18) {
          return result;
        }
      }
      uint64_t v19 = 0;
      unsigned int v20 = 0;
      while (*(unsigned __int16 *)(v17 + 2 * v10 * v18 - 2 - 2 * v19) == (unsigned __int16)((__int16)((unsigned __int16)(i >> v20) << 15) >> 15))
      {
        uint64_t v19 = ++v20;
        if (v10 <= v20) {
          goto LABEL_20;
        }
      }
      return 0;
    }
  }
  return 1;
}

uint64_t CMMConvCLUTBase::Collapse(CMMConvCLUTBase *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  return 0;
}

uint64_t CMMTextDescTag::CMMTextDescTag(uint64_t a1, int a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  *(void *)a1 = &unk_1ED985440;
  *(_DWORD *)(a1 + CMMBase::operator delete(this - 8) = a2;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 16) = 0;
  if (a5) {
    *(void *)(a5 + 16) = a1;
  }
  *(void *)(a1 + 40) = a3;
  *(_WORD *)(a1 + 4CMMBase::operator delete(this - 8) = 0;
  *(void *)a1 = &unk_1ED9826A0;
  if (a4 >= 0xD) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 4294967126;
  }
  CMMThrowExceptionOnError(v6);
  return a1;
}

void sub_18BE48A7C(_Unwind_Exception *a1)
{
  CMMTag::~CMMTag(v1);
  _Unwind_Resume(a1);
}

void *CMMTag::GetWholeCloth(void *this, unsigned __int8 *__dst, unint64_t *a3)
{
  CFTypeID v3 = (const void *)this[5];
  if (!v3)
  {
    exception = __cxa_allocate_exception(4uLL);
    int v6 = -171;
LABEL_11:
    _DWORD *exception = v6;
  }
  if (!a3) {
    goto LABEL_9;
  }
  if (!__dst)
  {
    *a3 = this[4];
    return this;
  }
  size_t v4 = *a3;
  if (v4 != this[4])
  {
LABEL_9:
    exception = __cxa_allocate_exception(4uLL);
    int v6 = -50;
    goto LABEL_11;
  }

  return memcpy(__dst, v3, v4);
}

uint64_t CMMTag::GetTagType(CMMTag *this)
{
  int8x8_t v1 = (unsigned int *)*((void *)this + 5);
  if (!v1)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -50;
  }
  return bswap32(*v1);
}

void CMMSignatureTag::~CMMSignatureTag(CMMSignatureTag *this)
{
  CMMTag::~CMMTag(this);

  CMMBase::operator delete(v1);
}

void CMMHLGOOTFTag::~CMMHLGOOTFTag(CMMHLGOOTFTag *this)
{
  CMMTag::~CMMTag(this);

  CMMBase::operator delete(v1);
}

uint64_t CMMHLGCurveTag::Initialize(uint64_t this)
{
  unsigned int v1 = **(_DWORD **)(this + 40);
  *(_DWORD *)(this + 52) = bswap32(v1);
  if (v1 == 541543496)
  {
    uint64_t v2 = this;
    if (*(void *)(this + 32) >= 0xCuLL) {
      uint64_t v3 = 0;
    }
    else {
      uint64_t v3 = 4294967126;
    }
    CMMThrowExceptionOnError(v3);
    if (*(_DWORD *)(*(void *)(v2 + 40) + 8) == 1728774144) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = 4294967126;
    }
    return CMMThrowExceptionOnError(v4);
  }
  return this;
}

double CMMHLGCurveTag::EvaluateGamma(CMMHLGCurveTag *this, BOOL *a2, double a3)
{
  return 0.0;
}

uint64_t CMMHLGCurveTag::MakeInvertedTRC(uint64_t a1, uint64_t a2, float a3, uint64_t a4, uint64_t *a5)
{
  *(float *)(a1 + 60) = a3;
  {
    CMMMemMgr::CMMMemMgr((CMMMemMgr *)&CMMHLGCurveTag::copy_inv_hlg_curve_table(CMMFloatLutInfo *)::m);
    __cxa_atexit((void (*)(void *))CMMMemMgr::~CMMMemMgr, &CMMHLGCurveTag::copy_inv_hlg_curve_table(CMMFloatLutInfo *)::m, &dword_18BE08000);
  }
  long long v8 = *(_OWORD *)(a1 + 64);
  int v9 = *(_DWORD *)(a1 + 60);
  if (CMMHLGCurveTag::copy_inv_hlg_curve_table(CMMFloatLutInfo *)::predicate == -1)
  {
    if (!a2) {
      goto LABEL_6;
    }
  }
  else
  {
    long long v15 = *(_OWORD *)(a1 + 64);
    dispatch_once(&CMMHLGCurveTag::copy_inv_hlg_curve_table(CMMFloatLutInfo *)::predicate, &__block_literal_global_241);
    long long v8 = v15;
    if (!a2) {
      goto LABEL_6;
    }
  }
  *(_OWORD *)a2 = xmmword_18BE63690;
  *(_DWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 2CMMBase::operator delete(this - 8) = v8;
  *(_DWORD *)(a2 + 44) = v9;
  *(void *)(a2 + 4CMMBase::operator delete(this - 8) = 0;
  uint64_t v10 = CMMHLGCurveTag::copy_inv_hlg_curve_table(CMMFloatLutInfo *)::float_table;
  *(void *)(a2 + 16) = CMMHLGCurveTag::copy_inv_hlg_curve_table(CMMFloatLutInfo *)::float_table;
  uint64_t v11 = *(void *)(v10 + 8);
  if (v11) {
    *(void *)(v10 + CMMBase::operator delete(this - 8) = v11 + 1;
  }
LABEL_6:
  uint64_t v12 = CMMHLGCurveTag::copy_inv_hlg_curve_table(CMMFloatLutInfo *)::fixed_table;
  uint64_t v13 = *(void *)(CMMHLGCurveTag::copy_inv_hlg_curve_table(CMMFloatLutInfo *)::fixed_table + 8);
  if (v13) {
    *(void *)(CMMHLGCurveTag::copy_inv_hlg_curve_table(CMMFloatLutInfo *)::fixed_table + CMMBase::operator delete(this - 8) = v13 + 1;
  }
  *a5 = CMMHLGCurveTag::copy_hlg_curve_table(a1, 0);
  return v12;
}

void sub_18BE48DD0(_Unwind_Exception *a1)
{
}

uint64_t CMMHLGCurveTag::copy_hlg_curve_table(uint64_t a1, uint64_t a2)
{
  {
    CMMMemMgr::CMMMemMgr((CMMMemMgr *)&CMMHLGCurveTag::copy_hlg_curve_table(CMMFloatLutInfo *)::m);
    __cxa_atexit((void (*)(void *))CMMMemMgr::~CMMMemMgr, &CMMHLGCurveTag::copy_hlg_curve_table(CMMFloatLutInfo *)::m, &dword_18BE08000);
  }
  long long v4 = *(_OWORD *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 80);
  int v6 = *(_DWORD *)(a1 + 56);
  if (CMMHLGCurveTag::copy_hlg_curve_table(CMMFloatLutInfo *)::predicate[0] == -1)
  {
    if (!a2) {
      goto LABEL_6;
    }
  }
  else
  {
    long long v11 = *(_OWORD *)(a1 + 64);
    dispatch_once(CMMHLGCurveTag::copy_hlg_curve_table(CMMFloatLutInfo *)::predicate, &__block_literal_global_238);
    long long v4 = v11;
    if (!a2) {
      goto LABEL_6;
    }
  }
  *(_OWORD *)a2 = xmmword_18BE636A0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 2CMMBase::operator delete(this - 8) = v4;
  *(_DWORD *)(a2 + 44) = v5;
  *(_DWORD *)(a2 + 4CMMBase::operator delete(this - 8) = v6;
  *(_DWORD *)(a2 + 52) = 0;
  uint64_t v7 = CMMHLGCurveTag::copy_hlg_curve_table(CMMFloatLutInfo *)::float_table;
  *(void *)(a2 + 16) = CMMHLGCurveTag::copy_hlg_curve_table(CMMFloatLutInfo *)::float_table;
  uint64_t v8 = *(void *)(v7 + 8);
  if (v8) {
    *(void *)(v7 + CMMBase::operator delete(this - 8) = v8 + 1;
  }
LABEL_6:
  uint64_t result = CMMHLGCurveTag::copy_hlg_curve_table(CMMFloatLutInfo *)::fixed_table;
  uint64_t v10 = *(void *)(CMMHLGCurveTag::copy_hlg_curve_table(CMMFloatLutInfo *)::fixed_table + 8);
  if (v10) {
    *(void *)(CMMHLGCurveTag::copy_hlg_curve_table(CMMFloatLutInfo *)::fixed_table + CMMBase::operator delete(this - 8) = v10 + 1;
  }
  return result;
}

void sub_18BE48F10(_Unwind_Exception *a1)
{
}

void *___ZN14CMMHLGCurveTag20copy_hlg_curve_tableEP15CMMFloatLutInfo_block_invoke()
{
  uint64_t v0 = CMMBase::NewInternal(0x28uLL, &CMMHLGCurveTag::copy_hlg_curve_table(CMMFloatLutInfo *)::m);
  v0[2] = 0;
  v0[3] = &kHLGInvOETFData;
  *uint64_t v0 = &unk_1ED985520;
  v0[1] = 0;
  v0[4] = 21512;
  CMMHLGCurveTag::copy_hlg_curve_table(CMMFloatLutInfo *)::fixed_table = (uint64_t)v0;
  uint64_t result = CMMBase::NewInternal(0x28uLL, &CMMHLGCurveTag::copy_hlg_curve_table(CMMFloatLutInfo *)::m);
  result[2] = 0;
  result[3] = &kHLGInvOETFFloatData;
  *uint64_t result = &unk_1ED985520;
  result[1] = 0;
  result[4] = 16388;
  CMMHLGCurveTag::copy_hlg_curve_table(CMMFloatLutInfo *)::float_table = (uint64_t)result;
  return result;
}

void CMMMemMgr::~CMMMemMgr(void **this)
{
}

void *___ZN14CMMHLGCurveTag24copy_inv_hlg_curve_tableEP15CMMFloatLutInfo_block_invoke()
{
  uint64_t v0 = CMMBase::NewInternal(0x28uLL, &CMMHLGCurveTag::copy_inv_hlg_curve_table(CMMFloatLutInfo *)::m);
  v0[2] = 0;
  v0[3] = &kHLGOETFData;
  *uint64_t v0 = &unk_1ED985520;
  v0[1] = 0;
  v0[4] = 21512;
  CMMHLGCurveTag::copy_inv_hlg_curve_table(CMMFloatLutInfo *)::fixed_table = (uint64_t)v0;
  uint64_t result = CMMBase::NewInternal(0x28uLL, &CMMHLGCurveTag::copy_inv_hlg_curve_table(CMMFloatLutInfo *)::m);
  result[2] = 0;
  result[3] = &kHLGOETFFloatData;
  *uint64_t result = &unk_1ED985520;
  result[1] = 0;
  result[4] = 16388;
  CMMHLGCurveTag::copy_inv_hlg_curve_table(CMMFloatLutInfo *)::float_table = (uint64_t)result;
  return result;
}

uint64_t CMMHLGCurveTag::MakeTRC(uint64_t a1, uint64_t a2, float a3)
{
  *(float *)(a1 + 56) = a3;
  return CMMHLGCurveTag::copy_hlg_curve_table(a1, a2);
}

uint64_t CMMHLGCurveTag::SameCurve(CMMHLGCurveTag *this, CMMCurveTag *lpsrc, CMMCurveTag *a3)
{
  if (lpsrc)
  {
    if (a3) {
      goto LABEL_3;
    }
  }
  else
  {
    int v5 = 0;
    if (a3)
    {
LABEL_3:
      if (v5) {
        return 0;
      }
      goto LABEL_7;
    }
  }
  BOOL v6 = 1;
  if (v5) {
    return 0;
  }
LABEL_7:
  if (!v6) {
    return 0;
  }
  uint64_t v7 = *(uint64_t (**)(CMMCurveTag *, CMMCurveTag *, CMMCurveTag *))(*(void *)lpsrc + 56);

  return v7(lpsrc, lpsrc, a3);
}

uint64_t CMMHLGCurveTag::GetCurveData(CMMHLGCurveTag *this)
{
  return 0;
}

uint64_t CMMHLGCurveTag::GetCurveCount(CMMHLGCurveTag *this)
{
  return 0;
}

uint64_t CMMHLGCurveTag::Validate(CMMHLGCurveTag *this, uint64_t a2, uint64_t a3)
{
  if (a3 == 3 && a2 == 3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 4294967126;
  }
  CMMThrowExceptionOnError(v5);
  if (*(_DWORD *)(*((void *)this + 5) + 8) == 1728774144) {
    return 0;
  }
  else {
    return 4294967126;
  }
}

void CMMHLGCurveTag::~CMMHLGCurveTag(CMMHLGCurveTag *this)
{
  CMMTag::~CMMTag(this);

  CMMBase::operator delete(v1);
}

void CMMCurveTag::EvaluateGamma(CMMCurveTag *this, BOOL *a2, double a3)
{
  double v23 = 0.0;
  unsigned int v6 = (*(uint64_t (**)(CMMCurveTag *))(*(void *)this + 40))(this);
  if (*((void *)this + 4) >= 2 * (unint64_t)v6 + 12) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 4294967126;
  }
  CMMThrowExceptionOnError(v7);
  if (!v6)
  {
    double v23 = 1.0;
    goto LABEL_33;
  }
  if (v6 != 2)
  {
    if (v6 == 1)
    {
      if ((*(_WORD *)(*(uint64_t (**)(CMMCurveTag *))(*(void *)this + 48))(this) & 0xFEFF) == 0xCC01)
      {
        if (a2) {
          *a2 = 1;
        }
        return;
      }
      double v23 = (double)(bswap32(*(unsigned __int16 *)(*(uint64_t (**)(CMMCurveTag *))(*(void *)this + 48))(this)) >> 16)
          * 0.00390625;
      goto LABEL_33;
    }
    int v9 = (unsigned __int16 *)(*(uint64_t (**)(CMMCurveTag *))(*(void *)this + 48))(this);
    if (!IsPureGammaCurve(v6, v9, &v23))
    {
      uint64_t v10 = (*(uint64_t (**)(CMMCurveTag *))(*(void *)this + 48))(this);
      uint64_t v11 = 0;
      int v12 = 0;
      double v13 = (double)(v6 - 1);
      double v14 = 0.0;
      double v15 = 0.0;
      do
      {
        if (v11)
        {
          double v16 = (double)(bswap32(*(unsigned __int16 *)(v10 + 2 * v11)) >> 16) / 65535.0;
          if (v16 != 0.0 && v11 - v6 != -1 && v16 != 1.0)
          {
            double v19 = log(v14 / v13);
            double v15 = log(v16) / v19 + v15;
            ++v12;
          }
        }
        ++v11;
        double v14 = v14 + 1.0;
      }
      while (v11 != v6);
      if (v12)
      {
        double v23 = v15 / (double)v12;
        uint64_t v20 = (*(uint64_t (**)(CMMCurveTag *))(*(void *)this + 48))(this);
        uint64_t v21 = 0;
        while (vabdd_f64((double)(bswap32(*(unsigned __int16 *)(v20 + 2 * v21)) >> 16) / 65535.0, pow((double)v21 / v13, v15 / (double)v12)) <= a3)
        {
          if (v6 == ++v21) {
            goto LABEL_37;
          }
        }
        double v23 = 0.0;
      }
      else
      {
        double v23 = 1.0;
      }
LABEL_37:
      if (!a2) {
        return;
      }
      goto LABEL_38;
    }
LABEL_33:
    if (!a2) {
      return;
    }
    BOOL v22 = 1;
    goto LABEL_39;
  }
  double v23 = 1.0;
  if (*(_WORD *)(*(uint64_t (**)(CMMCurveTag *))(*(void *)this + 48))(this)) {
    goto LABEL_37;
  }
  uint64_t v8 = (*(uint64_t (**)(CMMCurveTag *))(*(void *)this + 48))(this);
  if (a2 && *(unsigned __int16 *)(v8 + 2) != 0xFFFF)
  {
LABEL_38:
    BOOL v22 = 0;
LABEL_39:
    *a2 = v22;
  }
}

BOOL IsPureGammaCurve(unsigned int a1, unsigned __int16 *a2, double *a3)
{
  unsigned int v5 = a1 - 1;
  if (a1 == 1)
  {
    double v6 = (double)(bswap32(*a2) >> 16) * 0.00390625;
    if (v6 < 2.4023 && v6 > 2.398) {
      double v6 = 2.4;
    }
    *a3 = v6;
    return 1;
  }
  else if (a1 >= 0x80)
  {
    BOOL v8 = 0;
    double v10 = (double)(bswap32(a2[a1 >> 1]) >> 16) / 65535.0;
    if (v10 >= 0.01 && v10 <= 0.99)
    {
      double v11 = (double)v5;
      long double v12 = (double)(a1 >> 1) / (double)v5;
      double v13 = log(v10);
      uint64_t v14 = 0;
      BOOL v8 = 0;
      long double v15 = v13 / log(v12);
      *a3 = v15;
      do
      {
        if (vabdd_f64((double)(bswap32(a2[v14]) >> 16) / 65535.0, pow((double)v14 / v11, v15)) > 0.0001) {
          break;
        }
        BOOL v8 = ++v14 >= (unint64_t)a1;
      }
      while (a1 != v14);
    }
  }
  else
  {
    return 0;
  }
  return v8;
}

void CMMCurveTag::MakeLut(uint64_t a1, uint64_t a2, unsigned int *a3, int a4)
{
  unsigned int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  BOOL v8 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  int v9 = v8;
  uint64_t v10 = v7 - 1;
  if (v7 == 1)
  {
    unsigned int v11 = *v8;
    unsigned int v12 = __rev16(v11);
    if ((v12 & 0xFFFE) == 0x1CC)
    {
      double v13 = 1.8;
      if (!a2) {
        goto LABEL_48;
      }
    }
    else if (v11 == 13058)
    {
      double v13 = 2.2;
      if (!a2) {
        goto LABEL_48;
      }
    }
    else
    {
      double v21 = (double)v12 * 0.00390625;
      BOOL v22 = v21 >= 2.4023 || v21 <= 2.398;
      if (v22) {
        double v13 = (double)v12 * 0.00390625;
      }
      else {
        double v13 = 2.4;
      }
      if (!a2) {
        goto LABEL_48;
      }
    }
    double v23 = 1.0;
    if (v13 < 1.0) {
      double v23 = 16.0;
    }
    float v24 = v23;
    float v25 = 0.0625;
    if (v13 <= 1.0) {
      float v25 = v24;
    }
    *(_DWORD *)a2 = 1;
    *(_DWORD *)(a2 + 12) = 3;
    *(unsigned char *)(a2 + CMMBase::operator delete(this - 8) = 1;
    *(void *)(a2 + 16) = 0;
    float v26 = v13;
    *(float *)(a2 + 24) = v26;
    *(void *)(a2 + 2CMMBase::operator delete(this - 8) = 1065353216;
    *(float *)(a2 + 36) = v25;
    float v27 = 0.0;
    if (v26 != 1.0 && v26 != 0.0)
    {
      double v28 = v26;
      if (v26 <= 1.0) {
        double v29 = v26;
      }
      else {
        double v29 = 1.0 / v26;
      }
      double v30 = exp2(1.0 / (v29 + -1.0) * 4.0);
      double v31 = 16.0;
      if (v29 == v28) {
        double v31 = 1.0;
      }
      float v27 = v31 * v30;
    }
    *(float *)(a2 + 40) = v27;
    goto LABEL_47;
  }
  double v13 = 0.0;
  if (IsSRGBGammaCurve(v7, v8))
  {
    if (a2)
    {
      *(_DWORD *)a2 = 1;
      *(_DWORD *)(a2 + 12) = 3;
      *(unsigned char *)(a2 + CMMBase::operator delete(this - 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(_OWORD *)(a2 + 24) = xmmword_18BE636B0;
      *(_OWORD *)(a2 + 40) = xmmword_18BE636C0;
    }
  }
  else if (a2)
  {
    float v14 = (*(float (**)(uint64_t, void, double))(*(void *)a1 + 80))(a1, 0, 0.001);
    if (v14 != 0.0)
    {
      float v15 = 16.0;
      if (v14 >= 1.0) {
        float v15 = 1.0;
      }
      if (v14 > 1.0) {
        float v15 = 0.0625;
      }
      *(_DWORD *)a2 = 1;
      *(unsigned char *)(a2 + CMMBase::operator delete(this - 8) = 1;
      *(_DWORD *)(a2 + 12) = 3;
      *(void *)(a2 + 16) = 0;
      *(float *)(a2 + 24) = v14;
      *(void *)(a2 + 2CMMBase::operator delete(this - 8) = 1065353216;
      *(float *)(a2 + 36) = v15;
      if (v14 == 1.0)
      {
        float v20 = 0.0;
      }
      else
      {
        double v16 = v14;
        if (v14 <= 1.0) {
          double v17 = v14;
        }
        else {
          double v17 = 1.0 / v14;
        }
        double v18 = exp2(1.0 / (v17 + -1.0) * 4.0);
        double v19 = 16.0;
        if (v17 == v16) {
          double v19 = 1.0;
        }
        float v20 = v19 * v18;
      }
      *(float *)(a2 + 40) = v20;
LABEL_47:
      *(void *)(a2 + 4CMMBase::operator delete(this - 8) = 0;
      *(_DWORD *)(a2 + 44) = 0;
      goto LABEL_48;
    }
    *(_DWORD *)a2 = 0;
    *(unsigned char *)(a2 + CMMBase::operator delete(this - 8) = 0;
    *(_DWORD *)(a2 + 12) = -1;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(void *)(a2 + 4CMMBase::operator delete(this - 8) = 0;
  }
LABEL_48:
  unint64_t v32 = 0;
  signed int v33 = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  uint64_t v52 = a3;
  do
  {
    if (v7)
    {
      if (v7 == 1)
      {
        unsigned int v36 = vcvtmd_s64_f64(pow((double)(int)v35 * 0.0000000596046448, v13) * 16777216.0 + 0.5);
        if (v33 > (int)v36) {
          unsigned int v36 = v33;
        }
        if (v36 >= v34) {
          unsigned int v36 = v34;
        }
      }
      else
      {
        unint64_t v37 = v32 >> 24;
        if (v7 <= (v32 >> 24))
        {
          exception = __cxa_allocate_exception(4uLL);
          _DWORD *exception = -171;
        }
        uint64_t v38 = ((uint64_t)(int)v37 << 24) / v10;
        unsigned int v39 = bswap32(v9[(int)v37]);
        HIDWORD(v40) = HIWORD(v39);
        LODWORD(v40) = v39;
        unsigned int v36 = ((v40 >> 23) + 1) >> 1;
        if (v35 != v38)
        {
          unsigned int v41 = bswap32(*(unsigned __int16 *)((char *)v9 + ((uint64_t)((v37 << 32) + 0x100000000) >> 31)));
          HIDWORD(v42) = HIWORD(v41);
          LODWORD(v42) = v41;
          uint64_t v43 = (v35 - (int)v38) * v10 * (int)((((v42 >> 23) + 1) >> 1) - v36);
          if (v43)
          {
            uint64_t v44 = v43 + 0x800000;
            BOOL v22 = v43 < -8388608;
            unint64_t v45 = v43 + 25165823;
            if (!v22) {
              unint64_t v45 = v44;
            }
            v36 += v45 >> 24;
          }
        }
      }
    }
    else
    {
      unsigned int v36 = v35;
    }
    *a3++ = v36;
    v35 += 4096;
    v34 += 0x10000;
    v33 += 256;
    v32 += (unint64_t)(v7 - 1) << 12;
  }
  while (v35 != 16781312);
  if (a4 == 1 && v7 > 2)
  {
    unsigned int v46 = v52[2056];
    memmove(v52 + 2058, v52 + 2057, 0x1FD8uLL);
    v52[2057] = v46;
    v52[2055] = v46;
  }
  else if (!a4 && v7 >= 3)
  {
    unsigned int v47 = v52[4096];
    int v48 = v52[1] - *v52;
    if (v48 < 0) {
      int v48 = *v52 - v52[1];
    }
    if (v48 <= 0x7FF) {
      v52[1] = *v52;
    }
    int v49 = v47 - v52[4095];
    if (v49 < 0) {
      int v49 = v52[4095] - v47;
    }
    if (v49 <= 0x7FF) {
      v52[4095] = v47;
    }
  }
}

void *CMMTable::MakeFloatCopy(CMMTable *this, void **a2, CMMMemMgr *a3)
{
  if (*((void *)this + 4) <= 0x1000uLL)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  unsigned int v5 = CMMBase::NewInternal(0x28uLL, a2);
  void *v5 = &unk_1ED985520;
  v5[1] = 1;
  v5[3] = 0;
  v5[4] = 16388;
  v5[2] = CMMBase::NewInternal(0x4004uLL, a2);
  double v6 = (int *)CMMTable::FloatData(*((void *)this + 2), *((void *)this + 3));
  unsigned int v7 = (float *)CMMTable::FloatData(v5[2], v5[3]);
  uint64_t v8 = 4097;
  do
  {
    int v9 = *v6++;
    *v7++ = (float)v9 * 0.000000059605;
    --v8;
  }
  while (v8);
  return v5;
}

void CMMCurveTag::InvertFloatParametricLUT(uint64_t a1)
{
  if (*(_DWORD *)a1 == 1)
  {
    float v2 = *(float *)(a1 + 24);
    float v3 = *(float *)(a1 + 28);
    float v5 = *(float *)(a1 + 32);
    float v4 = *(float *)(a1 + 36);
    float v6 = *(float *)(a1 + 40);
    switch(*(_DWORD *)(a1 + 12))
    {
      case 0:
        float v2 = 1.0 / v2;
        break;
      case 1:
        *(_DWORD *)(a1 + 12) = 4;
        float v7 = 1.0 / v2;
        float v8 = powf(v3, v2);
        float v9 = (float)-v5 / v3;
        float v3 = 1.0 / v8;
        *(float *)(a1 + 44) = v9;
        *(void *)(a1 + 4CMMBase::operator delete(this - 8) = 0;
        float v6 = 0.0;
        float v4 = 0.0;
        float v5 = 0.0;
        float v2 = v7;
        break;
      case 2:
        *(_DWORD *)(a1 + 12) = 4;
        float v10 = 1.0;
        float v11 = 1.0 / v2;
        float v12 = powf(v3, v2);
        float v13 = -v5;
        float v5 = v4 / v12;
        *(float *)(a1 + 44) = v13 / v3;
        *(void *)(a1 + 4CMMBase::operator delete(this - 8) = 0;
        float v6 = v4;
        float v4 = 0.0;
        goto LABEL_10;
      case 3:
        *(_DWORD *)(a1 + 12) = 4;
        float v10 = 1.0;
        float v11 = 1.0 / v2;
        float v12 = powf(v3, v2);
        float v6 = v4 * v6;
        if (v4 == 0.0) {
          float v4 = 0.0;
        }
        else {
          float v4 = 1.0 / v4;
        }
        *(float *)(a1 + 44) = (float)-v5 / v3;
        *(void *)(a1 + 4CMMBase::operator delete(this - 8) = 0;
        float v5 = 0.0;
LABEL_10:
        float v3 = v10 / v12;
        float v2 = v11;
        break;
      case 4:
        float v15 = *(float *)(a1 + 44);
        float v14 = *(float *)(a1 + 48);
        *(_DWORD *)(a1 + 12) = 4;
        float v16 = 1.0 / v2;
        float v17 = powf(v3, v2);
        float v18 = -v5;
        float v5 = v15 / v17;
        BOOL v19 = v4 == 0.0;
        float v6 = v14 + (float)(v4 * v6);
        float v20 = v14 / v4;
        if (v4 == 0.0) {
          float v4 = 0.0;
        }
        else {
          float v4 = 1.0 / v4;
        }
        float v21 = v18 / v3;
        if (v19) {
          float v22 = 0.0;
        }
        else {
          float v22 = v20;
        }
        *(float *)(a1 + 44) = v21;
        *(float *)(a1 + 4CMMBase::operator delete(this - 8) = v22;
        *(_DWORD *)(a1 + 52) = 0;
        float v3 = 1.0 / v17;
        float v2 = v16;
        break;
      default:
        break;
    }
    *(float *)(a1 + 24) = v2;
    *(float *)(a1 + 2CMMBase::operator delete(this - 8) = v3;
    *(float *)(a1 + 32) = v5;
    *(float *)(a1 + 36) = v4;
    *(float *)(a1 + 40) = v6;
    *(int8x8_t *)(a1 + 44) = vand_s8(*(int8x8_t *)(a1 + 44), vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)(a1 + 44)), (int8x8_t)vcgez_f32(*(float32x2_t *)(a1 + 44))));
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(a1 + 52);
  }
}

uint64_t CMMPQCurveTag::Initialize(uint64_t this)
{
  unsigned int v1 = **(_DWORD **)(this + 40);
  *(_DWORD *)(this + 52) = bswap32(v1);
  if (v1 == 538988880)
  {
    uint64_t v2 = this;
    if (*(void *)(this + 32) >= 0xCuLL) {
      uint64_t v3 = 0;
    }
    else {
      uint64_t v3 = 4294967126;
    }
    CMMThrowExceptionOnError(v3);
    if (*(_DWORD *)(*(void *)(v2 + 40) + 8) == -2078277632) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = 4294967126;
    }
    return CMMThrowExceptionOnError(v4);
  }
  return this;
}

double CMMPQCurveTag::EvaluateGamma(CMMPQCurveTag *this, BOOL *a2, double a3)
{
  return 0.0;
}

uint64_t CMMPQCurveTag::MakeInvertedTRC(uint64_t a1, uint64_t a2, float a3, uint64_t a4, uint64_t *a5)
{
  *(float *)(a1 + 60) = a3;
  {
    CMMMemMgr::CMMMemMgr((CMMMemMgr *)&CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::m);
    __cxa_atexit((void (*)(void *))CMMMemMgr::~CMMMemMgr, &CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::m, &dword_18BE08000);
  }
  unint64_t v8 = 0x1E9154000uLL;
  {
    unint64_t v8 = 0x1E9154000uLL;
    if (v24)
    {
      CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::a = *(_DWORD *)(a1 + 72);
      unint64_t v8 = 0x1E9154000;
    }
  }
  unint64_t v9 = 0x1E9154000uLL;
  {
    unint64_t v9 = 0x1E9154000uLL;
    unint64_t v8 = 0x1E9154000;
    if (v25)
    {
      CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::b = *(_DWORD *)(a1 + 76);
      unint64_t v9 = 0x1E9154000;
      unint64_t v8 = 0x1E9154000;
    }
  }
  unint64_t v10 = 0x1E9154000uLL;
  {
    unint64_t v10 = 0x1E9154000uLL;
    unint64_t v9 = 0x1E9154000;
    unint64_t v8 = 0x1E9154000;
    if (v26)
    {
      CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::c = *(_DWORD *)(a1 + 80);
      unint64_t v10 = 0x1E9154000;
      unint64_t v9 = 0x1E9154000;
      unint64_t v8 = 0x1E9154000;
    }
  }
  unint64_t v11 = 0x1E9154000uLL;
  {
    unint64_t v11 = 0x1E9154000uLL;
    unint64_t v10 = 0x1E9154000;
    unint64_t v9 = 0x1E9154000;
    unint64_t v8 = 0x1E9154000;
    if (v27)
    {
      CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::d = *(_DWORD *)(a1 + 84);
      unint64_t v11 = 0x1E9154000;
      unint64_t v10 = 0x1E9154000;
      unint64_t v9 = 0x1E9154000;
      unint64_t v8 = 0x1E9154000;
    }
  }
  unint64_t v12 = 0x1E9154000uLL;
  {
    unint64_t v12 = 0x1E9154000uLL;
    unint64_t v11 = 0x1E9154000;
    unint64_t v10 = 0x1E9154000;
    unint64_t v9 = 0x1E9154000;
    unint64_t v8 = 0x1E9154000;
    if (v28)
    {
      CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::e = *(_DWORD *)(a1 + 88);
      unint64_t v12 = 0x1E9154000;
      unint64_t v11 = 0x1E9154000;
      unint64_t v10 = 0x1E9154000;
      unint64_t v9 = 0x1E9154000;
      unint64_t v8 = 0x1E9154000;
    }
  }
  int v13 = *(_DWORD *)(v8 + 3624);
  int v14 = *(_DWORD *)(v9 + 3640);
  int v15 = *(_DWORD *)(v10 + 3656);
  int v16 = *(_DWORD *)(v11 + 3672);
  int v17 = *(_DWORD *)(v12 + 3688);
  int v18 = *(_DWORD *)(a1 + 60);
  if (CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::predicate == -1)
  {
    if (!a2) {
      goto LABEL_11;
    }
  }
  else
  {
    dispatch_once(&CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::predicate, &__block_literal_global_235);
    if (!a2) {
      goto LABEL_11;
    }
  }
  *(_OWORD *)a2 = xmmword_18BE63710;
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 2CMMBase::operator delete(this - 8) = v13;
  *(_DWORD *)(a2 + 32) = v14;
  *(_DWORD *)(a2 + 36) = v15;
  *(_DWORD *)(a2 + 40) = v16;
  *(_DWORD *)(a2 + 44) = v17;
  *(_DWORD *)(a2 + 4CMMBase::operator delete(this - 8) = 0;
  *(_DWORD *)(a2 + 52) = v18;
  uint64_t v19 = CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::float_table;
  *(void *)(a2 + 16) = CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::float_table;
  uint64_t v20 = *(void *)(v19 + 8);
  if (v20) {
    *(void *)(v19 + CMMBase::operator delete(this - 8) = v20 + 1;
  }
LABEL_11:
  uint64_t v21 = CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::fixed_table;
  uint64_t v22 = *(void *)(CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::fixed_table + 8);
  if (v22) {
    *(void *)(CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::fixed_table + CMMBase::operator delete(this - 8) = v22 + 1;
  }
  *a5 = CMMPQCurveTag::copy_pq_curve_table(a1, 0);
  return v21;
}

void sub_18BE4A308(_Unwind_Exception *a1)
{
}

uint64_t CMMPQCurveTag::copy_pq_curve_table(uint64_t a1, uint64_t a2)
{
  {
    CMMMemMgr::CMMMemMgr((CMMMemMgr *)&CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::m);
    __cxa_atexit((void (*)(void *))CMMMemMgr::~CMMMemMgr, &CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::m, &dword_18BE08000);
  }
  {
    if (v23)
    {
      *(float *)&CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::a = 1.0 / *(float *)(a1 + 76);
    }
  }
  {
    if (v24)
    {
      *(float *)&CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::b = 1.0 / *(float *)(a1 + 72);
    }
  }
  {
    int v25 = v5;
    float v5 = v25;
    if (v26)
    {
      CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::c = *(_DWORD *)(a1 + 80);
      float v5 = v25;
    }
  }
  {
    int v27 = v5;
    float v5 = v27;
    if (v28)
    {
      CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::d = *(_DWORD *)(a1 + 84);
      float v5 = v27;
    }
  }
  {
    double v29 = v5;
    float v5 = v29;
    if (v30)
    {
      CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::e = *(_DWORD *)(a1 + 88);
      float v5 = v29;
    }
  }
  uint64_t v9 = *(void *)(a1 + 64);
  int v10 = *((_DWORD *)v4 + 28);
  int v11 = *((_DWORD *)v5 + 32);
  int v12 = *((_DWORD *)v6 + 36);
  int v13 = *((_DWORD *)v7 + 40);
  int v14 = *((_DWORD *)v8 + 44);
  int v15 = *(_DWORD *)(a1 + 56);
  if (CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::predicate[0] == -1)
  {
    if (!a2) {
      goto LABEL_16;
    }
  }
  else
  {
    dispatch_once(CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::predicate, &__block_literal_global_677);
    if (!a2) {
      goto LABEL_16;
    }
  }
  if (v9) {
    int v16 = 17;
  }
  else {
    int v16 = 8;
  }
  *(_DWORD *)a2 = v9 == 0;
  *(_DWORD *)(a2 + 4) = v16;
  *(void *)(a2 + CMMBase::operator delete(this - 8) = 0x500000000;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 2CMMBase::operator delete(this - 8) = v10;
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = v12;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  *(_DWORD *)(a2 + 4CMMBase::operator delete(this - 8) = 893662952;
  *(_DWORD *)(a2 + 52) = v15;
  uint64_t v17 = *(void *)(a1 + 64);
  if (!v17) {
    uint64_t v17 = CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::float_table;
  }
  *(void *)(a2 + 16) = v17;
  uint64_t v20 = *(void *)(v17 + 8);
  int v18 = (void *)(v17 + 8);
  uint64_t v19 = v20;
  if (v20) {
    *int v18 = v19 + 1;
  }
LABEL_16:
  uint64_t result = CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::fixed_table;
  uint64_t v22 = *(void *)(CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::fixed_table + 8);
  if (v22) {
    *(void *)(CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::fixed_table + CMMBase::operator delete(this - 8) = v22 + 1;
  }
  return result;
}

void sub_18BE4A65C(_Unwind_Exception *a1)
{
}

void *___ZN13CMMPQCurveTag19copy_pq_curve_tableEP15CMMFloatLutInfo_block_invoke()
{
  uint64_t v0 = CMMBase::NewInternal(0x28uLL, &CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::m);
  v0[2] = 0;
  v0[3] = &kPQEOTFData;
  *uint64_t v0 = &unk_1ED985520;
  v0[1] = 0;
  v0[4] = 21512;
  CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::fixed_table = (uint64_t)v0;
  uint64_t result = CMMBase::NewInternal(0x28uLL, &CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::m);
  result[2] = 0;
  result[3] = &kPQEOTFFloatData;
  *uint64_t result = &unk_1ED985520;
  result[1] = 0;
  result[4] = 16388;
  CMMPQCurveTag::copy_pq_curve_table(CMMFloatLutInfo *)::float_table = (uint64_t)result;
  return result;
}

int *___ZN13CMMPQCurveTag23copy_inv_pq_curve_tableEP15CMMFloatLutInfo_block_invoke()
{
  uint64_t v0 = CMMBase::NewInternal(0x28uLL, &CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::m);
  *uint64_t v0 = &unk_1ED985520;
  v0[1] = 1;
  v0[3] = 0;
  v0[4] = 21512;
  v0[2] = CMMBase::NewInternal(0x5408uLL, &CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::m);
  CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::fixed_table = (uint64_t)v0;
  unsigned int v1 = CMMBase::NewInternal(0x28uLL, &CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::m);
  void *v1 = &unk_1ED985520;
  v1[1] = 1;
  v1[3] = 0;
  v1[4] = 16388;
  uint64_t v2 = CMMBase::NewInternal(0x4004uLL, &CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::m);
  v1[2] = v2;
  CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::float_table = (uint64_t)v1;
  uint64_t v3 = *(int **)(CMMPQCurveTag::copy_inv_pq_curve_table(CMMFloatLutInfo *)::fixed_table + 16);
  if (!v3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  uint64_t v4 = v2;
  CMMTable::MutableFloatData((uint64_t)v2);
  uint64_t v5 = 0;
  for (unint64_t i = 0; i != 16781312; i += 4096)
  {
    float v7 = powf((float)i * 0.000000059605, 0.1593);
    float v8 = powf((float)((float)(v7 * 18.852) + 0.83594) / (float)((float)(v7 * 18.688) + 1.0), 78.844);
    float v9 = -v8;
    if ((float)((float)i * 0.000000059605) >= 0.0) {
      float v9 = v8;
    }
    float v10 = 0.0;
    if (fabsf(v9) == INFINITY || v9 >= 0.0 && (float v10 = v9, v9 > 1.0)) {
      float v10 = 1.0;
    }
    *(float *)((char *)v4 + v5 * 4) = v10;
    int v11 = vcvtmd_s64_f64((float)(v10 * 16777000.0) + 0.5);
    int v12 = v11 & ~(v11 >> 31);
    if (v12 >= 0x1000000) {
      int v12 = 0x1000000;
    }
    v3[v5++] = v12;
  }

  return MakeLookups(v3);
}

uint64_t CMMTable::MutableFloatData(uint64_t this)
{
  if (!this)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  return this;
}

uint64_t CMMPQCurveTag::MakeTRC(uint64_t a1, uint64_t a2, float a3)
{
  if (*(void *)(a1 + 64)) {
    a3 = 1.0;
  }
  *(float *)(a1 + 56) = a3;
  return CMMPQCurveTag::copy_pq_curve_table(a1, a2);
}

uint64_t CMMPQCurveTag::SameCurve(CMMPQCurveTag *this, CMMCurveTag *lpsrc, CMMCurveTag *a3)
{
  if (lpsrc)
  {
    if (a3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = 0;
    if (a3)
    {
LABEL_3:
      if (v5) {
        return 0;
      }
      goto LABEL_7;
    }
  }
  BOOL v6 = 1;
  if (v5) {
    return 0;
  }
LABEL_7:
  if (!v6) {
    return 0;
  }
  float v7 = *(uint64_t (**)(CMMCurveTag *, CMMCurveTag *, CMMCurveTag *))(*(void *)lpsrc + 56);

  return v7(lpsrc, lpsrc, a3);
}

uint64_t CMMPQCurveTag::GetCurveData(CMMPQCurveTag *this)
{
  return 0;
}

uint64_t CMMPQCurveTag::GetCurveCount(CMMPQCurveTag *this)
{
  return 0;
}

uint64_t CMMPQCurveTag::Validate(CMMPQCurveTag *this, uint64_t a2, uint64_t a3)
{
  if (a3 == 3 && a2 == 3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 4294967126;
  }
  CMMThrowExceptionOnError(v5);
  if (*(_DWORD *)(*((void *)this + 5) + 8) == -2078277632) {
    return 0;
  }
  else {
    return 4294967126;
  }
}

void CMMPQCurveTag::~CMMPQCurveTag(CMMPQCurveTag *this)
{
  CMMPQCurveTag::~CMMPQCurveTag(this);

  CMMBase::operator delete(v1);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1ED982180;
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    uint64_t v3 = v2[1];
    if (v3)
    {
      uint64_t v4 = v3 - 1;
      v2[1] = v4;
      if (!v4) {
        (*(void (**)(void *))(*v2 + 8))(v2);
      }
    }
  }

  CMMTag::~CMMTag(this);
}

uint64_t CMMLutBtoATag::GetPostCLUTLutSize(CMMLutBtoATag *this, unsigned int a2)
{
  uint64_t result = *((void *)this + a2 + 61);
  if (result) {
    return (*(unsigned int (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

uint64_t CMMLutBtoATag::GetPreCLUTLutSize(CMMLutBtoATag *this, unsigned int a2)
{
  uint64_t result = *((void *)this + a2 + 44);
  if (result) {
    return (*(unsigned int (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

uint64_t CMMLutBtoATag::MakeOutputTRC()
{
  return 0;
}

uint64_t CMMLutBtoATag::GetOutputMatrix(CMMLutBtoATag *this)
{
  return 0;
}

uint64_t CMMLutBtoATag::MakePostCLUTTRC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  if (*(_DWORD *)(a1 + 480) <= a2) {
    return 0;
  }
  BOOL v6 = a2 - 1 < 2 && a5 == 1347182946;
  uint64_t v7 = *(void *)(a1 + 8 * a2 + 488);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, BOOL, float))(*(void *)v7 + 64))(v7, a3, a4, v6, 1.0);
}

uint64_t CMMLutBtoATag::MakePreCLUTTRC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  if (*(_DWORD *)(a1 + 344) <= a2) {
    return 0;
  }
  BOOL v6 = a2 - 1 < 2 && a5 == 1347182946;
  uint64_t v7 = *(void *)(a1 + 8 * a2 + 352);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, BOOL, float))(*(void *)v7 + 64))(v7, a3, a4, v6, 1.0);
}

uint64_t CMMLutBtoATag::GetInputMatrix(CMMLutBtoATag *this)
{
  int v3 = *((_DWORD *)this + 28);
  uint64_t result = (uint64_t)this + 112;
  if (v3 == 0x10000 && *((_DWORD *)this + 33) == 0x10000 && *((_DWORD *)this + 38) == 0x10000)
  {
    v4.i64[0] = vrev64q_s32(*(int32x4_t *)((char *)this + 116)).u64[0];
    v4.i64[1] = *(void *)((char *)this + 124);
    uint8x8_t v5 = (uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v4), (int16x8_t)vceqzq_s32(*(int32x4_t *)((char *)this + 136)))));
    v5.i8[0] = vmaxv_u8(v5);
    if (((*((_DWORD *)this + 39) == 0) & ~v5.i32[0]) != 0) {
      return 0;
    }
  }
  return result;
}

uint64_t CMMLutBtoATag::MakeInputTRC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  if (*(_DWORD *)(a1 + 208) <= a2) {
    return 0;
  }
  BOOL v6 = a2 - 1 < 2 && a5 == 1347182946;
  uint64_t v7 = *(void *)(a1 + 8 * a2 + 216);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, BOOL, float))(*(void *)v7 + 64))(v7, a3, a4, v6, 1.0);
}

uint64_t CMMLutTag::GetOutputLutSize(CMMLutTag *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 152))();
}

uint64_t CMMLutTag::GetInputLutSize(CMMLutTag *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 144))();
}

unint64_t CMMLutTag::InterpolationProtectionZone(CMMLutTag *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t MaxCLUTPoints = *((unsigned int *)this + 25);
  if (!MaxCLUTPoints)
  {
    if (*((unsigned char *)this + 76)) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = 4294967246;
    }
    CMMThrowExceptionOnError(v10);
    unint64_t MaxCLUTPoints = CMMLutTag::GetMaxCLUTPoints(*((unsigned __int8 *)this + 50), (unsigned __int8 *)this + 76);
  }
  return CMMLutTagBase::CalculateProtectionZone(MaxCLUTPoints, *((unsigned __int8 *)this + 50), *((unsigned __int8 *)this + 51), a4, a5, a6, a7, a8)* *((unsigned __int8 *)this + 92);
}

unint64_t CMMLutTag::GetMaxCLUTPoints(unsigned int a1, unsigned __int8 *a2)
{
  if (!a2) {
    return 0;
  }
  unint64_t v4 = *a2;
  if (v4 <= 1) {
    uint64_t v5 = 4294967126;
  }
  else {
    uint64_t v5 = 0;
  }
  CMMThrowExceptionOnError(v5);
  if (a1 >= 2)
  {
    uint64_t v6 = a1 - 1;
    uint64_t v7 = a2 + 1;
    do
    {
      if (*v7 <= 1u) {
        uint64_t v8 = 4294967126;
      }
      else {
        uint64_t v8 = 0;
      }
      CMMThrowExceptionOnError(v8);
      unsigned int v10 = *v7++;
      unint64_t v9 = v10;
      if (v4 <= v10) {
        unint64_t v4 = v9;
      }
      --v6;
    }
    while (v6);
  }
  return v4;
}

unint64_t CMMLutTagBase::CalculateProtectionZone(unint64_t this, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    return 0;
  }
  unint64_t v11 = 0;
  for (uint64_t i = 0; i != a2; ++i)
  {
    if (i)
    {
      uint64_t v13 = i;
      unint64_t v14 = 1;
      do
      {
        unint64_t v15 = v14 * this;
        BOOL v16 = v14 * this >= v14 && v15 >= this;
        uint64_t v17 = v16;
        CMMThrowExceptionWithLog(v17, "Overflow in Power", a3, a4, a5, a6, a7, a8);
        unint64_t v14 = v15;
        --v13;
      }
      while (v13);
    }
    else
    {
      unint64_t v15 = 1;
    }
    if (is_mul_ok(a3, v15)) {
      unsigned int v18 = 0;
    }
    else {
      unsigned int v18 = -170;
    }
    if (a3) {
      unint64_t v19 = v15 * a3;
    }
    else {
      unint64_t v19 = 0;
    }
    if (a3) {
      uint64_t v20 = v18;
    }
    else {
      uint64_t v20 = 0;
    }
    CMMThrowExceptionOnError(v20);
    BOOL v16 = __CFADD__(v19, v11);
    v11 += v19;
    if (v16) {
      uint64_t v21 = 4294967126;
    }
    else {
      uint64_t v21 = 0;
    }
    CMMThrowExceptionOnError(v21);
  }
  if (v11 > 0x20000000)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  return v11;
}

unint64_t CMMLutTag::GetCLutPoints(CMMLutTag *this)
{
  if (*((_DWORD *)this + 25)) {
    return *((unsigned int *)this + 25);
  }
  else {
    return CMMLutTag::GetMaxCLUTPoints(*((unsigned __int8 *)this + 50), (unsigned __int8 *)this + 76);
  }
}

void *CMMLutTag::CopyClut(CMMLutTag *this, CMMMemMgr *a2)
{
  uint64_t v221 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 13);
  if (!v2) {
    return 0;
  }
  if (*((_DWORD *)this + 25))
  {
    if (*((unsigned char *)this + 92) == 2)
    {
      uint64_t v5 = *(void *)(v2 + 32);
      uint64_t v6 = (*(uint64_t (**)(CMMLutTag *))(*(void *)this + 72))(this);
      unint64_t v7 = v6 + v5;
      if (__CFADD__(v6, v5)) {
        uint64_t v8 = 4294967246;
      }
      else {
        uint64_t v8 = 0;
      }
      CMMThrowExceptionOnError(v8);
      unint64_t v9 = CMMBase::NewInternal(0x28uLL, (void **)a2);
      uint64_t v10 = 1;
      *unint64_t v9 = &unk_1ED985520;
      v9[1] = 1;
      v9[3] = 0;
      _OWORD v9[4] = v7;
      v9[2] = CMMBase::NewInternal(v7, (void **)a2);
      unint64_t v11 = (unsigned __int16 *)CMMTable::FloatData(*(void *)(*((void *)this + 13) + 16), *(void *)(*((void *)this + 13) + 24));
      unsigned int v18 = (_WORD *)CMMTable::FloatData(v9[2], v9[3]);
      int v19 = *((unsigned __int8 *)this + 50);
      if (!*((unsigned char *)this + 50)) {
        goto LABEL_17;
      }
      unsigned int v20 = *((_DWORD *)this + 25);
      LODWORD(v10) = 1;
      do
      {
        unsigned int v21 = v10;
        uint64_t v10 = v10 * v20;
        BOOL v22 = v10 >= v21 && v10 >= v20;
        uint64_t v23 = v22;
        CMMThrowExceptionWithLog(v23, "Overflow in Power", v12, v13, v14, v15, v16, v17);
        --v19;
      }
      while (v19);
      if (v10)
      {
LABEL_17:
        uint64_t v24 = 0;
        uint64_t v25 = *((unsigned __int8 *)this + 51);
        do
        {
          uint64_t v26 = v25;
          if (v25)
          {
            do
            {
              unsigned int v27 = *v11++;
              *v18++ = bswap32(v27) >> 16;
              --v26;
            }
            while (v26);
          }
          ++v24;
        }
        while (v24 != v10);
      }
    }
    else
    {
      uint64_t v57 = (*(uint64_t (**)(CMMLutTag *))(*(void *)this + 72))(this);
      uint64_t v58 = 2 * v57;
      CMMThrowExceptionOnError((v57 >> 63) & 0xFFFFFFCELL);
      uint64_t v59 = *(void *)(*((void *)this + 13) + 32);
      unint64_t v60 = v58 + 2 * v59;
      if (__CFADD__(v58, 2 * v59)) {
        uint64_t v61 = 4294967246;
      }
      else {
        uint64_t v61 = 0;
      }
      CMMThrowExceptionOnError(v61);
      unint64_t v9 = CMMBase::NewInternal(0x28uLL, (void **)a2);
      uint64_t v62 = 1;
      *unint64_t v9 = &unk_1ED985520;
      v9[1] = 1;
      v9[3] = 0;
      _OWORD v9[4] = v60;
      v9[2] = CMMBase::NewInternal(v60, (void **)a2);
      uint64_t v63 = (unsigned __int8 *)CMMTable::FloatData(*(void *)(*((void *)this + 13) + 16), *(void *)(*((void *)this + 13) + 24));
      float32x2_t v70 = (_WORD *)CMMTable::FloatData(v9[2], v9[3]);
      int v71 = *((unsigned __int8 *)this + 50);
      if (!*((unsigned char *)this + 50)) {
        goto LABEL_50;
      }
      unsigned int v72 = *((_DWORD *)this + 25);
      LODWORD(v62) = 1;
      do
      {
        unsigned int v73 = v62;
        uint64_t v62 = v62 * v72;
        BOOL v75 = v62 >= v73 && v62 >= v72;
        CMMThrowExceptionWithLog(v75, "Overflow in Power", v64, v65, v66, v67, v68, v69);
        --v71;
      }
      while (v71);
      if (v62)
      {
LABEL_50:
        uint64_t v76 = 0;
        uint64_t v77 = *((unsigned __int8 *)this + 51);
        do
        {
          uint64_t v78 = v77;
          if (v77)
          {
            do
            {
              __int16 v79 = *v63++;
              *v70++ = v79 | (v79 << 8);
              --v78;
            }
            while (v78);
          }
          ++v76;
        }
        while (v76 != v62);
      }
    }
    return v9;
  }
  unint64_t MaxCLUTPoints = CMMLutTag::GetMaxCLUTPoints(*((unsigned __int8 *)this + 50), (unsigned __int8 *)this + 76);
  double v29 = (void *)*((void *)this + 13);
  int v30 = *((unsigned __int8 *)this + 92);
  uint64_t v31 = v29[4];
  uint64_t v32 = (*(uint64_t (**)(CMMLutTag *))(*(void *)this + 72))(this);
  BOOL v22 = __CFADD__(v32, v31);
  uint64_t v33 = v32 + v31;
  if (v22) {
    uint64_t v34 = 4294967246;
  }
  else {
    uint64_t v34 = 0;
  }
  CMMThrowExceptionOnError(v34);
  unint64_t v35 = 2 * v33;
  CMMThrowExceptionOnError((v33 >> 63) & 0xFFFFFFCELL);
  unsigned int v36 = CMMBase::NewInternal(0x28uLL, (void **)a2);
  *unsigned int v36 = &unk_1ED985520;
  v36[1] = 1;
  void v36[3] = 0;
  v36[4] = v35;
  unint64_t v37 = CMMBase::NewInternal(v35, (void **)a2);
  uint64_t v201 = v36;
  v36[2] = v37;
  int v38 = *((unsigned __int8 *)this + 76);
  unint64_t v39 = *((unsigned __int8 *)this + 50);
  if (v39 >= 2)
  {
    unint64_t v40 = v39 - 1;
    unsigned int v41 = (unsigned __int8 *)this + 77;
    do
    {
      int v42 = *v41++;
      v38 *= v42;
      --v40;
    }
    while (v40);
  }
  uint64_t v43 = (_WORD *)CMMTable::FloatData((uint64_t)v37, v201[3]);
  uint64_t v44 = v29[2];
  uint64_t v45 = v29[3];
  if (v30 == 1)
  {
    unsigned int v46 = (unsigned __int8 *)CMMTable::FloatData(v44, v45);
    if (v38)
    {
      int v53 = 0;
      unsigned int v54 = *((unsigned __int8 *)this + 51);
      do
      {
        if (v54)
        {
          int v55 = 0;
          do
          {
            int v56 = *v46++;
            *v43++ = __rev16(v56 | (v56 << 8));
            ++v55;
          }
          while (v54 > (unsigned __int16)v55);
        }
        ++v53;
      }
      while (v53 != v38);
    }
  }
  else
  {
    uint64_t v80 = (const void *)CMMTable::FloatData(v44, v45);
    memcpy(v43, v80, (2 * v38));
  }
  uint64_t v81 = *((unsigned __int8 *)this + 50);
  uint64_t v210 = *((unsigned __int8 *)this + 51);
  unint64_t v203 = 2 * v210;
  uint64_t v206 = v81;
  unint64_t v82 = 1;
  if (!*((unsigned char *)this + 50)) {
    goto LABEL_65;
  }
  do
  {
    unint64_t v83 = v82;
    v82 *= MaxCLUTPoints;
    BOOL v85 = v82 >= v83 && v82 >= MaxCLUTPoints;
    CMMThrowExceptionWithLog(v85, "Overflow in Power", v47, v48, v49, v50, v51, v52);
    --v81;
  }
  while (v81);
  if (!v82)
  {
    unint64_t v86 = 0;
    uint64_t v87 = 0;
  }
  else
  {
LABEL_65:
    unint64_t v86 = v203 * v82;
    if (is_mul_ok(v82, v203)) {
      uint64_t v87 = 0;
    }
    else {
      uint64_t v87 = 4294967246;
    }
  }
  CMMThrowExceptionOnError(v87);
  uint64_t v88 = (*(uint64_t (**)(CMMLutTag *))(*(void *)this + 72))(this);
  unint64_t v202 = v86;
  unint64_t v89 = v88 + v86;
  if (__CFADD__(v88, v86)) {
    uint64_t v90 = 4294967246;
  }
  else {
    uint64_t v90 = 0;
  }
  CMMThrowExceptionOnError(v90);
  int v199 = CMMBase::NewInternal(0x28uLL, (void **)a2);
  *int v199 = &unk_1ED985520;
  v199[1] = 1;
  v199[3] = 0;
  v199[4] = v89;
  v199[2] = CMMBase::NewInternal(v89, (void **)a2);
  unint64_t v91 = CMMBase::NewInternal(0x28uLL, (void **)a2);
  int8x8_t v207 = (char *)this + 76;
  unint64_t v205 = MaxCLUTPoints;
  uint64_t v98 = v206;
  int8x8_t v200 = v91;
  if (v206)
  {
    uint64_t v99 = 1;
    do
    {
      uint64_t v100 = v99;
      v99 *= 2;
      BOOL v102 = v100 >= 0 && v99 != 0;
      CMMThrowExceptionWithLog(v102, "Overflow in Power", v92, v93, v94, v95, v96, v97);
      --v98;
    }
    while (v98);
    unint64_t v103 = 8 * v100;
    float v104 = v200;
  }
  else
  {
    float v104 = v91;
    unint64_t v103 = 4;
  }
  *float v104 = &unk_1ED985520;
  v104[1] = 1;
  v104[3] = 0;
  v104[4] = v103;
  BOOL v105 = CMMBase::NewInternal(v103, (void **)a2);
  v104[2] = v105;
  unint64_t v106 = (_DWORD *)CMMTable::FloatData((uint64_t)v105, v104[3]);
  double v213 = this;
  unint64_t v113 = *((unsigned __int8 *)this + 50);
  *unint64_t v106 = *((unsigned __int8 *)this + 51);
  unint64_t v204 = v82;
  if (v113 >= 2)
  {
    unint64_t v114 = v106;
    uint64_t v115 = 0;
    for (uint64_t i = 1; i != v113; ++i)
    {
      if (i == 1)
      {
        uint64_t v119 = 1;
      }
      else
      {
        int v117 = 1;
        uint64_t v118 = v115;
        do
        {
          uint64_t v119 = (2 * v117);
          BOOL v121 = v117 >= 0 && v119 != 0;
          CMMThrowExceptionWithLog(v121, "Overflow in Power", v107, v108, v109, v110, v111, v112);
          int v117 = v119;
          --v118;
        }
        while (v118);
      }
      int v122 = v114[v119 - 1];
      int v123 = v207[i];
      int v124 = 1;
      uint64_t v125 = i;
      do
      {
        unsigned int v126 = 2 * v124;
        BOOL v128 = v124 >= 0 && v126 != 0;
        CMMThrowExceptionWithLog(v128, "Overflow in Power", v107, v108, v109, v110, v111, v112);
        int v124 = v126;
        --v125;
      }
      while (v125);
      v114[v126 - 1] = v122 * v123;
      ++v115;
    }
    uint64_t v129 = 1;
    uint64_t v130 = 2;
    while (1)
    {
      uint64_t v211 = v129;
      uint64_t v131 = 1;
      do
      {
        BOOL v132 = v131 < 0;
        v131 *= 2;
        uint64_t v134 = !v132 && v131 != 0;
        CMMThrowExceptionWithLog(v134, "Overflow in Power", v107, v108, v109, v110, v111, v112);
        --v129;
      }
      while (v129);
      uint64_t v208 = v130;
      uint64_t v135 = v130;
      uint64_t v136 = 1;
      do
      {
        unint64_t v137 = 2 * v136;
        BOOL v139 = v136 >= 0 && v137 != 0;
        CMMThrowExceptionWithLog(v139, "Overflow in Power", v107, v108, v109, v110, v111, v112);
        uint64_t v136 = v137;
        --v135;
      }
      while (v135);
      uint64_t v140 = v131 | 1;
      if ((v131 | 1uLL) < v137) {
        break;
      }
LABEL_148:
      uint64_t v129 = v211 + 1;
      uint64_t v130 = v208 + 1;
      if (v211 + 1 == v113) {
        goto LABEL_149;
      }
    }
LABEL_123:
    uint64_t v141 = 0;
    int v142 = 0;
    uint64_t v143 = v140;
    while (!v141)
    {
      if (v143)
      {
        uint64_t v151 = 1;
LABEL_145:
        v142 += v114[v151 - 1];
      }
LABEL_146:
      if (++v141 == v113)
      {
        v114[v131] = v142;
        uint64_t v140 = v143 + 1;
        uint64_t v131 = v143;
        if (v143 + 1 == v137) {
          goto LABEL_148;
        }
        goto LABEL_123;
      }
    }
    uint64_t v144 = v141;
    uint64_t v145 = 1;
    do
    {
      uint64_t v146 = 2 * v145;
      BOOL v148 = v145 >= 0 && v146 != 0;
      CMMThrowExceptionWithLog(v148, "Overflow in Power", v107, v108, v109, v110, v111, v112);
      uint64_t v145 = v146;
      --v144;
    }
    while (v144);
    if ((v146 & v143) == 0) {
      goto LABEL_146;
    }
    uint64_t v149 = v141;
    uint64_t v150 = 1;
    do
    {
      uint64_t v151 = 2 * v150;
      BOOL v153 = v150 >= 0 && v151 != 0;
      CMMThrowExceptionWithLog(v153, "Overflow in Power", v107, v108, v109, v110, v111, v112);
      uint64_t v150 = v151;
      --v149;
    }
    while (v149);
    goto LABEL_145;
  }
LABEL_149:
  uint64_t v154 = CMMTable::FloatData(v199[2], v199[3]);
  uint64_t v209 = CMMTable::FloatData(v201[2], v201[3]);
  float v161 = (unsigned __int16 *)CMMTable::FloatData(v200[2], v200[3]);
  memset(v218, 0, sizeof(v218));
  memset(v216, 0, sizeof(v216));
  memset(v215, 0, sizeof(v215));
  if (v205)
  {
    uint64_t v162 = 0;
    do
    {
      int v163 = (int)((double)v162 / (double)(v205 - 1) * 65535.0 + 0.5);
      if (v163 >= 0xFFFF) {
        int v163 = 0xFFFF;
      }
      v218[v162++] = v163 & ~(unsigned __int16)(v163 >> 31);
    }
    while (v205 > v162);
  }
  if (v206)
  {
    for (uint64_t j = 0; j != v206; ++j)
    {
      if (j)
      {
        uint64_t v165 = j;
        unint64_t v166 = 1;
        do
        {
          unint64_t v167 = v166 * v205;
          BOOL v169 = v166 * v205 >= v166 && v167 >= v205;
          CMMThrowExceptionWithLog(v169, "Overflow in Power", v155, v156, v157, v158, v159, v160);
          unint64_t v166 = v167;
          --v165;
        }
        while (v165);
      }
      else
      {
        LODWORD(v167) = 1;
      }
      v215[j] = v167;
    }
  }
  if (v204)
  {
    unint64_t v170 = 0;
    unsigned int v171 = 0;
    do
    {
      unsigned int v212 = v171;
      memset(v217, 0, sizeof(v217));
      DecodeN(v170, v206, (unsigned int (*)[16])v217, (unsigned int (*)[16])v215, v205);
      if (v206)
      {
        float v173 = v217;
        uint64_t v174 = 2 * v206;
        do
        {
          int v175 = *v173++;
          *(_WORD *)((char *)&v215[15] + v174 + 2) = v218[v175];
          v174 -= 2;
        }
        while (v174);
      }
      memset(v219, 0, sizeof(v219));
      unint64_t v176 = (CMMLutTag *)*((unsigned __int8 *)v213 + 50);
      if (*((unsigned char *)v213 + 50))
      {
        float v177 = 0;
        memset(v220, 0, 64);
        do
        {
          unsigned int v178 = (*((unsigned __int8 *)v177 + (void)v207) - 1) * *((unsigned __int16 *)v216 + (void)v177) + 1;
          v220[(void)v177] = HIWORD(v178);
          v219[(void)v177] = (unsigned __int16)v178 >> 1;
          float v177 = (CMMLutTag *)((char *)v177 + 1);
        }
        while (v176 != v177);
        int v179 = v220[0];
        if (v176 >= 2)
        {
          float v180 = (char *)v176 - 1;
          int8x8_t v181 = (unsigned __int8 *)v213 + 77;
          uint64_t v182 = &v220[1];
          do
          {
            int v184 = *v181++;
            int v183 = v184;
            int v185 = *v182++;
            int v179 = v185 + v179 * v183;
            --v180;
          }
          while (v180);
        }
      }
      else
      {
        int v179 = 0;
      }
      uint64_t v186 = *((unsigned __int8 *)v213 + 51);
      if (*((unsigned char *)v213 + 51))
      {
        uint64_t v187 = 0;
        uint64_t v188 = (unsigned __int16 *)(v209 + 2 * (v179 * v186));
        do
        {
          uint64_t v189 = (int *)(bswap32(*v188) >> 16);
          unsigned int v214 = 0;
          if (v176)
          {
            int v190 = 0;
            do
              uint64_t v189 = CMMLutTag::Interpolate(v176, v190++, (uint64_t)v219, v189, (uint64_t)v188, v161, &v214, v172);
            while (v176 != v190);
          }
          *((_WORD *)v216 + v187) = (_WORD)v189;
          ++v188;
          ++v187;
        }
        while (v187 != v186);
      }
      if (v210)
      {
        unint64_t v191 = v210 + v210 * (unint64_t)v212 - 1;
        uint64_t v192 = 2 * v210;
        do
        {
          if (v191 >= v202 >> 1)
          {
            exception = __cxa_allocate_exception(4uLL);
            _DWORD *exception = -171;
          }
          *(_WORD *)(v154 + 2 * v191--) = *(_WORD *)((char *)&v215[15] + v192 + 2);
          v192 -= 2;
        }
        while (v192);
      }
      unint64_t v170 = v212 + 1;
      unsigned int v171 = v212 + 1;
    }
    while (v204 > v170);
  }
  uint64_t v193 = v201[1];
  if (v193)
  {
    uint64_t v194 = v193 - 1;
    v201[1] = v194;
    if (!v194) {
      (*(void (**)(void *))(*v201 + 8))(v201);
    }
  }
  unint64_t v9 = v199;
  uint64_t v195 = v200[1];
  if (v195)
  {
    uint64_t v196 = v195 - 1;
    v200[1] = v196;
    if (!v196) {
      (*(void (**)(void *))(*v200 + 8))(v200);
    }
  }
  return v9;
}

unint64_t DecodeN(unint64_t result, uint64_t a2, unsigned int (*a3)[16], unsigned int (*a4)[16], unint64_t a5)
{
  uint64_t v5 = a2 - 1;
  if (a2 != 1)
  {
    do
    {
      unint64_t v6 = (*a4)[v5];
      (*a3)[v5] = result / v6;
      result %= v6;
      --v5;
    }
    while (v5);
  }
  if (result >= a5)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  (*a3)[0] = result;
  return result;
}

int *CMMLutTag::Interpolate(CMMLutTag *this, int a2, uint64_t a3, int *a4, uint64_t a5, unsigned __int16 *a6, unsigned int *a7, unsigned int *a8)
{
  int v10 = a5;
  unint64_t v11 = a4;
  if (a2)
  {
    int v14 = a2;
    uint64_t v15 = (~a2 + this);
    if (*(_DWORD *)(a3 + 4 * v15))
    {
      unsigned int v16 = 0;
      uint64_t v17 = *a7;
      *a7 = v17 + 1;
      unsigned int v18 = (int *)(bswap32(*(unsigned __int16 *)(a5 + 2 * *(unsigned int *)&a6[2 * v17])) >> 16);
      do
      {
        uint64_t v19 = CMMLutTag::Interpolate(this, v16, a3, v18, v10, a6, a7, a8);
        unsigned int v18 = (int *)v19;
        ++v16;
      }
      while (v14 != v16);
      int v20 = *(_DWORD *)(a3 + 4 * v15);
      int v21 = v19 - v11;
      return (int *)(v11 + ((v20 * v21 + 0x4000) >> 15));
    }
    int v23 = 1;
    do
    {
      int v24 = 2 * v23;
      BOOL v26 = v23 >= 0 && v24 != 0;
      CMMThrowExceptionWithLog(v26, "Overflow in Power", a3, (uint64_t)a4, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
      int v23 = v24;
      --v14;
    }
    while (v14);
    *a7 += v24;
  }
  else
  {
    uint64_t v22 = *a7;
    *a7 = v22 + 1;
    int v21 = *(_DWORD *)(a3 + 4 * (this - 1));
    if (v21)
    {
      int v20 = *(unsigned __int16 *)(a5 + 2 * *(unsigned int *)&a6[2 * v22]) - a4;
      return (int *)(v11 + ((v20 * v21 + 0x4000) >> 15));
    }
  }
  return v11;
}

void CMMLutTag::GetWholeCloth(CMMLutTag *this, unsigned __int8 *a2, unint64_t *a3)
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = -171;
}

uint64_t CMMLutAtoBTag::GetPostCLUTLutSize(CMMLutAtoBTag *this, unsigned int a2)
{
  uint64_t result = *((void *)this + a2 + 44);
  if (result) {
    return (*(unsigned int (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

uint64_t CMMLutAtoBTag::GetPreCLUTLutSize(CMMLutAtoBTag *this, unsigned int a2)
{
  uint64_t result = *((void *)this + a2 + 61);
  if (result) {
    return (*(unsigned int (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

uint64_t CMMLutAtoBTag::MakeOutputTRC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  if (*(_DWORD *)(a1 + 208) <= a2) {
    return 0;
  }
  BOOL v6 = a2 - 1 < 2 && a5 == 1347182946;
  uint64_t v7 = *(void *)(a1 + 8 * a2 + 216);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, BOOL, float))(*(void *)v7 + 64))(v7, a3, a4, v6, 1.0);
}

uint64_t CMMLutAtoBTag::GetOutputMatrix(CMMLutAtoBTag *this)
{
  int v3 = *((_DWORD *)this + 28);
  uint64_t result = (uint64_t)this + 112;
  if (v3 == 0x10000 && *((_DWORD *)this + 33) == 0x10000 && *((_DWORD *)this + 38) == 0x10000)
  {
    v4.i64[0] = vrev64q_s32(*(int32x4_t *)((char *)this + 116)).u64[0];
    v4.i64[1] = *(void *)((char *)this + 124);
    uint8x8_t v5 = (uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v4), (int16x8_t)vceqzq_s32(*(int32x4_t *)((char *)this + 136)))));
    v5.i8[0] = vmaxv_u8(v5);
    if (((*((_DWORD *)this + 39) == 0) & ~v5.i32[0]) != 0) {
      return 0;
    }
  }
  return result;
}

uint64_t CMMLutAtoBTag::MakePostCLUTTRC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  if (*(_DWORD *)(a1 + 344) <= a2) {
    return 0;
  }
  BOOL v6 = a2 - 1 < 2 && a5 == 1347182946;
  uint64_t v7 = *(void *)(a1 + 8 * a2 + 352);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, BOOL, float))(*(void *)v7 + 64))(v7, a3, a4, v6, 1.0);
}

uint64_t CMMLutAtoBTag::MakePreCLUTTRC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  if (*(_DWORD *)(a1 + 480) <= a2) {
    return 0;
  }
  BOOL v6 = a2 - 1 < 2 && a5 == 1347182946;
  uint64_t v7 = *(void *)(a1 + 8 * a2 + 488);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, BOOL, float))(*(void *)v7 + 64))(v7, a3, a4, v6, 1.0);
}

uint64_t CMMLutAtoBTag::GetInputMatrix(CMMLutAtoBTag *this)
{
  return 0;
}

uint64_t CMMLutAtoBTag::MakeInputTRC()
{
  return 0;
}

void CMMParaCurveTag::EvaluateGamma(CMMParaCurveTag *this, BOOL *a2, double a3)
{
  if (*((_WORD *)this + 28))
  {
    uint64_t v22 = 0;
    CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v22);
    uint8x8_t v5 = CMMBase::NewInternal(0x28uLL, &v22);
    void *v5 = &unk_1ED985520;
    v5[1] = 1;
    v5[3] = 0;
    v5[4] = 16388;
    BOOL v6 = CMMBase::NewInternal(0x4004uLL, &v22);
    v5[2] = v6;
    uint64_t v7 = (int *)CMMTable::FloatData((uint64_t)v6, v5[3]);
    CMMParaCurveTag::MakeLut((uint64_t)this, 0, v7, -1, 1.0);
    uint64_t v8 = CMMTable::FloatData(v5[2], v5[3]);
    uint64_t v10 = 0;
    int v11 = 0;
    double v12 = 0.0;
    double v13 = 0.0;
    do
    {
      if ((v10 & 0x7FFFEFFF) != 0)
      {
        LODWORD(v9) = *(_DWORD *)(v8 + 4 * v10);
        double v9 = (double)*(unint64_t *)&v9;
        double v14 = v9 * 0.0000000596046448;
        if (v9 * 0.0000000596046448 != 0.0 && v14 != 1.0)
        {
          double v16 = log(v13 * 0.000244140625);
          double v9 = log(v14) / v16;
          double v12 = v12 + v9;
          ++v11;
        }
      }
      double v13 = v13 + 1.0;
      ++v10;
    }
    while (v10 != 4097);
    if (v11)
    {
      uint64_t v17 = CMMTable::FloatData(v5[2], v5[3]);
      for (uint64_t i = 0; i != 4097; ++i)
      {
        HIDWORD(v19) = 1060110336;
        LODWORD(v19) = *(_DWORD *)(v17 + 4 * i);
        if (vabdd_f64((double)v19 * 0.0000000596046448, pow((double)i * 0.000244140625, v12 / (double)v11)) > a3)break; {
      }
        }
    }
    if (v22)
    {
      int v20 = *v22;
      if (*v22)
      {
        do
        {
          int v21 = (void *)*v20;
          free(v20);
          int v20 = v21;
        }
        while (v21);
      }
    }
    CMMMemMgr::ReleaseMemList((void **)&v22);
  }
  else if (*((_DWORD *)this + 16) >> 1 == 58982)
  {
    if (a2) {
      *a2 = 1;
    }
  }
  else if (a2)
  {
    *a2 = 1;
  }
}

void sub_18BE4C2C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMMemMgr::ReleaseMemList((void **)va);
  _Unwind_Resume(a1);
}

void CMMParaCurveTag::MakeLut(uint64_t a1, uint64_t a2, int *a3, int a4, double a5)
{
  int v5 = *(unsigned __int16 *)(a1 + 56);
  switch(*(_WORD *)(a1 + 56))
  {
    case 0:
      int v11 = *(_DWORD *)(a1 + 64);
      double v12 = (double)v11 * 0.0000152587891;
      if (v12 >= 2.4023 || v12 <= 2.398) {
        double v14 = (double)v11 * 0.0000152587891;
      }
      else {
        double v14 = 2.4;
      }
      double v15 = 1.0;
      double v16 = 16.0;
      if (v14 >= 1.0) {
        double v16 = 1.0;
      }
      if (v14 > 1.0) {
        double v16 = 0.0625;
      }
      float v17 = v16;
      double v18 = v17;
      float v19 = v14;
      double v71 = 0.0;
      if (v19 != 1.0 && v19 != 0.0)
      {
        double v20 = v19;
        if (v19 <= 1.0) {
          double v21 = v19;
        }
        else {
          double v21 = 1.0 / v19;
        }
        double v69 = v18;
        double v22 = exp2(1.0 / (v21 + -1.0) * 4.0);
        double v18 = v69;
        double v23 = 16.0;
        if (v21 == v20) {
          double v23 = 1.0;
        }
        float v24 = v23 * v22;
        double v71 = v24;
      }
      int v25 = 0;
      *(_DWORD *)(a1 + 60) = 5;
      *(void *)(a1 + 6CMMBase::operator delete(this - 8) = 0x10000;
      *(_DWORD *)(a1 + 76) = (int)(v18 * 65536.0 + 0.5);
      *(_DWORD *)(a1 + 80) = (int)(v71 * 65536.0 + 0.5);
      float64x2_t v26 = 0uLL;
      v27.f64[0] = 0.0;
      v27.f64[1] = v18;
      int v28 = 3;
      char v29 = 1;
      int v30 = 0x10000;
      break;
    case 1:
      char v29 = 0;
      int v11 = *(_DWORD *)(a1 + 64);
      int v30 = *(_DWORD *)(a1 + 68);
      double v14 = (double)v11 * 0.0000152587891;
      double v15 = (double)v30 * 0.0000152587891;
      int v25 = *(_DWORD *)(a1 + 72);
      float64x2_t v26 = 0uLL;
      v27.f64[1] = 0.0;
      v27.f64[0] = (double)v25 * 0.0000152587891;
      double v71 = 0.0;
      int v28 = 1;
      break;
    case 2:
      char v29 = 0;
      int v11 = *(_DWORD *)(a1 + 64);
      int v30 = *(_DWORD *)(a1 + 68);
      double v14 = (double)v11 * 0.0000152587891;
      double v15 = (double)v30 * 0.0000152587891;
      uint64_t v31 = *(void *)(a1 + 72);
      v32.i64[0] = (int)v31;
      v32.i64[1] = SHIDWORD(v31);
      float64x2_t v27 = vmulq_f64(vcvtq_f64_s64(v32), (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL));
      int v25 = v31;
      float64x2_t v26 = 0uLL;
      double v71 = 0.0;
      int v28 = 2;
      break;
    case 3:
      char v29 = 0;
      int v11 = *(_DWORD *)(a1 + 64);
      int v30 = *(_DWORD *)(a1 + 68);
      double v14 = (double)v11 * 0.0000152587891;
      double v15 = (double)v30 * 0.0000152587891;
      uint64_t v33 = *(void *)(a1 + 72);
      v34.i64[0] = (int)v33;
      v34.i64[1] = SHIDWORD(v33);
      float64x2_t v27 = vmulq_f64(vcvtq_f64_s64(v34), (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL));
      double v71 = (double)*(int *)(a1 + 80) * 0.0000152587891;
      int v25 = v33;
      float64x2_t v26 = 0uLL;
      int v28 = 3;
      break;
    case 4:
      char v29 = 0;
      int v11 = *(_DWORD *)(a1 + 64);
      int v30 = *(_DWORD *)(a1 + 68);
      float64x2_t v35 = (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL);
      double v14 = (double)v11 * 0.0000152587891;
      double v15 = (double)v30 * 0.0000152587891;
      uint64_t v36 = *(void *)(a1 + 72);
      v37.i64[0] = (int)v36;
      v37.i64[1] = SHIDWORD(v36);
      float64x2_t v27 = vmulq_f64(vcvtq_f64_s64(v37), v35);
      double v71 = (double)*(int *)(a1 + 80) * 0.0000152587891;
      uint64_t v38 = *(void *)(a1 + 84);
      v37.i64[0] = (int)v38;
      v37.i64[1] = SHIDWORD(v38);
      float64x2_t v26 = vmulq_f64(vcvtq_f64_s64(v37), v35);
      int v25 = v36;
      int v28 = 4;
      break;
    default:
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = -170;
  }
  double v39 = v27.f64[1];
  if (a5 != 1.0 && a5 != 0.0)
  {
    if ((v28 - 3) < 2)
    {
      double v39 = v27.f64[1] * a5;
      double v15 = v15 * a5;
      double v71 = v71 / a5;
      if (a2) {
        goto LABEL_31;
      }
      goto LABEL_41;
    }
    if ((v28 - 1) <= 1)
    {
      double v71 = -v27.f64[0] / v15 / a5;
      double v15 = v15 * a5;
    }
  }
  if (a2)
  {
LABEL_31:
    *(unsigned char *)(a2 + CMMBase::operator delete(this - 8) = v29;
    *(_DWORD *)(a2 + 12) = v28;
    *(void *)(a2 + 16) = 0;
    float v40 = v14;
    float v41 = v15;
    float v42 = v27.f64[0];
    float v43 = v71;
    *(void *)a2 = 1;
    *(float *)(a2 + 24) = v40;
    *(float *)(a2 + 2CMMBase::operator delete(this - 8) = v41;
    float v44 = v39;
    *(float *)(a2 + 32) = v42;
    *(float *)(a2 + 36) = v44;
    *(float *)(a2 + 40) = v43;
    *(float32x2_t *)(a2 + 44) = vcvt_f32_f64(v26);
    *(_DWORD *)(a2 + 52) = 0;
    if (v5 == 3
      && v11 == 145636
      && v30 == 59616
      && v25 == 5920
      && *(_DWORD *)(a1 + 76) == 14564
      && *(_DWORD *)(a1 + 80) == 5308
      && !*(_DWORD *)(a1 + 84)
      && !*(_DWORD *)(a1 + 88))
    {
      *(_DWORD *)(a2 + 4) = 14;
    }
  }
LABEL_41:
  uint64_t v45 = 0;
  double v46 = ceil(v14);
  double v47 = floor(v14);
  float64x2_t v48 = v26;
  uint64_t v49 = a3;
  double v50 = -v27.f64[0] / v15;
  float64_t v70 = v27.f64[0];
  while (2)
  {
    double v51 = 0.0;
    double v52 = (double)v45 * 0.0000000596046448;
    switch(v5)
    {
      case 0:
        if (v52 > 0.0 || v14 >= 0.0)
        {
          double v53 = (double)v45 * 0.0000000596046448;
          goto LABEL_64;
        }
        goto LABEL_69;
      case 1:
        if (v52 >= v50) {
          goto LABEL_59;
        }
        goto LABEL_69;
      case 2:
        double v54 = v39;
        if (v52 < v50) {
          goto LABEL_65;
        }
        double v55 = v27.f64[0] + v15 * v52;
        if (v55 > 0.0 || v46 == v47)
        {
          long double v57 = pow(v55, v14);
          v27.f64[0] = v70;
          double v54 = v39 + v57;
          goto LABEL_65;
        }
        goto LABEL_69;
      case 3:
        if (v52 < v71)
        {
          double v54 = v39 * v52;
          goto LABEL_65;
        }
LABEL_59:
        double v53 = v27.f64[0] + v15 * v52;
        if (v53 > 0.0 || v46 == v47)
        {
LABEL_64:
          double v54 = pow(v53, v14);
          v27.f64[0] = v70;
          goto LABEL_65;
        }
        goto LABEL_69;
      case 4:
        if (v52 >= v71)
        {
          double v61 = v27.f64[0] + v15 * v52;
          if (v61 <= 0.0 && v46 != v47) {
            goto LABEL_69;
          }
          long double v63 = pow(v61, v14);
          v27.f64[0] = v70;
          double v54 = v48.f64[0] + v63;
        }
        else
        {
          double v54 = v48.f64[1] + v39 * v52;
        }
LABEL_65:
        if (fabs(v54) == INFINITY || v54 >= 0.0 && (double v51 = v54, v54 > 1.0)) {
          double v51 = 1.0;
        }
LABEL_69:
        int v59 = vcvtmd_s64_f64(v51 * 16777216.0 + 0.5);
        *uint64_t v49 = v59;
        int v60 = 0x1000000;
        if (v59 <= 0x1000000)
        {
          if ((v59 & 0x80000000) == 0) {
            goto LABEL_73;
          }
          int v60 = 0;
        }
        *uint64_t v49 = v60;
LABEL_73:
        v45 += 4096;
        ++v49;
        if (v45 != 16781312) {
          continue;
        }
        if (a4)
        {
          if (a4 == 1)
          {
            int v64 = a3[2056];
            memmove(a3 + 2058, a3 + 2057, 0x1FD8uLL);
            a3[2057] = v64;
            a3[2055] = v64;
          }
        }
        else
        {
          int v65 = a3[4096];
          int v66 = a3[1] - *a3;
          if (v66 < 0) {
            int v66 = *a3 - a3[1];
          }
          if (v66 <= 0xFFF) {
            a3[1] = *a3;
          }
          int v67 = v65 - a3[4095];
          if (v67 < 0) {
            int v67 = a3[4095] - v65;
          }
          if (v67 <= 0xFFF) {
            a3[4095] = v65;
          }
        }
        return;
      default:
        goto LABEL_69;
    }
  }
}

uint64_t CMMParaCurveTag::GetCurveData(CMMParaCurveTag *this)
{
  return 0;
}

uint64_t CMMLut16Tag::SetNULLOutputTables(CMMLut16Tag *this, CMMMemMgr *a2)
{
  NULLTable = CMMLut16Tag::MakeNULLTable(a2, (CMMMemMgr *)*((unsigned __int8 *)this + 51));
  int32x4_t v4 = *(uint64_t (**)(CMMLut16Tag *, void *))(*(void *)this + 152);

  return v4(this, NULLTable);
}

void *CMMLut16Tag::MakeNULLTable(CMMLut16Tag *this, CMMMemMgr *a2)
{
  unsigned int v2 = a2;
  unint64_t v4 = (4 * a2);
  int v5 = CMMBase::NewInternal(0x28uLL, (void **)this);
  void *v5 = &unk_1ED985520;
  v5[1] = 1;
  v5[3] = 0;
  v5[4] = v4;
  BOOL v6 = CMMBase::NewInternal(v4, (void **)this);
  v5[2] = v6;
  uint64_t v7 = CMMTable::FloatData((uint64_t)v6, v5[3]);
  if (v2)
  {
    uint64_t v8 = 0;
    do
    {
      *(_DWORD *)(v7 + 2 * (v8 & 0xFFFFFFFE)) = -65536;
      v8 += 2;
    }
    while (2 * v2 != v8);
  }
  return v5;
}

uint64_t CMMLut16Tag::SetNULLInputTables(CMMLut16Tag *this, CMMMemMgr *a2)
{
  NULLTable = CMMLut16Tag::MakeNULLTable(a2, (CMMMemMgr *)*((unsigned __int8 *)this + 50));
  unint64_t v4 = *(uint64_t (**)(CMMLut16Tag *, void *))(*(void *)this + 144);

  return v4(this, NULLTable);
}

uint64_t CMMLut16Tag::GetMatrixComp(CMMLut16Tag *this, int a2, int a3)
{
  return *(unsigned int *)((char *)this + 12 * a2 + 4 * a3 + 54);
}

uint64_t CMMLut16Tag::SetOutputTables(uint64_t this, CMMTable *a2)
{
  *(void *)(this + 112) = a2;
  return this;
}

uint64_t CMMLut16Tag::SetInputTables(uint64_t this, CMMTable *a2)
{
  *(void *)(this + 104) = a2;
  return this;
}

uint64_t CMMLut16Tag::GetCLutPtr(CMMLut16Tag *this)
{
  uint64_t v1 = *((void *)this + 12);
  if (v1) {
    return CMMTable::FloatData(*(void *)(v1 + 16), *(void *)(v1 + 24));
  }
  else {
    return 0;
  }
}

uint64_t CMMLut16Tag::SetCLut(uint64_t this, CMMTable *a2)
{
  *(void *)(this + 96) = a2;
  return this;
}

float CMMLut16Tag::EvaluateGamma(CMMLut16Tag *this, unsigned __int16 *a2, unsigned char *a3, BOOL *a4)
{
  unsigned int v5 = a2;
  double v22 = 0.0;
  *a3 = 0;
  if (a2 == 2 && (!*(_WORD *)this ? (BOOL v7 = *((unsigned __int16 *)this + 1) == 0xFFFF) : (BOOL v7 = 0), v7))
  {
    *a3 = 1;
    return 1.0;
  }
  else
  {
    long double v8 = 0.0;
    if (*(_WORD *)this) {
      BOOL v9 = 0;
    }
    else {
      BOOL v9 = *((unsigned __int16 *)this + a2 - 1) == 0xFFFF;
    }
    if (v9)
    {
      if (IsPureGammaCurve(a2, (unsigned __int16 *)this, &v22))
      {
        *a3 = 1;
        return v22;
      }
      else if (v5)
      {
        uint64_t v10 = 0;
        int v11 = 0;
        uint64_t v12 = v5;
        double v13 = (double)(v5 - 1);
        int v14 = -v5;
        double v15 = 0.0;
        do
        {
          if (v10)
          {
            double v16 = (double)(bswap32(*((unsigned __int16 *)this + v10)) >> 16) / 65535.0;
            if (v16 != 0.0 && v14 + v10 != -1 && v16 != 1.0)
            {
              double v19 = log(v15 / v13);
              long double v8 = log(v16) / v19 + v8;
              ++v11;
            }
          }
          ++v10;
          double v15 = v15 + 1.0;
        }
        while (v14 + v10);
        if (v11)
        {
          uint64_t v20 = 0;
          long double v8 = v8 / (double)v11;
          while (vabdd_f64((double)(bswap32(*((unsigned __int16 *)this + v20)) >> 16) / 65535.0, pow((double)v20 / v13, v8)) <= 0.001)
          {
            if (v12 == ++v20) {
              return v8;
            }
          }
          return 0.0;
        }
      }
    }
  }
  return v8;
}

uint64_t CMMLut16Tag::MakeOutputLut(CMMLut16Tag *this, uint64_t a2, int *a3)
{
  int v3 = (CMMLut16Tag *)MEMORY[0x1F4188790](this, a2, a3);
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (!*((void *)v3 + 14)) {
    goto LABEL_37;
  }
  int v7 = v6;
  long double v8 = v5;
  int v9 = v4;
  uint64_t v10 = v3;
  OutputTable = (CMMLut16Tag *)CMMLut16Tag::GetOutputTable(v3, v4);
  bzero(&v53, 0x4004uLL);
  char v12 = ((v9 - 1) < 2) & v7;
  if (v12) {
    double v13 = &v53;
  }
  else {
    double v13 = v8;
  }
  memset(v13, 255, 0x4004uLL);
  int v14 = 0xFFFF;
  if (!v7) {
    goto LABEL_23;
  }
  if (!*((void *)v10 + 14)) {
    goto LABEL_37;
  }
  double v15 = (CMMLut16Tag *)CMMLut16Tag::GetOutputTable(v10, v9);
  double v23 = v15;
  if (v9 == 1)
  {
    int64x2_t v32 = (unsigned __int16 *)*((unsigned __int16 *)v10 + 46);
    int AZero = CMMLut16Tag::GetAZero(v10, v16, v17, v18, v19, v20, v21, v22);
LABEL_18:
    int v34 = 8421504 - CMMLut16Tag::ApplyLut(v23, v32, AZero);
    if (v34 < 0) {
      int v34 = -v34;
    }
    if (v34 >= 0x100) {
      int v14 = 65792;
    }
    else {
      int v14 = 0xFFFF;
    }
    goto LABEL_23;
  }
  if (v9)
  {
    int64x2_t v32 = (unsigned __int16 *)*((unsigned __int16 *)v10 + 46);
    int AZero = CMMLut16Tag::GetBZero(v10, v16, v17, v18, v19, v20, v21, v22);
    goto LABEL_18;
  }
  if ((int)CMMLut16Tag::ApplyLut(v15, (unsigned __int16 *)*((unsigned __int16 *)v10 + 46), 0x1000000) < 16776961)
  {
LABEL_15:
    int v14 = 65792;
    goto LABEL_23;
  }
  if (!*((void *)v10 + 12) || *((unsigned char *)v10 + 51) != 3)
  {
LABEL_37:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  int v31 = *((unsigned __int16 *)v10 + 60);
  if (!*((_WORD *)v10 + 60))
  {
    CMMLut16Tag::GetLabCriticalValues(v10, v24, v25, v26, v27, v28, v29, v30);
    int v31 = *((unsigned __int16 *)v10 + 60);
  }
  int v14 = 0xFFFF;
  if (v31 != 0xFFFF) {
    goto LABEL_15;
  }
LABEL_23:
  uint64_t v35 = 0;
  int v36 = v14;
  do
  {
    uint64_t result = CMMLut16Tag::ApplyLut(OutputTable, (unsigned __int16 *)*((unsigned __int16 *)v10 + 46), v35);
    if (v36 != 0xFFFF) {
      uint64_t result = ((v36 * (int)result + 0x7FFF) / 0xFFFF);
    }
    if ((int)result >= 0x1000000) {
      int v45 = 0x1000000;
    }
    else {
      int v45 = result;
    }
    *v13++ = v45;
    v35 += 4096;
  }
  while (v35 != 16781312);
  if (v12)
  {
    if (v9 == 1) {
      unsigned int BZero = CMMLut16Tag::GetAZero(v10, v38, v39, v40, v41, v42, v43, v44);
    }
    else {
      unsigned int BZero = CMMLut16Tag::GetBZero(v10, v38, v39, v40, v41, v42, v43, v44);
    }
    unsigned int v48 = BZero;
    unsigned int v49 = BZero >> 12;
    int v50 = v54[(BZero >> 12) - 1];
    int v51 = v54[4095];
    *long double v8 = v53;
    memcpy(v8 + 1, v54, 4 * ((BZero >> 12) - 2));
    v8[v49 + 1] = v50;
    v8[v49] = v50;
    v8[v49 - 1] = v50;
    uint64_t result = (uint64_t)memcpy(&v8[v49 + 2], &v54[v49], 4 * (4094 - (v48 >> 12)));
    v8[4096] = v51;
  }
  else
  {
    int v47 = v8[4096];
    v8[1] = *v8;
    v8[4095] = v47;
  }
  return result;
}

uint64_t CMMLut16Tag::ApplyLut(CMMLut16Tag *this, unsigned __int16 *a2, int a3)
{
  int v3 = a2 - 1;
  unint64_t v4 = (unint64_t)(a3 * (uint64_t)((int)a2 - 1)) >> 24;
  if ((int)v4 >= (int)a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  unsigned int v6 = bswap32(*((unsigned __int16 *)this + (int)v4));
  HIDWORD(v7) = HIWORD(v6);
  LODWORD(v7) = v6;
  uint64_t result = ((v7 >> 23) + 1) >> 1;
  int v9 = a3 - ((uint64_t)(int)v4 << 24) / v3;
  if (v9)
  {
    unsigned int v10 = bswap32(*(unsigned __int16 *)((char *)this + ((uint64_t)((v4 << 32) + 0x100000000) >> 31)));
    HIDWORD(v11) = HIWORD(v10);
    LODWORD(v11) = v10;
    uint64_t v12 = v3 * (uint64_t)v9 * (int)((((v11 >> 23) + 1) >> 1) - result);
    if (v12)
    {
      BOOL v14 = __OFADD__(v12, 0x800000);
      uint64_t v15 = v12 + 0x800000;
      BOOL v13 = v12 + 0x800000 < 0;
      unint64_t v16 = v12 + 25165823;
      if (v13 == v14) {
        unint64_t v16 = v15;
      }
      return result + (v16 >> 24);
    }
  }
  return result;
}

uint64_t CMMLut16Tag::GetAZero(CMMLut16Tag *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*((void *)this + 12) || *((unsigned char *)this + 51) != 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  uint64_t result = *((unsigned int *)this + 33);
  if (!result)
  {
    CMMLut16Tag::GetLabCriticalValues(this, a2, a3, a4, a5, a6, a7, a8);
    return *((unsigned int *)this + 33);
  }
  return result;
}

uint64_t CMMLut16Tag::GetBZero(CMMLut16Tag *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*((void *)this + 12) || *((unsigned char *)this + 51) != 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  uint64_t result = *((unsigned int *)this + 34);
  if (!result)
  {
    CMMLut16Tag::GetLabCriticalValues(this, a2, a3, a4, a5, a6, a7, a8);
    return *((unsigned int *)this + 34);
  }
  return result;
}

uint64_t CMMLut16Tag::GetLabCriticalValues(CMMLut16Tag *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 12);
  if (!v8 || *((unsigned char *)this + 51) != 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  uint64_t v10 = *((unsigned __int8 *)this + 50);
  if (*((unsigned char *)this + 50))
  {
    unint64_t v11 = *((unsigned __int8 *)this + 52);
    unint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      v12 *= v11;
      BOOL v15 = v12 >= v13 && v12 >= v11;
      CMMThrowExceptionWithLog(v15, "Overflow in Power", a3, a4, a5, a6, a7, a8);
      --v10;
    }
    while (v10);
    uint64_t result = CMMTable::FloatData(*(void *)(*((void *)this + 12) + 16), *(void *)(*((void *)this + 12) + 24));
    if (!v12)
    {
      int v17 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t result = CMMTable::FloatData(*(void *)(v8 + 16), *(void *)(v8 + 24));
    unint64_t v12 = 1;
  }
  unsigned __int16 v18 = *((_WORD *)this + 60);
  uint64_t v19 = (unsigned __int16 *)(result + 4);
  unint64_t v20 = v12;
  do
  {
    unsigned int v21 = bswap32(*(v19 - 2)) >> 16;
    if (v21 > v18)
    {
      *((_WORD *)this + 60) = v21;
      unsigned int v22 = bswap32(*v19) >> 16;
      *((_DWORD *)this + 33) = bswap32(*(v19 - 1)) >> 16;
      *((_DWORD *)this + 34) = v22;
      unsigned __int16 v18 = v21;
    }
    v19 += 3;
    --v20;
  }
  while (v20);
  int v17 = 0;
LABEL_20:
  if (*((unsigned char *)this + 52) == 2)
  {
    uint64_t result = CMMTable::FloatData(*(void *)(*((void *)this + 12) + 16), *(void *)(*((void *)this + 12) + 24));
    if (v17)
    {
      unsigned __int16 v23 = *((_WORD *)this + 61);
      unsigned __int16 v24 = *((_WORD *)this + 63);
      unsigned __int16 v25 = *((_WORD *)this + 62);
      unsigned __int16 v26 = *((_WORD *)this + 64);
    }
    else
    {
      unsigned int v29 = bswap32(*(unsigned __int16 *)(result + 2)) >> 16;
      unsigned int v30 = bswap32(*(unsigned __int16 *)(result + 4)) >> 16;
      unsigned __int16 v23 = *((_WORD *)this + 61);
      unsigned __int16 v24 = *((_WORD *)this + 63);
      unsigned __int16 v25 = *((_WORD *)this + 62);
      unsigned __int16 v26 = *((_WORD *)this + 64);
      unsigned int v31 = 1;
      do
      {
        if (v29 > v23)
        {
          *((_WORD *)this + 61) = v29;
          unsigned __int16 v23 = v29;
        }
        if (v29 < v24)
        {
          *((_WORD *)this + 63) = v29;
          unsigned __int16 v24 = v29;
        }
        if (v30 > v25)
        {
          *((_WORD *)this + 62) = v30;
          unsigned __int16 v25 = v30;
        }
        if (v30 < v26)
        {
          *((_WORD *)this + 64) = v30;
          unsigned __int16 v26 = v30;
        }
      }
      while (v12 > v31++);
    }
    signed int v27 = (v23 + v24 + 1) >> 1;
    signed int v28 = (v25 + v26 + 1) >> 1;
  }
  else
  {
    signed int v27 = *((_DWORD *)this + 33);
    signed int v28 = *((_DWORD *)this + 34);
  }
  if (v27 <= 32832) {
    int v33 = 0x800000;
  }
  else {
    int v33 = 8421504;
  }
  if (v28 <= 32832) {
    int v34 = 0x800000;
  }
  else {
    int v34 = 8421504;
  }
  *((_DWORD *)this + 33) = v33;
  *((_DWORD *)this + 34) = v34;
  return result;
}

uint64_t CMMLut16Tag::MakeInputLut(CMMLut16Tag *this, uint64_t a2, int *a3)
{
  int v3 = (CMMLut16Tag *)MEMORY[0x1F4188790](this, a2, a3);
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if (!*((void *)v3 + 13)) {
    goto LABEL_45;
  }
  int v7 = v6;
  uint64_t v8 = v5;
  int v9 = v4;
  uint64_t v10 = v3;
  InputTable = (CMMLut16Tag *)CMMLut16Tag::GetInputTable(v3, v4);
  bzero(&v54, 0x4004uLL);
  char v12 = ((v9 - 1) < 2) & v7;
  if (v12) {
    unint64_t v13 = &v54;
  }
  else {
    unint64_t v13 = v8;
  }
  memset(v13, 255, 0x4004uLL);
  unsigned int v14 = 0xFFFF;
  if (!v7) {
    goto LABEL_33;
  }
  if (!*((void *)v10 + 13)) {
    goto LABEL_45;
  }
  BOOL v15 = (CMMLut16Tag *)CMMLut16Tag::GetInputTable(v10, v9);
  unint64_t v16 = v15;
  int v17 = (unsigned __int16 *)*((unsigned __int16 *)v10 + 45);
  if (!v9)
  {
    if ((int)CMMLut16Tag::ApplyLut(v15, (unsigned __int16 *)*((unsigned __int16 *)v10 + 45), 16711935) <= 16744575) {
      unsigned int v14 = 0xFFFF;
    }
    else {
      unsigned int v14 = 65280;
    }
    goto LABEL_33;
  }
  int v18 = *((unsigned __int8 *)v10 + 52);
  int v19 = CMMLut16Tag::ApplyLut(v15, (unsigned __int16 *)*((unsigned __int16 *)v10 + 45), 0x800000);
  int v20 = CMMLut16Tag::ApplyLut(v16, v17, 8388736);
  int v21 = CMMLut16Tag::ApplyLut(v16, v17, 8421505);
  double v22 = (double)(v18 - 1);
  float64x2_t v23 = (float64x2_t)vdupq_n_s64(0x3E70000000000000uLL);
  double v24 = (double)v20 * 0.0000000596046448 * v22;
  double v25 = vabdd_f64(v24, floor(v24));
  double v26 = vabdd_f64(v24, floor(v24 + 1.0));
  if (v25 >= v26) {
    double v25 = v26;
  }
  v27.i64[0] = v19;
  v27.i64[1] = v21;
  float64x2_t v28 = vmulq_n_f64(vmulq_f64(vcvtq_f64_s64(v27), v23), v22);
  float64x2_t v29 = vrndmq_f64(v28);
  __asm { FMOV            V5.2D, #1.0 }
  float64x2_t v35 = vrndmq_f64(vaddq_f64(v28, _Q5));
  int8x16_t v36 = vbslq_s8((int8x16_t)vcagtq_f64(vsubq_f64(v28, v35), vsubq_f64(v28, v29)), (int8x16_t)vabdq_f64(v28, v29), (int8x16_t)vabdq_f64(v28, v35));
  if (*(double *)v36.i64 <= v25 && *(double *)v36.i64 <= *(double *)&v36.i64[1])
  {
    double v38 = vabdd_f64(v28.f64[0], floor(v28.f64[0] + 0.5));
    if (v28.f64[0] == 0.5) {
      double v38 = 0.0;
    }
    double v39 = vabdd_f64(v24, floor(v24 + 0.5));
    if (v24 == 0.5) {
      double v40 = 0.0;
    }
    else {
      double v40 = v39;
    }
    if (v38 <= v40)
    {
      double v41 = vabdd_f64(v28.f64[1], floor(v28.f64[1] + 0.5));
      double v42 = v28.f64[1] == 0.5 ? 0.0 : v41;
      if (v38 <= v42)
      {
        unsigned int v14 = 65280;
        goto LABEL_33;
      }
    }
LABEL_45:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  if (v25 <= *(double *)&v36.i64[1])
  {
    v28.f64[0] = v24;
    __asm { FMOV            V1.2D, #0.5 }
    float64x2_t v44 = (float64x2_t)vbicq_s8((int8x16_t)vabdq_f64(v28, vrndmq_f64(vaddq_f64(v28, _Q1))), (int8x16_t)vceqq_f64(v28, _Q1));
    if ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v44, 1), v44))).u8[0] & 1) == 0)
    {
      unsigned int v14 = 65281;
      goto LABEL_33;
    }
    goto LABEL_45;
  }
  unsigned int v14 = 0xFFFF;
LABEL_33:
  uint64_t v45 = 0;
  unint64_t v46 = 0x7FFFLL;
  do
  {
    if (v14 == 0xFFFF) {
      LODWORD(v47) = v45;
    }
    else {
      unint64_t v47 = v46 / 0xFFFF;
    }
    uint64_t result = CMMLut16Tag::ApplyLut(InputTable, (unsigned __int16 *)*((unsigned __int16 *)v10 + 45), v47);
    if ((int)result >= 0x1000000) {
      int v49 = 0x1000000;
    }
    else {
      int v49 = result;
    }
    *v13++ = v49;
    v45 += 4096;
    v46 += (unint64_t)v14 << 12;
  }
  while (v45 != 16781312);
  if (v12)
  {
    int v50 = v56;
    int v51 = v58;
    *uint64_t v8 = v54;
    memcpy(v8 + 1, v55, 0x2018uLL);
    v8[2057] = v50;
    v8[2056] = v50;
    v8[2055] = v50;
    uint64_t result = (uint64_t)memcpy(v8 + 2058, v57, 0x1FD8uLL);
    v8[4096] = v51;
  }
  else
  {
    int v52 = v8[4096];
    v8[1] = *v8;
    v8[4095] = v52;
  }
  return result;
}

unint64_t CMMLut16Tag::InterpolationProtectionZone(CMMLut16Tag *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((unsigned __int8 *)this + 50);
  if ((v8 - 3) > 1) {
    return 0;
  }
  else {
    return 2
  }
         * CMMLutTagBase::CalculateProtectionZone(*((unsigned __int8 *)this + 52), v8, *((unsigned __int8 *)this + 51), a4, a5, a6, a7, a8);
}

void *CMMLut16Tag::CopyClut(CMMLut16Tag *this, CMMMemMgr *a2)
{
  if (*((void *)this + 12)) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 4294967246;
  }
  CMMThrowExceptionOnError(v4);
  uint64_t v5 = (*(uint64_t (**)(CMMLut16Tag *))(*(void *)this + 72))(this);
  CMMThrowExceptionOnError((v5 >> 63) & 0xFFFFFFCELL);
  uint64_t v6 = *(void *)(*((void *)this + 12) + 32);
  unint64_t v7 = v6 + 2 * v5;
  if (__CFADD__(v6, 2 * v5)) {
    uint64_t v8 = 4294967246;
  }
  else {
    uint64_t v8 = 0;
  }
  CMMThrowExceptionOnError(v8);
  int v9 = CMMBase::NewInternal(0x28uLL, (void **)a2);
  unint64_t v10 = 1;
  *int v9 = &unk_1ED985520;
  v9[1] = 1;
  v9[3] = 0;
  _OWORD v9[4] = v7;
  v9[2] = CMMBase::NewInternal(v7, (void **)a2);
  unint64_t v11 = (unsigned __int16 *)CMMTable::FloatData(*(void *)(*((void *)this + 12) + 16), *(void *)(*((void *)this + 12) + 24));
  int v18 = (_WORD *)CMMTable::FloatData(v9[2], v9[3]);
  uint64_t v19 = *((unsigned __int8 *)this + 50);
  if (!*((unsigned char *)this + 50)) {
    goto LABEL_17;
  }
  unint64_t v20 = *((unsigned __int8 *)this + 52);
  unint64_t v10 = 1;
  do
  {
    unint64_t v21 = v10;
    v10 *= v20;
    BOOL v23 = v10 >= v21 && v10 >= v20;
    CMMThrowExceptionWithLog(v23, "Overflow in Power", v12, v13, v14, v15, v16, v17);
    --v19;
  }
  while (v19);
  if (v10)
  {
LABEL_17:
    uint64_t v24 = 0;
    uint64_t v25 = *((unsigned __int8 *)this + 51);
    do
    {
      uint64_t v26 = v25;
      if (v25)
      {
        do
        {
          unsigned int v27 = *v11++;
          *v18++ = bswap32(v27) >> 16;
          --v26;
        }
        while (v26);
      }
      ++v24;
    }
    while (v24 != v10);
  }
  return v9;
}

char *CMMLut16Tag::GetWholeCloth(char *this, unsigned __int8 *a2, unint64_t *a3)
{
  if (!a3) {
    goto LABEL_22;
  }
  uint64_t v4 = this;
  if (!a2)
  {
    *a3 = *((void *)this + 4);
    return this;
  }
  if (*a3 != *((void *)this + 4))
  {
LABEL_22:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -50;
  }
  bzero(a2, *a3);
  *(_DWORD *)a2 = 846489197;
  long long v11 = *(_OWORD *)(v4 + 50);
  long long v12 = *(_OWORD *)(v4 + 66);
  *(_OWORD *)(a2 + 36) = *(_OWORD *)(v4 + 78);
  *(_OWORD *)(a2 + 24) = v12;
  *(_OWORD *)(a2 + CMMBase::operator delete(this - 8) = v11;
  uint64_t v13 = 12;
  do
  {
    *(_DWORD *)&a2[v13] = bswap32(*(_DWORD *)&a2[v13]);
    v13 += 4;
  }
  while (v13 != 48);
  *((_WORD *)a2 + 24) = bswap32(*((unsigned __int16 *)a2 + 24)) >> 16;
  *((_WORD *)a2 + 25) = bswap32(*((unsigned __int16 *)a2 + 25)) >> 16;
  uint64_t v14 = v4[50];
  if (v4[50])
  {
    unint64_t v15 = v4[52];
    unint64_t v16 = 1;
    do
    {
      unint64_t v17 = v16 * v15;
      BOOL v19 = v16 * v15 >= v16 && v17 >= v15;
      CMMThrowExceptionWithLog(v19, "Overflow in Power", v5, v6, v7, v8, v9, v10);
      unint64_t v16 = v17;
      --v14;
    }
    while (v14);
    uint64_t v20 = 2 * v17;
    unsigned int v21 = 2 * v4[50];
  }
  else
  {
    unsigned int v21 = 0;
    uint64_t v20 = 2;
  }
  size_t v22 = v20 * v4[51];
  unsigned int v23 = *((unsigned __int16 *)v4 + 45);
  size_t v24 = v21 * (unint64_t)*((unsigned __int16 *)v4 + 45);
  unint64_t v25 = v4[51] * (unint64_t)*((unsigned __int16 *)v4 + 46);
  uint64_t v26 = a2 + 52;
  unsigned int v27 = (const void *)CMMTable::FloatData(*(void *)(*((void *)v4 + 13) + 16), *(void *)(*((void *)v4 + 13) + 24));
  memcpy(v26, v27, v24);
  float64x2_t v28 = (const void *)CMMTable::FloatData(*(void *)(*((void *)v4 + 12) + 16), *(void *)(*((void *)v4 + 12) + 24));
  memcpy(&v26[v21 * (unint64_t)v23], v28, v22);
  float64x2_t v29 = (const void *)CMMTable::FloatData(*(void *)(*((void *)v4 + 14) + 16), *(void *)(*((void *)v4 + 14) + 24));
  this = (char *)memcpy(&v26[v21 * (unint64_t)v23 + v22], v29, 2 * v25);
  unint64_t v30 = v22 + v21 * (unint64_t)v23 + 2 * v25;
  if (v30)
  {
    unint64_t v31 = v30 >> 1;
    do
    {
      *(_WORD *)uint64_t v26 = bswap32(*(unsigned __int16 *)v26) >> 16;
      v26 += 2;
      --v31;
    }
    while (v31);
  }
  return this;
}

uint64_t CMMLut16Tag::GetTagType(CMMLut16Tag *this)
{
  return 1835430962;
}

BOOL CMMLut8Tag::HasCLUT(CMMLut8Tag *this)
{
  if ((unint64_t)(*(uint64_t (**)(CMMLut8Tag *))(*(void *)this + 64))(this) > 2) {
    return 1;
  }
  if ((*(uint64_t (**)(CMMLut8Tag *))(*(void *)this + 64))(this) != 2) {
    return 0;
  }
  if ((*(uint64_t (**)(CMMLut8Tag *))(*(void *)this + 48))(this) != 3
    || (*(uint64_t (**)(CMMLut8Tag *))(*(void *)this + 56))(this) != 3)
  {
    return 1;
  }
  int v3 = (void *)CMMTable::FloatData(*(void *)(*((void *)this + 12) + 16), *(void *)(*((void *)this + 12) + 24));
  return *v3 != 0xFF00FF0000000000 || v3[1] != 0xFF0000FFFFFF0000 || v3[2] != 0xFFFFFF00FFFFFF00;
}

uint64_t CMMLut8Tag::SetNULLOutputTables(CMMLut8Tag *this, CMMMemMgr *a2)
{
  NULLTable = CMMLut8Tag::MakeNULLTable(a2, (CMMMemMgr *)*((unsigned __int8 *)this + 51));
  uint64_t v4 = *(uint64_t (**)(CMMLut8Tag *, void *))(*(void *)this + 152);

  return v4(this, NULLTable);
}

void *CMMLut8Tag::MakeNULLTable(CMMLut8Tag *this, CMMMemMgr *a2)
{
  int v2 = (int)a2;
  unint64_t v4 = (a2 << 8);
  uint64_t v5 = CMMBase::NewInternal(0x28uLL, (void **)this);
  void *v5 = &unk_1ED985520;
  v5[1] = 1;
  v5[3] = 0;
  v5[4] = v4;
  uint64_t v6 = CMMBase::NewInternal(v4, (void **)this);
  v5[2] = v6;
  uint64_t v7 = CMMTable::FloatData((uint64_t)v6, v5[3]);
  if (v2)
  {
    uint64_t v8 = 0;
    v9.i64[0] = 0x1010101010101010;
    v9.i64[1] = 0x1010101010101010;
    do
    {
      uint64_t v10 = 0;
      int8x16_t v11 = (int8x16_t)xmmword_18BE63720;
      do
      {
        *(int8x16_t *)(v7 + ((v8 & 0xFFFFFF) << 8) + v10) = v11;
        v10 += 16;
        int8x16_t v11 = vaddq_s8(v11, v9);
      }
      while (v10 != 256);
      ++v8;
    }
    while (v8 != v2);
  }
  return v5;
}

uint64_t CMMLut8Tag::SetNULLInputTables(CMMLut8Tag *this, CMMMemMgr *a2)
{
  NULLTable = CMMLut8Tag::MakeNULLTable(a2, (CMMMemMgr *)*((unsigned __int8 *)this + 50));
  unint64_t v4 = *(uint64_t (**)(CMMLut8Tag *, void *))(*(void *)this + 144);

  return v4(this, NULLTable);
}

uint64_t CMMLut8Tag::GetMatrixComp(CMMLut8Tag *this, int a2, int a3)
{
  return *(unsigned int *)((char *)this + 12 * a2 + 4 * a3 + 54);
}

BOOL CMMLut8Tag::IsMatrixNull(CMMLut8Tag *this)
{
  return *(_DWORD *)((char *)this + 54) == 0x10000
      && *(_DWORD *)((char *)this + 70) == 0x10000
      && *(_DWORD *)((char *)this + 86) == 0x10000
      && !*(_DWORD *)((char *)this + 58)
      && !*(_DWORD *)((char *)this + 62)
      && !*(_DWORD *)((char *)this + 66)
      && !*(_DWORD *)((char *)this + 74)
      && !*(_DWORD *)((char *)this + 78)
      && *(_DWORD *)((char *)this + 82) == 0;
}

uint64_t CMMLut8Tag::SetOutputTables(uint64_t this, CMMTable *a2)
{
  *(void *)(this + 112) = a2;
  return this;
}

uint64_t CMMLut8Tag::SetInputTables(uint64_t this, CMMTable *a2)
{
  *(void *)(this + 104) = a2;
  return this;
}

uint64_t CMMLut8Tag::GetCLutPtr(CMMLut8Tag *this)
{
  uint64_t v1 = *((void *)this + 12);
  if (v1) {
    return CMMTable::FloatData(*(void *)(v1 + 16), *(void *)(v1 + 24));
  }
  else {
    return 0;
  }
}

uint64_t CMMLut8Tag::SetCLut(uint64_t this, CMMTable *a2)
{
  *(void *)(this + 96) = a2;
  return this;
}

CMMTable *CMMLut8Tag::MakeOutputLutTable(CMMLut8Tag **a1, uint64_t a2, uint64_t a3, void **a4, int a5)
{
  uint64_t v10 = (CMMTable *)CMMBase::NewInternal(0x28uLL, a4);
  *(void *)uint64_t v10 = &unk_1ED985520;
  *((void *)v10 + 1) = 1;
  *((void *)v10 + 3) = 0;
  *((void *)v10 + 4) = 21512;
  int8x16_t v11 = CMMBase::NewInternal(0x5408uLL, a4);
  *((void *)v10 + 2) = v11;
  uint64_t v12 = CMMTable::FloatData((uint64_t)v11, *((void *)v10 + 3));
  (*((void (**)(CMMLut8Tag **, uint64_t, uint64_t, BOOL))*a1 + 13))(a1, a2, v12, a5 == 1347182946);
  if (a3)
  {
    unsigned __int8 v21 = 0;
    OutputTable = (CMMLut8Tag *)CMMLut8Tag::GetOutputTable(a1[14], a2);
    CMMLut8Tag::EvaluateGamma(OutputTable, &v21, v14, v15, v16);
    if (v21 && v18 == 1.0)
    {
      FloatCFDataRef Copy = 0;
      *(_DWORD *)a3 = 1;
      *(unsigned char *)(a3 + CMMBase::operator delete(this - 8) = 1;
      *(_DWORD *)(a3 + 12) = 0;
      *(_DWORD *)(a3 + 24) = 1065353216;
    }
    else
    {
      *(_DWORD *)a3 = 0;
      FloatCFDataRef Copy = CMMTable::MakeFloatCopy(v10, a4, v17);
    }
    *(void *)(a3 + 16) = FloatCopy;
  }
  return v10;
}

uint64_t CMMLut8Tag::GetOutputTable(CMMLut8Tag *this, int a2)
{
  if (!this)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  return CMMTable::FloatData(*((void *)this + 2), *((void *)this + 3)) + (a2 << 8);
}

void CMMLut8Tag::EvaluateGamma(CMMLut8Tag *this, unsigned __int8 *a2, BOOL *a3, long double a4, double a5)
{
  uint64_t v6 = 0;
  while (v6 == *((unsigned __int8 *)this + v6))
  {
    if (++v6 == 256)
    {
      *a2 = 1;
      return;
    }
  }
  uint64_t v7 = 0;
  int v8 = 0;
  *a2 = 0;
  double v9 = 0.0;
  do
  {
    if (v7 != 255 && v7)
    {
      LOBYTE(a4) = *((unsigned char *)this + v7);
      a4 = (double)*(unint64_t *)&a4;
      double v10 = a4 / 255.0;
      if (a4 / 255.0 != 0.0 && v10 != 1.0)
      {
        double v12 = log((double)v7 / 255.0);
        a4 = log(v10) / v12;
        double v9 = v9 + a4;
        ++v8;
      }
    }
    ++v7;
  }
  while (v7 != 256);
  if (v8)
  {
    uint64_t v13 = 0;
    double v14 = v9 / (double)v8;
    do
    {
      LOBYTE(a5) = *((unsigned char *)this + v13);
      if (vabdd_f64((double)*(unint64_t *)&a5 / 255.0, pow((double)v13 / 255.0, v14)) > 0.001) {
        break;
      }
      ++v13;
    }
    while (v13 != 256);
  }
}

CMMTable *CMMLut8Tag::MakeInputLutTable(CMMLut8Tag **a1, uint64_t a2, uint64_t a3, void **a4, int a5)
{
  double v10 = (CMMTable *)CMMBase::NewInternal(0x28uLL, a4);
  *(void *)double v10 = &unk_1ED985520;
  *((void *)v10 + 1) = 1;
  *((void *)v10 + 3) = 0;
  *((void *)v10 + 4) = 21512;
  int8x16_t v11 = CMMBase::NewInternal(0x5408uLL, a4);
  *((void *)v10 + 2) = v11;
  uint64_t v12 = CMMTable::FloatData((uint64_t)v11, *((void *)v10 + 3));
  (*((void (**)(CMMLut8Tag **, uint64_t, uint64_t, BOOL))*a1 + 12))(a1, a2, v12, a5 == 1347182946);
  if (a3)
  {
    unsigned __int8 v20 = 0;
    OutputTable = (CMMLut8Tag *)CMMLut8Tag::GetOutputTable(a1[13], a2);
    CMMLut8Tag::EvaluateGamma(OutputTable, &v20, v14, v15, v16);
    *(_DWORD *)a3 = 1;
    *(_OWORD *)(a3 + 4) = 0u;
    *(_OWORD *)(a3 + 20) = 0u;
    *(_OWORD *)(a3 + 36) = 0u;
    *(_DWORD *)(a3 + 52) = 0;
    if (v20 && v18 == 1.0)
    {
      *(_DWORD *)(a3 + 24) = 1065353216;
      *(unsigned char *)(a3 + CMMBase::operator delete(this - 8) = 1;
    }
    else
    {
      *(_DWORD *)a3 = 0;
      *(void *)(a3 + 16) = CMMTable::MakeFloatCopy(v10, a4, v17);
    }
  }
  return v10;
}

uint64_t CMMLut8Tag::MakeOutputLut(CMMLut8Tag *this, uint64_t a2, int *a3)
{
  uint64_t v3 = MEMORY[0x1F4188790](this, a2, a3);
  int v5 = v4;
  uint64_t v7 = v6;
  int v9 = v8;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t OutputTable = CMMLut8Tag::GetOutputTable(*(CMMLut8Tag **)(v3 + 112), v8);
  int8x16_t v11 = (unsigned __int8 *)OutputTable;
  if ((v9 - 1) <= 1 && v5)
  {
    bzero(&v17, 0x4004uLL);
    memset(v7, 255, 0x4004uLL);
    CMMLut8Tag::EncodeLut((uint64_t)v11, &v17, 0);
    unint64_t v12 = (65792 * *v11 + 0x8000 + 0x101000000 * (unint64_t)*v11) >> 16;
    unint64_t v13 = (65792 * v11[128] + 0x8000 + 0x101000000 * (unint64_t)v11[128]) >> 16;
    unint64_t v14 = (65792 * v11[255] + 0x8000 + 0x101000000 * (unint64_t)v11[255]) >> 16;
    _DWORD *v7 = v12;
    memcpy(v7 + 1, v18, 0x2018uLL);
    v7[2057] = v13;
    v7[2056] = v13;
    v7[2055] = v13;
    uint64_t result = (uint64_t)memcpy(v7 + 2058, v19, 0x1FD8uLL);
    v7[4096] = v14;
  }
  else
  {
    uint64_t result = CMMLut8Tag::EncodeLut(OutputTable, v7, 0);
    int v16 = v7[4096];
    v7[1] = *v7;
    v7[4095] = v16;
  }
  return result;
}

uint64_t CMMLut8Tag::EncodeLut(uint64_t result, _DWORD *a2, int a3)
{
  unint64_t v3 = 0;
  for (uint64_t i = 0; i != 16781312; i += 4096)
  {
    unint64_t v5 = v3 >> 24;
    unint64_t v6 = *(unsigned __int8 *)(result + (v3 >> 24));
    if (a3) {
      LODWORD(v6) = v6 << 16;
    }
    else {
      unint64_t v6 = ((65792 * v6 + 0x8000) + 0x101000000 * v6) >> 16;
    }
    if (i != (v3 & 0xFF000000) / 0xFF)
    {
      if (v5 >= 0xFF)
      {
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = -171;
      }
      unint64_t v7 = *(unsigned __int8 *)(result + (v5 + 1));
      if (a3) {
        LODWORD(v7) = v7 << 16;
      }
      else {
        unint64_t v7 = ((65792 * v7 + 0x8000) + 0x101000000 * v7) >> 16;
      }
      unint64_t v8 = (i - (v5 << 24) / 0xFF) * ((int)v7 - (int)v6);
      if (v8)
      {
        uint64_t v9 = 255 * v8;
        uint64_t v11 = v9 + 0x800000;
        BOOL v10 = v9 < -8388608;
        unint64_t v12 = v9 + 25165823;
        if (!v10) {
          unint64_t v12 = v11;
        }
        LODWORD(v6) = v6 + (v12 >> 24);
      }
    }
    if ((int)v6 >= 0x1000000) {
      LODWORD(v6) = 0x1000000;
    }
    *a2++ = v6;
    v3 += 1044480;
  }
  return result;
}

uint64_t CMMLut8Tag::MakeInputLut(CMMLut8Tag *this, uint64_t a2, int *a3)
{
  uint64_t v3 = MEMORY[0x1F4188790](this, a2, a3);
  int v5 = v4;
  unint64_t v7 = v6;
  int v9 = v8;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t OutputTable = CMMLut8Tag::GetOutputTable(*(CMMLut8Tag **)(v3 + 104), v8);
  uint64_t v11 = (unsigned __int8 *)OutputTable;
  if ((v9 - 1) <= 1 && v5)
  {
    bzero(&v17, 0x4004uLL);
    memset(v7, 255, 0x4004uLL);
    CMMLut8Tag::EncodeLut((uint64_t)v11, &v17, 1);
    unint64_t v12 = (65792 * *v11 + 0x8000 + 0x101000000 * (unint64_t)*v11) >> 16;
    int v13 = v11[128] << 16;
    unint64_t v14 = (65792 * v11[255] + 0x8000 + 0x101000000 * (unint64_t)v11[255]) >> 16;
    _DWORD *v7 = v12;
    memcpy(v7 + 1, v18, 0x2018uLL);
    v7[2057] = v13;
    v7[2056] = v13;
    v7[2055] = v13;
    uint64_t result = (uint64_t)memcpy(v7 + 2058, v19, 0x1FD8uLL);
    v7[4096] = v14;
  }
  else
  {
    uint64_t result = CMMLut8Tag::EncodeLut(OutputTable, v7, 0);
    int v16 = v7[4096];
    v7[1] = *v7;
    v7[4095] = v16;
  }
  return result;
}

uint64_t CMMLut8Tag::GetOutputLutSize(CMMLut8Tag *this)
{
  return 256;
}

uint64_t CMMLut8Tag::GetInputLutSize(CMMLut8Tag *this)
{
  return 256;
}

unint64_t CMMLut8Tag::InterpolationProtectionZone(CMMLut8Tag *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((unsigned __int8 *)this + 50);
  if ((v8 - 3) > 1) {
    return 0;
  }
  else {
    return CMMLutTagBase::CalculateProtectionZone(*((unsigned __int8 *)this + 52), v8, *((unsigned __int8 *)this + 51), a4, a5, a6, a7, a8);
  }
}

uint64_t CMMLut8Tag::GetCLutPoints(CMMLut8Tag *this)
{
  return *((unsigned __int8 *)this + 52);
}

uint64_t CMMLut8Tag::GetOutputChan(CMMLut8Tag *this)
{
  return *((unsigned __int8 *)this + 51);
}

uint64_t CMMLut8Tag::GetInputChan(CMMLut8Tag *this)
{
  return *((unsigned __int8 *)this + 50);
}

void *CMMLut8Tag::CopyClut(CMMLut8Tag *this, CMMMemMgr *a2)
{
  if (*((void *)this + 12)) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 4294967246;
  }
  CMMThrowExceptionOnError(v4);
  uint64_t v5 = *(void *)(*((void *)this + 12) + 32);
  uint64_t v6 = (*(uint64_t (**)(CMMLut8Tag *))(*(void *)this + 72))(this);
  uint64_t v7 = v6 + v5;
  if (__CFADD__(v6, v5)) {
    uint64_t v8 = 4294967246;
  }
  else {
    uint64_t v8 = 0;
  }
  CMMThrowExceptionOnError(v8);
  CMMThrowExceptionOnError((v7 >> 63) & 0xFFFFFFCELL);
  int v9 = CMMBase::NewInternal(0x28uLL, (void **)a2);
  unint64_t v10 = 1;
  *int v9 = &unk_1ED985520;
  v9[1] = 1;
  v9[3] = 0;
  _OWORD v9[4] = 2 * v7;
  uint64_t v11 = CMMBase::NewInternal(2 * v7, (void **)a2);
  v9[2] = v11;
  unint64_t v12 = (_WORD *)CMMTable::FloatData((uint64_t)v11, v9[3]);
  BOOL v19 = (unsigned __int8 *)CMMTable::FloatData(*(void *)(*((void *)this + 12) + 16), *(void *)(*((void *)this + 12) + 24));
  uint64_t v20 = *((unsigned __int8 *)this + 50);
  if (!*((unsigned char *)this + 50)) {
    goto LABEL_17;
  }
  unint64_t v21 = *((unsigned __int8 *)this + 52);
  unint64_t v10 = 1;
  do
  {
    unint64_t v22 = v10;
    v10 *= v21;
    BOOL v24 = v10 >= v22 && v10 >= v21;
    CMMThrowExceptionWithLog(v24, "Overflow in Power", v13, v14, v15, v16, v17, v18);
    --v20;
  }
  while (v20);
  if (v10)
  {
LABEL_17:
    uint64_t v25 = 0;
    uint64_t v26 = *((unsigned __int8 *)this + 51);
    do
    {
      uint64_t v27 = v26;
      if (v26)
      {
        do
        {
          __int16 v28 = *v19++;
          *v12++ = v28 | (v28 << 8);
          --v27;
        }
        while (v27);
      }
      ++v25;
    }
    while (v25 != v10);
  }
  return v9;
}

char *CMMLut8Tag::GetWholeCloth(char *this, unsigned __int8 *a2, unint64_t *a3)
{
  if (!a3) {
    goto LABEL_21;
  }
  uint64_t v4 = this;
  if (!a2)
  {
    *a3 = *((void *)this + 4);
    return this;
  }
  if (*a3 != *((void *)this + 4))
  {
LABEL_21:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -50;
  }
  bzero(a2, *a3);
  *(_DWORD *)a2 = 829711981;
  long long v11 = *(_OWORD *)(v4 + 50);
  long long v12 = *(_OWORD *)(v4 + 66);
  *((void *)a2 + 5) = *(void *)(v4 + 82);
  *(_OWORD *)(a2 + 24) = v12;
  *(_OWORD *)(a2 + CMMBase::operator delete(this - 8) = v11;
  uint64_t v13 = 12;
  do
  {
    *(_DWORD *)&a2[v13] = bswap32(*(_DWORD *)&a2[v13]);
    v13 += 4;
  }
  while (v13 != 48);
  uint64_t v14 = v4[50];
  if (v4[50])
  {
    unint64_t v15 = v4[52];
    unint64_t v16 = 1;
    do
    {
      unint64_t v17 = v16;
      v16 *= v15;
      BOOL v19 = v16 >= v17 && v16 >= v15;
      CMMThrowExceptionWithLog(v19, "Overflow in Power", v5, v6, v7, v8, v9, v10);
      --v14;
    }
    while (v14);
    size_t v20 = (unint64_t)v4[50] << 8;
  }
  else
  {
    size_t v20 = 0;
    unint64_t v16 = 1;
  }
  uint64_t v21 = v4[51];
  size_t v22 = v16 * v21;
  size_t v23 = v21 << 8;
  BOOL v24 = a2 + 48;
  uint64_t v25 = (const void *)CMMTable::FloatData(*(void *)(*((void *)v4 + 13) + 16), *(void *)(*((void *)v4 + 13) + 24));
  memcpy(v24, v25, v20);
  uint64_t v26 = &v24[v20];
  uint64_t v27 = (const void *)CMMTable::FloatData(*(void *)(*((void *)v4 + 12) + 16), *(void *)(*((void *)v4 + 12) + 24));
  memcpy(v26, v27, v22);
  __int16 v28 = (const void *)CMMTable::FloatData(*(void *)(*((void *)v4 + 14) + 16), *(void *)(*((void *)v4 + 14) + 24));

  return (char *)memcpy(&v26[v22], v28, v23);
}

uint64_t CMMLut8Tag::GetTagType(CMMLut8Tag *this)
{
  return 1835430961;
}

void CMMLut8Tag::~CMMLut8Tag(CMMLut8Tag *this)
{
  CMMLut8Tag::~CMMLut8Tag(this);

  CMMBase::operator delete(v1);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t vars8;

  *(void *)this = &unk_1ED981110;
  int v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    uint64_t v3 = v2[1];
    if (v3)
    {
      uint64_t v4 = v3 - 1;
      v2[1] = v4;
      if (!v4) {
        (*(void (**)(void *))(*v2 + 8))(v2);
      }
    }
  }
  uint64_t v5 = (void *)*((void *)this + 13);
  if (v5)
  {
    uint64_t v6 = v5[1];
    if (v6)
    {
      uint64_t v7 = v6 - 1;
      v5[1] = v7;
      if (!v7) {
        (*(void (**)(void *))(*v5 + 8))(v5);
      }
    }
  }
  uint64_t v8 = (void *)*((void *)this + 14);
  if (v8)
  {
    uint64_t v9 = v8[1];
    if (v9)
    {
      uint64_t v10 = v9 - 1;
      v8[1] = v10;
      if (!v10) {
        (*(void (**)(void *))(*v8 + 8))(v8);
      }
    }
  }

  CMMTag::~CMMTag(this);
}

uint64_t CMMCICPTag::Validate(CMMCICPTag *this)
{
  int v1 = *(_DWORD *)((char *)this + 50);
  if (v1 == 12 || (v1 & 0xFB) == 1 || (v1 & 0xFD) == 9)
  {
    unsigned int v4 = BYTE1(v1);
    if ((0x5E142u >> SBYTE1(v1))) {
      unsigned int v5 = 0;
    }
    else {
      unsigned int v5 = -170;
    }
    if (v4 <= 0x12) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 4294967126;
    }
  }
  else
  {
    uint64_t v6 = 4294967126;
  }
  CMMThrowExceptionOnError(v6);
  return 0;
}

void CMMCICPTag::~CMMCICPTag(CMMCICPTag *this)
{
  CMMTag::~CMMTag(this);

  CMMBase::operator delete(v1);
}

void CMMProfileSequenceDescTag::~CMMProfileSequenceDescTag(CMMProfileSequenceDescTag *this)
{
  CMMTag::~CMMTag(this);

  CMMBase::operator delete(v1);
}

void CMMTechnologyTag::~CMMTechnologyTag(CMMTechnologyTag *this)
{
  CMMTag::~CMMTag(this);

  CMMBase::operator delete(v1);
}

void CMMNamedColorTag::GetWholeCloth(CMMNamedColorTag *this, unsigned __int8 *a2, unint64_t *a3)
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = -171;
}

void CMMNamedColorTag::~CMMNamedColorTag(CMMNamedColorTag *this)
{
  CMMTag::~CMMTag(this);

  CMMBase::operator delete(v1);
}

void CMMTextTag::~CMMTextTag(CMMTextTag *this)
{
  CMMTag::~CMMTag(this);

  CMMBase::operator delete(v1);
}

void CMMTextDescTag::~CMMTextDescTag(CMMTextDescTag *this)
{
  CMMTag::~CMMTag(this);

  CMMBase::operator delete(v1);
}

uint64_t CMMProfile::GetDevConv(uint64_t a1)
{
  return *(unsigned int *)(a1 + 176);
}

unsigned __int8 *CMMProfile::GetGamutTag(CMMProfile *this)
{
  return CMMProfile::GetTag((uint64_t)this, 1734438260);
}

uint64_t CMMMatrixInputProfile::GetConversionType(CMMMatrixInputProfile *this, __CFString *a2)
{
  return CMMProfile::GenericGetConversionType((CMMProfile *)a2, a2);
}

uint64_t CMMInputProfile::GetDstColorSpace(unsigned int *lpsrc, int a2, unsigned char *a3)
{
  int v4 = a2;
  if (a2 == 1)
  {
    uint64_t v6 = lpsrc[13];
    goto LABEL_15;
  }
  if (lpsrc)
  {
    {
      goto LABEL_9;
    }
    uint64_t v7 = (uint64_t)lpsrc;
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (!CMMProfile::GetTag(v7, 1110589744)) {
    goto LABEL_13;
  }
LABEL_9:
  if (v4 == 3)
  {
    uint64_t v6 = lpsrc[13];
    LOBYTE(v4) = 1;
LABEL_15:
    if (v6 == 1281450528)
    {
      uint64_t v8 = 0;
      uint64_t v6 = 1347182946;
      goto LABEL_26;
    }
LABEL_23:
    if (v6 != -1)
    {
      uint64_t v8 = 0;
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v4 != 2)
  {
LABEL_13:
    LOBYTE(v4) = 0;
LABEL_25:
    uint64_t v8 = 4294967246;
    uint64_t v6 = 0xFFFFFFFFLL;
    goto LABEL_26;
  }
  uint64_t v6 = lpsrc[12];
  switch((int)v6)
  {
    case 1296255029:
      LOBYTE(v4) = 0;
      uint64_t v8 = 0;
      uint64_t v6 = 893602898;
      break;
    case 1296255030:
      LOBYTE(v4) = 0;
      uint64_t v8 = 0;
      uint64_t v6 = 910380114;
      break;
    case 1296255031:
      LOBYTE(v4) = 0;
      uint64_t v8 = 0;
      uint64_t v6 = 927157330;
      break;
    case 1296255032:
      LOBYTE(v4) = 0;
      uint64_t v8 = 0;
      uint64_t v6 = 943934546;
      break;
    default:
      if (v6 != 1281450528)
      {
        LOBYTE(v4) = 0;
        goto LABEL_23;
      }
      LOBYTE(v4) = 0;
      uint64_t v8 = 0;
      uint64_t v6 = 1145856354;
      break;
  }
LABEL_26:
  CMMThrowExceptionOnError(v8);
  if (a3) {
    *a3 = v4;
  }
  return v6;
}

uint64_t CMMInputProfile::GetSrcColorSpace(unsigned int *lpsrc, int a2)
{
  if (a2 != 1)
  {
    if (lpsrc)
    {
      {
        if ((a2 & 0xFFFFFFFE) != 2) {
          goto LABEL_22;
        }
        goto LABEL_18;
      }
      uint64_t v6 = (uint64_t)lpsrc;
    }
    else
    {
      uint64_t v6 = 0;
    }
    CFDataRef Tag = CMMProfile::GetTag(v6, 1110589744);
    if ((a2 & 0xFFFFFFFE) != 2 || !Tag) {
      goto LABEL_22;
    }
LABEL_18:
    uint64_t v3 = lpsrc[13];
    if (v3 == 1281450528)
    {
      uint64_t v4 = 0;
      uint64_t v3 = 1347182946;
      goto LABEL_23;
    }
LABEL_20:
    if (v3 != -1)
    {
      uint64_t v4 = 0;
      goto LABEL_23;
    }
LABEL_22:
    uint64_t v4 = 4294967246;
    uint64_t v3 = 0xFFFFFFFFLL;
    goto LABEL_23;
  }
  uint64_t v3 = lpsrc[12];
  switch((int)v3)
  {
    case 1296255029:
      uint64_t v4 = 0;
      uint64_t v3 = 893602898;
      break;
    case 1296255030:
      uint64_t v4 = 0;
      uint64_t v3 = 910380114;
      break;
    case 1296255031:
      uint64_t v4 = 0;
      uint64_t v3 = 927157330;
      break;
    case 1296255032:
      uint64_t v4 = 0;
      uint64_t v3 = 943934546;
      break;
    default:
      if (v3 != 1281450528) {
        goto LABEL_20;
      }
      uint64_t v4 = 0;
      uint64_t v3 = 1145856354;
      break;
  }
LABEL_23:
  CMMThrowExceptionOnError(v4);
  return v3;
}

double CMMMatrixInputProfile::GetMatrixTags(CMMMatrixInputProfile *this, CMMXYZTag *(*a2)[3], CMMRGBCurves *a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  memset(v5, 0, sizeof(v5));
  if (CMMProfile::InnerGetMatrixTags(this, a2, (CMMCurveTag *(*)[3])v5))
  {
    double result = *(double *)v5;
    *(_OWORD *)((char *)a3 + CMMBase::operator delete(this - 8) = *(_OWORD *)v5;
    *((CMMCurveTag **)a3 + 3) = v5[2];
  }
  return result;
}

void CMMPQCurveTag::CMMPQCurveTag(CMMPQCurveTag *this, uint64_t a2, uint64_t a3)
{
  *(void *)this = &unk_1ED982180;
  if (CMMPQCurveTag::get_dafault_data(void)::predicate != -1) {
    dispatch_once(&CMMPQCurveTag::get_dafault_data(void)::predicate, &__block_literal_global_983);
  }
  CMMCurveTag::CMMCurveTag(this, 1751405638, (uint64_t)&CMMPQCurveTag::get_dafault_data(void)::default_data, 12, a3);
  *(void *)this = &unk_1ED982180;
  if (a2)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    if (v6) {
      *(void *)(a2 + CMMBase::operator delete(this - 8) = v6 + 1;
    }
  }
  *((void *)this + CMMBase::operator delete(this - 8) = a2;
  *(_OWORD *)((char *)this + 72) = xmmword_18BE63670;
  *((_DWORD *)this + 22) = 1100316672;
  CMMPQCurveTag::Initialize((uint64_t)this);
}

void sub_18BE4F380(_Unwind_Exception *a1)
{
  CMMTag::~CMMTag(v1);
  _Unwind_Resume(a1);
}

void CMMHLGCurveTag::CMMHLGCurveTag(CMMHLGCurveTag *this, uint64_t a2)
{
  *(void *)this = &unk_1ED9825B0;
  if (CMMHLGCurveTag::get_dafault_data(void)::predicate[0] != -1) {
    dispatch_once(CMMHLGCurveTag::get_dafault_data(void)::predicate, &__block_literal_global_986);
  }
  CMMCurveTag::CMMCurveTag(this, 1751405638, (uint64_t)&CMMHLGCurveTag::get_dafault_data(void)::default_data, 12, a2);
  *(void *)this = &unk_1ED9825B0;
  *((_OWORD *)this + 4) = xmmword_18BE63680;
  *((_DWORD *)this + 20) = 1051372203;
  CMMHLGCurveTag::Initialize(v4);
}

void sub_18BE4F44C(_Unwind_Exception *a1)
{
  CMMTag::~CMMTag(v1);
  _Unwind_Resume(a1);
}

void ___ZN14CMMHLGCurveTag16get_dafault_dataEv_block_invoke()
{
  CMMHLGCurveTag::get_dafault_data(void)::default_data = 541543496;
  dword_1E9155110 = 1728774144;
}

void ___ZN13CMMPQCurveTag16get_dafault_dataEv_block_invoke()
{
  CMMPQCurveTag::get_dafault_data(void)::default_data = 538988880;
  dword_1E9155058 = -2078277632;
}

void *CMMSRGBCurve::MakeTRC(uint64_t a1, uint64_t a2, void **a3)
{
  return CMMParaCurveTag::MakeTRC(a1, a2, a3, 0, 1.0);
}

void CMMSRGBCurve::~CMMSRGBCurve(CMMSRGBCurve *this)
{
  CMMTag::~CMMTag(this);

  CMMBase::operator delete(v1);
}

void CMMLinearGamma::~CMMLinearGamma(CMMLinearGamma *this)
{
  CMMTag::~CMMTag(this);

  CMMBase::operator delete(v1);
}

CMMTable *CMMITUBT709OETF::MakeInvertedTRC(uint64_t a1, uint64_t a2)
{
  double result = CMMParaCurveTag::MakeInvertedTRC();
  if (a2) {
    *(_DWORD *)(a2 + 4) = 15;
  }
  return result;
}

void *CMMITUBT709OETF::MakeTRC(uint64_t a1, uint64_t a2, void **a3, float a4)
{
  double result = CMMParaCurveTag::MakeTRC(a1, a2, a3, 0, a4);
  if (a2) {
    *(_DWORD *)(a2 + 4) = 14;
  }
  return result;
}

void CMMITUBT709OETF::~CMMITUBT709OETF(CMMITUBT709OETF *this)
{
  CMMTag::~CMMTag(this);

  CMMBase::operator delete(v1);
}

void CMMMatrixInputProfile::~CMMMatrixInputProfile(CMMMatrixInputProfile *this)
{
  CMMProfile::~CMMProfile(this);

  CMMBase::operator delete(v1);
}

void std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100]()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception);
  __cxa_throw(exception, (struct type_info *)off_1E54D5BE0, MEMORY[0x1E4FBA1D0]);
}

void sub_18BE4F654(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1)
{
  double result = std::logic_error::logic_error(a1, "vector");
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100]()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception);
  __cxa_throw(exception, (struct type_info *)off_1E54D5BD8, MEMORY[0x1E4FBA1C8]);
}

void sub_18BE4F6F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1)
{
  double result = std::logic_error::logic_error(a1, "vector");
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

uint64_t TVector<CMMTagInfo,TAllocator<CMMTagInfo>>::~TVector(uint64_t a1)
{
  uint64_t v3 = (pthread_mutex_t ***)(a1 + 8);
  std::vector<CMMTagInfo,TAllocator<CMMTagInfo>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

_DWORD *CMMMatrixDisplayProfile::GetGamutTag(CMMMatrixDisplayProfile *this)
{
  double result = CMMProfile::GetTag((uint64_t)this, 1734438260);
  if (!result)
  {
    CFDataRef Tag = CMMProfile::GetTag((uint64_t)this, 1918392666);
    uint64_t v4 = CMMProfile::GetTag((uint64_t)this, 1733843290);
    unsigned int v5 = CMMProfile::GetTag((uint64_t)this, 1649957210);
    double result = CMMBase::NewInternal(0x50uLL, *((void ***)this + 3));
    uint64_t v6 = *((void *)this + 20);
    while (v6)
    {
      uint64_t v7 = v6;
      uint64_t v6 = *(void *)(v6 + 16);
      if (!v6)
      {
        result[2] = 1734438260;
        *((void *)result + 4) = 0;
        *((void *)result + 5) = 0;
        *((_WORD *)result + 24) = 0;
        *((void *)result + 2) = 0;
        *((void *)result + 3) = v7;
        *(void *)(v7 + 16) = result;
        goto LABEL_7;
      }
    }
    result[2] = 1734438260;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *((_WORD *)result + 24) = 0;
LABEL_7:
    *(void *)double result = &unk_1ED983200;
    *((void *)result + 7) = Tag;
    *((void *)result + CMMBase::operator delete(this - 8) = v4;
    *((void *)result + 9) = v5;
  }
  return result;
}

void CMMMatrixGamutTag::~CMMMatrixGamutTag(CMMMatrixGamutTag *this)
{
  CMMTag::~CMMTag(this);

  CMMBase::operator delete(v1);
}

uint64_t CMMMatrixHDRDisplayProfile::IsMatrixHDRProfile(CMMMatrixHDRDisplayProfile *this)
{
  return 1;
}

uint64_t CMMMatrixHDRDisplayProfile::GetGamutTag(CMMMatrixHDRDisplayProfile *this)
{
  return 0;
}

uint64_t CMMDevLinkProfile::GetConversionType(CMMDevLinkProfile *this, const __CFString *a2)
{
  return 5;
}

uint64_t CMMDevLinkProfile::GetDstColorSpace(uint64_t a1, int a2, unsigned char *a3)
{
  if (a3) {
    *a3 = 0;
  }
  if (a2 != 5)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -50;
  }
  unsigned int v3 = *(_DWORD *)(a1 + 52);
  if (v3 == 1281450528) {
    unsigned int v3 = 1347182946;
  }
  if (v3 == 1347182946) {
    return 1145856354;
  }
  else {
    return v3;
  }
}

uint64_t CMMDevLinkProfile::GetSrcColorSpace(uint64_t a1, int a2)
{
  if (a2 != 5)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -50;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 48);
  switch(v2)
  {
    case 0x4D434835u:
      uint64_t result = 893602898;
      break;
    case 0x4D434836u:
      uint64_t result = 910380114;
      break;
    case 0x4D434837u:
      uint64_t result = 927157330;
      break;
    case 0x4D434838u:
      uint64_t result = 943934546;
      break;
    default:
      if (v2 == 1281450528) {
        uint64_t result = 1145856354;
      }
      else {
        uint64_t result = v2;
      }
      break;
  }
  return result;
}

void *CMMDevLinkProfile::GetLutTags(_DWORD *a1, int a2, unsigned int a3)
{
  if (a2 != 5) {
    return 0;
  }
  int v4 = a1[12];
  switch(v4)
  {
    case 1296255029:
      int v5 = 893602898;
      break;
    case 1296255030:
      int v5 = 910380114;
      break;
    case 1296255031:
      int v5 = 927157330;
      break;
    case 1296255032:
      int v5 = 943934546;
      break;
    default:
      if (v4 == 1281450528) {
        int v5 = 1145856354;
      }
      else {
        int v5 = a1[12];
      }
      break;
  }
  int v6 = a1[13] == 1281450528 ? 1347182946 : a1[13];
  uint64_t AToBTagSignature = CMMProfile::GetAToBTagSignature(a3);
  if (AToBTagSignature == -1) {
    return 0;
  }
  int v8 = AToBTagSignature;
  if (!(*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a1 + 88))(a1, AToBTagSignature)) {
    return 0;
  }

  return CMMProfile::SingleTagContainer((uint64_t)a1, v8, v5, v6);
}

uint64_t CMMProfile::GetAToBTagSignature(unsigned int a1)
{
  if (a1 >= 4)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  return dword_18BE638C0[a1];
}

void CMMDevLinkProfile::~CMMDevLinkProfile(CMMDevLinkProfile *this)
{
  CMMProfile::~CMMProfile(this);

  CMMBase::operator delete(v1);
}

uint64_t CMMColorSpaceProfile::IsLegacyGenericLab(CMMColorSpaceProfile *this)
{
  return *((unsigned __int8 *)this + 180);
}

uint64_t CMMAbstractProfile::GetConversionType(CMMAbstractProfile *this, const __CFString *a2)
{
  return 3;
}

uint64_t CMMAbstractProfile::GetDstColorSpace(uint64_t a1, int a2, unsigned char *a3)
{
  if (a3) {
    *a3 = 1;
  }
  if (a2 != 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -50;
  }
  unsigned int v3 = *(_DWORD *)(a1 + 52);
  if (v3 == 1281450528) {
    return 1347182946;
  }
  else {
    return v3;
  }
}

uint64_t CMMAbstractProfile::GetSrcColorSpace(uint64_t a1, int a2)
{
  if (a2 != 3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -50;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 48);
  uint64_t result = 893602898;
  switch(v2)
  {
    case 0x4D434835u:
      return result;
    case 0x4D434836u:
      uint64_t result = 910380114;
      break;
    case 0x4D434837u:
      uint64_t result = 927157330;
      break;
    case 0x4D434838u:
      uint64_t result = 943934546;
      break;
    default:
      if (v2 == 1145856354 || v2 == 1281450528) {
        uint64_t result = 1347182946;
      }
      else {
        uint64_t result = v2;
      }
      break;
  }
  return result;
}

void *CMMAbstractProfile::GetLutTags(uint64_t a1, int a2, unsigned int a3)
{
  if (a2 != 3) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 52);
  int AToBTagSignature = CMMProfile::GetAToBTagSignature(a3);
  if (AToBTagSignature == -1) {
    return 0;
  }
  if (v4 == 1281450528) {
    int v6 = 1347182946;
  }
  else {
    int v6 = v4;
  }

  return CMMProfile::SingleTagContainer(a1, AToBTagSignature, v6, v6);
}

void CMMAbstractProfile::~CMMAbstractProfile(CMMAbstractProfile *this)
{
  CMMProfile::~CMMProfile(this);

  CMMBase::operator delete(v1);
}

uint64_t CMMNamedColorProfile::UseNamedColor()
{
  return 1;
}

uint64_t CMMNamedColorProfile::GetConversionType(CMMNamedColorProfile *this, CFTypeRef cf1, int a3, int a4)
{
  if (CFEqual(cf1, kColorSyncTransformDeviceToPCS))
  {
    if (a3 && !a4) {
      return 6;
    }
    if (a3 && (a4 & 1) != 0) {
      return 7;
    }
LABEL_14:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -50;
  }
  if (CFEqual(cf1, kColorSyncTransformPCSToDevice))
  {
    if (a4) {
      return 8;
    }
    else {
      return 2;
    }
  }
  else
  {
    if (!CFEqual(cf1, kColorSyncTransformPCSToPCS)) {
      goto LABEL_14;
    }
    return 3;
  }
}

uint64_t CMMNamedColorProfile::GetDstColorSpace(uint64_t a1, int a2, unsigned char *a3)
{
  LOBYTE(v5) = 0;
  uint64_t result = 1;
  switch(a2)
  {
    case 2:
    case 7:
      CFDataRef Tag = CMMProfile::GetTag(a1, 1852009522);
      if (!Tag
      {
        exception = __cxa_allocate_exception(4uLL);
        int v12 = -171;
LABEL_24:
        _DWORD *exception = v12;
      }
      int v5 = v8[22];
      if (v5)
      {
        unsigned int v9 = *(_DWORD *)(a1 + 48);
        switch(v9)
        {
          case 0x4D434835u:
            LOBYTE(v5) = 0;
            uint64_t result = 893602898;
            break;
          case 0x4D434836u:
            LOBYTE(v5) = 0;
            uint64_t result = 910380114;
            break;
          case 0x4D434837u:
            LOBYTE(v5) = 0;
            uint64_t result = 927157330;
            break;
          case 0x4D434838u:
            LOBYTE(v5) = 0;
            uint64_t result = 943934546;
            break;
          default:
            if (v9 == 1281450528) {
              uint64_t result = 1145856354;
            }
            else {
              uint64_t result = v9;
            }
            LOBYTE(v5) = 0;
            break;
        }
      }
      else
      {
        uint64_t result = 0;
      }
LABEL_19:
      if (a3) {
        *a3 = v5;
      }
      return result;
    case 3:
    case 6:
      unsigned int v10 = *(_DWORD *)(a1 + 52);
      if (v10 == 1281450528) {
        uint64_t result = 1347182946;
      }
      else {
        uint64_t result = v10;
      }
      LOBYTE(v5) = 1;
      goto LABEL_19;
    case 8:
      goto LABEL_19;
    default:
      exception = __cxa_allocate_exception(4uLL);
      int v12 = -50;
      goto LABEL_24;
  }
}

uint64_t CMMNamedColorProfile::GetSrcColorSpace(uint64_t a1, unsigned int a2)
{
  if (a2 > 8) {
    goto LABEL_7;
  }
  uint64_t result = 1;
  if (((1 << a2) & 0x10C) == 0)
  {
    if (((1 << a2) & 0xC0) != 0) {
      return result;
    }
LABEL_7:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -50;
  }
  unsigned int v4 = *(_DWORD *)(a1 + 52);
  if (v4 == 1281450528) {
    return 1347182946;
  }
  else {
    return v4;
  }
}

void CMMNamedColorProfile::~CMMNamedColorProfile(CMMNamedColorProfile *this)
{
  CMMProfile::~CMMProfile(this);

  CMMBase::operator delete(v1);
}

float CMMGamma::MakeTRC(uint64_t a1, uint64_t a2, void **a3)
{
  CMMCurveTag::MakeTRC(a1, a2, a3, 0);
  *(void *)a2 = 1;
  *(_DWORD *)(a2 + 12) = 1;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + CMMBase::operator delete(this - 8) = 1;
  float result = *(float *)(a1 + 56);
  *(float *)(a2 + 24) = result;
  *(_DWORD *)(a2 + 2CMMBase::operator delete(this - 8) = 1065353216;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 4CMMBase::operator delete(this - 8) = 0;
  *(void *)(a2 + 32) = 0;
  return result;
}

void CMMGamma::~CMMGamma(CMMGamma *this)
{
  CMMTag::~CMMTag(this);

  CMMBase::operator delete(v1);
}

void CMMThreadManager::~CMMThreadManager(CMMThreadManager *this)
{
  *(void *)this = &unk_1ED982F18;
  unsigned int v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    free(v2);
    *((void *)this + 1) = 0;
  }

  CMMBase::operator delete((pthread_mutex_t **)this);
}

{
  void *v2;

  *(void *)this = &unk_1ED982F18;
  unsigned int v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    free(v2);
    *((void *)this + 1) = 0;
  }
}

uint64_t CMMOutputProfile::GetConversionType(CMMOutputProfile *this, __CFString *a2)
{
  return CMMProfile::GenericGetConversionType((CMMProfile *)a2, a2);
}

uint64_t CMMOutputProfile::GetDstColorSpace(uint64_t a1, int a2, BOOL *a3)
{
  unsigned int v4 = a2 & 0xFFFFFFFD;
  if ((a2 & 0xFFFFFFFD) == 1)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 52);
    if (v5 == 1281450528)
    {
      uint64_t v6 = 0;
      uint64_t v5 = 1347182946;
      goto LABEL_14;
    }
LABEL_11:
    if (v5 != -1)
    {
      uint64_t v6 = 0;
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (a2 != 4)
  {
    if (a2 == 2)
    {
      uint64_t v5 = *(unsigned int *)(a1 + 48);
      switch((int)v5)
      {
        case 1296255029:
          goto LABEL_8;
        case 1296255030:
          goto LABEL_17;
        case 1296255031:
          goto LABEL_18;
        case 1296255032:
          goto LABEL_19;
        default:
          goto LABEL_9;
      }
    }
LABEL_13:
    uint64_t v6 = 4294967246;
    uint64_t v5 = 0xFFFFFFFFLL;
    goto LABEL_14;
  }
  uint64_t v5 = *(unsigned int *)(a1 + 48);
  switch((int)v5)
  {
    case 1296255029:
LABEL_8:
      uint64_t v6 = 0;
      uint64_t v5 = 893602898;
      break;
    case 1296255030:
LABEL_17:
      uint64_t v6 = 0;
      uint64_t v5 = 910380114;
      break;
    case 1296255031:
LABEL_18:
      uint64_t v6 = 0;
      uint64_t v5 = 927157330;
      break;
    case 1296255032:
LABEL_19:
      uint64_t v6 = 0;
      uint64_t v5 = 943934546;
      break;
    default:
LABEL_9:
      if (v5 != 1281450528) {
        goto LABEL_11;
      }
      uint64_t v6 = 0;
      uint64_t v5 = 1145856354;
      break;
  }
LABEL_14:
  CMMThrowExceptionOnError(v6);
  if (a3) {
    *a3 = v4 == 1;
  }
  return v5;
}

uint64_t CMMOutputProfile::GetSrcColorSpace(uint64_t a1, int a2)
{
  if (a2 == 1)
  {
    unsigned int v2 = *(_DWORD *)(a1 + 48);
    switch(v2)
    {
      case 0x4D434835u:
        uint64_t result = 893602898;
        break;
      case 0x4D434836u:
        uint64_t result = 910380114;
        break;
      case 0x4D434837u:
        uint64_t result = 927157330;
        break;
      case 0x4D434838u:
        uint64_t result = 943934546;
        break;
      default:
        unsigned int v5 = 1145856354;
        BOOL v4 = v2 == 1281450528;
        goto LABEL_8;
    }
  }
  else
  {
    if ((a2 & 0xFFFFFFFE) != 2 && a2 != 4)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = -50;
    }
    unsigned int v2 = *(_DWORD *)(a1 + 52);
    BOOL v4 = v2 == 1281450528;
    unsigned int v5 = 1347182946;
LABEL_8:
    if (v4) {
      return v5;
    }
    else {
      return v2;
    }
  }
  return result;
}

uint64_t CMMGetPrecisionFromData(int a1, char a2)
{
  int v2 = a1 - 1;
  unsigned int v3 = (a2 & 0x1F) - 1;
  uint64_t result = 2;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
      BOOL v5 = v3 >= 2;
      unsigned int v6 = 1;
      goto LABEL_6;
    case 2:
      BOOL v5 = v3 >= 2;
      unsigned int v6 = 3;
LABEL_6:
      if (v5) {
        uint64_t result = v6;
      }
      else {
        uint64_t result = v6 + 1;
      }
      break;
    case 3:
    case 6:
      uint64_t result = 5;
      break;
    case 5:
    case 7:
      uint64_t result = 4;
      break;
    default:
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = -181;
  }
  return result;
}

void *CMMDataBaseClass::CMMDataBaseClass(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  result[1] = 0;
  result[2] = a3;
  uint64_t v4 = a2[18];
  result[3] = a4;
  result[4] = a4 - v4 * a3;
  if (*a2 != 1)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  *uint64_t result = a2;
  result[5] = a2[19];
  result[6] = v4;
  result[7] = 0;
  return result;
}

{
  uint64_t v4;
  _DWORD *exception;

  result[1] = a2;
  result[2] = a3;
  uint64_t v4 = a2[18];
  result[3] = a4;
  result[4] = a4 - v4 * a3;
  if (*a2 != 1)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  *uint64_t result = 0;
  result[5] = a2[19];
  result[6] = v4;
  result[7] = 0;
  return result;
}

uint64_t CMM8Bit3ChanData::SetParams(uint64_t a1, uint64_t a2)
{
  if (CMMGetChannelCountFromCMMSpace(*(_DWORD *)(a2 + 184)) == 3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 4294967115;
  }
  CMMThrowExceptionOnError(v4);
  if (*(void *)(a1 + 16) == *(void *)(a2 + 168)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 4294967115;
  }
  uint64_t result = CMMThrowExceptionOnError(v5);
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a1 + 72) = v7;
  if ((*(_DWORD *)(a2 + 180) & 0x1D) == 4) {
    *(void *)(a1 + 72) = v7 + 1;
  }
  return result;
}

uint64_t CMM16BitNChanData::SetParams(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + 168) == 2 * a1[2]) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 4294967115;
  }
  CMMThrowExceptionOnError(v4);
  if (*(void *)(a2 + 160) == 2 * a1[3]) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 4294967115;
  }
  CMMThrowExceptionOnError(v5);
  uint64_t result = CMMGetChannelCountFromCMMSpace(*(_DWORD *)(a2 + 184));
  a1[8] = result;
  a1[9] = result ^ 0xF;
  a1[10] = 2 * result;
  uint64_t v7 = *(void *)(a2 + 8);
  a1[16] = v7;
  if ((*(_DWORD *)(a2 + 180) & 0x1D) == 4) {
    a1[16] = v7 + 2;
  }
  return result;
}

void CMMDataEncoder::DoEncode()
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = -171;
}

{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = -171;
}

BOOL CMM8Bit3ChanNoConvEncoder::IsInPlace(uint64_t a1, uint64_t a2)
{
  return CMMDataBaseClass::IsSameData(*(void *)(a1 + 48), a2);
}

void CMM8Bit3ChanNoConvEncoder::DoEncode()
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = -171;
}

uint64_t CMM8Bit3ChanNoConvEncoder::DoEncode(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v5 = 0;
  unsigned int v6 = *(unsigned __int8 **)(result + 112);
  uint64_t v7 = *(void *)(result + 56);
  int v8 = &v6[v7 * *(void *)(result + 96)];
  *(void *)(result + 104) = v8;
  int v9 = (((*v8 << 16) | (v8[1] << 8) | v8[2]) + 1) & 0xFFFFFF;
  *(_DWORD *)(result + 120) = v9;
  uint64_t v10 = *(void *)(result + 80);
  unint64_t v11 = *(void *)(result + 16);
  unint64_t v12 = *(void *)(result + 24);
  do
  {
    if (!v10) {
      break;
    }
    unint64_t v14 = *(void *)(result + 88);
    uint64_t v13 = *(void *)(result + 96);
    unint64_t v15 = v14 - v13;
    if (v14 - v13 >= *(void *)(result + 8) - *a4) {
      unint64_t v15 = *(void *)(result + 8) - *a4;
    }
    if (!v15)
    {
LABEL_13:
      unint64_t v16 = 0;
      goto LABEL_15;
    }
    unint64_t v16 = v15 - 1;
    while (1)
    {
      if (v5 >= v12) {
        goto LABEL_23;
      }
      int v17 = (v8[2] << 16) | (v8[1] << 8) | *v8;
      if (v17 == v9)
      {
        if (v5 < v11) {
          goto LABEL_23;
        }
        ++*(_DWORD *)(a2 + 4 * v5 - 4);
        v8 += v7;
        goto LABEL_12;
      }
      *(_DWORD *)(a2 + 4 * v5) = v17;
      v5 += v11;
      *(_DWORD *)(a2 + 4 * v5 - 4) = 1;
      v8 += v7;
      int v9 = v17;
      if (v5 >= v12) {
        break;
      }
LABEL_12:
      if (--v16 == -1) {
        goto LABEL_13;
      }
    }
    int v9 = v17;
LABEL_15:
    unint64_t v18 = v15 - v16;
    unint64_t v19 = v18 + v13;
    if (v19 != v14)
    {
      if (v19 < v14) {
        goto LABEL_18;
      }
LABEL_23:
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = -171;
    }
    unint64_t v19 = 0;
    int v8 = &v6[*(void *)(result + 64)];
    --v10;
    unsigned int v6 = v8;
LABEL_18:
    *(void *)(result + 96) = v19;
    unint64_t v20 = *a4 + v18;
    *a4 = v20;
    if (v5 <= *(void *)(result + 24))
    {
      unint64_t v21 = *(void *)(result + 8);
      if (v20 <= v21) {
        continue;
      }
    }
    goto LABEL_23;
  }
  while (v5 != v12 && v20 != v21);
  *(void *)(result + 104) = v8;
  *(void *)(result + 112) = v6;
  *(void *)(result + 80) = v10;
  *a5 = v5 / v11;
  return result;
}

void CMMDataDecoder::DoDecode()
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = -171;
}

{
  _DWORD *exception;

  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = -171;
}

void CMM8Bit3ChanNoConvDecoder::DoDecode()
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = -171;
}

void *CMM8Bit3ChanNoConvDecoder::DoDecode(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = 0;
  int v5 = 0;
  int v6 = 0;
  BOOL v7 = 0;
  uint64_t v8 = result[1];
  unint64_t v9 = v8 * a4;
  uint64_t v10 = result[5];
  uint64_t v11 = result[12];
  uint64_t v12 = result[8];
  unint64_t v13 = result[10];
  uint64_t v14 = v11 + v13 * v10;
  result[11] = v14;
  do
  {
    if (!v12) {
      break;
    }
    unint64_t v15 = result[9];
    unint64_t v16 = v15 - v13;
    if (v15 == v13)
    {
      unint64_t v17 = 0;
    }
    else
    {
      unint64_t v17 = ~v13 + v15;
      while (1)
      {
        uint64_t v18 = v14;
        if (v7)
        {
          *(_WORD *)uint64_t v14 = v6;
          *(unsigned char *)(v14 + 2) = BYTE2(v6);
        }
        else
        {
          int v6 = *(_DWORD *)(a2 + 4 * v4);
          *(_WORD *)uint64_t v14 = v6;
          *(unsigned char *)(v14 + 2) = BYTE2(v6);
          int v5 = *(_DWORD *)(a2 + 4 * (v8 - 1 + v4));
        }
        if (v5 <= 0) {
          goto LABEL_22;
        }
        BOOL v7 = --v5 != 0;
        if (!v5)
        {
          v4 += v8;
          if (v4 == v9) {
            break;
          }
        }
        v14 += v10;
        if (--v17 == -1)
        {
          unint64_t v17 = 0;
          uint64_t v14 = v18 + v10;
          goto LABEL_15;
        }
      }
      int v5 = 0;
      BOOL v7 = 0;
      v14 += v10;
      unint64_t v4 = v9;
LABEL_15:
      unint64_t v15 = result[9];
      unint64_t v13 = result[10];
    }
    v13 += v16 - v17;
    if (v13 == v15)
    {
      unint64_t v13 = 0;
      v11 += result[6];
      --v12;
      uint64_t v14 = v11;
    }
    else if (v13 >= v15)
    {
      goto LABEL_22;
    }
    result[10] = v13;
    if (v4 > v9)
    {
LABEL_22:
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = -171;
    }
  }
  while (v4 != v9);
  result[11] = v14;
  result[12] = v11;
  result[8] = v12;
  return result;
}

BOOL CMMEncoderTemplate<CMM16BitNChanData>::IsInPlace(uint64_t a1, uint64_t a2)
{
  return CMMDataBaseClass::IsSameData(*(void *)(a1 + 48), a2);
}

char *CMMEncoderTemplate<CMM16BitNChanData>::DoEncode(char *result, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5)
{
  v108[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)result + 13);
  int v6 = (__int16 *)*((void *)result + 21);
  BOOL v7 = &v6[*((void *)result + 7) * *((void *)result + 12)];
  *((void *)result + 20) = v7;
  unint64_t v9 = result;
  uint64_t v100 = v6;
  uint64_t v10 = (unsigned __int16 *)(result + 128);
  uint64_t v11 = v7;
  uint64_t v12 = result + 128;
  switch(v5)
  {
    case 1:
      goto LABEL_16;
    case 2:
      goto LABEL_15;
    case 3:
      goto LABEL_14;
    case 4:
      goto LABEL_13;
    case 5:
      goto LABEL_12;
    case 6:
      goto LABEL_11;
    case 7:
      goto LABEL_10;
    case 8:
      goto LABEL_9;
    case 9:
      goto LABEL_8;
    case 10:
      goto LABEL_7;
    case 11:
      goto LABEL_6;
    case 12:
      goto LABEL_5;
    case 13:
      goto LABEL_4;
    case 14:
      goto LABEL_3;
    case 15:
      uint64_t v11 = v7 + 1;
      uint64_t v12 = result + 130;
      *((_WORD *)result + 64) = *v7 + 1;
LABEL_3:
      __int16 v13 = *v11++;
      *v12++ = v13 + 1;
LABEL_4:
      __int16 v14 = *v11++;
      *v12++ = v14 + 1;
LABEL_5:
      __int16 v15 = *v11++;
      *v12++ = v15 + 1;
LABEL_6:
      __int16 v16 = *v11++;
      *v12++ = v16 + 1;
LABEL_7:
      __int16 v17 = *v11++;
      *v12++ = v17 + 1;
LABEL_8:
      __int16 v18 = *v11++;
      *v12++ = v18 + 1;
LABEL_9:
      __int16 v19 = *v11++;
      *v12++ = v19 + 1;
LABEL_10:
      __int16 v20 = *v11++;
      *v12++ = v20 + 1;
LABEL_11:
      __int16 v21 = *v11++;
      *v12++ = v21 + 1;
LABEL_12:
      __int16 v22 = *v11++;
      *v12++ = v22 + 1;
LABEL_13:
      __int16 v23 = *v11++;
      *v12++ = v23 + 1;
LABEL_14:
      __int16 v24 = *v11++;
      *v12++ = v24 + 1;
LABEL_15:
      __int16 v25 = *v11++;
      *v12++ = v25 + 1;
LABEL_16:
      unint64_t v26 = 0;
      *uint64_t v12 = *v11 + 1;
      float v104 = (unsigned __int16 *)(result + 130);
      uint64_t v99 = a4;
      break;
    default:
      goto LABEL_87;
  }
  do
  {
    uint64_t v27 = *((void *)v9 + 10);
    if (!v27) {
      break;
    }
    unint64_t v28 = *((void *)v9 + 11);
    uint64_t v29 = *((void *)v9 + 12);
    if (v28 - v29 >= *((void *)v9 + 1) - *a4) {
      unint64_t v30 = *((void *)v9 + 1) - *a4;
    }
    else {
      unint64_t v30 = v28 - v29;
    }
    unint64_t v105 = v30;
    if (v30)
    {
      uint64_t v101 = *((void *)v9 + 12);
      unint64_t v102 = *((void *)v9 + 11);
      uint64_t v103 = *((void *)v9 + 10);
      unint64_t v31 = *((void *)v9 + 3);
      while (2)
      {
        if (v26 >= v31) {
          goto LABEL_87;
        }
        uint64_t v32 = *((void *)v9 + 13);
        uint64_t v33 = v32 - 1;
        --v30;
        int v34 = (unsigned __int16 *)v7;
        float64x2_t v35 = v10;
        switch(v32)
        {
          case 1:
            goto LABEL_40;
          case 2:
            goto LABEL_39;
          case 3:
            goto LABEL_38;
          case 4:
            goto LABEL_37;
          case 5:
            goto LABEL_36;
          case 6:
            goto LABEL_35;
          case 7:
            goto LABEL_34;
          case 8:
            goto LABEL_33;
          case 9:
            goto LABEL_32;
          case 10:
            goto LABEL_31;
          case 11:
            goto LABEL_30;
          case 12:
            goto LABEL_29;
          case 13:
            goto LABEL_28;
          case 14:
            goto LABEL_27;
          case 15:
            int v34 = (unsigned __int16 *)(v7 + 1);
            int v36 = (unsigned __int16)*v7;
            if (*v10 != v36)
            {
LABEL_45:
              uint64_t v76 = v7 + 1;
              *uint64_t v10 = v36;
              uint64_t v77 = v104;
LABEL_46:
              unsigned __int16 v78 = *v76++;
              *v77++ = v78;
LABEL_47:
              unsigned __int16 v79 = *v76++;
              *v77++ = v79;
LABEL_48:
              unsigned __int16 v80 = *v76++;
              *v77++ = v80;
LABEL_49:
              unsigned __int16 v81 = *v76++;
              *v77++ = v81;
LABEL_50:
              unsigned __int16 v82 = *v76++;
              *v77++ = v82;
LABEL_51:
              unsigned __int16 v83 = *v76++;
              *v77++ = v83;
LABEL_52:
              unsigned __int16 v84 = *v76++;
              *v77++ = v84;
LABEL_53:
              unsigned __int16 v85 = *v76++;
              *v77++ = v85;
LABEL_54:
              unsigned __int16 v86 = *v76++;
              *v77++ = v86;
LABEL_55:
              unsigned __int16 v87 = *v76++;
              *v77++ = v87;
LABEL_56:
              unsigned __int16 v88 = *v76++;
              *v77++ = v88;
LABEL_57:
              unsigned __int16 v89 = *v76++;
              *v77++ = v89;
LABEL_58:
              unsigned __int16 v90 = *v76++;
              *v77++ = v90;
LABEL_59:
              *uint64_t v77 = *v76;
              uint64_t v106 = 0;
              uint64_t v107 = 0;
              *(void *)((char *)v108 + 6) = 0;
              v108[0] = 0;
              unint64_t v91 = (_WORD *)&v106 + *((void *)v9 + 14);
              uint64_t result = (char *)memcpy(v91, v7, *((void *)v9 + 15));
              if (v9[176])
              {
                do
                {
                  *unint64_t v91 = bswap32((unsigned __int16)*v91) >> 16;
                  ++v91;
                  --v32;
                }
                while (v32);
              }
              uint64_t v92 = (unsigned int *)(a2 + 4 * v26);
              switch(v33)
              {
                case 0:
                  goto LABEL_76;
                case 1:
                  goto LABEL_75;
                case 2:
                  goto LABEL_74;
                case 3:
                  goto LABEL_73;
                case 4:
                  goto LABEL_72;
                case 5:
                  goto LABEL_71;
                case 6:
                  goto LABEL_70;
                case 7:
                  goto LABEL_69;
                case 8:
                  goto LABEL_68;
                case 9:
                  goto LABEL_67;
                case 10:
                  goto LABEL_66;
                case 11:
                  goto LABEL_65;
                case 12:
                  goto LABEL_64;
                case 13:
                  goto LABEL_63;
                case 14:
                  *v92++ = ((((unsigned __int16)v106 >> 7) | ((unsigned __int16)v106 << 9)) + 1) >> 1;
LABEL_63:
                  *v92++ = (((WORD1(v106) >> 7) | (WORD1(v106) << 9)) + 1) >> 1;
LABEL_64:
                  *v92++ = (((WORD2(v106) >> 7) | (WORD2(v106) << 9)) + 1) >> 1;
LABEL_65:
                  *v92++ = (((HIWORD(v106) >> 7) | (HIWORD(v106) << 9)) + 1) >> 1;
LABEL_66:
                  *v92++ = ((((unsigned __int16)v107 >> 7) | ((unsigned __int16)v107 << 9)) + 1) >> 1;
LABEL_67:
                  *v92++ = (((WORD1(v107) >> 7) | (WORD1(v107) << 9)) + 1) >> 1;
LABEL_68:
                  *v92++ = (((WORD2(v107) >> 7) | (WORD2(v107) << 9)) + 1) >> 1;
LABEL_69:
                  *v92++ = (((HIWORD(v107) >> 7) | (HIWORD(v107) << 9)) + 1) >> 1;
LABEL_70:
                  *v92++ = (((LOWORD(v108[0]) >> 7) | (LOWORD(v108[0]) << 9)) + 1) >> 1;
LABEL_71:
                  *v92++ = (((WORD1(v108[0]) >> 7) | (WORD1(v108[0]) << 9)) + 1) >> 1;
LABEL_72:
                  *v92++ = (((WORD2(v108[0]) >> 7) | (WORD2(v108[0]) << 9)) + 1) >> 1;
LABEL_73:
                  *v92++ = (((HIWORD(v108[0]) >> 7) | (HIWORD(v108[0]) << 9)) + 1) >> 1;
LABEL_74:
                  *v92++ = (((LOWORD(v108[1]) >> 7) | (LOWORD(v108[1]) << 9)) + 1) >> 1;
LABEL_75:
                  *v92++ = (((WORD1(v108[1]) >> 7) | (WORD1(v108[1]) << 9)) + 1) >> 1;
LABEL_76:
                  *uint64_t v92 = (((WORD2(v108[1]) >> 7) | (WORD2(v108[1]) << 9)) + 1) >> 1;
                  v26 += *((void *)v9 + 2);
                  *(_DWORD *)(a2 + 4 * v26 - 4) = 1;
                  v7 += *((void *)v9 + 7);
                  *((void *)v9 + 20) = v7;
                  if (v26 < v31) {
                    goto LABEL_77;
                  }
                  goto LABEL_78;
                default:
                  goto LABEL_87;
              }
            }
            float64x2_t v35 = v104;
LABEL_27:
            int v38 = *v35++;
            int v37 = v38;
            int v39 = *v34++;
            if (v37 != v39) {
              goto LABEL_43;
            }
LABEL_28:
            int v41 = *v35++;
            int v40 = v41;
            int v42 = *v34++;
            if (v40 != v42) {
              goto LABEL_43;
            }
LABEL_29:
            int v44 = *v35++;
            int v43 = v44;
            int v45 = *v34++;
            if (v43 != v45) {
              goto LABEL_43;
            }
LABEL_30:
            int v47 = *v35++;
            int v46 = v47;
            int v48 = *v34++;
            if (v46 != v48) {
              goto LABEL_43;
            }
LABEL_31:
            int v50 = *v35++;
            int v49 = v50;
            int v51 = *v34++;
            if (v49 != v51) {
              goto LABEL_43;
            }
LABEL_32:
            int v53 = *v35++;
            int v52 = v53;
            int v54 = *v34++;
            if (v52 != v54) {
              goto LABEL_43;
            }
LABEL_33:
            int v56 = *v35++;
            int v55 = v56;
            int v57 = *v34++;
            if (v55 != v57) {
              goto LABEL_43;
            }
LABEL_34:
            int v59 = *v35++;
            int v58 = v59;
            int v60 = *v34++;
            if (v58 != v60) {
              goto LABEL_43;
            }
LABEL_35:
            int v62 = *v35++;
            int v61 = v62;
            int v63 = *v34++;
            if (v61 != v63) {
              goto LABEL_43;
            }
LABEL_36:
            int v65 = *v35++;
            int v64 = v65;
            int v66 = *v34++;
            if (v64 != v66) {
              goto LABEL_43;
            }
LABEL_37:
            int v68 = *v35++;
            int v67 = v68;
            int v69 = *v34++;
            if (v67 != v69) {
              goto LABEL_43;
            }
LABEL_38:
            int v71 = *v35++;
            int v70 = v71;
            int v72 = *v34++;
            if (v70 != v72) {
              goto LABEL_43;
            }
LABEL_39:
            int v74 = *v35++;
            int v73 = v74;
            int v75 = *v34++;
            if (v73 != v75) {
              goto LABEL_43;
            }
LABEL_40:
            if (*v35 != *v34)
            {
LABEL_43:
              uint64_t v76 = v7;
              uint64_t v77 = v10;
              switch(v32)
              {
                case 1:
                  goto LABEL_59;
                case 2:
                  goto LABEL_58;
                case 3:
                  goto LABEL_57;
                case 4:
                  goto LABEL_56;
                case 5:
                  goto LABEL_55;
                case 6:
                  goto LABEL_54;
                case 7:
                  goto LABEL_53;
                case 8:
                  goto LABEL_52;
                case 9:
                  goto LABEL_51;
                case 10:
                  goto LABEL_50;
                case 11:
                  goto LABEL_49;
                case 12:
                  goto LABEL_48;
                case 13:
                  goto LABEL_47;
                case 14:
                  goto LABEL_46;
                case 15:
                  LOWORD(v36) = *v7;
                  goto LABEL_45;
                default:
                  goto LABEL_87;
              }
            }
            if (v26 < *((void *)v9 + 2)) {
              goto LABEL_87;
            }
            ++*(_DWORD *)(a2 + 4 * v26 - 4);
            v7 += *((void *)v9 + 7);
            *((void *)v9 + 20) = v7;
LABEL_77:
            if (v30) {
              continue;
            }
LABEL_78:
            a4 = v99;
            unint64_t v28 = v102;
            uint64_t v27 = v103;
            uint64_t v29 = v101;
            break;
          default:
            goto LABEL_87;
        }
        break;
      }
    }
    unint64_t v93 = v29 + v105 - v30;
    if (v93 == v28)
    {
      unint64_t v93 = 0;
      BOOL v7 = &v100[*((void *)v9 + 8)];
      *((void *)v9 + 20) = v7;
      *((void *)v9 + 21) = v7;
      *((void *)v9 + 10) = v27 - 1;
      uint64_t v100 = v7;
    }
    else if (v93 >= v28)
    {
      goto LABEL_87;
    }
    *((void *)v9 + 12) = v93;
    unint64_t v94 = *a4 + v105 - v30;
    *a4 = v94;
    unint64_t v95 = *((void *)v9 + 3);
    if (v26 <= v95)
    {
      unint64_t v96 = *((void *)v9 + 1);
      if (v94 <= v96) {
        continue;
      }
    }
LABEL_87:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  while (v26 != v95 && v94 != v96);
  *a5 = v26 / *((void *)v9 + 2);
  return result;
}

uint64_t CMMDecoderTemplate<CMM16BitNChanData>::DoDecode(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  int v6 = 0;
  BOOL v7 = 0;
  uint64_t v8 = *(void *)(result + 8);
  unint64_t v9 = v8 * a4;
  uint64_t v10 = *(void *)(result + 40);
  uint64_t v11 = *(__int16 **)(result + 152);
  unint64_t v12 = *(void *)(result + 80);
  __int16 v13 = &v11[v12 * v10];
  *(void *)(result + 144) = v13;
  uint64_t v14 = *(void *)(result + 64);
  while (v14)
  {
    unint64_t v15 = *(void *)(result + 72);
    if (v15 == v12)
    {
      unint64_t v16 = 0;
      goto LABEL_80;
    }
    unint64_t v16 = v15 - v12;
    while (2)
    {
      if (v7)
      {
        if (v5)
        {
          __int16 v17 = v5;
          __int16 v18 = v13;
          switch(*(void *)(result + 88))
          {
            case 1:
              goto LABEL_22;
            case 2:
              goto LABEL_21;
            case 3:
              goto LABEL_20;
            case 4:
              goto LABEL_19;
            case 5:
              goto LABEL_18;
            case 6:
              goto LABEL_17;
            case 7:
              goto LABEL_16;
            case 8:
              goto LABEL_15;
            case 9:
              goto LABEL_14;
            case 0xALL:
              goto LABEL_13;
            case 0xBLL:
              goto LABEL_12;
            case 0xCLL:
              goto LABEL_11;
            case 0xDLL:
              goto LABEL_10;
            case 0xELL:
              goto LABEL_9;
            case 0xFLL:
              __int16 v17 = v5 + 1;
              *__int16 v13 = *v5;
              __int16 v18 = v13 + 1;
LABEL_9:
              __int16 v19 = *v17++;
              *v18++ = v19;
LABEL_10:
              __int16 v20 = *v17++;
              *v18++ = v20;
LABEL_11:
              __int16 v21 = *v17++;
              *v18++ = v21;
LABEL_12:
              __int16 v22 = *v17++;
              *v18++ = v22;
LABEL_13:
              __int16 v23 = *v17++;
              *v18++ = v23;
LABEL_14:
              __int16 v24 = *v17++;
              *v18++ = v24;
LABEL_15:
              __int16 v25 = *v17++;
              *v18++ = v25;
LABEL_16:
              __int16 v26 = *v17++;
              *v18++ = v26;
LABEL_17:
              __int16 v27 = *v17++;
              *v18++ = v27;
LABEL_18:
              __int16 v28 = *v17++;
              *v18++ = v28;
LABEL_19:
              __int16 v29 = *v17++;
              *v18++ = v29;
LABEL_20:
              __int16 v30 = *v17++;
              *v18++ = v30;
LABEL_21:
              __int16 v31 = *v17++;
              *v18++ = v31;
LABEL_22:
              *__int16 v18 = *v17;
              goto LABEL_73;
            default:
              break;
          }
        }
LABEL_86:
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = -171;
      }
      uint64_t v32 = *(void *)(result + 88);
      uint64_t v33 = (int *)(a2 + 4 * v4);
      int v34 = v13;
      switch(v32)
      {
        case 1:
          goto LABEL_66;
        case 2:
          goto LABEL_63;
        case 3:
          goto LABEL_60;
        case 4:
          goto LABEL_57;
        case 5:
          goto LABEL_54;
        case 6:
          goto LABEL_51;
        case 7:
          goto LABEL_48;
        case 8:
          goto LABEL_45;
        case 9:
          goto LABEL_42;
        case 10:
          goto LABEL_39;
        case 11:
          goto LABEL_36;
        case 12:
          goto LABEL_33;
        case 13:
          goto LABEL_30;
        case 14:
          goto LABEL_27;
        case 15:
          int v35 = *v33++;
          unsigned int v36 = (v35 + 128) >> 8;
          if (v36 >= 0xFFFF) {
            LOWORD(v36) = -1;
          }
          *__int16 v13 = v36;
          int v34 = v13 + 1;
LABEL_27:
          int v37 = *v33++;
          unsigned int v38 = (v37 + 128) >> 8;
          if (v38 >= 0xFFFF) {
            LOWORD(v3CMMBase::operator delete(this - 8) = -1;
          }
          *v34++ = v38;
LABEL_30:
          int v39 = *v33++;
          unsigned int v40 = (v39 + 128) >> 8;
          if (v40 >= 0xFFFF) {
            LOWORD(v40) = -1;
          }
          *v34++ = v40;
LABEL_33:
          int v41 = *v33++;
          unsigned int v42 = (v41 + 128) >> 8;
          if (v42 >= 0xFFFF) {
            LOWORD(v42) = -1;
          }
          *v34++ = v42;
LABEL_36:
          int v43 = *v33++;
          unsigned int v44 = (v43 + 128) >> 8;
          if (v44 >= 0xFFFF) {
            LOWORD(v44) = -1;
          }
          *v34++ = v44;
LABEL_39:
          int v45 = *v33++;
          unsigned int v46 = (v45 + 128) >> 8;
          if (v46 >= 0xFFFF) {
            LOWORD(v46) = -1;
          }
          *v34++ = v46;
LABEL_42:
          int v47 = *v33++;
          unsigned int v48 = (v47 + 128) >> 8;
          if (v48 >= 0xFFFF) {
            LOWORD(v4CMMBase::operator delete(this - 8) = -1;
          }
          *v34++ = v48;
LABEL_45:
          int v49 = *v33++;
          unsigned int v50 = (v49 + 128) >> 8;
          if (v50 >= 0xFFFF) {
            LOWORD(v50) = -1;
          }
          *v34++ = v50;
LABEL_48:
          int v51 = *v33++;
          unsigned int v52 = (v51 + 128) >> 8;
          if (v52 >= 0xFFFF) {
            LOWORD(v52) = -1;
          }
          *v34++ = v52;
LABEL_51:
          int v53 = *v33++;
          unsigned int v54 = (v53 + 128) >> 8;
          if (v54 >= 0xFFFF) {
            LOWORD(v54) = -1;
          }
          *v34++ = v54;
LABEL_54:
          int v55 = *v33++;
          unsigned int v56 = (v55 + 128) >> 8;
          if (v56 >= 0xFFFF) {
            LOWORD(v56) = -1;
          }
          *v34++ = v56;
LABEL_57:
          int v57 = *v33++;
          unsigned int v58 = (v57 + 128) >> 8;
          if (v58 >= 0xFFFF) {
            LOWORD(v5CMMBase::operator delete(this - 8) = -1;
          }
          *v34++ = v58;
LABEL_60:
          int v59 = *v33++;
          unsigned int v60 = (v59 + 128) >> 8;
          if (v60 >= 0xFFFF) {
            LOWORD(v60) = -1;
          }
          *v34++ = v60;
LABEL_63:
          int v61 = *v33++;
          unsigned int v62 = (v61 + 128) >> 8;
          if (v62 >= 0xFFFF) {
            LOWORD(v62) = -1;
          }
          *v34++ = v62;
LABEL_66:
          unsigned int v63 = (*v33 + 128) >> 8;
          if (v63 >= 0xFFFF) {
            LOWORD(v63) = -1;
          }
          __int16 *v34 = v63;
          if (*(unsigned char *)(result + 160))
          {
            uint64_t v64 = -v32;
            do
              v34[v64 + 1] = bswap32((unsigned __int16)v34[v64 + 1]) >> 16;
            while (!__CFADD__(v64++, 1));
          }
          int v6 = *(_DWORD *)(a2 + 4 * (v8 - 1 + v4));
          uint64_t v5 = v13;
LABEL_73:
          if (v6 <= 0) {
            goto LABEL_86;
          }
          --v16;
          v13 += v10;
          BOOL v7 = --v6 != 0;
          if (v6 || (v4 += v8, v4 != v9))
          {
            if (!v16) {
              goto LABEL_80;
            }
            continue;
          }
          int v6 = 0;
          BOOL v7 = 0;
          unint64_t v4 = v8 * a4;
LABEL_80:
          unint64_t v12 = v15 - v16;
          if (v15 - v16 == v15)
          {
            unint64_t v12 = 0;
            v11 += *(void *)(result + 48);
            *(void *)(result + 152) = v11;
            *(void *)(result + 64) = --v14;
            __int16 v13 = v11;
            goto LABEL_83;
          }
          if (v12 >= v15) {
            goto LABEL_86;
          }
LABEL_83:
          *(void *)(result + 80) = v12;
          if (v4 > v9) {
            goto LABEL_86;
          }
          if (v4 == v9) {
            goto LABEL_85;
          }
          break;
        default:
          goto LABEL_86;
      }
      break;
    }
  }
LABEL_85:
  *(void *)(result + 144) = v13;
  return result;
}

uint64_t CMMAlphaCopier::CMMAlphaCopier(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)a1 = &unk_1ED9822F0;
  *(void *)(a1 + CMMBase::operator delete(this - 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(unsigned char *)(a1 + 120) = a4;
  if (a4)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a2;
  }
  else
  {
    uint64_t v9 = *(void *)(a3 + 8);
    uint64_t v7 = v9 + CMMAlphaByteOffset((_DWORD *)a3);
    uint64_t v8 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 24) = v7;
  uint64_t v10 = *(void *)(v8 + 8);
  *(void *)(a1 + 32) = v10 + CMMAlphaByteOffset((_DWORD *)v8);
  int v11 = *(unsigned __int8 *)(a1 + 120);
  if (*(unsigned char *)(a1 + 120))
  {
    uint64_t v12 = 0;
    __int16 v13 = *(void **)(a1 + 8);
    uint64_t v15 = v13[20];
    uint64_t v14 = v13[21];
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 4CMMBase::operator delete(this - 8) = v14;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = v15;
    uint64_t v16 = v13[18];
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = v16;
    *(void *)(a1 + 8CMMBase::operator delete(this - 8) = 0;
    *(void *)(a1 + 96) = 0;
  }
  else
  {
    __int16 v18 = *(void **)(a1 + 8);
    __int16 v17 = *(void **)(a1 + 16);
    uint64_t v19 = v17[20];
    uint64_t v21 = v18[20];
    uint64_t v20 = v18[21];
    *(void *)(a1 + 40) = v17[21];
    *(void *)(a1 + 4CMMBase::operator delete(this - 8) = v20;
    *(void *)(a1 + 56) = v19;
    *(void *)(a1 + 64) = v21;
    uint64_t v22 = v18[18];
    *(void *)(a1 + 72) = v17[18];
    *(void *)(a1 + 80) = v22;
    *(void *)(a1 + 8CMMBase::operator delete(this - 8) = 0;
    *(void *)(a1 + 96) = 0;
    if ((*(unsigned char *)(a3 + 180) & 0x1F) != 0 && (unsigned int v23 = *(_DWORD *)(a3 + 176) - 2, v23 <= 5)) {
      uint64_t v12 = qword_18BEB5C18[v23];
    }
    else {
      uint64_t v12 = 0;
    }
  }
  *(void *)(a1 + 104) = v12;
  if ((*(unsigned char *)(a2 + 180) & 0x1F) != 0 && (unsigned int v24 = *(_DWORD *)(a2 + 176) - 2, v24 <= 5)) {
    uint64_t v25 = qword_18BEB5C18[v24];
  }
  else {
    uint64_t v25 = 0;
  }
  *(void *)(a1 + 112) = v25;
  if (!v11 && (unint64_t)(v12 - 1) >= 2 || (unint64_t)(v25 - 1) >= 2)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -181;
  }
  return a1;
}

uint64_t CMMAlphaByteOffset(_DWORD *a1)
{
  unsigned int v1 = a1[45] & 0x1F;
  BOOL v2 = v1 > 5;
  int v3 = (1 << v1) & 0x2A;
  if (v2 || v3 == 0) {
    return 0;
  }
  unsigned int v5 = a1[44] - 2;
  if (v5 > 5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = qword_18BEB5C18[v5];
  }
  return CMMGetChannelCountFromCMMSpace(a1[46]) * v6;
}

_DWORD *CMMConvPQEOTF::CMMConvPQEOTF(_DWORD *a1, int a2, uint64_t a3, long long *a4, uint64_t a5, float a6)
{
  uint64_t v8 = (float *)CMMConvTRC::CMMConvTRC((uint64_t)a1, a2, a3, 0, a4, a5, 3, 1, 1.0, 1, 1);
  *(void *)uint64_t v8 = &unk_1ED981DC8;
  v8[41] = a6;
  CMMConvTRC::SetInputClamp((CMMConvTRC *)v8);
  if (a1[23] != 17) {
    (*(void (**)(_DWORD *))(*(void *)a1 + 48))(a1);
  }
  return a1;
}

void sub_18BE51BC4(_Unwind_Exception *a1)
{
  CMMConvTRC::~CMMConvTRC(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMMatrix::CMMMatrix(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 0;
  *(void *)uint64_t result = &unk_1ED9855F0;
  *(void *)(result + 8CMMBase::operator delete(this - 8) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 80) = 0;
  int v9 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(result + 104) = 1065353216;
  int v3 = &v8;
  uint64_t v4 = result;
  do
  {
    for (uint64_t i = 0; i != 12; i += 4)
    {
      float v6 = *(float *)((char *)v3 + i);
      uint64_t v7 = v4 + i;
      *(_DWORD *)(v7 + CMMBase::operator delete(this - 8) = (int)(v6 * 65536.0 + 0.5);
      *(float *)(v7 + 44) = v6;
    }
    ++v2;
    v4 += 12;
    int v3 = (long long *)((char *)v3 + 12);
  }
  while (v2 != 3);
  return result;
}

uint64_t CMMConvInvMatrix::Collapse(CMMConvInvMatrix *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  return 0;
}

void CMMConvHLGOOTF::CMMConvHLGOOTF(CMMConvHLGOOTF *this, float a2, float a3, float a4, float a5, float a6, float *a7, CMMConvNode *a8)
{
  *((_DWORD *)this + 2) = 1;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = a8;
  if (a8) {
    *((void *)a8 + 2) = this;
  }
  *((void *)this + 5) = 0x3F80000000000000;
  *(_DWORD *)((char *)this + 33) = 16777217;
  *(void *)this = &unk_1ED982430;
  *((float *)this + 13) = a3;
  *((float *)this + 14) = a2;
  if (a5 == 0.0)
  {
    float v12 = a2 / 1000.0;
    if (a2 < 400.0 || a2 > 2000.0)
    {
      float v17 = log2f(v12);
      float v13 = powf(1.111, v17) * 1.2;
    }
    else
    {
      float v13 = log10f(v12) * 0.42 + 1.20000005;
    }
  }
  else
  {
    float v14 = log2f(a2 / 1000.0);
    float v15 = powf(1.111, v14) * 1.2;
    float v16 = log2f(a5 / 5.0);
    float v13 = v15 * powf(0.98, v16);
  }
  *((float *)this + 12) = v13 + -1.0;
  *((float *)this + 15) = *a7;
  *((float *)this + 16) = a7[1];
  *((float *)this + 17) = a7[2];
  *((float *)this + 1CMMBase::operator delete(this - 8) = a7[3];
  if (a4 != 1.0)
  {
    *((float *)this + 15) = *a7 / a4;
    *((float *)this + 16) = a7[1] / a4;
    *((float *)this + 17) = a7[2] / a4;
    *((float *)this + 1CMMBase::operator delete(this - 8) = a7[3] / a4;
  }
}

void CMMConvPQEETFBase::CMMConvPQEETFBase(CMMConvPQEETFBase *this, float a2, float a3, float a4, float a5, float a6, float *a7, char a8)
{
  *(void *)this = &unk_1ED983158;
  *((float *)this + 2) = a2;
  *((float *)this + 3) = a4;
  *((float *)this + 10) = a6;
  *((unsigned char *)this + 60) = a8;
  float v11 = a2 / 10000.0;
  float v12 = powf(fabsf(a2 / 10000.0), 0.1593);
  float v13 = powf((float)((float)(v12 * 18.852) + 0.83594) / (float)((float)(v12 * 18.688) + 1.0), 78.844);
  if (v11 < 0.0) {
    float v13 = -v13;
  }
  float v28 = v13;
  *((float *)this + 4) = v13;
  float v14 = a3 / 10000.0;
  float v15 = powf(fabsf(v14), 0.1593);
  float v16 = powf((float)((float)(v15 * 18.852) + 0.83594) / (float)((float)(v15 * 18.688) + 1.0), 78.844);
  if (v14 >= 0.0) {
    float v17 = v16;
  }
  else {
    float v17 = -v16;
  }
  *((float *)this + 5) = v17;
  float v18 = powf(fabsf(a4 / 10000.0), 0.1593);
  float v19 = powf((float)((float)(v18 * 18.852) + 0.83594) / (float)((float)(v18 * 18.688) + 1.0), 78.844);
  if ((float)(a4 / 10000.0) >= 0.0) {
    float v20 = v19;
  }
  else {
    float v20 = -v19;
  }
  float v21 = powf(fabsf(a5 / 10000.0), 0.1593);
  float v22 = powf((float)((float)(v21 * 18.852) + 0.83594) / (float)((float)(v21 * 18.688) + 1.0), 78.844);
  if ((float)(a5 / 10000.0) < 0.0) {
    float v22 = -v22;
  }
  float v23 = (float)(v20 - v17) / (float)(v28 - v17);
  *((float *)this + 6) = v23;
  *((float *)this + 7) = (float)(v22 - v17) / (float)(v28 - v17);
  float v24 = v23 * 1.5 + -0.5;
  *((float *)this + CMMBase::operator delete(this - 8) = v24;
  double v25 = 1.0 - v24;
  if (v25 == 0.0) {
    float v26 = 1.1755e-38;
  }
  else {
    float v26 = 1.0 / v25;
  }
  *((float *)this + 9) = v26;
  *((float *)this + 11) = *a7;
  *((float *)this + 12) = a7[1];
  *((float *)this + 13) = a7[2];
  *((float *)this + 14) = a7[3];
}

void CMMConvRWToneMapping::CMMConvRWToneMapping(CMMConvRWToneMapping *this, float a2, float a3, float a4, float a5, float a6, float a7, CMMConvNode *a8)
{
  *((_DWORD *)this + 2) = 1;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = a8;
  if (a8) {
    *((void *)a8 + 2) = this;
  }
  *((void *)this + 5) = 0x3F80000000000000;
  *(_DWORD *)((char *)this + 33) = 16777217;
  *(void *)this = &unk_1ED9837B0;
  float v8 = a2 / a4;
  if (a3 <= a4) {
    a3 = a4;
  }
  *((float *)this + 12) = v8;
  *((float *)this + 13) = a3;
  float v9 = a3 / a4;
  if ((float)(a3 / a4) <= a5) {
    float v9 = a5;
  }
  *((float *)this + 14) = v9;
  *((float *)this + 15) = a4;
  float v10 = fminf((float)(1.0 - (float)((float)(1.0 - a6) * fminf((float)(v9 + -1.0) / 3.9261, 1.0)))+ (float)((float)((float)(1.0 - a6) / (float)(a7 + -1.0)) * (float)(a5 + -1.0)), 1.0);
  *((float *)this + 16) = a5;
  *((float *)this + 17) = v10;
  float v11 = a5 * 0.00033333;
  float v12 = a5 / v10;
  float v13 = (float)(v9 + 1.0) + (float)(v12 * -2.0);
  float v14 = fabsf(v13);
  float v15 = v9 + (float)(v11 - v13);
  BOOL v16 = v14 < v11;
  if (v14 >= v11) {
    float v17 = (float)(v9 + 1.0) + (float)(v12 * -2.0);
  }
  else {
    float v17 = (float)(v15 + 1.0) + (float)(v12 * -2.0);
  }
  if (v16) {
    float v9 = v15;
  }
  *((float *)this + 1CMMBase::operator delete(this - 8) = v17;
  *((float *)this + 19) = -(float)(v9 - (float)(v12 * v12));
  *((float *)this + 20) = 1.0 - v12;
  *((float *)this + 21) = 1.0 / v17;
  *((_DWORD *)this + 22) = 0;
}

void Compute_FlexGTC(float *a1, CFArrayRef theArray, const __CFDictionary *a3, const __CFDictionary *a4)
{
  CFIndex Count = CFArrayGetCount(theArray);
  float v9 = (float *)malloc_type_calloc(1uLL, 12 * Count + 12, 0x10000403E1C8BA9uLL);
  if (a1 && v9)
  {
    int v57 = v9;
    if (Count)
    {
      CFIndex v10 = 0;
      float v11 = v9;
      do
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v10);
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, (const void *)kColorSyncFlexGTCNodeX);
        CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, (const void *)kColorSyncFlexGTCNodeY);
        CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, (const void *)kColorSyncFlexGTCNodeSlope);
        CFNumberGetValue(Value, kCFNumberFloatType, v11);
        CFNumberGetValue(v14, kCFNumberFloatType, v11 + 1);
        CFNumberGetValue(v15, kCFNumberFloatType, v11 + 2);
        ++v10;
        v11 += 3;
      }
      while (Count != v10);
    }
    uint64_t valuePtr = 0;
    float v62 = 1.0;
    float v63 = 0.0;
    float v61 = 1.0;
    CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(a4, @"com.apple.cmm.FlexGTCTargetHeadroom");
    if (v16)
    {
      CFNumberGetValue(v16, kCFNumberFloatType, (char *)&valuePtr + 4);
      if (*((float *)&valuePtr + 1) != 0.0) {
        HIDWORD(valuePtr) = log2f(*((float *)&valuePtr + 1));
      }
    }
    CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)kColorSyncGainMapAlternateHeadroom);
    if (v17) {
      CFNumberGetValue(v17, kCFNumberFloatType, &valuePtr);
    }
    CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)kColorSyncGainMapBaselineHeadroom);
    if (v18) {
      CFNumberGetValue(v18, kCFNumberFloatType, &v63);
    }
    CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)kColorSyncGainMapMax);
    if (v19) {
      CFNumberGetValue(v19, kCFNumberFloatType, &v62);
    }
    CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)kColorSyncGainMapMin);
    if (v20) {
      CFNumberGetValue(v20, kCFNumberFloatType, &v61);
    }
    if (*((float *)&valuePtr + 1) <= v63) {
      float v21 = *((float *)&valuePtr + 1);
    }
    else {
      float v21 = v63;
    }
    float v22 = 0.0;
    if (*((float *)&valuePtr + 1) >= 0.0) {
      float v22 = v21;
    }
    *((float *)&valuePtr + 1) = v22;
    float v60 = 1.0;
    if (v22 != 0.0 && (float)(*(float *)&valuePtr - v63) != 0.0)
    {
      float v23 = (float)(v22 - v63) / (float)(*(float *)&valuePtr - v63);
      float v24 = 1.0;
      if (v23 <= 1.0) {
        float v24 = v23;
      }
      BOOL v25 = v23 < 0.0;
      float v26 = 0.0;
      if (!v25) {
        float v26 = v24;
      }
      float v60 = v26;
    }
    unint64_t v27 = (unint64_t)&v57[3 * Count - 3];
    float v28 = v62;
    float v29 = exp2f(v60 * v62);
    unint64_t v30 = 0;
    double v31 = *v57;
    double v32 = v57[5];
    float v33 = v57[3];
    double v34 = v57[2];
    double v35 = v33 - v31;
    double v36 = v57[1];
    double v37 = (v34 + v32 - (v57[4] - v36 + v57[4] - v36) / v35) / ((v31 - v33) * (v31 - v33));
    double v38 = (v32 - v34) / (v35 + v35) + (v33 + v31) * -1.5 * v37;
    double v39 = v34 + v31 * -3.0 * v31 * v37 + v31 * -2.0 * v38;
    double v40 = v36 + -(v31 * v31) * v31 * v37 + -(v31 * v31) * v38 - v31 * v39;
    float v59 = v61;
    float v58 = v28 - v61;
    float v41 = -1.0;
    unsigned int v42 = v57;
    do
    {
      float v43 = (float)v30 / 1023.0;
      BOOL v44 = v43 > v33;
      if (v43 > v33 && (unint64_t)(v42 + 3) < v27)
      {
        unsigned int v46 = v42 + 6;
        do
        {
          unsigned int v42 = v46 - 3;
          float v33 = *v46;
          BOOL v44 = v43 > *v46;
          BOOL v47 = v43 <= *v46 || (unint64_t)v46 >= v27;
          v46 += 3;
        }
        while (!v47);
        double v48 = *(v46 - 6);
        double v49 = *(v46 - 5);
        double v50 = *(v46 - 4);
        double v51 = *(v46 - 1);
        double v52 = v33 - v48;
        double v37 = (v50 + v51 - (*(v46 - 2) - v49 + *(v46 - 2) - v49) / v52) / ((v48 - v33) * (v48 - v33));
        double v38 = (v51 - v50) / (v52 + v52) + (v33 + v48) * -1.5 * v37;
        double v39 = v50 + v48 * -3.0 * v48 * v37 + v48 * -2.0 * v38;
        double v40 = v49 + -(v48 * v48) * v48 * v37 + -(v48 * v48) * v38 - v48 * v39;
      }
      if (v44) {
        float v53 = v33;
      }
      else {
        float v53 = (float)v30 / 1023.0;
      }
      float v54 = v40 + v38 * v53 * v53 + v37 * v53 * v53 * v53 + v39 * v53;
      float v55 = exp2f(v60 * (float)(v59 + (float)(v54 * v58)));
      float v56 = (float)(v53 * v55) / v29;
      if (v56 < v41)
      {
        float v55 = v29 * (float)(v41 / v53);
        float v56 = v41;
      }
      a1[v30++] = v55;
      float v41 = v56 + 0.00035;
    }
    while (v30 != 1024);
    free(v57);
  }
}

void CMMConvCLUTBase::CMMConvCLUTBase(CMMConvCLUTBase *this, CMMLutTagBase *a2, CMMMemMgr *a3, CMMConvNode *a4)
{
  *((_DWORD *)this + 2) = 1;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = a4;
  if (a4) {
    *((void *)a4 + 2) = this;
  }
  *((void *)this + 5) = 0x3F80000000000000;
  *(_DWORD *)((char *)this + 33) = 0;
  *(void *)this = &unk_1ED982808;
  *((void *)this + 7) = (*(uint64_t (**)(CMMLutTagBase *))(*(void *)a2 + 64))(a2);
  *((void *)this + CMMBase::operator delete(this - 8) = (*(uint64_t (**)(CMMLutTagBase *))(*(void *)a2 + 48))(a2);
  *((void *)this + 9) = (*(uint64_t (**)(CMMLutTagBase *))(*(void *)a2 + 56))(a2);
  uint64_t v7 = (*(uint64_t (**)(CMMLutTagBase *, CMMMemMgr *))(*(void *)a2 + 40))(a2, a3);
  *((void *)this + 10) = v7;
  *((void *)this + 11) = CMMTable::FloatData(*(void *)(v7 + 16), *(void *)(v7 + 24));
  *((unsigned char *)this + 35) = 1;
}

void CMMConvCLUTBase::~CMMConvCLUTBase(CMMConvCLUTBase *this)
{
  *(void *)this = &unk_1ED982808;
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    uint64_t v3 = v2[1];
    if (v3)
    {
      uint64_t v4 = v3 - 1;
      v2[1] = v4;
      if (!v4) {
        (*(void (**)(void *))(*v2 + 8))(v2);
      }
    }
  }
  unsigned int v5 = (const void *)*((void *)this + 6);
  if (v5) {
    CFRelease(v5);
  }
}

float DecodeL(float a1)
{
  if (a1 >= 0.0)
  {
    double v3 = a1;
    if (a1 <= 8.0) {
      return v3 * 0.00885645168 * 0.125;
    }
    else {
      return pow((v3 + 16.0) / 116.0, 3.0);
    }
  }
  else
  {
    DecodeL(-a1);
    return -v1;
  }
}

__CFDictionary *CMMConvBlackPointCompensation::FlattenConversion(CMMConvBlackPointCompensation *this, const __CFDictionary *a2)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableArrayRef v4 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (v4)
    {
      unsigned int v5 = v4;
      CFNumberRef v6 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 48);
      if (v6)
      {
        CFNumberRef v7 = v6;
        CFArrayAppendValue(v5, v6);
        CFRelease(v7);
      }
      CFNumberRef v8 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 52);
      if (v8)
      {
        CFNumberRef v9 = v8;
        CFArrayAppendValue(v5, v8);
        CFRelease(v9);
      }
      if (CFArrayGetCount(v5) == 2)
      {
        CFDictionaryAddValue(Mutable, kColorSyncConversionBPC, v5);
        CFRelease(v5);
        CFMutableArrayRef v10 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
        if (v10)
        {
          CFMutableArrayRef v11 = v10;
          int v12 = 0;
          float v13 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
          while (1)
          {
            CFMutableArrayRef v14 = CFArrayCreateMutable(0, 0, v13);
            if (!v14) {
              goto LABEL_28;
            }
            CFNumberRef v15 = v14;
            int v16 = 0;
            while (1)
            {
              float valuePtr = 0.0;
              if (v12 != v16) {
                goto LABEL_21;
              }
              if (v12 == 2)
              {
                double v17 = *((float *)this + 14) / 0.8249;
              }
              else
              {
                if (v12 == 1)
                {
                  float v18 = *((float *)this + 14);
                  goto LABEL_20;
                }
                if (v12) {
                  goto LABEL_21;
                }
                double v17 = *((float *)this + 14) / 0.9642;
              }
              float v18 = v17;
LABEL_20:
              float valuePtr = v18;
LABEL_21:
              CFNumberRef v19 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
              if (!v19) {
                break;
              }
              CFNumberRef v20 = v19;
              CFArrayAppendValue(v15, v19);
              CFRelease(v20);
              if (++v16 == 3) {
                goto LABEL_25;
              }
            }
            CFRelease(v15);
            CFNumberRef v15 = 0;
LABEL_25:
            CFNumberRef v21 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 60);
            if (!v21)
            {
              CFRelease(v15);
LABEL_32:
              CFRelease(v11);
              CFMutableArrayRef v11 = 0;
              goto LABEL_33;
            }
            CFNumberRef v22 = v21;
            CFArrayAppendValue(v15, v21);
            CFRelease(v22);
            if (!v15) {
              goto LABEL_32;
            }
            CFArrayAppendValue(v11, v15);
            CFRelease(v15);
LABEL_28:
            if (++v12 == 3)
            {
LABEL_33:
              CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v11);
              CFRelease(v11);
              CMMConvNode::AddFixedPointClippingRange(Mutable, v23, *((float *)this + 10), *((float *)this + 11));
              CMMConvNode::AddClampingInfo(this, Mutable);
              return Mutable;
            }
          }
        }
      }
      else
      {
        CFRelease(Mutable);
        CFRelease(v5);
        return 0;
      }
    }
  }
  return Mutable;
}

uint64_t CMMConvBlackPointCompensation::GetTransformType(CMMConvBlackPointCompensation *this, const __CFDictionary *a2)
{
  return 2;
}

uint64_t CMMConvBlackPointCompensation::GetPrecision(CMMConvBlackPointCompensation *this)
{
  return 2;
}

uint64_t CMMConvBlackPointCompensation::GetMaxNofChannels(CMMConvBlackPointCompensation *this)
{
  return 3;
}

uint64_t CMMConvBlackPointCompensation::GetCLUTPoints(CMMConvBlackPointCompensation *this, int a2)
{
  if (a2) {
    return 0;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

float CMMConvBlackPointCompensation::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 * a4)
  {
    unint64_t v5 = 0;
    float result = -2.7254e10;
    do
    {
      CFNumberRef v7 = (float *)(a2 + 4 * v5);
      float v8 = *(float *)(a1 + 56);
      float v9 = *(float *)(a1 + 60);
      double v10 = v8;
      double v11 = v9 + *v7 * 1.03712923 * v8;
      double v12 = 3.40282347e38;
      if (v11 <= 3.40282347e38)
      {
        double v12 = v9 + *v7 * 1.03712923 * v8;
        if (v11 < 0.0) {
          double v12 = 0.0;
        }
      }
      float v13 = v9 + (float)(v7[1] * v8);
      double v14 = v9 + v7[2] * 1.21226815 * v10;
      if (v13 < 0.0) {
        float v15 = 0.0;
      }
      else {
        float v15 = v13;
      }
      if (v13 <= 3.4028e38) {
        float v16 = v15;
      }
      else {
        float v16 = 3.4028e38;
      }
      double v17 = 3.40282347e38;
      if (v14 <= 3.40282347e38)
      {
        double v17 = v14;
        if (v14 < 0.0) {
          double v17 = 0.0;
        }
      }
      float v18 = v12;
      *(float *)(a2 + 4 * v5) = v18;
      float v19 = v17;
      v7[1] = v16;
      v7[2] = v19;
      v5 += a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

uint64_t CMMConvBlackPointCompensation::Convert(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 * a4)
  {
    unint64_t v5 = 0;
    double v6 = *(float *)(result + 56);
    double v7 = *(float *)(result + 60) * 16777216.0 / 1.99996948;
    do
    {
      float v8 = (int *)(a2 + 4 * v5);
      double v9 = v7 + (double)*v8 * 1.03712923 * v6;
      double v10 = 16777216.0;
      if (v9 <= 16777216.0)
      {
        double v10 = v7 + (double)*v8 * 1.03712923 * v6;
        if (v9 < 0.0) {
          double v10 = 0.0;
        }
      }
      int v11 = v8[1];
      int v12 = v8[2];
      double v13 = v7 + (double)v11 * v6;
      double v14 = v7 + (double)v12 * 1.21226815 * v6;
      if (v13 < 0.0) {
        double v15 = 0.0;
      }
      else {
        double v15 = v7 + (double)v11 * v6;
      }
      if (v13 <= 16777216.0) {
        double v16 = v15;
      }
      else {
        double v16 = 16777216.0;
      }
      double v17 = 16777216.0;
      if (v14 <= 16777216.0)
      {
        double v17 = v7 + (double)v12 * 1.21226815 * v6;
        if (v14 < 0.0) {
          double v17 = 0.0;
        }
      }
      *(_DWORD *)(a2 + 4 * v5) = (int)(v10 * 0.9642);
      v8[1] = (int)v16;
      v8[2] = (int)(v17 * 0.8249);
      v5 += a4;
    }
    while (v5 < a5 * a4);
  }
  return result;
}

void CMMConvBlackPointCompensation::Convert()
{
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = -181;
}

uint64_t CMMConvBlackPointCompensation::IsNOP(CMMConvBlackPointCompensation *this)
{
  return 0;
}

uint64_t CMMConvBlackPointCompensation::Collapse(CMMConvBlackPointCompensation *this, CMMMemMgr *a2, CMMConvNode **a3)
{
  return 0;
}

void non-virtual thunk to'CMMConv3DPQEETF::~CMMConv3DPQEETF(CMMConv3DPQEETF *this)
{
  CMMConvCLUTBase::~CMMConvCLUTBase((CMMConv3DPQEETF *)((char *)this - 128));

  CMMBase::operator delete(v1);
}

{
  CMMConvCLUTBase::~CMMConvCLUTBase((CMMConv3DPQEETF *)((char *)this - 128));
}

uint64_t CMMConv3DPQEETF::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  if (a4 == 4) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = 4294967125;
  }
  uint64_t result = CMMThrowExceptionOnError(v9);
  if (a5)
  {
    uint64_t v11 = 0;
    unint64_t v12 = *(void *)(a1 + 64);
    uint64_t v13 = 4 * a4;
    double v14 = (float *)a2;
    do
    {
      if (v12)
      {
        unsigned int v15 = 1;
        double v16 = v14;
        do
        {
          float v17 = roundf(*v16 * 16777000.0);
          if (v17 > 16777000.0) {
            float v17 = 16777000.0;
          }
          if (v17 < 0.0) {
            float v17 = 0.0;
          }
          *(_DWORD *)v16++ = (int)v17;
          BOOL v18 = v12 > v15++;
        }
        while (v18);
      }
      ++v11;
      double v14 = (float *)((char *)v14 + v13);
    }
    while (v11 != a5);
    uint64_t result = CMMTrilinear<CMMCLUT3Output<CMMCLUT3D>>::Interpolate<CMMMaxBits>(a1, a2, a4, a5);
    uint64_t v19 = 0;
    unint64_t v20 = *(void *)(a1 + 72);
    do
    {
      if (v20)
      {
        unsigned int v21 = 1;
        CFNumberRef v22 = (float *)a2;
        do
        {
          *CFNumberRef v22 = (float)*(int *)v22 * 0.000000059605;
          ++v22;
          BOOL v18 = v20 > v21++;
        }
        while (v18);
      }
      ++v19;
      a2 += v13;
    }
    while (v19 != a5);
  }
  return result;
}

{
  uint64_t v9;
  uint64_t vars8;

  if (a4 == 4) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = 4294967125;
  }
  CMMThrowExceptionOnError(v9);

  return CMMTrilinear<CMMCLUT3Output<CMMCLUT3D>>::Interpolate<CMMMaxBits>(a1, a2, a4, a5);
}

uint64_t CMMTrilinear<CMMCLUT3Output<CMMCLUT3D>>::Interpolate<CMMMaxBits>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = *(void *)(result + 88);
    int v5 = *(_DWORD *)(result + 56);
    int v6 = v5 - 1;
    int v7 = *(_DWORD *)(result + 72);
    float v8 = (unsigned int *)(a2 + 8);
    uint64_t v9 = 4 * a3;
    while (1)
    {
      unsigned int v10 = *(v8 - 2);
      if (v10 >= 0x1000001 || (unsigned int v11 = *(v8 - 1), v11 >= 0x1000001) || *v8 >= 0x1000001)
      {
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = -171;
      }
      unsigned int v12 = v10 * v6 + 256;
      unsigned int v13 = HIBYTE(v12);
      int v14 = (v12 >> 9) & 0x7FFF;
      unsigned int v15 = v11 * v6 + 256;
      int v16 = (v15 >> 9) & 0x7FFF;
      unsigned int v17 = *v8 * v6 + 256;
      int v18 = (v17 >> 9) & 0x7FFF;
      uint64_t v19 = (unsigned __int16 *)(v4 + 2 * ((v13 * v5 + HIBYTE(v15)) * v5 + HIBYTE(v17)) * v7);
      unsigned int v20 = *v19;
      unsigned int v21 = v19[1];
      unsigned int v22 = v19[2];
      if (!v18) {
        break;
      }
      float v23 = &v19[*(unsigned int *)(result + 96)];
      v20 += (int)((*v23 - v20) * v18 + 0x4000) >> 15;
      v21 += (int)((v23[1] - v21) * v18 + 0x4000) >> 15;
      v22 += (int)((v23[2] - v22) * v18 + 0x4000) >> 15;
      if (v16)
      {
        float v24 = &v19[*(unsigned int *)(result + 100)];
        int v25 = *v24;
        int v26 = v24[1];
        int v27 = v24[2];
        float v28 = &v19[*(unsigned int *)(result + 108)];
        int v29 = v28[1];
        int v30 = v28[2];
        int v31 = v25 + (((*v28 - v25) * v18 + 0x4000) >> 15);
        int v32 = v26 + (((v29 - v26) * v18 + 0x4000) >> 15);
        int v33 = v27 + (((v30 - v27) * v18 + 0x4000) >> 15);
LABEL_11:
        v20 += (int)((v31 - v20) * v16 + 0x4000) >> 15;
        v21 += (int)((v32 - v21) * v16 + 0x4000) >> 15;
        v22 += (int)((v33 - v22) * v16 + 0x4000) >> 15;
        if (v14)
        {
          double v35 = &v19[*(unsigned int *)(result + 104)];
          int v36 = *v35;
          int v37 = v35[1];
          int v38 = v35[2];
          if (v18)
          {
            char v39 = 0;
            goto LABEL_16;
          }
          double v50 = &v19[*(unsigned int *)(result + 116)];
          int v47 = *v50;
          int v48 = v50[1];
          int v49 = v50[2];
LABEL_19:
          v36 += ((v47 - v36) * v16 + 0x4000) >> 15;
          v37 += ((v48 - v37) * v16 + 0x4000) >> 15;
          v38 += ((v49 - v38) * v16 + 0x4000) >> 15;
          goto LABEL_22;
        }
        goto LABEL_23;
      }
      if (v14)
      {
        double v40 = &v19[*(unsigned int *)(result + 104)];
        int v36 = *v40;
        int v37 = v40[1];
        int v38 = v40[2];
        char v39 = 1;
LABEL_16:
        float v41 = &v19[*(unsigned int *)(result + 112)];
        v36 += ((*v41 - v36) * v18 + 0x4000) >> 15;
        v37 += ((v41[1] - v37) * v18 + 0x4000) >> 15;
        v38 += ((v41[2] - v38) * v18 + 0x4000) >> 15;
        if ((v39 & 1) == 0)
        {
          unsigned int v42 = &v19[*(unsigned int *)(result + 116)];
          int v43 = v42[2];
          BOOL v44 = &v19[*(unsigned int *)(result + 120)];
          int v45 = v44[1];
          int v46 = v44[2];
          int v47 = *v42 + (((*v44 - *v42) * v18 + 0x4000) >> 15);
          int v48 = v42[1] + (((v45 - v42[1]) * v18 + 0x4000) >> 15);
          int v49 = v43 + (((v46 - v43) * v18 + 0x4000) >> 15);
          goto LABEL_19;
        }
LABEL_22:
        v20 += (int)((v36 - v20) * v14 + 0x4000) >> 15;
        v21 += (int)((v37 - v21) * v14 + 0x4000) >> 15;
        v22 += (int)((v38 - v22) * v14 + 0x4000) >> 15;
      }
LABEL_23:
      *(v8 - 2) = ((v20 >> 7) + (v20 << 9) + 1) >> 1;
      *(v8 - 1) = ((v21 >> 7) + (v21 << 9) + 1) >> 1;
      *float v8 = ((v22 >> 7) + (v22 << 9) + 1) >> 1;
      float v8 = (unsigned int *)((char *)v8 + v9);
      if (!--a4) {
        return result;
      }
    }
    if (!v16)
    {
      if (v14)
      {
        double v51 = &v19[*(unsigned int *)(result + 104)];
        int v36 = *v51;
        int v37 = v51[1];
        int v38 = v51[2];
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    double v34 = &v19[*(unsigned int *)(result + 100)];
    int v31 = *v34;
    int v32 = v34[1];
    int v33 = v34[2];
    goto LABEL_11;
  }
  return result;
}

void CMMConv3DPQEETF::~CMMConv3DPQEETF(CMMConv3DPQEETF *this)
{
  CMMConvCLUTBase::~CMMConvCLUTBase(this);

  CMMBase::operator delete(v1);
}

uint64_t CMMCLUTConv<CMMTrilinear<CMMCLUT3Output<CMMCLUT3D>>>::Convert(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a5)
  {
    unsigned int v5 = a5;
    int v6 = (float *)a2;
    uint64_t v7 = result;
    LODWORD(vCMMBase::operator delete(this - 8) = 0;
    unint64_t v9 = *(void *)(result + 64);
    uint64_t v10 = 4 * a4;
    unsigned int v11 = (float *)a2;
    do
    {
      if (v9)
      {
        unsigned int v12 = 1;
        unsigned int v13 = v11;
        do
        {
          float v14 = roundf(*v13 * 16777000.0);
          if (v14 > 16777000.0) {
            float v14 = 16777000.0;
          }
          if (v14 < 0.0) {
            float v14 = 0.0;
          }
          *(_DWORD *)v13++ = (int)v14;
          BOOL v15 = v9 > v12++;
        }
        while (v15);
      }
      unint64_t v8 = (v8 + 1);
      unsigned int v11 = (float *)((char *)v11 + v10);
    }
    while (v8 < a5);
    uint64_t result = CMMTrilinear<CMMCLUT3Output<CMMCLUT3D>>::Interpolate<CMMMaxBits>(result, a2, a4, a5);
    unsigned int v16 = 0;
    unint64_t v17 = *(void *)(v7 + 72);
    do
    {
      if (v17)
      {
        unsigned int v18 = 1;
        uint64_t v19 = v6;
        do
        {
          *uint64_t v19 = (float)*(int *)v19 * 0.000000059605;
          ++v19;
          BOOL v15 = v17 > v18++;
        }
        while (v15);
      }
      ++v16;
      int v6 = (float *)((char *)v6 + v10);
    }
    while (v16 < v5);
  }
  return result;
}

uint64_t CMMCLUTConv<CMMTrilinear<CMMCLUT3Output<CMMCLUT3D>>>::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CMMTrilinear<CMMCLUT3Output<CMMCLUT3D>>::Interpolate<CMMMaxBits>(a1, a2, a4, a5);
}

void CMMCLUTConv<CMMTrilinear<CMMCLUT3Output<CMMCLUT3D>>>::~CMMCLUTConv(CMMConvCLUTBase *a1)
{
  CMMConvCLUTBase::~CMMConvCLUTBase(a1);

  CMMBase::operator delete(v1);
}

CFDictionaryRef create_pq_dict(const __CFString *a1)
{
  keys[6] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = (void *)kColorSyncProfile;
  keys[1] = (void *)kColorSyncRenderingIntent;
  keys[2] = (void *)kColorSyncTransformTag;
  keys[3] = (void *)kColorSyncBlackPointCompensation;
  keys[4] = (void *)kColorSyncExtendedRange;
  keys[5] = (void *)kColorSyncHDRDerivative;
  values[0] = ColorSyncProfileCreateWithName((CFStringRef)kColorSyncITUR2100_PQProfile);
  values[1] = (void *)kColorSyncRenderingIntentPerceptual;
  uint64_t v2 = (void *)*MEMORY[0x1E4F1CFC8];
  values[2] = (void *)a1;
  values[3] = v2;
  double v3 = (void *)*MEMORY[0x1E4F1D260];
  values[4] = *(void **)MEMORY[0x1E4F1CFD0];
  values[5] = v3;
  return CFDictionaryCreate(0, (const void **)keys, (const void **)values, 6, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
}

CFDictionaryRef create_hlg_dict(const __CFString *a1)
{
  keys[6] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = (void *)kColorSyncProfile;
  keys[1] = (void *)kColorSyncRenderingIntent;
  keys[2] = (void *)kColorSyncTransformTag;
  keys[3] = (void *)kColorSyncBlackPointCompensation;
  keys[4] = (void *)kColorSyncExtendedRange;
  keys[5] = (void *)kColorSyncHDRDerivative;
  values[0] = ColorSyncProfileCreateWithName((CFStringRef)kColorSyncITUR2100_HLGProfile);
  values[1] = (void *)kColorSyncRenderingIntentPerceptual;
  uint64_t v2 = (void *)*MEMORY[0x1E4F1CFC8];
  values[2] = (void *)a1;
  values[3] = v2;
  double v3 = (void *)*MEMORY[0x1E4F1D260];
  values[4] = v2;
  values[5] = v3;
  return CFDictionaryCreate(0, (const void **)keys, (const void **)values, 6, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
}

ConversionManager *ConversionManager::MakeNDimLutConversion(uint64_t a1, ConversionManager *a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7)
{
  if ((unint64_t)CMMGetChannelCountFromCMMSpace(a4) > 4) {
    return a2;
  }
  if (a7 == 1)
  {
    if (a2)
    {
      unint64_t v14 = 0;
      BOOL v15 = a2;
      do
      {
        unint64_t v16 = (*(uint64_t (**)(ConversionManager *, uint64_t))(*(void *)v15 + 168))(v15, 1);
        if (v16 > v14) {
          unint64_t v14 = v16;
        }
        if (v14 == 0xFFFFFFFF) {
          return a2;
        }
        BOOL v15 = (ConversionManager *)*((void *)v15 + 2);
      }
      while (v15);
    }
LABEL_16:
    LutTypeTagFromSequence = (CMMLutTagBase *)ConversionManager::MakeLutTypeTagFromSequence(a1, a2, a3, a4, a5, a6, 0x11uLL);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    uint64_t v21 = CMMGetChannelCountFromCMMSpace(a4);
    uint64_t v22 = CMMGetChannelCountFromCMMSpace(a5);
    ConversionManager::AddCLUTConv(a1, LutTypeTagFromSequence, v21, v22);
    (*(void (**)(CMMLutTagBase *))(*(void *)LutTypeTagFromSequence + 8))(LutTypeTagFromSequence);
    return *(ConversionManager **)(a1 + 16);
  }
  if (!a2) {
    goto LABEL_16;
  }
  unint64_t v17 = 0;
  unsigned int v18 = a2;
  while (1)
  {
    unint64_t v19 = (*(uint64_t (**)(ConversionManager *, void))(*(void *)v18 + 168))(v18, 0);
    if (v19 > v17) {
      unint64_t v17 = v19;
    }
    if (v17 == 0xFFFFFFFF) {
      return a2;
    }
    unsigned int v18 = (ConversionManager *)*((void *)v18 + 2);
    if (!v18) {
      goto LABEL_16;
    }
  }
}

void *ConversionManager::MakeLutTypeTagFromSequence(uint64_t a1, ConversionManager *a2, uint64_t a3, int a4, int a5, uint64_t a6, unint64_t a7)
{
  unint64_t v7 = a7;
  uint64_t v214 = *MEMORY[0x1E4F143B8];
  if (!a7)
  {
    unint64_t v12 = CMMGetChannelCountFromCMMSpace(a4);
    unint64_t MaxCLUTNofPoints = ConversionManager::GetMaxCLUTNofPoints(a2, 0, v13);
    unint64_t v15 = 17;
    if (v12 == 4) {
      unint64_t v15 = 8;
    }
    if (MaxCLUTNofPoints) {
      unint64_t v15 = MaxCLUTNofPoints;
    }
    if (v15 > 9 && v12 > 4) {
      unint64_t v7 = 9;
    }
    else {
      unint64_t v7 = v15;
    }
  }
  int v115 = a4;
  uint64_t v17 = CMMGetChannelCountFromCMMSpace(a4);
  int v113 = a5;
  uint64_t v18 = CMMGetChannelCountFromCMMSpace(a5);
  unint64_t v19 = CMMBase::NewInternal(0x90uLL, *(void ***)(a1 + 8));
  *((_DWORD *)v19 + 2) = 1093812784;
  *((_OWORD *)v19 + 1) = 0u;
  *((_OWORD *)v19 + 2) = 0u;
  *((_WORD *)v19 + 24) = 0;
  *unint64_t v19 = &unk_1ED981788;
  *((unsigned char *)v19 + 50) = v17;
  *((unsigned char *)v19 + 51) = v18;
  *((unsigned char *)v19 + 52) = v7;
  *((unsigned char *)v19 + 53) = 0;
  *(_DWORD *)((char *)v19 + 54) = 0x10000;
  *(void *)((char *)v19 + 5CMMBase::operator delete(this - 8) = 0;
  *(void *)((char *)v19 + 66) = 0x1000000000000;
  *(void *)((char *)v19 + 74) = 0;
  *(_DWORD *)((char *)v19 + 82) = 0;
  *(void *)((char *)v19 + 86) = 0x2000200010000;
  *(_OWORD *)((char *)v19 + 110) = 0u;
  *(_OWORD *)((char *)v19 + 94) = 0u;
  *(_DWORD *)((char *)v19 + 126) = -1;
  *((_DWORD *)v19 + 33) = 0;
  *((_DWORD *)v19 + 34) = 0;
  lpsrc = v19;
  if (!(_BYTE)v17 || !(_BYTE)v18)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -170;
  }
  unint64_t v26 = 1;
  unint64_t v121 = v17;
  do
  {
    unint64_t v27 = v26 * v7;
    BOOL v29 = v27 >= v26 && v27 >= v7;
    CMMThrowExceptionWithLog(v29, "Overflow in Power", v20, v21, v22, v23, v24, v25);
    unint64_t v26 = v27;
    --v17;
  }
  while (v17);
  lpsrc[4] = 2
           * ((v27 + *((unsigned __int16 *)lpsrc + 46)) * *((unsigned __int8 *)lpsrc + 51)
            + *((unsigned __int16 *)lpsrc + 45) * (unint64_t)*((unsigned __int8 *)lpsrc + 50))
           + 52;
  uint64_t v37 = (*(uint64_t (**)(void *))(*(void *)v30 + 72))(v30);
  unint64_t v38 = v121;
  float v116 = a2;
  unint64_t v118 = v18;
  if (v121)
  {
    unint64_t v39 = 1;
    do
    {
      unint64_t v40 = v39;
      v39 *= v7;
      BOOL v42 = v39 >= v40 && v39 >= v7;
      CMMThrowExceptionWithLog(v42, "Overflow in Power", v31, v32, v33, v34, v35, v36);
      --v38;
    }
    while (v38);
    unint64_t v38 = v121;
    unint64_t v43 = calculate_clut_capacity(v7, v121, v121, 2, v33, v34, v35, v36);
  }
  else
  {
    CMMThrowExceptionOnError(0);
    unint64_t v43 = 0;
    unint64_t v39 = 1;
  }
  long long v213 = 0u;
  long long v212 = 0u;
  long long v211 = 0u;
  long long v210 = 0u;
  long long v209 = 0u;
  long long v208 = 0u;
  long long v207 = 0u;
  long long v206 = 0u;
  long long v205 = 0u;
  long long v204 = 0u;
  long long v203 = 0u;
  long long v202 = 0u;
  long long v201 = 0u;
  long long v200 = 0u;
  long long v199 = 0u;
  long long v198 = 0u;
  long long v197 = 0u;
  long long v196 = 0u;
  long long v195 = 0u;
  long long v194 = 0u;
  long long v193 = 0u;
  long long v192 = 0u;
  long long v191 = 0u;
  long long v190 = 0u;
  long long v189 = 0u;
  long long v188 = 0u;
  long long v187 = 0u;
  long long v186 = 0u;
  long long v185 = 0u;
  long long v184 = 0u;
  long long v183 = 0u;
  long long v182 = 0u;
  memset(&v141[8], 0, 32);
  unint64_t v111 = ~v37;
  if (v43 <= ~v37) {
    uint64_t v44 = 0;
  }
  else {
    uint64_t v44 = 4294967246;
  }
  memset(v141, 0, 32);
  CMMThrowExceptionOnError(v44);
  if (v7)
  {
    uint64_t v51 = 0;
    uint64x2_t v52 = (uint64x2_t)vdupq_n_s64(v7 - 1);
    float64x2_t v53 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(v7 - 1)), 0);
    int64x2_t v54 = (int64x2_t)xmmword_18BE63480;
    float64x2_t v55 = (float64x2_t)vdupq_n_s64(0x40EFFFE000000000uLL);
    __asm { FMOV            V4.2D, #0.5 }
    int64x2_t v60 = vdupq_n_s64(2uLL);
    do
    {
      int32x2_t v61 = vmovn_s64((int64x2_t)vcgeq_u64(v52, (uint64x2_t)v54));
      uint64_t v62 = v51 + 1;
      v63.i64[0] = v51;
      v63.i64[1] = v51 + 1;
      int32x2_t v64 = vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vmlaq_f64(_Q4, v55, vdivq_f64(vcvtq_f64_u64(v63), v53)))), (int32x2_t)0xFFFF0000FFFFLL), 0);
      if (v61.i8[0]) {
        *((_WORD *)&v182 + v51) = v64.i16[0];
      }
      if (v61.i8[4]) {
        *((_WORD *)&v182 + v51 + 1) = v64.i16[2];
      }
      int64x2_t v54 = vaddq_s64(v54, v60);
      v51 += 2;
    }
    while (v62 + 1 != ((v7 + 1) & 0xFFFFFFFFFFFFFFFELL));
  }
  uint64_t v112 = v37;
  unint64_t v65 = v37 + v43;
  if (v38)
  {
    uint64_t v66 = 0;
    do
    {
      if (v66)
      {
        unsigned int v67 = 1;
        int v68 = v66;
        do
        {
          unsigned int v69 = v67 * v7;
          BOOL v71 = v67 * v7 >= v67 && v69 >= v7;
          CMMThrowExceptionWithLog(v71, "Overflow in Power", v45, v46, v47, v48, v49, v50);
          unsigned int v67 = v69;
          --v68;
        }
        while (v68);
      }
      else
      {
        unsigned int v69 = 1;
      }
      v141[v66++] = v69;
    }
    while (v66 != v121);
  }
  int v72 = CMMBase::NewInternal(0x28uLL, *(void ***)(a1 + 8));
  uint64_t v119 = a1;
  int v73 = *(void ***)(a1 + 8);
  *int v72 = (uint64_t)&unk_1ED985520;
  v72[1] = 1;
  v72[3] = 0;
  v72[4] = v65;
  int v74 = CMMBase::NewInternal(v65, v73);
  v72[2] = (uint64_t)v74;
  int v117 = v72;
  uint64_t v75 = CMMTable::FloatData((uint64_t)v74, v72[3]);
  if (v39)
  {
    uint64_t v80 = v75;
    unint64_t v81 = 0;
    unsigned int v82 = 0;
    unint64_t v83 = v43 >> 1;
    do
    {
      memset(v153, 0, sizeof(v153));
      DecodeN(v81, v121, (unsigned int (*)[16])v153, (unsigned int (*)[16])v141, v7);
      if (v121)
      {
        unint64_t v84 = v121;
        unint64_t v85 = v84 + v84 * v82 - 1;
        unsigned __int16 v86 = v153;
        do
        {
          if (v85 >= v83) {
            uint64_t v87 = 4294967246;
          }
          else {
            uint64_t v87 = 0;
          }
          CMMThrowExceptionOnError(v87);
          unsigned int v88 = *v86++;
          *(_WORD *)(v80 + 2 * v85--) = *((_WORD *)&v182 + v88);
          --v84;
        }
        while (v84);
      }
      unint64_t v81 = ++v82;
    }
    while (v39 > v82);
  }
  unint64_t v89 = calculate_clut_capacity(v7, v121, v118, 2, v76, v77, v78, v79);
  unint64_t v90 = v112 + v89;
  if (v89 <= v111) {
    uint64_t v91 = 0;
  }
  else {
    uint64_t v91 = 4294967246;
  }
  CMMThrowExceptionOnError(v91);
  uint64_t v92 = CMMBase::NewInternal(0x28uLL, *(void ***)(v119 + 8));
  unint64_t v93 = *(void ***)(v119 + 8);
  unint64_t v94 = 1;
  *uint64_t v92 = &unk_1ED985520;
  v92[1] = 1;
  v92[3] = 0;
  v92[4] = v90;
  v92[2] = CMMBase::NewInternal(v90, v93);
  unint64_t v137 = &unk_1ED9810F0;
  float v138 = 0;
  BOOL v139 = 0;
  uint64_t v140 = 0;
  if (v121)
  {
    unint64_t v101 = 1;
    unint64_t v102 = v121;
    do
    {
      unint64_t v94 = v101 * v7;
      BOOL v104 = v101 * v7 >= v101 && v94 >= v7;
      CMMThrowExceptionWithLog(v104, "Overflow in Power", v95, v96, v97, v98, v99, v100);
      unint64_t v101 = v94;
      --v102;
    }
    while (v102);
  }
  long long v213 = 0u;
  long long v212 = 0u;
  long long v211 = 0u;
  long long v210 = 0u;
  long long v209 = 0u;
  long long v208 = 0u;
  long long v207 = 0u;
  long long v206 = 0u;
  long long v205 = 0u;
  long long v204 = 0u;
  long long v203 = 0u;
  long long v202 = 0u;
  long long v201 = 0u;
  long long v200 = 0u;
  long long v199 = 0u;
  long long v198 = 0u;
  long long v197 = 0u;
  long long v196 = 0u;
  long long v195 = 0u;
  long long v194 = 0u;
  long long v193 = 0u;
  long long v192 = 0u;
  long long v191 = 0u;
  long long v190 = 0u;
  long long v189 = 0u;
  long long v188 = 0u;
  long long v187 = 0u;
  long long v186 = 0u;
  long long v185 = 0u;
  long long v184 = 0u;
  long long v180 = 0u;
  long long v181 = 0u;
  long long v178 = 0u;
  long long v179 = 0u;
  long long v176 = 0u;
  long long v177 = 0u;
  long long v174 = 0u;
  long long v175 = 0u;
  long long v172 = 0u;
  long long v173 = 0u;
  long long v170 = 0u;
  long long v171 = 0u;
  long long v168 = 0u;
  long long v169 = 0u;
  long long v166 = 0u;
  long long v167 = 0u;
  long long v164 = 0u;
  long long v165 = 0u;
  long long v162 = 0u;
  long long v163 = 0u;
  long long v160 = 0u;
  long long v161 = 0u;
  long long v158 = 0u;
  long long v159 = 0u;
  long long v156 = 0u;
  long long v157 = 0u;
  long long v154 = 0u;
  long long v155 = 0u;
  memset(&v153[4], 0, 48);
  long long v145 = 0u;
  long long v146 = 0u;
  long long v143 = 0u;
  long long v144 = 0u;
  long long v142 = 0u;
  memset(&v141[4], 0, 48);
  *(void *)uint64_t v141 = 1;
  *(void *)&v141[2] = CMMTable::FloatData(v117[2], v117[3]);
  unint64_t v147 = v94;
  uint64_t v148 = 1;
  uint64_t v149 = v94 * 2 * v121;
  uint64_t v150 = 2 * v121;
  uint64_t v151 = 3;
  int v152 = v115;
  long long v129 = 0u;
  long long v130 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  v122[0] = 1;
  v122[1] = CMMTable::FloatData(v92[2], v92[3]);
  unint64_t v131 = v94;
  uint64_t v132 = 1;
  unint64_t v133 = v94 * 2 * v118;
  uint64_t v134 = 2 * v118;
  uint64_t v135 = 3;
  int v136 = v113;
  *(void *)&long long v182 = &unk_1ED982570;
  *((void *)&v182 + 1) = v94;
  *(void *)&long long v183 = a6 + 1;
  *((void *)&v183 + 1) = 0xC00uLL / (a6 + 1) * (a6 + 1);
  LODWORD(v184) = 4;
  unint64_t v105 = CMMDataBaseClass::CMMDataBaseClass((void *)&v184 + 1, v141, v121, (v94 * 2 * v121) >> 1);
  LOBYTE(v193) = 0;
  CMM16BitNChanData::SetParams(v105, (uint64_t)v141);
  *(void *)&long long v182 = off_1ED983488;
  float v138 = &v182;
  *(void *)BOOL v153 = &unk_1ED982538;
  *(void *)&v153[2] = a6 + 1;
  v153[4] = 4;
  uint64_t v106 = CMMDataBaseClass::CMMDataBaseClass(&v153[6], v122, v118, v133 >> 1);
  LOBYTE(v160) = 0;
  CMM16BitNChanData::SetParams(v106, (uint64_t)v122);
  *(void *)BOOL v153 = off_1ED983450;
  BOOL v139 = v153;
  ConversionManager::ApplySequenceToBitmap();
  (*(void (**)(uint64_t *))(*v117 + 8))(v117);
  uint64_t v107 = v116;
  if (v116)
  {
    do
    {
      uint64_t v108 = (ConversionManager *)*((void *)v107 + 2);
      (*(void (**)(ConversionManager *))(*(void *)v107 + 8))(v107);
      uint64_t v107 = v108;
    }
    while (v108);
  }
  (*(void (**)(void *, void *))(*lpsrc + 128))(lpsrc, v92);
  (*(void (**)(void *, void))(*lpsrc + 176))(lpsrc, *(void *)(v119 + 8));
  (*(void (**)(void *, void))(*lpsrc + 184))(lpsrc, *(void *)(v119 + 8));
  return lpsrc;
}

void sub_18BE54180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CMMTag *a20)
{
}

uint64_t ConversionManager::AddCLUTConv(uint64_t a1, CMMLutTagBase *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1;
  switch(a3)
  {
    case 1:
      if (a4 == 3 && (*(uint64_t (**)(CMMLutTagBase *))(*(void *)a2 + 64))(a2) == 2)
      {
        uint64_t v17 = (*(uint64_t (**)(CMMLutTagBase *, void))(*(void *)a2 + 40))(a2, *(void *)(v5 + 8));
        if (v17)
        {
          uint64_t v18 = v17;
          uint64_t v19 = v5;
          uint64_t v20 = 0;
          char v21 = 1;
          char v22 = 1;
          do
          {
            char v23 = v21;
            uint64_t v24 = CMMTable::FloatData(*(void *)(v18 + 16), *(void *)(v18 + 24));
            uint64_t v25 = 0;
            unint64_t v26 = (unsigned __int16 *)(v24 + 2 * v20);
            do
            {
              int v27 = *v26--;
              v22 &= v27 == (unsigned __int16)((__int16)((unsigned __int16)(v20 >> v25++) << 15) >> 15);
            }
            while (v25 != 3);
            char v21 = 0;
            uint64_t v20 = 1;
          }
          while ((v23 & 1) != 0);
          uint64_t v5 = v19;
          if (v22)
          {
            uint64_t result = (uint64_t)CMMBase::NewInternal(0x30uLL, *(void ***)(v19 + 8));
            int v6 = (CMMConvCLUTBase *)result;
            uint64_t v28 = *(void *)(v19 + 24);
            *(_DWORD *)(result + CMMBase::operator delete(this - 8) = 1;
            *(void *)(result + 16) = 0;
            *(void *)(result + 24) = v28;
            if (v28) {
              *(void *)(v28 + 16) = result;
            }
            *(void *)(result + 40) = 0x3F80000000000000;
            *(void *)uint64_t result = &unk_1ED982B40;
            *(_DWORD *)(result + 33) = 1;
            goto LABEL_111;
          }
        }
      }
      break;
    case 4:
      int v6 = (CMMConvCLUTBase *)CMMBase::NewInternal(0xA0uLL, *(void ***)(a1 + 8));
      CMMConvCLUTBase::CMMConvCLUTBase(v6, a2, *(CMMMemMgr **)(v5 + 8), *(CMMConvNode **)(v5 + 24));
      *unint64_t v43 = &unk_1ED9821E8;
      if (v43[8] == 4) {
        uint64_t v44 = 0;
      }
      else {
        uint64_t v44 = 4294967125;
      }
      uint64_t result = CMMThrowExceptionOnError(v44);
      int v45 = *((_DWORD *)v6 + 18);
      int v46 = *((_DWORD *)v6 + 14);
      int v47 = v46 * v45;
      *((_DWORD *)v6 + 24) = v45;
      *((_DWORD *)v6 + 25) = v46 * v45;
      int v48 = v46 * v45 * v46;
      int v49 = v48 * v46;
      *((_DWORD *)v6 + 26) = v48;
      *((_DWORD *)v6 + 27) = v49;
      *((_DWORD *)v6 + 2CMMBase::operator delete(this - 8) = v47 + v45;
      *((_DWORD *)v6 + 29) = v48 + v45;
      *((_DWORD *)v6 + 30) = v48 + v47;
      *((_DWORD *)v6 + 31) = v48 + v47 + v45;
      int v50 = v49 + v47;
      *((_DWORD *)v6 + 32) = v49 + v45;
      *((_DWORD *)v6 + 33) = v49 + v47;
      int v51 = v49 + v48;
      *((_DWORD *)v6 + 34) = v50 + v45;
      *((_DWORD *)v6 + 35) = v51;
      int v52 = v51 + v45;
      int v53 = v51 + v47;
      *((_DWORD *)v6 + 36) = v52;
      *((_DWORD *)v6 + 37) = v53;
      *((_DWORD *)v6 + 3CMMBase::operator delete(this - 8) = v53 + v45;
      unint64_t v16 = &unk_1ED981618;
      goto LABEL_33;
    case 3:
      int v6 = (CMMConvCLUTBase *)CMMBase::NewInternal(0x80uLL, *(void ***)(a1 + 8));
      CMMConvCLUTBase::CMMConvCLUTBase(v6, a2, *(CMMMemMgr **)(v5 + 8), *(CMMConvNode **)(v5 + 24));
      void *v7 = &unk_1ED981A10;
      if (v7[8] == 3) {
        uint64_t v8 = 0;
      }
      else {
        uint64_t v8 = 4294967125;
      }
      uint64_t result = CMMThrowExceptionOnError(v8);
      int v10 = *((_DWORD *)v6 + 18);
      int v11 = *((_DWORD *)v6 + 14);
      int v12 = v11 * v10;
      *((_DWORD *)v6 + 24) = v10;
      *((_DWORD *)v6 + 25) = v11 * v10;
      int v13 = v11 * v10 * v11;
      *((_DWORD *)v6 + 26) = v13;
      *((_DWORD *)v6 + 27) = v12 + v10;
      int v14 = v13 + v10;
      int v15 = v13 + v12;
      *((_DWORD *)v6 + 2CMMBase::operator delete(this - 8) = v14;
      *((_DWORD *)v6 + 29) = v15;
      *((_DWORD *)v6 + 30) = v15 + v10;
      unint64_t v16 = &unk_1ED981408;
LABEL_33:
      *(void *)int v6 = v16;
      goto LABEL_111;
  }
  int v6 = (CMMConvCLUTBase *)CMMBase::NewInternal(0x88uLL, *(void ***)(v5 + 8));
  BOOL v29 = *(CMMMemMgr **)(v5 + 8);
  CMMConvCLUTBase::CMMConvCLUTBase(v6, a2, v29, *(CMMConvNode **)(v5 + 24));
  *int v30 = &unk_1ED982078;
  uint64_t v37 = (*(uint64_t (**)(CMMLutTagBase *))(*(void *)a2 + 48))(a2);
  if (v37)
  {
    uint64_t v38 = 1;
    do
    {
      uint64_t v39 = v38;
      v38 *= 2;
      BOOL v41 = v39 >= 0 && v38 != 0;
      CMMThrowExceptionWithLog(v41, "Overflow in Power", v31, v32, v33, v34, v35, v36);
      --v37;
    }
    while (v37);
    unint64_t v42 = 8 * v39;
  }
  else
  {
    unint64_t v42 = 4;
  }
  *((void *)v6 + 12) = &unk_1ED985520;
  *((void *)v6 + 13) = 1;
  *((void *)v6 + 15) = 0;
  *((void *)v6 + 16) = v42;
  *((void *)v6 + 14) = CMMBase::NewInternal(v42, (void **)v29);
  *((void *)v6 + 12) = &unk_1ED985648;
  if (*((void *)v6 + 8) <= 0xFuLL) {
    uint64_t v54 = 0;
  }
  else {
    uint64_t v54 = 4294967125;
  }
  CMMThrowExceptionOnError(v54);
  uint64_t result = CMMTable::FloatData(*((void *)v6 + 14), *((void *)v6 + 15));
  int32x2_t v61 = (_DWORD *)result;
  unint64_t v62 = *((void *)v6 + 8);
  *(_DWORD *)uint64_t result = *((void *)v6 + 9);
  if (v62 < 2) {
    goto LABEL_110;
  }
  int v63 = 0;
  LODWORD(v64) = 1;
  do
  {
    if (v64 == 1)
    {
      int v70 = *v61 * *((_DWORD *)v6 + 14);
    }
    else
    {
      int v65 = 1;
      int v66 = v63;
      do
      {
        unsigned int v67 = 2 * v65;
        BOOL v69 = v65 >= 0 && v67 != 0;
        uint64_t result = CMMThrowExceptionWithLog(v69, "Overflow in Power", v55, v56, v57, v58, v59, v60);
        int v65 = v67;
        --v66;
      }
      while (v66);
      int v70 = v61[v67 - 1] * *((_DWORD *)v6 + 14);
      if (!v64)
      {
        uint64_t v71 = 1;
        goto LABEL_60;
      }
    }
    int v72 = 1;
    int v73 = v64;
    do
    {
      uint64_t v71 = (2 * v72);
      BOOL v75 = v72 >= 0 && v71 != 0;
      uint64_t result = CMMThrowExceptionWithLog(v75, "Overflow in Power", v55, v56, v57, v58, v59, v60);
      int v72 = v71;
      --v73;
    }
    while (v73);
LABEL_60:
    v61[v71 - 1] = v70;
    unint64_t v64 = (v64 + 1);
    unint64_t v76 = *((void *)v6 + 8);
    ++v63;
  }
  while (v76 > v64);
  if (v76 >= 2)
  {
    uint64_t v77 = 1;
    uint64_t v78 = 2;
    while (1)
    {
      uint64_t v79 = v77;
      uint64_t v80 = 1;
      do
      {
        BOOL v81 = v80 < 0;
        v80 *= 2;
        uint64_t v83 = !v81 && v80 != 0;
        CMMThrowExceptionWithLog(v83, "Overflow in Power", v55, v56, v57, v58, v59, v60);
        --v79;
      }
      while (v79);
      uint64_t v84 = v77 + 1;
      uint64_t v85 = v78;
      uint64_t v86 = 1;
      do
      {
        unint64_t v87 = 2 * v86;
        BOOL v89 = v86 >= 0 && v87 != 0;
        uint64_t result = CMMThrowExceptionWithLog(v89, "Overflow in Power", v55, v56, v57, v58, v59, v60);
        uint64_t v86 = v87;
        --v85;
      }
      while (v85);
      uint64_t v106 = v78;
      unint64_t v107 = v84;
      uint64_t v90 = v80 | 1;
      unint64_t v91 = *((void *)v6 + 8);
      if ((v80 | 1uLL) < v87) {
        break;
      }
LABEL_109:
      uint64_t v77 = v107;
      uint64_t v78 = v106 + 1;
      if (v107 >= v91) {
        goto LABEL_110;
      }
    }
    uint64_t v92 = *((void *)v6 + 8);
    while (1)
    {
      uint64_t v93 = v90;
      if (v92) {
        break;
      }
      int v95 = 0;
LABEL_108:
      v61[v80] = v95;
      uint64_t v90 = v93 + 1;
      uint64_t v80 = v93;
      if (v93 + 1 == v87) {
        goto LABEL_109;
      }
    }
    LODWORD(v94) = 0;
    int v95 = 0;
    while (2)
    {
      if (v94)
      {
        int v96 = 1;
        int v97 = v94;
        do
        {
          uint64_t v98 = (2 * v96);
          BOOL v100 = v96 >= 0 && v98 != 0;
          uint64_t result = CMMThrowExceptionWithLog(v100, "Overflow in Power", v55, v56, v57, v58, v59, v60);
          int v96 = v98;
          --v97;
        }
        while (v97);
        if ((v93 & v98) != 0)
        {
          int v101 = 1;
          int v102 = v94;
          do
          {
            uint64_t v103 = (2 * v101);
            BOOL v105 = v101 >= 0 && v103 != 0;
            uint64_t result = CMMThrowExceptionWithLog(v105, "Overflow in Power", v55, v56, v57, v58, v59, v60);
            int v101 = v103;
            --v102;
          }
          while (v102);
LABEL_104:
          v95 += v61[v103 - 1];
        }
      }
      else if (v93)
      {
        uint64_t v103 = 1;
        goto LABEL_104;
      }
      unint64_t v94 = (v94 + 1);
      unint64_t v91 = *((void *)v6 + 8);
      if (v91 <= v94)
      {
        uint64_t v92 = *((void *)v6 + 8);
        goto LABEL_108;
      }
      continue;
    }
  }
LABEL_110:
  *(void *)int v6 = &unk_1ED981510;
LABEL_111:
  *(void *)(v5 + 24) = v6;
  if (!*(void *)(v5 + 16)) {
    *(void *)(v5 + 16) = v6;
  }
  return result;
}

void sub_18BE54804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  CMMConvCLUTBase::~CMMConvCLUTBase(v9);
  _Unwind_Resume(a1);
}

unint64_t CMMCLUTConv<CMMNDimLinear<CMMCLUTMOutput<CMMCLUTnD>>>::Convert(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a5)
  {
    unsigned int v5 = a5;
    int v6 = (float *)a2;
    unint64_t v7 = result;
    LODWORD(vCMMBase::operator delete(this - 8) = 0;
    unint64_t v9 = *(void *)(result + 64);
    uint64_t v10 = 4 * a4;
    int v11 = (float *)a2;
    do
    {
      if (v9)
      {
        unsigned int v12 = 1;
        int v13 = v11;
        do
        {
          float v14 = roundf(*v13 * 16777000.0);
          if (v14 > 16777000.0) {
            float v14 = 16777000.0;
          }
          if (v14 < 0.0) {
            float v14 = 0.0;
          }
          *(_DWORD *)v13++ = (int)v14;
          BOOL v15 = v9 > v12++;
        }
        while (v15);
      }
      unint64_t v8 = (v8 + 1);
      int v11 = (float *)((char *)v11 + v10);
    }
    while (v8 < a5);
    uint64_t result = CMMNDimLinear<CMMCLUTMOutput<CMMCLUTnD>>::Interpolate<CMMMaxBits>(result, a2, a4, a5);
    unsigned int v16 = 0;
    unint64_t v17 = *(void *)(v7 + 72);
    do
    {
      if (v17)
      {
        unsigned int v18 = 1;
        uint64_t v19 = v6;
        do
        {
          *uint64_t v19 = (float)*(int *)v19 * 0.000000059605;
          ++v19;
          BOOL v15 = v17 > v18++;
        }
        while (v15);
      }
      ++v16;
      int v6 = (float *)((char *)v6 + v10);
    }
    while (v16 < v5);
  }
  return result;
}

unint64_t CMMNDimLinear<CMMCLUTMOutput<CMMCLUTnD>>::Interpolate<CMMMaxBits>(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  memset(v38, 0, 64);
  memset(v36, 0, sizeof(v36));
  if (a4)
  {
    unint64_t v5 = result;
    int v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(result + 88);
    int v9 = *(_DWORD *)(result + 56) - 1;
    memset(v37, 0, sizeof(v37));
    uint64_t v30 = v8;
    uint64_t v31 = 4 * a3;
    do
    {
      unint64_t v10 = *(void *)(v5 + 64);
      int v11 = v6;
      if (v10)
      {
        uint64_t v12 = 0;
        unsigned int v13 = 1;
        do
        {
          unsigned int v14 = *(_DWORD *)(a2 + 4 * v12);
          if (v14 >= 0x1000001)
          {
            exception = __cxa_allocate_exception(4uLL);
            _DWORD *exception = -171;
          }
          unsigned int v15 = v14 * v9 + 256;
          v38[v12] = HIBYTE(v15);
          *((_DWORD *)v37 + v12) = (v15 >> 9) & 0x7FFF;
          uint64_t v12 = v13;
          BOOL v16 = v10 > v13++;
        }
        while (v16);
        int v6 = v38[0];
        if (v10 < 2)
        {
          int v11 = v38[0];
        }
        else
        {
          unsigned int v17 = 2;
          uint64_t v18 = 1;
          int v11 = v38[0];
          do
          {
            int v11 = v38[v18] + v11 * *(_DWORD *)(v5 + 56);
            uint64_t v18 = v17;
            BOOL v16 = v10 > v17++;
          }
          while (v16);
        }
      }
      int v34 = v6;
      uint64_t v19 = *(void *)(v5 + 72);
      uint64_t result = CMMTable::FloatData(*(void *)(v5 + 112), *(void *)(v5 + 120));
      unint64_t v21 = *(void *)(v5 + 72);
      if (v21)
      {
        uint64_t v22 = result;
        uint64_t v33 = v7;
        uint64_t v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = (unsigned __int16 *)(v30 + 2 * v19 * v11);
        uint64_t result = *(void *)(v5 + 64);
        do
        {
          uint64_t v26 = *v25;
          int v35 = 0;
          if (result)
          {
            LODWORD(v27) = 0;
            do
            {
              uint64_t v26 = InnerInterpolate<CMMMaxBits>(result, v27, (uint64_t)v37, v26, (uint64_t)v25, v22, &v35, v20);
              unint64_t v27 = (v27 + 1);
              uint64_t result = *(void *)(v5 + 64);
            }
            while (result > v27);
            unint64_t v21 = *(void *)(v5 + 72);
          }
          *((_DWORD *)v36 + v23) = v26;
          ++v25;
          uint64_t v23 = ++v24;
        }
        while (v21 > v24);
        uint64_t v7 = v33;
        if (v21)
        {
          uint64_t v28 = 0;
          do
          {
            *(_DWORD *)(a2 + 4 * v2CMMBase::operator delete(this - 8) = ((*((_DWORD *)v36 + v28) >> 7) + (*((_DWORD *)v36 + v28) << 9) + 1) >> 1;
            ++v28;
          }
          while (v21 > v28);
        }
      }
      a2 += v31;
      ++v7;
      int v6 = v34;
    }
    while (v7 != a4);
  }
  return result;
}

uint64_t InnerInterpolate<CMMMaxBits>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  uint64_t v11 = a4;
  if (a2)
  {
    int v14 = a2;
    uint64_t v15 = (~a2 + a1);
    if (*(_DWORD *)(a3 + 4 * v15))
    {
      uint64_t v16 = 0;
      uint64_t v17 = *a7;
      *a7 = v17 + 1;
      uint64_t v18 = *(unsigned __int16 *)(a5 + 2 * *(unsigned int *)(a6 + 4 * v17));
      do
      {
        uint64_t v19 = InnerInterpolate<CMMMaxBits>(a1, v16, a3, v18, a5, a6, a7);
        uint64_t v18 = v19;
        uint64_t v16 = (v16 + 1);
      }
      while (v14 != v16);
      int v20 = *(_DWORD *)(a3 + 4 * v15);
      int v21 = v19 - v11;
      return (v11 + ((v20 * v21 + 0x4000) >> 15));
    }
    int v23 = 1;
    do
    {
      int v24 = 2 * v23;
      BOOL v26 = v23 >= 0 && v24 != 0;
      CMMThrowExceptionWithLog(v26, "Overflow in Power", a3, a4, a5, a6, (uint64_t)a7, a8);
      int v23 = v24;
      --v14;
    }
    while (v14);
    *a7 += v24;
  }
  else
  {
    uint64_t v22 = *a7;
    *a7 = v22 + 1;
    int v21 = *(_DWORD *)(a3 + 4 * (a1 - 1));
    if (v21)
    {
      int v20 = *(unsigned __int16 *)(a5 + 2 * *(unsigned int *)(a6 + 4 * v22)) - a4;
      return (v11 + ((v20 * v21 + 0x4000) >> 15));
    }
  }
  return v11;
}

unint64_t CMMCLUTConv<CMMNDimLinear<CMMCLUTMOutput<CMMCLUTnD>>>::Convert(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CMMNDimLinear<CMMCLUTMOutput<CMMCLUTnD>>::Interpolate<CMMMaxBits>(a1, a2, a4, a5);
}

void CMMCLUTConv<CMMNDimLinear<CMMCLUTMOutput<CMMCLUTnD>>>::~CMMCLUTConv(CMMConvCLUTBase *a1)
{
  CMMCLUTConv<CMMNDimLinear<CMMCLUTMOutput<CMMCLUTnD>>>::~CMMCLUTConv(a1);

  CMMBase::operator delete(v1);
}

void CMMCLUTConv<CMMNDimLinear<CMMCLUTMOutput<CMMCLUTnD>>>::~CMMCLUTConv(CMMConvCLUTBase *this)
{
  *(void *)this = &unk_1ED982078;
  *((void *)this + 12) = &unk_1ED985520;
  uint64_t v2 = (pthread_mutex_t **)*((void *)this + 14);
  if (v2) {
    CMMBase::operator delete(v2);
  }

  CMMConvCLUTBase::~CMMConvCLUTBase(this);
}

void CMMNDimLinear<CMMCLUTMOutput<CMMCLUTnD>>::Offsets::~Offsets(pthread_mutex_t **a1)
{
  *a1 = (pthread_mutex_t *)&unk_1ED985520;
  uint64_t v2 = (pthread_mutex_t **)a1[2];
  if (v2) {
    CMMBase::operator delete(v2);
  }

  CMMBase::operator delete(a1);
}

void *CMMNDimLinear<CMMCLUTMOutput<CMMCLUTnD>>::Offsets::~Offsets(void *a1)
{
  *a1 = &unk_1ED985520;
  uint64_t v2 = (pthread_mutex_t **)a1[2];
  if (v2) {
    CMMBase::operator delete(v2);
  }
  return a1;
}

uint64_t CMMCLUTConv<CMMQuadlinear<CMMCLUTMOutput<CMMCLUT4D>>>::Convert(uint64_t result, float *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a5)
  {
    unsigned int v5 = a5;
    int v6 = a2;
    uint64_t v7 = result;
    LODWORD(vCMMBase::operator delete(this - 8) = 0;
    unint64_t v9 = *(void *)(result + 64);
    uint64_t v10 = 4 * a4;
    uint64_t v11 = a2;
    do
    {
      if (v9)
      {
        unsigned int v12 = 1;
        unsigned int v13 = v11;
        do
        {
          float v14 = roundf(*v13 * 16777000.0);
          if (v14 > 16777000.0) {
            float v14 = 16777000.0;
          }
          if (v14 < 0.0) {
            float v14 = 0.0;
          }
          *(_DWORD *)v13++ = (int)v14;
          BOOL v15 = v9 > v12++;
        }
        while (v15);
      }
      unint64_t v8 = (v8 + 1);
      uint64_t v11 = (float *)((char *)v11 + v10);
    }
    while (v8 < a5);
    uint64_t result = CMMQuadlinear<CMMCLUTMOutput<CMMCLUT4D>>::Interpolate<CMMMaxBits>(result, a2, a4, a5);
    unsigned int v16 = 0;
    unint64_t v17 = *(void *)(v7 + 72);
    do
    {
      if (v17)
      {
        unsigned int v18 = 1;
        uint64_t v19 = v6;
        do
        {
          *uint64_t v19 = (float)*(int *)v19 * 0.000000059605;
          ++v19;
          BOOL v15 = v17 > v18++;
        }
        while (v15);
      }
      ++v16;
      int v6 = (float *)((char *)v6 + v10);
    }
    while (v16 < v5);
  }
  return result;
}

uint64_t CMMQuadlinear<CMMCLUTMOutput<CMMCLUT4D>>::Interpolate<CMMMaxBits>(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  memset(v71, 0, sizeof(v71));
  if (a4)
  {
    uint64_t v4 = *(void *)(result + 88);
    int v5 = *(_DWORD *)(result + 56);
    int v6 = v5 - 1;
    unint64_t v7 = *(void *)(result + 72);
    memset(v75, 0, sizeof(v75));
    memset(v74, 0, sizeof(v74));
    memset(v73, 0, sizeof(v73));
    memset(v72, 0, sizeof(v72));
    while (1)
    {
      if (*a2 >= 0x1000001u
        || (unsigned int v8 = a2[1], v8 >= 0x1000001)
        || (unsigned int v9 = a2[2], v9 >= 0x1000001)
        || (unsigned int v10 = a2[3], v10 >= 0x1000001))
      {
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = -171;
      }
      if (!v7) {
        goto LABEL_89;
      }
      uint64_t v11 = 0;
      unsigned int v12 = *a2 * v6 + 256;
      unsigned int v13 = HIBYTE(v12);
      int v14 = (v12 >> 9) & 0x7FFF;
      unsigned int v15 = v8 * v6 + 256;
      unsigned int v16 = HIBYTE(v15);
      int v17 = (v15 >> 9) & 0x7FFF;
      unsigned int v18 = v9 * v6 + 256;
      int v19 = (v18 >> 9) & 0x7FFF;
      unsigned int v20 = v10 * v6 + 256;
      int v21 = (v20 >> 9) & 0x7FFF;
      uint64_t v22 = v4 + 2 * (((v16 + v13 * v5) * v5 + HIBYTE(v18)) * v5 + HIBYTE(v20)) * v7;
      do
      {
        *((_DWORD *)v75 + v11) = *(unsigned __int16 *)(v22 + 2 * v11);
        ++v11;
      }
      while (v7 > v11);
      if (v21)
      {
        uint64_t v23 = 0;
        uint64_t v24 = v22 + 2 * *(unsigned int *)(result + 96);
        do
        {
          *((_DWORD *)v72 + v23) = *(unsigned __int16 *)(v24 + 2 * v23);
          ++v23;
        }
        while (v7 > v23);
        uint64_t v25 = 0;
        do
        {
          *((_DWORD *)v75 + v25) += ((*((_DWORD *)v72 + v25) - *((_DWORD *)v75 + v25)) * v21 + 0x4000) >> 15;
          ++v25;
        }
        while (v7 > v25);
      }
      if (v19)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v22 + 2 * *(unsigned int *)(result + 100);
        do
        {
          *((_DWORD *)v73 + v26) = *(unsigned __int16 *)(v27 + 2 * v26);
          ++v26;
        }
        while (v7 > v26);
        if (v21)
        {
          uint64_t v28 = 0;
          uint64_t v29 = v22 + 2 * *(unsigned int *)(result + 112);
          do
          {
            *((_DWORD *)v72 + v2CMMBase::operator delete(this - 8) = *(unsigned __int16 *)(v29 + 2 * v28);
            ++v28;
          }
          while (v7 > v28);
          uint64_t v30 = 0;
          do
          {
            *((_DWORD *)v73 + v30) += ((*((_DWORD *)v72 + v30) - *((_DWORD *)v73 + v30)) * v21 + 0x4000) >> 15;
            ++v30;
          }
          while (v7 > v30);
        }
        uint64_t v31 = 0;
        do
        {
          *((_DWORD *)v75 + v31) += ((*((_DWORD *)v73 + v31) - *((_DWORD *)v75 + v31)) * v19 + 0x4000) >> 15;
          ++v31;
        }
        while (v7 > v31);
      }
      if (v17) {
        break;
      }
      char v44 = 1;
      if (v14) {
        goto LABEL_46;
      }
LABEL_87:
      uint64_t v69 = 0;
      do
      {
        a2[v69] = ((*((_DWORD *)v75 + v69) >> 7) + (*((_DWORD *)v75 + v69) << 9) + 1) >> 1;
        ++v69;
      }
      while (v7 > v69);
LABEL_89:
      a2 += a3;
      if (!--a4) {
        return result;
      }
    }
    uint64_t v32 = 0;
    uint64_t v33 = v22 + 2 * *(unsigned int *)(result + 104);
    do
    {
      *((_DWORD *)v74 + v32) = *(unsigned __int16 *)(v33 + 2 * v32);
      ++v32;
    }
    while (v7 > v32);
    if (v21)
    {
      uint64_t v34 = 0;
      uint64_t v35 = v22 + 2 * *(unsigned int *)(result + 116);
      do
      {
        *((_DWORD *)v72 + v34) = *(unsigned __int16 *)(v35 + 2 * v34);
        ++v34;
      }
      while (v7 > v34);
      uint64_t v36 = 0;
      do
      {
        *((_DWORD *)v74 + v36) += ((*((_DWORD *)v72 + v36) - *((_DWORD *)v74 + v36)) * v21 + 0x4000) >> 15;
        ++v36;
      }
      while (v7 > v36);
    }
    if (v19)
    {
      uint64_t v37 = 0;
      uint64_t v38 = v22 + 2 * *(unsigned int *)(result + 120);
      do
      {
        *((_DWORD *)v73 + v37) = *(unsigned __int16 *)(v38 + 2 * v37);
        ++v37;
      }
      while (v7 > v37);
      if (v21)
      {
        uint64_t v39 = 0;
        uint64_t v40 = v22 + 2 * *(unsigned int *)(result + 124);
        do
        {
          *((_DWORD *)v72 + v39) = *(unsigned __int16 *)(v40 + 2 * v39);
          ++v39;
        }
        while (v7 > v39);
        uint64_t v41 = 0;
        do
        {
          *((_DWORD *)v73 + v41) += ((*((_DWORD *)v72 + v41) - *((_DWORD *)v73 + v41)) * v21 + 0x4000) >> 15;
          ++v41;
        }
        while (v7 > v41);
      }
      uint64_t v42 = 0;
      do
      {
        *((_DWORD *)v74 + v42) += ((*((_DWORD *)v73 + v42) - *((_DWORD *)v74 + v42)) * v19 + 0x4000) >> 15;
        ++v42;
      }
      while (v7 > v42);
    }
    uint64_t v43 = 0;
    do
    {
      *((_DWORD *)v75 + v43) += ((*((_DWORD *)v74 + v43) - *((_DWORD *)v75 + v43)) * v17 + 0x4000) >> 15;
      ++v43;
    }
    while (v7 > v43);
    char v44 = 0;
    if (!v14) {
      goto LABEL_87;
    }
LABEL_46:
    uint64_t v45 = 0;
    uint64_t v46 = v22 + 2 * *(unsigned int *)(result + 108);
    do
    {
      *((_DWORD *)v74 + v45) = *(unsigned __int16 *)(v46 + 2 * v45);
      ++v45;
    }
    while (v7 > v45);
    if (v21)
    {
      uint64_t v47 = 0;
      uint64_t v48 = v22 + 2 * *(unsigned int *)(result + 128);
      do
      {
        *((_DWORD *)v71 + v47) = *(unsigned __int16 *)(v48 + 2 * v47);
        ++v47;
      }
      while (v7 > v47);
      uint64_t v49 = 0;
      do
      {
        *((_DWORD *)v74 + v49) += ((*((_DWORD *)v71 + v49) - *((_DWORD *)v74 + v49)) * v21 + 0x4000) >> 15;
        ++v49;
      }
      while (v7 > v49);
    }
    if (v19)
    {
      uint64_t v50 = 0;
      uint64_t v51 = v22 + 2 * *(unsigned int *)(result + 132);
      do
      {
        *((_DWORD *)v72 + v50) = *(unsigned __int16 *)(v51 + 2 * v50);
        ++v50;
      }
      while (v7 > v50);
      if (v21)
      {
        uint64_t v52 = 0;
        uint64_t v53 = v22 + 2 * *(unsigned int *)(result + 136);
        do
        {
          *((_DWORD *)v71 + v52) = *(unsigned __int16 *)(v53 + 2 * v52);
          ++v52;
        }
        while (v7 > v52);
        uint64_t v54 = 0;
        do
        {
          *((_DWORD *)v72 + v54) += ((*((_DWORD *)v71 + v54) - *((_DWORD *)v72 + v54)) * v21 + 0x4000) >> 15;
          ++v54;
        }
        while (v7 > v54);
      }
      uint64_t v55 = 0;
      do
      {
        *((_DWORD *)v74 + v55) += ((*((_DWORD *)v72 + v55) - *((_DWORD *)v74 + v55)) * v19 + 0x4000) >> 15;
        ++v55;
      }
      while (v7 > v55);
    }
    if ((v44 & 1) == 0)
    {
      uint64_t v56 = 0;
      uint64_t v57 = v22 + 2 * *(unsigned int *)(result + 140);
      do
      {
        *((_DWORD *)v73 + v56) = *(unsigned __int16 *)(v57 + 2 * v56);
        ++v56;
      }
      while (v7 > v56);
      if (v21)
      {
        uint64_t v58 = 0;
        uint64_t v59 = v22 + 2 * *(unsigned int *)(result + 144);
        do
        {
          *((_DWORD *)v71 + v5CMMBase::operator delete(this - 8) = *(unsigned __int16 *)(v59 + 2 * v58);
          ++v58;
        }
        while (v7 > v58);
        uint64_t v60 = 0;
        do
        {
          *((_DWORD *)v73 + v60) += ((*((_DWORD *)v71 + v60) - *((_DWORD *)v73 + v60)) * v21 + 0x4000) >> 15;
          ++v60;
        }
        while (v7 > v60);
      }
      if (v19)
      {
        uint64_t v61 = 0;
        uint64_t v62 = v22 + 2 * *(unsigned int *)(result + 148);
        do
        {
          *((_DWORD *)v72 + v61) = *(unsigned __int16 *)(v62 + 2 * v61);
          ++v61;
        }
        while (v7 > v61);
        if (v21)
        {
          uint64_t v63 = 0;
          uint64_t v64 = v22 + 2 * *(unsigned int *)(result + 152);
          do
          {
            *((_DWORD *)v71 + v63) = *(unsigned __int16 *)(v64 + 2 * v63);
            ++v63;
          }
          while (v7 > v63);
          uint64_t v65 = 0;
          do
          {
            *((_DWORD *)v72 + v65) += ((*((_DWORD *)v71 + v65) - *((_DWORD *)v72 + v65)) * v21 + 0x4000) >> 15;
            ++v65;
          }
          while (v7 > v65);
        }
        uint64_t v66 = 0;
        do
        {
          *((_DWORD *)v73 + v66) += ((*((_DWORD *)v72 + v66) - *((_DWORD *)v73 + v66)) * v19 + 0x4000) >> 15;
          ++v66;
        }
        while (v7 > v66);
      }
      uint64_t v67 = 0;
      do
      {
        *((_DWORD *)v74 + v67) += ((*((_DWORD *)v73 + v67) - *((_DWORD *)v74 + v67)) * v17 + 0x4000) >> 15;
        ++v67;
      }
      while (v7 > v67);
    }
    uint64_t v68 = 0;
    do
    {
      *((_DWORD *)v75 + v68) += ((*((_DWORD *)v74 + v68) - *((_DWORD *)v75 + v68)) * v14 + 0x4000) >> 15;
      ++v68;
    }
    while (v7 > v68);
    goto LABEL_87;
  }
  return result;
}

uint64_t CMMCLUTConv<CMMQuadlinear<CMMCLUTMOutput<CMMCLUT4D>>>::Convert(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CMMQuadlinear<CMMCLUTMOutput<CMMCLUT4D>>::Interpolate<CMMMaxBits>(a1, a2, a4, a5);
}

void CMMCLUTConv<CMMQuadlinear<CMMCLUTMOutput<CMMCLUT4D>>>::~CMMCLUTConv(CMMConvCLUTBase *a1)
{
  CMMConvCLUTBase::~CMMConvCLUTBase(a1);

  CMMBase::operator delete(v1);
}

uint64_t CMMCLUTConv<CMMTrilinear<CMMCLUTMOutput<CMMCLUT3D>>>::Convert(uint64_t result, float *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a5)
  {
    unsigned int v5 = a5;
    int v6 = a2;
    uint64_t v7 = result;
    LODWORD(vCMMBase::operator delete(this - 8) = 0;
    unint64_t v9 = *(void *)(result + 64);
    uint64_t v10 = 4 * a4;
    uint64_t v11 = a2;
    do
    {
      if (v9)
      {
        unsigned int v12 = 1;
        unsigned int v13 = v11;
        do
        {
          float v14 = roundf(*v13 * 16777000.0);
          if (v14 > 16777000.0) {
            float v14 = 16777000.0;
          }
          if (v14 < 0.0) {
            float v14 = 0.0;
          }
          *(_DWORD *)v13++ = (int)v14;
          BOOL v15 = v9 > v12++;
        }
        while (v15);
      }
      unint64_t v8 = (v8 + 1);
      uint64_t v11 = (float *)((char *)v11 + v10);
    }
    while (v8 < a5);
    uint64_t result = CMMTrilinear<CMMCLUTMOutput<CMMCLUT3D>>::Interpolate<CMMMaxBits>(result, a2, a4, a5);
    unsigned int v16 = 0;
    unint64_t v17 = *(void *)(v7 + 72);
    do
    {
      if (v17)
      {
        unsigned int v18 = 1;
        int v19 = v6;
        do
        {
          *int v19 = (float)*(int *)v19 * 0.000000059605;
          ++v19;
          BOOL v15 = v17 > v18++;
        }
        while (v15);
      }
      ++v16;
      int v6 = (float *)((char *)v6 + v10);
    }
    while (v16 < v5);
  }
  return result;
}

uint64_t CMMTrilinear<CMMCLUTMOutput<CMMCLUT3D>>::Interpolate<CMMMaxBits>(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  memset(v42, 0, sizeof(v42));
  if (a4)
  {
    uint64_t v4 = *(void *)(result + 88);
    int v5 = *(_DWORD *)(result + 56);
    int v6 = v5 - 1;
    unint64_t v7 = *(void *)(result + 72);
    memset(v45, 0, sizeof(v45));
    memset(v44, 0, sizeof(v44));
    memset(v43, 0, sizeof(v43));
    do
    {
      if (*a2 >= 0x1000001u || (unsigned int v8 = a2[1], v8 >= 0x1000001) || (v9 = a2[2], v9 >= 0x1000001))
      {
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = -171;
      }
      if (v7)
      {
        uint64_t v10 = 0;
        unsigned int v11 = *a2 * v6 + 256;
        unsigned int v12 = HIBYTE(v11);
        int v13 = (v11 >> 9) & 0x7FFF;
        unsigned int v14 = v8 * v6 + 256;
        int v15 = (v14 >> 9) & 0x7FFF;
        unsigned int v16 = v9 * v6 + 256;
        int v17 = (v16 >> 9) & 0x7FFF;
        uint64_t v18 = v4 + 2 * ((v12 * v5 + HIBYTE(v14)) * v5 + HIBYTE(v16)) * v7;
        do
        {
          *((_DWORD *)v45 + v10) = *(unsigned __int16 *)(v18 + 2 * v10);
          ++v10;
        }
        while (v7 > v10);
        if (v17)
        {
          uint64_t v19 = 0;
          uint64_t v20 = v18 + 2 * *(unsigned int *)(result + 96);
          do
          {
            *((_DWORD *)v44 + v19) = *(unsigned __int16 *)(v20 + 2 * v19);
            ++v19;
          }
          while (v7 > v19);
          uint64_t v21 = 0;
          do
          {
            *((_DWORD *)v45 + v21) += ((*((_DWORD *)v44 + v21) - *((_DWORD *)v45 + v21)) * v17 + 0x4000) >> 15;
            ++v21;
          }
          while (v7 > v21);
        }
        if (v15)
        {
          uint64_t v22 = 0;
          uint64_t v23 = v18 + 2 * *(unsigned int *)(result + 100);
          do
          {
            *((_DWORD *)v44 + v22) = *(unsigned __int16 *)(v23 + 2 * v22);
            ++v22;
          }
          while (v7 > v22);
          if (v17)
          {
            uint64_t v24 = 0;
            uint64_t v25 = v18 + 2 * *(unsigned int *)(result + 108);
            do
            {
              *((_DWORD *)v43 + v24) = *(unsigned __int16 *)(v25 + 2 * v24);
              ++v24;
            }
            while (v7 > v24);
            uint64_t v26 = 0;
            do
            {
              *((_DWORD *)v44 + v26) += ((*((_DWORD *)v43 + v26) - *((_DWORD *)v44 + v26)) * v17 + 0x4000) >> 15;
              ++v26;
            }
            while (v7 > v26);
          }
          uint64_t v27 = 0;
          do
          {
            *((_DWORD *)v45 + v27) += ((*((_DWORD *)v44 + v27) - *((_DWORD *)v45 + v27)) * v15 + 0x4000) >> 15;
            ++v27;
          }
          while (v7 > v27);
        }
        if (v13)
        {
          uint64_t v28 = 0;
          uint64_t v29 = v18 + 2 * *(unsigned int *)(result + 104);
          do
          {
            *((_DWORD *)v44 + v2CMMBase::operator delete(this - 8) = *(unsigned __int16 *)(v29 + 2 * v28);
            ++v28;
          }
          while (v7 > v28);
          if (v17)
          {
            uint64_t v30 = 0;
            uint64_t v31 = v18 + 2 * *(unsigned int *)(result + 112);
            do
            {
              *((_DWORD *)v43 + v30) = *(unsigned __int16 *)(v31 + 2 * v30);
              ++v30;
            }
            while (v7 > v30);
            uint64_t v32 = 0;
            do
            {
              *((_DWORD *)v44 + v32) += ((*((_DWORD *)v43 + v32) - *((_DWORD *)v44 + v32)) * v17 + 0x4000) >> 15;
              ++v32;
            }
            while (v7 > v32);
          }
          if (v15)
          {
            uint64_t v33 = 0;
            uint64_t v34 = v18 + 2 * *(unsigned int *)(result + 116);
            do
            {
              *((_DWORD *)v43 + v33) = *(unsigned __int16 *)(v34 + 2 * v33);
              ++v33;
            }
            while (v7 > v33);
            if (v17)
            {
              uint64_t v35 = 0;
              uint64_t v36 = v18 + 2 * *(unsigned int *)(result + 120);
              do
              {
                *((_DWORD *)v42 + v35) = *(unsigned __int16 *)(v36 + 2 * v35);
                ++v35;
              }
              while (v7 > v35);
              uint64_t v37 = 0;
              do
              {
                *((_DWORD *)v43 + v37) += ((*((_DWORD *)v42 + v37) - *((_DWORD *)v43 + v37)) * v17 + 0x4000) >> 15;
                ++v37;
              }
              while (v7 > v37);
            }
            uint64_t v38 = 0;
            do
            {
              *((_DWORD *)v44 + v38) += ((*((_DWORD *)v43 + v38) - *((_DWORD *)v44 + v38)) * v15 + 0x4000) >> 15;
              ++v38;
            }
            while (v7 > v38);
          }
          uint64_t v39 = 0;
          do
          {
            *((_DWORD *)v45 + v39) += ((*((_DWORD *)v44 + v39) - *((_DWORD *)v45 + v39)) * v13 + 0x4000) >> 15;
            ++v39;
          }
          while (v7 > v39);
        }
        uint64_t v40 = 0;
        do
        {
          a2[v40] = ((*((_DWORD *)v45 + v40) >> 7) + (*((_DWORD *)v45 + v40) << 9) + 1) >> 1;
          ++v40;
        }
        while (v7 > v40);
      }
      a2 += a3;
      --a4;
    }
    while (a4);
  }
  return result;
}

uint64_t CMMCLUTConv<CMMTrilinear<CMMCLUTMOutput<CMMCLUT3D>>>::Convert(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CMMTrilinear<CMMCLUTMOutput<CMMCLUT3D>>::Interpolate<CMMMaxBits>(a1, a2, a4, a5);
}

void CMMCLUTConv<CMMTrilinear<CMMCLUTMOutput<CMMCLUT3D>>>::~CMMCLUTConv(CMMConvCLUTBase *a1)
{
  CMMConvCLUTBase::~CMMConvCLUTBase(a1);

  CMMBase::operator delete(v1);
}

unint64_t ConversionManager::GetMaxCLUTNofPoints(ConversionManager *this, CMMConvNode *a2, CMMConvNode *a3)
{
  if (this == a2)
  {
    if (this) {
      return 17;
    }
    else {
      return 2;
    }
  }
  else
  {
    unint64_t v5 = 0;
    int v6 = this;
    do
    {
      unint64_t v7 = (*(uint64_t (**)(CMMConvNode *, uint64_t, CMMConvNode *))(*(void *)v6 + 168))(v6, 2, a3);
      if (v7 > v5) {
        unint64_t v5 = v7;
      }
      if (v5 == 0xFFFFFFFF) {
        return 0;
      }
      int v6 = (CMMConvNode *)*((void *)v6 + 2);
    }
    while (v6 != a2);
    uint64_t v8 = 17;
    if (!this) {
      uint64_t v8 = 2;
    }
    if (!v5) {
      return v8;
    }
  }
  return v5;
}

uint64_t ConversionManager::ApplySequenceToBitmap()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  unint64_t v45 = v4;
  uint64_t v8 = (void *)v0;
  uint64_t v10 = *(_DWORD **)(v2 + 8);
  unsigned int v9 = *(_DWORD **)(v2 + 16);
  if (v10) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    unsigned int v12 = "ColorSync: Inavlid Codec\n";
    goto LABEL_7;
  }
  unsigned int v14 = (unsigned char *)v3;
  int v15 = (void *)v2;
  unsigned int v16 = v1;
  if (v10[8] <= v9[4]) {
    int v17 = v9[4];
  }
  else {
    int v17 = v10[8];
  }
  if (v8) {
    goto LABEL_15;
  }
  if (!v18) {
    goto LABEL_78;
  }
  if (v15[3] || ((*(uint64_t (**)(_DWORD *, void *))(*(void *)v10 + 40))(v10, v18) & 1) == 0)
  {
LABEL_15:
    if (v17 == 1)
    {
      bzero(v46, 0x9000uLL);
      uint64_t v19 = (void *)v15[1];
      if (v19)
      {
        uint64_t v20 = v15[2];
        if (v20)
        {
          uint64_t v21 = v15[3];
          uint64_t v47 = 0;
          v48[0] = 0;
          uint64_t v22 = v19[2];
          size_t v23 = 4 * v45 * v22 + 4;
          if (v23 >> 12 > 8) {
            size_t v23 = 36864;
          }
          bzero(v46, v23);
          if (v14 && v45 <= 0x3FF) {
            *unsigned int v14 = 0;
          }
          if (v45)
          {
            uint64_t v24 = 0;
            do
            {
              (*(void (**)(void *, unsigned char *, unsigned char *, void *, uint64_t *))(*v19 + 16))(v19, v46, v14, v48, &v47);
              if (v8 != v16)
              {
                uint64_t v25 = v8;
                do
                {
                  if (((*(uint64_t (**)(void *))(*v25 + 80))(v25) & 1) == 0) {
                    (*(void (**)(void *, unsigned char *, unsigned char *, uint64_t, uint64_t))(*v25 + 96))(v25, v46, v14, v22, v47);
                  }
                  uint64_t v25 = (void *)v25[2];
                }
                while (v25 != v16);
              }
              if (v21)
              {
                uint64_t v26 = v48[0];
                (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v48[0] - v24);
                uint64_t v24 = v26;
              }
              (*(void (**)(uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)v20 + 16))(v20, v46, v14, v47);
            }
            while (v48[0] < v45);
          }
          return 0;
        }
      }
LABEL_78:
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = -171;
    }
    if ((v17 - 3) <= 1)
    {
      bzero(v46, 0x3000uLL);
      uint64_t v27 = (void *)v15[1];
      if (v27)
      {
        uint64_t v28 = v15[2];
        if (v28)
        {
          uint64_t v29 = v15[3];
          uint64_t v47 = 0;
          v48[0] = 0;
          uint64_t v30 = v27[2];
          size_t v31 = 4 * v45 * v30 + 4;
          if (v31 >> 12 > 2) {
            size_t v31 = 12288;
          }
          bzero(v46, v31);
          if (v14 && v45 <= 0x3FF) {
            *unsigned int v14 = 0;
          }
          if (v45)
          {
            uint64_t v32 = 0;
            do
            {
              (*(void (**)(void *, unsigned char *, unsigned char *, void *, uint64_t *))(*v27 + 24))(v27, v46, v14, v48, &v47);
              if (v8 != v16)
              {
                uint64_t v33 = v8;
                do
                {
                  if (((*(uint64_t (**)(void *))(*v33 + 80))(v33) & 1) == 0) {
                    (*(void (**)(void *, unsigned char *, unsigned char *, uint64_t, uint64_t))(*v33 + 104))(v33, v46, v14, v30, v47);
                  }
                  uint64_t v33 = (void *)v33[2];
                }
                while (v33 != v16);
              }
              if (v29)
              {
                uint64_t v34 = v48[0];
                (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 16))(v29, v48[0] - v32);
                uint64_t v32 = v34;
              }
              (*(void (**)(uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)v28 + 24))(v28, v46, v14, v47);
            }
            while (v48[0] < v45);
          }
          return 0;
        }
      }
      goto LABEL_78;
    }
    if (v17 == 5)
    {
      bzero(v46, 0x3000uLL);
      uint64_t v35 = (void *)v15[1];
      if (v35)
      {
        uint64_t v36 = v15[2];
        if (v36)
        {
          uint64_t v37 = v15[3];
          uint64_t v47 = 0;
          v48[0] = 0;
          uint64_t v38 = v35[2];
          size_t v39 = 4 * v45 * v38 + 4;
          if (v39 >> 12 > 2) {
            size_t v39 = 12288;
          }
          bzero(v46, v39);
          if (v14 && v45 <= 0x3FF) {
            *unsigned int v14 = 0;
          }
          if (v45)
          {
            uint64_t v40 = 0;
            do
            {
              (*(void (**)(void *, unsigned char *, unsigned char *, void *, uint64_t *))(*v35 + 32))(v35, v46, v14, v48, &v47);
              if (v8 != v16)
              {
                uint64_t v41 = v8;
                do
                {
                  if (((*(uint64_t (**)(void *))(*v41 + 224))(v41) & 1) == 0
                    && ((*(uint64_t (**)(void *))(*v41 + 80))(v41) & 1) == 0)
                  {
                    if ((*(unsigned int (**)(void *))(*v41 + 40))(v41)) {
                      (*(void (**)(void *, unsigned char *, uint64_t, uint64_t))(*v41 + 136))(v41, v46, v38, v47);
                    }
                    (*(void (**)(void *, unsigned char *, unsigned char *, uint64_t, uint64_t))(*v41 + 112))(v41, v46, v14, v38, v47);
                    if ((*(unsigned int (**)(void *))(*v41 + 64))(v41)) {
                      (*(void (**)(void *, unsigned char *, uint64_t, uint64_t))(*v41 + 160))(v41, v46, v38, v47);
                    }
                  }
                  uint64_t v41 = (void *)v41[2];
                }
                while (v41 != v16);
              }
              if (v37)
              {
                uint64_t v42 = v40;
                uint64_t v40 = v48[0];
                (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(v37, v48[0] - v42);
              }
              (*(void (**)(uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)v36 + 32))(v36, v46, v14, v47);
            }
            while (v48[0] < v45);
          }
          return 0;
        }
      }
      goto LABEL_78;
    }
    unsigned int v12 = "ColorSync: DoConvert failed (cmUnsupportedDataType)\n";
LABEL_7:
    ColorSyncLog(2, (uint64_t)v12, v2, v3, v4, v5, v6, v7, v44);
    return 4294967115;
  }
  return 0;
}

void ConversionManager::AddLinearMatrixConv(CMMMemMgr **this, CMMXYZTag *(*a2)[3])
{
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  uint64_t v4 = &unk_1ED9855F0;
  CMMMatrix::InitializeMatrix((uint64_t)&v4, (uint64_t)v5, a2, 1.0);
  CMMMatrix::MakeMatrixConv((CMMMatrix *)&v4, this[1], this[3]);
  this[3] = v3;
}

void ConversionManager::AddMatrixConvPCSToPCS(ConversionManager *this, CMMXYZTag *(*a2)[3], CMMRGBCurves *a3, int a4, const __CFDictionary *a5)
{
  ConversionManager::AddInvMatrixConv((uint64_t)this, a2, a3, a4, 2, 0, a5);

  ConversionManager::AddMatrixConv((uint64_t)this, (const __CFDictionary *)a2, (uint64_t)a3, a4, 1, 0, a5);
}

double ConversionManager::GetProfileSrcBlackPointLightness()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  unint64_t v22 = 0;
  uint64_t v5 = *(void *)(v1 + 8);
  int v7 = *(_DWORD *)(v5 + 44);
  int v6 = *(_DWORD *)(v5 + 48);
  BOOL v9 = v7 == 1886549106 && v6 == 1129142603;
  uint64_t v10 = (void *)ConversionManager::CreateBlackPointEstimationTransform(v0, v9, v1, 0, *(_DWORD *)(v1 + 20), &v22);
  bzero(v21, 0x3000uLL);
  if (v9)
  {
    unsigned int v13 = 0;
    *(int32x2_t *)&long long v14 = vdup_n_s32(0x808080u);
    *(void *)((char *)v21 + 4) = v14;
  }
  else if (*(_DWORD *)(*(void *)(v4 + 8) + 48) == 1129142603)
  {
    *(void *)&long long v14 = 0x100000001000000;
    *((void *)&v14 + 1) = 0x100000001000000;
    v21[0] = v14;
    unsigned int v13 = 0x1000000;
  }
  else
  {
    unsigned int v13 = 0;
    *(void *)&long long v14 = 0;
    memset(v21, 0, 64);
  }
  memset(v20, 0, 14);
  if (v10)
  {
    unint64_t v15 = v22;
    unsigned int v16 = v10;
    do
    {
      (*(void (**)(void *, _OWORD *, _WORD *, unint64_t, uint64_t))(*v16 + 104))(v16, v21, v20, v15, 1);
      unsigned int v16 = (void *)v16[2];
    }
    while (v16);
    do
    {
      int v17 = (void *)v10[2];
      (*(void (**)(void *))(*v10 + 8))(v10);
      uint64_t v10 = v17;
    }
    while (v17);
    unsigned int v13 = v21[0];
  }
  if (v13 >= 0x800000) {
    int v18 = 0x800000;
  }
  else {
    int v18 = v13;
  }
  if (v3)
  {
    *(_DWORD *)uint64_t v3 = v18;
    v11.i32[0] = 1129142603;
    v12.i32[0] = *(_DWORD *)(*(void *)(v4 + 8) + 48);
    *(int8x8_t *)&long long v14 = vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(v12, v11), 0), (int8x8_t)0x80000000800000, *(int8x8_t *)((char *)v21 + 4));
    *(void *)(v3 + 4) = v14;
  }
  return *(double *)&v14;
}

uint64_t CMMProfile::GetWhitePoint(CMMProfile *this)
{
  double WhitePoint = ColorSyncProfileGetWhitePoint(this);
  if (WhitePoint >= 0.0) {
    double v4 = WhitePoint * 65536.0 + 0.5;
  }
  else {
    double v4 = WhitePoint * 65536.0 + -0.5;
  }
  uint64_t v5 = (int)v4;
  double v6 = v2 * 65536.0 + 0.5;
  if (v2 < 0.0) {
    double v6 = v2 * 65536.0 + -0.5;
  }
  uint64_t v7 = (int)v6;
  double v8 = v3 * 65536.0 + 0.5;
  if (v3 < 0.0) {
    double v8 = v3 * 65536.0 + -0.5;
  }
  if ((int)v8) {
    unsigned int v9 = 0;
  }
  else {
    unsigned int v9 = -170;
  }
  if (v7) {
    BOOL v10 = v5 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    uint64_t v11 = 4294967126;
  }
  else {
    uint64_t v11 = v9;
  }
  CMMThrowExceptionOnError(v11);
  return v5 | (v7 << 32);
}

void ConversionManager::AddLabToXYZ(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v34 = 1065353216;
  uint64_t v24 = &unk_1ED9855F0;
  long long v25 = xmmword_18BE63780;
  long long v26 = xmmword_18BE63790;
  int v27 = -48464;
  uint64_t v31 = 4292476157;
  LODWORD(v32) = 6227719;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v47 = 0;
  memset(&v48[8], 0, 32);
  long long v43 = 0u;
  long long v44 = 0u;
  uint64_t v42 = 0x3FF0000000000000;
  *(void *)&long long v45 = 0x3FF0000000000000;
  *(void *)&long long v46 = 0xBFE0000000000000;
  *(_OWORD *)uint64_t v48 = xmmword_18BE637A0;
  uint64_t v49 = 0x3FF0000000000000;
  long long v40 = 0u;
  long long v41 = 0u;
  float64x2_t v38 = 0u;
  long long v39 = 0u;
  memset(v37, 0, sizeof(v37));
  float64x2_t v35 = 0u;
  long long v36 = 0u;
  MatrixMatrix4x4<double>(v35.f64, dbl_18BEB4C58, (double *)&v42);
  *(void *)&v2.f64[0] = v36;
  *(void *)&v2.f64[1] = v37[0];
  float32x4_t v28 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v35), v2);
  float32x4_t v29 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v37[1]), v38);
  *(float *)v2.f64 = *(double *)&v39;
  float v3 = *((double *)&v36 + 1);
  int v30 = LODWORD(v2.f64[0]);
  *(float *)v2.f64 = *(double *)&v37[3];
  *(float *)&unsigned int v4 = *((double *)&v39 + 1);
  *((float *)&v32 + 1) = v3;
  unint64_t v33 = __PAIR64__(v4, LODWORD(v2.f64[0]));
  CMMMatrix::MakeMatrixConv((CMMMatrix *)&v24, *(CMMMemMgr **)(a1 + 8), *(CMMConvNode **)(a1 + 24));
  int v5 = 0;
  *(void *)(a1 + 24) = v6;
  do
  {
    pthread_mutex_lock(&ConversionManager::CreateLabToXYZLut(icXYZNumber const&,unsigned int)::cmmLock);
    if (!labDecodeTableChan0)
    {
      *(void *)&long long v20 = 0;
      CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v20);
      labDecodeDataChan0Ptr = (uint64_t)CMMBase::NewInternal(0x5408uLL, (void **)&v20);
      labDecodeDataChan1Ptr = (uint64_t)CMMBase::NewInternal(0x5408uLL, (void **)&v20);
      labDecodeDataChan2Ptr = (uint64_t)CMMBase::NewInternal(0x5408uLL, (void **)&v20);
      ConversionManager::InitLabToXYZLut((int *)labDecodeDataChan0Ptr, 0);
      ConversionManager::InitLabToXYZLut((int *)labDecodeDataChan1Ptr, 1);
      ConversionManager::InitLabToXYZLut((int *)labDecodeDataChan2Ptr, 2);
      uint64_t v7 = labDecodeDataChan1Ptr;
      int v8 = *(_DWORD *)(labDecodeDataChan1Ptr + 8160);
      *(_DWORD *)(labDecodeDataChan1Ptr + 8164) = v8;
      *(_DWORD *)(v7 + 8156) = v8;
      uint64_t v9 = labDecodeDataChan2Ptr;
      int v10 = *(_DWORD *)(labDecodeDataChan2Ptr + 8160);
      *(_DWORD *)(labDecodeDataChan2Ptr + 8164) = v10;
      *(_DWORD *)(v9 + 8156) = v10;
      uint64_t v11 = CMMBase::NewInternal(0x28uLL, (void **)&v20);
      uint64_t v12 = labDecodeDataChan0Ptr;
      v11[2] = 0;
      v11[3] = v12;
      void *v11 = &unk_1ED985520;
      v11[1] = 0;
      v11[4] = 21512;
      labDecodeTableChan0 = (uint64_t)v11;
      unsigned int v13 = CMMBase::NewInternal(0x28uLL, (void **)&v20);
      uint64_t v14 = labDecodeDataChan1Ptr;
      v13[2] = 0;
      v13[3] = v14;
      *unsigned int v13 = &unk_1ED985520;
      v13[1] = 0;
      void v13[4] = 21512;
      labDecodeTableChan1 = (uint64_t)v13;
      unint64_t v15 = CMMBase::NewInternal(0x28uLL, (void **)&v20);
      uint64_t v16 = labDecodeDataChan2Ptr;
      v15[2] = 0;
      long long v15[3] = v16;
      *unint64_t v15 = &unk_1ED985520;
      v15[1] = 0;
      v15[4] = 21512;
      labDecodeTableChan2 = (uint64_t)v15;
      CMMMemMgr::ReleaseMemList((void **)&v20);
    }
    pthread_mutex_unlock(&ConversionManager::CreateLabToXYZLut(icXYZNumber const&,unsigned int)::cmmLock);
    if (v5 == 1)
    {
      uint64_t v17 = labDecodeTableChan1;
    }
    else if (v5)
    {
      if (v5 == 2) {
        uint64_t v17 = labDecodeTableChan2;
      }
      else {
        uint64_t v17 = 0;
      }
    }
    else
    {
      uint64_t v17 = labDecodeTableChan0;
    }
    *((void *)&v20 + 1) = 0x400000000;
    uint64_t v21 = 0;
    *(void *)&long long v20 = 1;
    long long v22 = xmmword_18BE637B0;
    long long v23 = xmmword_18BE637C0;
    int v18 = (CMMConvNode *)CMMBase::NewInternal(0xA8uLL, *(void ***)(a1 + 8));
    CMMConvTRC::CMMConvTRC((uint64_t)v18, v5, v17, 21512, &v20, *(void *)(a1 + 24), 3, 1, 2.0, 0, 0);
    *(void *)(a1 + 24) = v18;
    ++v5;
  }
  while (v5 != 3);
  long long v25 = xmmword_18BE637D0;
  long long v26 = xmmword_18BE637D0;
  int v27 = 0x10000;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  float32x4_t v28 = (float32x4_t)xmmword_18BE637E0;
  float32x4_t v29 = (float32x4_t)xmmword_18BE637F0;
  int v30 = 1062415525;
  unint64_t v33 = 0;
  CMMMatrix::MakeMatrixConv((CMMMatrix *)&v24, *(CMMMemMgr **)(a1 + 8), v18);
  *(void *)(a1 + 24) = v19;
  *(_DWORD *)(a1 + 36) = 1482250784;
}

void sub_18BE56B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ConversionManager::AddXYZToXYZ(uint64_t a1, int *a2, int *a3)
{
  int v3 = *a2;
  int v4 = a2[1];
  int v6 = *a3;
  int v5 = a3[1];
  if (*a2 - *a3 >= 0) {
    unsigned int v7 = *a2 - *a3;
  }
  else {
    unsigned int v7 = *a3 - *a2;
  }
  if (v4 - v5 >= 0) {
    unsigned int v8 = v4 - v5;
  }
  else {
    unsigned int v8 = v5 - v4;
  }
  int v9 = a2[2];
  int v10 = a3[2];
  unsigned int v11 = v9 - v10;
  if (v9 - v10 < 0) {
    unsigned int v11 = v10 - v9;
  }
  if (v7 > 1 || v8 > 1 || v11 >= 2)
  {
    if (v3) {
      BOOL v15 = v4 == 0;
    }
    else {
      BOOL v15 = 1;
    }
    int v17 = v15 || v9 == 0;
    double v18 = (double)v3;
    double v19 = (double)v4;
    double v20 = (double)v9;
    if (v6) {
      BOOL v21 = v5 == 0;
    }
    else {
      BOOL v21 = 1;
    }
    int v23 = v21 || v10 == 0;
    double v24 = (double)v6;
    double v25 = (double)v5;
    double v26 = (double)v10;
    uint64_t v37 = &unk_1ED9855F0;
    uint64_t v45 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v46 = 1065353216;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    uint64_t v42 = 0;
    if (v17)
    {
      double v18 = 63190.0;
      double v19 = 65536.0;
      double v20 = 54061.0;
    }
    if (v23) {
      double v24 = 63190.0;
    }
    double v27 = v24 / v18;
    double v28 = v27 * 65536.0 + 0.5;
    if (v23)
    {
      double v25 = 65536.0;
      double v26 = 54061.0;
    }
    if (v27 < 0.0) {
      double v28 = v27 * 65536.0 + -0.5;
    }
    double v29 = v25 / v19;
    double v30 = v29 * 65536.0 + 0.5;
    if (v29 < 0.0) {
      double v30 = v29 * 65536.0 + -0.5;
    }
    LODWORD(v3CMMBase::operator delete(this - 8) = (int)v28;
    LODWORD(v39) = (int)v30;
    double v31 = v26 / v20;
    double v32 = v31 * 65536.0 + 0.5;
    if (v31 < 0.0) {
      double v32 = v31 * 65536.0 + -0.5;
    }
    LODWORD(v40) = (int)v32;
    float v33 = v27;
    *((float *)&v40 + 1) = v33;
    float v34 = v29;
    *((float *)&v41 + 1) = v34;
    float v35 = v31;
    *((float *)&v42 + 1) = v35;
    CMMMatrix::MakeMatrixConv((CMMMatrix *)&v37, *(CMMMemMgr **)(a1 + 8), *(CMMConvNode **)(a1 + 24));
    *(void *)(a1 + 24) = v36;
  }
}

void ConversionManager::AddXYZToLab(uint64_t a1)
{
  for (int i = 0; i != 3; ++i)
  {
    pthread_mutex_lock(&ConversionManager::CreateXYZToLabLut(icXYZNumber const&,unsigned int)::cmmLock);
    if (!labEncodeTableChan0)
    {
      uint64_t v15 = 0;
      CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v15);
      labEncodeDataChan0Ptr = (uint64_t)CMMBase::NewInternal(0x5408uLL, (void **)&v15);
      labEncodeDataChan1Ptr = (uint64_t)CMMBase::NewInternal(0x5408uLL, (void **)&v15);
      labEncodeDataChan2Ptr = (uint64_t)CMMBase::NewInternal(0x5408uLL, (void **)&v15);
      ConversionManager::InitXYZToLabLut((int *)labEncodeDataChan0Ptr, 0);
      ConversionManager::InitXYZToLabLut((int *)labEncodeDataChan1Ptr, 1);
      ConversionManager::InitXYZToLabLut((int *)labEncodeDataChan2Ptr, 2);
      int v3 = CMMBase::NewInternal(0x28uLL, (void **)&v15);
      uint64_t v4 = labEncodeDataChan0Ptr;
      v3[2] = 0;
      v3[3] = v4;
      void *v3 = &unk_1ED985520;
      v3[1] = 0;
      v3[4] = 21512;
      labEncodeTableChan0 = (uint64_t)v3;
      int v5 = CMMBase::NewInternal(0x28uLL, (void **)&v15);
      uint64_t v6 = labEncodeDataChan1Ptr;
      v5[2] = 0;
      v5[3] = v6;
      void *v5 = &unk_1ED985520;
      v5[1] = 0;
      v5[4] = 21512;
      labEncodeTableChan1 = (uint64_t)v5;
      unsigned int v7 = CMMBase::NewInternal(0x28uLL, (void **)&v15);
      uint64_t v8 = labEncodeDataChan2Ptr;
      v7[2] = 0;
      v7[3] = v8;
      void *v7 = &unk_1ED985520;
      v7[1] = 0;
      v7[4] = 21512;
      labEncodeTableChan2 = (uint64_t)v7;
      CMMMemMgr::ReleaseMemList((void **)&v15);
    }
    pthread_mutex_unlock(&ConversionManager::CreateXYZToLabLut(icXYZNumber const&,unsigned int)::cmmLock);
    if (i == 1)
    {
      uint64_t v9 = labEncodeTableChan1;
    }
    else if (i)
    {
      if (i == 2) {
        uint64_t v9 = labEncodeTableChan2;
      }
      else {
        uint64_t v9 = 0;
      }
    }
    else
    {
      uint64_t v9 = labEncodeTableChan0;
    }
    *(void *)uint64_t v16 = 0;
    *(void *)&v16[8] = 0;
    if (i == 1) {
      float v10 = 1.0;
    }
    else {
      float v10 = 0.8249;
    }
    if (!i) {
      float v10 = 0.9642;
    }
    uint64_t v15 = 1;
    *(_DWORD *)&v16[4] = 4;
    *(_DWORD *)&v16[16] = 1051372203;
    double v11 = v10;
    *(float *)&long long v17 = 1.0 / v10;
    DWORD1(v17) = 0;
    *(float *)&unsigned int v12 = 7.787 / v10;
    *(float *)&double v11 = v11 * 0.008856;
    *((void *)&v17 + 1) = __PAIR64__(LODWORD(v11), v12);
    *(void *)&long long v18 = 0x3E0D3DCB00000000;
    DWORD2(v1CMMBase::operator delete(this - 8) = 0;
    unsigned int v13 = (CMMConvNode *)CMMBase::NewInternal(0xA8uLL, *(void ***)(a1 + 8));
    *(void *)(a1 + 24) = CMMConvTRC::CMMConvTRC((uint64_t)v13, i, v9, 21512, (long long *)&v15, *(void *)(a1 + 24), 3, 1, 2.0, 0, 0);
  }
  int v24 = 0;
  uint64_t v15 = (uint64_t)&unk_1ED9855F0;
  *(_DWORD *)uint64_t v16 = 0;
  *(_OWORD *)&v16[4] = xmmword_18BE63800;
  long long v17 = xmmword_18BE63810;
  uint64_t v21 = 0x80808000000000;
  int v22 = 8421504;
  long long v18 = xmmword_18BE63820;
  long long v19 = xmmword_18BE63830;
  int v20 = -1085749047;
  long long v23 = xmmword_18BE63840;
  CMMMatrix::MakeMatrixConv((CMMMatrix *)&v15, *(CMMMemMgr **)(a1 + 8), v13);
  *(void *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 36) = 1347182946;
}

void sub_18BE57060(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMMemMgr::ReleaseMemList((void **)va);
  _Unwind_Resume(a1);
}

int *ConversionManager::InitXYZToLabLut(int *a1, int a2)
{
  uint64_t v2 = 8;
  if (a2 == 1) {
    uint64_t v2 = 4;
  }
  if (!a2) {
    uint64_t v2 = 0;
  }
  int v3 = *(_DWORD *)((char *)&qword_18BE73034 + v2);
  if ((v3 - 1) >= 0x1FFFD)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  uint64_t v5 = 0;
  double v6 = 0.000244140625 / ((double)v3 * 0.0000152587891 * 0.5);
  do
  {
    double v7 = v6 * (double)(int)v5;
    if (v7 <= 0.00885645168) {
      double v8 = v7 * 903.296296;
    }
    else {
      double v8 = pow(v7, 0.333333333) * 116.0 + -16.0;
    }
    a1[v5++] = vcvtmd_s64_f64(v8 * 16777216.0 * 0.01 + 0.5);
  }
  while (v5 != 4097);

  return MakeLookups(a1);
}

int *ConversionManager::InitLabToXYZLut(int *a1, int a2)
{
  uint64_t v2 = 8;
  if (a2 == 1) {
    uint64_t v2 = 4;
  }
  if (!a2) {
    uint64_t v2 = 0;
  }
  int v3 = *(_DWORD *)((char *)&qword_18BE73034 + v2);
  if ((v3 - 1) > 0x1FFFC)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  uint64_t v5 = 0;
  double v6 = (double)v3;
  do
  {
    double v7 = (double)(int)v5 * 100.0 * 2.00784314 * 0.000244140625;
    if (v7 <= 8.0) {
      double v8 = v7 * 0.00110705646;
    }
    else {
      double v8 = pow((v7 + 16.0) / 116.0, 3.0);
    }
    double v9 = v8 * v6 * 128.0;
    if (v9 <= 16777216.0) {
      double v10 = v9 + 0.5;
    }
    else {
      double v10 = 16777216.5;
    }
    a1[v5++] = vcvtmd_s64_f64(v10);
  }
  while (v5 != 4097);

  return MakeLookups(a1);
}

uint64_t ConversionManager::CreateBlackPointEstimationTransform(uint64_t a1, int a2, uint64_t a3, int a4, int a5, unint64_t *a6)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  ColorSyncProfileRef v12 = ColorSyncProfileCreateWithName(kColorSyncGenericLabProfile);
  if (!v12)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  ColorSyncProfileRef v13 = v12;
  if (a2)
  {
    CFStringRef v36 = kColorSyncProfile;
    CFStringRef v37 = kColorSyncRenderingIntent;
    *(void *)&long long v38 = kColorSyncTransformTag;
    *((void *)&v38 + 1) = kColorSyncBlackPointCompensation;
    *(void *)&long long v39 = 0;
    values = v12;
    unsigned int v14 = a4 - 1;
    if ((a4 - 1) > 2) {
      uint64_t v15 = &kColorSyncRenderingIntentPerceptual;
    }
    else {
      uint64_t v15 = (CFStringRef *)off_1E54D6C58[v14];
    }
    CFStringRef v56 = *v15;
    CFStringRef v57 = kColorSyncTransformDeviceToPCS;
    long long v18 = (void *)*MEMORY[0x1E4F1CFC8];
    uint64_t v58 = *MEMORY[0x1E4F1CFC8];
    uint64_t v59 = 0;
    long long v19 = *(void **)(*(void *)(a3 + 8) + 16);
    uint64_t v50 = v19;
    int v20 = &kColorSyncRenderingIntentPerceptual;
    uint64_t v21 = &kColorSyncRenderingIntentPerceptual;
    if (v14 <= 2) {
      uint64_t v21 = (CFStringRef *)off_1E54D6C58[v14];
    }
    CFStringRef v51 = *v21;
    CFStringRef v52 = kColorSyncTransformPCSToDevice;
    uint64_t v53 = v18;
    uint64_t v54 = 0;
    uint64_t v45 = v19;
    if ((a5 - 1) < 3) {
      int v20 = (CFStringRef *)off_1E54D6C58[a5 - 1];
    }
    uint64_t v46 = (void *)*v20;
    CFStringRef v47 = kColorSyncTransformDeviceToPCS;
    uint64_t v48 = v18;
    uint64_t v49 = 0;
    v44[0] = v12;
    v44[1] = (void *)*v20;
    v44[2] = (void *)kColorSyncTransformPCSToDevice;
    v44[3] = v18;
    _OWORD v44[4] = 0;
    CFDictionaryRef v22 = CFDictionaryCreate(0, (const void **)&v36, (const void **)&values, 4, 0, 0);
    CFDictionaryRef v23 = CFDictionaryCreate(0, (const void **)&v36, (const void **)&v50, 4, 0, 0);
    CFDictionaryRef v24 = CFDictionaryCreate(0, (const void **)&v36, (const void **)&v45, 4, 0, 0);
    CFDictionaryRef v25 = CFDictionaryCreate(0, (const void **)&v36, (const void **)v44, 4, 0, 0);
    v43[0] = v22;
    v43[1] = v23;
    v43[2] = v24;
    v43[3] = v25;
    _OWORD v43[4] = 0;
    CFArrayRef v26 = CFArrayCreate(0, (const void **)v43, 4, MEMORY[0x1E4F1D510]);
    if (v22) {
      CFRelease(v22);
    }
    if (v23) {
      CFRelease(v23);
    }
    if (v24) {
      CFRelease(v24);
    }
    if (v25) {
      CFRelease(v25);
    }
  }
  else
  {
    CFStringRef v36 = kColorSyncProfile;
    CFStringRef v37 = kColorSyncRenderingIntent;
    *(void *)&long long v38 = kColorSyncTransformTag;
    *((void *)&v38 + 1) = kColorSyncBlackPointCompensation;
    *(void *)&long long v39 = 0;
    values = *(void **)(*(void *)(a3 + 8) + 16);
    unsigned int v16 = a5 - 1;
    if ((a5 - 1) > 2) {
      long long v17 = &kColorSyncRenderingIntentPerceptual;
    }
    else {
      long long v17 = (CFStringRef *)off_1E54D6C58[v16];
    }
    CFStringRef v56 = *v17;
    CFStringRef v57 = kColorSyncTransformDeviceToPCS;
    double v27 = (void *)*MEMORY[0x1E4F1CFC8];
    uint64_t v58 = *MEMORY[0x1E4F1CFC8];
    uint64_t v59 = 0;
    uint64_t v50 = v12;
    if (v16 > 2) {
      double v28 = &kColorSyncRenderingIntentPerceptual;
    }
    else {
      double v28 = (CFStringRef *)off_1E54D6C58[v16];
    }
    CFStringRef v51 = *v28;
    CFStringRef v52 = kColorSyncTransformPCSToDevice;
    uint64_t v53 = v27;
    uint64_t v54 = 0;
    CFDictionaryRef v29 = CFDictionaryCreate(0, (const void **)&v36, (const void **)&values, 4, 0, 0);
    CFDictionaryRef v30 = CFDictionaryCreate(0, (const void **)&v36, (const void **)&v50, 4, 0, 0);
    uint64_t v45 = v29;
    uint64_t v46 = v30;
    CFStringRef v47 = 0;
    CFArrayRef v26 = CFArrayCreate(0, (const void **)&v45, 2, MEMORY[0x1E4F1D510]);
    if (v29) {
      CFRelease(v29);
    }
    if (v30) {
      CFRelease(v30);
    }
  }
  double v31 = (CMMProfileInfoContainer *)CMMBase::NewInternal(0x38uLL, *(void ***)(a1 + 8));
  CMMProfileInfoContainer::CMMProfileInfoContainer(v31, v26, 0, *(CMMMemMgr **)(a1 + 8));
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v38 = 0u;
  CFStringRef v32 = *(const __CFString **)(a1 + 8);
  CFStringRef v36 = (CFStringRef)&unk_1ED983258;
  CFStringRef v37 = v32;
  uint64_t ConversionSequence = ConversionManager::MakeConversionSequence(&v36, v31, 0, 0);
  *a6 = CMMProfileInfoContainer::GetMaxNofChannels(v31);
  (*(void (**)(CMMProfileInfoContainer *))(*(void *)v31 + 8))(v31);
  CFRelease(v13);
  if (v26) {
    CFRelease(v26);
  }
  ConversionManager::~ConversionManager((ConversionManager *)&v36);
  return ConversionSequence;
}

void sub_18BE577C4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ConversionManager::~ConversionManager((ConversionManager *)&a9);
  if (a2 == 1)
  {
    int v13 = *(_DWORD *)__cxa_begin_catch(a1);
    CFRelease(v9);
    if (v10) {
      CFRelease(v10);
    }
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v13;
  }
  _Unwind_Resume(a1);
}

void *ConversionManager::AddEXRToneMapping(ConversionManager *this, CFDictionaryRef theDict, int a3)
{
  uint64_t result = CFDictionaryGetValue(theDict, @"com.apple.cmm.ApplyToneMaping");
  if (!result) {
    return result;
  }
  CFDictionaryRef v6 = (const __CFDictionary *)result;
  CFTypeID v7 = CFGetTypeID(result);
  uint64_t result = (void *)CFDictionaryGetTypeID();
  if ((void *)v7 != result) {
    return result;
  }
  uint64_t result = CFDictionaryGetValue(v6, @"com.apple.cmm.ApplyEXRToneMappingGamma");
  if (!result) {
    return result;
  }
  double v8 = result;
  CFTypeID v9 = CFGetTypeID(result);
  uint64_t result = (void *)CFDictionaryGetTypeID();
  if ((void *)v9 != result) {
    return result;
  }
  CFTypeID v10 = CFGetTypeID(v8);
  if (v10 != CFDictionaryGetTypeID()) {
    double v8 = 0;
  }
  float v11 = 0.0;
  float float_for_key = get_float_for_key((const __CFDictionary *)v8, @"com.apple.cmm.ToneMappingGammaDefog", 0.0);
  float v13 = 0.01;
  if (float_for_key <= 0.01) {
    float v13 = float_for_key;
  }
  if (float_for_key >= 0.0) {
    float v14 = v13;
  }
  else {
    float v14 = 0.0;
  }
  float v56 = v14;
  float v15 = get_float_for_key((const __CFDictionary *)v8, @"com.apple.cmm.ToneMappingGammaExposure", 0.0);
  float v16 = 10.0;
  if (v15 <= 10.0) {
    float v16 = v15;
  }
  if (v15 >= -10.0) {
    float v17 = v16;
  }
  else {
    float v17 = -10.0;
  }
  float v57 = v17;
  float v18 = get_float_for_key((const __CFDictionary *)v8, @"com.apple.cmm.ToneMappingGammaKneeLow", 0.0);
  float v19 = 3.0;
  if (v18 <= 3.0) {
    float v19 = v18;
  }
  if (v18 >= -2.85) {
    float v20 = v19;
  }
  else {
    float v20 = -2.85;
  }
  float v21 = get_float_for_key((const __CFDictionary *)v8, @"com.apple.cmm.ToneMappingGammaKneeHigh", 5.0);
  float v22 = 7.5;
  if (v21 <= 7.5) {
    float v22 = v21;
  }
  if (v21 >= 3.5) {
    float v23 = v22;
  }
  else {
    float v23 = 3.5;
  }
  *((void *)&v63 + 1) = 0;
  uint64_t v62 = &unk_1ED983710;
  float v24 = exp2f(v20);
  float v25 = exp2f(v23) - v24;
  float v26 = 11.314 - v24;
  float v27 = 1.0;
  if (logf(v25 + 1.0) > (float)(11.314 - v24))
  {
    do
    {
      float v11 = v27;
      float v27 = v27 + v27;
    }
    while ((float)(logf((float)(v25 * v27) + 1.0) / v27) > v26);
  }
  int v28 = 30;
  do
  {
    if ((float)(logf((float)(v25 * (float)((float)(v11 + v27) * 0.5)) + 1.0) / (float)((float)(v11 + v27) * 0.5)) >= v26) {
      float v11 = (float)(v11 + v27) * 0.5;
    }
    else {
      float v27 = (float)(v11 + v27) * 0.5;
    }
    --v28;
  }
  while (v28);
  float v29 = v57 + 2.47393;
  *(void *)&long long v63 = 0x1000000001;
  HIDWORD(v63) = 9;
  *(void *)&long long v64 = 0;
  *((void *)&v64 + 1) = __PAIR64__(COERCE_UNSIGNED_INT(exp2f(v29)), LODWORD(v56));
  *(float *)&long long v65 = v24;
  *((float *)&v65 + 1) = (float)(v27 + v11) * 0.5;
  *((void *)&v65 + 1) = 0x3DB504F33F800000;
  uint64_t v66 = 0;
  uint64_t v61 = 0;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v58 = 0u;
  LODWORD(v5CMMBase::operator delete(this - 8) = 1;
  CFDictionaryRef v30 = (void **)*((void *)this + 1);
  double v31 = CMMBase::NewInternal(0x28uLL, v30);
  *double v31 = &unk_1ED985520;
  v31[1] = 1;
  v31[3] = 0;
  v31[4] = 21512;
  CFStringRef v32 = CMMBase::NewInternal(0x5408uLL, v30);
  v31[2] = v32;
  float v33 = (int *)CMMTable::FloatData((uint64_t)v32, v31[3]);
  uint64_t v34 = 0;
  double v35 = *((float *)&v64 + 2);
  double v36 = *((float *)&v64 + 3);
  double v37 = *(float *)&v65;
  double v38 = *((float *)&v65 + 1);
  long double v39 = *((float *)&v65 + 2);
  double v40 = *((float *)&v65 + 3);
  long long v41 = v33;
  do
  {
    double v42 = (double)v34 * 0.0000000596046448 - v35;
    if (v42 < 0.0) {
      double v42 = 0.0;
    }
    long double v43 = v42 * v36;
    if (v43 > v37) {
      long double v43 = log((v43 - v37) * v38 + 1.0) / v38 + v37;
    }
    double v44 = pow(v43, v39) * v40;
    double v45 = 0.0;
    if (fabs(v44) == INFINITY || v44 >= 0.0 && (double v45 = v44, v44 > 1.0)) {
      double v45 = 1.0;
    }
    int v46 = vcvtmd_s64_f64(v45 * 16777216.0 + 0.5);
    int *v41 = v46;
    int v47 = 0x1000000;
    if (v46 <= 0x1000000)
    {
      if ((v46 & 0x80000000) == 0) {
        goto LABEL_47;
      }
      int v47 = 0;
    }
    int *v41 = v47;
LABEL_47:
    v34 += 4096;
    ++v41;
  }
  while (v34 != 16781312);
  int v48 = v33[4096];
  int v49 = v33[1] - *v33;
  if (v49 < 0) {
    int v49 = *v33 - v33[1];
  }
  if (v49 < 0x1000) {
    v33[1] = *v33;
  }
  int v50 = v48 - v33[4095];
  if (v50 < 0) {
    int v50 = v33[4095] - v48;
  }
  if (v50 <= 0xFFF) {
    v33[4095] = v48;
  }
  long long v58 = v63;
  long long v59 = v64;
  long long v60 = v65;
  uint64_t v61 = v66;
  CFStringRef v51 = (int *)CMMTable::FloatData(v31[2], v31[3]);
  MakeLookups(v51);
  int v52 = 0;
  do
  {
    uint64_t v53 = CMMBase::NewInternal(0xB0uLL, *((void ***)this + 1));
    uint64_t result = (void *)CMMConvTRC::CMMConvTRC((uint64_t)v53, v52, (uint64_t)v31, 0, &v58, *((void *)this + 3), a3, 1, 1.0, 1, 1);
    *uint64_t result = &unk_1ED9832F8;
    result[21] = 0;
    *(_WORD *)((char *)result + 35) = 256;
    *((void *)this + 3) = result;
    if (!*((void *)this + 2)) {
      *((void *)this + 2) = result;
    }
    ++v52;
  }
  while (a3 != v52);
  uint64_t v54 = v31[1];
  if (v54)
  {
    uint64_t v55 = v54 - 1;
    v31[1] = v55;
    if (!v55) {
      return (void *)(*(uint64_t (**)(void *))(*v31 + 8))(v31);
    }
  }
  return result;
}

float get_float_for_key(const __CFDictionary *a1, const __CFString *a2, float a3)
{
  float v3 = a3;
  float valuePtr = a3;
  if (a1)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
    if (Value)
    {
      CFNumberRef v5 = Value;
      CFTypeID v6 = CFGetTypeID(Value);
      if (v6 == CFNumberGetTypeID())
      {
        if (CFNumberGetValue(v5, kCFNumberFloatType, &valuePtr) != 1)
        {
          exception = __cxa_allocate_exception(4uLL);
          _DWORD *exception = -171;
        }
        return valuePtr;
      }
    }
  }
  return v3;
}

BOOL CMMLutTag::HasCLUT(CMMLutTag *this)
{
  if (!*((void *)this + 13)) {
    return 0;
  }
  if ((unint64_t)(*(uint64_t (**)(CMMLutTag *))(*(void *)this + 64))(this) > 2
    || (*(uint64_t (**)(CMMLutTag *))(*(void *)this + 64))(this) != 2
    || *((unsigned char *)this + 50) != 3
    || *((unsigned char *)this + 51) != 3)
  {
    return 1;
  }
  uint64_t v2 = *((void *)this + 13);
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  if (*((unsigned char *)this + 92) == 1)
  {
    CFNumberRef v5 = (unint64_t *)CMMTable::FloatData(v3, v4);
    unint64_t v6 = 16711935;
    unint64_t v7 = bswap64(*v5);
    if (v7 == 16711935
      && (v6 = 0xFFFFFF0000FFLL, unint64_t v7 = bswap64(v5[1]), v7 == 0xFFFFFF0000FFLL)
      && (unint64_t v7 = bswap64(v5[2]), v6 = 0xFFFFFF00FFFFFFLL, v7 == 0xFFFFFF00FFFFFFLL))
    {
      int v8 = 0;
    }
    else if (v7 < v6)
    {
      int v8 = -1;
    }
    else
    {
      int v8 = 1;
    }
  }
  else
  {
    CFTypeID v10 = (const void *)CMMTable::FloatData(v3, v4);
    int v8 = memcmp(v10, &k3x3LinearCLUT16bit, 0x30uLL);
  }
  return v8 != 0;
}

CFMutableDictionaryRef CMMConvScaleFloatXYZ::FlattenConversion(CMMConvScaleFloatXYZ *this, const __CFDictionary *a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return Mutable;
  }
  uint64_t v4 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)this + 48);
  int valuePtr = 0;
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
  CFNumberRef v7 = v6;
  if (v4) {
    BOOL v8 = v5 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8 && v6 != 0)
  {
    int v10 = 0;
    float v11 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    while (1)
    {
      CFMutableArrayRef v12 = CFArrayCreateMutable(0, 0, v11);
      if (!v12) {
        break;
      }
      float v13 = v12;
      for (int i = 0; i != 3; ++i)
      {
        if (v10 == i) {
          CFNumberRef v15 = v5;
        }
        else {
          CFNumberRef v15 = v7;
        }
        CFArrayAppendValue(v13, v15);
      }
      CFArrayAppendValue(v13, v7);
      CFArrayAppendValue(v4, v13);
      CFRelease(v13);
      if (++v10 == 3) {
        goto LABEL_17;
      }
    }
    CFRelease(v4);
LABEL_21:
    CFRelease(Mutable);
    CFMutableDictionaryRef Mutable = 0;
    if (!v5) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
LABEL_17:
  if (!v4) {
    goto LABEL_21;
  }
  CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v4);
  CFRelease(v4);
  CMMConvNode::AddFixedPointClippingRange(Mutable, v16, *((float *)this + 10), *((float *)this + 11));
  CMMConvNode::AddClampingInfo(this, Mutable);
  if (v5) {
LABEL_22:
  }
    CFRelease(v5);
LABEL_23:
  if (v7) {
    CFRelease(v7);
  }
  return Mutable;
}

uint64_t CMMConvScaleFloatXYZ::GetTransformType(CMMConvScaleFloatXYZ *this, const __CFDictionary *a2)
{
  return 2;
}

uint64_t CMMConvScaleFloatXYZ::GetMaxNofChannels(CMMConvScaleFloatXYZ *this)
{
  return 3;
}

void CMMConvScaleFloatXYZ::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    CFNumberRef v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvScaleFloatXYZ::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    CFNumberRef v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

float32_t CMMConvScaleFloatXYZ::Convert(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 * a4)
  {
    unint64_t v5 = 0;
    CFNumberRef v6 = a2 + 1;
    do
    {
      float v7 = *(float *)(a1 + 48);
      float32_t result = v6->f32[v5] * v7;
      *a2 = vmul_n_f32(*a2, v7);
      v6->f32[v5] = result;
      v5 += a4;
      a2 = (float32x2_t *)((char *)a2 + 4 * a4);
    }
    while (v5 < a5 * a4);
  }
  return result;
}

CMMConvNode *ConversionManager::AddHLGPCSToDev(uint64_t a1, unsigned int a2, CMMConvHLGOOTF **a3, CMMConvNode **a4, void *a5, int a6, float32x2_t *a7, CFDictionaryRef theDict)
{
  float v16 = (const void **)MEMORY[0x1E4F1CFD0];
  if (theDict) {
    BOOL v17 = CFDictionaryGetValue(theDict, @"com.apple.cmm.ApplyToneMappingForBT2100") != *v16;
  }
  else {
    BOOL v17 = 1;
  }
  if (*(unsigned char *)(a1 + 56))
  {
    if (*(unsigned char *)(a1 + 61)) {
      char v18 = v17;
    }
    else {
      char v18 = 0;
    }
    if (*(unsigned char *)(a1 + 52)) {
      float v19 = 0.083333;
    }
    else {
      float v19 = 1.0;
    }
    if (theDict)
    {
      if (CFDictionaryContainsKey(theDict, @"com.apple.cmm.HLGOETFOpticalScale") == 1)
      {
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"com.apple.cmm.HLGOETFOpticalScale");
        if (Value)
        {
          LODWORD(valuePtr[0]) = 0;
          int v21 = CFNumberGetValue(Value, kCFNumberFloatType, valuePtr);
          float v22 = *(float *)valuePtr;
          if (!v21) {
            float v22 = 0.0;
          }
          if (v22 != 0.0) {
            float v19 = v22;
          }
        }
      }
    }
  }
  else
  {
    char v18 = 0;
    if (*(unsigned char *)(a1 + 52)) {
      float v19 = 0.083333;
    }
    else {
      float v19 = 1.0;
    }
  }
  if ((ColorSyncOptionsSceneReferredToneMappingRequested(theDict) & 1) == 0)
  {
    BOOL v23 = !a2 && a6 == 2;
    char v24 = v23 ? v18 : 1;
    if ((v24 & 1) == 0)
    {
      if (*(unsigned char *)(a1 + 59))
      {
        if (theDict) {
          BOOL v25 = CFDictionaryGetValue(theDict, @"com.apple.cmm.HLGSceneMapping3DLut") == *v16;
        }
        else {
          BOOL v25 = 0;
        }
        double v38 = CMMBase::NewInternal(0x50uLL, *(void ***)(a1 + 8));
        long double v39 = *a4;
        *((_DWORD *)v38 + 2) = 1;
        v38[2] = 0;
        v38[3] = v39;
        if (v39) {
          *((void *)v39 + 2) = v38;
        }
        v38[5] = 0x3F80000000000000;
        *(_DWORD *)((char *)v38 + 33) = 65537;
        *double v38 = &unk_1ED985338;
        *((unsigned char *)v38 + 4CMMBase::operator delete(this - 8) = v25;
        *(void *)((char *)v38 + 52) = 0x3E87AE143F8CCCCDLL;
        *(_OWORD *)((char *)v38 + 60) = xmmword_18BE63850;
        *a4 = (CMMConvNode *)v38;
        if (!*a3) {
          *a3 = (CMMConvHLGOOTF *)v38;
        }
        goto LABEL_68;
      }
      if (!*(void *)(a1 + 16)) {
        *(void *)(a1 + 16) = *(void *)(a1 + 24);
      }
      if (*(unsigned char *)(a1 + 60)) {
        float v26 = 100.0;
      }
      else {
        float v26 = 1000.0;
      }
      if (theDict)
      {
        float v27 = CFDictionaryGetValue(theDict, @"com.apple.cmm.SkipBoostToHDR");
        int v28 = *v16;
        if (v27 == *v16) {
          float v29 = 100.0;
        }
        else {
          float v29 = 203.0;
        }
        float v30 = 0.0;
        if (!*(unsigned char *)(a1 + 61)) {
          float v30 = 5.0;
        }
        *(float *)int valuePtr = v30;
        if (CFDictionaryContainsKey(theDict, @"com.apple.cmm.HLGSurroundLuminance") == 1)
        {
          CFNumberRef v31 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"com.apple.cmm.HLGSurroundLuminance");
          CFNumberGetValue(v31, kCFNumberFloatType, valuePtr);
        }
        if (CFDictionaryContainsKey(theDict, @"com.apple.cmm.HLGLuminanceCoefficients") == 1)
        {
          CFArrayRef v32 = (const __CFArray *)CFDictionaryGetValue(theDict, @"com.apple.cmm.HLGLuminanceCoefficients");
          if (v32)
          {
            CFArrayRef v33 = v32;
            CFTypeID v34 = CFGetTypeID(v32);
            if (v34 == CFArrayGetTypeID() && CFArrayGetCount(v33) >= 4)
            {
              CFIndex v35 = 0;
              double v36 = a7 + 3;
              do
              {
                CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v33, v35);
                CFNumberGetValue(ValueAtIndex, kCFNumberFloatType, v36);
                ++v35;
                double v36 = (float32x2_t *)((char *)v36 + 4);
              }
              while (v35 != 4);
              float v16 = (const void **)MEMORY[0x1E4F1CFD0];
            }
          }
          goto LABEL_63;
        }
        if (CFDictionaryGetValue(theDict, @"com.apple.cmm.kColorSyncUseHLGReferenceLuminance") == v28)
        {
LABEL_63:
          long long v41 = (CMMConvHLGOOTF *)CMMBase::NewInternal(0x58uLL, *(void ***)(a1 + 8));
          int v42 = *(unsigned __int8 *)(a1 + 61);
          CMMConvHLGOOTF::CMMConvHLGOOTF(v41, 1000.0, v26, 1.0 / v19, *(float *)valuePtr, v43, (float *)&a7[3], *a4);
          *(void *)uint64_t v44 = &unk_1ED983050;
          *(float *)(v44 + 84) = v19;
          *(_DWORD *)(v44 + 60) = a7[3].i32[0];
          *(_DWORD *)(v44 + 64) = a7[3].i32[1];
          *(_DWORD *)(v44 + 6CMMBase::operator delete(this - 8) = a7[4].i32[0];
          *(_DWORD *)(v44 + 72) = a7[4].i32[1];
          float v45 = (1.0 - (float)(*(float *)(v44 + 48) + 1.0)) / (float)(*(float *)(v44 + 48) + 1.0);
          if (v42)
          {
            float v46 = (float)(1.0 / v26) * powf(1.0 / v26, v45);
            *((_DWORD *)v41 + 1CMMBase::operator delete(this - 8) = 0;
          }
          else
          {
            float v46 = (float)(v29 / v26) * powf(v29 / v26, v45);
          }
          *((float *)v41 + 19) = v45;
          *((float *)v41 + 20) = v46 * v19;
          *a4 = v41;
          if (!*a3) {
            *a3 = v41;
          }
          goto LABEL_68;
        }
      }
      else
      {
        float v40 = 0.0;
        if (!*(unsigned char *)(a1 + 61)) {
          float v40 = 5.0;
        }
        *(float *)int valuePtr = v40;
        float v29 = 203.0;
      }
      a7[3] = vmul_f32(a7[3], (float32x2_t)0x3F0000003F000000);
      a7[4].f32[0] = a7[4].f32[0] * 0.5;
      a7[4].i32[1] = 1056964608;
      goto LABEL_63;
    }
  }
LABEL_68:
  uint64_t v56 = 0;
  memset(valuePtr, 0, sizeof(valuePtr));
  LODWORD(valuePtr[0]) = 1;
  uint64_t v54 = 0;
  Inverteduint64_t TRC = CMMRGBCurves::MakeInvertedTRC(a5, (uint64_t)valuePtr, *(void *)(a1 + 8), a2, &v54, v19);
  uint64_t v48 = a5[a2 + 1];
  unsigned int v49 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 40))(v48);
  if (theDict)
  {
    if (CFDictionaryGetValue(theDict, @"com.apple.cmm.HLGOETFTable") == *v16)
    {
      unsigned int v49 = 65552;
      LODWORD(valuePtr[0]) = 0;
      if (!a2 && v19 != 1.0)
      {
        int v52 = CMMBase::NewInternal(0x38uLL, *(void ***)(a1 + 8));
        uint64_t v53 = *a4;
        *((_DWORD *)v52 + 2) = 1;
        v52[2] = 0;
        v52[3] = v53;
        if (v53) {
          *((void *)v53 + 2) = v52;
        }
        v52[5] = 0x3FFFFF0000000000;
        *int v52 = &unk_1ED9838B8;
        *((float *)v52 + 12) = 1.0 / v19;
        *((unsigned char *)v52 + 36) = 0;
        *((_DWORD *)v52 + CMMBase::operator delete(this - 8) = 256;
        *a4 = (CMMConvNode *)v52;
        if (!*a3) {
          *a3 = (CMMConvHLGOOTF *)v52;
        }
      }
    }
  }
  int v50 = CMMBase::NewInternal(0xB0uLL, *(void ***)(a1 + 8));
  float32_t result = (CMMConvNode *)CMMConvInvertedTRC::CMMConvInvertedTRC((uint64_t)v50, a2, InvertedTRC, v49, v54, valuePtr, (uint64_t)*a4, 3, 1);
  *(void *)float32_t result = &unk_1ED982318;
  *a4 = result;
  return result;
}

void CMMITUBT1886InvEOTF::CMMITUBT1886InvEOTF(CMMITUBT1886InvEOTF *this, int a2, float a3)
{
  *((float *)this + 2) = a3;
  *(void *)this = &unk_1ED9835F0;
  if (a2)
  {
    *((void *)this + 2) = 0xD00000001;
    *((_DWORD *)this + 7) = 1;
    *((void *)this + 4) = 0;
    *((unsigned char *)this + 24) = 1;
    *((_DWORD *)this + 10) = 1054168405;
    *((float *)this + 11) = a3;
    *((void *)this + 7) = 0;
    *((void *)this + CMMBase::operator delete(this - 8) = 0;
    *((void *)this + 6) = 0;
  }
  else
  {
    if (CMMInitializeSRGBGammaTable(void)::predicate[0] != -1) {
      dispatch_once(CMMInitializeSRGBGammaTable(void)::predicate, &__block_literal_global_974);
    }
    long long v5 = *(_OWORD *)(CMMInvsRGBGammaFloatLutInfo + 16);
    long long v4 = *(_OWORD *)(CMMInvsRGBGammaFloatLutInfo + 32);
    long long v6 = *(_OWORD *)CMMInvsRGBGammaFloatLutInfo;
    *((void *)this + CMMBase::operator delete(this - 8) = *(void *)(CMMInvsRGBGammaFloatLutInfo + 48);
    *((_OWORD *)this + 2) = v5;
    *((_OWORD *)this + 3) = v4;
    *((_OWORD *)this + 1) = v6;
  }
}

__CFDictionary *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvInvMatrix>::FlattenConversion(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableArrayRef v3 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    long long v4 = (const void **)MEMORY[0x1E4F1CFD0];
    if (v3)
    {
      long long v5 = v3;
      long long v6 = (const void *)*MEMORY[0x1E4F1CFD0];
      float v7 = (const void *)*MEMORY[0x1E4F1CFC8];
      if (*(unsigned char *)(a1 + 49)) {
        BOOL v8 = (const void *)*MEMORY[0x1E4F1CFD0];
      }
      else {
        BOOL v8 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelActiveMatrix", v8);
      if (*(unsigned char *)(a1 + 48)) {
        CFTypeID v9 = v6;
      }
      else {
        CFTypeID v9 = v7;
      }
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.OneChannelInputMatrix", v9);
      uint64_t v10 = 0;
      uint64_t v11 = a1 + 100;
      float v12 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      while (1)
      {
        CFMutableArrayRef v13 = CFArrayCreateMutable(0, 0, v12);
        if (!v13) {
          break;
        }
        float v14 = v13;
        uint64_t v15 = 0;
        while (1)
        {
          float valuePtr = *(float *)(a1 + 160) * *(float *)(v11 + v15);
          CFNumberRef v16 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
          if (!v16) {
            break;
          }
          CFNumberRef v17 = v16;
          CFArrayAppendValue(v14, v16);
          CFRelease(v17);
          v15 += 4;
          if (v15 == 12) {
            goto LABEL_16;
          }
        }
        CFRelease(v14);
        float v14 = 0;
LABEL_16:
        float v22 = *(float *)(a1 + 160) * *(float *)(a1 + 4 * v10 + 148);
        CFNumberRef v18 = CFNumberCreate(0, kCFNumberFloat32Type, &v22);
        if (!v18)
        {
          CFRelease(v14);
          break;
        }
        CFNumberRef v19 = v18;
        CFArrayAppendValue(v14, v18);
        CFRelease(v19);
        if (!v14) {
          break;
        }
        CFArrayAppendValue(v5, v14);
        CFRelease(v14);
        ++v10;
        v11 += 12;
        if (v10 == 3)
        {
          CFDictionaryAddValue(Mutable, kColorSyncConversionMatrix, v5);
          goto LABEL_23;
        }
      }
      CFRelease(v5);
    }
    long long v5 = Mutable;
    CFMutableDictionaryRef Mutable = 0;
LABEL_23:
    CFRelease(v5);
    CMMConvNode::AddFixedPointClippingRange(Mutable, v20, *(float *)(a1 + 40), *(float *)(a1 + 44));
    if (*(unsigned char *)(a1 + 34)) {
      CFDictionaryAddValue(Mutable, @"com.apple.cmm.FunctionDoesSignedReflection", *v4);
    }
    CMMConvNode::AddClampingInfo((CMMConvNode *)a1, Mutable);
  }
  return Mutable;
}

uint64_t CMMConvMatrixTemplate<CMMMtxOnly,CMMConvInvMatrix>::GetTransformType()
{
  return 2;
}

void CMMConvMatrixTemplate<CMMMtxOnly,CMMConvInvMatrix>::ClampOutput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    long long v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

void CMMConvMatrixTemplate<CMMMtxOnly,CMMConvInvMatrix>::ClampInput(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4 * a3)
  {
    unint64_t v4 = 0;
    long long v5 = a2 + 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *a2 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*a2, _D0), (int8x8_t)_D0, (int8x8_t)*a2), (int8x8_t)vcltz_f32(*a2));
      float v11 = v5->f32[v4];
      if (v11 <= 1.0) {
        float v12 = v5->f32[v4];
      }
      else {
        float v12 = 1.0;
      }
      if (v11 >= 0.0) {
        float v13 = v12;
      }
      else {
        float v13 = 0.0;
      }
      v5->f32[v4] = v13;
      v4 += a3;
      a2 = (float32x2_t *)((char *)a2 + 4 * a3);
    }
    while (v4 < a4 * a3);
  }
}

float *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvInvMatrix>::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  long long v5 = *(_OWORD *)(a1 + 112);
  v9[2] = *(_OWORD *)(a1 + 96);
  v9[3] = v5;
  uint64_t v10 = *(void *)(a1 + 128);
  long long v6 = *(_OWORD *)(a1 + 80);
  v9[0] = *(_OWORD *)(a1 + 64);
  v9[1] = v6;
  return CMMMtxOnly::ConvertFloat((float *)v9, a2, a4, a5, *(float *)(a1 + 160));
}

int *CMMConvMatrixTemplate<CMMMtxOnly,CMMConvInvMatrix>::Convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }
  long long v5 = *(_OWORD *)(a1 + 112);
  v9[2] = *(_OWORD *)(a1 + 96);
  v9[3] = v5;
  uint64_t v10 = *(void *)(a1 + 128);
  long long v6 = *(_OWORD *)(a1 + 80);
  v9[0] = *(_OWORD *)(a1 + 64);
  v9[1] = v6;
  return CMMMtxOnly::ConvertMax((int *)v9, a2, a4, a5);
}

uint64_t ___ZL42CMMITUBT1886InvEOTF_Use_Spec_Gamma_For_HLGPK14__CFDictionary_block_invoke()
{
  char v1 = 1;
  uint64_t result = ColorSyncDefaultsGetBoolean("CMMITUBT1886INVEOTF_USE_SPEC_GAMMA_FOR_HLG", &v1);
  if (result) {
    CMMITUBT1886InvEOTF_Use_Spec_Gamma_For_HLG(__CFDictionary const*)::enabled = v1;
  }
  return result;
}

uint64_t ConversionManager::AddTRCSequence(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t *a4, long long *a5, uint64_t *a6, long long *a7, uint64_t *a8)
{
  uint64_t v16 = *a4;
  uint64_t v17 = 0;
  if (a2)
  {
    uint64_t v18 = a2 - 1;
    do
    {
      uint64_t v19 = v18;
      if (v16)
      {
        uint64_t v16 = *(void *)(v16 + 24);
        if (v16) {
          uint64_t v17 = *(void *)(v16 + 16);
        }
      }
      uint64_t v18 = 0;
    }
    while (v19);
  }
  float v20 = CMMBase::NewInternal(0xA8uLL, *(void ***)(a1 + 8));
  uint64_t v21 = CMMConvTRC::CMMConvTRC((uint64_t)v20, a2, *a6, 0, a5, v16, 3, 1, 1.0, 1, 0);
  *(void *)(v21 + 16) = v17;
  if (v17) {
    *(void *)(v17 + 24) = v21;
  }
  uint64_t v22 = *a3;
  if (!*a3)
  {
    *a3 = v21;
    uint64_t v22 = v21;
  }
  do
  {
    *a4 = v22;
    uint64_t v22 = *(void *)(v22 + 16);
  }
  while (v22);
  BOOL v23 = CMMBase::NewInternal(0xA8uLL, *(void ***)(a1 + 8));
  uint64_t result = CMMConvTRC::CMMConvTRC((uint64_t)v23, a2, *a8, 0, a7, *a4, 3, 1, 1.0, 1, 0);
  *a4 = result;
  return result;
}

float default_PQInvEOTFOpticalScale(const __CFDictionary *a1, int a2)
{
  BOOL v6 = !a1
    || (CFNumberRef Value = CFDictionaryGetValue(a1, @"com.apple.cmm.SkipPQEETF"),
        long long v5 = (const void *)*MEMORY[0x1E4F1CFD0],
        Value == (const void *)*MEMORY[0x1E4F1CFD0])
    || CFDictionaryGetValue(a1, @"com.apple.cmm.SkipToneMappingForBT2100") == v5
    || CFDictionaryGetValue(a1, @"com.apple.cmm.ApplyToneMappingForBT2100") != v5;
  float result = 0.0001;
  if ((a2 & v6) != 0) {
    return 0.01;
  }
  return result;
}

float custom_PQInvEOTFOpticalScale(const __CFDictionary *a1, float a2)
{
  float v2 = 0.0;
  if (a1)
  {
    if (CFDictionaryContainsKey(a1, @"com.apple.cmm.PQInvEOTFOpticalScale") == 1)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, @"com.apple.cmm.PQInvEOTFOpticalScale");
      if (Value)
      {
        float valuePtr = 0.0;
        if (CFNumberGetValue(Value, kCFNumberFloatType, &valuePtr))
        {
          if (valuePtr != 0.0 && valuePtr != a2) {
            return valuePtr;
          }
        }
      }
    }
  }
  return v2;
}

void ConversionManager::AddHLGDevToPCS(uint64_t a1, unsigned int a2, uint64_t a3, float32x2_t *a4, const __CFDictionary *a5)
{
  unsigned __int8 v10 = ColorSyncOptionsReferenceWhiteReferredToneMappingRequested(a5);
  float v11 = (const void **)MEMORY[0x1E4F1CFD0];
  BOOL v12 = a5
     && CFDictionaryGetValue(a5, @"com.apple.cmm.ApplyToneMappingForBT2100") == *v11
     && *(unsigned char *)(a1 + 61) != 0;
  float HLGInvOETFOpticalScale = 1.0;
  if ((v10 & 1) == 0) {
    float HLGInvOETFOpticalScale = ConversionManager::GetHLGInvOETFOpticalScale((ConversionManager *)a1, a5);
  }
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  LODWORD(v18[0]) = 1;
  uint64_t TRC = CMMRGBCurves::MakeTRC(a3, HLGInvOETFOpticalScale, (uint64_t)v18, *(void *)(a1 + 8), a2);
  uint64_t v15 = CMMBase::NewInternal(0xA8uLL, *(void ***)(a1 + 8));
  uint64_t v16 = (float *)CMMConvTRC::CMMConvTRC((uint64_t)v15, a2, TRC, 0, v18, *(void *)(a1 + 24), 3, 1, 1.0, 1, 1);
  *(void *)uint64_t v16 = &unk_1ED982F38;
  v16[41] = HLGInvOETFOpticalScale;
  CMMConvTRC::SetInputClamp((CMMConvTRC *)v16);
  (*(void (**)(void *))(*v15 + 48))(v15);
  *(void *)(a1 + 24) = v15;
  if (v12)
  {
    char v17 = 0;
  }
  else
  {
    char v17 = *(unsigned char *)(a1 + 61);
    if (v17) {
      char v17 = *(unsigned char *)(a1 + 51) != 0;
    }
  }
  if (a2 == 2 && (v17 & 1) == 0) {
    ConversionManager::AddHLGOOTF(a1, a4, a5);
  }
  if (a5)
  {
    if (CFDictionaryGetValue(a5, @"com.apple.cmm.UseHLGOOTFForCoreVideo") != *v11) {
      CFDictionaryGetValue(a5, @"com.apple.cmm.Use100nitsHLGOOTF");
    }
  }
}

void sub_18BE59210(_Unwind_Exception *a1)
{
  CMMConvTRC::~CMMConvTRC(v1);
  _Unwind_Resume(a1);
}

void ConversionManager::AddHLGOOTF(uint64_t a1, float32x2_t *a2, const __CFDictionary *a3)
{
  if (!*(void *)(a1 + 16)) {
    *(void *)(a1 + 16) = *(void *)(a1 + 24);
  }
  float v41 = 0.0;
  if (ColorSyncOptionsReferenceWhiteReferredToneMappingRequested(a3))
  {
    float v6 = 1.0;
    float v7 = 1000.0;
    float HLGInvOETFOpticalScale = 1.0;
    goto LABEL_5;
  }
  BOOL v12 = (const void **)MEMORY[0x1E4F1CFD0];
  if (a3)
  {
    if (CFDictionaryGetValue(a3, @"com.apple.cmm.UseHLGOOTFForCoreVideo") == *v12)
    {
      BOOL v14 = 1;
    }
    else
    {
      float v13 = *v12;
      BOOL v14 = CFDictionaryGetValue(a3, @"com.apple.cmm.Use100nitsHLGOOTF") == v13;
    }
    if (CFDictionaryContainsKey(a3, @"com.apple.cmm.HLGSurroundLuminance") == 1)
    {
LABEL_13:
      int v15 = !v14;
      if (a3) {
        goto LABEL_14;
      }
LABEL_17:
      BOOL v18 = 0;
      BOOL v19 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    BOOL v14 = 0;
  }
  if (*(float *)(a1 + 64) == 203.0) {
    goto LABEL_13;
  }
  int v15 = 0;
  if (!a3) {
    goto LABEL_17;
  }
LABEL_14:
  CFNumberRef Value = CFDictionaryGetValue(a3, @"com.apple.cmm.ApplyToneMappingForBT2100");
  char v17 = *v12;
  BOOL v18 = Value == *v12;
  BOOL v19 = CFDictionaryGetValue(a3, @"com.apple.cmm.SkipHLGOOTF") == v17
     || CFDictionaryGetValue(a3, @"com.apple.cmm.SkipToneMappingForBT2100") == v17;
LABEL_19:
  int v20 = *(unsigned __int8 *)(a1 + 47);
  if (*(unsigned char *)(a1 + 47))
  {
    float v21 = 1000.0;
    float v7 = 1000.0;
    if (a3)
    {
LABEL_21:
      if (CFDictionaryContainsKey(a3, @"com.apple.cmm.TargetDisplayWhite") == 1)
      {
        float valuePtr = 0.0;
        CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(a3, @"com.apple.cmm.TargetDisplayWhite");
        if (v22)
        {
          int v23 = CFNumberGetValue(v22, kCFNumberFloatType, &valuePtr);
          float v24 = valuePtr;
          if (!v23) {
            float v24 = 0.0;
          }
        }
        else
        {
          float v24 = 0.0;
        }
        if (v24 != 0.0) {
          float v7 = v24;
        }
      }
      float HLGInvOETFOpticalScale = ConversionManager::GetHLGInvOETFOpticalScale((ConversionManager *)a1, a3);
      float v28 = 1.0;
      if (CFDictionaryContainsKey(a3, @"com.apple.cmm.HLGOOTFGainScale") == 1)
      {
        float v39 = 0.0;
        CFNumberRef v29 = (const __CFNumber *)CFDictionaryGetValue(a3, @"com.apple.cmm.HLGOOTFGainScale");
        if (v29)
        {
          if (CFNumberGetValue(v29, kCFNumberFloatType, &v39) == 1) {
            float v28 = v39;
          }
          else {
            float v28 = 1.0;
          }
        }
      }
      float v30 = 0.0;
      if (v15 | v14) {
        float v30 = 5.0;
      }
      float v41 = v30;
      if (CFDictionaryContainsKey(a3, @"com.apple.cmm.HLGSurroundLuminance") == 1)
      {
        CFNumberRef v31 = (const __CFNumber *)CFDictionaryGetValue(a3, @"com.apple.cmm.HLGSurroundLuminance");
        CFNumberGetValue(v31, kCFNumberFloatType, &v41);
      }
      if (*(unsigned char *)(a1 + 47)) {
        float v32 = v7;
      }
      else {
        float v32 = v28;
      }
      float v6 = v32 / HLGInvOETFOpticalScale;
      if (CFDictionaryContainsKey(a3, @"com.apple.cmm.HLGLuminanceCoefficients") == 1)
      {
        CFArrayRef v33 = (const __CFArray *)CFDictionaryGetValue(a3, @"com.apple.cmm.HLGLuminanceCoefficients");
        if (v33)
        {
          CFArrayRef v34 = v33;
          CFTypeID v35 = CFGetTypeID(v33);
          if (v35 == CFArrayGetTypeID() && CFArrayGetCount(v34) >= 4)
          {
            CFIndex v36 = 0;
            double v37 = a2 + 3;
            do
            {
              CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v34, v36);
              CFNumberGetValue(ValueAtIndex, kCFNumberFloatType, v37);
              ++v36;
              double v37 = (float32x2_t *)((char *)v37 + 4);
            }
            while (v36 != 4);
          }
        }
        goto LABEL_5;
      }
      if (*(unsigned char *)(a1 + 47)
        || CFDictionaryGetValue(a3, @"com.apple.cmm.kColorSyncUseHLGReferenceLuminance") == *v12)
      {
        goto LABEL_5;
      }
LABEL_68:
      a2[3] = vmul_f32(a2[3], (float32x2_t)0x3F0000003F000000);
      a2[4].f32[0] = a2[4].f32[0] * 0.5;
      a2[4].i32[1] = 1056964608;
      goto LABEL_5;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 51)) {
      int v25 = v18;
    }
    else {
      int v25 = 1;
    }
    float v21 = 1.0;
    float v26 = 100.0;
    if (v15) {
      float v26 = 203.0;
    }
    if (v19) {
      float v26 = 1000.0;
    }
    if (v25 == 1) {
      float v7 = v26;
    }
    else {
      float v7 = 1000.0;
    }
    if (a3) {
      goto LABEL_21;
    }
  }
  if (*(unsigned __int8 *)(a1 + 51) | v20) {
    float HLGInvOETFOpticalScale = 12.0;
  }
  else {
    float HLGInvOETFOpticalScale = 1.0;
  }
  float v27 = 0.0;
  if (v15 | v14) {
    float v27 = 5.0;
  }
  float v41 = v27;
  float v6 = v21 / HLGInvOETFOpticalScale;
  if (!v20) {
    goto LABEL_68;
  }
LABEL_5:
  CFTypeID v9 = (CMMConvHLGOOTF *)CMMBase::NewInternal(0x50uLL, *(void ***)(a1 + 8));
  CMMConvHLGOOTF::CMMConvHLGOOTF(v9, v7, v6, HLGInvOETFOpticalScale, v41, v10, (float *)&a2[3], *(CMMConvNode **)(a1 + 24));
  *(void *)(a1 + 24) = v11;
}

void ConversionManager::AddPQEETFToneMapping(void *a1, float *a2, CFDictionaryRef theDict, float a4)
{
  if (a2)
  {
    if (theDict)
    {
      CFNumberRef Value = CFDictionaryGetValue(theDict, @"com.apple.cmm.PQEETF3DLut");
      BOOL v9 = Value == (const void *)*MEMORY[0x1E4F1CFD0];
      if (Value == (const void *)*MEMORY[0x1E4F1CFD0]) {
        a4 = 1.0;
      }
      if (CFDictionaryContainsKey(theDict, @"com.apple.cmm.PQMasteringDisplayWhite") == 1)
      {
        float valuePtr = 0.0;
        CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"com.apple.cmm.PQMasteringDisplayWhite");
        if (v10)
        {
          if (CFNumberGetValue(v10, kCFNumberFloatType, &valuePtr) && valuePtr != 0.0) {
            *a2 = valuePtr;
          }
        }
      }
      if (CFDictionaryContainsKey(theDict, @"com.apple.cmm.PQMasteringDisplayBlack") == 1)
      {
        float valuePtr = 0.0;
        CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"com.apple.cmm.PQMasteringDisplayBlack");
        if (v11)
        {
          if (CFNumberGetValue(v11, kCFNumberFloatType, &valuePtr) && valuePtr != 0.0) {
            a2[1] = valuePtr;
          }
        }
      }
      if (CFDictionaryContainsKey(theDict, @"com.apple.cmm.TargetDisplayWhite") == 1)
      {
        float valuePtr = 0.0;
        CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"com.apple.cmm.TargetDisplayWhite");
        if (v12)
        {
          if (CFNumberGetValue(v12, kCFNumberFloatType, &valuePtr) && valuePtr != 0.0) {
            a2[2] = valuePtr;
          }
        }
      }
      if (CFDictionaryContainsKey(theDict, @"com.apple.cmm.TargetDisplayBlack") == 1)
      {
        float valuePtr = 0.0;
        CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"com.apple.cmm.TargetDisplayBlack");
        if (v13)
        {
          if (CFNumberGetValue(v13, kCFNumberFloatType, &valuePtr) && valuePtr != 0.0) {
            a2[1] = valuePtr;
          }
        }
      }
    }
    else
    {
      BOOL v9 = 0;
    }
    if (*a2 > a2[2] || a2[1] < a2[3])
    {
      BOOL v14 = (void **)a1[1];
      int v15 = a2 + 6;
      if (v9)
      {
        uint64_t v16 = CMMBase::NewInternal(0xC0uLL, v14);
        char v17 = v16;
        float v18 = *a2;
        float v19 = a2[1];
        float v20 = a2[2];
        float v21 = a2[3];
        CFNumberRef v22 = (void **)a1[1];
        uint64_t v23 = a1[3];
        *((_DWORD *)v16 + 2) = 1;
        v16[2] = 0;
        v16[3] = v23;
        if (v23) {
          *(void *)(v23 + 16) = v16;
        }
        v16[5] = 0x3F80000000000000;
        *(_DWORD *)((char *)v16 + 33) = 0x10000;
        *(_OWORD *)(v16 + 7) = xmmword_18BE63860;
        v16[9] = 3;
        *uint64_t v16 = &unk_1ED981908;
        CMMThrowExceptionOnError(0);
        int v24 = *((_DWORD *)v17 + 18);
        int v25 = *((_DWORD *)v17 + 14);
        int v26 = v25 * v24;
        *((_DWORD *)v17 + 24) = v24;
        *((_DWORD *)v17 + 25) = v25 * v24;
        int v27 = v25 * v24 * v25;
        *((_DWORD *)v17 + 26) = v27;
        *((_DWORD *)v17 + 27) = v26 + v24;
        int v28 = v27 + v24;
        int v29 = v27 + v26;
        *((_DWORD *)v17 + 2CMMBase::operator delete(this - 8) = v28;
        *((_DWORD *)v17 + 29) = v29;
        *((_DWORD *)v17 + 30) = v29 + v24;
        *char v17 = &unk_1ED981300;
        CMMConvPQEETFBase::CMMConvPQEETFBase((CMMConvPQEETFBase *)(v17 + 16), v18, v19, v20, v21, a4, v15, 1);
        *char v17 = &unk_1ED9826D8;
        v17[16] = &unk_1ED9827E0;
        LODWORD(valuePtr) = 32;
        _3DLUT = CMMConvPQEETFBase::create_3DLUT(v30, 0, 0, (unsigned int *)&valuePtr, v31, v32, v33, v34);
        if (_3DLUT)
        {
          CFIndex v36 = CMMBase::NewInternal(0x28uLL, v22);
          vm_address_t BytePtr = CFDataGetBytePtr(_3DLUT);
          CFIndex Length = CFDataGetLength(_3DLUT);
          v36[2] = 0;
          void v36[3] = BytePtr;
          *CFIndex v36 = &unk_1ED985520;
          v36[1] = 0;
          _OWORD v36[4] = Length;
          v17[6] = CFRetain(_3DLUT);
          v17[10] = v36;
          v17[11] = CMMTable::FloatData(v36[2], v36[3]);
          CFRelease(_3DLUT);
        }
      }
      else
      {
        float v39 = (CMMConvPQEETFBase *)CMMBase::NewInternal(0x70uLL, v14);
        float v40 = *a2;
        float v41 = a2[1];
        float v42 = a2[2];
        float v43 = a2[3];
        uint64_t v44 = a1[3];
        CMMConvPQEETFBase::CMMConvPQEETFBase(v39, v40, v41, v42, v43, a4, v15, 0);
        *(_DWORD *)(v45 + 72) = 1;
        char v17 = (void *)(v45 + 64);
        *(void *)(v45 + 80) = 0;
        *(void *)(v45 + 8CMMBase::operator delete(this - 8) = v44;
        if (v44) {
          *(void *)(v44 + 16) = v17;
        }
        *(void *)(v45 + 104) = 0x3F80000000000000;
        *(_DWORD *)(v45 + 97) = 0;
        *(void *)uint64_t v45 = &unk_1ED981C20;
        *(void *)(v45 + 64) = &unk_1ED981CC0;
      }
      a1[3] = v17;
      if (!a1[2]) {
        a1[2] = v17;
      }
    }
  }
}

void sub_18BE59AA0(_Unwind_Exception *a1)
{
  CMMConvCLUTBase::~CMMConvCLUTBase(v1);
  _Unwind_Resume(a1);
}

void ConversionManager::ColorantsForPrimaries(uint64_t a1, void *a2, int a3)
{
  switch(a3)
  {
    case 12:
      BOOL v9 = CMMBase::NewInternal(0x38uLL, *(void ***)(a1 + 8));
      if (ColorSyncProfileGetDisplayP3RedPrimary_predicate != -1) {
        dispatch_once(&ColorSyncProfileGetDisplayP3RedPrimary_predicate, &__block_literal_global_289);
      }
      *((_DWORD *)v9 + 2) = 1918392666;
      v9[2] = 0;
      v9[3] = 0;
      _OWORD v9[4] = 20;
      v9[5] = &ColorSyncProfileGetDisplayP3RedPrimary_rXYZ;
      *((_WORD *)v9 + 24) = 0;
      *BOOL v9 = &unk_1ED985610;
      *a2 = v9;
      CFNumberRef v10 = CMMBase::NewInternal(0x38uLL, *(void ***)(a1 + 8));
      if (ColorSyncProfileGetDisplayP3GreenPrimary_predicate[0] != -1) {
        dispatch_once(ColorSyncProfileGetDisplayP3GreenPrimary_predicate, &__block_literal_global_292);
      }
      *((_DWORD *)v10 + 2) = 1733843290;
      v10[2] = 0;
      v10[3] = 0;
      v10[4] = 20;
      v10[5] = &ColorSyncProfileGetDisplayP3GreenPrimary_gXYZ;
      *((_WORD *)v10 + 24) = 0;
      *CFNumberRef v10 = &unk_1ED985610;
      a2[1] = v10;
      float v7 = CMMBase::NewInternal(0x38uLL, *(void ***)(a1 + 8));
      if (ColorSyncProfileGetDisplayP3BluePrimary_predicate != -1) {
        dispatch_once(&ColorSyncProfileGetDisplayP3BluePrimary_predicate, &__block_literal_global_295);
      }
      BOOL v8 = &ColorSyncProfileGetDisplayP3BluePrimary_bXYZ;
      break;
    case 9:
      CFNumberRef v11 = CMMBase::NewInternal(0x38uLL, *(void ***)(a1 + 8));
      if (ColorSyncProfileGetBT2020RedPrimary_predicate != -1) {
        dispatch_once(&ColorSyncProfileGetBT2020RedPrimary_predicate, &__block_literal_global_280);
      }
      *((_DWORD *)v11 + 2) = 1918392666;
      v11[2] = 0;
      v11[3] = 0;
      v11[4] = 20;
      v11[5] = &ColorSyncProfileGetBT2020RedPrimary_rXYZ;
      *((_WORD *)v11 + 24) = 0;
      void *v11 = &unk_1ED985610;
      *a2 = v11;
      CFNumberRef v12 = CMMBase::NewInternal(0x38uLL, *(void ***)(a1 + 8));
      if (ColorSyncProfileGetBT2020GreenPrimary_predicate[0] != -1) {
        dispatch_once(ColorSyncProfileGetBT2020GreenPrimary_predicate, &__block_literal_global_283);
      }
      *((_DWORD *)v12 + 2) = 1733843290;
      v12[2] = 0;
      v12[3] = 0;
      void v12[4] = 20;
      v12[5] = &ColorSyncProfileGetBT2020GreenPrimary_gXYZ;
      *((_WORD *)v12 + 24) = 0;
      *CFNumberRef v12 = &unk_1ED985610;
      a2[1] = v12;
      float v7 = CMMBase::NewInternal(0x38uLL, *(void ***)(a1 + 8));
      if (ColorSyncProfileGetBT2020BluePrimary_predicate != -1) {
        dispatch_once(&ColorSyncProfileGetBT2020BluePrimary_predicate, &__block_literal_global_286);
      }
      BOOL v8 = &ColorSyncProfileGetBT2020BluePrimary_bXYZ;
      break;
    case 1:
      long long v5 = CMMBase::NewInternal(0x38uLL, *(void ***)(a1 + 8));
      if (ColorSyncProfileGetBT709RedPrimary_predicate != -1) {
        dispatch_once(&ColorSyncProfileGetBT709RedPrimary_predicate, &__block_literal_global_271);
      }
      *((_DWORD *)v5 + 2) = 1918392666;
      v5[2] = 0;
      v5[3] = 0;
      v5[4] = 20;
      v5[5] = &ColorSyncProfileGetBT709RedPrimary_rXYZ;
      *((_WORD *)v5 + 24) = 0;
      void *v5 = &unk_1ED985610;
      *a2 = v5;
      float v6 = CMMBase::NewInternal(0x38uLL, *(void ***)(a1 + 8));
      if (ColorSyncProfileGetBT709GreenPrimary_predicate[0] != -1) {
        dispatch_once(ColorSyncProfileGetBT709GreenPrimary_predicate, &__block_literal_global_274);
      }
      *((_DWORD *)v6 + 2) = 1733843290;
      v6[2] = 0;
      v6[3] = 0;
      v6[4] = 20;
      v6[5] = &ColorSyncProfileGetBT709GreenPrimary_gXYZ;
      *((_WORD *)v6 + 24) = 0;
      void *v6 = &unk_1ED985610;
      a2[1] = v6;
      float v7 = CMMBase::NewInternal(0x38uLL, *(void ***)(a1 + 8));
      if (ColorSyncProfileGetBT709BluePrimary_predicate != -1) {
        dispatch_once(&ColorSyncProfileGetBT709BluePrimary_predicate, &__block_literal_global_277);
      }
      BOOL v8 = &ColorSyncProfileGetBT709BluePrimary_bXYZ;
      break;
    default:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = -170;
  }
  *((_DWORD *)v7 + 2) = 1649957210;
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = 20;
  v7[5] = v8;
  *((_WORD *)v7 + 24) = 0;
  void *v7 = &unk_1ED985610;
  a2[2] = v7;
}

void ConversionManager::AddExtendedRangeReferenceWhiteToneMapping(ConversionManager *this, const __CFDictionary *a2)
{
  CFDictionaryRef ReferenceWhiteToneMappingOptions = (const __CFDictionary *)ColorSyncOptionsGetReferenceWhiteToneMappingOptions(a2);
  float v4 = 0.5;
  float v5 = 2.6667;
  if (ReferenceWhiteToneMappingOptions
    && (CFDictionaryRef v6 = ReferenceWhiteToneMappingOptions,
        CFTypeID v7 = CFGetTypeID(ReferenceWhiteToneMappingOptions),
        v7 == CFDictionaryGetTypeID()))
  {
    float v8 = float_from_dictionary_with_default(v6, @"com.apple.cmm.RWTMSourcePeak", 1000.0);
    float v9 = float_from_dictionary_with_default(v6, @"com.apple.cmm.RWTMSourceReferenceWhite", 203.0);
    float v10 = float_from_dictionary_with_default(v6, @"com.apple.cmm.RWTMEDRHeadroom", 1.0);
    float v4 = float_from_dictionary_with_default(v6, @"com.apple.cmm.RWTMTargetReferenceWhiteBase", 0.5);
    float v5 = float_from_dictionary_with_default(v6, @"com.apple.cmm.RWTMReferenceWhiteThreshold", 2.6667);
  }
  else
  {
    float v9 = 203.0;
    float v8 = 1000.0;
    float v10 = 1.0;
  }
  if (!*((unsigned char *)this + 51)) {
    float v10 = 1.0;
  }
  CFNumberRef v11 = (CMMConvRWToneMapping *)CMMBase::NewInternal(0x60uLL, *((void ***)this + 1));
  CMMConvRWToneMapping::CMMConvRWToneMapping(v11, 1000.0, v8, v9, v10, v4, v5, *((CMMConvNode **)this + 3));
  *((void *)this + 3) = v12;
  if (!*((void *)this + 2)) {
    *((void *)this + 2) = v12;
  }
}

float float_from_dictionary_with_default(const __CFDictionary *a1, const __CFString *a2, float a3)
{
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 == CFDictionaryGetTypeID())
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
    if (Value)
    {
      CFNumberRef v8 = Value;
      CFTypeID v9 = CFGetTypeID(Value);
      if (v9 == CFNumberGetTypeID())
      {
        float valuePtr = 0.0;
        if (CFNumberGetValue(v8, kCFNumberFloatType, &valuePtr) == 1) {
          return valuePtr;
        }
      }
    }
  }
  return a3;
}

void *CMMTable::CreateFlexTRCLookup(CMMTable *this, const __CFArray *a2, const __CFDictionary *a3, const __CFDictionary *a4, CMMTable *a5, unint64_t a6, CMMMemMgr *a7)
{
  if ((unint64_t)CFArrayGetCount(this) < 2) {
    return 0;
  }
  uint64_t v12 = CMMBase::NewInternal(0x28uLL, (void **)a5);
  *uint64_t v12 = &unk_1ED985520;
  v12[1] = 1;
  v12[3] = 0;
  void v12[4] = 4096;
  CFNumberRef v13 = (float *)CMMBase::NewInternal(0x1000uLL, (void **)a5);
  v12[2] = v13;
  CMMTable::MutableFloatData((uint64_t)v13);
  if (a4) {
    a4 = (const __CFDictionary *)CMMTable::FloatData(*((void *)a4 + 2), *((void *)a4 + 3));
  }
  BOOL v14 = (float *)malloc_type_calloc(1uLL, 0x1000uLL, 0x100004052888210uLL);
  int v15 = (float *)malloc_type_calloc(1uLL, 0x1000uLL, 0x100004052888210uLL);
  Compute_FlexGTC(v14, this, a2, a3);
  float v41 = 1.0;
  float valuePtr = 1.0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a3, @"com.apple.cmm.FlexGTCTargetHeadroom");
  if (Value) {
    CFNumberGetValue(Value, kCFNumberFloatType, &valuePtr);
  }
  CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(a2, (const void *)kColorSyncGainMapBaselineHeadroom);
  float v18 = 1.0;
  if (v17)
  {
    CFNumberGetValue(v17, kCFNumberFloatType, &v41);
    float v18 = exp2f(v41);
  }
  unint64_t v19 = 0;
  if (valuePtr <= v18) {
    float v20 = valuePtr;
  }
  else {
    float v20 = v18;
  }
  if (valuePtr >= 1.0) {
    float v21 = v20;
  }
  else {
    float v21 = 1.0;
  }
  do
  {
    if (a4) {
      float v22 = *((float *)a4 + v19);
    }
    else {
      float v22 = (float)v19 / 1023.0;
    }
    float v23 = (float)((float)(v22 * 49.261) * 1023.0) / v18;
    if (v23 <= 1023.0) {
      float v24 = v23;
    }
    else {
      float v24 = 1023.0;
    }
    if (v23 >= 0.0) {
      float v25 = v24;
    }
    else {
      float v25 = 0.0;
    }
    unsigned int v26 = v25;
    if (v25 + 1 < 0x3FF) {
      unsigned int v27 = v26 + 1;
    }
    else {
      unsigned int v27 = 1023;
    }
    if (a4)
    {
      float v28 = *((float *)a4 + v19);
      if (v19) {
        goto LABEL_28;
      }
    }
    else
    {
      float v28 = (float)v19 / 1023.0;
      if (v19)
      {
LABEL_28:
        float v29 = *(v13 - 1) + 0.000015259;
        goto LABEL_31;
      }
    }
    float v29 = 0.0;
LABEL_31:
    float v30 = (float)(v14[v26] + (float)((float)(v14[v27] - v14[v26]) * (float)(v25 - (float)v25)))
        * (float)(v28 * 49.261);
    if (v30 <= v21) {
      float v31 = v30;
    }
    else {
      float v31 = v21;
    }
    if (v30 >= v29) {
      float v32 = v31;
    }
    else {
      float v32 = v29;
    }
    *v13++ = v32;
    if ((float)(v32 * 1023.0) <= 1023.0) {
      float v33 = v32 * 1023.0;
    }
    else {
      float v33 = 1023.0;
    }
    if ((float)(v32 * 1023.0) >= 0.0) {
      float v34 = v33;
    }
    else {
      float v34 = 0.0;
    }
    unsigned int v35 = v34;
    float v36 = v32 / v18;
    float v37 = v34 - (float)v34;
    float v38 = v14[v35];
    if (v35 + 1 < 0x3FF) {
      unsigned int v39 = v35 + 1;
    }
    else {
      unsigned int v39 = 1023;
    }
    v15[v19++] = v36 / (float)(v38 + (float)((float)(v14[v39] - v38) * v37));
  }
  while (v19 != 1024);
  free(v14);
  return v12;
}

double ConversionManager::AddFlexLuminanceToneMapping(uint64_t a1, const void *a2, int32x4_t a3)
{
  CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 80);
  if (v3)
  {
    if (*(unsigned char *)(a1 + 89) == 16)
    {
      CFDictionaryRef FlexLumaScalingOptions = (const __CFDictionary *)ColorSyncOptionsGetFlexLumaScalingOptions(0, a2);
      if (FlexLumaScalingOptions)
      {
        CFDictionaryRef v6 = FlexLumaScalingOptions;
        CFTypeID v7 = CMMBase::NewInternal(0x58uLL, *(void ***)(a1 + 8));
        CFNumberRef v8 = v7;
        CFTypeID v9 = *(void ***)(a1 + 8);
        uint64_t v10 = *(void *)(a1 + 24);
        *((_DWORD *)v7 + 2) = 1;
        v7[2] = 0;
        v7[3] = v10;
        if (v10) {
          *(void *)(v10 + 16) = v7;
        }
        *(_DWORD *)((char *)v7 + 33) = 16777217;
        void *v7 = &unk_1ED985070;
        CFNumberRef v11 = (float *)v7 + 13;
        *(_OWORD *)(v7 + 5) = xmmword_18BE63870;
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v6, @"com.apple.cmm.FlexGTCTargetHeadroom");
        CFDictionaryRef v13 = (const __CFDictionary *)CFDictionaryGetValue(v3, (const void *)kColorSyncMonoGainMapParams);
        if (Value) {
          CFNumberGetValue(Value, kCFNumberFloatType, (char *)v8 + 52);
        }
        BOOL v14 = (float *)(v8 + 6);
        CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(v13, (const void *)kColorSyncGainMapBaselineHeadroom);
        if (v15)
        {
          CFNumberGetValue(v15, kCFNumberFloatType, v8 + 6);
          float v16 = exp2f(*v14);
          *BOOL v14 = v16;
        }
        else
        {
          float v16 = *v14;
        }
        if (*v11 <= v16) {
          float v16 = *v11;
        }
        if (*v11 < 1.0) {
          float v16 = 1.0;
        }
        float *v11 = v16;
        if (CFDictionaryContainsKey(v3, (const void *)kColorSyncMonoFlexGTCNodeTable) == 1
          && CFDictionaryContainsKey(v3, (const void *)kColorSyncMonoGainMapParams) == 1
          && (CFArrayRef v17 = (const __CFArray *)CFDictionaryGetValue(v3, (const void *)kColorSyncMonoFlexGTCNodeTable),
              CFDictionaryRef v18 = (const __CFDictionary *)CFDictionaryGetValue(v3, (const void *)kColorSyncMonoGainMapParams),
              (unint64_t)CFArrayGetCount(v17) >= 2))
        {
          unint64_t v19 = CMMBase::NewInternal(0x28uLL, v9);
          *unint64_t v19 = &unk_1ED985520;
          v19[1] = 1;
          v19[3] = 0;
          v19[4] = 4096;
          float v20 = CMMBase::NewInternal(0x1000uLL, v9);
          v19[2] = v20;
          float v21 = (float *)CMMTable::MutableFloatData((uint64_t)v20);
          Compute_FlexGTC(v21, v17, v18, v6);
        }
        else
        {
          unint64_t v19 = 0;
        }
        v8[10] = v19;
        if (v19) {
          uint64_t v22 = 0;
        }
        else {
          uint64_t v22 = 4294967246;
        }
        CMMThrowExceptionOnError(v22);
        float v23 = (const float *)(v8 + 6);
        *(float32x2_t *)a3.i8 = vld1_dup_f32(v23);
        *(float32x2_t *)a3.i8 = vdiv_f32((float32x2_t)0x41C50B5A41035CE7, *(float32x2_t *)a3.i8);
        int32x4_t v24 = vzip1q_s32(a3, a3);
        v24.i32[2] = a3.i32[0];
        *(int32x4_t *)(v8 + 7) = v24;
        *((_DWORD *)v8 + 1CMMBase::operator delete(this - 8) = 1111821146;
        *(void *)(a1 + 24) = v8;
      }
    }
  }
  return *(double *)a3.i64;
}

float ConversionManager::GetHLGInvOETFOpticalScale(ConversionManager *this, CFDictionaryRef theDict)
{
  if (theDict)
  {
    CFNumberRef Value = CFDictionaryGetValue(theDict, @"com.apple.cmm.SkipHLGOOTF");
    float v5 = (const void *)*MEMORY[0x1E4F1CFD0];
    BOOL v6 = Value == (const void *)*MEMORY[0x1E4F1CFD0]
      || CFDictionaryGetValue(theDict, @"com.apple.cmm.SkipToneMappingForBT2100") == v5;
    CFNumberRef v8 = CFDictionaryGetValue(theDict, @"com.apple.cmm.ApplyToneMappingForBT2100");
    if (*((unsigned char *)this + 51) && v8 != v5) {
      goto LABEL_12;
    }
    float result = 1.0;
    if (v6 || *((unsigned char *)this + 47) != 0) {
      float result = 12.0;
    }
    if (v6)
    {
LABEL_12:
      float valuePtr = 0.0;
      int v9 = CFDictionaryContainsKey(theDict, @"com.apple.cmm.HLGInvOETFOpticalScale");
      float result = 0.0;
      if (v9 == 1)
      {
        CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"com.apple.cmm.HLGInvOETFOpticalScale");
        int v11 = CFNumberGetValue(v10, kCFNumberFloatType, &valuePtr);
        float result = valuePtr;
        if (!v11) {
          float result = 0.0;
        }
      }
      goto LABEL_15;
    }
  }
  else
  {
    if (*((unsigned char *)this + 51))
    {
      float result = 0.0;
LABEL_15:
      if (result == 0.0) {
        return 12.0;
      }
      return result;
    }
    float result = 12.0;
    if (!*((unsigned char *)this + 47)) {
      return 1.0;
    }
  }
  return result;
}

uint64_t ___ZL34disable_ITUBT1886Inv_on_HLG_to_SDRv_block_invoke()
{
  char v1 = 0;
  uint64_t result = ColorSyncDefaultsGetBoolean("ColorSyncDisableInvBT1886inHLG2SDR", &v1);
  if (result) {
    disable_ITUBT1886Inv_on_HLG_to_SDR(void)::disabled = v1;
  }
  return result;
}

uint64_t ___ZL38display_referred_mapping_on_SDR_to_HLGv_block_invoke()
{
  char v1 = 0;
  uint64_t result = ColorSyncDefaultsGetBoolean("ColorSyncDisplayReferredMappingInSDR2HLG", &v1);
  if (result) {
    display_referred_mapping_on_SDR_to_HLG(void)::enabled = v1;
  }
  return result;
}

uint64_t ___ZL26get_useITUBT1886ForEngammaPK14__CFDictionary_block_invoke()
{
  uint64_t result = ColorSyncDefaultsGetBoolean("USEBT1886FORCOREVIDEOGAMMA", &get_useITUBT1886ForEngamma(__CFDictionary const*)::enable_from_prefs);
  if ((result & 1) == 0) {
    get_useITUBT1886ForEngamma(__CFDictionary const*)::enable_from_prefs = 0;
  }
  return result;
}

uint64_t ___ZL26get_useITUBT1886ForDegammaPK14__CFDictionary_block_invoke()
{
  uint64_t result = ColorSyncDefaultsGetBoolean("USEBT1886FORCOREVIDEOGAMMA", &get_useITUBT1886ForDegamma(__CFDictionary const*)::enable_from_prefs);
  if ((result & 1) == 0) {
    get_useITUBT1886ForDegamma(__CFDictionary const*)::enable_from_prefs = 0;
  }
  return result;
}

void CMMLutOutputProfile::~CMMLutOutputProfile(CMMLutOutputProfile *this)
{
  CMMProfile::~CMMProfile(this);

  CMMBase::operator delete(v1);
}

void CMMMonoOutputProfile::~CMMMonoOutputProfile(CMMMonoOutputProfile *this)
{
  CMMProfile::~CMMProfile(this);

  CMMBase::operator delete(v1);
}

void CMMLutDisplayProfile::~CMMLutDisplayProfile(CMMLutDisplayProfile *this)
{
  CMMProfile::~CMMProfile(this);

  CMMBase::operator delete(v1);
}

uint64_t CMMLutInputProfile::GetConversionType(CMMLutInputProfile *this, __CFString *a2)
{
  return CMMProfile::GenericGetConversionType((CMMProfile *)a2, a2);
}

void CMMLutInputProfile::~CMMLutInputProfile(CMMLutInputProfile *this)
{
  CMMProfile::~CMMProfile(this);

  CMMBase::operator delete(v1);
}

uint64_t CMMMonoInputProfile::GetConversionType(CMMMonoInputProfile *this, __CFString *a2)
{
  return CMMProfile::GenericGetConversionType((CMMProfile *)a2, a2);
}

void CMMMonoInputProfile::~CMMMonoInputProfile(CMMMonoInputProfile *this)
{
  CMMProfile::~CMMProfile(this);

  CMMBase::operator delete(v1);
}

void TVector<CMMProfileInfo,TAllocator<CMMProfileInfo>>::~TVector(uint64_t a1)
{
  float v2 = (pthread_mutex_t ***)(a1 + 8);
  std::vector<CMMProfileInfo,TAllocator<CMMProfileInfo>>::__destroy_vector::operator()[abi:ne180100](&v2);

  CMMBase::operator delete((pthread_mutex_t **)a1);
}

uint64_t TVector<CMMProfileInfo,TAllocator<CMMProfileInfo>>::~TVector(uint64_t a1)
{
  CFDictionaryRef v3 = (pthread_mutex_t ***)(a1 + 8);
  std::vector<CMMProfileInfo,TAllocator<CMMProfileInfo>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

BOOL DoApplyTransform(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, const void *a5, unsigned int a6, unsigned int a7, uint64_t a8, uint64_t a9, unint64_t a10, void *a11, int a12, int a13, uint64_t a14, uint64_t a15, const __CFDictionary *a16)
{
  uint64_t v20 = a1 + 64;
  v43[0] = *(void **)(a1 + 64);
  CMMMemMgr::RetainMemList((CMMMemMgr *)v43);
  float v21 = *(void **)(v20 + 8);
  char v22 = *(unsigned char *)(v20 + 60);
  if (a16)
  {
    char v30 = *(unsigned char *)(v20 + 60);
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a16, (const void *)kColorSyncConvertThreadCount);
    int v24 = 1;
    if (Value)
    {
      LODWORD(valuePtr[0]) = 1;
      if (CFNumberGetValue(Value, kCFNumberIntType, valuePtr)) {
        int v24 = valuePtr[0];
      }
      else {
        int v24 = 1;
      }
    }
    CFBooleanRef v25 = (const __CFBoolean *)CFDictionaryGetValue(a16, (const void *)kColorSyncConvertUseVectorUnit);
    char v22 = v30;
    if (v25) {
      char v22 = CFBooleanGetValue(v25) != 0;
    }
  }
  else
  {
    int v24 = 1;
  }
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v38 = 0u;
  v37[0] = &unk_1ED983258;
  v37[1] = v43;
  memset(&valuePtr[5], 0, 368);
  valuePtr[0] = v21;
  valuePtr[1] = 0;
  valuePtr[2] = v37;
  long long valuePtr[3] = v20;
  LOBYTE(valuePtr[51]) = v22;
  BYTE1(valuePtr[51]) = 1;
  *(_DWORD *)((char *)&valuePtr[51] + 2) = v24;
  *(void *)((char *)&valuePtr[51] + 6) = 0;
  uint64_t v26 = 17;
  if (a4 < 0x11) {
    uint64_t v26 = a4;
  }
  valuePtr[4] = a4;
  if (v26) {
    memcpy(&valuePtr[5], a5, 8 * v26);
  }
  valuePtr[22] = a2;
  valuePtr[23] = a3;
  valuePtr[24] = a8;
  valuePtr[25] = a9;
  valuePtr[26] = __PAIR64__(a7, a6);
  LODWORD(valuePtr[27]) = *(_DWORD *)(a1 + 88);
  unint64_t v27 = 17;
  if (a10 < 0x11) {
    unint64_t v27 = a10;
  }
  *(void *)((char *)&valuePtr[27] + 4) = a10;
  if (v27) {
    memcpy((char *)&valuePtr[28] + 4, a11, 8 * v27);
  }
  *(void *)((char *)&valuePtr[45] + 4) = a2;
  *(void *)((char *)&valuePtr[46] + 4) = a3;
  *(void *)((char *)&valuePtr[47] + 4) = a14;
  *(void *)((char *)&valuePtr[48] + 4) = a15;
  HIDWORD(valuePtr[49]) = a12;
  LODWORD(valuePtr[50]) = a13;
  HIDWORD(valuePtr[50]) = *(_DWORD *)(a1 + 84);
  pthread_mutex_lock((pthread_mutex_t *)a1);
  for (; v21; float v21 = (void *)v21[2])
    (*(void (**)(void *, void *))(*v21 + 88))(v21, valuePtr);
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  memcpy(__dst, valuePtr, sizeof(__dst));
  BOOL v28 = apply_cmm_transform((pthread_mutex_t *)a1, __dst);
  ConversionManager::~ConversionManager((ConversionManager *)v37);
  CMMMemMgr::ReleaseMemList(v43);
  return v28;
}

void sub_18BE5ACCC(_Unwind_Exception *a1)
{
  CMMMemMgr::ReleaseMemList((void **)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL apply_cmm_transform(pthread_mutex_t *a1, void *a2)
{
  float v4 = (char *)a2 + 364;
  pthread_mutex_lock(a1);
  float v5 = (void *)*a2;
  BOOL v6 = (void *)a2[1];
  while (v5 != v6)
  {
    (*(void (**)(void *, void *))(*v5 + 88))(v5, a2);
    float v5 = (void *)v5[2];
  }
  pthread_mutex_unlock(a1);
  if (*(_DWORD *)(v4 + 46) != 1 && *(void *)v4 * *((void *)v4 + 1) >= 0x2801uLL)
  {
    float v21 = 0;
    CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v21);
    int v9 = CMMBase::NewInternal(0x10uLL, (void **)&v21);
    *int v9 = &unk_1ED982F18;
    v9[1] = 0;
    if (CMMThreadManager::GetNofCPUs(void)::predicate != -1) {
      dispatch_once(&CMMThreadManager::GetNofCPUs(void)::predicate, &__block_literal_global_245);
    }
    if ((unint64_t)CMMThreadManager::GetNofCPUs(void)::nofCPUs >= 2
      && ((unsigned int v10 = *(_DWORD *)(v4 + 46)) == 0
        ? ((unint64_t)CMMThreadManager::GetNofCPUs(void)::nofCPUs <= 1
         ? (unint64_t v11 = 1)
         : (unint64_t v11 = CMMThreadManager::GetNofCPUs(void)::nofCPUs))
        : v10 >= 0x100
        ? (unint64_t v11 = 256)
        : (unint64_t v11 = v10),
          uint64_t v12 = malloc_type_calloc(1uLL, 448 * (v11 - 1) + 464, 0xACDEC48CuLL),
          uint64_t v13 = (uint64_t)v12,
          (v9[1] = v12) != 0))
    {
      uint64_t v14 = 0;
      v12[1] = v11 - 1;
      CFNumberRef v15 = v12 + 56;
      do
      {
        *(v15 - 1) = v12;
        *CFNumberRef v15 = v14++;
        v15 += 56;
      }
      while (v11 != v14);
      *(void *)(v4 + 50) = v12;
      unint64_t v16 = *((void *)v4 + 1);
      if (v16 < 2 || v16 >= v11)
      {
        if (v16 == 1)
        {
          if (*(void *)v4 >= v11) {
            unint64_t v16 = v11;
          }
          else {
            unint64_t v16 = *(void *)v4;
          }
        }
        else
        {
          unint64_t v16 = v11;
        }
      }
      CFDictionaryRef v18 = dispatch_group_create();
      CMMThreadManager::ActivateTask(v18, v13, v16, (uint64_t)a2);
      dispatch_release(v18);
      if (v16)
      {
        unint64_t v19 = (int *)(v13 + 460);
        while (1)
        {
          int v8 = *v19;
          if (*v19) {
            break;
          }
          v19 += 112;
          if (!--v16) {
            goto LABEL_37;
          }
        }
      }
      else
      {
LABEL_37:
        int v8 = 0;
      }
    }
    else
    {
      *(void *)(v4 + 50) = 0;
      int v8 = CMMProcessBitmap((uint64_t)a2);
    }
    (*(void (**)(void *))(*v9 + 8))(v9);
    CMMMemMgr::ReleaseMemList(&v21);
  }
  else
  {
    int v8 = CMMProcessBitmap((uint64_t)a2);
  }
  return v8 == 0;
}

void sub_18BE5AF5C(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    float v4 = *(void **)(v2 + 8);
    if (!v4) {
      goto LABEL_6;
    }
  }
  else
  {
    float v4 = *(void **)(v2 + 8);
    if (!v4)
    {
LABEL_6:
      __cxa_end_catch();
      JUMPOUT(0x18BE5AEF4);
    }
  }
  free(v4);
  *(void *)(v2 + CMMBase::operator delete(this - 8) = 0;
  goto LABEL_6;
}

void sub_18BE5AF9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMMemMgr::ReleaseMemList((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMProcessBitmap(uint64_t a1)
{
  long long v131 = 0u;
  long long v132 = 0u;
  long long v129 = 0u;
  long long v130 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  long long v121 = 0u;
  long long v122 = 0u;
  long long v119 = 0u;
  long long v120 = 0u;
  long long v117 = 0u;
  long long v118 = 0u;
  long long v116 = 0u;
  long long v115 = 0u;
  long long v114 = 0u;
  long long v113 = 0u;
  long long v112 = 0u;
  memset(v111, 0, sizeof(v111));
  int8x16_t v110 = 0u;
  long long v109 = 0u;
  long long v108 = 0u;
  memset(v107, 0, sizeof(v107));
  long long v106 = 0u;
  long long v105 = 0u;
  BOOL v104 = &unk_1ED983430;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v87 = 0u;
  long long v86 = 0u;
  long long v85 = 0u;
  long long v84 = 0u;
  long long v83 = 0u;
  long long v82 = 0u;
  memset(v81, 0, sizeof(v81));
  int8x16_t v80 = 0u;
  long long v79 = 0u;
  long long v78 = 0u;
  memset(v77, 0, sizeof(v77));
  long long v76 = 0u;
  BOOL v75 = &unk_1ED983410;
  long long v74 = 0u;
  long long v73 = 0u;
  long long v72 = 0u;
  long long v71 = 0u;
  long long v70 = 0u;
  long long v69 = 0u;
  long long v68 = 0u;
  long long v67 = 0u;
  long long v66 = 0u;
  memset(v65, 0, sizeof(v65));
  int v2 = CMMGetPrecisionFromData(*(_DWORD *)(a1 + 396), *(_DWORD *)(a1 + 400));
  int v3 = CMMGetPrecisionFromData(*(_DWORD *)(a1 + 208), *(_DWORD *)(a1 + 212));
  float v4 = *(void **)a1;
  float v5 = *(void **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 24);
  int v7 = *(unsigned __int8 *)(v6 + 52);
  if (*(void **)a1 == v5)
  {
    int v8 = 0;
  }
  else
  {
    int v63 = *(unsigned __int8 *)(v6 + 52);
    int v8 = 0;
    do
    {
      int v9 = (*(uint64_t (**)(void *))(*v4 + 192))(v4);
      if (v9 > v8) {
        int v8 = v9;
      }
      float v4 = (void *)v4[2];
    }
    while (v4 != v5);
    uint64_t v6 = *(void *)(a1 + 24);
    int v7 = v63;
  }
  unsigned int v10 = (long long *)(a1 + 364);
  if (v8 >= 4 || v8 <= 0 || v7 == 0) {
    int v13 = v8;
  }
  else {
    int v13 = 4;
  }
  if (v2 > v13) {
    int v13 = v2;
  }
  if (v13 <= v3) {
    int v14 = v3;
  }
  else {
    int v14 = v13;
  }
  if (v14 == 1) {
    unint64_t v15 = 2;
  }
  else {
    unint64_t v15 = *(void *)(v6 + 32) + 1;
  }
  uint64_t v62 = (unsigned char *)(a1 + 408);
  long long v64 = (void *)(a1 + 32);
  if (v14 == 5)
  {
    if (v15 > 0xF) {
      goto LABEL_97;
    }
    int v16 = *(_DWORD *)(a1 + 404);
    if (v16 == 1281450528) {
      int v16 = 1145856354;
    }
    if (v16 == *(_DWORD *)(v6 + 20))
    {
      uint64_t v17 = *(void *)(a1 + 372) * *(void *)(a1 + 364);
      *(void *)&long long v105 = &unk_1ED982570;
      *((void *)&v105 + 1) = v17;
      *(void *)&long long v106 = v15;
      *((void *)&v106 + 1) = 0xC00 / v15 * v15;
      LODWORD(v107[0]) = 5;
      CMMDataBaseClass::CMMDataBaseClass(&v107[1], (void *)(a1 + 220), *(void *)(a1 + 388) >> 2, *(void *)(a1 + 380) >> 2);
      *(void *)&long long v105 = &unk_1ED984F10;
      *((void *)&v108 + 1) = a1 + 220;
      uint64_t v18 = CMMGetChannelCountFromCMMSpace(*(_DWORD *)(a1 + 404));
      long long v19 = *v10;
      int8x16_t v20 = (int8x16_t)vshrq_n_u64(*(uint64x2_t *)(a1 + 380), 2uLL);
      int8x16_t v110 = vextq_s8(v20, v20, 8uLL);
      *(_OWORD *)&v111[1] = v19;
      long long v109 = (unint64_t)v18;
      *(void *)&long long v112 = 0;
      v111[3] = 0;
      uint64_t v6 = *(void *)(a1 + 24);
    }
    int v29 = *(_DWORD *)(v6 + 24);
    int v30 = *(_DWORD *)(a1 + 216);
    if (v30 == 1281450528) {
      int v30 = 1145856354;
    }
    if (v30 == v29)
    {
      *(void *)&long long v76 = &unk_1ED982538;
      *((void *)&v76 + 1) = v15;
      LODWORD(v77[0]) = 5;
      CMMDataBaseClass::CMMDataBaseClass(&v77[1], v64, *(void *)(a1 + 200) >> 2, *(void *)(a1 + 192) >> 2);
      *(void *)&long long v76 = &unk_1ED984ED0;
      *((void *)&v78 + 1) = a1 + 32;
      uint64_t v31 = CMMGetChannelCountFromCMMSpace(*(_DWORD *)(a1 + 216));
      long long v32 = *(_OWORD *)(a1 + 176);
      int8x16_t v33 = (int8x16_t)vshrq_n_u64(*(uint64x2_t *)(a1 + 192), 2uLL);
      int8x16_t v80 = vextq_s8(v33, v33, 8uLL);
      *(_OWORD *)&v81[1] = v32;
      long long v79 = (unint64_t)v31;
      v81[3] = 0;
      *(void *)&long long v82 = 0;
    }
    if ((*(_DWORD *)(a1 + 212) & 0x1Fu) - 1 <= 3)
    {
      unsigned int v34 = (*(_DWORD *)(a1 + 400) & 0x1F) - 5;
      *(void *)&v65[0] = &unk_1ED9835A8;
      *(void *)&long long v67 = a1 + 32;
      *((void *)&v67 + 1) = a1 + 220;
      BYTE8(v66) = v34 < 0xFFFFFFFC;
      if (v34 >= 0xFFFFFFFC)
      {
        if (*(void *)(a1 + 220) != 1) {
          goto LABEL_97;
        }
        uint64_t v51 = *(void *)(a1 + 228);
        uint64_t v35 = v51 + (CMMAlphaByteOffset((_DWORD *)(a1 + 220)) & 0xFFFFFFFFFFFFFFFCLL);
      }
      else
      {
        uint64_t v35 = 0;
      }
      *(void *)&long long v68 = v35;
      if (*v64 == 1)
      {
        if (BYTE8(v66))
        {
          float v52 = *(float *)"";
          if ((*(_DWORD *)(a1 + 212) & 0x7000) != 0x4000) {
            float v52 = 1.0;
          }
          *(float *)&long long v73 = v52;
          goto LABEL_92;
        }
        if (((*(_DWORD *)(a1 + 212) ^ *(_DWORD *)(a1 + 400)) & 0x7000) == 0)
        {
          LODWORD(v73) = 1065353216;
LABEL_92:
          uint64_t v53 = *(void *)(a1 + 40);
          *((void *)&v68 + 1) = v53 + (CMMAlphaByteOffset((_DWORD *)v67) & 0xFFFFFFFFFFFFFFFCLL);
          if (BYTE8(v66))
          {
            uint64_t v54 = 0;
            uint64_t v55 = 0;
            uint64_t v56 = 0;
          }
          else
          {
            uint64_t v54 = *(void *)(a1 + 388) >> 2;
            uint64_t v55 = *(void *)(a1 + 380) >> 2;
            uint64_t v56 = *(void *)v10;
          }
          uint64_t v57 = *(void *)(a1 + 192) >> 2;
          uint64_t v58 = *(void *)(a1 + 200) >> 2;
          *(void *)&long long v69 = v54;
          *((void *)&v69 + 1) = v58;
          *(void *)&long long v70 = v55;
          *((void *)&v70 + 1) = v57;
          uint64_t v59 = *(void *)(a1 + 176);
          *(void *)&long long v71 = v56;
          *((void *)&v71 + 1) = v59;
          long long v72 = 0uLL;
          return ConversionManager::ApplySequenceToBitmap();
        }
      }
LABEL_97:
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = -171;
    }
  }
  else
  {
    if (v15 > 0xF) {
      goto LABEL_97;
    }
    uint64_t v21 = CMMGetChannelCountFromCMMSpace(*(_DWORD *)(a1 + 404));
    int v22 = *(_DWORD *)(a1 + 396);
    unsigned int v23 = (*(_DWORD *)(a1 + 400) & 0x1F) - 1;
    BOOL v25 = (*(_DWORD *)(a1 + 400) & 0x7000) == 0x3000 || (*(_DWORD *)(a1 + 400) & 0x7000) == 0x4000;
    BOOL v26 = v21 == 3 && v22 == 2;
    char v27 = !v26;
    BOOL v28 = v26 && *v62 != 0;
    *(unsigned char *)(a1 + 40CMMBase::operator delete(this - 8) = v28;
    uint64_t v36 = *(void *)(a1 + 372) * *(void *)v10;
    if (v14 == 1 && v23 >= 2) {
      char v38 = v27;
    }
    else {
      char v38 = 1;
    }
    if (v38)
    {
      if (v22 != 3) {
        goto LABEL_97;
      }
      *(void *)&long long v105 = &unk_1ED982570;
      *((void *)&v105 + 1) = v36;
      *(void *)&long long v106 = v15;
      *((void *)&v106 + 1) = (unsigned __int16)(0xC00u / (unsigned __int16)v15 * v15);
      LODWORD(v107[0]) = v14;
      long long v39 = CMMDataBaseClass::CMMDataBaseClass(&v107[1], (void *)(a1 + 220), *(void *)(a1 + 388) >> 1, *(void *)(a1 + 380) >> 1);
      LOBYTE(v112) = v25;
      CMM16BitNChanData::SetParams(v39, a1 + 220);
      long long v40 = off_1ED983488;
    }
    else
    {
      *(void *)&long long v105 = &unk_1ED982570;
      *((void *)&v105 + 1) = v36;
      *(void *)&long long v106 = v15;
      *((void *)&v106 + 1) = 0xC00 / v15 * v15;
      LODWORD(v107[0]) = 1;
      long long v41 = CMMDataBaseClass::CMMDataBaseClass(&v107[1], (void *)(a1 + 220), *(void *)(a1 + 388), *(void *)(a1 + 380));
      CMM8Bit3ChanData::SetParams((uint64_t)v41, a1 + 220);
      long long v40 = (uint64_t (**)())&unk_1ED985030;
    }
    *(void *)&long long v105 = v40;
    uint64_t v42 = CMMGetChannelCountFromCMMSpace(*(_DWORD *)(a1 + 216));
    int v43 = *(_DWORD *)(a1 + 208);
    int v44 = *(_DWORD *)(a1 + 212);
    BOOL v46 = (v44 & 0x7000) == 0x3000 || (v44 & 0x7000) == 0x4000;
    if (v42 == 3 && v43 == 2)
    {
      if (v14 != 1 || (v44 & 0x1Fu) - 1 < 2) {
        goto LABEL_97;
      }
      *(void *)&long long v76 = &unk_1ED982538;
      *((void *)&v76 + 1) = v15;
      LODWORD(v77[0]) = 1;
      uint64_t v48 = CMMDataBaseClass::CMMDataBaseClass(&v77[1], v64, *(void *)(a1 + 200), *(void *)(a1 + 192));
      CMM8Bit3ChanData::SetParams((uint64_t)v48, (uint64_t)v64);
      unsigned int v49 = (uint64_t (**)())&unk_1ED984FF8;
    }
    else
    {
      unsigned char *v62 = 0;
      if (v43 != 3) {
        goto LABEL_97;
      }
      *(void *)&long long v76 = &unk_1ED982538;
      *((void *)&v76 + 1) = v15;
      LODWORD(v77[0]) = v14;
      int v50 = CMMDataBaseClass::CMMDataBaseClass(&v77[1], v64, *(void *)(a1 + 200) >> 1, *(void *)(a1 + 192) >> 1);
      LOBYTE(v82) = v46;
      CMM16BitNChanData::SetParams(v50, (uint64_t)v64);
      unsigned int v49 = off_1ED983450;
    }
    *(void *)&long long v76 = v49;
    if ((*(_DWORD *)(a1 + 212) & 0x1Fu) - 1 <= 3) {
      CMMAlphaCopier::CMMAlphaCopier((uint64_t)v65, (uint64_t)v64, a1 + 220, (*(_DWORD *)(a1 + 400) & 0x1Fu) - 5 < 0xFFFFFFFC);
    }
  }
  return ConversionManager::ApplySequenceToBitmap();
}

void sub_18BE5B860(void *a1)
{
}

intptr_t CMMThreadManager::ActivateTask(NSObject *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  if (!a4) {
    goto LABEL_12;
  }
  memcpy(__src, (const void *)a4, sizeof(__src));
  if (a3)
  {
    uint64_t v8 = a4 + 364;
    uint64_t v9 = a2 + 448 * (a3 - 1) + 16;
    memcpy((void *)v9, (const void *)a4, 0x1A6uLL);
    uint64_t v11 = *(void *)(a4 + 220);
    uint64_t v10 = a4 + 220;
    uint64_t v12 = *(void *)(v10 + 8);
    long long v13 = *(_OWORD *)(v10 + 96);
    long long v101 = *(_OWORD *)(v10 + 80);
    long long v102 = v13;
    long long v14 = *(_OWORD *)(v10 + 128);
    long long v103 = *(_OWORD *)(v10 + 112);
    long long v104 = v14;
    long long v15 = *(_OWORD *)(v10 + 32);
    long long v97 = *(_OWORD *)(v10 + 16);
    long long v98 = v15;
    long long v16 = *(_OWORD *)(v10 + 64);
    long long v99 = *(_OWORD *)(v10 + 48);
    long long v100 = v16;
    unint64_t v17 = *(void *)v8;
    unint64_t v18 = *(void *)(v8 + 8);
    *(_OWORD *)((char *)v87 + 12) = *(_OWORD *)(v8 + 28);
    v87[0] = *(_OWORD *)(v8 + 16);
    uint64_t v20 = *(void *)(v8 + 16);
    uint64_t v19 = *(void *)(v8 + 24);
    int v85 = *(_DWORD *)(v10 + 184);
    uint64_t v84 = *(void *)(v10 + 176);
    uint64_t v21 = *(void *)(v10 - 188);
    uint64_t v22 = *(void *)(v10 - 180);
    long long v23 = *(_OWORD *)(v10 - 172);
    long long v24 = *(_OWORD *)(v10 - 156);
    long long v25 = *(_OWORD *)(v10 - 124);
    long long v91 = *(_OWORD *)(v10 - 140);
    long long v92 = v25;
    long long v89 = v23;
    long long v90 = v24;
    long long v26 = *(_OWORD *)(v10 - 108);
    long long v27 = *(_OWORD *)(v10 - 92);
    long long v28 = *(_OWORD *)(v10 - 60);
    long long v95 = *(_OWORD *)(v10 - 76);
    long long v96 = v28;
    long long v93 = v26;
    long long v94 = v27;
    unint64_t v29 = *(void *)(v10 - 44);
    unint64_t v30 = *(void *)(v10 - 36);
    long long v31 = *(_OWORD *)(v10 - 28);
    *(_OWORD *)((char *)v86 + 12) = *(_OWORD *)(v10 - 16);
    v86[0] = v31;
    long long v32 = *(_OWORD *)(v10 - 188);
    long long v33 = *(_OWORD *)(v10 - 172);
    long long v34 = *(_OWORD *)(v10 - 140);
    long long v35 = *(_OWORD *)(v10 - 124);
    long long v77 = *(_OWORD *)(v10 - 156);
    long long v78 = v34;
    long long v75 = v32;
    long long v76 = v33;
    long long v36 = *(_OWORD *)(v10 - 108);
    long long v37 = *(_OWORD *)(v10 - 92);
    long long v38 = *(_OWORD *)(v10 - 60);
    long long v82 = *(_OWORD *)(v10 - 76);
    long long v83 = v38;
    long long v80 = v36;
    long long v81 = v37;
    long long v79 = v35;
    uint64_t v39 = *(void *)(v10 - 28);
    uint64_t v40 = *(void *)(v10 - 20);
    uint64_t v73 = *(void *)(v10 - 12);
    int v74 = *(_DWORD *)(v10 - 4);
    uint64_t v70 = a2;
    group = a1;
    uint64_t v69 = v11;
    uint64_t v67 = v40;
    uint64_t v68 = v21;
    uint64_t v66 = v39;
    if (v18 < 2)
    {
      if (a3 <= v17)
      {
        unint64_t v42 = v17 / a3;
        unint64_t v62 = v29 - v17 / a3;
        unint64_t v63 = v18;
        unint64_t v43 = v29 / a3;
        unint64_t v41 = v19 * (v17 / a3);
        unint64_t v64 = v29 - v29 / a3;
        unint64_t v65 = v30;
        unint64_t v61 = v30;
        uint64_t v44 = v40;
        unint64_t v45 = v29 / a3;
        goto LABEL_11;
      }
    }
    else if (v18 >= a3)
    {
      v18 /= a3;
      unint64_t v62 = v17;
      unint64_t v63 = v30 - v18;
      unint64_t v41 = v20 * v18;
      unint64_t v64 = v29;
      unint64_t v65 = v30 - v30 / a3;
      unint64_t v42 = v17;
      unint64_t v43 = v29;
      uint64_t v44 = v39;
      unint64_t v61 = v30 / a3;
      unint64_t v45 = v30 / a3;
LABEL_11:
      uint64_t v47 = v20;
      uint64_t v48 = v19;
      uint64_t v59 = v12 + v41;
      uint64_t v60 = v22 + v44 * v45;
      memmove((void *)(v9 + 220), (const void *)v10, 0x90uLL);
      *(void *)(v9 + 364) = v42;
      *(void *)(v9 + 372) = v18;
      *(void *)(v9 + 380) = v47;
      *(void *)(v9 + 38CMMBase::operator delete(this - 8) = v48;
      *(void *)(v9 + 396) = v84;
      *(_DWORD *)(v9 + 404) = v85;
      long long v49 = v82;
      *(_OWORD *)(v9 + 12CMMBase::operator delete(this - 8) = v81;
      *(_OWORD *)(v9 + 144) = v49;
      *(_OWORD *)(v9 + 160) = v83;
      long long v50 = v78;
      *(_OWORD *)(v9 + 64) = v77;
      *(_OWORD *)(v9 + 80) = v50;
      long long v51 = v80;
      *(_OWORD *)(v9 + 96) = v79;
      *(_OWORD *)(v9 + 112) = v51;
      long long v52 = v76;
      *(_OWORD *)(v9 + 32) = v75;
      *(_OWORD *)(v9 + 4CMMBase::operator delete(this - 8) = v52;
      *(void *)(v9 + 176) = v43;
      *(void *)(v9 + 184) = v61;
      *(void *)(v9 + 192) = v66;
      *(void *)(v9 + 200) = v67;
      *(void *)(v9 + 20CMMBase::operator delete(this - 8) = v73;
      *(_DWORD *)(v9 + 216) = v74;
      *(void *)&__src[220] = v69;
      *(void *)&__src[228] = v59;
      *(_OWORD *)&__src[300] = v101;
      *(_OWORD *)&__src[316] = v102;
      *(_OWORD *)&__src[332] = v103;
      *(_OWORD *)&__src[348] = v104;
      *(_OWORD *)&__src[268] = v99;
      *(_OWORD *)&__src[284] = v100;
      *(_OWORD *)&__src[236] = v97;
      *(_OWORD *)&__src[252] = v98;
      *(void *)&__src[364] = v62;
      *(void *)&__src[372] = v63;
      *(_OWORD *)&__src[392] = *(_OWORD *)((char *)v87 + 12);
      *(_OWORD *)&__src[380] = v87[0];
      *(void *)&__src[32] = v68;
      *(void *)&__src[40] = v60;
      *(_OWORD *)&__src[80] = v91;
      *(_OWORD *)&__src[96] = v92;
      *(_OWORD *)&__src[48] = v89;
      *(_OWORD *)&__src[64] = v90;
      *(_OWORD *)&__src[144] = v95;
      *(_OWORD *)&__src[160] = v96;
      *(_OWORD *)&__src[112] = v93;
      *(_OWORD *)&__src[128] = v94;
      *(void *)&__src[176] = v64;
      *(void *)&__src[184] = v65;
      *(_OWORD *)&__src[204] = *(_OWORD *)((char *)v86 + 12);
      *(_OWORD *)&__src[192] = v86[0];
      global_queue = dispatch_get_global_queue(2, 0);
      dispatch_group_async_f(group, global_queue, (void *)v9, (dispatch_function_t)CMMConvTask);
      uint64_t v54 = *(long long **)(v9 + 24);
      long long v55 = v54[3];
      long long v57 = *v54;
      long long v56 = v54[1];
      v72[2] = v54[2];
      v72[3] = v55;
      v72[0] = v57;
      v72[1] = v56;
      *(void *)&__src[24] = v72;
      return CMMThreadManager::ActivateTask(group, v70, a3 - 1, __src);
    }
LABEL_12:
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -171;
  }

  return dispatch_group_wait(a1, 0xFFFFFFFFFFFFFFFFLL);
}

uint64_t CMMConvTask(void *a1)
{
  uint64_t result = CMMProcessBitmap(a1[53] + 448 * a1[54] + 16);
  *((_DWORD *)a1 + 111) = result;
  return result;
}

uint64_t ___ZN16CMMThreadManager10GetNofCPUsEv_block_invoke()
{
  long long v4 = 0u;
  long long v5 = 0u;
  *(_OWORD *)host_info_out = 0u;
  mach_msg_type_number_t host_info_outCnt = 12;
  host_t v0 = MEMORY[0x18C13A830]();
  if (host_info(v0, 1, host_info_out, &host_info_outCnt)) {
    CMMThreadManager::GetNofCPUs(void)::nofCPUs = 0;
  }
  uint64_t result = mach_port_deallocate(*MEMORY[0x1E4F14960], v0);
  CMMThreadManager::GetNofCPUs(void)::nofCPUs = host_info_out[1];
  return result;
}

uint64_t DoFlattenSimplifiedConversion(uint64_t a1, __CFArray *a2, const void *a3, unint64_t a4)
{
  uint64_t v8 = *(ConversionManager **)(a1 + 72);
  uint64_t v12 = *(void **)(a1 + 64);
  CMMMemMgr::RetainMemList((CMMMemMgr *)&v12);
  CFDictionaryRef v9 = compact_and_flatten_sequence((pthread_mutex_t *)a1, v8, 0, (uint64_t)&v12, *(_DWORD *)(a1 + 84), *(_DWORD *)(a1 + 88), (void *)kColorSyncTransformSimplifiedConversionData, a3, a4);
  if (v9)
  {
    CFArrayAppendValue(a2, v9);
    uint64_t v10 = 0;
    CFRelease(v9);
  }
  else
  {
    uint64_t v10 = 0x7FFFFFFFLL;
  }
  CMMMemMgr::ReleaseMemList(&v12);
  return v10;
}

void sub_18BE5BE6C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!v1) {
    JUMPOUT(0x18BE5BE44);
  }
  JUMPOUT(0x18BE5BE34);
}

void sub_18BE5BE98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMMemMgr::ReleaseMemList((void **)va);
  _Unwind_Resume(a1);
}

CFDictionaryRef compact_and_flatten_sequence(pthread_mutex_t *a1, ConversionManager *this, CMMConvNode *a3, uint64_t a4, int a5, int a6, void *a7, const void *a8, unint64_t a9)
{
  unint64_t v16 = a9;
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  long long v99 = 0u;
  long long v100 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v96 = 0u;
  v95[0] = &unk_1ED983258;
  v95[1] = a4;
  if (!a9)
  {
    unint64_t MaxCLUTNofPoints = ConversionManager::GetMaxCLUTNofPoints(this, a3, a3);
    if (MaxCLUTNofPoints) {
      unint64_t v16 = MaxCLUTNofPoints;
    }
    else {
      unint64_t v16 = 17;
    }
  }
  uint64_t v18 = CMMGetChannelCountFromCMMSpace(a5);
  uint64_t v25 = CMMGetChannelCountFromCMMSpace(a6);
  long long v52 = this;
  uint64_t v53 = a3;
  int v54 = a6;
  int v55 = a5;
  if (v18)
  {
    unint64_t v26 = 1;
    uint64_t v27 = v18;
    do
    {
      unint64_t v28 = v26;
      v26 *= v16;
      BOOL v30 = v26 >= v28 && v26 >= v16;
      CMMThrowExceptionWithLog(v30, "Overflow in Power", v19, v20, v21, v22, v23, v24);
      --v27;
    }
    while (v27);
    if (!is_mul_ok(v18, v26)) {
      goto LABEL_23;
    }
    unint64_t v31 = v26 * v18;
    if (v26 * v18)
    {
      if (v31 >> 62) {
        goto LABEL_23;
      }
    }
  }
  else
  {
    unint64_t v31 = 0;
    unint64_t v26 = 1;
  }
  long long v51 = a1;
  if (v25)
  {
    if (!is_mul_ok(v25, v26) || (unint64_t v32 = v26 * v25) != 0 && v32 >> 62)
    {
LABEL_23:
      CFDictionaryRef v33 = 0;
      goto LABEL_54;
    }
  }
  else
  {
    unint64_t v32 = 0;
  }
  long long v34 = (unsigned __int16 *)operator new[](4 * v31, MEMORY[0x1E4FBA2D0]);
  if (!NxMLUTFillWith16BitUniformGridData(v34, v16, v18, v31))
  {
    unint64_t v42 = 0;
    long long v37 = 0;
    goto LABEL_47;
  }
  long long v50 = a7;
  if (v31 >> 60) {
    size_t v35 = -1;
  }
  else {
    size_t v35 = 16 * v31;
  }
  long long v36 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  long long v37 = operator new[](v35, MEMORY[0x1E4FBA2D0]);
  if (v32 >> 60) {
    size_t v38 = -1;
  }
  else {
    size_t v38 = 16 * v32;
  }
  uint64_t v39 = (UInt8 *)operator new[](v38, v36);
  unint64_t v42 = v39;
  CFDictionaryRef v33 = 0;
  if (!v37 || !v39) {
    goto LABEL_48;
  }
  keys = v34;
  uint64_t v111 = 1;
  CFStringRef v112 = (CFStringRef)v31;
  CFStringRef v113 = (CFStringRef)(2 * v31);
  values = v37;
  uint64_t v102 = 1;
  unint64_t v103 = v31;
  CFNumberRef v104 = (CFNumberRef)(4 * v31);
  ColorSync_vImageConvert_16UToF((uint64_t)&keys, (uint64_t)&values, v40, v41);
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  char v43 = v51[1].__opaque[52];
  v60[0] = v52;
  v60[1] = v53;
  v60[2] = v95;
  void v60[3] = v51 + 1;
  v60[4] = 1;
  v60[5] = v42;
  unint64_t v69 = v26;
  uint64_t v70 = 1;
  uint64_t v71 = v26 * 4 * v25;
  uint64_t v72 = 4 * v25;
  uint64_t v73 = 7;
  uint64_t v75 = 1;
  long long v76 = v37;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v78 = 0u;
  long long v77 = 0u;
  unint64_t v85 = v26;
  uint64_t v86 = 1;
  uint64_t v87 = v26 * 4 * v18;
  uint64_t v88 = 4 * v18;
  uint64_t v89 = 7;
  int v74 = v54;
  int v90 = v55;
  char v91 = v43;
  char v92 = 1;
  int v93 = 1;
  uint64_t v94 = 0;
  if (!apply_cmm_transform(v51, v60))
  {
    CFDictionaryRef v33 = 0;
    if (!v34) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  int v59 = NxMTransformFormatFromValue(a8);
  CFDataRef v46 = NxMLUTCreateData(v59, v42, 1, v16, v18, v25, v44, v45);
  if (!v46)
  {
LABEL_47:
    CFDictionaryRef v33 = 0;
    goto LABEL_48;
  }
  keys = (void *)kColorSyncTransformCodeFragmentType;
  uint64_t v111 = (uint64_t)kColorSyncConversion3DLut;
  CFStringRef v112 = kColorSyncConversionNDLut;
  CFStringRef v113 = kColorSyncConversionInpChan;
  CFStringRef v114 = kColorSyncConversionOutChan;
  CFStringRef v115 = kColorSyncConversionGridPoints;
  uint64_t v116 = kColorSyncNxMFormat;
  long long v117 = @"com.apple.cmm.FunctionDoesInputClamp";
  uint64_t v118 = 0;
  int v57 = v25;
  int valuePtr = v18;
  int v56 = v16;
  values = v50;
  uint64_t v102 = (uint64_t)v46;
  unint64_t v103 = (unint64_t)v46;
  CFNumberRef v104 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v105 = CFNumberCreate(0, kCFNumberSInt32Type, &v57);
  CFNumberRef v106 = CFNumberCreate(0, kCFNumberSInt32Type, &v56);
  CFNumberRef v47 = CFNumberCreate(0, kCFNumberSInt32Type, &v59);
  uint64_t v48 = *MEMORY[0x1E4F1CFD0];
  CFNumberRef v107 = v47;
  uint64_t v108 = v48;
  uint64_t v109 = 0;
  CFDictionaryRef v33 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 8, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v102) {
    CFRelease((CFTypeRef)v102);
  }
  if (v104) {
    CFRelease(v104);
  }
  if (v105) {
    CFRelease(v105);
  }
  if (v106) {
    CFRelease(v106);
  }
  if (v107) {
    CFRelease(v107);
  }
LABEL_48:
  if (v34) {
LABEL_49:
  }
    MEMORY[0x18C13A500](v34, 0x1000C80BDFB0063);
LABEL_50:
  if (v37) {
    MEMORY[0x18C13A500](v37, 0x1000C8052888210);
  }
  if (v42) {
    MEMORY[0x18C13A500](v42, 0x1000C8052888210);
  }
LABEL_54:
  ConversionManager::~ConversionManager((ConversionManager *)v95);
  return v33;
}

void sub_18BE5C3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  ConversionManager::~ConversionManager((ConversionManager *)&a71);
  _Unwind_Resume(a1);
}

uint64_t AppleCMMInitializeLinkProfile(ColorSyncProfile *a1, const __CFArray *a2, const __CFDictionary *a3)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  long long v97 = 0;
  CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v97);
  uint64_t v6 = (CMMProfileInfoContainer *)CMMBase::NewInternal(0x38uLL, &v97);
  CMMProfileInfoContainer::CMMProfileInfoContainer(v6, a2, a3, (CMMMemMgr *)&v97);
  if (*((void *)v6 + 2) == *((void *)v6 + 1)) {
    goto LABEL_88;
  }
  long long v105 = 0u;
  long long v106 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  long long v102 = 0u;
  *(void *)ColorSyncMD5 bytes = &unk_1ED983258;
  *(void *)&UInt8 bytes[8] = &v97;
  unint64_t MaxNofChannels = CMMProfileInfoContainer::GetMaxNofChannels(v6);
  int v8 = (*(uint64_t (**)(void, void))(**(void **)(*((void *)v6 + 1) + 8) + 48))(*(void *)(*((void *)v6 + 1) + 8), *(unsigned int *)(*((void *)v6 + 1) + 16));
  int v9 = (*(uint64_t (**)(void, void, void))(**(void **)(*((void *)v6 + 2) - 32) + 56))(*(void *)(*((void *)v6 + 2) - 32), *(unsigned int *)(*((void *)v6 + 2) - 24), 0);
  ColorMatchSequence = ConversionManager::MakeColorMatchSequence((int)bytes, v6, 0, 0);
  *(void *)((char *)v98 + 6) = 0;
  v98[0] = 1;
  LutTypeTagFromSequence = ConversionManager::MakeLutTypeTagFromSequence((uint64_t)bytes, ColorMatchSequence, (uint64_t)v98, v8, v9, MaxNofChannels, 0);
  uint64_t v11 = CMMBase::NewInternal(0x38uLL, &v97);
  *((_DWORD *)v11 + 2) = 1886610801;
  *((_OWORD *)v11 + 1) = 0u;
  *((_OWORD *)v11 + 2) = 0u;
  *((_WORD *)v11 + 24) = 0;
  void *v11 = &unk_1ED985178;
  uint64_t v12 = *((void *)v6 + 1);
  if (v12 == *((void *)v6 + 2))
  {
    unint64_t v21 = 16;
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = *(void *)(v12 + 8);
      CFDataRef Tag = CMMProfile::GetTag(v14, 1684893284);
      if (Tag)
      {
        if (!v16) {
          goto LABEL_85;
        }
        unint64_t v17 = v13 + 21 + ((v16[4] - 5) & 0xFFFFFFFFFFFFFFFCLL);
      }
      else
      {
        unint64_t v17 = v13 + 25;
      }
      uint64_t v18 = CMMProfile::GetTag(v14, 1684890724);
      if (v18)
      {
        if (!v19)
        {
LABEL_85:
          exception = __cxa_allocate_exception(4uLL);
          _DWORD *exception = -171;
        }
        unint64_t v20 = (v19[4] - 5) & 0xFFFFFFFFFFFFFFFCLL;
      }
      else
      {
        unint64_t v20 = 4;
      }
      uint64_t v13 = v17 + v20 + 4;
      v12 += 40;
    }
    while (v12 != *((void *)v6 + 2));
    unint64_t v21 = v13 + 16;
  }
  int v94 = v9;
  int v95 = v8;
  v11[4] = v21;
  uint64_t v22 = CMMBase::NewInternal(v21, &v97);
  v11[5] = v22;
  *((unsigned char *)v11 + 4CMMBase::operator delete(this - 8) = 1;
  *uint64_t v22 = 1902474096;
  uint64_t v23 = *((void *)v6 + 1);
  unint64_t v24 = *((void *)v6 + 2) - v23;
  v22[2] = bswap32(-858993459 * (v24 >> 3));
  if (v24)
  {
    uint64_t v25 = (int8x8_t *)(v22 + 3);
    do
    {
      unint64_t v26 = *(int8x8_t **)(v23 + 8);
      unsigned int v28 = v26[11].u32[0];
      unsigned int v27 = v26[11].u32[1];
      *uint64_t v25 = vrev32_s8(v26[10]);
      v25[1].i32[0] = bswap32(v28);
      v25[1].i32[1] = bswap32(v27);
      unint64_t v29 = CMMProfile::GetTag((uint64_t)v26, 1952801640);
      if (v29)
      {
        if (!v30)
        {
          char v92 = __cxa_allocate_exception(4uLL);
          *char v92 = -171;
        }
        v25[2].i32[0] = *(_DWORD *)(v30[5] + 8);
      }
      unint64_t v31 = CMMProfile::GetTag((uint64_t)v26, 1684893284);
      if (v31)
      {
        if (!v32) {
          goto LABEL_86;
        }
        CFDictionaryRef v33 = (char *)&v25[2] + 4;
        uint64_t v34 = v32[4];
        memcpy(v33, (const void *)(v32[5] + 8), v34 - 8);
        size_t v35 = (int8x8_t *)&v33[(v34 - 5) & 0xFFFFFFFFFFFFFFFCLL];
      }
      else
      {
        size_t v35 = v25 + 3;
      }
      long long v36 = CMMProfile::GetTag((uint64_t)v26, 1684890724);
      if (v36)
      {
        if (!v37)
        {
LABEL_86:
          char v91 = __cxa_allocate_exception(4uLL);
          *char v91 = -171;
        }
        uint64_t v38 = v37[4];
        memcpy(v35, (const void *)(v37[5] + 8), v38 - 8);
        unint64_t v39 = (v38 - 5) & 0xFFFFFFFFFFFFFFFCLL;
      }
      else
      {
        unint64_t v39 = 4;
      }
      uint64_t v25 = (int8x8_t *)((char *)v35 + v39);
      v23 += 40;
    }
    while (v23 != *((void *)v6 + 2));
  }
  (*(void (**)(CMMProfileInfoContainer *))(*(void *)v6 + 8))(v6);
  __n128 v40 = CMMBase::NewInternal(0xB8uLL, &v97);
  void *v40 = &unk_1ED9811E8;
  *((_DWORD *)v40 + 2) = 1;
  *((_DWORD *)v40 + 44) = 808464432;
  v40[2] = 0;
  v40[3] = &v97;
  *((_OWORD *)v40 + 2) = 0u;
  __n128 v41 = (unsigned int *)(v40 + 4);
  *((_OWORD *)v40 + 5) = 0u;
  *((_OWORD *)v40 + 6) = 0u;
  *((_OWORD *)v40 + 3) = 0u;
  *((_OWORD *)v40 + 4) = 0u;
  *((_OWORD *)v40 + 7) = 0u;
  *((_OWORD *)v40 + CMMBase::operator delete(this - 8) = 0u;
  *((_OWORD *)v40 + 9) = 0u;
  *((_OWORD *)v40 + 10) = 0u;
  *((_DWORD *)v40 + 20) = 1852796517;
  *(void *)((char *)v40 + 100) = 0x100000000F6D6;
  *((_DWORD *)v40 + 27) = 63190;
  *(void *)((char *)v40 + 36) = 0x21000006170706CLL;
  length[0] = 0;
  time(length);
  unint64_t v42 = (int32x4_t *)localtime(length);
  if (v42)
  {
    __int16 v43 = v42[1].i16[2] + 1900;
    __int16 v44 = v42[1].i16[0] + 1;
    int16x4_t v45 = vmovn_s32(*v42);
  }
  else
  {
    __int16 v43 = 0;
    __int16 v44 = 0;
    int16x4_t v45 = 0;
  }
  *((_WORD *)v40 + 2CMMBase::operator delete(this - 8) = v43;
  *((_WORD *)v40 + 29) = v44;
  *(int16x4_t *)((char *)v40 + 60) = vrev64_s16(v45);
  *(void *)((char *)v40 + 6CMMBase::operator delete(this - 8) = 0x4150504C61637370;
  *((_DWORD *)v40 + 24) = 0;
  *((_DWORD *)v40 + 2CMMBase::operator delete(this - 8) = 1634758764;
  time_t v99 = 0;
  time(&v99);
  CFDataRef v46 = localtime(&v99);
  int v47 = v46 ? v46->tm_year + 1900 : 1999;
  memset((char *)&length[3] + 7, 0, 7);
  strcpy((char *)length, "Copyright Apple Computer Inc. ");
  *((unsigned char *)length + strlen((const char *)length)) = v47 / 1000 + 48;
  __int16 v48 = v47 % 1000;
  unsigned int v49 = ((5243 * v48) >> 19) + ((5243 * v48) >> 31);
  *((unsigned char *)length + strlen((const char *)length)) = v49 + 48;
  LOBYTE(v4CMMBase::operator delete(this - 8) = v48 - 100 * v49;
  unsigned int v50 = (((103 * (char)v48) >> 15) & 1) + ((103 * (char)v48) >> 10);
  *((unsigned char *)length + strlen((const char *)length)) = v50 + 48;
  *((unsigned char *)length + strlen((const char *)length)) = v48 - 10 * v50 + 48;
  long long v51 = CMMBase::NewInternal(0x38uLL, (void **)v40[3]);
  long long v52 = (void **)v40[3];
  *((_DWORD *)v51 + 2) = 1668313716;
  *((_OWORD *)v51 + 1) = 0u;
  *((_OWORD *)v51 + 2) = 0u;
  *((_WORD *)v51 + 24) = 0;
  *long long v51 = &unk_1ED981288;
  unint64_t v53 = strlen((const char *)length) + 9;
  v51[4] = v53;
  int v54 = CMMBase::NewInternal(v53, v52);
  v51[5] = v54;
  *((unsigned char *)v51 + 4CMMBase::operator delete(this - 8) = 1;
  bzero(v54, v51[4]);
  uint64_t v55 = v51[5];
  *(_DWORD *)uint64_t v55 = 1954047348;
  strcpy((char *)(v55 + 8), (const char *)length);
  v40[20] = v51;
  int v56 = CMMBase::NewInternal(0x38uLL, (void **)v40[3]);
  int v57 = (void **)v40[3];
  uint64_t v58 = v40[20];
  while (1)
  {
    uint64_t v59 = v58;
    if (!v58) {
      break;
    }
    uint64_t v58 = *(void *)(v58 + 16);
    if (!v58)
    {
      CMMTextDescTag::CMMTextDescTag((uint64_t)v56, v57, v59);
      goto LABEL_40;
    }
  }
  CMMTextDescTag::CMMTextDescTag((uint64_t)v56, v57, 0);
LABEL_40:
  void *v40 = &unk_1ED983180;
  if (v95 == 1347182946) {
    int v60 = 1281450528;
  }
  else {
    int v60 = v95;
  }
  if (v95 == 1145856354) {
    int v60 = 1281450528;
  }
  *((_DWORD *)v40 + 11) = 1818848875;
  *((_DWORD *)v40 + 12) = v60;
  int v61 = v94 == 1347182946 ? 1281450528 : v94;
  int v62 = v94 == 1145856354 ? 1281450528 : v61;
  *((_DWORD *)v40 + 13) = v62;
  uint64_t v63 = v40[20];
  do
  {
    if (!v63)
    {
      uint64_t v89 = __cxa_allocate_exception(4uLL);
      *uint64_t v89 = -171;
    }
    uint64_t v64 = v63;
    uint64_t v63 = *(void *)(v63 + 16);
  }
  while (v63);
  *(void *)(v64 + 16) = LutTypeTagFromSequence;
  LutTypeTagFromSequence[2] = v11;
  LutTypeTagFromSequence[3] = v64;
  v11[3] = LutTypeTagFromSequence;
  ConversionManager::~ConversionManager((ConversionManager *)bytes);
  uint64_t v65 = v40[20];
  if (v65)
  {
    int v66 = 0;
    do
    {
      ++v66;
      uint64_t v65 = *(void *)(v65 + 16);
    }
    while (v65);
    LODWORD(v65) = 12 * v66;
  }
  unsigned int v67 = (v65 + 135) & 0xFFFFFFFC;
  if (v67 >= (int)v65 + 132) {
    uint64_t v68 = 0;
  }
  else {
    uint64_t v68 = 4294967246;
  }
  CMMThrowExceptionOnError(v68);
  for (int i = (void *)v40[20]; i; int i = (void *)i[2])
  {
    *(void *)ColorSyncMD5 bytes = 0;
    (*(void (**)(void *, void, UInt8 *))(*i + 24))(i, 0, bytes);
    unsigned int v70 = (*(_DWORD *)bytes + 3) & 0xFFFFFFFC;
    if (v70 >= *(_DWORD *)bytes) {
      uint64_t v71 = 0;
    }
    else {
      uint64_t v71 = 4294967246;
    }
    CMMThrowExceptionOnError(v71);
    v67 += v70;
  }
  unsigned int *v41 = v67;
  long long v72 = *((_OWORD *)v40 + 7);
  long long v105 = *((_OWORD *)v40 + 6);
  long long v106 = v72;
  long long v73 = *((_OWORD *)v40 + 9);
  long long v107 = *((_OWORD *)v40 + 8);
  long long v108 = v73;
  long long v74 = *((_OWORD *)v40 + 3);
  *(_OWORD *)ColorSyncMD5 bytes = *(_OWORD *)v41;
  long long v102 = v74;
  long long v75 = *((_OWORD *)v40 + 5);
  long long v103 = *((_OWORD *)v40 + 4);
  long long v104 = v75;
  CFDataRef v76 = CFDataCreateWithBytesNoCopy(0, bytes, 128, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  if (!v76)
  {
LABEL_88:
    int v93 = __cxa_allocate_exception(4uLL);
    *int v93 = -171;
  }
  ColorSyncProfileSetHeader(a1, v76);
  CFRelease(v76);
  long long v77 = (void *)v40[20];
  length[0] = 0;
  for (j = 0; v77; long long v77 = (void *)v77[2])
  {
    (*(void (**)(void *, void, time_t *))(*v77 + 24))(v77, 0, length);
    if (j <= LODWORD(length[0])) {
      unsigned int j = length[0];
    }
  }
  if (((j + 3) & 0xFFFFFFFC) >= j) {
    uint64_t v79 = 0;
  }
  else {
    uint64_t v79 = 4294967246;
  }
  CMMThrowExceptionOnError(v79);
  long long v80 = (UInt8 *)CMMBase::NewInternal((j + 3) & 0xFFFFFFFC, (void **)v40[3]);
  for (uint64_t k = v40[20]; k; uint64_t k = *(void *)(k + 16))
  {
    unsigned int v82 = *(_DWORD *)(k + 8);
    (*(void (**)(uint64_t, void, time_t *))(*(void *)k + 24))(k, 0, length);
    (*(void (**)(uint64_t, UInt8 *, time_t *))(*(void *)k + 24))(k, v80, length);
    CFDataRef v83 = CFDataCreate(0, v80, length[0]);
    if (v83)
    {
      CFStringRef SignatureFromFourCharCode = ColorSyncCreateSignatureFromFourCharCode(v82);
      ColorSyncProfileSetTag(a1, SignatureFromFourCharCode, v83);
      CFRelease(SignatureFromFourCharCode);
      CFRelease(v83);
    }
  }
  CMMBase::operator delete((pthread_mutex_t **)v80);
  int v85 = *((_DWORD *)v40 + 2) - 1;
  *((_DWORD *)v40 + 2) = v85;
  if (!v85) {
    (*(void (**)(void *))(*v40 + 8))(v40);
  }
  if (v97)
  {
    uint64_t v86 = *v97;
    if (*v97)
    {
      do
      {
        uint64_t v87 = (void *)*v86;
        free(v86);
        uint64_t v86 = v87;
      }
      while (v87);
    }
  }
  CMMMemMgr::ReleaseMemList((void **)&v97);
  return 1;
}

void sub_18BE5CFC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2)
  {
    CMMTag::~CMMTag(v21);
    ConversionManager::~ConversionManager((ConversionManager *)&a21);
    __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      if (a11)
      {
        unint64_t v24 = *a11;
        if (*a11)
        {
          do
          {
            uint64_t v25 = (void *)*v24;
            free(v24);
            unint64_t v24 = v25;
          }
          while (v25);
        }
      }
      __cxa_end_catch();
      JUMPOUT(0x18BE5CE88);
    }
    if (a11)
    {
      unint64_t v26 = *a11;
      if (*a11)
      {
        do
        {
          unsigned int v27 = (void *)*v26;
          free(v26);
          unint64_t v26 = v27;
        }
        while (v27);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x18BE5CE84);
  }
  _Unwind_Resume(exception_object);
}

void sub_18BE5D0FC(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMMemMgr::ReleaseMemList((void **)va);
  JUMPOUT(0x18BE5D00CLL);
}

uint64_t CMMTextDescTag::CMMTextDescTag(uint64_t a1, void **a2, uint64_t a3)
{
  *(void *)a1 = &unk_1ED985440;
  *(_DWORD *)(a1 + CMMBase::operator delete(this - 8) = 1684370275;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 4CMMBase::operator delete(this - 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a3;
  if (a3) {
    *(void *)(a3 + 16) = a1;
  }
  *(void *)a1 = &unk_1ED9826A0;
  *(void *)(a1 + 32) = 116;
  long long v4 = CMMBase::NewInternal(0x74uLL, a2);
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 4CMMBase::operator delete(this - 8) = 1;
  *(_DWORD *)long long v4 = 1668506980;
  *((_DWORD *)v4 + 2) = 419430400;
  strcpy((char *)v4 + 12, "Apple CMM DevLinkProfile");
  return a1;
}

void sub_18BE5D1D8(_Unwind_Exception *a1)
{
  CMMTag::~CMMTag(v1);
  _Unwind_Resume(a1);
}

void *reallocate(void *a1, size_t a2, unint64_t a3, void *a4)
{
  return malloc_type_realloc(a1, a2, 0xBC3988E8uLL);
}

BOOL AppleCMMApplyTransform(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, const void *a5, unsigned int a6, unsigned int a7, uint64_t a8, unint64_t a9, void *a10, int a11, int a12, uint64_t a13, const __CFDictionary *a14)
{
  CMMStorage = GetCMMStorage((const __CFData **)a1);
  if (a11 == 8)
  {
    uint64_t v23 = 4;
    uint64_t v24 = a8;
    uint64_t v25 = a5;
    unint64_t v26 = a4;
    uint64_t v27 = a3;
    uint64_t v28 = a2;
  }
  else
  {
    unsigned int v36 = a7;
    unint64_t v29 = CMMStorage;
    SrcComponentCFIndex Count = (char *)ColorSyncTransformGetSrcComponentCount((void *)a1);
    if ((a12 & 0x1F) != 0) {
      unint64_t v31 = SrcComponentCount + 1;
    }
    else {
      unint64_t v31 = SrcComponentCount;
    }
    if ((a11 - 1) > 6) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = qword_18BEB5C48[a11 - 1];
    }
    uint64_t v24 = a8;
    uint64_t v25 = a5;
    unint64_t v26 = a4;
    uint64_t v27 = a3;
    uint64_t v28 = a2;
    CMMStorage = v29;
    a7 = v36;
    uint64_t v23 = v32 * (void)v31;
  }
  if (a6 == 8) {
    return DoApplyTransform((uint64_t)CMMStorage, v28, v27, v26, v25, 8u, a7, v24, 4, a9, a10, a11, a12, a13, v23, a14);
  }
  if (a1) {
    uint64_t v34 = *(void *)(a1 + 96);
  }
  else {
    uint64_t v34 = 0;
  }
  if ((a7 & 0x1F) != 0) {
    ++v34;
  }
  if (a6 - 1 > 6) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = qword_18BEB5C48[a6 - 1];
  }
  return DoApplyTransform((uint64_t)CMMStorage, v28, v27, v26, v25, a6, a7, v24, v35 * v34, a9, a10, a11, a12, a13, v23, a14);
}

BOOL AppleCMMVerifySRGBGamma(const __CFData *a1)
{
  vm_address_t BytePtr = (unsigned int *)CFDataGetBytePtr(a1);
  CFIndex Length = CFDataGetLength(a1);
  BOOL v4 = 0;
  if (BytePtr)
  {
    uint64_t v5 = Length;
    if (Length)
    {
      uint64_t v19 = 0;
      CMMMemMgr::CMMMemMgr((CMMMemMgr *)&v19);
      unsigned int v6 = bswap32(*BytePtr);
      if (v6 == 1668641398)
      {
        int v7 = (CMMCurveTag *)CMMBase::NewInternal(0x38uLL, (void **)&v19);
        CMMCurveTag::CMMCurveTag(v7, 0, (uint64_t)BytePtr, v5, 0);
      }
      else
      {
        if (v6 != 1885434465)
        {
          BOOL v4 = 0;
LABEL_18:
          CMMMemMgr::ReleaseMemList(&v19);
          return v4;
        }
        int v7 = (CMMCurveTag *)CMMBase::NewInternal(0x80uLL, (void **)&v19);
        CMMParaCurveTag::CMMParaCurveTag(v7, 0, (uint64_t)BytePtr, v5, 0);
      }
      uint64_t v18 = 0;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v15 = 0u;
      LODWORD(v15) = 1;
      int v8 = (void *)(*(uint64_t (**)(CMMCurveTag *, long long *, void **, void, float))(*(void *)v7 + 64))(v7, &v15, &v19, 0, 1.0);
      if (v8)
      {
        BOOL v4 = DWORD1(v15) == 1;
        uint64_t v9 = v8[1];
        if (v9)
        {
          uint64_t v10 = v9 - 1;
          v8[1] = v10;
          if (!v10) {
            (*(void (**)(void *))(*v8 + 8))(v8);
          }
        }
      }
      else
      {
        BOOL v4 = 0;
      }
      uint64_t v11 = v16;
      if ((void)v16)
      {
        uint64_t v12 = *(void *)(v16 + 8);
        if (v12)
        {
          uint64_t v13 = v12 - 1;
          *(void *)(v16 + CMMBase::operator delete(this - 8) = v13;
          if (!v13) {
            (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
          }
        }
      }
      (*(void (**)(CMMCurveTag *))(*(void *)v7 + 8))(v7);
      goto LABEL_18;
    }
  }
  return v4;
}

void sub_18BE5D58C(_Unwind_Exception *a1)
{
  CMMMemMgr::ReleaseMemList((void **)(v1 - 40));
  _Unwind_Resume(a1);
}

CFTypeRef create_PerceptualStandardRGBProfile()
{
  if (create_PerceptualStandardRGBProfile_predicate != -1) {
    dispatch_once(&create_PerceptualStandardRGBProfile_predicate, &__block_literal_global_235_996);
  }
  host_t v0 = (const void *)create_PerceptualStandardRGBProfile_profile;

  return CFRetain(v0);
}

CFTypeRef create_WebSafeColorsProfile()
{
  if (create_WebSafeColorsProfile_predicate != -1) {
    dispatch_once(&create_WebSafeColorsProfile_predicate, &__block_literal_global_244);
  }
  host_t v0 = (const void *)create_WebSafeColorsProfile_profile;

  return CFRetain(v0);
}

CFTypeRef create_DCIP3Profile()
{
  if (create_DCIP3Profile_predicate != -1) {
    dispatch_once(&create_DCIP3Profile_predicate, &__block_literal_global_202);
  }
  host_t v0 = (const void *)create_DCIP3Profile_profile;

  return CFRetain(v0);
}

CFTypeRef create_ACESCGLinearProfile()
{
  if (create_ACESCGLinearProfile_predicate != -1) {
    dispatch_once(&create_ACESCGLinearProfile_predicate, &__block_literal_global_199);
  }
  host_t v0 = (const void *)create_ACESCGLinearProfile_profile;

  return CFRetain(v0);
}

CFTypeRef create_GenericGrayProfile()
{
  if (create_GenericGrayProfile_predicate != -1) {
    dispatch_once(&create_GenericGrayProfile_predicate, &__block_literal_global_163);
  }
  host_t v0 = (const void *)create_GenericGrayProfile_profile;

  return CFRetain(v0);
}

CFAllocatorRef __colorSyncBytesDeallocator_block_invoke()
{
  CFAllocatorRef result = CFAllocatorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CFB8], &context);
  colorSyncBytesDeallocator_colorSyncAllocator = (uint64_t)result;
  return result;
}

void *reallocate(void *a1, size_t a2)
{
  return malloc_type_realloc(a1, a2, 0xBA37827AuLL);
}

void *allocate(size_t a1)
{
  return malloc_type_malloc(a1, 0xF6D8049FuLL);
}

unint64_t XXH64(uint64_t a1)
{
  uint64_t v1 = 0;
  unint64_t v2 = 0x27D4EB2F165667D5;
  do
  {
    unint64_t v2 = 0x85EBCA77C2B2AE63
       - 0x61C8864E7A143579
       * __ROR8__((0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * *(void *)(a1 + v1), 33)) ^ v2, 37);
    v1 += 8;
  }
  while (v1 != 16);
  unint64_t v3 = 0x165667B19E3779F9
     * ((0xC2B2AE3D27D4EB4FLL * (v2 ^ (v2 >> 33))) ^ ((0xC2B2AE3D27D4EB4FLL * (v2 ^ (v2 >> 33))) >> 29));
  return v3 ^ HIDWORD(v3);
}

ColorSyncProfileRef __get_dciP3_profile_block_invoke()
{
  ColorSyncProfileRef result = ColorSyncProfileCreateWithName(kColorSyncDCIP3Profile);
  get_dciP3_profile_dciP3 = (uint64_t)result;
  return result;
}

ColorSyncProfileRef __get_itu2020_profile_block_invoke()
{
  ColorSyncProfileRef result = ColorSyncProfileCreateWithName(kColorSyncITUR2020Profile);
  get_itu2020_profile_itu2020 = (uint64_t)result;
  return result;
}

void fillCurvTable(ColorSyncProfile *a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, double *a6, int a7)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  double v66 = 0.0;
  double v67 = 0.0;
  double v68 = 0.0;
  uint64_t v12 = 2 * a4 + 12;
  uint64_t v13 = (UInt8 *)malloc_type_calloc(1uLL, v12, 0x71FC3208uLL);
  if (!v13) {
    return;
  }
  uint64_t v14 = v13;
  int v61 = a7;
  unint64_t v15 = 0;
  *(_DWORD *)uint64_t v13 = 1987212643;
  *((_DWORD *)v13 + 2) = bswap32(a4);
  CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
  long long v17 = (char *)(v13 + 10);
  do
  {
    double v18 = a6[v15];
    if (v18 < 2.25)
    {
      double v19 = 2.2;
      if (v18 > 2.15) {
        goto LABEL_5;
      }
    }
    double v21 = 0.0;
    if (v18 >= 1.85 || v18 <= 1.75)
    {
      if (v18 >= 1.05 || v18 <= 0.95)
      {
        if (v18 <= 1.8)
        {
          int v20 = 0;
          if (!a4) {
            goto LABEL_33;
          }
          goto LABEL_20;
        }
        double v19 = a6[v15];
LABEL_5:
        if ((v19 + -1.8) * 0.04045 / 0.4 <= 0.0)
        {
          double v21 = 0.0;
          int v20 = 1;
          double v18 = v19;
          if (!a4) {
            goto LABEL_33;
          }
        }
        else
        {
          int v20 = 1;
          double v18 = v19;
          double v21 = (v19 + -1.8) * 0.0773993808 / 0.4;
          if (!a4) {
            goto LABEL_33;
          }
        }
        goto LABEL_20;
      }
      int v20 = 0;
      double v18 = 1.0;
      if (!a4) {
        goto LABEL_33;
      }
    }
    else
    {
      int v20 = 0;
      double v18 = 1.8;
      if (!a4) {
        goto LABEL_33;
      }
    }
LABEL_20:
    char v23 = 0;
    unint64_t v24 = a3 - 1;
    if (v15 < a3) {
      unint64_t v24 = v15;
    }
    uint64_t v25 = a4 + a4 * v24 - 1;
    unint64_t v26 = a4;
    do
    {
      unint64_t v27 = v26 - 1;
      int v28 = vcvtmd_u64_f64(v21 * (double)(v26 - 1) / (double)a4 * 65535.0 + 0.5);
      if (v28 >= 0xFFFF) {
        int v28 = 0xFFFF;
      }
      if (a5 == 1) {
        unsigned int v29 = *(unsigned __int8 *)(a2 + v25) | (*(unsigned __int8 *)(a2 + v25) << 8);
      }
      else {
        unsigned int v29 = *(unsigned __int16 *)(a2 + 2 * v25);
      }
      unsigned int v30 = v28 & ~(v28 >> 31);
      BOOL v31 = v29 <= (unsigned __int16)v30;
      if (v29 <= (unsigned __int16)v30) {
        unsigned int v29 = (unsigned __int16)v30;
      }
      if ((v23 & 1) == 0) {
        unsigned int v30 = v29;
      }
      v23 |= v31;
      *(_WORD *)&v17[2 * v26] = bswap32(v30) >> 16;
      --v25;
      --v26;
    }
    while (v27);
LABEL_33:
    double v32 = 0.0;
    if (v20) {
      double v32 = (v18 + -1.8) * 0.04045 / 0.4;
    }
    *(&v66 + v15) = v32;
    CFDictionaryRef v33 = (UInt8 *)v14;
    CFDataRef v34 = CFDataCreateWithBytesNoCopy(0, v14, v12, v16);
    ColorSyncProfileSetTag(a1, off_1E54D7360[v15], v34);
    if (v34) {
      CFRelease(v34);
    }
    ++v15;
    uint64_t v14 = v33;
  }
  while (v15 != 3);
  if (v61)
  {
    double v35 = *a6;
    double v36 = 2.2;
    if (*a6 >= 2.25 || (double v37 = 2.2, v35 <= 2.15))
    {
      if (v35 >= 1.85 || v35 <= 1.75)
      {
        if (v35 > 0.95 && v35 < 1.05) {
          double v37 = 1.0;
        }
        else {
          double v37 = *a6;
        }
      }
      else
      {
        double v37 = 1.8;
      }
    }
    double v39 = a6[1];
    if (v39 >= 2.25 || (double v40 = 2.2, v39 <= 2.15))
    {
      if (v39 >= 1.85 || v39 <= 1.75)
      {
        if (v39 > 0.95 && v39 < 1.05) {
          double v40 = 1.0;
        }
        else {
          double v40 = a6[1];
        }
      }
      else
      {
        double v40 = 1.8;
      }
    }
    double v42 = a6[2];
    if (v42 >= 2.25 || v42 <= 2.15)
    {
      if (v42 >= 1.85 || v42 <= 1.75)
      {
        BOOL v43 = v42 > 0.95 && v42 < 1.05;
        double v36 = 1.0;
        if (!v43) {
          double v36 = a6[2];
        }
      }
      else
      {
        double v36 = 1.8;
      }
    }
    double v44 = 1.8;
    if (v37 > 1.8) {
      double v44 = (v37 + -1.8) * 0.6 / 0.4 + 1.8;
    }
    double v45 = 1.8;
    if (v40 > 1.8) {
      double v45 = (v40 + -1.8) * 0.6 / 0.4 + 1.8;
    }
    double v46 = 1.8;
    if (v36 > 1.8) {
      double v46 = (v36 + -1.8) * 0.6 / 0.4 + 1.8;
    }
    double v47 = 0.0;
    double v48 = 0.0;
    if (v37 > 1.8) {
      double v48 = (v37 + -1.8) * 0.0521327014 / 0.4;
    }
    if (v40 > 1.8) {
      double v47 = (v40 + -1.8) * 0.0521327014 / 0.4;
    }
    double v49 = 0.0;
    double v50 = 0.0;
    if (v36 > 1.8) {
      double v50 = (v36 + -1.8) * 0.0521327014 / 0.4;
    }
    if (v37 > 1.8) {
      double v49 = (v37 + -1.8) * 0.0521327014 / 0.4;
    }
    double v51 = 0.0;
    double v52 = 0.0;
    if (v40 > 1.8) {
      double v52 = (v40 + -1.8) * 0.0521327014 / 0.4;
    }
    if (v36 > 1.8) {
      double v51 = (v36 + -1.8) * 0.0521327014 / 0.4;
    }
    double v53 = 0.0;
    double v54 = 0.0;
    if (v37 > 1.8 && v66 > 0.0) {
      double v54 = (v37 + -1.8) * 0.0773993808 / 0.4;
    }
    double v55 = v67;
    if (v40 > 1.8 && v67 > 0.0) {
      double v53 = (v40 + -1.8) * 0.0773993808 / 0.4;
    }
    double v56 = v68;
    double v57 = 0.0;
    double v65 = v51;
    double v62 = v53;
    double v58 = v46;
    if (v36 > 1.8 && v68 > 0.0) {
      double v57 = (v36 + -1.8) * 0.0773993808 / 0.4;
    }
    double v59 = 1.0 - v50;
    double v60 = 1.0 - v47;
    ColorSyncProfileSetParametricTRCTag(a1, @"aarg", 3u, v44, 1.0 - v48, v49, v54, v66, 0.0, 0.0);
    ColorSyncProfileSetParametricTRCTag(a1, @"aagg", 3u, v45, v60, v52, v62, v55, 0.0, 0.0);
    ColorSyncProfileSetParametricTRCTag(a1, @"aabg", 3u, v58, v59, v65, v57, v56, 0.0, 0.0);
  }

  free(v33);
}

void inverseNativeGammaLookup(uint64_t a1, long double *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  unint64_t v12 = *(unsigned __int16 *)(a1 + 328);
  if (!*(_WORD *)(a1 + 328) || !*(unsigned char *)(a1 + 360))
  {
    *a2 = pow(*a2, 1.0 / *(double *)(a1 + 64));
    long double v33 = 1.0 / *(double *)(a1 + 80);
    a2[1] = pow(a2[1], v33);
    a2[2] = pow(a2[2], v33);
    return;
  }
  unint64_t v13 = 0;
  int v14 = *(unsigned __int16 *)(a1 + 330);
  int v15 = *(unsigned __int16 *)(a1 + 332);
  uint64_t v16 = *(void *)(a1 + 336);
  double v17 = 16.0;
  if (v15 == 2) {
    double v17 = 4112.0;
  }
  double v18 = (double)(v14 - 1);
  double v19 = v17 * v18;
  do
  {
    if ((_WORD)v14 == 1) {
      goto LABEL_32;
    }
    double v20 = a2[v13];
    if (v13 >= v12) {
      __int16 v21 = v12 - 1;
    }
    else {
      __int16 v21 = v13;
    }
    int v22 = v21 * v14;
    uint64_t v23 = v16 - 1 + v22;
    unint64_t v24 = (_WORD *)(v16 + 2 * ((unsigned __int16)(v14 - 1) + (uint64_t)v22));
    int v25 = v14 - (unsigned __int16)(v14 - 1);
    uint64_t v26 = (unsigned __int16)(v14 - 1);
    while (1)
    {
      if (v15 == 1)
      {
        LOBYTE(a10) = *(unsigned char *)(v23 + v26);
        *(double *)&unint64_t v27 = (double)*(unint64_t *)&a10;
        double v28 = *(double *)&v27 / 255.0;
        LOBYTE(v27) = *(unsigned char *)(v23 + v26 + 1);
        double v29 = (double)v27 / 255.0;
      }
      else
      {
        LOWORD(a10) = *(v24 - 1);
        *(double *)&unint64_t v30 = (double)*(unint64_t *)&a10;
        double v28 = *(double *)&v30 / 65535.0;
        LOWORD(v30) = *v24;
        double v29 = (double)v30 / 65535.0;
      }
      __int16 v31 = v26 - 1;
      a10 = (double)((int)v26 - 1);
      if (v28 < a10 / v19) {
        double v28 = a10 / v19;
      }
      double v32 = (double)(unsigned __int16)v26;
      if (v28 > 1.0 - (double)v25 / v19) {
        double v28 = 1.0 - (double)v25 / v19;
      }
      if (v29 < v32 / v19) {
        double v29 = v32 / v19;
      }
      if (v29 > 1.0 - (double)(v25 - 1) / v19) {
        double v29 = 1.0 - (double)(v25 - 1) / v19;
      }
      if (v20 == v28) {
        break;
      }
      if (v20 == v29) {
        goto LABEL_30;
      }
      if (v28 < v20 && v29 > v20)
      {
        a10 = (v20 - v28) / (v29 - v28) + a10;
        break;
      }
LABEL_28:
      ++v25;
      --v24;
      --v26;
      if (!v31) {
        goto LABEL_32;
      }
    }
    double v32 = a10;
    if (a10 == -1.0) {
      goto LABEL_28;
    }
LABEL_30:
    if (v32 / v18 != -1.0) {
      a2[v13] = v32 / v18;
    }
LABEL_32:
    ++v13;
  }
  while (v13 != 3);
}

double applyParametricGamma(uint64_t a1, long double a2)
{
  double v2 = 0.0;
  switch(*(_WORD *)a1)
  {
    case 0:
      goto LABEL_4;
    case 1:
      double v5 = *(double *)(a1 + 16);
      double v4 = *(double *)(a1 + 24);
      if (-v4 / v5 > a2) {
        goto LABEL_18;
      }
      a2 = v4 + v5 * a2;
LABEL_4:
      long double v6 = *(double *)(a1 + 8);
      goto LABEL_13;
    case 2:
      double v8 = *(double *)(a1 + 16);
      double v7 = *(double *)(a1 + 24);
      if (-v7 / v8 > a2)
      {
        double v2 = *(double *)(a1 + 32);
        goto LABEL_18;
      }
      double v10 = pow(v7 + v8 * a2, *(long double *)(a1 + 8));
      double v11 = *(double *)(a1 + 32);
      goto LABEL_17;
    case 3:
      if (*(double *)(a1 + 40) > a2)
      {
        double v2 = *(double *)(a1 + 32) * a2;
        goto LABEL_18;
      }
      long double v6 = *(double *)(a1 + 8);
      a2 = *(double *)(a1 + 24) + *(double *)(a1 + 16) * a2;
LABEL_13:
      double result = pow(a2, v6);
      break;
    case 4:
      if (*(double *)(a1 + 40) <= a2)
      {
        double v10 = pow(*(double *)(a1 + 24) + *(double *)(a1 + 16) * a2, *(long double *)(a1 + 8));
        double v11 = *(double *)(a1 + 48);
LABEL_17:
        double v2 = v10 + v11;
LABEL_18:
        double result = v2;
      }
      else
      {
        double result = *(double *)(a1 + 56) + *(double *)(a1 + 32) * a2;
      }
      break;
    default:
      goto LABEL_18;
  }
  return result;
}

void ColorSyncTransformShowSteps(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!cf) {
    goto LABEL_9;
  }
  CFTypeID v9 = CFGetTypeID(cf);
  if (ColorSyncTransformGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_34);
  }
  if (v9 == ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID
    && (uint64_t colorsync_transform_steps_info = create_colorsync_transform_steps_info((uint64_t)cf)) != 0)
  {
    double v11 = (const void *)colorsync_transform_steps_info;
    ColorSyncLog(3, (uint64_t)"%@", a3, a4, a5, a6, a7, a8, colorsync_transform_steps_info);
    CFRelease(v11);
  }
  else
  {
LABEL_9:
    ColorSyncLog(3, (uint64_t)"Nothing to show for <%p> ColorSyncTransform", a3, a4, a5, a6, a7, a8, (char)cf);
  }
}

uint64_t create_colorsync_transform_steps_info(uint64_t a1)
{
  uint64_t v16 = 0;
  double v17 = &v16;
  uint64_t v18 = 0x2000000000;
  uint64_t v19 = 0;
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x6800000000;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  memset(v15, 0, sizeof(v15));
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  v10[2] = __create_colorsync_transform_steps_info_block_invoke;
  v10[3] = &unk_1E54D7380;
  v10[4] = v11;
  v10[5] = &v16;
  v10[6] = a1;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = __create_colorsync_transform_steps_info_block_invoke_2;
  v9[3] = &unk_1E54D73A8;
  _OWORD v9[4] = &v16;
  v9[5] = v11;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  v8[2] = __create_colorsync_transform_steps_info_block_invoke_3;
  v8[3] = &unk_1E54D73D0;
  v8[4] = &v16;
  v8[5] = v11;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = __create_colorsync_transform_steps_info_block_invoke_4;
  v7[3] = &unk_1E54D73F8;
  v7[4] = &v16;
  v7[5] = v11;
  if (ColorSyncTransformIterate(a1, 0, (uint64_t)v10, (uint64_t)v9, (uint64_t)v8, (uint64_t)v7))
  {
    uint64_t v1 = v17;
    CFStringRef v2 = (const __CFString *)v17[3];
    if (v2)
    {
      CFIndex Length = CFStringGetLength(v2);
      uint64_t v1 = v17;
      if (Length >= 1)
      {
        CFStringAppend((CFMutableStringRef)v17[3], @"---------------------------------------------------------------------------------\n");
        uint64_t v1 = v17;
      }
    }
  }
  else
  {
    fwrite("create_colorsync_transform_steps_info: no steps\n", 0x30uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    uint64_t v1 = v17;
    double v4 = (const void *)v17[3];
    if (v4)
    {
      CFRelease(v4);
      uint64_t v1 = v17;
    }
    v1[3] = 0;
  }
  uint64_t v5 = v1[3];
  _Block_object_dispose(v11, 8);
  _Block_object_dispose(&v16, 8);
  return v5;
}

__CFString *__create_colorsync_transform_steps_info_block_invoke(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  long long v8 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v9 = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 84) = v9;
  *(_OWORD *)(v6 + 72) = v7;
  *(_OWORD *)(v6 + 56) = v8;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a2;
  CFAllocatorRef v10 = CFGetAllocator(*(CFTypeRef *)(a1 + 48));
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = CFStringCreateMutable(v10, 0);
  double result = *(__CFString **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (result)
  {
    CFStringAppend(result, @"\n*************************************************************************\n");
    CFStringAppendFormat(*(CFMutableStringRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), 0, @"\nColorSyncTransform show steps\n");
    CFStringAppend(*(CFMutableStringRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), @"\n*************************************************************************\n");
    CFStringRef v12 = CFCopyDescription(*(CFTypeRef *)(a1 + 48));
    CFStringAppendFormat(*(CFMutableStringRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), 0, @"ColorSyncTransform info:\n %@\n", v12);
    CFRelease(v12);
    long long v13 = *(__CFString **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    uint64_t v14 = *(void *)(a2 + 4);
    uint64_t v15 = *(void *)(a2 + 12);
    uint64_t v16 = *(void *)(a2 + 20);
    uint64_t v17 = *(void *)(a2 + 28);
    uint64_t v18 = *(void *)(a2 + 36);
    uint64_t v19 = *(void *)(a2 + 44);
    CFStringAppendFormat(v13, 0, @"    %d stages\n", v14);
    CFStringAppendFormat(v13, 0, @"    %d input components\n", v15);
    CFStringAppendFormat(v13, 0, @"    %d output components\n", v16);
    CFStringAppendFormat(v13, 0, @"    %d TRCs\n", v17);
    CFStringAppendFormat(v13, 0, @"    %d Matrices\n", v18);
    CFStringAppendFormat(v13, 0, @"    %d NxM Transforms\n", v19);
    if (CFDictionaryContainsKey(a3, @"com.apple.cmm.ProfileSequence") == 1)
    {
      CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, a3);
      CFDictionarySetValue(MutableCopy, @"com.apple.cmm.ProfileSequence", @" included ");
      CFStringRef v21 = CFCopyDescription(MutableCopy);
      CFRelease(MutableCopy);
    }
    else
    {
      CFStringRef v21 = CFCopyDescription(a3);
    }
    CFStringAppendFormat(*(CFMutableStringRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), 0, @"ColorSyncTransformIterate hints:\n%@\n", v21);
    CFRelease(v21);
    CFStringAppend(*(CFMutableStringRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), @"----------------------------------------\n");
    CFStringAppend(*(CFMutableStringRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), @"               STAGES \n");
    CFStringAppend(*(CFMutableStringRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), @"----------------------------------------\n");
    return (__CFString *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) != 0);
  }
  return result;
}

uint64_t __create_colorsync_transform_steps_info_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(__CFString **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 76);
  CFStringAppendFormat(v6, 0, @"Stage = %ld, %ld TRCs\n", a2, a3);
  if (a3 >= 1)
  {
    uint64_t v8 = 0;
    do
    {
      float v30 = 0.0;
      long long v28 = 0u;
      long long v29 = 0u;
      ColorSyncTRCGetFunction(*(void *)(v7 + 8 * *(void *)(a4 + 8 * v8)), (uint64_t)&v28);
      unsigned int v9 = ColorSyncTRCGetGammaID(*(unsigned int **)(v7 + 8 * *(void *)(a4 + 8 * v8)));
      if (v9 >= 0x12) {
        __assert_rtn("gamma_id_by_name", "ColorSyncTransformShowSteps.c", 235, "0");
      }
      int v10 = v28;
      BOOL v11 = (v28 - 6) >= 4 && v28 >= 5uLL;
      CFStringRef v12 = "NO";
      if (!v11) {
        CFStringRef v12 = "YES";
      }
      CFStringAppendFormat(v6, 0, @"    TRC channel %d --> TRCs[%ld], parametric = %s gammaID = %s\n", v8, *(void *)(a4 + 8 * v8), v12, off_1E54D7418[v9]);
      char v13 = ColorSyncTRCGetProperties(*(unsigned int **)(v7 + 8 * *(void *)(a4 + 8 * v8)));
      switch(v10)
      {
        case 0:
          CFStringAppendFormat(v6, 0, @"\t\tType0: Y = X^% 3.10f \n", *((float *)&v28 + 1), v21, v22, v23, v24, v25, v26, v27);
          break;
        case 1:
          CFStringAppendFormat(v6, 0, @"\t\tType1: Y = (%g*X+%g)^%g [X >= %g],  Y = 0 [X < %g]\n", *((float *)&v28 + 2), *((float *)&v28 + 3), *((float *)&v28 + 1), (float)((float)-*((float *)&v28 + 3) / *((float *)&v28 + 2)), (float)((float)-*((float *)&v28 + 3) / *((float *)&v28 + 2)), v25, v26, v27);
          break;
        case 2:
          CFStringAppendFormat(v6, 0, @"\t\tType2: Y = (%g*X+%g)^%g + % 3.10f [X >= %g],  Y = %g [X < %g]\n", *((float *)&v28 + 2), *((float *)&v28 + 3), *((float *)&v28 + 1), *(float *)&v29, (float)((float)-*((float *)&v28 + 3) / *((float *)&v28 + 2)), *(float *)&v29, (float)((float)-*((float *)&v28 + 3) / *((float *)&v28 + 2)), v27);
          break;
        case 3:
          CFStringAppendFormat(v6, 0, @"\t\tType3: Y = (%g*X+%g)^%g [X >= %g],  Y = %g*X [X < %g]\n", *((float *)&v28 + 2), *((float *)&v28 + 3), *((float *)&v28 + 1), *((float *)&v29 + 1), *(float *)&v29, *((float *)&v29 + 1), v26, v27);
          break;
        case 4:
          CFStringAppendFormat(v6, 0, @"\t\tType4: Y = (%g*X+%g)^%g + %g [X >= %g], Y = %g*X + %g [X < %g]\n", *((float *)&v28 + 2), *((float *)&v28 + 3), *((float *)&v28 + 1), *((float *)&v29 + 2), *((float *)&v29 + 1), *(float *)&v29, *((float *)&v29 + 3), *((float *)&v29 + 1));
          break;
        case 5:
          CFStringAppendFormat(v6, 0, @"\t\tTable: entries = %zu\n", *(void *)((char *)&v28 + 4));
          CFStringAppendFormat(v6, 0, @"\t\t\tColorSyncBoundaryExtension neg: slope = %g intercept = %g\n", *((float *)&v29 + 3), v30);
          CFStringAppendFormat(v6, 0, @"\t\t\tColorSyncBoundaryExtension pos: slope = %g intercept = %g\n", *((float *)&v29 + 1), *((float *)&v29 + 2), v22, v23, v24, v25, v26, v27);
          break;
        case 6:
          CFStringAppendFormat(v6, 0, @"\t\tPQ_EOTF_Type: Y = Reference_PQ_EOTF(X)  [a = %g, b = %g, c = %g, d = %g, e = %g, f = %g]\n", *((float *)&v28 + 2), *((float *)&v28 + 3), *(float *)&v29, *((float *)&v29 + 1), *((float *)&v29 + 2), *((float *)&v29 + 3), v26, v27);
          break;
        case 7:
          CFStringAppendFormat(v6, 0, @"\t\tPQ_InvEOTF_Type: Y = Reference_PQ_InvEOTF(X)  [a = %g, b = %g, c = %g, d = %g, e = %g, f = %g, g = %g]\n", *((float *)&v28 + 2), *((float *)&v28 + 3), *(float *)&v29, *((float *)&v29 + 1), *((float *)&v29 + 2), *((float *)&v29 + 3), v30, v27);
          break;
        case 8:
          CFStringAppendFormat(v6, 0, @"\t\tHLG_InvOETF_Type: Y = Reference_HLG_InvOETF(X)  [a = %g, b = %g, c = %g, d = %g, e = %g, f = %g]\n", *((float *)&v28 + 2), *((float *)&v28 + 3), *(float *)&v29, *((float *)&v29 + 1), *((float *)&v29 + 2), *((float *)&v29 + 3), v26, v27);
          break;
        case 9:
          CFStringAppendFormat(v6, 0, @"\t\tHLG_OETF_Type: Y = Reference_HLG_OETF(X)  [a = %g, b = %g, c = %g, d = %g e = %g]\n", *((float *)&v28 + 2), *((float *)&v28 + 3), *(float *)&v29, *((float *)&v29 + 1), *((float *)&v29 + 2), v25, v26, v27);
          break;
        case 10:
          CFStringAppendFormat(v6, 0, @"\t\tEXRToneMap_Type: Y = EXR Tone Mapping Gamma(X)  [defog = %g, exposure_scale = %g, kneeLow = %g, kneeHigh = %g, intermediate_gamma = %g, intensity_scale = %g]\n", *((float *)&v28 + 2), *((float *)&v28 + 3), *(float *)&v29, *((float *)&v29 + 1), *((float *)&v29 + 2), *((float *)&v29 + 3), v26, v27);
          break;
        default:
          break;
      }
      append_properties_info(v6, v13);
      uint64_t v14 = *(float **)(v7 + 8 * *(void *)(a4 + 8 * v8));
      float v15 = ColorSyncTRCGetInputRange(v14);
      float v17 = v16;
      float v18 = ColorSyncTRCGetOutputRange(v14);
      append_range_info(v6, v15, v17, v18, v19);
      ++v8;
    }
    while (a3 != v8);
  }
  return 1;
}

uint64_t __create_colorsync_transform_steps_info_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(__CFString **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 84);
  memset(v18, 0, sizeof(v18));
  uint64_t v7 = v18;
  ColorSyncMatrixGetFunction(*(void *)(v6 + 8 * a3), (uint64_t)v18);
  char Properties = ColorSyncMatrixGetProperties(*(unsigned int **)(v6 + 8 * a3));
  CFStringAppendFormat(v5, 0, @"Stage = %ld, matrix index = %ld\n", a2, a3);
  for (uint64_t i = 0; i != 3; ++i)
  {
    CFStringAppend(v5, @"\t");
    for (uint64_t j = 0; j != 16; j += 4)
      CFStringAppendFormat(v5, 0, @"% 3.10f ", *(float *)((char *)v7 + j));
    CFStringAppend(v5, @"\n");
    ++v7;
  }
  append_properties_info(v5, Properties);
  BOOL v11 = *(float **)(v6 + 8 * a3);
  float InputRange = ColorSyncMatrixGetInputRange(v11);
  float v14 = v13;
  float OutputRange = ColorSyncMatrixGetOutputRange(v11);
  append_range_info(v5, InputRange, v14, OutputRange, v16);
  return 1;
}

uint64_t __create_colorsync_transform_steps_info_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(__CFString **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 92);
  memset(v42, 0, 36);
  ColorSyncNxMGetFunction(*(void *)(v6 + 8 * a3), (uint64_t)v42);
  char v7 = ColorSyncNxMGetProperties(*(unsigned int **)(v6 + 8 * a3));
  unsigned int v8 = v42[0];
  unsigned int v9 = "?";
  if (LODWORD(v42[0]) <= 0xC) {
    unsigned int v9 = off_1E54D74A8[LODWORD(v42[0])];
  }
  CFStringAppendFormat(v5, 0, @"Stage = %ld, %zu inputs x %zu outputs %s index = %ld\n", a2, *(_OWORD *)((char *)v42 + 4), v9, a3);
  switch(v8)
  {
    case 7u:
      int v10 = *(_DWORD *)(*(void *)((char *)&v42[1] + 12) + 24);
      BOOL v11 = "HLG Inverted OOTF";
      if (v10 != 1) {
        BOOL v11 = "?";
      }
      if (v10) {
        CFStringRef v12 = v11;
      }
      else {
        CFStringRef v12 = "HLG OOTF";
      }
      CFStringAppendFormat(v5, 0, @"\tHLG Luminance scaling (%s) params: \n\t\tgamma = % 3.10f gain = % 3.10f\n\t\tparams->luminance_coefficients[0] = % 3.10f\n\t\tparams->luminance_coefficients[1] = % 3.10f\n\t\tparams->luminance_coefficients[2] = % 3.10f\n\t\tparams->luminance_coefficients[3] = % 3.10f\n", v12, **(float **)((char *)&v42[1] + 12), *(float *)(*(void *)((char *)&v42[1] + 12) + 4), *(float *)(*(void *)((char *)&v42[1] + 12) + 8), *(float *)(*(void *)((char *)&v42[1] + 12) + 12), *(float *)(*(void *)((char *)&v42[1] + 12) + 16), *(float *)(*(void *)((char *)&v42[1] + 12) + 20));
      break;
    case 8u:
      CFStringAppendFormat(v5, 0, @"\tHLG Scene Referred Mapping params: \n\t\tgamma = % 3.10f gain = % 3.10f\n\t\tparams->luminance_coefficients[0] = % 3.10f\n\t\tparams->luminance_coefficients[1] = % 3.10f\n\t\tparams->luminance_coefficients[2] = % 3.10f\n\t\tparams->luminance_coefficients[3] = % 3.10f\n", **(float **)((char *)&v42[1] + 12), *(float *)(*(void *)((char *)&v42[1] + 12) + 4), *(float *)(*(void *)((char *)&v42[1] + 12) + 8), *(float *)(*(void *)((char *)&v42[1] + 12) + 12), *(float *)(*(void *)((char *)&v42[1] + 12) + 16), *(float *)(*(void *)((char *)&v42[1] + 12) + 20));
      break;
    case 9u:
      double v13 = **(float **)((char *)&v42[1] + 12);
      double v14 = *(float *)(*(void *)((char *)&v42[1] + 12) + 4);
      double v15 = *(float *)(*(void *)((char *)&v42[1] + 12) + 8);
      double v16 = *(float *)(*(void *)((char *)&v42[1] + 12) + 12);
      double v40 = *(float *)(*(void *)((char *)&v42[1] + 12) + 64);
      double v41 = *(float *)(*(void *)((char *)&v42[1] + 12) + 68);
      double v38 = *(float *)(*(void *)((char *)&v42[1] + 12) + 56);
      double v39 = *(float *)(*(void *)((char *)&v42[1] + 12) + 60);
      double v36 = *(float *)(*(void *)((char *)&v42[1] + 12) + 40);
      double v37 = *(float *)(*(void *)((char *)&v42[1] + 12) + 44);
      double v34 = *(float *)(*(void *)((char *)&v42[1] + 12) + 32);
      double v35 = *(float *)(*(void *)((char *)&v42[1] + 12) + 36);
      double v32 = *(float *)(*(void *)((char *)&v42[1] + 12) + 24);
      double v33 = *(float *)(*(void *)((char *)&v42[1] + 12) + 28);
      double v30 = *(float *)(*(void *)((char *)&v42[1] + 12) + 16);
      double v31 = *(float *)(*(void *)((char *)&v42[1] + 12) + 20);
      CFStringRef v17 = @"\tPQ tone mapping params:\n\t\tparams->pq_eotf.m1 = % 3.10f\n\t\tparams->pq_eotf.m2 = % 3.10f\n\n\t\tparams->pq_eotf.c1 = % 3.10f\n\t\tparams->pq_eotf.c2 = % 3.10f\n\t\tparams->pq_eotf.c3 = % 3.10f\n\n\t\tparams->pq_eetf.masterPeakInv = % 3.10f\n\t\tparams->pq_eetf.masterBlackInv = % 3.10f\n\t\tparams->pq_eetf.maxLum = % 3.10f\n\t\tparams->pq_eetf.minLum = % 3.10f\n\t\tparams->pq_eetf.KneeStart = % 3.10f\n\t\tparams->pq_eetf.KneeStartScale = % 3.10f\n\t\tparams->pq_eetf.optical_scale = % 3.10f\n\t\tparams->luminance_coefficients[0] = % 3.10f\n\t\tparams->luminance_coefficients[1] = % 3.10f\n\t\tparams->luminance_coefficients[2] = % 3.10f\n\t\tparams->luminance_coefficients[3] = % 3.10f\n";
      goto LABEL_14;
    case 0xAu:
      double v13 = **(float **)((char *)&v42[1] + 12);
      double v14 = *(float *)(*(void *)((char *)&v42[1] + 12) + 4);
      double v15 = *(float *)(*(void *)((char *)&v42[1] + 12) + 8);
      double v16 = *(float *)(*(void *)((char *)&v42[1] + 12) + 12);
      double v33 = *(float *)(*(void *)((char *)&v42[1] + 12) + 32);
      double v34 = *(float *)(*(void *)((char *)&v42[1] + 12) + 36);
      double v31 = *(float *)(*(void *)((char *)&v42[1] + 12) + 24);
      double v32 = *(float *)(*(void *)((char *)&v42[1] + 12) + 28);
      double v30 = *(float *)(*(void *)((char *)&v42[1] + 12) + 20);
      CFStringRef v17 = @"\tReference White Tone Mapping params:\n\t\tluminance scale = % 3.10f\n\t\tadjusted source headroom = % 3.10f\n\t\ttarget headroom = % 3.10f\n\t\ttarget reference white = % 3.10f\n\t\tcofficient a = % 3.10f\n\t\tcofficient b = % 3.10f\n\t\tcofficient c = % 3.10f\n\t\tcofficient d = % 3.10f\n\t\tcofficient e = % 3.10f\n";
      goto LABEL_14;
    case 0xBu:
      double v13 = **(float **)((char *)&v42[1] + 12);
      double v14 = *(float *)(*(void *)((char *)&v42[1] + 12) + 4);
      double v15 = *(float *)(*(void *)((char *)&v42[1] + 12) + 8);
      double v16 = *(float *)(*(void *)((char *)&v42[1] + 12) + 12);
      double v33 = *(double *)(*(void *)((char *)&v42[1] + 12) + 28);
      *(void *)&double v34 = *(void *)((char *)&v42[1] + 12) + 36;
      double v31 = *(float *)(*(void *)((char *)&v42[1] + 12) + 20);
      double v32 = *(float *)(*(void *)((char *)&v42[1] + 12) + 24);
      double v30 = *(float *)(*(void *)((char *)&v42[1] + 12) + 16);
      v17 = @"\tFlex Luminance Scaling params:\n\t\tsource headroom = % 3.10f\n\t\ttarget headroom = % 3.10f\n\t\tcoefficients[0] = % 3.10f\n\t\tcoefficients[1] = % 3.10f\n\t\tcoefficients[2] = % 3.10f\n\t\tcoefficients[3] = % 3.10f\n\t\tcoefficients[4] = % 3.10f\n\t\tFlexGTCTableCFIndex Count = %zu\n\t\tFlexGTCTable = %p\n";
LABEL_14:
      CFStringAppendFormat(v5, 0, v17, *(void *)&v13, *(void *)&v14, *(void *)&v15, *(void *)&v16, *(void *)&v30, *(void *)&v31, *(void *)&v32, *(void *)&v33, *(void *)&v34, *(void *)&v35, *(void *)&v36, *(void *)&v37, *(void *)&v38, *(void *)&v39, *(void *)&v40, *(void *)&v41);
      break;
    case 0xCu:
      CFStringAppendFormat(v5, 0, @"\tLuminance scaling params: \n\t\tgamma = % 3.10f\n\t\tparams->luminance_coefficients[0] = % 3.10f\n\t\tparams->luminance_coefficients[1] = % 3.10f\n\t\tparams->luminance_coefficients[2] = % 3.10f\n\t\tparams->luminance_coefficients[3] = % 3.10f\n", **(float **)((char *)&v42[1] + 12), *(float *)(*(void *)((char *)&v42[1] + 12) + 4), *(float *)(*(void *)((char *)&v42[1] + 12) + 8), *(float *)(*(void *)((char *)&v42[1] + 12) + 12), *(float *)(*(void *)((char *)&v42[1] + 12) + 16));
      break;
    default:
      if (v8 > 6) {
        CFStringAppendFormat(v5, 0, @"\t\tUnknown format\n\n", v25, v26, v27, v28, v29);
      }
      else {
        CFStringAppendFormat(v5, 0, @"\t\tGrid point count = %zu\n\n", *(void *)((char *)&v42[1] + 4), v26, v27, v28, v29);
      }
      break;
  }
  append_properties_info(v5, v7);
  float v18 = *(float **)(v6 + 8 * a3);
  float v19 = ColorSyncNxMGetInputRange(v18);
  float v21 = v20;
  float v22 = ColorSyncNxMGetOutputRange(v18);
  append_range_info(v5, v19, v21, v22, v23);
  return 1;
}

void append_properties_info(__CFString *a1, char a2)
{
  CFStringRef v2 = "Yes";
  if (a2) {
    unint64_t v3 = "Yes";
  }
  else {
    unint64_t v3 = "No";
  }
  if ((a2 & 2) != 0) {
    double v4 = "Yes";
  }
  else {
    double v4 = "No";
  }
  if ((a2 & 4) != 0) {
    uint64_t v5 = "Yes";
  }
  else {
    uint64_t v5 = "No";
  }
  if ((a2 & 8) != 0) {
    uint64_t v6 = "Yes";
  }
  else {
    uint64_t v6 = "No";
  }
  if ((a2 & 0x10) == 0) {
    CFStringRef v2 = "No";
  }
  CFStringAppendFormat(a1, 0, @"\t\tProperties:\n\t\t\t\tkColorSyncFunctionSignedReflection  = %s\n\t\t\t\tkColorSyncFunctionOutputClamp       = %s\n\t\t\t\tkColorSyncFunctionInputClamp        = %s\n\t\t\t\tkColorSyncMatrixOnlyFirstInputChannelActive  = %s\n\t\t\t\tkColorSyncMatrixOnlyFirstOutputChannelActive = %s\n\n", v3, v4, v5, v6, v2);
}

void append_range_info(__CFString *a1, float a2, float a3, float a4, float a5)
{
  CFStringAppendFormat(a1, 0, @"\t\tInput range: [");
  if (a2 == -3.4028e38) {
    CFStringAppendFormat(a1, 0, @"-FLT_MAX,");
  }
  else {
    CFStringAppendFormat(a1, 0, @"%+g,", a2);
  }
  if (a3 == 3.4028e38) {
    CFStringAppendFormat(a1, 0, @" +FLT_MAX]", v10);
  }
  else {
    CFStringAppendFormat(a1, 0, @" %+g]", a3);
  }
  CFStringAppendFormat(a1, 0, @" Output range: [");
  if (a4 == -3.4028e38) {
    CFStringAppendFormat(a1, 0, @"-FLT_MAX,", v11);
  }
  else {
    CFStringAppendFormat(a1, 0, @"%+g,", a4);
  }
  if (a5 == 3.4028e38)
  {
    CFStringAppendFormat(a1, 0, @" +FLT_MAX]\n");
  }
  else
  {
    CFStringAppendFormat(a1, 0, @" %+g]\n", a5);
  }
}

void ColorSyncTransformDumpStepsToFile(CFTypeRef cf, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (!cf) {
    goto LABEL_14;
  }
  CFTypeID v10 = CFGetTypeID(cf);
  if (ColorSyncTransformGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncTransformGetTypeID_predicate, &__block_literal_global_34);
  }
  if (v10 == ColorSyncTransformGetTypeID_kColorSyncTransformRuntimeID
    && (uint64_t colorsync_transform_steps_info = create_colorsync_transform_steps_info((uint64_t)cf)) != 0)
  {
    CFStringRef v12 = (const __CFString *)colorsync_transform_steps_info;
    if (a2 && strlen(a2) > 2)
    {
      bzero(__str, 0x401uLL);
      if (!strncmp(a2, "*/", 2uLL))
      {
        if (ColorSyncGetTempDirPath_predicate != -1) {
          dispatch_once(&ColorSyncGetTempDirPath_predicate, &__block_literal_global_627);
        }
        double v33 = a2 + 2;
        a2 = __str;
        snprintf(__str, 0x400uLL, "%s%s", &ColorSyncGetTempDirPath_tempDirPath, v33);
      }
      CStringPtr = CFStringGetCStringPtr(v12, 0x8000100u);
      if (CStringPtr)
      {
        double v14 = CStringPtr;
        double v15 = 0;
      }
      else
      {
        CFIndex Length = CFStringGetLength(v12);
        CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
        double v15 = (char *)malloc_type_calloc(MaximumSizeForEncoding, 1uLL, 0xA22D4AB7uLL);
        if (v15 && CFStringGetCString(v12, v15, MaximumSizeForEncoding, 0x8000100u)) {
          double v14 = v15;
        }
        else {
          double v14 = (const char *)&unk_18BF98BC9;
        }
      }
      uint64_t v24 = fopen(a2, "w");
      if (v24)
      {
        double v31 = v24;
        size_t v32 = strlen(v14);
        fwrite(v14, 1uLL, v32, v31);
        fclose(v31);
      }
      if (v15) {
        free(v15);
      }
      ColorSyncLog(1, (uint64_t)"%s %s %s", v25, v26, v27, v28, v29, v30, (char)"ColorSyncTransformDumpStepsToFile");
    }
    else
    {
      ColorSyncLog(1, (uint64_t)"%s %s %s", a3, a4, a5, a6, a7, a8, (char)"ColorSyncTransformDumpStepsToFile");
    }
    CFRelease(v12);
  }
  else
  {
LABEL_14:
    ColorSyncLog(1, (uint64_t)"Nothing to show for <%p> ColorSyncTransform", a3, a4, a5, a6, a7, a8, (char)cf);
    ColorSyncLog(1, (uint64_t)"%s %s %s", v16, v17, v18, v19, v20, v21, (char)"ColorSyncTransformDumpStepsToFile");
  }
}

float get_boundary_extension(const __CFDictionary *a1, const void *a2)
{
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
  if (!Value) {
    return 0.0;
  }
  CFArrayRef v3 = Value;
  CFTypeID v4 = CFGetTypeID(Value);
  if (v4 != CFArrayGetTypeID()) {
    __assert_rtn("get_boundary_extension", "ColorSyncTransformIteration.c", 301, "CFGetTypeID(array) == CFArrayGetTypeID()");
  }
  float v5 = 0.0;
  if (CFArrayGetCount(v3) >= 2)
  {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v3, 0);
    double float_value = get_float_value(ValueAtIndex);
    float v5 = *(float *)&float_value;
    unsigned int v8 = CFArrayGetValueAtIndex(v3, 1);
    get_float_value(v8);
  }
  return v5;
}

void __linear_trc_block_invoke()
{
  create_trc_data();
  if (v0)
  {
    *(_DWORD *)(v0 + 16) = 0;
    *(_OWORD *)(v0 + 20) = xmmword_18BEED4E0;
    *(_OWORD *)(v0 + 36) = *(_OWORD *)algn_18BEED4F0;
    *(_DWORD *)(v0 + 84) = 7;
    *(int64x2_t *)(v0 + 6CMMBase::operator delete(this - 8) = vdupq_n_s64(0x7F7FFFFFFF7FFFFFuLL);
    *(_DWORD *)(v0 + 64) = 0;
    *(unsigned char *)(v0 + 8CMMBase::operator delete(this - 8) = 1;
  }
  linear_trc_linear_no_clamp = v0;
  create_trc_data();
  if (v1)
  {
    *(_DWORD *)(v1 + 16) = 0;
    *(_OWORD *)(v1 + 20) = xmmword_18BEED4E0;
    *(_OWORD *)(v1 + 36) = *(_OWORD *)algn_18BEED4F0;
    *(_DWORD *)(v1 + 84) = 7;
    *(_OWORD *)(v1 + 6CMMBase::operator delete(this - 8) = xmmword_18BE638B0;
    *(_DWORD *)(v1 + 64) = 2;
    *(unsigned char *)(v1 + 8CMMBase::operator delete(this - 8) = 1;
  }
  linear_trc_linear_clamp = v1;
}

CFStringRef colorSyncTransformIteratorCopyDebugDescription(void *a1)
{
  if (a1)
  {
    CFAllocatorRef v2 = CFGetAllocator(a1);
    return CFStringCreateWithFormat(v2, 0, @"<ColorSyncTransformIterator %p;stepArray:%@;\nproperties:%@TRCs[%ld]:%pmatrices[%ld]:%pnxmLuts[%ld]:%p>",
             a1,
             a1[2],
             a1[4],
             *(void *)((char *)a1 + 68),
             a1[15],
             *(void *)((char *)a1 + 76),
             a1[16],
             *(void *)((char *)a1 + 84),
             a1[17]);
  }
  else
  {
    CFAllocatorRef v4 = CFGetAllocator(0);
    return CFStringCreateWithFormat(v4, 0, @"<NULL ColorSyncTransformIterator>");
  }
}

CFStringRef colorSyncTransformIteratorCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, @"<ColorSyncTransformIterator %p>", a1);
}

const void *ColorSyncCreateOutputPoppyProfileForRGBData(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  if ((a6 - 1) >= 6) {
    uint64_t v7 = 3;
  }
  else {
    uint64_t v7 = 4;
  }
  uint64_t v8 = -1;
  unsigned int v13 = ((a6 - 1) < 6) & (a6 - 1);
  switch(a5)
  {
    case 2:
      unsigned int v79 = a5 - 2;
      double v14 = 0;
      double v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = (unsigned char *)(a1 + v13);
      uint64_t v18 = v17;
      goto LABEL_9;
    case 3:
      unsigned int v79 = a5 - 2;
      double v14 = 0;
      double v15 = 0;
      uint64_t v18 = 0;
      uint64_t v17 = (unsigned char *)(a1 + 2 * v13);
      uint64_t v16 = v17;
      goto LABEL_9;
    case 4:
      unsigned int v79 = a5 - 2;
      double v14 = 0;
      uint64_t v16 = 0;
      uint64_t v18 = 0;
      uint64_t v17 = (unsigned char *)(a1 + 2 * v13);
      double v15 = v17;
      goto LABEL_9;
    case 7:
      unsigned int v79 = a5 - 2;
      double v15 = 0;
      uint64_t v16 = 0;
      uint64_t v18 = 0;
      uint64_t v17 = (unsigned char *)(a1 + 4 * v13);
      double v14 = v17;
LABEL_9:
      uint64_t v19 = (double *)malloc_type_calloc(12 * a2 * a3, 1uLL, 0x74C5F996uLL);
      if (!v19)
      {
        uint64_t v8 = -1;
        goto LABEL_81;
      }
      if (a3)
      {
        if (v79 >= 3 && a5 != 7) {
          __assert_rtn("get_poppy_index_for_data", "ColorSyncPoppyProfile.c", 134, "0");
        }
        uint64_t v21 = 0;
        if (a2 <= 1) {
          uint64_t v22 = 1;
        }
        else {
          uint64_t v22 = a2;
        }
        float v23 = v19 + 1;
        do
        {
          if (a5 == 3) {
            uint64_t v24 = v14;
          }
          else {
            uint64_t v24 = &v17[v21 * a4];
          }
          if (a5 == 3) {
            uint64_t v25 = &v17[v21 * a4];
          }
          else {
            uint64_t v25 = v16;
          }
          if (a5 == 4)
          {
            uint64_t v24 = v14;
            uint64_t v26 = &v17[v21 * a4];
          }
          else
          {
            uint64_t v26 = v15;
          }
          if (a5 == 4) {
            uint64_t v25 = v16;
          }
          if (a5 == 2)
          {
            uint64_t v18 = &v17[v21 * a4];
          }
          else
          {
            double v14 = v24;
            double v15 = v26;
            uint64_t v16 = v25;
          }
          if (a2)
          {
            uint64_t v27 = v22;
            uint64_t v28 = v23;
            if (v79 >= 3 && a5 != 7) {
              __assert_rtn("get_poppy_index_for_data", "ColorSyncPoppyProfile.c", 165, "0");
            }
            do
            {
              switch(a5)
              {
                case 4:
                  LODWORD(_D2) = *(_DWORD *)v15;
                  *(void *)&_D2 = vcvtq_f32_f16(*(float16x4_t *)&_D2).u64[0];
                  *(v28 - 1) = _D2;
                  LOWORD(_D2) = *((_WORD *)v15 + 2);
                  __asm { FCVT            S2, H2 }
                  *(_DWORD *)uint64_t v28 = LODWORD(_D2);
                  v15 += 2 * v7;
                  break;
                case 3:
                  LOWORD(_D2) = *v16;
                  double v31 = (double)*(unint64_t *)&_D2 / 65535.0;
                  *(float *)&double v31 = v31;
                  *((_DWORD *)v28 - 2) = LODWORD(v31);
                  LOWORD(v31) = v16[1];
                  double v32 = (double)*(unint64_t *)&v31 / 65535.0;
                  *(float *)&double v32 = v32;
                  *((_DWORD *)v28 - 1) = LODWORD(v32);
                  LOWORD(v32) = v16[2];
                  _D2 = (double)*(unint64_t *)&v32 / 65535.0;
                  *(float *)&_D2 = _D2;
                  *(_DWORD *)uint64_t v28 = LODWORD(_D2);
                  v16 += v7;
                  break;
                case 2:
                  LOBYTE(_D2) = *v18;
                  double v29 = (double)*(unint64_t *)&_D2 / 255.0;
                  *(float *)&double v29 = v29;
                  *((_DWORD *)v28 - 2) = LODWORD(v29);
                  LOBYTE(v29) = v18[1];
                  double v30 = (double)*(unint64_t *)&v29 / 255.0;
                  *(float *)&double v30 = v30;
                  *((_DWORD *)v28 - 1) = LODWORD(v30);
                  LOBYTE(v30) = v18[2];
                  _D2 = (double)*(unint64_t *)&v30 / 255.0;
                  *(float *)&_D2 = _D2;
                  *(_DWORD *)uint64_t v28 = LODWORD(_D2);
                  v18 += v7;
                  break;
                default:
                  *((_DWORD *)v28 - 2) = *v14;
                  *((_DWORD *)v28 - 1) = v14[1];
                  LODWORD(_D2) = v14[2];
                  *(_DWORD *)uint64_t v28 = LODWORD(_D2);
                  v14 += v7;
                  break;
              }
              uint64_t v28 = (double *)((char *)v28 + 12);
              --v27;
            }
            while (v27);
          }
          ++v21;
          float v23 = (double *)((char *)v23 + 12 * a2);
        }
        while (v21 != a3);
        uint64_t v37 = 0;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v87 = 0u;
        while (!a2)
        {
LABEL_68:
          if (++v37 == a3) {
            goto LABEL_72;
          }
        }
        uint64_t v38 = 0;
        double v39 = (float *)v19 + v37 * 3 * a2;
LABEL_46:
        uint64_t v40 = 0;
        float v41 = *v39;
        float v42 = v39[1];
        float v43 = v39[2];
        float v44 = (float)((float)(v42 * -0.22499) + (float)(*v39 * 1.225)) + (float)(v43 * -0.000005);
        float v45 = (float)((float)(v42 * 1.0421) + (float)(*v39 * -0.042061)) + (float)(v43 * -0.000001);
        v83[0] = v44;
        v83[1] = v45;
        float v46 = (float)((float)(v42 * -0.078641) + (float)(v41 * -0.019641)) + (float)(v43 * 1.0983);
        v83[2] = v46;
        uint64_t v80 = 0;
        int v81 = 0;
        while (1)
        {
          float v47 = v83[v40];
          if (v47 > 1.0) {
            break;
          }
          if (v47 < 0.0)
          {
            int v48 = -1;
            goto LABEL_51;
          }
LABEL_52:
          if (++v40 == 3)
          {
            if (v80 || __PAIR64__(HIDWORD(v80), 0) != v81)
            {
              float v49 = (float)((float)(v45 * 0.17757) + (float)(v44 * 0.82243)) + (float)(v46 * 0.000004);
              float v50 = (float)((float)(v45 * 0.9668) + (float)(v44 * 0.033196)) + (float)(v46 * 0.000001);
              float v51 = (float)((float)(v45 * 0.072402) + (float)(v44 * 0.017085)) + (float)(v46 * 0.91051);
              float v52 = vabds_f32(v44, v49);
              float v53 = vabds_f32(v45, v50);
              *(float *)unsigned int v82 = v52;
              *(float *)&v82[1] = v53;
              float v54 = vabds_f32(v46, v51);
              *(float *)&v82[2] = v54;
              float v55 = 0.0;
              if (v80 == 1) {
                float v55 = (float)(v44 + -1.0) / v52;
              }
              if (HIDWORD(v80) == 1) {
                float v55 = fmaxf(v55, (float)(v45 + -1.0) / v53);
              }
              if (v81 == 1) {
                float v55 = fmaxf(v55, (float)(v46 + -1.0) / v54);
              }
              uint64_t v56 = 0;
              float v57 = fmax(fmin(v44, 1.0), 0.0);
              float v58 = fmax(fmin(v45, 1.0), 0.0);
              float v59 = fmax(fmin(v46, 1.0), 0.0);
              float v60 = (float)((float)(v58 * 0.17757) + (float)(v57 * 0.82243)) + (float)(v59 * 0.000004);
              float v61 = (float)((float)(v58 * 0.9668) + (float)(v57 * 0.033196)) + (float)(v59 * 0.000001);
              float v62 = (float)((float)(v58 * 0.072402) + (float)(v57 * 0.017085)) + (float)(v59 * 0.91051);
              float v63 = fmax(fmin(v60, 1.0), 0.0);
              float v64 = fmax(fmin(v61, 1.0), 0.0);
              float v65 = fmax(fmin(v62, 1.0), 0.0);
              float v66 = (float)(vabds_f32(v49, v63) * 27.217) + vabds_f32(v50, v64) * 6.72130013;
              float v67 = v66 + vabds_f32(v51, v65) * 50.4818993;
              float v68 = v67 * v67;
              do
              {
                if (*(_DWORD *)((char *)&v80 + v56 * 4) == -1) {
                  float v55 = fmaxf(v55, (float)-v83[v56] / *(float *)&v82[v56]);
                }
                ++v56;
              }
              while (v56 != 3);
              float v69 = fmin(v55, 1.0);
              if (v69 > 0.0)
              {
                signed int v70 = llroundf(v69 * 15.0);
                *((float *)&v84 + v70) = (float)(v68 / (float)(v69 + 1.0)) + *((float *)&v84 + v70);
              }
            }
            v39 += 3;
            if (++v38 == a2) {
              goto LABEL_68;
            }
            goto LABEL_46;
          }
        }
        int v48 = 1;
LABEL_51:
        *(_DWORD *)((char *)&v80 + v40 * 4) = v48;
        goto LABEL_52;
      }
      long long v84 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
LABEL_72:
      free(v19);
      uint64_t v71 = 0;
      float v72 = 0.0;
      do
      {
        float v72 = v72 + *(float *)((char *)&v84 + v71);
        v71 += 4;
      }
      while (v71 != 64);
      double v73 = 0.0;
      if (v72 > 1.0)
      {
        float v74 = 0.0;
        uint64_t v75 = 15;
        unint64_t v76 = 16;
        while (1)
        {
          float v77 = v74;
          if (v75 == -1) {
            break;
          }
          float v74 = v74 + *((float *)&v84 + v75--);
          if (v74 > 1.0)
          {
            unint64_t v76 = v75 + 2;
            break;
          }
        }
        double v73 = (float)((float)((float)(uint64_t)(float)((float)v76 - (float)((float)(1.0 - v77) / (float)(v74 - v77)))
                            * 0.0625)
                    * 10.0);
      }
      uint64_t v8 = (int)llround(v73);
LABEL_81:
      return acquire_output_profile(v8);
    default:
      goto LABEL_81;
  }
}

void __acquire_output_profile_block_invoke_2(uint64_t a1)
{
  if (acquire_output_profile_data)
  {
    CFDataRef v2 = CFDataCreate(0, (const UInt8 *)(acquire_output_profile_data+ *(unsigned int *)(acquire_output_profile_header + 8 * *(void *)(a1 + 32) + 16)), *(unsigned int *)(acquire_output_profile_header + 8 * *(void *)(a1 + 32) + 12));
    uint64_t v3 = create(v2, 0, 0);
    if (v2) {
      CFRelease(v2);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  acquire_output_profile_profiles[*(void *)(a1 + 32)] = v3;
}

uint64_t __acquire_output_profile_block_invoke()
{
  int v0 = getpagesize();
  uint64_t v1 = v0;
  if ((v0 & 0xFFFLL) != 0) {
    __assert_rtn("acquire_output_profile_block_invoke", "ColorSyncPoppyProfile.c", 362, "PAGESIZE % 4096 == 0");
  }
  int v2 = open("/System/Library/ColorSync/Resources/ColorTables.data", 0, 0);
  acquire_output_profile_fd = v2;
  if (v2 < 0) {
    goto LABEL_5;
  }
  memset(&v4, 0, sizeof(v4));
  if (fstat(v2, &v4)
    || (v4.st_mode & 0xF000) != 0x8000
    || v4.st_size < 1
    || (uint64_t result = (uint64_t)mmap(0, (v1 + v4.st_size - 1) & 0xFFFFFFFFFFFFF000, 1, 1, acquire_output_profile_fd, 0),
        acquire_output_profile_data = result,
        result == -1)
    || (acquire_output_profile_header = result, *(_DWORD *)result != 1633775737)
    && *(_DWORD *)(result + 4) != 0x10000
    && *(_DWORD *)(result + 8) != 11)
  {
    int v2 = acquire_output_profile_fd;
LABEL_5:
    uint64_t result = close(v2);
    acquire_output_profile_fd = -1;
  }
  return result;
}

uint64_t __use_poppy_profiles_from_file_block_invoke()
{
  uint64_t result = ColorSyncDefaultsGetBoolean("ColorSyncUsePoppyProfilesFromFile", &use_poppy_profiles_from_file_enabled);
  if (result) {
    use_poppy_profiles_from_file_enabled = 0;
  }
  return result;
}

const void *ColorSyncCreateInputPoppyProfile(const ColorSyncProfile *a1)
{
  uint64_t poppy_index_from_profile = get_poppy_index_from_profile(a1);
  if ((unint64_t)(poppy_index_from_profile - 1) > 9) {
    return 0;
  }
  uint64_t v3 = poppy_index_from_profile;
  stat v4 = (dispatch_once_t *)((char *)&acquire_input_profile_predicates + 8 * poppy_index_from_profile);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __acquire_input_profile_block_invoke;
  v6[3] = &__block_descriptor_tmp_13;
  v6[4] = v3;
  v6[5] = a1;
  if (*v4 != -1) {
    dispatch_once(v4, v6);
  }
  uint64_t result = (const void *)acquire_input_profile_profiles[v3];
  if (result)
  {
    CFRetain(result);
    return (const void *)acquire_input_profile_profiles[v3];
  }
  return result;
}

ColorSyncProfile *__acquire_input_profile_block_invoke(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  keys[0] = xmmword_1E54D75D0;
  keys[1] = *(_OWORD *)&off_1E54D75E0;
  keys[2] = xmmword_1E54D75F0;
  uint64_t v30 = 0;
  CFDataRef Tag = (void *)ColorSyncProfileGetTag(v2, @"A2B0");
  values = Tag;
  stat v4 = (void *)ColorSyncProfileGetTag(v2, @"A2B1");
  float v23 = v4;
  float v5 = (void *)ColorSyncProfileGetTag(v2, @"A2B2");
  uint64_t v24 = v5;
  uint64_t v25 = ColorSyncProfileGetTag(v2, @"chad");
  uint64_t v26 = ColorSyncProfileGetTag(v2, @"wtpt");
  uint64_t v6 = ColorSyncProfileGetTag(v2, @"aapy");
  uint64_t result = 0;
  uint64_t v27 = v6;
  uint64_t v28 = 0;
  if (!Tag || !v6) {
    goto LABEL_10;
  }
  if (v4)
  {
    if (v5) {
      goto LABEL_5;
    }
  }
  else
  {
    float v23 = Tag;
    if (v5) {
      goto LABEL_5;
    }
  }
  uint64_t v24 = Tag;
LABEL_5:
  CFDictionaryRef v8 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 6, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  v21[0] = CFNumberCreate(0, kCFNumberSInt16Type, &create_input_poppy_profile_iccDate);
  v21[1] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18BF93502);
  v21[2] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18BF93504);
  v21[3] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18BF93506);
  int v21[4] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18BF93508);
  v21[5] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_18BF9350A);
  CFArrayRef v9 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)v21, 6, MEMORY[0x1E4F1D510]);
  for (uint64_t i = 0; i != 6; ++i)
  {
    uint64_t v11 = v21[i];
    if (v11) {
      CFRelease(v11);
    }
  }
  long long v18 = *(_OWORD *)&off_1E54D7638;
  long long v19 = xmmword_1E54D7648;
  uint64_t v20 = 0;
  *(_OWORD *)double v15 = xmmword_1E54D7608;
  long long v16 = *(_OWORD *)&off_1E54D7618;
  long long v17 = xmmword_1E54D7628;
  v14[0] = @"copyTags";
  v14[1] = @"4.0";
  v14[2] = (void *)kColorSyncSigInputClass;
  v14[3] = (void *)kColorSyncSigRgbData;
  CFStringRef v12 = (void *)*MEMORY[0x1E4F1CFD0];
  v14[4] = (void *)kColorSyncSigXYZData;
  v14[5] = v12;
  v14[6] = v9;
  v14[7] = @"Apple Wide Color Sharing Profile";
  v14[8] = v8;
  v14[9] = v12;
  v14[10] = 0;
  CFDictionaryRef v13 = CFDictionaryCreate(0, (const void **)v15, (const void **)v14, 10, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFRelease(v8);
  CFRelease(v9);
  uint64_t result = ColorSyncMakeProfile(v13);
LABEL_10:
  acquire_input_profile_profiles[*(void *)(a1 + 32)] = result;
  return result;
}

CFStringRef colorSyncTRCCopyDebugDescription(uint64_t a1)
{
  if (a1)
  {
    int v2 = *(_DWORD *)(a1 + 16);
    CFAllocatorRef v3 = CFGetAllocator((CFTypeRef)a1);
    if (v2 == 5)
    {
      return CFStringCreateWithFormat(v3, 0, @"<TRC %p;table[%ld]:%p properties(0x%x) input range [%+g, %+g] output range [%+g, %+g] pos [%f, %f] neg [%f, %f]>",
               a1,
               *(void *)(a1 + 20),
               *(void *)(a1 + 28),
               *(unsigned int *)(a1 + 64),
               *(float *)(a1 + 68),
               *(float *)(a1 + 72),
               *(float *)(a1 + 76),
               *(float *)(a1 + 80),
               *(float *)(a1 + 36),
               *(float *)(a1 + 40),
               *(float *)(a1 + 44),
               *(float *)(a1 + 48));
    }
    else
    {
      uint64_t v6 = *(unsigned int *)(a1 + 16);
      if (v6 > 0xA) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = off_1E54D76C0[v6];
      }
      CFDictionaryRef v8 = "YES";
      if (!*(unsigned char *)(a1 + 88)) {
        CFDictionaryRef v8 = "NO";
      }
      return CFStringCreateWithFormat(v3, 0, @"<TRC %p;type:%s;\ngamma:%f a = %f b = %f c = %f d = %f e = %f f = %f g = %f\nproperties(0x%x) input range [%+g, %+g] output range [%+g, %+g]\npure gamma original ? %s >",
               a1,
               v7,
               *(float *)(a1 + 20),
               *(float *)(a1 + 24),
               *(float *)(a1 + 28),
               *(float *)(a1 + 32),
               *(float *)(a1 + 36),
               *(float *)(a1 + 40),
               *(float *)(a1 + 44),
               *(float *)(a1 + 48),
               *(unsigned int *)(a1 + 64),
               *(float *)(a1 + 68),
               *(float *)(a1 + 72),
               *(float *)(a1 + 76),
               *(float *)(a1 + 80),
               v8);
    }
  }
  else
  {
    CFAllocatorRef v5 = CFGetAllocator(0);
    return CFStringCreateWithFormat(v5, 0, @"<NULL TRC>");
  }
}

CFStringRef colorSyncTRCCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, @"<TRC %p>", a1);
}

uint64_t ColorSyncTRCGetOptions(void *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (ColorSyncTRCGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncTRCGetTypeID_predicate, &__block_literal_global_1420);
  }
  if (v2 != ColorSyncTRCGetTypeID_kColorSyncTRCRuntimeID) {
    __assert_rtn("ColorSyncTRCGetOptions", "ColorSyncTransformFunctions.c", 409, "CFGetTypeID(ref) == ColorSyncTRCGetTypeID()");
  }

  return ColorSyncTRCGetProperties((unsigned int *)a1);
}

CFStringRef colorSyncMatrixCopyDebugDescription(uint64_t a1)
{
  if (a1)
  {
    float v2 = *(float *)(a1 + 16);
    float v3 = *(float *)(a1 + 20);
    float v4 = *(float *)(a1 + 24);
    float v5 = *(float *)(a1 + 28);
    float v6 = *(float *)(a1 + 32);
    float v7 = *(float *)(a1 + 36);
    float v8 = *(float *)(a1 + 40);
    float v9 = *(float *)(a1 + 44);
    float v15 = *(float *)(a1 + 52);
    float v16 = *(float *)(a1 + 48);
    float v13 = *(float *)(a1 + 60);
    float v14 = *(float *)(a1 + 56);
    CFAllocatorRef v10 = CFGetAllocator((CFTypeRef)a1);
    return CFStringCreateWithFormat(v10, 0, @"<Matrix %p\n[%f,\t %f,\t %f,\t %f]\n[%f,\t %f,\t %f,\t %f]\n[%f,\t %f,\t %f,\t %f]\nproperties(0x%x) input range [%+g, %+g] output range [%+g, %+g]>", a1, v2, v3, v4, v5, v6, v7, v8, v9, v16, v15, v14, v13, *(unsigned int *)(a1 + 64), *(float *)(a1 + 68), *(float *)(a1 + 72),
             *(float *)(a1 + 76),
             *(float *)(a1 + 80));
  }
  else
  {
    CFAllocatorRef v12 = CFGetAllocator(0);
    return CFStringCreateWithFormat(v12, 0, @"<NULL Matrix>");
  }
}

CFStringRef colorSyncMatrixCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, @"<Matrix %p>", a1);
}

BOOL matrix_equal_matrix(char *cf, uint64_t a2)
{
  if (cf == (char *)a2) {
    return 1;
  }
  BOOL result = 0;
  if (cf && a2)
  {
    CFTypeID v5 = CFGetTypeID(cf);
    if (ColorSyncMatrixGetTypeID_predicate[0] != -1)
    {
      CFTypeID v15 = v5;
      dispatch_once(ColorSyncMatrixGetTypeID_predicate, &__block_literal_global_7);
      CFTypeID v5 = v15;
    }
    if (v5 != ColorSyncMatrixGetTypeID_kColorSyncMatrixRuntimeID) {
      return 0;
    }
    CFTypeID v6 = CFGetTypeID((CFTypeRef)a2);
    if (ColorSyncMatrixGetTypeID_predicate[0] != -1)
    {
      CFTypeID v16 = v6;
      dispatch_once(ColorSyncMatrixGetTypeID_predicate, &__block_literal_global_7);
      CFTypeID v6 = v16;
    }
    if (v6 != ColorSyncMatrixGetTypeID_kColorSyncMatrixRuntimeID || *((float *)cf + 4) != *(float *)(a2 + 16)) {
      return 0;
    }
    BOOL result = 0;
    if ((vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_f32(*(float32x4_t *)(cf + 20), *(float32x4_t *)(a2 + 20)), (int16x8_t)vceqq_f32(*(float32x4_t *)(cf + 36), *(float32x4_t *)(a2 + 36)))), 7uLL))) & 1) == 0|| *((float *)cf + 13) != *(float *)(a2 + 52)|| *((float *)cf + 14) != *(float *)(a2 + 56)|| *((float *)cf + 15) != *(float *)(a2 + 60))
    {
      return result;
    }
    int Properties = ColorSyncMatrixGetProperties((unsigned int *)cf);
    if (Properties != ColorSyncMatrixGetProperties((unsigned int *)a2)) {
      return 0;
    }
    float InputRange = ColorSyncMatrixGetInputRange((float *)cf);
    float v9 = ColorSyncMatrixGetInputRange((float *)a2);
    BOOL result = 0;
    if (InputRange == v9)
    {
      float OutputRange = ColorSyncMatrixGetOutputRange((float *)cf);
      float v12 = v11;
      BOOL v13 = OutputRange == ColorSyncMatrixGetOutputRange((float *)a2);
      return v12 == v14 && v13;
    }
  }
  return result;
}

uint64_t ColorSyncNxMGetTypeID()
{
  if (ColorSyncNxMGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncNxMGetTypeID_predicate, &__block_literal_global_11_1487);
  }
  return ColorSyncNxMGetTypeID_kColorSyncNxMLUTRuntimeID;
}

uint64_t __ColorSyncNxMGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  ColorSyncNxMGetTypeID_kColorSyncNxMLUTRuntimeID = result;
  return result;
}

CFStringRef colorSyncNxMLUTCopyDebugDescription(uint64_t a1)
{
  if (a1)
  {
    CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
    return CFStringCreateWithFormat(v2, 0, @"<NxMLUT %p;table[%ld gridpoints]:%p Inputs = %ld Outputs = %ld format = %d properties(0x%x) input range [%+g, %+g] output range [%+g, %+g]>",
             a1,
             *(void *)(a1 + 36),
             *(void *)(a1 + 44),
             *(void *)(a1 + 20),
             *(void *)(a1 + 28),
             *(unsigned int *)(a1 + 16),
             *(unsigned int *)(a1 + 64),
             *(float *)(a1 + 68),
             *(float *)(a1 + 72),
             *(float *)(a1 + 76),
             *(float *)(a1 + 80));
  }
  else
  {
    CFAllocatorRef v4 = CFGetAllocator(0);
    return CFStringCreateWithFormat(v4, 0, @"<NULL NxMLUT>");
  }
}

CFStringRef colorSyncNxMLUTCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, @"<NxMLUT %p>", a1);
}

BOOL nxmLUT_equal_nxmLUT(char *cf, uint64_t a2)
{
  if (cf == (char *)a2) {
    return 1;
  }
  BOOL result = 0;
  if (cf && a2)
  {
    CFTypeID v5 = CFGetTypeID(cf);
    if (ColorSyncNxMGetTypeID_predicate != -1) {
      dispatch_once(&ColorSyncNxMGetTypeID_predicate, &__block_literal_global_11_1487);
    }
    if (v5 != ColorSyncNxMGetTypeID_kColorSyncNxMLUTRuntimeID) {
      return 0;
    }
    CFTypeID v6 = CFGetTypeID((CFTypeRef)a2);
    if (ColorSyncNxMGetTypeID_predicate != -1) {
      dispatch_once(&ColorSyncNxMGetTypeID_predicate, &__block_literal_global_11_1487);
    }
    if (v6 == ColorSyncNxMGetTypeID_kColorSyncNxMLUTRuntimeID && (int v7 = *((_DWORD *)cf + 4), v7 == *(_DWORD *)(a2 + 16)))
    {
      BOOL result = 0;
      if (*(void *)(cf + 20) == *(void *)(a2 + 20) && *(void *)(cf + 28) == *(void *)(a2 + 28))
      {
        float v8 = *(float **)(cf + 44);
        float v9 = *(float **)(a2 + 44);
        switch(v7)
        {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
            BOOL result = 0;
            if (*(void *)(cf + 36) == *(void *)(a2 + 36) && v8 == v9) {
              goto LABEL_16;
            }
            return result;
          case 7:
          case 8:
            if (*v8 != *v9 || v8[2] != v9[2] || v8[3] != v9[3] || v8[4] != v9[4]) {
              return 0;
            }
            float v18 = v8[5];
            float v19 = v9[5];
            goto LABEL_27;
          case 9:
            if (*v8 != *v9
              || v8[1] != v9[1]
              || v8[2] != v9[2]
              || v8[3] != v9[3]
              || v8[4] != v9[4]
              || v8[5] != v9[5]
              || v8[6] != v9[6]
              || v8[7] != v9[7]
              || v8[8] != v9[8]
              || v8[9] != v9[9]
              || v8[10] != v9[10]
              || v8[14] != v9[14]
              || v8[15] != v9[15]
              || v8[16] != v9[16])
            {
              return 0;
            }
            float v18 = v8[17];
            float v19 = v9[17];
LABEL_27:
            if (v18 != v19) {
              return 0;
            }
            goto LABEL_16;
          default:
LABEL_16:
            int v10 = ColorSyncNxMGetProperties((unsigned int *)cf);
            if (v10 != ColorSyncNxMGetProperties((unsigned int *)a2)) {
              return 0;
            }
            float v11 = ColorSyncNxMGetInputRange((float *)cf);
            float v12 = ColorSyncNxMGetInputRange((float *)a2);
            BOOL result = 0;
            if (v11 == v12)
            {
              float v13 = ColorSyncNxMGetOutputRange((float *)cf);
              float v15 = v14;
              BOOL v16 = v13 == ColorSyncNxMGetOutputRange((float *)a2);
              BOOL result = v15 == v17 && v16;
            }
            break;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t ColorSyncNxMGetProperties(unsigned int *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (ColorSyncNxMGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncNxMGetTypeID_predicate, &__block_literal_global_11_1487);
  }
  if (v2 != ColorSyncNxMGetTypeID_kColorSyncNxMLUTRuntimeID) {
    __assert_rtn("ColorSyncNxMGetProperties", "ColorSyncTransformFunctions.c", 836, "CFGetTypeID(ref) == ColorSyncNxMGetTypeID()");
  }
  return a1[16];
}

float ColorSyncNxMGetInputRange(float *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (ColorSyncNxMGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncNxMGetTypeID_predicate, &__block_literal_global_11_1487);
  }
  if (v2 != ColorSyncNxMGetTypeID_kColorSyncNxMLUTRuntimeID) {
    __assert_rtn("ColorSyncNxMGetInputRange", "ColorSyncTransformFunctions.c", 848, "CFGetTypeID(ref) == ColorSyncNxMGetTypeID()");
  }
  return a1[17];
}

float ColorSyncNxMGetOutputRange(float *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (ColorSyncNxMGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncNxMGetTypeID_predicate, &__block_literal_global_11_1487);
  }
  if (v2 != ColorSyncNxMGetTypeID_kColorSyncNxMLUTRuntimeID) {
    __assert_rtn("ColorSyncNxMGetOutputRange", "ColorSyncTransformFunctions.c", 855, "CFGetTypeID(ref) == ColorSyncNxMGetTypeID()");
  }
  return a1[19];
}

void colorSyncNxMLUTFinalize(uint64_t a1)
{
  if (a1)
  {
    CFTypeID v2 = *(const void **)(a1 + 56);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(a1 + 56) = 0;
    }
  }
}

uint64_t ColorSyncNxMCreate(const void *a1, uint64_t a2, int a3, const __CFArray *a4, const __CFArray *a5)
{
  CFTypeID v10 = CFGetTypeID(a1);
  if (v10 != CFDataGetTypeID()) {
    __assert_rtn("ColorSyncNxMCreate", "ColorSyncTransformFunctions.c", 794, "tableData != NULL && CFGetTypeID(tableData) == CFDataGetTypeID()");
  }
  if (ColorSyncNxMGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncNxMGetTypeID_predicate, &__block_literal_global_11_1487);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v12 = Instance;
  if (Instance)
  {
    *(void *)(Instance + 80) = 0;
    *(_OWORD *)(Instance + 4CMMBase::operator delete(this - 8) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(void *)(Instance + 56) = CFRetain(a1);
    int v13 = *(_DWORD *)(a2 + 32);
    long long v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v12 + 16) = *(_OWORD *)a2;
    *(_OWORD *)(v12 + 32) = v14;
    *(_DWORD *)(v12 + 4CMMBase::operator delete(this - 8) = v13;
    if ((a3 & 4) != 0) {
      uint64_t v15 = 0x3F80000000000000;
    }
    else {
      uint64_t v15 = 0x7F7FFFFFFF7FFFFFLL;
    }
    *(void *)(v12 + 6CMMBase::operator delete(this - 8) = v15;
    if (a4)
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a4, 0);
      CFNumberGetValue(ValueAtIndex, kCFNumberFloat32Type, (void *)(v12 + 68));
      CFNumberRef v17 = (const __CFNumber *)CFArrayGetValueAtIndex(a4, 1);
      CFNumberGetValue(v17, kCFNumberFloat32Type, (void *)(v12 + 72));
    }
    if ((a3 & 2) != 0) {
      uint64_t v18 = 0x3F80000000000000;
    }
    else {
      uint64_t v18 = 0x7F7FFFFFFF7FFFFFLL;
    }
    *(void *)(v12 + 76) = v18;
    if (a5)
    {
      CFNumberRef v19 = (const __CFNumber *)CFArrayGetValueAtIndex(a5, 0);
      CFNumberGetValue(v19, kCFNumberFloat32Type, (void *)(v12 + 76));
      CFNumberRef v20 = (const __CFNumber *)CFArrayGetValueAtIndex(a5, 1);
      CFNumberGetValue(v20, kCFNumberFloat32Type, (void *)(v12 + 80));
    }
    *(_DWORD *)(v12 + 64) = a3;
  }
  return v12;
}

__n128 ColorSyncNxMGetFunction@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeID v4 = CFGetTypeID((CFTypeRef)a1);
  if (ColorSyncNxMGetTypeID_predicate != -1) {
    dispatch_once(&ColorSyncNxMGetTypeID_predicate, &__block_literal_global_11_1487);
  }
  if (v4 != ColorSyncNxMGetTypeID_kColorSyncNxMLUTRuntimeID) {
    __assert_rtn("ColorSyncNxMGetFunction", "ColorSyncTransformFunctions.c", 829, "CFGetTypeID(ref) == ColorSyncNxMGetTypeID()");
  }
  __n128 result = *(__n128 *)(a1 + 16);
  long long v6 = *(_OWORD *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 48);
  return result;
}

CFStringRef colorSyncCMMCopyDebugDescription(uint64_t a1)
{
  if (a1)
  {
    CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3)
    {
      CFTypeRef ValueForInfoDictionaryKey = CFBundleGetValueForInfoDictionaryKey(*(CFBundleRef *)(a1 + 24), (CFStringRef)*MEMORY[0x1E4F1D008]);
      CFTypeID v5 = *(__CFBundle **)(a1 + 24);
      if (v5)
      {
        CFTypeRef v6 = CFBundleGetValueForInfoDictionaryKey(v5, (CFStringRef)*MEMORY[0x1E4F1CFF8]);
        return CFStringCreateWithFormat(v2, 0, @"<ColorSyncCMM %p;bundle:%@;\nname:%@;\nidentifier:%@>",
                 a1,
                 v3,
                 ValueForInfoDictionaryKey,
                 v6);
      }
    }
    else
    {
      CFTypeRef ValueForInfoDictionaryKey = *(CFTypeRef *)(a1 + 32);
    }
    CFTypeRef v6 = *(CFTypeRef *)(a1 + 40);
    return CFStringCreateWithFormat(v2, 0, @"<ColorSyncCMM %p;bundle:%@;\nname:%@;\nidentifier:%@>",
             a1,
             v3,
             ValueForInfoDictionaryKey,
             v6);
  }
  CFAllocatorRef v7 = CFGetAllocator(0);

  return CFStringCreateWithFormat(v7, 0, @"<NULL ColorSyncCMM>");
}

CFStringRef colorSyncCMMCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v4, a2, @"<ColorSyncCMM %p>", a1);
}

void colorSyncCMMFinalize(uint64_t a1)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      __assert_rtn("colorSyncCMMFinalize", "ColorSyncCMM.c", 53, "c->builtIn == false");
    }
    uint64_t v1 = *(const void **)(a1 + 24);
    if (v1)
    {
      CFRelease(v1);
    }
  }
}

uint64_t ColorSyncAPIVersion()
{
  return 251658245;
}

uint64_t ColorSyncPrivateAPIVersion()
{
  return 251789312;
}

uint64_t ColorSync_vImageConvert_16Uto16F(uint64_t a1, uint64_t a2)
{
  CFAllocatorRef v4 = (uint64_t (*)())ColorSync_vImageConvert_16Uto16F_ptr__;
  if (!ColorSync_vImageConvert_16Uto16F_ptr__)
  {
    if (ColorSyncLoadvImageDYLD_once != -1) {
      dispatch_once(&ColorSyncLoadvImageDYLD_once, &__block_literal_global_1554);
    }
    CFTypeID v5 = (uint64_t (*)())ColorSyncLoadvImageDYLD_handle;
    if (ColorSyncLoadvImageDYLD_handle) {
      CFTypeID v5 = (uint64_t (*)())dlsym((void *)ColorSyncLoadvImageDYLD_handle, "vImageConvert_16Uto16F");
    }
    if (v5) {
      CFAllocatorRef v4 = v5;
    }
    else {
      CFAllocatorRef v4 = vImage_smart_null;
    }
    ColorSync_vImageConvert_16Uto16F_ptr__ = v4;
  }

  return ((uint64_t (*)(uint64_t, uint64_t, void))v4)(a1, a2, 0);
}

uint64_t vImage_smart_null()
{
  return 0;
}

void __ColorSyncLoadvImageDYLD_block_invoke()
{
  ColorSyncLoadvImageDYLD_handle = (uint64_t)dlopen("/System/Library/Frameworks/Accelerate.framework/Frameworks/vImage.framework/vImage", 5);
  if (!ColorSyncLoadvImageDYLD_handle) {
    ColorSyncLog(2, (uint64_t)"Failed to load %s", v0, v1, v2, v3, v4, v5, (char)"/System/Library/Frameworks/Accelerate.framework/Frameworks/vImage.framework/vImage");
  }
}

uint64_t ColorSync_vImageConvert_16UToF(uint64_t a1, uint64_t a2, __n128 a3, __n128 a4)
{
  CFTypeRef v6 = (uint64_t (*)())ColorSync_vImageConvert_16UToF_ptr__;
  if (!ColorSync_vImageConvert_16UToF_ptr__)
  {
    if (ColorSyncLoadvImageDYLD_once != -1) {
      dispatch_once(&ColorSyncLoadvImageDYLD_once, &__block_literal_global_1554);
    }
    CFAllocatorRef v7 = (uint64_t (*)())ColorSyncLoadvImageDYLD_handle;
    if (ColorSyncLoadvImageDYLD_handle) {
      CFAllocatorRef v7 = (uint64_t (*)())dlsym((void *)ColorSyncLoadvImageDYLD_handle, "vImageConvert_16UToF");
    }
    if (v7) {
      CFTypeRef v6 = v7;
    }
    else {
      CFTypeRef v6 = vImage_smart_null;
    }
    ColorSync_vImageConvert_16UToF_ptr__ = v6;
  }
  a4.n128_u32[0] = 931135616;
  a3.n128_u64[0] = 0;

  return ((uint64_t (*)(uint64_t, uint64_t, void, __n128, __n128))v6)(a1, a2, 0, a3, a4);
}

uint64_t ColorSync_vImageConvert_Fto16F(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t (*)())ColorSync_vImageConvert_Fto16F_ptr__;
  if (!ColorSync_vImageConvert_Fto16F_ptr__)
  {
    if (ColorSyncLoadvImageDYLD_once != -1) {
      dispatch_once(&ColorSyncLoadvImageDYLD_once, &__block_literal_global_1554);
    }
    uint64_t v5 = (uint64_t (*)())ColorSyncLoadvImageDYLD_handle;
    if (ColorSyncLoadvImageDYLD_handle) {
      uint64_t v5 = (uint64_t (*)())dlsym((void *)ColorSyncLoadvImageDYLD_handle, "vImageConvert_PlanarFtoPlanar16F");
    }
    if (v5) {
      uint64_t v4 = v5;
    }
    else {
      uint64_t v4 = vImage_smart_null;
    }
    ColorSync_vImageConvert_Fto16F_ptr__ = v4;
  }

  return ((uint64_t (*)(uint64_t, uint64_t, void))v4)(a1, a2, 0);
}

const void *ColorSyncOptionsGetReferenceWhiteToneMappingOptions(const __CFDictionary *a1)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"com.apple.cmm.ApplyToneMaping");
  if (!Value) {
    return 0;
  }
  CFDictionaryRef v2 = Value;
  CFTypeID v3 = CFGetTypeID(Value);
  if (v3 != CFDictionaryGetTypeID()) {
    return 0;
  }

  return CFDictionaryGetValue(v2, @"com.apple.cmm.ApplyReferenceWhiteToneMapping");
}

float ColorSyncOptionsGetSDRToPQScale(const void *a1)
{
  if (!a1) {
    return 203.0;
  }
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 != CFDictionaryGetTypeID()) {
    return 203.0;
  }
  CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, @"com.apple.cmm.SkipBoostToHDR");
  float result = 203.0;
  if (Value == (const void *)*MEMORY[0x1E4F1CFD0]) {
    return 100.0;
  }
  return result;
}

uint64_t __ColorSyncMakeCopyWithLUTBasedLumaScaling_block_invoke(uint64_t a1, _OWORD *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  long long v4 = a2[2];
  long long v3 = a2[3];
  long long v5 = *(_OWORD *)((char *)a2 + 60);
  *(_OWORD *)(v2 + 40) = a2[1];
  *(_OWORD *)(v2 + 84) = v5;
  *(_OWORD *)(v2 + 72) = v3;
  *(_OWORD *)(v2 + 56) = v4;
  *(_OWORD *)(v2 + 24) = *a2;
  return 1;
}

uint64_t __ColorSyncMakeCopyWithLUTBasedLumaScaling_block_invoke_2(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a1[6];
    uint64_t v7 = *(void *)(*(void *)(a1[4] + 8) + 76);
    unint64_t v8 = (2 * v6 + 15) & 0xFFFFFFFFFFFFFFFCLL;
    unsigned int v18 = bswap32(v6);
    uint64_t v19 = *(void *)(*(void *)(a1[5] + 8) + 24);
    float v9 = (_WORD *)(v19 + 12);
    do
    {
      int v22 = 0;
      memset(v21, 0, sizeof(v21));
      ColorSyncTRCGetFunction(*(void *)(v7 + 8 * *(void *)(a4 + 8 * v5)), (uint64_t)v21);
      int v10 = v21[0];
      if (LODWORD(v21[0]) >= 0xA) {
        __assert_rtn("handle_trc_stage", "ColorSyncProfileMakeCopyWithLUTBasedLumaScaling.c", 266, "0");
      }
      ColorSyncTRCGetProperties(*(unsigned int **)(v7 + 8 * *(void *)(a4 + 8 * v5)));
      if (v10 != 5) {
        __assert_rtn("handle_trc_stage", "ColorSyncProfileMakeCopyWithLUTBasedLumaScaling.c", 280, "trc.type == kColorSyncTRCTable");
      }
      if (*(void *)((char *)v21 + 4) != v6) {
        __assert_rtn("handle_trc_stage", "ColorSyncProfileMakeCopyWithLUTBasedLumaScaling.c", 283, "table_count == trc.u.table.size");
      }
      float v11 = (_DWORD *)(v19 + v5 * v8);
      _DWORD *v11 = 1987212643;
      v11[2] = v18;
      if (v6)
      {
        uint64_t v12 = *(float **)((char *)v21 + 12);
        int v13 = v9;
        uint64_t v14 = v6;
        do
        {
          float v15 = *v12++;
          int v16 = (int)(float)((float)(powf(v15, 0.2) * 65535.0) + 0.5);
          if (v16 >= 0xFFFF) {
            int v16 = 0xFFFF;
          }
          *v13++ = bswap32(v16 & ~(v16 >> 31)) >> 16;
          --v14;
        }
        while (v14);
      }
      ++v5;
      float v9 = (_WORD *)((char *)v9 + v8);
    }
    while (v5 != a3);
  }
  return 1;
}

uint64_t __ColorSyncMakeCopyWithLUTBasedLumaScaling_block_invoke_3(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1[5] + 8) + 24);
  float v5 = *(float *)(*(void *)(a1[6] + 8) + 24);
  uint64_t v6 = *(void *)(*(void *)(a1[4] + 8) + 84);
  memset(v14, 0, sizeof(v14));
  ColorSyncMatrixGetFunction(*(void *)(v6 + 8 * a3), (uint64_t)v14);
  ColorSyncMatrixGetProperties(*(unsigned int **)(v6 + 8 * a3));
  if (v4)
  {
    uint64_t v7 = 0;
    unint64_t v8 = v14;
    do
    {
      for (uint64_t i = 0; i != 12; i += 4)
      {
        float v10 = v5 * 0.5 * *(float *)((char *)v8 + i);
        float v11 = v10 * 65536.0;
        if (v11 <= 0.0)
        {
          if (v11 < 0.0) {
            float v11 = v11 + -0.5;
          }
        }
        else
        {
          float v11 = v11 + 0.5;
        }
        if (v11 >= 2147500000.0)
        {
          unsigned int v12 = 0x7FFFFFFF;
        }
        else if (v11 <= -2147500000.0)
        {
          unsigned int v12 = 0x80000000;
        }
        else
        {
          unsigned int v12 = (int)v11;
        }
        *(_DWORD *)(v4 + i) = bswap32(v12);
      }
      v4 += 12;
      ++v7;
      ++v8;
    }
    while (v7 != 3);
  }
  return 1;
}

uint64_t __ColorSyncMakeCopyWithLUTBasedLumaScaling_block_invoke_4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(_WORD **)(*(void *)(a1[5] + 8) + 24);
  float v5 = *(float **)(*(void *)(a1[6] + 8) + 24);
  uint64_t v6 = a1[8];
  uint64_t v7 = *(void *)(a1[7] + 8);
  uint64_t v8 = *(void *)(*(void *)(a1[4] + 8) + 92);
  memset(v41, 0, 36);
  ColorSyncNxMGetFunction(*(void *)(v8 + 8 * a3), (uint64_t)v41);
  ColorSyncNxMGetProperties(*(unsigned int **)(v8 + 8 * a3));
  if (LODWORD(v41[0]) == 11)
  {
    uint64_t v9 = *(void *)((char *)&v41[1] + 12);
    *(_DWORD *)(v7 + 24) = *(_DWORD *)(*(void *)((char *)&v41[1] + 12) + 24);
    if (v6)
    {
      unint64_t v10 = 0;
      float v11 = (float)(unint64_t)(v6 - 1);
      uint64_t v12 = v9 + 36;
      unint64_t v13 = *(void *)(v9 + 28) - 1;
      float v14 = (float)v13;
      do
      {
        unint64_t v40 = v10;
        float v15 = powf((float)v10 / v11, 5.0);
        for (unint64_t i = 0; i != v6; ++i)
        {
          float v17 = powf((float)i / v11, 5.0);
          for (unint64_t j = 0; j != v6; ++j)
          {
            float v19 = powf((float)j / v11, 5.0);
            if (v17 <= v19) {
              float v20 = v19;
            }
            else {
              float v20 = v17;
            }
            float v21 = *(float *)(v9 + 4);
            if (v15 > v20) {
              float v20 = v15;
            }
            float v22 = (float)((float)((float)(v17 * *(float *)(v9 + 12)) + (float)(v15 * *(float *)(v9 + 8)))
                        + (float)(v19 * *(float *)(v9 + 16)))
                + (float)(v20 * *(float *)(v9 + 20));
            float v23 = fmaxf(fabsf(v22), 1.1755e-38) * v14;
            if (v23 <= v14) {
              float v24 = v23;
            }
            else {
              float v24 = (float)v13;
            }
            if (v23 >= 0.0) {
              float v25 = v24;
            }
            else {
              float v25 = 0.0;
            }
            unint64_t v27 = v25 + 1;
            if (v13 < v27) {
              unint64_t v27 = v13;
            }
            float v26 = *(float *)(v12 + 4 * v25);
            if (v22 >= 0.0) {
              float v28 = v26 + (float)((float)(*(float *)(v12 + 4 * v27) - v26) * (float)(v25 - (float)v25));
            }
            else {
              float v28 = -(float)(v26
            }
                           + (float)((float)(*(float *)(v12 + 4 * v27) - v26) * (float)(v25 - (float)v25)));
            if ((float)(v15 * v28) <= v21) {
              float v29 = v15 * v28;
            }
            else {
              float v29 = *(float *)(v9 + 4);
            }
            if ((float)(v15 * v28) >= 0.0) {
              float v30 = v29;
            }
            else {
              float v30 = 0.0;
            }
            if ((float)(v17 * v28) <= v21) {
              float v31 = v17 * v28;
            }
            else {
              float v31 = *(float *)(v9 + 4);
            }
            if ((float)(v17 * v28) >= 0.0) {
              float v32 = v31;
            }
            else {
              float v32 = 0.0;
            }
            float v33 = v19 * v28;
            if (v33 <= v21) {
              float v34 = v33;
            }
            else {
              float v34 = *(float *)(v9 + 4);
            }
            if (v33 >= 0.0) {
              float v35 = v34;
            }
            else {
              float v35 = 0.0;
            }
            int v36 = (int)(float)((float)(v30 * 65535.0) + 0.5);
            if (v36 >= 0xFFFF) {
              int v36 = 0xFFFF;
            }
            *uint64_t v4 = bswap32(v36 & ~(v36 >> 31)) >> 16;
            int v37 = (int)(float)((float)(v32 * 65535.0) + 0.5);
            if (v37 >= 0xFFFF) {
              int v37 = 0xFFFF;
            }
            v4[1] = bswap32(v37 & ~(v37 >> 31)) >> 16;
            if ((int)(float)((float)(v35 * 65535.0) + 0.5) >= 0xFFFF) {
              int v38 = 0xFFFF;
            }
            else {
              int v38 = (int)(float)((float)(v35 * 65535.0) + 0.5);
            }
            v4[2] = bswap32(v38 & ~(v38 >> 31)) >> 16;
            v4 += 3;
            float *v5 = v30;
            v5[1] = v32;
            v5[2] = v35;
            v5 += 3;
          }
        }
        unint64_t v10 = v40 + 1;
      }
      while (v40 + 1 != v6);
    }
  }
  return 1;
}

int CC_MD5_Final(unsigned __int8 *md, CC_MD5_CTX *c)
{
  return MEMORY[0x1F40C9718](md, c);
}

int CC_MD5_Init(CC_MD5_CTX *c)
{
  return MEMORY[0x1F40C9720](c);
}

int CC_MD5_Update(CC_MD5_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1F40C9728](c, data, *(void *)&len);
}

CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  return (CFAllocatorRef)MEMORY[0x1F40D70F8](allocator, context);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D7160](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7198](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
}

void CFArrayReplaceValues(CFMutableArrayRef theArray, CFRange range, const void **newValues, CFIndex newCount)
{
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

uint64_t CFBundleCopyLocalizationForLocalizationInfo()
{
  return MEMORY[0x1F40D7488]();
}

CFArrayRef CFBundleCopyPreferredLocalizationsFromArray(CFArrayRef locArray)
{
  return (CFArrayRef)MEMORY[0x1F40D74C0](locArray);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1F40D7538](bundleID);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1F40D7568](bundle);
}

CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1F40D75D0](bundle, key);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1F40D77A8](cf);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

CFDataRef CFDataCreateCopy(CFAllocatorRef allocator, CFDataRef theData)
{
  return (CFDataRef)MEMORY[0x1F40D77F8](allocator, theData);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1F40D7808](allocator, capacity);
}

CFMutableDataRef CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData)
{
  return (CFMutableDataRef)MEMORY[0x1F40D7810](allocator, capacity, theData);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1F40D7818](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1F40D7858](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1F40D7860]();
}

void CFDataIncreaseLength(CFMutableDataRef theData, CFIndex extraLength)
{
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

Boolean CFDictionaryContainsValue(CFDictionaryRef theDict, const void *value)
{
  return MEMORY[0x1F40D7970](theDict, value);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D79A8](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1F40D7B60](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x1F40D7E30](number);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7ED0](key, applicationID, userName, hostName);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40D7F18](allocator, propertyList, format, options, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFShow(CFTypeRef obj)
{
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFComparisonResult CFStringCompareWithOptions(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8390](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8408](alloc, maxLength);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1F40D8438](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x1F40D8460](alloc, chars, numChars);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1F40D8490](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithFormatAndArguments(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments)
{
  return (CFStringRef)MEMORY[0x1F40D8498](alloc, formatOptions, format, arguments);
}

CFStringRef CFStringCreateWithPascalString(CFAllocatorRef alloc, ConstStr255Param pStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D84A0](alloc, pStr, *(void *)&encoding);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1F40D8500](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8590](length, *(void *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1F40D8600](theString, prefix);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D88A0](allocator, filePath, pathStyle, isDirectory);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1F40D8908](url, resolveAgainstBase, buffer, maxBufLen);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x1F40D8928]();
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x1F40D89A0](alloc, *(void *)&bytes.byte0, *(void *)&bytes.byte8);
}

CFTypeID CFUUIDGetTypeID(void)
{
  return MEMORY[0x1F40D89D8]();
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1 = MEMORY[0x1F40D89E8](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFBundleGetLanguageAndRegionCodes()
{
  return MEMORY[0x1F40D8C60]();
}

uint64_t _CFBundleGetMainBundleIfLooksLikeBundle()
{
  return MEMORY[0x1F40D8C68]();
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1F40D90D0]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1F40D90E8]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1F40C9B60](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1F417EFA8](lpsrc, lpstype, lpdtype, s2d);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1F40C9C28]();
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x1F40C9C80](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1F40CA210](a1, *(void *)&a2);
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x1F40CA460](__y, __x);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x1F40CA4A8](a1);
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

size_t confstr(int a1, char *a2, size_t a3)
{
  return MEMORY[0x1F40CB438](*(void *)&a1, a2, a3);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void dispatch_group_async_f(dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void dispatch_release(dispatch_object_t object)
{
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1F40CBEC8]();
}

long double exp2(long double __x)
{
  MEMORY[0x1F40CBFE8](__x);
  return result;
}

float exp2f(float a1)
{
  MEMORY[0x1F40CBFF0](a1);
  return result;
}

float expf(float a1)
{
  MEMORY[0x1F40CBFF8](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2B8](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

int getpagesize(void)
{
  return MEMORY[0x1F40CC480]();
}

kern_return_t host_info(host_t host, host_flavor_t flavor, host_info_t host_info_out, mach_msg_type_number_t *host_info_outCnt)
{
  return MEMORY[0x1F40CC608](*(void *)&host, *(void *)&flavor, host_info_out, host_info_outCnt);
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x1F40CC868](a1);
}

long double log(long double __x)
{
  MEMORY[0x1F40CC878](__x);
  return result;
}

float log10f(float a1)
{
  MEMORY[0x1F40CC888](a1);
  return result;
}

float log2f(float a1)
{
  MEMORY[0x1F40CC8B0](a1);
  return result;
}

float logf(float a1)
{
  MEMORY[0x1F40CC8C0](a1);
  return result;
}

mach_port_t mach_host_self(void)
{
  return MEMORY[0x1F40CC950]();
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1F40CC9B8](*(void *)&task, *(void *)&name);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x1F40CD828](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1F40CD838](a1);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1F40CDAA0](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1F40CDAA8](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1F40CDAC0](a1, *(void *)&a2);
}

int puts(const char *a1)
{
  return MEMORY[0x1F40CDBB8](a1);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1F40CDC50](*(void *)&a1, a2, a3);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x1F40CE168](__dst, __src);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

void swab(const void *a1, void *a2, ssize_t a3)
{
}

time_t time(time_t *a1)
{
  return MEMORY[0x1F40CE588](a1);
}

kern_return_t vm_copy(vm_map_t target_task, vm_address_t source_address, vm_size_t size, vm_address_t dest_address)
{
  return MEMORY[0x1F40CE6B8](*(void *)&target_task, source_address, size, dest_address);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1F40CE6C0](*(void *)&target_task, address, size);
}