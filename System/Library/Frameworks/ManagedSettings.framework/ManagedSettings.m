uint64_t sub_100002738()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  sub_100003C68(&qword_100077140);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(unsigned char *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64) {
    v7 = ~(-1 << v5);
  }
  else {
    v7 = -1;
  }
  v8 = v7 & *(void *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v22 = -1 << *(unsigned char *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26) {
          v24 = 0;
        }
        v25 |= v27;
        v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_1000029E8(int a1)
{
  uint64_t v2 = static Hasher._hash(seed:bytes:count:)();

  return sub_1000043E8(a1, v2);
}

Swift::Int sub_100002A98(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_10002717C();
  }
  else
  {
    if (v10 > v9)
    {
      result = (Swift::Int)sub_100029BCC();
      goto LABEL_22;
    }
    sub_100002738();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  Swift::Int *v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_100002C94(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_100002A98(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

void sub_100002E44(void *a1, char a2)
{
  uint64_t v4 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [self currentConnection];
  if (v8)
  {
    uint64_t v9 = v8;
    v29 = &_swiftEmptySetSingleton;
    id v10 = a1;
    NSSet.makeIterator()();

    sub_100004604(&qword_1000773E8, (void (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator);
    dispatch thunk of IteratorProtocol.next()();
    while (v26)
    {
      sub_1000043D8(&aBlock, v23);
      sub_1000037D4((uint64_t)v23, (uint64_t)&v22);
      if (swift_dynamicCast())
      {
        sub_100002C94(&v22, v21[1], v21[2]);
        swift_bridgeObjectRelease();
      }
      _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v23);
      dispatch thunk of IteratorProtocol.next()();
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v11 = v29;
    if (v29[2])
    {
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = v9;
      *(void *)(v12 + 24) = &protocol witness table for NSXPCConnection;
      int v13 = a2 & 1;
      *(unsigned char *)(v12 + 32) = a2 & 1;
      v27 = sub_100032A18;
      uint64_t v28 = v12;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      v25 = sub_10002C398;
      v26 = &unk_100072430;
      uint64_t v14 = _Block_copy(&aBlock);
      id v15 = v9;
      swift_release();
      [v15 setInterruptionHandler:v14];
      _Block_release(v14);
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = &protocol witness table for NSXPCConnection;
      *(unsigned char *)(v16 + 32) = v13;
      v27 = sub_100033108;
      uint64_t v28 = v16;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      v25 = sub_10002C398;
      v26 = &unk_100072480;
      uint64_t v17 = _Block_copy(&aBlock);
      id v18 = v15;
      swift_release();
      [v18 setInvalidationHandler:v17];
      _Block_release(v17);
      type metadata accessor for PublisherCenter.Client();
      BOOL v19 = (void *)swift_allocObject();
      v19[2] = v18;
      v19[3] = &protocol witness table for NSXPCConnection;
      v19[4] = v11;
      uint64_t v20 = qword_100076398;
      swift_unknownObjectRetain();
      if (v20 != -1) {
        swift_once();
      }
      sub_10000328C((uint64_t)v19, v13);
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      if (qword_100076398 != -1) {
        swift_once();
      }
      sub_1000086E8((int)[v9 processIdentifier], a2 & 1);
    }
  }
}

id sub_10000328C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  [*(id *)(v2 + 24) lock];
  swift_getObjectType();
  int v10 = dispatch thunk of XPCConnectable.processIdentifier.getter();
  static Logger.subscription.getter();
  swift_retain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  int v13 = v12;
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v33 = v7;
    uint64_t v15 = v14;
    uint64_t v31 = swift_slowAlloc();
    v37[0] = v31;
    *(_DWORD *)uint64_t v15 = 136446722;
    if (a2) {
      uint64_t v16 = 0x76697463656A624FLL;
    }
    else {
      uint64_t v16 = 0x7466697753;
    }
    int v34 = a2;
    if (a2) {
      unint64_t v17 = 0xEB00000000432065;
    }
    else {
      unint64_t v17 = 0xE500000000000000;
    }
    int v30 = v13;
    uint64_t v36 = sub_1000036B0(v16, v17, v37);
    uint64_t v32 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 1026;
    LODWORD(v36) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 18) = 2082;
    v29[1] = v15 + 20;
    swift_bridgeObjectRetain();
    a2 = v10;
    uint64_t v18 = Set.description.getter();
    unint64_t v20 = v19;
    swift_bridgeObjectRelease();
    uint64_t v21 = v18;
    int v10 = a2;
    uint64_t v36 = sub_1000036B0(v21, v20, v37);
    LOBYTE(a2) = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, (os_log_type_t)v30, "Adding subscription for %{public}s process %{public}d for groups %{public}s", (uint8_t *)v15, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v32);
  }
  else
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_beginAccess();
  uint64_t v22 = *(void *)(v3 + 16);
  if (*(void *)(v22 + 16) && (unint64_t v23 = sub_1000029E8(v10), (v24 & 1) != 0))
  {
    uint64_t v25 = *(void *)(*(void *)(v22 + 56) + 8 * v23);
    swift_retain();
  }
  else
  {
    type metadata accessor for PublisherCenter.Subscription();
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = 0;
    *(void *)(v25 + 24) = 0;
  }
  uint64_t v26 = 16;
  if (a2) {
    uint64_t v26 = 24;
  }
  *(void *)(v25 + v26) = a1;
  swift_retain();
  swift_release();
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v35 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0x8000000000000000;
  sub_100004484(v25, v10, isUniquelyReferenced_nonNull_native);
  *(void *)(v3 + 16) = v35;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  return [*(id *)(v3 + 24) unlock];
}

uint64_t sub_1000036B0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100003830(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1000037D4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1000037D4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v12);
  return v7;
}

uint64_t _s20ManagedSettingsAgent12ClientFinderVwxx_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000037D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100003830(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1000039EC(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1000039EC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_100003A84(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10001A724(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10001A724(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_100003A84(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_100003BFC(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_100003BFC(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100003C68(&qword_100076E98);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_100003C68(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100003CAC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v45 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v45 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v45 - v15;
  if ((static Feature.isManagedSettingsEnabled.getter() & 1) == 0)
  {
    static Logger.agent.getter();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "The Managed Settings feature is unsupported", v28, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    return 0;
  }
  id v17 = [a1 serviceName];
  if (!v17)
  {
    static Logger.agent.getter();
    v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Received connection with missing service name", v31, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    return 0;
  }
  uint64_t v18 = v17;
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v21 = v20;

  LODWORD(v47) = [a1 processIdentifier];
  static Logger.agent.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  v48 = v2;
  if (v24)
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    uint64_t v50 = v45;
    *(_DWORD *)uint64_t v25 = 136446466;
    uint64_t v46 = v5;
    swift_bridgeObjectRetain();
    uint64_t v49 = sub_1000036B0(v19, v21, &v50);
    uint64_t v5 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v25 + 12) = 1026;
    LODWORD(v49) = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s connection received from process %{public}d", (uint8_t *)v25, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v33 = *(void (**)(char *, uint64_t))(v5 + 8);
  v33(v16, v4);
  if (static ManagedSettingsService.name.getter() != v19 || v34 != v21)
  {
    char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v35) {
      goto LABEL_17;
    }
    if (static ManagedSettingsPublisherService.name.getter() == v19 && v40 == v21)
    {
      swift_bridgeObjectRelease();
LABEL_24:
      swift_bridgeObjectRelease();
      uint64_t v36 = (void *)static ManagedSettingsPublisherService.agentInterface.getter();
      uint64_t v37 = static ManagedSettingsPublisherService.clientInterface.getter();
      goto LABEL_18;
    }
    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v41) {
      goto LABEL_24;
    }
    static Logger.agent.getter();
    swift_bridgeObjectRetain();
    v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v48 = v14;
      v44 = (uint8_t *)swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      *(_DWORD *)v44 = 136446210;
      uint64_t v47 = v4;
      swift_bridgeObjectRetain();
      uint64_t v49 = sub_1000036B0(v19, v21, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Received connection with unknown service name: %{public}s", v44, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v33(v48, v47);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      v33(v14, v4);
    }
    return 0;
  }
  swift_bridgeObjectRelease();
LABEL_17:
  swift_bridgeObjectRelease();
  uint64_t v36 = (void *)static ManagedSettingsService.agentInterface.getter();
  uint64_t v37 = static ManagedSettingsService.clientInterface.getter();
LABEL_18:
  v38 = (void *)v37;
  v39 = v48;
  [a1 setExportedInterface:v36];
  [a1 setExportedObject:v39];
  [a1 setRemoteObjectInterface:v38];
  [a1 activate];

  return 1;
}

uint64_t sub_100004334(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100004344(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100004354(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100004364(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100004374(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100004384(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100004394(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000043A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000043B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000043C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

_OWORD *sub_1000043D8(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_1000043E8(int a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

uint64_t sub_100004484(uint64_t a1, int a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1000029E8(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10001E894();
LABEL_7:
    uint64_t v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_DWORD *)(v16[6] + 4 * v10) = a2;
    *(void *)(v16[7] + 8 * v10) = a1;
    uint64_t v19 = v16[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_10001A874(result, a3 & 1);
  uint64_t result = sub_1000029E8(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    uint64_t v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PublisherCenter.Client()
{
  return self;
}

uint64_t type metadata accessor for PublisherCenter.Subscription()
{
  return self;
}

uint64_t sub_100004604(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

int main(int argc, const char **argv, const char **envp)
{
  qword_100079540 = 0xD00000000000001ELL;
  *(void *)algn_100079548 = 0x8000000100066680;
  if (_set_user_dir_suffix())
  {
    qword_100079550 = (uint64_t)[objc_allocWithZone((Class)type metadata accessor for Agent()) init];
    sub_10002C204();
    dispatch_main();
  }
  int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double variable initialization expression of ExtensionFinder.extensionLaunchTimeout()
{
  return 5.0;
}

double variable initialization expression of ExtensionFinder.shieldActionTimeout()
{
  return 30.0;
}

double variable initialization expression of ExtensionFinder.shieldConfigurationTimeout()
{
  return 0.5;
}

unint64_t variable initialization expression of ExtensionFinder.shieldActionExtensionPointName()
{
  return 0xD00000000000002FLL;
}

unint64_t variable initialization expression of ExtensionFinder.shieldConfigurationExtensionPointName()
{
  return 0xD000000000000038;
}

void type metadata accessor for Name(uint64_t a1)
{
}

uint64_t sub_100004864(uint64_t a1, uint64_t a2)
{
  return sub_100004B88(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_10000487C(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_1000048F4(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_100004974@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1000049B8@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100004A00@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100004A2C(uint64_t a1)
{
  uint64_t v2 = sub_100004B2C(&qword_1000763E8);
  uint64_t v3 = sub_100004B2C(&qword_1000763F0);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100004AC4()
{
  return sub_100004B2C(&qword_1000763D0);
}

uint64_t sub_100004AF8()
{
  return sub_100004B2C(&qword_1000763D8);
}

uint64_t sub_100004B2C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Name(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100004B70(uint64_t a1, uint64_t a2)
{
  return sub_100004B88(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100004B88(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100004BCC()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100004C20()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100004C94()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_100004D20()
{
  return sub_100004B2C(&qword_1000763E0);
}

void type metadata accessor for Result(uint64_t a1)
{
}

void sub_100004D68(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

void *sub_100004DB0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v72 = *(void *)(v2 - 8);
  uint64_t v73 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  v69 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v74 = (char *)&v64 - v5;
  uint64_t v6 = type metadata accessor for CocoaError.Code();
  uint64_t v70 = *(void *)(v6 - 8);
  v71 = (uint8_t *)v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v64 - v15;
  __chkstk_darwin(v14);
  char v18 = (char *)&v64 - v17;
  v76 = &_swiftEmptyArrayStorage;
  sub_100006DCC(v0, v0[3]);
  dispatch thunk of Locatable.internalSettingsRootDirectory.getter();
  id v19 = [self defaultManager];
  URL._bridgeToObjectiveC()(v20);
  uint64_t v22 = v21;
  id v77 = 0;
  id v23 = [v19 contentsOfDirectoryAtURL:v21 includingPropertiesForKeys:0 options:0 error:&v77];

  id v24 = v77;
  if (v23)
  {
    uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v26 = v24;

    __chkstk_darwin(v27);
    *(&v64 - 2) = (uint64_t)v1;
    uint64_t v28 = sub_100005848((void (*)(char *))sub_100006E68, (uint64_t)(&v64 - 4), v25);
    swift_bridgeObjectRelease();
    sub_100005D60((uint64_t)v28);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v9);
  }
  else
  {
    v65 = v13;
    v66 = v16;
    v29 = v74;
    uint64_t v67 = v9;
    v68 = v18;
    id v30 = v77;
    uint64_t v31 = _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    static CocoaError.fileNoSuchFile.getter();
    sub_100006E10();
    uint64_t v32 = v71;
    LOBYTE(v30) = static _ErrorCodeProtocol.~= infix(_:_:)();
    swift_errorRelease();
    uint64_t v33 = *(void (**)(char *, uint8_t *))(v70 + 8);
    v33(v8, v32);
    if ((v30 & 1) != 0
      || (swift_errorRetain(),
          static CocoaError.fileReadNoSuchFile.getter(),
          char v34 = static _ErrorCodeProtocol.~= infix(_:_:)(),
          swift_errorRelease(),
          v33(v8, v32),
          (v34 & 1) != 0))
    {
      swift_errorRelease();
      static Logger.effective.getter();
      uint64_t v35 = v10;
      uint64_t v37 = v66;
      uint64_t v36 = v67;
      v38 = v68;
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v66, v68, v67);
      v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.info.getter();
      BOOL v41 = os_log_type_enabled(v39, v40);
      uint64_t v42 = v72;
      if (v41)
      {
        os_log_type_t v43 = (uint8_t *)swift_slowAlloc();
        id v77 = (id)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v43 = 136446210;
        v71 = v43 + 4;
        uint64_t v44 = URL.path.getter();
        uint64_t v75 = sub_1000036B0(v44, v45, (uint64_t *)&v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v46 = *(void (**)(char *, uint64_t))(v35 + 8);
        v46(v37, v36);
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Skipping %{public}s because it doesn't exist", v43, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v42 + 8))(v74, v73);
        v46(v68, v36);
      }
      else
      {

        uint64_t v47 = *(void (**)(char *, uint64_t))(v35 + 8);
        v47(v37, v36);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v29, v73);
        v47(v38, v36);
      }
    }
    else
    {
      v48 = v69;
      static Logger.effective.getter();
      uint64_t v49 = v10;
      uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
      v51 = v65;
      uint64_t v52 = v67;
      v53 = v68;
      v50(v65, v68, v67);
      swift_errorRetain();
      swift_errorRetain();
      v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = swift_slowAlloc();
        v74 = (char *)swift_slowAlloc();
        id v77 = v74;
        *(_DWORD *)uint64_t v56 = 136446466;
        uint64_t v57 = URL.path.getter();
        uint64_t v75 = sub_1000036B0(v57, v58, (uint64_t *)&v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v59 = *(void (**)(char *, uint64_t))(v49 + 8);
        v59(v51, v52);
        *(_WORD *)(v56 + 12) = 2082;
        uint64_t v75 = v31;
        swift_errorRetain();
        sub_100003C68(&qword_100076FE0);
        uint64_t v60 = String.init<A>(describing:)();
        uint64_t v75 = sub_1000036B0(v60, v61, (uint64_t *)&v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Failed to enumerate %{public}s: %{public}s", (uint8_t *)v56, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v72 + 8))(v69, v73);
        v59(v68, v52);
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        v62 = *(void (**)(char *, uint64_t))(v49 + 8);
        v62(v51, v52);
        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v72 + 8))(v48, v73);
        v62(v53, v52);
      }
    }
  }
  return v76;
}

uint64_t sub_1000055FC@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v21 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = URL.lastPathComponent.getter();
  uint64_t v9 = v8;
  sub_100006DCC(a1, a1[3]);
  dispatch thunk of Locatable.internalSettingsPath(for:)();
  id v10 = [self defaultManager];
  URL.path.getter();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v12 = [v10 fileExistsAtPath:v11];

  if (v12)
  {
    uint64_t v13 = static TeamIdentifierRetriever.internalTeamIdentifier.getter();
    uint64_t v15 = v14;
    uint64_t v16 = sub_100003C68(&qword_1000764D8);
    uint64_t v17 = a2 + *(int *)(v16 + 48);
    *(void *)a2 = v7;
    *(void *)(a2 + 8) = v9;
    *(void *)(a2 + 16) = v13;
    *(void *)(a2 + 24) = v15;
    *(unsigned char *)(a2 + 32) = 1;
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v17, v6, v21);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a2, 0, 1, v16);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v21);
    swift_bridgeObjectRelease();
    uint64_t v19 = sub_100003C68(&qword_1000764D8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(a2, 1, 1, v19);
  }
}

void *sub_100005848(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v51 = a2;
  uint64_t v7 = sub_100003C68(&qword_1000764E0);
  __chkstk_darwin(v7 - 8);
  os_log_type_t v40 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_100003C68(&qword_1000764D8);
  uint64_t v9 = *(void *)(v47 - 8);
  uint64_t v10 = __chkstk_darwin(v47);
  uint64_t v46 = (uint64_t)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v39 = (uint64_t)&v36 - v12;
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v52 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100003C68(&qword_1000764C0);
  __chkstk_darwin(v16 - 8);
  char v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a3 + 16);
  if (v19)
  {
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    uint64_t v21 = v14 + 16;
    uint64_t v22 = a3 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v53 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 40);
    uint64_t v23 = *(void *)(v21 + 56);
    v48 = (unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 32);
    uint64_t v49 = v20;
    uint64_t v43 = v23;
    uint64_t v44 = (void (**)(char *))(v21 + 16);
    uint64_t v50 = v21;
    unint64_t v45 = (void (**)(char *, uint64_t))(v21 - 8);
    uint64_t v36 = a3;
    uint64_t v37 = v9;
    uint64_t v42 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    swift_bridgeObjectRetain();
    v54 = &_swiftEmptyArrayStorage;
    v38 = a1;
    uint64_t v24 = (uint64_t)v40;
    while (1)
    {
      v49(v18, v22, v13);
      BOOL v41 = *v53;
      v41(v18, 0, 1, v13);
      if ((*v48)(v18, 1, v13) == 1) {
        break;
      }
      uint64_t v25 = v18;
      id v26 = a1;
      uint64_t v27 = v52;
      uint64_t v28 = v25;
      (*v44)(v52);
      v26(v27);
      if (v4)
      {
        (*v45)(v27, v13);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v54;
      }
      (*v45)(v27, v13);
      if ((*v42)(v24, 1, v47) == 1)
      {
        sub_100006E84(v24, &qword_1000764E0);
        a1 = v26;
        uint64_t v4 = 0;
        char v18 = v28;
      }
      else
      {
        uint64_t v29 = v24;
        uint64_t v30 = v39;
        sub_100006EE0(v29, v39, &qword_1000764D8);
        sub_100006EE0(v30, v46, &qword_1000764D8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v54 = (void *)sub_100053DC8(0, v54[2] + 1, 1, (unint64_t)v54);
        }
        uint64_t v4 = 0;
        unint64_t v32 = v54[2];
        unint64_t v31 = v54[3];
        char v18 = v28;
        if (v32 >= v31 >> 1) {
          v54 = (void *)sub_100053DC8(v31 > 1, v32 + 1, 1, (unint64_t)v54);
        }
        uint64_t v33 = v54;
        v54[2] = v32 + 1;
        sub_100006EE0(v46, (uint64_t)v33+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(void *)(v37 + 72) * v32, &qword_1000764D8);
        a1 = v38;
        uint64_t v24 = (uint64_t)v40;
      }
      v22 += v43;
      if (!--v19)
      {
        v41(v18, 1, 1, v13);
        break;
      }
    }
  }
  else
  {
    char v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    swift_bridgeObjectRetain();
    v54 = &_swiftEmptyArrayStorage;
    v34(v18, 1, 1, v13);
  }
  swift_bridgeObjectRelease();
  return v54;
}

uint64_t sub_100005D60(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v23 = v4 + v2;
  }
  else {
    int64_t v23 = v4;
  }
  unint64_t v3 = sub_100053DC8(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = *(void *)(sub_100003C68(&qword_1000764D8) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = v3 + v13 + v12 * v9;
  unint64_t v15 = a1 + v13;
  uint64_t v16 = v12 * v8;
  unint64_t v17 = v14 + v16;
  unint64_t v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v20 = *(void *)(v3 + 16);
  BOOL v21 = __OFADD__(v20, v8);
  uint64_t v22 = v20 + v8;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100005F14(uint64_t result)
{
  uint64_t v3 = *(void *)(result + 16);
  int64_t v4 = *v1;
  int64_t v5 = *((void *)*v1 + 2);
  int64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v7 = result;
  int isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v9 = *((void *)v4 + 3) >> 1, v9 < v6))
  {
    if (v5 <= v6) {
      int64_t v10 = v5 + v3;
    }
    else {
      int64_t v10 = v5;
    }
    int64_t v4 = sub_1000544D0(isUniquelyReferenced_nonNull_native, v10, 1, v4);
    int64_t v9 = *((void *)v4 + 3) >> 1;
  }
  uint64_t v11 = *((void *)v4 + 2);
  uint64_t v12 = v9 - v11;
  uint64_t result = sub_100049D78((uint64_t)v38, &v4[16 * v11 + 32], v9 - v11, v7);
  if (result < v3) {
    goto LABEL_15;
  }
  if (result)
  {
    uint64_t v14 = *((void *)v4 + 2);
    BOOL v15 = __OFADD__(v14, result);
    uint64_t v16 = v14 + result;
    if (v15)
    {
      __break(1u);
      goto LABEL_48;
    }
    *((void *)v4 + 2) = v16;
  }
  if (result != v12)
  {
LABEL_13:
    uint64_t result = sub_100006F44();
    *uint64_t v1 = v4;
    return result;
  }
LABEL_16:
  int64_t v2 = *((void *)v4 + 2);
  uint64_t v3 = v38[0];
  uint64_t v37 = v38[1];
  uint64_t v13 = v39;
  int64_t v6 = v40;
  if (v41)
  {
    unint64_t v17 = (v41 - 1) & v41;
    unint64_t v18 = __clz(__rbit64(v41)) | (v40 << 6);
    int64_t v36 = (unint64_t)(v39 + 64) >> 6;
    goto LABEL_18;
  }
LABEL_48:
  int64_t v32 = v6 + 1;
  if (__OFADD__(v6, 1)) {
    goto LABEL_66;
  }
  int64_t v36 = (unint64_t)(v13 + 64) >> 6;
  if (v32 >= v36) {
    goto LABEL_13;
  }
  unint64_t v33 = *(void *)(v37 + 8 * v32);
  int64_t v34 = v6 + 1;
  if (!v33)
  {
    int64_t v34 = v6 + 2;
    if (v6 + 2 >= v36) {
      goto LABEL_13;
    }
    unint64_t v33 = *(void *)(v37 + 8 * v34);
    if (!v33)
    {
      int64_t v34 = v6 + 3;
      if (v6 + 3 >= v36) {
        goto LABEL_13;
      }
      unint64_t v33 = *(void *)(v37 + 8 * v34);
      if (!v33)
      {
        int64_t v34 = v6 + 4;
        if (v6 + 4 >= v36) {
          goto LABEL_13;
        }
        unint64_t v33 = *(void *)(v37 + 8 * v34);
        if (!v33)
        {
          int64_t v34 = v6 + 5;
          if (v6 + 5 >= v36) {
            goto LABEL_13;
          }
          unint64_t v33 = *(void *)(v37 + 8 * v34);
          if (!v33)
          {
            int64_t v35 = v6 + 6;
            do
            {
              if (v36 == v35) {
                goto LABEL_13;
              }
              unint64_t v33 = *(void *)(v37 + 8 * v35++);
            }
            while (!v33);
            int64_t v34 = v35 - 1;
          }
        }
      }
    }
  }
  unint64_t v17 = (v33 - 1) & v33;
  unint64_t v18 = __clz(__rbit64(v33)) + (v34 << 6);
  int64_t v6 = v34;
LABEL_18:
  uint64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v18);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  uint64_t result = swift_bridgeObjectRetain();
  while (1)
  {
    unint64_t v22 = *((void *)v4 + 3);
    int64_t v23 = v22 >> 1;
    if ((uint64_t)(v22 >> 1) < v2 + 1) {
      break;
    }
    if (v2 < v23) {
      goto LABEL_23;
    }
LABEL_20:
    *((void *)v4 + 2) = v2;
  }
  uint64_t result = (uint64_t)sub_1000544D0((char *)(v22 > 1), v2 + 1, 1, v4);
  int64_t v4 = (char *)result;
  int64_t v23 = *(void *)(result + 24) >> 1;
  if (v2 >= v23) {
    goto LABEL_20;
  }
  while (1)
  {
LABEL_23:
    uint64_t v24 = &v4[16 * v2 + 32];
    *(void *)uint64_t v24 = v21;
    *((void *)v24 + 1) = v20;
    ++v2;
    if (v17)
    {
      unint64_t v25 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v26 = v25 | (v6 << 6);
      goto LABEL_41;
    }
    int64_t v27 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      break;
    }
    if (v27 >= v36) {
      goto LABEL_45;
    }
    unint64_t v28 = *(void *)(v37 + 8 * v27);
    int64_t v29 = v6 + 1;
    if (!v28)
    {
      int64_t v29 = v6 + 2;
      if (v6 + 2 >= v36) {
        goto LABEL_45;
      }
      unint64_t v28 = *(void *)(v37 + 8 * v29);
      if (!v28)
      {
        int64_t v29 = v6 + 3;
        if (v6 + 3 >= v36) {
          goto LABEL_45;
        }
        unint64_t v28 = *(void *)(v37 + 8 * v29);
        if (!v28)
        {
          int64_t v29 = v6 + 4;
          if (v6 + 4 >= v36) {
            goto LABEL_45;
          }
          unint64_t v28 = *(void *)(v37 + 8 * v29);
          if (!v28)
          {
            int64_t v29 = v6 + 5;
            if (v6 + 5 >= v36) {
              goto LABEL_45;
            }
            unint64_t v28 = *(void *)(v37 + 8 * v29);
            if (!v28)
            {
              int64_t v30 = v6 + 6;
              while (v36 != v30)
              {
                unint64_t v28 = *(void *)(v37 + 8 * v30++);
                if (v28)
                {
                  int64_t v29 = v30 - 1;
                  goto LABEL_40;
                }
              }
LABEL_45:
              *((void *)v4 + 2) = v2;
              goto LABEL_13;
            }
          }
        }
      }
    }
LABEL_40:
    unint64_t v17 = (v28 - 1) & v28;
    unint64_t v26 = __clz(__rbit64(v28)) + (v29 << 6);
    int64_t v6 = v29;
LABEL_41:
    unint64_t v31 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v26);
    uint64_t v21 = *v31;
    uint64_t v20 = v31[1];
    if (v2 >= v23)
    {
      uint64_t result = swift_bridgeObjectRetain();
      goto LABEL_20;
    }
    uint64_t result = swift_bridgeObjectRetain();
  }
  __break(1u);
LABEL_66:
  __break(1u);
  return result;
}

uint64_t sub_1000062E0@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  v103 = a1;
  v96 = a3;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v94 = *(void *)(v5 - 8);
  v95 = (void (*)(char *, uint64_t, uint64_t))v5;
  __chkstk_darwin(v5);
  v102 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100003C68(&qword_1000764C0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  v98 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v104 = (uint64_t)&v83 - v11;
  __chkstk_darwin(v10);
  v93 = (char *)&v83 - v12;
  uint64_t v91 = type metadata accessor for URL();
  uint64_t v100 = *(void *)(v91 - 8);
  uint64_t v13 = __chkstk_darwin(v91);
  v106 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  v105 = (char *)&v83 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v99 = (char *)&v83 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v83 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v83 - v23;
  __chkstk_darwin(v22);
  unint64_t v26 = (char *)&v83 - v25;
  uint64_t v28 = v3[5];
  uint64_t v27 = v3[6];
  v97 = v3;
  int64_t v29 = *(void (**)(char *, uint64_t *, uint64_t, uint64_t))(v27 + 8);
  v108[3] = v28;
  v108[4] = v27;
  int64_t v30 = sub_100006CC0(v108);
  swift_bridgeObjectRetain();
  v101 = a2;
  v29(v103, a2, v28, v27);
  unint64_t v31 = v93;
  v88 = v26;
  v89 = v24;
  v90 = v21;
  uint64_t v32 = v91;
  uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 16))(v28, v27);
  if (!v34)
  {
LABEL_6:
    sub_100006D78();
    swift_allocError();
    swift_willThrow();
    _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v108);
    uint64_t v44 = v102;
    static Logger.effective.getter();
    unint64_t v45 = (unint64_t)v101;
    swift_bridgeObjectRetain_n();
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      v108[0] = swift_slowAlloc();
      *(_DWORD *)v48 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v107 = sub_1000036B0((uint64_t)v103, v45, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Application with authorized bundle identifier %{public}s not found", v48, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    swift_errorRelease();

    uint64_t result = (*(uint64_t (**)(char *, void (*)(char *, uint64_t, uint64_t)))(v94 + 8))(v44, v95);
    goto LABEL_10;
  }
  uint64_t v35 = v33;
  uint64_t v36 = v34;
  uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 24))(v28, v27);
  if (!v38)
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  uint64_t v86 = v38;
  uint64_t v84 = v37;
  uint64_t v85 = v35;
  uint64_t v87 = v36;
  uint64_t v39 = (uint64_t)v31;
  (*(void (**)(uint64_t, uint64_t))(v27 + 32))(v28, v27);
  uint64_t v40 = v100;
  unint64_t v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48);
  uint64_t v42 = v31;
  uint64_t v43 = (uint64_t *)(v100 + 48);
  if (v41(v42, 1, v32) == 1)
  {
    sub_100006E84(v39, &qword_1000764C0);
    v103 = (char *)&_swiftEmptyArrayStorage;
  }
  else
  {
    v101 = v30;
    v102 = (char *)v28;
    v95 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 32);
    v95(v88, v39, v32);
    sub_100006DCC(v97, v97[3]);
    uint64_t v56 = v89;
    uint64_t v40 = v100;
    dispatch thunk of Locatable.applicationSettingsPath(for:)();
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v90, v56, v32);
    uint64_t v57 = (char *)sub_100054038(0, 1, 1, (unint64_t)&_swiftEmptyArrayStorage);
    unint64_t v59 = *((void *)v57 + 2);
    unint64_t v58 = *((void *)v57 + 3);
    v103 = v57;
    if (v59 >= v58 >> 1) {
      v103 = (char *)sub_100054038(v58 > 1, v59 + 1, 1, (unint64_t)v103);
    }
    uint64_t v60 = v103;
    *((void *)v103 + 2) = v59 + 1;
    v95(&v60[((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(void *)(v40 + 72) * v59], (uint64_t)v90, v32);
    unint64_t v61 = *(void (**)(char *, uint64_t))(v40 + 8);
    v61(v89, v32);
    v61(v88, v32);
    uint64_t v28 = (uint64_t)v102;
  }
  uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 40))(v28, v27);
  uint64_t v63 = *(void *)(v62 + 16);
  uint64_t v64 = v99;
  v90 = (char *)v62;
  if (v63)
  {
    uint64_t v65 = v40;
    v66 = (void *)(v62 + 32);
    uint64_t v67 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 56);
    v101 = v43;
    v102 = (char *)(v65 + 32);
    v93 = (char *)(v65 + 8);
    uint64_t v94 = v65 + 16;
    uint64_t v68 = (uint64_t)v98;
    v92 = v41;
    v95 = (void (*)(char *, uint64_t, uint64_t))(v65 + 56);
    do
    {
      id v69 = objc_msgSend((id)*sub_100006DCC(v66, v66[3]), "dataContainerURL");
      if (v69)
      {
        uint64_t v70 = v69;
        v71 = v41;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v72 = 0;
      }
      else
      {
        v71 = v41;
        uint64_t v72 = 1;
      }
      (*v67)(v68, v72, 1, v32);
      uint64_t v73 = v104;
      uint64_t v74 = v32;
      sub_100006EE0(v68, v104, &qword_1000764C0);
      if (v71((char *)v73, 1, v32) == 1)
      {
        sub_100006E84(v73, &qword_1000764C0);
        unint64_t v41 = v71;
      }
      else
      {
        uint64_t v75 = v105;
        v76 = *(void (**)(char *, char *, uint64_t))v102;
        (*(void (**)(char *, uint64_t, uint64_t))v102)(v64, v73, v74);
        sub_100006DCC(v97, v97[3]);
        dispatch thunk of Locatable.applicationSettingsPath(for:)();
        (*(void (**)(char *, char *, uint64_t))v94)(v106, v75, v74);
        id v77 = v103;
        uint64_t v32 = v74;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v77 = (char *)sub_100054038(0, *((void *)v77 + 2) + 1, 1, (unint64_t)v77);
        }
        unint64_t v79 = *((void *)v77 + 2);
        unint64_t v78 = *((void *)v77 + 3);
        uint64_t v68 = (uint64_t)v98;
        if (v79 >= v78 >> 1) {
          id v77 = (char *)sub_100054038(v78 > 1, v79 + 1, 1, (unint64_t)v77);
        }
        unint64_t v41 = v92;
        *((void *)v77 + 2) = v79 + 1;
        uint64_t v80 = v100;
        unint64_t v81 = (*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80);
        v103 = v77;
        v76(&v77[v81 + *(void *)(v100 + 72) * v79], v106, v32);
        v82 = *(void (**)(char *, uint64_t))(v80 + 8);
        v82(v105, v32);
        uint64_t v64 = v99;
        v82(v99, v32);
        uint64_t v67 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v95;
      }
      v66 += 5;
      --v63;
    }
    while (v63);
  }
  swift_bridgeObjectRelease();
  v54 = v103;
  if (*((void *)v103 + 2))
  {
    uint64_t result = _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v108);
    uint64_t v51 = v87;
    uint64_t v50 = v85;
    uint64_t v52 = v84;
    uint64_t v53 = v86;
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v108);
LABEL_10:
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  v54 = 0;
LABEL_11:
  os_log_type_t v55 = v96;
  uint64_t *v96 = v50;
  v55[1] = v51;
  v55[2] = v52;
  v55[3] = v53;
  v55[4] = 0;
  v55[5] = (uint64_t)v54;
  return result;
}

uint64_t *sub_100006CC0(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_100006D24(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    return swift_slowDealloc();
  }
  return result;
}

unint64_t sub_100006D78()
{
  unint64_t result = qword_1000764C8;
  if (!qword_1000764C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000764C8);
  }
  return result;
}

void *sub_100006DCC(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_100006E10()
{
  unint64_t result = qword_1000764D0;
  if (!qword_1000764D0)
  {
    type metadata accessor for CocoaError.Code();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000764D0);
  }
  return result;
}

uint64_t sub_100006E68@<X0>(uint64_t a1@<X8>)
{
  return sub_1000055FC(*(void **)(v1 + 16), a1);
}

uint64_t sub_100006E84(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100003C68(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100006EE0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100003C68(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100006F44()
{
  return swift_release();
}

uint64_t initializeBufferWithCopyOfBuffer for ClientFinder(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t initializeWithCopy for ClientFinder(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for ClientFinder(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t *sub_10000701C(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        uint64_t *v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          uint64_t *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for ClientFinder(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ClientFinder(uint64_t a1, uint64_t a2)
{
  _s20ManagedSettingsAgent12ClientFinderVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClientFinder(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClientFinder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClientFinder()
{
  return &type metadata for ClientFinder;
}

uint64_t destroy for StoreInformation()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for StoreInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StoreInformation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  return a1;
}

__n128 initializeWithTake for StoreInformation(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for StoreInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for StoreInformation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 26)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StoreInformation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 26) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 26) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StoreInformation()
{
  return &type metadata for StoreInformation;
}

unint64_t sub_100007500()
{
  sub_100003C68(&qword_100076500);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100064440;
  *(void *)(inited + 32) = static ManagedSettingsStore.PropertyKeys.active.getter();
  *(void *)(inited + 40) = v1;
  *(inited + 48) = Bool.persistableValue()();
  *(void *)(inited + 56) = static ManagedSettingsStore.PropertyKeys.syncToWatch.getter();
  *(void *)(inited + 64) = v2;
  *(inited + 72) = Bool.persistableValue()();
  unint64_t result = sub_100038370(inited);
  qword_100079558 = result;
  return result;
}

uint64_t sub_100007580(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = static ManagedSettingsStore.PropertyKeys.active.getter();
  if (*(void *)(a1 + 16) && (unint64_t v6 = sub_100019BD4(v4, v5), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void **)(*(void *)(a1 + 56) + 8 * v6);
    id v9 = v8;
  }
  else
  {
    uint64_t v8 = 0;
  }
  swift_bridgeObjectRelease();
  int v10 = static Bool.value(from:)();

  if (v10 == 2 || ((v10 ^ *(unsigned __int8 *)(v2 + 24)) & 1) == 0)
  {
    uint64_t v11 = 0;
  }
  else
  {
    *(unsigned char *)(v2 + 24) = v10 & 1;
    uint64_t v11 = 1;
  }
  uint64_t v12 = static ManagedSettingsStore.PropertyKeys.syncToWatch.getter();
  if (*(void *)(a1 + 16) && (unint64_t v14 = sub_100019BD4(v12, v13), (v15 & 1) != 0))
  {
    uint64_t v16 = *(void **)(*(void *)(a1 + 56) + 8 * v14);
    id v17 = v16;
  }
  else
  {
    uint64_t v16 = 0;
  }
  swift_bridgeObjectRelease();
  int v18 = static Bool.value(from:)();

  if v18 != 2 && ((v18 ^ *(unsigned __int8 *)(v2 + 25)))
  {
    *(unsigned char *)(v2 + 25) = v18 & 1;
    return 1;
  }
  return v11;
}

BOOL sub_100007698(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_1000076AC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000076F4()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100007720()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100007764()
{
  uint64_t result = 0x696669746E656469;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6E6F6973726576;
      break;
    case 2:
      uint64_t result = 0x657669746361;
      break;
    case 3:
      uint64_t result = 0x61576F54636E7973;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000077FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000084AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100007824()
{
  return 0;
}

void sub_100007830(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_10000783C(uint64_t a1)
{
  unint64_t v2 = sub_100008158();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100007878(uint64_t a1)
{
  unint64_t v2 = sub_100008158();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000078B4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v13 = a5;
  v12[1] = a4;
  uint64_t v7 = sub_100003C68(&qword_1000764F8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  int v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006DCC(a1, a1[3]);
  sub_100008158();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    char v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v15 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v14 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100007A80@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100007F38(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
    *(unsigned char *)(a2 + 24) = v7 & 1;
    *(unsigned char *)(a2 + 25) = HIBYTE(v7) & 1;
  }
  return result;
}

uint64_t sub_100007AC0(void *a1)
{
  if (*(unsigned char *)(v1 + 25)) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  return sub_1000078B4(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), v2 | *(unsigned __int8 *)(v1 + 24));
}

uint64_t sub_100007AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a1 + 24);
  int v4 = *(unsigned __int8 *)(a1 + 25);
  uint64_t v5 = *(void *)(a2 + 16);
  int v6 = *(unsigned __int8 *)(a2 + 24);
  int v7 = *(unsigned __int8 *)(a2 + 25);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8))
  {
    uint64_t result = 0;
    if (v2 != v5) {
      return result;
    }
    goto LABEL_9;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0;
  if ((v9 & 1) != 0 && v2 == v5)
  {
LABEL_9:
    if (((v3 ^ v6) & 1) == 0) {
      return v4 ^ v7 ^ 1u;
    }
  }
  return result;
}

void sub_100007B94(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (v5)
  {
    unint64_t v8 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v9 = v8 | (v7 << 6);
LABEL_21:
    int v13 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v9);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    char v16 = *(void **)(*(void *)(a1 + 56) + 8 * v9);
    uint64_t v17 = qword_100076390;
    swift_bridgeObjectRetain();
    id v18 = v16;
    if (v17 != -1) {
      swift_once();
    }
    uint64_t v19 = qword_100079558;
    if (*(void *)(qword_100079558 + 16) && (unint64_t v20 = sub_100019BD4(v15, v14), (v21 & 1) != 0))
    {
      id v22 = *(id *)(*(void *)(v19 + 56) + 8 * v20);
      swift_bridgeObjectRelease();
      sub_1000081AC();
      char v23 = static NSObject.== infix(_:_:)();

      if ((v23 & 1) == 0)
      {
LABEL_26:
        swift_release();
        return;
      }
    }
    else
    {

      swift_bridgeObjectRelease();
    }
  }
  int64_t v10 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v10 >= v6) {
    goto LABEL_26;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v10);
  ++v7;
  if (v11) {
    goto LABEL_20;
  }
  int64_t v7 = v10 + 1;
  if (v10 + 1 >= v6) {
    goto LABEL_26;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v7);
  if (v11) {
    goto LABEL_20;
  }
  int64_t v7 = v10 + 2;
  if (v10 + 2 >= v6) {
    goto LABEL_26;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v7);
  if (v11)
  {
LABEL_20:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
    goto LABEL_21;
  }
  int64_t v12 = v10 + 3;
  if (v12 >= v6) {
    goto LABEL_26;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v12);
  if (v11)
  {
    int64_t v7 = v12;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_26;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_20;
    }
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_100007D9C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v6 = UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v7 = static ManagedSettingsStore.PropertyKeys.active.getter();
  if (*(void *)(a1 + 16) && (unint64_t v9 = sub_100019BD4(v7, v8), (v10 & 1) != 0))
  {
    unint64_t v11 = *(void **)(*(void *)(a1 + 56) + 8 * v9);
    id v12 = v11;
  }
  else
  {
    unint64_t v11 = 0;
  }
  swift_bridgeObjectRelease();
  static Bool.value(from:)();

  uint64_t v13 = static ManagedSettingsStore.PropertyKeys.syncToWatch.getter();
  if (*(void *)(a1 + 16) && (unint64_t v15 = sub_100019BD4(v13, v14), (v16 & 1) != 0))
  {
    uint64_t v17 = *(void **)(*(void *)(a1 + 56) + 8 * v15);
    id v18 = v17;
  }
  else
  {
    uint64_t v17 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static Bool.value(from:)();

  return v6;
}

uint64_t sub_100007F38(void *a1)
{
  uint64_t v3 = sub_100003C68(&qword_1000764E8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[4];
  sub_100006DCC(a1, a1[3]);
  sub_100008158();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)a1);
  }
  else
  {
    char v12 = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    char v11 = 2;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    char v10 = 3;
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_100008158()
{
  unint64_t result = qword_1000764F0;
  if (!qword_1000764F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000764F0);
  }
  return result;
}

unint64_t sub_1000081AC()
{
  unint64_t result = qword_100076508;
  if (!qword_100076508)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100076508);
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for StoreInformation.CodingKeys(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for StoreInformation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for StoreInformation.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100008358);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_100008380(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_10000838C(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for StoreInformation.CodingKeys()
{
  return &type metadata for StoreInformation.CodingKeys;
}

unint64_t sub_1000083A8()
{
  unint64_t result = qword_100076510;
  if (!qword_100076510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100076510);
  }
  return result;
}

unint64_t sub_100008400()
{
  unint64_t result = qword_100076518;
  if (!qword_100076518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100076518);
  }
  return result;
}

unint64_t sub_100008458()
{
  unint64_t result = qword_100076520;
  if (!qword_100076520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100076520);
  }
  return result;
}

uint64_t sub_1000084AC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x657669746361 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x61576F54636E7973 && a2 == 0xEB00000000686374)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

id sub_100008684()
{
  type metadata accessor for PublisherCenter();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = sub_10004AC84((uint64_t)&_swiftEmptyArrayStorage);
  id result = [objc_allocWithZone((Class)NSLock) init];
  *(void *)(v0 + 24) = result;
  qword_100079560 = v0;
  return result;
}

id sub_1000086E8(int a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  [*(id *)(v2 + 24) lock];
  char v10 = (uint64_t *)(v2 + 16);
  swift_beginAccess();
  uint64_t v11 = *(void *)(v2 + 16);
  if (*(void *)(v11 + 16))
  {
    unint64_t v12 = sub_1000029E8(a1);
    if (v13)
    {
      uint64_t v14 = *(void *)(*(void *)(v11 + 56) + 8 * v12);
      if (a2)
      {
        if (!*(void *)(v14 + 24)) {
          return [*(id *)(v3 + 24) unlock];
        }
LABEL_7:
        swift_retain();
        static Logger.subscription.getter();
        unint64_t v15 = Logger.logObject.getter();
        os_log_type_t v16 = static os_log_type_t.default.getter();
        int v17 = v16;
        if (os_log_type_enabled(v15, v16))
        {
          uint64_t v18 = swift_slowAlloc();
          uint64_t v34 = v14;
          uint64_t v19 = v18;
          uint64_t v33 = swift_slowAlloc();
          v36[0] = v33;
          *(_DWORD *)uint64_t v19 = 136446466;
          if (a2) {
            uint64_t v20 = 0x76697463656A624FLL;
          }
          else {
            uint64_t v20 = 0x7466697753;
          }
          int v32 = v17;
          if (a2) {
            unint64_t v21 = 0xEB00000000432065;
          }
          else {
            unint64_t v21 = 0xE500000000000000;
          }
          os_log_t v31 = v15;
          uint64_t v35 = sub_1000036B0(v20, v21, v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v19 + 12) = 1026;
          LODWORD(v35) = a1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          unint64_t v15 = v31;
          _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v32, "Removing subscription for %{public}s process %{public}d", (uint8_t *)v19, 0x12u);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v14 = v34;
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        uint64_t v22 = 16;
        if (a2) {
          uint64_t v22 = 24;
        }
        *(void *)(v14 + v22) = 0;
        swift_release();
        if (*(void *)(v14 + 16) || *(void *)(v14 + 24))
        {
          swift_beginAccess();
          swift_retain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v35 = *v10;
          *char v10 = 0x8000000000000000;
          sub_100004484(v14, a1, isUniquelyReferenced_nonNull_native);
          *char v10 = v35;
        }
        else
        {
          swift_beginAccess();
          unint64_t v25 = sub_1000029E8(a1);
          if ((v26 & 1) == 0) {
            goto LABEL_21;
          }
          unint64_t v27 = v25;
          char v28 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v29 = *v10;
          uint64_t v35 = *v10;
          *char v10 = 0x8000000000000000;
          if ((v28 & 1) == 0)
          {
            sub_10001E894();
            uint64_t v29 = v35;
          }
          sub_100016E34(v27, v29);
          *char v10 = v29;
          swift_release();
        }
        swift_bridgeObjectRelease();
LABEL_21:
        swift_endAccess();
        swift_release();
        return [*(id *)(v3 + 24) unlock];
      }
      if (*(void *)(v14 + 16)) {
        goto LABEL_7;
      }
    }
  }
  return [*(id *)(v3 + 24) unlock];
}

id sub_100008AB8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  [*(id *)(v2 + 24) lock];
  static Logger.subscription.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v37 = v2;
  if (v10)
  {
    uint64_t v36 = v4;
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    v39[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446210;
    v35[1] = v11 + 4;
    swift_bridgeObjectRetain();
    uint64_t v12 = Set.description.getter();
    unint64_t v14 = v13;
    swift_bridgeObjectRelease();
    uint64_t v38 = sub_1000036B0(v12, v14, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Notifying clients of changes in %{public}s", v11, 0xCu);
    swift_arrayDestroy();
    uint64_t v2 = v37;
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v36);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  swift_beginAccess();
  uint64_t v15 = *(void *)(v2 + 16);
  uint64_t v16 = v15 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & *(void *)(v15 + 64);
  int64_t v20 = (unint64_t)(v17 + 63) >> 6;
  id result = (id)swift_bridgeObjectRetain();
  int64_t v22 = 0;
  while (1)
  {
    if (v19)
    {
      unint64_t v23 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v24 = v23 | (v22 << 6);
      goto LABEL_26;
    }
    int64_t v25 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v25 >= v20) {
      goto LABEL_31;
    }
    unint64_t v26 = *(void *)(v16 + 8 * v25);
    ++v22;
    if (!v26)
    {
      int64_t v22 = v25 + 1;
      if (v25 + 1 >= v20) {
        goto LABEL_31;
      }
      unint64_t v26 = *(void *)(v16 + 8 * v22);
      if (!v26)
      {
        int64_t v22 = v25 + 2;
        if (v25 + 2 >= v20) {
          goto LABEL_31;
        }
        unint64_t v26 = *(void *)(v16 + 8 * v22);
        if (!v26)
        {
          int64_t v22 = v25 + 3;
          if (v25 + 3 >= v20) {
            goto LABEL_31;
          }
          unint64_t v26 = *(void *)(v16 + 8 * v22);
          if (!v26) {
            break;
          }
        }
      }
    }
LABEL_25:
    unint64_t v19 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v22 << 6);
LABEL_26:
    uint64_t v28 = *(void *)(*(void *)(v15 + 56) + 8 * v24);
    uint64_t v29 = *(void *)(v28 + 16);
    if (!v29)
    {
      swift_retain();
      uint64_t v32 = *(void *)(v28 + 24);
      if (!v32) {
        goto LABEL_7;
      }
LABEL_30:
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v33 = swift_bridgeObjectRetain();
      uint64_t v34 = sub_10000D450(v33, a1);
      swift_bridgeObjectRelease();
      sub_100009008(v32, v34);
      swift_release();
      swift_release();
      goto LABEL_7;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    uint64_t v30 = swift_bridgeObjectRetain();
    uint64_t v31 = sub_10000D450(v30, a1);
    swift_bridgeObjectRelease();
    sub_100009008(v29, v31);
    swift_release();
    swift_release();
    uint64_t v32 = *(void *)(v28 + 24);
    if (v32) {
      goto LABEL_30;
    }
LABEL_7:
    id result = (id)swift_release();
  }
  int64_t v27 = v25 + 4;
  if (v27 >= v20)
  {
LABEL_31:
    swift_release();
    return [*(id *)(v37 + 24) unlock];
  }
  unint64_t v26 = *(void *)(v16 + 8 * v27);
  if (v26)
  {
    int64_t v22 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v22 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v22 >= v20) {
      goto LABEL_31;
    }
    unint64_t v26 = *(void *)(v16 + 8 * v22);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_100008F24()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PublisherCenter()
{
  return self;
}

uint64_t sub_100008F88()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_100008FC8()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void sub_100009008(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  BOOL v10 = (char *)v26 - v9;
  if (*(void *)(a2 + 16))
  {
    uint64_t v11 = *(void **)(a1 + 16);
    swift_getObjectType();
    int v12 = dispatch thunk of XPCConnectable.processIdentifier.getter();
    id v13 = [v11 remoteObjectProxy];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100003C68(&qword_1000767C8);
    if (swift_dynamicCast())
    {
      unint64_t v14 = (void *)v28;
      static Logger.subscription.getter();
      swift_bridgeObjectRetain_n();
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        v29[0] = v27;
        *(_DWORD *)uint64_t v17 = 67240450;
        LODWORD(v28) = v12;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v17 + 8) = 2082;
        v26[1] = v17 + 10;
        swift_bridgeObjectRetain();
        uint64_t v18 = Set.description.getter();
        unint64_t v19 = v14;
        unint64_t v21 = v20;
        swift_bridgeObjectRelease();
        uint64_t v28 = sub_1000036B0(v18, v21, v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        unint64_t v14 = v19;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Notifying %{public}d of changes in %{public}s", (uint8_t *)v17, 0x12u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      Class isa = Set._bridgeToObjectiveC()().super.isa;
      [v14 effectiveSettingsChangedForGroups:isa];
      swift_unknownObjectRelease();
    }
    else
    {
      static Logger.subscription.getter();
      int64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        unint64_t v24 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unint64_t v24 = 67240192;
        LODWORD(v29[0]) = v12;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Connection for %{public}d doesn't conform to ManagedSettingsSubscriberProxy", v24, 8u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }
}

uint64_t sub_100009400(void *a1, uint64_t a2)
{
  v14[2] = a1;
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8);
  v14[1] = sub_100009680();
  os_log_type_t v16 = a1;
  uint64_t v17 = a2;
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = 0x6873696C6275702ELL;
  v9._object = (void *)0xEA00000000007265;
  String.append(_:)(v9);
  static DispatchQoS.unspecified.getter();
  os_log_type_t v16 = &_swiftEmptyArrayStorage;
  sub_1000096C0();
  sub_100003C68((uint64_t *)&unk_1000769E0);
  sub_100009718();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v15);
  BOOL v10 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  String.utf8CString.getter();
  id v11 = v10;
  swift_bridgeObjectRelease();
  id v12 = (id)xpc_event_publisher_create();

  uint64_t result = swift_release();
  if (v12) {
    return (uint64_t)v12;
  }
  __break(1u);
  return result;
}

unint64_t sub_100009680()
{
  unint64_t result = qword_1000769D0;
  if (!qword_1000769D0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000769D0);
  }
  return result;
}

unint64_t sub_1000096C0()
{
  unint64_t result = qword_1000767D0;
  if (!qword_1000767D0)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000767D0);
  }
  return result;
}

unint64_t sub_100009718()
{
  unint64_t result = qword_1000767D8;
  if (!qword_1000767D8)
  {
    sub_100009774((uint64_t *)&unk_1000769E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000767D8);
  }
  return result;
}

uint64_t sub_100009774(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for XPCEventPublisher(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for XPCEventPublisher(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
}

uint64_t assignWithCopy for XPCEventPublisher(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  return a1;
}

__n128 initializeWithTake for XPCEventPublisher(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t assignWithTake for XPCEventPublisher(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for XPCEventPublisher(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCEventPublisher(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCEventPublisher()
{
  return &type metadata for XPCEventPublisher;
}

unint64_t ClientIdentity.description.getter()
{
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x44496D616574202CLL;
  v4._object = (void *)0xE900000000000020;
  String.append(_:)(v4);
  uint64_t v6 = v0[2];
  id v5 = (void *)v0[3];
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v6;
  v7._object = v5;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return 0xD000000000000018;
}

void ClientIdentity.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(unsigned char *)(v0 + 32) & 1);
}

unint64_t sub_100009AC0()
{
  uint64_t v1 = 0x6E6564496D616574;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E7265746E497369;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000013;
  }
}

uint64_t sub_100009B30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10000A14C(a1, a2);
  *a3 = result;
  return result;
}

void sub_100009B58(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_100009B64(uint64_t a1)
{
  unint64_t v2 = sub_10000A0F8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100009BA0(uint64_t a1)
{
  unint64_t v2 = sub_10000A0F8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ClientIdentity.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100003C68(&qword_1000767E0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100006DCC(a1, a1[3]);
  sub_10000A0F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int ClientIdentity.hashValue.getter()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(unsigned char *)(v0 + 32) & 1);
  return Hasher._finalize()();
}

double ClientIdentity.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10000A2D0(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(unsigned char *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_100009E44(void *a1)
{
  return ClientIdentity.encode(to:)(a1);
}

Swift::Int sub_100009E5C()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 32);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100009EFC()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 32);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
}

Swift::Int sub_100009F84()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 32);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10000A020(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  char v6 = *(unsigned char *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  char v8 = *(unsigned char *)(a2 + 32);
  return _s20ManagedSettingsAgent14ClientIdentityV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t _s20ManagedSettingsAgent14ClientIdentityV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), v6 = 0, (v5 & 1) != 0))
  {
    BOOL v7 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
    if (v7 || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), v6 = 0, (v8 & 1) != 0)) {
      char v6 = ((*(unsigned char *)(a1 + 32) & 1) == 0) ^ *(unsigned char *)(a2 + 32);
    }
  }
  return v6 & 1;
}

unint64_t sub_10000A0F8()
{
  unint64_t result = qword_1000767E8;
  if (!qword_1000767E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000767E8);
  }
  return result;
}

uint64_t sub_10000A14C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100066DA0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6564496D616574 && a2 == 0xEE00726569666974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E7265746E497369 && a2 == 0xEA00000000006C61)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10000A2D0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100003C68(&qword_100076810);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006DCC(a1, a1[3]);
  sub_10000A0F8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)a1);
  }
  char v23 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v20 = v9;
  char v22 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v18 = v12;
  char v21 = 2;
  swift_bridgeObjectRetain();
  uint64_t v19 = v14;
  LOBYTE(v14) = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)a1);
  uint64_t v15 = v19;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v20;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 16) = v18;
  *(void *)(a2 + 24) = v15;
  *(unsigned char *)(a2 + 32) = v14 & 1;
  return result;
}

unint64_t sub_10000A55C()
{
  unint64_t result = qword_1000767F0;
  if (!qword_1000767F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000767F0);
  }
  return result;
}

uint64_t destroy for ClientIdentity()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ClientIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ClientIdentity(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for ClientIdentity(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ClientIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClientIdentity(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClientIdentity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClientIdentity()
{
  return &type metadata for ClientIdentity;
}

uint64_t getEnumTagSinglePayload for ClientIdentity.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ClientIdentity.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10000A908);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClientIdentity.CodingKeys()
{
  return &type metadata for ClientIdentity.CodingKeys;
}

unint64_t sub_10000A944()
{
  unint64_t result = qword_1000767F8;
  if (!qword_1000767F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000767F8);
  }
  return result;
}

unint64_t sub_10000A99C()
{
  unint64_t result = qword_100076800;
  if (!qword_100076800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100076800);
  }
  return result;
}

unint64_t sub_10000A9F4()
{
  unint64_t result = qword_100076808;
  if (!qword_100076808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100076808);
  }
  return result;
}

uint64_t sub_10000AA48()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  int v3 = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v6 = v5;
  static Logger.agent.getter();
  swift_bridgeObjectRetain_n();
  BOOL v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    v12[0] = v0;
    uint64_t v10 = (uint8_t *)v9;
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446210;
    swift_bridgeObjectRetain();
    v12[1] = sub_1000036B0(v4, v6, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Posting notification %{public}s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, void))(v1 + 8))(v3, v12[0]);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  swift_bridgeObjectRetain();
  sub_10000AEE4(v4, v6, v4, v6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10000AC8C(const char *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = notify_post(a1);
  if (result)
  {
    int v11 = result;
    uint64_t v18 = a2;
    static Logger.agent.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v17 = v6;
      uint64_t v15 = v14;
      uint64_t v16 = swift_slowAlloc();
      uint64_t v20 = v16;
      *(_DWORD *)uint64_t v15 = 136446466;
      swift_bridgeObjectRetain();
      uint64_t v19 = sub_1000036B0(v18, a3, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v15 + 12) = 1026;
      LODWORD(v19) = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to post notification %{public}s: %{public}u", (uint8_t *)v15, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v17);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
  }
  return result;
}

uint64_t sub_10000AEE4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    return swift_bridgeObjectRelease();
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0) {
      uint64_t v4 = (const char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v4 = (const char *)_StringObject.sharedUTF8.getter();
    }
    sub_10000B058(v4);
    return swift_bridgeObjectRelease();
  }
  v6[0] = a1;
  v6[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  sub_10000AC8C((const char *)v6, a3, a4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10000AFFC()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NotificationSender()
{
  return self;
}

uint64_t sub_10000B058(const char *a1)
{
  return sub_10000AC8C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10000B074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  v7(a2, a3, a4);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_10000B0F4(uint64_t a1, uint64_t a2)
{
  int v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

void sub_10000B148()
{
  uint64_t v0 = (void *)sub_100009400((void *)0xD000000000000034, 0x8000000100066EC0);
  uint64_t v2 = v1;
  void v14[3] = &type metadata for XPCEventPublisher;
  v14[4] = &off_100071910;
  v14[0] = v0;
  v14[1] = v1;
  _s14EventPublisherCMa();
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = sub_10000DE0C((uint64_t)v14, (uint64_t)&type metadata for XPCEventPublisher);
  __chkstk_darwin(v4);
  uint64_t v6 = (void *)((char *)&v14[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v7 + 16))(v6);
  uint64_t v8 = *v6;
  uint64_t v9 = v6[1];
  id v10 = v0;
  id v11 = v2;
  uint64_t v12 = sub_10000DB18(v8, v9, v3);
  _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v14);

  qword_100079568 = v12;
}

uint64_t sub_10000B2A0()
{
  _s20ManagedSettingsAgent12ClientFinderVwxx_0(v0 + 16);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t _s14EventPublisherCMa()
{
  return self;
}

uint64_t sub_10000B31C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.agent.getter();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Starting effective settings event publisher.", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100006DCC((void *)(v1 + 16), *(void *)(v1 + 40));
  uint64_t v16 = sub_10000DE74;
  uint64_t v17 = v1;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v13 = 1107296256;
  uint64_t v14 = sub_10000B074;
  uint64_t v15 = &unk_100071B60;
  uint64_t v9 = _Block_copy(&aBlock);
  swift_retain_n();
  swift_release();
  xpc_event_publisher_set_handler();
  _Block_release(v9);
  swift_release();
  sub_100006DCC((void *)(v1 + 16), *(void *)(v1 + 40));
  uint64_t v16 = sub_10000BB0C;
  uint64_t v17 = 0;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v13 = 1107296256;
  uint64_t v14 = sub_10000B0F4;
  uint64_t v15 = &unk_100071B88;
  id v10 = _Block_copy(&aBlock);
  swift_release();
  xpc_event_publisher_set_error_handler();
  _Block_release(v10);
  sub_100006DCC((void *)(v1 + 16), *(void *)(v1 + 40));
  return xpc_event_publisher_activate();
}

uint64_t sub_10000B5A8(int a1, void *a2, uint64_t a3, uint64_t isEscapingClosureAtFileLocation)
{
  LODWORD(v7) = a1;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(uint64_t (***)(char *, uint64_t))(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v7)
  {
    if (v7 != 1)
    {
      if (v7 == 2) {
        return sub_10000B984();
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = *(NSObject **)(isEscapingClosureAtFileLocation + 88);
    uint64_t v14 = (void *)swift_allocObject();
    v14[2] = isEscapingClosureAtFileLocation;
    void v14[3] = a2;
    v14[4] = a3;
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = sub_10000DF0C;
    *(void *)(v15 + 24) = v14;
    int64_t v25 = sub_10000DF40;
    unint64_t v26 = (uint64_t (**)(char *, uint64_t))v15;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v22 = 1107296256;
    char v23 = sub_100033138;
    unint64_t v24 = &unk_100071C78;
    a2 = _Block_copy(&aBlock);
    uint64_t v9 = v26;
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v13, a2);
    _Block_release(a2);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return result;
    }
    __break(1u);
  }
  uint64_t v16 = *(NSObject **)(isEscapingClosureAtFileLocation + 88);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = isEscapingClosureAtFileLocation;
  *(void *)(v8 + 24) = a2;
  id v11 = (char *)swift_allocObject();
  *((void *)v11 + 2) = sub_10000DEB4;
  *((void *)v11 + 3) = v8;
  int64_t v25 = sub_10000DF40;
  unint64_t v26 = (uint64_t (**)(char *, uint64_t))v11;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v22 = 1107296256;
  char v23 = sub_100033138;
  unint64_t v24 = &unk_100071C00;
  os_log_type_t v7 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v16, v7);
  _Block_release(v7);
  char v17 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if ((v17 & 1) == 0) {
    return result;
  }
  __break(1u);
LABEL_9:
  static Logger.agent.getter();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 67240192;
    LODWORD(aBlock) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Ignoring unknown action: %{public}u", v20, 8u);
    swift_slowDealloc();
  }

  return v9[1](v11, v8);
}

uint64_t sub_10000B984()
{
  uint64_t v8 = 0;
  uint64_t v1 = *(NSObject **)(v0 + 72);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  *(void *)(v2 + 24) = &v8;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_10000DF28;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_10000DF40;
  aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100033138;
  aBlock[3] = &unk_100071CF0;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v1)
  {
    __break(1u);
  }
  else
  {
    if (v8)
    {
      uint64_t v6 = swift_bridgeObjectRetain();
      sub_10000BEB4(v6);
      swift_bridgeObjectRelease();
    }
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10000BB0C()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = xpc_strerror();
  if (result)
  {
    uint64_t v5 = String.init(cString:)();
    unint64_t v7 = v6;
    static Logger.agent.getter();
    swift_bridgeObjectRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v13 = v0;
      id v11 = (uint8_t *)v10;
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)id v11 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v14 = sub_1000036B0(v5, v7, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Effective settings event publisher failed with an error: %{public}s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v13);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10000BD30(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a1 + 56) == 1)
  {
    static Logger.agent.getter();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Effective settings event publisher has already started, ignoring start.", v10, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    *(unsigned char *)(a1 + 56) = 1;
    swift_beginAccess();
    *a2 = *(void *)(a1 + 64);
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10000BEB4(uint64_t result)
{
  if (*(void *)(result + 16))
  {
    uint64_t v2 = result;
    char v18 = 0;
    uint64_t v3 = *(NSObject **)(v1 + 72);
    uint64_t v4 = (void *)swift_allocObject();
    v4[2] = &v18;
    v4[3] = v1;
    v4[4] = v2;
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = sub_10000C204;
    *(void *)(v5 + 24) = v4;
    uint64_t v16 = sub_10000C220;
    uint64_t v17 = v5;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v13 = 1107296256;
    uint64_t v14 = sub_100033138;
    uint64_t v15 = &unk_100071AC0;
    uint64_t v6 = _Block_copy(&aBlock);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v3, v6);
    _Block_release(v6);
    LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if (v3)
    {
      __break(1u);
      return result;
    }
    if (v18 == 1)
    {
      unint64_t v7 = *(NSObject **)(v1 + 88);
      uint64_t v8 = swift_allocObject();
      *(void *)(v8 + 16) = v1;
      *(void *)(v8 + 24) = v2;
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = sub_10000C950;
      *(void *)(v9 + 24) = v8;
      uint64_t v16 = sub_10000DF40;
      uint64_t v17 = v9;
      long long aBlock = _NSConcreteStackBlock;
      uint64_t v13 = 1107296256;
      uint64_t v14 = sub_100033138;
      uint64_t v15 = &unk_100071B38;
      uint64_t v10 = _Block_copy(&aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_release();
      dispatch_sync(v7, v10);
      _Block_release(v10);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      uint64_t result = swift_release();
      if ((isEscapingClosureAtFileLocation & 1) == 0) {
        return result;
      }
      __break(1u);
    }
    return swift_release();
  }
  return result;
}

unsigned char *sub_10000C164(unsigned char *result, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 56);
  *uint64_t result = v2;
  if ((v2 & 1) == 0)
  {
    swift_beginAccess();
    uint64_t v3 = swift_bridgeObjectRetain();
    sub_100038B78(v3);
    return (unsigned char *)swift_endAccess();
  }
  return result;
}

uint64_t sub_10000C1C4()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

unsigned char *sub_10000C204()
{
  return sub_10000C164(*(unsigned char **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10000C210()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000C220()
{
  return sub_100033110(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10000C228()
{
  return swift_release();
}

uint64_t sub_10000C230(uint64_t a1, uint64_t a2)
{
  uint64_t v58 = a2;
  uint64_t v52 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v5 = (char *)v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v53 = a1;
  uint64_t v54 = v6 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(v6 + 32);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & v7;
  int64_t v55 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v50 = (uint64_t (**)(char *, uint64_t))(v3 + 8);
  uint64_t v51 = (void *)(a1 + 16);
  v48 = &v64;
  uint64_t v59 = v6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  *(void *)&long long v13 = 136446466;
  long long v47 = v13;
  v46[1] = (char *)&type metadata for Any + 8;
  uint64_t v57 = v5;
  if (!v10) {
    goto LABEL_7;
  }
  do
  {
    while (1)
    {
      unint64_t v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v18 | (v12 << 6);
LABEL_22:
      os_log_type_t v19 = (uint64_t *)(*(void *)(v59 + 56) + 16 * v17);
      uint64_t v21 = *v19;
      uint64_t v20 = v19[1];
      swift_bridgeObjectRetain_n();
      uint64_t v22 = sub_10000D450(v58, v21);
      if (*(void *)(v22 + 16)) {
        break;
      }
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v10) {
        goto LABEL_7;
      }
    }
    uint64_t v56 = v20;
    unint64_t v60 = v10;
    int64_t v61 = v12;
    xpc_object_t v23 = xpc_array_create(0, 0);
    uint64_t v24 = v22 + 56;
    uint64_t v25 = 1 << *(unsigned char *)(v22 + 32);
    if (v25 < 64) {
      uint64_t v26 = ~(-1 << v25);
    }
    else {
      uint64_t v26 = -1;
    }
    uint64_t v27 = v26 & *(void *)(v22 + 56);
    int64_t v28 = (unint64_t)(v25 + 63) >> 6;
    uint64_t result = swift_retain();
    int64_t v29 = 0;
    while (1)
    {
      if (v27)
      {
        v27 &= v27 - 1;
        goto LABEL_28;
      }
      int64_t v32 = v29 + 1;
      if (__OFADD__(v29, 1))
      {
        __break(1u);
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      if (v32 >= v28) {
        goto LABEL_44;
      }
      uint64_t v33 = *(void *)(v24 + 8 * v32);
      ++v29;
      if (!v33)
      {
        int64_t v29 = v32 + 1;
        if (v32 + 1 >= v28) {
          goto LABEL_44;
        }
        uint64_t v33 = *(void *)(v24 + 8 * v29);
        if (!v33)
        {
          int64_t v29 = v32 + 2;
          if (v32 + 2 >= v28) {
            goto LABEL_44;
          }
          uint64_t v33 = *(void *)(v24 + 8 * v29);
          if (!v33) {
            break;
          }
        }
      }
LABEL_43:
      uint64_t v27 = (v33 - 1) & v33;
LABEL_28:
      uint64_t v30 = String.utf8CString.getter();
      xpc_object_t v31 = xpc_string_create((const char *)(v30 + 32));
      swift_release();
      xpc_array_append_value(v23, v31);
      uint64_t result = swift_unknownObjectRelease();
    }
    int64_t v34 = v32 + 3;
    if (v34 < v28)
    {
      uint64_t v33 = *(void *)(v24 + 8 * v34);
      if (!v33)
      {
        while (1)
        {
          int64_t v29 = v34 + 1;
          if (__OFADD__(v34, 1)) {
            goto LABEL_51;
          }
          if (v29 >= v28) {
            goto LABEL_44;
          }
          uint64_t v33 = *(void *)(v24 + 8 * v29);
          ++v34;
          if (v33) {
            goto LABEL_43;
          }
        }
      }
      int64_t v29 = v34;
      goto LABEL_43;
    }
LABEL_44:
    swift_release();
    xpc_object_t v35 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_value(v35, "SettingsGroups", v23);
    sub_100006DCC(v51, *(void *)(v53 + 40));
    xpc_event_publisher_fire();
    uint64_t v36 = v57;
    static Logger.agent.getter();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      uint64_t v65 = v49;
      *(_DWORD *)uint64_t v39 = v47;
      swift_retain();
      uint64_t v40 = Set.description.getter();
      unint64_t v42 = v41;
      swift_release();
      uint64_t v63 = sub_1000036B0(v40, v42, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v39 + 12) = 2082;
      uint64_t v63 = 0;
      unint64_t v64 = 0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      uint64_t v63 = 0x203A6E656B6F54;
      unint64_t v64 = 0xE700000000000000;
      uint64_t v62 = v56;
      v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      v44._countAndFlagsBits = 0x7370756F7247202CLL;
      v44._object = (void *)0xEA0000000000203ALL;
      String.append(_:)(v44);
      swift_bridgeObjectRetain();
      v45._countAndFlagsBits = Set.description.getter();
      String.append(_:)(v45);
      swift_bridgeObjectRelease_n();
      uint64_t v36 = v57;
      swift_bridgeObjectRelease();
      uint64_t v63 = sub_1000036B0(v63, v64, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Fired event for groups: %{public}s for subscription: %{public}s.", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
    swift_unknownObjectRelease();
    uint64_t result = (*v50)(v36, v52);
    unint64_t v10 = v60;
    int64_t v12 = v61;
  }
  while (v60);
LABEL_7:
  int64_t v14 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v14 >= v55) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v54 + 8 * v14);
  ++v12;
  if (v15) {
    goto LABEL_20;
  }
  int64_t v12 = v14 + 1;
  if (v14 + 1 >= v55) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v54 + 8 * v12);
  if (v15) {
    goto LABEL_20;
  }
  int64_t v12 = v14 + 2;
  if (v14 + 2 >= v55) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v54 + 8 * v12);
  if (v15) {
    goto LABEL_20;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v55) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v54 + 8 * v16);
  if (v15)
  {
    int64_t v12 = v16;
LABEL_20:
    unint64_t v10 = (v15 - 1) & v15;
    unint64_t v17 = __clz(__rbit64(v15)) + (v12 << 6);
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v12 >= v55) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v54 + 8 * v12);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_53:
  __break(1u);
  return result;
}

uint64_t sub_10000C910()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000C950()
{
  return sub_10000C230(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10000C958()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000C968(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  id v11 = (char *)&v46 - v10;
  __chkstk_darwin(v9);
  long long v13 = (char *)&v46 - v12;
  int64_t v14 = (uint64_t *)(a1 + 80);
  swift_beginAccess();
  uint64_t v15 = *(void *)(a1 + 80);
  if (*(void *)(v15 + 16))
  {
    unint64_t v16 = sub_100019D20(a2);
    if (v17)
    {
      uint64_t v47 = v4;
      uint64_t v18 = *(void *)(*(void *)(v15 + 56) + 16 * v16 + 8);
      swift_bridgeObjectRetain();
      static Logger.agent.getter();
      swift_bridgeObjectRetain();
      os_log_type_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        uint64_t v22 = swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 136446210;
        uint64_t v49 = v22;
        uint64_t v50 = 0;
        uint64_t v46 = v21 + 4;
        unint64_t v51 = 0xE000000000000000;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(21);
        swift_bridgeObjectRelease();
        uint64_t v50 = 0x203A6E656B6F54;
        unint64_t v51 = 0xE700000000000000;
        uint64_t v48 = v18;
        v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        v24._countAndFlagsBits = 0x7370756F7247202CLL;
        v24._object = (void *)0xEA0000000000203ALL;
        String.append(_:)(v24);
        swift_bridgeObjectRetain();
        v25._countAndFlagsBits = Set.description.getter();
        String.append(_:)(v25);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        uint64_t v50 = sub_1000036B0(v50, v51, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to add subscription because it already exists: %{public}s.", v21, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v39 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v40 = v13;
      goto LABEL_15;
    }
  }
  uint64_t v26 = (void *)swift_unknownObjectRetain();
  uint64_t v27 = sub_1000220B0(v26);
  if (v27)
  {
    uint64_t v29 = v27;
    uint64_t v30 = v28;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v49 = *v14;
    *int64_t v14 = 0x8000000000000000;
    sub_10001D680(v29, v30, a2, isUniquelyReferenced_nonNull_native);
    *int64_t v14 = v49;
    swift_bridgeObjectRelease();
    swift_endAccess();
    static Logger.agent.getter();
    swift_bridgeObjectRetain();
    int64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      int64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      uint64_t v47 = v4;
      *(_DWORD *)int64_t v34 = 136446210;
      uint64_t v49 = v35;
      uint64_t v50 = 0;
      uint64_t v46 = v34 + 4;
      unint64_t v51 = 0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      uint64_t v50 = 0x203A6E656B6F54;
      unint64_t v51 = 0xE700000000000000;
      uint64_t v48 = v30;
      v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v36);
      swift_bridgeObjectRelease();
      v37._countAndFlagsBits = 0x7370756F7247202CLL;
      v37._object = (void *)0xEA0000000000203ALL;
      String.append(_:)(v37);
      swift_bridgeObjectRetain();
      v38._countAndFlagsBits = Set.description.getter();
      String.append(_:)(v38);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      uint64_t v50 = sub_1000036B0(v50, v51, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Added subscription: %{public}s.", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v39 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v40 = v8;
LABEL_15:
      uint64_t v44 = v47;
      return v39(v40, v44);
    }

    swift_bridgeObjectRelease_n();
    uint64_t v39 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
    uint64_t v40 = v8;
  }
  else
  {
    static Logger.agent.getter();
    unint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      Swift::String v43 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)Swift::String v43 = 134349056;
      uint64_t v50 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Failed to create subscription for token: %{public}llu.", v43, 0xCu);
      swift_slowDealloc();
    }

    uint64_t v39 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
    uint64_t v40 = v11;
  }
  uint64_t v44 = v4;
  return v39(v40, v44);
}

uint64_t sub_10000CFE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v32 - v9;
  id v11 = (uint64_t *)(a1 + 80);
  swift_beginAccess();
  uint64_t v12 = *(void *)(a1 + 80);
  if (*(void *)(v12 + 16) && (unint64_t v13 = sub_100019D20(a2), (v14 & 1) != 0))
  {
    uint64_t v15 = *(void *)(*(void *)(v12 + 56) + 16 * v13 + 8);
    swift_beginAccess();
    unint64_t v16 = sub_100019D20(a2);
    char v18 = v17;
    swift_bridgeObjectRetain();
    if (v18)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v20 = *v11;
      uint64_t v33 = *v11;
      *id v11 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10001ECD4();
        uint64_t v20 = v33;
      }
      sub_1000172C8(v16, v20);
      *id v11 = v20;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    static Logger.agent.getter();
    swift_bridgeObjectRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      Swift::String v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      v32[1] = v24;
      *(_DWORD *)Swift::String v23 = 136446210;
      uint64_t v33 = v24;
      uint64_t v34 = 0;
      v32[0] = v23 + 4;
      unint64_t v35 = 0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      uint64_t v34 = 0x203A6E656B6F54;
      unint64_t v35 = 0xE700000000000000;
      v32[2] = v15;
      v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      v26._countAndFlagsBits = 0x7370756F7247202CLL;
      v26._object = (void *)0xEA0000000000203ALL;
      String.append(_:)(v26);
      swift_bridgeObjectRetain();
      v27._countAndFlagsBits = Set.description.getter();
      String.append(_:)(v27);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      uint64_t v34 = sub_1000036B0(v34, v35, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Removed subscription: %{public}s.", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  else
  {
    static Logger.agent.getter();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 134349056;
      uint64_t v34 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Failed to remove subscription for token: %{public}llu.", v30, 0xCu);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
}

uint64_t sub_10000D450(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  char v4 = *(unsigned char *)(a2 + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    uint64_t v7 = sub_10000D5D8((uint64_t)&v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v5, a2, v3);
    swift_release();
  }
  else
  {
    uint64_t v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    uint64_t v7 = sub_10000D5D8((uint64_t)v8, v5, a2, v3);
    swift_release();
    swift_slowDealloc();
  }
  return v7;
}

uint64_t sub_10000D5D8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  uint64_t v57 = (unint64_t *)result;
  if (*(void *)(a4 + 16) < *(void *)(a3 + 16))
  {
    int64_t v6 = 0;
    uint64_t v58 = a4 + 56;
    uint64_t v7 = 1 << *(unsigned char *)(a4 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(a4 + 56);
    int64_t v59 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v61 = 0;
    uint64_t v10 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v9)
        {
          unint64_t v11 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          int64_t v62 = v6;
          unint64_t v12 = v11 | (v6 << 6);
        }
        else
        {
          int64_t v13 = v6 + 1;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
            goto LABEL_81;
          }
          if (v13 >= v59) {
            goto LABEL_79;
          }
          unint64_t v14 = *(void *)(v58 + 8 * v13);
          int64_t v15 = v6 + 1;
          if (!v14)
          {
            int64_t v15 = v6 + 2;
            if (v6 + 2 >= v59) {
              goto LABEL_79;
            }
            unint64_t v14 = *(void *)(v58 + 8 * v15);
            if (!v14)
            {
              int64_t v15 = v6 + 3;
              if (v6 + 3 >= v59) {
                goto LABEL_79;
              }
              unint64_t v14 = *(void *)(v58 + 8 * v15);
              if (!v14)
              {
                uint64_t v16 = v6 + 4;
                if (v6 + 4 >= v59) {
                  goto LABEL_79;
                }
                unint64_t v14 = *(void *)(v58 + 8 * v16);
                if (!v14)
                {
                  while (1)
                  {
                    int64_t v15 = v16 + 1;
                    if (__OFADD__(v16, 1)) {
                      goto LABEL_83;
                    }
                    if (v15 >= v59) {
                      goto LABEL_79;
                    }
                    unint64_t v14 = *(void *)(v58 + 8 * v15);
                    ++v16;
                    if (v14) {
                      goto LABEL_22;
                    }
                  }
                }
                int64_t v15 = v6 + 4;
              }
            }
          }
LABEL_22:
          unint64_t v9 = (v14 - 1) & v14;
          int64_t v62 = v15;
          unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
        }
        char v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v12);
        uint64_t v19 = *v17;
        uint64_t v18 = v17[1];
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v20 = Hasher._finalize()();
        uint64_t v21 = -1 << *(unsigned char *)(v5 + 32);
        unint64_t v22 = v20 & ~v21;
        unint64_t v23 = v22 >> 6;
        uint64_t v24 = 1 << v22;
        if (((1 << v22) & *(void *)(v10 + 8 * (v22 >> 6))) != 0) {
          break;
        }
LABEL_6:
        uint64_t result = swift_bridgeObjectRelease();
        int64_t v6 = v62;
        uint64_t v5 = a3;
        uint64_t v4 = a4;
      }
      uint64_t v25 = *(void *)(a3 + 48);
      Swift::String v26 = (void *)(v25 + 16 * v22);
      BOOL v27 = *v26 == v19 && v26[1] == v18;
      if (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v28 = ~v21;
        for (unint64_t i = v22 + 1; ; unint64_t i = v30 + 1)
        {
          unint64_t v30 = i & v28;
          if (((*(void *)(v10 + (((i & v28) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v28)) & 1) == 0) {
            break;
          }
          xpc_object_t v31 = (void *)(v25 + 16 * v30);
          BOOL v32 = *v31 == v19 && v31[1] == v18;
          if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t result = swift_bridgeObjectRelease();
            unint64_t v23 = v30 >> 6;
            uint64_t v24 = 1 << v30;
            goto LABEL_38;
          }
        }
        goto LABEL_6;
      }
      uint64_t result = swift_bridgeObjectRelease();
LABEL_38:
      int64_t v6 = v62;
      uint64_t v5 = a3;
      v57[v23] |= v24;
      BOOL v33 = __OFADD__(v61++, 1);
      uint64_t v4 = a4;
      if (v33) {
        goto LABEL_82;
      }
    }
  }
  int64_t v34 = 0;
  uint64_t v60 = a3 + 56;
  uint64_t v61 = 0;
  uint64_t v35 = 1 << *(unsigned char *)(a3 + 32);
  if (v35 < 64) {
    uint64_t v36 = ~(-1 << v35);
  }
  else {
    uint64_t v36 = -1;
  }
  unint64_t v37 = v36 & *(void *)(a3 + 56);
  int64_t v63 = (unint64_t)(v35 + 63) >> 6;
  uint64_t v38 = a4 + 56;
  while (1)
  {
    if (v37)
    {
      unint64_t v39 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      unint64_t v40 = v39 | (v34 << 6);
      goto LABEL_63;
    }
    int64_t v41 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    if (v41 >= v63) {
      goto LABEL_79;
    }
    unint64_t v42 = *(void *)(v60 + 8 * v41);
    ++v34;
    if (!v42)
    {
      int64_t v34 = v41 + 1;
      if (v41 + 1 >= v63) {
        goto LABEL_79;
      }
      unint64_t v42 = *(void *)(v60 + 8 * v34);
      if (!v42)
      {
        int64_t v34 = v41 + 2;
        if (v41 + 2 >= v63) {
          goto LABEL_79;
        }
        unint64_t v42 = *(void *)(v60 + 8 * v34);
        if (!v42) {
          break;
        }
      }
    }
LABEL_62:
    unint64_t v37 = (v42 - 1) & v42;
    unint64_t v40 = __clz(__rbit64(v42)) + (v34 << 6);
LABEL_63:
    uint64_t v44 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v40);
    uint64_t v46 = *v44;
    uint64_t v45 = v44[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v47 = Hasher._finalize()();
    uint64_t v48 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v49 = v47 & ~v48;
    if (((*(void *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
      goto LABEL_46;
    }
    uint64_t v50 = *(void *)(a4 + 48);
    unint64_t v51 = (void *)(v50 + 16 * v49);
    BOOL v52 = *v51 == v46 && v51[1] == v45;
    if (v52 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_76:
      uint64_t result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v57 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
      BOOL v33 = __OFADD__(v61++, 1);
      uint64_t v5 = a3;
      uint64_t v4 = a4;
      if (v33)
      {
        __break(1u);
LABEL_79:
        swift_retain();
        return sub_10005BE80(v57, a2, v61, v5);
      }
    }
    else
    {
      uint64_t v53 = ~v48;
      while (1)
      {
        unint64_t v49 = (v49 + 1) & v53;
        if (((*(void *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
          break;
        }
        uint64_t v54 = (void *)(v50 + 16 * v49);
        BOOL v55 = *v54 == v46 && v54[1] == v45;
        if (v55 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_76;
        }
      }
LABEL_46:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v5 = a3;
      uint64_t v4 = a4;
    }
  }
  int64_t v43 = v41 + 3;
  if (v43 >= v63) {
    goto LABEL_79;
  }
  unint64_t v42 = *(void *)(v60 + 8 * v43);
  if (v42)
  {
    int64_t v34 = v43;
    goto LABEL_62;
  }
  while (1)
  {
    int64_t v34 = v43 + 1;
    if (__OFADD__(v43, 1)) {
      break;
    }
    if (v34 >= v63) {
      goto LABEL_79;
    }
    unint64_t v42 = *(void *)(v60 + 8 * v34);
    ++v43;
    if (v42) {
      goto LABEL_62;
    }
  }
LABEL_84:
  __break(1u);
  return result;
}

uint64_t sub_10000DB18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v10);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v11 - 8);
  uint64_t v24 = &type metadata for XPCEventPublisher;
  uint64_t v25 = &off_100071910;
  *(void *)&long long v23 = a1;
  *((void *)&v23 + 1) = a2;
  uint64_t v21 = a3;
  *(unsigned char *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = &_swiftEmptySetSingleton;
  sub_100009680();
  static DispatchQoS.unspecified.getter();
  unint64_t v22 = &_swiftEmptyArrayStorage;
  v20[2] = sub_1000096C0();
  v20[1] = sub_100003C68((uint64_t *)&unk_1000769E0);
  sub_100009718();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v12 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  uint64_t v13 = v7 + 104;
  unint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 104);
  v20[0] = v13;
  v14(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v6);
  uint64_t v15 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v16 = v21;
  *(void *)(v21 + 72) = v15;
  *(void *)(v16 + 80) = &_swiftEmptyDictionarySingleton;
  static DispatchQoS.unspecified.getter();
  unint64_t v22 = &_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v14(v9, v12, v6);
  uint64_t v17 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v18 = v21;
  *(void *)(v21 + 88) = v17;
  sub_10000DE5C(&v23, v18 + 16);
  return v18;
}

uint64_t sub_10000DE0C(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_10000DE5C(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10000DE74(int a1, void *a2, uint64_t a3)
{
  return sub_10000B5A8(a1, a2, a3, v3);
}

uint64_t sub_10000DE7C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000DEB4()
{
  return sub_10000CFE8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10000DEBC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000DECC()
{
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10000DF0C()
{
  return sub_10000C968(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10000DF18()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000DF28()
{
  return sub_10000BD30(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10000DF30()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000DF90()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_storeDirectory);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v19 = &_swiftEmptySetSingleton;
  uint64_t v3 = v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v9 = 0;
  while (v6)
  {
    unint64_t v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v11 = v10 | (v9 << 6);
LABEL_24:
    if (*(unsigned char *)(*(void *)(v2 + 56) + 32 * v11 + 25) == 1)
    {
      uint64_t v15 = (Swift::Int *)(*(void *)(v2 + 48) + 16 * v11);
      Swift::Int v17 = *v15;
      Swift::Int v16 = v15[1];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_100002C94(&v18, v17, v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
  }
  int64_t v12 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v12 >= v7) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v12);
  ++v9;
  if (v13) {
    goto LABEL_23;
  }
  int64_t v9 = v12 + 1;
  if (v12 + 1 >= v7) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v9);
  if (v13) {
    goto LABEL_23;
  }
  int64_t v9 = v12 + 2;
  if (v12 + 2 >= v7) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v9);
  if (v13) {
    goto LABEL_23;
  }
  int64_t v9 = v12 + 3;
  if (v12 + 3 >= v7) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v9);
  if (v13) {
    goto LABEL_23;
  }
  int64_t v9 = v12 + 4;
  if (v12 + 4 >= v7) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v9);
  if (v13)
  {
LABEL_23:
    unint64_t v6 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v9 << 6);
    goto LABEL_24;
  }
  int64_t v14 = v12 + 5;
  if (v14 >= v7)
  {
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    return (uint64_t)v19;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v14);
  if (v13)
  {
    int64_t v9 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_26;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_23;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_10000E1A0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_storeDirectory;
  swift_beginAccess();
  if (*(void *)(*(void *)v5 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100019BD4(a1, a2);
    if (v6)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100003C68(&qword_100076500);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100064440;
      *(void *)(inited + 32) = static ManagedSettingsStore.PropertyKeys.active.getter();
      *(void *)(inited + 40) = v8;
      *(inited + 48) = Bool.persistableValue()();
      *(void *)(inited + 56) = static ManagedSettingsStore.PropertyKeys.syncToWatch.getter();
      *(void *)(inited + 64) = v9;
      *(inited + 72) = Bool.persistableValue()();
      unint64_t v10 = sub_100038370(inited);
      swift_bridgeObjectRelease();
      return v10;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (qword_100076390 != -1) {
    swift_once();
  }
  unint64_t v10 = qword_100079558;
  swift_bridgeObjectRetain();
  return v10;
}

uint64_t sub_10000E30C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int64_t v7 = (uint64_t *)(v3 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_storeDirectory);
  swift_beginAccess();
  if (!*(void *)(*v7 + 16)
    || (swift_bridgeObjectRetain(),
        swift_bridgeObjectRetain(),
        sub_100019BD4(a2, a3),
        char v9 = v8,
        swift_bridgeObjectRelease(),
        swift_bridgeObjectRelease(),
        (v9 & 1) == 0))
  {
    sub_10000F08C(a2, a3);
    return 1;
  }
  uint64_t v10 = *v7;
  if (!*(void *)(*v7 + 16)) {
    return 0;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v11 = sub_100019BD4(a2, a3);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t v13 = *(void *)(v10 + 56) + 32 * v11;
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *(void *)(v13 + 8);
  uint64_t v16 = *(void *)(v13 + 16);
  char v20 = *(unsigned char *)(v13 + 25);
  unsigned __int8 v21 = *(unsigned char *)(v13 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((sub_100007580(a1) & 1) == 0)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v22 = *v7;
  *int64_t v7 = 0x8000000000000000;
  if (v20) {
    __int16 v18 = 256;
  }
  else {
    __int16 v18 = 0;
  }
  sub_10001D7C0(v15, v14, v16, v18 | v21, a2, a3, isUniquelyReferenced_nonNull_native);
  *int64_t v7 = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return 1;
}

uint64_t sub_10000E530(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_storeDirectory);
  swift_beginAccess();
  uint64_t v6 = *(void *)(*v5 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100019BD4(a1, a2);
    char v8 = v7;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {
      LOBYTE(v6) = 0;
      return v6 & 1;
    }
    uint64_t v9 = *v5;
    if (*(void *)(*v5 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v10 = sub_100019BD4(a1, a2);
      if (v11)
      {
        uint64_t v12 = *(void *)(v9 + 56) + 32 * v10;
        int v13 = *(unsigned __int8 *)(v12 + 24);
        char v14 = *(unsigned char *)(v12 + 25);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        LOBYTE(v6) = 0;
        if (v13 != 1 || (v14 & 1) != 0) {
          return v6 & 1;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    LOBYTE(v6) = sub_10000E660(a1, a2) ^ 1;
  }
  return v6 & 1;
}

id sub_10000E660(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v53 = *(void *)(v4 - 8);
  uint64_t v54 = v4;
  __chkstk_darwin(v4);
  BOOL v52 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for URL.DirectoryHint();
  uint64_t v55 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  char v7 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v48 = *(void (**)(char *, uint64_t))(v8 - 8);
  uint64_t v49 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  char v11 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  char v14 = (char *)v40 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  Swift::Int v17 = (char *)v40 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)v40 - v18;
  char v20 = self;
  unsigned __int8 v21 = (void (*)(char *, uint64_t))[v20 defaultManager];
  unint64_t v56 = a2;
  uint64_t v57 = v21;
  uint64_t v51 = a1;
  sub_10000ECA4(a1, a2, (uint64_t)v17);
  id v46 = v20;
  Swift::Int v47 = v11;
  uint64_t v44 = v14;
  unint64_t v58 = 0x657A696E656B6F74;
  unint64_t v59 = 0xEF7473696C702E64;
  uint64_t v22 = v55;
  long long v23 = *(void (**)(void))(v55 + 104);
  unsigned int v42 = enum case for URL.DirectoryHint.notDirectory(_:);
  uint64_t v24 = v50;
  uint64_t v43 = v55 + 104;
  int64_t v41 = (void (*)(char *, void, uint64_t))v23;
  v23(v7);
  v40[1] = sub_100011120();
  URL.appending<A>(path:directoryHint:)();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v22 + 8);
  uint64_t v45 = v7;
  uint64_t v55 = v22 + 8;
  v25(v7, v24);
  swift_bridgeObjectRelease();
  uint64_t v26 = v49;
  BOOL v27 = (void (*)(char *, uint64_t))*((void *)v48 + 1);
  v27(v17, v49);
  URL.path.getter();
  v27(v19, v26);
  NSString v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  os_log_type_t v29 = v57;
  LODWORD(v17) = [v57 fileExistsAtPath:v28];

  if (!v17) {
    return 0;
  }
  uint64_t v30 = v26;
  uint64_t v48 = v25;
  uint64_t v57 = v27;
  id v31 = [v46 defaultManager];
  uint64_t v32 = (uint64_t)v47;
  sub_10000ECA4(v51, v56, (uint64_t)v47);
  unint64_t v58 = 0xD000000000000011;
  unint64_t v59 = 0x8000000100067030;
  BOOL v33 = v45;
  uint64_t v34 = v50;
  v41(v45, v42, v50);
  uint64_t v35 = v44;
  URL.appending<A>(path:directoryHint:)();
  v48(v33, v34);
  swift_bridgeObjectRelease();
  uint64_t v36 = v57;
  v57((char *)v32, v30);
  URL.path.getter();
  v36(v35, v30);
  NSString v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v38 = [v31 fileExistsAtPath:v37];

  return v38;
}

uint64_t sub_10000ECA4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v24 = a3;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v25 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL.DirectoryHint();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (uint64_t *)(v3 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_storeDirectory);
  swift_beginAccess();
  uint64_t v13 = *v12;
  if (*(void *)(v13 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v14 = sub_100019BD4(v26, a2);
    if (v15)
    {
      uint64_t v16 = (uint64_t *)(*(void *)(v13 + 56) + 32 * v14);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v27[0] = v18;
      v27[1] = v17;
      (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for URL.DirectoryHint.isDirectory(_:), v8);
      sub_100011120();
      swift_bridgeObjectRetain();
      URL.appending<A>(path:directoryHint:)();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  static Logger.persistenceRecordStore.getter();
  swift_bridgeObjectRetain_n();
  char v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    v27[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136446210;
    swift_bridgeObjectRetain();
    v27[6] = sub_1000036B0(v26, a2, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Unable to find existing store with name %{public}s.", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v5);
  sub_100011298();
  swift_allocError();
  *long long v23 = 1;
  return swift_willThrow();
}

uint64_t sub_10000F08C(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v43 = *(void *)(v5 - 8);
  uint64_t v44 = v5;
  __chkstk_darwin(v5);
  unsigned int v42 = (char *)v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v45 = *(void *)(v7 - 8);
  uint64_t v46 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v41 - v11;
  uint64_t v13 = (uint64_t *)(v2 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_storeDirectory);
  swift_beginAccess();
  if (*(void *)(*v13 + 16)
    && (swift_bridgeObjectRetain(),
        swift_bridgeObjectRetain(),
        sub_100019BD4(a1, a2),
        char v15 = v14,
        swift_bridgeObjectRelease(),
        swift_bridgeObjectRelease(),
        (v15 & 1) != 0))
  {
    static Logger.persistenceRecordStore.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      v48[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v49 = sub_1000036B0(a1, a2, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Store with name “%{public}s” already exists", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v10, v46);
  }
  else if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 32) & 1) != 0 {
         || *(void *)(*v13 + 16) <= 0x31uLL)
  }
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = swift_bridgeObjectRetain();
    uint64_t v20 = sub_100007D9C(v19);
    uint64_t v22 = v21;
    uint64_t v24 = v23;
    __int16 v26 = v25;
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v49 = *v13;
    *uint64_t v13 = 0x8000000000000000;
    sub_10001D7C0(v20, v22, v24, v26 & 0x101, a1, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v13 = v49;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  else
  {
    uint64_t v29 = v2 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_recordIdentifier;
    uint64_t v30 = v12;
    static Logger.persistenceRecordStore.getter();
    uint64_t v32 = v42;
    uint64_t v31 = v43;
    uint64_t v33 = v44;
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v42, v29, v44);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      Swift::Int v47 = v30;
      v48[0] = v37;
      *(_DWORD *)uint64_t v36 = 136446210;
      v41[1] = v36 + 4;
      sub_1000112EC(&qword_100076C78, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v49 = sub_1000036B0(v38, v39, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Persistence record %{public}s already has the maximum amount of stores", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v46);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);

      (*(void (**)(char *, uint64_t))(v45 + 8))(v30, v46);
    }
    sub_100011298();
    swift_allocError();
    *unint64_t v40 = 2;
    return swift_willThrow();
  }
}

uint64_t sub_10000F670(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v2 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_storeDirectory;
  swift_beginAccess();
  if (*(void *)(*(void *)v9 + 16)
    && (swift_bridgeObjectRetain(),
        swift_bridgeObjectRetain(),
        sub_100019BD4(a1, a2),
        char v11 = v10,
        swift_bridgeObjectRelease(),
        swift_bridgeObjectRelease(),
        (v11 & 1) != 0))
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_100016594(a1, a2);
    swift_endAccess();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    static Logger.persistenceRecordStore.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      char v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      uint64_t v17 = v5;
      v18[0] = v16;
      *(_DWORD *)char v15 = 136446210;
      swift_bridgeObjectRetain();
      v18[3] = sub_1000036B0(a1, a2, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Store with name “%{public}s” doesn't exist", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v17);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
}

uint64_t sub_10000F92C(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v32 = result + 64;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 64);
  int64_t v33 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      uint64_t v34 = (v7 - 1) & v7;
      int64_t v35 = v4;
      unint64_t v8 = __clz(__rbit64(v7)) | (v4 << 6);
      goto LABEL_24;
    }
    int64_t v9 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v9 >= v33) {
      return 1;
    }
    unint64_t v10 = *(void *)(v32 + 8 * v9);
    int64_t v11 = v4 + 1;
    if (!v10)
    {
      int64_t v11 = v4 + 2;
      if (v4 + 2 >= v33) {
        return 1;
      }
      unint64_t v10 = *(void *)(v32 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v4 + 3;
        if (v4 + 3 >= v33) {
          return 1;
        }
        unint64_t v10 = *(void *)(v32 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v4 + 4;
          if (v4 + 4 >= v33) {
            return 1;
          }
          unint64_t v10 = *(void *)(v32 + 8 * v11);
          if (!v10) {
            break;
          }
        }
      }
    }
LABEL_23:
    uint64_t v34 = (v10 - 1) & v10;
    int64_t v35 = v11;
    unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_24:
    uint64_t v13 = v3;
    os_log_type_t v14 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v8);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = *(void *)(v3 + 56) + 32 * v8;
    uint64_t v19 = *(void *)v17;
    uint64_t v18 = *(void *)(v17 + 8);
    uint64_t v20 = *(void *)(v17 + 16);
    int v21 = *(unsigned __int8 *)(v17 + 24);
    int v22 = *(unsigned __int8 *)(v17 + 25);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v23 = sub_100019BD4(v15, v16);
    char v25 = v24;
    swift_bridgeObjectRelease();
    if ((v25 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v26 = *(void *)(a2 + 56) + 32 * v23;
    uint64_t v27 = *(void *)(v26 + 16);
    int v28 = *(unsigned __int8 *)(v26 + 24);
    int v29 = *(unsigned __int8 *)(v26 + 25);
    if (*(void *)v26 == v19 && *(void *)(v26 + 8) == v18)
    {
      swift_bridgeObjectRelease();
      uint64_t result = 0;
    }
    else
    {
      char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t result = 0;
      if ((v31 & 1) == 0) {
        return result;
      }
    }
    if (v27 == v20 && ((v21 ^ v28) & 1) == 0)
    {
      uint64_t v3 = v13;
      unint64_t v7 = v34;
      int64_t v4 = v35;
      if (((v22 ^ v29) & 1) == 0) {
        continue;
      }
    }
    return result;
  }
  uint64_t v12 = v4 + 5;
  if (v4 + 5 >= v33) {
    return 1;
  }
  unint64_t v10 = *(void *)(v32 + 8 * v12);
  if (v10)
  {
    int64_t v11 = v4 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v11 >= v33) {
      return 1;
    }
    unint64_t v10 = *(void *)(v32 + 8 * v11);
    ++v12;
    if (v10) {
      goto LABEL_23;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_10000FBB0(uint64_t a1, uint64_t a2)
{
  if (a1 == a2 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return;
  }
  int64_t v4 = 0;
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v12 >= v9) {
      return;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v9) {
            return;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    uint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = *(void **)(*(void *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    id v19 = v18;
    unint64_t v20 = sub_100019BD4(v16, v17);
    char v22 = v21;
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {

      return;
    }
    sub_1000081AC();
    id v23 = *(id *)(*(void *)(a2 + 56) + 8 * v20);
    char v24 = static NSObject.== infix(_:_:)();

    if ((v24 & 1) == 0) {
      return;
    }
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v9) {
    return;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_23;
    }
  }
LABEL_31:
  __break(1u);
}

unint64_t sub_10000FD98()
{
  unint64_t result = 0xD000000000000010;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x656E6961746E6F63;
      break;
    case 2:
      unint64_t result = 0x746E65696C63;
      break;
    case 3:
      unint64_t result = 0x6E6F6973726576;
      break;
    case 4:
      unint64_t result = 0x72694465726F7473;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10000FE5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10001172C(a1, a2);
  *a3 = result;
  return result;
}

void sub_10000FE84(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_10000FE90(uint64_t a1)
{
  unint64_t v2 = sub_100010B28();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000FECC(uint64_t a1)
{
  unint64_t v2 = sub_100010B28();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10000FF08()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_recordIdentifier;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_containerPath;
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_10001001C()
{
  return type metadata accessor for PersistenceRecord();
}

uint64_t type metadata accessor for PersistenceRecord()
{
  uint64_t result = qword_100076A80;
  if (!qword_100076A80) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100010070()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100010160(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100003C68(&qword_100076C40);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100006DCC(a1, a1[3]);
  sub_100010B28();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16) = 0;
  type metadata accessor for UUID();
  sub_1000112EC(&qword_100076C48, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v16) = 1;
    type metadata accessor for URL();
    sub_1000112EC(&qword_100076C50, (void (*)(uint64_t))&type metadata accessor for URL);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v9 = *(void *)(v3 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 16);
    uint64_t v10 = *(void *)(v3 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 24);
    char v11 = *(unsigned char *)(v3 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 32);
    long long v16 = *(_OWORD *)(v3 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client);
    uint64_t v17 = v9;
    uint64_t v18 = v10;
    char v19 = v11;
    LOBYTE(v15) = 2;
    sub_100011174();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v16) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    int64_t v12 = (uint64_t *)(v3 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_storeDirectory);
    swift_beginAccess();
    uint64_t v15 = *v12;
    v14[15] = 4;
    sub_100003C68(&qword_100076C20);
    sub_1000111C8(&qword_100076C60, (void (*)(void))sub_100011244);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100010498(void *a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v22 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v24 = sub_100003C68(&qword_100076BF8);
  uint64_t v6 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  unint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  uint64_t v26 = a1;
  sub_100006DCC(a1, v9);
  sub_100010B28();
  char v25 = v8;
  uint64_t v10 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v10)
  {
    uint64_t v20 = (uint64_t)v26;
    uint64_t v14 = v27;
    type metadata accessor for PersistenceRecord();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v28 = v6;
    uint64_t v11 = v23;
    LOBYTE(v29) = 0;
    sub_1000112EC(&qword_100076C08, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v12 = v24;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v14 = v27;
    uint64_t v15 = *(void (**)(void))(v11 + 32);
    v21[2] = v5;
    Swift::Int v21[3] = v27 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_recordIdentifier;
    v15();
    LOBYTE(v29) = 1;
    sub_1000112EC(&qword_100076C10, (void (*)(uint64_t))&type metadata accessor for URL);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v14 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_containerPath, v4, v2);
    char v33 = 2;
    sub_100010B7C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v21[1] = 0;
    uint64_t v16 = v30;
    uint64_t v17 = v31;
    char v18 = v32;
    uint64_t v19 = v14 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client;
    *(_OWORD *)uint64_t v19 = v29;
    *(void *)(v19 + 16) = v16;
    *(void *)(v19 + 24) = v17;
    *(unsigned char *)(v19 + 32) = v18;
    LOBYTE(v29) = 3;
    *(void *)(v14 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_version) = KeyedDecodingContainer.decode(_:forKey:)();
    sub_100003C68(&qword_100076C20);
    char v33 = 4;
    sub_1000111C8(&qword_100076C28, (void (*)(void))sub_100010BD0);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v20 = (uint64_t)v26;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v12);
    *(void *)(v14 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_storeDirectory) = v29;
  }
  _s20ManagedSettingsAgent12ClientFinderVwxx_0(v20);
  return v14;
}

uint64_t sub_100010A9C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for PersistenceRecord();
  uint64_t v5 = swift_allocObject();
  uint64_t result = sub_100010498(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_100010AF8(void *a1)
{
  return sub_100010160(a1);
}

uint64_t sub_100010B1C(uint64_t *a1, uint64_t *a2)
{
  return sub_100010C24(*a1, *a2);
}

unint64_t sub_100010B28()
{
  unint64_t result = qword_100076C00;
  if (!qword_100076C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100076C00);
  }
  return result;
}

unint64_t sub_100010B7C()
{
  unint64_t result = qword_100076C18;
  if (!qword_100076C18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100076C18);
  }
  return result;
}

unint64_t sub_100010BD0()
{
  unint64_t result = qword_100076C30;
  if (!qword_100076C30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100076C30);
  }
  return result;
}

uint64_t sub_100010C24(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0 || (static URL.== infix(_:_:)() & 1) == 0) {
    goto LABEL_18;
  }
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 16);
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 24);
  int v6 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 32);
  uint64_t v7 = *(void *)(a2 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 16);
  uint64_t v8 = *(void *)(a2 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 24);
  int v9 = *(unsigned __int8 *)(a2 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 32);
  BOOL v10 = *(void *)(a1 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client) == *(void *)(a2 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client)
     && *(void *)(a1 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 8) == *(void *)(a2 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 8);
  if (v10 || (char v11 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (v4 == v7 && v5 == v8)
    {
      if (v6 != v9) {
        goto LABEL_18;
      }
    }
    else
    {
      char v11 = 0;
      if (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 || ((v6 ^ v9)) {
        return v11 & 1;
      }
    }
    if (*(void *)(a1 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_version) == *(void *)(a2 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_version))
    {
      unint64_t v13 = (uint64_t *)(a1 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_storeDirectory);
      swift_beginAccess();
      uint64_t v14 = *v13;
      uint64_t v15 = (uint64_t *)(a2 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_storeDirectory);
      swift_beginAccess();
      uint64_t v16 = *v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v11 = sub_10000F92C(v14, v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v11 & 1;
    }
LABEL_18:
    char v11 = 0;
  }
  return v11 & 1;
}

uint64_t sub_100010DBC(_OWORD *a1, uint64_t a2)
{
  uint64_t v27 = a2;
  uint64_t v28 = a1;
  uint64_t v2 = type metadata accessor for URL.DirectoryHint();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v24 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v23 - v13;
  UUID.init()();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
  unint64_t v26 = sub_100038680((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v29 = UUID.uuidString.getter();
  uint64_t v30 = v15;
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for URL.DirectoryHint.notDirectory(_:), v2);
  sub_100011120();
  uint64_t v16 = v27;
  URL.appending<A>(path:directoryHint:)();
  uint64_t v17 = v25;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v16, v25);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  type metadata accessor for PersistenceRecord();
  uint64_t v18 = swift_allocObject();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v18 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_recordIdentifier, v12, v8);
  uint64_t v19 = v18 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client;
  uint64_t v20 = v28;
  long long v21 = v28[1];
  *(_OWORD *)uint64_t v19 = *v28;
  *(_OWORD *)(v19 + 16) = v21;
  *(unsigned char *)(v19 + 32) = *((unsigned char *)v20 + 32);
  *(void *)(v18 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_storeDirectory) = v26;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v18 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_containerPath, v24, v17);
  *(void *)(v18 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_version) = 1;
  return v18;
}

unint64_t sub_100011120()
{
  unint64_t result = qword_100076C38;
  if (!qword_100076C38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100076C38);
  }
  return result;
}

unint64_t sub_100011174()
{
  unint64_t result = qword_100076C58;
  if (!qword_100076C58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100076C58);
  }
  return result;
}

uint64_t sub_1000111C8(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100009774(&qword_100076C20);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100011244()
{
  unint64_t result = qword_100076C68;
  if (!qword_100076C68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100076C68);
  }
  return result;
}

unint64_t sub_100011298()
{
  unint64_t result = qword_100076C70;
  if (!qword_100076C70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100076C70);
  }
  return result;
}

uint64_t sub_1000112EC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PersistenceRecordError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100011400);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PersistenceRecordError()
{
  return &type metadata for PersistenceRecordError;
}

uint64_t getEnumTagSinglePayload for PersistenceRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PersistenceRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100011594);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PersistenceRecord.CodingKeys()
{
  return &type metadata for PersistenceRecord.CodingKeys;
}

unint64_t sub_1000115D0()
{
  unint64_t result = qword_100076C80;
  if (!qword_100076C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100076C80);
  }
  return result;
}

unint64_t sub_100011628()
{
  unint64_t result = qword_100076C88;
  if (!qword_100076C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100076C88);
  }
  return result;
}

unint64_t sub_100011680()
{
  unint64_t result = qword_100076C90;
  if (!qword_100076C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100076C90);
  }
  return result;
}

unint64_t sub_1000116D8()
{
  unint64_t result = qword_100076C98;
  if (!qword_100076C98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100076C98);
  }
  return result;
}

uint64_t sub_10001172C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100066FF0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656E6961746E6F63 && a2 == 0xED00006874615072 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E65696C63 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x72694465726F7473 && a2 == 0xEE0079726F746365)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_100011998(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t, uint64_t), uint64_t (*a4)(void), void (*a5)(uint64_t))
{
  uint64_t v9 = v5;
  uint64_t v12 = sub_100003C68(&qword_100076DF8);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for ScreenTimeSettings.ShieldPolicy();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(a1, 1, v15) == 1)
  {
    sub_100006E84(a1, &qword_100076DF8);
    a5(a2);
    uint64_t v19 = a4(0);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a2, v19);
    return sub_100006E84((uint64_t)v14, &qword_100076DF8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v18, a1, v15);
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = *v9;
    *uint64_t v9 = 0x8000000000000000;
    a3(v18, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v9 = v24;
    swift_bridgeObjectRelease();
    uint64_t v22 = a4(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(a2, v22);
  }
}

uint64_t sub_100011BE8(uint64_t a1, void (*a2)(uint64_t *, char *), uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a2;
  uint64_t v27 = sub_100003C68(&qword_100076DD8);
  uint64_t v7 = __chkstk_darwin(v27);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v25 - v10;
  uint64_t v29 = a1;
  uint64_t v12 = *(void *)(a4 + 64);
  uint64_t v25 = a4 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(a4 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v26 = (unint64_t)(v13 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  if (!v15) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    uint64_t v23 = *(void *)(a4 + 48);
    uint64_t v24 = type metadata accessor for Application();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v11, v23 + *(void *)(*(void *)(v24 - 8) + 72) * i, v24);
    v11[*(int *)(v27 + 48)] = *(unsigned char *)(*(void *)(a4 + 56) + i);
    sub_100006EE0((uint64_t)v11, (uint64_t)v9, &qword_100076DD8);
    v28(&v29, v9);
    if (v4)
    {
      swift_bridgeObjectRelease();
      sub_100006E84((uint64_t)v9, &qword_100076DD8);
      return swift_release();
    }
    uint64_t result = sub_100006E84((uint64_t)v9, &qword_100076DD8);
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v17++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v17);
    if (!v21) {
      break;
    }
LABEL_17:
    unint64_t v15 = (v21 - 1) & v21;
  }
  int64_t v22 = v17 + 1;
  if (v17 + 1 >= v26) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v17 + 2;
  if (v17 + 2 >= v26) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v17 + 3;
  if (v17 + 3 >= v26) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v17 + 4;
  if (v17 + 4 >= v26)
  {
LABEL_26:
    swift_release();
    return v29;
  }
  unint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
LABEL_16:
    int64_t v17 = v22;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v17 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100011EC4(uint64_t a1, void (*a2)(uint64_t *, char *), uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void))
{
  uint64_t v36 = a6;
  uint64_t v37 = a5;
  int64_t v35 = a2;
  uint64_t v34 = sub_100003C68(a5);
  uint64_t v9 = __chkstk_darwin(v34);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v31 - v12;
  uint64_t v39 = a1;
  uint64_t v14 = *(void *)(a4 + 64);
  uint64_t v32 = a4 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(a4 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  int64_t v33 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v38 = a4;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v19 = 0;
  uint64_t v20 = v38;
  if (!v17) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v21 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (unint64_t i = v21 | (v19 << 6); ; unint64_t i = __clz(__rbit64(v24)) + (v19 << 6))
  {
    uint64_t v26 = *(void *)(v20 + 48);
    uint64_t v27 = v36(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v13, v26 + *(void *)(*(void *)(v27 - 8) + 72) * i, v27);
    uint64_t v28 = *(void *)(v20 + 56);
    uint64_t v29 = type metadata accessor for ScreenTimeSettings.ShieldPolicy();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(&v13[*(int *)(v34 + 48)], v28 + *(void *)(*(void *)(v29 - 8) + 72) * i, v29);
    uint64_t v30 = v37;
    sub_100006EE0((uint64_t)v13, (uint64_t)v11, v37);
    v35(&v39, v11);
    if (v6)
    {
      swift_bridgeObjectRelease();
      sub_100006E84((uint64_t)v11, v30);
      return swift_release();
    }
    uint64_t result = sub_100006E84((uint64_t)v11, v30);
    if (v17) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v19++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v33) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v32 + 8 * v19);
    if (!v24) {
      break;
    }
LABEL_17:
    unint64_t v17 = (v24 - 1) & v24;
  }
  int64_t v25 = v19 + 1;
  if (v19 + 1 >= v33) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v32 + 8 * v25);
  if (v24) {
    goto LABEL_16;
  }
  int64_t v25 = v19 + 2;
  if (v19 + 2 >= v33) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v32 + 8 * v25);
  if (v24) {
    goto LABEL_16;
  }
  int64_t v25 = v19 + 3;
  if (v19 + 3 >= v33) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v32 + 8 * v25);
  if (v24) {
    goto LABEL_16;
  }
  int64_t v25 = v19 + 4;
  if (v19 + 4 >= v33)
  {
LABEL_26:
    swift_release();
    return v39;
  }
  unint64_t v24 = *(void *)(v32 + 8 * v25);
  if (v24)
  {
LABEL_16:
    int64_t v19 = v25;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v19 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v19 >= v33) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v32 + 8 * v19);
    ++v25;
    if (v24) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000121E0(uint64_t a1, void (*a2)(uint64_t *, char *), uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v31 = a2;
  uint64_t v8 = a5(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v27 - v13;
  uint64_t v33 = a1;
  uint64_t v15 = *(void *)(a4 + 56);
  uint64_t v27 = a4 + 56;
  uint64_t v16 = 1 << *(unsigned char *)(a4 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  uint64_t v30 = v9 + 16;
  int64_t v28 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v29 = v9 + 32;
  int64_t v19 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v32 = a4;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v21 = 0;
  if (!v18) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v22 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (unint64_t i = v22 | (v21 << 6); ; unint64_t i = __clz(__rbit64(v25)) + (v21 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v14, *(void *)(v32 + 48) + *(void *)(v9 + 72) * i, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v14, v8);
    v31(&v33, v12);
    if (v5)
    {
      swift_bridgeObjectRelease();
      (*v19)(v12, v8);
      return swift_release();
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v19)(v12, v8);
    if (v18) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v21++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v28) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v27 + 8 * v21);
    if (!v25) {
      break;
    }
LABEL_17:
    unint64_t v18 = (v25 - 1) & v25;
  }
  int64_t v26 = v21 + 1;
  if (v21 + 1 >= v28) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v27 + 8 * v26);
  if (v25) {
    goto LABEL_16;
  }
  int64_t v26 = v21 + 2;
  if (v21 + 2 >= v28) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v27 + 8 * v26);
  if (v25) {
    goto LABEL_16;
  }
  int64_t v26 = v21 + 3;
  if (v21 + 3 >= v28) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v27 + 8 * v26);
  if (v25) {
    goto LABEL_16;
  }
  int64_t v26 = v21 + 4;
  if (v21 + 4 >= v28)
  {
LABEL_26:
    swift_release();
    return v33;
  }
  unint64_t v25 = *(void *)(v27 + 8 * v26);
  if (v25)
  {
LABEL_16:
    int64_t v21 = v26;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v21 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v21 >= v28) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v27 + 8 * v21);
    ++v26;
    if (v25) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000124EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v85 = a2;
  uint64_t v87 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v87 - 8);
  uint64_t v8 = __chkstk_darwin(v87);
  v76 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v91 = (char *)&v75 - v10;
  sub_1000081AC();
  uint64_t v77 = Dictionary.init(minimumCapacity:)();
  uint64_t v11 = *(void *)(a3 + 64);
  uint64_t v82 = a3 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v83 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v84 = a1 + 16;
  uint64_t v86 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v80 = (char *)v92 + 8;
  swift_bridgeObjectRetain();
  uint64_t v88 = 0;
  int64_t v15 = 0;
  *(void *)&long long v16 = 136446978;
  long long v79 = v16;
  unint64_t v78 = (char *)&type metadata for Any + 8;
  *(void *)&long long v16 = 136446210;
  long long v75 = v16;
  uint64_t v90 = a1;
  uint64_t v81 = a3;
  if (!v14) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v97 = (v14 - 1) & v14;
  for (unint64_t i = __clz(__rbit64(v14)) | (v15 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v15 << 6))
  {
    int64_t v21 = (uint64_t *)(*(void *)(a3 + 48) + 16 * i);
    uint64_t v23 = *v21;
    unint64_t v22 = v21[1];
    unint64_t v24 = *(void **)(*(void *)(a3 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    id v25 = v24;
    static SettingMetadataDirectory.metadata(for:)();
    if (v4)
    {
      swift_errorRelease();
      uint64_t v93 = 0;
      memset(v92, 0, sizeof(v92));
      sub_100006E84((uint64_t)v92, &qword_100076D18);
      uint64_t v29 = v76;
      static Logger.effective.getter();
      swift_bridgeObjectRetain_n();
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      BOOL v32 = os_log_type_enabled(v30, v31);
      int64_t v89 = v15;
      if (v32)
      {
        uint64_t v33 = swift_slowAlloc();
        v94[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v33 = v75;
        swift_bridgeObjectRetain();
        *(void *)(v33 + 4) = sub_1000036B0(v23, v22, v94);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Unknown setting %{public}s", (uint8_t *)v33, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*v86)(v29, v87);
      id v45 = v25;
      uint64_t v46 = v77;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v94[0] = v46;
      unint64_t v49 = sub_100019BD4(v23, v22);
      uint64_t v50 = *(void *)(v46 + 16);
      BOOL v51 = (v48 & 1) == 0;
      uint64_t v52 = v50 + v51;
      if (__OFADD__(v50, v51)) {
        goto LABEL_65;
      }
      char v53 = v48;
      if (*(void *)(v46 + 24) >= v52)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_10001F468();
        }
      }
      else
      {
        sub_10001C448(v52, isUniquelyReferenced_nonNull_native);
        unint64_t v54 = sub_100019BD4(v23, v22);
        if ((v53 & 1) != (v55 & 1)) {
          goto LABEL_70;
        }
        unint64_t v49 = v54;
      }
      int64_t v15 = v89;
      unint64_t v56 = (void *)v94[0];
      uint64_t v77 = v94[0];
      if (v53)
      {
        uint64_t v57 = *(void *)(v94[0] + 56);
        uint64_t v58 = 8 * v49;

        *(void *)(v57 + v58) = v45;
      }
      else
      {
        *(void *)(v94[0] + 8 * (v49 >> 6) + 64) |= 1 << v49;
        unint64_t v59 = (uint64_t *)(v56[6] + 16 * v49);
        *unint64_t v59 = v23;
        v59[1] = v22;
        *(void *)(v56[7] + 8 * v49) = v45;
        uint64_t v60 = v56[2];
        BOOL v18 = __OFADD__(v60, 1);
        uint64_t v61 = v60 + 1;
        if (v18) {
          goto LABEL_67;
        }
        v56[2] = v61;
        swift_bridgeObjectRetain();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v4 = 0;
      unint64_t v14 = v97;
      if (v97) {
        goto LABEL_4;
      }
    }
    else
    {
      sub_10000DE5C(v92, (uint64_t)v94);
      uint64_t v26 = v95;
      uint64_t v27 = v96;
      sub_100006DCC(v94, v95);
      int64_t v28 = sub_100017F54((char *)v25, v90, v85, v26, v27);
      uint64_t v4 = 0;
      uint64_t v34 = v28;
      if (v28)
      {
        int64_t v89 = v15;
        uint64_t v35 = v77;
        char v36 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&v92[0] = v35;
        unint64_t v38 = sub_100019BD4(v23, v22);
        uint64_t v39 = *(void *)(v35 + 16);
        BOOL v40 = (v37 & 1) == 0;
        uint64_t v41 = v39 + v40;
        if (__OFADD__(v39, v40)) {
          goto LABEL_66;
        }
        char v42 = v37;
        if (*(void *)(v35 + 24) >= v41)
        {
          if ((v36 & 1) == 0) {
            sub_10001F468();
          }
        }
        else
        {
          sub_10001C448(v41, v36);
          unint64_t v43 = sub_100019BD4(v23, v22);
          if ((v42 & 1) != (v44 & 1)) {
            goto LABEL_70;
          }
          unint64_t v38 = v43;
        }
        a3 = v81;
        id v69 = *(void **)&v92[0];
        uint64_t v77 = *(void *)&v92[0];
        if (v42)
        {
          uint64_t v70 = *(void *)(*(void *)&v92[0] + 56);

          *(void *)(v70 + 8 * v38) = v34;
        }
        else
        {
          *(void *)(*(void *)&v92[0] + 8 * (v38 >> 6) + 64) |= 1 << v38;
          v71 = (uint64_t *)(v69[6] + 16 * v38);
          uint64_t *v71 = v23;
          v71[1] = v22;
          *(void *)(v69[7] + 8 * v38) = v34;
          uint64_t v72 = v69[2];
          BOOL v18 = __OFADD__(v72, 1);
          uint64_t v73 = v72 + 1;
          if (v18) {
            goto LABEL_68;
          }
          v69[2] = v73;
          swift_bridgeObjectRetain();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int64_t v15 = v89;
      }
      else
      {
        uint64_t v62 = v77;
        swift_bridgeObjectRetain();
        unint64_t v63 = sub_100019BD4(v23, v22);
        char v65 = v64;
        swift_bridgeObjectRelease();
        if (v65)
        {
          char v66 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&v92[0] = v62;
          uint64_t v67 = v62;
          if ((v66 & 1) == 0)
          {
            sub_10001F468();
            uint64_t v67 = *(void *)&v92[0];
          }
          swift_bridgeObjectRelease();
          uint64_t v68 = *(void **)(*(void *)(v67 + 56) + 8 * v63);
          uint64_t v77 = v67;
          sub_100017958(v63, v67);

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {

          swift_bridgeObjectRelease();
        }
      }
      _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v94);
      unint64_t v14 = v97;
      if (v97) {
        goto LABEL_4;
      }
    }
LABEL_5:
    BOOL v18 = __OFADD__(v15++, 1);
    if (v18)
    {
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if (v15 >= v83) {
      goto LABEL_57;
    }
    unint64_t v19 = *(void *)(v82 + 8 * v15);
    if (!v19) {
      break;
    }
LABEL_15:
    uint64_t v97 = (v19 - 1) & v19;
  }
  int64_t v20 = v15 + 1;
  if (v15 + 1 >= v83) {
    goto LABEL_57;
  }
  unint64_t v19 = *(void *)(v82 + 8 * v20);
  if (v19) {
    goto LABEL_14;
  }
  int64_t v20 = v15 + 2;
  if (v15 + 2 >= v83) {
    goto LABEL_57;
  }
  unint64_t v19 = *(void *)(v82 + 8 * v20);
  if (v19)
  {
LABEL_14:
    int64_t v15 = v20;
    goto LABEL_15;
  }
  int64_t v20 = v15 + 3;
  if (v15 + 3 < v83)
  {
    unint64_t v19 = *(void *)(v82 + 8 * v20);
    if (!v19)
    {
      while (1)
      {
        int64_t v15 = v20 + 1;
        if (__OFADD__(v20, 1)) {
          goto LABEL_64;
        }
        if (v15 >= v83) {
          goto LABEL_57;
        }
        unint64_t v19 = *(void *)(v82 + 8 * v15);
        ++v20;
        if (v19) {
          goto LABEL_15;
        }
      }
    }
    goto LABEL_14;
  }
LABEL_57:
  swift_release();
  if (!*(void *)(a3 + 16) || *(void *)(v77 + 16))
  {
    swift_errorRelease();
    return v77;
  }
  if (v88)
  {
    swift_willThrow();
    swift_bridgeObjectRelease();
    return v77;
  }
LABEL_69:
  __break(1u);
LABEL_70:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100013100@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v17 = a1;
  uint64_t v20 = sub_100003C68(&qword_100076DB0);
  uint64_t v18 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100003C68(&qword_100076DB8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100003C68(&qword_100076DC0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Application.token.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100006E84((uint64_t)v9, &qword_100076DB8);
    uint64_t v14 = type metadata accessor for Application();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(a2, v2, v14);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    Token.data.getter();
    Token.init(data:)();
    sub_100019094(v17, (uint64_t)v19);
    type metadata accessor for TokenDecoder();
    swift_allocObject();
    swift_bridgeObjectRetain();
    TokenDecoder.init(teamIdentifier:keyRetriever:)();
    dispatch thunk of TokenDecoder.decode(bundleIdentifierToken:)();
    if (!v3) {
      Application.init(bundleIdentifier:)();
    }
    swift_release();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v6, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

uint64_t sub_1000133F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void (*a4)(uint64_t *, char *)@<X3>, uint64_t (*a5)(void)@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v27 = a5;
  uint64_t v26 = a4;
  uint64_t v8 = v6;
  uint64_t v12 = sub_100003C68(a3);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  int64_t v15 = (uint64_t *)((char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v13 + 16))(v15, v8, v12);
  uint64_t v16 = (*(uint64_t (**)(uint64_t *, uint64_t))(v13 + 88))(v15, v12);
  uint64_t v17 = v16;
  if (v16 == enum case for ShieldSettings.EffectiveActivityCategoryPolicy.specific<A>(_:))
  {
    id v25 = a6;
    (*(void (**)(uint64_t *, uint64_t))(v13 + 96))(v15, v12);
    uint64_t v18 = *v15;
    uint64_t v19 = v15[1];
    uint64_t v20 = sub_100013DB4(a1, a2, v18, (void (*)(uint64_t *, char *))sub_1000190F8, (uint64_t (*)(void))&type metadata accessor for ActivityCategory);
    swift_bridgeObjectRelease();
    if (v7) {
      return swift_bridgeObjectRelease();
    }
    uint64_t v21 = sub_100013DB4(a1, a2, v19, v26, v27);
    swift_bridgeObjectRelease();
    unint64_t v24 = v25;
    *id v25 = v20;
    v24[1] = v21;
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v13 + 104))(v24, v17, v12);
  }
  if (v16 == enum case for ShieldSettings.EffectiveActivityCategoryPolicy.all<A>(_:))
  {
    id v25 = a6;
    (*(void (**)(uint64_t *, uint64_t))(v13 + 96))(v15, v12);
    uint64_t v23 = sub_100013DB4(a1, a2, *v15, v26, v27);
    uint64_t result = swift_bridgeObjectRelease();
    if (v7) {
      return result;
    }
    unint64_t v24 = v25;
    *id v25 = v23;
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v13 + 104))(v24, v17, v12);
  }
  if (v16 == enum case for ShieldSettings.EffectiveActivityCategoryPolicy.none<A>(_:)) {
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v13 + 104))(a6, v16, v12);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000136E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = v3;
  uint64_t v23 = a2;
  unint64_t v24 = a3;
  uint64_t v7 = type metadata accessor for UserSafetySettings.ScanningPolicy();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16);
  v11(v10, v5, v7);
  int v12 = (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 88))(v10, v7);
  if (v12 != enum case for UserSafetySettings.ScanningPolicy.nudityDetection(_:))
  {
    if (v12 == enum case for UserSafetySettings.ScanningPolicy.communicationSafety(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v8 + 96))(v10, v7);
      uint64_t v18 = type metadata accessor for UserSafetySettings.InterventionType();
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v18 - 8) + 8))(v10, v18);
    }
    else if (v12 != enum case for UserSafetySettings.ScanningPolicy.none(_:))
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    return ((uint64_t (*)(void *, uint64_t, uint64_t))v11)(v24, v5, v7);
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 96))(v10, v7);
  uint64_t v14 = *v10;
  uint64_t v15 = v10[1];
  __chkstk_darwin(v13);
  uint64_t v20 = a1;
  uint64_t v21 = v23;
  uint64_t v16 = sub_100011BE8((uint64_t)&_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_100019154, (uint64_t)(&v22 - 4), v15);
  swift_bridgeObjectRelease();
  if (v4) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v19 = v24;
  *unint64_t v24 = v14;
  v19[1] = v16;
  return (*(uint64_t (**)(void))(v8 + 104))();
}

uint64_t sub_1000139C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = v3;
  uint64_t v22 = a3;
  uint64_t v8 = type metadata accessor for WebContentSettings.FilterPolicy();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  int v12 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16);
  v12(v11, v5, v8);
  int v13 = (*(uint64_t (**)(uint64_t *, uint64_t))(v9 + 88))(v11, v8);
  if (v13 == enum case for WebContentSettings.FilterPolicy.specific(_:))
  {
LABEL_2:
    (*(void (**)(uint64_t *, uint64_t))(v9 + 96))(v11, v8);
    uint64_t v14 = sub_100013DB4(a1, a2, *v11, (void (*)(uint64_t *, char *))sub_1000191CC, (uint64_t (*)(void))&type metadata accessor for WebDomain);
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4)
    {
      *uint64_t v22 = v14;
      uint64_t v16 = *(uint64_t (**)(void))(v9 + 104);
      return v16();
    }
    return result;
  }
  if (v13 != enum case for WebContentSettings.FilterPolicy.auto(_:))
  {
    if (v13 != enum case for WebContentSettings.FilterPolicy.all(_:))
    {
      if (v13 == enum case for WebContentSettings.FilterPolicy.none(_:)) {
        return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v12)(v22, v5, v8);
      }
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    goto LABEL_2;
  }
  Swift::Int v21[3] = v13;
  (*(void (**)(uint64_t *, uint64_t))(v9 + 96))(v11, v8);
  uint64_t v17 = v11[1];
  uint64_t v18 = sub_100013DB4(a1, a2, *v11, (void (*)(uint64_t *, char *))sub_1000191CC, (uint64_t (*)(void))&type metadata accessor for WebDomain);
  swift_bridgeObjectRelease();
  if (!v4)
  {
    uint64_t v19 = sub_100013DB4(a1, a2, v17, (void (*)(uint64_t *, char *))sub_1000191CC, (uint64_t (*)(void))&type metadata accessor for WebDomain);
    swift_bridgeObjectRelease();
    uint64_t v20 = v22;
    *uint64_t v22 = v18;
    v20[1] = v19;
    uint64_t v16 = *(uint64_t (**)(void))(v9 + 104);
    return v16();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100013D14(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *, char *), uint64_t *a5, uint64_t (*a6)(void))
{
  uint64_t v11 = 0;
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = &v11;
  uint64_t v7 = sub_100011EC4((uint64_t)&_swiftEmptyDictionarySingleton, a4, (uint64_t)v10, a3, a5, a6);
  uint64_t v8 = v7;
  if (!*(void *)(a3 + 16) || *(void *)(v7 + 16))
  {
    swift_errorRelease();
    return v8;
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (v11)
  {
    swift_willThrow();
    return v8;
  }
  __break(1u);
  return result;
}

uint64_t sub_100013DB4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *, char *), uint64_t (*a5)(void))
{
  uint64_t v10 = 0;
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = &v10;
  uint64_t v6 = sub_1000121E0((uint64_t)&_swiftEmptySetSingleton, a4, (uint64_t)v9, a3, a5);
  uint64_t v7 = v6;
  if (!*(void *)(a3 + 16) || *(void *)(v6 + 16))
  {
    swift_errorRelease();
    return v7;
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (v10)
  {
    swift_willThrow();
    return v7;
  }
  __break(1u);
  return result;
}

uint64_t sub_100013E54(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t *a5)
{
  v71 = a5;
  uint64_t v68 = a1;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v69 = *(void *)(v8 - 8);
  uint64_t v70 = v8;
  __chkstk_darwin(v8);
  v76 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_100003C68(&qword_100076E08);
  uint64_t v10 = __chkstk_darwin(v77);
  uint64_t v74 = (uint64_t)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v75 = (uint64_t)&v62 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v62 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v62 - v17;
  uint64_t v19 = sub_100003C68(&qword_100076DF8);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for WebDomain();
  uint64_t v22 = *(void *)(v78 - 8);
  uint64_t v23 = __chkstk_darwin(v78);
  id v25 = (char *)&v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v62 - v26;
  uint64_t v72 = a3;
  uint64_t v28 = v73;
  sub_1000159FC(a4, (uint64_t)&v62 - v26);
  if (v28)
  {
    static Logger.effective.getter();
    uint64_t v29 = *(int *)(v77 + 48);
    uint64_t v30 = &v16[v29];
    uint64_t v31 = a2 + v29;
    BOOL v32 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
    uint64_t v68 = v22 + 16;
    char v66 = v32;
    v32(v16, a2, v78);
    uint64_t v33 = type metadata accessor for ScreenTimeSettings.ShieldPolicy();
    uint64_t v67 = *(void *)(v33 - 8);
    char v65 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
    v65(v30, v31, v33);
    sub_100019288((uint64_t)v16, v75, &qword_100076E08);
    sub_100006EE0((uint64_t)v16, v74, &qword_100076E08);
    long long v34 = *v72;
    long long v80 = v72[1];
    v81[0] = v34;
    sub_10001903C((uint64_t)v81);
    sub_10001903C((uint64_t)&v80);
    swift_errorRetain();
    sub_10001903C((uint64_t)v81);
    sub_10001903C((uint64_t)&v80);
    swift_errorRetain();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    int v37 = v36;
    uint64_t v38 = v28;
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v39 = swift_slowAlloc();
      uint64_t v64 = swift_slowAlloc();
      uint64_t v82 = v64;
      *(_DWORD *)uint64_t v39 = 136446722;
      os_log_t v63 = v35;
      uint64_t v40 = *(int *)(v77 + 48);
      LODWORD(v77) = v37;
      uint64_t v41 = &v18[v40];
      uint64_t v73 = v28;
      uint64_t v42 = v75;
      uint64_t v43 = v75 + v40;
      v66(v18, v75, v78);
      v65(v41, v43, v33);
      uint64_t v44 = String.init<A>(describing:)();
      unint64_t v46 = v45;
      (*(void (**)(char *, uint64_t))(v67 + 8))(v41, v33);
      uint64_t v79 = sub_1000036B0(v44, v46, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v38 = v73;
      swift_bridgeObjectRelease();
      sub_100006E84(v74, &qword_100076E08);
      sub_100006E84(v42, &qword_100076E08);
      *(_WORD *)(v39 + 12) = 2082;
      sub_10001903C((uint64_t)v81);
      sub_10001903C((uint64_t)&v80);
      unint64_t v47 = ClientIdentity.description.getter();
      unint64_t v49 = v48;
      sub_100019068((uint64_t)v81);
      sub_100019068((uint64_t)&v80);
      uint64_t v79 = sub_1000036B0(v47, v49, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100019068((uint64_t)v81);
      sub_100019068((uint64_t)&v80);
      sub_100019068((uint64_t)v81);
      sub_100019068((uint64_t)&v80);
      *(_WORD *)(v39 + 22) = 2082;
      uint64_t v79 = v38;
      swift_errorRetain();
      sub_100003C68(&qword_100076FE0);
      uint64_t v50 = String.init<A>(describing:)();
      uint64_t v79 = sub_1000036B0(v50, v51, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v52 = v63;
      _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v77, "Failed to detokenize dictionary key %{public}s for %{public}s: %{public}s", (uint8_t *)v39, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100006E84(v74, &qword_100076E08);
      sub_100006E84(v75, &qword_100076E08);
      sub_100019068((uint64_t)v81);
      sub_100019068((uint64_t)&v80);
      sub_100019068((uint64_t)v81);
      sub_100019068((uint64_t)&v80);
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v76, v70);
    if (*v71) {
      return swift_errorRelease();
    }
    else {
      uint64_t *v71 = v38;
    }
  }
  else
  {
    uint64_t v53 = v22;
    unint64_t v54 = *(void (**)(char *, char *))(v22 + 16);
    uint64_t v73 = 0;
    uint64_t v55 = v78;
    v54(v25, v27);
    uint64_t v56 = *(int *)(v77 + 48);
    v76 = &v18[v56];
    uint64_t v77 = a2 + v56;
    ((void (*)(char *, uint64_t, uint64_t))v54)(v18, a2, v55);
    uint64_t v57 = type metadata accessor for ScreenTimeSettings.ShieldPolicy();
    uint64_t v58 = *(void *)(v57 - 8);
    unint64_t v59 = v76;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v76, v77, v57);
    (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v21, v59, v57);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v21, 0, 1, v57);
    sub_100011998((uint64_t)v21, (uint64_t)v25, (void (*)(char *, uint64_t, uint64_t))sub_10001D94C, (uint64_t (*)(void))&type metadata accessor for WebDomain, (void (*)(uint64_t))sub_1000166A8);
    uint64_t v60 = *(void (**)(char *, uint64_t))(v53 + 8);
    v60(v27, v55);
    return ((uint64_t (*)(char *, uint64_t))v60)(v18, v55);
  }
  return result;
}

uint64_t sub_100014690(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t *a5)
{
  v71 = a5;
  uint64_t v68 = a1;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v69 = *(void *)(v8 - 8);
  uint64_t v70 = v8;
  __chkstk_darwin(v8);
  v76 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_100003C68(&qword_100076E00);
  uint64_t v10 = __chkstk_darwin(v77);
  uint64_t v74 = (uint64_t)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v75 = (uint64_t)&v62 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v62 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v62 - v17;
  uint64_t v19 = sub_100003C68(&qword_100076DF8);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for Application();
  uint64_t v22 = *(void *)(v78 - 8);
  uint64_t v23 = __chkstk_darwin(v78);
  id v25 = (char *)&v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v62 - v26;
  uint64_t v72 = a3;
  uint64_t v28 = v73;
  sub_100013100(a4, (uint64_t)&v62 - v26);
  if (v28)
  {
    static Logger.effective.getter();
    uint64_t v29 = *(int *)(v77 + 48);
    uint64_t v30 = &v16[v29];
    uint64_t v31 = a2 + v29;
    BOOL v32 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
    uint64_t v68 = v22 + 16;
    char v66 = v32;
    v32(v16, a2, v78);
    uint64_t v33 = type metadata accessor for ScreenTimeSettings.ShieldPolicy();
    uint64_t v67 = *(void *)(v33 - 8);
    char v65 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
    v65(v30, v31, v33);
    sub_100019288((uint64_t)v16, v75, &qword_100076E00);
    sub_100006EE0((uint64_t)v16, v74, &qword_100076E00);
    long long v34 = *v72;
    long long v80 = v72[1];
    v81[0] = v34;
    sub_10001903C((uint64_t)v81);
    sub_10001903C((uint64_t)&v80);
    swift_errorRetain();
    sub_10001903C((uint64_t)v81);
    sub_10001903C((uint64_t)&v80);
    swift_errorRetain();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    int v37 = v36;
    uint64_t v38 = v28;
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v39 = swift_slowAlloc();
      uint64_t v64 = swift_slowAlloc();
      uint64_t v82 = v64;
      *(_DWORD *)uint64_t v39 = 136446722;
      os_log_t v63 = v35;
      uint64_t v40 = *(int *)(v77 + 48);
      LODWORD(v77) = v37;
      uint64_t v41 = &v18[v40];
      uint64_t v73 = v28;
      uint64_t v42 = v75;
      uint64_t v43 = v75 + v40;
      v66(v18, v75, v78);
      v65(v41, v43, v33);
      uint64_t v44 = String.init<A>(describing:)();
      unint64_t v46 = v45;
      (*(void (**)(char *, uint64_t))(v67 + 8))(v41, v33);
      uint64_t v79 = sub_1000036B0(v44, v46, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v38 = v73;
      swift_bridgeObjectRelease();
      sub_100006E84(v74, &qword_100076E00);
      sub_100006E84(v42, &qword_100076E00);
      *(_WORD *)(v39 + 12) = 2082;
      sub_10001903C((uint64_t)v81);
      sub_10001903C((uint64_t)&v80);
      unint64_t v47 = ClientIdentity.description.getter();
      unint64_t v49 = v48;
      sub_100019068((uint64_t)v81);
      sub_100019068((uint64_t)&v80);
      uint64_t v79 = sub_1000036B0(v47, v49, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100019068((uint64_t)v81);
      sub_100019068((uint64_t)&v80);
      sub_100019068((uint64_t)v81);
      sub_100019068((uint64_t)&v80);
      *(_WORD *)(v39 + 22) = 2082;
      uint64_t v79 = v38;
      swift_errorRetain();
      sub_100003C68(&qword_100076FE0);
      uint64_t v50 = String.init<A>(describing:)();
      uint64_t v79 = sub_1000036B0(v50, v51, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v52 = v63;
      _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v77, "Failed to detokenize dictionary key %{public}s for %{public}s: %{public}s", (uint8_t *)v39, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100006E84(v74, &qword_100076E00);
      sub_100006E84(v75, &qword_100076E00);
      sub_100019068((uint64_t)v81);
      sub_100019068((uint64_t)&v80);
      sub_100019068((uint64_t)v81);
      sub_100019068((uint64_t)&v80);
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v76, v70);
    if (*v71) {
      return swift_errorRelease();
    }
    else {
      uint64_t *v71 = v38;
    }
  }
  else
  {
    uint64_t v53 = v22;
    unint64_t v54 = *(void (**)(char *, char *))(v22 + 16);
    uint64_t v73 = 0;
    uint64_t v55 = v78;
    v54(v25, v27);
    uint64_t v56 = *(int *)(v77 + 48);
    v76 = &v18[v56];
    uint64_t v77 = a2 + v56;
    ((void (*)(char *, uint64_t, uint64_t))v54)(v18, a2, v55);
    uint64_t v57 = type metadata accessor for ScreenTimeSettings.ShieldPolicy();
    uint64_t v58 = *(void *)(v57 - 8);
    unint64_t v59 = v76;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v76, v77, v57);
    (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v21, v59, v57);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v21, 0, 1, v57);
    sub_100011998((uint64_t)v21, (uint64_t)v25, (void (*)(char *, uint64_t, uint64_t))sub_10001DB80, (uint64_t (*)(void))&type metadata accessor for Application, (void (*)(uint64_t))sub_1000168BC);
    uint64_t v60 = *(void (**)(char *, uint64_t))(v53 + 8);
    v60(v27, v55);
    return ((uint64_t (*)(char *, uint64_t))v60)(v18, v55);
  }
  return result;
}

uint64_t sub_100014ECC(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t *a5)
{
  v71 = a5;
  uint64_t v68 = a1;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v69 = *(void *)(v8 - 8);
  uint64_t v70 = v8;
  __chkstk_darwin(v8);
  v76 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_100003C68(&qword_100076DF0);
  uint64_t v10 = __chkstk_darwin(v77);
  uint64_t v74 = (uint64_t)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v75 = (uint64_t)&v62 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v62 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v62 - v17;
  uint64_t v19 = sub_100003C68(&qword_100076DF8);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for ActivityCategory();
  uint64_t v22 = *(void *)(v78 - 8);
  uint64_t v23 = __chkstk_darwin(v78);
  id v25 = (char *)&v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v62 - v26;
  uint64_t v72 = a3;
  uint64_t v28 = v73;
  sub_100015708(a4, (uint64_t)&v62 - v26);
  if (v28)
  {
    static Logger.effective.getter();
    uint64_t v29 = *(int *)(v77 + 48);
    uint64_t v30 = &v16[v29];
    uint64_t v31 = a2 + v29;
    BOOL v32 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
    uint64_t v68 = v22 + 16;
    char v66 = v32;
    v32(v16, a2, v78);
    uint64_t v33 = type metadata accessor for ScreenTimeSettings.ShieldPolicy();
    uint64_t v67 = *(void *)(v33 - 8);
    char v65 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
    v65(v30, v31, v33);
    sub_100019288((uint64_t)v16, v75, &qword_100076DF0);
    sub_100006EE0((uint64_t)v16, v74, &qword_100076DF0);
    long long v34 = *v72;
    long long v80 = v72[1];
    v81[0] = v34;
    sub_10001903C((uint64_t)v81);
    sub_10001903C((uint64_t)&v80);
    swift_errorRetain();
    sub_10001903C((uint64_t)v81);
    sub_10001903C((uint64_t)&v80);
    swift_errorRetain();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    int v37 = v36;
    uint64_t v38 = v28;
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v39 = swift_slowAlloc();
      uint64_t v64 = swift_slowAlloc();
      uint64_t v82 = v64;
      *(_DWORD *)uint64_t v39 = 136446722;
      os_log_t v63 = v35;
      uint64_t v40 = *(int *)(v77 + 48);
      LODWORD(v77) = v37;
      uint64_t v41 = &v18[v40];
      uint64_t v73 = v28;
      uint64_t v42 = v75;
      uint64_t v43 = v75 + v40;
      v66(v18, v75, v78);
      v65(v41, v43, v33);
      uint64_t v44 = String.init<A>(describing:)();
      unint64_t v46 = v45;
      (*(void (**)(char *, uint64_t))(v67 + 8))(v41, v33);
      uint64_t v79 = sub_1000036B0(v44, v46, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v38 = v73;
      swift_bridgeObjectRelease();
      sub_100006E84(v74, &qword_100076DF0);
      sub_100006E84(v42, &qword_100076DF0);
      *(_WORD *)(v39 + 12) = 2082;
      sub_10001903C((uint64_t)v81);
      sub_10001903C((uint64_t)&v80);
      unint64_t v47 = ClientIdentity.description.getter();
      unint64_t v49 = v48;
      sub_100019068((uint64_t)v81);
      sub_100019068((uint64_t)&v80);
      uint64_t v79 = sub_1000036B0(v47, v49, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100019068((uint64_t)v81);
      sub_100019068((uint64_t)&v80);
      sub_100019068((uint64_t)v81);
      sub_100019068((uint64_t)&v80);
      *(_WORD *)(v39 + 22) = 2082;
      uint64_t v79 = v38;
      swift_errorRetain();
      sub_100003C68(&qword_100076FE0);
      uint64_t v50 = String.init<A>(describing:)();
      uint64_t v79 = sub_1000036B0(v50, v51, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v52 = v63;
      _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v77, "Failed to detokenize dictionary key %{public}s for %{public}s: %{public}s", (uint8_t *)v39, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100006E84(v74, &qword_100076DF0);
      sub_100006E84(v75, &qword_100076DF0);
      sub_100019068((uint64_t)v81);
      sub_100019068((uint64_t)&v80);
      sub_100019068((uint64_t)v81);
      sub_100019068((uint64_t)&v80);
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v76, v70);
    if (*v71) {
      return swift_errorRelease();
    }
    else {
      uint64_t *v71 = v38;
    }
  }
  else
  {
    uint64_t v53 = v22;
    unint64_t v54 = *(void (**)(char *, char *))(v22 + 16);
    uint64_t v73 = 0;
    uint64_t v55 = v78;
    v54(v25, v27);
    uint64_t v56 = *(int *)(v77 + 48);
    v76 = &v18[v56];
    uint64_t v77 = a2 + v56;
    ((void (*)(char *, uint64_t, uint64_t))v54)(v18, a2, v55);
    uint64_t v57 = type metadata accessor for ScreenTimeSettings.ShieldPolicy();
    uint64_t v58 = *(void *)(v57 - 8);
    unint64_t v59 = v76;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v76, v77, v57);
    (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v21, v59, v57);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v21, 0, 1, v57);
    sub_100011998((uint64_t)v21, (uint64_t)v25, (void (*)(char *, uint64_t, uint64_t))sub_10001DDB4, (uint64_t (*)(void))&type metadata accessor for ActivityCategory, (void (*)(uint64_t))sub_100016AD0);
    uint64_t v60 = *(void (**)(char *, uint64_t))(v53 + 8);
    v60(v27, v55);
    return ((uint64_t (*)(char *, uint64_t))v60)(v18, v55);
  }
  return result;
}

uint64_t sub_100015708@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v17 = a1;
  uint64_t v20 = sub_100003C68(&qword_100076DB0);
  uint64_t v18 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100003C68(&qword_100076DC8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100003C68(&qword_100076DD0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  ActivityCategory.token.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100006E84((uint64_t)v9, &qword_100076DC8);
    uint64_t v14 = type metadata accessor for ActivityCategory();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(a2, v2, v14);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    Token.data.getter();
    Token.init(data:)();
    sub_100019094(v17, (uint64_t)v19);
    type metadata accessor for TokenDecoder();
    swift_allocObject();
    swift_bridgeObjectRetain();
    TokenDecoder.init(teamIdentifier:keyRetriever:)();
    dispatch thunk of TokenDecoder.decode(categoryIdentifierToken:)();
    if (!v3) {
      ActivityCategory.init(identifier:)();
    }
    swift_release();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v6, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

uint64_t sub_1000159FC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v17 = a1;
  uint64_t v20 = sub_100003C68(&qword_100076DB0);
  uint64_t v18 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100003C68(&qword_100076DE0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100003C68(&qword_100076DE8);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  WebDomain.token.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100006E84((uint64_t)v9, &qword_100076DE0);
    uint64_t v14 = type metadata accessor for WebDomain();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(a2, v2, v14);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    Token.data.getter();
    Token.init(data:)();
    sub_100019094(v17, (uint64_t)v19);
    type metadata accessor for TokenDecoder();
    swift_allocObject();
    swift_bridgeObjectRetain();
    TokenDecoder.init(teamIdentifier:keyRetriever:)();
    dispatch thunk of TokenDecoder.decode(webDomainToken:)();
    if (!v3) {
      WebDomain.init(domain:)();
    }
    swift_release();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v6, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

uint64_t sub_100015CF0(NSObject *a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), void (*a7)(long long *, uint64_t), void (*a8)(char *, char *))
{
  os_log_t v44 = a1;
  unint64_t v45 = a8;
  uint64_t v50 = a7;
  unint64_t v48 = a5;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v46 = *(void *)(v13 - 8);
  uint64_t v47 = v13;
  __chkstk_darwin(v13);
  os_log_t v52 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a6(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  unint64_t v51 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v44 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v44 - v23;
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v44 - v25;
  unint64_t v49 = a3;
  v50(a3, a4);
  if (v8)
  {
    static Logger.effective.getter();
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    v27(v51, a2, v15);
    long long v28 = *v49;
    long long v54 = v49[1];
    long long v55 = v28;
    sub_10001903C((uint64_t)&v55);
    sub_10001903C((uint64_t)&v54);
    swift_errorRetain();
    sub_10001903C((uint64_t)&v55);
    sub_10001903C((uint64_t)&v54);
    swift_errorRetain();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    int v31 = v30;
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v32 = swift_slowAlloc();
      uint64_t v50 = (void (*)(long long *, uint64_t))swift_slowAlloc();
      uint64_t v56 = v50;
      *(_DWORD *)uint64_t v32 = 136446722;
      LODWORD(v45) = v31;
      os_log_t v44 = v29;
      uint64_t v33 = v51;
      v27(v24, (uint64_t)v51, v15);
      uint64_t v34 = String.init<A>(describing:)();
      uint64_t v53 = sub_1000036B0(v34, v35, (uint64_t *)&v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v33, v15);
      *(_WORD *)(v32 + 12) = 2082;
      sub_10001903C((uint64_t)&v55);
      sub_10001903C((uint64_t)&v54);
      unint64_t v36 = ClientIdentity.description.getter();
      unint64_t v38 = v37;
      sub_100019068((uint64_t)&v55);
      sub_100019068((uint64_t)&v54);
      uint64_t v53 = sub_1000036B0(v36, v38, (uint64_t *)&v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100019068((uint64_t)&v55);
      sub_100019068((uint64_t)&v54);
      sub_100019068((uint64_t)&v55);
      sub_100019068((uint64_t)&v54);
      *(_WORD *)(v32 + 22) = 2082;
      uint64_t v53 = v8;
      swift_errorRetain();
      sub_100003C68(&qword_100076FE0);
      uint64_t v39 = String.init<A>(describing:)();
      uint64_t v53 = sub_1000036B0(v39, v40, (uint64_t *)&v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v41 = v44;
      _os_log_impl((void *)&_mh_execute_header, v44, (os_log_type_t)v45, "Failed to detokenize set element %{public}s for %{public}s: %{public}s", (uint8_t *)v32, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v51, v15);
      sub_100019068((uint64_t)&v55);
      sub_100019068((uint64_t)&v54);
      sub_100019068((uint64_t)&v55);
      sub_100019068((uint64_t)&v54);
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v52, v47);
    if (*v48) {
      return swift_errorRelease();
    }
    else {
      uint64_t *v48 = v8;
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v26, v15);
    v45(v24, v21);
    uint64_t v42 = *(void (**)(char *, uint64_t))(v16 + 8);
    v42(v24, v15);
    return ((uint64_t (*)(char *, uint64_t))v42)(v26, v15);
  }
  return result;
}

uint64_t sub_100016260(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v28 = a1;
  uint64_t v7 = sub_100003C68(&qword_100076DD8);
  __chkstk_darwin(v7);
  uint64_t v29 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Application();
  uint64_t v27 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v26 - v13;
  uint64_t v15 = a2;
  uint64_t result = sub_100013100(a4, (uint64_t)&v26 - v13);
  if (!v4)
  {
    uint64_t v17 = v27;
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
    v18(v12, v14, v9);
    uint64_t v19 = (void (*)(char *, uint64_t, uint64_t))v18;
    uint64_t v20 = *(int *)(v7 + 48);
    uint64_t v21 = v29;
    v19(v29, v15, v9);
    char v22 = *(unsigned char *)(v15 + v20);
    v21[v20] = v22;
    uint64_t v23 = v28;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *v23;
    *uint64_t v23 = 0x8000000000000000;
    sub_10001E158(v22, (uint64_t)v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v23 = v30;
    swift_bridgeObjectRelease();
    uint64_t v25 = *(void (**)(char *, uint64_t))(v17 + 8);
    v25(v12, v9);
    v25(v14, v9);
    return ((uint64_t (*)(char *, uint64_t))v25)(v21, v9);
  }
  return result;
}

uint64_t sub_10001649C(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100019C4C(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10001EA3C();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_100016FD0(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100016594(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100019BD4(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10001EE84();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 32 * v6);
  sub_100017460(v6, v9);
  uint64_t *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1000166A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100019D64(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10001F05C();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for WebDomain();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for ScreenTimeSettings.ShieldPolicy();
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a2, v12 + *(void *)(v20 + 72) * v6, v13);
    sub_100017640(v6, v9, (uint64_t (*)(void))&type metadata accessor for WebDomain, &qword_100076DA8, (void (*)(uint64_t))&type metadata accessor for WebDomain, (uint64_t)&protocol conformance descriptor for WebDomain);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for ScreenTimeSettings.ShieldPolicy();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_1000168BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100019E38(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10001F07C();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for Application();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for ScreenTimeSettings.ShieldPolicy();
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a2, v12 + *(void *)(v20 + 72) * v6, v13);
    sub_100017640(v6, v9, (uint64_t (*)(void))&type metadata accessor for Application, (unint64_t *)&unk_100077160, (void (*)(uint64_t))&type metadata accessor for Application, (uint64_t)&protocol conformance descriptor for Application);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for ScreenTimeSettings.ShieldPolicy();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_100016AD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100019F0C(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10001F09C();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for ActivityCategory();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for ScreenTimeSettings.ShieldPolicy();
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a2, v12 + *(void *)(v20 + 72) * v6, v13);
    sub_100017640(v6, v9, (uint64_t (*)(void))&type metadata accessor for ActivityCategory, (unint64_t *)&unk_100077190, (void (*)(uint64_t))&type metadata accessor for ActivityCategory, (uint64_t)&protocol conformance descriptor for ActivityCategory);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for ScreenTimeSettings.ShieldPolicy();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_100016CE4(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((v4 & 0xC000000000000001) == 0)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    a1 = sub_10001A024(a1);
    char v13 = v12;
    swift_bridgeObjectRelease();
    if (v13)
    {
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      Swift::Int v9 = *v2;
      Swift::Int v17 = *v2;
      *uint64_t v2 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_10001F8F4();
        Swift::Int v9 = v17;
      }
      goto LABEL_11;
    }
    return 0;
  }
  if (v4 < 0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  id v6 = (id)a1;
  uint64_t v7 = __CocoaDictionary.lookup(_:)();

  if (!v7)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_unknownObjectRelease();
  uint64_t v8 = __CocoaDictionary.count.getter();
  Swift::Int v9 = sub_100036A50(v5, v8);
  swift_retain();
  a1 = sub_10001A024((uint64_t)v6);
  char v11 = v10;
  swift_release();
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_11:

  uint64_t v15 = *(void *)(*(void *)(v9 + 56) + 8 * a1);
  sub_100017B30(a1, v9);
  *uint64_t v2 = v9;
  swift_bridgeObjectRelease();
  return v15;
}

unint64_t sub_100016E34(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        char v10 = (_DWORD *)(v9 + 4 * v6);
        uint64_t result = static Hasher._hash(seed:bytes:count:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (_DWORD *)(v9 + 4 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *uint64_t v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            uint64_t v16 = (void *)(v15 + 8 * v3);
            Swift::Int v17 = (void *)(v15 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              *uint64_t v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  uint64_t *v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100016FD0(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v31 = (result + 1) & v11;
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v33 = v5 + 16;
      char v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        sub_1000192EC(&qword_100076E10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v13)(v8, v4);
        unint64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v22 = *(void *)(a2 + 56);
            uint64_t v23 = (void *)(v22 + 8 * a1);
            uint64_t v24 = (void *)(v22 + 8 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              *uint64_t v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1 << a1) - 1;
  }
  *uint64_t v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000172C8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        unint64_t v10 = (void *)(v9 + 8 * v6);
        unint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *uint64_t v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            int64_t v16 = (_OWORD *)(v15 + 16 * v3);
            uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              *int64_t v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  uint64_t *v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100017460(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          char v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *char v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          int64_t v16 = (_OWORD *)(v15 + 32 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (32 * v3 != 32 * v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *int64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  uint64_t *v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100017640(int64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v47 = a5;
  uint64_t v48 = a6;
  uint64_t v46 = a4;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  unint64_t result = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v42 - v11;
  uint64_t v13 = a2 + 64;
  uint64_t v14 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v15 = (a1 + 1) & ~v14;
  if (((1 << v15) & *(void *)(a2 + 64 + 8 * (v15 >> 6))) != 0)
  {
    uint64_t v16 = ~v14;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v13 + 8 * (v15 >> 6)) & (1 << v15)) != 0)
    {
      uint64_t v17 = (result + 1) & v16;
      os_log_t v44 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
      uint64_t v45 = v9 + 16;
      uint64_t v49 = *(void *)(v9 + 72);
      uint64_t v43 = (uint64_t (**)(char *, uint64_t))(v9 + 8);
      do
      {
        uint64_t v18 = v13;
        int64_t v19 = v49 * v15;
        v44(v12, *(void *)(a2 + 48) + v49 * v15, v8);
        unint64_t v20 = v17;
        uint64_t v21 = v16;
        sub_1000192EC(v46, v47);
        uint64_t v22 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v43)(v12, v8);
        uint64_t v23 = v22 & v21;
        uint64_t v16 = v21;
        uint64_t v17 = v20;
        if (a1 >= (uint64_t)v20)
        {
          if (v23 < v20 || a1 < v23) {
            goto LABEL_5;
          }
        }
        else if (v23 < v20 && a1 < v23)
        {
          goto LABEL_5;
        }
        uint64_t v26 = *(void *)(a2 + 48);
        unint64_t v27 = v26 + v49 * a1;
        unint64_t v28 = v26 + v19 + v49;
        if (v49 * a1 < v19 || v27 >= v28)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v49 * a1 != v19)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        uint64_t v30 = *(void *)(a2 + 56);
        uint64_t v31 = *(void *)(*(void *)(type metadata accessor for ScreenTimeSettings.ShieldPolicy() - 8) + 72);
        int64_t v32 = v31 * a1;
        unint64_t result = v30 + v31 * a1;
        int64_t v33 = v31 * v15;
        unint64_t v34 = v30 + v31 * v15 + v31;
        if (v32 >= v33 && result < v34)
        {
          a1 = v15;
          uint64_t v13 = v18;
          if (v32 != v33)
          {
            unint64_t result = swift_arrayInitWithTakeBackToFront();
            a1 = v15;
          }
          goto LABEL_6;
        }
        unint64_t result = swift_arrayInitWithTakeFrontToBack();
        a1 = v15;
LABEL_5:
        uint64_t v13 = v18;
LABEL_6:
        unint64_t v15 = (v15 + 1) & v16;
      }
      while (((*(void *)(v13 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) != 0);
    }
    unint64_t v36 = (uint64_t *)(v13 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v37 = *v36;
    uint64_t v38 = (-1 << a1) - 1;
  }
  else
  {
    unint64_t v36 = (uint64_t *)(v13 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v38 = *v36;
    uint64_t v37 = (-1 << a1) - 1;
  }
  *unint64_t v36 = v38 & v37;
  uint64_t v39 = *(void *)(a2 + 16);
  BOOL v40 = __OFSUB__(v39, 1);
  uint64_t v41 = v39 - 1;
  if (v40)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v41;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100017958(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          unint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            void *v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_100017B30(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v3);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              *uint64_t v17 = *v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (void *)(v19 + 8 * v3);
            BOOL v21 = (void *)(v19 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              *uint64_t v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << a1) - 1;
  }
  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_100017CE4(unint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      uint64_t v27 = v2;
      uint64_t v28 = v4;
      do
      {
        uint64_t v9 = 40 * v6;
        Swift::UInt8 v10 = *(unsigned char *)(*(void *)(v2 + 48) + 40 * v6 + 32);
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        Hasher._combine(_:)(v10);
        Swift::Int v11 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        unint64_t result = swift_bridgeObjectRelease();
        Swift::Int v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8)
          {
            uint64_t v2 = v27;
            uint64_t v4 = v28;
            goto LABEL_5;
          }
          uint64_t v2 = v27;
          if (v3 >= v12) {
            goto LABEL_12;
          }
        }
        else
        {
          uint64_t v2 = v27;
          if (v12 >= v8 || v3 >= v12)
          {
LABEL_12:
            uint64_t v13 = *(void *)(v2 + 48);
            unint64_t v14 = v13 + 40 * v3;
            unint64_t v15 = (long long *)(v13 + v9);
            if (40 * v3 < v9 || v14 >= (unint64_t)v15 + 40 || v3 != v6)
            {
              long long v16 = *v15;
              long long v17 = v15[1];
              *(void *)(v14 + 32) = *((void *)v15 + 4);
              *(_OWORD *)unint64_t v14 = v16;
              *(_OWORD *)(v14 + 16) = v17;
            }
            uint64_t v18 = *(void *)(v2 + 56);
            uint64_t v19 = (void *)(v18 + 8 * v3);
            uint64_t v20 = (void *)(v18 + 8 * v6);
            uint64_t v4 = v28;
            if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 1))
            {
              *uint64_t v19 = *v20;
              int64_t v3 = v6;
            }
            goto LABEL_5;
          }
        }
        uint64_t v4 = v28;
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    BOOL v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1 << v3) - 1;
  }
  else
  {
    BOOL v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1 << result) - 1;
  }
  uint64_t *v21 = v23 & v22;
  uint64_t v24 = *(void *)(v2 + 16);
  BOOL v25 = __OFSUB__(v24, 1);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = v26;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

char *sub_100017F54(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = a5;
  uint64_t v100 = a3;
  uint64_t v101 = a4;
  uint64_t v99 = a2;
  uint64_t v104 = a1;
  uint64_t v98 = type metadata accessor for WebContentSettings.FilterPolicy();
  uint64_t v85 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  int64_t v83 = (uint64_t *)((char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = sub_100003C68(&qword_100076D28);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v97 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v84 = (char *)&v81 - v9;
  uint64_t v96 = type metadata accessor for UserSafetySettings.ScanningPolicy();
  uint64_t v88 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  uint64_t v86 = (uint64_t *)((char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_100003C68(&qword_100076D30);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v87 = (uint64_t)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v95 = (char *)&v81 - v14;
  uint64_t v15 = sub_100003C68(&qword_100076D38);
  uint64_t v91 = *(void *)(v15 - 8);
  uint64_t v92 = v15;
  __chkstk_darwin(v15);
  int64_t v89 = (uint64_t *)((char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = sub_100003C68(&qword_100076D40);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v90 = (uint64_t)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v94 = (char *)&v81 - v20;
  uint64_t v21 = sub_100003C68(&qword_100076D48);
  uint64_t v93 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v23 = (uint64_t *)((char *)&v81 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v24 = sub_100003C68(&qword_100076D50);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  uint64_t v27 = (char *)&v81 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  Class isa = (char *)&v81 - v28;
  uint64_t v30 = type metadata accessor for Application();
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  int64_t v33 = (char *)&v81 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_100003C68(&qword_100076D58);
  uint64_t v35 = __chkstk_darwin(v34 - 8);
  uint64_t v37 = (char *)&v81 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  uint64_t v39 = (char *)&v81 - v38;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (swift_dynamicCastMetatype())
  {
    static Application.value(from:)();
    sub_100019288((uint64_t)v39, (uint64_t)v37, &qword_100076D58);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v37, 1, v30) == 1)
    {
      BOOL v40 = &qword_100076D58;
      sub_100006E84((uint64_t)v39, &qword_100076D58);
      uint64_t v41 = (uint64_t)v37;
LABEL_7:
      sub_100006E84(v41, v40);
      return 0;
    }
    uint64_t v50 = v103;
    sub_100013100(v100, (uint64_t)v33);
    if (v50)
    {
      sub_100006E84((uint64_t)v39, &qword_100076D58);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v37, v30);
      return isa;
    }
    uint64_t v58 = *(void (**)(char *, uint64_t))(v31 + 8);
    v58(v37, v30);
    Class isa = (char *)Application.persistableValue()().isa;
    v58(v33, v30);
    unint64_t v59 = &qword_100076D58;
LABEL_17:
    sub_100006E84((uint64_t)v39, v59);
    return isa;
  }
  uint64_t v82 = v23;
  uint64_t v42 = v93;
  uint64_t v43 = (uint64_t)v94;
  uint64_t v39 = v95;
  uint64_t v44 = v96;
  uint64_t v101 = v30;
  uint64_t v46 = (uint64_t)v97;
  uint64_t v45 = v98;
  sub_100003C68(&qword_100076D60);
  if (!swift_dynamicCastMetatype())
  {
    sub_100003C68(&qword_100076D68);
    if (swift_dynamicCastMetatype())
    {
      type metadata accessor for WebDomain();
      sub_1000192EC(&qword_100076DA8, (void (*)(uint64_t))&type metadata accessor for WebDomain);
      uint64_t v39 = (char *)v43;
      static ShieldSettings.EffectiveActivityCategoryPolicy<>.value(from:)();
      uint64_t v51 = v90;
      sub_100019288(v43, v90, &qword_100076D40);
      uint64_t v52 = v91;
      uint64_t v44 = v92;
      int v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v91 + 48))(v51, 1, v92);
      uint64_t v54 = v103;
      if (v53 == 1)
      {
        long long v55 = &qword_100076D40;
        goto LABEL_27;
      }
      uint64_t v62 = v89;
      sub_1000133F4(v99, v100, &qword_100076D38, (void (*)(uint64_t *, char *))sub_1000191CC, (uint64_t (*)(void))&type metadata accessor for WebDomain, v89);
      if (!v54)
      {
        uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
        v68(v51, v44);
        Class isa = (char *)ShieldSettings.EffectiveActivityCategoryPolicy<>.persistableValue()();
        v68((uint64_t)v62, v44);
        unint64_t v59 = &qword_100076D40;
        goto LABEL_17;
      }
      os_log_t v63 = &qword_100076D40;
LABEL_30:
      sub_100006E84((uint64_t)v39, v63);
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v44);
      return isa;
    }
    uint64_t v60 = swift_dynamicCastMetatype();
    uint64_t v61 = v103;
    if (v60)
    {
      static UserSafetySettings.ScanningPolicy.value(from:)();
      uint64_t v51 = v87;
      sub_100019288((uint64_t)v39, v87, &qword_100076D30);
      uint64_t v52 = v88;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v51, 1, v44) == 1)
      {
        long long v55 = &qword_100076D30;
        goto LABEL_27;
      }
      char v66 = v86;
      sub_1000136E8(v99, v100, v86);
      if (!v61)
      {
        v71 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
        v71(v51, v44);
        Class isa = (char *)UserSafetySettings.ScanningPolicy.persistableValue()().isa;
        v71((uint64_t)v66, v44);
        unint64_t v59 = &qword_100076D30;
        goto LABEL_17;
      }
      os_log_t v63 = &qword_100076D30;
      goto LABEL_30;
    }
    if (swift_dynamicCastMetatype())
    {
      uint64_t v39 = v84;
      static WebContentSettings.FilterPolicy.value(from:)();
      uint64_t v51 = v46;
      sub_100019288((uint64_t)v39, v46, &qword_100076D28);
      uint64_t v65 = v85;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48))(v46, 1, v45) != 1)
      {
        uint64_t v70 = v83;
        sub_1000139C0(v99, v100, v83);
        if (v61)
        {
          sub_100006E84((uint64_t)v39, &qword_100076D28);
          (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v46, v45);
        }
        else
        {
          uint64_t v72 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
          v72(v46, v45);
          Class isa = (char *)WebContentSettings.FilterPolicy.persistableValue()().isa;
          v72((uint64_t)v70, v45);
          sub_100006E84((uint64_t)v39, &qword_100076D28);
        }
        return isa;
      }
      long long v55 = &qword_100076D28;
LABEL_27:
      sub_100006E84((uint64_t)v39, v55);
      sub_100006E84(v51, v55);
      return 0;
    }
    sub_100003C68(&qword_100076D70);
    if (swift_dynamicCastMetatype() || (sub_100003C68(&qword_100076D78), swift_dynamicCastMetatype()))
    {
      sub_1000192EC((unint64_t *)&unk_100077160, (void (*)(uint64_t))&type metadata accessor for Application);
      uint64_t v69 = static Set<>.value(from:)();
      if (v69)
      {
        sub_100013DB4(v99, v100, v69, (void (*)(uint64_t *, char *))sub_100019170, (uint64_t (*)(void))&type metadata accessor for Application);
        swift_bridgeObjectRelease();
        if (!v61)
        {
          Class isa = (char *)Set<>.persistableValue()();
          swift_bridgeObjectRelease();
        }
        return isa;
      }
      return 0;
    }
    sub_100003C68(&qword_100076D80);
    if (swift_dynamicCastMetatype() || (sub_100003C68(&qword_100076D88), swift_dynamicCastMetatype()))
    {
      type metadata accessor for WebDomain();
      sub_1000192EC(&qword_100076DA8, (void (*)(uint64_t))&type metadata accessor for WebDomain);
      uint64_t v73 = static Set<>.value(from:)();
      if (!v73) {
        return 0;
      }
      sub_100013DB4(v99, v100, v73, (void (*)(uint64_t *, char *))sub_1000191CC, (uint64_t (*)(void))&type metadata accessor for WebDomain);
      swift_bridgeObjectRelease();
      if (v61) {
        return isa;
      }
      uint64_t v74 = Set<>.persistableValue()();
LABEL_47:
      Class isa = (char *)v74;
      swift_bridgeObjectRelease();
      return isa;
    }
    sub_100003C68(&qword_100076D90);
    if (swift_dynamicCastMetatype())
    {
      type metadata accessor for ActivityCategory();
      type metadata accessor for ScreenTimeSettings.ShieldPolicy();
      sub_1000192EC((unint64_t *)&unk_100077190, (void (*)(uint64_t))&type metadata accessor for ActivityCategory);
      uint64_t v75 = static Dictionary<>.value(from:)();
      if (!v75) {
        return 0;
      }
      sub_100013D14(v99, v100, v75, (void (*)(uint64_t *, char *))sub_100019228, &qword_100076DF0, (uint64_t (*)(void))&type metadata accessor for ActivityCategory);
      swift_bridgeObjectRelease();
      if (v61) {
        return isa;
      }
    }
    else
    {
      sub_100003C68(&qword_100076D98);
      if (swift_dynamicCastMetatype())
      {
        type metadata accessor for ScreenTimeSettings.ShieldPolicy();
        sub_1000192EC((unint64_t *)&unk_100077160, (void (*)(uint64_t))&type metadata accessor for Application);
        uint64_t v76 = static Dictionary<>.value(from:)();
        if (!v76) {
          return 0;
        }
        uint64_t v77 = v103;
        sub_100013D14(v99, v100, v76, (void (*)(uint64_t *, char *))sub_100019248, &qword_100076E00, (uint64_t (*)(void))&type metadata accessor for Application);
        swift_bridgeObjectRelease();
        if (v77) {
          return isa;
        }
        uint64_t v74 = Dictionary<>.persistableValue()();
        goto LABEL_47;
      }
      sub_100003C68(&qword_100076DA0);
      if (!swift_dynamicCastMetatype())
      {
        Class isa = v104;
        long long v80 = v104;
        return isa;
      }
      type metadata accessor for WebDomain();
      type metadata accessor for ScreenTimeSettings.ShieldPolicy();
      sub_1000192EC(&qword_100076DA8, (void (*)(uint64_t))&type metadata accessor for WebDomain);
      uint64_t v78 = static Dictionary<>.value(from:)();
      if (!v78) {
        return 0;
      }
      uint64_t v79 = v103;
      sub_100013D14(v99, v100, v78, (void (*)(uint64_t *, char *))sub_100019268, &qword_100076E08, (uint64_t (*)(void))&type metadata accessor for WebDomain);
      swift_bridgeObjectRelease();
      if (v79) {
        return isa;
      }
    }
    Class isa = (char *)Dictionary<>.persistableValue()();
    swift_bridgeObjectRelease();
    return isa;
  }
  sub_1000192EC((unint64_t *)&unk_100077160, (void (*)(uint64_t))&type metadata accessor for Application);
  uint64_t v47 = (uint64_t)isa;
  static ShieldSettings.EffectiveActivityCategoryPolicy<>.value(from:)();
  uint64_t v48 = (uint64_t)isa;
  Class isa = v27;
  sub_100019288(v48, (uint64_t)v27, &qword_100076D50);
  uint64_t v49 = v21;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v27, 1, v21) == 1)
  {
    BOOL v40 = &qword_100076D50;
    sub_100006E84(v47, &qword_100076D50);
    uint64_t v41 = (uint64_t)v27;
    goto LABEL_7;
  }
  uint64_t v56 = v82;
  uint64_t v57 = v103;
  sub_1000133F4(v99, v100, &qword_100076D48, (void (*)(uint64_t *, char *))sub_100019170, (uint64_t (*)(void))&type metadata accessor for Application, v82);
  if (v57)
  {
    sub_100006E84(v47, &qword_100076D50);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v27, v49);
  }
  else
  {
    uint64_t v64 = *(void (**)(char *, uint64_t))(v42 + 8);
    v64(v27, v49);
    Class isa = (char *)ShieldSettings.EffectiveActivityCategoryPolicy<>.persistableValue()();
    v64((char *)v56, v49);
    sub_100006E84(v47, &qword_100076D50);
  }
  return isa;
}

uint64_t sub_10001903C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100019068(uint64_t a1)
{
  return a1;
}

uint64_t sub_100019094(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000190F8(NSObject *a1, uint64_t a2)
{
  return sub_100015CF0(a1, a2, *(long long **)(v2 + 16), *(void *)(v2 + 24), *(uint64_t **)(v2 + 32), (uint64_t (*)(void))&type metadata accessor for ActivityCategory, (void (*)(long long *, uint64_t))sub_100015708, (void (*)(char *, char *))sub_100028770);
}

uint64_t sub_100019154(uint64_t *a1, uint64_t a2)
{
  return sub_100016260(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100019170(NSObject *a1, uint64_t a2)
{
  return sub_100015CF0(a1, a2, *(long long **)(v2 + 16), *(void *)(v2 + 24), *(uint64_t **)(v2 + 32), (uint64_t (*)(void))&type metadata accessor for Application, (void (*)(long long *, uint64_t))sub_100013100, (void (*)(char *, char *))sub_100028DB8);
}

uint64_t sub_1000191CC(NSObject *a1, uint64_t a2)
{
  return sub_100015CF0(a1, a2, *(long long **)(v2 + 16), *(void *)(v2 + 24), *(uint64_t **)(v2 + 32), (uint64_t (*)(void))&type metadata accessor for WebDomain, (void (*)(long long *, uint64_t))sub_1000159FC, (void (*)(char *, char *))sub_100028A94);
}

uint64_t sub_100019228(uint64_t a1, uint64_t a2)
{
  return sub_100014ECC(a1, a2, *(long long **)(v2 + 16), *(void *)(v2 + 24), *(uint64_t **)(v2 + 32));
}

uint64_t sub_100019248(uint64_t a1, uint64_t a2)
{
  return sub_100014690(a1, a2, *(long long **)(v2 + 16), *(void *)(v2 + 24), *(uint64_t **)(v2 + 32));
}

uint64_t sub_100019268(uint64_t a1, uint64_t a2)
{
  return sub_100013E54(a1, a2, *(long long **)(v2 + 16), *(void *)(v2 + 24), *(uint64_t **)(v2 + 32));
}

uint64_t sub_100019288(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100003C68(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000192EC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Dictionary<>.filterSensitiveInformation()(uint64_t a1)
{
  uint64_t v40 = type metadata accessor for Logger();
  __chkstk_darwin(v40);
  sub_1000081AC();
  uint64_t v35 = Dictionary.init(minimumCapacity:)();
  uint64_t v38 = a1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v39 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v5 = 0;
  uint64_t v37 = a1;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  for (unint64_t i = v6 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v9)) + (v5 << 6))
  {
    uint64_t v11 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    uint64_t v14 = *(void **)(*(void *)(a1 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    id v15 = v14;
    static SettingMetadataDirectory.metadata(for:)();
    sub_10000DE5C(&v41, (uint64_t)v42);
    sub_100006DCC(v42, v42[3]);
    id v34 = sub_100019884((uint64_t)v15);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v41 = v35;
    unint64_t v17 = sub_100019BD4(v13, v12);
    unint64_t v19 = v17;
    uint64_t v20 = *(void *)(v35 + 16);
    BOOL v21 = (v18 & 1) == 0;
    uint64_t v22 = v20 + v21;
    if (__OFADD__(v20, v21)) {
      break;
    }
    if (*(void *)(v35 + 24) >= v22)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        char v32 = v18;
        sub_10001F468();
        char v18 = v32;
      }
    }
    else
    {
      char v36 = v18;
      sub_10001C448(v22, isUniquelyReferenced_nonNull_native);
      unint64_t v23 = sub_100019BD4(v13, v12);
      int v25 = v24 & 1;
      char v18 = v36;
      if ((v36 & 1) != v25) {
        goto LABEL_38;
      }
      unint64_t v19 = v23;
    }
    uint64_t v26 = (void *)v41;
    uint64_t v35 = v41;
    if (v18)
    {
      uint64_t v27 = *(void *)(v41 + 56);

      *(void *)(v27 + 8 * v19) = v34;
      uint64_t v28 = v34;
    }
    else
    {
      *(void *)(v41 + 8 * (v19 >> 6) + 64) |= 1 << v19;
      BOOL v29 = (uint64_t *)(v26[6] + 16 * v19);
      uint64_t *v29 = v13;
      v29[1] = v12;
      uint64_t v28 = v34;
      *(void *)(v26[7] + 8 * v19) = v34;
      uint64_t v30 = v26[2];
      BOOL v8 = __OFADD__(v30, 1);
      uint64_t v31 = v30 + 1;
      if (v8) {
        goto LABEL_37;
      }
      void v26[2] = v31;
      swift_bridgeObjectRetain();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v42);
    a1 = v37;
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v8 = __OFADD__(v5++, 1);
    if (v8)
    {
      __break(1u);
LABEL_35:
      __break(1u);
      break;
    }
    if (v5 >= v39) {
      goto LABEL_33;
    }
    unint64_t v9 = *(void *)(v38 + 8 * v5);
    if (!v9)
    {
      int64_t v10 = v5 + 1;
      if (v5 + 1 >= v39) {
        goto LABEL_33;
      }
      unint64_t v9 = *(void *)(v38 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v5 + 2;
        if (v5 + 2 >= v39) {
          goto LABEL_33;
        }
        unint64_t v9 = *(void *)(v38 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v5 + 3;
          if (v5 + 3 >= v39)
          {
LABEL_33:
            swift_release();
            return v35;
          }
          unint64_t v9 = *(void *)(v38 + 8 * v10);
          if (!v9)
          {
            while (1)
            {
              int64_t v5 = v10 + 1;
              if (__OFADD__(v10, 1)) {
                goto LABEL_35;
              }
              if (v5 >= v39) {
                goto LABEL_33;
              }
              unint64_t v9 = *(void *)(v38 + 8 * v5);
              ++v10;
              if (v9) {
                goto LABEL_15;
              }
            }
          }
        }
      }
      int64_t v5 = v10;
    }
LABEL_15:
    unint64_t v4 = (v9 - 1) & v9;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id sub_100019884(uint64_t a1)
{
  v14[0] = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = __chkstk_darwin(AssociatedTypeWitness);
  int64_t v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)v14 - v6;
  if (dispatch thunk of SettingMetadataProtocol.isPrivacySensitive.getter())
  {
    v17[5] = 0x657463616465523CLL;
    v17[6] = 0xEA00000000003E64;
    uint64_t v8 = swift_checkMetadataState();
    if (!swift_dynamicCastMetatype())
    {
      if (swift_conformsToProtocol2()) {
        uint64_t v12 = v8;
      }
      else {
        uint64_t v12 = 0;
      }
      if (v12)
      {
        dispatch thunk of static Persistable.value(from:)();
        (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v7, AssociatedTypeWitness);
        sub_100003C68(&qword_100076E88);
        if (swift_dynamicCast())
        {
          sub_10000DE5C((long long *)&v15._countAndFlagsBits, (uint64_t)v17);
          v15._countAndFlagsBits = 0x203A746E756F6320;
          v15._object = (void *)0xE800000000000000;
          sub_100006DCC(v17, v17[3]);
          v14[1] = dispatch thunk of Collection.count.getter();
          v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v13);
          swift_bridgeObjectRelease();
          String.append(_:)(v15);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v2 + 8))(v7, AssociatedTypeWitness);
          _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v17);
        }
        else
        {
          uint64_t v16 = 0;
          memset(&v15, 0, 32);
          (*(void (**)(char *, uint64_t))(v2 + 8))(v7, AssociatedTypeWitness);
          sub_100006E84((uint64_t)&v15, &qword_100076E90);
        }
      }
    }
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    return v9;
  }
  else
  {
    uint64_t v11 = (void *)v14[0];
    return v11;
  }
}

unint64_t sub_100019BD4(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_10001A120(a1, a2, v4);
}

unint64_t sub_100019C4C(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_10001F8AC(&qword_100076E10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10001A2A0(a1, v2, (uint64_t (*)(void))&type metadata accessor for UUID, &qword_100076E18, (void (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_100019D20(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_10001A204(a1, v2);
}

unint64_t sub_100019D64(uint64_t a1)
{
  type metadata accessor for WebDomain();
  sub_10001F8AC(&qword_100076DA8, (void (*)(uint64_t))&type metadata accessor for WebDomain);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10001A2A0(a1, v2, (uint64_t (*)(void))&type metadata accessor for WebDomain, &qword_100077180, (void (*)(uint64_t))&type metadata accessor for WebDomain, (uint64_t)&protocol conformance descriptor for WebDomain);
}

unint64_t sub_100019E38(uint64_t a1)
{
  type metadata accessor for Application();
  sub_10001F8AC((unint64_t *)&unk_100077160, (void (*)(uint64_t))&type metadata accessor for Application);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10001A2A0(a1, v2, (uint64_t (*)(void))&type metadata accessor for Application, &qword_100076E30, (void (*)(uint64_t))&type metadata accessor for Application, (uint64_t)&protocol conformance descriptor for Application);
}

unint64_t sub_100019F0C(uint64_t a1)
{
  type metadata accessor for ActivityCategory();
  sub_10001F8AC((unint64_t *)&unk_100077190, (void (*)(uint64_t))&type metadata accessor for ActivityCategory);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10001A2A0(a1, v2, (uint64_t (*)(void))&type metadata accessor for ActivityCategory, &qword_100076E40, (void (*)(uint64_t))&type metadata accessor for ActivityCategory, (uint64_t)&protocol conformance descriptor for ActivityCategory);
}

unint64_t sub_100019FE0(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_10001A440(a1, v4);
}

unint64_t sub_10001A024(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_10001A508(a1, v4);
}

unint64_t sub_10001A068(uint64_t a1)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(unsigned char *)(a1 + 32) & 1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_10001A614((uint64_t *)a1, v2);
}

unint64_t sub_10001A120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    int64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        Swift::String v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10001A204(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_10001A2A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  char v24 = a5;
  uint64_t v25 = a6;
  unint64_t v23 = a4;
  v21[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  BOOL v11 = (char *)v21 - v10;
  uint64_t v22 = v6;
  uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v13 = a2 & ~v12;
  v21[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v14 = ~v12;
    unint64_t v17 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v16 = v9 + 16;
    Swift::String v15 = v17;
    uint64_t v18 = *(void *)(v16 + 56);
    do
    {
      v15(v11, *(void *)(v22 + 48) + v18 * v13, v8);
      sub_10001F8AC(v23, v24);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v16 - 8))(v11, v8);
      if (v19) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
    }
    while (((*(void *)(v21[0] + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t sub_10001A440(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_10001FE2C(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_10001FE88((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10001A508(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_1000081AC();
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_10001A614(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v7 = ~v4;
    uint64_t v8 = *(void *)(v2 + 48);
    uint64_t v9 = *a1;
    uint64_t v10 = a1[1];
    do
    {
      uint64_t v11 = v8 + 40 * v5;
      uint64_t v12 = *(void *)(v11 + 16);
      uint64_t v13 = *(void *)(v11 + 24);
      int v14 = *(unsigned __int8 *)(v11 + 32);
      BOOL v15 = *(void *)v11 == v9 && *(void *)(v11 + 8) == v10;
      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        BOOL v16 = v12 == a1[2] && v13 == a1[3];
        if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)()) && v14 == (a1[4] & 1)) {
          break;
        }
      }
      unint64_t v5 = (v5 + 1) & v7;
    }
    while (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

uint64_t sub_10001A724(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003C68(&qword_100076E98);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001A874(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100003C68(&qword_100076E78);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    int64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v29 = -1 << v10;
    uint64_t v30 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v31 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v20 >= v31) {
          goto LABEL_33;
        }
        unint64_t v21 = v9[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v21 = v9[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if (a2)
              {
                if (v30 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v31);
                }
                else {
                  *int64_t v9 = v29;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v21 = v9[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v31) {
                  goto LABEL_33;
                }
                unint64_t v21 = v9[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v12 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      int v27 = *(_DWORD *)(*(void *)(v5 + 48) + 4 * v19);
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      uint64_t result = static Hasher._hash(seed:bytes:count:)();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v25 = v16 == v24;
          if (v16 == v24) {
            unint64_t v16 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        unint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_DWORD *)(*(void *)(v7 + 48) + 4 * v17) = v27;
      *(void *)(*(void *)(v7 + 56) + 8 * v17) = v28;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10001AB28(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100003C68(&qword_100076E20);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  uint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  unint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    BOOL v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_retain();
    }
    sub_10001F8AC(&qword_100076E10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  BOOL v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *BOOL v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v12;
  return result;
}

uint64_t sub_10001AF4C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100003C68(&qword_100076EA0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    char v34 = (uint64_t *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v9;
    uint64_t v32 = v9;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v33) {
          goto LABEL_33;
        }
        unint64_t v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v21 = v34[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero(v34, 8 * v33);
                }
                else {
                  *char v34 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v21 = v34[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      uint64_t v28 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v19);
      uint64_t v30 = *v28;
      uint64_t v29 = v28[1];
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      unint64_t v17 = (void *)(*(void *)(v7 + 56) + 16 * v16);
      *unint64_t v17 = v30;
      v17[1] = v29;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10001B204(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100003C68(&qword_100076E70);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v40 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v38 = v2;
  int64_t v39 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v39) {
      break;
    }
    char v23 = v40;
    unint64_t v24 = v40[v22];
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v39) {
        goto LABEL_33;
      }
      unint64_t v24 = v40[v13];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v38;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v39) {
              goto LABEL_33;
            }
            unint64_t v24 = v40[v13];
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(v5 + 56) + 32 * v21;
    uint64_t v34 = *(void *)v33;
    uint64_t v35 = *(void *)(v33 + 8);
    uint64_t v44 = *(void *)(v33 + 16);
    char v36 = *(unsigned char *)(v33 + 24);
    char v43 = *(unsigned char *)(v33 + 25);
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v32;
    v18[1] = v31;
    uint64_t v19 = *(void *)(v7 + 56) + 32 * v17;
    *(void *)uint64_t v19 = v34;
    *(void *)(v19 + 8) = v35;
    *(void *)(v19 + 16) = v44;
    *(unsigned char *)(v19 + 24) = v36;
    *(unsigned char *)(v19 + 25) = v43;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v38;
  char v23 = v40;
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v37 = 1 << *(unsigned char *)(v5 + 32);
  if (v37 >= 64) {
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v23 = -1 << v37;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10001B554(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v53 = type metadata accessor for ScreenTimeSettings.ShieldPolicy();
  uint64_t v5 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v52 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for WebDomain();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_100003C68(&qword_100076E50);
  int v50 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v44 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  char v42 = v2;
  int64_t v43 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v45 = v5 + 16;
  int v46 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v48 = v5;
  uint64_t v49 = v8;
  unint64_t v18 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v51 = (uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32);
  uint64_t v19 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v43) {
      break;
    }
    char v26 = v44;
    unint64_t v27 = v44[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v27 = v44[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v44[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v43) {
              goto LABEL_34;
            }
            unint64_t v27 = v44[v21];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v49 + 72);
    unint64_t v30 = *(void *)(v11 + 48) + v29 * v24;
    if (v50)
    {
      (*v18)(v10, v30, v7);
      uint64_t v31 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 32))(v52, v31 + v32 * v24, v53);
    }
    else
    {
      (*v46)(v10, v30, v7);
      uint64_t v33 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v52, v33 + v32 * v24, v53);
    }
    sub_10001F8AC(&qword_100076DA8, (void (*)(uint64_t))&type metadata accessor for WebDomain);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v34 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v18)((char *)(*(void *)(v13 + 48) + v29 * v22), (unint64_t)v10, v7);
    uint64_t result = (*v51)(*(void *)(v13 + 56) + v32 * v22, v52, v53);
    ++*(void *)(v13 + 16);
  }
  swift_release();
  uint64_t v3 = v42;
  char v26 = v44;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v11 + 32);
  if (v41 >= 64) {
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v26 = -1 << v41;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v13;
  return result;
}

uint64_t sub_10001BA50(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v53 = type metadata accessor for ScreenTimeSettings.ShieldPolicy();
  uint64_t v5 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v52 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Application();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_100003C68(&qword_100076E48);
  int v50 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v44 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  char v42 = v2;
  int64_t v43 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v45 = v5 + 16;
  int v46 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v48 = v5;
  uint64_t v49 = v8;
  unint64_t v18 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v51 = (uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32);
  uint64_t v19 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v43) {
      break;
    }
    char v26 = v44;
    unint64_t v27 = v44[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v27 = v44[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v44[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v43) {
              goto LABEL_34;
            }
            unint64_t v27 = v44[v21];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v49 + 72);
    unint64_t v30 = *(void *)(v11 + 48) + v29 * v24;
    if (v50)
    {
      (*v18)(v10, v30, v7);
      uint64_t v31 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 32))(v52, v31 + v32 * v24, v53);
    }
    else
    {
      (*v46)(v10, v30, v7);
      uint64_t v33 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v52, v33 + v32 * v24, v53);
    }
    sub_10001F8AC((unint64_t *)&unk_100077160, (void (*)(uint64_t))&type metadata accessor for Application);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v34 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v18)((char *)(*(void *)(v13 + 48) + v29 * v22), (unint64_t)v10, v7);
    uint64_t result = (*v51)(*(void *)(v13 + 56) + v32 * v22, v52, v53);
    ++*(void *)(v13 + 16);
  }
  swift_release();
  uint64_t v3 = v42;
  char v26 = v44;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v11 + 32);
  if (v41 >= 64) {
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v26 = -1 << v41;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v13;
  return result;
}

uint64_t sub_10001BF4C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v53 = type metadata accessor for ScreenTimeSettings.ShieldPolicy();
  uint64_t v5 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v52 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ActivityCategory();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_100003C68(&qword_100076E38);
  int v50 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v44 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  char v42 = v2;
  int64_t v43 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v45 = v5 + 16;
  int v46 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v48 = v5;
  uint64_t v49 = v8;
  unint64_t v18 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v51 = (uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32);
  uint64_t v19 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v43) {
      break;
    }
    char v26 = v44;
    unint64_t v27 = v44[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v27 = v44[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v44[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v43) {
              goto LABEL_34;
            }
            unint64_t v27 = v44[v21];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v49 + 72);
    unint64_t v30 = *(void *)(v11 + 48) + v29 * v24;
    if (v50)
    {
      (*v18)(v10, v30, v7);
      uint64_t v31 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 32))(v52, v31 + v32 * v24, v53);
    }
    else
    {
      (*v46)(v10, v30, v7);
      uint64_t v33 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v52, v33 + v32 * v24, v53);
    }
    sub_10001F8AC((unint64_t *)&unk_100077190, (void (*)(uint64_t))&type metadata accessor for ActivityCategory);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v34 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v18)((char *)(*(void *)(v13 + 48) + v29 * v22), (unint64_t)v10, v7);
    uint64_t result = (*v51)(*(void *)(v13 + 56) + v32 * v22, v52, v53);
    ++*(void *)(v13 + 16);
  }
  swift_release();
  uint64_t v3 = v42;
  char v26 = v44;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v11 + 32);
  if (v41 >= 64) {
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v26 = -1 << v41;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v13;
  return result;
}

uint64_t sub_10001C448(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100003C68(&qword_100076E80);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10001C758(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for Application();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100003C68(&qword_100076E28);
  int v42 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    uint64_t v37 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    BOOL v39 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v38 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v40 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    int64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    uint64_t v44 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        int64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v38) {
          goto LABEL_34;
        }
        unint64_t v23 = v39[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v38) {
            goto LABEL_34;
          }
          unint64_t v23 = v39[v18];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v37;
              if (v42)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v9 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v39 = -1 << v36;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v23 = v39[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v24;
          }
        }
LABEL_21:
        unint64_t v15 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      uint64_t v25 = *(void *)(v6 + 72);
      unint64_t v26 = *(void *)(v9 + 48) + v25 * v21;
      if (v42) {
        (*v43)(v8, v26, v44);
      }
      else {
        (*v40)(v8, v26, v44);
      }
      uint64_t v27 = v9;
      char v28 = *(unsigned char *)(*(void *)(v9 + 56) + v21);
      sub_10001F8AC((unint64_t *)&unk_100077160, (void (*)(uint64_t))&type metadata accessor for Application);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v43)(*(void *)(v11 + 48) + v25 * v19, v8, v44);
      *(unsigned char *)(*(void *)(v11 + 56) + v19) = v28;
      ++*(void *)(v11 + 16);
      uint64_t v9 = v27;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v11;
  return result;
}

uint64_t sub_10001CB7C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100003C68(&qword_100076E68);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    unint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    char v32 = *(void **)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      id v33 = v31;
      id v34 = v32;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  unint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10001CE50(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100003C68(&qword_100076E58);
  char v41 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    BOOL v39 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v38 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v40 = v5;
    while (1)
    {
      if (v10)
      {
        unint64_t v19 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v42 = v13;
        unint64_t v20 = v19 | (v13 << 6);
      }
      else
      {
        int64_t v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v21 >= v38) {
          goto LABEL_33;
        }
        unint64_t v22 = v39[v21];
        int64_t v23 = v13 + 1;
        if (!v22)
        {
          int64_t v23 = v13 + 2;
          if (v13 + 2 >= v38) {
            goto LABEL_33;
          }
          unint64_t v22 = v39[v23];
          if (!v22)
          {
            uint64_t v24 = v13 + 3;
            if (v13 + 3 >= v38)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v41)
              {
                uint64_t v37 = 1 << *(unsigned char *)(v5 + 32);
                if (v37 >= 64) {
                  bzero(v39, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v39 = -1 << v37;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v39[v24];
            if (!v22)
            {
              while (1)
              {
                int64_t v23 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v23 >= v38) {
                  goto LABEL_33;
                }
                unint64_t v22 = v39[v23];
                ++v24;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v23 = v13 + 3;
          }
        }
LABEL_30:
        unint64_t v10 = (v22 - 1) & v22;
        int64_t v42 = v23;
        unint64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
      }
      uint64_t v29 = *(void *)(v5 + 48) + 40 * v20;
      uint64_t v30 = *(void *)v29;
      uint64_t v31 = *(void *)(v29 + 8);
      uint64_t v33 = *(void *)(v29 + 16);
      uint64_t v32 = *(void *)(v29 + 24);
      Swift::UInt8 v34 = *(unsigned char *)(v29 + 32);
      uint64_t v35 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
      if ((v41 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v36 = v35;
      }
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v34);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = *(void *)(v7 + 48) + 40 * v17;
      *(void *)uint64_t v18 = v30;
      *(void *)(v18 + 8) = v31;
      *(void *)(v18 + 16) = v33;
      *(void *)(v18 + 24) = v32;
      *(unsigned char *)(v18 + 32) = v34;
      *(void *)(*(void *)(v7 + 56) + 8 * v17) = v35;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v40;
      int64_t v13 = v42;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10001D1C0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100003C68(&qword_100076E60);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10001D4D8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_100019C4C(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_release();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10001EA3C();
    goto LABEL_7;
  }
  sub_10001AB28(v17, a3 & 1);
  unint64_t v23 = sub_100019C4C(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  unint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_10001E5CC(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_10001D680(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100019D20(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10001ECD4();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = (void *)(v18[7] + 16 * v12);
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v19 = a1;
      v19[1] = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(void *)(v18[6] + 8 * v12) = a3;
    uint64_t v21 = (void *)(v18[7] + 16 * v12);
    void *v21 = a1;
    v21[1] = a2;
    uint64_t v22 = v18[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_10001AF4C(result, a4 & 1);
  uint64_t result = sub_100019D20(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    unint64_t v12 = result;
    char v18 = (void *)*v5;
    if (v16) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10001D7C0(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v8 = (void **)v7;
  uint64_t v15 = (void *)*v7;
  unint64_t v17 = sub_100019BD4(a5, a6);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v21 = v16;
  uint64_t v22 = v15[3];
  if (v22 >= v20 && (a7 & 1) != 0)
  {
LABEL_7:
    BOOL v23 = *v8;
    if (v21)
    {
LABEL_8:
      uint64_t v24 = v23[7] + 32 * v17;
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)uint64_t v24 = a1;
      *(void *)(v24 + 8) = a2;
      *(void *)(v24 + 16) = a3;
      *(unsigned char *)(v24 + 24) = a4 & 1;
      *(unsigned char *)(v24 + 25) = HIBYTE(a4) & 1;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a7 & 1) == 0)
  {
    sub_10001EE84();
    goto LABEL_7;
  }
  sub_10001B204(v20, a7 & 1);
  unint64_t v26 = sub_100019BD4(a5, a6);
  if ((v21 & 1) != (v27 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = v26;
  BOOL v23 = *v8;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  sub_10001E684(v17, a5, a6, a1, a2, a3, a4 & 0x101, v23);

  return swift_bridgeObjectRetain();
}

uint64_t sub_10001D94C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for WebDomain();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_100019D64(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_10001F0BC((uint64_t (*)(void))&type metadata accessor for WebDomain, &qword_100076E50);
      goto LABEL_7;
    }
    sub_10001B554(v17, a3 & 1);
    unint64_t v28 = sub_100019D64(a2);
    if ((v18 & 1) == (v29 & 1))
    {
      unint64_t v14 = v28;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_10001E6E4(v14, (uint64_t)v11, a1, v20, (uint64_t (*)(void))&type metadata accessor for WebDomain);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  uint64_t v22 = type metadata accessor for ScreenTimeSettings.ShieldPolicy();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
  uint64_t v25 = v22;
  uint64_t v26 = v21 + *(void *)(v23 + 72) * v14;

  return v24(v26, a1, v25);
}

uint64_t sub_10001DB80(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for Application();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_100019E38(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_10001F0BC((uint64_t (*)(void))&type metadata accessor for Application, &qword_100076E48);
      goto LABEL_7;
    }
    sub_10001BA50(v17, a3 & 1);
    unint64_t v28 = sub_100019E38(a2);
    if ((v18 & 1) == (v29 & 1))
    {
      unint64_t v14 = v28;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_10001E6E4(v14, (uint64_t)v11, a1, v20, (uint64_t (*)(void))&type metadata accessor for Application);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  uint64_t v22 = type metadata accessor for ScreenTimeSettings.ShieldPolicy();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
  uint64_t v25 = v22;
  uint64_t v26 = v21 + *(void *)(v23 + 72) * v14;

  return v24(v26, a1, v25);
}

uint64_t sub_10001DDB4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for ActivityCategory();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_100019F0C(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_10001F0BC((uint64_t (*)(void))&type metadata accessor for ActivityCategory, &qword_100076E38);
      goto LABEL_7;
    }
    sub_10001BF4C(v17, a3 & 1);
    unint64_t v28 = sub_100019F0C(a2);
    if ((v18 & 1) == (v29 & 1))
    {
      unint64_t v14 = v28;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_10001E6E4(v14, (uint64_t)v11, a1, v20, (uint64_t (*)(void))&type metadata accessor for ActivityCategory);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  uint64_t v22 = type metadata accessor for ScreenTimeSettings.ShieldPolicy();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
  uint64_t v25 = v22;
  uint64_t v26 = v21 + *(void *)(v23 + 72) * v14;

  return v24(v26, a1, v25);
}

void sub_10001DFE8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100019BD4(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10001F468();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_10001C448(v15, a4 & 1);
  unint64_t v20 = sub_100019BD4(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  char v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v22 = a2;
  v22[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v23 = v18[2];
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v25;

  swift_bridgeObjectRetain();
}

uint64_t sub_10001E158(char a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for Application();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_100019E38(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      *(unsigned char *)(v20[7] + v14) = a1 & 1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10001F61C();
    goto LABEL_7;
  }
  sub_10001C758(result, a3 & 1);
  uint64_t result = sub_100019E38(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  unint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_10001E7DC(v14, (uint64_t)v11, a1 & 1, v20);
}

void sub_10001E2F8(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_10001A024((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_10001F8F4();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_10001CB7C(v12, a3 & 1);
  unint64_t v17 = sub_10001A024((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_17:
    sub_1000081AC();
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  uint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v19 = 8 * v9;
  *(void *)(v15[6] + v19) = a2;
  *(void *)(v15[7] + v19) = a1;
  uint64_t v20 = v15[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v15[2] = v22;

  id v23 = a2;
}

uint64_t sub_10001E45C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100019BD4(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10001FC74();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_10001D1C0(v15, a4 & 1);
  unint64_t v21 = sub_100019BD4(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  id v23 = (uint64_t *)(v18[6] + 16 * v12);
  *id v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v26;

  return swift_bridgeObjectRetain();
}

uint64_t sub_10001E5CC(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

unint64_t sub_10001E684(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int16 a7, void *a8)
{
  a8[(result >> 6) + 8] |= 1 << result;
  uint64_t v8 = (void *)(a8[6] + 16 * result);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a8[7] + 32 * result;
  *(void *)uint64_t v9 = a4;
  *(void *)(v9 + 8) = a5;
  *(void *)(v9 + 16) = a6;
  *(unsigned char *)(v9 + 24) = a7 & 1;
  *(unsigned char *)(v9 + 25) = HIBYTE(a7) & 1;
  uint64_t v10 = a8[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a8[2] = v12;
  }
  return result;
}

uint64_t sub_10001E6E4(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v9 = a4[6];
  uint64_t v10 = a5(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a2, v10);
  uint64_t v11 = a4[7];
  uint64_t v12 = type metadata accessor for ScreenTimeSettings.ShieldPolicy();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v11 + *(void *)(*(void *)(v12 - 8) + 72) * a1, a3, v12);
  uint64_t v14 = a4[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a4[2] = v16;
  }
  return result;
}

uint64_t sub_10001E7DC(unint64_t a1, uint64_t a2, char a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for Application();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(unsigned char *)(a4[7] + a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

void *sub_10001E894()
{
  uint64_t v1 = v0;
  sub_100003C68(&qword_100076E78);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 4 * v15;
    int v17 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
    uint64_t v18 = 8 * v15;
    uint64_t v19 = *(void *)(*(void *)(v2 + 56) + v18);
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v18) = v19;
    uint64_t result = (void *)swift_retain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10001EA3C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100003C68(&qword_100076E20);
  id v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    *id v23 = v7;
    return result;
  }
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v24 = v5 + 64;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  uint64_t v27 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    uint64_t result = (void *)swift_retain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_10001ECD4()
{
  uint64_t v1 = v0;
  sub_100003C68(&qword_100076EA0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    int64_t v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v22 = (void *)(*(void *)(v4 + 56) + v18);
    *uint64_t v22 = v20;
    v22[1] = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10001EE84()
{
  uint64_t v1 = v0;
  sub_100003C68(&qword_100076E70);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      int64_t v9 = v28 + 1;
      if (v28 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v6 + 8 * v9);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v29 - 1) & v29;
    unint64_t v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    uint64_t v21 = *(void *)(v2 + 56) + v20;
    uint64_t v22 = *(void *)v21;
    uint64_t v23 = *(void *)(v21 + 8);
    uint64_t v24 = *(void *)(v21 + 16);
    char v25 = *(unsigned char *)(v21 + 24);
    LOBYTE(v21) = *(unsigned char *)(v21 + 25);
    uint64_t v26 = (void *)(*(void *)(v4 + 48) + v16);
    void *v26 = v19;
    v26[1] = v18;
    uint64_t v27 = *(void *)(v4 + 56) + v20;
    *(void *)uint64_t v27 = v22;
    *(void *)(v27 + 8) = v23;
    *(void *)(v27 + 16) = v24;
    *(unsigned char *)(v27 + 24) = v25;
    *(unsigned char *)(v27 + 25) = v21;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v13) {
    goto LABEL_26;
  }
  unint64_t v29 = *(void *)(v6 + 8 * v30);
  if (v29)
  {
    int64_t v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v9);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10001F05C()
{
  return sub_10001F0BC((uint64_t (*)(void))&type metadata accessor for WebDomain, &qword_100076E50);
}

void *sub_10001F07C()
{
  return sub_10001F0BC((uint64_t (*)(void))&type metadata accessor for Application, &qword_100076E48);
}

void *sub_10001F09C()
{
  return sub_10001F0BC((uint64_t (*)(void))&type metadata accessor for ActivityCategory, &qword_100076E38);
}

void *sub_10001F0BC(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v46 = type metadata accessor for ScreenTimeSettings.ShieldPolicy();
  uint64_t v49 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v45 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = a1(0);
  uint64_t v48 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  int64_t v43 = (char *)&v36 - v6;
  sub_100003C68(a2);
  char v36 = v2;
  uint64_t v7 = *v2;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = *(void *)(v7 + 16);
  uint64_t v50 = v8;
  if (!v9)
  {
    uint64_t result = (void *)swift_release();
    uint64_t v35 = v50;
    int64_t v34 = v36;
LABEL_25:
    *int64_t v34 = v35;
    return result;
  }
  uint64_t v10 = v8;
  uint64_t result = (void *)(v8 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v7 || (unint64_t)result >= v7 + 64 + 8 * v12)
  {
    uint64_t result = memmove(result, (const void *)(v7 + 64), 8 * v12);
    uint64_t v10 = v50;
  }
  int64_t v13 = 0;
  *(void *)(v10 + 16) = *(void *)(v7 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v15 = -1;
  uint64_t v47 = v7;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  uint64_t v37 = v7 + 64;
  int64_t v38 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v17 = v49;
  uint64_t v18 = v48;
  uint64_t v41 = v49 + 16;
  uint64_t v42 = v48 + 16;
  uint64_t v39 = v49 + 32;
  uint64_t v40 = v48 + 32;
  uint64_t v19 = v43;
  uint64_t v20 = v44;
  uint64_t v21 = v46;
  uint64_t v22 = v50;
  while (1)
  {
    if (v16)
    {
      unint64_t v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      int64_t v51 = v13;
      unint64_t v24 = v23 | (v13 << 6);
      uint64_t v25 = v47;
      goto LABEL_9;
    }
    int64_t v30 = v13 + 1;
    uint64_t v25 = v47;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v30 >= v38) {
      goto LABEL_23;
    }
    unint64_t v31 = *(void *)(v37 + 8 * v30);
    int64_t v32 = v13 + 1;
    if (!v31)
    {
      int64_t v32 = v30 + 1;
      if (v30 + 1 >= v38) {
        goto LABEL_23;
      }
      unint64_t v31 = *(void *)(v37 + 8 * v32);
      if (!v31) {
        break;
      }
    }
LABEL_22:
    unint64_t v16 = (v31 - 1) & v31;
    int64_t v51 = v32;
    unint64_t v24 = __clz(__rbit64(v31)) + (v32 << 6);
LABEL_9:
    unint64_t v26 = *(void *)(v18 + 72) * v24;
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v19, *(void *)(v25 + 48) + v26, v20);
    unint64_t v27 = *(void *)(v17 + 72) * v24;
    unint64_t v28 = *(void *)(v25 + 56) + v27;
    unint64_t v29 = v45;
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v45, v28, v21);
    (*(void (**)(unint64_t, char *, uint64_t))(v18 + 32))(*(void *)(v22 + 48) + v26, v19, v20);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(void *)(v22 + 56) + v27, v29, v21);
    int64_t v13 = v51;
  }
  int64_t v33 = v30 + 2;
  if (v33 >= v38)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    int64_t v34 = v36;
    uint64_t v35 = v50;
    goto LABEL_25;
  }
  unint64_t v31 = *(void *)(v37 + 8 * v33);
  if (v31)
  {
    int64_t v32 = v33;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v32 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v32 >= v38) {
      goto LABEL_23;
    }
    unint64_t v31 = *(void *)(v37 + 8 * v32);
    ++v33;
    if (v31) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_10001F468()
{
  uint64_t v1 = v0;
  sub_100003C68(&qword_100076E80);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10001F61C()
{
  uint64_t v1 = type metadata accessor for Application();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100003C68(&qword_100076E28);
  int64_t v22 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *int64_t v22 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v23 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v26 = v2 + 16;
  int64_t v24 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v25 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v24) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_23;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v10);
      if (!v19) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    char v17 = *(unsigned char *)(*(void *)(v5 + 56) + v15);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(unsigned char *)(*(void *)(v7 + 56) + v15) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v24) {
    goto LABEL_23;
  }
  unint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v24) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10001F8AC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_10001F8F4()
{
  uint64_t v1 = v0;
  sub_100003C68(&qword_100076E68);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    char v17 = *(void **)(*(void *)(v2 + 48) + v16);
    int64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10001FA9C()
{
  uint64_t v1 = v0;
  sub_100003C68(&qword_100076E58);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 40 * v15;
    uint64_t v19 = *(void *)v17;
    uint64_t v18 = *(void *)(v17 + 8);
    uint64_t v20 = *(void *)(v17 + 16);
    uint64_t v21 = *(void *)(v17 + 24);
    LOBYTE(v17) = *(unsigned char *)(v17 + 32);
    uint64_t v22 = 8 * v15;
    uint64_t v23 = *(void **)(*(void *)(v2 + 56) + v22);
    uint64_t v24 = *(void *)(v4 + 48) + v16;
    *(void *)uint64_t v24 = v19;
    *(void *)(v24 + 8) = v18;
    *(void *)(v24 + 16) = v20;
    *(void *)(v24 + 24) = v21;
    *(unsigned char *)(v24 + 32) = v17;
    *(void *)(*(void *)(v4 + 56) + v22) = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id result = v23;
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10001FC74()
{
  uint64_t v1 = v0;
  sub_100003C68(&qword_100076E60);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10001FE2C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10001FE88(uint64_t a1)
{
  return a1;
}

uint64_t sub_10001FEDC()
{
  return 1;
}

Swift::Int sub_10001FEE4()
{
  return Hasher._finalize()();
}

void sub_10001FF28()
{
}

Swift::Int sub_10001FF50()
{
  return Hasher._finalize()();
}

id sub_10001FF90(uint64_t a1, uint64_t a2, char a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = 0;
  id v5 = [(id)swift_getObjCClassFromMetadata() bundleRecordWithBundleIdentifier:v4 allowPlaceholder:a3 & 1 error:&v9];

  if (v5)
  {
    id v6 = v9;
  }
  else
  {
    id v7 = v9;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v5;
}

void *sub_100020078(void *a1)
{
  id v1 = [a1 applicationExtensionRecords];
  sub_100020D5C(0, &qword_100076EB0);
  sub_100020784();
  uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v29 = v2 & 0xC000000000000001;
  if ((v2 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = __CocoaSet.count.getter();
    if (v3) {
      goto LABEL_3;
    }
LABEL_6:
    swift_bridgeObjectRelease();
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v40 = &_swiftEmptyArrayStorage;
  sub_1000546F0(0, v3 & ~(v3 >> 63), 0);
  if (v29)
  {
    id result = (void *)__CocoaSet.startIndex.getter();
    char v6 = 1;
  }
  else
  {
    id result = (void *)sub_100020B54(v2);
    char v6 = v7 & 1;
  }
  uint64_t v37 = (uint64_t)result;
  uint64_t v38 = v5;
  char v39 = v6;
  if (v3 < 0)
  {
    __break(1u);
LABEL_24:
    __break(1u);
  }
  else
  {
    uint64_t v8 = v2 & 0xFFFFFFFFFFFFFF8;
    if (v2 < 0) {
      uint64_t v8 = v2;
    }
    uint64_t v27 = v8;
    uint64_t v28 = v2;
    do
    {
      while (1)
      {
        int64_t v15 = v37;
        char v16 = v39;
        uint64_t v30 = v38;
        sub_1000208D0(v37, v38, v39, v2);
        uint64_t v35 = &type metadata for ApplicationExtensionRecord;
        char v36 = &off_100071F58;
        v34[0] = v17;
        uint64_t v18 = v40;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000546F0(0, v18[2] + 1, 1);
          uint64_t v18 = v40;
        }
        unint64_t v20 = v18[2];
        unint64_t v19 = v18[3];
        if (v20 >= v19 >> 1)
        {
          sub_1000546F0(v19 > 1, v20 + 1, 1);
          uint64_t v18 = v40;
        }
        uint64_t v21 = sub_10000DE0C((uint64_t)v34, (uint64_t)v35);
        __chkstk_darwin(v21);
        unint64_t v23 = (uint64_t *)((char *)&v27 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
        (*(void (**)(uint64_t *))(v24 + 16))(v23);
        uint64_t v25 = *v23;
        int64_t v32 = &type metadata for ApplicationExtensionRecord;
        int64_t v33 = &off_100071F58;
        *(void *)&long long v31 = v25;
        v18[2] = v20 + 1;
        sub_10000DE5C(&v31, (uint64_t)&v18[5 * v20 + 4]);
        id result = (void *)_s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v34);
        if (v29) {
          break;
        }
        uint64_t v9 = v30;
        uint64_t v2 = v28;
        int64_t v10 = sub_1000207EC(v15, v30, v16, v28);
        uint64_t v12 = v11;
        char v14 = v13;
        sub_100020B48(v15, v9, v16);
        uint64_t v37 = v10;
        uint64_t v38 = v12;
        char v39 = v14 & 1;
        if (!--v3) {
          goto LABEL_22;
        }
      }
      uint64_t v2 = v28;
      if ((v16 & 1) == 0) {
        goto LABEL_24;
      }
      if (__CocoaSet.Index.handleBitPattern.getter()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      sub_100003C68(&qword_100076EC0);
      unint64_t v26 = (void (*)(void *, void))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v26(v34, 0);
      --v3;
    }
    while (v3);
LABEL_22:
    sub_100020B48(v37, v38, v39);
    swift_bridgeObjectRelease();
    return v40;
  }
  return result;
}

void *sub_10002041C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id result = sub_100020BDC(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t sub_100020448(uint64_t a1, uint64_t a2)
{
  return sub_100020460(a1, a2, (SEL *)&selRef_bundleIdentifier);
}

uint64_t sub_100020454(uint64_t a1, uint64_t a2)
{
  return sub_100020460(a1, a2, (SEL *)&selRef_teamIdentifier);
}

uint64_t sub_100020460(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4 = [*v3 *a3];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

uint64_t getEnumTagSinglePayload for ApplicationRecordError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for ApplicationRecordError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *id result = a2;
        return result;
      case 2:
        *(_WORD *)id result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)id result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *id result = 0;
      break;
    case 2:
      *(_WORD *)id result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000205B4);
    case 4:
      *(_DWORD *)id result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000205DC()
{
  return 0;
}

ValueMetadata *type metadata accessor for ApplicationRecordError()
{
  return &type metadata for ApplicationRecordError;
}

ValueMetadata *type metadata accessor for ApplicationRecord()
{
  return &type metadata for ApplicationRecord;
}

unint64_t sub_100020608()
{
  unint64_t result = qword_100076EA8;
  if (!qword_100076EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100076EA8);
  }
  return result;
}

uint64_t sub_10002065C@<X0>(uint64_t a1@<X8>)
{
  id v3 = [*v1 dataContainerURL];
  if (v3)
  {
    unsigned int v4 = v3;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for URL();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a1;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a1;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

void *sub_100020724()
{
  return sub_100020078(*v0);
}

uint64_t sub_10002072C()
{
  id v1 = [*v0 localizedName];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

unint64_t sub_100020784()
{
  unint64_t result = qword_100076EB8;
  if (!qword_100076EB8)
  {
    sub_100020D5C(255, &qword_100076EB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100076EB8);
  }
  return result;
}

int64_t sub_1000207EC(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (unint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void sub_1000208D0(uint64_t a1, int a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      __CocoaSet.element(at:)();
      sub_100020D5C(0, &qword_100076EB0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_24;
  }
  if (a3) {
    goto LABEL_10;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_10:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  __CocoaSet.Index.element.getter();
  sub_100020D5C(0, &qword_100076EB0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  unint64_t v4 = v16;
  swift_unknownObjectRelease();
  Swift::Int v7 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v8 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v6 = v7 & ~v8;
  if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_23:

    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  id v9 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v10 = static NSObject.== infix(_:_:)();

  if ((v10 & 1) == 0)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v6 = (v6 + 1) & v11;
      if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_23;
      }
      id v12 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v13 = static NSObject.== infix(_:_:)();
    }
    while ((v13 & 1) == 0);
  }

LABEL_17:
  char v14 = *(void **)(*(void *)(a4 + 48) + 8 * v6);

  id v15 = v14;
}

uint64_t sub_100020B48(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100020B54(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  id v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void *sub_100020BDC(uint64_t a1, uint64_t a2)
{
  sub_100020D5C(0, &qword_100076EC8);
  id v6 = sub_10001FF90(a1, a2, 0);
  if (!v2)
  {
    unint64_t v7 = v6;
    self;
    uint64_t v8 = swift_dynamicCastObjCClass();
    if (v8)
    {
      uint64_t v3 = (void *)v8;
      id v9 = v7;
      id v10 = [v3 containingBundleRecord];
      if (v10)
      {
        uint64_t v11 = v10;
        self;
        uint64_t v12 = swift_dynamicCastObjCClass();
        if (v12)
        {
          uint64_t v3 = (void *)v12;

          return v3;
        }
      }
      sub_100006D78();
      swift_allocError();
      swift_willThrow();
    }
    else
    {
      self;
      uint64_t v3 = (void *)swift_dynamicCastObjCClass();
      if (v3) {
        return v3;
      }
      sub_100006D78();
      swift_allocError();
      swift_willThrow();
    }
  }
  return v3;
}

uint64_t sub_100020D5C(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

ValueMetadata *type metadata accessor for ApplicationExtensionRecord()
{
  return &type metadata for ApplicationExtensionRecord;
}

uint64_t sub_100020DA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v30 = a4;
  uint64_t v33 = a3;
  uint64_t v38 = a2;
  uint64_t v5 = type metadata accessor for Application();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  id v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v35 = (char *)&v29 - v10;
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v31 = a1 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v32 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v34 = v6 + 16;
  uint64_t v36 = v6 + 32;
  uint64_t v37 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v16 = 0;
  while (v14)
  {
    unint64_t v18 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v19 = v18 | (v16 << 6);
LABEL_24:
    unint64_t v23 = v35;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v35, *(void *)(v37 + 48) + *(void *)(v6 + 72) * v19, v5);
    uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v24(v9, v23, v5);
    uint64_t v25 = Application.bundleIdentifier.getter();
    if (v26)
    {
      if (v25 == v38 && v26 == v33)
      {
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_30;
      }
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v17)
      {
        swift_release();
LABEL_30:
        uint64_t v28 = v30;
        v24(v30, v9, v5);
        uint64_t v27 = 0;
LABEL_31:
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v28, v27, 1, v5);
        return swift_bridgeObjectRelease();
      }
    }
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  int64_t v20 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v20 >= v32) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v31 + 8 * v20);
  ++v16;
  if (v21) {
    goto LABEL_23;
  }
  int64_t v16 = v20 + 1;
  if (v20 + 1 >= v32) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v31 + 8 * v16);
  if (v21) {
    goto LABEL_23;
  }
  int64_t v16 = v20 + 2;
  if (v20 + 2 >= v32) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v31 + 8 * v16);
  if (v21) {
    goto LABEL_23;
  }
  int64_t v16 = v20 + 3;
  if (v20 + 3 >= v32) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v31 + 8 * v16);
  if (v21)
  {
LABEL_23:
    unint64_t v14 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
    goto LABEL_24;
  }
  int64_t v22 = v20 + 4;
  if (v22 >= v32)
  {
LABEL_28:
    swift_release();
    uint64_t v27 = 1;
    uint64_t v28 = v30;
    goto LABEL_31;
  }
  unint64_t v21 = *(void *)(v31 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v32) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v31 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_100021114(uint64_t a1, uint64_t (*a2)(void, uint64_t))
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.overrideSettings.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v16 = v4;
    uint64_t v11 = v10;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v18 = v15;
    *(_DWORD *)uint64_t v11 = 136446466;
    uint64_t v17 = sub_1000036B0(0xD000000000000040, 0x80000001000672E0, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2082;
    uint64_t v17 = a1;
    swift_errorRetain();
    sub_100003C68(&qword_100076FE0);
    uint64_t v12 = String.init<A>(describing:)();
    uint64_t v17 = sub_1000036B0(v12, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to create or lost connection to remote object proxy for extension with ID %{public}s: %{public}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v16);
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return a2(0, a1);
}

uint64_t sub_100021478()
{
  _s20ManagedSettingsAgent12ClientFinderVwxx_0(v0 + 16);
  _s20ManagedSettingsAgent12ClientFinderVwxx_0(v0 + 56);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for OverrideSettingsExtension()
{
  return self;
}

void sub_1000214DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.overrideSettings.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v16 = a2;
    uint64_t v11 = v10;
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446466;
    uint64_t v17 = sub_1000036B0(0xD000000000000040, 0x80000001000672E0, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2082;
    uint64_t v17 = a1;
    swift_errorRetain();
    sub_100003C68(&qword_100076FE0);
    uint64_t v12 = String.init<A>(describing:)();
    uint64_t v17 = sub_1000036B0(v12, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to create or lost connection to remote object proxy for extension with ID %{public}s: %{public}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v16;
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  unint64_t v14 = (void *)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, void, void *))(a2 + 16))(a2, 0, v14);
}

void sub_100021774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void (**a6)(void, void, void))
{
  void v34[3] = a4;
  v34[2] = a3;
  uint64_t v10 = type metadata accessor for OverrideSettingsResponse();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100003C68(&qword_100076D58);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = a6;
  sub_100006DCC(a5 + 7, a5[10]);
  _Block_copy(a6);
  _Block_copy(a6);
  _Block_copy(a6);
  uint64_t v17 = sub_10003588C();
  swift_bridgeObjectRetain();
  sub_100020DA8(v17, a1, a2, v16);
  swift_bridgeObjectRelease();
  uint64_t v18 = type metadata accessor for Application();
  LODWORD(v17) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v16, 1, v18);
  sub_100021D2C((uint64_t)v16);
  if (v17 == 1)
  {
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for OverrideSettingsResponse.approved(_:), v10);
    uint64_t v19 = OverrideSettingsResponse.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    id v20 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v19];
    ((void (**)(void, id, void))a6)[2](a6, v20, 0);
    swift_release();
  }
  else
  {
    v34[1] = a2;
    uint64_t v21 = swift_allocObject();
    uint64_t v22 = v35;
    *(void *)(v21 + 16) = sub_100021D24;
    *(void *)(v21 + 24) = v22;
    sub_100006DCC(a5 + 2, a5[5]);
    sub_100003C68(&qword_100077270);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100064440;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v24;
    *(void *)(inited + 48) = 0xD000000000000021;
    *(void *)(inited + 56) = 0x8000000100067330;
    *(void *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 72) = v25;
    *(void *)(inited + 80) = 0xD000000000000040;
    *(void *)(inited + 88) = 0x80000001000672E0;
    swift_retain_n();
    unint64_t v26 = sub_1000387D8(inited);
    uint64_t v27 = sub_1000252CC(v26);
    swift_bridgeObjectRelease();
    sub_100026114((uint64_t)aBlock, v27, 0, 0, 0, 1, 0, 1, (uint64_t)sub_100021DC4, v21);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_100003C68(&qword_100076FB0);
    if (swift_dynamicCast())
    {
      uint64_t v28 = (void *)aBlock[6];
      NSString v29 = String._bridgeToObjectiveC()();
      NSString v30 = String._bridgeToObjectiveC()();
      aBlock[4] = sub_100021D24;
      aBlock[5] = v22;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100052A80;
      aBlock[3] = &unk_100071FC0;
      uint64_t v31 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      [v28 askToOverrideUnremovabilityOfApplicationWithBundleIdentifier:v29 teamIdentifier:v30 replyHandler:v31];
      swift_release();
      swift_release();
      _Block_release(v31);
      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {
      sub_100021DCC();
      uint64_t v32 = swift_allocError();
      *uint64_t v33 = 0;
      _Block_copy(a6);
      sub_1000214DC(v32, (uint64_t)a6);
      _Block_release(a6);
      swift_errorRelease();
      swift_release();
      swift_release_n();
    }
  }
  _Block_release(a6);
  _Block_release(a6);
}

uint64_t sub_100021CEC()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100021D24(uint64_t a1, uint64_t a2)
{
  sub_100052B0C(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_100021D2C(uint64_t a1)
{
  uint64_t v2 = sub_100003C68(&qword_100076D58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100021D8C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100021DC4(uint64_t a1)
{
  return sub_100021114(a1, *(uint64_t (**)(void, uint64_t))(v1 + 16));
}

unint64_t sub_100021DCC()
{
  unint64_t result = qword_1000771B0;
  if (!qword_1000771B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000771B0);
  }
  return result;
}

uint64_t sub_100021E20()
{
  return swift_release();
}

void *_s17EventSubscriptionVwCP(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s17EventSubscriptionVwxx()
{
  return swift_bridgeObjectRelease();
}

void *_s17EventSubscriptionVwca(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *_s17EventSubscriptionVwta(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *_s17EventSubscriptionVMa()
{
  return &_s17EventSubscriptionVN;
}

uint64_t sub_100021F00(int a1, xpc_object_t xstring)
{
  if (xpc_string_get_string_ptr(xstring))
  {
    Swift::Int v2 = String.init(cString:)();
    sub_100002C94(&v5, v2, v3);
    swift_bridgeObjectRelease();
  }
  return 1;
}

uint64_t sub_100021F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  char v6 = v5(a2, a3);
  swift_unknownObjectRelease();
  return v6 & 1;
}

uint64_t sub_100021FB4()
{
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 0x7370756F7247202CLL;
  v1._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v1);
  swift_bridgeObjectRetain();
  v2._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0x203A6E656B6F54;
}

uint64_t sub_1000220A8()
{
  return sub_100021FB4();
}

uint64_t sub_1000220B0(void *a1)
{
  Swift::String v1 = a1;
  if (!a1) {
    return (uint64_t)v1;
  }
  Swift::String v2 = (void *)swift_unknownObjectRetain();
  xpc_object_t v3 = xpc_dictionary_get_array(v2, "SettingsGroups");
  if (!v3)
  {
    swift_unknownObjectRelease_n();
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v11 = &_swiftEmptySetSingleton;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = &v11;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_100022284;
  *(void *)(v6 + 24) = v5;
  aBlock[4] = sub_10002229C;
  aBlock[5] = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100021F5C;
  aBlock[3] = &unk_1000720B8;
  uint64_t v7 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  xpc_array_apply(v4, v7);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease_n();
  _Block_release(v7);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    Swift::String v1 = v11;
    swift_release();
    return (uint64_t)v1;
  }
  __break(1u);
  return result;
}

uint64_t sub_100022274()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100022284(int a1, void *a2)
{
  return sub_100021F00(a1, a2);
}

uint64_t sub_10002228C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002229C()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_1000222C8()
{
  return swift_release();
}

uint64_t sub_1000222D4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  os_log_type_t v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  aBlock[4] = sub_100022A8C;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002C398;
  aBlock[3] = &unk_100072108;
  uint64_t v11 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  v13[1] = &_swiftEmptyArrayStorage;
  sub_100022A9C();
  sub_100003C68((uint64_t *)&unk_100077260);
  sub_100022AF4();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release();
}

void sub_10002253C()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)v36 - v6;
  __chkstk_darwin(v5);
  os_log_type_t v9 = (char *)v36 - v8;
  static Logger.nanoSync.getter();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Syncing store data to watch", v12, 2u);
    swift_slowDealloc();
  }

  unint64_t v13 = *(void (**)(char *, uint64_t))(v1 + 8);
  v13(v9, v0);
  uint64_t v14 = self;
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v14 createAccessorWithDomain:v15];

  if (v16)
  {
    sub_100003C68(&qword_100076FB8);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    NSString v18 = String._bridgeToObjectiveC()();
    [v16 setObject:isa forKey:v18];

    id v19 = [v16 synchronize];
    if (!v19)
    {
      id v33 = [self createManager];
      NSString v34 = String._bridgeToObjectiveC()();
      sub_100022B50((uint64_t)&off_100071668);
      swift_arrayDestroy();
      Class v35 = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v33 synchronizeNanoDomain:v34 keys:v35];
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

      return;
    }
    id v20 = v19;
    static Logger.nanoSync.getter();
    id v21 = v20;
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v38 = v13;
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v39 = (uint64_t)v21;
      uint64_t v40 = v25;
      uint64_t v37 = v0;
      *(_DWORD *)uint64_t v24 = 136446210;
      v36[1] = v24 + 4;
      id v26 = v21;
      sub_100003C68(&qword_100076FE0);
      uint64_t v27 = String.init<A>(describing:)();
      uint64_t v39 = sub_1000036B0(v27, v28, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Unable to synchronize accessor after updating sync stores. Error: %{public}s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_unknownObjectRelease();
      v38(v4, v37);
      return;
    }

    swift_unknownObjectRelease();
    uint64_t v32 = v4;
  }
  else
  {
    static Logger.nanoSync.getter();
    NSString v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Unable to create accessor to update sync stores", v31, 2u);
      swift_slowDealloc();
    }

    uint64_t v32 = v7;
  }
  v13(v32, v0);
}

uint64_t sub_100022A54()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100022A8C()
{
}

uint64_t sub_100022A94()
{
  return swift_release();
}

unint64_t sub_100022A9C()
{
  unint64_t result = qword_100077430;
  if (!qword_100077430)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100077430);
  }
  return result;
}

unint64_t sub_100022AF4()
{
  unint64_t result = qword_100077440;
  if (!qword_100077440)
  {
    sub_100009774((uint64_t *)&unk_100077260);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100077440);
  }
  return result;
}

Swift::Int sub_100022B50(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100003C68(&qword_100077140);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        id v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          id v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      id v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      void *v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

ValueMetadata *type metadata accessor for SettingsSyncer()
{
  return &type metadata for SettingsSyncer;
}

double sub_100022D04@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100003C68((uint64_t *)&unk_100077410);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100023138(a1, (uint64_t)v8);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  id v12 = [v3 _extensionContextForUUID:isa];

  if (v12)
  {
    *(void *)(a2 + 24) = sub_1000231A0();
    *(void *)(a2 + 32) = &off_1000721A0;
    *(void *)a2 = v12;
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

id sub_100022E68(uint64_t a1, uint64_t a2)
{
  return sub_100022E8C(a1, a2);
}

id sub_100022E8C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    v4.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else {
    v4.super.Class isa = 0;
  }
  id v9 = 0;
  id v5 = [v2 beginExtensionRequestWithOptions:a1 inputItems:v4.super.isa error:&v9];

  if (v5)
  {
    id v6 = v9;
  }
  else
  {
    id v7 = v9;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v5;
}

id sub_100022F7C(uint64_t a1)
{
  return [*v1 cancelExtensionRequestWithIdentifier:a1];
}

double sub_100022F90@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100022D04(a1, a2);
}

id sub_100022FB4(uint64_t a1)
{
  uint64_t v3 = sub_100003C68((uint64_t *)&unk_100077410);
  __chkstk_darwin(v3 - 8);
  id v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = *v1;
  sub_100023138(a1, (uint64_t)v5);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v5, v7);
  }
  id v10 = [v6 pidForRequestIdentifier:isa];

  return v10;
}

id sub_1000230E8(uint64_t a1)
{
  return [*v1 _kill:a1];
}

id sub_1000230FC()
{
  return [*v0 _auxiliaryConnection];
}

uint64_t sub_100023138(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003C68((uint64_t *)&unk_100077410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000231A0()
{
  unint64_t result = qword_100076FC0;
  if (!qword_100076FC0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100076FC0);
  }
  return result;
}

uint64_t initializeWithCopy for PostInstallMigrator(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for PostInstallMigrator(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

__n128 initializeWithTake for PostInstallMigrator(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PostInstallMigrator(uint64_t a1, uint64_t a2)
{
  _s20ManagedSettingsAgent12ClientFinderVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for PostInstallMigrator(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PostInstallMigrator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PostInstallMigrator()
{
  return &type metadata for PostInstallMigrator;
}

id sub_100023350()
{
  id result = [objc_allocWithZone((Class)NSLock) init];
  qword_100076FC8 = (uint64_t)result;
  return result;
}

void sub_100023384()
{
  id v1 = objc_allocWithZone((Class)NSBackgroundActivityScheduler);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 initWithIdentifier:v2];

  [v3 setPreregistered:1];
  sub_1000244A4(v0, (uint64_t)v9);
  uint64_t v4 = swift_allocObject();
  long long v5 = v9[1];
  *(_OWORD *)(v4 + 24) = v9[0];
  *(void *)(v4 + 16) = v3;
  *(_OWORD *)(v4 + 40) = v5;
  *(void *)(v4 + 56) = v10;
  aBlock[4] = sub_10002456C;
  aBlock[5] = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000236F8;
  aBlock[3] = &unk_100072258;
  id v6 = _Block_copy(aBlock);
  id v7 = v3;
  swift_release();
  [v7 scheduleWithBlock:v6];
  _Block_release(v6);
}

uint64_t sub_1000234E4(uint64_t (*a1)(uint64_t), uint64_t a2, void *a3, void *a4)
{
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (![a3 shouldDefer])
  {
    if (qword_1000763A8 != -1) {
      swift_once();
    }
    uint64_t v12 = &PersistenceRecord;
    [(id)qword_100076FC8 lock];
    if (byte_100079590) {
      goto LABEL_11;
    }
    type metadata accessor for Persistence();
    sub_100006DCC(a4, a4[3]);
    dispatch thunk of Locatable.dataVersionPath.getter();
    uint64_t v13 = static Persistence.dataVersion(from:)();
    char v15 = v14;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    if (v15)
    {
      byte_100079590 = 0;
      uint64_t v12 = &PersistenceRecord;
    }
    else
    {
      byte_100079590 = v13 == 1;
      uint64_t v12 = &PersistenceRecord;
      if (v13 == 1) {
        goto LABEL_11;
      }
    }
    sub_10002378C();
LABEL_11:
    [*(id *)&v12[56].ivar_base_size unlock];
    uint64_t v11 = 1;
    return a1(v11);
  }
  uint64_t v11 = 2;
  return a1(v11);
}

uint64_t sub_1000236F8(uint64_t a1, void *aBlock)
{
  NSString v2 = *(void (**)(uint64_t (*)(), uint64_t))(a1 + 32);
  id v3 = _Block_copy(aBlock);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  swift_retain();
  v2(sub_1000245B8, v4);
  swift_release();

  return swift_release();
}

uint64_t sub_10002378C()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  id v6 = (char *)&v15 - v5;
  static Logger.migrator.getter();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "PostInstallMigrator migration start", v9, 2u);
    swift_slowDealloc();
  }

  uint64_t v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v6, v0);
  if ([self isUpgradeDisposition])
  {
    if (qword_1000763C0 != -1) {
      swift_once();
    }
    swift_retain();
    sub_10003FB58();
    swift_release();
  }
  else
  {
    static Logger.migrator.getter();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Disposition is not an upgrade. Skipping migration", v13, 2u);
      swift_slowDealloc();
    }

    v10(v4, v0);
  }
  return sub_1000239EC();
}

uint64_t sub_1000239EC()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v9 - v3;
  sub_100023D00();
  byte_100079590 = 1;
  static Logger.migrator.getter();
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, (os_log_type_t)v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, (os_log_type_t)v6, "PostInstallMigrator migration end", v7, 2u);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_100023D00()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CocoaError.Code();
  uint64_t v49 = *(void (**)(char *, uint64_t))(v2 - 8);
  uint64_t v50 = v2;
  __chkstk_darwin(v2);
  uint64_t v48 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v52 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  int64_t v43 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v40 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v45 = (char *)&v40 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v47 = (char *)&v40 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v40 - v14;
  uint64_t v53 = type metadata accessor for Logger();
  uint64_t v16 = *(void *)(v53 - 8);
  uint64_t v17 = __chkstk_darwin(v53);
  uint64_t v46 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  id v20 = (char *)&v40 - v19;
  static Logger.migrator.getter();
  id v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    BOOL v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Write new data version", v23, 2u);
    swift_slowDealloc();
  }

  uint64_t v24 = *(void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v44 = v16 + 8;
  v24(v20, v53);
  uint64_t v25 = type metadata accessor for Persistence();
  sub_100006DCC(v1, v1[3]);
  dispatch thunk of Locatable.dataVersionPath.getter();
  id v26 = v51;
  static Persistence.write(dataVersion:to:)();
  if (v26)
  {
    uint64_t v41 = v9;
    uint64_t v42 = v25;
    uint64_t v27 = *(void (**)(char *, uint64_t))(v52 + 8);
    v27(v15, v4);
    swift_errorRetain();
    unint64_t v28 = v48;
    static CocoaError.fileNoSuchFile.getter();
    sub_100006E10();
    uint64_t v29 = v50;
    char v30 = static _ErrorCodeProtocol.~= infix(_:_:)();
    swift_errorRelease();
    uint64_t result = (*((uint64_t (**)(char *, uint64_t))v49 + 1))(v28, v29);
    if ((v30 & 1) == 0) {
      return result;
    }
    int64_t v51 = v24;
    swift_errorRelease();
    sub_100006DCC(v1, v1[3]);
    uint64_t v32 = v45;
    dispatch thunk of Locatable.dataVersionDirectory.getter();
    static Persistence.createDirectory(at:)();
    uint64_t v49 = v27;
    v27(v32, v4);
    uint64_t v50 = v4;
    sub_100006DCC(v1, v1[3]);
    id v33 = v41;
    dispatch thunk of Locatable.dataVersionPath.getter();
    static Persistence.write(dataVersion:to:)();
    uint64_t v36 = v33;
    uint64_t v37 = v49;
    uint64_t v38 = v50;
    ((void (*)(char *))v49)(v36);
    uint64_t v39 = v37;
  }
  else
  {
    int64_t v51 = v24;
    uint64_t v39 = *(void (**)(char *, uint64_t))(v52 + 8);
    NSString v34 = v15;
    uint64_t v38 = v4;
    v39(v34, v4);
  }
  sub_100006DCC(v1, v1[3]);
  Class v35 = v47;
  dispatch thunk of Locatable.dataVersionPath.getter();
  static Persistence.setFileAttributes(of:)();
  return ((uint64_t (*)(char *, uint64_t))v39)(v35, v38);
}

uint64_t sub_1000244A4(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100024504(uint64_t a1)
{
  return a1;
}

uint64_t sub_10002452C()
{
  _s20ManagedSettingsAgent12ClientFinderVwxx_0(v0 + 24);

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10002456C(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return sub_1000234E4(a1, a2, *(void **)(v2 + 16), (void *)(v2 + 24));
}

uint64_t sub_100024578()
{
  return swift_release();
}

uint64_t sub_100024580()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000245B8()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

char *sub_1000245CC(unint64_t a1, uint64_t a2)
{
  Swift::Int v2 = a1;
  if (a1 >> 62)
  {
LABEL_40:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
LABEL_41:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_41;
  }
LABEL_3:
  uint64_t v4 = 0;
  unint64_t v5 = v2 & 0xC000000000000001;
  Swift::Int v35 = v2 + 32;
  p_name = &OverrideSettingsExtension.name;
  uint64_t v41 = (char *)&_swiftEmptyArrayStorage;
  uint64_t v31 = v3;
  Swift::Int v32 = v2;
  unint64_t v33 = v2 & 0xC000000000000001;
  while (1)
  {
    if (v5)
    {
      id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v8 = __OFADD__(v4++, 1);
      if (v8) {
        goto LABEL_38;
      }
    }
    else
    {
      id v7 = *(id *)(v35 + 8 * v4);
      BOOL v8 = __OFADD__(v4++, 1);
      if (v8)
      {
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
    }
    uint64_t v9 = v7;
    uint64_t result = (char *)objc_msgSend(v7, p_name[367]);
    if (!result) {
      break;
    }
    uint64_t v11 = result;
    uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    strcpy((char *)v37, "SettingsGroups");
    HIBYTE(v37[1]) = -18;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v12 + 16) && (unint64_t v13 = sub_100019FE0((uint64_t)v38), (v14 & 1) != 0))
    {
      sub_1000037D4(*(void *)(v12 + 56) + 32 * v13, (uint64_t)&v39);
    }
    else
    {
      long long v39 = 0u;
      long long v40 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_10001FE88((uint64_t)v38);
    if (!*((void *)&v40 + 1))
    {
      sub_100006E84((uint64_t)&v39, &qword_1000772F8);
LABEL_5:

      goto LABEL_6;
    }
    sub_100003C68(&qword_100077300);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_5;
    }
    uint64_t v15 = Set.init(minimumCapacity:)();
    *(void *)&long long v39 = v15;
    uint64_t v16 = *(void *)(v37[0] + 16);
    if (v16)
    {
      uint64_t v17 = (Swift::Int *)(v37[0] + 40);
      do
      {
        Swift::Int v18 = *(v17 - 1);
        Swift::Int v19 = *v17;
        swift_bridgeObjectRetain();
        sub_100002C94(v38, v18, v19);
        swift_bridgeObjectRelease();
        v17 += 2;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease();
      uint64_t v20 = v39;
      p_name = (char **)(&OverrideSettingsExtension + 24);
    }
    else
    {
      uint64_t v20 = v15;
      swift_bridgeObjectRelease();
    }
    uint64_t v21 = sub_10000D450(a2, v20);
    uint64_t v22 = *(void *)(v21 + 16);
    if (v22)
    {
      sub_100003C68(&qword_100077308);
      BOOL v23 = (void *)swift_allocObject();
      int64_t v24 = j__malloc_size(v23);
      uint64_t v25 = v24 - 32;
      if (v24 < 32) {
        uint64_t v25 = v24 - 17;
      }
      _OWORD v23[2] = v22;
      v23[3] = 2 * (v25 >> 4);
      uint64_t v34 = sub_100049B78((uint64_t)v38, v23 + 4, v22, v21);
      Swift::Int v2 = v38[3];
      swift_bridgeObjectRetain();
      sub_100006F44();
      if (v34 != v22) {
        goto LABEL_39;
      }
      swift_release();
      uint64_t v3 = v31;
      Swift::Int v2 = v32;
      p_name = (char **)(&OverrideSettingsExtension + 24);
    }
    else
    {
      swift_release();
      BOOL v23 = &_swiftEmptyArrayStorage;
    }
    unint64_t v5 = v33;
    if (v23[2])
    {
      id v26 = v41;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v26 = sub_1000543C0(0, *((void *)v26 + 2) + 1, 1, v26);
      }
      unint64_t v28 = *((void *)v26 + 2);
      unint64_t v27 = *((void *)v26 + 3);
      uint64_t v41 = v26;
      if (v28 >= v27 >> 1) {
        uint64_t v41 = sub_1000543C0((char *)(v27 > 1), v28 + 1, 1, v41);
      }
      uint64_t v29 = v41;
      *((void *)v41 + 2) = v28 + 1;
      char v30 = &v29[16 * v28];
      *((void *)v30 + 4) = v9;
      *((void *)v30 + 5) = v23;
    }
    else
    {

      swift_release();
    }
LABEL_6:
    if (v4 == v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v41;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100024A08(uint64_t a1)
{
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v3 = 0;
  uint64_t v18 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    uint64_t v11 = (Swift::Int *)(*(void *)(a1 + 48) + 16 * v10);
    Swift::Int v12 = *v11;
    Swift::Int v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_100002C94(&v17, v12, v13);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

double ExtensionFinder.__allocating_init()()
{
  uint64_t v0 = sub_100020D5C(0, (unint64_t *)&qword_100077400);
  type metadata accessor for ExtensionFinder();
  uint64_t v1 = swift_allocObject();
  double result = 5.0;
  *(_OWORD *)(v1 + 16) = xmmword_100064F20;
  *(void *)(v1 + 32) = 0x3FE0000000000000;
  *(void *)(v1 + 40) = 0xD00000000000002FLL;
  *(void *)(v1 + 48) = 0x80000001000666F0;
  *(void *)(v1 + 56) = 0xD000000000000038;
  *(void *)(v1 + 64) = 0x8000000100066720;
  *(void *)(v1 + 72) = v0;
  return result;
}

uint64_t type metadata accessor for ExtensionFinder()
{
  return self;
}

BOOL static ExtensionError.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void ExtensionError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int ExtensionError.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

unint64_t sub_100024CD4()
{
  sub_100003C68((uint64_t *)&unk_100077310);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100064F30;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 48) = 0xD000000000000021;
  *(void *)(inited + 56) = 0x8000000100067330;
  *(void *)(inited + 72) = &type metadata for String;
  strcpy((char *)(inited + 80), "SettingsGroups");
  *(unsigned char *)(inited + 95) = -18;
  *(void *)(inited + 120) = &type metadata for Bool;
  *(void *)(inited + 128) = 0xD00000000000003DLL;
  *(unsigned char *)(inited + 96) = 1;
  *(void *)(inited + 136) = 0x8000000100067550;
  *(void *)(inited + 168) = &type metadata for Bool;
  *(unsigned char *)(inited + 144) = 1;
  unint64_t result = sub_1000388FC(inited);
  qword_100076FD0 = result;
  return result;
}

void *ExtensionFinder.extensions.getter()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)v29 - v5;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  if (qword_1000763B0 != -1) {
    swift_once();
  }
  sub_10002568C(qword_100076FD0);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v32 = 0;
  id v9 = [ObjCClassFromMetadata extensionsWithMatchingAttributes:isa error:&v32];

  id v10 = v32;
  if (!v9)
  {
    id v15 = v32;
    uint64_t v16 = _convertNSErrorToError(_:)();

    swift_willThrow();
    static Logger.agent.getter();
    swift_errorRetain();
    swift_errorRetain();
    Swift::Int v17 = Logger.logObject.getter();
    uint64_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, (os_log_type_t)v18))
    {
      uint64_t v30 = v0;
      Swift::Int v19 = (uint8_t *)swift_slowAlloc();
      id v32 = (id)swift_slowAlloc();
      *(_DWORD *)Swift::Int v19 = 136446210;
      uint64_t v31 = v16;
      swift_errorRetain();
      sub_100003C68(&qword_100076FE0);
      uint64_t v20 = String.init<A>(describing:)();
      uint64_t v31 = sub_1000036B0(v20, v21, (uint64_t *)&v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v18, "Failed to match extensions: %{public}s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v30);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    }
    swift_errorRelease();
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v12 = v10;

  Swift::Int v13 = sub_100025BCC(v11);
  if (!v13)
  {
    static Logger.agent.getter();
    swift_bridgeObjectRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v30 = v0;
      int64_t v24 = (uint8_t *)swift_slowAlloc();
      id v32 = (id)swift_slowAlloc();
      *(_DWORD *)int64_t v24 = 136446210;
      v29[1] = v24 + 4;
      swift_bridgeObjectRetain();
      void v29[2] = (char *)&type metadata for Any + 8;
      uint64_t v25 = Array.description.getter();
      unint64_t v27 = v26;
      swift_bridgeObjectRelease();
      uint64_t v31 = sub_1000036B0(v25, v27, (uint64_t *)&v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Invalid matching extensions %{public}s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v30);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
    }
    return &_swiftEmptyArrayStorage;
  }
  int64_t v14 = v13;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_1000252CC(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100003C68(&qword_100077278);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    Swift::Int v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    *(void *)&v36[0] = *v17;
    *((void *)&v36[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_1000043D8(&v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_1000043D8(v35, v36);
    sub_1000043D8(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_1000043D8(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_100006F44();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10002568C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100003C68(&qword_100077278);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    Swift::Int v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_1000037D4(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    void v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_1000043D8(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_1000043D8(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_1000043D8(v36, v37);
    sub_1000043D8(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)&v6[8 * v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_1000043D8(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_100006F44();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

void *sub_100025A54(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  unint64_t v12 = &_swiftEmptyArrayStorage;
  sub_100054720(0, v2, 0);
  uint64_t v3 = &_swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32)
    {
      sub_1000037D4(i, (uint64_t)v10);
      sub_100003C68(&qword_100077230);
      if (!swift_dynamicCast()) {
        break;
      }
      sub_10000DE5C(v8, (uint64_t)v11);
      sub_10000DE5C(v11, (uint64_t)v8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100054720(0, v3[2] + 1, 1);
        uint64_t v3 = v12;
      }
      unint64_t v6 = v3[2];
      unint64_t v5 = v3[3];
      if (v6 >= v5 >> 1)
      {
        sub_100054720(v5 > 1, v6 + 1, 1);
        uint64_t v3 = v12;
      }
      v3[2] = v6 + 1;
      sub_10000DE5C(v8, (uint64_t)&v3[5 * v6 + 4]);
      if (!--v2) {
        return v3;
      }
    }
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    swift_release();
    sub_100006E84((uint64_t)v8, &qword_1000771B8);
    return 0;
  }
  return v3;
}

void *sub_100025BCC(uint64_t a1)
{
  unint64_t v6 = &_swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v2) {
    return v6;
  }
  for (uint64_t i = a1 + 32; ; i += 32)
  {
    sub_1000037D4(i, (uint64_t)v5);
    sub_100020D5C(0, (unint64_t *)&qword_100077400);
    if (!swift_dynamicCast()) {
      break;
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (!--v2) {
      return v6;
    }
  }
  swift_release();

  return 0;
}

char *ExtensionFinder.extensionsForGroups(_:)()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_10002AF30(v0);
  swift_bridgeObjectRelease();
  uint64_t v2 = ExtensionFinder.extensions.getter();
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_1000245CC((unint64_t)v2, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_100025D64(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_100025F00((uint64_t)v11, a1, *(void *)(v3 + 40), *(void *)(v3 + 48), a2, a3, *(double *)(v3 + 16), *(double *)(v3 + 24));
  if (!v4)
  {
    uint64_t v6 = result;
    sub_1000043D8(v11, &v9);
    uint64_t v10 = v6;
    sub_100003C68(&qword_1000772E0);
    sub_100003C68(&qword_1000772F0);
    if (swift_dynamicCast())
    {
      return v8;
    }
    else
    {
      sub_100021DCC();
      swift_allocError();
      *unint64_t v7 = 0;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_100025E30(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_100025F00((uint64_t)v11, a1, *(void *)(v3 + 56), *(void *)(v3 + 64), a2, a3, *(double *)(v3 + 16), *(double *)(v3 + 32));
  if (!v4)
  {
    uint64_t v6 = result;
    sub_1000043D8(v11, &v9);
    uint64_t v10 = v6;
    sub_100003C68(&qword_1000772E0);
    sub_100003C68(&qword_1000772E8);
    if (swift_dynamicCast())
    {
      return v8;
    }
    else
    {
      sub_100021DCC();
      swift_allocError();
      *unint64_t v7 = 0;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_100025F00(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  uint64_t v31 = a5;
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100003C68(&qword_100077270);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100064440;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v20;
  *(void *)(inited + 48) = a3;
  *(void *)(inited + 56) = a4;
  *(void *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 72) = v21;
  unint64_t v22 = (void *)*sub_100006DCC(a2, a2[3]);
  swift_bridgeObjectRetain();
  id v23 = [v22 URL];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v24 = URL.path.getter();
  uint64_t v26 = v25;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  *(void *)(inited + 80) = v24;
  *(void *)(inited + 88) = v26;
  unint64_t v27 = sub_1000387D8(inited);
  uint64_t v28 = sub_1000252CC(v27);
  swift_bridgeObjectRelease();
  uint64_t v29 = sub_100026114(a1, v28, 1, 0, *(uint64_t *)&a7, 0, *(uint64_t *)&a8, 0, v31, a6);
  swift_bridgeObjectRelease();
  return v29;
}

uint64_t sub_100026114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10)
{
  LODWORD(v75) = a8;
  uint64_t v74 = a7;
  uint64_t v81 = a4;
  uint64_t v76 = a1;
  uint64_t v13 = sub_100003C68((uint64_t *)&unk_100077410);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v77 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v67 - v16;
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v79 = *(void *)(v18 - 8);
  uint64_t v80 = v18;
  uint64_t v19 = *(void *)(v79 + 64);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v73 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v78 = (char *)&v67 - v21;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  *(void *)&long long aBlock = 0;
  id v24 = [ObjCClassFromMetadata extensionsWithMatchingAttributes:isa error:&aBlock];

  uint64_t v25 = (void *)aBlock;
  if (!v24)
  {
    id v29 = (id)aBlock;
    _convertNSErrorToError(_:)();

LABEL_12:
    swift_willThrow();
    return a5;
  }
  uint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v27 = v25;

  uint64_t v28 = sub_100025A54(v26);
  swift_bridgeObjectRelease();
  if (!v28)
  {
LABEL_11:
    sub_100021DCC();
    swift_allocError();
    *long long v32 = 2;
    goto LABEL_12;
  }
  if (v28[2])
  {
    sub_100019094((uint64_t)(v28 + 4), (uint64_t)&aBlock);
  }
  else
  {
    uint64_t v85 = 0;
    long long aBlock = 0u;
    long long v84 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v84 + 1))
  {
    sub_100006E84((uint64_t)&aBlock, &qword_1000771B8);
    goto LABEL_11;
  }
  sub_10000DE5C(&aBlock, (uint64_t)v88);
  uint64_t v72 = a9;
  if (a6)
  {
    uint64_t v31 = 0;
  }
  else
  {
    sub_100019094((uint64_t)v88, (uint64_t)&aBlock);
    uint64_t v30 = swift_allocObject();
    sub_10000DE5C(&aBlock, v30 + 16);
    *(void *)(v30 + 56) = a9;
    *(void *)(v30 + 64) = a10;
    swift_retain();
    uint64_t v31 = sub_10002B314((uint64_t)sub_10002B934, v30);
    swift_release();
  }
  uint64_t v33 = v89;
  a5 = v90;
  sub_100006DCC(v88, v89);
  uint64_t v34 = v82;
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 8))(a3, v81, v33, a5);
  if (v34) {
    goto LABEL_26;
  }
  uint64_t v82 = v31;
  *(void *)&long long aBlock = v35;
  sub_100003C68(&qword_100077220);
  uint64_t v36 = v80;
  int v37 = swift_dynamicCast();
  uint64_t v38 = v79;
  long long v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v79 + 56);
  if (!v37)
  {
    v39(v17, 1, 1, v36);
    goto LABEL_25;
  }
  v39(v17, 0, 1, v36);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v17, 1, v36) == 1)
  {
LABEL_25:
    sub_100006E84((uint64_t)v17, (uint64_t *)&unk_100077410);
    sub_100021DCC();
    swift_allocError();
    *uint64_t v56 = 3;
    swift_willThrow();
LABEL_26:
    swift_unknownObjectRelease();
    _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v88);
    return a5;
  }
  uint64_t v81 = a10;
  long long v40 = *(void (**)(unint64_t, char *, uint64_t))(v38 + 32);
  uint64_t v69 = v38 + 32;
  uint64_t v68 = v40;
  v40((unint64_t)v78, v17, v36);
  if (v82)
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
  }
  uint64_t v41 = v89;
  a5 = v90;
  sub_100006DCC(v88, v89);
  uint64_t v42 = v80;
  int64_t v43 = *(void (**)(char *, char *, uint64_t))(v79 + 16);
  uint64_t v44 = (uint64_t)v77;
  uint64_t v71 = v79 + 16;
  uint64_t v70 = v43;
  v43(v77, v78, v80);
  v39((char *)v44, 0, 1, v42);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t))(a5 + 24))(v87, v44, v41, a5);
  sub_100006E84(v44, (uint64_t *)&unk_100077410);
  sub_10002B124((uint64_t)v87, (uint64_t)&aBlock);
  uint64_t v45 = *((void *)&v84 + 1);
  if (!*((void *)&v84 + 1))
  {
    sub_100006E84((uint64_t)&aBlock, &qword_100077228);
    goto LABEL_29;
  }
  a5 = v85;
  sub_100006DCC(&aBlock, *((uint64_t *)&v84 + 1));
  uint64_t v46 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(v45, a5);
  _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)&aBlock);
  if (!v46)
  {
LABEL_29:
    sub_100021DCC();
    swift_allocError();
    *uint64_t v58 = 1;
    swift_willThrow();
    sub_100006E84((uint64_t)v87, &qword_100077228);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v78, v80);
    goto LABEL_26;
  }
  id v67 = v46;
  uint64_t v47 = v78;
  if (v75)
  {
    uint64_t v54 = v81;
    a5 = v82;
    uint64_t v55 = v72;
  }
  else
  {
    uint64_t v48 = v89;
    uint64_t v49 = v90;
    uint64_t v75 = sub_100006DCC(v88, v89);
    uint64_t v50 = (uint64_t)v77;
    int64_t v51 = v47;
    uint64_t v52 = v80;
    uint64_t v53 = v70;
    v70(v77, v51, v80);
    v39((char *)v50, 0, 1, v52);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v50, v48, v49);
    sub_100006E84(v50, (uint64_t *)&unk_100077410);
    if (BSPIDIsBeingDebugged())
    {
      uint64_t v54 = v81;
      a5 = v82;
      uint64_t v55 = v72;
      uint64_t v47 = v78;
    }
    else
    {
      sub_100019094((uint64_t)v88, (uint64_t)&aBlock);
      unint64_t v59 = v73;
      uint64_t v60 = v78;
      uint64_t v61 = v80;
      v53(v73, v78, v80);
      unint64_t v62 = (*(unsigned __int8 *)(v79 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
      uint64_t v63 = swift_allocObject();
      sub_10000DE5C(&aBlock, v63 + 16);
      v68(v63 + v62, v59, v61);
      uint64_t v64 = (uint64_t *)(v63 + ((v19 + v62 + 7) & 0xFFFFFFFFFFFFFFF8));
      uint64_t v55 = v72;
      uint64_t v54 = v81;
      *uint64_t v64 = v72;
      v64[1] = v54;
      swift_retain();
      a5 = sub_10002B314((uint64_t)sub_10002B280, v63);
      swift_release();
      swift_unknownObjectRelease();
      uint64_t v47 = v60;
    }
  }
  uint64_t v85 = v55;
  uint64_t v86 = v54;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v84 = sub_100026FE4;
  *((void *)&v84 + 1) = &unk_100072368;
  uint64_t v65 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  id v66 = [v67 synchronousRemoteObjectProxyWithErrorHandler:v65];
  _Block_release(v65);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_100006E84((uint64_t)v87, &qword_100077228);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v47, v80);
  _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v88);
  return a5;
}

uint64_t sub_100026A78(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  long long v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.agent.getter();
  sub_100019094((uint64_t)a1, (uint64_t)v25);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v21[0] = v6;
    uint64_t v12 = swift_slowAlloc();
    unint64_t v22 = a2;
    uint64_t v13 = (uint8_t *)v12;
    uint64_t v14 = swift_slowAlloc();
    v21[1] = a3;
    uint64_t v24 = v14;
    *(_DWORD *)uint64_t v13 = 136446210;
    sub_100019094((uint64_t)v25, (uint64_t)v23);
    sub_100003C68(&qword_100077230);
    uint64_t v15 = String.init<A>(describing:)();
    v23[0] = sub_1000036B0(v15, v16, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v25);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Killing %{public}s because it took too long to start.", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v22;
    swift_slowDealloc();

    (*(void (**)(char *, void))(v7 + 8))(v9, v21[0]);
  }
  else
  {
    _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v25);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v17 = a1[3];
  uint64_t v18 = a1[4];
  sub_100006DCC(a1, v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 40))(9, v17, v18);
  sub_100021DCC();
  swift_allocError();
  *uint64_t v19 = 4;
  a2();
  return swift_errorRelease();
}

uint64_t sub_100026D24(void *a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v27 = a2;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.agent.getter();
  sub_100019094((uint64_t)a1, (uint64_t)v30);
  os_log_type_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v24 = v7;
    uint64_t v14 = (uint8_t *)v13;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v25 = a4;
    uint64_t v29 = v15;
    uint64_t v26 = a3;
    *(_DWORD *)uint64_t v14 = 136446210;
    sub_100019094((uint64_t)v30, (uint64_t)v28);
    sub_100003C68(&qword_100077230);
    uint64_t v16 = String.init<A>(describing:)();
    v28[0] = sub_1000036B0(v16, v17, &v29);
    a3 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v30);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Canceling request to %{public}s because it exceeded its allowed time.", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v24);
  }
  else
  {
    _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v30);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  uint64_t v18 = a1[3];
  uint64_t v19 = a1[4];
  sub_100006DCC(a1, v18);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(Class, uint64_t, uint64_t))(v19 + 16))(isa, v18, v19);

  sub_100021DCC();
  swift_allocError();
  unsigned char *v21 = 4;
  a3();
  return swift_errorRelease();
}

void sub_100026FE4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_10002704C()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t ExtensionFinder.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ExtensionFinder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_10002717C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100003C68(&qword_100077140);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *uint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_10002745C()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_100003C68(&qword_100077158);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    int v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_10002B940(&qword_100077148, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_100027858()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for ActivityCategory();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_100003C68((uint64_t *)&unk_1000771A0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    int v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_10002B940((unint64_t *)&unk_100077190, (void (*)(uint64_t))&type metadata accessor for ActivityCategory);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_100027C54()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for WebDomain();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_100003C68(&qword_100077188);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    int v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_10002B940(&qword_100076DA8, (void (*)(uint64_t))&type metadata accessor for WebDomain);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_100028050()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for Application();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_100003C68((uint64_t *)&unk_100077170);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    int v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_10002B940((unint64_t *)&unk_100077160, (void (*)(uint64_t))&type metadata accessor for Application);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_10002844C(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_10002B940(&qword_100077148, (void (*)(uint64_t))&type metadata accessor for URL);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    unint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    unint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    unint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    unint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      unint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_10002B940(&qword_100077150, (void (*)(uint64_t))&type metadata accessor for URL);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      unint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_1000290DC((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_100028770(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for ActivityCategory();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_10002B940((unint64_t *)&unk_100077190, (void (*)(uint64_t))&type metadata accessor for ActivityCategory);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    unint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    unint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    unint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    unint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      unint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_10002B940(&qword_100076E40, (void (*)(uint64_t))&type metadata accessor for ActivityCategory);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      unint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_100029398((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_100028A94(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for WebDomain();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_10002B940(&qword_100076DA8, (void (*)(uint64_t))&type metadata accessor for WebDomain);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    unint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    unint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    unint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    unint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      unint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_10002B940(&qword_100077180, (void (*)(uint64_t))&type metadata accessor for WebDomain);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      unint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_100029654((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_100028DB8(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Application();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_10002B940((unint64_t *)&unk_100077160, (void (*)(uint64_t))&type metadata accessor for Application);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    unint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    unint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    unint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    unint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      unint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_10002B940(&qword_100076E30, (void (*)(uint64_t))&type metadata accessor for Application);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      unint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_100029910((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_1000290DC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  unint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_10002745C();
  }
  else
  {
    if (v11 > v10)
    {
      sub_100029DC0((uint64_t (*)(void))&type metadata accessor for URL, &qword_100077158);
      goto LABEL_12;
    }
    sub_10002A070();
  }
  uint64_t v12 = *v3;
  sub_10002B940(&qword_100077148, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    unint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    unint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_10002B940(&qword_100077150, (void (*)(uint64_t))&type metadata accessor for URL);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100029398(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for ActivityCategory();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  unint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100027858();
  }
  else
  {
    if (v11 > v10)
    {
      sub_100029DC0((uint64_t (*)(void))&type metadata accessor for ActivityCategory, (uint64_t *)&unk_1000771A0);
      goto LABEL_12;
    }
    sub_10002A420();
  }
  uint64_t v12 = *v3;
  sub_10002B940((unint64_t *)&unk_100077190, (void (*)(uint64_t))&type metadata accessor for ActivityCategory);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    unint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    unint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_10002B940(&qword_100076E40, (void (*)(uint64_t))&type metadata accessor for ActivityCategory);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100029654(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for WebDomain();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  unint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100027C54();
  }
  else
  {
    if (v11 > v10)
    {
      sub_100029DC0((uint64_t (*)(void))&type metadata accessor for WebDomain, &qword_100077188);
      goto LABEL_12;
    }
    sub_10002A7D0();
  }
  uint64_t v12 = *v3;
  sub_10002B940(&qword_100076DA8, (void (*)(uint64_t))&type metadata accessor for WebDomain);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    unint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    unint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_10002B940(&qword_100077180, (void (*)(uint64_t))&type metadata accessor for WebDomain);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100029910(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for Application();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  unint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100028050();
  }
  else
  {
    if (v11 > v10)
    {
      sub_100029DC0((uint64_t (*)(void))&type metadata accessor for Application, (uint64_t *)&unk_100077170);
      goto LABEL_12;
    }
    sub_10002AB80();
  }
  uint64_t v12 = *v3;
  sub_10002B940((unint64_t *)&unk_100077160, (void (*)(uint64_t))&type metadata accessor for Application);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    unint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    unint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_10002B940(&qword_100076E30, (void (*)(uint64_t))&type metadata accessor for Application);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_100029BCC()
{
  uint64_t v1 = v0;
  sub_100003C68(&qword_100077140);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    unint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100029D80()
{
  return sub_100029DC0((uint64_t (*)(void))&type metadata accessor for WebDomain, &qword_100077188);
}

void *sub_100029DA0()
{
  return sub_100029DC0((uint64_t (*)(void))&type metadata accessor for Application, (uint64_t *)&unk_100077170);
}

void *sub_100029DC0(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = a1(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - v7;
  sub_100003C68(a2);
  uint64_t v9 = *v2;
  uint64_t v10 = static _SetStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_30:
    uint64_t *v4 = v11;
    return result;
  }
  uint64_t result = (void *)(v10 + 56);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  BOOL v26 = v4;
  uint64_t v27 = (const void *)(v9 + 56);
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v13) {
    uint64_t result = memmove(result, v27, 8 * v13);
  }
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 56);
  int64_t v28 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v22 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v22);
    ++v15;
    if (!v23)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_28;
      }
      unint64_t v23 = *((void *)v27 + v15);
      if (!v23)
      {
        int64_t v15 = v22 + 2;
        if (v22 + 2 >= v28) {
          goto LABEL_28;
        }
        unint64_t v23 = *((void *)v27 + v15);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v18 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v15 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v6 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v21, v5);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + v21, v8, v5);
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v28)
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t v4 = v26;
    goto LABEL_30;
  }
  unint64_t v23 = *((void *)v27 + v24);
  if (v23)
  {
    int64_t v15 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v15);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_10002A070()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_100003C68(&qword_100077158);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_10002B940(&qword_100077148, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10002A420()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ActivityCategory();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_100003C68((uint64_t *)&unk_1000771A0);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_10002B940((unint64_t *)&unk_100077190, (void (*)(uint64_t))&type metadata accessor for ActivityCategory);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10002A7D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for WebDomain();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_100003C68(&qword_100077188);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_10002B940(&qword_100076DA8, (void (*)(uint64_t))&type metadata accessor for WebDomain);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10002AB80()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Application();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_100003C68((uint64_t *)&unk_100077170);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_10002B940((unint64_t *)&unk_100077160, (void (*)(uint64_t))&type metadata accessor for Application);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10002AF30(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_100002C94(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

unint64_t sub_10002AFCC()
{
  unint64_t result = qword_100076FE8;
  if (!qword_100076FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100076FE8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ExtensionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10002B0ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtensionError()
{
  return &type metadata for ExtensionError;
}

uint64_t sub_10002B124(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003C68(&qword_100077228);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002B18C()
{
  return swift_release();
}

uint64_t sub_10002B194()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  _s20ManagedSettingsAgent12ClientFinderVwxx_0(v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10002B280()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = v0 + v2;
  uint64_t v4 = v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = *(void (**)(void))v4;
  uint64_t v6 = *(void *)(v4 + 8);

  return sub_100026D24((void *)(v0 + 16), v3, v5, v6);
}

uint64_t sub_10002B314(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = a2;
  uint64_t v43 = a1;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v48 = *(void *)(v2 - 8);
  uint64_t v49 = v2;
  __chkstk_darwin(v2);
  uint64_t v47 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v46 = v4;
  __chkstk_darwin(v4);
  uint64_t v44 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v41 = *(void *)(v6 - 8);
  uint64_t v42 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  int64_t v40 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v39 = (char *)&v34 - v9;
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v50 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  int64_t v15 = (char *)&v34 - v14;
  uint64_t v16 = type metadata accessor for OS_dispatch_source.TimerFlags();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  unint64_t v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100020D5C(0, &qword_100077238);
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_10002B940(&qword_100077240, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
  sub_100003C68(&qword_100077248);
  sub_10002B988((unint64_t *)&unk_100077250, &qword_100077248);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v20 = static OS_dispatch_source.makeTimerSource(flags:queue:)();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  uint64_t ObjectType = swift_getObjectType();
  static DispatchTime.now()();
  + infix(_:_:)();
  int64_t v22 = *(void (**)(char *, uint64_t))(v50 + 8);
  v50 += 8;
  int64_t v36 = v22;
  v22(v13, v10);
  uint64_t v24 = v41;
  uint64_t v23 = v42;
  uint64_t v25 = *(void (**)(char *, void, uint64_t))(v41 + 104);
  uint64_t v26 = v39;
  v25(v39, enum case for DispatchTimeInterval.never(_:), v42);
  unint64_t v27 = v40;
  *(void *)int64_t v40 = 0;
  v25(v27, enum case for DispatchTimeInterval.nanoseconds(_:), v23);
  uint64_t v38 = ObjectType;
  uint64_t v37 = v20;
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
  unint64_t v28 = *(void (**)(char *, uint64_t))(v24 + 8);
  v28(v27, v23);
  v28(v26, v23);
  v36(v15, v10);
  if (v43)
  {
    aBlock[4] = v43;
    aBlock[5] = v35;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10002C398;
    aBlock[3] = &unk_1000723E0;
    char v29 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
  }
  else
  {
    char v29 = 0;
  }
  unint64_t v30 = v44;
  static DispatchQoS.unspecified.getter();
  BOOL v31 = v47;
  sub_10002704C();
  uint64_t v32 = v37;
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v31, v49);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v30, v46);
  OS_dispatch_source.resume()();
  return v32;
}

uint64_t sub_10002B8F4()
{
  _s20ManagedSettingsAgent12ClientFinderVwxx_0(v0 + 16);
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10002B934()
{
  return sub_100026A78((void *)(v0 + 16), *(void (**)(void))(v0 + 56), *(void *)(v0 + 64));
}

uint64_t sub_10002B940(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002B988(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100009774(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Dictionary<>.incorporate(persistableKeysAndValues:scope:)(uint64_t a1, uint64_t a2)
{
  uint64_t v66 = a2;
  uint64_t v60 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v61 = (char *)v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for SettingScope();
  __chkstk_darwin(v65);
  uint64_t v64 = (char *)v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v68 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v69 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v63 = (void (**)(char *, uint64_t))(v5 + 8);
  unint64_t v59 = (void (**)(char *, uint64_t))(v3 + 8);
  swift_bridgeObjectRetain();
  int64_t v11 = 0;
  *(void *)&long long v12 = 136446210;
  long long v58 = v12;
  v57[1] = (char *)&type metadata for Any + 8;
  uint64_t v62 = a1;
  while (v10)
  {
    unint64_t v13 = __clz(__rbit64(v10));
    uint64_t v14 = (v10 - 1) & v10;
    unint64_t v15 = v13 | (v11 << 6);
LABEL_17:
    unint64_t v19 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    int64_t v22 = *(void **)(*(void *)(a1 + 56) + 8 * v15);
    swift_bridgeObjectRetain();
    id v23 = v22;
    static SettingMetadataDirectory.metadata(for:)();
    unint64_t v70 = v14;
    uint64_t v24 = a1;
    sub_10000DE5C(&v71, (uint64_t)v73);
    sub_100006DCC(v73, v74);
    uint64_t v25 = v64;
    dispatch thunk of SettingMetadataProtocol.scope.getter();
    sub_10002C1AC();
    uint64_t v26 = v65;
    LOBYTE(v22) = dispatch thunk of static Comparable.< infix(_:_:)();
    (*v63)(v25, v26);
    if (v22)
    {
      swift_bridgeObjectRelease();

      _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v73);
      a1 = v24;
      unint64_t v10 = v70;
    }
    else
    {
      uint64_t v27 = *v67;
      if (!*(void *)(*v67 + 16)) {
        goto LABEL_28;
      }
      swift_bridgeObjectRetain();
      unint64_t v28 = sub_100019BD4(v20, v21);
      if (v29)
      {
        id v30 = *(id *)(*(void *)(v27 + 56) + 8 * v28);
        swift_bridgeObjectRelease();
        sub_100006DCC(v73, v74);
        dispatch thunk of SettingMetadataProtocol.combineOperator.getter();
        sub_100006DCC(&v71, *((uint64_t *)&v72 + 1));
        BOOL v31 = (void *)CombineOperator.combinePeristableValues(_:_:)((NSObject)v30, (NSObject)v23);
        _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)&v71);
        if (v31)
        {
          id v32 = v31;
          uint64_t v33 = v67;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&long long v71 = *v33;
          *uint64_t v33 = 0x8000000000000000;
          sub_10001DFE8((uint64_t)v32, v20, v21, isUniquelyReferenced_nonNull_native);
          *uint64_t v33 = v71;

          goto LABEL_38;
        }
        uint64_t v52 = v61;
        static Logger.effective.getter();
        swift_bridgeObjectRetain();
        uint64_t v53 = Logger.logObject.getter();
        os_log_type_t v54 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v53, v54))
        {
          uint64_t v55 = swift_slowAlloc();
          *(void *)&long long v71 = swift_slowAlloc();
          *(_DWORD *)uint64_t v55 = v58;
          swift_bridgeObjectRetain();
          *(void *)(v55 + 4) = sub_1000036B0(v20, v21, (uint64_t *)&v71);
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v53, v54, "Failed to combine setting values for %{public}s", (uint8_t *)v55, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*v59)(v61, v60);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*v59)(v52, v60);
        }
        a1 = v62;
        unint64_t v10 = v70;
        _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v73);
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_28:
        id v35 = v23;
        int64_t v36 = v67;
        char v37 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v71 = *v36;
        uint64_t v38 = v71;
        *int64_t v36 = 0x8000000000000000;
        unint64_t v40 = sub_100019BD4(v20, v21);
        uint64_t v41 = *(void *)(v38 + 16);
        BOOL v42 = (v39 & 1) == 0;
        uint64_t v43 = v41 + v42;
        if (__OFADD__(v41, v42)) {
          goto LABEL_47;
        }
        char v44 = v39;
        if (*(void *)(v38 + 24) >= v43)
        {
          if (v37)
          {
            uint64_t v47 = (void *)v71;
            if ((v39 & 1) == 0) {
              goto LABEL_32;
            }
          }
          else
          {
            sub_10001F468();
            uint64_t v47 = (void *)v71;
            if ((v44 & 1) == 0) {
              goto LABEL_32;
            }
          }
        }
        else
        {
          sub_10001C448(v43, v37);
          unint64_t v45 = sub_100019BD4(v20, v21);
          if ((v44 & 1) != (v46 & 1)) {
            goto LABEL_50;
          }
          unint64_t v40 = v45;
          uint64_t v47 = (void *)v71;
          if ((v44 & 1) == 0)
          {
LABEL_32:
            v47[(v40 >> 6) + 8] |= 1 << v40;
            uint64_t v48 = (uint64_t *)(v47[6] + 16 * v40);
            uint64_t *v48 = v20;
            v48[1] = v21;
            *(void *)(v47[7] + 8 * v40) = v35;
            uint64_t v49 = v47[2];
            BOOL v16 = __OFADD__(v49, 1);
            uint64_t v50 = v49 + 1;
            if (v16) {
              goto LABEL_49;
            }
            v47[2] = v50;
            swift_bridgeObjectRetain();
            goto LABEL_37;
          }
        }
        uint64_t v51 = v47[7];

        *(void *)(v51 + 8 * v40) = v35;
LABEL_37:
        *id v67 = v47;

LABEL_38:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        a1 = v62;
        _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v73);
        unint64_t v10 = v70;
      }
    }
  }
  BOOL v16 = __OFADD__(v11++, 1);
  if (v16)
  {
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (v11 >= v69) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v68 + 8 * v11);
  if (v17)
  {
LABEL_16:
    uint64_t v14 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
    goto LABEL_17;
  }
  int64_t v18 = v11 + 1;
  if (v11 + 1 >= v69) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v68 + 8 * v18);
  if (v17) {
    goto LABEL_15;
  }
  int64_t v18 = v11 + 2;
  if (v11 + 2 >= v69) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v68 + 8 * v18);
  if (v17) {
    goto LABEL_15;
  }
  int64_t v18 = v11 + 3;
  if (v11 + 3 >= v69) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v68 + 8 * v18);
  if (v17)
  {
LABEL_15:
    int64_t v11 = v18;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v69) {
      return swift_release();
    }
    unint64_t v17 = *(void *)(v68 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_16;
    }
  }
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10002C14C(uint64_t a1)
{
  uint64_t v2 = sub_100003C68(&qword_100076D18);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10002C1AC()
{
  unint64_t result = qword_100077320;
  if (!qword_100077320)
  {
    type metadata accessor for SettingScope();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100077320);
  }
  return result;
}

uint64_t sub_10002C204()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC20ManagedSettingsAgent5Agent_listener];
  [v2 setDelegate:v1];
  [v2 activate];
  uint64_t v3 = *(void **)&v1[OBJC_IVAR____TtC20ManagedSettingsAgent5Agent_publisherListener];
  [v3 setDelegate:v1];
  NSXPCListener.setNonLaunching(_:)(1);
  [v3 activate];
  sub_100023384();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v1;
  v8[4] = sub_100032B74;
  v8[5] = v4;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  long long v8[2] = sub_10002E514;
  v8[3] = &unk_100072700;
  uint64_t v5 = _Block_copy(v8);
  uint64_t v6 = v1;
  swift_release();
  xpc_set_event_stream_handler("com.apple.notifyd.matching", 0, v5);
  _Block_release(v5);
  if (qword_1000763A0 != -1) {
    swift_once();
  }
  swift_retain();
  sub_10000B31C();
  return swift_release();
}

uint64_t sub_10002C398(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_10002C3DC()
{
  uint64_t v1 = OBJC_IVAR____TtC20ManagedSettingsAgent5Agent____lazy_storage___shieldExtension;
  if (*(void *)(v0 + OBJC_IVAR____TtC20ManagedSettingsAgent5Agent____lazy_storage___shieldExtension))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC20ManagedSettingsAgent5Agent____lazy_storage___shieldExtension);
  }
  else
  {
    type metadata accessor for ShieldExtension();
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(void *)(v2 + 144) = 0;
    *(void *)(v0 + v1) = v2;
    swift_retain();
  }
  swift_unknownObjectRetain();
  return v2;
}

void *sub_10002C458()
{
  uint64_t v1 = OBJC_IVAR____TtC20ManagedSettingsAgent5Agent____lazy_storage___overrideSettingsExtension;
  if (*(void *)(v0 + OBJC_IVAR____TtC20ManagedSettingsAgent5Agent____lazy_storage___overrideSettingsExtension))
  {
    uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC20ManagedSettingsAgent5Agent____lazy_storage___overrideSettingsExtension);
  }
  else
  {
    type metadata accessor for OverrideSettingsExtension();
    uint64_t v2 = (void *)swift_allocObject();
    uint64_t v3 = sub_100020D5C(0, (unint64_t *)&qword_100077400);
    uint64_t v4 = type metadata accessor for ExtensionFinder();
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_100064F20;
    *(void *)(v5 + 32) = 0x3FE0000000000000;
    *(void *)(v5 + 40) = 0xD00000000000002FLL;
    *(void *)(v5 + 48) = 0x80000001000666F0;
    *(void *)(v5 + 56) = 0xD000000000000038;
    *(void *)(v5 + 64) = 0x8000000100066720;
    *(void *)(v5 + 72) = v3;
    v2[5] = v4;
    v2[6] = &off_1000722A8;
    v2[2] = v5;
    if (qword_1000763B8 != -1) {
      swift_once();
    }
    uint64_t v6 = qword_100079598;
    v2[10] = type metadata accessor for EffectiveSettings();
    v2[11] = &off_1000727E0;
    v2[7] = v6;
    *(void *)(v0 + v1) = v2;
    swift_retain();
    swift_retain();
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRetain();
  return v2;
}

id sub_10002C5B8()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = OBJC_IVAR____TtC20ManagedSettingsAgent5Agent_listener;
  uint64_t v4 = v0;
  static ManagedSettingsService.name.getter();
  id v5 = objc_allocWithZone((Class)NSXPCListener);
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [v5 initWithMachServiceName:v6];

  *(void *)&v1[v3] = v7;
  uint64_t v8 = OBJC_IVAR____TtC20ManagedSettingsAgent5Agent_publisherListener;
  static ManagedSettingsPublisherService.name.getter();
  id v9 = objc_allocWithZone((Class)NSXPCListener);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v9 initWithMachServiceName:v10];

  *(void *)&v4[v8] = v11;
  long long v12 = (uint64_t *)&v4[OBJC_IVAR____TtC20ManagedSettingsAgent5Agent_postInstallMigrator];
  uint64_t v12[3] = type metadata accessor for Locations();
  v12[4] = (uint64_t)&protocol witness table for Locations;
  sub_100006CC0(v12);
  Locations.init()();
  *(void *)&v4[OBJC_IVAR____TtC20ManagedSettingsAgent5Agent____lazy_storage___shieldExtension] = 0;
  *(void *)&v4[OBJC_IVAR____TtC20ManagedSettingsAgent5Agent____lazy_storage___overrideSettingsExtension] = 0;
  *(void *)&v4[OBJC_IVAR____TtC20ManagedSettingsAgent5Agent_overrideEntitlements] = 0;

  v14.receiver = v4;
  v14.super_class = ObjectType;
  return objc_msgSendSuper2(&v14, "init");
}

id sub_10002C754@<X0>(id result@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5 = (uint64_t)result;
  uint64_t v7 = *(void *)(v3 + OBJC_IVAR____TtC20ManagedSettingsAgent5Agent_overrideEntitlements);
  if (v7)
  {
    if (*(void *)(v7 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v8 = sub_100019BD4(v5, a2);
      if (v9)
      {
        sub_1000037D4(*(void *)(v7 + 56) + 32 * v8, (uint64_t)a3);
      }
      else
      {
        *a3 = 0u;
        a3[1] = 0u;
      }
      return (id)swift_bridgeObjectRelease();
    }
LABEL_8:
    *a3 = 0u;
    a3[1] = 0u;
    return result;
  }
  unint64_t result = [self currentConnection];
  if (!result) {
    goto LABEL_8;
  }
  NSString v10 = result;
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v10 valueForEntitlement:v11];

  if (v12)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  return (id)sub_100032A94((uint64_t)v13, (uint64_t)a3);
}

id sub_10002C8A8(char a1)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (![self isAfterFirstUnlock])
  {
    char v12 = 2;
LABEL_10:
    sub_100032A40();
    swift_allocError();
    *unint64_t v13 = v12;
    return (id)swift_willThrow();
  }
  if ((sub_10002CB00(a1) & 1) == 0)
  {
    char v12 = 0;
    goto LABEL_10;
  }
  uint64_t v8 = OBJC_IVAR____TtC20ManagedSettingsAgent5Agent_postInstallMigrator;
  if (qword_1000763A8 != -1) {
    swift_once();
  }
  char v9 = &PersistenceRecord;
  [(id)qword_100076FC8 lock];
  if (byte_100079590) {
    return [*(id *)&v9[56].ivar_base_size unlock];
  }
  type metadata accessor for Persistence();
  sub_100006DCC((void *)(v1 + v8), *(void *)(v1 + v8 + 24));
  dispatch thunk of Locatable.dataVersionPath.getter();
  uint64_t v10 = static Persistence.dataVersion(from:)();
  if (v2)
  {
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    uint64_t v15 = v10;
    char v16 = v11;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if ((v16 & 1) == 0)
    {
      byte_100079590 = v15 == 1;
      char v9 = &PersistenceRecord;
      if (v15 == 1) {
        return [*(id *)&v9[56].ivar_base_size unlock];
      }
      goto LABEL_15;
    }
  }
  char v9 = &PersistenceRecord;
  byte_100079590 = 0;
LABEL_15:
  sub_10002378C();
  return [*(id *)&v9[56].ivar_base_size unlock];
}

uint64_t sub_10002CB00(char a1)
{
  uint64_t result = 1;
  switch(a1)
  {
    case 1:
      uint64_t v3 = (void *)0xD000000000000028;
      uint64_t v4 = "com.apple.private.managed-settings.blame";
      goto LABEL_8;
    case 2:
      uint64_t v3 = (void *)0xD00000000000002ELL;
      uint64_t v4 = "com.apple.private.managed-settings.diagnostics";
      goto LABEL_8;
    case 3:
      return result;
    case 4:
      unint64_t v5 = 0x8000000100067740;
      uint64_t v3 = (void *)0xD00000000000001DLL;
      goto LABEL_10;
    case 5:
    case 6:
      return sub_10002E0B0();
    default:
      uint64_t v3 = (void *)0xD00000000000002BLL;
      uint64_t v4 = "com.apple.private.managed-settings.override";
LABEL_8:
      unint64_t v5 = (unint64_t)(v4 - 32) | 0x8000000000000000;
LABEL_10:
      sub_10002C754(v3, v5, &v7);
      if (v8)
      {
        if (swift_dynamicCast()) {
          return v6;
        }
      }
      else
      {
        sub_100006E84((uint64_t)&v7, &qword_1000772F8);
      }
      return 0;
  }
}

id sub_10002CC40()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for Agent()
{
  return self;
}

uint64_t sub_10002CDE4(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7, void (*a8)(id, char *, uint64_t, uint64_t, uint64_t, uint64_t, id, void *))
{
  uint64_t v13 = sub_100003C68((uint64_t *)&unk_100077410);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v16 = _Block_copy(a7);
  if (a4)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = type metadata accessor for UUID();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v15, 0, 1, v17);
  }
  else
  {
    uint64_t v18 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v15, 1, 1, v18);
  }
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;
  _Block_copy(v16);
  id v25 = a3;
  id v26 = a1;
  a8(v25, v15, v19, v21, v22, v24, v26, v16);
  _Block_release(v16);
  _Block_release(v16);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_100006E84((uint64_t)v15, (uint64_t *)&unk_100077410);
}

uint64_t sub_10002D308(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, const char *a7, void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13 = sub_100003C68((uint64_t *)&unk_100077410);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v16 = _Block_copy(a6);
  if (a3)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = type metadata accessor for UUID();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v15, 0, 1, v17);
  }
  else
  {
    uint64_t v18 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v15, 1, 1, v18);
  }
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;
  _Block_copy(v16);
  id v25 = a1;
  sub_100030230((uint64_t)v15, v19, v21, v22, v24, (uint64_t)v25, (uint64_t)v16, a7, a8);
  _Block_release(v16);
  _Block_release(v16);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_100006E84((uint64_t)v15, (uint64_t *)&unk_100077410);
}

uint64_t sub_10002D508(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7, const char *a8, void (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v14 = sub_100003C68((uint64_t *)&unk_100077410);
  __chkstk_darwin(v14 - 8);
  char v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = _Block_copy(a7);
  if (a4)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = type metadata accessor for UUID();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v16, 0, 1, v18);
  }
  else
  {
    uint64_t v19 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v16, 1, 1, v19);
  }
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;
  _Block_copy(v17);
  id v26 = a3;
  uint64_t v27 = a1;
  sub_1000305AC((uint64_t)v26, (uint64_t)v16, v20, v22, v23, v25, v27, (uint64_t)v17, a8, a9);
  _Block_release(v17);
  _Block_release(v17);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_100006E84((uint64_t)v16, (uint64_t *)&unk_100077410);
}

void sub_10002DA68(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  unsigned __int8 v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  a4();
  _Block_release(v6);
  _Block_release(v6);
}

uint64_t sub_10002DB2C(void *a1, int a2, int a3, int a4, void *aBlock, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, id, void *))
{
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;
  _Block_copy(v8);
  id v15 = a1;
  a6(v9, v11, v12, v14, v15, v8);
  _Block_release(v8);
  _Block_release(v8);

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10002DC14(void *a1, int a2, int a3, int a4, int a5, void *aBlock, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id, void *))
{
  uint64_t v9 = _Block_copy(aBlock);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;
  _Block_copy(v9);
  id v19 = a1;
  a7(v10, v12, v13, v15, v16, v18, v19, v9);
  _Block_release(v9);
  _Block_release(v9);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10002DDE4(void *a1, int a2, uint64_t a3, int a4, int a5, void *aBlock, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id, void *))
{
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;
  _Block_copy(v10);
  id v17 = a1;
  a7(a3, v11, v13, v14, v16, v17, v10);
  _Block_release(v10);
  _Block_release(v10);

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

id sub_10002DF50(uint64_t a1, uint64_t a2, char a3)
{
  if (qword_100076398 != -1) {
    swift_once();
  }
  swift_getObjectType();
  int v4 = dispatch thunk of XPCConnectable.processIdentifier.getter();
  return sub_1000086E8(v4, a3 & 1);
}

uint64_t sub_10002E0B0()
{
  sub_10002C754((id)0xD000000000000028, 0x80000001000677F0, &v2);
  if (v3)
  {
    if swift_dynamicCast() && (v1) {
      return 1;
    }
  }
  else
  {
    sub_100006E84((uint64_t)&v2, &qword_1000772F8);
  }
  sub_10002C754((id)0xD000000000000023, 0x8000000100067820, &v2);
  if (v3)
  {
    uint64_t result = swift_dynamicCast();
    if (result) {
      return v1;
    }
  }
  else
  {
    sub_100006E84((uint64_t)&v2, &qword_1000772F8);
    return 0;
  }
  return result;
}

uint64_t sub_10002E1AC(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unsigned __int8 v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v26 - v7;
  uint64_t v9 = (const char *)XPC_EVENT_KEY_NAME.getter();
  if (xpc_dictionary_get_string(a1, v9))
  {
    uint64_t v10 = String.init(cString:)();
    unint64_t v12 = v11;
    static Logger.agent.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v27 = v2;
      uint64_t v16 = (uint8_t *)v15;
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v28 = sub_1000036B0(v10, v12, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Received notification %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v27);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    }
    id v21 = [self pairedDeviceRegistryDeviceDidPairDarwinNotification];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;

    if (v22 == v10 && v24 == v12)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v25 & 1) == 0) {
        return result;
      }
    }
    return sub_100032B7C();
  }
  else
  {
    static Logger.agent.getter();
    id v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      id v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unable to retrieve notifyd event name", v19, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
}

uint64_t sub_10002E514(uint64_t a1)
{
  unsigned __int8 v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_10002E574(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned __int8 v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [self currentConnection];
  if (v7)
  {
    uint64_t v8 = v7;
    unsigned int v9 = [v7 processIdentifier];
  }
  else
  {
    unsigned int v9 = 0;
  }
  static Logger.agent.getter();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v12 = 67240192;
    v14[1] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Update effective settings received from process %{public}d", v12, 8u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_10002C8A8(6);
  if (qword_1000763C0 != -1) {
    swift_once();
  }
  swift_retain();
  sub_10003E81C();
  swift_release();
  return (*(uint64_t (**)(uint64_t, void))(a2 + 16))(a2, 0);
}

void sub_10002E7E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned __int8 v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [self currentConnection];
  if (v7)
  {
    uint64_t v8 = v7;
    unsigned int v9 = [v7 processIdentifier];
  }
  else
  {
    unsigned int v9 = 0;
  }
  static Logger.agent.getter();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v12 = 67240192;
    v30[0] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Effective media settings received from process %{public}d", v12, 8u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_10002C8A8(3);
  uint64_t v13 = self;
  id v14 = [v13 standardUserDefaults];
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v14 objectForKey:v15];

  if (v16)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v28 = 0u;
    long long v29 = 0u;
  }
  sub_100032A94((uint64_t)&v28, (uint64_t)v30);
  if (v31)
  {
    sub_100020D5C(0, (unint64_t *)&unk_100077420);
    if (swift_dynamicCast())
    {
      id v17 = v27;
      id v18 = [v27 integerValue];

      goto LABEL_16;
    }
  }
  else
  {
    sub_100006E84((uint64_t)v30, &qword_1000772F8);
  }
  if (qword_1000763B8 != -1) {
    swift_once();
  }
  swift_retain();
  id v18 = (id)sub_10003552C();
  swift_release();
LABEL_16:
  id v19 = [v13 standardUserDefaults];
  NSString v20 = String._bridgeToObjectiveC()();
  id v21 = [v19 objectForKey:v20];

  if (v21)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v28 = 0u;
    long long v29 = 0u;
  }
  sub_100032A94((uint64_t)&v28, (uint64_t)v30);
  if (v31)
  {
    sub_100020D5C(0, (unint64_t *)&unk_100077420);
    if (swift_dynamicCast())
    {
      id v22 = v27;
      id v23 = [v27 integerValue];

      goto LABEL_26;
    }
  }
  else
  {
    sub_100006E84((uint64_t)v30, &qword_1000772F8);
  }
  if (qword_1000763B8 != -1) {
    swift_once();
  }
  swift_retain();
  id v23 = (id)sub_100035544();
  swift_release();
LABEL_26:
  id v24 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v18];
  id v25 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v23];
  (*(void (**)(uint64_t, id, id, void))(a2 + 16))(a2, v24, v25, 0);
}

void sub_10002ED08(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v33 = a3;
  unint64_t v34 = a4;
  uint64_t v32 = a2;
  uint64_t v35 = a1;
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  NSString v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = [self currentConnection];
  if (v16)
  {
    id v17 = v16;
    unsigned int v18 = [v16 processIdentifier];
  }
  else
  {
    unsigned int v18 = 0;
  }
  static Logger.agent.getter();
  id v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    id v21 = (uint8_t *)swift_slowAlloc();
    v31[1] = a7;
    uint64_t v22 = a5;
    uint64_t v23 = a8;
    unint64_t v24 = a6;
    id v25 = v21;
    *(_DWORD *)id v21 = 67240192;
    LODWORD(v37) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Get received from process %{public}d", v25, 8u);
    a6 = v24;
    a8 = v23;
    a5 = v22;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  sub_10002C8A8(6);
  *(void *)&long long v37 = 0;
  static Set._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v27 = v37;
  if (!(void)v37)
  {
    sub_100032A40();
    swift_allocError();
    unsigned char *v29 = 1;
    swift_willThrow();
    swift_errorRetain();
    uint64_t v26 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(a8 + 16))(a8, 0, v26);

    swift_errorRelease();
    swift_errorRelease();
    return;
  }
  if (qword_1000763C0 != -1) {
    swift_once();
  }
  swift_retain();
  sub_10002C754((id)0xD000000000000028, 0x80000001000677F0, &v37);
  if (!v38)
  {
    sub_100006E84((uint64_t)&v37, &qword_1000772F8);
    goto LABEL_14;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_14:
    int v28 = 0;
    goto LABEL_15;
  }
  int v28 = v36;
LABEL_15:
  sub_100039D14(v27, v32, v33, v34, a5, a6, v28);
  swift_release();
  swift_bridgeObjectRelease();
  sub_100020D5C(0, (unint64_t *)&qword_100076508);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, Class, void))(a8 + 16))(a8, isa, 0);
}

uint64_t sub_10002F10C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v54 = a1;
  uint64_t v55 = a7;
  uint64_t v52 = a5;
  unint64_t v53 = a6;
  uint64_t v50 = a3;
  unint64_t v51 = a4;
  uint64_t v49 = a2;
  uint64_t v9 = sub_100003C68((uint64_t *)&unk_100077410);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  NSString v15 = (char *)&v46 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v48 = (uint64_t)&v46 - v17;
  __chkstk_darwin(v16);
  id v19 = (char *)&v46 - v18;
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v24 = [self currentConnection];
  if (v24)
  {
    id v25 = v24;
    unsigned int v26 = [v24 processIdentifier];
  }
  else
  {
    unsigned int v26 = 0;
  }
  static Logger.agent.getter();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    long long v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v47 = v19;
    id v30 = v12;
    uint64_t v31 = v15;
    uint64_t v32 = v29;
    *(_DWORD *)long long v29 = 67240192;
    LODWORD(v57) = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Remove received from process %{public}d", v32, 8u);
    NSString v15 = v31;
    uint64_t v12 = v30;
    id v19 = v47;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  sub_10002C8A8(6);
  *(void *)&long long v57 = 0;
  static Set._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v39 = v57;
  if ((void)v57)
  {
    if (qword_1000763C0 != -1) {
      swift_once();
    }
    swift_retain();
    sub_10002C754((id)0xD000000000000028, 0x80000001000677F0, &v57);
    if (v58)
    {
      if (swift_dynamicCast())
      {
        int v40 = v56;
LABEL_20:
        sub_10003B2E4(v39, v49, v50, v51, v52, v53, v40, (uint64_t)v19);
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v42 = v48;
        sub_100019288((uint64_t)v19, v48, (uint64_t *)&unk_100077410);
        uint64_t v43 = type metadata accessor for UUID();
        uint64_t v44 = *(void *)(v43 - 8);
        Class isa = 0;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43) != 1)
        {
          Class isa = UUID._bridgeToObjectiveC()().super.isa;
          (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v43);
        }
        (*(void (**)(uint64_t, Class, void))(a8 + 16))(a8, isa, 0);

        return sub_100006E84((uint64_t)v19, (uint64_t *)&unk_100077410);
      }
    }
    else
    {
      sub_100006E84((uint64_t)&v57, &qword_1000772F8);
    }
    int v40 = 0;
    goto LABEL_20;
  }
  sub_100032A40();
  swift_allocError();
  *uint64_t v41 = 1;
  swift_willThrow();
  uint64_t v33 = type metadata accessor for UUID();
  uint64_t v34 = *(void *)(v33 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56))(v15, 1, 1, v33);
  sub_100019288((uint64_t)v15, (uint64_t)v12, (uint64_t *)&unk_100077410);
  int v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48))(v12, 1, v33);
  swift_errorRetain();
  Class v36 = 0;
  if (v35 != 1)
  {
    Class v36 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v33);
  }
  long long v37 = (void *)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, Class, void *))(a8 + 16))(a8, v36, v37);

  swift_errorRelease();
  swift_errorRelease();
  id v19 = v15;
  return sub_100006E84((uint64_t)v19, (uint64_t *)&unk_100077410);
}

uint64_t sub_10002F6F4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v41 = a6;
  uint64_t v38 = a4;
  unint64_t v39 = a5;
  uint64_t v36 = a2;
  unint64_t v37 = a3;
  uint64_t v35 = a1;
  uint64_t v8 = sub_100003C68((uint64_t *)&unk_100077410);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v34 = (uint64_t)&v34 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v34 - v15;
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v21 = [self currentConnection];
  int v40 = v11;
  if (v21)
  {
    uint64_t v22 = v21;
    unsigned int v23 = [v21 processIdentifier];
  }
  else
  {
    unsigned int v23 = 0;
  }
  static Logger.agent.getter();
  id v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    unsigned int v26 = v16;
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 67240192;
    LODWORD(v43) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "clear all received from process %{public}d", v27, 8u);
    uint64_t v16 = v26;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  sub_10002C8A8(6);
  if (qword_1000763C0 != -1) {
    swift_once();
  }
  swift_retain();
  sub_10002C754((id)0xD000000000000028, 0x80000001000677F0, &v43);
  if (v44)
  {
    if (swift_dynamicCast())
    {
      int v28 = v42;
      goto LABEL_13;
    }
  }
  else
  {
    sub_100006E84((uint64_t)&v43, &qword_1000772F8);
  }
  int v28 = 0;
LABEL_13:
  sub_10003B804(v35, v36, v37, v38, v39, v28, (uint64_t)v16);
  swift_release();
  uint64_t v30 = v34;
  sub_100019288((uint64_t)v16, v34, (uint64_t *)&unk_100077410);
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v32 = *(void *)(v31 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
  }
  (*(void (**)(uint64_t, Class, void))(a7 + 16))(a7, isa, 0);

  return sub_100006E84((uint64_t)v16, (uint64_t *)&unk_100077410);
}

uint64_t sub_10002FC50(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v50 = a1;
  uint64_t v51 = a5;
  uint64_t v48 = a3;
  unint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v7 = sub_100003C68((uint64_t *)&unk_100077410);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v44 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v46 = (uint64_t)&v44 - v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v44 - v16;
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  id v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v22 = [self currentConnection];
  if (v22)
  {
    unsigned int v23 = v22;
    unsigned int v24 = [v22 processIdentifier];
  }
  else
  {
    unsigned int v24 = 0;
  }
  static Logger.agent.getter();
  os_log_type_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    unint64_t v45 = v17;
    int v28 = v10;
    long long v29 = v13;
    uint64_t v30 = v27;
    *(_DWORD *)uint64_t v27 = 67240192;
    LODWORD(v53) = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "delete stores received from process %{public}d", v30, 8u);
    uint64_t v13 = v29;
    uint64_t v10 = v28;
    uint64_t v17 = v45;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  sub_10002C8A8(6);
  *(void *)&long long v53 = 0;
  static Set._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v37 = v53;
  if ((void)v53)
  {
    if (qword_1000763C0 != -1) {
      swift_once();
    }
    swift_retain();
    sub_10002C754((id)0xD000000000000028, 0x80000001000677F0, &v53);
    if (v54)
    {
      if (swift_dynamicCast())
      {
        int v38 = v52;
LABEL_20:
        sub_10003BC78(v37, v47, v48, v49, v38, (uint64_t)v17);
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v40 = v46;
        sub_100019288((uint64_t)v17, v46, (uint64_t *)&unk_100077410);
        uint64_t v41 = type metadata accessor for UUID();
        uint64_t v42 = *(void *)(v41 - 8);
        Class isa = 0;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41) != 1)
        {
          Class isa = UUID._bridgeToObjectiveC()().super.isa;
          (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, v41);
        }
        (*(void (**)(uint64_t, Class, void))(a6 + 16))(a6, isa, 0);

        return sub_100006E84((uint64_t)v17, (uint64_t *)&unk_100077410);
      }
    }
    else
    {
      sub_100006E84((uint64_t)&v53, &qword_1000772F8);
    }
    int v38 = 0;
    goto LABEL_20;
  }
  sub_100032A40();
  swift_allocError();
  unsigned char *v39 = 1;
  swift_willThrow();
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v32 = *(void *)(v31 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v13, 1, 1, v31);
  sub_100019288((uint64_t)v13, (uint64_t)v10, (uint64_t *)&unk_100077410);
  int v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48))(v10, 1, v31);
  swift_errorRetain();
  Class v34 = 0;
  if (v33 != 1)
  {
    Class v34 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v31);
  }
  uint64_t v35 = (void *)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, Class, void *))(a6 + 16))(a6, v34, v35);

  swift_errorRelease();
  swift_errorRelease();
  uint64_t v17 = v13;
  return sub_100006E84((uint64_t)v17, (uint64_t *)&unk_100077410);
}

void sub_100030230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const char *a8, void (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v31 = a3;
  uint64_t v32 = a8;
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = [self currentConnection];
  if (v16)
  {
    uint64_t v17 = v16;
    unsigned int v18 = [v16 processIdentifier];
  }
  else
  {
    unsigned int v18 = 0;
  }
  static Logger.agent.getter();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    id v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = v12;
    uint64_t v22 = a4;
    uint64_t v23 = a5;
    unsigned int v24 = v21;
    *(_DWORD *)id v21 = 67240192;
    LODWORD(v34) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, v32, v24, 8u);
    a5 = v23;
    a4 = v22;
    uint64_t v12 = v28;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  sub_10002C8A8(6);
  if (qword_1000763C0 != -1) {
    swift_once();
  }
  swift_retain();
  sub_10002C754((id)0xD000000000000028, 0x80000001000677F0, &v34);
  if (!v35)
  {
    sub_100006E84((uint64_t)&v34, &qword_1000772F8);
    goto LABEL_12;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_12:
    uint64_t v25 = 0;
    goto LABEL_13;
  }
  uint64_t v25 = v33;
LABEL_13:
  a9(v29, v30, v31, a4, a5, v25);
  swift_release();
  sub_100020D5C(0, (unint64_t *)&qword_100076508);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, Class, void))(a7 + 16))(a7, isa, 0);
}

uint64_t sub_1000305AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const char *a7, uint64_t a8, const char *a9, void (*a10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v59 = a8;
  uint64_t v55 = a3;
  uint64_t v56 = a4;
  uint64_t v54 = a2;
  uint64_t v57 = a1;
  uint64_t v13 = sub_100003C68((uint64_t *)&unk_100077410);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v60 = (uint64_t)v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v61 = (char *)v53 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  os_log_type_t v20 = (char *)v53 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)v53 - v21;
  uint64_t v58 = type metadata accessor for Logger();
  uint64_t v23 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v25 = (char *)v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v26 = [self currentConnection];
  if (v26)
  {
    uint64_t v27 = v26;
    unsigned int v28 = [v26 processIdentifier];
  }
  else
  {
    unsigned int v28 = 0;
  }
  static Logger.agent.getter();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v53[0] = a9;
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    v53[1] = a7;
    uint64_t v32 = a5;
    uint64_t v33 = a6;
    long long v34 = v20;
    uint64_t v35 = v22;
    uint64_t v36 = v31;
    *(_DWORD *)uint64_t v31 = 67240192;
    LODWORD(v63) = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, v53[0], v36, 8u);
    uint64_t v22 = v35;
    os_log_type_t v20 = v34;
    a6 = v33;
    a5 = v32;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v58);
  sub_10002C8A8(6);
  *(void *)&long long v63 = 0;
  sub_100020D5C(0, (unint64_t *)&qword_100076508);
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v47 = v63;
  if ((void)v63)
  {
    if (qword_1000763C0 != -1) {
      swift_once();
    }
    swift_retain();
    sub_10002C754((id)0xD000000000000028, 0x80000001000677F0, &v63);
    if (v64)
    {
      if (swift_dynamicCast())
      {
        uint64_t v48 = v62;
LABEL_20:
        a10(v47, v54, v55, v56, a5, a6, v48);
        swift_release();
        swift_bridgeObjectRelease();
        sub_100019288((uint64_t)v22, (uint64_t)v20, (uint64_t *)&unk_100077410);
        uint64_t v50 = type metadata accessor for UUID();
        uint64_t v51 = *(void *)(v50 - 8);
        Class isa = 0;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v20, 1, v50) != 1)
        {
          Class isa = UUID._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v51 + 8))(v20, v50);
        }
        (*(void (**)(uint64_t, Class, void))(v59 + 16))(v59, isa, 0);

        return sub_100006E84((uint64_t)v22, (uint64_t *)&unk_100077410);
      }
    }
    else
    {
      sub_100006E84((uint64_t)&v63, &qword_1000772F8);
    }
    uint64_t v48 = 0;
    goto LABEL_20;
  }
  sub_100032A40();
  swift_allocError();
  *unint64_t v49 = 1;
  swift_willThrow();
  uint64_t v37 = type metadata accessor for UUID();
  uint64_t v38 = *(void *)(v37 - 8);
  unint64_t v39 = v61;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v61, 1, 1, v37);
  uint64_t v40 = (uint64_t)v39;
  uint64_t v41 = v60;
  sub_100019288(v40, v60, (uint64_t *)&unk_100077410);
  int v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v41, 1, v37);
  swift_errorRetain();
  Class v43 = 0;
  if (v42 != 1)
  {
    uint64_t v44 = v60;
    Class v43 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v44, v37);
  }
  unint64_t v45 = (void *)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, Class, void *))(v59 + 16))(v59, v43, v45);

  swift_errorRelease();
  swift_errorRelease();
  uint64_t v22 = v61;
  return sub_100006E84((uint64_t)v22, (uint64_t *)&unk_100077410);
}

uint64_t sub_100030BEC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, void (*a6)(char *, uint64_t), unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v55 = a7;
  uint64_t v56 = a8;
  uint64_t v53 = a5;
  uint64_t v54 = a6;
  int v52 = a4;
  uint64_t v59 = a1;
  uint64_t v61 = a10;
  uint64_t v13 = sub_100003C68((uint64_t *)&unk_100077410);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v51 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v51 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v51 - v23;
  uint64_t v25 = type metadata accessor for Logger();
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  unsigned int v28 = (char *)&v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v29 = [self currentConnection];
  uint64_t v60 = v19;
  uint64_t v51 = v22;
  uint64_t v57 = a3;
  uint64_t v58 = a2;
  if (v29)
  {
    os_log_type_t v30 = v29;
    unsigned int v31 = [v29 processIdentifier];
  }
  else
  {
    unsigned int v31 = 0;
  }
  static Logger.agent.getter();
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v32, v33))
  {
    long long v34 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)long long v34 = 67240192;
    LODWORD(v63) = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "set store properties received from process %{public}d", v34, 8u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  sub_10002C8A8(6);
  *(void *)&long long v63 = 0;
  sub_100020D5C(0, (unint64_t *)&qword_100076508);
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v35 = v63;
  if ((void)v63)
  {
    *(void *)&long long v63 = 0;
    static Set._conditionallyBridgeFromObjectiveC(_:result:)();
    uint64_t v36 = v63;
    if ((void)v63)
    {
      *(void *)&long long v63 = 0;
      static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();
      uint64_t v37 = v63;
      if ((void)v63)
      {
        if (qword_1000763C0 != -1) {
          swift_once();
        }
        swift_retain();
        sub_10002C754((id)0xD000000000000028, 0x80000001000677F0, &v63);
        if (v64)
        {
          if (swift_dynamicCast())
          {
            unsigned __int8 v38 = v62;
LABEL_22:
            sub_10003D7C4(v35, v36, v37, v52 & 1, v53, v54, v55, v56, (uint64_t)v24, a9, v38);
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v47 = (uint64_t)v51;
            sub_100019288((uint64_t)v24, (uint64_t)v51, (uint64_t *)&unk_100077410);
            uint64_t v48 = type metadata accessor for UUID();
            uint64_t v49 = *(void *)(v48 - 8);
            Class isa = 0;
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48) != 1)
            {
              Class isa = UUID._bridgeToObjectiveC()().super.isa;
              (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
            }
            (*(void (**)(uint64_t, Class, void))(a11 + 16))(a11, isa, 0);

            return sub_100006E84((uint64_t)v24, (uint64_t *)&unk_100077410);
          }
        }
        else
        {
          sub_100006E84((uint64_t)&v63, &qword_1000772F8);
        }
        unsigned __int8 v38 = 0;
        goto LABEL_22;
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  sub_100032A40();
  swift_allocError();
  unsigned char *v39 = 1;
  swift_willThrow();
  uint64_t v40 = type metadata accessor for UUID();
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = (uint64_t)v60;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56))(v60, 1, 1, v40);
  sub_100019288(v42, (uint64_t)v16, (uint64_t *)&unk_100077410);
  int v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48))(v16, 1, v40);
  swift_errorRetain();
  Class v44 = 0;
  if (v43 != 1)
  {
    Class v44 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v41 + 8))(v16, v40);
  }
  unint64_t v45 = (void *)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, Class, void *))(a11 + 16))(a11, v44, v45);

  swift_errorRelease();
  swift_errorRelease();
  uint64_t v24 = (char *)v42;
  return sub_100006E84((uint64_t)v24, (uint64_t *)&unk_100077410);
}

void sub_1000312A4(void (*a1)(char *, uint64_t), uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  v24[1] = a4;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [self currentConnection];
  if (v13)
  {
    uint64_t v14 = v13;
    unsigned int v15 = [v13 processIdentifier];
  }
  else
  {
    unsigned int v15 = 0;
  }
  static Logger.agent.getter();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    v24[0] = a1;
    uint64_t v19 = a5;
    unint64_t v20 = a3;
    uint64_t v21 = v18;
    *(_DWORD *)uint64_t v18 = 67240192;
    LODWORD(v26) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "get store names received from process %{public}d", v21, 8u);
    a3 = v20;
    a5 = v19;
    a1 = (void (*)(char *, uint64_t))v24[0];
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_10002C8A8(5);
  if (qword_1000763C0 != -1) {
    swift_once();
  }
  swift_retain();
  sub_10002C754((id)0xD000000000000028, 0x80000001000677F0, &v26);
  if (!v27)
  {
    sub_100006E84((uint64_t)&v26, &qword_1000772F8);
    goto LABEL_12;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_12:
    int v22 = 0;
    goto LABEL_13;
  }
  int v22 = v25;
LABEL_13:
  sub_10003E0E4(a1, a2, a3, v22);
  swift_release();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, Class, void))(a5 + 16))(a5, isa, 0);
}

uint64_t sub_1000315EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100003C68(&qword_1000764C0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = &v19[-v7];
  __chkstk_darwin(v6);
  uint64_t v10 = &v19[-v9];
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10002C8A8(2);
  if (qword_1000763C0 != -1) {
    swift_once();
  }
  swift_retain();
  sub_100041A78((uint64_t)v14);
  swift_release();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v12 + 16))(v10, v14, v11);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  sub_100019288((uint64_t)v10, (uint64_t)v8, &qword_1000764C0);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v11) == 1)
  {
    uint64_t v16 = 0;
  }
  else
  {
    URL._bridgeToObjectiveC()(v15);
    uint64_t v16 = v17;
    (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v8, v11);
  }
  (*(void (**)(uint64_t, void *, void))(a2 + 16))(a2, v16, 0);

  sub_100006E84((uint64_t)v10, &qword_1000764C0);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v12 + 8))(v14, v11);
}

void sub_10003199C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a6;
  _Block_copy(a6);
  sub_10002C8A8(0);
  uint64_t v8 = sub_10002C458();
  NSString v9 = String._bridgeToObjectiveC()();
  NSString v10 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_10003309C;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100052A80;
  aBlock[3] = &unk_1000726B0;
  uint64_t v11 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v8 askToOverrideUnremovabilityOfApplication:v9 teamIdentifier:v10 replyHandler:v11];
  _Block_release(v11);
  swift_release();
  swift_unknownObjectRelease();
}

void sub_100031B70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const void *a8)
{
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a8;
  _Block_copy(a8);
  sub_10002C8A8(4);
  NSString v10 = (void *)sub_10002C3DC();
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  NSString v13 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_10003310C;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100052B7C;
  aBlock[3] = &unk_100072660;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v10 fetchConfigurationForBundleIdentifier:v11 categoryIdentifier:v12 categoryName:v13 replyHandler:v14];
  _Block_release(v14);
  swift_release();
  swift_unknownObjectRelease();
}

void sub_100031D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a6;
  _Block_copy(a6);
  sub_10002C8A8(4);
  uint64_t v8 = (void *)sub_10002C3DC();
  NSString v9 = String._bridgeToObjectiveC()();
  NSString v10 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_10003310C;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100052B7C;
  aBlock[3] = &unk_100072610;
  NSString v11 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v8 fetchConfigurationForCategoryIdentifier:v9 categoryName:v10 replyHandler:v11];
  _Block_release(v11);
  swift_release();
  swift_unknownObjectRelease();
}

void sub_100031F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const void *a8)
{
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a8;
  _Block_copy(a8);
  sub_10002C8A8(4);
  NSString v10 = (void *)sub_10002C3DC();
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  NSString v13 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_100032B34;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100052B7C;
  aBlock[3] = &unk_1000725C0;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v10 fetchConfigurationForWebDomain:v11 categoryIdentifier:v12 categoryName:v13 replyHandler:v14];
  _Block_release(v14);
  swift_release();
  swift_unknownObjectRelease();
}

void sub_100032144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7)
{
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a7;
  _Block_copy(a7);
  sub_10002C8A8(4);
  NSString v10 = (void *)sub_10002C3DC();
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_10003309C;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100052A80;
  aBlock[3] = &unk_100072570;
  NSString v13 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v10 handleAction:a1 bundleIdentifier:v11 categoryIdentifier:v12 replyHandler:v13];
  _Block_release(v13);
  swift_release();
  swift_unknownObjectRelease();
}

void sub_10003232C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a5;
  _Block_copy(a5);
  sub_10002C8A8(4);
  uint64_t v8 = (void *)sub_10002C3DC();
  NSString v9 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_10003309C;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100052A80;
  aBlock[3] = &unk_100072520;
  NSString v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v8 handleAction:a1 categoryIdentifier:v9 replyHandler:v10];
  _Block_release(v10);
  swift_release();
  swift_unknownObjectRelease();
}

void sub_1000324E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7)
{
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a7;
  _Block_copy(a7);
  sub_10002C8A8(4);
  NSString v10 = (void *)sub_10002C3DC();
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_100021D24;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100052A80;
  aBlock[3] = &unk_1000724D0;
  NSString v13 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v10 handleAction:a1 webDomain:v11 categoryIdentifier:v12 replyHandler:v13];
  _Block_release(v13);
  swift_release();
  swift_unknownObjectRelease();
}

void sub_1000326D0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10002C8A8(1);
  uint64_t v21 = a4;
  if (qword_1000763C0 != -1) {
LABEL_30:
  }
    swift_once();
  swift_retain();
  uint64_t v7 = sub_10003F850(a1, a2);
  swift_release();
  v22[2] = (Swift::Int)&_swiftEmptySetSingleton;
  uint64_t v8 = v7 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v7 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v13 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v13 << 6);
      goto LABEL_6;
    }
    int64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v12)
    {
LABEL_26:
      swift_release();
      Class isa = Set._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, objc_class *, void))(v21 + 16))(v21, isa, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v13;
    if (!v18)
    {
      int64_t v13 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v13);
      if (!v18)
      {
        int64_t v13 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_26;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v13);
        if (!v18)
        {
          int64_t v13 = v17 + 3;
          if (v17 + 3 >= v12) {
            goto LABEL_26;
          }
          unint64_t v18 = *(void *)(v8 + 8 * v13);
          if (!v18)
          {
            int64_t v13 = v17 + 4;
            if (v17 + 4 >= v12) {
              goto LABEL_26;
            }
            unint64_t v18 = *(void *)(v8 + 8 * v13);
            if (!v18) {
              break;
            }
          }
        }
      }
    }
LABEL_25:
    unint64_t v11 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v13 << 6);
LABEL_6:
    uint64_t v16 = (unint64_t *)(*(void *)(v7 + 48) + 40 * v15);
    a2 = *v16;
    a1 = v16[1];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_100002C94(v22, a2, a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int64_t v19 = v17 + 5;
  if (v19 >= v12) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    int64_t v13 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v13 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v13 >= v12) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v13);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
  __break(1u);
}

uint64_t sub_1000329E0()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 33, 7);
}

id sub_100032A18()
{
  return sub_10002DF50(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t sub_100032A38()
{
  return swift_release();
}

unint64_t sub_100032A40()
{
  unint64_t result = qword_1000773F0;
  if (!qword_1000773F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000773F0);
  }
  return result;
}

uint64_t sub_100032A94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003C68(&qword_1000772F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100032AFC()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100032B34(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_100052C28(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_100032B3C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100032B74(void *a1)
{
  return sub_10002E1AC(a1);
}

uint64_t sub_100032B7C()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t result = __chkstk_darwin(v8);
  int64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000763C0 != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v13 = qword_1000795A0;
  if ((*(unsigned char *)(qword_1000795A0 + 224) & 1) == 0)
  {
    *(unsigned char *)(qword_1000795A0 + 224) = 1;
    sub_100020D5C(0, (unint64_t *)&qword_1000769D0);
    uint64_t v18 = v4;
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v8);
    swift_retain();
    uint64_t v17 = static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    aBlock[4] = sub_100032F38;
    aBlock[5] = v13;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10002C398;
    aBlock[3] = &unk_100072728;
    unint64_t v14 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    int64_t v19 = &_swiftEmptyArrayStorage;
    sub_100004604((unint64_t *)&qword_100077430, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100003C68((uint64_t *)&unk_100077260);
    sub_100022AF4();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    unint64_t v15 = (void *)v17;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v14);

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v18);
    swift_release();
    return swift_release();
  }
  return result;
}

id sub_100032F38()
{
  return sub_1000480C0();
}

unsigned char *storeEnumTagSinglePayload for ManagedSettingsAgentError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10003300CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ManagedSettingsAgentError()
{
  return &type metadata for ManagedSettingsAgentError;
}

unint64_t sub_100033048()
{
  unint64_t result = qword_100077448;
  if (!qword_100077448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100077448);
  }
  return result;
}

uint64_t sub_100033110(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100033138(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void *sub_100033160()
{
  type metadata accessor for EffectiveSettings();
  uint64_t v0 = swift_allocObject();
  unint64_t result = sub_10003319C();
  qword_100079598 = v0;
  return result;
}

void *sub_10003319C()
{
  uint64_t v1 = v0;
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v2 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unsigned int v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = sub_100020D5C(0, (unint64_t *)&qword_100077400);
  type metadata accessor for ExtensionFinder();
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100064F20;
  *(void *)(v8 + 32) = 0x3FE0000000000000;
  *(void *)(v8 + 40) = 0xD00000000000002FLL;
  *(void *)(v8 + 48) = 0x80000001000666F0;
  *(void *)(v8 + 56) = 0xD000000000000038;
  *(void *)(v8 + 64) = 0x8000000100066720;
  *(void *)(v8 + 72) = v7;
  v0[12] = v8;
  v0[13] = &_swiftEmptyDictionarySingleton;
  sub_100020D5C(0, (unint64_t *)&qword_1000769D0);
  static DispatchQoS.unspecified.getter();
  *(void *)&long long v14 = &_swiftEmptyArrayStorage;
  sub_10003795C((unint64_t *)&qword_1000767D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100003C68((uint64_t *)&unk_1000769E0);
  sub_100009718();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v13);
  v0[14] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v15 = type metadata accessor for Locations();
  uint64_t v16 = &protocol witness table for Locations;
  sub_100006CC0((uint64_t *)&v14);
  Locations.init()();
  sub_10000DE5C(&v14, (uint64_t)(v0 + 2));
  uint64_t v9 = static NSNotificationName.effectiveMediaSettingsChanged.getter();
  uint64_t v10 = type metadata accessor for NotificationSender();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v9;
  v1[10] = v10;
  v1[11] = &off_100071A58;
  v1[7] = v11;
  return v1;
}

uint64_t sub_1000334C4(void *a1)
{
  uint64_t v3 = sub_100003C68(&qword_100077610);
  uint64_t result = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1[2];
  if (v8)
  {
    unsigned int v31 = v7;
    uint64_t v32 = v5;
    uint64_t v33 = result;
    uint64_t v35 = v1;
    swift_bridgeObjectRetain();
    sub_100011120();
    long long v34 = a1;
    uint64_t v9 = a1 + 5;
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
    do
    {
      uint64_t v11 = *v9;
      uint64_t v38 = *(v9 - 1);
      uint64_t v39 = v11;
      uint64_t v36 = 46;
      unint64_t v37 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      int64_t v12 = (void *)StringProtocol.components<A>(separatedBy:)();
      if (v12[2])
      {
        uint64_t v14 = v12[4];
        uint64_t v13 = v12[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v10 = sub_1000544D0(0, *((void *)v10 + 2) + 1, 1, v10);
        }
        unint64_t v16 = *((void *)v10 + 2);
        unint64_t v15 = *((void *)v10 + 3);
        if (v16 >= v15 >> 1) {
          uint64_t v10 = sub_1000544D0((char *)(v15 > 1), v16 + 1, 1, v10);
        }
        *((void *)v10 + 2) = v16 + 1;
        uint64_t v17 = &v10[16 * v16];
        *((void *)v17 + 4) = v14;
        *((void *)v17 + 5) = v13;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v9 += 2;
      --v8;
    }
    while (v8);
    uint64_t v18 = v34;
    swift_bridgeObjectRelease();
    uint64_t v19 = sub_10002AF30((uint64_t)v10);
    swift_bridgeObjectRelease();
    sub_100048BD4(v19);
    uint64_t v20 = v35;
    sub_100033910();
    swift_release();
    if (qword_1000763A0 != -1) {
      swift_once();
    }
    swift_retain();
    sub_10000BEB4(v19);
    swift_release();
    uint64_t v21 = v31;
    static MediaSettings.maximumMovieRating.getter();
    uint64_t v22 = v33;
    uint64_t v23 = BoundedSettingMetadata.name.getter();
    uint64_t v25 = v24;
    long long v26 = *(void (**)(char *, uint64_t))(v32 + 8);
    v26(v21, v22);
    LOBYTE(v23) = sub_100033848(v23, v25, v18);
    swift_bridgeObjectRelease();
    if ((v23 & 1) != 0
      || (static MediaSettings.maximumTVShowRating.getter(),
          uint64_t v27 = BoundedSettingMetadata.name.getter(),
          uint64_t v29 = v28,
          v26(v21, v22),
          LOBYTE(v27) = sub_100033848(v27, v29, v18),
          swift_bridgeObjectRelease(),
          (v27 & 1) != 0))
    {
      sub_100006DCC((void *)(v20 + 56), *(void *)(v20 + 80));
      sub_10000AA48();
    }
    if (qword_100076398 != -1) {
      swift_once();
    }
    sub_100008AB8(v19);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100033848(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100033910()
{
  uint64_t v58 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v58 - 8);
  uint64_t v2 = __chkstk_darwin(v58);
  uint64_t v51 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v48 - v4;
  uint64_t v57 = v0;
  swift_retain();
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = sub_10002AF30(v6);
  swift_bridgeObjectRelease();
  uint64_t v8 = ExtensionFinder.extensions.getter();
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_1000245CC((unint64_t)v8, v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v56 = *((void *)v9 + 2);
  if (v56)
  {
    uint64_t v11 = 0;
    uint64_t v54 = (void (**)(char *, uint64_t))(v1 + 8);
    uint64_t v49 = &v62;
    uint64_t v53 = &v65;
    *(void *)&long long v10 = 136446466;
    long long v50 = v10;
    uint64_t v48 = (char *)&type metadata for Any + 8;
    long long v59 = xmmword_1000651A0;
    BOOL v12 = v51;
    unint64_t v55 = v9;
    while (1)
    {
      long long v60 = *(_OWORD *)&v9[16 * v11 + 32];
      id v25 = (id)v60;
      uint64_t v26 = *((void *)&v60 + 1);
      swift_bridgeObjectRetain();
      static Logger.agent.getter();
      id v27 = v25;
      swift_bridgeObjectRetain_n();
      id v28 = v27;
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v52 = v11;
        uint64_t v31 = swift_slowAlloc();
        uint64_t aBlock = swift_slowAlloc();
        *(_DWORD *)uint64_t v31 = v50;
        uint64_t v32 = v28;
        id v33 = objc_msgSend(v28, "identifier", v48, v49);
        if (!v33)
        {

          uint64_t result = swift_bridgeObjectRelease_n();
          __break(1u);
          return result;
        }
        long long v34 = v33;
        uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v37 = v36;

        uint64_t v61 = sub_1000036B0(v35, v37, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v31 + 12) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v38 = Array.description.getter();
        unint64_t v40 = v39;
        swift_bridgeObjectRelease();
        uint64_t v61 = sub_1000036B0(v38, v40, &aBlock);
        id v28 = v32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Notifying extension %{public}s with groups %{public}s", (uint8_t *)v31, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        BOOL v12 = v51;
        (*v54)(v51, v58);
        uint64_t v11 = v52;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*v54)(v12, v58);
      }
      ++v11;
      uint64_t v13 = v57;
      id v67 = sub_100037A0C;
      uint64_t v68 = v57;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      unint64_t v64 = 1107296256;
      uint64_t v65 = sub_100034654;
      uint64_t v66 = &unk_100072818;
      uint64_t v14 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v28, "set_requestPostCompletionBlock:", v14);
      _Block_release(v14);
      id v15 = [objc_allocWithZone((Class)NSExtensionItem) init];
      sub_100003C68(&qword_100077620);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v59;
      uint64_t aBlock = 0x6D614E70756F7267;
      unint64_t v64 = 0xEA00000000007365;
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 96) = sub_100003C68(&qword_100077300);
      *(void *)(inited + 72) = v26;
      swift_bridgeObjectRetain();
      sub_100038A34(inited);
      uint64_t v17 = v28;
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v15 setUserInfo:isa];

      sub_100003C68(&qword_100077628);
      uint64_t v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = v59;
      *(void *)(v19 + 56) = sub_100020D5C(0, &qword_100077630);
      *(void *)(v19 + 32) = v15;
      id v20 = v15;
      Class v21 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = v60;
      *(void *)(v22 + 32) = v13;
      id v67 = sub_100037A64;
      uint64_t v68 = v22;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      unint64_t v64 = 1107296256;
      uint64_t v65 = sub_1000350B8;
      uint64_t v66 = &unk_100072868;
      uint64_t v23 = _Block_copy(&aBlock);
      id v24 = v17;
      swift_retain();
      swift_release();
      [v24 beginExtensionRequestWithOptions:0 inputItems:v21 completion:v23];

      _Block_release(v23);
      uint64_t v9 = v55;
      if (v56 == v11) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  swift_bridgeObjectRelease();
  static Logger.agent.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v42, v43))
  {
    Class v44 = (uint8_t *)swift_slowAlloc();
    uint64_t aBlock = swift_slowAlloc();
    *(_DWORD *)Class v44 = 136446210;
    *(void *)&long long v60 = v44 + 4;
    swift_bridgeObjectRetain();
    uint64_t v45 = Array.description.getter();
    unint64_t v47 = v46;
    swift_bridgeObjectRelease();
    uint64_t v61 = sub_1000036B0(v45, v47, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Nobody cares that effective settings changed in groups %{public}s", v44, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v5, v58);
}

uint64_t sub_1000341F0(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  BOOL v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v30 - v13;
  if (a1 && (self, (uint64_t v15 = swift_dynamicCastObjCClass()) != 0))
  {
    uint64_t v16 = v15;
    uint64_t v35 = a2;
    swift_unknownObjectRetain();
    static Logger.agent.getter();
    swift_unknownObjectRetain_n();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v33 = a4;
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = (void *)swift_slowAlloc();
      uint64_t v34 = a3;
      uint64_t v32 = v19;
      *(_DWORD *)uint64_t v19 = 138543362;
      aBlock[0] = v16;
      swift_unknownObjectRetain();
      a4 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v31 = v16;
      swift_unknownObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "RequestID %{public}@ complete", v32, 0xCu);
      sub_100003C68(&qword_100076D20);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    id v24 = *(void **)(a4 + 112);
    id v25 = (void *)swift_allocObject();
    v25[2] = a4;
    v25[3] = v16;
    v25[4] = 0;
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = sub_100037B88;
    *(void *)(v26 + 24) = v25;
    aBlock[4] = sub_100037B6C;
    aBlock[5] = v26;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100033138;
    aBlock[3] = &unk_100072980;
    id v27 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    id v28 = v24;
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v28, v27);

    _Block_release(v27);
    LOBYTE(v27) = swift_isEscapingClosureAtFileLocation();
    swift_unknownObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    a2 = v35;
    if (v27)
    {
      __break(1u);
      return result;
    }
  }
  else
  {
    static Logger.agent.getter();
    id v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Unknown request complete", v22, 2u);
      swift_slowDealloc();
    }

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  if (a2)
  {
    uint64_t v29 = swift_retain();
    a2(v29);
    return sub_100037AB8((uint64_t)a2);
  }
  return result;
}

uint64_t sub_100034654(uint64_t a1, int a2, void *aBlock)
{
  uint64_t v3 = *(void (**)(uint64_t, void *, uint64_t))(a1 + 32);
  uint64_t v4 = _Block_copy(aBlock);
  if (v4)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v4;
    uint64_t v4 = sub_100037B00;
  }
  else
  {
    uint64_t v5 = 0;
  }
  swift_retain();
  uint64_t v6 = swift_unknownObjectRetain();
  v3(v6, v4, v5);
  swift_unknownObjectRelease();
  sub_100037AB8((uint64_t)v4);

  return swift_release();
}

uint64_t sub_100034718(uint8_t *a1, NSObject *a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = &v60[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = &v60[-v15];
  __chkstk_darwin(v14);
  os_log_type_t v18 = &v60[-v17];
  if (a2)
  {
    swift_errorRetain();
    static Logger.agent.getter();
    swift_errorRetain();
    uint64_t v19 = a3;
    swift_bridgeObjectRetain();
    swift_errorRetain();
    a3 = v19;
    swift_bridgeObjectRetain();
    id v20 = Logger.logObject.getter();
    int v21 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v20, (os_log_type_t)v21))
    {
      swift_errorRelease();
      swift_bridgeObjectRelease_n();

      swift_errorRelease();
      swift_errorRelease();

      return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v18, v9);
    }
    LODWORD(v65) = v21;
    uint64_t v66 = v10;
    uint64_t v67 = v9;
    a1 = (uint8_t *)swift_slowAlloc();
    os_log_t v64 = (os_log_t)swift_slowAlloc();
    aBlock[0] = (uint64_t)v64;
    *(_DWORD *)a1 = 136446722;
    id v22 = [a3 identifier];
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v26 = v25;

      uint64_t v69 = sub_1000036B0(v24, v26, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *((_WORD *)a1 + 6) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v27 = Array.description.getter();
      unint64_t v29 = v28;
      swift_bridgeObjectRelease();
      uint64_t v69 = sub_1000036B0(v27, v29, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *((_WORD *)a1 + 11) = 2082;
      uint64_t v69 = (uint64_t)a2;
      swift_errorRetain();
      sub_100003C68(&qword_100076FE0);
      uint64_t v30 = String.init<A>(describing:)();
      uint64_t v69 = sub_1000036B0(v30, v31, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v65, "Failed to notify extension %{public}s with groups %{public}s: %{public}s", a1, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return (*(uint64_t (**)(unsigned char *, uint64_t))(v66 + 8))(v18, v67);
    }
LABEL_18:
    swift_errorRelease();

    swift_bridgeObjectRelease_n();
    __break(1u);
LABEL_19:

    __break(1u);
    goto LABEL_20;
  }
  if (!a1 || (self, (uint64_t v33 = swift_dynamicCastObjCClass()) == 0))
  {
    static Logger.agent.getter();
    a1 = a3;
    unint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v47, v48))
    {

      return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v16, v9);
    }
    uint64_t v66 = v10;
    uint64_t v67 = v9;
    uint64_t v49 = (uint8_t *)swift_slowAlloc();
    a2 = swift_slowAlloc();
    aBlock[0] = (uint64_t)a2;
    *(_DWORD *)uint64_t v49 = 136446210;
    id v50 = [(uint8_t *)a1 identifier];
    if (v50)
    {
      uint64_t v51 = v50;
      uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v54 = v53;

      uint64_t v69 = sub_1000036B0(v52, v54, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Notified extension %{public}s without error or requestID?", v49, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(unsigned char *, uint64_t))(v66 + 8))(v16, v67);
    }
    goto LABEL_19;
  }
  uint64_t v34 = v33;
  uint64_t v67 = v9;
  swift_unknownObjectRetain();
  static Logger.agent.getter();
  uint64_t v35 = a3;
  swift_bridgeObjectRetain_n();
  swift_unknownObjectRetain_n();
  a2 = v35;
  unint64_t v36 = Logger.logObject.getter();
  int v37 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v36, (os_log_type_t)v37))
  {

    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease_n();

    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v13, v67);
    goto LABEL_16;
  }
  int v61 = v37;
  os_log_t v64 = v36;
  uint64_t v65 = v34;
  uint64_t v66 = v10;
  a3 = (_WORD *)swift_slowAlloc();
  char v62 = (void *)swift_slowAlloc();
  uint64_t v63 = swift_slowAlloc();
  aBlock[0] = v63;
  *(_DWORD *)a3 = 136446722;
  id v38 = [a2 identifier];
  if (v38)
  {
    unint64_t v39 = v38;
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v42 = v41;

    uint64_t v69 = sub_1000036B0(v40, v42, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    a3[6] = 2082;
    swift_bridgeObjectRetain();
    uint64_t v43 = Array.description.getter();
    unint64_t v45 = v44;
    swift_bridgeObjectRelease();
    uint64_t v69 = sub_1000036B0(v43, v45, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    a3[11] = 2114;
    uint64_t v34 = v65;
    uint64_t v69 = v65;
    swift_unknownObjectRetain();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v62 = v34;
    swift_unknownObjectRelease_n();
    os_log_t v46 = v64;
    _os_log_impl((void *)&_mh_execute_header, v64, (os_log_type_t)v61, "Successfully notified extension %{public}s with groups %{public}s, requestID %{public}@", (uint8_t *)a3, 0x20u);
    sub_100003C68(&qword_100076D20);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(unsigned char *, uint64_t))(v66 + 8))(v13, v67);
LABEL_16:
    unint64_t v55 = *(void **)(a5 + 112);
    uint64_t v56 = (void *)swift_allocObject();
    v56[2] = a5;
    v56[3] = v34;
    v56[4] = a2;
    uint64_t v57 = swift_allocObject();
    *(void *)(v57 + 16) = sub_100037A74;
    *(void *)(v57 + 24) = v56;
    aBlock[4] = (uint64_t)sub_100037A90;
    aBlock[5] = v57;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100033138;
    aBlock[3] = (uint64_t)&unk_1000728E0;
    uint64_t v58 = _Block_copy(aBlock);
    long long v59 = a2;
    swift_unknownObjectRetain();
    a2 = v55;
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(a2, v58);

    _Block_release(v58);
    LOBYTE(v58) = swift_isEscapingClosureAtFileLocation();
    swift_unknownObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    if ((v58 & 1) == 0) {
      return result;
    }
    __break(1u);
    goto LABEL_18;
  }
LABEL_20:

  swift_bridgeObjectRelease_n();
  uint64_t result = swift_unknownObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1000350B8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_100035138@<X0>(uint64_t a1@<X8>)
{
  uint64_t v36 = a1;
  uint64_t v2 = sub_100003C68(&qword_100076D58);
  __chkstk_darwin(v2 - 8);
  uint64_t v34 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100003C68(&qword_100077618);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v35 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v33 - v8;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v1 + 40);
  uint64_t v15 = sub_100006DCC((void *)(v1 + 16), v14);
  uint64_t v16 = *(void *)(v14 - 8);
  __chkstk_darwin(v15);
  os_log_type_t v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v18);
  dispatch thunk of Locatable.effectiveSettingsPath.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v14);
  uint64_t v19 = sub_100036CA4();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  static AllowedClientSettings.allowedClient.getter();
  uint64_t v20 = SettingMetadata.name.getter();
  uint64_t v22 = v21;
  uint64_t v23 = *(void (**)(char *, uint64_t))(v5 + 8);
  v23(v9, v4);
  if (*(void *)(v19 + 16) && (unint64_t v24 = sub_100019BD4(v20, v22), (v25 & 1) != 0))
  {
    id v26 = *(id *)(*(void *)(v19 + 56) + 8 * v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v27 = v26;
    uint64_t v28 = (uint64_t)v34;
    static Application.value(from:)();

    uint64_t v29 = type metadata accessor for Application();
    uint64_t v30 = *(void *)(v29 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29) != 1) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v36, v28, v29);
    }
    sub_100021D2C(v28);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  unint64_t v31 = v35;
  static AllowedClientSettings.allowedClient.getter();
  SettingMetadata.defaultValue.getter();
  return ((uint64_t (*)(char *, uint64_t))v23)(v31, v4);
}

uint64_t sub_10003552C()
{
  return sub_10003555C((void (*)(uint64_t))&static MediaSettings.maximumMovieRating.getter);
}

uint64_t sub_100035544()
{
  return sub_10003555C((void (*)(uint64_t))&static MediaSettings.maximumTVShowRating.getter);
}

uint64_t sub_10003555C(void (*a1)(uint64_t))
{
  uint64_t v36 = a1;
  uint64_t v2 = sub_100003C68(&qword_100077610);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v35 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - v6;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v1 + 40);
  uint64_t v13 = sub_100006DCC((void *)(v1 + 16), v12);
  uint64_t v14 = *(void *)(v12 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v14 + 16))(v16);
  dispatch thunk of Locatable.effectiveSettingsPath.getter();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v12);
  uint64_t v17 = sub_100036CA4();
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v19 = v36;
  v36(v18);
  uint64_t v20 = BoundedSettingMetadata.name.getter();
  uint64_t v22 = v21;
  uint64_t v23 = *(void (**)(char *, uint64_t))(v3 + 8);
  v23(v7, v2);
  if (*(void *)(v17 + 16) && (unint64_t v24 = sub_100019BD4(v20, v22), (v25 & 1) != 0))
  {
    id v26 = *(id *)(*(void *)(v17 + 56) + 8 * v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v27 = v26;
    uint64_t v28 = static Int.value(from:)();
    char v30 = v29;

    if ((v30 & 1) == 0) {
      return v28;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v31 = swift_bridgeObjectRelease();
  }
  uint64_t v32 = v35;
  v19(v31);
  BoundedSettingMetadata.defaultValue.getter();
  v23(v32, v2);
  return v37;
}

uint64_t sub_10003588C()
{
  uint64_t v1 = sub_100003C68(&qword_100077608);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  v28[0] = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v28 - v5;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v0 + 40);
  uint64_t v12 = sub_100006DCC((void *)(v0 + 16), v11);
  uint64_t v13 = *(void *)(v11 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v13 + 16))(v15);
  dispatch thunk of Locatable.effectiveSettingsPath.getter();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v11);
  uint64_t v16 = sub_100036CA4();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  static ApplicationSettings.unremovableApplications.getter();
  uint64_t v17 = SettingMetadata.name.getter();
  uint64_t v19 = v18;
  uint64_t v20 = *(void (**)(char *, uint64_t))(v2 + 8);
  v20(v6, v1);
  if (!*(void *)(v16 + 16) || (unint64_t v21 = sub_100019BD4(v17, v19), (v22 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_6:
    id v26 = (char *)v28[0];
    static ApplicationSettings.unremovableApplications.getter();
    SettingMetadata.defaultValue.getter();
    v20(v26, v1);
    return v28[1];
  }
  id v23 = *(id *)(*(void *)(v16 + 56) + 8 * v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for Application();
  sub_10003795C((unint64_t *)&unk_100077160, (void (*)(uint64_t))&type metadata accessor for Application);
  id v24 = v23;
  uint64_t v25 = static Set<>.value(from:)();

  if (!v25) {
    goto LABEL_6;
  }
  return v25;
}

uint64_t sub_100035BFC(uint64_t a1, void *a2, void *a3)
{
  swift_beginAccess();
  if (a3)
  {
    id v5 = a2;
    sub_10003699C((uint64_t)a3, v5);
  }
  else
  {
    id v6 = a2;
    id v5 = (id)sub_100016CE4((unint64_t)v6);
  }
  return swift_endAccess();
}

uint64_t sub_100035C84()
{
  _s20ManagedSettingsAgent12ClientFinderVwxx_0(v0 + 16);
  _s20ManagedSettingsAgent12ClientFinderVwxx_0(v0 + 56);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for EffectiveSettings()
{
  return self;
}

uint64_t sub_100035D00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (char *)&_swiftEmptyArrayStorage;
  id v38 = (char *)&_swiftEmptyArrayStorage;
  uint64_t v36 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v37 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  if (v7) {
    goto LABEL_8;
  }
LABEL_12:
  int64_t v17 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v17 < v37)
    {
      unint64_t v18 = *(void *)(v36 + 8 * v17);
      ++v9;
      if (v18) {
        goto LABEL_25;
      }
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v37) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v36 + 8 * v9);
      if (v18) {
        goto LABEL_25;
      }
      int64_t v9 = v17 + 2;
      if (v17 + 2 >= v37) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v36 + 8 * v9);
      if (v18)
      {
LABEL_25:
        unint64_t v7 = (v18 - 1) & v18;
        for (unint64_t i = __clz(__rbit64(v18)) + (v9 << 6); ; unint64_t i = v14 | (v9 << 6))
        {
          uint64_t v20 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
          uint64_t v22 = *v20;
          uint64_t v21 = v20[1];
          id v23 = *(void **)(a2 + 16);
          id v24 = *(id *)(*(void *)(a1 + 56) + 8 * i);
          uint64_t v25 = v24;
          if (v23)
          {
            swift_bridgeObjectRetain_n();
            id v26 = v25;
            unint64_t v27 = sub_100019BD4(v22, v21);
            if (v28)
            {
              id v23 = *(void **)(*(void *)(a2 + 56) + 8 * v27);
              id v29 = v23;
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
              id v23 = 0;
            }
          }
          else
          {
            id v30 = v24;
            swift_bridgeObjectRetain();
          }
          sub_100036058(v25, v23);
          char v32 = v31;

          if (v32)
          {
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v4 = sub_1000544D0(0, *((void *)v4 + 2) + 1, 1, v4);
            }
            unint64_t v34 = *((void *)v4 + 2);
            unint64_t v33 = *((void *)v4 + 3);
            if (v34 >= v33 >> 1) {
              uint64_t v4 = sub_1000544D0((char *)(v33 > 1), v34 + 1, 1, v4);
            }
            *((void *)v4 + 2) = v34 + 1;
            uint64_t v10 = &v4[16 * v34];
            *((void *)v10 + 4) = v22;
            *((void *)v10 + 5) = v21;
            id v38 = v4;
          }
          swift_bridgeObjectRetain();
          unint64_t v11 = sub_100019BD4(v22, v21);
          char v13 = v12;
          swift_bridgeObjectRelease();
          if (v13)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              sub_10001F468();
            }
            swift_bridgeObjectRelease();
            uint64_t v16 = *(void **)(*(void *)(a2 + 56) + 8 * v11);
            sub_100017958(v11, a2);

            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            if (!v7) {
              goto LABEL_12;
            }
          }
          else
          {

            uint64_t result = swift_bridgeObjectRelease();
            if (!v7) {
              goto LABEL_12;
            }
          }
LABEL_8:
          unint64_t v14 = __clz(__rbit64(v7));
          v7 &= v7 - 1;
        }
      }
      int64_t v19 = v17 + 3;
      if (v19 < v37)
      {
        unint64_t v18 = *(void *)(v36 + 8 * v19);
        if (v18)
        {
          int64_t v9 = v19;
          goto LABEL_25;
        }
        while (1)
        {
          int64_t v9 = v19 + 1;
          if (__OFADD__(v19, 1)) {
            goto LABEL_38;
          }
          if (v9 >= v37) {
            break;
          }
          unint64_t v18 = *(void *)(v36 + 8 * v9);
          ++v19;
          if (v18) {
            goto LABEL_25;
          }
        }
      }
    }
LABEL_36:
    swift_release();
    uint64_t v35 = swift_bridgeObjectRetain();
    sub_100005F14(v35);
    swift_bridgeObjectRelease();
    return (uint64_t)v38;
  }
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

void sub_100036058(void *a1, void *a2)
{
  if (a1)
  {
    self;
    if (swift_dynamicCastObjCClass())
    {
      sub_100020D5C(0, (unint64_t *)&qword_100076508);
      sub_1000379A4();
      static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();
    }
    self;
    if (swift_dynamicCastObjCClass())
    {
      sub_100020D5C(0, (unint64_t *)&qword_100076508);
      static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    }
    if (a2)
    {
      sub_100020D5C(0, (unint64_t *)&qword_100076508);
      id v4 = a1;
      id v5 = a2;
      static NSObject.== infix(_:_:)();
    }
  }
}

uint64_t sub_100036738(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = &_swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  char v13 = &_swiftEmptyArrayStorage;
  uint64_t result = sub_100054750(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_100020D5C(0, (unint64_t *)&qword_100076508);
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100054750(0, v3[2] + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v7 = v3[2];
        unint64_t v6 = v3[3];
        if (v7 >= v6 >> 1)
        {
          sub_100054750(v6 > 1, v7 + 1, 1);
          uint64_t v3 = v13;
        }
        v3[2] = v7 + 1;
        sub_1000043D8(v12, &v3[4 * v7 + 4]);
      }
    }
    else
    {
      uint64_t v8 = (id *)(a1 + 32);
      sub_100020D5C(0, (unint64_t *)&qword_100076508);
      do
      {
        id v9 = *v8;
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100054750(0, v3[2] + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v11 = v3[2];
        unint64_t v10 = v3[3];
        if (v11 >= v10 >> 1)
        {
          sub_100054750(v10 > 1, v11 + 1, 1);
          uint64_t v3 = v13;
        }
        v3[2] = v11 + 1;
        sub_1000043D8(v12, &v3[4 * v11 + 4]);
        ++v8;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_10003699C(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t result = __CocoaDictionary.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int *v3 = sub_100036A50(v7, result + 1);
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  Swift::Int v10 = *v3;
  Swift::Int *v3 = 0x8000000000000000;
  sub_10001E2F8(a1, a2, isUniquelyReferenced_nonNull_native);
  Swift::Int *v3 = v10;

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100036A50(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100003C68(&qword_100076E68);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_100020D5C(0, (unint64_t *)&qword_100076508);
      do
      {
        swift_dynamicCast();
        sub_100020D5C(0, (unint64_t *)&qword_100077400);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_10001CB7C(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v2;
}

uint64_t sub_100036CA4()
{
  uint64_t v0 = type metadata accessor for URL();
  v5[4] = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for Logger();
  v5[6] = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  v5[5] = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for CocoaError.Code();
  __chkstk_darwin(v3);
  type metadata accessor for Persistence();
  return static Persistence.read(from:)();
}

uint64_t sub_100037198(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CocoaError.Code();
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v28 = v7;
  uint64_t v29 = v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v25 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  __chkstk_darwin(v11);
  unint64_t v27 = (char *)&v23 - v12;
  Swift::String v13 = URL.path(percentEncoded:)(1);
  uint64_t countAndFlagsBits = v13._countAndFlagsBits;
  type metadata accessor for Persistence();
  uint64_t v14 = static Persistence.read(from:)();
  uint64_t v24 = a3;
  uint64_t v25 = v3;
  uint64_t v15 = Dictionary<>.sanitize(isInternalClient:)(a2 & 1, v14);
  swift_bridgeObjectRelease();
  static Logger.agent.getter();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    v31[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v30 = sub_1000036B0(countAndFlagsBits, (unint64_t)v13._object, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v18 + 12) = 2082;
    sub_100020D5C(0, (unint64_t *)&qword_100076508);
    swift_bridgeObjectRetain();
    uint64_t v19 = Dictionary.description.getter();
    unint64_t v21 = v20;
    swift_bridgeObjectRelease();
    uint64_t v30 = sub_1000036B0(v19, v21, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s contains %{public}s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v29 + 8))(v27, v28);
  Dictionary<>.incorporate(persistableKeysAndValues:scope:)(v15, v24);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10003795C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000379A4()
{
  unint64_t result = qword_100077600;
  if (!qword_100077600)
  {
    sub_100020D5C(255, (unint64_t *)&qword_100076508);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100077600);
  }
  return result;
}

uint64_t sub_100037A0C(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  return sub_1000341F0(a1, a2, a3, v3);
}

uint64_t sub_100037A14()
{
  return swift_release();
}

uint64_t sub_100037A1C()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100037A64(uint8_t *a1, NSObject *a2)
{
  return sub_100034718(a1, a2, *(_WORD **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_100037A74()
{
  return sub_100035BFC(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100037A80()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100037A90()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100037AB8(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_100037AC8()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100037B00()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_100037B14()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100037B5C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100037B8C(uint64_t a1)
{
  uint64_t v38 = sub_100003C68(&qword_100077868);
  uint64_t v2 = __chkstk_darwin(v38);
  int64_t v37 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v36 = (char *)&v32 - v5;
  __chkstk_darwin(v4);
  uint64_t v35 = (char *)&v32 - v6;
  unint64_t v42 = (unint64_t)&_swiftEmptyArrayStorage;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v33 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v39 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  uint64_t v13 = (uint64_t)v36;
  uint64_t v14 = v37;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v40 = (v10 - 1) & v10;
  int64_t v41 = v12;
  for (unint64_t i = __clz(__rbit64(v10)) | (v12 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v18 << 6))
  {
    uint64_t v20 = v39;
    uint64_t v21 = *(void *)(v39 + 48);
    uint64_t v22 = type metadata accessor for UUID();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v24 = v23;
    uint64_t v25 = v21 + *(void *)(v23 + 72) * i;
    id v26 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
    uint64_t v27 = (uint64_t)v35;
    v26(v35, v25, v22);
    uint64_t v28 = *(void *)(*(void *)(v20 + 56) + 8 * i);
    uint64_t v29 = v38;
    *(void *)(v27 + *(int *)(v38 + 48)) = v28;
    sub_100006EE0(v27, v13, &qword_100077868);
    uint64_t v30 = *(int *)(v29 + 48);
    v26(v14, v13, v22);
    *(void *)&v14[v30] = *(void *)(v13 + v30);
    char v31 = *(void (**)(char *, uint64_t))(v24 + 8);
    swift_retain();
    swift_retain();
    v31(v14, v22);
    sub_100006E84(v13, &qword_100077868);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    uint64_t result = specialized Array._endMutation()();
    unint64_t v10 = v40;
    int64_t v12 = v41;
    if (v40) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v16 >= v34) {
      goto LABEL_25;
    }
    unint64_t v17 = *(void *)(v33 + 8 * v16);
    int64_t v18 = v12 + 1;
    if (!v17)
    {
      int64_t v18 = v12 + 2;
      if (v12 + 2 >= v34) {
        goto LABEL_25;
      }
      unint64_t v17 = *(void *)(v33 + 8 * v18);
      if (!v17)
      {
        int64_t v18 = v12 + 3;
        if (v12 + 3 >= v34) {
          goto LABEL_25;
        }
        unint64_t v17 = *(void *)(v33 + 8 * v18);
        if (!v17)
        {
          int64_t v18 = v12 + 4;
          if (v12 + 4 >= v34) {
            goto LABEL_25;
          }
          unint64_t v17 = *(void *)(v33 + 8 * v18);
          if (!v17) {
            break;
          }
        }
      }
    }
LABEL_20:
    uint64_t v40 = (v17 - 1) & v17;
    int64_t v41 = v18;
  }
  uint64_t v19 = v12 + 5;
  if (v12 + 5 >= v34)
  {
LABEL_25:
    swift_release();
    return v42;
  }
  unint64_t v17 = *(void *)(v33 + 8 * v19);
  if (v17)
  {
    int64_t v18 = v12 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v18 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v18 >= v34) {
      goto LABEL_25;
    }
    unint64_t v17 = *(void *)(v33 + 8 * v18);
    ++v19;
    if (v17) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100037F3C(uint64_t a1)
{
  uint64_t v2 = sub_100003C68(&qword_100077868);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v38 = (char *)&v33 - v7;
  __chkstk_darwin(v6);
  int64_t v37 = (char *)&v33 - v8;
  unint64_t v45 = (unint64_t)&_swiftEmptyArrayStorage;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v35 = a1 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v36 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v39 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  uint64_t v34 = v2;
  uint64_t v15 = (uint64_t)v38;
  while (1)
  {
    if (v12)
    {
      uint64_t v42 = (v12 - 1) & v12;
      int64_t v43 = v14;
      unint64_t v16 = __clz(__rbit64(v12)) | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v17 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v36) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v35 + 8 * v17);
    int64_t v19 = v14 + 1;
    if (!v18)
    {
      int64_t v19 = v14 + 2;
      if (v14 + 2 >= v36) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v35 + 8 * v19);
      if (!v18)
      {
        int64_t v19 = v14 + 3;
        if (v14 + 3 >= v36) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v35 + 8 * v19);
        if (!v18)
        {
          int64_t v19 = v14 + 4;
          if (v14 + 4 >= v36) {
            goto LABEL_28;
          }
          unint64_t v18 = *(void *)(v35 + 8 * v19);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_23:
    uint64_t v42 = (v18 - 1) & v18;
    int64_t v43 = v19;
    unint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_24:
    uint64_t v21 = v39;
    uint64_t v22 = *(void *)(v39 + 48);
    uint64_t v23 = type metadata accessor for UUID();
    unint64_t v44 = *(void **)(v23 - 8);
    uint64_t v24 = v22 + v44[9] * v16;
    uint64_t v25 = (void (*)(char *, uint64_t, uint64_t))v44[2];
    id v26 = (char *)(v44 + 2);
    uint64_t v27 = (uint64_t)v37;
    v25(v37, v24, v23);
    *(void *)(v27 + *(int *)(v2 + 48)) = *(void *)(*(void *)(v21 + 56) + 8 * v16);
    sub_100006EE0(v27, v15, &qword_100077868);
    uint64_t v28 = *(int *)(v2 + 48);
    uint64_t v40 = v26;
    int64_t v41 = v25;
    v25(v5, v15, v23);
    uint64_t v29 = v44;
    uint64_t v30 = *(void *)(v15 + v28);
    *(void *)&v5[v28] = v30;
    LOBYTE(v21) = *(unsigned char *)(v30 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 32);
    char v31 = (void *)v29[1];
    swift_retain();
    unint64_t v44 = v31;
    ((void (*)(char *, uint64_t))v31)(v5, v23);
    if (v21)
    {
      uint64_t v32 = *(int *)(v2 + 48);
      v41(v5, v15, v23);
      *(void *)&v5[v32] = *(void *)(v15 + v28);
      swift_retain();
      ((void (*)(char *, uint64_t))v44)(v5, v23);
      sub_100006E84(v15, &qword_100077868);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized Array._endMutation()();
      uint64_t v2 = v34;
    }
    else
    {
      uint64_t result = sub_100006E84(v15, &qword_100077868);
    }
    unint64_t v12 = v42;
    int64_t v14 = v43;
  }
  uint64_t v20 = v14 + 5;
  if (v14 + 5 >= v36)
  {
LABEL_28:
    swift_release();
    return v45;
  }
  unint64_t v18 = *(void *)(v35 + 8 * v20);
  if (v18)
  {
    int64_t v19 = v14 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v19 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v19 >= v36) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v35 + 8 * v19);
    ++v20;
    if (v18) {
      goto LABEL_23;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

unint64_t sub_100038370(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003C68(&qword_100076E80);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    id v8 = v7;
    unint64_t result = sub_100019BD4(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10003848C(uint64_t a1)
{
  uint64_t v2 = sub_100003C68(&qword_100077870);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003C68(&qword_100076E20);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100019288(v12, (uint64_t)v5, &qword_100077870);
    unint64_t result = sub_100019C4C((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    _OWORD v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100038680(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003C68(&qword_100076E70);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v20 = v2 + 64;
  swift_retain();
  uint64_t v5 = (char *)(a1 + 73);
  while (1)
  {
    uint64_t v6 = *(void *)(v5 - 41);
    uint64_t v7 = *(void *)(v5 - 33);
    uint64_t v8 = *(void *)(v5 - 25);
    uint64_t v9 = *(void *)(v5 - 17);
    uint64_t v10 = *(void *)(v5 - 9);
    char v11 = *(v5 - 1);
    char v12 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100019BD4(v6, v7);
    if (v14) {
      break;
    }
    *(void *)(v20 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    char v15 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v15 = v6;
    v15[1] = v7;
    uint64_t v16 = v3[7] + 32 * result;
    *(void *)uint64_t v16 = v8;
    *(void *)(v16 + 8) = v9;
    *(void *)(v16 + 16) = v10;
    *(unsigned char *)(v16 + 24) = v11;
    *(unsigned char *)(v16 + 25) = v12;
    uint64_t v17 = v3[2];
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18) {
      goto LABEL_11;
    }
    v3[2] = v19;
    v5 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000387D8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003C68(&qword_1000778F0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100019BD4(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v11 = (uint64_t *)(v2[6] + 16 * result);
    *char v11 = v5;
    v11[1] = v6;
    char v12 = (void *)(v2[7] + 16 * result);
    *char v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000388FC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003C68(&qword_1000778D0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100019288(v6, (uint64_t)&v15, &qword_1000778D8);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_100019BD4(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    char v11 = (uint64_t *)(v3[6] + 16 * result);
    *char v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1000043D8(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100038A34(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003C68(&qword_100077278);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100019288(v6, (uint64_t)v15, &qword_1000778E8);
    unint64_t result = sub_100019FE0((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_1000043D8(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100038B78(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v13 >= v7) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v3 + 8 * v13);
    ++v2;
    if (!v14)
    {
      int64_t v2 = v13 + 1;
      if (v13 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v14 = *(void *)(v3 + 8 * v2);
      if (!v14)
      {
        int64_t v2 = v13 + 2;
        if (v13 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v3 + 8 * v2);
        if (!v14)
        {
          int64_t v2 = v13 + 3;
          if (v13 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v14 = *(void *)(v3 + 8 * v2);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v14 - 1) & v14;
    unint64_t v9 = __clz(__rbit64(v14)) + (v2 << 6);
LABEL_5:
    long long v10 = (Swift::Int *)(*(void *)(v1 + 48) + 16 * v9);
    Swift::Int v11 = *v10;
    Swift::Int v12 = v10[1];
    swift_bridgeObjectRetain();
    sub_100002C94(&v16, v11, v12);
    unint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v15 = v13 + 4;
  if (v15 < v7)
  {
    unint64_t v14 = *(void *)(v3 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v2 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_27;
        }
        if (v2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v3 + 8 * v2);
        ++v15;
        if (v14) {
          goto LABEL_22;
        }
      }
    }
    int64_t v2 = v15;
    goto LABEL_22;
  }
LABEL_23:

  return swift_release();
}

uint64_t sub_100038CF8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Application();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  unint64_t v9 = (char *)&v25 - v8;
  uint64_t result = __chkstk_darwin(v7);
  Swift::Int v12 = (char *)&v25 - v11;
  int64_t v13 = 0;
  uint64_t v28 = a1;
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v15 = a1 + 56;
  uint64_t v14 = v16;
  uint64_t v17 = 1 << *(unsigned char *)(v15 - 24);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v14;
  uint64_t v25 = v15;
  int64_t v26 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v27 = v3 + 16;
  while (1)
  {
    if (v19)
    {
      unint64_t v20 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_5;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v22 >= v26) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v25 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v26) {
        return swift_release();
      }
      unint64_t v23 = *(void *)(v25 + 8 * v13);
      if (!v23)
      {
        int64_t v13 = v22 + 2;
        if (v22 + 2 >= v26) {
          return swift_release();
        }
        unint64_t v23 = *(void *)(v25 + 8 * v13);
        if (!v23)
        {
          int64_t v13 = v22 + 3;
          if (v22 + 3 >= v26) {
            return swift_release();
          }
          unint64_t v23 = *(void *)(v25 + 8 * v13);
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v19 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v12, *(void *)(v28 + 48) + *(void *)(v3 + 72) * v21, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v12, v2);
    sub_100028DB8((uint64_t)v9, v6);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
  }
  int64_t v24 = v22 + 4;
  if (v24 >= v26) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23)
  {
    int64_t v13 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v26) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v25 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100038FB0()
{
  type metadata accessor for PersistenceRecordStore();
  swift_allocObject();
  uint64_t result = sub_100039344();
  qword_1000795A0 = result;
  return result;
}

uint64_t sub_100038FEC()
{
  uint64_t v1 = type metadata accessor for Logger();
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v6 = v0[29];
  sub_100006DCC(v0 + 2, v0[5]);
  swift_bridgeObjectRetain();
  dispatch thunk of Locatable.persistenceRecordStorePath.getter();
  sub_10004B1B4(v6, (uint64_t)v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100039344()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v34 = *(void *)(v2 - 8);
  uint64_t v35 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  v27[1] = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  int64_t v37 = (char *)v27 - v5;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v38 = v6;
  uint64_t v39 = v7;
  uint64_t v8 = __chkstk_darwin(v6);
  v27[0] = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v33 = (char *)v27 - v10;
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v31 = *(void *)(v11 - 8);
  uint64_t v32 = v11;
  __chkstk_darwin(v11);
  uint64_t v30 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v13);
  uint64_t v29 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v15 - 8);
  uint64_t v16 = type metadata accessor for Locations();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  unint64_t v19 = (char *)v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)(v0 + 168) = 0;
  *(void *)(v0 + 176) = [objc_allocWithZone((Class)NSLock) init];
  *(unsigned char *)(v0 + 224) = 0;
  Locations.init()();
  *(void *)(v0 + 40) = v16;
  *(void *)(v0 + 48) = &protocol witness table for Locations;
  unint64_t v20 = sub_100006CC0((uint64_t *)(v0 + 16));
  uint64_t v36 = v17;
  uint64_t v28 = *(void (**)(uint64_t *, char *, uint64_t))(v17 + 16);
  v28(v20, v19, v16);
  *(void *)(v0 + 56) = &type metadata for ApplicationRecord;
  *(void *)(v0 + 64) = &off_100071EF0;
  uint64_t v41 = type metadata accessor for KeyRetriever();
  uint64_t v42 = &protocol witness table for KeyRetriever;
  sub_100006CC0((uint64_t *)&v40);
  KeyRetriever.init()();
  sub_10000DE5C(&v40, v0 + 72);
  *(void *)(v0 + 112) = type metadata accessor for TeamIdentifierRetriever();
  *(void *)(v0 + 120) = &protocol witness table for TeamIdentifierRetriever;
  sub_100020D5C(0, (unint64_t *)&qword_1000769D0);
  static DispatchQoS.unspecified.getter();
  *(void *)&long long v40 = &_swiftEmptyArrayStorage;
  sub_1000501A4((unint64_t *)&qword_1000767D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100003C68((uint64_t *)&unk_1000769E0);
  sub_10002B988((unint64_t *)&qword_1000767D8, (uint64_t *)&unk_1000769E0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v31 + 104))(v30, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v32);
  unint64_t v21 = v33;
  uint64_t v22 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v0 + 152) = &type metadata for SettingsSyncer;
  *(void *)(v0 + 160) = &off_100072158;
  *(void *)(v0 + 128) = v22;
  *(void *)(v0 + 208) = &type metadata for ClientFinder;
  *(void *)(v0 + 216) = &off_100071760;
  unint64_t v23 = (uint64_t *)swift_allocObject();
  *(void *)(v1 + 184) = v23;
  uint64_t v23[5] = v16;
  v23[6] = (uint64_t)&protocol witness table for Locations;
  int64_t v24 = sub_100006CC0(v23 + 2);
  v28(v24, v19, v16);
  v23[7] = (uint64_t)&type metadata for ApplicationRecord;
  v23[8] = (uint64_t)&off_100071EF0;
  Locations.persistenceRecordStorePath.getter();
  uint64_t v25 = sub_10004AD88(v21);
  (*(void (**)(void *, uint64_t))(v39 + 8))(v21, v38);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v19, v16);
  *(void *)(v1 + 232) = v25;
  return v1;
}

unint64_t sub_100039D14(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, int a7)
{
  uint64_t v58 = a5;
  int v56 = a7;
  uint64_t v57 = a3;
  uint64_t v11 = sub_100003C68((uint64_t *)&unk_100077410);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v48 - v15;
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v52 = *(void *)(v17 - 8);
  uint64_t v53 = v17;
  __chkstk_darwin(v17);
  unint64_t v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.persistenceRecordStore.getter();
  sub_100019288(a2, (uint64_t)v16, (uint64_t *)&unk_100077410);
  swift_bridgeObjectRetain_n();
  unint64_t v54 = a4;
  swift_bridgeObjectRetain_n();
  unint64_t v55 = a6;
  swift_bridgeObjectRetain_n();
  unint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  int v22 = v21;
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v51 = a2;
    uint64_t v24 = v23;
    uint64_t v50 = swift_slowAlloc();
    uint64_t v61 = v50;
    *(_DWORD *)uint64_t v24 = 136447234;
    int v49 = v22;
    swift_bridgeObjectRetain();
    uint64_t v25 = Set.description.getter();
    os_log_t v48 = v20;
    uint64_t v26 = v25;
    unint64_t v28 = v27;
    swift_bridgeObjectRelease();
    uint64_t v60 = sub_1000036B0(v26, v28, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2082;
    sub_100019288((uint64_t)v16, (uint64_t)v14, (uint64_t *)&unk_100077410);
    uint64_t v29 = String.init<A>(describing:)();
    uint64_t v60 = sub_1000036B0(v29, v30, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006E84((uint64_t)v16, (uint64_t *)&unk_100077410);
    *(_WORD *)(v24 + 22) = 2082;
    unint64_t v31 = v54;
    swift_bridgeObjectRetain();
    uint64_t v60 = sub_1000036B0(v57, v31, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v24 + 32) = 2082;
    unint64_t v32 = v55;
    swift_bridgeObjectRetain();
    uint64_t v60 = sub_1000036B0(v58, v32, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v24 + 42) = 2082;
    char v33 = v56;
    if (v56) {
      uint64_t v34 = 7562585;
    }
    else {
      uint64_t v34 = 28494;
    }
    if (v56) {
      unint64_t v35 = 0xE300000000000000;
    }
    else {
      unint64_t v35 = 0xE200000000000000;
    }
    uint64_t v60 = sub_1000036B0(v34, v35, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v36 = v48;
    _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v49, "Get settings %{public}s for store with record ID “%{public}s,” container “%{public}s” and name “%{public}s.” Is internal: %{public}s", (uint8_t *)v24, 0x34u);
    uint64_t v37 = v50;
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v51;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v52 + 8))(v19, v53);
    unint64_t v38 = v32;
    uint64_t v39 = v58;
    long long v40 = (void (*)(char *, uint64_t))v31;
    char v41 = v33;
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_100006E84((uint64_t)v16, (uint64_t *)&unk_100077410);

    uint64_t v37 = v55;
    swift_bridgeObjectRelease_n();
    uint64_t v42 = (void (*)(char *, uint64_t))v54;
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v19, v53);
    unint64_t v38 = v37;
    uint64_t v39 = v58;
    long long v40 = v42;
    char v41 = v56;
  }
  if (!*(void *)(a1 + 16)) {
    return sub_100038370((uint64_t)&_swiftEmptyArrayStorage);
  }
  uint64_t v43 = v59;
  unint64_t v44 = sub_10003A244(a2, v57, v40, v39, v38, v41 & 1);
  uint64_t v59 = v43;
  if (!v43)
  {
    uint64_t v45 = v44;
    swift_bridgeObjectRetain();
    uint64_t v46 = v59;
    uint64_t v37 = sub_10004FBE0(v45, a1);
    uint64_t v59 = v46;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v37;
}

unint64_t sub_10003A244(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4, unint64_t a5, int a6)
{
  int v60 = a6;
  uint64_t v65 = a4;
  uint64_t v66 = a2;
  uint64_t v10 = sub_100003C68((uint64_t *)&unk_100077410);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)v57 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)v57 - v17;
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v67 = *(void *)(v19 - 8);
  uint64_t v68 = v19;
  uint64_t v20 = __chkstk_darwin(v19);
  os_log_t v64 = (char *)v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)v57 - v22;
  uint64_t v70 = v6;
  [*(id *)(v6 + 176) lock];
  static Logger.persistenceRecordStore.getter();
  uint64_t v62 = a1;
  sub_100019288(a1, (uint64_t)v18, (uint64_t *)&unk_100077410);
  uint64_t v69 = a3;
  swift_bridgeObjectRetain_n();
  unint64_t v59 = a5;
  swift_bridgeObjectRetain_n();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  v57[1] = v10;
  uint64_t v58 = v13;
  uint64_t v63 = v16;
  if (v26)
  {
    uint64_t v27 = swift_slowAlloc();
    v57[0] = swift_slowAlloc();
    uint64_t v74 = v57[0];
    *(_DWORD *)uint64_t v27 = 136446978;
    sub_100019288((uint64_t)v18, (uint64_t)v16, (uint64_t *)&unk_100077410);
    uint64_t v28 = String.init<A>(describing:)();
    uint64_t v71 = sub_1000036B0(v28, v29, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006E84((uint64_t)v18, (uint64_t *)&unk_100077410);
    *(_WORD *)(v27 + 12) = 2082;
    unint64_t v30 = (unint64_t)v69;
    swift_bridgeObjectRetain();
    uint64_t v71 = sub_1000036B0(v66, v30, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v27 + 22) = 2082;
    unint64_t v31 = v59;
    swift_bridgeObjectRetain();
    uint64_t v71 = sub_1000036B0(v65, v31, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v27 + 32) = 2082;
    char v32 = v60;
    if (v60) {
      uint64_t v33 = 7562585;
    }
    else {
      uint64_t v33 = 28494;
    }
    if (v60) {
      unint64_t v34 = 0xE300000000000000;
    }
    else {
      unint64_t v34 = 0xE200000000000000;
    }
    uint64_t v71 = sub_1000036B0(v33, v34, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Get all settings for store with record ID “%{public}s,” container “%{public}s” and name “%{public}s.” Is internal: %{public}s", (uint8_t *)v27, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v35 = *(void (**)(char *, uint64_t))(v67 + 8);
    v35(v23, v68);
    unint64_t v36 = v31;
    uint64_t v37 = v65;
    char v38 = v32;
  }
  else
  {
    sub_100006E84((uint64_t)v18, (uint64_t *)&unk_100077410);

    unint64_t v36 = v59;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    unint64_t v35 = *(void (**)(char *, uint64_t))(v67 + 8);
    v35(v23, v68);
    uint64_t v37 = v65;
    char v38 = v60;
  }
  char v73 = 0;
  memset(v72, 0, sizeof(v72));
  uint64_t v39 = v61;
  uint64_t v40 = v62;
  char v41 = sub_10003AA08(v62, (uint64_t *)v72, v66, (uint64_t)v69, v38 & 1, 0);
  if (!v39)
  {
    unint64_t v44 = sub_10004FD9C((uint64_t)v41, v37, v36, 0x657A696E656B6F74, 0xEF7473696C702E64);
    swift_release();
LABEL_20:
    [*(id *)(v70 + 176) unlock];
    return v44;
  }
  uint64_t v43 = (uint64_t)v63;
  uint64_t v42 = v64;
  uint64_t v74 = v39;
  swift_errorRetain();
  unint64_t v44 = sub_100003C68(&qword_100076FE0);
  int v45 = swift_dynamicCast();
  if (v45 && v71 <= 1u)
  {
    swift_errorRelease();
    swift_errorRelease();
    unint64_t v44 = sub_100038370((uint64_t)&_swiftEmptyArrayStorage);
    goto LABEL_20;
  }
  swift_errorRelease();
  static Logger.persistenceRecordStore.getter();
  uint64_t v46 = v40;
  uint64_t v47 = (uint64_t)v58;
  sub_100019288(v46, (uint64_t)v58, (uint64_t *)&unk_100077410);
  swift_errorRetain();
  swift_errorRetain();
  os_log_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = swift_slowAlloc();
    uint64_t v69 = v35;
    uint64_t v51 = v50;
    uint64_t v74 = swift_slowAlloc();
    *(_DWORD *)uint64_t v51 = 136446466;
    sub_100019288(v47, v43, (uint64_t *)&unk_100077410);
    uint64_t v52 = String.init<A>(describing:)();
    uint64_t v71 = sub_1000036B0(v52, v53, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006E84(v47, (uint64_t *)&unk_100077410);
    *(_WORD *)(v51 + 12) = 2082;
    uint64_t v71 = v39;
    swift_errorRetain();
    uint64_t v54 = String.init<A>(describing:)();
    unint64_t v44 = v55;
    uint64_t v71 = sub_1000036B0(v54, v55, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "Failed to retrieve settings for record %{public}s with unexpected error. Error: %{public}s", (uint8_t *)v51, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v69(v64, v68);
  }
  else
  {
    sub_100006E84(v47, (uint64_t *)&unk_100077410);
    swift_errorRelease();
    swift_errorRelease();

    v35(v42, v68);
  }
  swift_willThrow();
  [*(id *)(v70 + 176) unlock];
  return v44;
}

char *sub_10003AA08(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v7 = v6;
  int v26 = a6;
  int v27 = a5;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v10 = sub_100003C68((uint64_t *)&unk_100077410);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019288(a1, (uint64_t)v12, (uint64_t *)&unk_100077410);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_100006E84((uint64_t)v12, (uint64_t *)&unk_100077410);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    uint64_t v23 = sub_1000476F8((uint64_t)v16);
    if (!v6)
    {
      uint64_t v12 = (char *)v23;
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      return v12;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    uint64_t v31 = v6;
    swift_errorRetain();
    sub_100003C68(&qword_100076FE0);
    if (!swift_dynamicCast() || v30) {
      goto LABEL_12;
    }
    swift_errorRelease();
    swift_errorRelease();
    uint64_t v7 = 0;
  }
  sub_100006EE0((uint64_t)a2, (uint64_t)v37, &qword_1000778E0);
  uint64_t v17 = v38;
  if (v38)
  {
    uint64_t v18 = v39;
    uint64_t v19 = v40;
    char v20 = v41 & 1;
    uint64_t v21 = v37;
  }
  else
  {
    sub_100047A8C(v28, v29, v27 & 1, (uint64_t)v32);
    if (v7) {
      return v12;
    }
    char v20 = v36;
    uint64_t v18 = v34;
    uint64_t v19 = v35;
    uint64_t v21 = v32;
    uint64_t v17 = v33;
  }
  *(void *)&long long v42 = *(void *)v21;
  *((void *)&v42 + 1) = v17;
  uint64_t v43 = v18;
  uint64_t v44 = v19;
  char v45 = v20;
  sub_100051704(a2);
  uint64_t v22 = sub_100047C18(&v42);
  if (!v7)
  {
    uint64_t v12 = (char *)v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v12;
  }
  uint64_t v31 = v7;
  swift_errorRetain();
  sub_100003C68(&qword_100076FE0);
  if (!swift_dynamicCast() || v30)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_12:
    swift_errorRelease();
    return v12;
  }
  swift_errorRelease();
  swift_errorRelease();
  if (v26)
  {
    uint64_t v12 = (char *)sub_1000472E4(&v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100011298();
    swift_allocError();
    *os_log_type_t v25 = 0;
    swift_willThrow();
  }
  return v12;
}

uint64_t sub_10003ADB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v54 = (void (*)(char *, uint64_t))a3;
  uint64_t v9 = v8;
  int v50 = a7;
  uint64_t v55 = a5;
  uint64_t v51 = a8;
  uint64_t v47 = sub_100003C68((uint64_t *)&unk_100077410);
  uint64_t v14 = __chkstk_darwin(v47);
  uint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v42 - v17;
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v48 = *(void *)(v19 - 8);
  uint64_t v49 = v19;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.persistenceRecordStore.getter();
  uint64_t v53 = a2;
  sub_100019288(a2, (uint64_t)v18, (uint64_t *)&unk_100077410);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v52 = a6;
  swift_bridgeObjectRetain_n();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  int v24 = v23;
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v46 = v9;
    uint64_t v26 = v25;
    uint64_t v44 = swift_slowAlloc();
    uint64_t v57 = v44;
    *(_DWORD *)uint64_t v26 = 136381699;
    sub_100020D5C(0, (unint64_t *)&qword_100076508);
    swift_bridgeObjectRetain();
    uint64_t v27 = Dictionary.description.getter();
    os_log_t v43 = v22;
    uint64_t v28 = v27;
    unint64_t v45 = a4;
    unint64_t v30 = v29;
    swift_bridgeObjectRelease();
    uint64_t v56 = sub_1000036B0(v28, v30, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2082;
    sub_100019288((uint64_t)v18, (uint64_t)v16, (uint64_t *)&unk_100077410);
    uint64_t v31 = String.init<A>(describing:)();
    uint64_t v56 = sub_1000036B0(v31, v32, &v57);
    a4 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006E84((uint64_t)v18, (uint64_t *)&unk_100077410);
    *(_WORD *)(v26 + 22) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v56 = sub_1000036B0((uint64_t)v54, a4, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 32) = 2082;
    LODWORD(v47) = v24;
    unint64_t v33 = v52;
    swift_bridgeObjectRetain();
    uint64_t v56 = sub_1000036B0(v55, v33, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 42) = 2082;
    char v34 = v50;
    if (v50) {
      uint64_t v35 = 7562585;
    }
    else {
      uint64_t v35 = 28494;
    }
    if (v50) {
      unint64_t v36 = 0xE300000000000000;
    }
    else {
      unint64_t v36 = 0xE200000000000000;
    }
    uint64_t v56 = sub_1000036B0(v35, v36, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v37 = v43;
    _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v47, "Set values %{private}s for store with record ID “%{public}s,” container “%{public}s” and name “%{public}s.” Is internal: %{public}s", (uint8_t *)v26, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v48 + 8))(v21, v49);
    uint64_t v38 = v54;
    char v39 = v34;
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_100006E84((uint64_t)v18, (uint64_t *)&unk_100077410);

    unint64_t v33 = v52;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v21, v49);
    uint64_t v38 = v54;
    char v39 = v50;
  }
  unint64_t v40 = sub_100038370((uint64_t)&_swiftEmptyArrayStorage);
  sub_10003D7C4(a1, (uint64_t)&_swiftEmptySetSingleton, v40, 0, v53, v38, a4, v55, v51, v33, v39 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10003B2E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v55 = (void (*)(char *, uint64_t))a3;
  uint64_t v9 = v8;
  int v51 = a7;
  uint64_t v56 = a5;
  uint64_t v52 = a8;
  uint64_t v48 = sub_100003C68((uint64_t *)&unk_100077410);
  uint64_t v14 = __chkstk_darwin(v48);
  uint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v43 - v17;
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v49 = *(void *)(v19 - 8);
  uint64_t v50 = v19;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.persistenceRecordStore.getter();
  uint64_t v54 = a2;
  sub_100019288(a2, (uint64_t)v18, (uint64_t *)&unk_100077410);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v53 = a6;
  swift_bridgeObjectRetain_n();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  int v24 = v23;
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v47 = v9;
    uint64_t v26 = v25;
    uint64_t v45 = swift_slowAlloc();
    uint64_t v58 = v45;
    *(_DWORD *)uint64_t v26 = 136447234;
    swift_bridgeObjectRetain();
    uint64_t v27 = Set.description.getter();
    os_log_t v44 = v22;
    uint64_t v28 = v27;
    unint64_t v46 = a4;
    unint64_t v30 = v29;
    swift_bridgeObjectRelease();
    uint64_t v57 = sub_1000036B0(v28, v30, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2082;
    sub_100019288((uint64_t)v18, (uint64_t)v16, (uint64_t *)&unk_100077410);
    uint64_t v31 = String.init<A>(describing:)();
    uint64_t v57 = sub_1000036B0(v31, v32, &v58);
    a4 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006E84((uint64_t)v18, (uint64_t *)&unk_100077410);
    *(_WORD *)(v26 + 22) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v57 = sub_1000036B0((uint64_t)v55, a4, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 32) = 2082;
    LODWORD(v48) = v24;
    unint64_t v33 = v53;
    swift_bridgeObjectRetain();
    uint64_t v57 = sub_1000036B0(v56, v33, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 42) = 2082;
    char v34 = v51;
    if (v51) {
      uint64_t v35 = 7562585;
    }
    else {
      uint64_t v35 = 28494;
    }
    if (v51) {
      unint64_t v36 = 0xE300000000000000;
    }
    else {
      unint64_t v36 = 0xE200000000000000;
    }
    uint64_t v57 = sub_1000036B0(v35, v36, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v37 = v44;
    _os_log_impl((void *)&_mh_execute_header, v44, (os_log_type_t)v48, "Remove values for settings %{public}s for store with record ID “%{public}s,” container “%{public}s” and name “%{public}s.” Is internal: %{public}s", (uint8_t *)v26, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v49 + 8))(v21, v50);
    uint64_t v38 = v55;
    char v39 = v34;
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_100006E84((uint64_t)v18, (uint64_t *)&unk_100077410);

    unint64_t v33 = v53;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v21, v50);
    uint64_t v38 = v55;
    char v39 = v51;
  }
  unint64_t v40 = sub_100038370((uint64_t)&_swiftEmptyArrayStorage);
  unint64_t v41 = sub_100038370((uint64_t)&_swiftEmptyArrayStorage);
  sub_10003D7C4(v40, a1, v41, 0, v54, v38, a4, v56, v52, v33, v39 & 1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10003B804@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  os_log_t v44 = (void (*)(char *, uint64_t))a2;
  int v41 = a6;
  uint64_t v45 = a4;
  uint64_t v42 = a7;
  uint64_t v11 = sub_100003C68((uint64_t *)&unk_100077410);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = &v35[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  uint64_t v16 = &v35[-v15];
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v39 = *(void *)(v17 - 8);
  uint64_t v40 = v17;
  __chkstk_darwin(v17);
  uint64_t v19 = &v35[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static Logger.persistenceRecordStore.getter();
  uint64_t v43 = a1;
  sub_100019288(a1, (uint64_t)v16, (uint64_t *)&unk_100077410);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  int v22 = v21;
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v23 = swift_slowAlloc();
    int v36 = v22;
    uint64_t v24 = v23;
    uint64_t v37 = swift_slowAlloc();
    uint64_t v47 = v37;
    *(_DWORD *)uint64_t v24 = 136446978;
    uint64_t v38 = v7;
    sub_100019288((uint64_t)v16, (uint64_t)v14, (uint64_t *)&unk_100077410);
    uint64_t v25 = String.init<A>(describing:)();
    uint64_t v46 = sub_1000036B0(v25, v26, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006E84((uint64_t)v16, (uint64_t *)&unk_100077410);
    *(_WORD *)(v24 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v46 = sub_1000036B0((uint64_t)v44, a3, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v24 + 22) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v46 = sub_1000036B0(v45, a5, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v24 + 32) = 2082;
    char v27 = v41;
    if (v41) {
      uint64_t v28 = 7562585;
    }
    else {
      uint64_t v28 = 28494;
    }
    if (v41) {
      unint64_t v29 = 0xE300000000000000;
    }
    else {
      unint64_t v29 = 0xE200000000000000;
    }
    uint64_t v46 = sub_1000036B0(v28, v29, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v36, "Clear all settings for store with record ID “%{public}s,” container “%{public}s” and name “%{public}s.” Is internal: %{public}s", (uint8_t *)v24, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(unsigned char *, uint64_t))(v39 + 8))(v19, v40);
    uint64_t v31 = v44;
    uint64_t v30 = v45;
  }
  else
  {
    sub_100006E84((uint64_t)v16, (uint64_t *)&unk_100077410);

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(unsigned char *, uint64_t))(v39 + 8))(v19, v40);
    uint64_t v31 = v44;
    uint64_t v30 = v45;
    char v27 = v41;
  }
  unint64_t v32 = sub_100038370((uint64_t)&_swiftEmptyArrayStorage);
  unint64_t v33 = sub_100038370((uint64_t)&_swiftEmptyArrayStorage);
  sub_10003D7C4(v32, (uint64_t)&_swiftEmptySetSingleton, v33, 1, v43, v31, a3, v30, v42, a5, v27 & 1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id sub_10003BC78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  int v80 = a5;
  uint64_t v79 = a3;
  uint64_t v75 = a6;
  uint64_t v77 = sub_100003C68((uint64_t *)&unk_100077410);
  uint64_t v11 = __chkstk_darwin(v77);
  long long v84 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v73 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v73 - v16;
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v87 = (char *)&v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v73 - v22;
  uint64_t v88 = v7;
  [*(id *)(v7 + 176) lock];
  static Logger.persistenceRecordStore.getter();
  uint64_t v83 = a2;
  sub_100019288(a2, (uint64_t)v17, (uint64_t *)&unk_100077410);
  uint64_t v24 = a1;
  swift_bridgeObjectRetain_n();
  unint64_t v81 = a4;
  swift_bridgeObjectRetain_n();
  uint64_t v78 = (void (*)(void, void))v23;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v85 = v19;
  uint64_t v86 = v18;
  uint64_t v76 = v15;
  if (v27)
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v74 = swift_slowAlloc();
    uint64_t v93 = (char *)v74;
    *(_DWORD *)uint64_t v28 = 136446978;
    os_log_t v73 = v25;
    swift_bridgeObjectRetain();
    uint64_t v29 = Set.description.getter();
    unint64_t v31 = v30;
    swift_bridgeObjectRelease();
    *(void *)&v90[1] = sub_1000036B0(v29, v31, (uint64_t *)&v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2082;
    sub_100019288((uint64_t)v17, (uint64_t)v15, (uint64_t *)&unk_100077410);
    uint64_t v32 = String.init<A>(describing:)();
    *(void *)&v90[1] = sub_1000036B0(v32, v33, (uint64_t *)&v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006E84((uint64_t)v17, (uint64_t *)&unk_100077410);
    *(_WORD *)(v28 + 22) = 2082;
    os_log_type_t v34 = v26;
    unint64_t v35 = v81;
    swift_bridgeObjectRetain();
    uint64_t v36 = v79;
    *(void *)&v90[1] = sub_1000036B0(v79, v35, (uint64_t *)&v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v28 + 32) = 2082;
    char v37 = v80;
    if (v80) {
      uint64_t v38 = 7562585;
    }
    else {
      uint64_t v38 = 28494;
    }
    if (v80) {
      unint64_t v39 = 0xE300000000000000;
    }
    else {
      unint64_t v39 = 0xE200000000000000;
    }
    *(void *)&v90[1] = sub_1000036B0(v38, v39, (uint64_t *)&v93);
    uint64_t v40 = v86;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v41 = v73;
    _os_log_impl((void *)&_mh_execute_header, v73, v34, "Deleting stores “%{public}s” with record ID “%{public}s,” container “%{public}s.” Is internal: %{public}s", (uint8_t *)v28, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v42 = v78;
    uint64_t v78 = *(void (**)(void, void))(v85 + 8);
    v78(v42, v40);
    uint64_t v43 = v83;
    uint64_t v44 = (uint64_t)v84;
    uint64_t v45 = v82;
    uint64_t v46 = v36;
    uint64_t v47 = v87;
    char v48 = v37;
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_100006E84((uint64_t)v17, (uint64_t *)&unk_100077410);

    unint64_t v35 = v81;
    swift_bridgeObjectRelease_n();
    uint64_t v49 = v78;
    uint64_t v78 = *(void (**)(void, void))(v19 + 8);
    v78(v49, v18);
    uint64_t v47 = v87;
    uint64_t v43 = v83;
    uint64_t v44 = (uint64_t)v84;
    uint64_t v45 = v82;
    uint64_t v46 = v79;
    char v48 = v80;
  }
  char v92 = 0;
  memset(v91, 0, sizeof(v91));
  uint64_t v50 = sub_10003AA08(v43, (uint64_t *)v91, v46, v35, v48 & 1, 0);
  if (!v45)
  {
    uint64_t v51 = (uint64_t)v50;
    LOBYTE(v93) = 0;
    *(_WORD *)uint64_t v90 = 0;
    sub_100050BC0(v24, (uint64_t)v50, &v93, &v90[1], v90);
    char v89 = 0;
    sub_10003C66C(v51, (char)v93, v90[1], v90[0], &v89);
    uint64_t v68 = v75;
    if (v89 == 1)
    {
      swift_release();
      uint64_t v69 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v68, 1, 1, v69);
    }
    else
    {
      uint64_t v70 = v51 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_recordIdentifier;
      uint64_t v71 = type metadata accessor for UUID();
      uint64_t v72 = *(void *)(v71 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 16))(v68, v70, v71);
      swift_release();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v72 + 56))(v68, 0, 1, v71);
    }
    return [*(id *)(v88 + 176) unlock];
  }
  uint64_t v93 = (char *)v45;
  swift_errorRetain();
  sub_100003C68(&qword_100076FE0);
  if (swift_dynamicCast() && !v90[1])
  {
    swift_errorRelease();
    uint64_t v67 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v75, 1, 1, v67);
    swift_errorRelease();
    return [*(id *)(v88 + 176) unlock];
  }
  swift_errorRelease();
  static Logger.persistenceRecordStore.getter();
  sub_100019288(v43, v44, (uint64_t *)&unk_100077410);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.error.getter();
  int v54 = v53;
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v55 = swift_slowAlloc();
    LODWORD(v83) = v54;
    uint64_t v56 = v55;
    long long v84 = (char *)swift_slowAlloc();
    uint64_t v93 = v84;
    *(_DWORD *)uint64_t v56 = 136446722;
    uint64_t v57 = v44;
    swift_bridgeObjectRetain();
    uint64_t v58 = Set.description.getter();
    unint64_t v60 = v59;
    swift_bridgeObjectRelease();
    *(void *)&v90[1] = sub_1000036B0(v58, v60, (uint64_t *)&v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v56 + 12) = 2082;
    sub_100019288(v57, (uint64_t)v76, (uint64_t *)&unk_100077410);
    uint64_t v61 = String.init<A>(describing:)();
    *(void *)&v90[1] = sub_1000036B0(v61, v62, (uint64_t *)&v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006E84(v57, (uint64_t *)&unk_100077410);
    *(_WORD *)(v56 + 22) = 2082;
    *(void *)&v90[1] = v45;
    swift_errorRetain();
    uint64_t v63 = String.init<A>(describing:)();
    *(void *)&v90[1] = sub_1000036B0(v63, v64, (uint64_t *)&v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v83, "Failed to delete stores “%{public}s” for record %{public}s with unexpected error. Error: %{public}s", (uint8_t *)v56, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v65 = v87;
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_100006E84(v44, (uint64_t *)&unk_100077410);
    swift_errorRelease();
    swift_errorRelease();

    uint64_t v65 = v47;
  }
  v78(v65, v86);
  swift_willThrow();
  return [*(id *)(v88 + 176) unlock];
}

uint64_t sub_10003C66C(uint64_t a1, char a2, char a3, char a4, char *a5)
{
  uint64_t v7 = v5;
  char v37 = a5;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v12 - 8);
  uint64_t v36 = v12;
  __chkstk_darwin(v12);
  unint64_t v33 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  unint64_t v31 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v30 = *(void *)(v15 - 8);
  uint64_t result = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v19 = a1 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_storeDirectory;
    swift_beginAccess();
    if (!*(void *)(*(void *)v19 + 16))
    {
      uint64_t result = sub_100044F28(a1);
      char v22 = 1;
      if ((a3 & 1) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    uint64_t v20 = a1 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_recordIdentifier;
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v39 = *(void **)(v7 + 232);
    *(void *)(v7 + 232) = 0x8000000000000000;
    sub_10001D4D8(a1, v20, isUniquelyReferenced_nonNull_native);
    *(void *)(v7 + 232) = v39;
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t result = sub_100038FEC();
    if ((a3 & 1) == 0) {
      goto LABEL_4;
    }
  }
  else if ((a3 & 1) == 0)
  {
LABEL_4:
    char v22 = 0;
    if ((a4 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    if ((*(unsigned char *)(v7 + 224) & 1) == 0)
    {
      *(unsigned char *)(v7 + 224) = 1;
      sub_100020D5C(0, (unint64_t *)&qword_1000769D0);
      uint64_t v23 = v30;
      (*(void (**)(char *, void, uint64_t))(v30 + 104))(v18, enum case for DispatchQoS.QoSClass.default(_:), v15);
      uint64_t v29 = static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v18, v15);
      aBlock[4] = sub_100051780;
      aBlock[5] = v7;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10002C398;
      aBlock[3] = &unk_1000729F8;
      uint64_t v24 = _Block_copy(aBlock);
      swift_retain();
      uint64_t v25 = v31;
      static DispatchQoS.unspecified.getter();
      unint64_t v39 = &_swiftEmptyArrayStorage;
      sub_1000501A4((unint64_t *)&qword_100077430, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100003C68((uint64_t *)&unk_100077260);
      sub_10002B988((unint64_t *)&qword_100077440, (uint64_t *)&unk_100077260);
      os_log_type_t v26 = v33;
      uint64_t v27 = v36;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v28 = (void *)v29;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v24);

      (*(void (**)(char *, uint64_t))(v35 + 8))(v26, v27);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v25, v34);
      uint64_t result = swift_release();
    }
    goto LABEL_14;
  }
  uint64_t result = sub_10004E374(a1);
  if (v6) {
    return result;
  }
  char v22 = 0;
LABEL_10:
  uint64_t result = sub_1000455E4();
LABEL_11:
  if (a4) {
    goto LABEL_12;
  }
LABEL_14:
  *char v37 = v22;
  return result;
}

NSObject *sub_10003CB24(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4, unint64_t a5, int a6)
{
  int v58 = a6;
  uint64_t v54 = a4;
  uint64_t v59 = a2;
  uint64_t v10 = sub_100003C68((uint64_t *)&unk_100077410);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)v50 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)v50 - v17;
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v60 = *(void *)(v19 - 8);
  uint64_t v61 = v19;
  uint64_t v20 = __chkstk_darwin(v19);
  os_log_type_t v53 = (char *)v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)v50 - v22;
  uint64_t v62 = v6;
  [*(id *)(v6 + 176) lock];
  static Logger.persistenceRecordStore.getter();
  uint64_t v57 = a1;
  sub_100019288(a1, (uint64_t)v18, (uint64_t *)&unk_100077410);
  uint64_t v63 = a3;
  swift_bridgeObjectRetain_n();
  unint64_t v55 = a5;
  swift_bridgeObjectRetain_n();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  v50[1] = v10;
  uint64_t v51 = v13;
  uint64_t v52 = v16;
  if (v26)
  {
    uint64_t v27 = swift_slowAlloc();
    v50[0] = swift_slowAlloc();
    uint64_t v67 = v50[0];
    *(_DWORD *)uint64_t v27 = 136446978;
    sub_100019288((uint64_t)v18, (uint64_t)v16, (uint64_t *)&unk_100077410);
    uint64_t v28 = String.init<A>(describing:)();
    uint64_t v64 = sub_1000036B0(v28, v29, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006E84((uint64_t)v18, (uint64_t *)&unk_100077410);
    *(_WORD *)(v27 + 12) = 2082;
    unint64_t v30 = (unint64_t)v63;
    swift_bridgeObjectRetain();
    uint64_t v64 = sub_1000036B0(v59, v30, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v27 + 22) = 2082;
    unint64_t v31 = v55;
    swift_bridgeObjectRetain();
    uint64_t v32 = v54;
    uint64_t v64 = sub_1000036B0(v54, v31, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v27 + 32) = 2082;
    if (v58) {
      uint64_t v33 = 7562585;
    }
    else {
      uint64_t v33 = 28494;
    }
    if (v58) {
      unint64_t v34 = 0xE300000000000000;
    }
    else {
      unint64_t v34 = 0xE200000000000000;
    }
    uint64_t v64 = sub_1000036B0(v33, v34, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Get store properties for store with record ID “%{public}s,” container “%{public}s” and name “%{public}s.” Is internal: %{public}s", (uint8_t *)v27, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v35 = *(void (**)(char *, uint64_t))(v60 + 8);
    v35(v23, v61);
  }
  else
  {
    sub_100006E84((uint64_t)v18, (uint64_t *)&unk_100077410);

    unint64_t v31 = v55;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v35 = *(void (**)(char *, uint64_t))(v60 + 8);
    v35(v23, v61);
    uint64_t v32 = v54;
  }
  char v66 = 0;
  memset(v65, 0, sizeof(v65));
  uint64_t v36 = v56;
  uint64_t v37 = v57;
  sub_10003AA08(v57, (uint64_t *)v65, v59, (uint64_t)v63, v58 & 1, 0);
  if (!v36)
  {
    uint64_t v40 = sub_10000E1A0(v32, v31);
    swift_release();
    goto LABEL_15;
  }
  uint64_t v67 = v36;
  swift_errorRetain();
  sub_100003C68(&qword_100076FE0);
  if (swift_dynamicCast())
  {
    uint64_t v39 = (uint64_t)v52;
    uint64_t v38 = v53;
    if (!(_BYTE)v64)
    {
      swift_errorRelease();
      uint64_t v40 = sub_100038370((uint64_t)&_swiftEmptyArrayStorage);
      swift_errorRelease();
LABEL_15:
      [*(id *)(v62 + 176) unlock];
      return v40;
    }
  }
  else
  {
    uint64_t v39 = (uint64_t)v52;
    uint64_t v38 = v53;
  }
  swift_errorRelease();
  static Logger.persistenceRecordStore.getter();
  uint64_t v41 = (uint64_t)v51;
  sub_100019288(v37, (uint64_t)v51, (uint64_t *)&unk_100077410);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v42))
  {
    uint64_t v43 = swift_slowAlloc();
    uint64_t v63 = v35;
    uint64_t v44 = v43;
    uint64_t v67 = swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 136446466;
    sub_100019288(v41, v39, (uint64_t *)&unk_100077410);
    uint64_t v45 = String.init<A>(describing:)();
    uint64_t v64 = sub_1000036B0(v45, v46, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006E84(v41, (uint64_t *)&unk_100077410);
    *(_WORD *)(v44 + 12) = 2082;
    uint64_t v64 = v36;
    swift_errorRetain();
    uint64_t v47 = String.init<A>(describing:)();
    uint64_t v64 = sub_1000036B0(v47, v48, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v40, v42, "Failed to get properties for record %{public}s with unexpected error. Error: %{public}s", (uint8_t *)v44, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v63(v53, v61);
  }
  else
  {
    sub_100006E84(v41, (uint64_t *)&unk_100077410);
    swift_errorRelease();
    swift_errorRelease();

    v35(v38, v61);
  }
  swift_willThrow();
  [*(id *)(v62 + 176) unlock];
  return v40;
}

uint64_t sub_10003D29C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v54 = (void (*)(char *, uint64_t))a3;
  uint64_t v9 = v8;
  int v50 = a7;
  uint64_t v55 = a5;
  uint64_t v51 = a8;
  uint64_t v47 = sub_100003C68((uint64_t *)&unk_100077410);
  uint64_t v14 = __chkstk_darwin(v47);
  uint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v42 - v17;
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v48 = *(void *)(v19 - 8);
  uint64_t v49 = v19;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.persistenceRecordStore.getter();
  uint64_t v53 = a2;
  sub_100019288(a2, (uint64_t)v18, (uint64_t *)&unk_100077410);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v52 = a6;
  swift_bridgeObjectRetain_n();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  int v24 = v23;
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v46 = v9;
    uint64_t v26 = v25;
    uint64_t v44 = swift_slowAlloc();
    uint64_t v57 = v44;
    *(_DWORD *)uint64_t v26 = 136316162;
    sub_100020D5C(0, (unint64_t *)&qword_100076508);
    swift_bridgeObjectRetain();
    uint64_t v27 = Dictionary.description.getter();
    os_log_t v43 = v22;
    uint64_t v28 = v27;
    unint64_t v45 = a4;
    unint64_t v30 = v29;
    swift_bridgeObjectRelease();
    uint64_t v56 = sub_1000036B0(v28, v30, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2082;
    sub_100019288((uint64_t)v18, (uint64_t)v16, (uint64_t *)&unk_100077410);
    uint64_t v31 = String.init<A>(describing:)();
    uint64_t v56 = sub_1000036B0(v31, v32, &v57);
    a4 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006E84((uint64_t)v18, (uint64_t *)&unk_100077410);
    *(_WORD *)(v26 + 22) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v56 = sub_1000036B0((uint64_t)v54, a4, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 32) = 2082;
    LODWORD(v47) = v24;
    unint64_t v33 = v52;
    swift_bridgeObjectRetain();
    uint64_t v56 = sub_1000036B0(v55, v33, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 42) = 2082;
    char v34 = v50;
    if (v50) {
      uint64_t v35 = 7562585;
    }
    else {
      uint64_t v35 = 28494;
    }
    if (v50) {
      unint64_t v36 = 0xE300000000000000;
    }
    else {
      unint64_t v36 = 0xE200000000000000;
    }
    uint64_t v56 = sub_1000036B0(v35, v36, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v37 = v43;
    _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v47, "Update store properties %s for store with record ID “%{public}s,” container “%{public}s” and name “%{public}s.” Is internal: %{public}s", (uint8_t *)v26, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v48 + 8))(v21, v49);
    uint64_t v38 = v54;
    char v39 = v34;
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_100006E84((uint64_t)v18, (uint64_t *)&unk_100077410);

    unint64_t v33 = v52;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v21, v49);
    uint64_t v38 = v54;
    char v39 = v50;
  }
  unint64_t v40 = sub_100038370((uint64_t)&_swiftEmptyArrayStorage);
  sub_10003D7C4(v40, (uint64_t)&_swiftEmptySetSingleton, a1, 0, v53, v38, a4, v55, v51, v33, v39 & 1);
  return swift_bridgeObjectRelease();
}

id sub_10003D7C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, void (*a6)(char *, uint64_t)@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unint64_t a10, unsigned __int8 a11)
{
  unint64_t v81 = a6;
  int v68 = a4;
  uint64_t v72 = a3;
  uint64_t v69 = a2;
  uint64_t v77 = a1;
  uint64_t v67 = a9;
  int v80 = a11;
  uint64_t v15 = sub_100003C68((uint64_t *)&unk_100077410);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v74 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v82 = (uint64_t)&v65 - v19;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v65 - v20;
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v83 = *(void *)(v22 - 8);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v79 = (char *)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v65 - v25;
  uint64_t v84 = v11;
  [*(id *)(v11 + 176) lock];
  static Logger.persistenceRecordStore.getter();
  uint64_t v78 = a5;
  sub_100019288(a5, (uint64_t)v21, (uint64_t *)&unk_100077410);
  unint64_t v75 = a7;
  swift_bridgeObjectRetain_n();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  uint64_t v71 = v15;
  uint64_t v70 = a8;
  if (v29)
  {
    uint64_t v30 = swift_slowAlloc();
    uint64_t v73 = v22;
    uint64_t v31 = v30;
    uint64_t v66 = swift_slowAlloc();
    uint64_t v89 = v66;
    *(_DWORD *)uint64_t v31 = 136446722;
    sub_100019288((uint64_t)v21, v82, (uint64_t *)&unk_100077410);
    uint64_t v32 = String.init<A>(describing:)();
    *(void *)&v86[1] = sub_1000036B0(v32, v33, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006E84((uint64_t)v21, (uint64_t *)&unk_100077410);
    *(_WORD *)(v31 + 12) = 2082;
    unint64_t v34 = v75;
    swift_bridgeObjectRetain();
    *(void *)&v86[1] = sub_1000036B0((uint64_t)v81, v34, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v31 + 22) = 2082;
    if (v80) {
      uint64_t v35 = 7562585;
    }
    else {
      uint64_t v35 = 28494;
    }
    if (v80) {
      unint64_t v36 = 0xE300000000000000;
    }
    else {
      unint64_t v36 = 0xE200000000000000;
    }
    *(void *)&v86[1] = sub_1000036B0(v35, v36, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Updating store with record ID “%{public}s,” container “%{public}s.” Is internal: %{public}s", (uint8_t *)v31, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v22 = v73;
    swift_slowDealloc();
  }
  else
  {
    sub_100006E84((uint64_t)v21, (uint64_t *)&unk_100077410);

    unint64_t v34 = v75;
    swift_bridgeObjectRelease_n();
  }
  os_log_t v37 = *(void (**)(char *, uint64_t))(v83 + 8);
  v37(v26, v22);
  uint64_t v38 = v78;
  char v39 = v79;
  uint64_t v40 = v82;
  uint64_t v42 = v76;
  uint64_t v41 = v77;
  if (*(void *)(v77 + 16))
  {
    char v43 = 1;
  }
  else
  {
    sub_100007B94(v72);
    char v43 = v44 ^ 1;
  }
  char v88 = 0;
  memset(v87, 0, sizeof(v87));
  unint64_t v45 = sub_10003AA08(v38, (uint64_t *)v87, (uint64_t)v81, v34, v80 & 1, v43 & 1);
  if (!v42)
  {
    uint64_t v46 = (uint64_t)v45;
    LOBYTE(v89) = 0;
    *(_WORD *)uint64_t v86 = 0;
    sub_100050690((uint64_t)v45, v70, a10, v41, v69, v72, v68 & 1, (char *)&v89, &v86[1], v86);
    char v85 = 0;
    sub_10003C66C(v46, v89, v86[1], v86[0], &v85);
    if (v85 == 1)
    {
      swift_release();
      uint64_t v60 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v67, 1, 1, v60);
    }
    else
    {
      uint64_t v61 = v46 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_recordIdentifier;
      uint64_t v62 = type metadata accessor for UUID();
      uint64_t v63 = *(void *)(v62 - 8);
      uint64_t v64 = v67;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16))(v67, v61, v62);
      swift_release();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v63 + 56))(v64, 0, 1, v62);
    }
    return [*(id *)(v84 + 176) unlock];
  }
  uint64_t v89 = v42;
  swift_errorRetain();
  sub_100003C68(&qword_100076FE0);
  if (swift_dynamicCast() && !v86[1])
  {
    swift_errorRelease();
    uint64_t v59 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v67, 1, 1, v59);
    swift_errorRelease();
    return [*(id *)(v84 + 176) unlock];
  }
  unint64_t v81 = v37;
  uint64_t v47 = (uint64_t)v74;
  swift_errorRelease();
  static Logger.persistenceRecordStore.getter();
  sub_100019288(v38, v47, (uint64_t *)&unk_100077410);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = swift_slowAlloc();
    uint64_t v51 = swift_slowAlloc();
    uint64_t v73 = v22;
    uint64_t v89 = v51;
    *(_DWORD *)uint64_t v50 = 136446466;
    sub_100019288(v47, v40, (uint64_t *)&unk_100077410);
    uint64_t v52 = String.init<A>(describing:)();
    *(void *)&v86[1] = sub_1000036B0(v52, v53, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006E84(v47, (uint64_t *)&unk_100077410);
    *(_WORD *)(v50 + 12) = 2082;
    *(void *)&v86[1] = v42;
    swift_errorRetain();
    uint64_t v54 = String.init<A>(describing:)();
    *(void *)&v86[1] = sub_1000036B0(v54, v55, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "Failed to update store for record %{public}s with unexpected error. Error: %{public}s", (uint8_t *)v50, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v56 = v79;
    uint64_t v57 = v73;
  }
  else
  {
    sub_100006E84(v47, (uint64_t *)&unk_100077410);
    swift_errorRelease();
    swift_errorRelease();

    uint64_t v56 = v39;
    uint64_t v57 = v22;
  }
  v81(v56, v57);
  swift_willThrow();
  return [*(id *)(v84 + 176) unlock];
}

NSObject *sub_10003E0E4(void (*a1)(char *, uint64_t), uint64_t a2, unint64_t a3, int a4)
{
  int v61 = a4;
  uint64_t v60 = a2;
  uint64_t v7 = sub_100003C68((uint64_t *)&unk_100077410);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v53 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v53 - v14;
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v65 = *(void *)(v16 - 8);
  uint64_t v66 = v16;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v53 - v20;
  uint64_t v67 = v4;
  [*(id *)(v4 + 176) lock];
  static Logger.persistenceRecordStore.getter();
  uint64_t v64 = a1;
  sub_100019288((uint64_t)a1, (uint64_t)v15, (uint64_t *)&unk_100077410);
  unint64_t v62 = a3;
  swift_bridgeObjectRetain_n();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  int v24 = v23;
  BOOL v25 = os_log_type_enabled(v22, v23);
  int v58 = v10;
  uint64_t v59 = v19;
  uint64_t v56 = v13;
  uint64_t v57 = v7;
  if (v25)
  {
    uint64_t v26 = swift_slowAlloc();
    int v55 = v24;
    uint64_t v27 = v26;
    uint64_t v54 = swift_slowAlloc();
    v68[0] = v54;
    *(_DWORD *)uint64_t v27 = 136446722;
    sub_100019288((uint64_t)v15, (uint64_t)v13, (uint64_t *)&unk_100077410);
    uint64_t v28 = String.init<A>(describing:)();
    uint64_t v71 = sub_1000036B0(v28, v29, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006E84((uint64_t)v15, (uint64_t *)&unk_100077410);
    *(_WORD *)(v27 + 12) = 2082;
    unint64_t v30 = v62;
    swift_bridgeObjectRetain();
    uint64_t v31 = v60;
    uint64_t v71 = sub_1000036B0(v60, v30, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v27 + 22) = 2082;
    char v32 = v61;
    if (v61) {
      uint64_t v33 = 7562585;
    }
    else {
      uint64_t v33 = 28494;
    }
    if (v61) {
      unint64_t v34 = 0xE300000000000000;
    }
    else {
      unint64_t v34 = 0xE200000000000000;
    }
    uint64_t v71 = sub_1000036B0(v33, v34, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v55, "Get store names for store with record ID “%{public}s” and container “%{public}s.” Is internal: %{public}s", (uint8_t *)v27, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v35 = *(void (**)(char *, uint64_t))(v65 + 8);
    v35(v21, v66);
    uint64_t v36 = v31;
    char v37 = v32;
  }
  else
  {
    sub_100006E84((uint64_t)v15, (uint64_t *)&unk_100077410);

    unint64_t v30 = v62;
    swift_bridgeObjectRelease_n();
    uint64_t v35 = *(void (**)(char *, uint64_t))(v65 + 8);
    v35(v21, v66);
    uint64_t v36 = v60;
    char v37 = v61;
  }
  char v70 = 0;
  memset(v69, 0, sizeof(v69));
  uint64_t v39 = v63;
  uint64_t v38 = v64;
  sub_10003AA08((uint64_t)v64, (uint64_t *)v69, v36, v30, v37 & 1, 0);
  if (!v39)
  {
    swift_beginAccess();
    uint64_t v51 = swift_bridgeObjectRetain();
    uint64_t v42 = sub_100024A08(v51);
    swift_release();
LABEL_19:
    [*(id *)(v67 + 176) unlock];
    return v42;
  }
  v68[0] = v39;
  swift_errorRetain();
  sub_100003C68(&qword_100076FE0);
  if (swift_dynamicCast() && !(_BYTE)v71)
  {
    swift_errorRelease();
    swift_errorRelease();
    uint64_t v42 = &_swiftEmptySetSingleton;
    goto LABEL_19;
  }
  swift_errorRelease();
  uint64_t v40 = v59;
  static Logger.persistenceRecordStore.getter();
  uint64_t v41 = (uint64_t)v58;
  sub_100019288((uint64_t)v38, (uint64_t)v58, (uint64_t *)&unk_100077410);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.error.getter();
  int v44 = v43;
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v45 = swift_slowAlloc();
    LODWORD(v62) = v44;
    uint64_t v46 = v45;
    uint64_t v63 = swift_slowAlloc();
    v68[0] = v63;
    *(_DWORD *)uint64_t v46 = 136446466;
    uint64_t v64 = v35;
    sub_100019288(v41, (uint64_t)v56, (uint64_t *)&unk_100077410);
    uint64_t v47 = String.init<A>(describing:)();
    uint64_t v71 = sub_1000036B0(v47, v48, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006E84(v41, (uint64_t *)&unk_100077410);
    *(_WORD *)(v46 + 12) = 2082;
    uint64_t v71 = v39;
    swift_errorRetain();
    uint64_t v49 = String.init<A>(describing:)();
    uint64_t v71 = sub_1000036B0(v49, v50, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v62, "Failed to get stores for record %{public}s with unexpected error. Error: %{public}s", (uint8_t *)v46, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v64(v40, v66);
  }
  else
  {
    sub_100006E84(v41, (uint64_t *)&unk_100077410);
    swift_errorRelease();
    swift_errorRelease();

    v35(v40, v66);
  }
  swift_willThrow();
  [*(id *)(v67 + 176) unlock];
  return v42;
}

id sub_10003E81C()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v73 = v4;
  uint64_t v74 = v5;
  uint64_t v6 = __chkstk_darwin(v4);
  int v68 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v64 - v8;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v67 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v64 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v64 - v17;
  [*(id *)(v3 + 176) lock];
  static Logger.persistenceRecordStore.getter();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v72 = v9;
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Updating Effective Settings", v21, 2u);
    uint64_t v2 = v1;
    uint64_t v9 = v72;
    swift_slowDealloc();
  }

  uint64_t v22 = *(void (**)(char *, uint64_t *))(v11 + 8);
  uint64_t v70 = v11 + 8;
  uint64_t v71 = (uint64_t *)v10;
  uint64_t v69 = v22;
  v22(v18, (uint64_t *)v10);
  uint64_t v77 = &_swiftEmptyDictionarySingleton;
  swift_beginAccess();
  uint64_t v23 = swift_bridgeObjectRetain();
  unint64_t v24 = sub_100037F3C(v23);
  swift_bridgeObjectRelease();
  sub_10004F4FC(v24, (uint64_t)&v77);
  swift_bridgeObjectRelease();
  uint64_t v25 = swift_bridgeObjectRetain();
  uint64_t v26 = sub_10004B910(v25);
  *(&v64 - 2) = __chkstk_darwin(v26);
  uint64_t v27 = swift_bridgeObjectRetain();
  unint64_t v28 = sub_10004A754(v27, (uint64_t (*)(char *, uint64_t))sub_10005139C, (uint64_t)(&v64 - 4));
  uint64_t v72 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10004F4FC(v28, (uint64_t)&v77);
  swift_bridgeObjectRelease();
  sub_10005FC74((uint64_t)&v77);
  if (qword_1000763B8 != -1) {
    swift_once();
  }
  uint64_t v29 = *(void *)(qword_100079598 + 40);
  unint64_t v30 = sub_100006DCC((void *)(qword_100079598 + 16), v29);
  uint64_t v31 = *(void *)(v29 - 8);
  __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v64 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v31 + 16))(v33);
  swift_retain();
  dispatch thunk of Locatable.effectiveSettingsPath.getter();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v29);
  uint64_t v34 = sub_100036CA4();
  uint64_t v35 = v74 + 8;
  uint64_t v36 = *(void (**)(char *, uint64_t))(v74 + 8);
  v36(v9, v73);
  swift_release();
  uint64_t v37 = (uint64_t)v77;
  swift_bridgeObjectRetain();
  uint64_t v38 = (void *)sub_100035D00(v34, v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v38[2])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v48 = v67;
    static Logger.persistenceRecordStore.getter();
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Effective settings did not change, exiting early", v51, 2u);
      swift_slowDealloc();
    }

    v69(v48, v71);
    goto LABEL_17;
  }
  static Logger.persistenceRecordStore.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.default.getter();
  BOOL v41 = os_log_type_enabled(v39, v40);
  uint64_t v65 = v36;
  uint64_t v66 = v3;
  uint64_t v74 = v35;
  if (v41)
  {
    uint64_t v42 = swift_slowAlloc();
    uint64_t v67 = v16;
    os_log_type_t v43 = (uint8_t *)v42;
    uint64_t v76 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v43 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v44 = Array.description.getter();
    unint64_t v46 = v45;
    swift_bridgeObjectRelease();
    uint64_t v75 = sub_1000036B0(v44, v46, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Settings changed: %{public}s", v43, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v47 = v67;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v47 = v16;
  }
  v69(v47, v71);
  uint64_t v52 = qword_100079598;
  uint64_t v53 = qword_1000763C0;
  swift_retain();
  swift_bridgeObjectRetain();
  if (v53 != -1) {
    swift_once();
  }
  uint64_t v54 = *(void *)(v52 + 40);
  int v55 = sub_100006DCC((void *)(v52 + 16), v54);
  uint64_t v71 = &v64;
  uint64_t v56 = *(void *)(v54 - 8);
  __chkstk_darwin(v55);
  int v58 = (char *)&v64 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v56 + 16))(v58);
  swift_retain();
  uint64_t v59 = v68;
  dispatch thunk of Locatable.effectiveSettingsPath.getter();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v58, v54);
  uint64_t v60 = v72;
  sub_10004D3DC();
  if (!v60)
  {
    v65(v59, v73);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_retain();
    sub_1000334C4(v38);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v3 = v66;
    sub_10003F148((uint64_t)v77);
    swift_bridgeObjectRelease();
LABEL_17:
    *(unsigned char *)(v3 + 168) = 0;
    unint64_t v62 = *(void **)(v3 + 176);
    return [v62 unlock];
  }
  v65(v59, v73);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v61 = v66;
  *(unsigned char *)(v66 + 168) = 0;
  unint64_t v62 = *(void **)(v61 + 176);
  return [v62 unlock];
}

uint64_t sub_10003F148(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10004B910(a1);
  swift_beginAccess();
  unint64_t v46 = v8;
  uint64_t v9 = swift_bridgeObjectRetain();
  unint64_t v10 = sub_10004A754(v9, (uint64_t (*)(char *, uint64_t))sub_1000513A4, (uint64_t)v45);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (!(v10 >> 62))
  {
    uint64_t v13 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v13) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v13) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  if (v13 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = (void (**)(char *, uint64_t))(v5 + 8);
    unint64_t v43 = v10 & 0xC000000000000001;
    uint64_t v44 = v48;
    *(void *)&long long v12 = 136446466;
    long long v35 = v12;
    v34[1] = (char *)&type metadata for Any + 8;
    uint64_t v38 = v4;
    unint64_t v37 = v10;
    uint64_t v36 = v13;
    do
    {
      if (v43)
      {
        uint64_t v16 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v16 = *(void *)(v10 + 8 * v14 + 32);
        swift_retain();
      }
      static Logger.persistenceRecordStore.getter();
      swift_retain_n();
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      int v19 = v18;
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v20 = swift_slowAlloc();
        uint64_t v42 = swift_slowAlloc();
        v48[0] = v42;
        *(_DWORD *)uint64_t v20 = v35;
        os_log_t v41 = v17;
        type metadata accessor for UUID();
        sub_1000501A4(&qword_100076C78, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v47 = sub_1000036B0(v21, v22, v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v20 + 12) = 2082;
        uint64_t v40 = v20 + 14;
        uint64_t v23 = *(void *)(v16 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 8);
        uint64_t v24 = v2;
        uint64_t v25 = *(void *)(v16 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 16);
        uint64_t v26 = *(void *)(v16 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 24);
        char v27 = *(unsigned char *)(v16 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 32);
        v48[5] = *(void *)(v16 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client);
        v48[6] = v23;
        v48[7] = v25;
        v48[8] = v26;
        char v49 = v27;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v28 = ClientIdentity.description.getter();
        int v39 = v19;
        uint64_t v29 = v15;
        unint64_t v30 = v7;
        unint64_t v32 = v31;
        uint64_t v2 = v24;
        unint64_t v10 = v37;
        swift_bridgeObjectRelease();
        uint64_t v4 = v38;
        swift_bridgeObjectRelease();
        uint64_t v47 = sub_1000036B0(v28, v32, v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        uint64_t v7 = v30;
        uint64_t v15 = v29;
        swift_bridgeObjectRelease();
        os_log_t v33 = v41;
        _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v39, "Removing unauthorized client record %{public}s for %{public}s", (uint8_t *)v20, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v13 = v36;
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      (*v15)(v7, v4);
      ++v14;
      sub_100044F28(v16);
      swift_release();
    }
    while (v13 != v14);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

id sub_10003F5D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v19 - v7;
  [*(id *)(v1 + 176) lock];
  static Logger.persistenceRecordStore.getter();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Updating synced stores", v11, 2u);
    swift_slowDealloc();
  }

  long long v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v8, v2);
  static Logger.persistenceRecordStore.getter();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Converting syncable store to syncable data", v15, 2u);
    swift_slowDealloc();
  }

  v12(v6, v2);
  swift_beginAccess();
  swift_retain();
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v17 = sub_10004AA20(v16);
  swift_bridgeObjectRelease();
  swift_release();
  sub_100006DCC((void *)(v1 + 128), *(void *)(v1 + 152));
  sub_1000222D4(v17);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v1 + 224) = 0;
  return [*(id *)(v1 + 176) unlock];
}

uint64_t sub_10003F850(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  [*(id *)(v3 + 176) lock];
  static Logger.persistenceRecordStore.getter();
  swift_bridgeObjectRetain_n();
  os_log_type_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v21 = v6;
    long long v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v22 = v3;
    v24[0] = v13;
    *(_DWORD *)long long v12 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v23 = sub_1000036B0(a1, a2, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Getting client values for %{public}s", v12, 0xCu);
    swift_arrayDestroy();
    uint64_t v3 = v22;
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v21);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  os_log_type_t v14 = sub_10004B910(0);
  uint64_t v15 = swift_beginAccess();
  __chkstk_darwin(v15);
  *(&v20 - 2) = (uint64_t)v14;
  uint64_t v16 = swift_bridgeObjectRetain();
  unint64_t v17 = sub_10004A754(v16, (uint64_t (*)(char *, uint64_t))sub_1000501EC, (uint64_t)(&v20 - 4));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_10004BE00(&_swiftEmptyDictionarySingleton, v17, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  [*(id *)(v3 + 176) unlock];
  return v18;
}

uint64_t sub_10003FB58()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  [*(id *)(v1 + 176) lock];
  static Logger.persistenceRecordStore.getter();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Persistence record migration start", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_10003FD04();
  os_log_type_t v11 = &_swiftEmptyDictionarySingleton;
  os_log_type_t v10 = &_swiftEmptySetSingleton;
  sub_100040218((uint64_t *)&v11, (uint64_t)&v10);
  sub_1000412E8((uint64_t *)&v11, (uint64_t)&v10);
  sub_10004ED64(v1, (uint64_t *)&v11, (uint64_t *)&v10);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10003FD04()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v5 = *(void *)(v0 + 232);
  uint64_t v6 = v5 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(v5 + 64);
  int64_t v47 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v44 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v45 = v0;
  unint64_t v37 = v49;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  long long v12 = &PersistenceRecord;
  *(void *)&long long v13 = 136446466;
  long long v36 = v13;
  v35[1] = (char *)&type metadata for Any + 8;
  uint64_t v40 = v4;
  uint64_t v39 = v5;
  uint64_t v38 = v5 + 64;
  while (v9)
  {
    unint64_t v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v15 = v14 | (v11 << 6);
LABEL_24:
    uint64_t v19 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    uint64_t v20 = (char *)v12[36].ivars + v19;
    uint64_t result = swift_beginAccess();
    if (!*(void *)(*(void *)v20 + 16))
    {
      swift_retain();
      static Logger.persistenceRecordStore.getter();
      swift_retain_n();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      int v46 = v22;
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        v49[0] = v43;
        *(_DWORD *)uint64_t v23 = v36;
        os_log_t v42 = v21;
        type metadata accessor for UUID();
        sub_1000501A4(&qword_100076C78, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v48 = sub_1000036B0(v24, v25, v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v23 + 12) = 2082;
        uint64_t v41 = v23 + 14;
        uint64_t v26 = *(void *)(v19 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 8);
        uint64_t v27 = *(void *)(v19 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 16);
        uint64_t v28 = *(void *)(v19 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 24);
        char v29 = *(unsigned char *)(v19 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 32);
        v49[7] = *(void *)(v19 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client);
        v49[8] = v26;
        v49[9] = v27;
        v49[10] = v28;
        char v50 = v29;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v30 = ClientIdentity.description.getter();
        uint64_t v31 = v1;
        unint64_t v33 = v32;
        swift_bridgeObjectRelease();
        uint64_t v5 = v39;
        swift_bridgeObjectRelease();
        uint64_t v48 = sub_1000036B0(v30, v33, v49);
        long long v12 = &PersistenceRecord;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        uint64_t v4 = v40;
        swift_bridgeObjectRelease();
        os_log_t v34 = v42;
        _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v46, "Clearing empty record %{public}s for %{public}s", (uint8_t *)v23, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v6 = v38;
        swift_slowDealloc();

        uint64_t v1 = v31;
        (*v44)(v4, v31);
      }
      else
      {

        swift_release_n();
        (*v44)(v4, v1);
      }
      sub_100044F28(v19);
      uint64_t result = swift_release();
    }
  }
  int64_t v16 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v16 >= v47) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v6 + 8 * v16);
  ++v11;
  if (v17) {
    goto LABEL_23;
  }
  int64_t v11 = v16 + 1;
  if (v16 + 1 >= v47) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v6 + 8 * v11);
  if (v17) {
    goto LABEL_23;
  }
  int64_t v11 = v16 + 2;
  if (v16 + 2 >= v47) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v6 + 8 * v11);
  if (v17) {
    goto LABEL_23;
  }
  int64_t v11 = v16 + 3;
  if (v16 + 3 >= v47) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v6 + 8 * v11);
  if (v17)
  {
LABEL_23:
    unint64_t v9 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
    goto LABEL_24;
  }
  int64_t v18 = v16 + 4;
  if (v18 >= v47) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v47) {
      return swift_release();
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100040218(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v108 = a1;
  uint64_t v109 = a2;
  uint64_t v117 = type metadata accessor for Logger();
  uint64_t v85 = *(void *)(v117 - 8);
  uint64_t v4 = __chkstk_darwin(v117);
  uint64_t v97 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v98 = (char *)&v84 - v7;
  __chkstk_darwin(v6);
  uint64_t v107 = (char *)&v84 - v8;
  uint64_t v93 = type metadata accessor for Application();
  uint64_t v116 = *(void *)(v93 - 8);
  uint64_t v9 = __chkstk_darwin(v93);
  v102 = (char *)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  v111 = (char *)&v84 - v12;
  __chkstk_darwin(v11);
  v114 = (char *)&v84 - v13;
  uint64_t v90 = type metadata accessor for SettingScope();
  uint64_t v119 = *(void *)(v90 - 8);
  __chkstk_darwin(v90);
  uint64_t v89 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = sub_100003C68(&qword_1000764D8);
  int64_t v105 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v118 = (uint64_t)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = type metadata accessor for URL();
  int64_t v16 = *(void *)(v120 - 8);
  uint64_t v17 = __chkstk_darwin(v120);
  uint64_t v95 = (char *)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v96 = (uint64_t *)((char *)&v84 - v20);
  __chkstk_darwin(v19);
  os_log_type_t v22 = (char *)&v84 - v21;
  if (qword_1000763B8 == -1) {
    goto LABEL_2;
  }
LABEL_48:
  swift_once();
LABEL_2:
  uint64_t v23 = *(void *)(qword_100079598 + 40);
  uint64_t v24 = sub_100006DCC((void *)(qword_100079598 + 16), v23);
  uint64_t v25 = *(void *)(v23 - 8);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v84 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v25 + 16))(v27);
  swift_retain();
  dispatch thunk of Locatable.effectiveSettingsPath.getter();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v23);
  uint64_t v28 = sub_100036CA4();
  char v29 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  uint64_t v115 = v16 + 8;
  v113 = v29;
  v29((uint64_t)v22, v120);
  swift_release();
  uint64_t v123 = v28;
  uint64_t v30 = *(void *)(v3 + 208);
  uint64_t v103 = (void *)(v3 + 184);
  sub_100006DCC((void *)(v3 + 184), v30);
  uint64_t v31 = sub_100004DB0();
  uint64_t v32 = v31[2];
  unint64_t v33 = &off_100064000;
  uint64_t v106 = v3;
  if (v32)
  {
    os_log_t v34 = (void (**)(uint64_t, uint64_t, uint64_t))v16;
    os_log_type_t v22 = 0;
    uint64_t v110 = v118 + *(int *)(v110 + 48);
    unint64_t v35 = (*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80);
    uint64_t v84 = v31;
    uint64_t v36 = (uint64_t)v31 + v35;
    int64_t v37 = *(void *)(v105 + 72);
    uint64_t v104 = (uint64_t)(v34 + 4);
    int64_t v105 = v37;
    uint64_t v101 = (uint64_t)(v34 + 2);
    *(void *)&long long v100 = &v135;
    uint64_t v94 = v85 + 8;
    unsigned int v88 = enum case for SettingScope.user(_:);
    uint64_t v87 = (void (**)(char *, void, uint64_t))(v119 + 104);
    uint64_t v86 = (void (**)(uint64_t, uint64_t))(v119 + 8);
    *((void *)&v38 + 1) = 2;
    long long v99 = xmmword_1000651A0;
    *(void *)&long long v38 = 136446210;
    long long v92 = v38;
    uint64_t v91 = (char *)&type metadata for Any + 8;
    uint64_t v39 = (uint64_t)v96;
    v112 = (unsigned __int8 *)v34;
    do
    {
      uint64_t v119 = v32;
      uint64_t v41 = v118;
      sub_100019288(v36, v118, &qword_1000764D8);
      long long v42 = *(_OWORD *)(v41 + 16);
      long long v134 = *(_OWORD *)v41;
      long long v135 = v42;
      char v136 = *(unsigned char *)(v41 + 32);
      uint64_t v43 = v120;
      v34[4](v39, v110, v120);
      sub_100003C68(&qword_1000778A8);
      unint64_t v44 = (*((unsigned __int8 *)v34 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v34 + 80);
      uint64_t v45 = swift_allocObject();
      *(_OWORD *)(v45 + 16) = v99;
      v34[2](v45 + v44, v39, v43);
      LOBYTE(v44) = sub_100045BB0(&v134, v45, v108);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      if (v44)
      {
        uint64_t v47 = (uint64_t)v89;
        uint64_t v46 = v90;
        (*v87)(v89, v88, v90);
        sub_100037198(v39, v136, v47);
        long long v137 = v134;
        sub_100019068((uint64_t)&v137);
        long long v138 = *(_OWORD *)v100;
        sub_100019068((uint64_t)&v138);
        (*v86)(v47, v46);
        v113(v39, v120);
      }
      else
      {
        v113(v39, v120);
        long long v139 = v134;
        sub_100019068((uint64_t)&v139);
        long long v140 = *(_OWORD *)v100;
        sub_100019068((uint64_t)&v140);
      }
      os_log_t v34 = (void (**)(uint64_t, uint64_t, uint64_t))v112;
      uint64_t v40 = v111;
      v36 += v105;
      uint64_t v32 = v119 - 1;
    }
    while (v119 != 1);
    swift_bridgeObjectRelease();
    uint64_t v28 = v123;
    uint64_t v48 = v106;
    char v49 = v107;
    uint64_t v50 = v93;
    unint64_t v33 = &off_100064000;
  }
  else
  {
    uint64_t v48 = v3;
    swift_bridgeObjectRelease();
    os_log_type_t v22 = 0;
    char v49 = v107;
    uint64_t v50 = v93;
    uint64_t v40 = v111;
  }
  uint64_t v3 = (uint64_t)sub_10004B910(v28);
  swift_bridgeObjectRelease();
  int64_t v16 = 0;
  uint64_t v52 = *(void *)(v3 + 56);
  uint64_t v104 = v3 + 56;
  uint64_t v115 = v3;
  uint64_t v53 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v54 = -1;
  if (v53 < 64) {
    uint64_t v54 = ~(-1 << v53);
  }
  unint64_t v55 = v54 & v52;
  int64_t v105 = (unint64_t)(v53 + 63) >> 6;
  uint64_t v118 = v116 + 16;
  uint64_t v110 = v85 + 8;
  v112 = (unsigned __int8 *)(v116 + 8);
  v113 = (void (*)(uint64_t, uint64_t))(v116 + 32);
  uint64_t v96 = v122;
  *(void *)&long long v51 = *((void *)v33 + 126);
  long long v100 = v51;
  *(void *)&long long v99 = (char *)&type metadata for Any + 8;
  if (v55)
  {
LABEL_14:
    uint64_t v56 = v48;
    uint64_t v119 = (v55 - 1) & v55;
    uint64_t v120 = (uint64_t)v22;
    unint64_t v57 = __clz(__rbit64(v55)) | (v16 << 6);
    goto LABEL_26;
  }
  while (1)
  {
    if (__OFADD__(v16++, 1))
    {
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if (v16 >= v105) {
      return swift_release();
    }
    unint64_t v59 = *(void *)(v104 + 8 * v16);
    if (!v59) {
      break;
    }
LABEL_25:
    uint64_t v56 = v48;
    uint64_t v119 = (v59 - 1) & v59;
    uint64_t v120 = (uint64_t)v22;
    unint64_t v57 = __clz(__rbit64(v59)) + (v16 << 6);
LABEL_26:
    uint64_t v61 = v116;
    unint64_t v62 = *(void (**)(char *, unint64_t, uint64_t))(v116 + 16);
    uint64_t v63 = v114;
    v62(v114, *(void *)(v115 + 48) + *(void *)(v116 + 72) * v57, v50);
    (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v40, v63, v50);
    uint64_t v64 = Application.bundleIdentifier.getter();
    if (v65
      && (uint64_t v66 = (char *)v64,
          uint64_t v67 = v65,
          sub_100006DCC(v103, *(void *)(v56 + 208)),
          sub_1000062E0(v66, v67, v124),
          swift_bridgeObjectRelease(),
          sub_100006EE0((uint64_t)v124, (uint64_t)&v125, &qword_1000778B8),
          *((void *)&v125 + 1)))
    {
      uint64_t v3 = v129;
      long long v130 = v125;
      uint64_t v131 = v126;
      uint64_t v132 = v127;
      char v133 = v128;
      uint64_t v48 = v56;
      os_log_type_t v22 = (char *)v120;
      sub_100045BB0(&v130, v129, v108);
      if (v22)
      {
        swift_bridgeObjectRelease();
        int v68 = v97;
        static Logger.persistenceRecordStore.getter();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v69 = Logger.logObject.getter();
        os_log_type_t v70 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v69, v70))
        {
          uint64_t v3 = swift_slowAlloc();
          uint64_t v101 = swift_slowAlloc();
          v122[0] = v101;
          *(_DWORD *)uint64_t v3 = v100;
          uint64_t v98 = (char *)(v3 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v71 = ClientIdentity.description.getter();
          uint64_t v120 = (uint64_t)v22;
          unint64_t v73 = v72;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v121 = sub_1000036B0(v71, v73, v122);
          uint64_t v50 = v93;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v69, v70, "Failed to migrate settings for %{public}s", (uint8_t *)v3, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          swift_errorRelease();

          (*(void (**)(char *, uint64_t))v110)(v97, v117);
        }
        else
        {
          swift_errorRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();

          (*(void (**)(char *, uint64_t))v110)(v68, v117);
        }
        uint64_t v40 = v111;
        (*(void (**)(char *, uint64_t))v112)(v111, v50);
        os_log_type_t v22 = 0;
        uint64_t v48 = v106;
      }
      else
      {
        (*(void (**)(char *, uint64_t))v112)(v40, v50);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      char v49 = v107;
      unint64_t v55 = v119;
      if (v119) {
        goto LABEL_14;
      }
    }
    else
    {
      static Logger.persistenceRecordStore.getter();
      uint64_t v3 = (uint64_t)v102;
      v62(v102, (unint64_t)v40, v50);
      uint64_t v74 = Logger.logObject.getter();
      uint64_t v75 = v50;
      os_log_type_t v76 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v74, v76))
      {
        uint64_t v77 = v3;
        uint64_t v3 = swift_slowAlloc();
        v122[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v3 = v100;
        sub_1000501A4(&qword_1000778B0, (void (*)(uint64_t))&type metadata accessor for Application);
        uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v3 + 4) = sub_1000036B0(v78, v79, v122);
        swift_bridgeObjectRelease();
        uint64_t v101 = v16;
        int v80 = *(void (**)(char *, uint64_t))v112;
        uint64_t v81 = v77;
        uint64_t v40 = v111;
        (*(void (**)(uint64_t, uint64_t))v112)(v81, v75);
        _os_log_impl((void *)&_mh_execute_header, v74, v76, "Unable to retrieve settings for %{public}s", (uint8_t *)v3, 0xCu);
        swift_arrayDestroy();
        char v49 = v107;
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))v110)(v49, v117);
        v80(v40, v75);
        int64_t v16 = v101;
      }
      else
      {

        uint64_t v82 = *(void (**)(char *, uint64_t))v112;
        (*(void (**)(uint64_t, uint64_t))v112)(v3, v75);
        (*(void (**)(char *, uint64_t))v110)(v49, v117);
        v82(v40, v75);
      }
      uint64_t v50 = v75;
      unint64_t v55 = v119;
      os_log_type_t v22 = (char *)v120;
      uint64_t v48 = v56;
      if (v119) {
        goto LABEL_14;
      }
    }
  }
  int64_t v60 = v16 + 1;
  if (v16 + 1 >= v105) {
    return swift_release();
  }
  unint64_t v59 = *(void *)(v104 + 8 * v60);
  if (v59) {
    goto LABEL_24;
  }
  int64_t v60 = v16 + 2;
  if (v16 + 2 >= v105) {
    return swift_release();
  }
  unint64_t v59 = *(void *)(v104 + 8 * v60);
  if (v59)
  {
LABEL_24:
    int64_t v16 = v60;
    goto LABEL_25;
  }
  int64_t v60 = v16 + 3;
  if (v16 + 3 < v105)
  {
    unint64_t v59 = *(void *)(v104 + 8 * v60);
    if (!v59)
    {
      while (1)
      {
        int64_t v16 = v60 + 1;
        if (__OFADD__(v60, 1)) {
          goto LABEL_47;
        }
        if (v16 >= v105) {
          return swift_release();
        }
        unint64_t v59 = *(void *)(v104 + 8 * v16);
        ++v60;
        if (v59) {
          goto LABEL_25;
        }
      }
    }
    goto LABEL_24;
  }
  return swift_release();
}

uint64_t sub_1000412E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v65 = a2;
  uint64_t v63 = a1;
  int64_t v50 = type metadata accessor for Logger();
  uint64_t v52 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  long long v51 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL.DirectoryHint();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v64 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v48 - v13;
  __chkstk_darwin(v12);
  int64_t v16 = (void **)((char *)&v48 - v15);
  uint64_t v17 = *(void *)(v2 + 40);
  uint64_t v60 = v2;
  int v58 = (void *)(v2 + 16);
  sub_100006DCC((void *)(v2 + 16), v17);
  dispatch thunk of Locatable.effectiveSettingsDirectory.getter();
  unint64_t v69 = 0xD000000000000014;
  unint64_t v70 = 0x8000000100068000;
  uint64_t v18 = *(void (**)(void))(v5 + 104);
  unsigned int v57 = enum case for URL.DirectoryHint.notDirectory(_:);
  unint64_t v55 = (void (*)(char *, void, uint64_t))v18;
  uint64_t v56 = v5 + 104;
  v18(v7);
  unint64_t v54 = sub_100011120();
  URL.appending<A>(path:directoryHint:)();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v5 + 8);
  unint64_t v59 = v7;
  uint64_t v61 = v5 + 8;
  uint64_t v62 = v4;
  uint64_t v53 = v19;
  v19(v7, v4);
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v14, v8);
  id v21 = [self defaultManager];
  URL.path.getter();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v23 = [v21 fileExistsAtPath:v22];

  if (!v23) {
    return ((uint64_t (*)(void *, uint64_t))v20)(v16, v8);
  }
  uint64_t v24 = v64;
  (*(void (**)(char *, void *, uint64_t))(v9 + 16))(v64, v16, v8);
  sub_10002844C((uint64_t)v14, v24);
  uint64_t v66 = v20;
  v20(v14, v8);
  uint64_t v25 = sub_10004AD88(v16);
  long long v51 = (char *)(v9 + 8);
  uint64_t v48 = v16;
  uint64_t v52 = v8;
  uint64_t v27 = *(void *)(v25 + 64);
  uint64_t v49 = v25 + 64;
  uint64_t v28 = 1 << *(unsigned char *)(v25 + 32);
  uint64_t v29 = -1;
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  unint64_t v30 = v29 & v27;
  int64_t v50 = (unint64_t)(v28 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v31 = 0;
  uint64_t v32 = v66;
  uint64_t v33 = result;
  uint64_t v34 = v60;
  unint64_t v35 = v64;
  while (v30)
  {
    unint64_t v36 = __clz(__rbit64(v30));
    v30 &= v30 - 1;
    unint64_t v37 = v36 | (v31 << 6);
LABEL_25:
    long long v42 = *(char **)(*(void *)(v33 + 56) + 8 * v37);
    uint64_t v43 = &v42[OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_storeDirectory];
    uint64_t result = swift_beginAccess();
    if (*(void *)(*(void *)v43 + 16))
    {
      sub_100006DCC(v58, *(void *)(v34 + 40));
      swift_retain();
      dispatch thunk of Locatable.persistenceRecordStoreDirectory.getter();
      uint64_t v67 = UUID.uuidString.getter();
      uint64_t v68 = v44;
      uint64_t v45 = v59;
      uint64_t v46 = v62;
      v55(v59, v57, v62);
      URL.appending<A>(path:directoryHint:)();
      v53(v45, v46);
      swift_bridgeObjectRelease();
      uint64_t v47 = v52;
      v66(v35, v52);
      sub_1000468CC(v42, v14, v63);
      swift_release();
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v66)(v14, v47);
      uint64_t v32 = v66;
    }
  }
  int64_t v38 = v31 + 1;
  if (__OFADD__(v31, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v39 = v48;
  if (v38 >= v50) {
    goto LABEL_27;
  }
  unint64_t v40 = *(void *)(v49 + 8 * v38);
  ++v31;
  if (v40) {
    goto LABEL_24;
  }
  int64_t v31 = v38 + 1;
  if (v38 + 1 >= v50) {
    goto LABEL_27;
  }
  unint64_t v40 = *(void *)(v49 + 8 * v31);
  if (v40) {
    goto LABEL_24;
  }
  int64_t v31 = v38 + 2;
  if (v38 + 2 >= v50) {
    goto LABEL_27;
  }
  unint64_t v40 = *(void *)(v49 + 8 * v31);
  if (v40) {
    goto LABEL_24;
  }
  int64_t v31 = v38 + 3;
  if (v38 + 3 >= v50) {
    goto LABEL_27;
  }
  unint64_t v40 = *(void *)(v49 + 8 * v31);
  if (v40)
  {
LABEL_24:
    unint64_t v30 = (v40 - 1) & v40;
    unint64_t v37 = __clz(__rbit64(v40)) + (v31 << 6);
    goto LABEL_25;
  }
  int64_t v41 = v38 + 4;
  if (v41 >= v50)
  {
LABEL_27:
    swift_bridgeObjectRelease();
    swift_release();
    return ((uint64_t (*)(void *, uint64_t))v32)(v39, v52);
  }
  unint64_t v40 = *(void *)(v49 + 8 * v41);
  if (v40)
  {
    int64_t v31 = v41;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v31 = v41 + 1;
    if (__OFADD__(v41, 1)) {
      break;
    }
    if (v31 >= v50) {
      goto LABEL_27;
    }
    unint64_t v40 = *(void *)(v49 + 8 * v31);
    ++v41;
    if (v40) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

id sub_100041A78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v309 = type metadata accessor for URL.DirectoryHint();
  uint64_t v310 = *(void *)(v309 - 8);
  __chkstk_darwin(v309);
  v308 = (char *)&v269 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v315._clients = (void *)type metadata accessor for Logger();
  v315._reserved = (void *)*((void *)v315._clients - 1);
  uint64_t v4 = __chkstk_darwin(v315._clients);
  v275 = (char *)&v269 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  v287 = (char *)&v269 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v269 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v297 = (uint64_t)&v269 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  v302 = (char *)&v269 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  v316 = (char *)&v269 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v315._baseURL = (NSURL *)((char *)&v269 - v18);
  uint64_t v19 = __chkstk_darwin(v17);
  v315.super.Class isa = (Class)((char *)&v269 - v20);
  uint64_t v21 = __chkstk_darwin(v19);
  v299 = (char *)&v269 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v286 = (char *)&v269 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v285 = (char *)&v269 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v301 = (char *)&v269 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  v303 = (char *)&v269 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  v311 = (char *)&v269 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  unint64_t v35 = (char *)&v269 - v34;
  __chkstk_darwin(v33);
  unint64_t v37 = (char *)&v269 - v36;
  v315._urlString = (NSString *)type metadata accessor for URL();
  uint64_t v272 = *((void *)v315._urlString - 1);
  uint64_t v38 = __chkstk_darwin(v315._urlString);
  v317 = (char *)&v269 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __chkstk_darwin(v38);
  v274 = (char *)&v269 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  v281 = (char *)&v269 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  v312 = (char *)&v269 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v313 = (uint64_t)&v269 - v47;
  uint64_t v48 = __chkstk_darwin(v46);
  v314 = (char *)&v269 - v49;
  uint64_t v50 = __chkstk_darwin(v48);
  v300 = (char *)&v269 - v51;
  uint64_t v52 = __chkstk_darwin(v50);
  uint64_t v298 = (uint64_t)&v269 - v53;
  uint64_t v54 = __chkstk_darwin(v52);
  v304 = (char *)&v269 - v55;
  __chkstk_darwin(v54);
  unsigned int v57 = (char *)&v269 - v56;
  [*(id *)(v1 + 176) lock];
  uint64_t v58 = *(void *)(v1 + 40);
  uint64_t v278 = v1;
  v318 = (void *)(v1 + 16);
  sub_100006DCC((void *)(v1 + 16), v58);
  dispatch thunk of Locatable.diagnosticsDirectory.getter();
  id v59 = [self defaultManager];
  v289 = v57;
  URL.path.getter();
  NSString v60 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v277 = v59;
  unsigned int v61 = [v59 fileExistsAtPath:v60];

  uint64_t v270 = a1;
  if (v61)
  {
    static Logger.persistenceRecordStore.getter();
    uint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Diagnostics directory already exist. Deleting old data...", v64, 2u);
      swift_slowDealloc();
    }

    uint64_t v65 = (void (*)(char *, void *))*((void *)v315._reserved + 1);
    v65(v37, v315._clients);
    URL._bridgeToObjectiveC()(&v315);
    uint64_t v67 = v66;
    id v325 = 0;
    unsigned int v68 = [v277 removeItemAtURL:v66 error:&v325];

    uint64_t v69 = v319;
    if (v68)
    {
      id v70 = v325;
    }
    else
    {
      int64_t v296 = (int64_t)v10;
      id v71 = v325;
      uint64_t v72 = _convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v69 = 0;
      baseURL = v315._baseURL;
      static Logger.persistenceRecordStore.getter();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v74 = Logger.logObject.getter();
      os_log_type_t v75 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v74, v75))
      {
        v307 = (void (*)(NSURL *, void *))v65;
        uint64_t v76 = swift_slowAlloc();
        uint64_t v319 = 0;
        uint64_t v77 = (uint8_t *)v76;
        id v325 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v77 = 136446210;
        v306 = (void (*)(char *, uint64_t, uint64_t))(v77 + 4);
        uint64_t v322 = v72;
        swift_errorRetain();
        sub_100003C68(&qword_100076FE0);
        uint64_t v78 = String.init<A>(describing:)();
        uint64_t v322 = sub_1000036B0(v78, v79, (uint64_t *)&v325);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v74, v75, "Failed to delete old diagnostics directory. Error: %{public}s", v77, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v69 = v319;
        swift_slowDealloc();

        swift_errorRelease();
        v307(v315._baseURL, v315._clients);
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();

        v65((char *)baseURL, v315._clients);
      }
      uint64_t v10 = (char *)v296;
    }
  }
  else
  {
    uint64_t v69 = v319;
  }
  static Logger.persistenceRecordStore.getter();
  int v80 = Logger.logObject.getter();
  os_log_type_t v81 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v80, v81))
  {
    uint64_t v82 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v82 = 0;
    _os_log_impl((void *)&_mh_execute_header, v80, v81, "Creating new diagnostics directory...", v82, 2u);
    swift_slowDealloc();
  }

  uint64_t v83 = (NSURL *)*((void *)v315._reserved + 1);
  v315._reserved = (char *)v315._reserved + 8;
  v315._baseURL = v83;
  ((void (*)(char *, void *))v83)(v35, v315._clients);
  uint64_t v84 = type metadata accessor for Persistence();
  static Persistence.createDirectory(at:)();
  uint64_t v319 = v69;
  if (v69)
  {
    uint64_t v85 = v316;
    static Logger.persistenceRecordStore.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v86 = Logger.logObject.getter();
    os_log_type_t v87 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v86, v87))
    {
      unsigned int v88 = (uint8_t *)swift_slowAlloc();
      id v325 = (id)swift_slowAlloc();
      *(_DWORD *)unsigned int v88 = 136446210;
      uint64_t v322 = v319;
      swift_errorRetain();
      sub_100003C68(&qword_100076FE0);
      uint64_t v89 = String.init<A>(describing:)();
      uint64_t v322 = sub_1000036B0(v89, v90, (uint64_t *)&v325);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v86, v87, "Failed to create new diagnostics directory. Error: %{public}s", v88, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v91 = v316;
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      uint64_t v91 = v85;
    }
    ((void (*)(char *, void *))v315._baseURL)(v91, v315._clients);
    urlString = v315._urlString;
    swift_willThrow();

    (*(void (**)(char *, NSString *))(v272 + 8))(v289, urlString);
    return [*(id *)(v278 + 176) unlock];
  }
  uint64_t v288 = v84;
  long long v92 = v311;
  static Logger.persistenceRecordStore.getter();
  uint64_t v93 = Logger.logObject.getter();
  os_log_type_t v94 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v93, v94))
  {
    uint64_t v95 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v95 = 0;
    _os_log_impl((void *)&_mh_execute_header, v93, v94, "Copying effective settings...", v95, 2u);
    swift_slowDealloc();
  }
  int64_t v296 = (int64_t)v10;

  ((void (*)(char *, void *))v315._baseURL)(v92, v315._clients);
  id v325 = (id)0xD000000000000017;
  unint64_t v326 = 0x8000000100067FE0;
  uint64_t v96 = v310;
  uint64_t v97 = *(void (**)(char *, uint64_t, uint64_t))(v310 + 104);
  uint64_t v98 = v308;
  unsigned int v276 = enum case for URL.DirectoryHint.notDirectory(_:);
  uint64_t v99 = v309;
  v307 = (void (*)(NSURL *, void *))(v310 + 104);
  v306 = v97;
  ((void (*)(char *))v97)(v308);
  unint64_t v100 = sub_100011120();
  uint64_t v101 = v304;
  unint64_t v305 = v100;
  URL.appending<A>(path:directoryHint:)();
  v102 = *(char **)(v96 + 8);
  uint64_t v310 = v96 + 8;
  v311 = v102;
  ((void (*)(char *, uint64_t))v102)(v98, v99);
  swift_bridgeObjectRelease();
  sub_100006DCC(v318, *(void *)(v278 + 40));
  uint64_t v103 = v298;
  dispatch thunk of Locatable.effectiveSettingsPath.getter();
  uint64_t v104 = v319;
  uint64_t v105 = static Persistence.read(from:)();
  uint64_t v106 = v315._urlString;
  if (v104)
  {
    uint64_t v107 = *(void (**)(uint64_t, NSString *))(v272 + 8);
    v107(v103, v315._urlString);
    v107((uint64_t)v101, v106);
    uint64_t v319 = 0;
    v108 = v303;
    v111 = v302;
    static Logger.persistenceRecordStore.getter();
    swift_errorRetain();
    swift_errorRetain();
    v112 = Logger.logObject.getter();
    os_log_type_t v113 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v112, v113))
    {
      v304 = (char *)v107;
      v114 = (uint8_t *)swift_slowAlloc();
      id v325 = (id)swift_slowAlloc();
      *(_DWORD *)v114 = 136446210;
      uint64_t v322 = v104;
      swift_errorRetain();
      sub_100003C68(&qword_100076FE0);
      uint64_t v115 = String.init<A>(describing:)();
      uint64_t v322 = sub_1000036B0(v115, v116, (uint64_t *)&v325);
      v108 = v303;
      uint64_t v107 = (void (*)(uint64_t, NSString *))v304;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v112, v113, "Failed to copy effective settings. Error: %{public}s", v114, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      uint64_t v117 = v302;
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      uint64_t v117 = v111;
    }
    ((void (*)(char *, void *))v315._baseURL)(v117, v315._clients);
  }
  else
  {
    uint64_t v110 = v105;
    uint64_t v107 = *(void (**)(uint64_t, NSString *))(v272 + 8);
    v107(v103, v315._urlString);
    Dictionary<>.filterSensitiveInformation()(v110);
    swift_bridgeObjectRelease();
    sub_10004D3DC();
    v108 = v303;
    uint64_t v319 = 0;
    v107((uint64_t)v101, v106);
    swift_bridgeObjectRelease();
  }
  uint64_t v118 = v300;
  static Logger.persistenceRecordStore.getter();
  uint64_t v119 = Logger.logObject.getter();
  os_log_type_t v120 = static os_log_type_t.default.getter();
  BOOL v121 = os_log_type_enabled(v119, v120);
  uint64_t v122 = v313;
  if (v121)
  {
    uint64_t v123 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v123 = 0;
    _os_log_impl((void *)&_mh_execute_header, v119, v120, "Copying setting records...", v123, 2u);
    swift_slowDealloc();
  }

  ((void (*)(char *, void *))v315._baseURL)(v108, v315._clients);
  id v325 = (id)0xD000000000000014;
  unint64_t v326 = 0x8000000100068000;
  v124 = v308;
  uint64_t v125 = v309;
  v306(v308, v276, v309);
  URL.appending<A>(path:directoryHint:)();
  ((void (*)(char *, uint64_t))v311)(v124, v125);
  swift_bridgeObjectRelease();
  sub_100006DCC(v318, *(void *)(v278 + 40));
  uint64_t v126 = v314;
  dispatch thunk of Locatable.persistenceRecordStorePath.getter();
  URL._bridgeToObjectiveC()(v127);
  uint64_t v129 = v128;
  long long v130 = v118;
  uint64_t v131 = (char *)(v272 + 8);
  uint64_t v132 = v126;
  char v133 = v315._urlString;
  v107((uint64_t)v132, v315._urlString);
  URL._bridgeToObjectiveC()(v134);
  char v136 = v135;
  id v325 = 0;
  LODWORD(v124) = [v277 copyItemAtURL:v129 toURL:v135 error:&v325];

  id v137 = v325;
  v304 = (char *)v107;
  v303 = v131;
  if (v124)
  {
    long long v138 = v130;
    long long v139 = v133;
    v107((uint64_t)v138, v133);
  }
  else
  {
    long long v140 = v137;
    uint64_t v141 = _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v319 = 0;
    v107((uint64_t)v130, v133);
    uint64_t v142 = v297;
    static Logger.persistenceRecordStore.getter();
    swift_errorRetain();
    swift_errorRetain();
    v143 = Logger.logObject.getter();
    os_log_type_t v144 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v143, v144))
    {
      v145 = (uint8_t *)swift_slowAlloc();
      id v325 = (id)swift_slowAlloc();
      *(_DWORD *)v145 = 136446210;
      uint64_t v322 = v141;
      swift_errorRetain();
      sub_100003C68(&qword_100076FE0);
      uint64_t v146 = String.init<A>(describing:)();
      uint64_t v322 = sub_1000036B0(v146, v147, (uint64_t *)&v325);
      uint64_t v107 = (void (*)(uint64_t, NSString *))v304;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v143, v144, "Failed to copy setting records. Error: %{public}s", v145, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      uint64_t v148 = v297;
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      uint64_t v148 = v142;
    }
    ((void (*)(uint64_t, void *))v315._baseURL)(v148, v315._clients);
    long long v139 = v315._urlString;
    uint64_t v122 = v313;
  }
  v149 = v301;
  static Logger.persistenceRecordStore.getter();
  v150 = Logger.logObject.getter();
  os_log_type_t v151 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v150, v151))
  {
    v152 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v152 = 0;
    _os_log_impl((void *)&_mh_execute_header, v150, v151, "Copying data version...", v152, 2u);
    swift_slowDealloc();
  }

  ((void (*)(char *, void *))v315._baseURL)(v149, v315._clients);
  id v325 = (id)0xD000000000000011;
  unint64_t v326 = 0x8000000100068020;
  v153 = v308;
  uint64_t v154 = v309;
  v306(v308, v276, v309);
  URL.appending<A>(path:directoryHint:)();
  ((void (*)(char *, uint64_t))v311)(v153, v154);
  swift_bridgeObjectRelease();
  sub_100006DCC(v318, *(void *)(v278 + 40));
  v155 = v314;
  dispatch thunk of Locatable.dataVersionPath.getter();
  URL._bridgeToObjectiveC()(v156);
  v158 = v157;
  v107((uint64_t)v155, v139);
  URL._bridgeToObjectiveC()(v159);
  v161 = v160;
  id v325 = 0;
  LODWORD(v153) = [v277 copyItemAtURL:v158 toURL:v160 error:&v325];

  id v162 = v325;
  if (v153)
  {
    v107(v122, v139);
    uint64_t v163 = (uint64_t)v139;
  }
  else
  {
    v164 = v162;
    uint64_t v165 = _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v319 = 0;
    v107(v122, v139);
    int64_t v166 = v296;
    static Logger.persistenceRecordStore.getter();
    swift_errorRetain();
    swift_errorRetain();
    v167 = Logger.logObject.getter();
    os_log_type_t v168 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v167, v168))
    {
      v169 = (uint8_t *)swift_slowAlloc();
      id v325 = (id)swift_slowAlloc();
      *(_DWORD *)v169 = 136446210;
      uint64_t v322 = v165;
      swift_errorRetain();
      sub_100003C68(&qword_100076FE0);
      uint64_t v170 = String.init<A>(describing:)();
      uint64_t v322 = sub_1000036B0(v170, v171, (uint64_t *)&v325);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v167, v168, "Failed to data version. Error: %{public}s", v169, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    ((void (*)(int64_t, void *))v315._baseURL)(v166, v315._clients);
    uint64_t v163 = (uint64_t)v315._urlString;
  }
  swift_beginAccess();
  uint64_t v172 = swift_bridgeObjectRetain();
  uint64_t v173 = (uint64_t)sub_100048CBC(v172);
  swift_bridgeObjectRelease();
  if (v173 < 0 || (v173 & 0x4000000000000000) != 0) {
    goto LABEL_127;
  }
  uint64_t v175 = *(void *)(v173 + 16);
  if (!v175)
  {
LABEL_128:

    swift_release();
    (*(void (**)(uint64_t, char *, uint64_t))(v272 + 32))(v270, v289, v163);
    return [*(id *)(v278 + 176) unlock];
  }
LABEL_46:
  unint64_t v176 = 0;
  unint64_t v284 = v173 & 0xC000000000000001;
  uint64_t v271 = v173 + 32;
  LODWORD(v302) = enum case for URL.DirectoryHint.isDirectory(_:);
  v293 = &v321;
  *(void *)&long long v174 = 136446210;
  long long v279 = v174;
  v273 = (char *)&type metadata for Any + 8;
  unint64_t v280 = 0x8000000100068040;
  *(void *)&long long v174 = 136446466;
  long long v294 = v174;
  uint64_t v298 = 0x8000000100067030;
  *(void *)&long long v174 = 136446722;
  long long v291 = v174;
  long long v292 = xmmword_100064440;
  uint64_t v283 = v173;
  uint64_t v282 = v175;
  while (1)
  {
    if (v284)
    {
      uint64_t v313 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v178 = __OFADD__(v176, 1);
      unint64_t v179 = v176 + 1;
      if (v178) {
        goto LABEL_125;
      }
    }
    else
    {
      if (v176 >= *(void *)(v173 + 16)) {
        goto LABEL_126;
      }
      uint64_t v313 = *(void *)(v271 + 8 * v176);
      swift_retain();
      BOOL v178 = __OFADD__(v176, 1);
      unint64_t v179 = v176 + 1;
      if (v178)
      {
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        swift_bridgeObjectRetain();
        uint64_t v175 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
        if (!v175) {
          goto LABEL_128;
        }
        goto LABEL_46;
      }
    }
    unint64_t v290 = v179;
    v180 = *(void **)(v313 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 8);
    v323 = *(char **)(v313 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client);
    uint64_t v181 = (uint64_t)v323;
    v324 = v180;
    v182 = v308;
    uint64_t v183 = v309;
    v306(v308, v302, v309);
    swift_bridgeObjectRetain_n();
    URL.appending<A>(path:directoryHint:)();
    ((void (*)(char *, uint64_t))v311)(v182, v183);
    swift_bridgeObjectRelease();
    v184 = v285;
    static Logger.persistenceRecordStore.getter();
    swift_bridgeObjectRetain_n();
    v185 = Logger.logObject.getter();
    os_log_type_t v186 = static os_log_type_t.default.getter();
    BOOL v187 = os_log_type_enabled(v185, v186);
    v318 = v180;
    uint64_t v297 = v181;
    if (v187)
    {
      uint64_t v188 = swift_slowAlloc();
      v323 = (char *)swift_slowAlloc();
      *(_DWORD *)uint64_t v188 = v279;
      swift_bridgeObjectRetain();
      *(void *)(v188 + 4) = sub_1000036B0(v181, (unint64_t)v180, (uint64_t *)&v323);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v185, v186, "Creating new diagnostics directory for “%{public}s”...", (uint8_t *)v188, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    ((void (*)(char *, void *))v315._baseURL)(v184, v315._clients);
    v189 = v287;
    v190 = v286;
    uint64_t v191 = v319;
    static Persistence.createDirectory(at:)();
    if (!v191) {
      break;
    }
    uint64_t v319 = 0;
    static Logger.persistenceRecordStore.getter();
    swift_errorRetain();
    v192 = v318;
    swift_bridgeObjectRetain();
    swift_errorRetain();
    v193 = Logger.logObject.getter();
    os_log_type_t v194 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v193, v194))
    {
      uint64_t v195 = swift_slowAlloc();
      v323 = (char *)swift_slowAlloc();
      *(_DWORD *)uint64_t v195 = v294;
      swift_bridgeObjectRetain();
      *(void *)(v195 + 4) = sub_1000036B0(v297, (unint64_t)v192, (uint64_t *)&v323);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v195 + 12) = 2082;
      uint64_t v320 = v191;
      swift_errorRetain();
      sub_100003C68(&qword_100076FE0);
      uint64_t v196 = String.init<A>(describing:)();
      *(void *)(v195 + 14) = sub_1000036B0(v196, v197, (uint64_t *)&v323);
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v193, v194, "Failed to create diagnostics directory for “%{public}s.” Error: %{public}s", (uint8_t *)v195, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      swift_release();

      swift_errorRelease();
      swift_errorRelease();
      swift_bridgeObjectRelease_n();
    }
    swift_errorRelease();
    ((void (*)(char *, void *))v315._baseURL)(v189, v315._clients);
    v177 = v312;
    uint64_t v163 = (uint64_t)v315._urlString;
LABEL_48:
    ((void (*)(char *, uint64_t))v304)(v177, v163);
    uint64_t v173 = v283;
    unint64_t v176 = v290;
    if (v290 == v282) {
      goto LABEL_128;
    }
  }
  uint64_t v319 = 0;
  static Logger.persistenceRecordStore.getter();
  v198 = v318;
  swift_bridgeObjectRetain_n();
  v199 = Logger.logObject.getter();
  uint64_t v200 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v199, (os_log_type_t)v200))
  {
    v201 = (uint8_t *)swift_slowAlloc();
    v323 = (char *)swift_slowAlloc();
    *(_DWORD *)v201 = v279;
    swift_bridgeObjectRetain();
    uint64_t v320 = sub_1000036B0(v297, (unint64_t)v198, (uint64_t *)&v323);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v199, (os_log_type_t)v200, "Copying effective settings for container “%{public}s” ...", v201, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  ((void (*)(char *, void *))v315._baseURL)(v190, v315._clients);
  v316 = (char *)0xD00000000000001DLL;
  v323 = (char *)0xD00000000000001DLL;
  v324 = (void *)v280;
  v202 = v308;
  uint64_t v203 = v276;
  uint64_t v204 = v309;
  v205 = v306;
  v306(v308, v276, v309);
  URL.appending<A>(path:directoryHint:)();
  ((void (*)(char *, uint64_t))v311)(v202, v204);
  swift_bridgeObjectRelease();
  v323 = v316;
  v324 = (void *)v280;
  v205(v202, v203, v204);
  v206 = v274;
  URL.appending<A>(path:directoryHint:)();
  uint64_t v207 = v204;
  v208 = v206;
  ((void (*)(char *, uint64_t))v311)(v202, v207);
  swift_bridgeObjectRelease();
  uint64_t v209 = v319;
  uint64_t v210 = static Persistence.read(from:)();
  if (v209)
  {
    uint64_t v163 = (uint64_t)v315._urlString;
    v211 = (void (*)(char *, uint64_t))v304;
    ((void (*)(char *, NSString *))v304)(v206, v315._urlString);
    v211(v281, v163);
    uint64_t v319 = 0;
    v212 = v275;
    static Logger.persistenceRecordStore.getter();
    v267 = v318;
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    v216 = Logger.logObject.getter();
    os_log_type_t v217 = static os_log_type_t.error.getter();
    uint64_t v173 = v217;
    if (os_log_type_enabled(v216, v217))
    {
      uint64_t v218 = swift_slowAlloc();
      v316 = (char *)swift_slowAlloc();
      v323 = v316;
      *(_DWORD *)uint64_t v218 = v294;
      swift_bridgeObjectRetain();
      uint64_t v320 = sub_1000036B0(v297, (unint64_t)v267, (uint64_t *)&v323);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v218 + 12) = 2082;
      uint64_t v320 = v209;
      swift_errorRetain();
      sub_100003C68(&qword_100076FE0);
      uint64_t v219 = String.init<A>(describing:)();
      uint64_t v320 = sub_1000036B0(v219, v220, (uint64_t *)&v323);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v216, (os_log_type_t)v173, "Failed to copy effective settings for “%{public}s.” Error: %{public}s", (uint8_t *)v218, 0x16u);
      uint64_t v173 = (uint64_t)v316;
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v163 = (uint64_t)v315._urlString;
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }
    ((void (*)(char *, void *))v315._baseURL)(v212, v315._clients);
  }
  else
  {
    uint64_t v213 = v210;
    uint64_t v163 = (uint64_t)v315._urlString;
    v214 = (void (*)(char *, uint64_t))v304;
    ((void (*)(char *, NSString *))v304)(v208, v315._urlString);
    uint64_t v173 = Dictionary<>.filterSensitiveInformation()(v213);
    swift_bridgeObjectRelease();
    v215 = v281;
    sub_10004D3DC();
    uint64_t v319 = 0;
    v214(v215, v163);
    swift_bridgeObjectRelease();
    v267 = v318;
  }
  v221 = (char *)(v313 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_storeDirectory);
  swift_beginAccess();
  v300 = v221;
  uint64_t v222 = swift_bridgeObjectRetain();
  uint64_t v223 = sub_100024A08(v222);
  int64_t v224 = 0;
  uint64_t v225 = *(void *)(v223 + 56);
  uint64_t v295 = v223 + 56;
  v301 = (char *)v223;
  uint64_t v226 = 1 << *(unsigned char *)(v223 + 32);
  if (v226 < 64) {
    uint64_t v227 = ~(-1 << v226);
  }
  else {
    uint64_t v227 = -1;
  }
  unint64_t v228 = v227 & v225;
  int64_t v296 = (unint64_t)(v226 + 63) >> 6;
  while (1)
  {
    if (v228)
    {
      v316 = (char *)((v228 - 1) & v228);
      unint64_t v229 = __clz(__rbit64(v228)) | (v224 << 6);
    }
    else
    {
      BOOL v178 = __OFADD__(v224++, 1);
      if (v178) {
        goto LABEL_123;
      }
      if (v224 >= v296)
      {
LABEL_47:
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v177 = v312;
        goto LABEL_48;
      }
      unint64_t v230 = *(void *)(v295 + 8 * v224);
      if (!v230)
      {
        int64_t v231 = v224 + 1;
        if (v224 + 1 >= v296) {
          goto LABEL_47;
        }
        unint64_t v230 = *(void *)(v295 + 8 * v231);
        if (!v230)
        {
          int64_t v231 = v224 + 2;
          if (v224 + 2 >= v296) {
            goto LABEL_47;
          }
          unint64_t v230 = *(void *)(v295 + 8 * v231);
          if (!v230)
          {
            int64_t v231 = v224 + 3;
            if (v224 + 3 >= v296) {
              goto LABEL_47;
            }
            unint64_t v230 = *(void *)(v295 + 8 * v231);
            if (!v230)
            {
              while (1)
              {
                int64_t v224 = v231 + 1;
                if (__OFADD__(v231, 1)) {
                  goto LABEL_124;
                }
                if (v224 >= v296) {
                  goto LABEL_47;
                }
                unint64_t v230 = *(void *)(v295 + 8 * v224);
                ++v231;
                if (v230) {
                  goto LABEL_89;
                }
              }
            }
          }
        }
        int64_t v224 = v231;
      }
LABEL_89:
      v316 = (char *)((v230 - 1) & v230);
      unint64_t v229 = __clz(__rbit64(v230)) + (v224 << 6);
    }
    v232 = (uint64_t *)(*((void *)v301 + 6) + 16 * v229);
    uint64_t v233 = *v232;
    unint64_t v234 = v232[1];
    swift_bridgeObjectRetain();
    v235 = v299;
    static Logger.persistenceRecordStore.getter();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v236 = Logger.logObject.getter();
    os_log_type_t v237 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v236, v237))
    {
      int64_t v238 = v224;
      uint64_t v239 = swift_slowAlloc();
      v323 = (char *)swift_slowAlloc();
      *(_DWORD *)uint64_t v239 = v294;
      swift_bridgeObjectRetain();
      *(void *)(v239 + 4) = sub_1000036B0(v297, (unint64_t)v267, (uint64_t *)&v323);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v239 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v239 + 14) = sub_1000036B0(v233, v234, (uint64_t *)&v323);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v236, v237, "Copying data for container “%{public}s” and name “%{public}s”...", (uint8_t *)v239, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      int64_t v224 = v238;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    ((void (*)(char *, void *))v315._baseURL)(v235, v315._clients);
    uint64_t v240 = v233;
    v323 = (char *)v233;
    v324 = (void *)v234;
    swift_bridgeObjectRetain();
    v241._uint64_t countAndFlagsBits = 0x7473696C702ELL;
    v241._object = (void *)0xE600000000000000;
    String.append(_:)(v241);
    v242 = v308;
    uint64_t v243 = v309;
    v306(v308, v302, v309);
    URL.appending<A>(path:directoryHint:)();
    ((void (*)(char *, uint64_t))v311)(v242, v243);
    swift_bridgeObjectRelease();
    uint64_t v244 = v319;
    uint64_t v245 = sub_10004FD9C(v313, v233, v234, 0xD000000000000011, v298);
    if (v244)
    {
      swift_errorRelease();
LABEL_95:
      v246 = (char *)&_swiftEmptyDictionarySingleton;
      goto LABEL_98;
    }
    if (!v245) {
      goto LABEL_95;
    }
    v246 = (char *)Dictionary<>.filterSensitiveInformation()(v245);
    swift_bridgeObjectRelease();
LABEL_98:
    uint64_t v247 = *(void *)(*(void *)v300 + 16);
    v314 = (char *)v240;
    if (v247)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100019BD4(v240, v234);
      if (v248)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100003C68(&qword_100076500);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = v292;
        *(void *)(inited + 32) = static ManagedSettingsStore.PropertyKeys.active.getter();
        *(void *)(inited + 40) = v250;
        *(inited + 48) = Bool.persistableValue()();
        *(void *)(inited + 56) = static ManagedSettingsStore.PropertyKeys.syncToWatch.getter();
        *(void *)(inited + 64) = v251;
        *(inited + 72) = Bool.persistableValue()();
        uint64_t v163 = sub_100038370(inited);
        swift_bridgeObjectRelease();
        goto LABEL_105;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (qword_100076390 != -1) {
      swift_once();
    }
    uint64_t v163 = qword_100079558;
    swift_bridgeObjectRetain();
LABEL_105:
    sub_100020D5C(0, (unint64_t *)&qword_100076508);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v253 = isa;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v323 = v246;
    uint64_t v173 = (uint64_t)v246;
    unint64_t v256 = sub_100019BD4(0x69747265706F7250, 0xEA00000000007365);
    uint64_t v257 = *((void *)v246 + 2);
    BOOL v258 = (v255 & 1) == 0;
    uint64_t v259 = v257 + v258;
    if (__OFADD__(v257, v258))
    {
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
      goto LABEL_125;
    }
    uint64_t v163 = v255;
    if (*((void *)v246 + 3) < v259) {
      break;
    }
    v262 = v317;
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v173 = (uint64_t)v323;
      if (v255) {
        goto LABEL_113;
      }
    }
    else
    {
      sub_10001F468();
      uint64_t v173 = (uint64_t)v323;
      if (v163)
      {
LABEL_113:
        uint64_t v266 = *(void *)(v173 + 56);

        *(void *)(v266 + 8 * v256) = v253;
        goto LABEL_114;
      }
    }
LABEL_109:
    *(void *)(v173 + 8 * (v256 >> 6) + 64) |= 1 << v256;
    v263 = (void *)(*(void *)(v173 + 48) + 16 * v256);
    void *v263 = 0x69747265706F7250;
    v263[1] = 0xEA00000000007365;
    *(void *)(*(void *)(v173 + 56) + 8 * v256) = v253;
    uint64_t v264 = *(void *)(v173 + 16);
    BOOL v178 = __OFADD__(v264, 1);
    uint64_t v265 = v264 + 1;
    if (v178) {
      goto LABEL_122;
    }
    *(void *)(v173 + 16) = v265;
LABEL_114:
    swift_bridgeObjectRelease();
    sub_10004D3DC();
    uint64_t v163 = (uint64_t)v315._urlString;
    v267 = v318;
    uint64_t v319 = 0;
    ((void (*)(char *, NSString *))v304)(v262, v315._urlString);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    unint64_t v228 = (unint64_t)v316;
  }
  sub_10001C448(v259, isUniquelyReferenced_nonNull_native);
  unint64_t v260 = sub_100019BD4(0x69747265706F7250, 0xEA00000000007365);
  v262 = v317;
  if ((v163 & 1) == (v261 & 1))
  {
    unint64_t v256 = v260;
    uint64_t v173 = (uint64_t)v323;
    if (v163) {
      goto LABEL_113;
    }
    goto LABEL_109;
  }
  id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000449BC()
{
  _s20ManagedSettingsAgent12ClientFinderVwxx_0(v0 + 16);
  _s20ManagedSettingsAgent12ClientFinderVwxx_0(v0 + 72);
  _s20ManagedSettingsAgent12ClientFinderVwxx_0(v0 + 128);

  _s20ManagedSettingsAgent12ClientFinderVwxx_0(v0 + 184);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PersistenceRecordStore()
{
  return self;
}

uint64_t sub_100044A40()
{
  _s20ManagedSettingsAgent12ClientFinderVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100044A78(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6, unsigned char *a7)
{
  unint64_t v12 = a3;
  uint64_t v13 = a2;
  uint64_t v15 = sub_10004FD9C(a1, a2, a3, 0x657A696E656B6F74, 0xEF7473696C702E64);
  uint64_t v46 = v7;
  if (v8)
  {
    swift_errorRelease();
    unint64_t v48 = sub_100038370((uint64_t)&_swiftEmptyArrayStorage);
  }
  else
  {
    unint64_t v48 = v15;
  }
  uint64_t v23 = sub_10004FD9C(a1, v13, v12, 0xD000000000000011, 0x8000000100067030);
  if (a6)
  {
    if (*(void *)(a4 + 16))
    {
      uint64_t v43 = v13;
      unint64_t v16 = v12;
      uint64_t v17 = a1 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client;
      char v18 = *(unsigned char *)(a1 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 32);
      swift_bridgeObjectRetain();
      uint64_t v19 = Dictionary<>.sanitize(isInternalClient:)(v18, a4);
      uint64_t v20 = *(void *)(v17 + 16);
      uint64_t v21 = *(void *)(v17 + 24);
      long long v49 = *(_OWORD *)v17;
      uint64_t v50 = v20;
      uint64_t v51 = v21;
      char v52 = v18;
      uint64_t v22 = sub_1000124EC((uint64_t)&v49, v46 + 72, v19);
      uint64_t v31 = a1;
      uint64_t v32 = v22;
      uint64_t v45 = v31;
      swift_bridgeObjectRelease();
      unint64_t v12 = v16;
      uint64_t v13 = v43;
    }
    else
    {
      uint64_t v45 = a1;
      swift_bridgeObjectRetain();
      uint64_t v19 = sub_100038370((uint64_t)&_swiftEmptyArrayStorage);
      uint64_t v32 = sub_100038370((uint64_t)&_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease();
    }
    uint64_t v25 = a7;
  }
  else
  {
    uint64_t v45 = a1;
    if (*(void *)(a5 + 16))
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v19 = sub_1000501F4(v48, a5);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v24 = swift_bridgeObjectRetain();
      uint64_t v32 = sub_1000501F4(v24, a5);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = v48;
      swift_bridgeObjectRetain();
      uint64_t v32 = v23;
    }
    uint64_t v25 = a7;
    if (*(void *)(a4 + 16))
    {
      unint64_t v42 = v12;
      uint64_t v44 = v13;
      uint64_t v26 = v45 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client;
      char v27 = *(unsigned char *)(v45 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 32);
      uint64_t v28 = Dictionary<>.sanitize(isInternalClient:)(v27, a4);
      uint64_t v29 = *(void *)(v26 + 16);
      uint64_t v30 = *(void *)(v26 + 24);
      long long v53 = *(_OWORD *)v26;
      uint64_t v54 = v29;
      uint64_t v55 = v30;
      char v56 = v27;
      uint64_t v33 = sub_1000124EC((uint64_t)&v53, v46 + 72, v28);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v57 = v19;
      sub_100049890(v28, (uint64_t)sub_10004A708, 0, isUniquelyReferenced_nonNull_native, &v57);
      uint64_t v19 = v57;
      swift_bridgeObjectRelease();
      char v35 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v57 = v32;
      sub_100049890(v33, (uint64_t)sub_10004A708, 0, v35, &v57);
      uint64_t v25 = a7;
      unint64_t v12 = v42;
      uint64_t v13 = v44;
      uint64_t v32 = v57;
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRetain();
  sub_10000FBB0(v48, v19);
  char v37 = v36;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v37 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  sub_10000FBB0(v23, v32);
  char v39 = v38;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v39 & 1) == 0)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    sub_10004D92C(v45, v13, v12, v19, v32, v25);
    swift_bridgeObjectRelease();
    char v40 = 1;
    goto LABEL_20;
  }
  char v40 = 0;
LABEL_20:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v40 & 1;
}

uint64_t sub_100044F28(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v25 - v6;
  static Logger.persistenceRecordStore.getter();
  swift_retain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  int v10 = v9;
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v28 = v4;
    uint64_t v12 = v11;
    uint64_t v27 = swift_slowAlloc();
    uint64_t v31 = v27;
    *(_DWORD *)uint64_t v12 = 136446466;
    LODWORD(v26) = v10;
    type metadata accessor for UUID();
    uint64_t v29 = v1;
    sub_1000501A4(&qword_100076C78, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v32 = sub_1000036B0(v13, v14, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2082;
    v25[1] = v12 + 14;
    uint64_t v15 = *(void *)(a1 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 8);
    uint64_t v16 = v3;
    uint64_t v17 = *(void *)(a1 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 16);
    uint64_t v18 = *(void *)(a1 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 24);
    char v19 = *(unsigned char *)(a1 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 32);
    uint64_t v32 = *(void *)(a1 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client);
    uint64_t v33 = v15;
    uint64_t v34 = v17;
    uint64_t v35 = v18;
    char v36 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v20 = ClientIdentity.description.getter();
    unint64_t v22 = v21;
    uint64_t v3 = v16;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v30 = sub_1000036B0(v20, v22, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, (os_log_type_t)v26, "Removing record %{public}s for %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v4 = v28;
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  sub_10004CD60(a1 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_containerPath);
  uint64_t v23 = a1 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_recordIdentifier;
  swift_beginAccess();
  sub_10001649C(v23);
  swift_endAccess();
  swift_release();
  return sub_100038FEC();
}

uint64_t sub_1000455E4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  os_log_type_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t result = __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(v1 + 168) & 1) == 0)
  {
    *(unsigned char *)(v1 + 168) = 1;
    sub_100020D5C(0, (unint64_t *)&qword_1000769D0);
    uint64_t v19 = v6;
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v10);
    uint64_t v18 = static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    aBlock[4] = sub_100050194;
    aBlock[5] = v1;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10002C398;
    aBlock[3] = &unk_1000729D0;
    uint64_t v15 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    unint64_t v20 = &_swiftEmptyArrayStorage;
    sub_1000501A4((unint64_t *)&qword_100077430, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100003C68((uint64_t *)&unk_100077260);
    sub_10002B988((unint64_t *)&qword_100077440, (uint64_t *)&unk_100077260);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v16 = (void *)v18;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v15);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v19);
    return swift_release();
  }
  return result;
}

id sub_100045968()
{
  uint64_t v0 = type metadata accessor for Logger();
  __chkstk_darwin(v0);
  return sub_10003E81C();
}

uint64_t sub_100045BB0(_OWORD *a1, uint64_t a2, uint64_t *a3)
{
  int v80 = a3;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v87 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v96 = (char *)v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v73 - v11;
  __chkstk_darwin(v10);
  os_log_type_t v81 = (char *)v73 - v13;
  uint64_t v79 = type metadata accessor for UUID();
  uint64_t v78 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v77 = (char *)v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for ManagedSettingsStore.Name();
  uint64_t v83 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v82 = (char *)v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = type metadata accessor for SettingScope();
  uint64_t v95 = *(void (***)(char *, void, uint64_t, uint64_t))(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v98 = (char *)v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v97 = (char *)v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100003C68(&qword_1000764C0);
  __chkstk_darwin(v19 - 8);
  unint64_t v21 = (char *)v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = swift_bridgeObjectRetain();
  sub_10004C45C(v22);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v86 = v3;
  long long v23 = *a1;
  long long v105 = a1[1];
  long long v106 = v23;
  sub_10001903C((uint64_t)&v106);
  sub_10001903C((uint64_t)&v105);
  uint64_t v24 = swift_bridgeObjectRetain();
  uint64_t v101 = a1;
  char v25 = sub_10004D210(v24, (uint64_t)a1);
  sub_100019068((uint64_t)&v106);
  sub_100019068((uint64_t)&v105);
  swift_bridgeObjectRelease();
  if (v25)
  {
    static Logger.persistenceRecordStore.getter();
    sub_10001903C((uint64_t)&v106);
    sub_10001903C((uint64_t)&v105);
    sub_10001903C((uint64_t)&v106);
    sub_10001903C((uint64_t)&v105);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v85 = v7;
      v103[0] = v29;
      *(_DWORD *)uint64_t v28 = 136446210;
      sub_10001903C((uint64_t)&v106);
      sub_10001903C((uint64_t)&v105);
      unint64_t v30 = ClientIdentity.description.getter();
      unint64_t v32 = v31;
      sub_100019068((uint64_t)&v106);
      sub_100019068((uint64_t)&v105);
      uint64_t v107 = (void *)sub_1000036B0(v30, v32, v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100019068((uint64_t)&v106);
      sub_100019068((uint64_t)&v105);
      sub_100019068((uint64_t)&v106);
      sub_100019068((uint64_t)&v105);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Already migrated files for %{public}s", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v87 + 8))(v96, v85);
    }
    else
    {
      sub_100019068((uint64_t)&v106);
      sub_100019068((uint64_t)&v105);
      sub_100019068((uint64_t)&v106);
      sub_100019068((uint64_t)&v105);

      (*(void (**)(char *, uint64_t))(v87 + 8))(v96, v7);
    }
    char v41 = 0;
  }
  else
  {
    uint64_t v75 = v4;
    uint64_t v107 = &_swiftEmptyDictionarySingleton;
    uint64_t v33 = *(void *)(a2 + 16);
    uint64_t v85 = v7;
    uint64_t v74 = v12;
    uint64_t v76 = a2;
    if (v33)
    {
      uint64_t v34 = v17 + 16;
      uint64_t v96 = *(char **)(v17 + 16);
      uint64_t v35 = a2 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
      uint64_t v93 = *(void *)(v34 + 56);
      os_log_type_t v94 = (unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 32);
      long long v92 = (void (**)(uint64_t, char *, uint64_t))(v34 + 16);
      unsigned int v91 = enum case for SettingScope.localContainer(_:);
      unint64_t v90 = (void (**)(uint64_t, void, uint64_t))(v95 + 13);
      uint64_t v89 = (void (**)(uint64_t, uint64_t))(v95 + 1);
      unsigned int v88 = (void (**)(uint64_t, uint64_t))(v34 - 8);
      swift_bridgeObjectRetain();
      uint64_t v95 = (void (**)(char *, void, uint64_t, uint64_t))(v34 + 40);
      v73[1] = (v34 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      uint64_t v37 = v99;
      uint64_t v36 = v100;
      uint64_t v39 = (uint64_t)v97;
      uint64_t v38 = (uint64_t)v98;
      while (1)
      {
        ((void (*)(char *, uint64_t, uint64_t))v96)(v21, v35, v36);
        char v40 = *v95;
        (*v95)(v21, 0, 1, v36);
        if ((*v94)(v21, 1, v36) == 1) {
          break;
        }
        (*v92)(v39, v21, v36);
        (*v90)(v38, v91, v37);
        sub_100037198(v39, *((unsigned char *)v101 + 32), v38);
        uint64_t v36 = v100;
        (*v89)(v38, v37);
        (*v88)(v39, v36);
        v35 += v93;
        if (!--v33) {
          goto LABEL_12;
        }
      }
    }
    else
    {
      char v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
      swift_bridgeObjectRetain();
      uint64_t v36 = v100;
LABEL_12:
      v40(v21, 1, 1, v36);
    }
    swift_bridgeObjectRelease();
    unint64_t v42 = v101;
    uint64_t v43 = Dictionary<>.sanitize(isInternalClient:)(*((unsigned char *)v101 + 32), (uint64_t)v107);
    swift_bridgeObjectRelease();
    if (*(void *)(v43 + 16))
    {
      uint64_t v44 = v75;
      uint64_t v45 = sub_1000124EC((uint64_t)v42, v86 + 72, v43);
      if (v44)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v53 = v45;
        if (*(void *)(v43 + 16) && *(void *)(v45 + 16))
        {
          uint64_t v54 = v82;
          static ManagedSettingsStore.Name.default.getter();
          uint64_t v55 = ManagedSettingsStore.Name.rawValue.getter();
          unint64_t v57 = v56;
          (*(void (**)(char *, uint64_t))(v83 + 8))(v54, v84);
          uint64_t v59 = sub_1000472E4(v42);
          char v104 = 0;
          sub_10004D92C(v59, v55, v57, v43, v53, &v104);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v60 = v59 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_storeDirectory;
          swift_beginAccess();
          if (*(void *)(*(void *)v60 + 16))
          {
            sub_10004E374(v59);
            uint64_t v61 = v78;
            uint64_t v62 = (uint64_t)v77;
            uint64_t v63 = v79;
            (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v77, v59 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_recordIdentifier, v79);
            swift_retain();
            uint64_t v64 = v80;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v102 = *v64;
            *uint64_t v64 = 0x8000000000000000;
            sub_10001D4D8(v59, v62, isUniquelyReferenced_nonNull_native);
            *uint64_t v64 = v102;
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v62, v63);
            swift_release();
          }
          else
          {
            uint64_t v66 = v81;
            static Logger.persistenceRecordStore.getter();
            uint64_t v67 = Logger.logObject.getter();
            os_log_type_t v68 = static os_log_type_t.fault.getter();
            BOOL v69 = os_log_type_enabled(v67, v68);
            uint64_t v70 = v85;
            uint64_t v71 = v87;
            if (v69)
            {
              uint64_t v72 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v72 = 0;
              _os_log_impl((void *)&_mh_execute_header, v67, v68, "Removing newly created record during migration... This shouldn't be possible", v72, 2u);
              swift_slowDealloc();
              swift_release();
            }
            else
            {

              swift_release();
            }
            (*(void (**)(char *, uint64_t))(v71 + 8))(v66, v70);
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        char v41 = 1;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v46 = v74;
      static Logger.persistenceRecordStore.getter();
      sub_10001903C((uint64_t)&v106);
      sub_10001903C((uint64_t)&v105);
      sub_10001903C((uint64_t)&v106);
      sub_10001903C((uint64_t)&v105);
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        long long v49 = (uint8_t *)swift_slowAlloc();
        v103[0] = swift_slowAlloc();
        *(_DWORD *)long long v49 = 136446210;
        uint64_t v100 = (uint64_t)(v49 + 4);
        sub_10001903C((uint64_t)&v106);
        sub_10001903C((uint64_t)&v105);
        unint64_t v50 = ClientIdentity.description.getter();
        unint64_t v52 = v51;
        sub_100019068((uint64_t)&v106);
        sub_100019068((uint64_t)&v105);
        uint64_t v102 = sub_1000036B0(v50, v52, v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100019068((uint64_t)&v106);
        sub_100019068((uint64_t)&v105);
        sub_100019068((uint64_t)&v106);
        sub_100019068((uint64_t)&v105);
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "No settings to migrate for %{public}s", v49, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100019068((uint64_t)&v106);
        sub_100019068((uint64_t)&v105);
        sub_100019068((uint64_t)&v106);
        sub_100019068((uint64_t)&v105);
      }

      (*(void (**)(char *, uint64_t))(v87 + 8))(v46, v85);
      char v41 = 0;
    }
  }
  return v41 & 1;
}

uint64_t sub_1000468CC(char *a1, char *a2, uint64_t *a3)
{
  uint64_t v65 = a3;
  BOOL v69 = a2;
  uint64_t v71 = (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Logger();
  uint64_t v70 = *((void *)v71 - 1);
  uint64_t v4 = __chkstk_darwin(v71);
  uint64_t v66 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unint64_t v73 = (char *)&v64 - v6;
  uint64_t v64 = type metadata accessor for UUID();
  uint64_t v68 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v67 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v64 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v64 - v16;
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v18((char *)&v64 - v16, &a1[OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_containerPath], v8);
  v18(v12, v17, v8);
  sub_10002844C((uint64_t)v15, v12);
  uint64_t v74 = *(void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v75 = v9 + 8;
  v74(v15, v8);
  long long v19 = *(_OWORD *)&a1[OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 16];
  long long v77 = *(_OWORD *)&a1[OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client];
  long long v78 = v19;
  char v79 = a1[OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 32];
  long long v80 = v19;
  long long v81 = v77;
  swift_beginAccess();
  sub_10001903C((uint64_t)&v81);
  sub_10001903C((uint64_t)&v80);
  uint64_t v20 = swift_bridgeObjectRetain();
  LOBYTE(v12) = sub_10004D210(v20, (uint64_t)&v77);
  sub_100019068((uint64_t)&v81);
  sub_100019068((uint64_t)&v80);
  swift_bridgeObjectRelease();
  if (v12)
  {
    static Logger.persistenceRecordStore.getter();
    swift_retain_n();
    unint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      long long v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = (void *)swift_slowAlloc();
      uint64_t v72 = v8;
      v82[0] = v24;
      *(_DWORD *)long long v23 = 136446210;
      sub_10001903C((uint64_t)&v81);
      sub_10001903C((uint64_t)&v80);
      unint64_t v25 = ClientIdentity.description.getter();
      unint64_t v27 = v26;
      sub_100019068((uint64_t)&v81);
      sub_100019068((uint64_t)&v80);
      uint64_t v76 = sub_1000036B0(v25, v27, (uint64_t *)v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Already migrated files for %{public}s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, void (*)(uint64_t, uint64_t, uint64_t)))(v70 + 8))(v73, v71);
      uint64_t v28 = v17;
LABEL_11:
      uint64_t v54 = v72;
      return ((uint64_t (*)(char *, uint64_t))v74)(v28, v54);
    }
    swift_release_n();

    (*(void (**)(char *, void (*)(uint64_t, uint64_t, uint64_t)))(v70 + 8))(v73, v71);
    uint64_t v28 = v17;
    uint64_t v54 = v8;
  }
  else
  {
    unint64_t v73 = a1;
    uint64_t v72 = v8;
    id v29 = [self defaultManager];
    URL._bridgeToObjectiveC()(v30);
    unint64_t v32 = v31;
    URL._bridgeToObjectiveC()(&v83);
    uint64_t v34 = v33;
    v82[0] = 0;
    unsigned int v35 = [v29 moveItemAtURL:v32 toURL:v33 error:v82];

    id v36 = v82[0];
    if (!v35)
    {
      BOOL v69 = v17;
      id v55 = v82[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      unint64_t v56 = v66;
      static Logger.persistenceRecordStore.getter();
      swift_retain_n();
      unint64_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc();
        v82[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v59 = 136446210;
        sub_10001903C((uint64_t)&v81);
        sub_10001903C((uint64_t)&v80);
        unint64_t v60 = ClientIdentity.description.getter();
        unint64_t v62 = v61;
        sub_100019068((uint64_t)&v81);
        sub_100019068((uint64_t)&v80);
        uint64_t v76 = sub_1000036B0(v60, v62, (uint64_t *)v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "Unable to move record data for %{public}s", v59, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_errorRelease();

        (*(void (**)(char *, void (*)(uint64_t, uint64_t, uint64_t)))(v70 + 8))(v66, v71);
      }
      else
      {
        swift_errorRelease();
        swift_release_n();

        (*(void (**)(char *, void (*)(uint64_t, uint64_t, uint64_t)))(v70 + 8))(v56, v71);
      }
      uint64_t v28 = v69;
      goto LABEL_11;
    }
    uint64_t v66 = 0;
    uint64_t v37 = v73;
    uint64_t v38 = v68;
    uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 16);
    uint64_t v70 = v68 + 16;
    uint64_t v71 = v39;
    uint64_t v40 = v64;
    v39((uint64_t)v67, (uint64_t)&v73[OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_recordIdentifier], v64);
    char v41 = &v37[OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_storeDirectory];
    swift_beginAccess();
    uint64_t v42 = *(void *)v41;
    v18(v15, v69, v72);
    type metadata accessor for PersistenceRecord();
    uint64_t v43 = swift_allocObject();
    uint64_t v44 = (uint64_t)v67;
    (*(void (**)(uint64_t, char *, uint64_t))(v38 + 32))(v43 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_recordIdentifier, v67, v40);
    uint64_t v45 = v43 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client;
    long long v46 = v78;
    *(_OWORD *)uint64_t v45 = v77;
    *(_OWORD *)(v45 + 16) = v46;
    *(unsigned char *)(v45 + 32) = v79;
    *(void *)(v43 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_storeDirectory) = v42;
    uint64_t v47 = v15;
    uint64_t v48 = v72;
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v43 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_containerPath, v47, v72);
    *(void *)(v43 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_version) = 1;
    long long v49 = v65;
    sub_10001903C((uint64_t)&v81);
    sub_10001903C((uint64_t)&v80);
    swift_retain();
    id v50 = v36;
    swift_bridgeObjectRetain();
    uint64_t v51 = swift_bridgeObjectRetain();
    uint64_t v52 = sub_10004EBA8(v51, v43);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    *long long v49 = v52;
    v71(v44, v43 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_recordIdentifier, v40);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v76 = *v49;
    *long long v49 = 0x8000000000000000;
    sub_10001D4D8(v43, v44, isUniquelyReferenced_nonNull_native);
    *long long v49 = v76;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v44, v40);
    swift_release();
    uint64_t v28 = v17;
    uint64_t v54 = v48;
  }
  return ((uint64_t (*)(char *, uint64_t))v74)(v28, v54);
}

uint64_t sub_1000472E4(_OWORD *a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v34 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v27 - v6;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v31 = *(void *)(v8 - 8);
  uint64_t v32 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.persistenceRecordStore.getter();
  long long v11 = *a1;
  long long v37 = a1[1];
  long long v38 = v11;
  sub_10001903C((uint64_t)&v38);
  sub_10001903C((uint64_t)&v37);
  sub_10001903C((uint64_t)&v38);
  sub_10001903C((uint64_t)&v37);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    unint64_t v30 = v7;
    uint64_t v15 = (uint8_t *)v14;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v39 = v28;
    id v29 = a1;
    *(_DWORD *)uint64_t v15 = 136446210;
    unint64_t v27 = v15 + 4;
    sub_10001903C((uint64_t)&v38);
    sub_10001903C((uint64_t)&v37);
    unint64_t v16 = ClientIdentity.description.getter();
    uint64_t v17 = v3;
    uint64_t v18 = v2;
    unint64_t v20 = v19;
    sub_100019068((uint64_t)&v38);
    sub_100019068((uint64_t)&v37);
    uint64_t v36 = sub_1000036B0(v16, v20, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v2 = v18;
    uint64_t v3 = v17;
    swift_bridgeObjectRelease();
    sub_100019068((uint64_t)&v38);
    sub_100019068((uint64_t)&v37);
    sub_100019068((uint64_t)&v38);
    sub_100019068((uint64_t)&v37);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Creating new record for %{public}s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v7 = v30;
    swift_slowDealloc();

    unint64_t v21 = v10;
    os_log_type_t v22 = v29;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v32);
  }
  else
  {
    sub_100019068((uint64_t)&v38);
    sub_100019068((uint64_t)&v37);
    sub_100019068((uint64_t)&v38);
    sub_100019068((uint64_t)&v37);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v32);
    os_log_type_t v22 = a1;
  }
  uint64_t v23 = (uint64_t)v34;
  sub_100006DCC((void *)(v33 + 16), *(void *)(v33 + 40));
  dispatch thunk of Locatable.persistenceRecordStoreDirectory.getter();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(v23, v7, v2);
  sub_10001903C((uint64_t)&v38);
  sub_10001903C((uint64_t)&v37);
  uint64_t v24 = sub_100010DBC(v22, v23);
  type metadata accessor for Persistence();
  uint64_t v25 = v35;
  static Persistence.createDirectory(at:)();
  if (v25) {
    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  return v24;
}

uint8_t *sub_1000476F8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint8_t *)type metadata accessor for Logger();
  uint64_t v8 = *((void *)v7 - 1);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v11 = *(void *)(v1 + 232);
  if (*(void *)(v11 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v12 = sub_100019C4C(a1);
    if (v13)
    {
      uint64_t v7 = *(uint8_t **)(*(void *)(v11 + 56) + 8 * v12);
      swift_retain();
      swift_bridgeObjectRelease();
      return v7;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v24 = v8;
  static Logger.persistenceRecordStore.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v23 = v7;
    uint64_t v7 = (uint8_t *)v16;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v26 = v22;
    *(_DWORD *)uint64_t v7 = 136446210;
    unint64_t v21 = v7 + 4;
    sub_1000501A4(&qword_100076C78, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v25 = sub_1000036B0(v17, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unable to find existing record with recordIdentifier %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint8_t *))(v24 + 8))(v10, v23);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);

    (*(void (**)(char *, uint8_t *))(v24 + 8))(v10, v7);
  }
  sub_100011298();
  swift_allocError();
  *unint64_t v19 = 0;
  swift_willThrow();
  return v7;
}

uint64_t sub_100047A8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = v4;
  uint64_t result = dispatch thunk of static TeamIdentifierRetrieving.teamIdentifierFromCurrentConnection()();
  if (!v5)
  {
    uint64_t v13 = result;
    uint64_t v14 = v12;
    if (a3)
    {
      uint64_t result = swift_bridgeObjectRetain();
LABEL_4:
      *(void *)a4 = a1;
      *(void *)(a4 + 8) = a2;
      *(void *)(a4 + 16) = v13;
      *(void *)(a4 + 24) = v14;
      *(unsigned char *)(a4 + 32) = a3 & 1;
      return result;
    }
    uint64_t v19 = result;
    uint64_t v20 = v12;
    uint64_t v16 = *(void *)(v6 + 56);
    uint64_t v15 = *(void *)(v6 + 64);
    uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 8);
    Swift::Int v21[3] = v16;
    _DWORD v21[4] = v15;
    sub_100006CC0(v21);
    swift_bridgeObjectRetain();
    v22(a1, a2, v16, v15);
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v16, v15);
    if (v18)
    {
      a1 = v17;
      a2 = v18;
      uint64_t result = _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v21);
      uint64_t v14 = v20;
      uint64_t v13 = v19;
      goto LABEL_4;
    }
    swift_bridgeObjectRelease();
    _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v21);
    sub_100006D78();
    swift_allocError();
    return swift_willThrow();
  }
  return result;
}

NSObject *sub_100047C18(long long *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  long long v6 = *a1;
  long long v19 = a1[1];
  long long v20 = v6;
  sub_10001903C((uint64_t)&v20);
  sub_10001903C((uint64_t)&v19);
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = sub_10004CB70(v7, (uint64_t)a1);
  sub_100019068((uint64_t)&v20);
  sub_100019068((uint64_t)&v19);
  swift_bridgeObjectRelease();
  if (!v8)
  {
    static Logger.persistenceRecordStore.getter();
    sub_10001903C((uint64_t)&v20);
    sub_10001903C((uint64_t)&v19);
    sub_10001903C((uint64_t)&v20);
    sub_10001903C((uint64_t)&v19);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v21 = v17;
      *(_DWORD *)uint64_t v10 = 136446210;
      uint64_t v16 = v10 + 4;
      sub_10001903C((uint64_t)&v20);
      sub_10001903C((uint64_t)&v19);
      unint64_t v11 = ClientIdentity.description.getter();
      unint64_t v13 = v12;
      sub_100019068((uint64_t)&v20);
      sub_100019068((uint64_t)&v19);
      uint64_t v18 = sub_1000036B0(v11, v13, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100019068((uint64_t)&v20);
      sub_100019068((uint64_t)&v19);
      sub_100019068((uint64_t)&v20);
      sub_100019068((uint64_t)&v19);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Unable to find existing record with %{public}s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100019068((uint64_t)&v20);
      sub_100019068((uint64_t)&v19);
      sub_100019068((uint64_t)&v20);
      sub_100019068((uint64_t)&v19);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    sub_100011298();
    swift_allocError();
    *uint64_t v14 = 0;
    swift_willThrow();
  }
  return v8;
}

uint64_t sub_100047F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  if ((*(unsigned char *)(a2 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 32) & 1) == 0)
  {
    swift_retain();
    LOBYTE(a3) = sub_1000513AC(a3, v3);
    swift_release();
    if ((a3 & 1) == 0) {
      return 0;
    }
  }
  swift_retain();
  return v3;
}

uint64_t sub_100047FB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 0;
  if ((*(unsigned char *)(a2 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 32) & 1) == 0)
  {
    swift_retain();
    LOBYTE(a3) = sub_1000513AC(a3, a2);
    swift_release();
    if (a3) {
      return swift_retain();
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100048038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 0;
  if ((*(unsigned char *)(a2 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 32) & 1) == 0)
  {
    swift_retain();
    LOBYTE(a3) = sub_1000513AC(a3, a2);
    swift_release();
    if (a3) {
      return 0;
    }
    else {
      return swift_retain();
    }
  }
  return result;
}

id sub_1000480C0()
{
  return sub_10003F5D4();
}

unint64_t sub_1000480E4@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v71 = a2;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v69 = *(void *)(v5 - 8);
  uint64_t v70 = v5;
  __chkstk_darwin(v5);
  uint64_t v74 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for URL.DirectoryHint();
  uint64_t v7 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v85 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v84 - 8);
  uint64_t v10 = __chkstk_darwin(v84);
  unint64_t v12 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  NSURL v83 = (char *)&v67 - v13;
  uint64_t v14 = *a1;
  uint64_t v15 = sub_10000DF90();
  uint64_t v16 = *(void *)(v15 + 56);
  uint64_t v89 = v15 + 56;
  uint64_t v17 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v16;
  uint64_t v76 = (uint64_t *)(v14 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_storeDirectory);
  unint64_t result = swift_beginAccess();
  unint64_t v21 = v19;
  int64_t v22 = 0;
  int64_t v90 = (unint64_t)(v17 + 63) >> 6;
  unsigned int v82 = enum case for URL.DirectoryHint.notDirectory(_:);
  long long v80 = (void (**)(char *, uint64_t))(v7 + 8);
  long long v81 = (void (**)(char *, void, uint64_t))(v7 + 104);
  long long v92 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v75 = &_swiftEmptyDictionarySingleton;
  long long v73 = xmmword_100064440;
  unint64_t v68 = 0xEA00000000007365;
  uint64_t v87 = v14;
  long long v78 = v12;
  uint64_t v79 = v15;
  while (v21)
  {
    uint64_t v93 = (v21 - 1) & v21;
    unint64_t v23 = __clz(__rbit64(v21)) | (v22 << 6);
LABEL_18:
    unint64_t v27 = (uint64_t *)(*(void *)(v15 + 48) + 16 * v23);
    uint64_t v28 = *v27;
    unint64_t v29 = v27[1];
    swift_bridgeObjectRetain();
    sub_10000ECA4(v28, v29, (uint64_t)v12);
    if (v3)
    {
      swift_bridgeObjectRelease();
      unint64_t result = swift_errorRelease();
      uint64_t v3 = 0;
      unint64_t v21 = v93;
    }
    else
    {
      int64_t v91 = v22;
      uint64_t v88 = v28;
      type metadata accessor for Persistence();
      uint64_t v94 = 0x657A696E656B6F74;
      unint64_t v95 = 0xEF7473696C702E64;
      uint64_t v31 = v85;
      uint64_t v30 = v86;
      (*v81)(v85, v82, v86);
      sub_100011120();
      uint64_t v32 = v83;
      URL.appending<A>(path:directoryHint:)();
      (*v80)(v31, v30);
      swift_bridgeObjectRelease();
      uint64_t v33 = *v92;
      uint64_t v34 = v84;
      (*v92)(v12, v84);
      uint64_t v35 = static Persistence.data(from:)();
      unint64_t v37 = v36;
      uint64_t v77 = v35;
      v33(v32, v34);
      if (v37 >> 60 == 15)
      {
        unint64_t result = swift_bridgeObjectRelease();
        uint64_t v14 = v87;
        unint64_t v12 = v78;
        uint64_t v15 = v79;
        unint64_t v21 = v93;
        int64_t v22 = v91;
      }
      else
      {
        uint64_t v38 = *v76;
        uint64_t v39 = v88;
        int64_t v22 = v91;
        if (*(void *)(*v76 + 16))
        {
          unint64_t v40 = v37;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v41 = sub_100019BD4(v39, v29);
          if (v42)
          {
            LODWORD(v72) = *(unsigned __int8 *)(*(void *)(v38 + 56) + 32 * v41 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_100003C68(&qword_100076500);
            uint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = v73;
            *(void *)(inited + 32) = static ManagedSettingsStore.PropertyKeys.active.getter();
            *(void *)(inited + 40) = v44;
            *(inited + 48) = Bool.persistableValue()();
            *(void *)(inited + 56) = static ManagedSettingsStore.PropertyKeys.syncToWatch.getter();
            *(void *)(inited + 64) = v45;
            *(inited + 72) = Bool.persistableValue()();
            sub_100038370(inited);
            swift_bridgeObjectRelease();
            goto LABEL_32;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        unint64_t v40 = v37;
        if (qword_100076390 != -1) {
          swift_once();
        }
        swift_bridgeObjectRetain();
LABEL_32:
        uint64_t v46 = static Persistence.propertyData(from:)();
        unint64_t v48 = v47;
        swift_bridgeObjectRelease();
        uint64_t v94 = v88;
        unint64_t v95 = v29;
        swift_bridgeObjectRetain();
        v49._uint64_t countAndFlagsBits = 0x6465636E79532DLL;
        v49._object = (void *)0xE700000000000000;
        String.append(_:)(v49);
        swift_bridgeObjectRelease();
        uint64_t v88 = v94;
        unint64_t v72 = v95;
        sub_100003C68((uint64_t *)&unk_100077310);
        uint64_t v50 = swift_initStackObject();
        *(_OWORD *)(v50 + 16) = v73;
        *(void *)(v50 + 32) = 0x69747265706F7270;
        *(void *)(v50 + 40) = v68;
        *(void *)(v50 + 48) = v46;
        *(void *)(v50 + 56) = v48;
        *(void *)(v50 + 72) = &type metadata for Data;
        *(void *)(v50 + 80) = 0x73676E6974746573;
        *(void *)(v50 + 120) = &type metadata for Data;
        uint64_t v51 = v77;
        *(void *)(v50 + 88) = 0xE800000000000000;
        *(void *)(v50 + 96) = v51;
        *(void *)(v50 + 104) = v40;
        sub_100051330(v46, v48);
        sub_100051388(v51, v40);
        unint64_t v52 = sub_1000388FC(v50);
        uint64_t v53 = (uint64_t)v75;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v94 = v53;
        sub_10001E45C(v52, v88, v72, isUniquelyReferenced_nonNull_native);
        uint64_t v75 = (void *)v94;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10005131C(v51, v40);
        unint64_t result = sub_10004B824(v46, v48);
        uint64_t v14 = v87;
        unint64_t v12 = v78;
        uint64_t v15 = v79;
        unint64_t v21 = v93;
      }
    }
  }
  if (__OFADD__(v22++, 1))
  {
    __break(1u);
LABEL_41:
    __break(1u);
    return result;
  }
  if (v22 >= v90) {
    goto LABEL_33;
  }
  unint64_t v25 = *(void *)(v89 + 8 * v22);
  if (v25)
  {
LABEL_17:
    uint64_t v93 = (v25 - 1) & v25;
    unint64_t v23 = __clz(__rbit64(v25)) + (v22 << 6);
    goto LABEL_18;
  }
  int64_t v26 = v22 + 1;
  if (v22 + 1 >= v90) {
    goto LABEL_33;
  }
  unint64_t v25 = *(void *)(v89 + 8 * v26);
  if (v25) {
    goto LABEL_16;
  }
  int64_t v26 = v22 + 2;
  if (v22 + 2 >= v90) {
    goto LABEL_33;
  }
  unint64_t v25 = *(void *)(v89 + 8 * v26);
  if (v25)
  {
LABEL_16:
    int64_t v22 = v26;
    goto LABEL_17;
  }
  int64_t v26 = v22 + 3;
  if (v22 + 3 < v90)
  {
    unint64_t v25 = *(void *)(v89 + 8 * v26);
    if (!v25)
    {
      while (1)
      {
        int64_t v22 = v26 + 1;
        if (__OFADD__(v26, 1)) {
          goto LABEL_41;
        }
        if (v22 >= v90) {
          goto LABEL_33;
        }
        unint64_t v25 = *(void *)(v89 + 8 * v22);
        ++v26;
        if (v25) {
          goto LABEL_17;
        }
      }
    }
    goto LABEL_16;
  }
LABEL_33:
  unint64_t v56 = v74;
  id v55 = v75;
  swift_release();
  if (v55[2])
  {
    sub_100003C68((uint64_t *)&unk_100077310);
    uint64_t v57 = swift_initStackObject();
    *(_OWORD *)(v57 + 16) = xmmword_100065250;
    *(void *)(v57 + 32) = 0x656E6961746E6F63;
    *(void *)(v57 + 40) = 0xE900000000000072;
    uint64_t v58 = v14 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client;
    uint64_t v59 = *(void *)(v14 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 8);
    *(void *)(v57 + 48) = *(void *)(v14 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client);
    *(void *)(v57 + 56) = v59;
    *(void *)(v57 + 72) = &type metadata for String;
    strcpy((char *)(v57 + 80), "teamIdentifier");
    *(unsigned char *)(v57 + 95) = -18;
    uint64_t v60 = *(void *)(v58 + 24);
    *(void *)(v57 + 96) = *(void *)(v58 + 16);
    *(void *)(v57 + 104) = v60;
    *(void *)(v57 + 120) = &type metadata for String;
    *(void *)(v57 + 128) = 0x6E7265746E497369;
    *(void *)(v57 + 136) = 0xEA00000000006C61;
    *(unsigned char *)(v57 + 144) = *(unsigned char *)(v58 + 32);
    *(void *)(v57 + 168) = &type metadata for Bool;
    strcpy((char *)(v57 + 176), "storeDirectory");
    *(unsigned char *)(v57 + 191) = -18;
    *(void *)(v57 + 216) = sub_100003C68(&qword_1000778C8);
    *(void *)(v57 + 192) = v55;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000388FC(v57);
  }
  else
  {
    swift_bridgeObjectRelease();
    static Logger.persistenceRecordStore.getter();
    swift_retain_n();
    unint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc();
      uint64_t v64 = swift_slowAlloc();
      *(_DWORD *)uint64_t v63 = 136446210;
      uint64_t v94 = v64;
      uint64_t v93 = (uint64_t)(v63 + 4);
      type metadata accessor for UUID();
      sub_1000501A4(&qword_100076C78, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v65 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v96 = sub_1000036B0(v65, v66, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "No stores to sync in record %{public}s, skipping record", v63, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v69 + 8))(v74, v70);
    }
    else
    {

      swift_release_n();
      (*(void (**)(char *, uint64_t))(v69 + 8))(v56, v70);
    }
    unint64_t result = 0;
  }
  unint64_t *v71 = result;
  return result;
}

void *sub_100048BD4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100003C68(&qword_100077308);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_100049B78((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_100006F44();
  if (v6 != v1)
  {
    __break(1u);
    return &_swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_100048CBC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100003C68(&qword_100077888);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = (2 * (v5 >> 3)) | 1;
  uint64_t v6 = sub_100049F78((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_100006F44();
  if (v6 != v1)
  {
    __break(1u);
    return &_swiftEmptyArrayStorage;
  }
  return v3;
}

uint64_t sub_100048DA8(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v47 = type metadata accessor for UUID();
  uint64_t v42 = *(void *)(v47 - 8);
  uint64_t v8 = __chkstk_darwin(v47);
  uint64_t v46 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v41 = (char *)&v36 - v10;
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_100003C68(&qword_100076E20);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v12 = result;
  unint64_t v37 = a1;
  uint64_t v38 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *a1;
  }
  uint64_t v14 = 0;
  uint64_t v39 = a4;
  uint64_t v40 = v42 + 16;
  uint64_t v45 = v42 + 32;
  uint64_t v15 = result + 64;
  uint64_t v16 = v47;
  while (1)
  {
    if (v13)
    {
      uint64_t v43 = (v13 - 1) & v13;
      uint64_t v44 = v14;
      unint64_t v17 = __clz(__rbit64(v13)) | (v14 << 6);
    }
    else
    {
      uint64_t v18 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_40;
      }
      if (v18 >= v38) {
        return v12;
      }
      unint64_t v19 = v37[v18];
      uint64_t v20 = v14 + 1;
      if (!v19)
      {
        uint64_t v20 = v14 + 2;
        if (v14 + 2 >= v38) {
          return v12;
        }
        unint64_t v19 = v37[v20];
        if (!v19)
        {
          uint64_t v20 = v14 + 3;
          if (v14 + 3 >= v38) {
            return v12;
          }
          unint64_t v19 = v37[v20];
          if (!v19)
          {
            uint64_t v21 = v14 + 4;
            if (v14 + 4 >= v38) {
              return v12;
            }
            unint64_t v19 = v37[v21];
            if (!v19)
            {
              while (1)
              {
                uint64_t v20 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_41;
                }
                if (v20 >= v38) {
                  return v12;
                }
                unint64_t v19 = v37[v20];
                ++v21;
                if (v19) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v20 = v14 + 4;
          }
        }
      }
LABEL_24:
      uint64_t v43 = (v19 - 1) & v19;
      uint64_t v44 = v20;
      unint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
    }
    int64_t v22 = v41;
    uint64_t v23 = v42;
    uint64_t v24 = *(void *)(v42 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v42 + 16))(v41, a4[6] + v24 * v17, v16);
    uint64_t v25 = *(void *)(a4[7] + 8 * v17);
    int64_t v26 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v26(v46, v22, v16);
    sub_1000501A4(&qword_100076E10, (void (*)(uint64_t))&type metadata accessor for UUID);
    swift_retain();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v27 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v30 = __clz(__rbit64((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v33 = v29 == v32;
        if (v29 == v32) {
          unint64_t v29 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v15 + 8 * v29);
      }
      while (v34 == -1);
      unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
    }
    *(void *)(v15 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v12 + 48) + v30 * v24, v46, v47);
    *(void *)(*(void *)(v12 + 56) + 8 * v30) = v25;
    ++*(void *)(v12 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v39;
    unint64_t v13 = v43;
    uint64_t v14 = v44;
    if (!a3) {
      return v12;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100049180(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_100003C68(&qword_100076E80);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  BOOL v33 = a1;
  uint64_t v34 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v34) {
        return v9;
      }
      unint64_t v16 = v33[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v34) {
          return v9;
        }
        unint64_t v16 = v33[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= v34) {
            return v9;
          }
          unint64_t v16 = v33[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v34) {
              return v9;
            }
            unint64_t v16 = v33[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= v34) {
                  return v9;
                }
                unint64_t v16 = v33[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    uint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = *(void **)(*(void *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    id v22 = v21;
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v12 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v12 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    char v31 = (void *)(*(void *)(v9 + 48) + 16 * v26);
    *char v31 = v20;
    v31[1] = v19;
    *(void *)(*(void *)(v9 + 56) + 8 * v26) = v22;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v9;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10004941C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(int *)(sub_100003C68(&qword_100077868) + 48);
  uint64_t v5 = *(int *)(sub_100003C68(&qword_100077870) + 48);
  uint64_t v6 = *(void *)(a1 + v4);
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  *(void *)(a2 + v5) = v6;

  return swift_retain();
}

uint64_t sub_1000494C0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v42 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100003C68(&qword_100077898);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v17 = ~v16;
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v19 = -v16;
  uint64_t v44 = a1;
  uint64_t v45 = a1 + 64;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  else {
    uint64_t v20 = -1;
  }
  uint64_t v46 = v17;
  uint64_t v47 = 0;
  uint64_t v48 = v20 & v18;
  uint64_t v49 = a2;
  uint64_t v50 = a3;
  _OWORD v40[2] = a1;
  swift_bridgeObjectRetain();
  v40[1] = a3;
  swift_retain();
  sub_10004A174((uint64_t)v15);
  uint64_t v21 = sub_100003C68(&qword_100077870);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v15, 1, v21) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_100006F44();
    return swift_release();
  }
  uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
  uint64_t v51 = v42 + 32;
  unint64_t v41 = (void (**)(char *, uint64_t))(v42 + 8);
  while (1)
  {
    uint64_t v24 = *(int *)(v21 + 48);
    uint64_t v25 = v10;
    v43(v12, v15, v10);
    uint64_t v26 = *(void *)&v15[v24];
    uint64_t v27 = *a5;
    unint64_t v29 = sub_100019C4C((uint64_t)v12);
    uint64_t v30 = *(void *)(v27 + 16);
    BOOL v31 = (v28 & 1) == 0;
    uint64_t v32 = v30 + v31;
    if (__OFADD__(v30, v31)) {
      break;
    }
    char v33 = v28;
    if (*(void *)(v27 + 24) >= v32)
    {
      if (a4)
      {
        if (v28) {
          goto LABEL_7;
        }
      }
      else
      {
        sub_10001EA3C();
        if (v33) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      sub_10001AB28(v32, a4 & 1);
      unint64_t v34 = sub_100019C4C((uint64_t)v12);
      if ((v33 & 1) != (v35 & 1)) {
        goto LABEL_22;
      }
      unint64_t v29 = v34;
      if (v33)
      {
LABEL_7:
        uint64_t v10 = v25;
        (*v41)(v12, v25);
        uint64_t v23 = *(void *)(*a5 + 56);
        swift_release();
        *(void *)(v23 + 8 * v29) = v26;
        goto LABEL_8;
      }
    }
    uint64_t v36 = (void *)*a5;
    *(void *)(*a5 + 8 * (v29 >> 6) + 64) |= 1 << v29;
    uint64_t v10 = v25;
    v43((char *)(v36[6] + *(void *)(v42 + 72) * v29), v12, v25);
    *(void *)(v36[7] + 8 * v29) = v26;
    uint64_t v37 = v36[2];
    BOOL v38 = __OFADD__(v37, 1);
    uint64_t v39 = v37 + 1;
    if (v38) {
      goto LABEL_21;
    }
    _OWORD v36[2] = v39;
LABEL_8:
    sub_10004A174((uint64_t)v15);
    uint64_t v21 = sub_100003C68(&qword_100077870);
    a4 = 1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v15, 1, v21) == 1) {
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100049890(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10004A574();
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v10 = v7;
  uint64_t v11 = v8;
  uint64_t v12 = v9;
  uint64_t v13 = (void *)*a5;
  unint64_t v15 = sub_100019BD4(v7, v8);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char v19 = v14;
  if (v13[3] >= v18)
  {
    if (a4)
    {
      id v22 = (void *)*a5;
      if (v14) {
        goto LABEL_9;
      }
    }
    else
    {
      sub_10001F468();
      id v22 = (void *)*a5;
      if (v19) {
        goto LABEL_9;
      }
    }
LABEL_11:
    v22[(v15 >> 6) + 8] |= 1 << v15;
    uint64_t v25 = (uint64_t *)(v22[6] + 16 * v15);
    *uint64_t v25 = v10;
    v25[1] = v11;
    *(void *)(v22[7] + 8 * v15) = v12;
    uint64_t v26 = v22[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    void v22[2] = v28;
LABEL_13:
    sub_10004A574();
    if (v30)
    {
      uint64_t v32 = v29;
      uint64_t v33 = v30;
      uint64_t v34 = v31;
      do
      {
        uint64_t v40 = (void *)*a5;
        unint64_t v42 = sub_100019BD4(v32, v33);
        uint64_t v43 = v40[2];
        BOOL v44 = (v41 & 1) == 0;
        uint64_t v45 = v43 + v44;
        if (__OFADD__(v43, v44)) {
          goto LABEL_25;
        }
        char v46 = v41;
        if (v40[3] < v45)
        {
          sub_10001C448(v45, 1);
          unint64_t v47 = sub_100019BD4(v32, v33);
          if ((v46 & 1) != (v48 & 1)) {
            goto LABEL_27;
          }
          unint64_t v42 = v47;
        }
        uint64_t v49 = (void *)*a5;
        if (v46)
        {
          swift_bridgeObjectRelease();
          uint64_t v35 = v49[7];
          uint64_t v36 = 8 * v42;

          *(void *)(v35 + v36) = v34;
        }
        else
        {
          v49[(v42 >> 6) + 8] |= 1 << v42;
          uint64_t v50 = (uint64_t *)(v49[6] + 16 * v42);
          *uint64_t v50 = v32;
          v50[1] = v33;
          *(void *)(v49[7] + 8 * v42) = v34;
          uint64_t v51 = v49[2];
          BOOL v27 = __OFADD__(v51, 1);
          uint64_t v52 = v51 + 1;
          if (v27) {
            goto LABEL_26;
          }
          v49[2] = v52;
        }
        sub_10004A574();
        uint64_t v32 = v37;
        uint64_t v33 = v38;
        uint64_t v34 = v39;
      }
      while (v38);
    }
LABEL_24:
    swift_release();
    swift_bridgeObjectRelease();
    sub_100006F44();
    return swift_release();
  }
  sub_10001C448(v18, a4 & 1);
  unint64_t v20 = sub_100019BD4(v10, v11);
  if ((v19 & 1) == (v21 & 1))
  {
    unint64_t v15 = v20;
    id v22 = (void *)*a5;
    if ((v19 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t v23 = v22[7];
    uint64_t v24 = 8 * v15;

    *(void *)(v23 + v24) = v12;
    goto LABEL_13;
  }
LABEL_27:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100049B78(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    _OWORD v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    unint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100049D78(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    _OWORD v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    unint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100049F78(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    _OWORD v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    *uint64_t v11 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    if (v13 == v10)
    {
      swift_retain();
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = swift_retain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10004A174@<X0>(uint64_t a1@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v2 = sub_100003C68(&qword_100077868);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100003C68(&qword_1000778A0);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  unint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v36 - v10;
  uint64_t v12 = *v1;
  uint64_t v13 = v1[1];
  uint64_t v15 = v1[2];
  int64_t v14 = v1[3];
  int64_t v16 = v14;
  unint64_t v17 = v1[4];
  uint64_t v37 = v5;
  if (v17)
  {
    uint64_t v39 = v9;
    int64_t v40 = v14;
    uint64_t v38 = v15;
    uint64_t v18 = v13;
    uint64_t v19 = (v17 - 1) & v17;
    unint64_t v20 = __clz(__rbit64(v17)) | (v14 << 6);
LABEL_3:
    uint64_t v21 = *(void *)(v12 + 48);
    uint64_t v22 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v11, v21 + *(void *)(*(void *)(v22 - 8) + 72) * v20, v22);
    *(void *)&v11[*(int *)(v2 + 48)] = *(void *)(*(void *)(v12 + 56) + 8 * v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v11, 0, 1, v2);
    swift_retain();
    uint64_t v13 = v18;
    uint64_t v15 = v38;
    unint64_t v9 = v39;
    goto LABEL_25;
  }
  int64_t v23 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
LABEL_23:
    int64_t v16 = v10;
    goto LABEL_24;
  }
  int64_t v24 = (unint64_t)(v15 + 64) >> 6;
  if (v23 < v24)
  {
    unint64_t v25 = *(void *)(v13 + 8 * v23);
    if (v25)
    {
LABEL_7:
      uint64_t v38 = v15;
      uint64_t v39 = v9;
      uint64_t v18 = v13;
      uint64_t v19 = (v25 - 1) & v25;
      unint64_t v20 = __clz(__rbit64(v25)) + (v23 << 6);
      int64_t v40 = v23;
      goto LABEL_3;
    }
    int64_t v26 = v14 + 2;
    int64_t v16 = v14 + 1;
    if (v14 + 2 < v24)
    {
      unint64_t v25 = *(void *)(v13 + 8 * v26);
      if (v25)
      {
LABEL_10:
        int64_t v23 = v26;
        goto LABEL_7;
      }
      int64_t v16 = v14 + 2;
      if (v14 + 3 < v24)
      {
        unint64_t v25 = *(void *)(v13 + 8 * (v14 + 3));
        if (v25)
        {
          int64_t v23 = v14 + 3;
          goto LABEL_7;
        }
        int64_t v26 = v14 + 4;
        int64_t v16 = v14 + 3;
        if (v14 + 4 < v24)
        {
          unint64_t v25 = *(void *)(v13 + 8 * v26);
          if (v25) {
            goto LABEL_10;
          }
          int64_t v23 = v14 + 5;
          int64_t v16 = v14 + 4;
          if (v14 + 5 < v24)
          {
            unint64_t v25 = *(void *)(v13 + 8 * v23);
            if (v25) {
              goto LABEL_7;
            }
            int64_t v10 = v24 - 1;
            uint64_t v27 = v14 + 6;
            while (v24 != v27)
            {
              unint64_t v25 = *(void *)(v13 + 8 * v27++);
              if (v25)
              {
                int64_t v23 = v27 - 1;
                goto LABEL_7;
              }
            }
            goto LABEL_23;
          }
        }
      }
    }
  }
LABEL_24:
  int64_t v40 = v16;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v11, 1, 1, v2);
  uint64_t v19 = 0;
LABEL_25:
  *uint64_t v1 = v12;
  v1[1] = v13;
  int64_t v28 = v40;
  v1[2] = v15;
  v1[3] = v28;
  v1[4] = v19;
  uint64_t v29 = (void (*)(uint64_t))v1[5];
  sub_100006EE0((uint64_t)v11, (uint64_t)v9, &qword_1000778A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    uint64_t v30 = sub_100003C68(&qword_100077870);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v41, 1, 1, v30);
  }
  else
  {
    uint64_t v32 = (uint64_t)v9;
    uint64_t v33 = (uint64_t)v37;
    sub_100006EE0(v32, (uint64_t)v37, &qword_100077868);
    uint64_t v34 = v41;
    v29(v33);
    sub_100006E84(v33, &qword_100077868);
    uint64_t v35 = sub_100003C68(&qword_100077870);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v34, 0, 1, v35);
  }
}

void sub_10004A574()
{
  void (*v11)(uint64_t *__return_ptr, void *);
  id v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void v20[3];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    int64_t v10 = *(void **)(*(void *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v11 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    swift_bridgeObjectRetain();
    uint64_t v12 = v10;
    v11(&v19, v20);

    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    int64_t v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      uint64_t v15 = v0[1];
      int64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v5 = (v16 - 1) & v16;
        unint64_t v6 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v4 = v13;
        goto LABEL_3;
      }
      unint64_t v17 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        int64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          uint64_t v13 = v17;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          int64_t v16 = *(void *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            uint64_t v13 = v3 + 3;
            goto LABEL_7;
          }
          unint64_t v17 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            int64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            uint64_t v13 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              int64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v4 = v14 - 1;
              uint64_t v18 = v3 + 6;
              while (v14 != v18)
              {
                int64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  uint64_t v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v0[3] = v4;
    v0[4] = 0;
  }
}

id sub_10004A708@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  id v4 = (id)a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  swift_bridgeObjectRetain();

  return v4;
}

uint64_t sub_10004A754(uint64_t a1, uint64_t (*a2)(char *, uint64_t), uint64_t a3)
{
  uint64_t v26 = a3;
  uint64_t v5 = sub_100003C68(&qword_100077868);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v27 = (unint64_t)&_swiftEmptyArrayStorage;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v24 = a1 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v8;
  int64_t v25 = (unint64_t)(v9 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v13 = 0;
  while (v11)
  {
    unint64_t v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    unint64_t v15 = v14 | (v13 << 6);
LABEL_22:
    uint64_t v19 = *(void *)(a1 + 48);
    uint64_t v20 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v7, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v15, v20);
    uint64_t v21 = *(void *)(*(void *)(a1 + 56) + 8 * v15);
    *(void *)&v7[*(int *)(v5 + 48)] = v21;
    swift_retain();
    uint64_t v22 = a2(v7, v21);
    uint64_t result = sub_100006E84((uint64_t)v7, &qword_100077868);
    if (v22)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized Array._endMutation()();
    }
  }
  int64_t v16 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v16 >= v25) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v24 + 8 * v16);
  ++v13;
  if (v17) {
    goto LABEL_21;
  }
  int64_t v13 = v16 + 1;
  if (v16 + 1 >= v25) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v24 + 8 * v13);
  if (v17) {
    goto LABEL_21;
  }
  int64_t v13 = v16 + 2;
  if (v16 + 2 >= v25) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v24 + 8 * v13);
  if (v17) {
    goto LABEL_21;
  }
  int64_t v13 = v16 + 3;
  if (v16 + 3 >= v25) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v24 + 8 * v13);
  if (v17)
  {
LABEL_21:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v13 << 6);
    goto LABEL_22;
  }
  int64_t v18 = v16 + 4;
  if (v18 >= v25)
  {
LABEL_26:
    swift_release();
    return v27;
  }
  unint64_t v17 = *(void *)(v24 + 8 * v18);
  if (v17)
  {
    int64_t v13 = v18;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v13 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v13 >= v25) {
      goto LABEL_26;
    }
    unint64_t v17 = *(void *)(v24 + 8 * v13);
    ++v18;
    if (v17) {
      goto LABEL_21;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10004AA20(uint64_t a1)
{
  uint64_t v18 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v19 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  uint64_t v8 = (char *)&_swiftEmptyArrayStorage;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v7 << 6);
      goto LABEL_17;
    }
    if (__OFADD__(v7++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v7 >= v19) {
      goto LABEL_31;
    }
    unint64_t v12 = *(void *)(v18 + 8 * v7);
    if (!v12) {
      break;
    }
LABEL_16:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v7 << 6);
LABEL_17:
    uint64_t v21 = *(void *)(*(void *)(a1 + 56) + 8 * v10);
    swift_retain();
    sub_1000480E4(&v21, &v20);
    if (v1)
    {
      swift_bridgeObjectRelease();
      swift_release();
LABEL_31:
      swift_release();
      return (uint64_t)v8;
    }
    uint64_t result = swift_release();
    unint64_t v14 = v20;
    if (v20)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1000545E0(0, *((void *)v8 + 2) + 1, 1, v8);
        uint64_t v8 = (char *)result;
      }
      unint64_t v16 = *((void *)v8 + 2);
      unint64_t v15 = *((void *)v8 + 3);
      if (v16 >= v15 >> 1)
      {
        uint64_t result = (uint64_t)sub_1000545E0((char *)(v15 > 1), v16 + 1, 1, v8);
        uint64_t v8 = (char *)result;
      }
      *((void *)v8 + 2) = v16 + 1;
      *(void *)&v8[8 * v16 + 32] = v14;
    }
  }
  int64_t v13 = v7 + 1;
  if (v7 + 1 >= v19) {
    goto LABEL_31;
  }
  unint64_t v12 = *(void *)(v18 + 8 * v13);
  if (v12) {
    goto LABEL_15;
  }
  int64_t v13 = v7 + 2;
  if (v7 + 2 >= v19) {
    goto LABEL_31;
  }
  unint64_t v12 = *(void *)(v18 + 8 * v13);
  if (v12) {
    goto LABEL_15;
  }
  int64_t v13 = v7 + 3;
  if (v7 + 3 >= v19) {
    goto LABEL_31;
  }
  unint64_t v12 = *(void *)(v18 + 8 * v13);
  if (v12)
  {
LABEL_15:
    int64_t v7 = v13;
    goto LABEL_16;
  }
  int64_t v17 = v7 + 4;
  if (v7 + 4 >= v19) {
    goto LABEL_31;
  }
  unint64_t v12 = *(void *)(v18 + 8 * v17);
  v7 += 4;
  if (v12) {
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v7 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v7 >= v19) {
      goto LABEL_31;
    }
    unint64_t v12 = *(void *)(v18 + 8 * v7);
    ++v17;
    if (v12) {
      goto LABEL_16;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

unint64_t sub_10004AC84(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_100003C68(&qword_100076E78);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  int v4 = *(_DWORD *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t result = sub_1000029E8(v4);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  uint64_t v8 = (void *)(a1 + 56);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v4;
    *(void *)(v3[7] + 8 * result) = v5;
    uint64_t v9 = v3[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      break;
    }
    v3[2] = v11;
    if (!--v1) {
      goto LABEL_8;
    }
    unint64_t v12 = v8 + 2;
    int v4 = *((_DWORD *)v8 - 2);
    uint64_t v13 = *v8;
    swift_retain();
    unint64_t result = sub_1000029E8(v4);
    uint64_t v8 = v12;
    uint64_t v5 = v13;
    if (v14) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10004AD88(void *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = Data.init(contentsOf:options:)();
  uint64_t v9 = v1;
  if (v1) {
    return (uint64_t)a1;
  }
  BOOL v44 = v6;
  uint64_t v38 = v4;
  uint64_t v10 = v7;
  unint64_t v11 = v8;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_100003C68(&qword_100077850);
  sub_10004B87C(&qword_100077878, &qword_100077880);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t v35 = v10;
  unint64_t v36 = v11;
  swift_release();
  unint64_t v13 = (unint64_t)v45;
  a1 = (void *)sub_10003848C((uint64_t)&_swiftEmptyArrayStorage);
  if (v13 >> 62)
  {
LABEL_30:
    swift_bridgeObjectRetain_n();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v15 = (uint64_t)v44;
  uint64_t v37 = v9;
  if (!v14)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    sub_10004B824(v35, v36);
    swift_bridgeObjectRelease();
    return (uint64_t)a1;
  }
  unint64_t v41 = v13 & 0xC000000000000001;
  unint64_t v42 = (void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16);
  unint64_t v39 = v13;
  int64_t v40 = (void (**)(uint64_t, uint64_t))(v38 + 8);
  uint64_t v9 = 4;
  while (1)
  {
    uint64_t v17 = v9 - 4;
    if (v41)
    {
      uint64_t v18 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v19 = v9 - 3;
      if (__OFADD__(v17, 1)) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v18 = swift_retain();
      uint64_t v19 = v9 - 3;
      if (__OFADD__(v17, 1))
      {
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
    }
    uint64_t v43 = v19;
    uint64_t v20 = v14;
    uint64_t v21 = v18;
    uint64_t v22 = *v42;
    unint64_t v13 = v3;
    (*v42)(v15, v18 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_recordIdentifier, v3);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v45 = a1;
    unint64_t v25 = sub_100019C4C(v15);
    uint64_t v26 = a1[2];
    BOOL v27 = (v24 & 1) == 0;
    uint64_t v28 = v26 + v27;
    if (__OFADD__(v26, v27)) {
      goto LABEL_28;
    }
    char v29 = v24;
    if (a1[3] < v28) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      a1 = v45;
      if (v24) {
        goto LABEL_8;
      }
    }
    else
    {
      sub_10001EA3C();
      a1 = v45;
      if (v29)
      {
LABEL_8:
        uint64_t v16 = a1[7];
        swift_release();
        *(void *)(v16 + 8 * v25) = v21;
        uint64_t v3 = v13;
        goto LABEL_9;
      }
    }
LABEL_22:
    a1[(v25 >> 6) + 8] |= 1 << v25;
    uint64_t v3 = v13;
    v22(a1[6] + *(void *)(v38 + 72) * v25, (uint64_t)v44, v13);
    *(void *)(a1[7] + 8 * v25) = v21;
    uint64_t v32 = a1[2];
    BOOL v33 = __OFADD__(v32, 1);
    uint64_t v34 = v32 + 1;
    if (v33) {
      goto LABEL_29;
    }
    a1[2] = v34;
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t v15 = (uint64_t)v44;
    (*v40)((uint64_t)v44, v3);
    ++v9;
    uint64_t v14 = v20;
    unint64_t v13 = v39;
    if (v43 == v20) {
      goto LABEL_26;
    }
  }
  sub_10001AB28(v28, isUniquelyReferenced_nonNull_native);
  unint64_t v30 = sub_100019C4C((uint64_t)v44);
  if ((v29 & 1) == (v31 & 1))
  {
    unint64_t v25 = v30;
    a1 = v45;
    if (v29) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10004B1B4(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a2;
  uint64_t v4 = type metadata accessor for Logger();
  v17[2] = *(void *)(v4 - 8);
  v17[3] = v4;
  __chkstk_darwin(v4);
  v17[4] = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v20 = *(void *)(v18 - 8);
  uint64_t v6 = __chkstk_darwin(v18);
  unint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v17 - v9;
  uint64_t v11 = type metadata accessor for CocoaError.Code();
  uint64_t v19 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v12 = sub_100037B8C(a1);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  uint64_t v22 = v12;
  sub_100003C68(&qword_100077850);
  sub_10004B87C(&qword_100077858, &qword_100077860);
  uint64_t v13 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v15 = v14;
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if (!v2)
  {
    v17[0] = v8;
    v17[1] = v10;
    Data.write(to:options:)();
    type metadata accessor for Persistence();
    static Persistence.setFileAttributes(of:)();
    return sub_10004B824(v13, v15);
  }
  return result;
}

uint64_t sub_10004B824(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_10004B87C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100009774(&qword_100077850);
    sub_1000501A4(a2, (void (*)(uint64_t))type metadata accessor for PersistenceRecord);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_10004B910(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v32 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100003C68(&qword_100077608);
  uint64_t v33 = *(void *)(v5 - 8);
  uint64_t v34 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v31 = v2;
    if (qword_1000763B8 != -1) {
      swift_once();
    }
    uint64_t v13 = *(void *)(qword_100079598 + 40);
    v30[0] = *(void *)(qword_100079598 + 48);
    unint64_t v14 = sub_100006DCC((void *)(qword_100079598 + 16), v13);
    v30[1] = v30;
    uint64_t v15 = *(void *)(v13 - 8);
    __chkstk_darwin(v14);
    uint64_t v17 = (char *)v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v15 + 16))(v17);
    swift_retain();
    dispatch thunk of Locatable.effectiveSettingsPath.getter();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v13);
    uint64_t v12 = sub_100036CA4();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    swift_release();
    uint64_t v2 = v31;
  }
  swift_bridgeObjectRetain();
  static ManagedSettingsSettings.allowedClients.getter();
  uint64_t v18 = v34;
  uint64_t v19 = SettingMetadata.name.getter();
  if (*(void *)(v12 + 16) && (unint64_t v21 = sub_100019BD4(v19, v20), (v22 & 1) != 0))
  {
    id v23 = *(id *)(*(void *)(v12 + 56) + 8 * v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for Application();
    sub_1000501A4((unint64_t *)&unk_100077160, (void (*)(uint64_t))&type metadata accessor for Application);
    id v24 = v23;
    uint64_t v35 = static Set<>.value(from:)();
    sub_100003C68(&qword_1000778C0);
    sub_100003C68(&qword_100076D70);
    if (swift_dynamicCast())
    {
      unint64_t v25 = v36;

      if (v25) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v36 = 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  static Logger.persistenceRecordStore.getter();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "No allowed clients found", v28, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v32 + 8))(v4, v2);
  unint64_t v25 = &_swiftEmptySetSingleton;
LABEL_15:
  (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v18);
  return v25;
}

uint64_t sub_10004BE00(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v51 = a4;
  uint64_t v50 = a3;
  uint64_t v54 = a1;
  uint64_t v53 = type metadata accessor for URL.DirectoryHint();
  uint64_t v7 = *(void **)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v64 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for URL();
  unint64_t v9 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v63 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 >> 62)
  {
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    if (v11) {
      goto LABEL_3;
    }
LABEL_37:
    swift_bridgeObjectRelease();
    return (uint64_t)v54;
  }
  uint64_t v11 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v11) {
    goto LABEL_37;
  }
LABEL_3:
  unint64_t v62 = a2 & 0xC000000000000001;
  uint64_t v60 = type metadata accessor for Persistence();
  unsigned int v59 = enum case for URL.DirectoryHint.notDirectory(_:);
  uint64_t v57 = (void (**)(char *, unint64_t))(v7 + 1);
  uint64_t v58 = (void (**)(char *, void, unint64_t))(v7 + 13);
  unint64_t v61 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v52 = &v67;
  uint64_t v12 = 4;
  unint64_t v56 = 0x8000000100068040;
  unint64_t v9 = v53;
  unint64_t v49 = a2;
  uint64_t v55 = v11;
  while (1)
  {
    uint64_t v7 = (void *)(v12 - 4);
    if (v62)
    {
      uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v15 = v12 - 3;
      if (__OFADD__(v7, 1)) {
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v14 = *(void *)(a2 + 8 * v12);
      swift_retain();
      uint64_t v15 = v12 - 3;
      if (__OFADD__(v7, 1))
      {
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
    }
    v65[0] = 0xD00000000000001DLL;
    v65[1] = v56;
    uint64_t v16 = v64;
    (*v58)(v64, v59, v9);
    sub_100011120();
    uint64_t v17 = v63;
    URL.appending<A>(path:directoryHint:)();
    (*v57)(v16, v9);
    swift_bridgeObjectRelease();
    uint64_t v18 = static Persistence.read(from:)();
    if (v5)
    {
      swift_errorRelease();
      (*v61)(v17, v71);
      swift_release();
      uint64_t v5 = 0;
      goto LABEL_5;
    }
    uint64_t v19 = v18;
    (*v61)(v17, v71);
    char v68 = *(unsigned char *)(v14 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 32);
    long long v20 = *(_OWORD *)(v14 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 16);
    long long v66 = *(_OWORD *)(v14 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client);
    long long v67 = v20;
    long long v21 = *v52;
    long long v69 = v66;
    v70[0] = v21;
    uint64_t v22 = *(void *)(v19 + 16);
    sub_10001903C((uint64_t)&v69);
    sub_10001903C((uint64_t)v70);
    if (!v22) {
      goto LABEL_20;
    }
    uint64_t v23 = v51;
    swift_bridgeObjectRetain();
    unint64_t v24 = sub_100019BD4(v50, v23);
    if ((v25 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_20:
      swift_bridgeObjectRelease();
      uint64_t v34 = (uint64_t)v54;
      swift_bridgeObjectRetain();
      unint64_t v35 = sub_10001A068((uint64_t)&v66);
      char v37 = v36;
      swift_bridgeObjectRelease();
      if (v37)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v65[0] = v34;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10001FA9C();
          uint64_t v34 = v65[0];
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v39 = *(void **)(*(void *)(v34 + 56) + 8 * v35);
        uint64_t v54 = (void *)v34;
        sub_100017CE4(v35, v34);
        swift_bridgeObjectRelease();
        sub_100019068((uint64_t)&v69);
        sub_100019068((uint64_t)v70);
        swift_release();
      }
      else
      {
        sub_100019068((uint64_t)&v69);
        sub_100019068((uint64_t)v70);
        swift_release();
      }
      unint64_t v9 = v53;
LABEL_5:
      uint64_t v13 = v55;
      goto LABEL_6;
    }
    a2 = (unint64_t)*(id *)(*(void *)(v19 + 56) + 8 * v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = v54;
    char v26 = swift_isUniquelyReferenced_nonNull_native();
    v65[0] = v7;
    unint64_t v9 = sub_10001A068((uint64_t)&v66);
    uint64_t v28 = v7[2];
    BOOL v29 = (v27 & 1) == 0;
    uint64_t v30 = v28 + v29;
    if (__OFADD__(v28, v29)) {
      goto LABEL_34;
    }
    char v31 = v27;
    if (v7[3] >= v30)
    {
      if ((v26 & 1) == 0)
      {
        uint64_t v7 = v65;
        sub_10001FA9C();
      }
      goto LABEL_28;
    }
    sub_10001CE50(v30, v26);
    uint64_t v7 = (void *)v65[0];
    unint64_t v32 = sub_10001A068((uint64_t)&v66);
    if ((v31 & 1) != (v33 & 1)) {
      break;
    }
    unint64_t v9 = v32;
LABEL_28:
    uint64_t v13 = v55;
    int64_t v40 = (void *)v65[0];
    uint64_t v54 = (void *)v65[0];
    if (v31)
    {
      uint64_t v41 = *(void *)(v65[0] + 56);
      uint64_t v42 = 8 * v9;

      *(void *)(v41 + v42) = a2;
    }
    else
    {
      *(void *)(v65[0] + 8 * (v9 >> 6) + 64) |= 1 << v9;
      uint64_t v43 = v40[6] + 40 * v9;
      long long v44 = v67;
      *(_OWORD *)uint64_t v43 = v66;
      *(_OWORD *)(v43 + 16) = v44;
      *(unsigned char *)(v43 + 32) = v68;
      *(void *)(v40[7] + 8 * v9) = a2;
      uint64_t v45 = v40[2];
      BOOL v46 = __OFADD__(v45, 1);
      uint64_t v47 = v45 + 1;
      if (v46) {
        goto LABEL_35;
      }
      _OWORD v40[2] = v47;
      sub_10001903C((uint64_t)&v69);
      sub_10001903C((uint64_t)v70);
    }
    swift_bridgeObjectRelease();
    sub_100019068((uint64_t)&v69);
    sub_100019068((uint64_t)v70);
    swift_release();
    a2 = v49;
    unint64_t v9 = v53;
LABEL_6:
    ++v12;
    if (v15 == v13) {
      goto LABEL_37;
    }
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10004C45C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v28 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  char v27 = (char *)&v21 - v6;
  uint64_t v7 = sub_100003C68(&qword_1000764C0);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v14 = *(void *)(v11 + 56);
    unint64_t v15 = v11 + 40;
    unint64_t v24 = (uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 32);
    char v25 = v12;
    uint64_t v22 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    uint64_t v23 = v14;
    uint64_t v26 = v11;
    uint64_t v16 = (void (**)(uint64_t, uint64_t))(v11 - 8);
    unint64_t v21 = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v18 = (uint64_t)v27;
    uint64_t v17 = v28;
    while (1)
    {
      v25(v9, v13, v2);
      uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v9, 0, 1, v2);
      uint64_t result = (*v24)(v9, 1, v2);
      if (result == 1) {
        break;
      }
      (*v22)(v17, v9, v2);
      sub_10002844C(v18, v17);
      (*v16)(v18, v2);
      v13 += v23;
      if (!--v10) {
        return v19(v9, 1, 1, v2);
      }
    }
  }
  else
  {
    uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    return v19(v9, 1, 1, v2);
  }
  return result;
}

uint64_t sub_10004C6B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v51 = type metadata accessor for URL.DirectoryHint();
  uint64_t v6 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  unint64_t v49 = &v37[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v48 = type metadata accessor for URL();
  uint64_t v8 = __chkstk_darwin(v48);
  uint64_t v47 = &v37[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = __chkstk_darwin(v8);
  BOOL v46 = &v37[-v11];
  __chkstk_darwin(v10);
  uint64_t v45 = &v37[-v13];
  uint64_t v14 = *(void *)(a2 + 64);
  uint64_t v52 = a2 + 64;
  uint64_t v59 = a1;
  uint64_t v15 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  uint64_t v44 = a3 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_containerPath;
  int64_t v53 = (unint64_t)(v15 + 63) >> 6;
  unsigned int v43 = enum case for URL.DirectoryHint.isDirectory(_:);
  uint64_t v41 = (void (**)(unsigned char *, uint64_t))(v6 + 8);
  uint64_t v42 = (void (**)(unsigned char *, void, uint64_t))(v6 + 104);
  unsigned int v40 = enum case for URL.DirectoryHint.notDirectory(_:);
  unint64_t v39 = (void (**)(unsigned char *, uint64_t))(v12 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v19 = 0;
  unint64_t v38 = 0x8000000100067030;
  uint64_t v50 = a2;
  long long v20 = v47;
  unint64_t v21 = v41;
  while (v17)
  {
    unint64_t v22 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    unint64_t v23 = v22 | (v19 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(a2 + 56) + 32 * v23;
    if (*(unsigned char *)(v27 + 24) == 1)
    {
      unint64_t v28 = *(void *)(v27 + 8);
      unint64_t v57 = *(void *)v27;
      unint64_t v58 = v28;
      unint64_t v54 = v28;
      unint64_t v55 = v17;
      BOOL v29 = *v42;
      uint64_t v30 = v49;
      uint64_t v31 = v51;
      int64_t v56 = v19;
      v29(v49, v43, v51);
      sub_100011120();
      swift_bridgeObjectRetain_n();
      URL.appending<A>(path:directoryHint:)();
      unint64_t v32 = *v21;
      (*v21)(v30, v31);
      swift_bridgeObjectRelease();
      unint64_t v57 = 0xD000000000000011;
      unint64_t v58 = v38;
      v29(v30, v40, v31);
      char v33 = v46;
      URL.appending<A>(path:directoryHint:)();
      v32(v30, v31);
      swift_bridgeObjectRelease();
      uint64_t v34 = *v39;
      uint64_t v35 = v48;
      (*v39)(v20, v48);
      char v36 = v45;
      sub_10002844C((uint64_t)v45, v33);
      v34(v36, v35);
      a2 = v50;
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v17 = v55;
      int64_t v19 = v56;
    }
  }
  int64_t v24 = v19 + 1;
  if (__OFADD__(v19, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v24 >= v53) {
    goto LABEL_24;
  }
  unint64_t v25 = *(void *)(v52 + 8 * v24);
  ++v19;
  if (v25) {
    goto LABEL_21;
  }
  int64_t v19 = v24 + 1;
  if (v24 + 1 >= v53) {
    goto LABEL_24;
  }
  unint64_t v25 = *(void *)(v52 + 8 * v19);
  if (v25) {
    goto LABEL_21;
  }
  int64_t v19 = v24 + 2;
  if (v24 + 2 >= v53) {
    goto LABEL_24;
  }
  unint64_t v25 = *(void *)(v52 + 8 * v19);
  if (v25) {
    goto LABEL_21;
  }
  int64_t v19 = v24 + 3;
  if (v24 + 3 >= v53) {
    goto LABEL_24;
  }
  unint64_t v25 = *(void *)(v52 + 8 * v19);
  if (v25)
  {
LABEL_21:
    unint64_t v17 = (v25 - 1) & v25;
    unint64_t v23 = __clz(__rbit64(v25)) + (v19 << 6);
    goto LABEL_22;
  }
  int64_t v26 = v24 + 4;
  if (v26 >= v53)
  {
LABEL_24:
    swift_release();
    return v59;
  }
  unint64_t v25 = *(void *)(v52 + 8 * v26);
  if (v25)
  {
    int64_t v19 = v26;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v19 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v19 >= v53) {
      goto LABEL_24;
    }
    unint64_t v25 = *(void *)(v52 + 8 * v19);
    ++v26;
    if (v25) {
      goto LABEL_21;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10004CB70(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v20 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v10 = v9 | (v4 << 6);
LABEL_23:
    uint64_t v14 = *(void *)(*(void *)(v3 + 56) + 8 * v10);
    uint64_t result = *(void *)(v14 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client);
    uint64_t v15 = *(void *)(v14 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 16);
    uint64_t v16 = *(void *)(v14 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 24);
    int v17 = *(unsigned __int8 *)(v14 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 32);
    if (result != *(void *)a2
      || *(void *)(v14 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 8) != *(void *)(a2 + 8))
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        continue;
      }
    }
    if (v15 != *(void *)(a2 + 16) || v16 != *(void *)(a2 + 24))
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        continue;
      }
    }
    if (((v17 ^ *(unsigned __int8 *)(a2 + 32)) & 1) == 0)
    {
      swift_retain();
      return v14;
    }
  }
  int64_t v11 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v11 >= v20) {
    return 0;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v11);
  ++v4;
  if (v12) {
    goto LABEL_22;
  }
  int64_t v4 = v11 + 1;
  if (v11 + 1 >= v20) {
    return 0;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v4);
  if (v12) {
    goto LABEL_22;
  }
  int64_t v4 = v11 + 2;
  if (v11 + 2 >= v20) {
    return 0;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v4);
  if (v12) {
    goto LABEL_22;
  }
  int64_t v4 = v11 + 3;
  if (v11 + 3 >= v20) {
    return 0;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v4);
  if (v12)
  {
LABEL_22:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
    goto LABEL_23;
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v20) {
    return 0;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
    int64_t v4 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v20) {
      return 0;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

id sub_10004CD60(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v28 = *(void *)(v2 - 8);
  uint64_t v29 = v2;
  __chkstk_darwin(v2);
  int64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v31 = *(void *)(v5 - 8);
  uint64_t v32 = v5;
  __chkstk_darwin(v5);
  uint64_t v30 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CocoaError.Code();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [self defaultManager];
  URL._bridgeToObjectiveC()(v12);
  uint64_t v14 = v13;
  id v34 = 0;
  unsigned int v15 = [v11 removeItemAtURL:v13 error:&v34];

  if (v15) {
    return v34;
  }
  id v17 = v34;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  swift_errorRetain();
  static CocoaError.fileNoSuchFile.getter();
  sub_1000501A4((unint64_t *)&qword_1000764D0, (void (*)(uint64_t))&type metadata accessor for CocoaError.Code);
  LOBYTE(v17) = static _ErrorCodeProtocol.~= infix(_:_:)();
  swift_errorRelease();
  id result = (id)(*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v17)
  {
    swift_errorRelease();
    uint64_t v18 = v30;
    static Logger.persistenceRecordStore.getter();
    uint64_t v19 = v28;
    uint64_t v20 = v29;
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v4, a1, v29);
    unint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      unint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = (void *)swift_slowAlloc();
      id v34 = v27;
      *(_DWORD *)unint64_t v23 = 136446210;
      int64_t v26 = v23 + 4;
      sub_1000501A4(&qword_100077890, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v33 = sub_1000036B0(v24, v25, (uint64_t *)&v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v4, v20);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Unable to delete %{public}s: Path doesn't exist!", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v4, v20);
    }

    return (id)(*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v18, v32);
  }
  return result;
}

uint64_t sub_10004D210(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v11 = v10 | (v4 << 6);
LABEL_23:
    uint64_t v15 = *(void *)(*(void *)(v3 + 56) + 8 * v11) + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client;
    id result = *(void *)v15;
    uint64_t v16 = *(void *)(v15 + 16);
    uint64_t v17 = *(void *)(v15 + 24);
    int v18 = *(unsigned __int8 *)(v15 + 32);
    if (*(void *)v15 != *(void *)a2 || *(void *)(v15 + 8) != *(void *)(a2 + 8))
    {
      id result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        continue;
      }
    }
    if (v16 != *(void *)(a2 + 16) || v17 != *(void *)(a2 + 24))
    {
      id result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        continue;
      }
    }
    if (((v18 ^ *(unsigned __int8 *)(a2 + 32)) & 1) == 0) {
      return 1;
    }
  }
  int64_t v12 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v12 >= v9) {
    return 0;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v12);
  ++v4;
  if (v13) {
    goto LABEL_22;
  }
  int64_t v4 = v12 + 1;
  if (v12 + 1 >= v9) {
    return 0;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v4);
  if (v13) {
    goto LABEL_22;
  }
  int64_t v4 = v12 + 2;
  if (v12 + 2 >= v9) {
    return 0;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v4);
  if (v13) {
    goto LABEL_22;
  }
  int64_t v4 = v12 + 3;
  if (v12 + 3 >= v9) {
    return 0;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v4);
  if (v13)
  {
LABEL_22:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
    goto LABEL_23;
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v9) {
    return 0;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 0;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_22;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10004D3DC()
{
  uint64_t v1 = type metadata accessor for Logger();
  v14[1] = *(void *)(v1 - 8);
  void v14[2] = v1;
  __chkstk_darwin(v1);
  _DWORD v14[4] = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v3 - 8);
  uint64_t v16 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  void v14[3] = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v14 - v6;
  uint64_t v8 = type metadata accessor for CocoaError.Code();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Persistence();
  static Persistence.write(_:to:)();
  if (v0)
  {
    swift_errorRetain();
    static CocoaError.fileNoSuchFile.getter();
    sub_1000501A4((unint64_t *)&qword_1000764D0, (void (*)(uint64_t))&type metadata accessor for CocoaError.Code);
    char v12 = static _ErrorCodeProtocol.~= infix(_:_:)();
    swift_errorRelease();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if ((v12 & 1) == 0) {
      return result;
    }
    swift_errorRelease();
    URL.deletingLastPathComponent()();
    static Persistence.createDirectory(at:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v7, v16);
    static Persistence.write(_:to:)();
  }
  return static Persistence.setFileAttributes(of:)();
}

uint64_t sub_10004D92C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  uint64_t v68 = a2;
  uint64_t v64 = type metadata accessor for URL.DirectoryHint();
  uint64_t v62 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  unint64_t v13 = (char *)v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for URL();
  uint64_t v63 = *(void (**)(char *, uint64_t))(v65 - 8);
  uint64_t v14 = __chkstk_darwin(v65);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v16 = __chkstk_darwin(v15);
  int v18 = (char *)v52 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  __chkstk_darwin(v19);
  uint64_t v24 = (char *)v52 - v23;
  *a6 = 0;
  uint64_t v61 = a4;
  if (*(void *)(a4 + 16) || *(void *)(a5 + 16))
  {
    uint64_t v58 = v21;
    uint64_t v59 = v22;
    uint64_t v56 = v20;
    uint64_t v57 = a5;
    uint64_t v25 = a1 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_storeDirectory;
    swift_beginAccess();
    uint64_t v26 = *(void *)(*(void *)v25 + 16);
    uint64_t v60 = v13;
    if (v26)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100019BD4(v68, a3);
      char v28 = v27;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v28)
      {
        uint64_t v29 = v68;
        goto LABEL_10;
      }
    }
    if (qword_100076390 != -1) {
      swift_once();
    }
    uint64_t v29 = v68;
    uint64_t result = sub_10000F08C(v68, a3);
    if (!v6)
    {
      *a6 = 1;
LABEL_10:
      uint64_t result = sub_10000ECA4(v29, a3, (uint64_t)v18);
      if (!v6)
      {
        unint64_t v66 = 0x657A696E656B6F74;
        unint64_t v67 = 0xEF7473696C702E64;
        uint64_t v31 = v62;
        uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 104);
        uint64_t v33 = v60;
        unsigned int v55 = enum case for URL.DirectoryHint.notDirectory(_:);
        uint64_t v34 = v64;
        int64_t v53 = v32;
        uint64_t v54 = v62 + 104;
        ((void (*)(char *))v32)(v60);
        unint64_t v35 = sub_100011120();
        char v36 = v59;
        v52[1] = v35;
        URL.appending<A>(path:directoryHint:)();
        char v37 = v33;
        unint64_t v38 = *(void (**)(char *, uint64_t))(v31 + 8);
        v38(v37, v34);
        swift_bridgeObjectRelease();
        unint64_t v39 = (void (*)(char *, uint64_t))*((void *)v63 + 1);
        uint64_t v40 = v65;
        v39(v18, v65);
        sub_10004D3DC();
        uint64_t v63 = v38;
        uint64_t v45 = v55;
        v39(v36, v40);
        sub_10000ECA4(v68, a3, v58);
        unint64_t v66 = 0xD000000000000011;
        unint64_t v67 = 0x8000000100067030;
        BOOL v46 = v60;
        uint64_t v47 = v64;
        v53(v60, v45, v64);
        uint64_t v48 = v56;
        uint64_t v49 = v58;
        URL.appending<A>(path:directoryHint:)();
        v63(v46, v47);
        swift_bridgeObjectRelease();
        uint64_t v50 = v49;
        uint64_t v51 = v65;
        v39((char *)v50, v65);
        sub_10004D3DC();
        return ((uint64_t (*)(uint64_t, uint64_t))v39)(v48, v51);
      }
    }
  }
  else
  {
    uint64_t v41 = a1 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_storeDirectory;
    uint64_t result = swift_beginAccess();
    if (*(void *)(*(void *)v41 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v42 = v68;
      sub_100019BD4(v68, a3);
      char v44 = v43;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v44)
      {
        uint64_t result = sub_10000ECA4(v42, a3, (uint64_t)v24);
        if (!v6)
        {
          sub_10004CD60((uint64_t)v24);
          return (*((uint64_t (**)(char *, uint64_t))v63 + 1))(v24, v65);
        }
      }
    }
  }
  return result;
}

uint64_t sub_10004DED8(uint64_t a1)
{
  uint64_t v38 = type metadata accessor for SettingScope();
  uint64_t v2 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  char v37 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100003C68(&qword_1000764C0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = (uint64_t *)(a1 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_storeDirectory);
  swift_beginAccess();
  uint64_t v12 = *v11;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_10004C6B4((uint64_t)&_swiftEmptySetSingleton, v12, a1);
  swift_bridgeObjectRelease();
  uint64_t v14 = a1;
  uint64_t result = swift_release();
  int64_t v16 = 0;
  uint64_t v17 = *(void *)(v13 + 56);
  uint64_t v29 = v13 + 56;
  uint64_t v42 = v13;
  uint64_t v18 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  uint64_t v36 = v14 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client;
  int64_t v30 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v40 = v5 + 16;
  uint64_t v41 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v39 = v5 + 48;
  unint64_t v35 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  unsigned int v34 = enum case for SettingScope.localContainer(_:);
  uint64_t v32 = (void (**)(uint64_t, uint64_t))(v2 + 8);
  uint64_t v33 = (void (**)(uint64_t, void, uint64_t))(v2 + 104);
  uint64_t v31 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
  uint64_t v22 = (uint64_t)v37;
  uint64_t v21 = v38;
  if ((v19 & v17) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v23 = __clz(__rbit64(v20));
  v20 &= v20 - 1;
  for (unint64_t i = v23 | (v16 << 6); ; unint64_t i = __clz(__rbit64(v26)) + (v16 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v10, *(void *)(v42 + 48) + *(void *)(v5 + 72) * i, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1) {
      return swift_release();
    }
    (*v35)(v7, v10, v4);
    char v28 = *(unsigned char *)(v36 + 32);
    (*v33)(v22, v34, v21);
    sub_100037198((uint64_t)v7, v28, v22);
    (*v32)(v22, v21);
    uint64_t result = (*v31)(v7, v4);
    if (v20) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v25 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v25 >= v30) {
      goto LABEL_22;
    }
    unint64_t v26 = *(void *)(v29 + 8 * v25);
    ++v16;
    if (!v26)
    {
      int64_t v16 = v25 + 1;
      if (v25 + 1 >= v30) {
        goto LABEL_22;
      }
      unint64_t v26 = *(void *)(v29 + 8 * v16);
      if (!v26)
      {
        int64_t v16 = v25 + 2;
        if (v25 + 2 >= v30) {
          goto LABEL_22;
        }
        unint64_t v26 = *(void *)(v29 + 8 * v16);
        if (!v26) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v20 = (v26 - 1) & v26;
  }
  int64_t v27 = v25 + 3;
  if (v27 >= v30)
  {
LABEL_22:
    (*v41)(v10, 1, 1, v4);
    return swift_release();
  }
  unint64_t v26 = *(void *)(v29 + 8 * v27);
  if (v26)
  {
    int64_t v16 = v27;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v16 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v16 >= v30) {
      goto LABEL_22;
    }
    unint64_t v26 = *(void *)(v29 + 8 * v16);
    ++v27;
    if (v26) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10004E374(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL.DirectoryHint();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  int64_t v30 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v23 - v10;
  type metadata accessor for Persistence();
  uint64_t v33 = a1;
  uint64_t v12 = a1 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_containerPath;
  unint64_t v24 = (unint64_t)"DataVersion.plist";
  unint64_t v35 = 0xD00000000000001DLL;
  unint64_t v36 = 0x8000000100068040;
  uint64_t v13 = *(void (**)(void))(v3 + 104);
  unsigned int v28 = enum case for URL.DirectoryHint.notDirectory(_:);
  int64_t v27 = (void (*)(char *, void, uint64_t))v13;
  v13(v5);
  unint64_t v26 = sub_100011120();
  uint64_t v29 = v12;
  URL.appending<A>(path:directoryHint:)();
  int64_t v25 = *(void (**)(char *, uint64_t))(v3 + 8);
  v25(v5, v2);
  swift_bridgeObjectRelease();
  uint64_t v14 = v34;
  uint64_t v15 = static Persistence.read(from:)();
  uint64_t v31 = v7;
  uint64_t v32 = v6;
  if (v14)
  {
    swift_errorRelease();
    int64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
    v16(v11, v6);
    unint64_t v17 = sub_100038370((uint64_t)&_swiftEmptyArrayStorage);
  }
  else
  {
    unint64_t v17 = v15;
    int64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
    v16(v11, v6);
  }
  char v37 = &_swiftEmptyDictionarySingleton;
  sub_10004DED8(v33);
  sub_10005FC74((uint64_t)&v37);
  uint64_t v18 = (uint64_t)v37;
  swift_bridgeObjectRetain();
  sub_10000FBB0(v17, v18);
  char v20 = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v20 & 1) == 0)
  {
    unint64_t v35 = 0xD00000000000001DLL;
    unint64_t v36 = v24 | 0x8000000000000000;
    v27(v5, v28, v2);
    uint64_t v21 = v30;
    URL.appending<A>(path:directoryHint:)();
    v25(v5, v2);
    swift_bridgeObjectRelease();
    sub_10004D3DC();
    v16(v21, v32);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_10004E700(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v46 = a2;
  uint64_t v47 = a1;
  uint64_t v57 = sub_100003C68(&qword_100077868);
  uint64_t v6 = __chkstk_darwin(v57);
  uint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v46 - v9;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t result = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v16 = 0;
  uint64_t v58 = (void *)a3;
  uint64_t v17 = *(void *)(a3 + 64);
  uint64_t v48 = 0;
  uint64_t v49 = a3 + 64;
  uint64_t v18 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  uint64_t v53 = a4 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client;
  uint64_t v54 = v15;
  uint64_t v52 = v13 + 16;
  uint64_t v55 = v13;
  uint64_t v56 = result;
  int64_t v50 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v51 = (void (**)(char *, uint64_t))(v13 + 8);
  while (1)
  {
    if (v20)
    {
      uint64_t v60 = (v20 - 1) & v20;
      int64_t v61 = v16;
      unint64_t v23 = __clz(__rbit64(v20)) | (v16 << 6);
      goto LABEL_21;
    }
    int64_t v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v24 >= v50) {
      return sub_100048DA8(v47, v46, v48, v58);
    }
    unint64_t v25 = *(void *)(v49 + 8 * v24);
    int64_t v26 = v16 + 1;
    if (!v25)
    {
      int64_t v26 = v16 + 2;
      if (v16 + 2 >= v50) {
        return sub_100048DA8(v47, v46, v48, v58);
      }
      unint64_t v25 = *(void *)(v49 + 8 * v26);
      if (!v25)
      {
        int64_t v26 = v16 + 3;
        if (v16 + 3 >= v50) {
          return sub_100048DA8(v47, v46, v48, v58);
        }
        unint64_t v25 = *(void *)(v49 + 8 * v26);
        if (!v25) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v60 = (v25 - 1) & v25;
    int64_t v61 = v26;
    unint64_t v23 = __clz(__rbit64(v25)) + (v26 << 6);
LABEL_21:
    unsigned int v28 = v58;
    uint64_t v29 = *(void (**)(char *, unint64_t, uint64_t))(v55 + 16);
    v29(v15, v58[6] + *(void *)(v55 + 72) * v23, v11);
    uint64_t v30 = v28[7];
    unint64_t v59 = v23;
    uint64_t v31 = *(void *)(v30 + 8 * v23);
    v29(v10, (unint64_t)v15, v11);
    uint64_t v32 = *(int *)(v57 + 48);
    *(void *)&v10[v32] = v31;
    uint64_t v33 = (uint64_t)v10;
    v29(v8, (unint64_t)v10, v11);
    uint64_t v34 = v8;
    *(void *)&v8[v32] = v31;
    uint64_t v35 = *(void *)(v31 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 16);
    uint64_t v36 = *(void *)(v31 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 24);
    int v37 = *(unsigned __int8 *)(v31 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 32);
    uint64_t v39 = *(void *)(v53 + 16);
    uint64_t v38 = *(void *)(v53 + 24);
    int v40 = *(unsigned __int8 *)(v53 + 32);
    BOOL v41 = *(void *)(v31 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client) == *(void *)v53
       && *(void *)(v31 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 8) == *(void *)(v53 + 8);
    if (!v41 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      || (v35 == v39 ? (BOOL v42 = v36 == v38) : (BOOL v42 = 0), !v42 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
    {
      swift_retain_n();
      uint64_t v10 = (char *)v33;
      sub_100006E84(v33, &qword_100077868);
      char v43 = *v51;
      uint64_t v8 = v34;
      char v44 = v34;
      uint64_t v11 = v56;
      (*v51)(v44, v56);
      swift_release();
      uint64_t v15 = v54;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v43)(v54, v11);
      int64_t v16 = v61;
      unint64_t v20 = v60;
      goto LABEL_32;
    }
    swift_retain_n();
    uint64_t v10 = (char *)v33;
    sub_100006E84(v33, &qword_100077868);
    uint64_t v21 = *v51;
    uint64_t v8 = v34;
    uint64_t v22 = v34;
    uint64_t v11 = v56;
    (*v51)(v22, v56);
    swift_release();
    uint64_t v15 = v54;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v21)(v54, v11);
    int64_t v16 = v61;
    unint64_t v20 = v60;
    if (v37 != v40)
    {
LABEL_32:
      *(unint64_t *)((char *)v47 + ((v59 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v59;
      if (__OFADD__(v48++, 1))
      {
        __break(1u);
        return sub_100048DA8(v47, v46, v48, v58);
      }
    }
  }
  uint64_t v27 = v16 + 4;
  if (v16 + 4 >= v50) {
    return sub_100048DA8(v47, v46, v48, v58);
  }
  unint64_t v25 = *(void *)(v49 + 8 * v27);
  if (v25)
  {
    int64_t v26 = v16 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v26 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v26 >= v50) {
      return sub_100048DA8(v47, v46, v48, v58);
    }
    unint64_t v25 = *(void *)(v49 + 8 * v26);
    ++v27;
    if (v25) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10004EBA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  char v6 = *(unsigned char *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v9 = 8 * v8;
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (v7 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain();
    uint64_t v11 = sub_10004E700((unint64_t *)((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, a1, a2);
    swift_release();
    if (v3) {
      swift_willThrow();
    }
    swift_release_n();
  }
  else
  {
    uint64_t v12 = (void *)swift_slowAlloc();
    bzero(v12, v9);
    swift_retain();
    uint64_t v11 = sub_10004E700((unint64_t *)v12, v8, a1, a2);
    swift_release();
    swift_slowDealloc();
    swift_release_n();
  }
  return v11;
}

id sub_10004ED64(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v46 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v46 - 8);
  uint64_t v7 = __chkstk_darwin(v46);
  int v40 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v40 - v9;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  __chkstk_darwin(v13);
  uint64_t v57 = (char *)&v40 - v14;
  uint64_t v15 = sub_100003C68(&qword_1000764C0);
  __chkstk_darwin(v15 - 8);
  uint64_t v54 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *a2;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v58 = *(void *)(a1 + 232);
  *(void *)(a1 + 232) = 0x8000000000000000;
  sub_1000494C0(v17, (uint64_t)sub_10004941C, 0, isUniquelyReferenced_nonNull_native, &v58);
  *(void *)(a1 + 232) = v58;
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v41 = a1;
  sub_100038FEC();
  uint64_t v19 = *a3;
  uint64_t v20 = *(void *)(*a3 + 56);
  uint64_t v47 = *a3 + 56;
  uint64_t v21 = 1 << *(unsigned char *)(v19 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v20;
  uint64_t v55 = v19;
  uint64_t v56 = v12 + 16;
  uint64_t v52 = v12;
  uint64_t v53 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  int64_t v50 = (void (**)(uint64_t, char *, uint64_t))(v12 + 32);
  uint64_t v51 = v12 + 48;
  int64_t v48 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v49 = (uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
  uint64_t v45 = (void (**)(char *, uint64_t))(v6 + 8);
  id result = (id)swift_bridgeObjectRetain();
  int64_t v25 = 0;
  *(void *)&long long v26 = 136446210;
  long long v44 = v26;
  char v43 = (char *)&type metadata for Any + 8;
  BOOL v42 = v10;
  while (1)
  {
    if (v23)
    {
      unint64_t v27 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      unint64_t v28 = v27 | (v25 << 6);
      uint64_t v29 = (uint64_t)v57;
      uint64_t v30 = v54;
      goto LABEL_17;
    }
    BOOL v31 = __OFADD__(v25++, 1);
    uint64_t v29 = (uint64_t)v57;
    uint64_t v30 = v54;
    if (v31)
    {
      __break(1u);
LABEL_28:
      __break(1u);
      return result;
    }
    if (v25 >= v48) {
      goto LABEL_23;
    }
    unint64_t v32 = *(void *)(v47 + 8 * v25);
    if (!v32) {
      break;
    }
LABEL_16:
    unint64_t v23 = (v32 - 1) & v32;
    unint64_t v28 = __clz(__rbit64(v32)) + (v25 << 6);
LABEL_17:
    uint64_t v34 = v52;
    (*(void (**)(char *, unint64_t, uint64_t))(v52 + 16))(v30, *(void *)(v55 + 48) + *(void *)(v52 + 72) * v28, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v30, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v30, 1, v11) == 1) {
      goto LABEL_24;
    }
    (*v50)(v29, v30, v11);
    sub_10004CD60(v29);
    id result = (id)(*v49)(v29, v11);
  }
  int64_t v33 = v25 + 1;
  if (v25 + 1 >= v48) {
    goto LABEL_23;
  }
  unint64_t v32 = *(void *)(v47 + 8 * v33);
  if (v32) {
    goto LABEL_15;
  }
  int64_t v33 = v25 + 2;
  if (v25 + 2 >= v48) {
    goto LABEL_23;
  }
  unint64_t v32 = *(void *)(v47 + 8 * v33);
  if (v32)
  {
LABEL_15:
    int64_t v25 = v33;
    goto LABEL_16;
  }
  int64_t v33 = v25 + 3;
  if (v25 + 3 < v48)
  {
    unint64_t v32 = *(void *)(v47 + 8 * v33);
    if (!v32)
    {
      while (1)
      {
        int64_t v25 = v33 + 1;
        if (__OFADD__(v33, 1)) {
          goto LABEL_28;
        }
        if (v25 >= v48) {
          goto LABEL_23;
        }
        unint64_t v32 = *(void *)(v47 + 8 * v25);
        ++v33;
        if (v32) {
          goto LABEL_16;
        }
      }
    }
    goto LABEL_15;
  }
LABEL_23:
  (*v53)(v54, 1, 1, v11);
LABEL_24:
  swift_release();
  uint64_t v35 = v41;
  uint64_t v36 = v40;
  sub_1000455E4();
  static Logger.persistenceRecordStore.getter();
  int v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Persistence record migration end", v39, 2u);
    swift_slowDealloc();
  }

  (*v45)(v36, v46);
  return [*(id *)(v35 + 176) unlock];
}

uint64_t sub_10004F4FC(unint64_t a1, uint64_t a2)
{
  uint64_t v34 = a2;
  uint64_t v33 = type metadata accessor for SettingScope();
  uint64_t v3 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  unint64_t v32 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for URL.DirectoryHint();
  uint64_t v5 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!(a1 >> 62))
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v11) {
      goto LABEL_3;
    }
LABEL_11:
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v11 = result;
  if (!result) {
    goto LABEL_11;
  }
LABEL_3:
  if (v11 >= 1)
  {
    uint64_t v13 = 0;
    unint64_t v35 = a1;
    unint64_t v28 = a1 & 0xC000000000000001;
    unsigned int v27 = enum case for URL.DirectoryHint.notDirectory(_:);
    int64_t v25 = (void (**)(char *, uint64_t))(v5 + 8);
    long long v26 = (void (**)(char *, void, uint64_t))(v5 + 104);
    unsigned int v24 = enum case for SettingScope.user(_:);
    uint64_t v14 = (void (**)(uint64_t, void, uint64_t))(v3 + 104);
    uint64_t v15 = (void (**)(uint64_t, uint64_t))(v3 + 8);
    uint64_t v16 = (void (**)(char *, uint64_t))(v8 + 8);
    unint64_t v23 = 0x8000000100068040;
    uint64_t v29 = v11;
    uint64_t v17 = (uint64_t)v32;
    do
    {
      if (v28)
      {
        uint64_t v18 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v18 = *(void *)(v35 + 8 * v13 + 32);
        swift_retain();
      }
      ++v13;
      unint64_t v36 = 0xD00000000000001DLL;
      unint64_t v37 = v23;
      uint64_t v19 = v31;
      (*v26)(v7, v27, v31);
      sub_100011120();
      URL.appending<A>(path:directoryHint:)();
      (*v25)(v7, v19);
      swift_bridgeObjectRelease();
      char v20 = *(unsigned char *)(v18 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client + 32);
      uint64_t v21 = v33;
      (*v14)(v17, v24, v33);
      sub_100037198((uint64_t)v10, v20, v17);
      (*v15)(v17, v21);
      (*v16)(v10, v30);
      swift_release();
    }
    while (v29 != v13);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void sub_10004F8F0(unint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v36 = 0;
  int64_t v5 = 0;
  uint64_t v8 = a3[8];
  uint64_t v6 = a3 + 8;
  uint64_t v7 = v8;
  uint64_t v9 = 1 << *((unsigned char *)v6 - 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & v7;
  os_log_type_t v38 = v6;
  int64_t v39 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v42 = a4 + 56;
  while (1)
  {
    while (v11)
    {
      unint64_t v12 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v13 = v12 | (v5 << 6);
      if (*(void *)(v4 + 16)) {
        goto LABEL_23;
      }
    }
    int64_t v14 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v14 >= v39) {
      goto LABEL_40;
    }
    unint64_t v15 = v38[v14];
    ++v5;
    if (!v15)
    {
      int64_t v5 = v14 + 1;
      if (v14 + 1 >= v39) {
        goto LABEL_40;
      }
      unint64_t v15 = v38[v5];
      if (!v15)
      {
        int64_t v5 = v14 + 2;
        if (v14 + 2 >= v39) {
          goto LABEL_40;
        }
        unint64_t v15 = v38[v5];
        if (!v15) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v11 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v5 << 6);
    if (*(void *)(v4 + 16))
    {
LABEL_23:
      int64_t v41 = v5;
      uint64_t v17 = (uint64_t *)(a3[6] + 16 * v13);
      uint64_t v19 = *v17;
      uint64_t v18 = v17[1];
      char v20 = *(void **)(a3[7] + 8 * v13);
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      id v40 = v20;
      String.hash(into:)();
      Swift::Int v21 = Hasher._finalize()();
      uint64_t v22 = v4;
      uint64_t v23 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v24 = v21 & ~v23;
      if (((*(void *)(v42 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
        goto LABEL_5;
      }
      uint64_t v25 = *(void *)(v4 + 48);
      long long v26 = (void *)(v25 + 16 * v24);
      BOOL v27 = *v26 == v19 && v26[1] == v18;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_37:
        swift_bridgeObjectRelease();

        *(unint64_t *)((char *)a1 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
        BOOL v33 = __OFADD__(v36++, 1);
        uint64_t v4 = v22;
        int64_t v5 = v41;
        if (v33)
        {
          __break(1u);
LABEL_40:
          sub_100049180(a1, a2, v36, (uint64_t)a3);
          return;
        }
      }
      else
      {
        uint64_t v28 = ~v23;
        for (unint64_t i = v24 + 1; ; unint64_t i = v30 + 1)
        {
          uint64_t v30 = i & v28;
          if (((*(void *)(v42 + (((i & v28) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v28)) & 1) == 0) {
            break;
          }
          uint64_t v31 = (void *)(v25 + 16 * v30);
          BOOL v32 = *v31 == v19 && v31[1] == v18;
          if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_37;
          }
        }
LABEL_5:
        swift_bridgeObjectRelease();

        uint64_t v4 = v22;
        int64_t v5 = v41;
      }
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v39) {
    goto LABEL_40;
  }
  unint64_t v15 = v38[v16];
  if (v15)
  {
    int64_t v5 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v5 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v5 >= v39) {
      goto LABEL_40;
    }
    unint64_t v15 = v38[v5];
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_42:
  __break(1u);
}

uint64_t sub_10004FBE0(uint64_t a1, uint64_t a2)
{
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    sub_10004F8F0((unint64_t *)((char *)&v15 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, (void *)a1, a2);
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    if (v2) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    unint64_t v12 = (void *)swift_slowAlloc();
    bzero(v12, v8);
    swift_bridgeObjectRetain();
    sub_10004F8F0((unint64_t *)v12, v7, (void *)a1, a2);
    uint64_t v11 = v13;
    swift_bridgeObjectRelease();
    swift_slowDealloc();
    swift_bridgeObjectRelease_n();
  }
  return v11;
}

uint64_t sub_10004FD9C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  unint64_t v31 = a3;
  uint64_t v6 = type metadata accessor for CocoaError.Code();
  uint64_t v30 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  size_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL.DirectoryHint();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v28 = *(void *)(v13 - 8);
  uint64_t v29 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  int64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v26 - v17;
  uint64_t v19 = v34;
  sub_10000ECA4(a2, v31, (uint64_t)v16);
  if (v19)
  {
    swift_errorRetain();
    static CocoaError.fileNoSuchFile.getter();
    sub_1000501A4((unint64_t *)&qword_1000764D0, (void (*)(uint64_t))&type metadata accessor for CocoaError.Code);
    uint64_t v25 = static _ErrorCodeProtocol.~= infix(_:_:)();
    swift_errorRelease();
    uint64_t v22 = *(void (**)(char *, uint64_t))(v30 + 8);
    v22(v8, v6);
    if ((v25 & 1) != 0
      || (swift_errorRetain(),
          static CocoaError.fileReadNoSuchFile.getter(),
          uint64_t v25 = static _ErrorCodeProtocol.~= infix(_:_:)(),
          swift_errorRelease(),
          v22(v8, v6),
          (v25 & 1) != 0))
    {
      swift_errorRelease();
      sub_100011298();
      swift_allocError();
      *uint64_t v23 = 1;
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v34 = type metadata accessor for Persistence();
    uint64_t v32 = v26;
    uint64_t v33 = v27;
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for URL.DirectoryHint.notDirectory(_:), v9);
    sub_100011120();
    URL.appending<A>(path:directoryHint:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    swift_bridgeObjectRelease();
    uint64_t v20 = v29;
    Swift::Int v21 = *(void (**)(char *, uint64_t))(v28 + 8);
    v21(v16, v29);
    uint64_t v25 = static Persistence.read(from:)();
    v21(v18, v20);
  }
  return v25;
}

id sub_100050194()
{
  return sub_100045968();
}

uint64_t sub_10005019C()
{
  return swift_release();
}

uint64_t sub_1000501A4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000501EC(uint64_t a1, uint64_t a2)
{
  return sub_100047F28(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1000501F4(uint64_t a1, uint64_t a2)
{
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    sub_1000503B0((unint64_t *)((char *)&v15 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, (void *)a1, a2);
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    if (v2) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    unint64_t v12 = (void *)swift_slowAlloc();
    bzero(v12, v8);
    swift_bridgeObjectRetain();
    sub_1000503B0((unint64_t *)v12, v7, (void *)a1, a2);
    uint64_t v11 = v13;
    swift_bridgeObjectRelease();
    swift_slowDealloc();
    swift_bridgeObjectRelease_n();
  }
  return v11;
}

void sub_1000503B0(unint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v35 = 0;
  int64_t v5 = 0;
  uint64_t v8 = a3[8];
  unsigned int v6 = a3 + 8;
  uint64_t v7 = v8;
  uint64_t v9 = 1 << *((unsigned char *)v6 - 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & v7;
  uint64_t v36 = v6;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v40 = a4 + 56;
  while (1)
  {
    while (v11)
    {
      unint64_t v12 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v13 = v12 | (v5 << 6);
      if (!*(void *)(v4 + 16)) {
        goto LABEL_38;
      }
LABEL_23:
      uint64_t v17 = (uint64_t *)(a3[6] + 16 * v13);
      uint64_t v19 = *v17;
      uint64_t v18 = v17[1];
      unint64_t v39 = v13;
      uint64_t v20 = *(void **)(a3[7] + 8 * v13);
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      id v21 = v20;
      String.hash(into:)();
      Swift::Int v22 = Hasher._finalize()();
      uint64_t v23 = v4;
      uint64_t v24 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v25 = v22 & ~v24;
      if (((*(void *)(v40 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25) & 1) == 0) {
        goto LABEL_37;
      }
      uint64_t v26 = *(void *)(v23 + 48);
      uint64_t v27 = (void *)(v26 + 16 * v25);
      BOOL v28 = *v27 == v19 && v27[1] == v18;
      if (!v28 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v29 = ~v24;
        while (1)
        {
          unint64_t v25 = (v25 + 1) & v29;
          if (((*(void *)(v40 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25) & 1) == 0) {
            break;
          }
          uint64_t v30 = (void *)(v26 + 16 * v25);
          BOOL v31 = *v30 == v19 && v30[1] == v18;
          if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_5;
          }
        }
LABEL_37:
        swift_bridgeObjectRelease();

        uint64_t v4 = v23;
        unint64_t v13 = v39;
        goto LABEL_38;
      }
LABEL_5:
      swift_bridgeObjectRelease();

      uint64_t v4 = v23;
    }
    int64_t v14 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v14 >= v37) {
      goto LABEL_41;
    }
    unint64_t v15 = v36[v14];
    ++v5;
    if (!v15)
    {
      int64_t v5 = v14 + 1;
      if (v14 + 1 >= v37) {
        goto LABEL_41;
      }
      unint64_t v15 = v36[v5];
      if (!v15)
      {
        int64_t v5 = v14 + 2;
        if (v14 + 2 >= v37) {
          goto LABEL_41;
        }
        unint64_t v15 = v36[v5];
        if (!v15) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v11 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v5 << 6);
    if (*(void *)(v4 + 16)) {
      goto LABEL_23;
    }
LABEL_38:
    *(unint64_t *)((char *)a1 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    if (__OFADD__(v35++, 1))
    {
      __break(1u);
LABEL_41:
      sub_100049180(a1, a2, v35, (uint64_t)a3);
      return;
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v37) {
    goto LABEL_41;
  }
  unint64_t v15 = v36[v16];
  if (v15)
  {
    int64_t v5 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v5 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v5 >= v37) {
      goto LABEL_41;
    }
    unint64_t v15 = v36[v5];
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_43:
  __break(1u);
}

uint64_t sub_100050690(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, char *a8, unsigned char *a9, char *a10)
{
  uint64_t v67 = a6;
  uint64_t v64 = a5;
  uint64_t v65 = a4;
  uint64_t v15 = type metadata accessor for Logger();
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v61 = a9;
  uint64_t v62 = a8;
  *a8 = 0;
  *a9 = 0;
  uint64_t v63 = a10;
  *a10 = 0;
  int v68 = a7;
  if ((a7 & 1) != 0 || *(void *)(v65 + 16))
  {
    uint64_t v19 = *(void *)(v67 + 16);
LABEL_4:
    uint64_t v20 = a1;
    unint64_t v21 = a3;
    if (!v19)
    {
      char v28 = 0;
      char v29 = 0;
      char v30 = 0;
      char v69 = 0;
      uint64_t v22 = a2;
      uint64_t v31 = v66;
      goto LABEL_10;
    }
    int v60 = 1;
    goto LABEL_6;
  }
  uint64_t v19 = *(void *)(v67 + 16);
  if (*(void *)(v64 + 16)) {
    goto LABEL_4;
  }
  if (!v19)
  {
    uint64_t v55 = v16;
    static Logger.persistenceRecordStore.getter();
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Nothing to modify, exiting early", v58, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v18, v15);
  }
  uint64_t v20 = a1;
  unint64_t v21 = a3;
  int v60 = 0;
LABEL_6:
  uint64_t v22 = a2;
  uint64_t v23 = v20 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_storeDirectory;
  swift_beginAccess();
  uint64_t v24 = *(void *)v23;
  if (*(void *)(*(void *)v23 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v25 = sub_100019BD4(a2, v21);
    if (v26) {
      int v27 = *(unsigned __int8 *)(*(void *)(v24 + 56) + 32 * v25 + 24);
    }
    else {
      int v27 = 1;
    }
    uint64_t v34 = v66;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    int v27 = 1;
    uint64_t v34 = v66;
  }
  uint64_t v35 = *(void *)v23;
  if (*(void *)(*(void *)v23 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v36 = sub_100019BD4(a2, v21);
    if (v37) {
      char v38 = *(unsigned char *)(*(void *)(v35 + 56) + 32 * v36 + 25);
    }
    else {
      char v38 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v38 = 0;
  }
  uint64_t result = sub_10000E30C(v67, a2, v21);
  uint64_t v31 = v34;
  if (!v34)
  {
    if (result)
    {
      uint64_t v39 = *(void *)v23;
      if (*(void *)(*(void *)v23 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v40 = sub_100019BD4(v22, v21);
        if (v41) {
          int v42 = *(unsigned __int8 *)(*(void *)(v39 + 56) + 32 * v40 + 24);
        }
        else {
          int v42 = 1;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        int v42 = 1;
      }
      uint64_t v43 = *(void *)v23;
      uint64_t v44 = *(void *)(*(void *)v23 + 16);
      LODWORD(v67) = v27 ^ v42;
      if (v44)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v45 = sub_100019BD4(v22, v21);
        if (v46) {
          char v47 = *(unsigned char *)(*(void *)(v43 + 56) + 32 * v45 + 25);
        }
        else {
          char v47 = 0;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v47 = 0;
      }
      char v33 = 0;
      char v29 = v38 ^ v47;
      char v69 = 0;
      char v30 = 1;
      char v28 = v67;
      if ((v60 & 1) == 0) {
        goto LABEL_41;
      }
    }
    else
    {
      char v28 = 0;
      char v29 = 0;
      char v30 = 0;
      char v33 = 0;
      char v69 = 0;
      if (!v60) {
        goto LABEL_41;
      }
    }
LABEL_10:
    uint64_t result = sub_100044A78(v20, v22, v21, v65, v64, v68 & 1, &v69);
    if (v31) {
      return result;
    }
    char v33 = result;
LABEL_41:
    uint64_t result = sub_10000E530(v22, v21);
    if (result)
    {
      uint64_t result = sub_10000F670(v22, v21);
    }
    else if (v69 != 1)
    {
      *uint64_t v62 = v30;
      int64_t v48 = v63;
      if (v33)
      {
LABEL_45:
        char v49 = 1;
        *int64_t v61 = 1;
        if (v29) {
          goto LABEL_55;
        }
        goto LABEL_49;
      }
LABEL_48:
      *int64_t v61 = v28;
      char v50 = v29 | v28 ^ 1;
      char v49 = v29;
      if (v50)
      {
LABEL_55:
        char *v48 = v49;
        return result;
      }
LABEL_49:
      uint64_t v51 = (uint64_t *)(v20 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_storeDirectory);
      uint64_t result = swift_beginAccess();
      uint64_t v52 = *v51;
      if (!*(void *)(v52 + 16))
      {
        char *v48 = 0;
        return result;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v53 = sub_100019BD4(v22, v21);
      if (v54) {
        char v49 = *(unsigned char *)(*(void *)(v52 + 56) + 32 * v53 + 25);
      }
      else {
        char v49 = 0;
      }
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_55;
    }
    *uint64_t v62 = 1;
    int64_t v48 = v63;
    if (v33) {
      goto LABEL_45;
    }
    goto LABEL_48;
  }
  return result;
}

uint64_t sub_100050BC0(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned char *a4, unsigned char *a5)
{
  uint64_t v47 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v47 - 8);
  uint64_t v11 = __chkstk_darwin(v47);
  unint64_t v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v40 = a3;
  char v41 = a4;
  *a3 = 0;
  *a4 = 0;
  int v42 = a5;
  *a5 = 0;
  if (!*(void *)(a1 + 16))
  {
    static Logger.persistenceRecordStore.getter();
    swift_retain_n();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      char v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      *(_DWORD *)char v33 = 136446210;
      v52[0] = v34;
      char v50 = v33 + 4;
      type metadata accessor for UUID();
      sub_1000501A4(&qword_100076C78, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v51 = sub_1000036B0(v35, v36, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Nothing to delete from record “%{public}s,” exiting early", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v47);
  }
  char v46 = (char *)v37 - v14;
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v48 = a1 + 56;
  uint64_t v16 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  uint64_t v39 = a2 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_recordIdentifier;
  int64_t v49 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v43 = v10 + 8;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v20 = 0;
  *(void *)&long long v21 = 136446722;
  long long v38 = v21;
  v37[1] = (char *)&type metadata for Any + 8;
  uint64_t v44 = a1;
  uint64_t v45 = a2;
  if (v18) {
    goto LABEL_7;
  }
  while (1)
  {
    if (__OFADD__(v20++, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v20 >= v49) {
      return swift_release();
    }
    unint64_t v25 = *(void *)(v48 + 8 * v20);
    if (!v25) {
      break;
    }
LABEL_18:
    unint64_t v18 = (v25 - 1) & v25;
    for (unint64_t i = __clz(__rbit64(v25)) + (v20 << 6); ; unint64_t i = v22 | (v20 << 6))
    {
      int v27 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
      uint64_t v28 = *v27;
      unint64_t v29 = v27[1];
      LOBYTE(v52[0]) = 0;
      LOBYTE(v51) = 0;
      v53[0] = 0;
      uint64_t v30 = qword_100076390;
      swift_bridgeObjectRetain();
      if (v30 != -1) {
        swift_once();
      }
      sub_100050690(a2, v28, v29, (uint64_t)&_swiftEmptyDictionarySingleton, (uint64_t)&_swiftEmptySetSingleton, qword_100079558, 1, (char *)v52, &v51, v53);
      uint64_t result = swift_bridgeObjectRelease();
      *unint64_t v40 = (LOBYTE(v52[0]) | *v40) & 1;
      *char v41 = (v51 | *v41) & 1;
      unsigned char *v42 = (v53[0] | *v42) & 1;
      if (!v18) {
        break;
      }
LABEL_7:
      unint64_t v22 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
    }
  }
  int64_t v26 = v20 + 1;
  if (v20 + 1 >= v49) {
    return swift_release();
  }
  unint64_t v25 = *(void *)(v48 + 8 * v26);
  if (v25) {
    goto LABEL_17;
  }
  int64_t v26 = v20 + 2;
  if (v20 + 2 >= v49) {
    return swift_release();
  }
  unint64_t v25 = *(void *)(v48 + 8 * v26);
  if (v25) {
    goto LABEL_17;
  }
  int64_t v26 = v20 + 3;
  if (v20 + 3 >= v49) {
    return swift_release();
  }
  unint64_t v25 = *(void *)(v48 + 8 * v26);
  if (v25)
  {
LABEL_17:
    int64_t v20 = v26;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v20 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v20 >= v49) {
      return swift_release();
    }
    unint64_t v25 = *(void *)(v48 + 8 * v20);
    ++v26;
    if (v25) {
      goto LABEL_18;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_10005131C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10004B824(a1, a2);
  }
  return a1;
}

uint64_t sub_100051330(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_100051388(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100051330(a1, a2);
  }
  return a1;
}

uint64_t sub_10005139C(uint64_t a1, uint64_t a2)
{
  return sub_100047FB0(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1000513A4(uint64_t a1, uint64_t a2)
{
  return sub_100048038(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1000513AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Application();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v27 = a1 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  uint64_t v28 = (void *)(a2 + OBJC_IVAR____TtC20ManagedSettingsAgent17PersistenceRecord_client);
  uint64_t v31 = v5 + 16;
  int64_t v29 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v30 = v5 + 32;
  uint64_t v15 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
  uint64_t v32 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  if (v14) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v21 = v17 + 1;
  if (__OFADD__(v17, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v21 >= v29) {
    goto LABEL_29;
  }
  unint64_t v22 = *(void *)(v27 + 8 * v21);
  ++v17;
  if (!v22)
  {
    int64_t v17 = v21 + 1;
    if (v21 + 1 >= v29) {
      goto LABEL_29;
    }
    unint64_t v22 = *(void *)(v27 + 8 * v17);
    if (!v22)
    {
      int64_t v17 = v21 + 2;
      if (v21 + 2 >= v29) {
        goto LABEL_29;
      }
      unint64_t v22 = *(void *)(v27 + 8 * v17);
      if (!v22)
      {
        int64_t v17 = v21 + 3;
        if (v21 + 3 >= v29) {
          goto LABEL_29;
        }
        unint64_t v22 = *(void *)(v27 + 8 * v17);
        if (!v22)
        {
          int64_t v23 = v21 + 4;
          if (v23 < v29)
          {
            unint64_t v22 = *(void *)(v27 + 8 * v23);
            int64_t v17 = v23;
            if (!v22)
            {
              while (1)
              {
                int64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  break;
                }
                if (v17 >= v29) {
                  goto LABEL_29;
                }
                unint64_t v22 = *(void *)(v27 + 8 * v17);
                ++v23;
                if (v22) {
                  goto LABEL_22;
                }
              }
LABEL_32:
              __break(1u);
              return result;
            }
            goto LABEL_22;
          }
LABEL_29:
          swift_release();
          return 0;
        }
      }
    }
  }
LABEL_22:
  unint64_t v14 = (v22 - 1) & v22;
  for (unint64_t i = __clz(__rbit64(v22)) + (v17 << 6); ; unint64_t i = v19 | (v17 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v10, *(void *)(v32 + 48) + *(void *)(v5 + 72) * i, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v10, v4);
    uint64_t v24 = Application.bundleIdentifier.getter();
    if (!v25)
    {
      uint64_t result = (*v15)(v8, v4);
      if (!v14) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    if (v24 == *v28 && v25 == v28[1]) {
      break;
    }
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t result = (*v15)(v8, v4);
    if (v18) {
      goto LABEL_30;
    }
    if (!v14) {
      goto LABEL_8;
    }
LABEL_7:
    unint64_t v19 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
  }
  swift_bridgeObjectRelease();
  (*v15)(v8, v4);
LABEL_30:
  swift_release();
  return 1;
}

uint64_t *sub_100051704(uint64_t *a1)
{
  return a1;
}

uint64_t sub_10005173C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

char *sub_10005178C(uint64_t a1)
{
  uint64_t v40 = a1;
  uint64_t v2 = sub_100003C68(&qword_100077B10);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100003C68(&qword_100077B18);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000763C0 != -1) {
LABEL_37:
  }
    swift_once();
  char v41 = v8;
  uint64_t v8 = (char *)qword_1000795A0;
  swift_retain();
  uint64_t v9 = sub_100003C68(&qword_100077B08);
  unint64_t v10 = sub_10005AB94();
  uint64_t v49 = v1;
  unint64_t v45 = v10;
  uint64_t v46 = v9;
  uint64_t v11 = dispatch thunk of SettingMetadataProtocol.name.getter();
  uint64_t v1 = sub_10003F850(v11, v12);
  swift_release();
  swift_bridgeObjectRelease();
  int64_t v13 = 0;
  uint64_t v14 = *(void *)(v1 + 64);
  uint64_t v43 = v1 + 64;
  uint64_t v52 = v1;
  uint64_t v15 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  int64_t v50 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v44 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
  long long v38 = (void (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v39 = (void (**)(char *, uint64_t, uint64_t))(v6 + 32);
  char v37 = (char *)&_swiftEmptyArrayStorage;
  uint64_t v47 = v5;
  uint64_t v48 = v4;
  while (v17)
  {
    unint64_t v19 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    unint64_t v20 = v19 | (v13 << 6);
LABEL_26:
    uint64_t v24 = *(void *)(v52 + 56);
    uint64_t v25 = *(void *)(v52 + 48) + 40 * v20;
    uint64_t v6 = *(void *)(v25 + 8);
    uint64_t v51 = *(void *)v25;
    uint64_t v26 = *(void *)(v25 + 16);
    uint64_t v27 = *(void *)(v25 + 24);
    uint64_t v4 = (char *)*(unsigned __int8 *)(v25 + 32);
    uint64_t v1 = *(void *)(v24 + 8 * v20);
    type metadata accessor for Application();
    uint64_t v5 = sub_10005AB4C((unint64_t *)&unk_100077160, (void (*)(uint64_t))&type metadata accessor for Application);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v8 = (char *)(id)v1;
    if (static Set<>.value(from:)())
    {
      uint64_t v42 = v26;
      uint64_t v1 = v49;
      dispatch thunk of SettingMetadataProtocol.combineOperator.getter();
      sub_100003C68(&qword_100077A98);
      uint64_t v5 = v47;
      uint64_t v28 = (uint64_t)v48;
      char v29 = swift_dynamicCast();
      uint64_t v30 = *v44;
      if (v29)
      {
        v30(v28, 0, 1, v5);
        uint64_t v1 = (uint64_t)v41;
        (*v39)(v41, v28, v5);
        char v18 = SetCombineOperator.currentValue(_:restricts:)();
        swift_bridgeObjectRelease();
        if ((v18 & 1) == 0)
        {
          (*v38)(v1, v5);
          goto LABEL_7;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v37 = sub_1000542A0(0, *((void *)v37 + 2) + 1, 1, v37);
        }
        uint64_t v31 = v42;
        unint64_t v33 = *((void *)v37 + 2);
        unint64_t v32 = *((void *)v37 + 3);
        uint64_t v1 = v33 + 1;
        if (v33 >= v32 >> 1) {
          char v37 = sub_1000542A0((char *)(v32 > 1), v33 + 1, 1, v37);
        }
        uint64_t v34 = v37;
        *((void *)v37 + 2) = v1;
        uint64_t v35 = &v34[40 * v33];
        *((void *)v35 + 4) = v51;
        *((void *)v35 + 5) = v6;
        *((void *)v35 + 6) = v31;
        *((void *)v35 + 7) = v27;
        v35[64] = (char)v4;

        (*v38)((uint64_t)v41, v5);
      }
      else
      {
        v30(v28, 1, 1, v5);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100006E84(v28, &qword_100077B10);
      }
    }
    else
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  int64_t v21 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v21 >= v50) {
    goto LABEL_34;
  }
  unint64_t v22 = *(void *)(v43 + 8 * v21);
  ++v13;
  if (v22) {
    goto LABEL_25;
  }
  int64_t v13 = v21 + 1;
  if (v21 + 1 >= v50) {
    goto LABEL_34;
  }
  unint64_t v22 = *(void *)(v43 + 8 * v13);
  if (v22) {
    goto LABEL_25;
  }
  int64_t v13 = v21 + 2;
  if (v21 + 2 >= v50) {
    goto LABEL_34;
  }
  unint64_t v22 = *(void *)(v43 + 8 * v13);
  if (v22) {
    goto LABEL_25;
  }
  int64_t v13 = v21 + 3;
  if (v21 + 3 >= v50) {
    goto LABEL_34;
  }
  unint64_t v22 = *(void *)(v43 + 8 * v13);
  if (v22)
  {
LABEL_25:
    unint64_t v17 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v13 << 6);
    goto LABEL_26;
  }
  int64_t v23 = v21 + 4;
  if (v23 < v50)
  {
    unint64_t v22 = *(void *)(v43 + 8 * v23);
    if (!v22)
    {
      while (1)
      {
        int64_t v13 = v23 + 1;
        if (__OFADD__(v23, 1)) {
          goto LABEL_36;
        }
        if (v13 >= v50) {
          goto LABEL_34;
        }
        unint64_t v22 = *(void *)(v43 + 8 * v13);
        ++v23;
        if (v22) {
          goto LABEL_25;
        }
      }
    }
    int64_t v13 = v23;
    goto LABEL_25;
  }
LABEL_34:
  swift_release();
  return v37;
}

char *sub_100051CFC(uint64_t a1, char a2)
{
  LOBYTE(v3) = a2;
  uint64_t v40 = a1;
  uint64_t v4 = sub_100003C68(&qword_100077AB8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100003C68(&qword_100077AC0);
  uint64_t v8 = *(char **)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000763C0 != -1) {
LABEL_37:
  }
    swift_once();
  swift_retain();
  uint64_t v11 = sub_100003C68(&qword_100077A68);
  unint64_t v12 = sub_10005A908();
  uint64_t v49 = v2;
  unint64_t v45 = v12;
  uint64_t v46 = v11;
  uint64_t v13 = dispatch thunk of SettingMetadataProtocol.name.getter();
  uint64_t v2 = sub_10003F850(v13, v14);
  swift_release();
  swift_bridgeObjectRelease();
  int64_t v15 = 0;
  uint64_t v16 = *(void *)(v2 + 64);
  uint64_t v43 = v2 + 64;
  uint64_t v52 = v2;
  uint64_t v17 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v16;
  int64_t v50 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v44 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  uint64_t v39 = (void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  char v37 = (void (**)(uint64_t, uint64_t))(v8 + 8);
  unint64_t v36 = (char *)_swiftEmptyArrayStorage;
  int v38 = v3 & 1;
  uint64_t v47 = v7;
  uint64_t v48 = v6;
  uint64_t v41 = v10;
  while (v19)
  {
    unint64_t v20 = __clz(__rbit64(v19));
    v19 &= v19 - 1;
    unint64_t v21 = v20 | (v15 << 6);
LABEL_26:
    uint64_t v25 = *(void *)(v52 + 56);
    uint64_t v26 = *(void *)(v52 + 48) + 40 * v21;
    uint64_t v3 = *(void *)(v26 + 8);
    uint64_t v51 = *(void *)v26;
    uint64_t v10 = *(void *)(v26 + 16);
    uint64_t v27 = *(void *)(v26 + 24);
    uint64_t v6 = (char *)*(unsigned __int8 *)(v26 + 32);
    uint64_t v2 = *(void *)(v25 + 8 * v21);
    type metadata accessor for WebDomain();
    uint64_t v7 = sub_10005AB4C(&qword_100076DA8, (void (*)(uint64_t))&type metadata accessor for WebDomain);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v8 = (char *)(id)v2;
    if (static Set<>.value(from:)())
    {
      uint64_t v42 = v10;
      uint64_t v2 = v49;
      dispatch thunk of SettingMetadataProtocol.combineOperator.getter();
      sub_100003C68(&qword_100077A98);
      uint64_t v7 = v47;
      uint64_t v10 = (uint64_t)v48;
      char v28 = swift_dynamicCast();
      char v29 = *v44;
      if (v28)
      {
        v29(v10, 0, 1, v7);
        uint64_t v2 = v41;
        (*v39)(v41, v10, v7);
        uint64_t v10 = SetCombineOperator<>.currentValue(_:restricts:shouldUsePatternMatching:)();
        swift_bridgeObjectRelease();
        if ((v10 & 1) == 0)
        {
          (*v37)(v2, v7);
          goto LABEL_7;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v36 = sub_1000542A0(0, *((void *)v36 + 2) + 1, 1, v36);
        }
        uint64_t v10 = v42;
        unint64_t v31 = *((void *)v36 + 2);
        unint64_t v30 = *((void *)v36 + 3);
        uint64_t v2 = v31 + 1;
        if (v31 >= v30 >> 1) {
          unint64_t v36 = sub_1000542A0((char *)(v30 > 1), v31 + 1, 1, v36);
        }
        unint64_t v32 = v36;
        *((void *)v36 + 2) = v2;
        unint64_t v33 = &v32[40 * v31];
        *((void *)v33 + 4) = v51;
        *((void *)v33 + 5) = v3;
        *((void *)v33 + 6) = v10;
        *((void *)v33 + 7) = v27;
        v33[64] = (char)v6;

        (*v37)(v41, v7);
      }
      else
      {
        v29(v10, 1, 1, v7);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100006E84(v10, &qword_100077AB8);
      }
    }
    else
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  int64_t v22 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v22 >= v50) {
    goto LABEL_34;
  }
  unint64_t v23 = *(void *)(v43 + 8 * v22);
  ++v15;
  if (v23) {
    goto LABEL_25;
  }
  int64_t v15 = v22 + 1;
  if (v22 + 1 >= v50) {
    goto LABEL_34;
  }
  unint64_t v23 = *(void *)(v43 + 8 * v15);
  if (v23) {
    goto LABEL_25;
  }
  int64_t v15 = v22 + 2;
  if (v22 + 2 >= v50) {
    goto LABEL_34;
  }
  unint64_t v23 = *(void *)(v43 + 8 * v15);
  if (v23) {
    goto LABEL_25;
  }
  int64_t v15 = v22 + 3;
  if (v22 + 3 >= v50) {
    goto LABEL_34;
  }
  unint64_t v23 = *(void *)(v43 + 8 * v15);
  if (v23)
  {
LABEL_25:
    unint64_t v19 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v15 << 6);
    goto LABEL_26;
  }
  int64_t v24 = v22 + 4;
  if (v24 < v50)
  {
    unint64_t v23 = *(void *)(v43 + 8 * v24);
    if (!v23)
    {
      while (1)
      {
        int64_t v15 = v24 + 1;
        if (__OFADD__(v24, 1)) {
          goto LABEL_36;
        }
        if (v15 >= v50) {
          goto LABEL_34;
        }
        unint64_t v23 = *(void *)(v43 + 8 * v15);
        ++v24;
        if (v23) {
          goto LABEL_25;
        }
      }
    }
    int64_t v15 = v24;
    goto LABEL_25;
  }
LABEL_34:
  swift_release();
  return v36;
}

char *sub_1000522A0(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = a2;
  uint64_t v47 = a1;
  uint64_t v3 = sub_100003C68(&qword_100077AE8);
  __chkstk_darwin(v3 - 8);
  os_log_type_t v57 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100003C68(&qword_100077AF0);
  unint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v59 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100003C68(&qword_100076D50);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100003C68(&qword_100076D48);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v55 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000763C0 != -1) {
LABEL_38:
  }
    swift_once();
  uint64_t v14 = qword_1000795A0;
  swift_retain();
  uint64_t v15 = sub_100003C68(&qword_100077AE0);
  uint64_t v16 = sub_10005AA1C(&qword_100077AF8, &qword_100077AE0, (void (*)(void))sub_10005AA94);
  uint64_t v58 = v2;
  uint64_t v53 = v16;
  uint64_t v54 = v15;
  uint64_t v17 = dispatch thunk of SettingMetadataProtocol.name.getter();
  uint64_t v2 = (void *)v14;
  uint64_t v19 = sub_10003F850(v17, v18);
  swift_release();
  swift_bridgeObjectRelease();
  int64_t v20 = 0;
  uint64_t v21 = *(void *)(v19 + 64);
  uint64_t v60 = v19 + 64;
  uint64_t v22 = 1 << *(unsigned char *)(v19 + 32);
  uint64_t v23 = -1;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  unint64_t v24 = v23 & v21;
  int64_t v61 = (unint64_t)(v22 + 63) >> 6;
  uint64_t v65 = (unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  uint64_t v52 = (void (**)(char *))(v12 + 32);
  uint64_t v51 = (void (**)(void *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  int64_t v50 = (void (**)(uint64_t, uint64_t))(v12 + 8);
  uint64_t v46 = (void (**)(unint64_t, void *, uint64_t))(v6 + 32);
  unint64_t v45 = (void (**)(unint64_t, uint64_t))(v6 + 8);
  uint64_t v44 = (char *)&_swiftEmptyArrayStorage;
  uint64_t v56 = v5;
  uint64_t v66 = v11;
  uint64_t v49 = v19;
  while (v24)
  {
    unint64_t v25 = __clz(__rbit64(v24));
    v24 &= v24 - 1;
    int64_t v67 = v20;
    unint64_t v26 = v25 | (v20 << 6);
LABEL_24:
    uint64_t v31 = *(void *)(v19 + 56);
    uint64_t v32 = *(void *)(v19 + 48) + 40 * v26;
    uint64_t v12 = *(void *)(v32 + 8);
    uint64_t v62 = *(void *)v32;
    uint64_t v33 = *(void *)(v32 + 24);
    uint64_t v63 = *(void *)(v32 + 16);
    int v64 = *(unsigned __int8 *)(v32 + 32);
    uint64_t v2 = *(void **)(v31 + 8 * v26);
    uint64_t v11 = type metadata accessor for Application();
    unint64_t v6 = sub_10005AB4C((unint64_t *)&unk_100077160, (void (*)(uint64_t))&type metadata accessor for Application);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v34 = v2;
    static ShieldSettings.EffectiveActivityCategoryPolicy<>.value(from:)();
    uint64_t v5 = v66;
    if ((*v65)(v10, 1, v66) == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      sub_100006E84((uint64_t)v10, &qword_100076D50);
      int64_t v20 = v67;
    }
    else
    {
      uint64_t v35 = v10;
      unint64_t v36 = v55;
      char v37 = v35;
      (*v52)(v55);
      dispatch thunk of SettingMetadataProtocol.combineOperator.getter();
      sub_100003C68(&qword_100077A98);
      uint64_t v11 = v56;
      uint64_t v2 = v57;
      char v38 = swift_dynamicCast();
      uint64_t v39 = *v51;
      unint64_t v6 = (unint64_t)v59;
      if (v38)
      {
        v39(v2, 0, 1, v11);
        (*v46)(v6, v2, v11);
        uint64_t v2 = (void *)v6;
        uint64_t v5 = (uint64_t)v36;
        if ((ActivityCategoryPolicyCombineOperator.currentValue(_:restricts:including:)() & 1) == 0)
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*v45)(v6, v11);
          (*v50)((uint64_t)v36, v66);
          goto LABEL_29;
        }
        uint64_t v10 = v37;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v44 = sub_1000542A0(0, *((void *)v44 + 2) + 1, 1, v44);
        }
        uint64_t v19 = v49;
        unint64_t v6 = *((void *)v44 + 2);
        unint64_t v40 = *((void *)v44 + 3);
        uint64_t v2 = (void *)(v6 + 1);
        if (v6 >= v40 >> 1) {
          uint64_t v44 = sub_1000542A0((char *)(v40 > 1), v6 + 1, 1, v44);
        }
        uint64_t v41 = v44;
        *((void *)v44 + 2) = v2;
        uint64_t v42 = &v41[40 * v6];
        *((void *)v42 + 4) = v62;
        *((void *)v42 + 5) = v12;
        *((void *)v42 + 6) = v63;
        *((void *)v42 + 7) = v33;
        v42[64] = v64;

        (*v45)((unint64_t)v59, v11);
        (*v50)(v5, v66);
        int64_t v20 = v67;
      }
      else
      {
        v39(v2, 1, 1, v11);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*v50)((uint64_t)v36, v5);
        sub_100006E84((uint64_t)v2, &qword_100077AE8);
LABEL_29:
        uint64_t v10 = v37;
        uint64_t v19 = v49;
        int64_t v20 = v67;
      }
    }
  }
  int64_t v27 = v20 + 1;
  if (__OFADD__(v20, 1))
  {
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v27 >= v61) {
    goto LABEL_35;
  }
  unint64_t v28 = *(void *)(v60 + 8 * v27);
  int64_t v29 = v20 + 1;
  if (v28) {
    goto LABEL_23;
  }
  int64_t v29 = v20 + 2;
  if (v20 + 2 >= v61) {
    goto LABEL_35;
  }
  unint64_t v28 = *(void *)(v60 + 8 * v29);
  if (v28) {
    goto LABEL_23;
  }
  int64_t v29 = v20 + 3;
  if (v20 + 3 >= v61) {
    goto LABEL_35;
  }
  unint64_t v28 = *(void *)(v60 + 8 * v29);
  if (v28) {
    goto LABEL_23;
  }
  int64_t v29 = v20 + 4;
  if (v20 + 4 >= v61) {
    goto LABEL_35;
  }
  unint64_t v28 = *(void *)(v60 + 8 * v29);
  if (v28)
  {
LABEL_23:
    unint64_t v24 = (v28 - 1) & v28;
    int64_t v67 = v29;
    unint64_t v26 = __clz(__rbit64(v28)) + (v29 << 6);
    goto LABEL_24;
  }
  uint64_t v30 = v20 + 5;
  if (v20 + 5 < v61)
  {
    unint64_t v28 = *(void *)(v60 + 8 * v30);
    if (!v28)
    {
      while (1)
      {
        int64_t v29 = v30 + 1;
        if (__OFADD__(v30, 1)) {
          goto LABEL_37;
        }
        if (v29 >= v61) {
          goto LABEL_35;
        }
        unint64_t v28 = *(void *)(v60 + 8 * v29);
        ++v30;
        if (v28) {
          goto LABEL_23;
        }
      }
    }
    int64_t v29 = v20 + 5;
    goto LABEL_23;
  }
LABEL_35:
  swift_release();
  return v44;
}

void sub_100052A80(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void sub_100052B0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

uint64_t sub_100052B7C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    id v6 = v4;
    uint64_t v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;
  }
  else
  {
    swift_retain();
    unint64_t v8 = 0xF000000000000000;
  }
  id v9 = a3;
  v5(v4, v8, a3);

  sub_10005131C((uint64_t)v4, v8);

  return swift_release();
}

void sub_100052C28(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 >> 60 == 15)
  {
    Class isa = 0;
    if (a3)
    {
LABEL_3:
      uint64_t v7 = _convertErrorToNSError(_:)();
      goto LABEL_6;
    }
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v7 = 0;
LABEL_6:
  id v8 = (id)v7;
  (*(void (**)(uint64_t, Class))(a4 + 16))(a4, isa);
}

ValueMetadata *sub_100052CC0()
{
  uint64_t result = *(ValueMetadata **)(v0 + 16);
  if (!result)
  {
    uint64_t result = &type metadata for ApplicationRecord;
    *(void *)(v0 + 16) = &type metadata for ApplicationRecord;
    *(void *)(v0 + 24) = &off_100071EF0;
  }
  return result;
}

uint64_t sub_100052CE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 32;
  swift_beginAccess();
  sub_100019288(v3, (uint64_t)&v9, &qword_100077A50);
  if (!v10)
  {
    sub_100006E84((uint64_t)&v9, &qword_100077A50);
    unint64_t v4 = sub_100053950();
    uint64_t v5 = type metadata accessor for ExtensionFinder();
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_100064F20;
    *(void *)(v6 + 32) = 0x3FE0000000000000;
    *(void *)(v6 + 40) = 0xD00000000000002FLL;
    *(void *)(v6 + 48) = 0x80000001000666F0;
    *(void *)(v6 + 56) = 0xD000000000000038;
    *(void *)(v6 + 64) = 0x8000000100066720;
    *(void *)(v6 + 72) = v4;
    uint64_t v10 = v5;
    uint64_t v11 = &off_1000722A8;
    *(void *)&long long v9 = v6;
    sub_100019094((uint64_t)&v9, (uint64_t)v8);
    swift_beginAccess();
    sub_100053990((uint64_t)v8, v3, &qword_100077A50);
    swift_endAccess();
  }
  return sub_10000DE5C(&v9, a1);
}

uint64_t sub_100052E28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 72;
  swift_beginAccess();
  sub_100019288(v3, (uint64_t)&v7, &qword_100077A48);
  if (!v8)
  {
    sub_100006E84((uint64_t)&v7, &qword_100077A48);
    if (qword_1000763B8 != -1) {
      swift_once();
    }
    uint64_t v4 = qword_100079598;
    uint64_t v8 = type metadata accessor for EffectiveSettings();
    long long v9 = &off_1000727E0;
    *(void *)&long long v7 = v4;
    sub_100019094((uint64_t)&v7, (uint64_t)v6);
    swift_beginAccess();
    swift_retain();
    sub_100053990((uint64_t)v6, v3, &qword_100077A48);
    swift_endAccess();
  }
  return sub_10000DE5C(&v7, a1);
}

uint64_t sub_100052F3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 112;
  swift_beginAccess();
  sub_100019288(v3, (uint64_t)&v6, &qword_100077A40);
  if (!v7)
  {
    sub_100006E84((uint64_t)&v6, &qword_100077A40);
    uint64_t v7 = type metadata accessor for KeyRetriever();
    uint64_t v8 = &protocol witness table for KeyRetriever;
    sub_100006CC0((uint64_t *)&v6);
    KeyRetriever.init()();
    sub_100019094((uint64_t)&v6, (uint64_t)v5);
    swift_beginAccess();
    sub_100053990((uint64_t)v5, v3, &qword_100077A40);
    swift_endAccess();
  }
  return sub_10000DE5C(&v6, a1);
}

uint64_t sub_10005301C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v56 = a2;
    long long v9 = sub_1000539F4();
    uint64_t v11 = v10;
    uint64_t v12 = 0;
    uint64_t v57 = v3;
    uint64_t v13 = (unsigned char *)(v3 + 64);
    do
    {
      uint64_t v14 = v12 + 1;
      if (__OFADD__(v12, 1))
      {
        __break(1u);
        goto LABEL_41;
      }
      if (v11)
      {
        uint64_t v8 = (void (*)(char *, uint64_t))*((void *)v13 - 4);
        uint64_t v15 = *((void *)v13 - 3);
        uint64_t v6 = *((void *)v13 - 2);
        uint64_t v7 = *((void *)v13 - 1);
        char v58 = *v13;
        if (v8 == v9 && v11 == v15)
        {
          uint64_t v8 = v9;
          uint64_t v5 = v11;
          goto LABEL_24;
        }
        uint64_t v17 = *((void *)v13 - 1);
        uint64_t v18 = *((void *)v13 - 2);
        uint64_t v19 = v2;
        int64_t v20 = v9;
        uint64_t v21 = v11;
        char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v11 = v21;
        long long v9 = v20;
        uint64_t v2 = v19;
        if (v22)
        {
          uint64_t v5 = v15;
          uint64_t v6 = v18;
          uint64_t v7 = v17;
LABEL_24:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t result = swift_bridgeObjectRelease();
          a2 = v56;
          uint64_t v4 = (uint64_t)v8;
          LOBYTE(v8) = v58;
          goto LABEL_46;
        }
      }
      ++v12;
      v13 += 40;
    }
    while (v14 != v2);
    uint64_t v55 = v9;
    uint64_t v23 = v11;
    unint64_t v24 = (unsigned char *)(swift_bridgeObjectRetain() + 64);
    unint64_t v25 = _swiftEmptyArrayStorage;
    uint64_t v26 = v2;
    uint64_t v59 = v23;
    do
    {
      if ((*v24 & 1) == 0)
      {
        uint64_t v30 = *((void *)v24 - 4);
        uint64_t v31 = *((void *)v24 - 3);
        uint64_t v32 = *((void *)v24 - 2);
        uint64_t v33 = *((void *)v24 - 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v63[0] = (uint64_t)v25;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100054770(0, v25[2] + 1, 1);
          unint64_t v25 = (void *)v63[0];
        }
        unint64_t v28 = v25[2];
        unint64_t v27 = v25[3];
        if (v28 >= v27 >> 1)
        {
          sub_100054770(v27 > 1, v28 + 1, 1);
          unint64_t v25 = (void *)v63[0];
        }
        void v25[2] = v28 + 1;
        int64_t v29 = &v25[5 * v28];
        uint64_t v29[4] = v30;
        v29[5] = v31;
        v29[6] = v32;
        v29[7] = v33;
        *((unsigned char *)v29 + 64) = 0;
        uint64_t v23 = v59;
      }
      v24 += 40;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease();
    v63[0] = (uint64_t)v25;
    swift_bridgeObjectRetain();
    sub_100054C20(v63);
    swift_release();
    if (*(void *)(v63[0] + 16))
    {
      uint64_t v4 = *(void *)(v63[0] + 32);
      uint64_t v5 = *(void *)(v63[0] + 40);
      uint64_t v6 = *(void *)(v63[0] + 48);
      uint64_t v7 = *(void *)(v63[0] + 56);
      LOBYTE(v8) = *(unsigned char *)(v63[0] + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      goto LABEL_45;
    }
    swift_release();
    swift_bridgeObjectRetain();
    id v34 = (unsigned char *)(v57 + 64);
    uint64_t v35 = _swiftEmptyArrayStorage;
    do
    {
      if (*v34 == 1)
      {
        uint64_t v39 = *((void *)v34 - 4);
        uint64_t v40 = *((void *)v34 - 3);
        uint64_t v41 = *((void *)v34 - 2);
        uint64_t v42 = *((void *)v34 - 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v63[0] = (uint64_t)v35;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100054770(0, v35[2] + 1, 1);
          uint64_t v35 = (void *)v63[0];
        }
        unint64_t v37 = v35[2];
        unint64_t v36 = v35[3];
        if (v37 >= v36 >> 1)
        {
          sub_100054770(v36 > 1, v37 + 1, 1);
          uint64_t v35 = (void *)v63[0];
        }
        void v35[2] = v37 + 1;
        char v38 = &v35[5 * v37];
        Swift::Int v38[4] = v39;
        v38[5] = v40;
        v38[6] = v41;
        v38[7] = v42;
        *((unsigned char *)v38 + 64) = 1;
        uint64_t v23 = v59;
      }
      v34 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
    uint64_t v8 = (void (*)(char *, uint64_t))v35[2];
    uint64_t result = swift_release();
    if (!v8)
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      goto LABEL_45;
    }
    if (v23)
    {
      uint64_t v44 = sub_100052CC0();
      uint64_t v46 = v45;
      uint64_t v47 = v23;
      uint64_t v48 = *(void (**)(void (*)(char *, uint64_t), uint64_t, ValueMetadata *, uint64_t))(v45 + 8);
      int64_t v61 = v44;
      uint64_t v62 = v45;
      sub_100006CC0((uint64_t *)&v60);
      v48(v55, v47, v44, v46);
      sub_10000DE5C(&v60, (uint64_t)v63);
      id v49 = objc_msgSend((id)*sub_100006DCC(v63, v64), "bundleIdentifier");
      if (v49)
      {
        int64_t v50 = v49;
        uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v5 = v51;

        id v52 = objc_msgSend((id)*sub_100006DCC(v63, v64), "teamIdentifier");
        if (v52)
        {
          uint64_t v53 = v52;
          uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v7 = v54;

          uint64_t result = _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v63);
          goto LABEL_44;
        }
LABEL_41:
        swift_bridgeObjectRelease();
      }
      uint64_t result = _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v63);
    }
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
LABEL_44:
    LOBYTE(v8) = 0;
LABEL_45:
    a2 = v56;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    LOBYTE(v8) = 0;
  }
LABEL_46:
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v7;
  *(unsigned char *)(a2 + 32) = (_BYTE)v8;
  return result;
}

uint64_t sub_1000535FC(uint64_t a1, int a2, uint64_t a3, int a4, int a5, void *aBlock, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))
{
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;
  _Block_copy(v10);
  swift_retain();
  a7(a3, v11, v13, v14, v16, a1, v10);
  _Block_release(v10);
  _Block_release(v10);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000537CC(uint64_t a1, int a2, int a3, int a4, int a5, void *aBlock, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))
{
  long long v9 = _Block_copy(aBlock);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;
  _Block_copy(v9);
  swift_retain();
  a7(v10, v12, v13, v15, v16, v18, a1, v9);
  _Block_release(v9);
  _Block_release(v9);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000538CC()
{
  sub_100006E84(v0 + 32, &qword_100077A50);
  sub_100006E84(v0 + 72, &qword_100077A48);
  sub_100006E84(v0 + 112, &qword_100077A40);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ShieldExtension()
{
  return self;
}

unint64_t sub_100053950()
{
  unint64_t result = qword_100077400;
  if (!qword_100077400)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100077400);
  }
  return result;
}

uint64_t sub_100053990(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100003C68(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

void (*sub_1000539F4())(char *, uint64_t)
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v26 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v22 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Application();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  long long v9 = (char *)&v22 - v8;
  sub_100052E28((uint64_t)v27);
  sub_100006DCC(v27, v27[3]);
  sub_100035138((uint64_t)v9);
  _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v27);
  uint64_t v10 = Application.bundleIdentifier.getter();
  if (v11)
  {
    uint64_t v12 = (void (*)(char *, uint64_t))v10;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
  else
  {
    static Logger.shieldAction.getter();
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    int v15 = v14;
    if (os_log_type_enabled(v13, v14))
    {
      int v24 = v15;
      uint64_t v16 = swift_slowAlloc();
      os_log_t v23 = v13;
      uint64_t v17 = (uint8_t *)v16;
      v27[0] = swift_slowAlloc();
      uint64_t v25 = v0;
      *(_DWORD *)uint64_t v17 = 136446210;
      char v22 = v17 + 4;
      sub_10005AB4C(&qword_1000778B0, (void (*)(uint64_t))&type metadata accessor for Application);
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      v27[6] = sub_1000036B0(v18, v19, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
      v12(v7, v3);
      os_log_t v20 = v23;
      _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v24, "No bundle identifier for effective allowed client: %{public}s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v26 + 8))(v2, v25);
    }
    else
    {
      uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
      v12(v7, v3);

      (*(void (**)(char *, uint64_t))(v26 + 8))(v2, v0);
    }
    sub_10005A7FC();
    swift_allocError();
    swift_willThrow();
    v12(v9, v3);
  }
  return v12;
}

uint64_t sub_100053DC8(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100003C68(&qword_100077B38);
  uint64_t v10 = *(void *)(sub_100003C68(&qword_1000764D8) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  _OWORD v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_100003C68(&qword_1000764D8) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100055D60(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t sub_100054038(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100003C68(&qword_1000778A8);
  uint64_t v10 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  _OWORD v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000561C8(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

char *sub_1000542A0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100003C68(&qword_100077AA0);
      uint64_t v10 = (char *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
      unint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[40 * v8 + 32]) {
          memmove(v12, a4 + 32, 40 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      unint64_t v12 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100056320(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1000543C0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100003C68(&qword_100077B50);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100055EBC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1000544D0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100003C68(&qword_100077308);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1000560D4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1000545E0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100003C68(&qword_100077B40);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 32]) {
          memmove(v13, a4 + 32, 8 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100055FC8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000546F0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100054790(a1, a2, a3, (void *)*v3, &qword_100077B68, &qword_100077B70);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100054720(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100054790(a1, a2, a3, (void *)*v3, &qword_100077B48, &qword_100077230);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100054750(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100054938(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100054770(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100054AA8(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100054790(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_100003C68(a5);
    uint64_t v13 = (void *)swift_allocObject();
    size_t v14 = j__malloc_size(v13);
    _OWORD v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  else
  {
    uint64_t v13 = &_swiftEmptyArrayStorage;
  }
  unint64_t v15 = (unint64_t)(v13 + 4);
  unint64_t v16 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v15 >= v16 + 40 * v11) {
      memmove(v13 + 4, a4 + 4, 40 * v11);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 40 * v11 || v15 >= v16 + 40 * v11)
  {
    sub_100003C68(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100054938(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003C68(&qword_100077628);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100054AA8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003C68(&qword_100077AA0);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    int64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 40 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_100054C20(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100055D4C(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_100054C8C(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_100054C8C(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_149;
    }
    if (v3) {
      return sub_100055578(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_157;
  }
  Swift::Int v113 = v3;
  Swift::Int v110 = result;
  uint64_t v117 = v1;
  v108 = a1;
  if (v3 < 2)
  {
    int64_t v7 = (char *)&_swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage + 32;
    if (v3 != 1)
    {
      unint64_t v11 = *((void *)&_swiftEmptyArrayStorage + 2);
      uint64_t v9 = (char *)&_swiftEmptyArrayStorage;
LABEL_114:
      uint64_t v115 = v7;
      if (v11 >= 2)
      {
        uint64_t v101 = *v108;
        do
        {
          unint64_t v102 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_144;
          }
          if (!v101) {
            goto LABEL_156;
          }
          uint64_t v103 = *(void *)&v9[16 * v102 + 32];
          uint64_t v104 = *(void *)&v9[16 * v11 + 24];
          sub_10005573C((char *)(v101 + 40 * v103), (char *)(v101 + 40 * *(void *)&v9[16 * v11 + 16]), v101 + 40 * v104, __dst);
          if (v117) {
            goto LABEL_126;
          }
          if (v104 < v103) {
            goto LABEL_145;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v9 = sub_100055D38((uint64_t)v9);
          }
          if (v102 >= *((void *)v9 + 2)) {
            goto LABEL_146;
          }
          long long v105 = &v9[16 * v102 + 32];
          *(void *)long long v105 = v103;
          *((void *)v105 + 1) = v104;
          unint64_t v106 = *((void *)v9 + 2);
          if (v11 > v106) {
            goto LABEL_147;
          }
          memmove(&v9[16 * v11 + 16], &v9[16 * v11 + 32], 16 * (v106 - v11));
          *((void *)v9 + 2) = v106 - 1;
          unint64_t v11 = v106 - 1;
        }
        while (v106 > 2);
      }
      swift_bridgeObjectRelease();
      *((void *)v115 + 2) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    int64_t v7 = (char *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    *((void *)v7 + 2) = v6;
    __dst = v7 + 32;
  }
  Swift::Int v8 = 0;
  uint64_t v109 = *a1 + 80;
  uint64_t v107 = *a1 - 40;
  uint64_t v9 = (char *)&_swiftEmptyArrayStorage;
  Swift::Int v10 = v113;
  uint64_t v121 = *a1;
  uint64_t v115 = v7;
  while (1)
  {
    Swift::Int v12 = v8;
    Swift::Int v13 = v8 + 1;
    Swift::Int v112 = v8;
    if (v8 + 1 < v10)
    {
      Swift::String v14 = String.lowercased()();
      Swift::String v15 = String.lowercased()();
      if (v14._countAndFlagsBits == v15._countAndFlagsBits && v14._object == v15._object) {
        int v118 = 0;
      }
      else {
        int v118 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Swift::Int v12 = v112;
      Swift::Int v13 = v112 + 2;
      if (v112 + 2 < v113)
      {
        uint64_t v17 = v109 + 40 * v112;
        while (1)
        {
          Swift::Int v18 = v13;
          Swift::String v19 = String.lowercased()();
          Swift::String v20 = String.lowercased()();
          BOOL v21 = v19._countAndFlagsBits == v20._countAndFlagsBits && v19._object == v20._object;
          int v22 = v21 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v118 ^ v22)) {
            break;
          }
          v17 += 40;
          ++v13;
          if (v113 == v18 + 1)
          {
            Swift::Int v13 = v113;
            break;
          }
        }
        Swift::Int v12 = v112;
      }
      if (v118)
      {
        if (v13 < v12) {
          goto LABEL_150;
        }
        if (v12 < v13)
        {
          uint64_t v23 = 40 * v13;
          uint64_t v24 = 40 * v12;
          Swift::Int v25 = v13;
          Swift::Int v26 = v12;
          do
          {
            if (v26 != --v25)
            {
              if (!v121) {
                goto LABEL_155;
              }
              uint64_t v27 = v121 + v24;
              long long v28 = *(_OWORD *)(v121 + v24);
              uint64_t v29 = v121 + v23;
              uint64_t v30 = *(void *)(v121 + v24 + 16);
              uint64_t v31 = *(void *)(v121 + v24 + 24);
              char v32 = *(unsigned char *)(v121 + v24 + 32);
              uint64_t v33 = *(void *)(v121 + v23 - 8);
              long long v34 = *(_OWORD *)(v121 + v23 - 24);
              *(_OWORD *)uint64_t v27 = *(_OWORD *)(v121 + v23 - 40);
              *(_OWORD *)(v27 + 16) = v34;
              *(void *)(v27 + 32) = v33;
              *(_OWORD *)(v29 - 40) = v28;
              *(void *)(v29 - 24) = v30;
              *(void *)(v29 - 16) = v31;
              *(unsigned char *)(v29 - 8) = v32;
            }
            ++v26;
            v23 -= 40;
            v24 += 40;
          }
          while (v26 < v25);
        }
      }
    }
    if (v13 < v113)
    {
      if (__OFSUB__(v13, v12)) {
        goto LABEL_148;
      }
      if (v13 - v12 < v110) {
        break;
      }
    }
LABEL_66:
    if (v13 < v12) {
      goto LABEL_143;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v9 = sub_100055B74(0, *((void *)v9 + 2) + 1, 1, v9);
    }
    unint64_t v51 = *((void *)v9 + 2);
    unint64_t v50 = *((void *)v9 + 3);
    unint64_t v11 = v51 + 1;
    uint64_t v52 = v121;
    if (v51 >= v50 >> 1)
    {
      uint64_t v100 = sub_100055B74((char *)(v50 > 1), v51 + 1, 1, v9);
      uint64_t v52 = v121;
      uint64_t v9 = v100;
    }
    *((void *)v9 + 2) = v11;
    uint64_t v53 = v9 + 32;
    uint64_t v54 = &v9[16 * v51 + 32];
    *(void *)uint64_t v54 = v12;
    *((void *)v54 + 1) = v13;
    Swift::Int v120 = v13;
    if (v51)
    {
      while (1)
      {
        unint64_t v55 = v11 - 1;
        if (v11 >= 4)
        {
          long long v60 = &v53[16 * v11];
          uint64_t v61 = *((void *)v60 - 8);
          uint64_t v62 = *((void *)v60 - 7);
          BOOL v66 = __OFSUB__(v62, v61);
          uint64_t v63 = v62 - v61;
          if (v66) {
            goto LABEL_132;
          }
          uint64_t v65 = *((void *)v60 - 6);
          uint64_t v64 = *((void *)v60 - 5);
          BOOL v66 = __OFSUB__(v64, v65);
          uint64_t v58 = v64 - v65;
          char v59 = v66;
          if (v66) {
            goto LABEL_133;
          }
          unint64_t v67 = v11 - 2;
          int v68 = &v53[16 * v11 - 32];
          uint64_t v70 = *(void *)v68;
          uint64_t v69 = *((void *)v68 + 1);
          BOOL v66 = __OFSUB__(v69, v70);
          uint64_t v71 = v69 - v70;
          if (v66) {
            goto LABEL_135;
          }
          BOOL v66 = __OFADD__(v58, v71);
          uint64_t v72 = v58 + v71;
          if (v66) {
            goto LABEL_138;
          }
          if (v72 >= v63)
          {
            int64_t v90 = &v53[16 * v55];
            uint64_t v92 = *(void *)v90;
            uint64_t v91 = *((void *)v90 + 1);
            BOOL v66 = __OFSUB__(v91, v92);
            uint64_t v93 = v91 - v92;
            if (v66) {
              goto LABEL_142;
            }
            BOOL v83 = v58 < v93;
            goto LABEL_103;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v84 = *((void *)v9 + 4);
            uint64_t v85 = *((void *)v9 + 5);
            BOOL v66 = __OFSUB__(v85, v84);
            uint64_t v77 = v85 - v84;
            char v78 = v66;
            goto LABEL_97;
          }
          uint64_t v57 = *((void *)v9 + 4);
          uint64_t v56 = *((void *)v9 + 5);
          BOOL v66 = __OFSUB__(v56, v57);
          uint64_t v58 = v56 - v57;
          char v59 = v66;
        }
        if (v59) {
          goto LABEL_134;
        }
        unint64_t v67 = v11 - 2;
        long long v73 = &v53[16 * v11 - 32];
        uint64_t v75 = *(void *)v73;
        uint64_t v74 = *((void *)v73 + 1);
        BOOL v76 = __OFSUB__(v74, v75);
        uint64_t v77 = v74 - v75;
        char v78 = v76;
        if (v76) {
          goto LABEL_137;
        }
        uint64_t v79 = &v53[16 * v55];
        uint64_t v81 = *(void *)v79;
        uint64_t v80 = *((void *)v79 + 1);
        BOOL v66 = __OFSUB__(v80, v81);
        uint64_t v82 = v80 - v81;
        if (v66) {
          goto LABEL_140;
        }
        if (__OFADD__(v77, v82)) {
          goto LABEL_141;
        }
        if (v77 + v82 >= v58)
        {
          BOOL v83 = v58 < v82;
LABEL_103:
          if (v83) {
            unint64_t v55 = v67;
          }
          goto LABEL_105;
        }
LABEL_97:
        if (v78) {
          goto LABEL_136;
        }
        uint64_t v86 = &v53[16 * v55];
        uint64_t v88 = *(void *)v86;
        uint64_t v87 = *((void *)v86 + 1);
        BOOL v66 = __OFSUB__(v87, v88);
        uint64_t v89 = v87 - v88;
        if (v66) {
          goto LABEL_139;
        }
        if (v89 < v77) {
          goto LABEL_14;
        }
LABEL_105:
        unint64_t v94 = v55 - 1;
        if (v55 - 1 >= v11)
        {
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
          goto LABEL_152;
        }
        if (!v52) {
          goto LABEL_154;
        }
        unint64_t v95 = &v53[16 * v94];
        uint64_t v96 = *(void *)v95;
        uint64_t v97 = &v53[16 * v55];
        uint64_t v98 = *((void *)v97 + 1);
        sub_10005573C((char *)(v52 + 40 * *(void *)v95), (char *)(v52 + 40 * *(void *)v97), v52 + 40 * v98, __dst);
        if (v117)
        {
LABEL_126:
          swift_bridgeObjectRelease();
          *((void *)v115 + 2) = 0;
          return swift_bridgeObjectRelease();
        }
        if (v98 < v96) {
          goto LABEL_129;
        }
        if (v55 > *((void *)v9 + 2)) {
          goto LABEL_130;
        }
        *(void *)unint64_t v95 = v96;
        *(void *)&v53[16 * v94 + 8] = v98;
        unint64_t v99 = *((void *)v9 + 2);
        if (v55 >= v99) {
          goto LABEL_131;
        }
        uint64_t v117 = 0;
        unint64_t v11 = v99 - 1;
        memmove(&v53[16 * v55], v97 + 16, 16 * (v99 - 1 - v55));
        *((void *)v9 + 2) = v99 - 1;
        int64_t v7 = v115;
        uint64_t v52 = v121;
        if (v99 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v11 = 1;
LABEL_14:
    Swift::Int v10 = v113;
    Swift::Int v8 = v120;
    if (v120 >= v113) {
      goto LABEL_114;
    }
  }
  if (__OFADD__(v12, v110)) {
    goto LABEL_151;
  }
  if (v12 + v110 >= v113) {
    Swift::Int v35 = v113;
  }
  else {
    Swift::Int v35 = v12 + v110;
  }
  if (v35 >= v12)
  {
    if (v13 != v35)
    {
      uint64_t v36 = v107 + 40 * v13;
      Swift::Int v111 = v35;
      do
      {
        Swift::Int v38 = v12;
        uint64_t v114 = v36;
        Swift::Int v119 = v13;
        while (1)
        {
          uint64_t v39 = v36 + 40;
          Swift::String v40 = String.lowercased()();
          Swift::String v41 = String.lowercased()();
          if (v40._countAndFlagsBits == v41._countAndFlagsBits && v40._object == v41._object) {
            break;
          }
          char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v43 & 1) == 0) {
            goto LABEL_54;
          }
          Swift::Int v37 = v119;
          if (!v121) {
            goto LABEL_153;
          }
          long long v44 = *(_OWORD *)(v36 + 40);
          uint64_t v45 = *(void *)(v36 + 56);
          uint64_t v46 = *(void *)(v36 + 64);
          char v47 = *(unsigned char *)(v36 + 72);
          long long v48 = *(_OWORD *)(v36 + 16);
          *(_OWORD *)uint64_t v39 = *(_OWORD *)v36;
          *(_OWORD *)(v36 + 56) = v48;
          uint64_t v49 = *(void *)(v36 + 32);
          *(_OWORD *)uint64_t v36 = v44;
          *(void *)(v36 + 16) = v45;
          *(void *)(v36 + 24) = v46;
          *(unsigned char *)(v36 + 32) = v47;
          v36 -= 40;
          ++v38;
          *(void *)(v39 + 32) = v49;
          if (v119 == v38) {
            goto LABEL_55;
          }
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
LABEL_54:
        Swift::Int v37 = v119;
LABEL_55:
        Swift::Int v13 = v37 + 1;
        uint64_t v36 = v114 + 40;
        Swift::Int v12 = v112;
      }
      while (v13 != v111);
      Swift::Int v13 = v111;
      int64_t v7 = v115;
    }
    goto LABEL_66;
  }
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100055578(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v21 = a3;
  uint64_t v18 = result;
  if (a3 != a2)
  {
    uint64_t v20 = *a4;
    uint64_t v4 = *a4 + 40 * a3 - 40;
LABEL_6:
    uint64_t v5 = v18;
    uint64_t v19 = v4;
    while (1)
    {
      uint64_t v6 = v4 + 40;
      Swift::String v7 = String.lowercased()();
      Swift::String v8 = String.lowercased()();
      if (v7._countAndFlagsBits == v8._countAndFlagsBits && v7._object == v8._object)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        Swift::Int result = swift_bridgeObjectRelease_n();
LABEL_5:
        uint64_t v4 = v19 + 40;
        if (++v21 == a2) {
          return result;
        }
        goto LABEL_6;
      }
      char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Swift::Int result = swift_bridgeObjectRelease();
      if ((v10 & 1) == 0) {
        goto LABEL_5;
      }
      if (!v20) {
        break;
      }
      long long v11 = *(_OWORD *)(v4 + 40);
      uint64_t v12 = *(void *)(v4 + 56);
      uint64_t v13 = *(void *)(v4 + 64);
      char v14 = *(unsigned char *)(v4 + 72);
      long long v15 = *(_OWORD *)(v4 + 16);
      *(_OWORD *)uint64_t v6 = *(_OWORD *)v4;
      *(_OWORD *)(v4 + 56) = v15;
      uint64_t v16 = *(void *)(v4 + 32);
      *(_OWORD *)uint64_t v4 = v11;
      *(void *)(v4 + 16) = v12;
      *(void *)(v4 + 24) = v13;
      *(unsigned char *)(v4 + 32) = v14;
      v4 -= 40;
      ++v5;
      *(void *)(v6 + 32) = v16;
      if (v21 == v5) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10005573C(char *a1, char *__src, unint64_t a3, char *__dst)
{
  uint64_t v5 = __src;
  uint64_t v6 = __src - a1;
  uint64_t v7 = (__src - a1) / 40;
  uint64_t v8 = a3 - (void)__src;
  uint64_t v9 = (uint64_t)(a3 - (void)__src) / 40;
  uint64_t v45 = a1;
  long long v44 = __dst;
  if (v7 >= v9)
  {
    if (v8 >= -39)
    {
      uint64_t v23 = 40 * v9;
      if (__dst != __src || &__src[v23] <= __dst) {
        memmove(__dst, __src, 40 * v9);
      }
      Swift::Int v37 = __dst;
      uint64_t v24 = &__dst[v23];
      char v43 = &__dst[v23];
      uint64_t v45 = v5;
      if (a1 < v5 && v8 >= 40)
      {
        unint64_t v25 = a3 - 40;
        Swift::Int v26 = v5;
        do
        {
          Swift::String v41 = v24;
          uint64_t v27 = v24 - 40;
          v26 -= 40;
          Swift::String v28 = String.lowercased()();
          Swift::String v29 = String.lowercased()();
          if (v28._countAndFlagsBits == v29._countAndFlagsBits && v28._object == v29._object) {
            char v39 = 0;
          }
          else {
            char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          uint64_t v31 = (char *)(v25 + 40);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v39)
          {
            uint64_t v24 = v41;
            if (v31 != v5 || v25 >= (unint64_t)v5)
            {
              long long v32 = *(_OWORD *)v26;
              long long v33 = *((_OWORD *)v26 + 1);
              *(void *)(v25 + 32) = *((void *)v26 + 4);
              *(_OWORD *)unint64_t v25 = v32;
              *(_OWORD *)(v25 + 16) = v33;
            }
            uint64_t v45 = v26;
          }
          else
          {
            char v43 = v27;
            Swift::Int v26 = v5;
            if (v31 < v41 || v25 >= (unint64_t)v41 || v31 != v41)
            {
              long long v34 = *(_OWORD *)v27;
              long long v35 = *((_OWORD *)v27 + 1);
              *(void *)(v25 + 32) = *((void *)v27 + 4);
              *(_OWORD *)unint64_t v25 = v34;
              *(_OWORD *)(v25 + 16) = v35;
            }
            uint64_t v24 = v27;
          }
          if (v26 <= a1) {
            break;
          }
          v25 -= 40;
          uint64_t v5 = v26;
        }
        while (v24 > v37);
      }
LABEL_50:
      sub_100055C70((void **)&v45, (const void **)&v44, &v43);
      return 1;
    }
  }
  else if (v6 >= -39)
  {
    size_t v10 = 40 * v7;
    if (__dst != a1 || &a1[v10] <= __dst) {
      memmove(__dst, a1, v10);
    }
    Swift::String v40 = &__dst[v10];
    char v43 = &__dst[v10];
    if ((unint64_t)v5 < a3 && v6 >= 40)
    {
      long long v11 = __dst;
      uint64_t v12 = a1;
      while (1)
      {
        uint64_t v13 = v5;
        Swift::String v14 = String.lowercased()();
        Swift::String v15 = String.lowercased()();
        if (v14._countAndFlagsBits == v15._countAndFlagsBits && v14._object == v15._object) {
          break;
        }
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v17 & 1) == 0) {
          goto LABEL_19;
        }
        uint64_t v18 = v13 + 40;
        if (v12 < v13 || v12 >= v18 || v12 != v13)
        {
          long long v19 = *(_OWORD *)v13;
          long long v20 = *((_OWORD *)v13 + 1);
          *((void *)v12 + 4) = *((void *)v13 + 4);
          *(_OWORD *)uint64_t v12 = v19;
          *((_OWORD *)v12 + 1) = v20;
        }
LABEL_22:
        v12 += 40;
        if (v11 < v40)
        {
          uint64_t v5 = v18;
          if ((unint64_t)v18 < a3) {
            continue;
          }
        }
        uint64_t v45 = v12;
        goto LABEL_50;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_19:
      if (v12 != v11)
      {
        long long v21 = *(_OWORD *)v11;
        long long v22 = *((_OWORD *)v11 + 1);
        *((void *)v12 + 4) = *((void *)v11 + 4);
        *(_OWORD *)uint64_t v12 = v21;
        *((_OWORD *)v12 + 1) = v22;
      }
      v11 += 40;
      long long v44 = v11;
      uint64_t v18 = v13;
      goto LABEL_22;
    }
    goto LABEL_50;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100055B74(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003C68(&qword_100077AB0);
    size_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    size_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  Swift::String v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100055C70(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -40)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    size_t v6 = 40 * (v4 / 40);
    if (result != v3 || result >= &v3[v6])
    {
      return (char *)memmove(result, v3, v6);
    }
  }
  return result;
}

char *sub_100055D38(uint64_t a1)
{
  return sub_100055B74(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100055D4C(uint64_t a1)
{
  return sub_100054AA8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100055D60(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(sub_100003C68(&qword_1000764D8) - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100055EBC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_100003C68(&qword_100077B58);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100055FC8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_100003C68(&qword_100076FB8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000560D4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000561C8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(type metadata accessor for URL() - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100056320(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100056418(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = a2;
  uint64_t v47 = a1;
  uint64_t v3 = sub_100003C68(&qword_100077A78);
  __chkstk_darwin(v3 - 8);
  uint64_t v57 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100003C68(&qword_100077A80);
  unint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v59 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100003C68(&qword_100076D40);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100003C68(&qword_100076D38);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v55 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000763C0 != -1) {
LABEL_38:
  }
    swift_once();
  uint64_t v14 = qword_1000795A0;
  swift_retain();
  uint64_t v15 = sub_100003C68(&qword_100077A60);
  uint64_t v16 = sub_10005AA1C(&qword_100077A88, &qword_100077A60, (void (*)(void))sub_10005A850);
  uint64_t v58 = v2;
  uint64_t v53 = v16;
  uint64_t v54 = v15;
  uint64_t v17 = dispatch thunk of SettingMetadataProtocol.name.getter();
  uint64_t v2 = (void *)v14;
  uint64_t v19 = sub_10003F850(v17, v18);
  swift_release();
  swift_bridgeObjectRelease();
  int64_t v20 = 0;
  uint64_t v21 = *(void *)(v19 + 64);
  uint64_t v60 = v19 + 64;
  uint64_t v22 = 1 << *(unsigned char *)(v19 + 32);
  uint64_t v23 = -1;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  unint64_t v24 = v23 & v21;
  int64_t v61 = (unint64_t)(v22 + 63) >> 6;
  uint64_t v65 = (unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  uint64_t v52 = (void (**)(char *))(v12 + 32);
  unint64_t v51 = (void (**)(void *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  unint64_t v50 = (void (**)(uint64_t, uint64_t))(v12 + 8);
  uint64_t v46 = (void (**)(unint64_t, void *, uint64_t))(v6 + 32);
  uint64_t v45 = (void (**)(unint64_t, uint64_t))(v6 + 8);
  long long v44 = (char *)_swiftEmptyArrayStorage;
  uint64_t v56 = v5;
  uint64_t v66 = v11;
  uint64_t v49 = v19;
  while (v24)
  {
    unint64_t v25 = __clz(__rbit64(v24));
    v24 &= v24 - 1;
    int64_t v67 = v20;
    unint64_t v26 = v25 | (v20 << 6);
LABEL_24:
    uint64_t v31 = *(void *)(v19 + 56);
    uint64_t v32 = *(void *)(v19 + 48) + 40 * v26;
    uint64_t v12 = *(void *)(v32 + 8);
    uint64_t v62 = *(void *)v32;
    uint64_t v33 = *(void *)(v32 + 24);
    uint64_t v63 = *(void *)(v32 + 16);
    int v64 = *(unsigned __int8 *)(v32 + 32);
    uint64_t v2 = *(void **)(v31 + 8 * v26);
    uint64_t v11 = type metadata accessor for WebDomain();
    unint64_t v6 = sub_10005AB4C(&qword_100076DA8, (void (*)(uint64_t))&type metadata accessor for WebDomain);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v34 = v2;
    static ShieldSettings.EffectiveActivityCategoryPolicy<>.value(from:)();
    uint64_t v5 = v66;
    if ((*v65)(v10, 1, v66) == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      sub_100006E84((uint64_t)v10, &qword_100076D40);
      int64_t v20 = v67;
    }
    else
    {
      long long v35 = v10;
      uint64_t v36 = v55;
      Swift::Int v37 = v35;
      (*v52)(v55);
      dispatch thunk of SettingMetadataProtocol.combineOperator.getter();
      sub_100003C68(&qword_100077A98);
      uint64_t v11 = v56;
      uint64_t v2 = v57;
      char v38 = swift_dynamicCast();
      char v39 = *v51;
      unint64_t v6 = (unint64_t)v59;
      if (v38)
      {
        v39(v2, 0, 1, v11);
        (*v46)(v6, v2, v11);
        uint64_t v2 = (void *)v6;
        uint64_t v5 = (uint64_t)v36;
        if ((ActivityCategoryPolicyCombineOperator.currentValue(_:restricts:including:)() & 1) == 0)
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*v45)(v6, v11);
          (*v50)((uint64_t)v36, v66);
          goto LABEL_29;
        }
        uint64_t v10 = v37;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v44 = sub_1000542A0(0, *((void *)v44 + 2) + 1, 1, v44);
        }
        uint64_t v19 = v49;
        unint64_t v6 = *((void *)v44 + 2);
        unint64_t v40 = *((void *)v44 + 3);
        uint64_t v2 = (void *)(v6 + 1);
        if (v6 >= v40 >> 1) {
          long long v44 = sub_1000542A0((char *)(v40 > 1), v6 + 1, 1, v44);
        }
        Swift::String v41 = v44;
        *((void *)v44 + 2) = v2;
        uint64_t v42 = &v41[40 * v6];
        *((void *)v42 + 4) = v62;
        *((void *)v42 + 5) = v12;
        *((void *)v42 + 6) = v63;
        *((void *)v42 + 7) = v33;
        v42[64] = v64;

        (*v45)((unint64_t)v59, v11);
        (*v50)(v5, v66);
        int64_t v20 = v67;
      }
      else
      {
        v39(v2, 1, 1, v11);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*v50)((uint64_t)v36, v5);
        sub_100006E84((uint64_t)v2, &qword_100077A78);
LABEL_29:
        uint64_t v10 = v37;
        uint64_t v19 = v49;
        int64_t v20 = v67;
      }
    }
  }
  int64_t v27 = v20 + 1;
  if (__OFADD__(v20, 1))
  {
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v27 >= v61) {
    goto LABEL_35;
  }
  unint64_t v28 = *(void *)(v60 + 8 * v27);
  int64_t v29 = v20 + 1;
  if (v28) {
    goto LABEL_23;
  }
  int64_t v29 = v20 + 2;
  if (v20 + 2 >= v61) {
    goto LABEL_35;
  }
  unint64_t v28 = *(void *)(v60 + 8 * v29);
  if (v28) {
    goto LABEL_23;
  }
  int64_t v29 = v20 + 3;
  if (v20 + 3 >= v61) {
    goto LABEL_35;
  }
  unint64_t v28 = *(void *)(v60 + 8 * v29);
  if (v28) {
    goto LABEL_23;
  }
  int64_t v29 = v20 + 4;
  if (v20 + 4 >= v61) {
    goto LABEL_35;
  }
  unint64_t v28 = *(void *)(v60 + 8 * v29);
  if (v28)
  {
LABEL_23:
    unint64_t v24 = (v28 - 1) & v28;
    int64_t v67 = v29;
    unint64_t v26 = __clz(__rbit64(v28)) + (v29 << 6);
    goto LABEL_24;
  }
  uint64_t v30 = v20 + 5;
  if (v20 + 5 < v61)
  {
    unint64_t v28 = *(void *)(v60 + 8 * v30);
    if (!v28)
    {
      while (1)
      {
        int64_t v29 = v30 + 1;
        if (__OFADD__(v30, 1)) {
          goto LABEL_37;
        }
        if (v29 >= v61) {
          goto LABEL_35;
        }
        unint64_t v28 = *(void *)(v60 + 8 * v29);
        ++v30;
        if (v28) {
          goto LABEL_23;
        }
      }
    }
    int64_t v29 = v20 + 5;
    goto LABEL_23;
  }
LABEL_35:
  swift_release();
  return v44;
}

uint64_t sub_100056BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void (**a7)(const void *, void, void *))
{
  id v79 = a6;
  uint64_t v72 = a4;
  uint64_t v73 = a5;
  uint64_t v62 = a1;
  uint64_t v10 = sub_100003C68(&qword_100076DB0);
  uint64_t v63 = *(void *)(v10 - 8);
  uint64_t v64 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  int v68 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v65 = (char *)&v62 - v13;
  uint64_t v14 = sub_100003C68(&qword_100076D58);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_100003C68(&qword_100077AE0);
  uint64_t v74 = *(char **)(v76 - 8);
  __chkstk_darwin(v76);
  uint64_t v70 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for ActivityCategory();
  uint64_t v71 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  uint64_t v69 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100003C68(&qword_100077B08);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Application();
  uint64_t v80 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  unint64_t v25 = (char *)&v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = swift_allocObject();
  uint64_t v77 = a7;
  uint64_t v78 = v26;
  *(void *)(v26 + 16) = a7;
  _Block_copy(a7);
  swift_bridgeObjectRetain();
  uint64_t v66 = a2;
  uint64_t v67 = a3;
  Application.init(bundleIdentifier:)();
  static ShieldSettings.applications.getter();
  int64_t v27 = sub_10005178C((uint64_t)v25);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  sub_10005301C((uint64_t)v27, (uint64_t)v88);
  uint64_t v29 = v88[0];
  uint64_t v28 = v88[1];
  uint64_t v31 = (char *)v88[2];
  uint64_t v30 = v88[3];
  swift_bridgeObjectRelease();
  sub_10005A720((uint64_t)v88, (uint64_t)v94);
  if (v95)
  {
    uint64_t v70 = v31;
    uint64_t v71 = v95;
    uint64_t v75 = v23;
    uint64_t v76 = v30;
    uint64_t v74 = v25;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v32 = (uint64_t)v69;
    ActivityCategory.init(identifier:)();
    uint64_t v33 = v70;
    static ShieldSettings.applicationCategories.getter();
    uint64_t v34 = v80;
    (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v16, v25, v23);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v16, 0, 1, v23);
    long long v35 = sub_1000522A0(v32, (uint64_t)v16);
    sub_100006E84((uint64_t)v16, &qword_100076D58);
    (*((void (**)(char *, uint64_t))v74 + 1))(v33, v76);
    sub_10005301C((uint64_t)v35, (uint64_t)v89);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v32, v75);
    sub_10005A720((uint64_t)v89, (uint64_t)&v90);
    uint64_t v28 = v91;
    if (!v91)
    {
      sub_10005A7FC();
      swift_allocError();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v25, v23);
      uint64_t v56 = v77;
      swift_errorRetain();
      uint64_t v57 = (void *)_convertErrorToNSError(_:)();
      v56[2](v56, 0, v57);

      swift_errorRelease();
      swift_errorRelease();
      return swift_release();
    }
    uint64_t v74 = v25;
    uint64_t v75 = v23;
    uint64_t v29 = v90;
    uint64_t v70 = v92;
    uint64_t v71 = 0;
    uint64_t v76 = v93;
  }
  uint64_t v36 = sub_100052CC0();
  uint64_t v38 = v37;
  char v39 = *(void (**)(uint64_t, uint64_t, ValueMetadata *, uint64_t))(v37 + 8);
  v87[3] = (uint64_t)v36;
  v87[4] = v37;
  sub_100006CC0(v87);
  swift_bridgeObjectRetain();
  v39(v29, v28, v36, v38);
  sub_100052CE8((uint64_t)&v81);
  sub_100006DCC(&v81, (uint64_t)v84);
  uint64_t v40 = swift_allocObject();
  uint64_t v41 = v78;
  *(void *)(v40 + 16) = sub_10003309C;
  *(void *)(v40 + 24) = v41;
  swift_retain();
  uint64_t v42 = (void *)sub_100025D64(v87, (uint64_t)sub_10005AC78, v40);
  uint64_t v44 = v43;
  id v79 = v42;
  swift_release();
  _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)&v81);
  swift_bridgeObjectRetain();
  sub_100052F3C((uint64_t)&v81);
  type metadata accessor for TokenEncoder();
  swift_allocObject();
  TokenEncoder.init(teamIdentifier:keyRetriever:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v71)
  {
    uint64_t v45 = v68;
    dispatch thunk of TokenEncoder.encode(bundleIdentifier:)();
    uint64_t v46 = v80;
    uint64_t v47 = v44;
    uint64_t v48 = v64;
    uint64_t v49 = Token.data.getter();
    unint64_t v50 = v45;
    unint64_t v52 = v51;
    v53.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10004B824(v49, v52);
    uint64_t v85 = sub_10003309C;
    uint64_t v86 = v41;
    uint64_t v81 = _NSConcreteStackBlock;
    uint64_t v82 = 1107296256;
    BOOL v83 = sub_100052A80;
    uint64_t v84 = &unk_100072D40;
    uint64_t v54 = _Block_copy(&v81);
    swift_retain();
    swift_release();
    objc_msgSend(v79, "handleWithAction:applicationTokenData:replyHandler:", v62, v53.super.isa, v54, v62);
  }
  else
  {
    unint64_t v55 = v65;
    dispatch thunk of TokenEncoder.encode(categoryIdentifier:)();
    uint64_t v46 = v80;
    uint64_t v47 = v44;
    uint64_t v48 = v64;
    uint64_t v59 = Token.data.getter();
    unint64_t v50 = v55;
    unint64_t v61 = v60;
    v53.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10004B824(v59, v61);
    uint64_t v85 = sub_10003309C;
    uint64_t v86 = v41;
    uint64_t v81 = _NSConcreteStackBlock;
    uint64_t v82 = 1107296256;
    BOOL v83 = sub_100052A80;
    uint64_t v84 = &unk_100072D68;
    uint64_t v54 = _Block_copy(&v81);
    swift_retain();
    swift_release();
    objc_msgSend(v79, "handleWithAction:categoryTokenData:replyHandler:", v62, v53.super.isa, v54, v62);
  }
  _Block_release(v54);

  (*(void (**)(char *, uint64_t))(v63 + 8))(v50, v48);
  if (v47)
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v74, v75);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v74, v75);
    swift_unknownObjectRelease();
    swift_release();
  }
  _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v87);
  return swift_release();
}

uint64_t sub_100057610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(const void *, void, void *))
{
  uint64_t v56 = a4;
  uint64_t v46 = a1;
  uint64_t v48 = sub_100003C68(&qword_100076DB0);
  uint64_t v47 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  unint64_t v51 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100003C68(&qword_100076D58);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100003C68(&qword_100077AE0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ActivityCategory();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = swift_allocObject();
  *(void *)(v57 + 16) = a5;
  uint64_t v54 = a5;
  _Block_copy(a5);
  swift_bridgeObjectRetain();
  uint64_t v49 = a2;
  uint64_t v50 = a3;
  ActivityCategory.init(identifier:)();
  static ShieldSettings.applicationCategories.getter();
  uint64_t v20 = type metadata accessor for Application();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v11, 1, 1, v20);
  unint64_t v55 = v19;
  uint64_t v21 = sub_1000522A0((uint64_t)v19, (uint64_t)v11);
  sub_100006E84((uint64_t)v11, &qword_100076D58);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  sub_10005301C((uint64_t)v21, (uint64_t)v63);
  swift_bridgeObjectRelease();
  sub_10005A720((uint64_t)v63, (uint64_t)&v64);
  uint64_t v22 = v65;
  if (v65)
  {
    uint64_t v52 = v17;
    uint64_t v53 = v16;
    uint64_t v23 = v64;
    uint64_t v24 = sub_100052CC0();
    uint64_t v26 = v25;
    int64_t v27 = *(void (**)(uint64_t, uint64_t, ValueMetadata *, uint64_t))(v25 + 8);
    v62[3] = (uint64_t)v24;
    v62[4] = v25;
    sub_100006CC0(v62);
    swift_bridgeObjectRetain();
    v27(v23, v22, v24, v26);
    sub_100052CE8((uint64_t)aBlock);
    sub_100006DCC(aBlock, (uint64_t)v59);
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = sub_10003309C;
    *(void *)(v28 + 24) = v57;
    swift_retain();
    uint64_t v29 = sub_100025D64(v62, (uint64_t)sub_10005AE48, v28);
    uint64_t v31 = v30;
    swift_release();
    _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)aBlock);
    swift_bridgeObjectRetain();
    sub_100052F3C((uint64_t)aBlock);
    type metadata accessor for TokenEncoder();
    swift_allocObject();
    TokenEncoder.init(teamIdentifier:keyRetriever:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v32 = v51;
    dispatch thunk of TokenEncoder.encode(categoryIdentifier:)();
    uint64_t v36 = v48;
    uint64_t v37 = Token.data.getter();
    unint64_t v39 = v38;
    uint64_t v40 = (void *)v29;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10004B824(v37, v39);
    unint64_t v60 = sub_10003309C;
    uint64_t v61 = v57;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100052A80;
    uint64_t v59 = &unk_100072CC8;
    uint64_t v42 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    [v40 handleWithAction:v46 categoryTokenData:isa replyHandler:v42];
    _Block_release(v42);

    if (v31)
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      OS_dispatch_source.cancel()();
      swift_unknownObjectRelease();
      swift_release();
      swift_unknownObjectRelease_n();
    }
    else
    {
      swift_unknownObjectRelease();
      swift_release();
    }
    uint64_t v43 = v53;
    uint64_t v44 = v52;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v32, v36);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v55, v43);
    _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v62);
  }
  else
  {
    sub_10005A7FC();
    swift_allocError();
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v55, v16);
    uint64_t v33 = v54;
    swift_errorRetain();
    uint64_t v34 = (void *)_convertErrorToNSError(_:)();
    v33[2](v33, 0, v34);

    swift_errorRelease();
    swift_errorRelease();
  }
  return swift_release();
}

uint64_t sub_100057E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void (**a7)(const void *, void, void *))
{
  id v79 = a6;
  uint64_t v72 = a4;
  uint64_t v73 = a5;
  uint64_t v62 = a1;
  uint64_t v10 = sub_100003C68(&qword_100076DB0);
  uint64_t v63 = *(void *)(v10 - 8);
  uint64_t v64 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  int v68 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v65 = (char *)&v62 - v13;
  uint64_t v14 = sub_100003C68(&qword_100077A58);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_100003C68(&qword_100077A60);
  uint64_t v74 = *(char **)(v76 - 8);
  __chkstk_darwin(v76);
  uint64_t v70 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for ActivityCategory();
  uint64_t v71 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  uint64_t v69 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100003C68(&qword_100077A68);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for WebDomain();
  uint64_t v80 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = swift_allocObject();
  uint64_t v77 = a7;
  uint64_t v78 = v26;
  *(void *)(v26 + 16) = a7;
  _Block_copy(a7);
  swift_bridgeObjectRetain();
  uint64_t v66 = a2;
  uint64_t v67 = a3;
  WebDomain.init(domain:)();
  static ShieldSettings.webDomains.getter();
  int64_t v27 = sub_100051CFC((uint64_t)v25, 1);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  sub_10005301C((uint64_t)v27, (uint64_t)v88);
  uint64_t v29 = v88[0];
  uint64_t v28 = v88[1];
  uint64_t v31 = (char *)v88[2];
  uint64_t v30 = v88[3];
  swift_bridgeObjectRelease();
  sub_10005A720((uint64_t)v88, (uint64_t)v94);
  if (v95)
  {
    uint64_t v70 = v31;
    uint64_t v71 = v95;
    uint64_t v75 = v23;
    uint64_t v76 = v30;
    uint64_t v74 = v25;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v32 = (uint64_t)v69;
    ActivityCategory.init(identifier:)();
    uint64_t v33 = v70;
    static ShieldSettings.webDomainCategories.getter();
    uint64_t v34 = v80;
    (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v16, v25, v23);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v16, 0, 1, v23);
    long long v35 = sub_100056418(v32, (uint64_t)v16);
    sub_100006E84((uint64_t)v16, &qword_100077A58);
    (*((void (**)(char *, uint64_t))v74 + 1))(v33, v76);
    sub_10005301C((uint64_t)v35, (uint64_t)v89);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v32, v75);
    sub_10005A720((uint64_t)v89, (uint64_t)&v90);
    uint64_t v28 = v91;
    if (!v91)
    {
      sub_10005A7FC();
      swift_allocError();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v25, v23);
      uint64_t v56 = v77;
      swift_errorRetain();
      uint64_t v57 = (void *)_convertErrorToNSError(_:)();
      v56[2](v56, 0, v57);

      swift_errorRelease();
      swift_errorRelease();
      return swift_release();
    }
    uint64_t v74 = v25;
    uint64_t v75 = v23;
    uint64_t v29 = v90;
    uint64_t v70 = v92;
    uint64_t v71 = 0;
    uint64_t v76 = v93;
  }
  uint64_t v36 = sub_100052CC0();
  uint64_t v38 = v37;
  unint64_t v39 = *(void (**)(uint64_t, uint64_t, ValueMetadata *, uint64_t))(v37 + 8);
  v87[3] = (uint64_t)v36;
  v87[4] = v37;
  sub_100006CC0(v87);
  swift_bridgeObjectRetain();
  v39(v29, v28, v36, v38);
  sub_100052CE8((uint64_t)&v81);
  sub_100006DCC(&v81, (uint64_t)v84);
  uint64_t v40 = swift_allocObject();
  uint64_t v41 = v78;
  *(void *)(v40 + 16) = sub_100021D24;
  *(void *)(v40 + 24) = v41;
  swift_retain();
  uint64_t v42 = (void *)sub_100025D64(v87, (uint64_t)sub_10005AE48, v40);
  uint64_t v44 = v43;
  id v79 = v42;
  swift_release();
  _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)&v81);
  swift_bridgeObjectRetain();
  sub_100052F3C((uint64_t)&v81);
  type metadata accessor for TokenEncoder();
  swift_allocObject();
  TokenEncoder.init(teamIdentifier:keyRetriever:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v71)
  {
    uint64_t v45 = v68;
    dispatch thunk of TokenEncoder.encode(webDomain:)();
    uint64_t v46 = v80;
    uint64_t v47 = v44;
    uint64_t v48 = v64;
    uint64_t v49 = Token.data.getter();
    uint64_t v50 = v45;
    unint64_t v52 = v51;
    v53.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10004B824(v49, v52);
    uint64_t v85 = sub_100021D24;
    uint64_t v86 = v41;
    uint64_t v81 = _NSConcreteStackBlock;
    uint64_t v82 = 1107296256;
    BOOL v83 = sub_100052A80;
    uint64_t v84 = &unk_100072C28;
    uint64_t v54 = _Block_copy(&v81);
    swift_retain();
    swift_release();
    objc_msgSend(v79, "handleWithAction:webDomainTokenData:replyHandler:", v62, v53.super.isa, v54, v62);
  }
  else
  {
    unint64_t v55 = v65;
    dispatch thunk of TokenEncoder.encode(categoryIdentifier:)();
    uint64_t v46 = v80;
    uint64_t v47 = v44;
    uint64_t v48 = v64;
    uint64_t v59 = Token.data.getter();
    uint64_t v50 = v55;
    unint64_t v61 = v60;
    v53.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10004B824(v59, v61);
    uint64_t v85 = sub_100021D24;
    uint64_t v86 = v41;
    uint64_t v81 = _NSConcreteStackBlock;
    uint64_t v82 = 1107296256;
    BOOL v83 = sub_100052A80;
    uint64_t v84 = &unk_100072C50;
    uint64_t v54 = _Block_copy(&v81);
    swift_retain();
    swift_release();
    objc_msgSend(v79, "handleWithAction:categoryTokenData:replyHandler:", v62, v53.super.isa, v54, v62);
  }
  _Block_release(v54);

  (*(void (**)(char *, uint64_t))(v63 + 8))(v50, v48);
  if (v47)
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v74, v75);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v74, v75);
    swift_unknownObjectRelease();
    swift_release();
  }
  _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v87);
  return swift_release();
}

uint64_t sub_10005882C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (**a8)(const void *, void, void *))
{
  uint64_t v94 = a7;
  uint64_t v74 = a5;
  uint64_t v75 = a6;
  uint64_t v86 = a3;
  uint64_t v87 = a4;
  uint64_t v11 = sub_100003C68(&qword_100076DB0);
  uint64_t v76 = *(void *)(v11 - 8);
  uint64_t v77 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  id v79 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v78 = (char *)&v74 - v14;
  uint64_t v15 = sub_100003C68(&qword_100076D58);
  __chkstk_darwin(v15 - 8);
  BOOL v83 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = sub_100003C68(&qword_100077AE0);
  uint64_t v89 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  uint64_t v85 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for ActivityCategory();
  uint64_t v88 = *(char **)(v90 - 8);
  __chkstk_darwin(v90);
  uint64_t v84 = (char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100003C68(&qword_100077B08);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Application();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v74 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = swift_allocObject();
  uint64_t v92 = a8;
  uint64_t v93 = v27;
  *(void *)(v27 + 16) = a8;
  _Block_copy(a8);
  swift_bridgeObjectRetain();
  uint64_t v80 = a1;
  uint64_t v81 = a2;
  uint64_t v28 = v94;
  Application.init(bundleIdentifier:)();
  static ShieldSettings.applications.getter();
  uint64_t v29 = sub_10005178C((uint64_t)v26);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  sub_10005301C((uint64_t)v29, (uint64_t)v102);
  uint64_t v31 = v102[0];
  uint64_t v30 = v102[1];
  uint64_t v32 = v102[3];
  uint64_t v82 = v102[2];
  swift_bridgeObjectRelease();
  sub_10005A720((uint64_t)v102, (uint64_t)v108);
  if (v109)
  {
    uint64_t v90 = v24;
    uint64_t v91 = v32;
    uint64_t v85 = v109;
    uint64_t v88 = v26;
    uint64_t v89 = v23;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v33 = (uint64_t)v84;
    ActivityCategory.init(identifier:)();
    uint64_t v34 = v85;
    static ShieldSettings.applicationCategories.getter();
    uint64_t v35 = v24;
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
    id v37 = v83;
    v36(v83, v26, v23);
    (*(void (**)(id, void, uint64_t, uint64_t))(v35 + 56))(v37, 0, 1, v23);
    uint64_t v38 = sub_1000522A0(v33, (uint64_t)v37);
    sub_100006E84((uint64_t)v37, &qword_100076D58);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v34, v91);
    uint64_t v39 = v28;
    sub_10005301C((uint64_t)v38, (uint64_t)v103);
    swift_bridgeObjectRelease();
    (*((void (**)(uint64_t, uint64_t))v88 + 1))(v33, v90);
    sub_10005A720((uint64_t)v103, (uint64_t)&v104);
    uint64_t v30 = v105;
    uint64_t v40 = v35;
    if (!v105)
    {
      sub_10005A7FC();
      swift_allocError();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v26, v23);
      uint64_t v62 = v92;
      swift_errorRetain();
      uint64_t v63 = (void *)_convertErrorToNSError(_:)();
      v62[2](v62, 0, v63);

      swift_errorRelease();
      swift_errorRelease();
      return swift_release();
    }
    uint64_t v85 = 0;
    uint64_t v88 = v26;
    uint64_t v89 = v23;
    uint64_t v31 = v104;
    uint64_t v82 = v106;
    uint64_t v90 = v40;
    uint64_t v91 = v107;
    uint64_t v28 = v39;
  }
  uint64_t v41 = sub_100052CC0();
  uint64_t v43 = v42;
  uint64_t v44 = v28;
  uint64_t v45 = *(void (**)(uint64_t, uint64_t, ValueMetadata *, uint64_t))(v42 + 8);
  v101[3] = (uint64_t)v41;
  v101[4] = v42;
  sub_100006CC0(v101);
  swift_bridgeObjectRetain();
  v45(v31, v30, v41, v43);
  sub_100052CE8((uint64_t)&v95);
  sub_100006DCC(&v95, (uint64_t)v98);
  uint64_t v46 = swift_allocObject();
  uint64_t v47 = v93;
  *(void *)(v46 + 16) = sub_10003310C;
  *(void *)(v46 + 24) = v47;
  swift_retain();
  BOOL v83 = (char *)sub_100025E30(v101, (uint64_t)sub_10005AE44, v46);
  uint64_t v84 = v48;
  swift_release();
  _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)&v95);
  swift_bridgeObjectRetain();
  sub_100052F3C((uint64_t)&v95);
  type metadata accessor for TokenEncoder();
  swift_allocObject();
  uint64_t v94 = TokenEncoder.init(teamIdentifier:keyRetriever:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v50 = *(void *)(v44 + 24);
  unint64_t v51 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(v50 + 8);
  uint64_t v98 = *(void **)(v44 + 16);
  uint64_t v49 = v98;
  unint64_t v99 = (uint64_t (*)())v50;
  sub_100006CC0((uint64_t *)&v95);
  uint64_t v52 = v81;
  swift_bridgeObjectRetain();
  v51(v80, v52, v49, v50);
  (*(void (**)(void *, uint64_t))(v50 + 56))(v49, v50);
  _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)&v95);
  if (v85)
  {
    dispatch thunk of TokenEncoder.encode(bundleIdentifier:)();
    uint64_t v53 = v90;
    NSString v54 = String._bridgeToObjectiveC()();
    uint64_t v55 = v77;
    uint64_t v56 = Token.data.getter();
    unint64_t v58 = v57;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10004B824(v56, v58);
    NSString v60 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unint64_t v99 = sub_10003310C;
    uint64_t v100 = v47;
    uint64_t v95 = _NSConcreteStackBlock;
    uint64_t v96 = 1107296256;
    uint64_t v97 = sub_100052B7C;
    uint64_t v98 = &unk_100072B88;
    unint64_t v61 = _Block_copy(&v95);
    swift_retain();
    swift_release();
    objc_msgSend(v83, "fetchConfigurationDataForApplication:tokenData:localizedDisplayName:replyHandler:", v54, isa, v60, v61, v74, v75);
    _Block_release(v61);

    (*(void (**)(char *, uint64_t))(v76 + 8))(v79, v55);
  }
  else
  {
    dispatch thunk of TokenEncoder.encode(categoryIdentifier:)();
    uint64_t v53 = v90;
    NSString v65 = String._bridgeToObjectiveC()();
    NSString v66 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v67 = v77;
    uint64_t v68 = Token.data.getter();
    unint64_t v70 = v69;
    Class v71 = Data._bridgeToObjectiveC()().super.isa;
    sub_10004B824(v68, v70);
    NSString v72 = String._bridgeToObjectiveC()();
    unint64_t v99 = sub_10003310C;
    uint64_t v100 = v47;
    uint64_t v95 = _NSConcreteStackBlock;
    uint64_t v96 = 1107296256;
    uint64_t v97 = sub_100052B7C;
    uint64_t v98 = &unk_100072BB0;
    uint64_t v73 = _Block_copy(&v95);
    swift_retain();
    swift_release();
    objc_msgSend(v83, "fetchConfigurationDataForApplication:localizedApplicationDisplayName:categoryTokenData:localizedCategoryDisplayName:replyHandler:", v65, v66, v71, v72, v73, v74, v75);
    _Block_release(v73);

    (*(void (**)(char *, uint64_t))(v76 + 8))(v78, v67);
  }
  if (v84)
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v88, v89);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v88, v89);
    swift_unknownObjectRelease();
    swift_release();
  }
  _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v101);
  return swift_release();
}

uint64_t sub_1000593C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (**a6)(const void *, void, void *))
{
  uint64_t v61 = a5;
  uint64_t v50 = a4;
  uint64_t v49 = a3;
  uint64_t v52 = sub_100003C68(&qword_100076DB0);
  uint64_t v51 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v55 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100003C68(&qword_100076D58);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100003C68(&qword_100077AE0);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for ActivityCategory();
  uint64_t v60 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a6;
  uint64_t v59 = a6;
  _Block_copy(a6);
  swift_bridgeObjectRetain();
  uint64_t v53 = a1;
  uint64_t v54 = a2;
  ActivityCategory.init(identifier:)();
  static ShieldSettings.applicationCategories.getter();
  uint64_t v21 = type metadata accessor for Application();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v12, 1, 1, v21);
  uint64_t v22 = sub_1000522A0((uint64_t)v19, (uint64_t)v12);
  sub_100006E84((uint64_t)v12, &qword_100076D58);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  sub_10005301C((uint64_t)v22, (uint64_t)v67);
  swift_bridgeObjectRelease();
  sub_10005A720((uint64_t)v67, (uint64_t)&v68);
  uint64_t v23 = v69;
  if (v69)
  {
    uint64_t v56 = v19;
    uint64_t v57 = v17;
    uint64_t v58 = v20;
    uint64_t v24 = v68;
    uint64_t v25 = sub_100052CC0();
    uint64_t v27 = v26;
    uint64_t v28 = *(void (**)(uint64_t, uint64_t, ValueMetadata *, uint64_t))(v26 + 8);
    v66[3] = (uint64_t)v25;
    v66[4] = v26;
    sub_100006CC0(v66);
    swift_bridgeObjectRetain();
    v28(v24, v23, v25, v27);
    swift_bridgeObjectRetain();
    sub_100052F3C((uint64_t)aBlock);
    type metadata accessor for TokenEncoder();
    swift_allocObject();
    uint64_t v30 = TokenEncoder.init(teamIdentifier:keyRetriever:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v31 = v55;
    dispatch thunk of TokenEncoder.encode(categoryIdentifier:)();
    uint64_t v54 = v30;
    sub_100052CE8((uint64_t)aBlock);
    sub_100006DCC(aBlock, (uint64_t)v63);
    uint64_t v34 = swift_allocObject();
    uint64_t v35 = v58;
    *(void *)(v34 + 16) = sub_10003310C;
    *(void *)(v34 + 24) = v35;
    swift_retain();
    uint64_t v36 = (void *)sub_100025E30(v66, (uint64_t)sub_10005AE44, v34);
    uint64_t v38 = v37;
    swift_release();
    _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)aBlock);
    NSString v39 = String._bridgeToObjectiveC()();
    uint64_t v40 = Token.data.getter();
    unint64_t v42 = v41;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10004B824(v40, v42);
    NSString v44 = String._bridgeToObjectiveC()();
    uint64_t v64 = sub_10003310C;
    uint64_t v65 = v35;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100052B7C;
    uint64_t v63 = &unk_100072B10;
    uint64_t v45 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v36, "fetchConfigurationDataForApplication:localizedApplicationDisplayName:categoryTokenData:localizedCategoryDisplayName:replyHandler:", v39, 0, isa, v44, v45, v49, v50);
    _Block_release(v45);

    uint64_t v46 = v57;
    if (v38)
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      OS_dispatch_source.cancel()();
      swift_unknownObjectRelease();
      swift_release();
      swift_unknownObjectRelease_n();
    }
    else
    {
      swift_unknownObjectRelease();
      swift_release();
    }
    uint64_t v47 = v60;
    uint64_t v48 = v56;
    (*(void (**)(char *, uint64_t))(v51 + 8))(v31, v52);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v46);
    _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v66);
  }
  else
  {
    sub_10005A7FC();
    swift_allocError();
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v19, v17);
    uint64_t v29 = v59;
    swift_errorRetain();
    uint64_t v32 = (void *)_convertErrorToNSError(_:)();
    v29[2](v29, 0, v32);

    swift_errorRelease();
    swift_errorRelease();
  }
  return swift_release();
}

uint64_t sub_100059C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (**a8)(const void *, void, void *))
{
  uint64_t v86 = a7;
  v69[1] = a5;
  _OWORD v69[2] = a6;
  uint64_t v79 = a3;
  uint64_t v80 = a4;
  uint64_t v11 = sub_100003C68(&qword_100076DB0);
  uint64_t v70 = *(void *)(v11 - 8);
  uint64_t v71 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v73 = (char *)v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  NSString v72 = (char *)v69 - v14;
  uint64_t v15 = sub_100003C68(&qword_100077A58);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_100003C68(&qword_100077A60);
  uint64_t v81 = *(char **)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v77 = (char *)v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for ActivityCategory();
  uint64_t v78 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v76 = (char *)v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100003C68(&qword_100077A68);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for WebDomain();
  uint64_t v87 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)v69 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = swift_allocObject();
  uint64_t v84 = a8;
  uint64_t v85 = v27;
  *(void *)(v27 + 16) = a8;
  _Block_copy(a8);
  swift_bridgeObjectRetain();
  uint64_t v74 = a1;
  uint64_t v75 = a2;
  WebDomain.init(domain:)();
  static ShieldSettings.webDomains.getter();
  uint64_t v28 = sub_100051CFC((uint64_t)v26, 1);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  sub_10005301C((uint64_t)v28, (uint64_t)v95);
  uint64_t v30 = v95[0];
  uint64_t v29 = v95[1];
  uint64_t v32 = (char *)v95[2];
  uint64_t v31 = v95[3];
  swift_bridgeObjectRelease();
  sub_10005A720((uint64_t)v95, (uint64_t)v101);
  if (v102)
  {
    uint64_t v77 = v32;
    uint64_t v78 = v102;
    uint64_t v82 = v24;
    uint64_t v83 = v31;
    uint64_t v81 = v26;
LABEL_5:
    uint64_t v37 = sub_100052CC0();
    uint64_t v39 = v38;
    uint64_t v40 = *(void (**)(uint64_t, uint64_t, ValueMetadata *, uint64_t))(v38 + 8);
    uint64_t v94[3] = (uint64_t)v37;
    v94[4] = v38;
    sub_100006CC0(v94);
    swift_bridgeObjectRetain();
    v40(v30, v29, v37, v39);
    sub_100052CE8((uint64_t)&v88);
    sub_100006DCC(&v88, (uint64_t)v91);
    uint64_t v41 = swift_allocObject();
    uint64_t v42 = v85;
    *(void *)(v41 + 16) = sub_100032B34;
    *(void *)(v41 + 24) = v42;
    swift_retain();
    uint64_t v43 = (void *)sub_100025E30(v94, (uint64_t)sub_10005A7C0, v41);
    uint64_t v45 = v44;
    swift_release();
    _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)&v88);
    swift_bridgeObjectRetain();
    sub_100052F3C((uint64_t)&v88);
    type metadata accessor for TokenEncoder();
    swift_allocObject();
    TokenEncoder.init(teamIdentifier:keyRetriever:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v78)
    {
      uint64_t v46 = v43;
      uint64_t v86 = v45;
      uint64_t v47 = v73;
      dispatch thunk of TokenEncoder.encode(webDomain:)();
      NSString v51 = String._bridgeToObjectiveC()();
      uint64_t v52 = v71;
      uint64_t v53 = v47;
      uint64_t v54 = Token.data.getter();
      unint64_t v56 = v55;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10004B824(v54, v56);
      uint64_t v92 = sub_100032B34;
      uint64_t v93 = v42;
      uint64_t v88 = _NSConcreteStackBlock;
      uint64_t v89 = 1107296256;
      uint64_t v90 = sub_100052B7C;
      uint64_t v91 = &unk_100072A70;
      uint64_t v58 = _Block_copy(&v88);
      swift_retain();
      swift_release();
      [v46 fetchConfigurationDataForWebDomain:v51 tokenData:isa replyHandler:v58];
      _Block_release(v58);

      (*(void (**)(char *, uint64_t))(v70 + 8))(v53, v52);
      if (v86)
      {
LABEL_12:
        swift_getObjectType();
        swift_unknownObjectRetain();
        OS_dispatch_source.cancel()();
        swift_unknownObjectRelease();
        swift_release();
        swift_unknownObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v87 + 8))(v81, v82);
LABEL_15:
        _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v94);
        return swift_release();
      }
    }
    else
    {
      dispatch thunk of TokenEncoder.encode(categoryIdentifier:)();
      NSString v59 = String._bridgeToObjectiveC()();
      uint64_t v60 = v71;
      uint64_t v61 = Token.data.getter();
      uint64_t v86 = v45;
      unint64_t v63 = v62;
      Class v64 = Data._bridgeToObjectiveC()().super.isa;
      sub_10004B824(v61, v63);
      NSString v65 = String._bridgeToObjectiveC()();
      uint64_t v92 = sub_100032B34;
      uint64_t v93 = v42;
      uint64_t v88 = _NSConcreteStackBlock;
      uint64_t v89 = 1107296256;
      uint64_t v90 = sub_100052B7C;
      uint64_t v91 = &unk_100072A98;
      NSString v66 = _Block_copy(&v88);
      swift_retain();
      swift_release();
      [v43 fetchConfigurationDataForWebDomain:v59 categoryTokenData:v64 localizedDisplayName:v65 replyHandler:v66];
      uint64_t v67 = v66;
      uint64_t v68 = v86;
      _Block_release(v67);

      (*(void (**)(char *, uint64_t))(v70 + 8))(v72, v60);
      if (v68) {
        goto LABEL_12;
      }
    }
    (*(void (**)(char *, uint64_t))(v87 + 8))(v81, v82);
    swift_unknownObjectRelease();
    swift_release();
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  uint64_t v33 = (uint64_t)v76;
  ActivityCategory.init(identifier:)();
  uint64_t v34 = v77;
  static ShieldSettings.webDomainCategories.getter();
  uint64_t v35 = v87;
  (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v17, v26, v24);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v17, 0, 1, v24);
  uint64_t v36 = sub_100056418(v33, (uint64_t)v17);
  sub_100006E84((uint64_t)v17, &qword_100077A58);
  (*((void (**)(char *, uint64_t))v81 + 1))(v34, v83);
  sub_10005301C((uint64_t)v36, (uint64_t)v96);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v33, v82);
  sub_10005A720((uint64_t)v96, (uint64_t)&v97);
  uint64_t v29 = v98;
  if (v98)
  {
    uint64_t v81 = v26;
    uint64_t v82 = v24;
    uint64_t v30 = v97;
    uint64_t v77 = v99;
    uint64_t v78 = 0;
    uint64_t v83 = v100;
    goto LABEL_5;
  }
  sub_10005A7FC();
  swift_allocError();
  swift_willThrow();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v26, v24);
  uint64_t v48 = v84;
  swift_errorRetain();
  uint64_t v49 = (void *)_convertErrorToNSError(_:)();
  v48[2](v48, 0, v49);

  swift_errorRelease();
  swift_errorRelease();
  return swift_release();
}

uint64_t sub_10005A6E8()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005A720(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003C68(&qword_1000778E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005A788()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005A7C0(uint64_t a1)
{
  return (*(uint64_t (**)(void, unint64_t, uint64_t))(v1 + 16))(0, 0xF000000000000000, a1);
}

uint64_t sub_10005A7F4()
{
  return swift_release();
}

unint64_t sub_10005A7FC()
{
  unint64_t result = qword_100077A70;
  if (!qword_100077A70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100077A70);
  }
  return result;
}

unint64_t sub_10005A850()
{
  unint64_t result = qword_100077A90;
  if (!qword_100077A90)
  {
    sub_100009774(&qword_100076D68);
    sub_10005AB4C(&qword_100076DA8, (void (*)(uint64_t))&type metadata accessor for WebDomain);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100077A90);
  }
  return result;
}

unint64_t sub_10005A908()
{
  unint64_t result = qword_100077AC8;
  if (!qword_100077AC8)
  {
    sub_100009774(&qword_100077A68);
    sub_10005A99C(&qword_100077AD0, &qword_100076D88, &qword_100077AD8, &qword_100076DE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100077AC8);
  }
  return result;
}

uint64_t sub_10005A99C(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100009774(a2);
    sub_10005AC28(a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005AA1C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100009774(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10005AA94()
{
  unint64_t result = qword_100077B00;
  if (!qword_100077B00)
  {
    sub_100009774(&qword_100076D60);
    sub_10005AB4C((unint64_t *)&unk_100077160, (void (*)(uint64_t))&type metadata accessor for Application);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100077B00);
  }
  return result;
}

uint64_t sub_10005AB4C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10005AB94()
{
  unint64_t result = qword_100077B20;
  if (!qword_100077B20)
  {
    sub_100009774(&qword_100077B08);
    sub_10005A99C(&qword_100077B28, &qword_100076D78, &qword_100077B30, &qword_100076DC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100077B20);
  }
  return result;
}

uint64_t sub_10005AC28(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100009774(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005AC78(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(v1 + 16))(0, a1);
}

unsigned char *storeEnumTagSinglePayload for ShieldExtension.ShieldError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10005AD44);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShieldExtension.ShieldError()
{
  return &type metadata for ShieldExtension.ShieldError;
}

unint64_t sub_10005AD80()
{
  unint64_t result = qword_100077B60;
  if (!qword_100077B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100077B60);
  }
  return result;
}

uint64_t Dictionary<>.sanitize(isInternalClient:)(char a1, uint64_t a2)
{
  uint64_t v57 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v57 - 8);
  uint64_t v5 = __chkstk_darwin(v57);
  uint64_t v7 = (char *)v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v50 = (char *)v46 - v8;
  sub_1000081AC();
  v46[0] = Dictionary.init(minimumCapacity:)();
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v53 = a2 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v54 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v56 = v4 + 8;
  swift_bridgeObjectRetain();
  int64_t v13 = 0;
  int v51 = a1 & 1;
  *(void *)&long long v14 = 136446466;
  long long v47 = v14;
  v46[1] = (char *)&type metadata for Any + 8;
  *(void *)&long long v14 = 136446210;
  long long v49 = v14;
  uint64_t v48 = a2;
  uint64_t v52 = v7;
  if (!v12) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v15 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v15 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v13 << 6))
  {
    uint64_t v20 = (uint64_t *)(*(void *)(a2 + 48) + 16 * i);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    uint64_t v23 = *(void **)(*(void *)(a2 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    id v24 = v23;
    static SettingMetadataDirectory.metadata(for:)();
    sub_10000DE5C(&v58, (uint64_t)v59);
    uint64_t v25 = v60;
    sub_100006DCC(v59, v60);
    id v55 = (id)sub_10005FAEC((uint64_t)v24, v51, v25);
    uint64_t v26 = v46[0];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v58 = v26;
    unint64_t v28 = sub_100019BD4(v22, v21);
    unint64_t v30 = v28;
    uint64_t v31 = *(void *)(v26 + 16);
    BOOL v32 = (v29 & 1) == 0;
    uint64_t v33 = v31 + v32;
    if (__OFADD__(v31, v32)) {
      break;
    }
    char v34 = v29;
    if (*(void *)(v26 + 24) >= v33)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_10001F468();
      }
    }
    else
    {
      sub_10001C448(v33, isUniquelyReferenced_nonNull_native);
      unint64_t v35 = sub_100019BD4(v22, v21);
      if ((v34 & 1) != (v36 & 1)) {
        goto LABEL_38;
      }
      unint64_t v30 = v35;
    }
    a2 = v48;
    uint64_t v37 = (void *)v58;
    v46[0] = v58;
    if (v34)
    {
      uint64_t v38 = *(void *)(v58 + 56);
      uint64_t v39 = 8 * v30;

      id v40 = v55;
      *(void *)(v38 + v39) = v55;
      uint64_t v41 = v40;
    }
    else
    {
      *(void *)(v58 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      uint64_t v42 = (uint64_t *)(v37[6] + 16 * v30);
      uint64_t *v42 = v22;
      v42[1] = v21;
      uint64_t v41 = v55;
      *(void *)(v37[7] + 8 * v30) = v55;
      uint64_t v43 = v37[2];
      BOOL v17 = __OFADD__(v43, 1);
      uint64_t v44 = v43 + 1;
      if (v17) {
        goto LABEL_37;
      }
      void v37[2] = v44;
      swift_bridgeObjectRetain();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s20ManagedSettingsAgent12ClientFinderVwxx_0((uint64_t)v59);
    if (v12) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v17 = __OFADD__(v13++, 1);
    if (v17)
    {
      __break(1u);
LABEL_35:
      __break(1u);
      break;
    }
    if (v13 >= v54) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v53 + 8 * v13);
    if (!v18)
    {
      int64_t v19 = v13 + 1;
      if (v13 + 1 >= v54) {
        goto LABEL_33;
      }
      unint64_t v18 = *(void *)(v53 + 8 * v19);
      if (!v18)
      {
        int64_t v19 = v13 + 2;
        if (v13 + 2 >= v54) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v53 + 8 * v19);
        if (!v18)
        {
          int64_t v19 = v13 + 3;
          if (v13 + 3 >= v54)
          {
LABEL_33:
            swift_release();
            return v46[0];
          }
          unint64_t v18 = *(void *)(v53 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v13 = v19 + 1;
              if (__OFADD__(v19, 1)) {
                goto LABEL_35;
              }
              if (v13 >= v54) {
                goto LABEL_33;
              }
              unint64_t v18 = *(void *)(v53 + 8 * v13);
              ++v19;
              if (v18) {
                goto LABEL_15;
              }
            }
          }
        }
      }
      int64_t v13 = v19;
    }
LABEL_15:
    unint64_t v12 = (v18 - 1) & v18;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10005B5C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Application();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (sub_10006223C((unint64_t *)&unk_100077160, (void (*)(uint64_t))&type metadata accessor for Application), v7 = dispatch thunk of Hashable._rawHashValue(seed:)(), uint64_t v8 = -1 << *(unsigned char *)(a2 + 32), v9 = v7 & ~v8, v10 = a2 + 56, ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    unint64_t v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    long long v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      sub_10006223C(&qword_100076E30, (void (*)(uint64_t))&type metadata accessor for Application);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

BOOL sub_10005B7DC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_10005B7F4(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a1;
  uint64_t v3 = v2;
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for SettingMetadata();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v5 - 8);
  __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v27 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v13, v3, a2);
  int v18 = swift_dynamicCast();
  int64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (v18)
  {
    v19(v10, 0, 1, v5);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v10, v5);
    uint64_t v20 = SettingMetadata.maximumCount.getter();
    if (v21) {
      return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v5);
    }
    uint64_t v22 = v20;
    self;
    if (!swift_dynamicCastObjCClass()) {
      return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v5);
    }
    unint64_t v28 = 0;
    sub_1000081AC();
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    if (!v28) {
      return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v5);
    }
    if (v28 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v23 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v22 < v23)
    {
      sub_100062284();
      swift_allocError();
      *id v24 = 1;
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v5);
    }
    else
    {
      return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v5);
    }
  }
  else
  {
    v19(v10, 1, 1, v5);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    sub_100062284();
    swift_allocError();
    unsigned char *v26 = 1;
    return swift_willThrow();
  }
}

uint64_t sub_10005BBAC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), void (*a4)(char *, char *))
{
  BOOL v32 = a4;
  uint64_t v6 = a3(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v29 - v12;
  uint64_t result = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v29 - v15;
  int64_t v17 = 0;
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t v20 = *(void *)(a1 + 56);
  uint64_t v19 = a1 + 56;
  uint64_t v18 = v20;
  uint64_t v21 = 1 << *(unsigned char *)(v19 - 24);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v18;
  uint64_t v29 = v19;
  int64_t v30 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v31 = v7 + 16;
  while (1)
  {
    if (v23)
    {
      unint64_t v24 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      unint64_t v25 = v24 | (v17 << 6);
      goto LABEL_5;
    }
    int64_t v26 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v26 >= v30) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v29 + 8 * v26);
    ++v17;
    if (!v27)
    {
      int64_t v17 = v26 + 1;
      if (v26 + 1 >= v30) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v29 + 8 * v17);
      if (!v27)
      {
        int64_t v17 = v26 + 2;
        if (v26 + 2 >= v30) {
          goto LABEL_23;
        }
        unint64_t v27 = *(void *)(v29 + 8 * v17);
        if (!v27)
        {
          int64_t v17 = v26 + 3;
          if (v26 + 3 >= v30) {
            goto LABEL_23;
          }
          unint64_t v27 = *(void *)(v29 + 8 * v17);
          if (!v27) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v23 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v17 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v16, *(void *)(v33 + 48) + *(void *)(v7 + 72) * v25, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v16, v6);
    v32(v13, v10);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  }
  int64_t v28 = v26 + 4;
  if (v28 >= v30)
  {
LABEL_23:
    swift_release();
    return v34;
  }
  unint64_t v27 = *(void *)(v29 + 8 * v28);
  if (v27)
  {
    int64_t v17 = v28;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v17 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v17 >= v30) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v29 + 8 * v17);
    ++v28;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10005BE80(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100003C68(&qword_100077140);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = (unsigned char *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    int64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << v8[32];
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    int64_t v28 = (void *)(*((void *)v8 + 6) + 16 * v23);
    *int64_t v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10005C118(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a1;
  uint64_t v7 = type metadata accessor for WebDomain();
  uint64_t v37 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_100003C68(&qword_100077188);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v34;
  }
  uint64_t v13 = 0;
  uint64_t v14 = result + 56;
  unint64_t v35 = (uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32);
  uint64_t v36 = v37 + 16;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v33)
      {
LABEL_37:
        swift_release();
        return v10;
      }
      unint64_t v18 = v34[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v18 = v34[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v18 = v34[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v33) {
              goto LABEL_37;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v18 = v34[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
      }
LABEL_24:
      unint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    uint64_t v20 = a4;
    uint64_t v21 = *(void *)(a4 + 48);
    uint64_t v22 = *(void *)(v37 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v9, v21 + v22 * v16, v7);
    sub_10006223C(&qword_100076DA8, (void (*)(uint64_t))&type metadata accessor for WebDomain);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = (*v35)(*(void *)(v10 + 48) + v26 * v22, v9, v7);
    ++*(void *)(v10 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v20;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10005C4A4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a1;
  uint64_t v7 = type metadata accessor for Application();
  uint64_t v37 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_100003C68((uint64_t *)&unk_100077170);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v34;
  }
  uint64_t v13 = 0;
  uint64_t v14 = result + 56;
  unint64_t v35 = (uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32);
  uint64_t v36 = v37 + 16;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v33)
      {
LABEL_37:
        swift_release();
        return v10;
      }
      unint64_t v18 = v34[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v18 = v34[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v18 = v34[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v33) {
              goto LABEL_37;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v18 = v34[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
      }
LABEL_24:
      unint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    uint64_t v20 = a4;
    uint64_t v21 = *(void *)(a4 + 48);
    uint64_t v22 = *(void *)(v37 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v9, v21 + v22 * v16, v7);
    sub_10006223C((unint64_t *)&unk_100077160, (void (*)(uint64_t))&type metadata accessor for Application);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = (*v35)(*(void *)(v10 + 48) + v26 * v22, v9, v7);
    ++*(void *)(v10 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v20;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10005C830(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), void (*a4)(char *))
{
  uint64_t v33 = a2;
  uint64_t v34 = a4;
  uint64_t v7 = sub_100003C68(a2);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a3(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v29 - v16;
  if (!*(void *)(*(void *)v4 + 16)) {
    return result;
  }
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v29 = a1 + 56;
  uint64_t v19 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  uint64_t v32 = v11 + 16;
  int64_t v30 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v31 = v11 + 32;
  uint64_t v22 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v23 = 0;
  while (1)
  {
    if (v21)
    {
      unint64_t v24 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v25 = v24 | (v23 << 6);
      goto LABEL_6;
    }
    int64_t v26 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v30) {
      return swift_release();
    }
    unint64_t v27 = *(void *)(v29 + 8 * v26);
    ++v23;
    if (!v27)
    {
      int64_t v23 = v26 + 1;
      if (v26 + 1 >= v30) {
        return swift_release();
      }
      unint64_t v27 = *(void *)(v29 + 8 * v23);
      if (!v27)
      {
        int64_t v23 = v26 + 2;
        if (v26 + 2 >= v30) {
          return swift_release();
        }
        unint64_t v27 = *(void *)(v29 + 8 * v23);
        if (!v27)
        {
          int64_t v23 = v26 + 3;
          if (v26 + 3 >= v30) {
            return swift_release();
          }
          unint64_t v27 = *(void *)(v29 + 8 * v23);
          if (!v27) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v21 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_6:
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v17, *(void *)(v22 + 48) + *(void *)(v11 + 72) * v25, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v17, v10);
    v34(v14);
    sub_100006E84((uint64_t)v9, v33);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  int64_t v28 = v26 + 4;
  if (v28 >= v30) {
    return swift_release();
  }
  unint64_t v27 = *(void *)(v29 + 8 * v28);
  if (v27)
  {
    int64_t v23 = v28;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v23 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v23 >= v30) {
      return swift_release();
    }
    unint64_t v27 = *(void *)(v29 + 8 * v23);
    ++v28;
    if (v27) {
      goto LABEL_23;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10005CB48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003C68(&qword_100077A58);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for WebDomain();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  NSString v59 = (char *)&v49 - v12;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  uint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = ~v13;
  uint64_t v15 = a1 + 56;
  uint64_t v16 = -v13;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & *(void *)(a1 + 56);
  uint64_t v60 = a1;
  uint64_t v61 = a1 + 56;
  int64_t v54 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  id v55 = v6;
  uint64_t v62 = v14;
  uint64_t v63 = 0;
  unint64_t v64 = v18;
  uint64_t v53 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  int v51 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v57 = v8 + 16;
  long long v58 = (char *)(a2 + 56);
  uint64_t v19 = (void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  int64_t v20 = 0;
  uint64_t v56 = v8;
  uint64_t v52 = a2;
  uint64_t v50 = 0;
  if (!v18) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v21 = (v18 - 1) & v18;
  unint64_t v22 = __clz(__rbit64(v18)) | (v20 << 6);
  int64_t v23 = v20;
LABEL_7:
  unint64_t v24 = *(void *)(a1 + 48) + *(void *)(v8 + 72) * v22;
  unint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v26 = (uint64_t)v55;
  v25(v55, v24, v7);
  uint64_t v27 = 0;
  while (1)
  {
    (*v54)(v26, v27, 1, v7);
    uint64_t v60 = a1;
    uint64_t v61 = v15;
    uint64_t v62 = v14;
    uint64_t v63 = v23;
    unint64_t v64 = v21;
    if ((*v53)(v26, 1, v7) == 1)
    {
      sub_100006F44();
      sub_100006E84(v26, &qword_100077A58);
      return (void *)v52;
    }
    (*v51)(v59, v26, v7);
    uint64_t v31 = v52;
    sub_10006223C(&qword_100076DA8, (void (*)(uint64_t))&type metadata accessor for WebDomain);
    uint64_t v32 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v31 + 32);
    unint64_t v34 = v32 & ~v33;
    if ((*(void *)&v58[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34)) {
      break;
    }
    id v40 = *v19;
    uint64_t v8 = v56;
LABEL_35:
    v40(v59, v7);
    int64_t v20 = v63;
    unint64_t v18 = v64;
    a1 = v60;
    uint64_t v15 = v61;
    uint64_t v14 = v62;
    uint64_t v50 = v63;
    if (v64) {
      goto LABEL_6;
    }
LABEL_8:
    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      __break(1u);
    }
    int64_t v28 = (unint64_t)(v14 + 64) >> 6;
    if (v23 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v23);
    if (v29) {
      goto LABEL_11;
    }
    v20 += 2;
    if (v23 + 1 >= v28) {
      goto LABEL_37;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v20);
    if (v29) {
      goto LABEL_14;
    }
    if (v23 + 2 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * (v23 + 2));
    if (v29)
    {
      v23 += 2;
      goto LABEL_11;
    }
    int64_t v20 = v23 + 3;
    if (v23 + 3 < v28)
    {
      unint64_t v29 = *(void *)(v15 + 8 * v20);
      if (v29)
      {
LABEL_14:
        int64_t v23 = v20;
LABEL_11:
        uint64_t v21 = (v29 - 1) & v29;
        unint64_t v22 = __clz(__rbit64(v29)) + (v23 << 6);
        goto LABEL_7;
      }
      v23 += 4;
      if (v23 >= v28)
      {
LABEL_26:
        uint64_t v21 = 0;
        uint64_t v27 = 1;
        int64_t v23 = v20;
        goto LABEL_27;
      }
      unint64_t v29 = *(void *)(v15 + 8 * v23);
      if (v29) {
        goto LABEL_11;
      }
      int64_t v23 = v28 - 1;
      uint64_t v30 = v50 + 6;
      while (v28 != v30)
      {
        unint64_t v29 = *(void *)(v15 + 8 * v30++);
        if (v29)
        {
          int64_t v23 = v30 - 1;
          goto LABEL_11;
        }
      }
LABEL_37:
      uint64_t v21 = 0;
      uint64_t v27 = 1;
      goto LABEL_27;
    }
    uint64_t v21 = 0;
    uint64_t v27 = 1;
    v23 += 2;
LABEL_27:
    uint64_t v26 = (uint64_t)v55;
  }
  uint64_t v50 = (unint64_t)v19 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v35 = v31;
  uint64_t v36 = ~v33;
  uint64_t v37 = *(void *)(v56 + 72);
  uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
  while (1)
  {
    v38(v11, *(void *)(v35 + 48) + v37 * v34, v7);
    sub_10006223C(&qword_100077180, (void (*)(uint64_t))&type metadata accessor for WebDomain);
    char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
    id v40 = *v19;
    (*v19)(v11, v7);
    if (v39) {
      break;
    }
    unint64_t v34 = (v34 + 1) & v36;
    if (((*(void *)&v58[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34) & 1) == 0)
    {
      uint64_t v8 = v56;
      goto LABEL_35;
    }
  }
  uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v40)(v59, v7);
  char v42 = *(unsigned char *)(v35 + 32);
  unint64_t v43 = (unint64_t)((1 << v42) + 63) >> 6;
  size_t v44 = 8 * v43;
  if ((v42 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v49 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0), v58, v44);
    uint64_t v45 = sub_10005DF18((unint64_t *)((char *)&v49 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0)), v43, v35, v34, &v60);
    swift_release();
    sub_100006F44();
    return v45;
  }
  else
  {
    long long v47 = (void *)swift_slowAlloc();
    memcpy(v47, v58, v44);
    uint64_t v48 = sub_10005DF18((unint64_t *)v47, v43, v35, v34, &v60);
    swift_release();
    sub_100006F44();
    swift_slowDealloc();
    return v48;
  }
}

void *sub_10005D20C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003C68(&qword_100076D58);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Application();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  NSString v59 = (char *)&v49 - v12;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  uint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = ~v13;
  uint64_t v15 = a1 + 56;
  uint64_t v16 = -v13;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & *(void *)(a1 + 56);
  uint64_t v60 = a1;
  uint64_t v61 = a1 + 56;
  int64_t v54 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  id v55 = v6;
  uint64_t v62 = v14;
  uint64_t v63 = 0;
  unint64_t v64 = v18;
  uint64_t v53 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  int v51 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v57 = v8 + 16;
  long long v58 = (char *)(a2 + 56);
  uint64_t v19 = (void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  int64_t v20 = 0;
  uint64_t v56 = v8;
  uint64_t v52 = a2;
  uint64_t v50 = 0;
  if (!v18) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v21 = (v18 - 1) & v18;
  unint64_t v22 = __clz(__rbit64(v18)) | (v20 << 6);
  int64_t v23 = v20;
LABEL_7:
  unint64_t v24 = *(void *)(a1 + 48) + *(void *)(v8 + 72) * v22;
  unint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v26 = (uint64_t)v55;
  v25(v55, v24, v7);
  uint64_t v27 = 0;
  while (1)
  {
    (*v54)(v26, v27, 1, v7);
    uint64_t v60 = a1;
    uint64_t v61 = v15;
    uint64_t v62 = v14;
    uint64_t v63 = v23;
    unint64_t v64 = v21;
    if ((*v53)(v26, 1, v7) == 1)
    {
      sub_100006F44();
      sub_100006E84(v26, &qword_100076D58);
      return (void *)v52;
    }
    (*v51)(v59, v26, v7);
    uint64_t v31 = v52;
    sub_10006223C((unint64_t *)&unk_100077160, (void (*)(uint64_t))&type metadata accessor for Application);
    uint64_t v32 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v31 + 32);
    unint64_t v34 = v32 & ~v33;
    if ((*(void *)&v58[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34)) {
      break;
    }
    id v40 = *v19;
    uint64_t v8 = v56;
LABEL_35:
    v40(v59, v7);
    int64_t v20 = v63;
    unint64_t v18 = v64;
    a1 = v60;
    uint64_t v15 = v61;
    uint64_t v14 = v62;
    uint64_t v50 = v63;
    if (v64) {
      goto LABEL_6;
    }
LABEL_8:
    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      __break(1u);
    }
    int64_t v28 = (unint64_t)(v14 + 64) >> 6;
    if (v23 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v23);
    if (v29) {
      goto LABEL_11;
    }
    v20 += 2;
    if (v23 + 1 >= v28) {
      goto LABEL_37;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v20);
    if (v29) {
      goto LABEL_14;
    }
    if (v23 + 2 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * (v23 + 2));
    if (v29)
    {
      v23 += 2;
      goto LABEL_11;
    }
    int64_t v20 = v23 + 3;
    if (v23 + 3 < v28)
    {
      unint64_t v29 = *(void *)(v15 + 8 * v20);
      if (v29)
      {
LABEL_14:
        int64_t v23 = v20;
LABEL_11:
        uint64_t v21 = (v29 - 1) & v29;
        unint64_t v22 = __clz(__rbit64(v29)) + (v23 << 6);
        goto LABEL_7;
      }
      v23 += 4;
      if (v23 >= v28)
      {
LABEL_26:
        uint64_t v21 = 0;
        uint64_t v27 = 1;
        int64_t v23 = v20;
        goto LABEL_27;
      }
      unint64_t v29 = *(void *)(v15 + 8 * v23);
      if (v29) {
        goto LABEL_11;
      }
      int64_t v23 = v28 - 1;
      uint64_t v30 = v50 + 6;
      while (v28 != v30)
      {
        unint64_t v29 = *(void *)(v15 + 8 * v30++);
        if (v29)
        {
          int64_t v23 = v30 - 1;
          goto LABEL_11;
        }
      }
LABEL_37:
      uint64_t v21 = 0;
      uint64_t v27 = 1;
      goto LABEL_27;
    }
    uint64_t v21 = 0;
    uint64_t v27 = 1;
    v23 += 2;
LABEL_27:
    uint64_t v26 = (uint64_t)v55;
  }
  uint64_t v50 = (unint64_t)v19 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v35 = v31;
  uint64_t v36 = ~v33;
  uint64_t v37 = *(void *)(v56 + 72);
  uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
  while (1)
  {
    v38(v11, *(void *)(v35 + 48) + v37 * v34, v7);
    sub_10006223C(&qword_100076E30, (void (*)(uint64_t))&type metadata accessor for Application);
    char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
    id v40 = *v19;
    (*v19)(v11, v7);
    if (v39) {
      break;
    }
    unint64_t v34 = (v34 + 1) & v36;
    if (((*(void *)&v58[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34) & 1) == 0)
    {
      uint64_t v8 = v56;
      goto LABEL_35;
    }
  }
  uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v40)(v59, v7);
  char v42 = *(unsigned char *)(v35 + 32);
  unint64_t v43 = (unint64_t)((1 << v42) + 63) >> 6;
  size_t v44 = 8 * v43;
  if ((v42 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v49 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0), v58, v44);
    uint64_t v45 = sub_10005E49C((unint64_t *)((char *)&v49 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0)), v43, v35, v34, &v60);
    swift_release();
    sub_100006F44();
    return v45;
  }
  else
  {
    long long v47 = (void *)swift_slowAlloc();
    memcpy(v47, v58, v44);
    uint64_t v48 = sub_10005E49C((unint64_t *)v47, v43, v35, v34, &v60);
    swift_release();
    sub_100006F44();
    swift_slowDealloc();
    return v48;
  }
}

uint64_t sub_10005D8D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for WebDomain();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10006223C(&qword_100076DA8, (void (*)(uint64_t))&type metadata accessor for WebDomain);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  uint64_t v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v26 = v2;
    uint64_t v27 = v6;
    uint64_t v28 = a2;
    uint64_t v29 = ~v11;
    uint64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    uint64_t v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      sub_10006223C(&qword_100077180, (void (*)(uint64_t))&type metadata accessor for WebDomain);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        uint64_t v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t v32 = *v21;
    uint64_t *v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100029D80();
      uint64_t v23 = v32;
    }
    uint64_t v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    sub_10005EA20(v12, (uint64_t (*)(void))&type metadata accessor for WebDomain, &qword_100076DA8, (void (*)(uint64_t))&type metadata accessor for WebDomain, (uint64_t)&protocol conformance descriptor for WebDomain);
    uint64_t *v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

uint64_t sub_10005DBF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Application();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10006223C((unint64_t *)&unk_100077160, (void (*)(uint64_t))&type metadata accessor for Application);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  uint64_t v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v26 = v2;
    uint64_t v27 = v6;
    uint64_t v28 = a2;
    uint64_t v29 = ~v11;
    uint64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    uint64_t v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      sub_10006223C(&qword_100076E30, (void (*)(uint64_t))&type metadata accessor for Application);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        uint64_t v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t v32 = *v21;
    uint64_t *v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100029DA0();
      uint64_t v23 = v32;
    }
    uint64_t v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    sub_10005EA20(v12, (uint64_t (*)(void))&type metadata accessor for Application, (unint64_t *)&unk_100077160, (void (*)(uint64_t))&type metadata accessor for Application, (uint64_t)&protocol conformance descriptor for Application);
    uint64_t *v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

void *sub_10005DF18(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v52 = a2;
  uint64_t v9 = sub_100003C68(&qword_100077A58);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for WebDomain();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (void *)__chkstk_darwin(v13);
  NSString v65 = (char *)&v52 - v17;
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v20 = *(unint64_t *)((char *)a1 + v19);
  int64_t v54 = a1;
  id v55 = v11;
  *(unint64_t *)((char *)a1 + v19) = v20 & ((-1 << a4) - 1);
  uint64_t v22 = v21;
  uint64_t v23 = v18 - 1;
  uint64_t v63 = v21 + 16;
  uint64_t v64 = a3;
  long long v58 = (unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  NSString v59 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  uint64_t v56 = a5;
  uint64_t v57 = (void (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v62 = a3 + 56;
  unint64_t v24 = (void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v60 = v21;
  while (2)
  {
    uint64_t v53 = v23;
    do
    {
      while (1)
      {
        uint64_t v26 = *a5;
        uint64_t v27 = a5[1];
        uint64_t v29 = a5[2];
        int64_t v28 = a5[3];
        unint64_t v30 = a5[4];
        if (v30)
        {
          uint64_t v61 = (v30 - 1) & v30;
          unint64_t v31 = __clz(__rbit64(v30)) | (v28 << 6);
LABEL_7:
          unint64_t v32 = *(void *)(v26 + 48) + *(void *)(v22 + 72) * v31;
          uint64_t v33 = *(void (**)(char *, unint64_t, uint64_t))(v22 + 16);
          uint64_t v34 = v26;
          v33(v11, v32, v12);
          uint64_t v35 = 0;
          goto LABEL_8;
        }
        int64_t v44 = v28 + 1;
        if (__OFADD__(v28, 1))
        {
          __break(1u);
          goto LABEL_44;
        }
        int64_t v45 = (unint64_t)(v29 + 64) >> 6;
        if (v44 >= v45)
        {
          uint64_t v61 = 0;
          uint64_t v35 = 1;
          uint64_t v34 = v26;
          goto LABEL_8;
        }
        unint64_t v46 = *(void *)(v27 + 8 * v44);
        if (v46) {
          goto LABEL_17;
        }
        int64_t v49 = v28 + 2;
        if (v28 + 2 >= v45) {
          goto LABEL_35;
        }
        unint64_t v46 = *(void *)(v27 + 8 * v49);
        if (v46) {
          goto LABEL_23;
        }
        if (v28 + 3 >= v45) {
          goto LABEL_36;
        }
        unint64_t v46 = *(void *)(v27 + 8 * (v28 + 3));
        if (v46)
        {
          int64_t v44 = v28 + 3;
          goto LABEL_17;
        }
        int64_t v49 = v28 + 4;
        if (v28 + 4 < v45)
        {
          unint64_t v46 = *(void *)(v27 + 8 * v49);
          if (v46)
          {
LABEL_23:
            int64_t v44 = v49;
LABEL_17:
            uint64_t v61 = (v46 - 1) & v46;
            unint64_t v31 = __clz(__rbit64(v46)) + (v44 << 6);
            int64_t v28 = v44;
            goto LABEL_7;
          }
          int64_t v44 = v28 + 5;
          if (v28 + 5 < v45)
          {
            unint64_t v46 = *(void *)(v27 + 8 * v44);
            if (v46) {
              goto LABEL_17;
            }
            int64_t v44 = v45 - 1;
            int64_t v50 = v28 + 6;
            while (v45 != v50)
            {
              unint64_t v46 = *(void *)(v27 + 8 * v50++);
              if (v46)
              {
                int64_t v44 = v50 - 1;
                goto LABEL_17;
              }
            }
LABEL_35:
            uint64_t v61 = 0;
            uint64_t v35 = 1;
            int64_t v28 = v44;
            uint64_t v34 = v26;
            goto LABEL_8;
          }
LABEL_36:
          uint64_t v61 = 0;
          uint64_t v35 = 1;
          int64_t v28 = v49;
          uint64_t v34 = v26;
          goto LABEL_8;
        }
        uint64_t v61 = 0;
        uint64_t v35 = 1;
        v28 += 3;
        uint64_t v34 = v26;
LABEL_8:
        (*v59)(v11, v35, 1, v12);
        *a5 = v34;
        a5[1] = v27;
        a5[2] = v29;
        a5[3] = v28;
        a5[4] = v61;
        if ((*v58)(v11, 1, v12) == 1)
        {
          sub_100006E84((uint64_t)v11, &qword_100077A58);
          uint64_t v51 = v64;
          swift_retain();
          return (void *)sub_10005C118(v54, v52, v53, v51);
        }
        (*v57)(v65, v11, v12);
        uint64_t v36 = v64;
        sub_10006223C(&qword_100076DA8, (void (*)(uint64_t))&type metadata accessor for WebDomain);
        uint64_t v37 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v38 = -1 << *(unsigned char *)(v36 + 32);
        unint64_t v39 = v37 & ~v38;
        if ((*(void *)(v62 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39)) {
          break;
        }
        uint64_t v25 = *v24;
        uint64_t v22 = v60;
LABEL_4:
        uint64_t result = (void *)((uint64_t (*)(char *, uint64_t))v25)(v65, v12);
      }
      uint64_t v61 = (unint64_t)v24 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v40 = ~v38;
      uint64_t v41 = *(void *)(v60 + 72);
      char v42 = *(void (**)(char *, unint64_t, uint64_t))(v60 + 16);
      while (1)
      {
        v42(v15, *(void *)(v64 + 48) + v41 * v39, v12);
        sub_10006223C(&qword_100077180, (void (*)(uint64_t))&type metadata accessor for WebDomain);
        char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v25 = *v24;
        (*v24)(v15, v12);
        if (v43) {
          break;
        }
        unint64_t v39 = (v39 + 1) & v40;
        if (((*(void *)(v62 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
        {
          uint64_t v11 = v55;
          a5 = v56;
          uint64_t v22 = v60;
          goto LABEL_4;
        }
      }
      uint64_t result = (void *)((uint64_t (*)(char *, uint64_t))v25)(v65, v12);
      uint64_t v47 = (v39 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v11 = v55;
      uint64_t v48 = *(unint64_t *)((char *)v54 + v47);
      *(unint64_t *)((char *)v54 + v47) = v48 & ~(1 << v39);
      a5 = v56;
      uint64_t v22 = v60;
    }
    while ((v48 & (1 << v39)) == 0);
    uint64_t v23 = v53 - 1;
    if (__OFSUB__(v53, 1))
    {
LABEL_44:
      __break(1u);
      return result;
    }
    if (v53 != 1) {
      continue;
    }
    return &_swiftEmptySetSingleton;
  }
}

void *sub_10005E49C(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v52 = a2;
  uint64_t v9 = sub_100003C68(&qword_100076D58);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Application();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (void *)__chkstk_darwin(v13);
  NSString v65 = (char *)&v52 - v17;
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v20 = *(unint64_t *)((char *)a1 + v19);
  int64_t v54 = a1;
  id v55 = v11;
  *(unint64_t *)((char *)a1 + v19) = v20 & ((-1 << a4) - 1);
  uint64_t v22 = v21;
  uint64_t v23 = v18 - 1;
  uint64_t v63 = v21 + 16;
  uint64_t v64 = a3;
  long long v58 = (unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  NSString v59 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  uint64_t v56 = a5;
  uint64_t v57 = (void (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v62 = a3 + 56;
  unint64_t v24 = (void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v60 = v21;
  while (2)
  {
    uint64_t v53 = v23;
    do
    {
      while (1)
      {
        uint64_t v26 = *a5;
        uint64_t v27 = a5[1];
        uint64_t v29 = a5[2];
        int64_t v28 = a5[3];
        unint64_t v30 = a5[4];
        if (v30)
        {
          uint64_t v61 = (v30 - 1) & v30;
          unint64_t v31 = __clz(__rbit64(v30)) | (v28 << 6);
LABEL_7:
          unint64_t v32 = *(void *)(v26 + 48) + *(void *)(v22 + 72) * v31;
          uint64_t v33 = *(void (**)(char *, unint64_t, uint64_t))(v22 + 16);
          uint64_t v34 = v26;
          v33(v11, v32, v12);
          uint64_t v35 = 0;
          goto LABEL_8;
        }
        int64_t v44 = v28 + 1;
        if (__OFADD__(v28, 1))
        {
          __break(1u);
          goto LABEL_44;
        }
        int64_t v45 = (unint64_t)(v29 + 64) >> 6;
        if (v44 >= v45)
        {
          uint64_t v61 = 0;
          uint64_t v35 = 1;
          uint64_t v34 = v26;
          goto LABEL_8;
        }
        unint64_t v46 = *(void *)(v27 + 8 * v44);
        if (v46) {
          goto LABEL_17;
        }
        int64_t v49 = v28 + 2;
        if (v28 + 2 >= v45) {
          goto LABEL_35;
        }
        unint64_t v46 = *(void *)(v27 + 8 * v49);
        if (v46) {
          goto LABEL_23;
        }
        if (v28 + 3 >= v45) {
          goto LABEL_36;
        }
        unint64_t v46 = *(void *)(v27 + 8 * (v28 + 3));
        if (v46)
        {
          int64_t v44 = v28 + 3;
          goto LABEL_17;
        }
        int64_t v49 = v28 + 4;
        if (v28 + 4 < v45)
        {
          unint64_t v46 = *(void *)(v27 + 8 * v49);
          if (v46)
          {
LABEL_23:
            int64_t v44 = v49;
LABEL_17:
            uint64_t v61 = (v46 - 1) & v46;
            unint64_t v31 = __clz(__rbit64(v46)) + (v44 << 6);
            int64_t v28 = v44;
            goto LABEL_7;
          }
          int64_t v44 = v28 + 5;
          if (v28 + 5 < v45)
          {
            unint64_t v46 = *(void *)(v27 + 8 * v44);
            if (v46) {
              goto LABEL_17;
            }
            int64_t v44 = v45 - 1;
            int64_t v50 = v28 + 6;
            while (v45 != v50)
            {
              unint64_t v46 = *(void *)(v27 + 8 * v50++);
              if (v46)
              {
                int64_t v44 = v50 - 1;
                goto LABEL_17;
              }
            }
LABEL_35:
            uint64_t v61 = 0;
            uint64_t v35 = 1;
            int64_t v28 = v44;
            uint64_t v34 = v26;
            goto LABEL_8;
          }
LABEL_36:
          uint64_t v61 = 0;
          uint64_t v35 = 1;
          int64_t v28 = v49;
          uint64_t v34 = v26;
          goto LABEL_8;
        }
        uint64_t v61 = 0;
        uint64_t v35 = 1;
        v28 += 3;
        uint64_t v34 = v26;
LABEL_8:
        (*v59)(v11, v35, 1, v12);
        *a5 = v34;
        a5[1] = v27;
        a5[2] = v29;
        a5[3] = v28;
        a5[4] = v61;
        if ((*v58)(v11, 1, v12) == 1)
        {
          sub_100006E84((uint64_t)v11, &qword_100076D58);
          uint64_t v51 = v64;
          swift_retain();
          return (void *)sub_10005C4A4(v54, v52, v53, v51);
        }
        (*v57)(v65, v11, v12);
        uint64_t v36 = v64;
        sub_10006223C((unint64_t *)&unk_100077160, (void (*)(uint64_t))&type metadata accessor for Application);
        uint64_t v37 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v38 = -1 << *(unsigned char *)(v36 + 32);
        unint64_t v39 = v37 & ~v38;
        if ((*(void *)(v62 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39)) {
          break;
        }
        uint64_t v25 = *v24;
        uint64_t v22 = v60;
LABEL_4:
        uint64_t result = (void *)((uint64_t (*)(char *, uint64_t))v25)(v65, v12);
      }
      uint64_t v61 = (unint64_t)v24 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v40 = ~v38;
      uint64_t v41 = *(void *)(v60 + 72);
      char v42 = *(void (**)(char *, unint64_t, uint64_t))(v60 + 16);
      while (1)
      {
        v42(v15, *(void *)(v64 + 48) + v41 * v39, v12);
        sub_10006223C(&qword_100076E30, (void (*)(uint64_t))&type metadata accessor for Application);
        char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v25 = *v24;
        (*v24)(v15, v12);
        if (v43) {
          break;
        }
        unint64_t v39 = (v39 + 1) & v40;
        if (((*(void *)(v62 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
        {
          uint64_t v11 = v55;
          a5 = v56;
          uint64_t v22 = v60;
          goto LABEL_4;
        }
      }
      uint64_t result = (void *)((uint64_t (*)(char *, uint64_t))v25)(v65, v12);
      uint64_t v47 = (v39 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v11 = v55;
      uint64_t v48 = *(unint64_t *)((char *)v54 + v47);
      *(unint64_t *)((char *)v54 + v47) = v48 & ~(1 << v39);
      a5 = v56;
      uint64_t v22 = v60;
    }
    while ((v48 & (1 << v39)) == 0);
    uint64_t v23 = v53 - 1;
    if (__OFSUB__(v53, 1))
    {
LABEL_44:
      __break(1u);
      return result;
    }
    if (v53 != 1) {
      continue;
    }
    return &_swiftEmptySetSingleton;
  }
}

uint64_t sub_10005EA20(int64_t a1, uint64_t (*a2)(void), unint64_t *a3, void (*a4)(uint64_t), uint64_t a5)
{
  char v43 = a4;
  uint64_t v44 = a5;
  char v42 = a3;
  uint64_t v7 = a2(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v38 - v10;
  uint64_t v12 = *v5;
  uint64_t v13 = *v5 + 56;
  uint64_t v14 = -1 << *(unsigned char *)(*v5 + 32);
  unint64_t v15 = (a1 + 1) & ~v14;
  if (((1 << v15) & *(void *)(v13 + 8 * (v15 >> 6))) != 0)
  {
    uint64_t v38 = v5;
    uint64_t v16 = ~v14;
    swift_retain();
    uint64_t v17 = _HashTable.previousHole(before:)();
    uint64_t v18 = v12;
    if ((*(void *)(v13 + 8 * (v15 >> 6)) & (1 << v15)) != 0)
    {
      unint64_t v40 = (v17 + 1) & v16;
      uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      uint64_t v19 = v8 + 16;
      unint64_t v39 = v20;
      uint64_t v45 = *(void *)(v19 + 56);
      uint64_t v41 = v19;
      uint64_t v21 = (void (**)(char *, uint64_t))(v19 - 8);
      do
      {
        uint64_t v22 = v13;
        int64_t v23 = v45 * v15;
        v39(v11, *(void *)(v18 + 48) + v45 * v15, v7);
        uint64_t v24 = v18;
        sub_10006223C(v42, v43);
        uint64_t v25 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v21)(v11, v7);
        unint64_t v26 = v25 & v16;
        if (a1 >= (uint64_t)v40)
        {
          if (v26 >= v40 && a1 >= (uint64_t)v26)
          {
LABEL_16:
            uint64_t v18 = v24;
            uint64_t v29 = *(void *)(v24 + 48);
            int64_t v30 = v45 * a1;
            unint64_t v31 = v29 + v45 * a1;
            unint64_t v32 = v29 + v23 + v45;
            if (v45 * a1 < v23 || v31 >= v32)
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v15;
            }
            else
            {
              a1 = v15;
              if (v30 != v23)
              {
                swift_arrayInitWithTakeBackToFront();
                a1 = v15;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v26 >= v40 || a1 >= (uint64_t)v26)
        {
          goto LABEL_16;
        }
        uint64_t v18 = v24;
LABEL_5:
        unint64_t v15 = (v15 + 1) & v16;
        uint64_t v13 = v22;
      }
      while (((*(void *)(v22 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) != 0);
    }
    *(void *)(v13 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
    uint64_t v5 = v38;
  }
  else
  {
    *(void *)(v13 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v34 = *v5;
  uint64_t v35 = *(void *)(*v5 + 16);
  BOOL v36 = __OFSUB__(v35, 1);
  uint64_t v37 = v35 - 1;
  if (v36)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v34 + 16) = v37;
    ++*(_DWORD *)(v34 + 36);
  }
  return result;
}

uint64_t sub_10005ED0C(char a1)
{
  uint64_t result = dispatch thunk of SettingMetadataProtocol.isPublic.getter();
  if ((result & 1) == 0 && (a1 & 1) == 0)
  {
    sub_100062284();
    swift_allocError();
    unsigned char *v3 = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_10005ED74()
{
  uint64_t v0 = sub_100003C68(&qword_100076D50);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100003C68(&qword_100076D48);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v21 - v8;
  type metadata accessor for Application();
  sub_10006223C((unint64_t *)&unk_100077160, (void (*)(uint64_t))&type metadata accessor for Application);
  static ShieldSettings.EffectiveActivityCategoryPolicy<>.value(from:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1) {
    return sub_100006E84((uint64_t)v2, &qword_100076D50);
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  int v11 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v11 == enum case for ShieldSettings.EffectiveActivityCategoryPolicy.specific<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v7, v3);
    uint64_t v12 = *(void *)v7;
    uint64_t v13 = *((void *)v7 + 1);
    uint64_t v14 = *(void *)(v12 + 16);
    swift_bridgeObjectRelease();
    if (static ShieldSettings.ActivityCategoryPolicy.maximumSpecificCategoriesCount.getter() >= v14)
    {
      uint64_t v18 = *(void *)(v13 + 16);
      swift_bridgeObjectRelease();
      if (static ShieldSettings.ActivityCategoryPolicy.maximumSpecificExceptionsCount.getter() >= v18) {
        return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    goto LABEL_8;
  }
  int v15 = v11;
  if (v11 == enum case for ShieldSettings.EffectiveActivityCategoryPolicy.all<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v7, v3);
    uint64_t v16 = *(void *)(*(void *)v7 + 16);
    swift_bridgeObjectRelease();
    if (static ShieldSettings.ActivityCategoryPolicy.maximumAllExceptionsCount.getter() >= v16) {
      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    }
LABEL_8:
    sub_100062284();
    swift_allocError();
    *uint64_t v17 = 1;
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
  int v19 = enum case for ShieldSettings.EffectiveActivityCategoryPolicy.none<A>(_:);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
  uint64_t result = v20(v9, v3);
  if (v15 != v19) {
    return v20(v7, v3);
  }
  return result;
}

uint64_t sub_10005F0EC()
{
  uint64_t v0 = sub_100003C68(&qword_100076D40);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100003C68(&qword_100076D38);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v21 - v8;
  type metadata accessor for WebDomain();
  sub_10006223C(&qword_100076DA8, (void (*)(uint64_t))&type metadata accessor for WebDomain);
  static ShieldSettings.EffectiveActivityCategoryPolicy<>.value(from:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1) {
    return sub_100006E84((uint64_t)v2, &qword_100076D40);
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  int v11 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v11 == enum case for ShieldSettings.EffectiveActivityCategoryPolicy.specific<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v7, v3);
    uint64_t v12 = *(void *)v7;
    uint64_t v13 = *((void *)v7 + 1);
    uint64_t v14 = *(void *)(v12 + 16);
    swift_bridgeObjectRelease();
    if (static ShieldSettings.ActivityCategoryPolicy.maximumSpecificCategoriesCount.getter() >= v14)
    {
      uint64_t v18 = *(void *)(v13 + 16);
      swift_bridgeObjectRelease();
      if (static ShieldSettings.ActivityCategoryPolicy.maximumSpecificExceptionsCount.getter() >= v18) {
        return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    goto LABEL_8;
  }
  int v15 = v11;
  if (v11 == enum case for ShieldSettings.EffectiveActivityCategoryPolicy.all<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v7, v3);
    uint64_t v16 = *(void *)(*(void *)v7 + 16);
    swift_bridgeObjectRelease();
    if (static ShieldSettings.ActivityCategoryPolicy.maximumAllExceptionsCount.getter() >= v16) {
      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    }
LABEL_8:
    sub_100062284();
    swift_allocError();
    *uint64_t v17 = 1;
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
  int v19 = enum case for ShieldSettings.EffectiveActivityCategoryPolicy.none<A>(_:);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
  uint64_t result = v20(v9, v3);
  if (v15 != v19) {
    return v20(v7, v3);
  }
  return result;
}

uint64_t sub_10005F464()
{
  uint64_t v0 = sub_100003C68(&qword_100076D30);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for UserSafetySettings.ScanningPolicy();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v19 - v8;
  static UserSafetySettings.ScanningPolicy.value(from:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1) {
    return sub_100006E84((uint64_t)v2, &qword_100076D30);
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  int v11 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v11 == enum case for UserSafetySettings.ScanningPolicy.nudityDetection(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v7, v3);
    uint64_t v12 = *((void *)v7 + 1);
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void *)(v12 + 16);
    swift_bridgeObjectRelease();
    if (static UserSafetySettings.ScanningPolicy.maximumNudityDetectionApplicationsCount.getter() < v13)
    {
      sub_100062284();
      swift_allocError();
      *uint64_t v14 = 1;
      swift_willThrow();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
  else
  {
    int v15 = v11;
    if (v11 == enum case for UserSafetySettings.ScanningPolicy.communicationSafety(_:))
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
      (*(void (**)(char *, uint64_t))(v4 + 96))(v7, v3);
      uint64_t v16 = type metadata accessor for UserSafetySettings.InterventionType();
      return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8))(v7, v16);
    }
    else
    {
      int v17 = enum case for UserSafetySettings.ScanningPolicy.none(_:);
      uint64_t v18 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
      uint64_t result = v18(v9, v3);
      if (v15 != v17) {
        return v18(v7, v3);
      }
    }
  }
  return result;
}

uint64_t sub_10005F790()
{
  uint64_t v0 = sub_100003C68(&qword_100076D28);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v22 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for WebContentSettings.FilterPolicy();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v22 - v8;
  static WebContentSettings.FilterPolicy.value(from:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1) {
    return sub_100006E84((uint64_t)v2, &qword_100076D28);
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  int v11 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v11 == enum case for WebContentSettings.FilterPolicy.specific(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v7, v3);
    uint64_t v12 = *(void *)(*(void *)v7 + 16);
    swift_bridgeObjectRelease();
    if (static WebContentSettings.FilterPolicy.maximumSpecificDomainsCount.getter() >= v12) {
      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    }
    goto LABEL_13;
  }
  int v13 = v11;
  if (v11 == enum case for WebContentSettings.FilterPolicy.auto(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v7, v3);
    uint64_t v14 = *(void *)v7;
    uint64_t v15 = *((void *)v7 + 1);
    uint64_t v16 = *(void *)(v14 + 16);
    swift_bridgeObjectRelease();
    if (static WebContentSettings.FilterPolicy.maximumAutoDomainsCount.getter() >= v16)
    {
      uint64_t v18 = *(void *)(v15 + 16);
      swift_bridgeObjectRelease();
      if (static WebContentSettings.FilterPolicy.maximumAutoExceptionsCount.getter() >= v18) {
        return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
LABEL_13:
    sub_100062284();
    swift_allocError();
    *uint64_t v19 = 1;
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
  if (v11 == enum case for WebContentSettings.FilterPolicy.all(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v7, v3);
    uint64_t v17 = *(void *)(*(void *)v7 + 16);
    swift_bridgeObjectRelease();
    if (static WebContentSettings.FilterPolicy.maximumAllExceptionsCount.getter() >= v17) {
      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    }
    goto LABEL_13;
  }
  int v20 = enum case for WebContentSettings.FilterPolicy.none(_:);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
  uint64_t result = v21(v9, v3);
  if (v13 != v20) {
    return v21(v7, v3);
  }
  return result;
}

uint64_t sub_10005FAEC(uint64_t a1, char a2, uint64_t a3)
{
  sub_10005ED0C(a2);
  if (!v3 && (a2 & 1) == 0)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    sub_100003C68(&qword_100076D60);
    if (swift_dynamicCastMetatype())
    {
      sub_10005ED74();
    }
    else
    {
      sub_100003C68(&qword_100076D68);
      if (swift_dynamicCastMetatype())
      {
        sub_10005F0EC();
      }
      else
      {
        type metadata accessor for UserSafetySettings.ScanningPolicy();
        if (swift_dynamicCastMetatype())
        {
          sub_10005F464();
        }
        else
        {
          type metadata accessor for WebContentSettings.FilterPolicy();
          if (swift_dynamicCastMetatype())
          {
            sub_10005F790();
          }
          else if (!swift_dynamicCastMetatype())
          {
            if (swift_conformsToProtocol2()) {
              uint64_t v9 = AssociatedTypeWitness;
            }
            else {
              uint64_t v9 = 0;
            }
            if (v9) {
              sub_10005B7F4(a1, a3);
            }
          }
        }
      }
    }
  }
  return a1;
}

uint64_t sub_10005FC74(uint64_t a1)
{
  uint64_t v303 = type metadata accessor for GameCenterSettings.OtherPlayerTypes();
  uint64_t v302 = *(void *)(v303 - 8);
  __chkstk_darwin(v303);
  v301 = (char *)&v288 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v313 = sub_100003C68(&qword_100077B78);
  uint64_t v305 = *(void *)(v313 - 8);
  __chkstk_darwin(v313);
  v304 = (char *)&v288 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100003C68(&qword_100077B80);
  uint64_t v326 = *(void *)(v4 - 8);
  uint64_t v327 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  v307 = (char *)&v288 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  v306 = (char *)&v288 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  v314 = (char *)&v288 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  v333 = (char *)&v288 - v12;
  __chkstk_darwin(v11);
  v329 = (char *)&v288 - v13;
  uint64_t v322 = sub_100003C68(&qword_100077A68);
  uint64_t v312 = *(void *)(v322 - 8);
  __chkstk_darwin(v322);
  char v321 = (char *)&v288 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100003C68(&qword_100076D40);
  __chkstk_darwin(v15 - 8);
  int64_t v296 = (char *)&v288 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v300 = sub_100003C68(&qword_100076D38);
  uint64_t v299 = *(void *)(v300 - 8);
  uint64_t v17 = __chkstk_darwin(v300);
  unint64_t v290 = (uint64_t *)((char *)&v288 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = __chkstk_darwin(v17);
  long long v291 = (char *)&v288 - v20;
  __chkstk_darwin(v19);
  uint64_t v297 = (char *)&v288 - v21;
  uint64_t v318 = sub_100003C68(&qword_100077A60);
  uint64_t v311 = *(void *)(v318 - 8);
  __chkstk_darwin(v318);
  v317 = (char *)&v288 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v334 = sub_100003C68(&qword_100077B88);
  uint64_t v325 = *(void *)(v334 - 8);
  __chkstk_darwin(v334);
  v335 = (char *)&v288 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v320 = sub_100003C68(&qword_100077B08);
  uint64_t v310 = *(void *)(v320 - 8);
  __chkstk_darwin(v320);
  uint64_t v319 = (char *)&v288 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_100003C68(&qword_100076D50);
  __chkstk_darwin(v25 - 8);
  long long v294 = (char *)&v288 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v298 = sub_100003C68(&qword_100076D48);
  uint64_t v308 = *(void *)(v298 - 8);
  uint64_t v27 = __chkstk_darwin(v298);
  v293 = (uint64_t *)((char *)&v288 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v29 = __chkstk_darwin(v27);
  long long v292 = (char *)&v288 - v30;
  __chkstk_darwin(v29);
  uint64_t v295 = (char *)&v288 - v31;
  uint64_t v316 = sub_100003C68(&qword_100077AE0);
  uint64_t v309 = *(void *)(v316 - 8);
  __chkstk_darwin(v316);
  NSURL v315 = (char *)&v288 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_100003C68(&qword_100076D58);
  uint64_t v34 = __chkstk_darwin(v33);
  __chkstk_darwin(v34);
  BOOL v36 = (char *)&v288 - v35;
  v343 = (void *)type metadata accessor for Application();
  uint64_t v323 = *(v343 - 1);
  uint64_t v37 = __chkstk_darwin(v343);
  unint64_t v39 = (char *)&v288 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __chkstk_darwin(v37);
  char v42 = (char *)&v288 - v41;
  __chkstk_darwin(v40);
  uint64_t v44 = (char *)&v288 - v43;
  uint64_t v340 = sub_100003C68(&qword_100077618);
  uint64_t v324 = *(void *)(v340 - 8);
  __chkstk_darwin(v340);
  v339 = (char *)&v288 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_100003C68(&qword_100077608);
  uint64_t v336 = *(void *)(v46 - 8);
  uint64_t v47 = __chkstk_darwin(v46);
  v338 = (char *)&v288 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = __chkstk_darwin(v47);
  uint64_t v51 = (char *)&v288 - v50;
  uint64_t v52 = __chkstk_darwin(v49);
  v332 = (char *)&v288 - v53;
  __chkstk_darwin(v52);
  id v55 = (char *)&v288 - v54;
  static ManagedSettingsSettings.allowedClients.getter();
  uint64_t v342 = v46;
  v328 = v55;
  uint64_t v56 = SettingMetadata.name.getter();
  v341 = (uint64_t *)a1;
  uint64_t v58 = *(void *)a1;
  if (*(void *)(*(void *)a1 + 16) && (unint64_t v59 = sub_100019BD4(v56, v57), (v60 & 1) != 0))
  {
    uint64_t v61 = *(void **)(*(void *)(v58 + 56) + 8 * v59);
    id v62 = v61;
  }
  else
  {
    uint64_t v61 = 0;
  }
  uint64_t v63 = v335;
  swift_bridgeObjectRelease();
  uint64_t isa = sub_10006223C((unint64_t *)&unk_100077160, (void (*)(uint64_t))&type metadata accessor for Application);
  uint64_t v345 = static Set<>.value(from:)();
  uint64_t v64 = sub_100003C68(&qword_1000778C0);
  uint64_t v330 = sub_100003C68(&qword_100076D70);
  uint64_t v331 = v64;
  if ((swift_dynamicCast() & 1) == 0)
  {
    v346 = 0;

LABEL_9:
    NSString v65 = &_swiftEmptySetSingleton;
    goto LABEL_10;
  }
  NSString v65 = v346;

  if (!v65) {
    goto LABEL_9;
  }
LABEL_10:
  v346 = v65;
  static AllowedClientSettings.allowedClient.getter();
  uint64_t v66 = SettingMetadata.name.getter();
  uint64_t v68 = *v341;
  if (*(void *)(*v341 + 16) && (unint64_t v69 = sub_100019BD4(v66, v67), (v70 & 1) != 0))
  {
    id v71 = *(id *)(*(void *)(v68 + 56) + 8 * v69);
    swift_bridgeObjectRelease();
    id v72 = v71;
    uint64_t v73 = v343;
    dispatch thunk of static Persistable.value(from:)();
    int v74 = swift_dynamicCast();
    uint64_t v75 = v323;
    (*(void (**)(char *, void, uint64_t, void *))(v323 + 56))(v36, v74 ^ 1u, 1, v73);

    if ((*(unsigned int (**)(char *, uint64_t, void *))(v75 + 48))(v36, 1, v73) == 1)
    {

      sub_100006E84((uint64_t)v36, &qword_100076D58);
      uint64_t v76 = v342;
    }
    else
    {
      id v289 = v72;
      (*(void (**)(char *, char *, void *))(v75 + 32))(v44, v36, v73);
      static Application.none.getter();
      sub_10006223C(&qword_100076E30, (void (*)(uint64_t))&type metadata accessor for Application);
      char v77 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v78 = *(void (**)(char *, void *))(v75 + 8);
      v78(v42, v73);
      uint64_t v76 = v342;
      if (v77)
      {
        v78(v44, v73);
      }
      else
      {
        uint64_t v91 = (uint64_t)v346;
        swift_bridgeObjectRetain();
        char v92 = sub_10005B5C8((uint64_t)v44, v91);
        swift_bridgeObjectRelease();
        if (v92)
        {
          v78(v44, v343);
        }
        else
        {
          uint64_t v93 = v343;
          (*(void (**)(char *, char *, void *))(v323 + 16))(v39, v44, v343);
          sub_100028DB8((uint64_t)v42, v39);
          v78(v42, v93);
          uint64_t v94 = SettingMetadata.name.getter();
          uint64_t v96 = v95;
          swift_bridgeObjectRetain();
          uint64_t v97 = Set<>.persistableValue()();
          swift_bridgeObjectRelease();
          uint64_t v98 = v341;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v345 = *v98;
          uint64_t *v98 = 0x8000000000000000;
          uint64_t v100 = v97;
          uint64_t v76 = v342;
          sub_10001DFE8(v100, v94, v96, isUniquelyReferenced_nonNull_native);
          uint64_t *v98 = v345;
          uint64_t v63 = v335;

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v78(v44, v93);
        }
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v76 = v342;
  }
  uint64_t v79 = v327;
  uint64_t v80 = (uint64_t)v341;
  uint64_t v81 = v329;
  if (v346[2])
  {
    static ApplicationSettings.blockedApplications.getter();
    uint64_t v82 = SettingMetadata.name.getter();
    uint64_t v84 = *(void *)v80;
    if (*(void *)(*(void *)v80 + 16) && (unint64_t v85 = sub_100019BD4(v82, v83), (v86 & 1) != 0))
    {
      id v87 = *(id *)(*(void *)(v84 + 56) + 8 * v85);
      swift_bridgeObjectRelease();
      id v88 = v87;
      uint64_t v344 = static Set<>.value(from:)();
      if (swift_dynamicCast())
      {
        uint64_t v89 = v345;

        if (v89)
        {
          if (v346[2] <= *(void *)(v89 + 16) >> 3)
          {
            uint64_t v345 = v89;
            uint64_t v101 = swift_bridgeObjectRetain();
            sub_10005C830(v101, &qword_100076D58, (uint64_t (*)(void))&type metadata accessor for Application, (void (*)(char *))sub_10005DBF4);
          }
          else
          {
            uint64_t v90 = swift_bridgeObjectRetain();
            sub_10005D20C(v90, v89);
          }
          swift_bridgeObjectRelease();
          uint64_t v102 = SettingMetadata.name.getter();
          uint64_t v104 = v103;
          uint64_t v105 = Set<>.persistableValue()();
          swift_bridgeObjectRelease();
          char v106 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v345 = *(void *)v80;
          *(void *)uint64_t v80 = 0x8000000000000000;
          sub_10001DFE8(v105, v102, v104, v106);
          *(void *)uint64_t v80 = v345;

          uint64_t v76 = v342;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v81 = v329;
          goto LABEL_32;
        }
      }
      else
      {
        uint64_t v345 = 0;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
LABEL_32:
    static ShieldSettings.unshieldableApplications.getter();
    uint64_t v107 = SettingMetadata.name.getter();
    uint64_t v109 = *(void *)v80;
    if (*(void *)(*(void *)v80 + 16) && (unint64_t v110 = sub_100019BD4(v107, v108), (v111 & 1) != 0))
    {
      Swift::Int v112 = *(void **)(*(void *)(v109 + 56) + 8 * v110);
      id v113 = v112;
    }
    else
    {
      Swift::Int v112 = 0;
    }
    swift_bridgeObjectRelease();
    uint64_t v344 = static Set<>.value(from:)();
    if (swift_dynamicCast())
    {
      uint64_t v114 = (void *)v345;

      if (v114)
      {
LABEL_41:
        uint64_t v345 = (uint64_t)v114;
        uint64_t v115 = swift_bridgeObjectRetain();
        sub_100038CF8(v115);
        uint64_t v116 = SettingMetadata.name.getter();
        uint64_t v118 = v117;
        uint64_t v119 = Set<>.persistableValue()();
        swift_bridgeObjectRelease();
        char v120 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v344 = *(void *)v80;
        *(void *)uint64_t v80 = 0x8000000000000000;
        sub_10001DFE8(v119, v116, v118, v120);
        *(void *)uint64_t v80 = v344;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v121 = *(void (**)(char *, uint64_t))(v336 + 8);
        v121(v51, v76);
        v121(v332, v76);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v345 = 0;
    }
    uint64_t v114 = &_swiftEmptySetSingleton;
    goto LABEL_41;
  }
LABEL_42:
  static ShieldSettings.unshieldableApplications.getter();
  uint64_t v122 = SettingMetadata.name.getter();
  uint64_t v124 = *(void *)v80;
  if (!*(void *)(*(void *)v80 + 16)) {
    goto LABEL_51;
  }
  unint64_t v125 = sub_100019BD4(v122, v123);
  if ((v126 & 1) == 0) {
    goto LABEL_51;
  }
  id v127 = *(id *)(*(void *)(v124 + 56) + 8 * v125);
  swift_bridgeObjectRelease();
  id v128 = v127;
  uint64_t v344 = static Set<>.value(from:)();
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v345 = 0;

    goto LABEL_53;
  }
  uint64_t v129 = v345;

  if (!v129)
  {
LABEL_53:

    goto LABEL_68;
  }
  if (!*(void *)(v129 + 16))
  {

LABEL_51:
    swift_bridgeObjectRelease();
    goto LABEL_68;
  }
  static ShieldSettings.applicationCategories.getter();
  uint64_t v130 = SettingMetadata.name.getter();
  uint64_t v132 = *(void *)v80;
  if (*(void *)(*(void *)v80 + 16) && (unint64_t v133 = sub_100019BD4(v130, v131), (v134 & 1) != 0))
  {
    id v135 = *(id *)(*(void *)(v132 + 56) + 8 * v133);
    swift_bridgeObjectRelease();
    char v136 = (char *)v135;
    uint64_t v137 = (uint64_t)v294;
    static ShieldSettings.EffectiveActivityCategoryPolicy<>.value(from:)();

    uint64_t v138 = v298;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v308 + 48))(v137, 1, v298) == 1)
    {

      sub_100006E84(v137, &qword_100076D50);
    }
    else
    {
      v332 = v136;
      unint64_t v147 = v295;
      (*(void (**)(char *, uint64_t, uint64_t))(v308 + 32))(v295, v137, v138);
      uint64_t v148 = v292;
      v149 = v147;
      uint64_t v150 = v308;
      (*(void (**)(char *, char *, uint64_t))(v308 + 16))(v292, v149, v138);
      uint64_t v151 = (*(uint64_t (**)(char *, uint64_t))(v150 + 88))(v148, v138);
      uint64_t v152 = v138;
      uint64_t v153 = v151;
      if (v151 == enum case for ShieldSettings.EffectiveActivityCategoryPolicy.specific<A>(_:))
      {
        uint64_t v154 = v152;
        (*(void (**)(char *, uint64_t))(v150 + 96))(v148, v152);
        uint64_t v155 = *(void *)v148;
        uint64_t v156 = *((void *)v148 + 1);
        uint64_t v157 = swift_bridgeObjectRetain();
        uint64_t v158 = sub_10005BBAC(v157, v156, (uint64_t (*)(void))&type metadata accessor for Application, (void (*)(char *, char *))sub_100028DB8);
        v159 = v293;
        uint64_t *v293 = v155;
        v159[1] = v158;
        uint64_t v63 = v335;
      }
      else
      {
        if (v151 != enum case for ShieldSettings.EffectiveActivityCategoryPolicy.all<A>(_:))
        {
          id v286 = v332;
          if (v151 != enum case for ShieldSettings.EffectiveActivityCategoryPolicy.none<A>(_:)) {
            goto LABEL_125;
          }
          (*(void (**)(char *, uint64_t))(v308 + 8))(v295, v298);

          goto LABEL_55;
        }
        uint64_t v150 = v308;
        char v261 = (uint64_t *)v292;
        uint64_t v154 = v298;
        (*(void (**)(char *))(v308 + 96))(v292);
        uint64_t v262 = *v261;
        uint64_t v263 = swift_bridgeObjectRetain();
        uint64_t v264 = sub_10005BBAC(v263, v262, (uint64_t (*)(void))&type metadata accessor for Application, (void (*)(char *, char *))sub_100028DB8);
        v159 = v293;
        uint64_t *v293 = v264;
      }
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v150 + 104))(v159, v153, v154);
      uint64_t v331 = SettingMetadata.name.getter();
      uint64_t v266 = v265;
      uint64_t v267 = ShieldSettings.EffectiveActivityCategoryPolicy<>.persistableValue()();
      char v268 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v345 = *(void *)v80;
      *(void *)uint64_t v80 = 0x8000000000000000;
      uint64_t v269 = v267;
      uint64_t v81 = v329;
      sub_10001DFE8(v269, v331, v266, v268);
      *(void *)uint64_t v80 = v345;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v270 = *(void (**)(uint64_t *, uint64_t))(v150 + 8);
      uint64_t v271 = v298;
      v270(v293, v298);
      v270((uint64_t *)v295, v271);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
LABEL_55:
  static ShieldSettings.applications.getter();
  uint64_t v139 = SettingMetadata.name.getter();
  uint64_t v141 = *(void *)v80;
  if (*(void *)(*(void *)v80 + 16) && (unint64_t v142 = sub_100019BD4(v139, v140), (v143 & 1) != 0))
  {
    id v144 = *(id *)(*(void *)(v141 + 56) + 8 * v142);
    swift_bridgeObjectRelease();
    id v145 = v144;
    uint64_t v146 = static Set<>.value(from:)();

    if (v146)
    {
      if (*(void *)(v129 + 16) <= *(void *)(v146 + 16) >> 3)
      {
        uint64_t v345 = v146;
        sub_10005C830(v129, &qword_100076D58, (uint64_t (*)(void))&type metadata accessor for Application, (void (*)(char *))sub_10005DBF4);
      }
      else
      {
        sub_10005D20C(v129, v146);
      }
      swift_bridgeObjectRelease();
      uint64_t v160 = SettingMetadata.name.getter();
      uint64_t v162 = v161;
      uint64_t v163 = Set<>.persistableValue()();
      swift_bridgeObjectRelease();
      char v164 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v345 = *(void *)v80;
      *(void *)uint64_t v80 = 0x8000000000000000;
      sub_10001DFE8(v163, v160, v162, v164);
      *(void *)uint64_t v80 = v345;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v63 = v335;
    }
    else
    {

      swift_bridgeObjectRelease();
    }
  }
  else
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v310 + 8))(v319, v320);
  (*(void (**)(char *, uint64_t))(v309 + 8))(v315, v316);
LABEL_68:
  uint64_t v165 = v333;
  uint64_t v166 = v334;
  static ShieldSettings.unshieldableWebDomains.getter();
  uint64_t v167 = SettingMetadata.name.getter();
  uint64_t v169 = *(void *)v80;
  if (!*(void *)(*(void *)v80 + 16) || (unint64_t v170 = sub_100019BD4(v167, v168), (v171 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_82:
    static GameCenterSettings.denyMultiplayerGaming.getter();
    uint64_t v184 = SettingMetadata.name.getter();
    uint64_t v186 = *(void *)v80;
    if (*(void *)(*(void *)v80 + 16))
    {
      unint64_t v187 = sub_100019BD4(v184, v185);
      if (v188)
      {
        id v189 = *(id *)(*(void *)(v186 + 56) + 8 * v187);
        swift_bridgeObjectRelease();
        id v190 = v189;
        LOBYTE(v344) = static Bool.value(from:)();
        sub_100003C68(&qword_100077B90);
        if (swift_dynamicCast())
        {
          int v191 = v345;

          if (v191 != 2 && (v191 & 1) != 0)
          {
            v192 = v304;
            static GameCenterSettings.allowedOtherPlayerTypes.getter();
            v343 = (void *)SettingMetadata.name.getter();
            v341 = (uint64_t *)v193;
            uint64_t v194 = v302;
            uint64_t v195 = v301;
            uint64_t v196 = v303;
            (*(void (**)(char *, void, uint64_t))(v302 + 104))(v301, enum case for GameCenterSettings.OtherPlayerTypes.none(_:), v303);
            uint64_t isa = (uint64_t)GameCenterSettings.OtherPlayerTypes.persistableValue()().isa;
            (*(void (**)(char *, uint64_t))(v194 + 8))(v195, v196);
            char v197 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v345 = *(void *)v80;
            *(void *)uint64_t v80 = 0x8000000000000000;
            sub_10001DFE8(isa, (uint64_t)v343, (uint64_t)v341, v197);
            *(void *)uint64_t v80 = v345;

            uint64_t v63 = v335;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v305 + 8))(v192, v313);
LABEL_91:
            static ApplicationSettings.denyAppInstallation.getter();
            uint64_t v198 = SettingMetadata.name.getter();
            uint64_t v200 = *(void *)v80;
            if (*(void *)(*(void *)v80 + 16) && (unint64_t v201 = sub_100019BD4(v198, v199), (v202 & 1) != 0))
            {
              id v203 = *(id *)(*(void *)(v200 + 56) + 8 * v201);
              swift_bridgeObjectRelease();
              id v204 = v203;
              LOBYTE(v344) = static Bool.value(from:)();
              sub_100003C68(&qword_100077B90);
              if (swift_dynamicCast())
              {
                int v205 = v345;

                if (v205 != 2 && (v205 & 1) != 0)
                {
                  static AppStoreSettings.denyAppStoreAppInstallation.getter();
                  v206 = v306;
                  static AppStoreSettings.denyMarketplaceAppInstallation.getter();
                  uint64_t v207 = v307;
                  static AppStoreSettings.denyWebDistributionAppInstallation.getter();
                  uint64_t v208 = SettingMetadata.name.getter();
                  uint64_t v210 = v209;
                  id v211 = v204;
                  char v212 = swift_isUniquelyReferenced_nonNull_native();
                  uint64_t v345 = *(void *)v80;
                  *(void *)uint64_t v80 = 0x8000000000000000;
                  sub_10001DFE8((uint64_t)v211, v208, v210, v212);
                  *(void *)uint64_t v80 = v345;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v213 = SettingMetadata.name.getter();
                  uint64_t v215 = v214;
                  id v216 = v211;
                  char v217 = swift_isUniquelyReferenced_nonNull_native();
                  uint64_t v345 = *(void *)v80;
                  *(void *)uint64_t v80 = 0x8000000000000000;
                  sub_10001DFE8((uint64_t)v216, v213, v215, v217);
                  *(void *)uint64_t v80 = v345;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v218 = SettingMetadata.name.getter();
                  uint64_t v220 = v219;
                  id v221 = v216;
                  char v222 = swift_isUniquelyReferenced_nonNull_native();
                  uint64_t v345 = *(void *)v80;
                  *(void *)uint64_t v80 = 0x8000000000000000;
                  sub_10001DFE8((uint64_t)v221, v218, v220, v222);
                  *(void *)uint64_t v80 = v345;

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v223 = *(void (**)(char *, uint64_t))(v326 + 8);
                  v223(v207, v79);
                  v223(v206, v79);
                  v223(v314, v79);
                  v223(v165, v79);
                  v223(v81, v79);
                  (*(void (**)(char *, uint64_t))(v325 + 8))(v335, v334);
LABEL_101:
                  uint64_t v225 = *(void (**)(char *, uint64_t))(v336 + 8);
                  uint64_t v226 = v342;
                  v225(v338, v342);
                  (*(void (**)(char *, uint64_t))(v324 + 8))(v339, v340);
                  return ((uint64_t (*)(char *, uint64_t))v225)(v328, v226);
                }
              }
              else
              {
                LOBYTE(v345) = 2;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            int64_t v224 = *(void (**)(char *, uint64_t))(v326 + 8);
            v224(v165, v79);
            v224(v81, v79);
            (*(void (**)(char *, uint64_t))(v325 + 8))(v63, v166);
            goto LABEL_101;
          }
        }
        else
        {
          LOBYTE(v345) = 2;
        }
        goto LABEL_91;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_91;
  }
  id v172 = *(id *)(*(void *)(v169 + 56) + 8 * v170);
  swift_bridgeObjectRelease();
  type metadata accessor for WebDomain();
  sub_10006223C(&qword_100076DA8, (void (*)(uint64_t))&type metadata accessor for WebDomain);
  id v173 = v172;
  uint64_t v344 = static Set<>.value(from:)();
  sub_100003C68(&qword_100077B98);
  sub_100003C68(&qword_100076D80);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v345 = 0;

    goto LABEL_79;
  }
  uint64_t v174 = v345;

  if (!v174)
  {
LABEL_79:

LABEL_80:
    swift_bridgeObjectRelease();
LABEL_81:
    uint64_t v165 = v333;
    uint64_t v166 = v334;
    uint64_t v63 = v335;
    goto LABEL_82;
  }
  if (!*(void *)(v174 + 16))
  {

    swift_bridgeObjectRelease();
    goto LABEL_80;
  }
  static ShieldSettings.webDomainCategories.getter();
  uint64_t v175 = SettingMetadata.name.getter();
  uint64_t v177 = *(void *)v80;
  if (!*(void *)(*(void *)v80 + 16) || (unint64_t v178 = sub_100019BD4(v175, v176), (v179 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_103;
  }
  id v180 = *(id *)(*(void *)(v177 + 56) + 8 * v178);
  swift_bridgeObjectRelease();
  id v181 = v180;
  uint64_t v182 = (uint64_t)v296;
  static ShieldSettings.EffectiveActivityCategoryPolicy<>.value(from:)();

  uint64_t v183 = v300;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v299 + 48))(v182, 1, v300) == 1)
  {

    swift_bridgeObjectRelease();
    sub_100006E84(v182, &qword_100076D40);
    goto LABEL_103;
  }
  v343 = v181;
  uint64_t v236 = v299;
  uint64_t v237 = v182;
  int64_t v238 = v297;
  (*(void (**)(char *, uint64_t, uint64_t))(v299 + 32))(v297, v237, v183);
  uint64_t v239 = (uint64_t *)v291;
  (*(void (**)(char *, char *, uint64_t))(v236 + 16))(v291, v238, v183);
  uint64_t v240 = (*(uint64_t (**)(uint64_t *, uint64_t))(v236 + 88))(v239, v183);
  uint64_t v241 = v183;
  uint64_t v242 = v240;
  if (v240 == enum case for ShieldSettings.EffectiveActivityCategoryPolicy.specific<A>(_:))
  {
    uint64_t v243 = v241;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t *, uint64_t))(v236 + 96))(v239, v243);
    uint64_t v245 = *v239;
    uint64_t v244 = v239[1];
    uint64_t v246 = swift_bridgeObjectRetain();
    uint64_t v247 = sub_10005BBAC(v246, v244, (uint64_t (*)(void))&type metadata accessor for WebDomain, (void (*)(char *, char *))sub_100028A94);
    char v248 = v290;
    *unint64_t v290 = v245;
    v248[1] = v247;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v236 + 104))(v248, v242, v300);
    uint64_t isa = SettingMetadata.name.getter();
    uint64_t v250 = v249;
    uint64_t v251 = ShieldSettings.EffectiveActivityCategoryPolicy<>.persistableValue()();
    char v252 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v345 = *v341;
    uint64_t *v341 = 0x8000000000000000;
    uint64_t v253 = v251;
    uint64_t v80 = (uint64_t)v341;
    sub_10001DFE8(v253, isa, v250, v252);
    *(void *)uint64_t v80 = v345;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v254 = *(void (**)(uint64_t *, uint64_t))(v236 + 8);
    uint64_t v255 = v300;
    v254(v248, v300);
    v254((uint64_t *)v297, v255);
    uint64_t v81 = v329;
    goto LABEL_103;
  }
  if (v240 == enum case for ShieldSettings.EffectiveActivityCategoryPolicy.all<A>(_:))
  {
    swift_bridgeObjectRelease();
    uint64_t v272 = v239;
    uint64_t v273 = v299;
    uint64_t v274 = v300;
    (*(void (**)(uint64_t *, uint64_t))(v299 + 96))(v272, v300);
    uint64_t v275 = *v272;
    uint64_t v276 = swift_bridgeObjectRetain();
    uint64_t v277 = sub_10005BBAC(v276, v275, (uint64_t (*)(void))&type metadata accessor for WebDomain, (void (*)(char *, char *))sub_100028A94);
    uint64_t v278 = v290;
    *unint64_t v290 = v277;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v273 + 104))(v278, v242, v274);
    uint64_t isa = SettingMetadata.name.getter();
    uint64_t v280 = v279;
    uint64_t v281 = ShieldSettings.EffectiveActivityCategoryPolicy<>.persistableValue()();
    char v282 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v345 = *v341;
    uint64_t *v341 = 0x8000000000000000;
    uint64_t v283 = v281;
    uint64_t v80 = (uint64_t)v341;
    sub_10001DFE8(v283, isa, v280, v282);
    *(void *)uint64_t v80 = v345;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v284 = *(void (**)(uint64_t *, uint64_t))(v273 + 8);
    uint64_t v285 = v300;
    v284(v278, v300);
    v284((uint64_t *)v297, v285);
    uint64_t v81 = v329;
    goto LABEL_103;
  }
  uint64_t v287 = v299;
  if (v240 == enum case for ShieldSettings.EffectiveActivityCategoryPolicy.none<A>(_:))
  {

    (*(void (**)(char *, uint64_t))(v287 + 8))(v297, v300);
    swift_bridgeObjectRelease();
    uint64_t v81 = v329;
LABEL_103:
    static ShieldSettings.webDomains.getter();
    uint64_t v228 = SettingMetadata.name.getter();
    uint64_t v230 = *(void *)v80;
    if (*(void *)(*(void *)v80 + 16) && (unint64_t v231 = sub_100019BD4(v228, v229), (v232 & 1) != 0))
    {
      id v233 = *(id *)(*(void *)(v230 + 56) + 8 * v231);
      swift_bridgeObjectRelease();
      id v234 = v233;
      uint64_t v235 = static Set<>.value(from:)();

      if (v235)
      {
        if (*(void *)(v174 + 16) <= *(void *)(v235 + 16) >> 3)
        {
          uint64_t v345 = v235;
          sub_10005C830(v174, &qword_100077A58, (uint64_t (*)(void))&type metadata accessor for WebDomain, (void (*)(char *))sub_10005D8D0);
        }
        else
        {
          sub_10005CB48(v174, v235);
        }
        swift_bridgeObjectRelease();
        uint64_t v256 = SettingMetadata.name.getter();
        uint64_t v258 = v257;
        uint64_t v259 = Set<>.persistableValue()();
        swift_bridgeObjectRelease();
        char v260 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v345 = *(void *)v80;
        *(void *)uint64_t v80 = 0x8000000000000000;
        sub_10001DFE8(v259, v256, v258, v260);
        *(void *)uint64_t v80 = v345;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v81 = v329;
      }
      else
      {

        swift_bridgeObjectRelease();
      }
    }
    else
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    (*(void (**)(char *, uint64_t))(v312 + 8))(v321, v322);
    (*(void (**)(char *, uint64_t))(v311 + 8))(v317, v318);
    goto LABEL_81;
  }
LABEL_125:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10006223C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100062284()
{
  unint64_t result = qword_100077BA0;
  if (!qword_100077BA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100077BA0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SanitizerError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SanitizerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100062434);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_10006245C(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SanitizerError()
{
  return &type metadata for SanitizerError;
}

unint64_t sub_10006247C()
{
  unint64_t result = qword_100077BA8;
  if (!qword_100077BA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100077BA8);
  }
  return result;
}

uint64_t static CocoaError.fileNoSuchFile.getter()
{
  return static CocoaError.fileNoSuchFile.getter();
}

uint64_t static CocoaError.fileReadNoSuchFile.getter()
{
  return static CocoaError.fileReadNoSuchFile.getter();
}

uint64_t type metadata accessor for CocoaError.Code()
{
  return type metadata accessor for CocoaError.Code();
}

uint64_t static _ErrorCodeProtocol.~= infix(_:_:)()
{
  return static _ErrorCodeProtocol.~= infix(_:_:)();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
}

uint64_t PropertyListDecoder.init()()
{
  return PropertyListDecoder.init()();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return type metadata accessor for PropertyListDecoder();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return dispatch thunk of PropertyListEncoder.encode<A>(_:)();
}

uint64_t PropertyListEncoder.init()()
{
  return PropertyListEncoder.init()();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return type metadata accessor for PropertyListEncoder();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t type metadata accessor for NSFastEnumerationIterator()
{
  return type metadata accessor for NSFastEnumerationIterator();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return type metadata accessor for URL.DirectoryHint();
}

uint64_t URL.lastPathComponent.getter()
{
  return URL.lastPathComponent.getter();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.deletingLastPathComponent()()
{
  return URL.deletingLastPathComponent()();
}

uint64_t static URL.== infix(_:_:)()
{
  return static URL.== infix(_:_:)();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

Swift::String __swiftcall URL.path(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1 = URL.path(percentEncoded:)(percentEncoded);
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t URL.path.getter()
{
  return URL.path.getter();
}

uint64_t URL.appending<A>(path:directoryHint:)()
{
  return URL.appending<A>(path:directoryHint:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t Data.init(contentsOf:options:)()
{
  return Data.init(contentsOf:options:)();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Data.write(to:options:)()
{
  return Data.write(to:options:)();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)UUID._bridgeToObjectiveC()();
}

uint64_t static UUID.== infix(_:_:)()
{
  return static UUID.== infix(_:_:)();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

NSObject __swiftcall GameCenterSettings.OtherPlayerTypes.persistableValue()()
{
  return (NSObject)GameCenterSettings.OtherPlayerTypes.persistableValue()();
}

uint64_t type metadata accessor for GameCenterSettings.OtherPlayerTypes()
{
  return type metadata accessor for GameCenterSettings.OtherPlayerTypes();
}

uint64_t static GameCenterSettings.denyMultiplayerGaming.getter()
{
  return static GameCenterSettings.denyMultiplayerGaming.getter();
}

uint64_t static GameCenterSettings.allowedOtherPlayerTypes.getter()
{
  return static GameCenterSettings.allowedOtherPlayerTypes.getter();
}

uint64_t type metadata accessor for ScreenTimeSettings.ShieldPolicy()
{
  return type metadata accessor for ScreenTimeSettings.ShieldPolicy();
}

NSObject __swiftcall UserSafetySettings.ScanningPolicy.persistableValue()()
{
  return (NSObject)UserSafetySettings.ScanningPolicy.persistableValue()();
}

uint64_t static UserSafetySettings.ScanningPolicy.maximumNudityDetectionApplicationsCount.getter()
{
  return static UserSafetySettings.ScanningPolicy.maximumNudityDetectionApplicationsCount.getter();
}

uint64_t static UserSafetySettings.ScanningPolicy.value(from:)()
{
  return static UserSafetySettings.ScanningPolicy.value(from:)();
}

uint64_t type metadata accessor for UserSafetySettings.ScanningPolicy()
{
  return type metadata accessor for UserSafetySettings.ScanningPolicy();
}

uint64_t type metadata accessor for UserSafetySettings.InterventionType()
{
  return type metadata accessor for UserSafetySettings.InterventionType();
}

NSObject __swiftcall WebContentSettings.FilterPolicy.persistableValue()()
{
  return (NSObject)WebContentSettings.FilterPolicy.persistableValue()();
}

uint64_t static WebContentSettings.FilterPolicy.maximumAutoDomainsCount.getter()
{
  return static WebContentSettings.FilterPolicy.maximumAutoDomainsCount.getter();
}

uint64_t static WebContentSettings.FilterPolicy.maximumAllExceptionsCount.getter()
{
  return static WebContentSettings.FilterPolicy.maximumAllExceptionsCount.getter();
}

uint64_t static WebContentSettings.FilterPolicy.maximumAutoExceptionsCount.getter()
{
  return static WebContentSettings.FilterPolicy.maximumAutoExceptionsCount.getter();
}

uint64_t static WebContentSettings.FilterPolicy.maximumSpecificDomainsCount.getter()
{
  return static WebContentSettings.FilterPolicy.maximumSpecificDomainsCount.getter();
}

uint64_t static WebContentSettings.FilterPolicy.value(from:)()
{
  return static WebContentSettings.FilterPolicy.value(from:)();
}

uint64_t type metadata accessor for WebContentSettings.FilterPolicy()
{
  return type metadata accessor for WebContentSettings.FilterPolicy();
}

uint64_t static ApplicationSettings.blockedApplications.getter()
{
  return static ApplicationSettings.blockedApplications.getter();
}

uint64_t static ApplicationSettings.denyAppInstallation.getter()
{
  return static ApplicationSettings.denyAppInstallation.getter();
}

uint64_t static ApplicationSettings.unremovableApplications.getter()
{
  return static ApplicationSettings.unremovableApplications.getter();
}

uint64_t static AllowedClientSettings.allowedClient.getter()
{
  return static AllowedClientSettings.allowedClient.getter();
}

uint64_t static MediaSettings.maximumMovieRating.getter()
{
  return static MediaSettings.maximumMovieRating.getter();
}

uint64_t static MediaSettings.maximumTVShowRating.getter()
{
  return static MediaSettings.maximumTVShowRating.getter();
}

uint64_t static ShieldSettings.webDomains.getter()
{
  return static ShieldSettings.webDomains.getter();
}

uint64_t static ShieldSettings.applications.getter()
{
  return static ShieldSettings.applications.getter();
}

uint64_t static ShieldSettings.webDomainCategories.getter()
{
  return static ShieldSettings.webDomainCategories.getter();
}

uint64_t static ShieldSettings.applicationCategories.getter()
{
  return static ShieldSettings.applicationCategories.getter();
}

uint64_t static ShieldSettings.ActivityCategoryPolicy.maximumAllExceptionsCount.getter()
{
  return static ShieldSettings.ActivityCategoryPolicy.maximumAllExceptionsCount.getter();
}

uint64_t static ShieldSettings.ActivityCategoryPolicy.maximumSpecificCategoriesCount.getter()
{
  return static ShieldSettings.ActivityCategoryPolicy.maximumSpecificCategoriesCount.getter();
}

uint64_t static ShieldSettings.ActivityCategoryPolicy.maximumSpecificExceptionsCount.getter()
{
  return static ShieldSettings.ActivityCategoryPolicy.maximumSpecificExceptionsCount.getter();
}

uint64_t static ShieldSettings.unshieldableWebDomains.getter()
{
  return static ShieldSettings.unshieldableWebDomains.getter();
}

uint64_t static ShieldSettings.unshieldableApplications.getter()
{
  return static ShieldSettings.unshieldableApplications.getter();
}

uint64_t ShieldSettings.EffectiveActivityCategoryPolicy<>.persistableValue()()
{
  return ShieldSettings.EffectiveActivityCategoryPolicy<>.persistableValue()();
}

uint64_t static ShieldSettings.EffectiveActivityCategoryPolicy<>.value(from:)()
{
  return static ShieldSettings.EffectiveActivityCategoryPolicy<>.value(from:)();
}

uint64_t static AppStoreSettings.denyMarketplaceAppInstallation.getter()
{
  return static AppStoreSettings.denyMarketplaceAppInstallation.getter();
}

uint64_t static AppStoreSettings.denyWebDistributionAppInstallation.getter()
{
  return static AppStoreSettings.denyWebDistributionAppInstallation.getter();
}

uint64_t static AppStoreSettings.denyAppStoreAppInstallation.getter()
{
  return static AppStoreSettings.denyAppStoreAppInstallation.getter();
}

uint64_t OverrideSettingsResponse.rawValue.getter()
{
  return OverrideSettingsResponse.rawValue.getter();
}

uint64_t type metadata accessor for OverrideSettingsResponse()
{
  return type metadata accessor for OverrideSettingsResponse();
}

uint64_t static ManagedSettingsPublisherService.agentInterface.getter()
{
  return static ManagedSettingsPublisherService.agentInterface.getter();
}

uint64_t static ManagedSettingsPublisherService.clientInterface.getter()
{
  return static ManagedSettingsPublisherService.clientInterface.getter();
}

uint64_t static ManagedSettingsPublisherService.name.getter()
{
  return static ManagedSettingsPublisherService.name.getter();
}

uint64_t static ManagedSettingsStore.PropertyKeys.syncToWatch.getter()
{
  return static ManagedSettingsStore.PropertyKeys.syncToWatch.getter();
}

uint64_t static ManagedSettingsStore.PropertyKeys.active.getter()
{
  return static ManagedSettingsStore.PropertyKeys.active.getter();
}

uint64_t static ManagedSettingsStore.Name.default.getter()
{
  return static ManagedSettingsStore.Name.default.getter();
}

uint64_t ManagedSettingsStore.Name.rawValue.getter()
{
  return ManagedSettingsStore.Name.rawValue.getter();
}

uint64_t type metadata accessor for ManagedSettingsStore.Name()
{
  return type metadata accessor for ManagedSettingsStore.Name();
}

uint64_t static ManagedSettingsService.agentInterface.getter()
{
  return static ManagedSettingsService.agentInterface.getter();
}

uint64_t static ManagedSettingsService.clientInterface.getter()
{
  return static ManagedSettingsService.clientInterface.getter();
}

uint64_t static ManagedSettingsService.name.getter()
{
  return static ManagedSettingsService.name.getter();
}

uint64_t static ManagedSettingsSettings.allowedClients.getter()
{
  return static ManagedSettingsSettings.allowedClients.getter();
}

uint64_t Application.init(bundleIdentifier:)()
{
  return Application.init(bundleIdentifier:)();
}

uint64_t Application.bundleIdentifier.getter()
{
  return Application.bundleIdentifier.getter();
}

NSObject __swiftcall Application.persistableValue()()
{
  return (NSObject)Application.persistableValue()();
}

uint64_t static Application.none.getter()
{
  return static Application.none.getter();
}

uint64_t Application.token.getter()
{
  return Application.token.getter();
}

uint64_t static Application.value(from:)()
{
  return static Application.value(from:)();
}

uint64_t type metadata accessor for Application()
{
  return type metadata accessor for Application();
}

uint64_t dispatch thunk of static Persistable.value(from:)()
{
  return dispatch thunk of static Persistable.value(from:)();
}

uint64_t static Persistence.dataVersion(from:)()
{
  return static Persistence.dataVersion(from:)();
}

uint64_t static Persistence.propertyData(from:)()
{
  return static Persistence.propertyData(from:)();
}

uint64_t static Persistence.createDirectory(at:)()
{
  return static Persistence.createDirectory(at:)();
}

uint64_t static Persistence.setFileAttributes(of:)()
{
  return static Persistence.setFileAttributes(of:)();
}

uint64_t static Persistence.data(from:)()
{
  return static Persistence.data(from:)();
}

uint64_t static Persistence.read(from:)()
{
  return static Persistence.read(from:)();
}

uint64_t static Persistence.write(dataVersion:to:)()
{
  return static Persistence.write(dataVersion:to:)();
}

uint64_t static Persistence.write(_:to:)()
{
  return static Persistence.write(_:to:)();
}

uint64_t type metadata accessor for Persistence()
{
  return type metadata accessor for Persistence();
}

uint64_t type metadata accessor for SettingScope()
{
  return type metadata accessor for SettingScope();
}

uint64_t dispatch thunk of XPCConnectable.processIdentifier.getter()
{
  return dispatch thunk of XPCConnectable.processIdentifier.getter();
}

NSObject_optional __swiftcall CombineOperator.combinePeristableValues(_:_:)(NSObject a1, NSObject a2)
{
  int v2 = (objc_class *)CombineOperator.combinePeristableValues(_:_:)(a1.isa, a2.isa);
  result.value.uint64_t isa = v2;
  result.is_nil = v3;
  return result;
}

uint64_t SettingMetadata.defaultValue.getter()
{
  return SettingMetadata.defaultValue.getter();
}

uint64_t SettingMetadata.maximumCount.getter()
{
  return SettingMetadata.maximumCount.getter();
}

uint64_t SettingMetadata.name.getter()
{
  return SettingMetadata.name.getter();
}

uint64_t type metadata accessor for SettingMetadata()
{
  return type metadata accessor for SettingMetadata();
}

uint64_t ActivityCategory.init(identifier:)()
{
  return ActivityCategory.init(identifier:)();
}

uint64_t ActivityCategory.token.getter()
{
  return ActivityCategory.token.getter();
}

uint64_t type metadata accessor for ActivityCategory()
{
  return type metadata accessor for ActivityCategory();
}

uint64_t SetCombineOperator.currentValue(_:restricts:)()
{
  return SetCombineOperator.currentValue(_:restricts:)();
}

uint64_t SetCombineOperator<>.currentValue(_:restricts:shouldUsePatternMatching:)()
{
  return SetCombineOperator<>.currentValue(_:restricts:shouldUsePatternMatching:)();
}

uint64_t BoundedSettingMetadata.defaultValue.getter()
{
  return BoundedSettingMetadata.defaultValue.getter();
}

uint64_t BoundedSettingMetadata.name.getter()
{
  return BoundedSettingMetadata.name.getter();
}

uint64_t dispatch thunk of SettingMetadataProtocol.combineOperator.getter()
{
  return dispatch thunk of SettingMetadataProtocol.combineOperator.getter();
}

uint64_t dispatch thunk of SettingMetadataProtocol.isPrivacySensitive.getter()
{
  return dispatch thunk of SettingMetadataProtocol.isPrivacySensitive.getter();
}

uint64_t dispatch thunk of SettingMetadataProtocol.name.getter()
{
  return dispatch thunk of SettingMetadataProtocol.name.getter();
}

uint64_t dispatch thunk of SettingMetadataProtocol.scope.getter()
{
  return dispatch thunk of SettingMetadataProtocol.scope.getter();
}

uint64_t dispatch thunk of SettingMetadataProtocol.isPublic.getter()
{
  return dispatch thunk of SettingMetadataProtocol.isPublic.getter();
}

uint64_t static SettingMetadataDirectory.metadata(for:)()
{
  return static SettingMetadataDirectory.metadata(for:)();
}

uint64_t ActivityCategoryPolicyCombineOperator.currentValue(_:restricts:including:)()
{
  return ActivityCategoryPolicyCombineOperator.currentValue(_:restricts:including:)();
}

uint64_t Token.data.getter()
{
  return Token.data.getter();
}

uint64_t Token.init(data:)()
{
  return Token.init(data:)();
}

uint64_t static Feature.isManagedSettingsEnabled.getter()
{
  return static Feature.isManagedSettingsEnabled.getter();
}

uint64_t dispatch thunk of Locatable.applicationSettingsPath(for:)()
{
  return dispatch thunk of Locatable.applicationSettingsPath(for:)();
}

uint64_t dispatch thunk of Locatable.internalSettingsRootDirectory.getter()
{
  return dispatch thunk of Locatable.internalSettingsRootDirectory.getter();
}

uint64_t dispatch thunk of Locatable.internalSettingsPath(for:)()
{
  return dispatch thunk of Locatable.internalSettingsPath(for:)();
}

uint64_t dispatch thunk of Locatable.effectiveSettingsPath.getter()
{
  return dispatch thunk of Locatable.effectiveSettingsPath.getter();
}

uint64_t dispatch thunk of Locatable.effectiveSettingsDirectory.getter()
{
  return dispatch thunk of Locatable.effectiveSettingsDirectory.getter();
}

uint64_t dispatch thunk of Locatable.dataVersionPath.getter()
{
  return dispatch thunk of Locatable.dataVersionPath.getter();
}

uint64_t dispatch thunk of Locatable.dataVersionDirectory.getter()
{
  return dispatch thunk of Locatable.dataVersionDirectory.getter();
}

uint64_t dispatch thunk of Locatable.diagnosticsDirectory.getter()
{
  return dispatch thunk of Locatable.diagnosticsDirectory.getter();
}

uint64_t dispatch thunk of Locatable.persistenceRecordStorePath.getter()
{
  return dispatch thunk of Locatable.persistenceRecordStorePath.getter();
}

uint64_t dispatch thunk of Locatable.persistenceRecordStoreDirectory.getter()
{
  return dispatch thunk of Locatable.persistenceRecordStoreDirectory.getter();
}

uint64_t Locations.persistenceRecordStorePath.getter()
{
  return Locations.persistenceRecordStorePath.getter();
}

uint64_t Locations.init()()
{
  return Locations.init()();
}

uint64_t type metadata accessor for Locations()
{
  return type metadata accessor for Locations();
}

uint64_t WebDomain.token.getter()
{
  return WebDomain.token.getter();
}

uint64_t WebDomain.init(domain:)()
{
  return WebDomain.init(domain:)();
}

uint64_t type metadata accessor for WebDomain()
{
  return type metadata accessor for WebDomain();
}

uint64_t KeyRetriever.init()()
{
  return KeyRetriever.init()();
}

uint64_t type metadata accessor for KeyRetriever()
{
  return type metadata accessor for KeyRetriever();
}

uint64_t TokenDecoder.init(teamIdentifier:keyRetriever:)()
{
  return TokenDecoder.init(teamIdentifier:keyRetriever:)();
}

uint64_t dispatch thunk of TokenDecoder.decode(bundleIdentifierToken:)()
{
  return dispatch thunk of TokenDecoder.decode(bundleIdentifierToken:)();
}

uint64_t dispatch thunk of TokenDecoder.decode(categoryIdentifierToken:)()
{
  return dispatch thunk of TokenDecoder.decode(categoryIdentifierToken:)();
}

uint64_t dispatch thunk of TokenDecoder.decode(webDomainToken:)()
{
  return dispatch thunk of TokenDecoder.decode(webDomainToken:)();
}

uint64_t type metadata accessor for TokenDecoder()
{
  return type metadata accessor for TokenDecoder();
}

uint64_t TokenEncoder.init(teamIdentifier:keyRetriever:)()
{
  return TokenEncoder.init(teamIdentifier:keyRetriever:)();
}

uint64_t dispatch thunk of TokenEncoder.encode(bundleIdentifier:)()
{
  return dispatch thunk of TokenEncoder.encode(bundleIdentifier:)();
}

uint64_t dispatch thunk of TokenEncoder.encode(categoryIdentifier:)()
{
  return dispatch thunk of TokenEncoder.encode(categoryIdentifier:)();
}

uint64_t dispatch thunk of TokenEncoder.encode(webDomain:)()
{
  return dispatch thunk of TokenEncoder.encode(webDomain:)();
}

uint64_t type metadata accessor for TokenEncoder()
{
  return type metadata accessor for TokenEncoder();
}

uint64_t static TeamIdentifierRetriever.internalTeamIdentifier.getter()
{
  return static TeamIdentifierRetriever.internalTeamIdentifier.getter();
}

uint64_t type metadata accessor for TeamIdentifierRetriever()
{
  return type metadata accessor for TeamIdentifierRetriever();
}

uint64_t dispatch thunk of static TeamIdentifierRetrieving.teamIdentifierFromCurrentConnection()()
{
  return dispatch thunk of static TeamIdentifierRetrieving.teamIdentifierFromCurrentConnection()();
}

uint64_t static Logger.overrideSettings.getter()
{
  return static Logger.overrideSettings.getter();
}

uint64_t static Logger.shieldAction.getter()
{
  return static Logger.shieldAction.getter();
}

uint64_t static Logger.subscription.getter()
{
  return static Logger.subscription.getter();
}

uint64_t static Logger.persistenceRecordStore.getter()
{
  return static Logger.persistenceRecordStore.getter();
}

uint64_t static Logger.agent.getter()
{
  return static Logger.agent.getter();
}

uint64_t static Logger.migrator.getter()
{
  return static Logger.migrator.getter();
}

uint64_t static Logger.nanoSync.getter()
{
  return static Logger.nanoSync.getter();
}

uint64_t static Logger.effective.getter()
{
  return static Logger.effective.getter();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t XPC_EVENT_KEY_NAME.getter()
{
  return XPC_EVENT_KEY_NAME.getter();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return type metadata accessor for DispatchQoS.QoSClass();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t static DispatchTime.now()()
{
  return static DispatchTime.now()();
}

uint64_t type metadata accessor for DispatchTime()
{
  return type metadata accessor for DispatchTime();
}

uint64_t + infix(_:_:)()
{
  return + infix(_:_:)();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t Dictionary<>.persistableValue()()
{
  return Dictionary<>.persistableValue()();
}

uint64_t static Dictionary<>.value(from:)()
{
  return static Dictionary<>.value(from:)();
}

uint64_t Dictionary.init(minimumCapacity:)()
{
  return Dictionary.init(minimumCapacity:)();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = String.lowercased()();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t String.utf8CString.getter()
{
  return String.utf8CString.getter();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.init(cString:)()
{
  return String.init(cString:)();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Array._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

NSObject __swiftcall Bool.persistableValue()()
{
  return (NSObject)Bool.persistableValue()();
}

uint64_t static Bool.value(from:)()
{
  return static Bool.value(from:)();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t static Set._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Set._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Set.description.getter()
{
  return Set.description.getter();
}

uint64_t Set<>.persistableValue()()
{
  return Set<>.persistableValue()();
}

uint64_t static Set<>.value(from:)()
{
  return static Set<>.value(from:)();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Set.Index._asCocoa.modify()
{
  return Set.Index._asCocoa.modify();
}

uint64_t static Int.value(from:)()
{
  return static Int.value(from:)();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return dispatch thunk of Collection.count.getter();
}

Swift::Void __swiftcall NSXPCListener.setNonLaunching(_:)(Swift::Bool a1)
{
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return static OS_dispatch_queue.global(qos:)();
}

uint64_t static NSNotificationName.effectiveMediaSettingsChanged.getter()
{
  return static NSNotificationName.effectiveMediaSettingsChanged.getter();
}

uint64_t type metadata accessor for OS_dispatch_source.TimerFlags()
{
  return type metadata accessor for OS_dispatch_source.TimerFlags();
}

uint64_t static OS_dispatch_source.makeTimerSource(flags:queue:)()
{
  return static OS_dispatch_source.makeTimerSource(flags:queue:)();
}

uint64_t OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  return OS_dispatch_source.setEventHandler(qos:flags:handler:)();
}

Swift::Void __swiftcall OS_dispatch_source.cancel()()
{
}

Swift::Void __swiftcall OS_dispatch_source.resume()()
{
}

uint64_t OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)()
{
  return OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
}

uint64_t NSSet.makeIterator()()
{
  return NSSet.makeIterator()();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return dispatch thunk of IteratorProtocol.next()();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return StringProtocol.components<A>(separatedBy:)();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return __CocoaSet.startIndex.getter();
}

uint64_t __CocoaSet.Index.handleBitPattern.getter()
{
  return __CocoaSet.Index.handleBitPattern.getter();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return __CocoaSet.Index.age.getter();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return __CocoaSet.Index.element.getter();
}

uint64_t __CocoaSet.count.getter()
{
  return __CocoaSet.count.getter();
}

uint64_t __CocoaSet.element(at:)()
{
  return __CocoaSet.element(at:)();
}

uint64_t __CocoaSet.formIndex(after:isUnique:)()
{
  return __CocoaSet.formIndex(after:isUnique:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return _StringGuts._slowWithCString<A>(_:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return __CocoaDictionary.makeIterator()();
}

uint64_t __CocoaDictionary.count.getter()
{
  return __CocoaDictionary.count.getter();
}

uint64_t __CocoaDictionary.lookup(_:)()
{
  return __CocoaDictionary.lookup(_:)();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return __CocoaDictionary.Iterator.next()();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.convert(_:capacity:)()
{
  return static _DictionaryStorage.convert(_:capacity:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

uint64_t static Hasher._hash(seed:bytes:count:)()
{
  return static Hasher._hash(seed:bytes:count:)();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t BSPIDIsBeingDebugged()
{
  return _BSPIDIsBeingDebugged();
}

uint64_t DMGetUserDataDisposition()
{
  return _DMGetUserDataDisposition();
}

uint64_t MKBDeviceUnlockedSinceBoot()
{
  return _MKBDeviceUnlockedSinceBoot();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _set_user_dir_suffix()
{
  return __set_user_dir_suffix();
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_main(void)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_checkMetadataState()
{
  return _swift_checkMetadataState();
}

uint64_t swift_conformsToProtocol2()
{
  return _swift_conformsToProtocol2();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastMetatype()
{
  return _swift_dynamicCastMetatype();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return _swift_getAssociatedConformanceWitness();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
}

BOOL xpc_array_apply(xpc_object_t xarray, xpc_array_applier_t applier)
{
  return _xpc_array_apply(xarray, applier);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return _xpc_array_create(objects, count);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return _xpc_dictionary_create(keys, values, count);
}

xpc_object_t xpc_dictionary_get_array(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_array(xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

uint64_t xpc_event_publisher_activate()
{
  return _xpc_event_publisher_activate();
}

uint64_t xpc_event_publisher_create()
{
  return _xpc_event_publisher_create();
}

uint64_t xpc_event_publisher_fire()
{
  return _xpc_event_publisher_fire();
}

uint64_t xpc_event_publisher_set_error_handler()
{
  return _xpc_event_publisher_set_error_handler();
}

uint64_t xpc_event_publisher_set_handler()
{
  return _xpc_event_publisher_set_handler();
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

uint64_t xpc_strerror()
{
  return _xpc_strerror();
}

xpc_object_t xpc_string_create(const char *string)
{
  return _xpc_string_create(string);
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return _xpc_string_get_string_ptr(xstring);
}

id objc_msgSend_initWithDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:");
}