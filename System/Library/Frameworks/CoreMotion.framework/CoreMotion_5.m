uint64_t sub_19054508C(uint64_t result, void *a2)
{
  uint64_t v2;

  v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFD09B8;
  a2[1] = v2;
  return result;
}

void sub_1905450B8(uint64_t a1)
{
}

uint64_t sub_1905450C0(uint64_t a1, uint64_t a2)
{
  if (sub_1903885B4(a2, (uint64_t)&unk_1EDFC7610)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_190545100()
{
  return &unk_1EDFC7610;
}

void sub_19054522C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FCC980](v19, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_190545268(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  v3 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  v7 = (NSSet *)objc_msgSend_setWithObjects_(v3, v6, v4, v5, 0);
  if (*a2
    && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v7)) != 0
    && (v10 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v9, @"CMErrorMessage")) != 0)
  {
    int v13 = objc_msgSend_intValue(v10, v11, v12);
  }
  else
  {
    int v13 = 103;
  }
  if (qword_1E929D760 != -1) {
    dispatch_once(&qword_1E929D760, &unk_1EDFD3A40);
  }
  v14 = qword_1E929D768;
  if (os_log_type_enabled((os_log_t)qword_1E929D768, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    int v17 = v13;
    _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_FAULT, "Failed with CMError code %{public}d", buf, 8u);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D760 != -1) {
      dispatch_once(&qword_1E929D760, &unk_1EDFD3A40);
    }
    v15 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "-[CMFitnessMachineInternal init]_block_invoke", "CoreLocation: %s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
}

void sub_190545480(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = getpid();
  uint64_t ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2);
  if (ExecutablePathFromPid)
  {
    uint64_t v5 = ExecutablePathFromPid;
    if (qword_1E929D760 != -1) {
      dispatch_once(&qword_1E929D760, &unk_1EDFD3A40);
    }
    v6 = qword_1E929D768;
    if (os_log_type_enabled((os_log_t)qword_1E929D768, OS_LOG_TYPE_INFO))
    {
      pid_t v7 = getpid();
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412802;
      uint64_t v11 = v5;
      __int16 v12 = 1024;
      pid_t v13 = v7;
      __int16 v14 = 2048;
      uint64_t v15 = v8;
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_INFO, "CMFitnessMachine client connection interrupt, %@, %d, %p", buf, 0x1Cu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D760 != -1) {
        dispatch_once(&qword_1E929D760, &unk_1EDFD3A40);
      }
      getpid();
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMFitnessMachineInternal init]_block_invoke", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

void sub_1905457EC(uint64_t a1, const char *a2)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  pid_t v7 = @"CMFitnessMachineDataRecord";
  v8[0] = v2;
  uint64_t v4 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v8, &v7, 1);
  sub_190545E24("kCLConnectionMessageFitnessMachineData", &v4, &v5);
  v3 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CLConnectionClient::sendMessage();
  if (v3) {
    sub_1902D8B58(v3);
  }
  if (v6) {
    sub_1902D8B58(v6);
  }
}

void sub_1905458D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a11) {
    sub_1902D8B58(a11);
  }
  if (a14) {
    sub_1902D8B58(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905458FC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  v3 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  pid_t v7 = (NSSet *)objc_msgSend_setWithObjects_(v3, v6, v4, v5, 0);
  if (*a2 && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v7)) != 0)
  {
    v10 = DictionaryOfClasses;
    if (objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v9, @"CMErrorMessage"))
    {
      if (qword_1E929D760 != -1) {
        dispatch_once(&qword_1E929D760, &unk_1EDFD3A40);
      }
      uint64_t v11 = qword_1E929D768;
      if (os_log_type_enabled((os_log_t)qword_1E929D768, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v17 = objc_msgSend_objectForKeyedSubscript_(v10, v12, @"CMErrorMessage");
        _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_ERROR, "Error feeding fitness machine data, %@", buf, 0xCu);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D760 != -1) {
          dispatch_once(&qword_1E929D760, &unk_1EDFD3A40);
        }
        objc_msgSend_objectForKeyedSubscript_(v10, v13, @"CMErrorMessage");
LABEL_20:
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "-[CMFitnessMachineInternal _feedFitnessMachineData:]_block_invoke", "CoreLocation: %s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
    }
  }
  else
  {
    if (qword_1E929D760 != -1) {
      dispatch_once(&qword_1E929D760, &unk_1EDFD3A40);
    }
    __int16 v14 = qword_1E929D768;
    if (os_log_type_enabled((os_log_t)qword_1E929D768, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_ERROR, "Error feeding fitness machine data", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D760 != -1) {
        dispatch_once(&qword_1E929D760, &unk_1EDFD3A40);
      }
      goto LABEL_20;
    }
  }
}

uint64_t sub_190545D0C(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend__teardown(*(void **)(a1 + 32), a2, a3);
}

uint64_t sub_190545DBC(uint64_t a1, const char *a2)
{
  uint64_t result = objc_msgSend_isAuthorizedForEntitlement_(CMMotionUtils, a2, @"com.apple.locationd.activity");
  qword_1EB3BF560 = result;
  return result;
}

os_log_t sub_190545DF4()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Calorimetry");
  qword_1E929D768 = (uint64_t)result;
  return result;
}

void *sub_190545E24@<X0>(char *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  v6 = operator new(0x70uLL);
  os_log_t result = sub_190545E88(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_190545E74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_190545E88(void *a1, char *__s, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDFD0DA0;
  sub_190545EFC((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_190545EE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_190545EFC(int a1, uint64_t a2, char *__s, void *a4)
{
  sub_1902C3F54(__p, __s);
  MEMORY[0x192FCC420](a2, __p, *a4);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_190545F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_190546214(uint64_t a1, const char *a2, uint64_t a3)
{
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    objc_msgSend_delegate(*(void **)(a1 + 32), a2, a3);
    if (objc_opt_respondsToSelector())
    {
      uint64_t v8 = objc_msgSend_delegateQueue(v3, v6, v7);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_1905462C4;
      block[3] = &unk_1E568F490;
      block[4] = v3;
      block[5] = a2;
      block[6] = a3;
      dispatch_async(v8, block);
    }
  }
}

uint64_t sub_1905462C4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_delegate(*(void **)(a1 + 32), a2, a3);
  uint64_t v5 = *(void *)(a1 + 40);

  return MEMORY[0x1F4181798](v4, sel_eventUpdateForDevice_event_, v5);
}

void sub_190546480(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!*a2)
  {
    *(double *)(a4 + 8) = *(double *)(a3 + 40) * 0.0174532924;
    if (qword_1E929D9D8 != -1) {
      dispatch_once(&qword_1E929D9D8, &unk_1EDFD3300);
    }
    uint64_t v5 = qword_1E929D9E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D9E0, OS_LOG_TYPE_INFO))
    {
      double v6 = *(double *)(a4 + 8) * 57.2957802;
      *(_DWORD *)buf = 134217984;
      double v9 = v6;
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_INFO, "Received geomagnetic model, declination [deg],%f", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D9D8 != -1) {
        dispatch_once(&qword_1E929D9D8, &unk_1EDFD3300);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "static void CLInertialOdometryNotifier::GeomagneticModelClient::onGeomagneticModelNotification(int, const CLGeomagneticModelProvider_Type::Notification &, const CLGeomagneticModelProvider_Type::NotificationData &, void *)", "CoreLocation: %s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

uint64_t sub_190546668()
{
  if (qword_1EB3BF578 != -1) {
    dispatch_once(&qword_1EB3BF578, &unk_1EDFD22A0);
  }
  return qword_1EB3BF570;
}

BOOL sub_1905466AC()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  BOOL result = +[CMOdometryManager isAvailable]_0();
  if (result)
  {
    if (qword_1E929D9D8 != -1) {
      dispatch_once(&qword_1E929D9D8, &unk_1EDFD3300);
    }
    v1 = qword_1E929D9E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D9E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v1, OS_LOG_TYPE_DEFAULT, "Creating InertialOdometry notifier", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D9D8 != -1) {
        dispatch_once(&qword_1E929D9D8, &unk_1EDFD3300);
      }
      uint64_t v2 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "static CLInertialOdometryNotifier *CLInertialOdometryNotifier::instance()_block_invoke", "CoreLocation: %s\n", v2);
      if (v2 != (char *)buf) {
        free(v2);
      }
    }
    operator new();
  }
  return result;
}

void sub_190546998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FCC980](v20, 0xB0C40BC2CC919);
  sub_190421DA8(v19, 0);
  uint64_t v23 = *v21;
  uint64_t *v21 = 0;
  if (v23) {
    sub_190547B40(v23);
  }
  v18[4] = &unk_1EDFC2858;
  v24 = (std::__shared_weak_count *)v18[6];
  if (v24) {
    sub_1902D8B58(v24);
  }
  sub_1904DC240(v18);
  MEMORY[0x192FCC980](v18, 0x10F1C40D4AB533BLL);
  _Unwind_Resume(a1);
}

void sub_190546A60(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (qword_1E929D9D8 != -1) {
    dispatch_once(&qword_1E929D9D8, &unk_1EDFD3300);
  }
  v3 = qword_1E929D9E0;
  if (os_log_type_enabled((os_log_t)qword_1E929D9E0, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = CLConnectionMessage::name(*a2);
    if (*(char *)(v4 + 23) >= 0) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = *(void *)v4;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v8 = v5;
    _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEBUG, "Default handler received message %{public}s", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D9D8 != -1) {
      dispatch_once(&qword_1E929D9D8, &unk_1EDFD3300);
    }
    CLConnectionMessage::name(*a2);
    double v6 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "CLInertialOdometryNotifier::CLInertialOdometryNotifier()_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void *sub_190546C40(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFC27D8;
  *(void *)(a1 + 32) = &unk_1EDFC2828;
  dispatch_release(*(dispatch_object_t *)(a1 + 88));
  *(void *)(a1 + 88) = 0;
  sub_190421DA8((uint64_t *)(a1 + 80), 0);
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    sub_190547B40(v2);
  }
  *(void *)(a1 + 32) = &unk_1EDFC2858;
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3) {
    sub_1902D8B58(v3);
  }

  return sub_1904DC240((void *)a1);
}

void *sub_190546D04(uint64_t a1)
{
  return sub_190546C40(a1 - 32);
}

void sub_190546D0C(uint64_t a1)
{
  sub_190546C40(a1);

  JUMPOUT(0x192FCC980);
}

void sub_190546D44(uint64_t a1)
{
  sub_190546C40(a1 - 32);

  JUMPOUT(0x192FCC980);
}

double sub_190546D80(uint64_t *a1, int a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1E929D9D8 != -1) {
      dispatch_once(&qword_1E929D9D8, &unk_1EDFD3300);
    }
    v3 = qword_1E929D9E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D9E0, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_FAULT, "Unrecognized notification", (uint8_t *)&buf, 2u);
    }
    double v4 = 0.0;
    if (sub_1902D8400(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1E929D9D8 != -1) {
        dispatch_once(&qword_1E929D9D8, &unk_1EDFD3300);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "virtual CFTimeInterval CLInertialOdometryNotifier::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v5);
      if (v5 != (char *)&buf) {
        free(v5);
      }
    }
  }
  else
  {
    double v4 = 0.0;
    if (sub_1905CFCB0((uint64_t)(a1 + 4)))
    {
      if (qword_1E929D9D8 != -1) {
        dispatch_once(&qword_1E929D9D8, &unk_1EDFD3300);
      }
      uint64_t v8 = qword_1E929D9E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D9E0, OS_LOG_TYPE_DEFAULT))
      {
        double v9 = *(double *)a3;
        LODWORD(buf) = 134349056;
        *(double *)((char *)&buf + 4) = v9;
        _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_DEFAULT, "Minimum inertial odometry update interval changed to %{public}f", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1E929D9D8 != -1) {
          dispatch_once(&qword_1E929D9D8, &unk_1EDFD3300);
        }
        v21 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "virtual CFTimeInterval CLInertialOdometryNotifier::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v21);
        if (v21 != (char *)&buf) {
          free(v21);
        }
      }
      double v10 = rint(*(double *)a3 * 1000000.0);
      if (*(double *)a3 < 0.0) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = (uint64_t)v10;
      }
      sub_1902CDC50(a1[5], v11);
      double v12 = *(double *)a3;
      pid_t v13 = a1[11];
      *(void *)&long long buf = MEMORY[0x1E4F143A8];
      *((void *)&buf + 1) = 3221225472;
      v25 = sub_1905479D0;
      v26 = &unk_1E568F5A8;
      v27 = a1;
      double v28 = v12;
      dispatch_async(v13, &buf);
      double v14 = *(double *)a3;
      uint64_t v15 = a1[9];
      sub_1902BAD40();
      if (v14 <= 0.0)
      {
        *(void *)(v15 + 8) = 0;
        if (*(void *)(v15 + 16))
        {
          if (qword_1E929D9D8 != -1) {
            dispatch_once(&qword_1E929D9D8, &unk_1EDFD3300);
          }
          uint64_t v18 = qword_1E929D9E0;
          if (os_log_type_enabled((os_log_t)qword_1E929D9E0, OS_LOG_TYPE_INFO))
          {
            LOWORD(buf) = 0;
            _os_log_impl(&dword_1902AF000, v18, OS_LOG_TYPE_INFO, "Unregistering for geomagnetic model updates", (uint8_t *)&buf, 2u);
          }
          if (sub_1902D8400(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1E929D9D8 != -1) {
              dispatch_once(&qword_1E929D9D8, &unk_1EDFD3300);
            }
            uint64_t v23 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 2, "void CLInertialOdometryNotifier::GeomagneticModelClient::unregisterForGeomagneticModelNotification()", "CoreLocation: %s\n", v23);
            if (v23 != (char *)&buf) {
              free(v23);
            }
          }
          objc_msgSend_unregister_forNotification_(*(void **)(*(void *)(v15 + 16) + 16), v19, *(void *)(*(void *)(v15 + 16) + 8), 0);
        }
      }
      else
      {
        if (!*(void *)(v15 + 16)) {
          sub_1905419CC();
        }
        if (qword_1E929D9D8 != -1) {
          dispatch_once(&qword_1E929D9D8, &unk_1EDFD3300);
        }
        uint64_t v16 = qword_1E929D9E0;
        if (os_log_type_enabled((os_log_t)qword_1E929D9E0, OS_LOG_TYPE_INFO))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1902AF000, v16, OS_LOG_TYPE_INFO, "Registering for geomagnetic model updates", (uint8_t *)&buf, 2u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1E929D9D8 != -1) {
            dispatch_once(&qword_1E929D9D8, &unk_1EDFD3300);
          }
          v22 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "void CLInertialOdometryNotifier::GeomagneticModelClient::registerForGeomagneticModelNotification()", "CoreLocation: %s\n", v22);
          if (v22 != (char *)&buf) {
            free(v22);
          }
        }
        objc_msgSend_register_forNotification_registrationInfo_(*(void **)(*(void *)(v15 + 16) + 16), v17, *(void *)(*(void *)(v15 + 16) + 8), 0, 0);
      }
      return *(double *)a3;
    }
  }
  return v4;
}

void sub_190547410(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (qword_1E929D9D8 != -1) {
    dispatch_once(&qword_1E929D9D8, &unk_1EDFD3300);
  }
  v3 = qword_1E929D9E0;
  if (os_log_type_enabled((os_log_t)qword_1E929D9E0, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a2 + 1);
    *(_DWORD *)long long buf = 67240192;
    int v7 = v4;
    _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEFAULT, "pong,%{public}u", buf, 8u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D9D8 != -1) {
      dispatch_once(&qword_1E929D9D8, &unk_1EDFD3300);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "virtual void CLInertialOdometryNotifier::visitPong(const CMInertialOdometryReport::Pong *)", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

uint64_t sub_1905475C8(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (qword_1E929D9D8 != -1) {
    dispatch_once(&qword_1E929D9D8, &unk_1EDFD3300);
  }
  int v4 = qword_1E929D9E0;
  if (os_log_type_enabled((os_log_t)qword_1E929D9E0, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a2 + 1);
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = mach_absolute_time();
    double v8 = sub_1902D8D34(v7);
    double v9 = *(float *)(a2 + 9);
    double v10 = *(float *)(a2 + 13);
    double v11 = *(float *)(a2 + 17);
    double v12 = *(float *)(a2 + 21);
    double v13 = *(float *)(a2 + 25);
    double v14 = *(float *)(a2 + 29);
    uint64_t v15 = *(void *)(a2 + 33);
    uint64_t v16 = *(void *)(a2 + 41);
    uint64_t v17 = *(void *)(a2 + 49);
    uint64_t v18 = *(void *)(a2 + 57);
    uint64_t v19 = *(void *)(a2 + 65);
    uint64_t v20 = *(void *)(a2 + 73);
    int v21 = *(unsigned __int8 *)(a2 + 101);
    *(_DWORD *)long long buf = 134352896;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&buf[12] = 2050;
    *(void *)&buf[14] = v6;
    *(_WORD *)&buf[22] = 2050;
    *(double *)&buf[24] = v8;
    *(_WORD *)v27 = 2050;
    *(double *)&v27[2] = v9;
    *(_WORD *)&v27[10] = 2050;
    *(double *)&v27[12] = v10;
    *(_WORD *)&v27[20] = 2050;
    *(double *)&v27[22] = v11;
    *(_WORD *)&v27[30] = 2050;
    *(double *)&v27[32] = v12;
    *(_WORD *)double v28 = 2050;
    *(double *)&v28[2] = v13;
    *(_WORD *)&v28[10] = 2050;
    *(double *)&v28[12] = v14;
    *(_WORD *)&v28[20] = 2050;
    *(void *)&v28[22] = v15;
    *(_WORD *)&v28[30] = 2050;
    uint64_t v29 = v16;
    __int16 v30 = 2050;
    uint64_t v31 = v17;
    __int16 v32 = 2050;
    uint64_t v33 = v18;
    __int16 v34 = 2050;
    uint64_t v35 = v19;
    __int16 v36 = 2050;
    uint64_t v37 = v20;
    __int16 v38 = 1026;
    int v39 = v21;
    _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_DEBUG, "Report,aopTimestamp,%{public}llu,reportTimestamp,%{public}f,machTimeNow,%{public}f,posX,%{public}f,posY,%{public}f,posZ,%{public}f,dvCumsumX,%{public}f,dvCumsumY,%{public}f,dvCumsumZ,%{public}f,tsPosRollover,%{public}llu,tsVelRollover,%{public}llu,tsDeltaPosXUnavailable,%{public}llu,tsDeltaPosYUnavailable,%{public}llu,tsDeltaPosZUnavailable,%{public}llu,tsDMReinit,%{public}llu,displacingState,%{public}u", buf, 0x9Eu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D9D8 != -1) {
      dispatch_once(&qword_1E929D9D8, &unk_1EDFD3300);
    }
    uint64_t v24 = mach_absolute_time();
    sub_1902D8D34(v24);
    v25 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "virtual void CLInertialOdometryNotifier::visitInertialOdometry(const CMInertialOdometryReport::InertialOdometry *)", "CoreLocation: %s\n", v25);
    if (v25 != buf) {
      free(v25);
    }
  }
  *(void *)long long buf = *(void *)(a1 + 56);
  *(void *)&buf[8] = *(void *)(a2 + 1);
  *(_OWORD *)&buf[16] = *(_OWORD *)(a2 + 9);
  *(void *)v27 = *(void *)(a2 + 25);
  *(_OWORD *)&v27[8] = *(_OWORD *)(a2 + 33);
  *(_OWORD *)&v27[24] = *(_OWORD *)(a2 + 49);
  *(_OWORD *)double v28 = *(_OWORD *)(a2 + 65);
  *(_OWORD *)&v28[16] = *(_OWORD *)(a2 + 81);
  float v22 = *(float *)(a2 + 97) - *(double *)(*(void *)(a1 + 72) + 8);
  *(float *)&uint64_t v29 = v22;
  BYTE4(v29) = *(unsigned char *)(a2 + 101);
  return sub_1902D8BCC(a1, 0, (uint64_t)buf, 112);
}

uint64_t sub_1905479C8(uint64_t a1, uint64_t a2)
{
  return sub_1905475C8(a1 - 32, a2);
}

void sub_1905479D0(uint64_t a1, const char *a2, uint64_t a3)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  v13[0] = @"CMInertialOdometryUpdateInterval";
  v14[0] = objc_msgSend_numberWithDouble_(NSNumber, a2, a3, *(double *)(a1 + 40));
  v13[1] = @"CMPedestrianFenceClientIdentifier";
  uint64_t v5 = objc_msgSend_processInfo(MEMORY[0x1E4F28F80], v3, v4);
  v14[1] = objc_msgSend_processName(v5, v6, v7);
  uint64_t v12 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v8, (uint64_t)v14, v13, 2);
  sub_190547BB4("PedestrianFence/kCLConnectionMessageInertialOdometry", &v12, &v10);
  double v9 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CLConnectionClient::sendMessage();
  if (v9) {
    sub_1902D8B58(v9);
  }
  if (v11) {
    sub_1902D8B58(v11);
  }
}

void sub_190547AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_1902D8B58(a11);
  }
  if (a13) {
    sub_1902D8B58(a13);
  }
  _Unwind_Resume(exception_object);
}

os_log_t sub_190547B10()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "InertialOdometry");
  qword_1E929D9E0 = (uint64_t)result;
  return result;
}

void sub_190547B40(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x192FCC980);
}

void *sub_190547BB4@<X0>(char *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x70uLL);
  os_log_t result = sub_190547C18(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_190547C04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_190547C18(void *a1, char *__s, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDFD0DA0;
  sub_190547C8C((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_190547C78(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_190547C8C(int a1, uint64_t a2, char *__s, void *a4)
{
  sub_1902C3F54(__p, __s);
  MEMORY[0x192FCC420](a2, __p, *a4);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_190547CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_190547D00()
{
}

void sub_190547D78(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x10F1C4036CF7AFFLL);
  _Unwind_Resume(a1);
}

void sub_190547DA0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a2) {
    return;
  }
  if (qword_1E929D6B8 != -1) {
    dispatch_once(&qword_1E929D6B8, &unk_1EDFD2EA0);
  }
  char v5 = qword_1E929D6A8;
  if (os_log_type_enabled((os_log_t)qword_1E929D6A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v16 = a3;
    _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_DEBUG, "CMCallHandednessService Spectators, %zd", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D6B8 != -1) {
      dispatch_once(&qword_1E929D6B8, &unk_1EDFD2EA0);
    }
    double v13 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "virtual void CMCallHandednessService::numberOfSpectatorsChanged(int, size_t)", "CoreLocation: %s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  if (a3 == 1)
  {
    if (sub_1902DFEC4())
    {
      *(unsigned char *)(a1 + 48) = 0;
      operator new();
    }
    if (qword_1E929D6B8 != -1) {
      dispatch_once(&qword_1E929D6B8, &unk_1EDFD2EA0);
    }
    double v11 = qword_1E929D6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929D6A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_DEFAULT, "#Warning No accelerometer; not starting CMCallHandedness detection!",
        buf,
        2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D6B8 != -1) {
        dispatch_once(&qword_1E929D6B8, &unk_1EDFD2EA0);
      }
      double v14 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CMCallHandednessService::startDetection()", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    if (qword_1E929D6B8 != -1) {
      dispatch_once(&qword_1E929D6B8, &unk_1EDFD2EA0);
    }
    uint64_t v12 = qword_1E929D6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929D6A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v16 = 1;
      _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_DEBUG, "CMCallHandednessService started, %zd", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D6B8 == -1)
      {
LABEL_42:
        uint64_t v10 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "virtual void CMCallHandednessService::numberOfSpectatorsChanged(int, size_t)", "CoreLocation: %s\n", v10);
LABEL_43:
        if (v10 != (char *)buf) {
          free(v10);
        }
        return;
      }
LABEL_53:
      dispatch_once(&qword_1E929D6B8, &unk_1EDFD2EA0);
      goto LABEL_42;
    }
  }
  else if (a3)
  {
    if (qword_1E929D6B8 != -1) {
      dispatch_once(&qword_1E929D6B8, &unk_1EDFD2EA0);
    }
    double v9 = qword_1E929D6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929D6A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_ERROR, "CMCallHandednessService expects only 1 client", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D6B8 != -1) {
        dispatch_once(&qword_1E929D6B8, &unk_1EDFD2EA0);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "virtual void CMCallHandednessService::numberOfSpectatorsChanged(int, size_t)", "CoreLocation: %s\n", v10);
      goto LABEL_43;
    }
  }
  else
  {
    if (*(void *)(a1 + 40))
    {
      uint64_t v6 = sub_1902DFEC4();
      sub_1902CDE08(v6, 0, *(void *)(a1 + 40));
      uint64_t v7 = *(void *)(a1 + 40);
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      *(void *)(a1 + 40) = 0;
    }
    if (qword_1E929D6B8 != -1) {
      dispatch_once(&qword_1E929D6B8, &unk_1EDFD2EA0);
    }
    double v8 = qword_1E929D6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929D6A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v16 = 0;
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_DEBUG, "CMCallHandednessService stopped, %zd", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D6B8 == -1) {
        goto LABEL_42;
      }
      goto LABEL_53;
    }
  }
}

void sub_1905486D8(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_190548704(float32x2_t *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  __int32 v4 = a1[2].i32[0];
  double v5 = *(double *)a1;
  float32x2_t v11 = a1[1];
  __int32 v12 = v4;
  uint64_t result = sub_19057CBB0(*(float32x2_t **)(a2 + 32), &v11, v5);
  if (result) {
    BOOL v7 = result == *(unsigned __int8 *)(a2 + 48);
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    unsigned __int8 v8 = result;
    if (qword_1E929D6B8 != -1) {
      dispatch_once(&qword_1E929D6B8, &unk_1EDFD2EA0);
    }
    double v9 = qword_1E929D6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929D6A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_DEBUG, "Sending CMCallHandedness notification.", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D6B8 != -1) {
        dispatch_once(&qword_1E929D6B8, &unk_1EDFD2EA0);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "static void CMCallHandednessService::onAccelerometerData(const CLAccelerometer::Sample *, void *)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    *(void *)long long buf = v8;
    float32x2_t v14 = *a1;
    uint64_t result = sub_1904DC8A8(a2, 0, (uint64_t)buf, 16);
    *(unsigned char *)(a2 + 48) = v8;
  }
  return result;
}

os_log_t sub_1905488FC()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Gesture");
  qword_1E929D6A8 = (uint64_t)result;
  return result;
}

CLLocationInternalClient_CoreMotion *sub_190548970()
{
  os_log_t result = objc_alloc_init(CLLocationInternalClient_CoreMotion);
  qword_1EB3BF588 = (uint64_t)result;
  return result;
}

void sub_190548A8C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_190548AA0()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  v0 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1902AF000, v0, OS_LOG_TYPE_ERROR, "#Spi, Interrupted", buf, 2u);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "-[CLLocationInternalClient_CoreMotion connection]_block_invoke", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

uint64_t sub_190548C28(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v2 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_ERROR, "#Spi, Invalidated", buf, 2u);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    double v5 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "-[CLLocationInternalClient_CoreMotion connection]_block_invoke", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  uint64_t v3 = *(void **)(a1 + 32);
  objc_sync_enter(v3);

  *(void *)(*(void *)(a1 + 32) + 8) = 0;
  return objc_sync_exit(v3);
}

void sub_190548DE4(_Unwind_Exception *exception_object)
{
}

void sub_190548E60(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_190548E78(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v3 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412290;
    uint64_t v6 = a2;
    _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_ERROR, "#Spi, Error with proxy, error: %@", buf, 0xCu);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    __int32 v4 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "-[CLLocationInternalClient_CoreMotion synchronousRemoteObject]_block_invoke", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

void sub_190549100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190549118(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1905491F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19054920C(uint64_t result, uint64_t a2, int a3)
{
  if (!a2)
  {
    **(_DWORD **)(result + 40) = a3;
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_1905492F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190549308(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1905493D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1905493EC(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1905494AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1905494C4(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_190549658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

id sub_19054967C(uint64_t a1, void *a2, void *a3)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = a2;
  id result = a3;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = result;
  return result;
}

void sub_190549854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id sub_19054987C(uint64_t a1, void *a2)
{
  id result = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  return result;
}

void sub_190549988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1905499A0(void *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    *(void *)(*(void *)(result[4] + 8) + 40) = a3;
    return *(id *)(*(void *)(result[4] + 8) + 40);
  }
  return result;
}

void sub_190549A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_190549AA8(void *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    *(void *)(*(void *)(result[4] + 8) + 40) = a3;
    return *(id *)(*(void *)(result[4] + 8) + 40);
  }
  return result;
}

void sub_190549B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_190549B8C(void *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    if (a3)
    {
      *(void *)(*(void *)(result[4] + 8) + 24) = a3;
      return CFRetain(*(CFTypeRef *)(*(void *)(result[4] + 8) + 24));
    }
  }
  return result;
}

void sub_190549C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_190549C98(void *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    if (a3)
    {
      *(void *)(*(void *)(result[4] + 8) + 40) = a3;
      return *(id *)(*(void *)(result[4] + 8) + 40);
    }
  }
  return result;
}

void sub_190549D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_190549D80(void *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    if (a3)
    {
      *(void *)(*(void *)(result[4] + 8) + 24) = a3;
      return CFRetain(*(CFTypeRef *)(*(void *)(result[4] + 8) + 24));
    }
  }
  return result;
}

void sub_190549E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_190549E68(void *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    if (a3)
    {
      *(void *)(*(void *)(result[4] + 8) + 24) = a3;
      return CFRetain(*(CFTypeRef *)(*(void *)(result[4] + 8) + 24));
    }
  }
  return result;
}

void sub_190549F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_190549F50(void *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    if (a3)
    {
      *(void *)(*(void *)(result[4] + 8) + 24) = a3;
      return CFRetain(*(CFTypeRef *)(*(void *)(result[4] + 8) + 24));
    }
  }
  return result;
}

void sub_19054A18C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    uint64_t v2 = qword_1EB3BE850;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_FAULT, "#Spi, Couldn't set location default!", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE858 != -1) {
        dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CLLocationInternalClient_CoreMotion setLocationDefaultForKey:value:]_block_invoke", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

void sub_19054A424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_19054A440(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v6 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 68289282;
    v8[1] = 0;
    __int16 v9 = 2082;
    uint64_t v10 = "";
    __int16 v11 = 2114;
    uint64_t v12 = a2;
    _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Spi, getLocationDefaultForKey, \", \"error\":%{public, location:escape_only}@}", (uint8_t *)v8, 0x1Cu);
  }
  id result = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  return result;
}

void sub_19054A6CC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19054A6E4(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    if (a3)
    {
      uint64_t v4 = result;
      id v5 = objc_alloc(MEMORY[0x1E4F1CAF0]);
      id result = objc_msgSend_initWithName_(v5, v6, a3);
      *(void *)(*(void *)(*(void *)(v4 + 32) + 8) + 40) = result;
    }
  }
  return result;
}

void sub_19054A778(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    uint64_t v2 = qword_1EB3BE850;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_FAULT, "#Spi, setPrivateMode failed", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE858 != -1) {
        dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CLLocationInternalClient_CoreMotion setPrivateMode:]_block_invoke", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

void sub_19054A9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19054A9C4(uint64_t result, uint64_t a2, char a3)
{
  if (!a2) {
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a3;
  }
  return result;
}

void sub_19054AA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19054AA9C(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_19054AB1C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    uint64_t v2 = qword_1EB3BE850;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_FAULT, "#Spi, CLInternalSetLocationServicesEnabled failed", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE858 != -1) {
        dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CLLocationInternalClient_CoreMotion setLocationServicesEnabled:]_block_invoke", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

void sub_19054AD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19054AD70(uint64_t result, uint64_t a2, int a3)
{
  if (!a2)
  {
    **(unsigned char **)(result + 40) = a3 == 1;
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_19054AE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_19054AE94(void *result, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v3 = result;
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    uint64_t v4 = qword_1EB3BE850;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_FAULT, "#Spi, CLInternalSetAuthorizationPromptMapDisplayEnabled failed", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE858 != -1) {
        dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CLLocationInternalClient_CoreMotion setAuthorizationPromptMapDisplayEnabled:]_block_invoke", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    id result = a2;
    *(void *)(*(void *)(v3[4] + 8) + 40) = result;
  }
  return result;
}

void sub_19054B0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19054B108(uint64_t result, uint64_t a2, char a3)
{
  if (!a2)
  {
    **(unsigned char **)(result + 40) = a3;
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_19054B28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19054B2A4(uint64_t result, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v3 = result;
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    uint64_t v4 = qword_1EB3BE850;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_FAULT))
    {
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = a2;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Spi, CLSetClientTransientAuthorizationInfo failed\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
      if (qword_1EB3BE858 != -1) {
        dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
      }
    }
    uint64_t v5 = qword_1EB3BE850;
    if (os_signpost_enabled((os_log_t)qword_1EB3BE850))
    {
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = a2;
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Spi, CLSetClientTransientAuthorizationInfo failed", "{\"msg%{public}.0s\":\"#Spi, CLSetClientTransientAuthorizationInfo failed\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
    }
    id result = objc_msgSend_copy(a2, v6, v7);
    *(void *)(*(void *)(*(void *)(v3 + 32) + 8) + 40) = result;
  }
  return result;
}

void sub_19054B540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19054B558(uint64_t a1, void *a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    uint64_t v6 = qword_1EB3BE850;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_FAULT))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      __int16 v12 = "";
      __int16 v13 = 2114;
      uint64_t v14 = a2;
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Spi, CLGetClientTransientAuthorizationInfo failed\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
      if (qword_1EB3BE858 != -1) {
        dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
      }
    }
    uint64_t v7 = qword_1EB3BE850;
    if (os_signpost_enabled((os_log_t)qword_1EB3BE850))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      __int16 v12 = "";
      __int16 v13 = 2114;
      uint64_t v14 = a2;
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Spi, CLGetClientTransientAuthorizationInfo failed", "{\"msg%{public}.0s\":\"#Spi, CLGetClientTransientAuthorizationInfo failed\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
    if (*(void *)(a1 + 40)) {
      **(void **)(a1 + 40) = a2;
    }
  }
  uint64_t result = objc_msgSend_copy(a3, (const char *)a2, (uint64_t)a3);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  return result;
}

void sub_19054B7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19054B80C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    uint64_t v6 = qword_1EB3BE850;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_FAULT))
    {
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = a2;
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Spi, CLInternalChangeClientAuthorizationTime failed\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
      if (qword_1EB3BE858 != -1) {
        dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
      }
    }
    uint64_t v7 = qword_1EB3BE850;
    if (os_signpost_enabled((os_log_t)qword_1EB3BE850))
    {
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = a2;
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Spi, CLInternalChangeClientAuthorizationTime failed", "{\"msg%{public}.0s\":\"#Spi, CLInternalChangeClientAuthorizationTime failed\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
    }
    *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a3;
  }
}

void sub_19054BA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_19054BAA0(void *result, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v3 = result;
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    uint64_t v4 = qword_1EB3BE850;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_FAULT))
    {
      int v6 = 68289282;
      int v7 = 0;
      __int16 v8 = 2082;
      int v9 = "";
      __int16 v10 = 2114;
      __int16 v11 = a2;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Spi, CLInternalTriggerExpiredAuthorizationPurge failed\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v6, 0x1Cu);
      if (qword_1EB3BE858 != -1) {
        dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
      }
    }
    uint64_t v5 = qword_1EB3BE850;
    if (os_signpost_enabled((os_log_t)qword_1EB3BE850))
    {
      int v6 = 68289282;
      int v7 = 0;
      __int16 v8 = 2082;
      int v9 = "";
      __int16 v10 = 2114;
      __int16 v11 = a2;
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Spi, CLInternalTriggerExpiredAuthorizationPurge failed", "{\"msg%{public}.0s\":\"#Spi, CLInternalTriggerExpiredAuthorizationPurge failed\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v6, 0x1Cu);
    }
    uint64_t result = a2;
    *(void *)(*(void *)(v3[4] + 8) + 40) = result;
  }
  return result;
}

void sub_19054BC8C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    uint64_t v2 = qword_1EB3BE850;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_FAULT, "#Spi, CLInternalSetGestureServiceEnabled failed", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE858 != -1) {
        dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CLLocationInternalClient_CoreMotion setGestureServiceEnabled:]_block_invoke", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

void sub_19054BEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19054BEE0(uint64_t result, uint64_t a2, char a3)
{
  if (!a2)
  {
    **(unsigned char **)(result + 40) = a3;
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_19054BFC8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19054BFE0(uint64_t result, uint64_t a2, int a3)
{
  if (!a2)
  {
    **(_DWORD **)(result + 40) = a3;
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_19054C0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19054C0E0(uint64_t result, uint64_t a2, int a3)
{
  if (!a2)
  {
    **(_DWORD **)(result + 40) = a3;
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_19054C3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

unsigned char **sub_19054C3C8(unsigned char **result, void *a2, char a3)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = a2;
    *(void *)(*((void *)v3[5] + 1) + 40) = result;
  }
  else
  {
    *result[6] = a3;
    *(unsigned char *)(*((void *)result[4] + 1) + 24) = 1;
  }
  return result;
}

void sub_19054C630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19054C64C(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_19054C87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19054C898(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

void sub_19054CAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19054CAE0(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_19054CD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19054CD34(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_19054CE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_19054CE24(void *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    if (a3)
    {
      *(void *)(*(void *)(result[4] + 8) + 24) = a3;
      return CFRetain(*(CFTypeRef *)(*(void *)(result[4] + 8) + 24));
    }
  }
  return result;
}

void sub_19054CFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

id sub_19054D010(void *a1, void *a2, char a3)
{
  id result = a2;
  *(void *)(*(void *)(a1[4] + 8) + 40) = result;
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = a3;
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  return result;
}

void sub_19054D1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id sub_19054D204(uint64_t a1, void *a2)
{
  id result = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2 == 0;
  return result;
}

void sub_19054D3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

id sub_19054D3D0(uint64_t a1, void *a2)
{
  id result = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2 == 0;
  return result;
}

void sub_19054D568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id sub_19054D58C(uint64_t a1, void *a2)
{
  id result = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2 == 0;
  return result;
}

void sub_19054D714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

id sub_19054D738(uint64_t a1, void *a2)
{
  id result = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2 == 0;
  return result;
}

void sub_19054D870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19054D888(uint64_t result, uint64_t a2, void *a3)
{
  if (!a2)
  {
    uint64_t v3 = result;
    id result = objc_msgSend_getBytes_length_(a3, (const char *)a2, *(void *)(result + 40), 156);
    *(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_19054D9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_19054D9D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    uint64_t v3 = *(_OWORD **)(a1 + 40);
    __n128 result = *(__n128 *)a3;
    long long v5 = *(_OWORD *)(a3 + 16);
    _OWORD *v3 = *(_OWORD *)a3;
    v3[1] = v5;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_19054DD90(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    uint64_t v2 = qword_1EB3BE850;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_ERROR, "#Spi,RouteHintError,Couldn't set map-matching route hint!", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE858 != -1) {
        dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CLLocationInternalClient_CoreMotion setMapMatchingRouteHint:count:routingType:stepType:]_block_invoke", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

void sub_19054E0E4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    uint64_t v2 = qword_1EB3BE850;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_ERROR, "#Spi,CLTR,TrackRunHintError,Couldn't set track run hint!", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE858 != -1) {
        dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CLLocationInternalClient_CoreMotion setTrackRunHint:]_block_invoke", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

void sub_19054E4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19054E4C0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    uint64_t v4 = qword_1EB3BE850;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_DEBUG, "#Spi,getAccessoryTypeBitSet,failed", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE858 != -1) {
        dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CLLocationInternalClient_CoreMotion getAccessoryTypeBitSet]_block_invoke", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    a3 = -1;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a3;
}

void sub_19054E8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19054E8BC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    uint64_t v4 = qword_1EB3BE850;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_DEBUG, "#Spi,getAccessoryPASCDTransmissionState,failed", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE858 != -1) {
        dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CLLocationInternalClient_CoreMotion getAccessoryPASCDTransmissionState]_block_invoke", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    a3 = 4;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a3;
}

void sub_19054ECD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19054ECF8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    uint64_t v3 = qword_1EB3BE850;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_ERROR, "#Spi,getOdometryBatchedLocations,returned with error", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE858 != -1) {
        dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CLLocationInternalClient_CoreMotion getOdometryBatchedLocations]_block_invoke", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    uint64_t v7 = qword_1EB3BE850;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134349056;
      uint64_t v14 = objc_msgSend_count(a3, v8, v9);
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_DEBUG, "#Spi,getOdometryBatchedLocations,received data count,%{public}lu", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE858 != -1) {
        dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
      }
      objc_msgSend_count(a3, v10, v11);
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CLLocationInternalClient_CoreMotion getOdometryBatchedLocations]_block_invoke", "CoreLocation: %s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = a3;
  }
}

void sub_19054F210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19054F22C(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_19054F474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19054F48C(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_19054F564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19054F57C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    uint64_t v4 = qword_1EB3BE850;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_FAULT))
    {
      uint64_t v5 = *(int *)(a1 + 48);
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2050;
      uint64_t v13 = v5;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Getting status bar enabled for entity class failed\", \"entityClass\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld}", (uint8_t *)&v8, 0x1Cu);
      if (qword_1EB3BE858 != -1) {
        dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
      }
    }
    int v6 = qword_1EB3BE850;
    if (os_signpost_enabled((os_log_t)qword_1EB3BE850))
    {
      uint64_t v7 = *(int *)(a1 + 48);
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2050;
      uint64_t v13 = v7;
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Getting status bar enabled for entity class failed", "{\"msg%{public}.0s\":\"Getting status bar enabled for entity class failed\", \"entityClass\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld}", (uint8_t *)&v8, 0x1Cu);
    }
  }
  else
  {
    **(unsigned char **)(a1 + 40) = a3;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
}

void sub_19054F7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19054F7EC(uint64_t result, uint64_t a2, int a3)
{
  if (!a2) {
    *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a3;
  }
  return result;
}

void sub_19054F90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_19054F928(uint64_t a1, const char *a2, void *a3)
{
  if (a2) {
    a3 = objc_msgSend_array(MEMORY[0x1E4F1C978], a2, (uint64_t)a3);
  }
  id result = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  return result;
}

void sub_19054FA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19054FA40(uint64_t result, uint64_t a2, void *a3)
{
  if (!a2)
  {
    uint64_t v3 = result;
    id result = objc_msgSend_getBytes_length_(a3, (const char *)a2, *(void *)(result + 40), 320);
    *(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_19054FB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19054FB8C(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_19054FCAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19054FCC4(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_19054FD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19054FD9C(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_19054FE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19054FE78(uint64_t result, uint64_t a2, int a3)
{
  if (!a2)
  {
    **(_DWORD **)(result + 40) = a3;
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_19054FF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19054FF74(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1905502D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

uint64_t sub_1905502F4(uint64_t result, uint64_t a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  int v9 = *(double **)(result + 48);
  **(double **)(result + 40) = a4;
  double *v9 = a5;
  __int16 v10 = *(double **)(result + 64);
  **(double **)(result + 56) = a6;
  double *v10 = a7;
  uint64_t v11 = *(double **)(result + 80);
  **(double **)(result + 72) = a8;
  double *v11 = a9;
  **(_DWORD **)(result + 88) = a3;
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 40) = a2;
  return result;
}

uint64_t sub_190550330(uint64_t result, uint64_t a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  int v9 = *(double **)(result + 48);
  **(double **)(result + 40) = a4;
  double *v9 = a5;
  __int16 v10 = *(double **)(result + 64);
  **(double **)(result + 56) = a6;
  double *v10 = a7;
  uint64_t v11 = *(double **)(result + 80);
  **(double **)(result + 72) = a8;
  double *v11 = a9;
  **(_DWORD **)(result + 88) = a3;
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 40) = a2;
  return result;
}

void sub_190550434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19055044C(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = *(_DWORD **)(result + 48);
  **(_DWORD **)(result + 40) = a3;
  *uint64_t v4 = a4;
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_190550518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190550530(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_190550614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_19055062C(void *result, void *a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    id result = a2;
    *(void *)(*(void *)(v2[4] + 8) + 40) = result;
  }
  return result;
}

void sub_190550738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_190550750(void *result, void *a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    id result = a2;
    *(void *)(*(void *)(v2[4] + 8) + 40) = result;
  }
  return result;
}

void sub_190550868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_190550880(void *result, void *a2, int a3, int a4)
{
  int v6 = result;
  if (a2)
  {
    id result = a2;
    *(void *)(*(void *)(v6[4] + 8) + 40) = result;
  }
  uint64_t v7 = (_DWORD *)v6[5];
  if (v7) {
    _DWORD *v7 = a3;
  }
  int v8 = (_DWORD *)v6[6];
  if (v8) {
    *int v8 = a4;
  }
  return result;
}

void sub_190550984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19055099C(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

void sub_190550A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_190550AA4(uint64_t a1, void *a2, void *a3)
{
  id result = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (a2)
  {
    id result = a2;
    **(void **)(a1 + 40) = result;
  }
  return result;
}

void sub_190550BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_190550BE0(uint64_t a1, void *a2, void *a3)
{
  id result = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (a2)
  {
    id result = a2;
    **(void **)(a1 + 40) = result;
  }
  return result;
}

void sub_190550D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_190550D3C(uint64_t a1, void *a2)
{
  id result = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  return result;
}

void sub_190550E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_190550E84(uint64_t a1, void *a2)
{
  id result = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  return result;
}

void sub_190550FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190550FD0(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1905510B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1905510CC(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1905511A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1905511BC(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_19055127C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_190551294(void *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    *(void *)(*(void *)(result[4] + 8) + 24) = a3;
    return CFRetain(*(CFTypeRef *)(*(void *)(result[4] + 8) + 24));
  }
  return result;
}

void sub_1905513A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1905513C0(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_190551488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1905514A0(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_190551578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190551590(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_190551670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190551688(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_190551768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190551780(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_190551864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19055187C(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_190551940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190551958(uint64_t result, uint64_t a2, int a3)
{
  if (!a2)
  {
    **(_DWORD **)(result + 40) = a3;
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_190551A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190551A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    uint64_t v4 = qword_1EB3BE850;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_FAULT, "#Spi, TimeSyncWithReplyBlock failed", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE858 != -1) {
        dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CLLocationInternalClient_CoreMotion timeSyncMachTimeStamp:oscarTimeStamp:]_block_invoke", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  else
  {
    **(void **)(a1 + 40) = a3;
    **(void **)(a1 + 48) = a4;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
}

uint64_t CLCopyAppsUsingLocation()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  v0 = _os_activity_create(&dword_1902AF000, "CL: CLCopyAppsUsingLocation", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v9.opaque[0] = 0;
  v9.opaque[1] = 0;
  os_activity_scope_enter(v0, &v9);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v1 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    __int16 v14 = 2082;
    uint64_t v15 = "activity";
    _os_log_impl(&dword_1902AF000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyAppsUsingLocation\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v2, v3);
  uint64_t v7 = objc_msgSend_copyAppsUsingLocation(v4, v5, v6);
  os_activity_scope_leave(&v9);
  return v7;
}

void sub_190551DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLCopyActiveClientsUsingLocation()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  v0 = _os_activity_create(&dword_1902AF000, "CL: CLCopyActiveClientsUsingLocation", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v9.opaque[0] = 0;
  v9.opaque[1] = 0;
  os_activity_scope_enter(v0, &v9);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v1 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    __int16 v14 = 2082;
    uint64_t v15 = "activity";
    _os_log_impl(&dword_1902AF000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyActiveClientsUsingLocation\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v2, v3);
  uint64_t active = objc_msgSend_copyActiveClientsUsingLocation(v4, v5, v6);
  os_activity_scope_leave(&v9);
  return active;
}

void sub_190551F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLCopyInternalState()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  v0 = _os_activity_create(&dword_1902AF000, "CL: CLCopyInternalState", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v9.opaque[0] = 0;
  v9.opaque[1] = 0;
  os_activity_scope_enter(v0, &v9);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v1 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    __int16 v14 = 2082;
    uint64_t v15 = "activity";
    _os_log_impl(&dword_1902AF000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyInternalState\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v2, v3);
  uint64_t v7 = objc_msgSend_copyInternalState(v4, v5, v6);
  os_activity_scope_leave(&v9);
  return v7;
}

void sub_190552098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void CLSetLocationDefault(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = _os_activity_create(&dword_1902AF000, "CL: CLSetLocationDefault", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v10.opaque[0] = 0;
  v10.opaque[1] = 0;
  os_activity_scope_enter(v4, &v10);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v5 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289538;
    int v12 = 0;
    __int16 v13 = 2082;
    __int16 v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2114;
    uint64_t v18 = a1;
    _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLSetLocationDefault\", \"event\":%{public, location:escape_only}s, \"key\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  int v8 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v6, v7);
  objc_msgSend_setLocationDefaultForKey_value_(v8, v9, a1, a2);
  os_activity_scope_leave(&v10);
}

void sub_190552204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLCopyMicroLocationInternalVersion()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  v0 = _os_activity_create(&dword_1902AF000, "CL: CLCopyMicroLocationInternalVersion", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v9.opaque[0] = 0;
  v9.opaque[1] = 0;
  os_activity_scope_enter(v0, &v9);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v1 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    __int16 v13 = "";
    __int16 v14 = 2082;
    __int16 v15 = "activity";
    _os_log_impl(&dword_1902AF000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyMicroLocationInternalVersion\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v2, v3);
  uint64_t v7 = objc_msgSend_copyMicroLocationInternalVersion(v4, v5, v6);
  os_activity_scope_leave(&v9);
  return v7;
}

void sub_190552354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLCopyZaxisStats()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  v0 = _os_activity_create(&dword_1902AF000, "CL: CLCopyZaxisStats", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v9.opaque[0] = 0;
  v9.opaque[1] = 0;
  os_activity_scope_enter(v0, &v9);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v1 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    __int16 v13 = "";
    __int16 v14 = 2082;
    __int16 v15 = "activity";
    _os_log_impl(&dword_1902AF000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyZaxisStats\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v2, v3);
  uint64_t v7 = objc_msgSend_copyZaxisStats(v4, v5, v6);
  os_activity_scope_leave(&v9);
  return v7;
}

void sub_1905524A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLCopyTechnologiesInUse()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  v0 = _os_activity_create(&dword_1902AF000, "CL: CLCopyTechnologiesInUse", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v9.opaque[0] = 0;
  v9.opaque[1] = 0;
  os_activity_scope_enter(v0, &v9);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v1 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    __int16 v13 = "";
    __int16 v14 = 2082;
    __int16 v15 = "activity";
    _os_log_impl(&dword_1902AF000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyTechnologiesInUse\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v2, v3);
  uint64_t v7 = objc_msgSend_copyTechnologiesInUse(v4, v5, v6);
  os_activity_scope_leave(&v9);
  return v7;
}

void sub_1905525F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

id CLCopyGnssBandsInUse()
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  v0 = _os_activity_create(&dword_1902AF000, "CL: CLCopyGnssBandsInUse", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v0, &state);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v1 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    _os_log_impl(&dword_1902AF000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyGnssBandsInUse\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v2, v3);
  CFArrayRef v7 = (const __CFArray *)objc_msgSend_copyGnssBandsInUse(v4, v5, v6);
  id v8 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if (v7)
  {
    CFIndex Count = CFArrayGetCount(v7);
    if (Count && (int)Count >= 1)
    {
      CFIndex v10 = 0;
      uint64_t v11 = Count;
      unint64_t v12 = 0x1E4F29000uLL;
      do
      {
        int valuePtr = 0;
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v7, v10);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        int v15 = valuePtr & 0xF00;
        unsigned int v16 = (v15 - 256) >> 8;
        BOOL v17 = v16 > 7;
        int v18 = (1 << v16) & 0x8B;
        if (v17 || v18 == 0)
        {
          if ((valuePtr & 0xF00) != 0)
          {
            if (qword_1EB3BE858 != -1) {
              dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
            }
            uint64_t v23 = qword_1EB3BE850;
            if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 67240192;
              *(_DWORD *)&uint8_t buf[4] = v15;
              _os_log_impl(&dword_1902AF000, v23, OS_LOG_TYPE_ERROR, "Invalid bandUse,%{public}d", buf, 8u);
            }
            unint64_t v12 = 0x1E4F29000;
            if (sub_1902D8400(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EB3BE858 != -1) {
                dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
              }
              int v28 = 67240192;
              int v29 = v15;
              uint64_t v24 = (char *)_os_log_send_and_compose_impl();
              sub_1902D398C("Generic", 1, 0, 0, "CFArrayRef CLCopyGnssBandsInUse(void)", "CoreLocation: %s\n", v24);
              if (v24 != (char *)buf) {
                free(v24);
              }
            }
          }
          goto LABEL_22;
        }
        memset(buf, 0, 32);
        *(_DWORD *)&buf[24] = valuePtr & 0xF00;
        switch(valuePtr)
        {
          case 4u:
            *(_DWORD *)long long buf = 4;
            long long v20 = xmmword_19060C0F0;
            break;
          case 2u:
            *(_DWORD *)long long buf = 2;
            long long v20 = xmmword_19060C0E0;
            break;
          case 1u:
            *(_DWORD *)long long buf = 1;
            long long v20 = xmmword_19060C100;
            break;
          default:
            memset(&buf[8], 0, 20);
            goto LABEL_21;
        }
        *(_OWORD *)&uint8_t buf[8] = v20;
LABEL_21:
        uint64_t v21 = objc_msgSend_valueWithBytes_objCType_(*(void **)(v12 + 568), v14, (uint64_t)buf, "{CLGnssBandInfo=iddi}");
        objc_msgSend_addObject_(v8, v22, v21);
LABEL_22:
        ++v10;
      }
      while (v11 != v10);
    }
    CFRelease(v7);
  }
  os_activity_scope_leave(&state);
  return v8;
}

void sub_1905529FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,os_activity_scope_state_s state)
{
}

uint64_t CLGetLocationDefault(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = _os_activity_create(&dword_1902AF000, "CL: CLGetLocationDefault", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v10.opaque[0] = 0;
  v10.opaque[1] = 0;
  os_activity_scope_enter(v2, &v10);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v3 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289538;
    int v12 = 0;
    __int16 v13 = 2082;
    __int16 v14 = "";
    __int16 v15 = 2082;
    unsigned int v16 = "activity";
    __int16 v17 = 2114;
    uint64_t v18 = a1;
    _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetLocationDefault\", \"event\":%{public, location:escape_only}s, \"key\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  uint64_t v6 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v4, v5);
  uint64_t LocationDefaultForKey = objc_msgSend_getLocationDefaultForKey_(v6, v7, a1);
  os_activity_scope_leave(&v10);
  return LocationDefaultForKey;
}

void sub_190552B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t sub_190552B90()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  v0 = _os_activity_create(&dword_1902AF000, "CL: CLCopyActivityAlarms", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v9.opaque[0] = 0;
  v9.opaque[1] = 0;
  os_activity_scope_enter(v0, &v9);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v1 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    __int16 v13 = "";
    __int16 v14 = 2082;
    __int16 v15 = "activity";
    _os_log_impl(&dword_1902AF000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyActivityAlarms\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v2, v3);
  uint64_t v7 = objc_msgSend_copyActivityAlarms(v4, v5, v6);
  os_activity_scope_leave(&v9);
  return v7;
}

void sub_190552CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLGetPipelinedCache()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  v0 = _os_activity_create(&dword_1902AF000, "CL: CLGetPipelinedCaches", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v9.opaque[0] = 0;
  v9.opaque[1] = 0;
  os_activity_scope_enter(v0, &v9);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v1 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    __int16 v13 = "";
    __int16 v14 = 2082;
    __int16 v15 = "activity";
    _os_log_impl(&dword_1902AF000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetPipelinedCaches\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v2, v3);
  uint64_t PipelinedCache = objc_msgSend_getPipelinedCache(v4, v5, v6);
  os_activity_scope_leave(&v9);
  return PipelinedCache;
}

void sub_190552E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLGetMotionSensorLogs()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  v0 = _os_activity_create(&dword_1902AF000, "CL: CLGetMotionSensorLogs", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v9.opaque[0] = 0;
  v9.opaque[1] = 0;
  os_activity_scope_enter(v0, &v9);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v1 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    __int16 v13 = "";
    __int16 v14 = 2082;
    __int16 v15 = "activity";
    _os_log_impl(&dword_1902AF000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetMotionSensorLogs\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v2, v3);
  uint64_t MotionSensorLogs = objc_msgSend_getMotionSensorLogs(v4, v5, v6);
  os_activity_scope_leave(&v9);
  return MotionSensorLogs;
}

void sub_190552F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLGetAccessoryMotionSensorLogs()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  v0 = _os_activity_create(&dword_1902AF000, "CL: CLGetAccessoryMotionSensorLogs", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v9.opaque[0] = 0;
  v9.opaque[1] = 0;
  os_activity_scope_enter(v0, &v9);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v1 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    __int16 v13 = "";
    __int16 v14 = 2082;
    __int16 v15 = "activity";
    _os_log_impl(&dword_1902AF000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetAccessoryMotionSensorLogs\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v2, v3);
  Accessoryuint64_t MotionSensorLogs = objc_msgSend_getAccessoryMotionSensorLogs(v4, v5, v6);
  os_activity_scope_leave(&v9);
  return AccessoryMotionSensorLogs;
}

void sub_1905530BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLApplyArchivedAuthorizationDecisions(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = _os_activity_create(&dword_1902AF000, "CL: CLApplyArchivedAuthorizationDecisions", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v10.opaque[0] = 0;
  v10.opaque[1] = 0;
  os_activity_scope_enter(v2, &v10);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v3 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v12 = 0;
    __int16 v13 = 2082;
    __int16 v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLApplyArchivedAuthorizationDecisions\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v6 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v4, v5);
  uint64_t v8 = objc_msgSend_applyArchivedAuthorizationDecisions_(v6, v7, a1);
  os_activity_scope_leave(&v10);
  return v8;
}

void sub_190553214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLGetArchivedAuthorizationDecisions(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = _os_activity_create(&dword_1902AF000, "CL: CLGetArchivedAuthorizationDecisions", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v10.opaque[0] = 0;
  v10.opaque[1] = 0;
  os_activity_scope_enter(v2, &v10);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v3 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v12 = 0;
    __int16 v13 = 2082;
    __int16 v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetArchivedAuthorizationDecisions\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v6 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v4, v5);
  uint64_t ArchivedAuthorizationDecisionsWithError = objc_msgSend_getArchivedAuthorizationDecisionsWithError_(v6, v7, a1);
  os_activity_scope_leave(&v10);
  return ArchivedAuthorizationDecisionsWithError;
}

void sub_19055336C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLStartStopAdvertisingBeacon(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = _os_activity_create(&dword_1902AF000, "CL: CLStartStopAdvertisingBeacon", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v12.opaque[0] = 0;
  v12.opaque[1] = 0;
  os_activity_scope_enter(v4, &v12);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v5 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289795;
    int v14 = 0;
    __int16 v15 = 2082;
    uint64_t v16 = "";
    __int16 v17 = 2082;
    uint64_t v18 = "activity";
    __int16 v19 = 2113;
    uint64_t v20 = a1;
    __int16 v21 = 2114;
    uint64_t v22 = a2;
    _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLStartStopAdvertisingBeacon\", \"event\":%{public, location:escape_only}s, \"region\":%{private, location:escape_only}@, \"power\":%{public, location:escape_only}@}", buf, 0x30u);
  }
  uint64_t v8 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v6, v7);
  uint64_t started = objc_msgSend_startStopAdvertisingBeacon_power_(v8, v9, a1, a2);
  os_activity_scope_leave(&v12);
  return started;
}

void sub_1905534EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLPingDaemon()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  v0 = _os_activity_create(&dword_1902AF000, "CL: CLPingDaemon", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v9.opaque[0] = 0;
  v9.opaque[1] = 0;
  os_activity_scope_enter(v0, &v9);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v1 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    __int16 v13 = "";
    __int16 v14 = 2082;
    __int16 v15 = "activity";
    _os_log_impl(&dword_1902AF000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPingDaemon\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v2, v3);
  uint64_t v7 = objc_msgSend_pingDaemon(v4, v5, v6);
  os_activity_scope_leave(&v9);
  return v7;
}

void sub_19055363C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void CLPassKitNotifyPayment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = _os_activity_create(&dword_1902AF000, "CL: CLPassKitNotifyPassUsage", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v12.opaque[0] = 0;
  v12.opaque[1] = 0;
  os_activity_scope_enter(v6, &v12);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v7 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v14 = 0;
    __int16 v15 = 2082;
    uint64_t v16 = "";
    __int16 v17 = 2082;
    uint64_t v18 = "activity";
    _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPassKitNotifyPassUsage\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  os_activity_scope_state_s v10 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v8, v9);
  objc_msgSend_notifyPassKitPayment_transaction_info_(v10, v11, a1, a2, a3);
  os_activity_scope_leave(&v12);
}

void sub_1905537A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void CLWeatherNotifyForecast(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = _os_activity_create(&dword_1902AF000, "CL: CLWeatherNotifyForecastUsage", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v7, &state);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v8 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t buf = 68289282;
    __int16 v54 = 2082;
    v55 = "";
    __int16 v56 = 2082;
    v57 = "activity";
    _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLWeatherNotifyForecastUsage\", \"event\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
  }
  uint64_t v9 = (void *)MEMORY[0x1E4F1C978];
  uint64_t v10 = objc_opt_class();
  uint64_t v11 = objc_opt_class();
  uint64_t v12 = objc_opt_class();
  uint64_t v13 = objc_opt_class();
  uint64_t v14 = objc_opt_class();
  uint64_t v15 = objc_opt_class();
  __int16 v17 = objc_msgSend_arrayWithObjects_(v9, v16, v10, v11, v12, v13, v14, v15, 0);
  id v18 = objc_alloc(MEMORY[0x1E4F1CA60]);
  uint64_t v20 = objc_msgSend_initWithDictionary_copyItems_(v18, v19, (uint64_t)a1, 1);
  int v39 = a5;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  uint64_t v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v21, (uint64_t)&v46, v52, 16);
  if (v24)
  {
    obuint64_t j = a1;
    uint64_t v41 = *(void *)v47;
    do
    {
      for (uint64_t i = 0; i != v24; ++i)
      {
        if (*(void *)v47 != v41) {
          objc_enumerationMutation(obj);
        }
        uint64_t v26 = *(void *)(*((void *)&v46 + 1) + 8 * i);
        long long v42 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        uint64_t v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v22, (uint64_t)&v42, v51, 16);
        if (!v27) {
          goto LABEL_18;
        }
        int v28 = 0;
        uint64_t v29 = *(void *)v43;
        do
        {
          for (uint64_t j = 0; j != v27; ++j)
          {
            if (*(void *)v43 != v29) {
              objc_enumerationMutation(v17);
            }
            objc_msgSend_objectForKeyedSubscript_(v20, v22, v26);
            v28 |= objc_opt_isKindOfClass();
          }
          uint64_t v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v22, (uint64_t)&v42, v51, 16);
        }
        while (v27);
        if ((v28 & 1) == 0) {
LABEL_18:
        }
          objc_msgSend_removeObjectForKey_(v20, v22, v26);
      }
      uint64_t v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v22, (uint64_t)&v46, v52, 16);
    }
    while (v24);
  }
  uint64_t v31 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v22, v23);
  objc_msgSend_coordinate(v39, v32, v33);
  double v35 = v34;
  objc_msgSend_coordinate(v39, v36, v37);
  objc_msgSend_notifyWeatherForecast_airQualityConditions_hourlyForecasts_dailyForecasts_latitude_longitude_(v31, v38, (uint64_t)v20, MEMORY[0x1E4F1CC08], MEMORY[0x1E4F1CBF0], MEMORY[0x1E4F1CBF0], v35);

  os_activity_scope_leave(&state);
}

void sub_190553B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,os_activity_scope_state_s state)
{
}

uint64_t CLGetClientTransientAuthorizationInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = _os_activity_create(&dword_1902AF000, "CL: CLGetClientTransientAuthorizationInfo", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v14.opaque[0] = 0;
  v14.opaque[1] = 0;
  os_activity_scope_enter(v6, &v14);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v7 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v16 = 0;
    __int16 v17 = 2082;
    id v18 = "";
    __int16 v19 = 2082;
    uint64_t v20 = "activity";
    _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetClientTransientAuthorizationInfo\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v10 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v8, v9);
  uint64_t TemporaryAuthorizationStatusForBundleId_orBundlePath_error = objc_msgSend_getTemporaryAuthorizationStatusForBundleId_orBundlePath_error_(v10, v11, a1, a2, a3);
  os_activity_scope_leave(&v14);
  return TemporaryAuthorizationStatusForBundleId_orBundlePath_error;
}

void sub_190553CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLSetClientTransientAuthorizationInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = _os_activity_create(&dword_1902AF000, "CL: CLSetClientTransientAuthorizationInfo", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v14.opaque[0] = 0;
  v14.opaque[1] = 0;
  os_activity_scope_enter(v6, &v14);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v7 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v16 = 0;
    __int16 v17 = 2082;
    id v18 = "";
    __int16 v19 = 2082;
    uint64_t v20 = "activity";
    _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLSetClientTransientAuthorizationInfo\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v10 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v8, v9);
  uint64_t v12 = objc_msgSend_setTemporaryAuthorizationStatusForBundleId_orBundlePath_statusData_(v10, v11, a1, a2, a3);
  os_activity_scope_leave(&v14);
  return v12;
}

void sub_190553E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t sub_190553E40(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, a2, a3);

  return MEMORY[0x1F4181798](v4, sel_setGestureServiceEnabled_, a1);
}

uint64_t sub_190553E80(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, a2, a3);

  return MEMORY[0x1F4181798](v4, sel_getGestureServiceEnabled_, a1);
}

uint64_t CLInternalPerformMigration()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  v0 = _os_activity_create(&dword_1902AF000, "CL: CLInternalPerformMigration", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v9.opaque[0] = 0;
  v9.opaque[1] = 0;
  os_activity_scope_enter(v0, &v9);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v1 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    __int16 v14 = 2082;
    uint64_t v15 = "activity";
    _os_log_impl(&dword_1902AF000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLInternalPerformMigration\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v2, v3);
  uint64_t v7 = objc_msgSend_performMigration(v4, v5, v6);
  os_activity_scope_leave(&v9);
  return v7;
}

void sub_190553FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLGetStatusBarIconState()
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  v0 = _os_activity_create(&dword_1902AF000, "CL: CLGetStatusBarIconState", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v0, &state);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v1 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v15 = 0;
    __int16 v16 = 2082;
    __int16 v17 = "";
    __int16 v18 = 2082;
    __int16 v19 = "activity";
    _os_log_impl(&dword_1902AF000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetStatusBarIconState\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v2, v3);
  uint64_t StatusBarIconState = objc_msgSend_getStatusBarIconState(v4, v5, v6);
  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v8 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v15 = StatusBarIconState;
    _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_DEFAULT, "CLStatusBarIconState received an icon stateu of %d", buf, 8u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    int v12 = 67109120;
    int v13 = StatusBarIconState;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "CLStatusBarIconState CLGetStatusBarIconState()", "CoreLocation: %s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  os_activity_scope_leave(&state);
  return StatusBarIconState;
}

void sub_19055429C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void CLSetMapMatchingRouteHint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = _os_activity_create(&dword_1902AF000, "CL: CLSetMapMatchingRouteHint", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v8, &state);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  os_activity_scope_state_s v9 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)uint64_t v24 = 0;
    *(_WORD *)&v24[4] = 2082;
    *(void *)&v24[6] = "";
    __int16 v25 = 2082;
    uint64_t v26 = "activity";
    _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLSetMapMatchingRouteHint\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
  }
  uint64_t v10 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134218496;
    *(void *)uint64_t v24 = (int)a4;
    *(_WORD *)&v24[8] = 1024;
    *(_DWORD *)&v24[10] = a1;
    __int16 v25 = 1024;
    LODWORD(v26) = a2;
    _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_DEBUG, "RouteHints,CLSetRouteHintsForMapMatching,received,%lu,routeType,%d,stepType,%d", buf, 0x18u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    int v17 = 134218496;
    uint64_t v18 = (int)a4;
    __int16 v19 = 1024;
    int v20 = a1;
    __int16 v21 = 1024;
    int v22 = a2;
    int v15 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLSetMapMatchingRouteHint(CLClientLocationRouteHintType, CLClientLocationRouteHintType, CLMapsRouteHint *, int)", "CoreLocation: %s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  int v13 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v11, v12);
  objc_msgSend_setMapMatchingRouteHint_count_routingType_stepType_(v13, v14, a3, a4, a1, a2);
  os_activity_scope_leave(&state);
}

void sub_190554594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void CLSetRouteHintsForMapMatching(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = _os_activity_create(&dword_1902AF000, "CL: CLSetRouteHintsForMapMatching", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v6, &state);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v7 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)int v20 = 0;
    *(_WORD *)&v20[4] = 2082;
    *(void *)&v20[6] = "";
    __int16 v21 = 2082;
    int v22 = "activity";
    _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLSetRouteHintsForMapMatching\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
  }
  uint64_t v8 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134218240;
    *(void *)int v20 = (int)a3;
    *(_WORD *)&v20[8] = 1024;
    *(_DWORD *)&v20[10] = a1;
    _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_DEBUG, "RouteHints,CLSetRouteHintsForMapMatching,received,%lu,routeType,%d", buf, 0x12u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    int v15 = 134218240;
    uint64_t v16 = (int)a3;
    __int16 v17 = 1024;
    int v18 = a1;
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLSetRouteHintsForMapMatching(CLClientLocationRouteHintType, CLMapsRouteHint *, int)", "CoreLocation: %s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  int v11 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v9, v10);
  objc_msgSend_setMapMatchingRouteHint_count_routingType_stepType_(v11, v12, a2, a3, a1, a1);
  os_activity_scope_leave(&state);
}

void sub_190554874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void CLSetTrackRunHint(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = _os_activity_create(&dword_1902AF000, "CL: CLSetTrackRunHint", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v2, &state);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v3 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)uint64_t v24 = 0;
    *(_WORD *)&v24[4] = 2082;
    *(void *)&v24[6] = "";
    __int16 v25 = 2082;
    uint64_t v26 = "activity";
    _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLSetTrackRunHint\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
  }
  uint64_t v4 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)a1;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)uint64_t buf = 134349569;
    *(void *)uint64_t v24 = v5;
    *(_WORD *)&v24[8] = 1025;
    *(_DWORD *)&v24[10] = v6;
    __int16 v25 = 1025;
    LODWORD(v26) = v7;
    _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_DEFAULT, "TrackRunHint,CLSetTrackRunHint,received,MCTime,%{public}.1lf,lane,%{private}d,notification,%{private}d", buf, 0x18u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    uint64_t v12 = *(void *)a1;
    int v13 = *(_DWORD *)(a1 + 8);
    int v14 = *(_DWORD *)(a1 + 12);
    int v17 = 134349569;
    uint64_t v18 = v12;
    __int16 v19 = 1025;
    int v20 = v13;
    __int16 v21 = 1025;
    int v22 = v14;
    int v15 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLSetTrackRunHint(CLTrackRunHint *)", "CoreLocation: %s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  uint64_t v10 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v8, v9);
  objc_msgSend_setTrackRunHint_(v10, v11, a1);
  os_activity_scope_leave(&state);
}

void sub_190554B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

uint64_t CLGetAccessoryTypeBitSet()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  v0 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1902AF000, v0, OS_LOG_TYPE_DEBUG, "CLGetAccessoryTypeBitSet", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "int32_t CLGetAccessoryTypeBitSet()", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  uint64_t v3 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v1, v2);
  return objc_msgSend_getAccessoryTypeBitSet(v3, v4, v5);
}

uint64_t CLGetAccessoryPASCDTransmissionState()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  v0 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1902AF000, v0, OS_LOG_TYPE_DEBUG, "CLGetAccessoryPASCDTransmissionState", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "CLClientPASCDTransmissionState CLGetAccessoryPASCDTransmissionState()", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  uint64_t v3 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v1, v2);
  return objc_msgSend_getAccessoryPASCDTransmissionState(v3, v4, v5);
}

uint64_t sub_190554E98(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, a2, a3);

  return MEMORY[0x1F4181798](v4, sel_getGyroCalibrationDatabaseBiasFit_atTemperature_, a1);
}

uint64_t sub_190554EE8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, a2, a3);

  return MEMORY[0x1F4181798](v3, sel_insertGyroCalibrationDatabaseBiasEstimateIfValid_temperature_variance_timestamp_, v4);
}

uint64_t sub_190554F78(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, a2, a3);

  return MEMORY[0x1F4181798](v3, sel_gyroCalibrationDatabaseWipe, v4);
}

uint64_t sub_190554FA8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, a2, a3);

  return MEMORY[0x1F4181798](v4, sel_getGyroCalibrationDatabaseNumTemperatures_, a1);
}

uint64_t sub_190554FE8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, a2, a3);

  return MEMORY[0x1F4181798](v4, sel_configure_, a1);
}

uint64_t CLGetOdometryBatchedLocations()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  v0 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1902AF000, v0, OS_LOG_TYPE_DEFAULT, "CLGetOdometryBatchedLocations", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE858 != -1) {
      dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "NSDictionary *CLGetOdometryBatchedLocations()", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  uint64_t v3 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v1, v2);
  return objc_msgSend_getOdometryBatchedLocations(v3, v4, v5);
}

uint64_t CLGetControlPlaneStatusReport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = _os_activity_create(&dword_1902AF000, "CL: CLGetControlPlaneStatusReport", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v16, &state);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  int v17 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289538;
    int v26 = 0;
    __int16 v27 = 2082;
    int v28 = "";
    __int16 v29 = 2082;
    __int16 v30 = "activity";
    __int16 v31 = 1026;
    int v32 = a1;
    _os_log_impl(&dword_1902AF000, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetControlPlaneStatusReport\", \"event\":%{public, location:escape_only}s, \"clear\":%{public}d}", buf, 0x22u);
  }
  int v20 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v18, v19);
  uint64_t ControlPlaneStatusReportClear_startTime_endTime_latitude_longitude_altitude_accuracy_status = objc_msgSend_getControlPlaneStatusReportClear_startTime_endTime_latitude_longitude_altitude_accuracy_status_(v20, v21, a1, a2, a3, a4, a5, a6, a7, a8);
  os_activity_scope_leave(&state);
  return ControlPlaneStatusReportClear_startTime_endTime_latitude_longitude_altitude_accuracy_status;
}

void sub_19055536C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

uint64_t CLGetEmergencyLocationSettingsVersionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = _os_activity_create(&dword_1902AF000, "CL: CLGetEmergencyLocationSettingsVersion", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v12.opaque[0] = 0;
  v12.opaque[1] = 0;
  os_activity_scope_enter(v4, &v12);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v5 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v14 = 0;
    __int16 v15 = 2082;
    uint64_t v16 = "";
    __int16 v17 = 2082;
    uint64_t v18 = "activity";
    _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetEmergencyLocationSettingsVersion\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v8 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v6, v7);
  uint64_t EmergencyLocationSettingsCompatibilityVersion_andContentVersion = objc_msgSend_getEmergencyLocationSettingsCompatibilityVersion_andContentVersion_(v8, v9, a1, a2);
  os_activity_scope_leave(&v12);
  return EmergencyLocationSettingsCompatibilityVersion_andContentVersion;
}

void sub_1905554D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLDeleteCurrentEmergencyLocationAsset()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  v0 = _os_activity_create(&dword_1902AF000, "CL: CLDeleteCurrentEmergencyLocationAsset", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v9.opaque[0] = 0;
  v9.opaque[1] = 0;
  os_activity_scope_enter(v0, &v9);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v1 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    int v13 = "";
    __int16 v14 = 2082;
    __int16 v15 = "activity";
    _os_log_impl(&dword_1902AF000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLDeleteCurrentEmergencyLocationAsset\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v2, v3);
  uint64_t v7 = objc_msgSend_deleteCurrentEmergencyLocationAsset(v4, v5, v6);
  os_activity_scope_leave(&v9);
  return v7;
}

void sub_190555624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLCopyNearbyAssetSettings()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  v0 = _os_activity_create(&dword_1902AF000, "CL: CLCopyNearbyAssetSettings", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v9.opaque[0] = 0;
  v9.opaque[1] = 0;
  os_activity_scope_enter(v0, &v9);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v1 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    int v13 = "";
    __int16 v14 = 2082;
    __int16 v15 = "activity";
    _os_log_impl(&dword_1902AF000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyNearbyAssetSettings\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v2, v3);
  uint64_t v7 = objc_msgSend_copyNearbyAssetSettings(v4, v5, v6);
  os_activity_scope_leave(&v9);
  return v7;
}

void sub_190555774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLCopyNearbyAssetSettingsOfAccessoryFile(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = _os_activity_create(&dword_1902AF000, "CL: CLCopyNearbyAssetSettingsOfAccessoryFile", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v9.opaque[0] = 0;
  v9.opaque[1] = 0;
  os_activity_scope_enter(v2, &v9);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v3 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    int v13 = "";
    __int16 v14 = 2082;
    __int16 v15 = "activity";
    _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyNearbyAssetSettingsOfAccessoryFile\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (a1)
  {
    uint64_t v6 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v4, v5);
    a1 = objc_msgSend_copyNearbyAssetSettingsOfAccessoryFile_(v6, v7, a1);
  }
  os_activity_scope_leave(&v9);
  return a1;
}

void sub_1905558D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLCopyRoutineAssetSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = _os_activity_create(&dword_1902AF000, "CL: CLCopyRoutineAssetSettings", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v12.opaque[0] = 0;
  v12.opaque[1] = 0;
  os_activity_scope_enter(v4, &v12);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v5 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v14 = 0;
    __int16 v15 = 2082;
    uint64_t v16 = "";
    __int16 v17 = 2082;
    uint64_t v18 = "activity";
    _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyRoutineAssetSettings\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v8 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v6, v7);
  uint64_t v10 = objc_msgSend_copyRoutineAssetSettingsWithCompatibilityVersion_contentVersion_(v8, v9, a1, a2);
  os_activity_scope_leave(&v12);
  return v10;
}

void sub_190555A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLShouldDisplayEEDUI()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  v0 = _os_activity_create(&dword_1902AF000, "CL: CLShouldDisplayEEDUI", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v9.opaque[0] = 0;
  v9.opaque[1] = 0;
  os_activity_scope_enter(v0, &v9);

  if (qword_1EB3BE858 != -1) {
    dispatch_once(&qword_1EB3BE858, &unk_1EDFD4420);
  }
  uint64_t v1 = qword_1EB3BE850;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    int v13 = "";
    __int16 v14 = 2082;
    __int16 v15 = "activity";
    _os_log_impl(&dword_1902AF000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLShouldDisplayEEDUI\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, v2, v3);
  uint64_t shouldDisplayEEDUI = objc_msgSend_shouldDisplayEEDUI(v4, v5, v6);
  os_activity_scope_leave(&v9);
  return shouldDisplayEEDUI;
}

void sub_190555B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLGetEEDCloakingKey(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, a2, a3);

  return MEMORY[0x1F4181798](v4, sel_getEEDCloakingKey_, a1);
}

uint64_t CLGetEEDEmergencyContactNames(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, a2, a3);

  return MEMORY[0x1F4181798](v4, sel_getEEDEmergencyContactNames_, a1);
}

uint64_t sub_190555C1C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, a2, a3);

  return MEMORY[0x1F4181798](v4, sel_gyroCalibrationDatabaseSupportsMiniCalibration_, a1);
}

uint64_t sub_190555C5C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, a2, a3);

  return MEMORY[0x1F4181798](v4, sel_timeSyncMachTimeStamp_oscarTimeStamp_, a1);
}

os_log_t sub_190555CA4()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB3BE850 = (uint64_t)result;
  return result;
}

uint64_t sub_190555CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t result = sub_190556A74(a2);
  if (result)
  {
    unint64_t v5 = 3;
    unint64_t v6 = 2;
    while (1)
    {
      unint64_t v7 = v6;
      float v8 = sub_1904741A8(a2, v6, v6);
      unint64_t v9 = v5;
      unint64_t v10 = v5 - 2;
      if (v5 <= 2)
      {
        do
        {
          float v11 = *(float *)sub_190556B18(a1 + 12, v7, v9);
          float v12 = *(float *)sub_190556B18(a1 + 12, v7, v9);
          float v8 = v8 + (float)((float)-(float)(v11 * v12) * *(float *)sub_190556E74(a1, v9++));
        }
        while (v9 != 3);
      }
      *(float *)sub_190556E74(a1, v7) = v8;
      if (*(float *)sub_190556E74(a1, v7) <= 0.0) {
        break;
      }
      if (!v7) {
        return 1;
      }
      do
      {
        unint64_t v13 = v10;
        float v14 = sub_1904741A8(a2, v10, v7);
        unint64_t v15 = v5;
        if (v5 <= 2)
        {
          do
          {
            float v16 = *(float *)sub_190556B18(a1 + 12, v13, v15);
            float v17 = *(float *)sub_190556B18(a1 + 12, v7, v15);
            float v14 = v14 + (float)((float)-(float)(v16 * v17) * *(float *)sub_190556E74(a1, v15++));
          }
          while (v15 != 3);
        }
        float v18 = v14 / *(float *)sub_190556E74(a1, v7);
        *(float *)sub_190556B18(a1 + 12, v13, v7) = v18;
        unint64_t v10 = v13 - 1;
      }
      while (v13);
      unint64_t v6 = v7 - 1;
      unint64_t v5 = v7;
    }
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD2300);
    }
    uint64_t v19 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      unint64_t v22 = v7;
      _os_log_impl(&dword_1902AF000, v19, OS_LOG_TYPE_DEBUG, "D(%zu) <= 0 non-positive definite matrix!", buf, 0xCu);
    }
    uint64_t result = sub_1902D8400(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD2300);
      }
      int v20 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "BOOL CMFactoredMatrix<float, 3>::factor(const CMMatrix<T, N, N> &) [T = float, N = 3]", "CoreLocation: %s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
      return 0;
    }
  }
  return result;
}

void sub_190556004(float *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = 0;
  float v5 = 0.0;
  do
  {
    float v5 = v5 + (float)(a1[v4] * a1[v4]);
    ++v4;
  }
  while (v4 != 3);
  float v6 = sqrtf(v5);
  float v7 = -v6;
  if (v6 > 0.0) {
    float v7 = v6;
  }
  if (v7 == 0.0)
  {
    *(_DWORD *)(a2 + 32) = 1065353216;
    *(_OWORD *)a2 = xmmword_19060C12C;
    *(_OWORD *)(a2 + 16) = unk_19060C13C;
  }
  else
  {
    __float2 v8 = __sincosf_stret(v6);
    v9[0] = 1.0;
    v9[1] = v8.__sinval / v6;
    v9[2] = (float)(1.0 - v8.__cosval) / (float)(v6 * v6);
    sub_190557050(a1, v9, a2);
  }
}

void sub_1905560C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0;
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1 + 12;
  do
  {
    unint64_t v8 = 2;
    do
    {
      for (unint64_t i = 0; i != v8; ++i)
      {
        float v10 = *(float *)sub_190448B30(a2, v6, i);
        float v11 = *(float *)sub_190556B18(v7, i, v8);
        float v12 = (float *)sub_190448B30(a2, v6, v8);
        *float v12 = *v12 + (float)(v10 * v11);
      }
      *(_DWORD *)sub_190448B30((uint64_t)v40, v6, v8--) = 0;
    }
    while (v8);
    *(_DWORD *)sub_190448B30((uint64_t)v40, v6, 0) = 0;
    *(_DWORD *)sub_190448B30((uint64_t)v40, v6, v6) = 1065353216;
    ++v6;
  }
  while (v6 != 3);
  for (unint64_t j = 2; ; --j)
  {
    unint64_t v14 = 0;
    v45[j] = 0.0;
    float v15 = 0.0;
    do
    {
      float v16 = *(float *)sub_190448B30(a2, j, v14);
      float v17 = v16 * *(float *)sub_190448B30(a2, j, v14);
      float v18 = v15 + (float)(v17 * *(float *)sub_190556E74(a1, v14));
      float v19 = *(float *)sub_190448B30((uint64_t)v40, j, v14);
      float v20 = v19 * *(float *)sub_190448B30((uint64_t)v40, j, v14);
      float v15 = v18 + (float)(v20 * sub_190448408(a3, v14));
      v45[j] = v15;
      ++v14;
    }
    while (v14 != 3);
    if (v15 <= 0.0) {
      break;
    }
    if (!j)
    {
      for (unint64_t k = 0; k != 3; ++k)
      {
        float v39 = v45[k];
        *(float *)sub_190556E74(a1, k) = v39;
      }
      return;
    }
    for (unint64_t m = 0; m != j; ++m)
    {
      unint64_t v22 = 0;
      float v23 = 0.0;
      do
      {
        float v24 = *(float *)sub_190448B30(a2, m, v22);
        float v25 = v24 * *(float *)sub_190556E74(a1, v22);
        float v26 = v23 + (float)(v25 * *(float *)sub_190448B30(a2, j, v22));
        float v27 = *(float *)sub_190448B30((uint64_t)v40, m, v22);
        float v28 = v27 * sub_190448408(a3, v22);
        float v23 = v26 + (float)(v28 * *(float *)sub_190448B30((uint64_t)v40, j, v22++));
      }
      while (v22 != 3);
      unint64_t v29 = 0;
      *(float *)sub_190556B18(v7, m, j) = v23 / v15;
      do
      {
        float v30 = *(float *)sub_190556B18(v7, m, j);
        float v31 = *(float *)sub_190448B30(a2, j, v29);
        int v32 = (float *)sub_190448B30(a2, m, v29);
        *int v32 = *v32 - (float)(v30 * v31);
        float v33 = *(float *)sub_190556B18(v7, m, j);
        float v34 = *(float *)sub_190448B30((uint64_t)v40, j, v29);
        double v35 = (float *)sub_190448B30((uint64_t)v40, m, v29);
        *double v35 = *v35 - (float)(v33 * v34);
        ++v29;
      }
      while (v29 != 3);
    }
  }
  if (qword_1EB3BE888 != -1) {
    dispatch_once(&qword_1EB3BE888, &unk_1EDFD2300);
  }
  __int16 v36 = off_1EB3BE880;
  if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134217984;
    unint64_t v44 = j;
    _os_log_impl(&dword_1902AF000, v36, OS_LOG_TYPE_DEBUG, "D[%zu] <= 0, matrix ! positive definite", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD2300);
    }
    int v41 = 134217984;
    unint64_t v42 = j;
    uint64_t v37 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CMFactoredMatrix<float, 3>::thorntonTemporalUpdate(CMMatrix<T, N, N> &, const CMVector<T, N> &) [T = float, N = 3]", "CoreLocation: %s\n", v37);
    if (v37 != (char *)buf) {
      free(v37);
    }
  }
}

void sub_190556578(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = 0;
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v38 = 0;
  int v39 = 0;
  uint64_t v8 = (uint64_t)(a1 + 3);
LABEL_2:
  unint64_t v9 = 0;
  uint64_t v10 = -1;
  do
  {
    float v11 = sub_1904741A8(a2, v7, v9);
    unint64_t v12 = v10;
    if (v9)
    {
      do
      {
        float v13 = sub_1904741A8(a2, v7, v12);
        float v11 = v11 + (float)(v13 * *(float *)sub_190556B18(v8, v12--, v9));
      }
      while (v12 != -1);
    }
    v45[v9] = v11;
    v44[v9] = v11 * *(float *)sub_190556E74((uint64_t)a1, v9);
    ++v9;
    ++v10;
  }
  while (v9 != 3);
  float v14 = sub_190448408(a3, v7);
  float v15 = v14 + (float)(v45[0] * v44[0]);
  if (v15 <= 0.0)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD2300);
    }
    double v35 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      unint64_t v43 = v7;
      _os_log_impl(&dword_1902AF000, v35, OS_LOG_TYPE_DEBUG, "%zu: alpha <= 0, matrix ! positive definite", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD2300);
      }
      int v40 = 134217984;
      unint64_t v41 = v7;
LABEL_33:
      __int16 v36 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "CMVector<T, N> CMFactoredMatrix<float, 3>::biermanObservationalUpdate(const CMMatrix<T, P, N> &, const CMVector<T, P> &, const CMVector<T, P> &) [T = float, N = 3, P = 3UL]", "CoreLocation: %s\n", v36);
      if (v36 != (char *)buf) {
        free(v36);
      }
    }
  }
  else
  {
    float v16 = 1.0 / v15;
    float v17 = sub_190448408(a3, v7);
    char v18 = 0;
    *a1 = *a1 * (float)((float)(1.0 / v15) * v17);
    unint64_t v19 = 1;
    while (1)
    {
      float v20 = v45[v19];
      float v21 = v15 + (float)(v20 * v44[v19]);
      if (v21 <= 0.0) {
        break;
      }
      char v22 = v18;
      float v23 = -(float)(v20 * v16);
      float v16 = 1.0 / v21;
      float v24 = (float *)sub_190556E74((uint64_t)a1, v19);
      unint64_t v25 = 0;
      float *v24 = (float)(v15 * (float)(1.0 / v21)) * *v24;
      do
      {
        float v26 = *(float *)sub_190556B18(v8, v25, v19);
        float v27 = v44[v25];
        float v28 = (float *)sub_190556B18(v8, v25, v19);
        float v29 = v44[v19];
        *float v28 = v26 + (float)(v27 * v23);
        v44[v25++] = v27 + (float)(v29 * v26);
      }
      while (v19 != v25);
      char v18 = 1;
      unint64_t v19 = 2;
      float v15 = v21;
      if (v22)
      {
        unint64_t v30 = 0;
        float v31 = v16 * sub_190448408(a4, v7);
        do
        {
          float v32 = v44[v30];
          float v33 = (float *)sub_19042D844((uint64_t)&v38, v30);
          *float v33 = *v33 + (float)(v31 * v32);
          ++v30;
        }
        while (v30 != 3);
        if (++v7 != 3) {
          goto LABEL_2;
        }
        return;
      }
    }
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD2300);
    }
    float v34 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      unint64_t v43 = v7;
      _os_log_impl(&dword_1902AF000, v34, OS_LOG_TYPE_DEBUG, "%zu: alpha <= 0, matrix ! positive definite", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD2300);
      }
      int v40 = 134217984;
      unint64_t v41 = v7;
      goto LABEL_33;
    }
  }
}

uint64_t sub_190556A30()
{
  return 0;
}

uint64_t sub_190556A38()
{
  return 0;
}

uint64_t sub_190556A40()
{
  return 0;
}

uint64_t sub_190556A48()
{
  return 0;
}

uint64_t sub_190556A50()
{
  return 0;
}

uint64_t sub_190556A64()
{
  return 0;
}

uint64_t sub_190556A6C()
{
  return 0;
}

BOOL sub_190556A74(uint64_t a1)
{
  unint64_t v2 = 0;
  char v3 = 1;
LABEL_2:
  char v4 = v3;
  unint64_t v5 = v2 + 1;
  while (1)
  {
    float v6 = sub_1904741A8(a1, v2, v5);
    float v7 = v6 - sub_1904741A8(a1, v5, v2);
    if (v7 <= 0.0) {
      float v7 = -v7;
    }
    if (v7 > 1.0e-16) {
      return v7 <= 1.0e-16;
    }
    BOOL v8 = v5 == 2;
    unint64_t v5 = 2;
    if (v8)
    {
      char v3 = 0;
      unint64_t v2 = 1;
      if (v4) {
        goto LABEL_2;
      }
      return v7 <= 1.0e-16;
    }
  }
}

uint64_t sub_190556B18(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a3 >= 3)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD2300);
    }
    float v7 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218240;
      unint64_t v12 = a3;
      __int16 v13 = 2048;
      uint64_t v14 = 3;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMFactoredMatrix.h, line 237,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD2300);
      }
      BOOL v8 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "T &CMFactoredMatrix<float, 3>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) [T = float, N = 3]", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  if (a3 <= a2)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD2300);
    }
    unint64_t v9 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218240;
      unint64_t v12 = a3;
      __int16 v13 = 2048;
      uint64_t v14 = a2;
      _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_FAULT, "Assertion failed: col > row, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMFactoredMatrix.h, line 238,invalid element %zu <= %zu.", buf, 0x16u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD2300);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "T &CMFactoredMatrix<float, 3>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) [T = float, N = 3]", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return a1 + 4 * (a2 + (((a3 - 1) * a3) >> 1));
}

uint64_t sub_190556E74(uint64_t a1, unint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a2 >= 3)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD2300);
    }
    unint64_t v5 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218240;
      unint64_t v8 = a2;
      __int16 v9 = 2048;
      uint64_t v10 = 3;
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: row < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMFactoredMatrix.h, line 191,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD2300);
      }
      float v6 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "T &CMFactoredMatrix<float, 3>::DiagonalMatrix::operator()(size_t) [T = float, N = 3]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return a1 + 4 * a2;
}

float sub_190557050@<S0>(float *a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = 0;
  float v5 = 0.0;
  do
  {
    float v5 = v5 + (float)(a1[v4] * a1[v4]);
    ++v4;
  }
  while (v4 != 3);
  float v6 = *a2;
  *(float *)a3 = *a2;
  *(void *)(a3 + 4) = 0;
  *(_DWORD *)(a3 + 12) = 0;
  *(float *)(a3 + 16) = v6;
  *(void *)(a3 + 20) = 0;
  *(_DWORD *)(a3 + 28) = 0;
  *(float *)(a3 + 32) = v6;
  float result = sqrtf(v5);
  if (result <= 0.0) {
    float result = -result;
  }
  if (result != 0.0)
  {
    uint64_t v8 = 0;
    float v10 = a1[1];
    float v9 = a1[2];
    float v11 = *a1;
    float v12 = -*a1;
    LODWORD(v32) = 0;
    *((float *)&v32 + 1) = v9;
    *((float *)&v32 + 2) = -v10;
    *((float *)&v32 + 3) = -v9;
    LODWORD(v33) = 0;
    *(void *)((char *)&v33 + 4) = __PAIR64__(LODWORD(v10), LODWORD(v11));
    *((float *)&v33 + 3) = v12;
    int v34 = 0;
    float v13 = a2[1];
    int v26 = 0;
    long long v24 = v32;
    long long v25 = v33;
    do
    {
      *(float *)((char *)&v24 + v8) = v13 * *(float *)((char *)&v24 + v8);
      v8 += 4;
    }
    while (v8 != 36);
    uint64_t v14 = 0;
    int v29 = v26;
    long long v27 = v24;
    long long v28 = v25;
    float v15 = a2[2];
    long long v18 = v32;
    long long v19 = v33;
    int v20 = v34;
    do
    {
      *(float *)((char *)&v18 + v14) = v15 * *(float *)((char *)&v18 + v14);
      v14 += 4;
    }
    while (v14 != 36);
    v21[0] = v18;
    v21[1] = v19;
    int v22 = v20;
    sub_1904779D0((uint64_t)v21, (uint64_t)&v32, (uint64_t)v23);
    for (unint64_t i = 0; i != 9; ++i)
      *((float *)&v27 + i) = sub_19044CC24((uint64_t)v23, i) + *((float *)&v27 + i);
    unint64_t v17 = 0;
    v30[0] = v27;
    v30[1] = v28;
    int v31 = v29;
    do
    {
      float result = sub_19044CC24((uint64_t)v30, v17) + *(float *)(a3 + 4 * v17);
      *(float *)(a3 + 4 * v17++) = result;
    }
    while (v17 != 9);
  }
  return result;
}

void *sub_19055720C(void *a1)
{
  *a1 = &unk_1EDFC7DD0;
  sub_190557280((uint64_t)a1, 0, 0);
  unint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_1902D8B58(v2);
  }

  return sub_1904DC240(a1);
}

void sub_190557280(uint64_t a1, int a2, uint64_t a3)
{
  if (!a2)
  {
    uint64_t v19 = v3;
    uint64_t v20 = v4;
    uint64_t v7 = *(void *)(a1 + 32);
    if (v7)
    {
      if (a3)
      {
LABEL_4:
        uint64_t v8 = sub_190557354;
        uint64_t v9 = a1;
LABEL_16:
        sub_1902CD864(v7, (uint64_t)v8, v9);
        return;
      }
    }
    else
    {
      sub_1902BAD40();
      int v10 = sub_19046BC40();
      if (v10) {
        int v11 = 41;
      }
      else {
        int v11 = 1;
      }
      if (v10) {
        int v12 = 65280;
      }
      else {
        int v12 = 11;
      }
      float v13 = (void *)sub_1902DF4A8();
      v16[0] = v12;
      v16[1] = v11;
      char v17 = 0;
      sub_19043791C(v13, (uint64_t)v16, (uint64_t *)&v18);
      long long v14 = v18;
      long long v18 = 0uLL;
      float v15 = *(std::__shared_weak_count **)(a1 + 40);
      *(_OWORD *)(a1 + 32) = v14;
      if (v15)
      {
        sub_1902D8B58(v15);
        if (*((void *)&v18 + 1)) {
          sub_1902D8B58(*((std::__shared_weak_count **)&v18 + 1));
        }
      }
      uint64_t v7 = *(void *)(a1 + 32);
      if (a3) {
        goto LABEL_4;
      }
    }
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    goto LABEL_16;
  }
}

uint64_t sub_190557354(uint64_t a1)
{
  uint64_t result = IOHIDEventGetType();
  if (result == 3)
  {
    int IntegerValue = IOHIDEventGetIntegerValue();
    uint64_t result = IOHIDEventGetIntegerValue();
    if (IntegerValue == 65289 && result == 1)
    {
      BOOL v4 = IOHIDEventGetIntegerValue() == 0;
      unint64_t TimeStamp = IOHIDEventGetTimeStamp();
      sub_1902D8D34(TimeStamp);
      BOOL v6 = v4;
      return sub_1902D8BCC(a1, 0, (uint64_t)&v6, 1);
    }
  }
  return result;
}

void sub_190557E38(void *a1)
{
  sub_19055720C(a1);

  JUMPOUT(0x192FCC980);
}

double sub_190557E74()
{
  return 0.0;
}

void sub_190557E7C()
{
}

void sub_190557EF0(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x10F1C40BE01E9BALL);
  _Unwind_Resume(a1);
}

uint64_t sub_190557F14()
{
  if (qword_1EB3BF598 != -1) {
    dispatch_once(&qword_1EB3BF598, &unk_1EDFD2340);
  }
  return qword_1EB3BF590;
}

void sub_190557F58()
{
  v31[204] = *(std::__shared_weak_count **)MEMORY[0x1E4F143B8];
  uint64_t v0 = sub_1902D6BD0();
  uint64_t v1 = *(void *)(v0 + 24);
  unint64_t v2 = *(std::__shared_weak_count **)(v0 + 32);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v25 = 0;
  char v3 = sub_1902C47F8(v1, "EnableMagnetometerCoexistenceCompensation", (BOOL *)&v25);
  if (v2) {
    sub_1902D8B58(v2);
  }
  if ((v3 & 1) == 0) {
    char v25 = 1;
  }
  sub_1902D6BD0();
  if (*(unsigned char *)(qword_1EB3BF828 + 16))
  {
    CFDataRef v4 = (const __CFData *)sub_1904C3F4C();
  }
  else
  {
    sub_19044FC14("kCLConnectionMessageCompassCalibrationData", buf);
    float v5 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v6 = objc_opt_class();
    uint64_t v7 = objc_opt_class();
    uint64_t v8 = objc_opt_class();
    uint64_t v11 = objc_msgSend_setWithObjects_(v5, v9, v6, v7, v8, 0);
    uint64_t v23 = *(void *)buf;
    long long v24 = v31[0];
    if (v31[0]) {
      atomic_fetch_add_explicit(&v31[0]->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v13 = objc_msgSend_sendMessage_withReplyClassesSync_(CMMotionUtils, v10, (uint64_t)&v23, v11);
    if (v24) {
      sub_1902D8B58(v24);
    }
    CFDataRef v4 = (const __CFData *)objc_msgSend_objectForKeyedSubscript_(v13, v12, @"CMCompassCalibrationData");
    if (v31[0]) {
      sub_1902D8B58(v31[0]);
    }
  }
  if (!v4)
  {
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD3040);
    }
    long long v18 = qword_1E929D790;
    if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v18, OS_LOG_TYPE_DEFAULT, "#Warning CPAS data response was invaild.", buf, 2u);
    }
    if (!sub_1902D8400(115, 2)) {
      goto LABEL_39;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 == -1)
    {
LABEL_60:
      LOWORD(v26) = 0;
      float v21 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "static void CLMagnetometerCoexistenceNotifier::create()", "CoreLocation: %s\n", v21);
LABEL_61:
      if (v21 != (char *)buf) {
        free(v21);
      }
      goto LABEL_39;
    }
LABEL_67:
    dispatch_once(&qword_1E929D798, &unk_1EDFD3040);
    goto LABEL_60;
  }
  if (!v25) {
    goto LABEL_39;
  }
  CFIndex Length = CFDataGetLength(v4);
  BytePtr = CFDataGetBytePtr(v4);
  if (!BytePtr)
  {
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD3040);
    }
    uint64_t v19 = qword_1E929D790;
    if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v19, OS_LOG_TYPE_DEFAULT, "#Warning CPAS data is NULL", buf, 2u);
    }
    if (!sub_1902D8400(115, 2)) {
      goto LABEL_39;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 == -1) {
      goto LABEL_60;
    }
    goto LABEL_67;
  }
  if (Length >= 2)
  {
    int v16 = *BytePtr;
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD3040);
    }
    char v17 = qword_1E929D790;
    if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v16;
      LOWORD(v31[0]) = 2048;
      *(std::__shared_weak_count **)((char *)v31 + 2) = (std::__shared_weak_count *)Length;
      _os_log_impl(&dword_1902AF000, v17, OS_LOG_TYPE_INFO, "cpas version is %u, length is %ld bytes", buf, 0x12u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD3040);
      }
      int v26 = 67109376;
      int v27 = v16;
      __int16 v28 = 2048;
      CFIndex v29 = Length;
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "static void CLMagnetometerCoexistenceNotifier::create()", "CoreLocation: %s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
    if (v16 == 5 && Length == 76) {
      operator new();
    }
    if (v16 == 6 && Length == 76) {
      operator new();
    }
    if (v16 == 10 && Length == 76) {
      operator new();
    }
    if (v16 == 11 && Length == 28) {
      operator new();
    }
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD3040);
    }
    uint64_t v20 = qword_1E929D790;
    if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v16;
      LOWORD(v31[0]) = 2048;
      *(std::__shared_weak_count **)((char *)v31 + 2) = (std::__shared_weak_count *)Length;
      _os_log_impl(&dword_1902AF000, v20, OS_LOG_TYPE_INFO, "Warning: cpas data was found but did not match any versions. version (%u) length (%ld)", buf, 0x12u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD3040);
      }
      int v26 = 67109376;
      int v27 = v16;
      __int16 v28 = 2048;
      CFIndex v29 = Length;
      float v21 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "static void CLMagnetometerCoexistenceNotifier::create()", "CoreLocation: %s\n", v21);
      goto LABEL_61;
    }
  }
LABEL_39:
  if (!qword_1EB3BF590) {
    operator new();
  }
}

void sub_1905588A0(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x10F1C406E37FBC4);
  _Unwind_Resume(a1);
}

void sub_19055894C(void *a1)
{
  sub_1904DC240(a1);

  JUMPOUT(0x192FCC980);
}

os_log_t sub_190558984()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Compass");
  qword_1E929D790 = (uint64_t)result;
  return result;
}

uint64_t sub_1905589B4(uint64_t a1, float *a2)
{
  char v4 = *(unsigned char *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a1 + 16;
    while (*(float *)(a1 + v5 * 4 + 20) == a2[v5 + 1]
         && *(float *)(a1 + v5 * 4 + 24) == a2[v5 + 2]
         && *(float *)(a1 + v5 * 4 + 28) == a2[v5 + 3]
         && *(float *)(a1 + v5 * 4 + 32) == a2[v5 + 4]
         && *(float *)(a1 + v5 * 4 + 36) == a2[v5 + 5]
         && *(float *)(a1 + v5 * 4 + 40) == a2[v5 + 6])
    {
      v5 += 6;
      if (v5 == 48)
      {
        uint64_t v7 = 0;
        while (*(float *)(a1 + 212 + v7 * 4) == a2[v7 + 49])
        {
          if (++v7 == 7)
          {
            if (*(float *)(a1 + 240) != a2[56]) {
              goto LABEL_15;
            }
            unint64_t v19 = 0;
            do
            {
              unint64_t v20 = v19;
              if ((float *)v6 != a2) {
                break;
              }
              ++v19;
            }
            while (v20 < 0x12);
            if ((v4 & 2) != 0 && v20 <= 0x11) {
              goto LABEL_16;
            }
            goto LABEL_17;
          }
        }
        break;
      }
    }
LABEL_15:
    if ((v4 & 2) != 0)
    {
LABEL_16:
      float v8 = *(float *)(a1 + 12);
      float v9 = sub_190558BA0(v6, v8).f32[0];
      float v11 = v10;
      float v13 = v12;
      float v14 = sub_190558BA0((uint64_t)a2, v8).f32[0];
      uint64_t v15 = *(void *)a1;
      v21[0] = v14 - v9;
      v21[1] = v16 - v11;
      _OWORD v21[2] = v17 - v13;
      (*(void (**)(uint64_t, float *))(*(void *)v15 + 32))(v15, v21);
    }
  }
  else
  {
    (*(void (**)(void))(**(void **)a1 + 24))();
  }
LABEL_17:
  *(unsigned char *)(a1 + 8) |= 1u;
  memcpy((void *)(a1 + 16), a2, 0x11AuLL);
  return sub_190558CFC(a1);
}

float32x2_t sub_190558BA0(uint64_t a1, float a2)
{
  uint64_t v2 = 0;
  float v3 = *(float *)(a1 + 224);
  while (1)
  {
    float v4 = *(float *)(a1 + 196 + 4 * v2);
    if ((float)(v3 + v4) > a2) {
      break;
    }
    if (++v2 == 6)
    {
      float v4 = *(float *)(a1 + 220);
      break;
    }
  }
  float v5 = (float)((float)(a2 - v4) / (float)(v3 + v3)) + 0.5;
  if (v5 <= 0.0)
  {
    uint64_t v10 = a1 + 24 * v2;
    float32x2_t v11 = *(float32x2_t *)(v10 + 4);
    float32x2_t v12 = *(float32x2_t *)(v10 + 16);
  }
  else
  {
    if (v5 < 1.0)
    {
      uint64_t v6 = a1 + 24 * v2;
      float32x2_t v7 = (float32x2_t)vdup_n_s32(0x3C8EFA35u);
      float32x2_t v8 = vmul_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v6 + 4), a2), *(float32x2_t *)(v6 + 16)), v7);
      return vadd_f32(v8, vmul_n_f32(vsub_f32(vmul_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v6 + 28), a2), *(float32x2_t *)(v6 + 40)), v7), v8), v5 * (float)(v5 * (float)((float)(v5 * -2.0) + 3.0))));
    }
    uint64_t v13 = a1 + 24 * v2;
    float32x2_t v11 = *(float32x2_t *)(v13 + 28);
    float32x2_t v12 = *(float32x2_t *)(v13 + 40);
  }
  return vmul_f32(vadd_f32(vmul_n_f32(v11, a2), v12), (float32x2_t)vdup_n_s32(0x3C8EFA35u));
}

uint64_t sub_190558CFC(uint64_t result)
{
  if ((~*(unsigned __int8 *)(result + 8) & 3) == 0)
  {
    uint64_t v1 = (unsigned char *)result;
    float v2 = *(float *)(result + 12);
    v5.n128_u64[0] = (unint64_t)sub_190558BA0(result + 16, v2);
    v10[0] = v5.n128_u32[0];
    v10[1] = v4;
    v10[2] = v3;
    v5.n128_f32[0] = (float)(v2 + -2.0) * 0.25;
    if (v5.n128_f32[0] >= 0.0)
    {
      int v6 = (int)v5.n128_f32[0];
      if ((int)v5.n128_f32[0] < 0x11)
      {
        *(float *)&unsigned int v7 = (float)v6;
        float v8 = v5.n128_f32[0] - (float)v6;
        float v9 = &v1[v6];
        LOBYTE(v7) = v9[244];
        LOBYTE(v3) = v9[245];
        v5.n128_f32[0] = (float)v7 + (float)(v8 * (float)((float)v3 - (float)v7));
        goto LABEL_8;
      }
      v5.n128_u8[0] = v1[261];
    }
    else
    {
      v5.n128_u8[0] = v1[244];
    }
    v5.n128_f32[0] = (float)v5.n128_u32[0];
LABEL_8:
    v5.n128_f32[0] = v5.n128_f32[0] * 0.00017453;
    return (*(uint64_t (**)(void, _DWORD *, BOOL, __n128))(**(void **)v1 + 16))(*(void *)v1, v10, v2 < 20.0, v5);
  }
  return result;
}

uint64_t sub_190558DF4(uint64_t a1, float a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a2 == 3.4028e38)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD2360);
    }
    __n128 v5 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      uint64_t v8 = 0x47EFFFFFE0000000;
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: temperature != 3.40282347e+38F, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMNonlinearTemperatureFit.cpp, line 77,temperature,%f.", buf, 0xCu);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD2360);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "void CMNonlinearTemperatureFit::feedGyroTemperature(float)", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  *(unsigned char *)(a1 + 8) |= 2u;
  *(float *)(a1 + 12) = a2;
  return sub_190558CFC(a1);
}

uint64_t sub_190559464(uint64_t a1, char a2)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_19060C1A0;
  *(void *)(a1 + 24) = 0x7FF8000000000000;
  *(unsigned char *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = 0;
  sub_190447E04(a1 + 48);
  *(void *)(a1 + 6008) = 0x7FF8000000000000;
  *(void *)(a1 + 6016) = 0x7FF8000000000000;
  *(unsigned char *)(a1 + 6024) = 0;
  if (*(unsigned char *)(a1 + 32)) {
    operator new();
  }
  *(void *)(a1 + 5976) = sub_1905595A4;
  *(void *)(a1 + 5984) = a1;
  return a1;
}

void sub_190559534(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  MEMORY[0x192FCC980](v4, 0x10E0C408232E938);
  *(_OWORD *)(v1 + 5976) = 0u;
  sub_190544F98(v2, 0);
  _Unwind_Resume(a1);
}

double sub_19055957C(int a1, unint64_t a2, uint64_t a3)
{
  if ((a1 - 1) <= 1) {
    *(_DWORD *)a3 = a1;
  }
  double result = (double)a2 * 0.000001;
  *(double *)(a3 + 8) = result;
  return result;
}

void sub_1905595A4(int a1, uint64_t a2, int *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)a3 + 32)) {
    sub_1904C832C(*((void *)a3 + 5), a1, a2);
  }
  int v6 = *a3;
  if (a1)
  {
    if (v6 == 1)
    {
      *a3 = 3;
      *((double *)a3 + 1) = (double)(unint64_t)a2 * 0.000001;
      if (qword_1E929D998 != -1) {
        dispatch_once(&qword_1E929D998, &unk_1EDFD2380);
      }
      unsigned int v7 = qword_1E929D9A0;
      if (os_log_type_enabled((os_log_t)qword_1E929D9A0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 134217984;
        double v11 = (double)(unint64_t)a2 * 0.000001;
        _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_DEBUG, "[CMAccessoryActivity] Walking. time %f\n", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D998 == -1)
        {
LABEL_20:
          uint64_t v9 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "void CMAccessoryActivity::stepDetectorCallback(BOOL, uint64_t)", "CoreLocation: %s\n", v9);
          if (v9 != (char *)buf) {
            free(v9);
          }
          return;
        }
LABEL_22:
        dispatch_once(&qword_1E929D998, &unk_1EDFD2380);
        goto LABEL_20;
      }
    }
  }
  else if (v6 == 3)
  {
    *a3 = 1;
    *((double *)a3 + 1) = (double)(unint64_t)a2 * 0.000001;
    if (qword_1E929D998 != -1) {
      dispatch_once(&qword_1E929D998, &unk_1EDFD2380);
    }
    uint64_t v8 = qword_1E929D9A0;
    if (os_log_type_enabled((os_log_t)qword_1E929D9A0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      double v11 = (double)(unint64_t)a2 * 0.000001;
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_DEBUG, "[CMAccessoryActivity] Not walking. time %f\n", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D998 == -1) {
        goto LABEL_20;
      }
      goto LABEL_22;
    }
  }
}

void sub_1905598AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 6024))
  {
    float32x2_t v24 = *(float32x2_t *)(a2 + 8);
    int v25 = *(_DWORD *)(a2 + 16);
    float v6 = sub_1904CF514((float *)(a2 + 32));
    float v8 = *(float *)(a2 + 24) + v7;
    float v10 = v9 + *(float *)(a2 + 28);
    float v26 = *(float *)(a2 + 20) + v6;
    float v27 = v8;
    float v28 = v10;
    long long v29 = xmmword_19060C1B0;
    int32x2_t v30 = vdup_n_s32(0x3A03126Fu);
    unint64_t v31 = 0xBF80000000000000;
    long long v32 = *(_OWORD *)(a2 + 32);
    double v11 = sub_19044913C(a1 + 48, &v24, *(double *)a2);
    uint64_t v13 = v12;
    *(double *)(a1 + 6008) = v11;
    if (qword_1E929D998 != -1) {
      dispatch_once(&qword_1E929D998, &unk_1EDFD2380);
    }
    float v14 = qword_1E929D9A0;
    if (os_log_type_enabled((os_log_t)qword_1E929D9A0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134218240;
      double v38 = v11;
      __int16 v39 = 2048;
      uint64_t v40 = v13;
      _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_DEBUG, "[CMAccessoryActivity] Start impulse start %f, end, %f.\n", buf, 0x16u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D998 != -1) {
        dispatch_once(&qword_1E929D998, &unk_1EDFD2380);
      }
      int v33 = 134218240;
      double v34 = v11;
      __int16 v35 = 2048;
      uint64_t v36 = v13;
      float v21 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "CMAccessoryStepDetector::Impulse CMAccessoryActivity::feedImuSampleToStep(const AccessoryActivity::ImuData *const)", "CoreLocation: %s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    double v15 = *(double *)(a1 + 6008);
    *(void *)(a1 + 6008) = 0x7FF8000000000000;
    *(void *)(a1 + 6016) = 0x7FF8000000000000;
    if (qword_1E929D998 != -1) {
      dispatch_once(&qword_1E929D998, &unk_1EDFD2380);
    }
    float v16 = qword_1E929D9A0;
    if (os_log_type_enabled((os_log_t)qword_1E929D9A0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134218240;
      double v38 = v15;
      __int16 v39 = 2048;
      uint64_t v40 = v13;
      _os_log_impl(&dword_1902AF000, v16, OS_LOG_TYPE_DEBUG, "[CMAccessoryActivity] End impulse start %f, end, %f.\n", buf, 0x16u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D998 != -1) {
        dispatch_once(&qword_1E929D998, &unk_1EDFD2380);
      }
      int v33 = 134218240;
      double v34 = v15;
      __int16 v35 = 2048;
      uint64_t v36 = v13;
      uint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "CMAccessoryStepDetector::Impulse CMAccessoryActivity::feedImuSampleToStep(const AccessoryActivity::ImuData *const)", "CoreLocation: %s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    *(double *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v13;
    uint64_t v18 = *(void *)(a1 + 40);
    if (v18) {
      sub_1904CA660(v18, a2, v17);
    }
    long long v19 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a1;
    *(_OWORD *)(a3 + 16) = v19;
  }
  else
  {
    if (qword_1E929D998 != -1) {
      dispatch_once(&qword_1E929D998, &unk_1EDFD2380);
    }
    unint64_t v20 = qword_1E929D9A0;
    if (os_log_type_enabled((os_log_t)qword_1E929D9A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v20, OS_LOG_TYPE_DEFAULT, "[CMAccessoryActivity] headsetOrientation is not set. Do nothing.", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D998 != -1) {
        dispatch_once(&qword_1E929D998, &unk_1EDFD2380);
      }
      v24.i16[0] = 0;
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "AccessoryActivity::ActivityPacket CMAccessoryActivity::feedIMUData(const AccessoryActivity::ImuData *const)", "CoreLocation: %s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
    *(void *)a3 = 0;
    *(_OWORD *)(a3 + 8) = xmmword_19060C1A0;
    *(void *)(a3 + 24) = 0x7FF8000000000000;
  }
}

os_log_t sub_190559E04()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "MotionContext");
  qword_1E929D9A0 = (uint64_t)result;
  return result;
}

uint64_t sub_190559E34()
{
  if (qword_1EB3BF5A8 != -1) {
    dispatch_once(&qword_1EB3BF5A8, &unk_1EDFD23A0);
  }
  return qword_1EB3BF5A0;
}

uint64_t sub_190559E78()
{
  if (sub_1902BAD84()) {
    operator new();
  }
  uint64_t result = sub_1902BB1DC();
  if (result) {
    operator new();
  }
  return result;
}

void sub_190559EF0(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x10F1C400FEECA2BLL);
  _Unwind_Resume(a1);
}

void sub_190559F28(uint64_t a1)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  sub_1902B25B0(a1, (uint64_t)"CLCompass", 2);
}

void sub_19055A460(_Unwind_Exception *a1)
{
  uint64_t v3 = v1[15];
  v1[15] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = v1[5];
  v1[5] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_1904DC240(v1);
  _Unwind_Resume(a1);
}

void sub_19055A524(unsigned char *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (qword_1E929D798 != -1) {
    dispatch_once(&qword_1E929D798, &unk_1EDFD3320);
  }
  uint64_t v4 = qword_1E929D790;
  if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
  {
    if (*a1) {
      __n128 v5 = "open";
    }
    else {
      __n128 v5 = "closed";
    }
    *(_DWORD *)uint64_t buf = 136315138;
    float v16 = v5;
    _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_DEBUG, "Cover %s", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD3320);
    }
    if (*a1) {
      float v10 = "open";
    }
    else {
      float v10 = "closed";
    }
    int v13 = 136315138;
    float v14 = v10;
    double v11 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "static void CLCompass::onCoverState(const BOOL *, void *)", "CoreLocation: %s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  if (*a1)
  {
    if (*(void *)(a2 + 56))
    {
      if (*(unsigned char *)(a2 + 48))
      {
        *(unsigned char *)(a2 + 28) = 0;
        (*(void (**)(uint64_t))(*(void *)a2 + 56))(a2);
        objc_msgSend_unregister_forNotification_(*(void **)(*(void *)(a2 + 40) + 16), v6, *(void *)(*(void *)(a2 + 40) + 8), 0);
        *(unsigned char *)(a2 + 64) = 1;
        float v7 = *(__CFRunLoopTimer **)(a2 + 56);
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        CFRunLoopTimerSetNextFireDate(v7, Current + 3.0);
      }
    }
    *(CFAbsoluteTime *)(a2 + 72) = CFAbsoluteTimeGetCurrent();
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19055B074;
    block[3] = &unk_1E568CF68;
    block[4] = a2;
    dispatch_async(global_queue, block);
  }
}

void sub_19055A7E4(uint64_t a1, const char *a2, long long *a3, uint64_t a4)
{
  sub_1904DF748(a1, a2, (uint64_t)a3);
  int v7 = *(_DWORD *)a2;
  long long v8 = a3[1];
  long long v16 = *a3;
  long long v17 = v8;
  long long v9 = a3[3];
  long long v18 = a3[2];
  long long v19 = v9;
  if (!v7)
  {
    uint64_t v10 = sub_1902D6BD0();
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    long long v12 = v16;
    long long v13 = v17;
    long long v14 = v18;
    long long v15 = v19;
    v11[2] = sub_19055B030;
    v11[3] = &unk_1E568F3D8;
    v11[4] = a4;
    sub_1902CDE98(v10, (uint64_t)v11);
  }
}

void *sub_19055A8A0(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCA250;
  if (*(void *)(a1 + 88))
  {
    CFRunLoopTimerInvalidate(*(CFRunLoopTimerRef *)(a1 + 56));
    CFRelease(*(CFTypeRef *)(a1 + 56));
    *(void *)(a1 + 56) = 0;
    if (qword_1E929E9E0 != -1) {
      dispatch_once(&qword_1E929E9E0, &unk_1EDFD2320);
    }
    sub_1902CDE08(qword_1E929E9D0, 0, *(void *)(a1 + 88));
    uint64_t v2 = *(void *)(a1 + 88);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    *(void *)(a1 + 88) = 0;
  }
  if (*(void *)(a1 + 96))
  {
    uint64_t v3 = sub_190488420();
    sub_1902CDE08(v3, 0, *(void *)(a1 + 96));
    uint64_t v4 = *(void *)(a1 + 96);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    *(void *)(a1 + 96) = 0;
  }
  if (*(void *)(a1 + 112))
  {
    uint64_t v5 = sub_1904DE71C();
    sub_1902CDE08(v5, 4, *(void *)(a1 + 112));
    uint64_t v6 = *(void *)(a1 + 112);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    *(void *)(a1 + 112) = 0;
  }
  uint64_t v7 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }

  return sub_1904DC240((void *)a1);
}

void sub_19055AA70(uint64_t a1)
{
  sub_19055A8A0(a1);

  JUMPOUT(0x192FCC980);
}

double sub_19055AAA8(uint64_t a1, int a2, double *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  double result = 0.0;
  if (!a2)
  {
    double v5 = *a3;
    if (*a3 <= 0.0)
    {
      *(unsigned char *)(a1 + 28) = 0;
      (*(void (**)(uint64_t, double))(*(void *)a1 + 56))(a1, v5);
      objc_msgSend_unregister_forNotification_(*(void **)(*(void *)(a1 + 40) + 16), v7, *(void *)(*(void *)(a1 + 40) + 8), 0);
      *(unsigned char *)(a1 + 48) = 0;
    }
    else
    {
      if (qword_1E929E9E0 != -1) {
        dispatch_once(&qword_1E929E9E0, &unk_1EDFD2320);
      }
      if (!*(void *)(a1 + 88))
      {
        context.version = 0;
        context.info = (void *)a1;
        memset(&context.retain, 0, 24);
        CFRunLoopTimerRef v6 = CFRunLoopTimerCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1.79769313e308, 1.79769313e308, 0, 0, (CFRunLoopTimerCallBack)sub_19055ADA8, &context);
        *(void *)(a1 + 56) = v6;
        if (v6)
        {
          sub_1902D6BD0();
          CFRunLoopAddTimer(*(CFRunLoopRef *)qword_1EB3BF828, *(CFRunLoopTimerRef *)(a1 + 56), (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
        }
        else
        {
          if (qword_1E929D798 != -1) {
            dispatch_once(&qword_1E929D798, &unk_1EDFD3320);
          }
          uint64_t v8 = qword_1E929D790;
          if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_FAULT, "Could not create timer", buf, 2u);
          }
          if (sub_1902D8400(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929D798 != -1) {
              dispatch_once(&qword_1E929D798, &unk_1EDFD3320);
            }
            long long v9 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 0, "virtual CFTimeInterval CLCompass::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v9);
            if (v9 != (char *)buf) {
              free(v9);
            }
          }
        }
        if (qword_1E929E9E0 != -1) {
          dispatch_once(&qword_1E929E9E0, &unk_1EDFD2320);
        }
        *(double *)(a1 + 72) = (*(double (**)(uint64_t))(*(void *)qword_1E929E9D0 + 56))(qword_1E929E9D0);
      }
      *(unsigned char *)(a1 + 48) = 1;
      if (!*(unsigned char *)(a1 + 64)) {
        sub_19055ADDC(a1);
      }
    }
    return *(double *)(a1 + 32);
  }
  return result;
}

uint64_t sub_19055ADA8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 48)) {
    uint64_t result = sub_19055ADDC(a2);
  }
  *(unsigned char *)(a2 + 64) = 0;
  return result;
}

uint64_t sub_19055ADDC(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 83)) {
    BOOL v2 = *(unsigned char *)(a1 + 84) != 0;
  }
  else {
    BOOL v2 = *(double *)(a1 + 72) > 0.0 && CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 72) < 432000.0;
  }
  if (qword_1E929D798 != -1) {
    dispatch_once(&qword_1E929D798, &unk_1EDFD3320);
  }
  uint64_t v3 = qword_1E929D790;
  if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *(unsigned __int8 *)(a1 + 83);
    *(_DWORD *)uint64_t buf = 67109376;
    BOOL v9 = v2;
    __int16 v10 = 1024;
    int v11 = v4;
    _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEBUG, "Cover attached,%d,forced,%d", buf, 0xEu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD3320);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLCompass::startCompass()", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  objc_msgSend_register_forNotification_registrationInfo_(*(void **)(*(void *)(a1 + 40) + 16), v5, *(void *)(*(void *)(a1 + 40) + 8), 0, 0);
  return (*(uint64_t (**)(uint64_t, BOOL))(*(void *)a1 + 48))(a1, v2);
}

uint64_t sub_19055B030(uint64_t a1)
{
  BOOL v2 = *(unsigned char **)(a1 + 32);
  if (*(double *)(a1 + 96) > 0.0) {
    v2[28] = 1;
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)v2 + 72))(v2, a1 + 40);
}

uint64_t sub_19055B074()
{
  if (qword_1E929E9E0 != -1) {
    dispatch_once(&qword_1E929E9E0, &unk_1EDFD2320);
  }
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)qword_1E929E9D0 + 48);

  return v0();
}

os_log_t sub_19055B10C()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Compass");
  qword_1E929D790 = (uint64_t)result;
  return result;
}

uint64_t sub_19055B764(uint64_t a1, const char *a2, uint64_t a3)
{
  if (objc_msgSend_walking(*(void **)(a1 + 32), a2, a3))
  {
    CFRunLoopTimerRef v6 = *(void **)(a1 + 40);
    uint64_t v7 = objc_msgSend_endDate(*(void **)(a1 + 32), v4, v5);
    uint64_t started = objc_msgSend_startDate(*(void **)(a1 + 32), v8, v9);
    objc_msgSend_timeIntervalSinceDate_(v7, v11, started);
    double v13 = v12;
    objc_msgSend_trueWalkInBout(v6, v14, v15);
    double v19 = v13 + v18;
    return objc_msgSend_setTrueWalkInBout_(v6, v16, v17, v19);
  }
  else
  {
    int v21 = objc_msgSend_running(*(void **)(a1 + 32), v4, v5);
    float32x2_t v24 = *(void **)(a1 + 40);
    if (v21)
    {
      int v25 = objc_msgSend_endDate(*(void **)(a1 + 32), v22, v23);
      uint64_t v28 = objc_msgSend_startDate(*(void **)(a1 + 32), v26, v27);
      objc_msgSend_timeIntervalSinceDate_(v25, v29, v28);
      double v31 = v30;
      objc_msgSend_trueRunInBout(v24, v32, v33);
      double v37 = v31 + v36;
      double v38 = v24;
    }
    else
    {
      objc_msgSend_setTrueWalkInBout_(*(void **)(a1 + 40), v22, v23, 0.0);
      double v38 = *(void **)(a1 + 40);
      double v37 = 0.0;
    }
    return objc_msgSend_setTrueRunInBout_(v38, v34, v35, v37);
  }
}

uint64_t sub_19055B864(uint64_t a1, const char *a2, uint64_t a3)
{
  Object = objc_msgSend_lastObject(*(void **)(a1 + 32), a2, a3);
  uint64_t result = objc_msgSend_isSameStateAs_(Object, v5, *(void *)(a1 + 40));
  if (result)
  {
    uint64_t result = objc_msgSend_isTimeFromActivity_toActivity_withinLimitForAttribute_(CMMotionActivityFiltering, v7, (uint64_t)Object, *(void *)(a1 + 40), *(void *)(a1 + 64));
    if (result)
    {
      __int16 v10 = objc_msgSend_endDate(*(void **)(a1 + 40), v8, v9);
      objc_msgSend_timeIntervalSinceReferenceDate(v10, v11, v12);
      objc_msgSend_setEndTime_(Object, v13, v14);
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
      if ((objc_msgSend_walking(*(void **)(a1 + 40), v15, v16) & 1) == 0
        && !objc_msgSend_running(*(void **)(a1 + 40), v17, v18))
      {
        return 1;
      }
      objc_msgSend_trueRunInBout(*(void **)(a1 + 48), v17, v18);
      double v20 = v19;
      objc_msgSend_trueWalkInBout(*(void **)(a1 + 48), v21, v22);
      double v24 = v23;
      objc_msgSend_trueRunInBout(*(void **)(a1 + 48), v25, v26);
      double v28 = v20 / (v24 + v27);
      objc_msgSend_trueWalkInBout(*(void **)(a1 + 48), v29, v30);
      double v32 = v31;
      objc_msgSend_trueRunInBout(*(void **)(a1 + 48), v33, v34);
      if (v28 <= dbl_19060C1E0[v32 + v37 >= 3600.0])
      {
        double v38 = (_DWORD *)objc_msgSend_motionActivity(Object, v35, v36);
        if (v28 >= 0.1)
        {
          *double v38 = 8;
          uint64_t v40 = 1;
          goto LABEL_11;
        }
        uint64_t v40 = 0;
        int v41 = 4;
      }
      else
      {
        double v38 = (_DWORD *)objc_msgSend_motionActivity(Object, v35, v36);
        uint64_t v40 = 0;
        int v41 = 8;
      }
      *double v38 = v41;
LABEL_11:
      objc_msgSend_setIsRunWalk_(Object, v39, v40);
      return 1;
    }
  }
  return result;
}

void sub_19055B9D0()
{
}

void sub_19055BA44(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x10F1C40BE01E9BALL);
  _Unwind_Resume(a1);
}

void *sub_19055BA68(void *a1)
{
  *a1 = &unk_1EDFC9230;
  sub_19055BB10((uint64_t)a1, 0, 0);
  BOOL v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_1902D8B58(v2);
  }

  return sub_1904DC240(a1);
}

void sub_19055BAD8(void *a1)
{
  sub_19055BA68(a1);

  JUMPOUT(0x192FCC980);
}

void sub_19055BB10(uint64_t a1, int a2, uint64_t a3)
{
  if (!a2)
  {
    uint64_t v16 = v3;
    uint64_t v17 = v4;
    uint64_t v7 = *(void *)(a1 + 32);
    if (v7)
    {
      if (a3)
      {
LABEL_4:
        uint64_t v8 = sub_19055BBD0;
        uint64_t v9 = a1;
LABEL_10:
        sub_1902CD864(v7, (uint64_t)v8, v9);
        return;
      }
    }
    else
    {
      __int16 v10 = (void *)sub_1902DF4A8();
      uint64_t v13 = 0x80000FF00;
      char v14 = 0;
      sub_19043791C(v10, (uint64_t)&v13, (uint64_t *)&v15);
      long long v11 = v15;
      long long v15 = 0uLL;
      uint64_t v12 = *(std::__shared_weak_count **)(a1 + 40);
      *(_OWORD *)(a1 + 32) = v11;
      if (v12)
      {
        sub_1902D8B58(v12);
        if (*((void *)&v15 + 1)) {
          sub_1902D8B58(*((std::__shared_weak_count **)&v15 + 1));
        }
      }
      sub_1905D634C(*(_DWORD **)(a1 + 32), 14);
      uint64_t v7 = *(void *)(a1 + 32);
      if (a3) {
        goto LABEL_4;
      }
    }
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    goto LABEL_10;
  }
}

uint64_t sub_19055BBD0(uint64_t a1)
{
  uint64_t result = IOHIDEventGetType();
  if (result == 14)
  {
    int IntegerValue = IOHIDEventGetIntegerValue();
    unint64_t TimeStamp = IOHIDEventGetTimeStamp();
    double v5 = sub_1902D8D34(TimeStamp);
    int v6 = IntegerValue;
    return sub_1902D8BCC(a1, 0, (uint64_t)&v5, 16);
  }
  return result;
}

void sub_19055BD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FCC980](v15, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_19055BE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19055BE74(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*a2)
  {
    Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
    if (objc_msgSend_objectForKeyedSubscript_(Dictionary, v3, @"CMErrorMessage"))
    {
      double v5 = objc_msgSend_objectForKeyedSubscript_(Dictionary, v4, @"CMErrorMessage");
      int v6 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v9 = objc_msgSend_integerValue(v5, v7, v8);
      uint64_t v11 = objc_msgSend_errorWithDomain_code_userInfo_(v6, v10, @"CMErrorDomain", v9, 0);
      if (qword_1E929D9A8 != -1) {
        dispatch_once(&qword_1E929D9A8, &unk_1EDFD3800);
      }
      uint64_t v12 = qword_1E929D9B0;
      if (os_log_type_enabled((os_log_t)qword_1E929D9B0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 138543362;
        uint64_t v16 = v11;
        _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_ERROR, "Failed with error %{public}@", buf, 0xCu);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D9A8 == -1)
        {
LABEL_17:
          char v14 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 0, "-[CMContextConfigurationManager connect]_block_invoke", "CoreLocation: %s\n", v14);
          if (v14 != (char *)buf) {
            free(v14);
          }
          return;
        }
LABEL_19:
        dispatch_once(&qword_1E929D9A8, &unk_1EDFD3800);
        goto LABEL_17;
      }
    }
  }
  else
  {
    if (qword_1E929D9A8 != -1) {
      dispatch_once(&qword_1E929D9A8, &unk_1EDFD3800);
    }
    uint64_t v13 = qword_1E929D9B0;
    if (os_log_type_enabled((os_log_t)qword_1E929D9B0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v13, OS_LOG_TYPE_ERROR, "Failed with unknown internal error.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D9A8 == -1) {
        goto LABEL_17;
      }
      goto LABEL_19;
    }
  }
}

void sub_19055C154(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  Weaunint64_t k = objc_loadWeak((id *)(a1 + 32));
  uint64_t v2 = getpid();
  uint64_t ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2);
  if (ExecutablePathFromPid)
  {
    double v5 = (void *)ExecutablePathFromPid;
    if (qword_1E929D9A8 != -1) {
      dispatch_once(&qword_1E929D9A8, &unk_1EDFD3800);
    }
    int v6 = qword_1E929D9B0;
    if (os_log_type_enabled((os_log_t)qword_1E929D9B0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 136446722;
      uint64_t v13 = objc_msgSend_UTF8String(v5, v7, v8);
      __int16 v14 = 1026;
      pid_t v15 = getpid();
      __int16 v16 = 2050;
      id v17 = Weak;
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_INFO, "Client connection interrupt, %{public}s, %{public}d, %{public}p", buf, 0x1Cu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D9A8 != -1) {
        dispatch_once(&qword_1E929D9A8, &unk_1EDFD3800);
      }
      objc_msgSend_UTF8String(v5, v9, v10);
      getpid();
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMContextConfigurationManager connect]_block_invoke", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

void sub_19055C6C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a18) {
    sub_1902D8B58(a18);
  }
  if (a24) {
    sub_1902D8B58(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19055C6EC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (!*a2 || (Dictionary = (void *)CLConnectionMessage::getDictionary(*a2)) == 0)
  {
    if (qword_1E929D9A8 != -1) {
      dispatch_once(&qword_1E929D9A8, &unk_1EDFD3800);
    }
    __int16 v16 = qword_1E929D9B0;
    if (os_log_type_enabled((os_log_t)qword_1E929D9B0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v16, OS_LOG_TYPE_ERROR, "Unable to parse response.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D9A8 != -1) {
        dispatch_once(&qword_1E929D9A8, &unk_1EDFD3800);
      }
      double v28 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMContextConfigurationManager writeContextConfiguration:withHandler:]_block_invoke", "CoreLocation: %s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    uint64_t v18 = *(void *)(a1 + 32);
    objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v17, @"CMErrorDomain", 103, 0);
    pid_t v15 = *(uint64_t (**)(void))(v18 + 16);
    return v15();
  }
  double v5 = Dictionary;
  uint64_t v6 = objc_msgSend_objectForKeyedSubscript_(Dictionary, v4, @"CMErrorMessage");
  if (v6)
  {
    uint64_t v8 = (void *)v6;
    if (qword_1E929D9A8 != -1) {
      dispatch_once(&qword_1E929D9A8, &unk_1EDFD3800);
    }
    uint64_t v9 = qword_1E929D9B0;
    if (os_log_type_enabled((os_log_t)qword_1E929D9B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v37 = (uint64_t)v8;
      _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_DEFAULT, "Error in writeContextConfiguration: %@", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D9A8 != -1) {
        dispatch_once(&qword_1E929D9A8, &unk_1EDFD3800);
      }
      long long v29 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMContextConfigurationManager writeContextConfiguration:withHandler:]_block_invoke", "CoreLocation: %s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
    uint64_t v12 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v13 = (int)objc_msgSend_intValue(v8, v10, v11);
    objc_msgSend_errorWithDomain_code_userInfo_(v12, v14, @"CMErrorDomain", v13, 0);
LABEL_10:
    pid_t v15 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
    return v15();
  }
  if (!objc_msgSend_objectForKeyedSubscript_(v5, v7, @"CMReturnCode"))
  {
    if (qword_1E929D9A8 != -1) {
      dispatch_once(&qword_1E929D9A8, &unk_1EDFD3800);
    }
    int v21 = qword_1E929D9B0;
    if (os_log_type_enabled((os_log_t)qword_1E929D9B0, OS_LOG_TYPE_DEFAULT))
    {
      double v24 = objc_msgSend_description(v5, v22, v23);
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v37 = objc_msgSend_UTF8String(v24, v25, v26);
      _os_log_impl(&dword_1902AF000, v21, OS_LOG_TYPE_DEFAULT, "Unable to parse message (%{public}s) for query response", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D9A8 != -1) {
        dispatch_once(&qword_1E929D9A8, &unk_1EDFD3800);
      }
      double v32 = objc_msgSend_description(v5, v30, v31);
      objc_msgSend_UTF8String(v32, v33, v34);
      uint64_t v35 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMContextConfigurationManager writeContextConfiguration:withHandler:]_block_invoke", "CoreLocation: %s\n", v35);
      if (v35 != (char *)buf) {
        free(v35);
      }
    }
    objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v27, @"CMErrorDomain", 103, 0);
    goto LABEL_10;
  }
  double v20 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v20();
}

os_log_t sub_19055CC58()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "ContextConfiguration");
  qword_1E929D9B0 = (uint64_t)result;
  return result;
}

void sub_19055D970(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 104))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v2 + 16058))
    {
      sub_1904F90EC(v2);
      if ((*(_DWORD *)(a1 + 112) | 2) == 3)
      {
        uint64_t v3 = *(_DWORD **)(a1 + 32);
        if (v3)
        {
          v3[552] = 0;
          v3[682] = 0;
          v3[812] = 0;
          v3[942] = 0;
          v3[1502] = 0;
          v3[1632] = 0;
          v3[1762] = 0;
          v3[1458] = 0;
          v3[1892] = 0;
        }
        else
        {
          uint64_t v4 = *(char **)(a1 + 40);
          if (v4) {
            sub_1904490E0(v4);
          }
        }
        uint64_t v5 = *(void *)(a1 + 96);
        if (v5 && *(_DWORD *)(a1 + 108) != 4) {
          sub_1905EC3A8(v5, 4, (uint64_t)buf);
        }
        *(unsigned char *)(a1 + 72) = 0;
        *(void *)(a1 + 56) = 0;
        *(unsigned char *)(a1 + 48) = 0;
      }
      *(_DWORD *)(a1 + 112) = 0;
      *(unsigned char *)(a1 + 88) = 0;
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
      }
      uint64_t v6 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v7 = *(_DWORD *)(a1 + 108) - 1;
        if (v7 > 5) {
          uint64_t v8 = "kUnknown";
        }
        else {
          uint64_t v8 = off_1E568FA58[v7];
        }
        *(_DWORD *)uint64_t buf = 136315138;
        uint64_t v11 = v8;
        _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_DEFAULT, "[CMHeadTrackingController] FSM state: tracking re-enabled from route %s", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
        }
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::enable(const T *) [T = CMHeadTrackingController::EUserInteractedWithDevice]", "CoreLocation: %s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
    }
  }
}

void sub_19055DC08(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 104))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v2 + 16058))
    {
      sub_1904F90EC(v2);
      if ((*(_DWORD *)(a1 + 112) | 2) == 3)
      {
        uint64_t v3 = *(_DWORD **)(a1 + 32);
        if (v3)
        {
          v3[552] = 0;
          v3[682] = 0;
          v3[812] = 0;
          v3[942] = 0;
          v3[1502] = 0;
          v3[1632] = 0;
          v3[1762] = 0;
          v3[1458] = 0;
          v3[1892] = 0;
        }
        else
        {
          uint64_t v4 = *(char **)(a1 + 40);
          if (v4) {
            sub_1904490E0(v4);
          }
        }
        uint64_t v5 = *(void *)(a1 + 96);
        if (v5 && *(_DWORD *)(a1 + 108) != 4) {
          sub_1905EC3A8(v5, 4, (uint64_t)buf);
        }
        *(unsigned char *)(a1 + 72) = 0;
        *(void *)(a1 + 56) = 0;
        *(unsigned char *)(a1 + 48) = 0;
      }
      *(_DWORD *)(a1 + 112) = 0;
      *(unsigned char *)(a1 + 88) = 0;
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
      }
      uint64_t v6 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v7 = *(_DWORD *)(a1 + 108) - 1;
        if (v7 > 5) {
          uint64_t v8 = "kUnknown";
        }
        else {
          uint64_t v8 = off_1E568FA58[v7];
        }
        *(_DWORD *)uint64_t buf = 136315138;
        uint64_t v11 = v8;
        _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_DEFAULT, "[CMHeadTrackingController] FSM state: tracking re-enabled from route %s", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
        }
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::enable(const T *) [T = CMHeadTrackingController::ESrcMoved]", "CoreLocation: %s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
    }
  }
}

void sub_19055DEA0(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 104))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v2 + 16058))
    {
      sub_1904F90EC(v2);
      if ((*(_DWORD *)(a1 + 112) | 2) == 3)
      {
        uint64_t v3 = *(_DWORD **)(a1 + 32);
        if (v3)
        {
          v3[552] = 0;
          v3[682] = 0;
          v3[812] = 0;
          v3[942] = 0;
          v3[1502] = 0;
          v3[1632] = 0;
          v3[1762] = 0;
          v3[1458] = 0;
          v3[1892] = 0;
        }
        else
        {
          uint64_t v4 = *(char **)(a1 + 40);
          if (v4) {
            sub_1904490E0(v4);
          }
        }
        uint64_t v5 = *(void *)(a1 + 96);
        if (v5 && *(_DWORD *)(a1 + 108) != 4) {
          sub_1905EC3A8(v5, 4, (uint64_t)buf);
        }
        *(unsigned char *)(a1 + 72) = 0;
        *(void *)(a1 + 56) = 0;
        *(unsigned char *)(a1 + 48) = 0;
      }
      *(_DWORD *)(a1 + 112) = 0;
      *(unsigned char *)(a1 + 88) = 0;
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
      }
      uint64_t v6 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v7 = *(_DWORD *)(a1 + 108) - 1;
        if (v7 > 5) {
          uint64_t v8 = "kUnknown";
        }
        else {
          uint64_t v8 = off_1E568FA58[v7];
        }
        *(_DWORD *)uint64_t buf = 136315138;
        uint64_t v11 = v8;
        _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_DEFAULT, "[CMHeadTrackingController] FSM state: tracking re-enabled from route %s", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
        }
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::enable(const T *) [T = CMHeadTrackingController::EAuxHasBeenStatic]", "CoreLocation: %s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
    }
  }
}

void sub_19055E138(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 104))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v2 + 16058))
    {
      sub_1904F90EC(v2);
      if ((*(_DWORD *)(a1 + 112) | 2) == 3)
      {
        uint64_t v3 = *(_DWORD **)(a1 + 32);
        if (v3)
        {
          v3[552] = 0;
          v3[682] = 0;
          v3[812] = 0;
          v3[942] = 0;
          v3[1502] = 0;
          v3[1632] = 0;
          v3[1762] = 0;
          v3[1458] = 0;
          v3[1892] = 0;
        }
        else
        {
          uint64_t v4 = *(char **)(a1 + 40);
          if (v4) {
            sub_1904490E0(v4);
          }
        }
        uint64_t v5 = *(void *)(a1 + 96);
        if (v5 && *(_DWORD *)(a1 + 108) != 4) {
          sub_1905EC3A8(v5, 4, (uint64_t)buf);
        }
        *(unsigned char *)(a1 + 72) = 0;
        *(void *)(a1 + 56) = 0;
        *(unsigned char *)(a1 + 48) = 0;
      }
      *(_DWORD *)(a1 + 112) = 0;
      *(unsigned char *)(a1 + 88) = 0;
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
      }
      uint64_t v6 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v7 = *(_DWORD *)(a1 + 108) - 1;
        if (v7 > 5) {
          uint64_t v8 = "kUnknown";
        }
        else {
          uint64_t v8 = off_1E568FA58[v7];
        }
        *(_DWORD *)uint64_t buf = 136315138;
        uint64_t v11 = v8;
        _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_DEFAULT, "[CMHeadTrackingController] FSM state: tracking re-enabled from route %s", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
        }
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::enable(const T *) [T = CMHeadTrackingController::EStandToSit]", "CoreLocation: %s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
    }
  }
}

void sub_19055E3D0(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 104))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v2 + 16058))
    {
      sub_1904F90EC(v2);
      if ((*(_DWORD *)(a1 + 112) | 2) == 3)
      {
        uint64_t v3 = *(_DWORD **)(a1 + 32);
        if (v3)
        {
          v3[552] = 0;
          v3[682] = 0;
          v3[812] = 0;
          v3[942] = 0;
          v3[1502] = 0;
          v3[1632] = 0;
          v3[1762] = 0;
          v3[1458] = 0;
          v3[1892] = 0;
        }
        else
        {
          uint64_t v4 = *(char **)(a1 + 40);
          if (v4) {
            sub_1904490E0(v4);
          }
        }
        uint64_t v5 = *(void *)(a1 + 96);
        if (v5 && *(_DWORD *)(a1 + 108) != 4) {
          sub_1905EC3A8(v5, 4, (uint64_t)buf);
        }
        *(unsigned char *)(a1 + 72) = 0;
        *(void *)(a1 + 56) = 0;
        *(unsigned char *)(a1 + 48) = 0;
      }
      *(_DWORD *)(a1 + 112) = 0;
      *(unsigned char *)(a1 + 88) = 0;
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
      }
      uint64_t v6 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v7 = *(_DWORD *)(a1 + 108) - 1;
        if (v7 > 5) {
          uint64_t v8 = "kUnknown";
        }
        else {
          uint64_t v8 = off_1E568FA58[v7];
        }
        *(_DWORD *)uint64_t buf = 136315138;
        uint64_t v11 = v8;
        _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_DEFAULT, "[CMHeadTrackingController] FSM state: tracking re-enabled from route %s", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
        }
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::enable(const T *) [T = CMHeadTrackingController::EJBLBackBelowLimit]", "CoreLocation: %s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
    }
  }
}

void sub_19055E668(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 104))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v2 + 16058))
    {
      sub_1904F90EC(v2);
      if ((*(_DWORD *)(a1 + 112) | 2) == 3)
      {
        uint64_t v3 = *(_DWORD **)(a1 + 32);
        if (v3)
        {
          v3[552] = 0;
          v3[682] = 0;
          v3[812] = 0;
          v3[942] = 0;
          v3[1502] = 0;
          v3[1632] = 0;
          v3[1762] = 0;
          v3[1458] = 0;
          v3[1892] = 0;
        }
        else
        {
          uint64_t v4 = *(char **)(a1 + 40);
          if (v4) {
            sub_1904490E0(v4);
          }
        }
        uint64_t v5 = *(void *)(a1 + 96);
        if (v5 && *(_DWORD *)(a1 + 108) != 4) {
          sub_1905EC3A8(v5, 4, (uint64_t)buf);
        }
        *(unsigned char *)(a1 + 72) = 0;
        *(void *)(a1 + 56) = 0;
        *(unsigned char *)(a1 + 48) = 0;
      }
      *(_DWORD *)(a1 + 112) = 0;
      *(unsigned char *)(a1 + 88) = 0;
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
      }
      uint64_t v6 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v7 = *(_DWORD *)(a1 + 108) - 1;
        if (v7 > 5) {
          uint64_t v8 = "kUnknown";
        }
        else {
          uint64_t v8 = off_1E568FA58[v7];
        }
        *(_DWORD *)uint64_t buf = 136315138;
        uint64_t v11 = v8;
        _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_DEFAULT, "[CMHeadTrackingController] FSM state: tracking re-enabled from route %s", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
        }
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::enable(const T *) [T = CMHeadTrackingController::EDetectedFace]", "CoreLocation: %s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
    }
  }
}

double sub_19055E900(uint64_t a1, void *a2, double result)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 104))
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (!*(unsigned char *)(v4 + 16058) && (!*(unsigned char *)(a1 + 89) || (*(_DWORD *)(a1 + 112) | 2) != 3))
    {
      sub_1904F8F44(v4);
      *(_DWORD *)(a1 + 108) = 0;
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
      }
      uint64_t v6 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v7 = *(_DWORD *)(a1 + 112) - 1;
        if (v7 > 3) {
          uint64_t v8 = "kUnknown";
        }
        else {
          uint64_t v8 = off_1E568FA88[v7];
        }
        *(_DWORD *)uint64_t buf = 136315138;
        double v17 = *(double *)&v8;
        _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_DEFAULT, "[CMHeadTrackingController] FSM state: tracking disabled from route %s", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
        }
        __int16 v14 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::disable(const T *) [T = CMHeadTrackingController::EWalking]", "CoreLocation: %s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      if (*(void *)(a1 + 56) && *(_DWORD *)(a1 + 112) == 3)
      {
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
        }
        uint64_t v9 = qword_1E929D8E0;
        if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
        {
          double v10 = (double)(unint64_t)(*a2 - *(void *)(a1 + 56)) * 0.000001;
          *(_DWORD *)uint64_t buf = 134217984;
          double v17 = v10;
          _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_DEBUG, "[CMHeadTrackingController] Time between stand and disable: %f seconds", buf, 0xCu);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D8D8 != -1) {
            dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
          }
          pid_t v15 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::disable(const T *) [T = CMHeadTrackingController::EWalking]", "CoreLocation: %s\n", v15);
          if (v15 != (char *)buf) {
            free(v15);
          }
        }
        double v11 = (double)(unint64_t)(*a2 - *(void *)(a1 + 56)) * 0.000001;
        double v13 = *(double *)(a1 + 264);
        double v12 = *(double *)(a1 + 272);
        if (v12 <= v11) {
          double v12 = (double)(unint64_t)(*a2 - *(void *)(a1 + 56)) * 0.000001;
        }
        if (v13 >= v11) {
          double v13 = (double)(unint64_t)(*a2 - *(void *)(a1 + 56)) * 0.000001;
        }
        *(double *)(a1 + 264) = v13;
        *(double *)(a1 + 272) = v12;
        os_log_t result = v11 + *(double *)(a1 + 280);
        *(double *)(a1 + 280) = result;
        ++*(_DWORD *)(a1 + 288);
      }
    }
  }
  return result;
}

double sub_19055ED10(uint64_t a1, void *a2, double result)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 104))
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (!*(unsigned char *)(v4 + 16058) && (!*(unsigned char *)(a1 + 89) || (*(_DWORD *)(a1 + 112) | 2) != 3))
    {
      sub_1904F8F44(v4);
      *(_DWORD *)(a1 + 108) = 0;
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
      }
      uint64_t v6 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v7 = *(_DWORD *)(a1 + 112) - 1;
        if (v7 > 3) {
          uint64_t v8 = "kUnknown";
        }
        else {
          uint64_t v8 = off_1E568FA88[v7];
        }
        *(_DWORD *)uint64_t buf = 136315138;
        double v17 = *(double *)&v8;
        _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_DEFAULT, "[CMHeadTrackingController] FSM state: tracking disabled from route %s", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
        }
        __int16 v14 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::disable(const T *) [T = CMHeadTrackingController::EJBLExceededLimit]", "CoreLocation: %s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      if (*(void *)(a1 + 56) && *(_DWORD *)(a1 + 112) == 3)
      {
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
        }
        uint64_t v9 = qword_1E929D8E0;
        if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
        {
          double v10 = (double)(unint64_t)(*a2 - *(void *)(a1 + 56)) * 0.000001;
          *(_DWORD *)uint64_t buf = 134217984;
          double v17 = v10;
          _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_DEBUG, "[CMHeadTrackingController] Time between stand and disable: %f seconds", buf, 0xCu);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D8D8 != -1) {
            dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
          }
          pid_t v15 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::disable(const T *) [T = CMHeadTrackingController::EJBLExceededLimit]", "CoreLocation: %s\n", v15);
          if (v15 != (char *)buf) {
            free(v15);
          }
        }
        double v11 = (double)(unint64_t)(*a2 - *(void *)(a1 + 56)) * 0.000001;
        double v13 = *(double *)(a1 + 264);
        double v12 = *(double *)(a1 + 272);
        if (v12 <= v11) {
          double v12 = (double)(unint64_t)(*a2 - *(void *)(a1 + 56)) * 0.000001;
        }
        if (v13 >= v11) {
          double v13 = (double)(unint64_t)(*a2 - *(void *)(a1 + 56)) * 0.000001;
        }
        *(double *)(a1 + 264) = v13;
        *(double *)(a1 + 272) = v12;
        os_log_t result = v11 + *(double *)(a1 + 280);
        *(double *)(a1 + 280) = result;
        ++*(_DWORD *)(a1 + 288);
      }
    }
  }
  return result;
}

double sub_19055F120(uint64_t a1, void *a2, double result)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 104))
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (!*(unsigned char *)(v4 + 16058) && (!*(unsigned char *)(a1 + 89) || (*(_DWORD *)(a1 + 112) | 2) != 3))
    {
      sub_1904F8F44(v4);
      *(_DWORD *)(a1 + 108) = 0;
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
      }
      uint64_t v6 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v7 = *(_DWORD *)(a1 + 112) - 1;
        if (v7 > 3) {
          uint64_t v8 = "kUnknown";
        }
        else {
          uint64_t v8 = off_1E568FA88[v7];
        }
        *(_DWORD *)uint64_t buf = 136315138;
        double v17 = *(double *)&v8;
        _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_DEFAULT, "[CMHeadTrackingController] FSM state: tracking disabled from route %s", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
        }
        __int16 v14 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::disable(const T *) [T = CMHeadTrackingController::EInVehicle]", "CoreLocation: %s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      if (*(void *)(a1 + 56) && *(_DWORD *)(a1 + 112) == 3)
      {
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
        }
        uint64_t v9 = qword_1E929D8E0;
        if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
        {
          double v10 = (double)(unint64_t)(*a2 - *(void *)(a1 + 56)) * 0.000001;
          *(_DWORD *)uint64_t buf = 134217984;
          double v17 = v10;
          _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_DEBUG, "[CMHeadTrackingController] Time between stand and disable: %f seconds", buf, 0xCu);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D8D8 != -1) {
            dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
          }
          pid_t v15 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::disable(const T *) [T = CMHeadTrackingController::EInVehicle]", "CoreLocation: %s\n", v15);
          if (v15 != (char *)buf) {
            free(v15);
          }
        }
        double v11 = (double)(unint64_t)(*a2 - *(void *)(a1 + 56)) * 0.000001;
        double v13 = *(double *)(a1 + 264);
        double v12 = *(double *)(a1 + 272);
        if (v12 <= v11) {
          double v12 = (double)(unint64_t)(*a2 - *(void *)(a1 + 56)) * 0.000001;
        }
        if (v13 >= v11) {
          double v13 = (double)(unint64_t)(*a2 - *(void *)(a1 + 56)) * 0.000001;
        }
        *(double *)(a1 + 264) = v13;
        *(double *)(a1 + 272) = v12;
        os_log_t result = v11 + *(double *)(a1 + 280);
        *(double *)(a1 + 280) = result;
        ++*(_DWORD *)(a1 + 288);
      }
    }
  }
  return result;
}

uint64_t sub_19055F530(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  *(void *)os_log_t result = &unk_1EDFC3BC8;
  *(void *)(result + 8) = 9;
  *(_WORD *)(result + 16) = 512;
  *(void *)(result + 24) = a2;
  *(void *)(result + 32) = a3;
  *(void *)(result + 40) = a4;
  *(unsigned char *)(result + 48) = 0;
  *(void *)(result + 80) = 0;
  *(_WORD *)(result + 88) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = 0;
  *(_WORD *)(result + 72) = 0;
  *(unsigned char *)(result + 90) = 1;
  *(void *)(result + 96) = a5;
  *(unsigned char *)(result + 104) = a6;
  *(_DWORD *)(result + 108) = 0;
  *(_DWORD *)(result + 112) = 0;
  *(void *)(result + 120) = 0;
  *(void *)(result + 128) = 0;
  *(_OWORD *)(result + 136) = xmmword_190607210;
  *(void *)(result + 152) = 0;
  *(_DWORD *)(result + 160) = 0;
  *(_OWORD *)(result + 168) = xmmword_190607210;
  *(void *)(result + 184) = 0;
  *(_DWORD *)(result + 192) = 0;
  *(_OWORD *)(result + 200) = xmmword_190607210;
  *(void *)(result + 216) = 0;
  *(_DWORD *)(result + 224) = 0;
  *(_OWORD *)(result + 232) = xmmword_190607210;
  *(void *)(result + 248) = 0;
  *(_DWORD *)(result + 256) = 0;
  *(void *)(result + 264) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(result + 272) = xmmword_19060C220;
  *(_DWORD *)(result + 288) = 0;
  *(void *)(result + 296) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(result + 304) = xmmword_19060C220;
  *(_DWORD *)(result + 320) = 0;
  *(void *)(result + 328) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(result + 336) = xmmword_19060C220;
  *(_DWORD *)(result + 352) = 0;
  *(void *)(result + 360) = 0x7FF8000000000000;
  *(void *)(result + 368) = 0x404E000000000000;
  *(_OWORD *)(result + 376) = xmmword_19060C230;
  if (a5)
  {
    if (a6)
    {
      *(void *)(a5 + 10912) = sub_19055F620;
      *(void *)(a5 + 10920) = result;
    }
  }
  return result;
}

void sub_19055F620(int a1, unint64_t a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a1 == 2)
  {
    uint64_t v11 = *(void *)(a3 + 24);
    if (*(unsigned char *)(v11 + 16058))
    {
      if (*(_DWORD *)(a3 + 112) != 2 || *(unsigned char *)(a3 + 88))
      {
        *(_DWORD *)(a3 + 108) = 4;
        *(void *)(a3 + 64) = a2;
        *(void *)uint64_t buf = a2;
        sub_1905EC3A8(a3, 7, (uint64_t)buf);
      }
    }
    else
    {
      if (*(unsigned char *)(a3 + 73)) {
        sub_1904F86F0(v11, 1);
      }
      unint64_t v17 = *(void *)(a3 + 56);
      if (v17)
      {
        unint64_t v18 = a2 - v17;
        if (a2 > v17 && v18 <= 0x3D08FF)
        {
          *(void *)(a3 + 80) = a2;
          if (qword_1E929D8D8 != -1) {
            dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
          }
          double v19 = qword_1E929D8E0;
          if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t buf = 134349312;
            *(double *)&uint8_t buf[4] = (float)((float)v18 * 0.000001);
            __int16 v24 = 2050;
            uint64_t v25 = 0x4010000000000000;
            _os_log_impl(&dword_1902AF000, v19, OS_LOG_TYPE_DEFAULT, "[CMHeadTrackingController] Back to back sit-stand transitions. dt, %{public}.3f, windowSize, %{public}.3f", buf, 0x16u);
          }
          if (sub_1902D8400(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929D8D8 != -1) {
              dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
            }
            uint64_t v22 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::sitStandDetectorCallback(TransitionState, uint64_t)", "CoreLocation: %s\n", v22);
            if (v22 != buf) {
              free(v22);
            }
          }
        }
      }
    }
    ++*(_DWORD *)(a3 + 128);
    *(void *)(a3 + 120) = a2;
    if (*(void *)(a3 + 56))
    {
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
      }
      double v12 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
      {
        double v13 = (double)(a2 - *(void *)(a3 + 56)) * 0.000001;
        *(_DWORD *)uint64_t buf = 134217984;
        *(double *)&uint8_t buf[4] = v13;
        _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_DEBUG, "[CMHeadTrackingController] Time between standing and sitting: %f seconds", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
        }
        int v21 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::sitStandDetectorCallback(TransitionState, uint64_t)", "CoreLocation: %s\n", v21);
        if (v21 != buf) {
          free(v21);
        }
      }
      double v14 = (double)(a2 - *(void *)(a3 + 56)) * 0.000001;
      double v16 = *(double *)(a3 + 200);
      double v15 = *(double *)(a3 + 208);
      if (v15 <= v14) {
        double v15 = (double)(a2 - *(void *)(a3 + 56)) * 0.000001;
      }
      if (v16 >= v14) {
        double v16 = (double)(a2 - *(void *)(a3 + 56)) * 0.000001;
      }
      *(double *)(a3 + 200) = v16;
      *(double *)(a3 + 208) = v15;
      *(double *)(a3 + 216) = v14 + *(double *)(a3 + 216);
      double v10 = (_DWORD *)(a3 + 224);
      goto LABEL_31;
    }
  }
  else if (a1 == 1)
  {
    *(unsigned char *)(a3 + 73) = 0;
    *(void *)(a3 + 56) = a2;
    *(void *)(a3 + 64) = 0;
    sub_190501F4C(*(void *)(a3 + 24), a2);
    ++*(_DWORD *)(a3 + 132);
    if (*(void *)(a3 + 120))
    {
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
      }
      uint64_t v5 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
      {
        double v6 = (double)(a2 - *(void *)(a3 + 120)) * 0.000001;
        *(_DWORD *)uint64_t buf = 134217984;
        *(double *)&uint8_t buf[4] = v6;
        _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_DEBUG, "[CMHeadTrackingController] Time between sitting and standing: %f seconds", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
        }
        double v20 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::sitStandDetectorCallback(TransitionState, uint64_t)", "CoreLocation: %s\n", v20);
        if (v20 != buf) {
          free(v20);
        }
      }
      double v7 = (double)(a2 - *(void *)(a3 + 120)) * 0.000001;
      double v9 = *(double *)(a3 + 232);
      double v8 = *(double *)(a3 + 240);
      if (v8 <= v7) {
        double v8 = (double)(a2 - *(void *)(a3 + 120)) * 0.000001;
      }
      if (v9 >= v7) {
        double v9 = (double)(a2 - *(void *)(a3 + 120)) * 0.000001;
      }
      *(double *)(a3 + 232) = v9;
      *(double *)(a3 + 240) = v8;
      *(double *)(a3 + 248) = v7 + *(double *)(a3 + 248);
      double v10 = (_DWORD *)(a3 + 256);
LABEL_31:
      ++*v10;
    }
  }
}

void sub_19055FD68(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 112) != 2 || *(unsigned char *)(a1 + 88))
  {
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
    }
    uint64_t v4 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_INFO, "[CMHeadTrackingController] Received user interacted with device event. timestampUs, %llu", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::feedUserInteractedWithDeviceEvent(uint64_t)", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    *(_DWORD *)(a1 + 108) = 1;
    *(void *)uint64_t buf = a2;
    sub_1905EC3A8(a1, 2, (uint64_t)buf);
  }
}

void sub_19055FF48(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 112) != 2 || *(unsigned char *)(a1 + 88))
  {
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
    }
    uint64_t v4 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_INFO, "[CMHeadTrackingController] Received srcMoved event. timestampUs, %llu", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::feedSrcMovedEvent(uint64_t)", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    *(_DWORD *)(a1 + 108) = 2;
    *(void *)uint64_t buf = a2;
    sub_1905EC3A8(a1, 3, (uint64_t)buf);
  }
}

void sub_190560130(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 112) != 2 || *(unsigned char *)(a1 + 88))
  {
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
    }
    uint64_t v4 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_INFO, "[CMHeadTrackingController] Received auxHasBeenStatic event. timestampUs, %llu", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::feedAuxHasBeenStaticEvent(uint64_t)", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    *(_DWORD *)(a1 + 108) = 3;
    *(void *)uint64_t buf = a2;
    sub_1905EC3A8(a1, 4, (uint64_t)buf);
  }
}

void sub_190560310(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 112) != 2 || *(unsigned char *)(a1 + 88))
  {
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
    }
    uint64_t v4 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_INFO, "[CMHeadTrackingController] Received DetectedFace event. timestampUs, %llu", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::feedDetectedFaceEvent(uint64_t)", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    *(_DWORD *)(a1 + 108) = 6;
    *(void *)uint64_t buf = a2;
    sub_1905EC3A8(a1, 10, (uint64_t)buf);
  }
}

void sub_1905604F0(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (!*(unsigned char *)(*(void *)(a1 + 24) + 16058))
    {
      *(_DWORD *)(a1 + 112) = 2;
      *(void *)uint64_t buf = a3;
      sub_1905EC3A8(a1, 5, (uint64_t)buf);
      double v10 = (double)a3;
      double v11 = *(double *)(a1 + 360);
      if (v11 <= (double)a3)
      {
        if (v10 - v11 > 18000.0)
        {
          *(double *)(a1 + 360) = v10;
          double v11 = (double)a3;
        }
        double v12 = *(double *)(a1 + 368);
        double v13 = v11 + v12;
        if (v13 >= v10)
        {
          int v18 = *(_DWORD *)(a1 + 376) + 1;
        }
        else
        {
          unsigned int v14 = *(_DWORD *)(a1 + 376);
          unsigned int v15 = *(_DWORD *)(a1 + 384);
          unsigned int v16 = *(_DWORD *)(a1 + 388);
          do
          {
            double v17 = v13;
            if (v14 < v15) {
              unsigned int v15 = v14;
            }
            if (v14 > v16) {
              unsigned int v16 = v14;
            }
            double v13 = v12 + v13;
            unsigned int v14 = 0;
          }
          while (v13 < v10);
          *(_DWORD *)(a1 + 384) = v15;
          *(_DWORD *)(a1 + 388) = v16;
          int v18 = 1;
          *(double *)(a1 + 360) = v17;
        }
        *(_DWORD *)(a1 + 376) = v18;
        ++*(_DWORD *)(a1 + 380);
      }
      goto LABEL_51;
    }
    if (*(unsigned char *)(a1 + 88))
    {
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
      }
      uint64_t v5 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_DEFAULT, "[CMHeadTrackingController] JBL back over limit while waiting to re-enable.", buf, 2u);
      }
      if (!sub_1902D8400(115, 2)) {
        goto LABEL_51;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 == -1)
      {
LABEL_46:
        double v20 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::feedBTJitterBufferLatencyEvent(BOOL, uint64_t)", "CoreLocation: %s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
LABEL_51:
        *(unsigned char *)(a1 + 88) = 0;
        return;
      }
    }
    else
    {
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
      }
      double v19 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_1902AF000, v19, OS_LOG_TYPE_DEFAULT, "[CMHeadTrackingController] JBL back over limit received while already not tracking.", buf, 2u);
      }
      if (!sub_1902D8400(115, 2)) {
        goto LABEL_51;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 == -1) {
        goto LABEL_46;
      }
    }
    dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
    goto LABEL_46;
  }
  if (*(unsigned char *)(*(void *)(a1 + 24) + 16058) && *(_DWORD *)(a1 + 112) == 2)
  {
    if (!*(unsigned char *)(a1 + 90))
    {
      *(_DWORD *)(a1 + 108) = 5;
      *(void *)uint64_t buf = a3;
      sub_1905EC3A8(a1, 9, (uint64_t)buf);
      return;
    }
    *(unsigned char *)(a1 + 88) = 1;
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
    }
    double v6 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_DEFAULT, "[CMHeadTrackingController] JBL went under limit, transition to waiting to re-enable.", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 == -1)
      {
LABEL_27:
        double v9 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::feedBTJitterBufferLatencyEvent(BOOL, uint64_t)", "CoreLocation: %s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
        return;
      }
LABEL_53:
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
      goto LABEL_27;
    }
  }
  else
  {
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
    }
    uint64_t v7 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_INFO))
    {
      BOOL v8 = *(unsigned char *)(*(void *)(a1 + 24) + 16058) == 0;
      *(_DWORD *)uint64_t buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 1024;
      BOOL v23 = v8;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_INFO, "[CMHeadTrackingController] Received JBL event but taking no action. exceededThreshold,%d isTrackingEnabled,%d", buf, 0xEu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 == -1) {
        goto LABEL_27;
      }
      goto LABEL_53;
    }
  }
}

void sub_190560AE0(uint64_t a1, int *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a2[2]) {
    return;
  }
  int v3 = *a2;
  char v4 = 1;
  if (*a2 > 51)
  {
    if (v3 != 52 && v3 != 56) {
LABEL_8:
    }
      char v4 = 0;
  }
  else
  {
    if (!v3)
    {
      uint64_t v7 = qword_1E929D8D8;
      goto LABEL_20;
    }
    if (v3 != 5) {
      goto LABEL_8;
    }
  }
  BOOL v5 = (v3 & 0xFFFFFFFE) == 10;
  char v6 = v4 ^ 1;
  uint64_t v7 = qword_1E929D8D8;
  if (v5) {
    char v6 = 0;
  }
  if ((v6 & 1) == 0 && a2[1] > 0)
  {
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
    }
    BOOL v8 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_DEFAULT, "[CMHeadTrackingController] Received high / medium confidence in-vehicle event", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
      }
      double v11 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::feedVehicleState(const CLMotionActivity &)", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    *(_DWORD *)(a1 + 112) = 4;
    *(void *)uint64_t buf = 0;
    sub_1905EC3A8(a1, 8, (uint64_t)buf);
    return;
  }
LABEL_20:
  if (v7 != -1) {
    dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
  }
  double v9 = qword_1E929D8E0;
  if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_DEFAULT, "[CMHeadTrackingController] Received not in-vehicle event", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
    }
    double v10 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::feedVehicleState(const CLMotionActivity &)", "CoreLocation: %s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
}

void sub_190560E24(uint64_t a1, int a2, int a3, int a4, unint64_t a5)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    if (a2)
    {
      uint64_t v10 = *(void *)(a1 + 80);
      if (v10) {
        BOOL v11 = v10 + 3000000 > a5;
      }
      else {
        BOOL v11 = 0;
      }
      if (v11)
      {
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
        }
        unsigned int v15 = qword_1E929D8E0;
        if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
        {
          double v16 = (float)((float)(a5 - *(void *)(a1 + 80)) * 0.000001);
          *(_DWORD *)uint64_t buf = 134349056;
          *(double *)&uint8_t buf[4] = v16;
          _os_log_impl(&dword_1902AF000, v15, OS_LOG_TYPE_DEFAULT, "[CMHeadTrackingController] Discount walk detection after a back to back SS transition. dt, %{public}.3f", buf, 0xCu);
        }
        if (!sub_1902D8400(115, 2)) {
          goto LABEL_24;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 == -1) {
          goto LABEL_113;
        }
        goto LABEL_134;
      }
      uint64_t v12 = *(void *)(a1 + 56);
      if (v12 && v12 + 3000000 > a5)
      {
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
        }
        uint64_t v13 = qword_1E929D8E0;
        if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
        {
          double v14 = (float)((float)(a5 - *(void *)(a1 + 56)) * 0.000001);
          *(_DWORD *)uint64_t buf = 134349056;
          *(double *)&uint8_t buf[4] = v14;
          _os_log_impl(&dword_1902AF000, v13, OS_LOG_TYPE_DEFAULT, "[CMHeadTrackingController] Discount walk detection right after sit->stand transition. dt, %{public}.3f", buf, 0xCu);
        }
        if (!sub_1902D8400(115, 2)) {
          goto LABEL_24;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 == -1) {
          goto LABEL_113;
        }
LABEL_134:
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
LABEL_113:
        v50 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::walkingDetectorCallback(BOOL, BOOL, BOOL, uint64_t)", "CoreLocation: %s\n", v50);
        if (v50 != buf) {
          free(v50);
        }
        goto LABEL_24;
      }
    }
    ++*(unsigned char *)(a1 + 72);
LABEL_24:
    sub_190501D9C(*(void *)(a1 + 24), a5);
    goto LABEL_25;
  }
  if (*(unsigned char *)(a1 + 72)) {
    --*(unsigned char *)(a1 + 72);
  }
LABEL_25:
  uint64_t v17 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v17 + 4) == 1) {
    *(unsigned char *)(v17 + 37448) = a4;
  }
  if (a2 && !*(unsigned char *)(a1 + 73) && *(void *)(a1 + 64))
  {
    uint64_t v18 = *(void *)(a1 + 96);
    if ((a4 & 1) == 0 && !*(unsigned char *)(v18 + 10816)) {
      goto LABEL_55;
    }
    sub_1905EC3A8(v18, 4, (uint64_t)buf);
    *(unsigned char *)(a1 + 73) = 1;
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
    }
    double v19 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v19, OS_LOG_TYPE_DEFAULT, "[CMHeadTrackingController] Likely false re-enable via Stand->Sit detected. Reset SS FSM.", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
      }
      __int16 v54 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::walkingDetectorCallback(BOOL, BOOL, BOOL, uint64_t)", "CoreLocation: %s\n", v54);
      if (v54 != buf) {
        free(v54);
      }
    }
  }
  if (a4)
  {
    uint64_t v20 = *(void *)(a1 + 24);
    if (!*(unsigned char *)(v20 + 16058))
    {
      if (!a3) {
        goto LABEL_48;
      }
      float v21 = sub_19058BBA4(v20 + 5216, a5);
      double v22 = sub_19058C1C0(*(void *)(a1 + 24) + 5216, a5);
      float v23 = 3.0;
      if (!*(void *)(a1 + 40)) {
        float v23 = 5.0;
      }
      if (v21 > v23 && *(float *)&v22 < v23)
      {
LABEL_48:
        if (a2 && *(unsigned __int8 *)(a1 + 72) <= 1u)
        {
          unint64_t v45 = *(void *)(a1 + 56);
          if (!v45) {
            goto LABEL_55;
          }
          unint64_t v46 = a5 - v45;
          if (a5 <= v45) {
            goto LABEL_55;
          }
          if (qword_1E929D8D8 != -1) {
            dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
          }
          long long v47 = qword_1E929D8E0;
          if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t buf = 134217984;
            *(double *)&uint8_t buf[4] = (float)((float)v46 * 0.000001);
            _os_log_impl(&dword_1902AF000, v47, OS_LOG_TYPE_DEBUG, "[CMHeadTrackingController] Sit->Stand %.2f seconds before walking detection", buf, 0xCu);
          }
          if (sub_1902D8400(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929D8D8 != -1) {
              dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
            }
            v55 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::updateDistractedViewingState(BOOL, BOOL, uint64_t)", "CoreLocation: %s\n", v55);
            if (v55 != buf) {
              free(v55);
            }
          }
          if (v46 - 9000000 < 0xFFFFFFFFFF953041) {
            goto LABEL_55;
          }
          *(_DWORD *)(a1 + 112) = 3;
          *(void *)(a1 + 64) = 0;
          if (qword_1E929D8D8 != -1) {
            dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
          }
          long long v48 = qword_1E929D8E0;
          if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t buf = 134217984;
            *(void *)&uint8_t buf[4] = a5;
            _os_log_impl(&dword_1902AF000, v48, OS_LOG_TYPE_DEFAULT, "[CMHeadTrackingController] Distracted viewing from sit->stand + walking event. timestampUs, %llu", buf, 0xCu);
          }
          if (!sub_1902D8400(115, 2))
          {
LABEL_54:
            *(void *)uint64_t buf = a5;
            sub_1905EC3A8(a1, 1, (uint64_t)buf);
            goto LABEL_55;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929D8D8 == -1)
          {
LABEL_124:
            v53 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::feedDistractedViewingEvent(TrackingDisableRoute, uint64_t)", "CoreLocation: %s\n", v53);
            if (v53 != buf) {
              free(v53);
            }
            goto LABEL_54;
          }
        }
        else
        {
          *(_DWORD *)(a1 + 112) = 1;
          *(void *)(a1 + 64) = 0;
          if (qword_1E929D8D8 != -1) {
            dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
          }
          uint64_t v25 = qword_1E929D8E0;
          if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
          {
            int v26 = *(unsigned __int8 *)(a1 + 72);
            *(_DWORD *)uint64_t buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v26;
            *(_WORD *)&uint8_t buf[8] = 2048;
            *(void *)&buf[10] = a5;
            _os_log_impl(&dword_1902AF000, v25, OS_LOG_TYPE_DEFAULT, "[CMHeadTrackingController] Distracted viewing from walking event. numWalking, %d, timestampUs, %llu", buf, 0x12u);
          }
          if (!sub_1902D8400(115, 2)) {
            goto LABEL_54;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929D8D8 == -1) {
            goto LABEL_124;
          }
        }
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
        goto LABEL_124;
      }
    }
  }
LABEL_55:
  if (*(unsigned __int8 *)(a1 + 48) != a4)
  {
    float v27 = sub_19058BBA4(*(void *)(a1 + 24) + 5216, a5);
    double v28 = sub_19058C1C0(*(void *)(a1 + 24) + 5216, a5);
    float v29 = *(float *)&v28;
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
    }
    uint64_t v30 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v31 = "WalkDetector";
      int v32 = *(unsigned __int8 *)(a1 + 48);
      if (!*(void *)(a1 + 32)) {
        uint64_t v31 = "StepDetector";
      }
      *(_DWORD *)uint64_t buf = 136316162;
      *(void *)&uint8_t buf[4] = v31;
      uint64_t v33 = "No Walking";
      *(_WORD *)&unsigned char buf[12] = 2082;
      if (v32) {
        uint64_t v34 = "Walking";
      }
      else {
        uint64_t v34 = "No Walking";
      }
      *(void *)&buf[14] = v34;
      if (a4) {
        uint64_t v33 = "Walking";
      }
      __int16 v57 = 2082;
      uint64_t v58 = v33;
      __int16 v59 = 2050;
      double v60 = v27;
      __int16 v61 = 2050;
      double v62 = v29;
      _os_log_impl(&dword_1902AF000, v30, OS_LOG_TYPE_DEFAULT, "[CMHeadTrackingController] Via %s: Walk Detection changed : From %{public}s -> %{public}s, srcStaticFor, %{public}.2f secs, timeSinceLastSrcFrozen, %{public}.2f secs", buf, 0x34u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
      }
      long long v49 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::walkingDetectorCallback(BOOL, BOOL, BOOL, uint64_t)", "CoreLocation: %s\n", v49);
      if (v49 != buf) {
        free(v49);
      }
    }
  }
  if (a4 && !*(unsigned char *)(a1 + 48))
  {
    if (*(void *)(a1 + 120))
    {
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
      }
      uint64_t v35 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
      {
        double v36 = (double)(a5 - *(void *)(a1 + 120)) * 0.000001;
        *(_DWORD *)uint64_t buf = 134217984;
        *(double *)&uint8_t buf[4] = v36;
        _os_log_impl(&dword_1902AF000, v35, OS_LOG_TYPE_DEBUG, "[CMHeadTrackingController] Time between sit and walking: %f seconds", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
        }
        v51 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::walkingDetectorCallback(BOOL, BOOL, BOOL, uint64_t)", "CoreLocation: %s\n", v51);
        if (v51 != buf) {
          free(v51);
        }
      }
      double v37 = (double)(a5 - *(void *)(a1 + 120)) * 0.000001;
      double v39 = *(double *)(a1 + 168);
      double v38 = *(double *)(a1 + 176);
      if (v38 <= v37) {
        double v38 = (double)(a5 - *(void *)(a1 + 120)) * 0.000001;
      }
      if (v39 >= v37) {
        double v39 = (double)(a5 - *(void *)(a1 + 120)) * 0.000001;
      }
      *(double *)(a1 + 168) = v39;
      *(double *)(a1 + 176) = v38;
      *(double *)(a1 + 184) = v37 + *(double *)(a1 + 184);
      ++*(_DWORD *)(a1 + 192);
    }
    if (*(void *)(a1 + 56))
    {
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
      }
      uint64_t v40 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
      {
        double v41 = (double)(a5 - *(void *)(a1 + 56)) * 0.000001;
        *(_DWORD *)uint64_t buf = 134217984;
        *(double *)&uint8_t buf[4] = v41;
        _os_log_impl(&dword_1902AF000, v40, OS_LOG_TYPE_DEBUG, "[CMHeadTrackingController] Time between stand and walking: %f seconds", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2400);
        }
        v52 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CMHeadTrackingController::walkingDetectorCallback(BOOL, BOOL, BOOL, uint64_t)", "CoreLocation: %s\n", v52);
        if (v52 != buf) {
          free(v52);
        }
      }
      double v42 = (double)(a5 - *(void *)(a1 + 56)) * 0.000001;
      double v44 = *(double *)(a1 + 136);
      double v43 = *(double *)(a1 + 144);
      if (v43 <= v42) {
        double v43 = (double)(a5 - *(void *)(a1 + 56)) * 0.000001;
      }
      if (v44 >= v42) {
        double v44 = (double)(a5 - *(void *)(a1 + 56)) * 0.000001;
      }
      *(double *)(a1 + 136) = v44;
      *(double *)(a1 + 144) = v43;
      *(double *)(a1 + 152) = v42 + *(double *)(a1 + 152);
      ++*(_DWORD *)(a1 + 160);
    }
  }
  *(unsigned char *)(a1 + 48) = a4;
}

os_log_t sub_190561DA8()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "RelativeDeviceMotion");
  qword_1E929D8E0 = (uint64_t)result;
  return result;
}

void sub_190561DD8(uint64_t a1)
{
}

void sub_190561E28(_Unwind_Exception *a1)
{
  sub_19056756C(v1);
  _Unwind_Resume(a1);
}

void sub_190561E3C(float32x2_t *a1, long long *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  long long v3 = a2[1];
  long long v16 = *a2;
  long long v17 = v3;
  v18[0] = a2[2];
  *(_OWORD *)((char *)v18 + 13) = *(long long *)((char *)a2 + 45);
  if (sub_1905687D8())
  {
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2420);
    }
    char v4 = qword_1E929D790;
    if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_INFO, "Device still has original rear camera. Using unit-specific calibration info", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2420);
      }
      LOWORD(v19) = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV5::initializeCalibrationParamaters(const UInt8 *, int)", "CoreLocation: %s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    BOOL v5 = (__int16 *)((char *)&v16 + 7);
LABEL_27:
    sub_1905683AC(a1, v5);
    return;
  }
  int v6 = sub_19056896C();
  if (qword_1E929D798 != -1) {
    dispatch_once(&qword_1E929D798, &unk_1EDFD2420);
  }
  uint64_t v7 = qword_1E929D790;
  if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v22 = v6;
    _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_INFO, "Rear camera was replaced. VCM actuator ID is %d", buf, 8u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2420);
    }
    int v19 = 67109120;
    int v20 = v6;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV5::initializeCalibrationParamaters(const UInt8 *, int)", "CoreLocation: %s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  if (v6 == 4)
  {
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2420);
    }
    double v9 = qword_1E929D790;
    if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_INFO, "Using generic Alps calibration info", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2420);
      }
      LOWORD(v19) = 0;
      unsigned int v15 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV5::initializeCalibrationParamaters(const UInt8 *, int)", "CoreLocation: %s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    BOOL v5 = (__int16 *)((char *)v18 + 11);
    goto LABEL_27;
  }
  if (v6 == 3)
  {
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2420);
    }
    BOOL v8 = qword_1E929D790;
    if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_INFO, "Using generic Mitsumi calibration info", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2420);
      }
      LOWORD(v19) = 0;
      double v14 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV5::initializeCalibrationParamaters(const UInt8 *, int)", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    BOOL v5 = (__int16 *)((char *)&v17 + 9);
    goto LABEL_27;
  }
  if (qword_1E929D798 != -1) {
    dispatch_once(&qword_1E929D798, &unk_1EDFD2420);
  }
  uint64_t v10 = qword_1E929D790;
  if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_INFO, "Unrecongized VCM actuator. Not performing compensation", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2420);
    }
    LOWORD(v19) = 0;
    BOOL v11 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV5::initializeCalibrationParamaters(const UInt8 *, int)", "CoreLocation: %s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
}

void sub_1905624FC(_DWORD *a1)
{
  sub_19056756C(a1);

  JUMPOUT(0x192FCC980);
}

os_log_t sub_190562534()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Compass");
  qword_1E929D790 = (uint64_t)result;
  return result;
}

void sub_190562740(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(*(void *)(a1 + 32) + 16)) {
    operator new();
  }
  if (qword_1E929D6B8 != -1) {
    dispatch_once(&qword_1E929D6B8, &unk_1EDFD2440);
  }
  uint64_t v1 = qword_1E929D6A8;
  if (os_log_type_enabled((os_log_t)qword_1E929D6A8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1902AF000, v1, OS_LOG_TYPE_ERROR, "Pickup detection already started!", buf, 2u);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D6B8 != -1) {
      dispatch_once(&qword_1E929D6B8, &unk_1EDFD2440);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "-[CMPickupManager startPickupUpdates]_block_invoke", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
}

void sub_190562AB0(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_190562ADC(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_onPickupStateUpdated_, a1);
}

void sub_190562B5C(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (*(void *)(*(void *)(a1 + 32) + 16))
  {
    if (qword_1E929EA28 != -1) {
      dispatch_once(&qword_1E929EA28, &unk_1EDFD19E0);
    }
    sub_1902CDE08(qword_1E929EA20, 0, *(void *)(*(void *)(a1 + 32) + 16));
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      uint64_t v2 = *(void *)(a1 + 32);
    }
    *(void *)(v2 + 16) = 0;
    if (qword_1E929D6B8 != -1) {
      dispatch_once(&qword_1E929D6B8, &unk_1EDFD2440);
    }
    uint64_t v4 = qword_1E929D6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929D6A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_DEFAULT, "Stopped pickup detection updates", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D6B8 != -1) {
        dispatch_once(&qword_1E929D6B8, &unk_1EDFD2440);
      }
      BOOL v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMPickupManager stopPickupUpdates]_block_invoke", "CoreLocation: %s\n");
LABEL_23:
      if (v5 != buf) {
        free(v5);
      }
    }
  }
  else
  {
    if (qword_1E929D6B8 != -1) {
      dispatch_once(&qword_1E929D6B8, &unk_1EDFD2440);
    }
    int v6 = qword_1E929D6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929D6A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_ERROR, "Pickup detection service already stopped!", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D6B8 != -1) {
        dispatch_once(&qword_1E929D6B8, &unk_1EDFD2440);
      }
      BOOL v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMPickupManager stopPickupUpdates]_block_invoke", "CoreLocation: %s\n");
      goto LABEL_23;
    }
  }
}

uint64_t sub_190562F30(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (qword_1E929D6B8 != -1) {
    dispatch_once(&qword_1E929D6B8, &unk_1EDFD2440);
  }
  uint64_t v2 = qword_1E929D6A8;
  if (os_log_type_enabled((os_log_t)qword_1E929D6A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    *(_DWORD *)uint64_t buf = 134349056;
    uint64_t v13 = v3;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEFAULT, "Pickup Detection: %{public}ld", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D6B8 != -1) {
      dispatch_once(&qword_1E929D6B8, &unk_1EDFD2440);
    }
    BOOL v11 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMPickupManager onPickupStateUpdated:]_block_invoke", "CoreLocation: %s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  objc_msgSend_delegate(*(void **)(a1 + 32), v4, v5);
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    double v9 = objc_msgSend_delegate(*(void **)(a1 + 32), v7, v8);
    return objc_msgSend_pickupManager_didUpdateState_(v9, v10, *(void *)(a1 + 32), *(void *)(a1 + 40));
  }
  return result;
}

os_log_t sub_190563128()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Gesture");
  qword_1E929D6A8 = (uint64_t)result;
  return result;
}

void sub_19056315C(uint64_t a1)
{
  sub_1902BC548(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190563194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a3, *(void *)(a1 + 24));
}

BOOL sub_1905631A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  float v3 = 0.0;
  do
  {
    float v3 = v3 + (float)(*(float *)(a1 + v2) * *(float *)(a1 + v2));
    v2 += 4;
  }
  while (v2 != 12);
  uint64_t v4 = 0;
  float v5 = 0.0;
  do
  {
    float v5 = v5 + (float)(*(float *)(a2 + v4) * *(float *)(a2 + v4));
    v4 += 4;
  }
  while (v4 != 12);
  uint64_t v6 = 0;
  if (sqrtf(v3) <= sqrtf(v5))
  {
    float v7 = 0.0;
    do
    {
      float v7 = v7 + (float)(*(float *)(a2 + v6) * *(float *)(a2 + v6));
      v6 += 4;
    }
    while (v6 != 12);
  }
  else
  {
    float v7 = 0.0;
    do
    {
      float v7 = v7 + (float)(*(float *)(a1 + v6) * *(float *)(a1 + v6));
      v6 += 4;
    }
    while (v6 != 12);
  }
  if (*(_DWORD *)(a1 + 48)) {
    BOOL v8 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  return !v8 && sqrtf(v7) <= 0.17453;
}

double sub_190563264(uint64_t a1, int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(a1 + 116) != a2)
  {
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2460);
    }
    uint64_t v4 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_INFO))
    {
      int v5 = *(unsigned __int8 *)(a1 + 116);
      *(_DWORD *)uint64_t buf = 67109376;
      int v9 = v5;
      __int16 v10 = 1024;
      int v11 = a2;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_INFO, "[CMBleedToZero] Changed tracking behavior from %d to %d.", buf, 0xEu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2460);
      }
      float v7 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CMBleedToZero::setTrackingBehavior(CMRelDM::TrackingBehavior)", "CoreLocation: %s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    *(void *)(a1 + 80) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_DWORD *)a1 = 1084227584;
    *(unsigned char *)(a1 + 132) = 0;
    *(unsigned char *)(a1 + 116) = a2;
  }
  return result;
}

void sub_19056345C(uint64_t a1@<X0>, float *a2@<X1>, float *a3@<X2>, float *a4@<X3>, float32x4_t *a5@<X8>)
{
  uint64_t v10 = 0;
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  float v11 = 0.0;
  do
  {
    float v11 = v11 + (float)(a2[v10] * a2[v10]);
    ++v10;
  }
  while (v10 != 3);
  if (sqrtf(v11) <= 0.000001) {
    goto LABEL_27;
  }
  uint64_t v12 = 0;
  float v13 = 0.0;
  do
  {
    float v13 = v13 + (float)(a3[v12] * a3[v12]);
    ++v12;
  }
  while (v12 != 3);
  if (sqrtf(v13) <= 0.000001)
  {
LABEL_27:
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2460);
    }
    double v44 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_ERROR))
    {
      buf[0].i16[0] = 0;
      _os_log_impl(&dword_1902AF000, v44, OS_LOG_TYPE_ERROR, "[CMBleedToZero] unexpected 0 accel magnitude.", (uint8_t *)buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2460);
      }
      v111.i16[0] = 0;
      v106 = (float32x4_t *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "CMOQuaternion CMBleedToZero::alignAttitudeWithGravity(const CMVector3d &, const CMVector3d &, const CMOQuaternion &) const", "CoreLocation: %s\n", (const char *)v106);
      if (v106 != buf) {
        free(v106);
      }
    }
    goto LABEL_32;
  }
  uint64_t v14 = 0;
  float v15 = 0.0;
  do
  {
    float v15 = v15 + (float)(a2[v14] * a2[v14]);
    ++v14;
  }
  while (v14 != 3);
  uint64_t v16 = 0;
  float v17 = 0.0;
  do
  {
    float v17 = v17 + (float)(a3[v16] * a3[v16]);
    ++v16;
  }
  while (v16 != 3);
  float v18 = sqrtf(v15);
  float v19 = a2[1] / v18;
  float v20 = *a2 / v18;
  float v21 = a2[2] / v18;
  float v22 = sqrtf(v17);
  float v25 = sub_1904CF73C(a4, *a3 / v22, a3[1] / v22, a3[2] / v22);
  float v26 = (float)((float)(v21 * v24) + (float)(v19 * v23)) + (float)(v20 * v25);
  float v27 = 1.0;
  if (v26 < 1.0)
  {
    float v27 = -1.0;
    if (v26 > -1.0) {
      float v27 = (float)((float)(v21 * v24) + (float)(v19 * v23)) + (float)(v20 * v25);
    }
  }
  uint64_t v28 = 0;
  float v29 = (float)(v19 * v24) - (float)(v21 * v23);
  float v30 = (float)(v21 * v25) - (float)(v20 * v24);
  float v31 = (float)(v20 * v23) - (float)(v19 * v25);
  v110.f32[0] = v29;
  v110.f32[1] = v30;
  v110.f32[2] = v31;
  float v32 = 0.0;
  do
  {
    float v32 = v32 + (float)(v110.f32[v28] * v110.f32[v28]);
    ++v28;
  }
  while (v28 != 3);
  float v33 = acosf(v27);
  float v34 = sqrtf(v32);
  if (v34 >= 0.000001) {
    goto LABEL_26;
  }
  if (v33 < 1.57079633)
  {
LABEL_32:
    float32x4_t v111 = *(float32x4_t *)a4;
    goto LABEL_33;
  }
  uint64_t v35 = 0;
  if (v21 <= 0.0) {
    float v36 = -v21;
  }
  else {
    float v36 = v21;
  }
  BOOL v37 = v36 <= 0.9;
  float v38 = 0.0;
  float v39 = (float)(v21 * 0.0) - v19;
  float v40 = v20 + (float)(v21 * -0.0);
  float v41 = (float)(v20 * -0.0) + (float)(v19 * 0.0);
  if (!v37)
  {
    float v41 = v19 + (float)(v20 * -0.0);
    float v40 = (float)(v20 * 0.0) - v21;
    float v39 = (float)(v19 * -0.0) + (float)(v21 * 0.0);
  }
  float v29 = (float)(v40 * v21) - (float)(v41 * v19);
  float v30 = (float)(v41 * v20) - (float)(v39 * v21);
  float v31 = (float)(v39 * v19) - (float)(v40 * v20);
  v110.f32[0] = v29;
  v110.f32[1] = v30;
  v110.f32[2] = v31;
  do
  {
    float v38 = v38 + (float)(v110.f32[v35] * v110.f32[v35]);
    ++v35;
  }
  while (v35 != 3);
  float v34 = sqrtf(v38);
LABEL_26:
  float v42 = v33 / v34;
  float v112 = v29 * v42;
  float v113 = v30 * v42;
  float v114 = v31 * v42;
  *(double *)v43.i64 = sub_1904CF7FC(buf, &v112);
  sub_1904CF3F4((uint64_t)buf, a4, &v111, v43);
LABEL_33:
  uint64_t v45 = 0;
  float v46 = 0.0;
  do
  {
    float v46 = v46 + (float)(a3[v45] * a3[v45]);
    ++v45;
  }
  while (v45 != 3);
  float v47 = sqrtf(v46);
  float v48 = *a3 / v47;
  float v49 = a3[1] / v47;
  uint64_t v50 = a1 + 8;
  float v51 = a3[2] / v47;
  v52 = (float32x2_t *)sub_190479348(v50);
  __int32 v53 = v52[1].i32[1];
  v54.f32[0] = -v52[1].f32[0];
  *(float32x2_t *)buf[0].f32 = vneg_f32(*v52);
  buf[0].i64[1] = __PAIR64__(v53, v54.u32[0]);
  sub_1902D9ACC(buf, v54);
  sub_1904CF73C(buf[0].f32, v48, v49, v51);
  uint64_t v56 = 0;
  float v57 = 0.0;
  do
  {
    float v57 = v57 + (float)(a2[v56] * a2[v56]);
    ++v56;
  }
  while (v56 != 3);
  if (v55 <= 0.0) {
    float v55 = -v55;
  }
  if (v55 > 0.9) {
    goto LABEL_43;
  }
  float v58 = sqrtf(v57);
  float v59 = a2[2] / v58;
  float v60 = -v59;
  if (v59 > 0.0) {
    float v60 = a2[2] / v58;
  }
  if (v60 > 0.9)
  {
LABEL_43:
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2460);
    }
    __int16 v61 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
    {
      buf[0].i16[0] = 0;
      _os_log_impl(&dword_1902AF000, v61, OS_LOG_TYPE_DEBUG, "[CMBleedToZero] Do not BTZ yaw because face or source frame z-axis is aligned with gravity.", (uint8_t *)buf, 2u);
    }
    if (!sub_1902D8400(115, 2)) {
      goto LABEL_48;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2460);
    }
    v110.i16[0] = 0;
    v105 = (float32x4_t *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "CMOQuaternion CMBleedToZero::relAttitudeBTZDefault(const CMVector3d &, const CMVector3d &, const CMOQuaternion &) const", "CoreLocation: %s\n");
LABEL_93:
    if (v105 != buf) {
      free(v105);
    }
LABEL_48:
    *a5 = v111;
    return;
  }
  float v62 = *a2 / v58;
  float v63 = a2[1] / v58;
  v64 = (float *)sub_190479348(v50);
  sub_1904CF3F4((uint64_t)&v111, v64, &v110, v65);
  float v66 = 0.0;
  float v67 = sub_1904CF73C(v110.f32, 0.0, 0.0, 1.0);
  uint64_t v68 = 0;
  float v71 = (float)((float)(v59 * v69) + (float)(v70 * v63)) + (float)(v67 * v62);
  float v72 = v63 * v71;
  float v73 = v59 * v71;
  float v74 = v67 - (float)(v62 * v71);
  float v75 = v70 - v72;
  float v76 = v69 - v73;
  float v112 = v74;
  float v113 = v75;
  float v114 = v69 - v73;
  do
  {
    float v66 = v66 + (float)(*(float *)((char *)&v112 + v68) * *(float *)((char *)&v112 + v68));
    v68 += 4;
  }
  while (v68 != 12);
  if (sqrtf(v66) <= 0.000001)
  {
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2460);
    }
    v103 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_ERROR))
    {
      buf[0].i16[0] = 0;
      _os_log_impl(&dword_1902AF000, v103, OS_LOG_TYPE_ERROR, "[CMBleedToZero] unexpected 0 accel magnitude on zVecInS_pred_proj.", (uint8_t *)buf, 2u);
    }
    if (!sub_1902D8400(115, 0)) {
      goto LABEL_48;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2460);
    }
    LOWORD(v109[0]) = 0;
LABEL_85:
    v105 = (float32x4_t *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "CMOQuaternion CMBleedToZero::relAttitudeBTZDefault(const CMVector3d &, const CMVector3d &, const CMOQuaternion &) const", "CoreLocation: %s\n");
    goto LABEL_93;
  }
  uint64_t v77 = 0;
  float v78 = 0.0;
  do
  {
    float v78 = v78 + (float)(*(float *)((char *)&v112 + v77) * *(float *)((char *)&v112 + v77));
    v77 += 4;
  }
  while (v77 != 12);
  uint64_t v79 = 0;
  float v80 = sqrtf(v78);
  float v81 = v75 / v80;
  buf[0].i64[0] = 0;
  buf[0].i32[2] = 1065353216;
  do
  {
    buf[0].f32[v79] = -buf[0].f32[v79];
    ++v79;
  }
  while (v79 != 3);
  uint64_t v82 = 0;
  float v83 = v74 / v80;
  float v84 = 0.0;
  float v85 = (float)(v59 + (float)(v63 * 0.0)) + (float)(v62 * 0.0);
  v109[0] = (float)(v62 * v85) + buf[0].f32[0];
  v109[1] = (float)(v63 * v85) + buf[0].f32[1];
  v109[2] = (float)(v59 * v85) + buf[0].f32[2];
  do
  {
    float v84 = v84 + (float)(v109[v82] * v109[v82]);
    ++v82;
  }
  while (v82 != 3);
  if (sqrtf(v84) <= 0.000001)
  {
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2460);
    }
    v104 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_ERROR))
    {
      buf[0].i16[0] = 0;
      _os_log_impl(&dword_1902AF000, v104, OS_LOG_TYPE_ERROR, "[CMBleedToZero] unexpected 0 accel magnitude on zVecInS_BTZ_proj.", (uint8_t *)buf, 2u);
    }
    if (!sub_1902D8400(115, 0)) {
      goto LABEL_48;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2460);
    }
    LOWORD(v108[0]) = 0;
    goto LABEL_85;
  }
  uint64_t v86 = 0;
  float v87 = 0.0;
  float v88 = v76 / v80;
  do
  {
    float v87 = v87 + (float)(v109[v86] * v109[v86]);
    ++v86;
  }
  while (v86 != 3);
  float v89 = sqrtf(v87);
  float v90 = (float)((float)(v62 * v85) + buf[0].f32[0]) / v89;
  float v91 = (float)((float)(v63 * v85) + buf[0].f32[1]) / v89;
  float v92 = (float)((float)(v59 * v85) + buf[0].f32[2]) / v89;
  float v93 = (float)((float)(v88 * v92) + (float)(v91 * v81)) + (float)(v90 * v83);
  float v94 = 1.0;
  if (v93 < 1.0)
  {
    float v94 = -1.0;
    if (v93 > -1.0) {
      float v94 = (float)((float)(v88 * v92) + (float)(v91 * v81)) + (float)(v90 * v83);
    }
  }
  uint64_t v95 = 0;
  float v96 = (float)(v91 * v88) - (float)(v92 * v81);
  float v97 = (float)(v92 * v83) - (float)(v90 * v88);
  float v98 = (float)(v90 * v81) - (float)(v91 * v83);
  v108[0] = v96;
  v108[1] = v97;
  v108[2] = v98;
  float v99 = 0.0;
  do
  {
    float v99 = v99 + (float)(v108[v95] * v108[v95]);
    ++v95;
  }
  while (v95 != 3);
  float v100 = acosf(v94);
  float v101 = sqrtf(v99);
  if (v101 >= 0.000001)
  {
    float v62 = v96 / v101;
    float v63 = v97 / v101;
    float v59 = v98 / v101;
  }
  v107[0] = v100 * v62;
  v107[1] = v100 * v63;
  v107[2] = v100 * v59;
  *(double *)v102.i64 = sub_1904CF7FC(buf, v107);
  sub_1904CF3F4((uint64_t)buf, v111.f32, a5, v102);
}

float sub_190563EAC(uint64_t a1, float *a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v4 = (float *)sub_190479348(a1 + 8);
  double v5 = sub_190501944();
  float v8 = sub_1904CF73C(v4, *(float *)&v5, v6, v7);
  float v10 = v9;
  float v12 = v11;
  float v13 = (float *)sub_1904791A8(v3);
  float v14 = sub_1904CF73C(a2, *v13 + v8, v10 + v13[1], v12 + v13[2]);
  uint64_t v15 = 0;
  *(float *)float v19 = v14;
  v19[1] = v16;
  v19[2] = v17;
  do
  {
    *(float *)&v19[v15] = -*(float *)&v19[v15];
    ++v15;
  }
  while (v15 != 3);
  return *(float *)v19;
}

void sub_190563F68(uint64_t a1@<X0>, float *a2@<X1>, float *a3@<X2>, float *a4@<X3>, uint64_t a5@<X8>, float32x4_t a6@<Q0>)
{
  float v11 = (float *)(a5 + 12);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(_DWORD *)(a5 + 24) = 1065353216;
  sub_1902D9ACC((float32x4_t *)(a5 + 12), a6);
  sub_19056345C(a1, a2, a3, a4, &v14);
  *(float32x4_t *)(a5 + 12) = v14;
  *(float *)a5 = sub_190563EAC(a1, v11);
  *(_DWORD *)(a5 + 4) = v12;
  *(_DWORD *)(a5 + 8) = v13;
}

void sub_190564000(uint64_t a1, float a2, float a3, float a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(float *)a1 >= 20.0 || *(double *)(a1 + 56) <= 2.5) {
    return;
  }
  if (a3 >= a4) {
    float v8 = a4;
  }
  else {
    float v8 = a3;
  }
  if (a2 < 20.0 && v8 > a2)
  {
    *(_DWORD *)a1 = 1101004800;
    *(unsigned char *)(a1 + 40) = 1;
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2460);
    }
    int v12 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 56);
      *(_DWORD *)uint64_t buf = 134218752;
      double v16 = a2;
      __int16 v17 = 2048;
      double v18 = a4;
      __int16 v19 = 2048;
      double v20 = a3;
      __int16 v21 = 2048;
      uint64_t v22 = v13;
      _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_DEFAULT, "[CMBleedToZero] Set extendedBTZ. TimeSinceAnchor %.2f, timeSinceLastUncorrelatedSrcMotion, %.2f, TimeSinceLastWalkingOrSitToStand, %.2f, quiescenceDuration, %.2f", buf, 0x2Au);
    }
    if (!sub_1902D8400(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929D8D8 == -1)
    {
LABEL_25:
      float32x4_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CMBleedToZero::updateExtendedBTZFromAnchor(const float, const float, const float)", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
      return;
    }
LABEL_27:
    dispatch_once(&qword_1E929D8D8, &unk_1EDFD2460);
    goto LABEL_25;
  }
  if (qword_1E929D8D8 != -1) {
    dispatch_once(&qword_1E929D8D8, &unk_1EDFD2460);
  }
  float v10 = qword_1E929D8E0;
  if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v11 = *(void *)(a1 + 56);
    *(_DWORD *)uint64_t buf = 134218752;
    double v16 = a2;
    __int16 v17 = 2048;
    double v18 = a4;
    __int16 v19 = 2048;
    double v20 = a3;
    __int16 v21 = 2048;
    uint64_t v22 = v11;
    _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_DEBUG, "[CMBleedToZero] No extendedBTZ. TimeSinceAnchor %.2f, timeSinceLastUncorrelatedSrcMotion, %.2f, TimeSinceLastWalkingOrSitToStand, %.2f, quiescenceDuration, %.2f", buf, 0x2Au);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D8D8 == -1) {
      goto LABEL_25;
    }
    goto LABEL_27;
  }
}

double sub_1905643C4(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, int a5, int a6, uint64_t a7, double a8)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (sub_1905631A0(a2, a3))
  {
    *(float64x2_t *)(a1 + 48) = vaddq_f64(*(float64x2_t *)(a1 + 48), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a8, 0));
    *(double *)(a1 + 80) = *(double *)(a1 + 80) + a8;
    double v15 = *(double *)(a1 + 64);
    if (v15 >= a8) {
      *(double *)(a1 + 64) = v15 - a8;
    }
    double v16 = *(double *)(a1 + 72);
    if (v16 >= a8)
    {
      char v17 = 0;
      double v18 = v16 - a8;
LABEL_15:
      *(double *)(a1 + 72) = v18;
      goto LABEL_16;
    }
    goto LABEL_10;
  }
  if (a5)
  {
    double v19 = *(double *)(a1 + 64);
    *(double *)(a1 + 56) = *(double *)(a1 + 56) + a8;
    *(double *)(a1 + 80) = *(double *)(a1 + 80) + a8;
    if (v19 >= a8) {
      *(double *)(a1 + 64) = v19 - a8;
    }
    double v20 = *(double *)(a1 + 72);
    if (v20 >= a8)
    {
      char v17 = 0;
      double v18 = v20 - a8;
      goto LABEL_15;
    }
LABEL_10:
    char v17 = 0;
LABEL_16:
    LOBYTE(v25) = 1;
    goto LABEL_42;
  }
  __int16 v21 = (double *)(a1 + 48);
  double v22 = *(double *)(a1 + 48);
  float64x2_t v23 = vaddq_f64(*(float64x2_t *)(a1 + 64), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a8, 0));
  *(float64x2_t *)(a1 + 64) = v23;
  if (v22 >= a8)
  {
    double *v21 = v22 - a8;
  }
  else
  {
    double v24 = *(double *)(a1 + 56);
    if (v24 >= a8)
    {
      *(double *)(a1 + 56) = v24 - a8;
    }
    else
    {
      double *v21 = 0.0;
      *(void *)(a1 + 56) = 0;
      v23.f64[0] = 0.0;
      *(void *)(a1 + 64) = 0;
    }
  }
  double v26 = *(double *)(a1 + 80);
  if (v26 >= a8) {
    *(double *)(a1 + 80) = v26 - a8;
  }
  float v27 = (double *)(a1 + 72);
  if (v23.f64[0] > 0.200000003)
  {
    double *v21 = 0.0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    if (*(float *)a1 == 20.0)
    {
      *(_DWORD *)a1 = *(_DWORD *)(a1 + 4);
      *(unsigned char *)(a1 + 40) = 0;
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2460);
      }
      uint64_t v28 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
      {
        double v29 = *(float *)a1;
        *(_DWORD *)uint64_t buf = 134217984;
        *(double *)&uint8_t buf[4] = v29;
        _os_log_impl(&dword_1902AF000, v28, OS_LOG_TYPE_DEFAULT, "[CMBleedToZero] Reset BTZ horizon from extendedBTZ to %.2f", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2460);
        }
        double v53 = *(float *)a1;
        *(_DWORD *)float v60 = 134217984;
        *(double *)&v60[4] = v53;
        float32x4_t v54 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CMBleedToZero::updateMutualQuiescence(const CMRelDM::IMUData &, const CMRelDM::IMUData &, BOOL, double, const uint64_t)", "CoreLocation: %s\n", v54);
        if (v54 != buf) {
          free(v54);
        }
      }
    }
  }
  if (*v27 <= 0.800000012) {
    goto LABEL_38;
  }
  *(void *)(a1 + 120) = a7;
  float v30 = *(double *)(a1 + 80);
  *(float *)(a1 + 128) = v30;
  double *v27 = 0.0;
  *(void *)(a1 + 80) = 0;
  int v31 = *(_DWORD *)(a2 + 48);
  int v25 = *(_DWORD *)(a3 + 48);
  if (!(v31 | v25))
  {
    LOBYTE(v25) = 0;
    char v32 = 3;
LABEL_40:
    *(unsigned char *)(a1 + 132) = v32;
    goto LABEL_41;
  }
  if (!v31)
  {
    LOBYTE(v25) = 0;
    char v32 = 2;
    goto LABEL_40;
  }
  if (v25)
  {
    *(unsigned char *)(a1 + 132) = 0;
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2460);
    }
    float v33 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      *(void *)&uint8_t buf[4] = a7;
      _os_log_impl(&dword_1902AF000, v33, OS_LOG_TYPE_DEBUG, "[CMBleedToZero] Unexpected behavior: Cam controller disturbance threshold reached, but both srcIMU.qMode != kNotStatic and auxIMU.qMode != kNotStatic, timestamp: %llu", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2460);
      }
      *(_DWORD *)float v60 = 134217984;
      *(void *)&v60[4] = a7;
      uint64_t v56 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CMBleedToZero::updateMutualQuiescence(const CMRelDM::IMUData &, const CMRelDM::IMUData &, BOOL, double, const uint64_t)", "CoreLocation: %s\n", v56);
      if (v56 != buf) {
        free(v56);
      }
    }
LABEL_38:
    LOBYTE(v25) = 0;
LABEL_41:
    char v17 = 1;
    goto LABEL_42;
  }
  char v17 = 1;
  *(unsigned char *)(a1 + 132) = 1;
LABEL_42:
  *(unsigned char *)(a1 + 41) = v25;
  *(unsigned char *)(a1 + 43) = sub_1905631A0(a2, a3);
  if (v17)
  {
    int v35 = 0;
  }
  else
  {
    if (*(unsigned char *)(a1 + 40))
    {
      double result = *(double *)(a1 + 56);
      BOOL v36 = result < *(float *)a1;
    }
    else
    {
      float v37 = *(float *)a1;
      if (*(unsigned char *)(a1 + 116))
      {
        double result = fmaxf(v37, 1.0);
        BOOL v36 = *(double *)(a1 + 56) < result;
      }
      else
      {
        if (*(double *)(a1 + 48) >= fmaxf(v37, 5.0))
        {
          int v35 = 1;
          *(unsigned char *)(a1 + 42) = 1;
          goto LABEL_54;
        }
        double result = fmaxf(v37 + v37, 5.0);
        BOOL v36 = *(double *)(a1 + 56) < result;
      }
    }
    int v35 = !v36;
  }
  *(unsigned char *)(a1 + 42) = v35 | a6;
  if ((v35 | a6) != 1) {
    return result;
  }
LABEL_54:
  if (qword_1E929D8D8 != -1) {
    dispatch_once(&qword_1E929D8D8, &unk_1EDFD2460);
  }
  float v38 = qword_1E929D8E0;
  if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
  {
    double v39 = *(float *)a1;
    uint64_t v40 = *(void *)(a1 + 56);
    *(_DWORD *)uint64_t buf = 134218240;
    *(double *)&uint8_t buf[4] = v39;
    LOWORD(v64[0]) = 2048;
    *(void *)((char *)v64 + 2) = v40;
    _os_log_impl(&dword_1902AF000, v38, OS_LOG_TYPE_DEBUG, "[CMBleedToZero] horizon, %.3f, quiesenceLoose, %.3f", buf, 0x16u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2460);
    }
    double v50 = *(float *)a1;
    uint64_t v51 = *(void *)(a1 + 56);
    *(_DWORD *)float v60 = 134218240;
    *(double *)&v60[4] = v50;
    __int16 v61 = 2048;
    uint64_t v62 = v51;
    v52 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CMBleedToZero::feedInputs(const CMRelDM::IMUData &, const CMRelDM::IMUData &, const CMOQuaternion &, const BOOL, const BOOL, const double, const uint64_t)", "CoreLocation: %s\n", v52);
    if (v52 != buf) {
      free(v52);
    }
  }
  double v42 = a8;
  if (v35)
  {
    if (*(unsigned char *)(a1 + 43))
    {
      *(void *)float v60 = *(void *)(a2 + 12);
      *(_DWORD *)&v60[8] = *(_DWORD *)(a2 + 20);
      unint64_t v58 = *(void *)(a3 + 12);
      int v59 = *(_DWORD *)(a3 + 20);
      float32x4_t v43 = (double *)(a1 + 48);
      if (*(double *)(a1 + 48) < a8)
      {
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2460);
        }
        double v44 = qword_1E929D8E0;
        if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl(&dword_1902AF000, v44, OS_LOG_TYPE_ERROR, "[CMBleedToZero] unexpected quiescentDurationStrict < dt.", buf, 2u);
        }
        if (!sub_1902D8400(115, 0)) {
          goto LABEL_76;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 == -1)
        {
LABEL_91:
          float v55 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 0, "void CMBleedToZero::feedInputs(const CMRelDM::IMUData &, const CMRelDM::IMUData &, const CMOQuaternion &, const BOOL, const BOOL, const double, const uint64_t)", "CoreLocation: %s\n", v55);
          if (v55 != buf) {
            free(v55);
          }
LABEL_76:
          double v42 = a8;
          goto LABEL_77;
        }
LABEL_97:
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2460);
        goto LABEL_91;
      }
    }
    else
    {
      *(void *)float v60 = *(void *)(a2 + 24);
      *(_DWORD *)&v60[8] = *(_DWORD *)(a2 + 32);
      unint64_t v58 = *(void *)(a3 + 24);
      int v59 = *(_DWORD *)(a3 + 32);
      float32x4_t v43 = (double *)(a1 + 56);
      if (*(double *)(a1 + 56) < a8)
      {
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2460);
        }
        float v49 = qword_1E929D8E0;
        if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl(&dword_1902AF000, v49, OS_LOG_TYPE_ERROR, "[CMBleedToZero] unexpected quiescentDurationLoose < dt.", buf, 2u);
        }
        if (!sub_1902D8400(115, 0)) {
          goto LABEL_76;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 == -1) {
          goto LABEL_91;
        }
        goto LABEL_97;
      }
    }
LABEL_77:
    *(double *)v41.i64 = *v43 - v42;
    *float32x4_t v43 = *(double *)v41.i64;
    goto LABEL_78;
  }
  *(_DWORD *)float v60 = sub_1904CF514((float *)(a2 + 56));
  *(_DWORD *)&v60[4] = v45;
  *(_DWORD *)&v60[8] = v46;
  v41.f32[0] = sub_1904CF514((float *)(a3 + 56));
  unint64_t v58 = __PAIR64__(v47, v41.u32[0]);
  int v59 = v48;
LABEL_78:
  sub_190563F68(a1, (float *)v60, (float *)&v58, a4, (uint64_t)buf, v41);
  *(void *)(a1 + 88) = *(void *)buf;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)&buf[8];
  double result = v64[0];
  *(_OWORD *)(a1 + 100) = *(_OWORD *)v64;
  return result;
}

os_log_t sub_190564DAC()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "RelativeDeviceMotion");
  qword_1E929D8E0 = (uint64_t)result;
  return result;
}

void sub_190564DDC(uint64_t a1)
{
}

void sub_190564E2C(_Unwind_Exception *a1)
{
  sub_19056756C(v1);
  _Unwind_Resume(a1);
}

void sub_190564E40(float32x2_t *a1, long long *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v3 = a2[1];
  long long v19 = *a2;
  long long v20 = v3;
  long long v4 = a2[3];
  v21[0] = a2[2];
  v21[1] = v4;
  if (sub_1905687D8())
  {
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2480);
    }
    double v5 = qword_1E929D790;
    if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_INFO, "Device still has original rear camera. Using unit-specific calibration info", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2480);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV6::initializeCalibrationParamaters(const UInt8 *, int)", "CoreLocation: %s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    float v6 = (__int16 *)((unint64_t)&v19 | 0xA);
LABEL_27:
    sub_1905683AC(a1, v6);
    return;
  }
  int v7 = sub_19056896C();
  if (qword_1E929D798 != -1) {
    dispatch_once(&qword_1E929D798, &unk_1EDFD2480);
  }
  float v8 = qword_1E929D790;
  if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v18 = v7;
    _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_INFO, "Rear camera was replaced. VCM actuator ID is %d", buf, 8u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2480);
    }
    float32x4_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV6::initializeCalibrationParamaters(const UInt8 *, int)", "CoreLocation: %s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  if (v7 == 4)
  {
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2480);
    }
    float v10 = qword_1E929D790;
    if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_INFO, "Using generic Alps calibration info", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2480);
      }
      double v16 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV6::initializeCalibrationParamaters(const UInt8 *, int)", "CoreLocation: %s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    float v6 = (__int16 *)v21 + 7;
    goto LABEL_27;
  }
  if (v7 == 3)
  {
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2480);
    }
    float v9 = qword_1E929D790;
    if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_INFO, "Using generic Mitsumi calibration info", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2480);
      }
      double v15 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV6::initializeCalibrationParamaters(const UInt8 *, int)", "CoreLocation: %s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    float v6 = (__int16 *)&v20 + 6;
    goto LABEL_27;
  }
  if (qword_1E929D798 != -1) {
    dispatch_once(&qword_1E929D798, &unk_1EDFD2480);
  }
  uint64_t v11 = qword_1E929D790;
  if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_INFO, "Unrecongized VCM actuator. Not performing compensation", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2480);
    }
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV6::initializeCalibrationParamaters(const UInt8 *, int)", "CoreLocation: %s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
}

void sub_1905654FC(_DWORD *a1)
{
  sub_19056756C(a1);

  JUMPOUT(0x192FCC980);
}

os_log_t sub_190565534()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Compass");
  qword_1E929D790 = (uint64_t)result;
  return result;
}

__CFString *sub_1905663F8(unsigned int a1)
{
  if (a1 > 0xD) {
    return 0;
  }
  else {
    return off_1E568FAC8[a1];
  }
}

void sub_190566418()
{
}

void sub_1905664B0(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x10F1C40E59F67ADLL);
  _Unwind_Resume(a1);
}

void sub_1905664D8(void *a1)
{
  sub_1905A1098(a1);

  JUMPOUT(0x192FCC980);
}

double sub_190566510(uint64_t a1, int a2, double *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFD34C0);
    }
    long long v4 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      LODWORD(v16) = a2;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_FAULT, "[AccessoryAccelerometer] Unrecognized update interval notification %{public}d", buf, 8u);
    }
    double v5 = 0.0;
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFD34C0);
      }
      float v6 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryAccelerometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    sub_1905A2C68(a1);
    if (*a3 > 0.0)
    {
      (*(void (**)(double))(**(void **)(a1 + 32) + 16))(*a3);
      (*(void (**)(void))(**(void **)(a1 + 32) + 16))();
      *(unsigned char *)(a1 + 30) = 0;
    }
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFD34C0);
    }
    float v9 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)a3;
      *(_DWORD *)uint64_t buf = 134349056;
      uint64_t v16 = v10;
      _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_INFO, "[AccessoryAccelerometer] Setting update interval to %{public}f", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFD34C0);
      }
      float32x4_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryAccelerometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    double v11 = rint(*a3 * 1000000.0);
    if (*a3 < 0.0) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = (uint64_t)v11;
    }
    sub_1902CDC50(*(void *)(a1 + 32), v12);
    return *a3;
  }
  return v5;
}

double sub_190566924(uint64_t a1, int a2, double *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFD34C0);
    }
    long long v4 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      LODWORD(v14) = a2;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_FAULT, "[AccessoryAccelerometer] Unrecognized batch interval notification %{public}d", buf, 8u);
    }
    double v5 = 0.0;
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFD34C0);
      }
      float v6 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryAccelerometer::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    sub_1905A2C68(a1);
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFD34C0);
    }
    float v9 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_INFO))
    {
      double v10 = *a3;
      *(_DWORD *)uint64_t buf = 134349056;
      double v14 = v10;
      _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_INFO, "[AccessoryAccelerometer] Setting batch interval to %{public}f", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFD34C0);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryAccelerometer::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    sub_1902CDBA4(*(void *)(a1 + 32), *a3);
    return *a3;
  }
  return v5;
}

void sub_190566C50(uint64_t a1)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (IOHIDEventGetType() == 13)
  {
    if (IOHIDEventGetIntegerValue() == 1)
    {
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFD34C0);
      }
      uint64_t v2 = qword_1EB3BE830;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEBUG, "[AccessoryAccelerometer] Received shake data, discarding.", buf, 2u);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFD34C0);
        }
        LOWORD(v52.isa) = 0;
        long long v3 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "virtual void CLAccessoryAccelerometer::onEventData(void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v3);
        if (v3 != (char *)buf) {
          free(v3);
        }
      }
    }
    else
    {
      IOHIDEventGetFloatValue();
      float v5 = v4;
      float v28 = v5;
      IOHIDEventGetFloatValue();
      float v7 = v6;
      float v29 = v7;
      IOHIDEventGetFloatValue();
      float v9 = v8;
      float v30 = v9;
      unint64_t TimeStamp = IOHIDEventGetTimeStamp();
      double v11 = sub_1902D8D34(TimeStamp);
      double v27 = v11;
      unsigned __int16 IntegerValue = IOHIDEventGetIntegerValue();
      unsigned __int16 v32 = IntegerValue;
      uint64_t v13 = sub_1905E72B8();
      uint64_t v31 = v13;
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFD34C0);
      }
      double v14 = qword_1EB3BE830;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 67241472;
        int isa = IntegerValue;
        __int16 v42 = 2050;
        double v43 = v5;
        __int16 v44 = 2050;
        double v45 = v7;
        __int16 v46 = 2050;
        double v47 = v9;
        __int16 v48 = 2050;
        uint64_t v49 = v13;
        __int16 v50 = 2050;
        double v51 = v11;
        _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_DEBUG, "[AccessoryAccelerometer] seq,%{public}d,x,%{public}20.20f,y,%{public}20.20f,z,%{public}20.20f,sensorTime,%{public}llu,timestamp,%{public}20.20f", buf, 0x3Au);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFD34C0);
        }
        LODWORD(v52.isa) = 67241472;
        HIDWORD(v52.isa) = IntegerValue;
        *(_WORD *)double v53 = 2050;
        *(double *)&v53[2] = v5;
        __int16 v54 = 2050;
        double v55 = v7;
        __int16 v56 = 2050;
        *(double *)float v57 = v9;
        *(_WORD *)&v57[8] = 2050;
        uint64_t v58 = v13;
        __int16 v59 = 2050;
        *(double *)float v60 = v11;
        uint64_t v22 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "virtual void CLAccessoryAccelerometer::onEventData(void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      sub_1902D8BCC(a1, 0, (uint64_t)&v27, 40);
      if (!*(unsigned char *)(a1 + 30))
      {
        *(unsigned char *)(a1 + 30) = 1;
        LODWORD(v52.isa) = 0;
        sub_1902C3F54(v53, "N/A");
        sub_1902C3F54(&v57[2], "N/A");
        memset(v64, 0, sizeof(v64));
        long long v63 = 0u;
        long long v62 = 0u;
        long long v61 = 0u;
        *(_OWORD *)&v60[6] = 0u;
        if (sub_1905A3184((const char *)a1, &v52))
        {
          memset(v39, 0, 44);
          uint64_t v15 = (__IOHIDServiceClient *)sub_1902B8788(*(void *)(a1 + 32));
          if (sub_1905E84F4(v39, v15, @"ARSC", 0x2CuLL))
          {
            uint64_t v16 = 0;
            uint64_t v17 = &v60[10];
            do
            {
              snprintf(v17, 0x2CuLL, "%02x", *((unsigned __int8 *)v39 + v16++));
              v17 += 2;
            }
            while (v16 != 44);
          }
          if (qword_1EB3BE838 != -1) {
            dispatch_once(&qword_1EB3BE838, &unk_1EDFD34C0);
          }
          int v18 = qword_1EB3BE830;
          if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEBUG))
          {
            if (v57[1] >= 0) {
              double v19 = COERCE_DOUBLE(v53);
            }
            else {
              double v19 = *(double *)v53;
            }
            if (v60[5] >= 0) {
              double v20 = COERCE_DOUBLE(&v57[2]);
            }
            else {
              double v20 = *(double *)&v57[2];
            }
            *(_DWORD *)uint64_t buf = 67240707;
            int isa = (int)v52.isa;
            __int16 v42 = 2081;
            double v43 = v19;
            __int16 v44 = 2081;
            double v45 = v20;
            _os_log_impl(&dword_1902AF000, v18, OS_LOG_TYPE_DEBUG, "[AccessoryAccelerometer] config,side,%{public}d,configuration,%{private}s,serialNumber,%{private}s", buf, 0x1Cu);
          }
          if (sub_1902D8400(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EB3BE838 != -1) {
              dispatch_once(&qword_1EB3BE838, &unk_1EDFD34C0);
            }
            if (v57[1] >= 0) {
              double v24 = v53;
            }
            else {
              double v24 = *(unsigned char **)v53;
            }
            if (v60[5] >= 0) {
              int v25 = &v57[2];
            }
            else {
              int v25 = *(unsigned char **)&v57[2];
            }
            int v33 = 67240707;
            int v34 = (int)v52.isa;
            __int16 v35 = 2081;
            BOOL v36 = v24;
            __int16 v37 = 2081;
            float v38 = v25;
            double v26 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 2, "void CLAccessoryAccelerometer::onAccelerometerData(const Sample &)", "CoreLocation: %s\n", v26);
            if (v26 != (char *)buf) {
              free(v26);
            }
          }
          sub_1902D8BCC(a1, 1, (uint64_t)&v52, 152);
        }
        else
        {
          if (qword_1EB3BE838 != -1) {
            dispatch_once(&qword_1EB3BE838, &unk_1EDFD34C0);
          }
          __int16 v21 = qword_1EB3BE830;
          if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl(&dword_1902AF000, v21, OS_LOG_TYPE_FAULT, "[AccessoryAccelerometer] Service not found!", buf, 2u);
          }
          if (sub_1902D8400(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EB3BE838 != -1) {
              dispatch_once(&qword_1EB3BE838, &unk_1EDFD34C0);
            }
            LOWORD(v39[0]) = 0;
            float64x2_t v23 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 0, "void CLAccessoryAccelerometer::onAccelerometerData(const Sample &)", "CoreLocation: %s\n", v23);
            if (v23 != (char *)buf) {
              free(v23);
            }
          }
        }
        if ((v60[5] & 0x80000000) != 0) {
          operator delete(*(void **)&v57[2]);
        }
        if ((v57[1] & 0x80000000) != 0) {
          operator delete(*(void **)v53);
        }
      }
    }
  }
}

void sub_190567474(_Unwind_Exception *a1)
{
}

os_log_t sub_1905674B4()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Accessory");
  qword_1EB3BE830 = (uint64_t)result;
  return result;
}

void sub_1905674E4(uint64_t a1)
{
}

void *sub_19056756C(_DWORD *a1)
{
  *(void *)a1 = &unk_1EDFCA188;
  sub_1905675D0(a1);
  bzero(a1 + 18, 0x10uLL);

  return sub_1904DC240(a1);
}

uint64_t sub_1905675D0(_DWORD *a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(DarwinNotifyCenter, a1);
  int v3 = a1[11];
  if (v3 != -1)
  {
    notify_cancel(v3);
    a1[11] = -1;
  }
  int v4 = a1[13];
  if (v4 != -1)
  {
    notify_cancel(v4);
    a1[13] = -1;
  }
  uint64_t result = a1[15];
  if (result != -1)
  {
    uint64_t result = notify_cancel(result);
    a1[15] = -1;
  }
  return result;
}

void sub_190567648(_DWORD *a1)
{
  sub_19056756C(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190567680(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 <= 1)
  {
    int v3 = (int *)result;
    *(void *)(result + 72 + 8 * a2) = a3;
    if (*(void *)(result + 72) || *(void *)(result + 80))
    {
      if ((*(_DWORD *)(result + 44) & 0x80000000) != 0)
      {
        if (notify_register_check("com.apple.isp.focusing", (int *)(result + 44)))
        {
          if (qword_1E929D798 != -1) {
            dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
          }
          int v4 = qword_1E929D790;
          if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)uint64_t buf = 136315138;
            double v14 = "com.apple.isp.focusing";
            _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_FAULT, "Could not register for notification %s", buf, 0xCu);
          }
          if (sub_1902D8400(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929D798 != -1) {
              dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
            }
            double v10 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 0, "void CLMagnetometerCoexistenceNotifierCpasCamera::registerForNotificationsIfNecessary()", "CoreLocation: %s\n", v10);
            if (v10 != (char *)buf) {
              free(v10);
            }
          }
        }
        DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterAddObserver(DarwinNotifyCenter, v3, (CFNotificationCallback)sub_190568B00, @"com.apple.isp.focusing", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
      }
      if (v3[13] < 0)
      {
        if (notify_register_check("com.apple.isp.backcamerapower", v3 + 13))
        {
          if (qword_1E929D798 != -1) {
            dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
          }
          double v6 = qword_1E929D790;
          if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)uint64_t buf = 136315138;
            double v14 = "com.apple.isp.backcamerapower";
            _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_FAULT, "Could not register for notification %s", buf, 0xCu);
          }
          if (sub_1902D8400(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929D798 != -1) {
              dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
            }
            double v11 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 0, "void CLMagnetometerCoexistenceNotifierCpasCamera::registerForNotificationsIfNecessary()", "CoreLocation: %s\n", v11);
            if (v11 != (char *)buf) {
              free(v11);
            }
          }
        }
        float v7 = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterAddObserver(v7, v3, (CFNotificationCallback)sub_190568B00, @"com.apple.isp.backcamerapower", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
      }
      if (v3[15] < 0)
      {
        if (notify_register_check("com.apple.isp.backcamerasensorconfig", v3 + 15))
        {
          if (qword_1E929D798 != -1) {
            dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
          }
          double v8 = qword_1E929D790;
          if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)uint64_t buf = 136315138;
            double v14 = "com.apple.isp.backcamerasensorconfig";
            _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_FAULT, "Could not register for notification %s", buf, 0xCu);
          }
          if (sub_1902D8400(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929D798 != -1) {
              dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
            }
            uint64_t v12 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 0, "void CLMagnetometerCoexistenceNotifierCpasCamera::registerForNotificationsIfNecessary()", "CoreLocation: %s\n", v12);
            if (v12 != (char *)buf) {
              free(v12);
            }
          }
        }
        float v9 = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterAddObserver(v9, v3, (CFNotificationCallback)sub_190568B00, @"com.apple.isp.backcamerasensorconfig", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
      }
      sub_190567C58((uint64_t)v3);
      sub_190567FB0((uint64_t)v3);
      return sub_1905682E8(v3);
    }
    else
    {
      return sub_1905675D0((_DWORD *)result);
    }
  }
  return result;
}

void sub_190567C58(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t state64 = 0;
  if (notify_get_state(*(_DWORD *)(a1 + 52), &state64))
  {
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
    }
    uint64_t v2 = qword_1E929D790;
    if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136315138;
      uint64_t v12 = "com.apple.isp.backcamerapower";
      _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_FAULT, "Could not get state for %s", buf, 0xCu);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
      }
      int v9 = 136315138;
      double v10 = "com.apple.isp.backcamerapower";
      int v3 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "void CLMagnetometerCoexistenceNotifierCpasCamera::updateCameraState()", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
  else
  {
    *(unsigned char *)(a1 + 56) = state64 != 0;
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
    }
    int v4 = qword_1E929D790;
    if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_INFO))
    {
      int v5 = *(unsigned __int8 *)(a1 + 56);
      *(_DWORD *)uint64_t buf = 67109120;
      LODWORD(v12) = v5;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_INFO, "camera os_activity_scope_state_s state = %d", buf, 8u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
      }
      int v6 = *(unsigned __int8 *)(a1 + 56);
      int v9 = 67109120;
      LODWORD(v10) = v6;
      float v7 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasCamera::updateCameraState()", "CoreLocation: %s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  }
}

void sub_190567FB0(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t state64 = 0;
  if (notify_get_state(*(_DWORD *)(a1 + 44), &state64))
  {
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
    }
    uint64_t v2 = qword_1E929D790;
    if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136315138;
      uint64_t v13 = "com.apple.isp.focusing";
      _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_FAULT, "Could not get state for %s", buf, 0xCu);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
      }
      int v10 = 136315138;
      double v11 = "com.apple.isp.focusing";
      int v3 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "void CLMagnetometerCoexistenceNotifierCpasCamera::updateFocusPosition()", "CoreLocation: %s\n");
LABEL_19:
      if (v3 != buf) {
        free(v3);
      }
    }
  }
  else
  {
    int v4 = state64;
    *(_DWORD *)(a1 + 48) = state64;
    BOOL v8 = v4 == 0xFFFF;
    sub_1904DC8A8(a1, 1, (uint64_t)&v8, 1);
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
    }
    int v5 = qword_1E929D790;
    if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_INFO))
    {
      int v6 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 67109120;
      LODWORD(v13) = v6;
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_INFO, "focus position = %d", buf, 8u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
      }
      int v7 = *(_DWORD *)(a1 + 48);
      int v10 = 67109120;
      LODWORD(v11) = v7;
      int v3 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasCamera::updateFocusPosition()", "CoreLocation: %s\n");
      goto LABEL_19;
    }
  }
}

uint64_t sub_1905682E8(unsigned char *a1)
{
  int v2 = *((_DWORD *)a1 + 12);
  if (v2 != 0xFFFF)
  {
    if (a1[56])
    {
      *((float32x2_t *)a1 + 4) = vmla_n_f32(*(float32x2_t *)(a1 + 100), *(float32x2_t *)(a1 + 88), (float)v2);
      *((float *)a1 + 10) = *((float *)a1 + 27) + (float)(*((float *)a1 + 24) * (float)v2);
    }
    else
    {
      bzero(a1 + 32, 0xCuLL);
    }
  }
  (*(void (**)(unsigned char *))(*(void *)a1 + 64))(a1);

  return sub_1904DC8A8((uint64_t)a1, 0, (uint64_t)(a1 + 32), 12);
}

void sub_1905683AC(float32x2_t *a1, __int16 *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  a1[11].f32[0] = (float)*a2 * 0.01;
  a1[11].f32[1] = (float)a2[1] * 0.01;
  a1[12].f32[0] = (float)a2[2] * 0.01;
  if (qword_1E929D798 != -1) {
    dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
  }
  int v4 = qword_1E929D790;
  if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_INFO))
  {
    double v5 = a1[11].f32[0];
    double v6 = a1[11].f32[1];
    double v7 = a1[12].f32[0];
    *(_DWORD *)uint64_t buf = 134218496;
    double v15 = v5;
    __int16 v16 = 2048;
    double v17 = v6;
    __int16 v18 = 2048;
    double v19 = v7;
    _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_INFO, "VCM Delta.x,%f,VCM Delta.y,%f,VCM Delta.z,%f", buf, 0x20u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
    }
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasCamera::setCoexistenceInfo(const CameraCoexistenceInfo &)", "CoreLocation: %s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  a1[11] = vdiv_f32(a1[11], (float32x2_t)vdup_n_s32(0x437F0000u));
  a1[12].f32[0] = a1[12].f32[0] / 255.0;
  a1[12].f32[1] = (float)a2[3] * 0.01;
  a1[13].f32[0] = (float)a2[4] * 0.01;
  a1[13].f32[1] = (float)a2[5] * 0.01;
  if (qword_1E929D798 != -1) {
    dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
  }
  BOOL v8 = qword_1E929D790;
  if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_INFO))
  {
    double v9 = a1[12].f32[1];
    double v10 = a1[13].f32[0];
    double v11 = a1[13].f32[1];
    *(_DWORD *)uint64_t buf = 134218496;
    double v15 = v9;
    __int16 v16 = 2048;
    double v17 = v10;
    __int16 v18 = 2048;
    double v19 = v11;
    _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_INFO, "Rear camera offset.x,%f,Rear camera offset.y,%f,Rear camera offset.z,%f", buf, 0x20u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
    }
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasCamera::setCoexistenceInfo(const CameraCoexistenceInfo &)", "CoreLocation: %s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
}

BOOL sub_1905687D8()
{
  sub_1902D6BD0();
  if (*(unsigned char *)(qword_1EB3BF828 + 16)) {
    return sub_1904C3070();
  }
  uint64_t v1 = (std::__shared_weak_count *)operator new(0x70uLL);
  v1->__shared_owners_ = 0;
  v1->__shared_weak_owners_ = 0;
  v1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFD0DA0;
  sub_1902C3F54(__p, "kCLConnectionMessageDeviceHasOriginalCamera");
  MEMORY[0x192FCC410](&v1[1], __p);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  int v2 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v6 = objc_msgSend_setWithObjects_(v2, v5, v3, v4, 0);
  uint64_t v14 = v1 + 1;
  double v15 = v1;
  atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  double v9 = objc_msgSend_sendMessage_withReplyClassesSync_(CMMotionUtils, v7, (uint64_t)&v14, v6);
  if (v15) {
    sub_1902D8B58(v15);
  }
  double v10 = objc_msgSend_objectForKeyedSubscript_(v9, v8, @"CMDeviceHasOriginalBackCamera");
  uint64_t v0 = objc_msgSend_BOOLValue(v10, v11, v12);
  sub_1902D8B58(v1);
  return v0;
}

void sub_190568914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a13) {
    sub_1902D8B58(a13);
  }
  sub_1902D8B58(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_19056896C()
{
  sub_1902D6BD0();
  if (*(unsigned char *)(qword_1EB3BF828 + 16))
  {
    uint64_t v0 = (void *)sub_1904C3BA4();
    return objc_msgSend_intValue(v0, v1, v2);
  }
  else
  {
    uint64_t v4 = (std::__shared_weak_count *)operator new(0x70uLL);
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFD0DA0;
    sub_1902C3F54(__p, "kCLConnectionMessageCameraVcmActuatorId");
    MEMORY[0x192FCC410](&v4[1], __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    double v5 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v6 = objc_opt_class();
    uint64_t v7 = objc_opt_class();
    uint64_t v9 = objc_msgSend_setWithObjects_(v5, v8, v6, v7, 0);
    __int16 v16 = v4 + 1;
    char v17 = v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v12 = objc_msgSend_sendMessage_withReplyClassesSync_(CMMotionUtils, v10, (uint64_t)&v16, v9);
    if (v17) {
      sub_1902D8B58(v17);
    }
    uint64_t v13 = objc_msgSend_objectForKeyedSubscript_(v12, v11, @"CMCameraVcmActuatorId");
    sub_1902D8B58(v4);
    return objc_msgSend_intValue(v13, v14, v15);
  }
}

void sub_190568AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_1902D8B58(v19);
  _Unwind_Resume(a1);
}

void sub_190568B00(int a1, uint64_t a2, CFStringRef theString1)
{
  if (CFStringCompare(theString1, @"com.apple.isp.focusing", 0))
  {
    if (CFStringCompare(theString1, @"com.apple.isp.backcamerapower", 0))
    {
      if (CFStringCompare(theString1, @"com.apple.isp.backcamerasensorconfig", 0)) {
        return;
      }
      uint64_t v5 = sub_1902D6BD0();
      v7[0] = MEMORY[0x1E4F143A8];
      v7[1] = 3221225472;
      v7[2] = sub_190568FB8;
      v7[3] = &unk_1E568CF68;
      v7[4] = a2;
      uint64_t v6 = v7;
    }
    else
    {
      uint64_t v5 = sub_1902D6BD0();
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 3221225472;
      _DWORD v8[2] = sub_190568E14;
      v8[3] = &unk_1E568CF68;
      v8[4] = a2;
      uint64_t v6 = v8;
    }
  }
  else
  {
    uint64_t v5 = sub_1902D6BD0();
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = sub_190568C70;
    float v9[3] = &unk_1E568CF68;
    v9[4] = a2;
    uint64_t v6 = v9;
  }
  sub_1902CDE98(v5, (uint64_t)v6);
}

uint64_t sub_190568C70(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(unsigned char **)(a1 + 32);
  if (qword_1E929D798 != -1) {
    dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
  }
  uint64_t v2 = qword_1E929D790;
  if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_INFO, "Received focusing notification", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasCamera::onFocusingNotification()", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_190567FB0((uint64_t)v1);
  return sub_1905682E8(v1);
}

uint64_t sub_190568E14(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(unsigned char **)(a1 + 32);
  if (qword_1E929D798 != -1) {
    dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
  }
  uint64_t v2 = qword_1E929D790;
  if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_INFO, "Received camera state notification", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasCamera::onCameraStateNotification()", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_190567C58((uint64_t)v1);
  return sub_1905682E8(v1);
}

uint64_t sub_190568FB8(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(int **)(a1 + 32);
  if (qword_1E929D798 != -1) {
    dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
  }
  uint64_t v2 = qword_1E929D790;
  if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_INFO, "Received camera mode notification", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
    }
    LOWORD(v12) = 0;
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasCamera::onCameraModeNotification()", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  uint64_t state64 = 0;
  if (notify_get_state(v1[15], &state64))
  {
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
    }
    uint64_t v3 = qword_1E929D790;
    if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136315138;
      uint64_t v15 = "com.apple.isp.backcamerasensorconfig";
      _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_FAULT, "Could not get state for %s", buf, 0xCu);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
      }
      int v12 = 136315138;
      uint64_t v13 = "com.apple.isp.backcamerasensorconfig";
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "void CLMagnetometerCoexistenceNotifierCpasCamera::updateCameraMode()", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    v1[16] = state64;
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
    }
    uint64_t v5 = qword_1E929D790;
    if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_INFO))
    {
      int v6 = v1[16];
      *(_DWORD *)uint64_t buf = 67109120;
      LODWORD(v15) = v6;
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_INFO, "camera mode = %d", buf, 8u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD24C0);
      }
      int v9 = v1[16];
      int v12 = 67109120;
      LODWORD(v13) = v9;
      double v10 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasCamera::updateCameraMode()", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    (*(void (**)(int *))(*(void *)v1 + 56))(v1);
  }
  return sub_1905682E8(v1);
}

os_log_t sub_190569430()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Compass");
  qword_1E929D790 = (uint64_t)result;
  return result;
}

float sub_190569460(int a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a1 > 2104)
  {
    if (a1 > 12149)
    {
      switch(a1)
      {
        case 17150:
          return 5.97;
        case 15110:
          return 6.95;
        case 12150:
          return 9.33;
      }
    }
    else
    {
      switch(a1)
      {
        case 2105:
          return 3.71;
        case 2150:
          return 4.6;
        case 3015:
          return 5.87;
      }
    }
  }
  else if (a1 > 2023)
  {
    switch(a1)
    {
      case 2024:
        return 5.13;
      case 2071:
        return 5.91;
      case 2101:
        return 6.07;
    }
  }
  else
  {
    switch(a1)
    {
      case 2010:
        return 6.35;
      case 2020:
        return 7.55;
      case 2022:
        return 5.38;
    }
  }
  if (qword_1E929D760 != -1) {
    dispatch_once(&qword_1E929D760, &unk_1EDFD24E0);
  }
  uint64_t v3 = qword_1E929D768;
  if (os_log_type_enabled((os_log_t)qword_1E929D768, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v7 = a1;
    _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_FAULT, "Unexpected activity type passed to lookup model, %d", buf, 8u);
  }
  int v4 = sub_1902D8400(115, 0);
  float result = 4.4021;
  if (v4)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D760 != -1) {
      dispatch_once(&qword_1E929D760, &unk_1EDFD24E0);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "float CLCalorieUtils::lookupMetsForActivity(const CLMotionActivity::Type)", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 4.4021;
  }
  return result;
}

os_log_t sub_190569734()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Calorimetry");
  qword_1E929D768 = (uint64_t)result;
  return result;
}

void sub_190569764(uint64_t a1)
{
}

void sub_1905697D0(_Unwind_Exception *a1)
{
  sub_19056756C(v1);
  _Unwind_Resume(a1);
}

void sub_1905697E8(_DWORD *a1)
{
  sub_19056756C(a1);

  JUMPOUT(0x192FCC980);
}

void sub_190569824(float32x2_t *a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  bzero(&v9, 0x12uLL);
  __int32 v2 = a1[8].i32[0];
  uint64_t v3 = (char *)&a1[21] + 6;
  if (v2 != 2) {
    uint64_t v3 = (char *)&a1[14] + 2;
  }
  if (v2 == 1) {
    int v4 = (char *)&a1[17] + 2;
  }
  else {
    int v4 = v3;
  }
  uint64_t v9 = *(void *)v4;
  int v10 = *((_DWORD *)v4 + 2);
  if (qword_1E929D798 != -1) {
    dispatch_once(&qword_1E929D798, &unk_1EDFD2500);
  }
  uint64_t v5 = qword_1E929D790;
  if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_INFO))
  {
    __int32 v6 = a1[8].i32[0];
    *(_DWORD *)uint64_t buf = 67110656;
    int v26 = (__int16)v9;
    __int16 v27 = 1024;
    int v28 = SWORD1(v9);
    __int16 v29 = 1024;
    int v30 = SWORD2(v9);
    __int16 v31 = 1024;
    int v32 = SHIWORD(v9);
    __int16 v33 = 1024;
    int v34 = (__int16)v10;
    __int16 v35 = 1024;
    int v36 = SHIWORD(v10);
    __int16 v37 = 1024;
    __int32 v38 = v6;
    _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_INFO, "Setting calibration data %d, %d, %d, %d, %d, %d from sensor mode %d", buf, 0x2Cu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2500);
    }
    __int32 v7 = a1[8].i32[0];
    int v11 = 67110656;
    int v12 = (__int16)v9;
    __int16 v13 = 1024;
    int v14 = SWORD1(v9);
    __int16 v15 = 1024;
    int v16 = SWORD2(v9);
    __int16 v17 = 1024;
    int v18 = SHIWORD(v9);
    __int16 v19 = 1024;
    int v20 = (__int16)v10;
    __int16 v21 = 1024;
    int v22 = SHIWORD(v10);
    __int16 v23 = 1024;
    __int32 v24 = v7;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV10::chooseOffsetData()", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_1905683AC(a1, (__int16 *)&v9);
}

os_log_t sub_190569AB8()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Compass");
  qword_1E929D790 = (uint64_t)result;
  return result;
}

uint64_t sub_190569F3C(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(a1 + 8));
  __int32 v2 = *(NSObject **)(a1 + 16);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 24);
  if (v3) {
    _Block_release(v3);
  }
  sub_190421DA8((uint64_t *)a1, 0);
  return a1;
}

uint64_t sub_190569F90(uint64_t result)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  if (!**(void **)(result + 32)) {
    operator new();
  }
  return result;
}

void sub_19056A154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, std::__shared_weak_count *a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    sub_1902D8B58(a10);
  }
  if (a18) {
    sub_1902D8B58(a18);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19056A1D0(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  CFDictionaryRef Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_19045CAD8(v11, Dictionary);
  if (*(void *)(v2 + 16)
    && *(void *)(v2 + 24)
    && (*(int (**)(void *))(v11[0] + 856))(v11) >= 1
    && sub_190538A6C(v10, (uint64_t)v11))
  {
    int v4 = *(NSObject **)(v2 + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19056A45C;
    block[3] = &unk_1E568DA20;
    block[4] = v2;
    v9[0] = *(_OWORD *)v10;
    *(_OWORD *)((char *)v9 + 13) = *(_OWORD *)&v10[13];
    dispatch_async(v4, block);
  }
  else
  {
    if (qword_1E929D788 != -1) {
      dispatch_once(&qword_1E929D788, &unk_1EDFD2520);
    }
    uint64_t v5 = qword_1E929D780;
    if (os_log_type_enabled((os_log_t)qword_1E929D780, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_ERROR, "Bad pressure bias from daemon.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D788 != -1) {
        dispatch_once(&qword_1E929D788, &unk_1EDFD2520);
      }
      __int32 v7 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "void CLPressureBiasProxy::start()_block_invoke", "CoreLocation: %s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  return sub_19045CCC8(v11);
}

void sub_19056A43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_19045CCC8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19056A45C(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(*(void *)(a1 + 32) + 24) + 16))(*(void *)(*(void *)(a1 + 32) + 24), a1 + 40);
}

uint64_t sub_19056A478(uint64_t a1)
{
  return sub_190421DA8(*(uint64_t **)(a1 + 32), 0);
}

void sub_19056A484(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(const void **)(v2 + 24);
  if (v3) {
    _Block_release(v3);
  }
  *(void *)(v2 + 24) = _Block_copy(*(const void **)(a1 + 40));
  int v4 = *(NSObject **)(v2 + 16);
  if (v4) {
    dispatch_release(v4);
  }
  *(void *)(v2 + 16) = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(a1 + 32);

  dispatch_retain(v5);
}

os_log_t sub_19056A4E8()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Pressure");
  qword_1E929D780 = (uint64_t)result;
  return result;
}

uint64_t sub_19056A518(float *a1, float a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = &unk_1EDFD1130;
  char v10 = 0;
  __int32 v7 = &v9;
  char v8 = 0;
  sub_1905589B4((uint64_t)&v7, a1);
  uint64_t result = sub_190558DF4((uint64_t)&v7, a2);
  if (!v10)
  {
    if (qword_1EB3BE868 != -1) {
      dispatch_once(&qword_1EB3BE868, &unk_1EDFD3340);
    }
    int v4 = qword_1EB3BE860;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_FAULT))
    {
      uint64_t buf = 68289539;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      __int16 v15 = "assert";
      __int16 v16 = 2081;
      __int16 v17 = "receiver.fGotFit";
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x26u);
      if (qword_1EB3BE868 != -1) {
        dispatch_once(&qword_1EB3BE868, &unk_1EDFD3340);
      }
    }
    uint64_t v5 = qword_1EB3BE860;
    if (os_signpost_enabled((os_log_t)qword_1EB3BE860))
    {
      uint64_t buf = 68289539;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      __int16 v15 = "assert";
      __int16 v16 = 2081;
      __int16 v17 = "receiver.fGotFit";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x26u);
      if (qword_1EB3BE868 != -1) {
        dispatch_once(&qword_1EB3BE868, &unk_1EDFD3340);
      }
    }
    __int32 v6 = qword_1EB3BE860;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_INFO))
    {
      uint64_t buf = 68289539;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      __int16 v15 = "assert";
      __int16 v16 = 2081;
      __int16 v17 = "receiver.fGotFit";
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  return result;
}

float sub_19056A7F0(uint64_t a1, float *a2, unint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  float v3 = (float)((float)a3 * 4.0) + 2.0;
  if ((float *)a1 == a2) {
    goto LABEL_23;
  }
  int v4 = (float *)(a1 + 24);
  while (v4 != a2)
  {
    float v5 = *v4;
    float v6 = *(v4 - 6);
    v4 += 6;
    if (v5 < v6)
    {
      if (qword_1EB3BE868 != -1) {
        dispatch_once(&qword_1EB3BE868, &unk_1EDFD3340);
      }
      __int32 v7 = qword_1EB3BE860;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 68289539;
        int v25 = 0;
        __int16 v26 = 2082;
        __int16 v27 = "";
        __int16 v28 = 2082;
        __int16 v29 = "assert";
        __int16 v30 = 2081;
        __int16 v31 = "std::is_sorted(samples.begin(), samples.end())";
        _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_1EB3BE868 != -1) {
          dispatch_once(&qword_1EB3BE868, &unk_1EDFD3340);
        }
      }
      char v8 = qword_1EB3BE860;
      if (os_signpost_enabled((os_log_t)qword_1EB3BE860))
      {
        *(_DWORD *)uint64_t buf = 68289539;
        int v25 = 0;
        __int16 v26 = 2082;
        __int16 v27 = "";
        __int16 v28 = 2082;
        __int16 v29 = "assert";
        __int16 v30 = 2081;
        __int16 v31 = "std::is_sorted(samples.begin(), samples.end())";
        _os_signpost_emit_with_name_impl(&dword_1902AF000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_1EB3BE868 != -1) {
          dispatch_once(&qword_1EB3BE868, &unk_1EDFD3340);
        }
      }
      uint64_t v9 = qword_1EB3BE860;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 68289539;
        int v25 = 0;
        __int16 v26 = 2082;
        __int16 v27 = "";
        __int16 v28 = 2082;
        __int16 v29 = "assert";
        __int16 v30 = 2081;
        __int16 v31 = "std::is_sorted(samples.begin(), samples.end())";
        _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }
      a1 = abort_report_np();
      break;
    }
  }
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  int v11 = (float *)a1;
  do
  {
    unint64_t v12 = v10 >> 1;
    uint64_t v13 = &v11[6 * (v10 >> 1)];
    float v15 = *v13;
    __int16 v14 = v13 + 6;
    v10 += ~(v10 >> 1);
    if (v15 < v3) {
      int v11 = v14;
    }
    else {
      unint64_t v10 = v12;
    }
  }
  while (v10);
  if (v11 == (float *)a1)
  {
LABEL_23:
    float v16 = INFINITY;
    int v11 = (float *)a1;
  }
  else
  {
    float v16 = vabds_f32(*(v11 - 6), v3);
  }
  if (v11 == a2) {
    float v17 = INFINITY;
  }
  else {
    float v17 = vabds_f32(*v11, v3);
  }
  uint64_t v18 = v11;
  do
  {
    if (v11 == (float *)a1 && v18 == a2)
    {
      float v20 = 72.0;
LABEL_43:
      float v22 = -30.0;
      float v23 = 3.0;
      return fminf(v22 + (float)(v20 * v23), 255.0);
    }
    if (v16 >= v17)
    {
      if (v18 + 6 == a2)
      {
        float v17 = INFINITY;
        __int16 v19 = v18;
        uint64_t v18 = a2;
      }
      else
      {
        float v17 = vabds_f32(v18[6], v3);
        __int16 v19 = v18;
        v18 += 6;
      }
    }
    else
    {
      __int16 v19 = v11 - 6;
      if (v11 - 6 == (float *)a1)
      {
        float v16 = INFINITY;
        __int16 v19 = (float *)a1;
        int v11 = (float *)a1;
      }
      else
      {
        float v16 = vabds_f32(*(v11 - 12), v3);
        v11 -= 6;
      }
    }
  }
  while ((char *)v18 - (char *)v11 < 72);
  float v20 = 72.0;
  if (v19 == a2 || !v19) {
    goto LABEL_43;
  }
  float v20 = vabds_f32(*v19, v3);
  if (v20 < 10.0) {
    return roundf((float)(v20 * 0.3) + 7.0);
  }
  if (v20 >= 20.0) {
    goto LABEL_43;
  }
  float v22 = -10.0;
  float v23 = 2.0;
  return fminf(v22 + (float)(v20 * v23), 255.0);
}

void sub_19056AC1C(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)(a3 + 266) = 0u;
  *(_OWORD *)(a3 + 241) = 0u;
  *(_OWORD *)(a3 + 225) = 0u;
  *(_OWORD *)(a3 + 209) = 0u;
  *(_OWORD *)(a3 + 193) = 0u;
  *(_OWORD *)(a3 + 177) = 0u;
  *(_OWORD *)(a3 + 161) = 0u;
  *(_OWORD *)(a3 + 145) = 0u;
  *(_OWORD *)(a3 + 129) = 0u;
  *(_OWORD *)(a3 + 113) = 0u;
  *(_OWORD *)(a3 + 97) = 0u;
  *(_OWORD *)(a3 + 81) = 0u;
  *(_OWORD *)(a3 + 65) = 0u;
  *(_OWORD *)(a3 + 49) = 0u;
  *(_OWORD *)(a3 + 33) = 0u;
  *(_OWORD *)(a3 + 17) = 0u;
  *(_OWORD *)(a3 + 1) = 0u;
  *(_OWORD *)(a3 + 257) = 0u;
  *(unsigned char *)a3 = 22;
  float v6 = *(float **)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v6 == (float *)v7)
  {
    *(void *)(a3 + 228) = -1;
    *(void *)(a3 + 246) = -1;
    *(void *)(a3 + 264) = -1;
    return;
  }
  sub_19056B854((unint64_t)v6, v7, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v6) >> 3)), 1);
  float v8 = **(float **)a1;
  float v9 = *(float *)(*(void *)(a1 + 8) - 24);
  float v10 = v9 - v8;
  int v100 = a2;
  if ((float)(v9 - v8) < 6.6667)
  {
    *(_DWORD *)(a3 + 224) = 1084227584;
    float v11 = 2.5;
    float v12 = 1.0;
    float v13 = 10.0;
LABEL_11:
    float v18 = (float)((float)(v8 + v9) + (float)(v12 * -10.0)) * 0.5;
    *(float *)(a3 + 196) = v18;
    unint64_t v15 = 1;
    goto LABEL_12;
  }
  float v14 = 3.4028e38;
  unint64_t v15 = 1;
  for (uint64_t i = 2; i != 7; ++i)
  {
    float v17 = fabsf((float)(v10 / (float)(i - 1)) + -10.0);
    if (v17 < v14)
    {
      float v14 = v17;
      unint64_t v15 = i;
    }
  }
  float v13 = v10 / (float)(v15 - 1);
  float v12 = v13 / 10.0;
  *(float *)(a3 + 224) = (float)(v13 / 10.0) * 5.0;
  if (v15 >= 7)
  {
    if (qword_1EB3BE868 != -1) {
      dispatch_once(&qword_1EB3BE868, &unk_1EDFD3340);
    }
    float v97 = qword_1EB3BE860;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      __int16 v102 = 2081;
      v103 = "subfitCount <= Fit::kFitSegments - 2";
      _os_log_impl(&dword_1902AF000, v97, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE868 != -1) {
        dispatch_once(&qword_1EB3BE868, &unk_1EDFD3340);
      }
    }
    float v98 = qword_1EB3BE860;
    if (os_signpost_enabled((os_log_t)qword_1EB3BE860))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      __int16 v102 = 2081;
      v103 = "subfitCount <= Fit::kFitSegments - 2";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v98, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE868 != -1) {
        dispatch_once(&qword_1EB3BE868, &unk_1EDFD3340);
      }
    }
    float v99 = qword_1EB3BE860;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      __int16 v102 = 2081;
      v103 = "subfitCount <= Fit::kFitSegments - 2";
      _os_log_impl(&dword_1902AF000, v99, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
  }
  float v11 = (float)(v12 * 0.5) * 5.0;
  if (v15 == 1) {
    goto LABEL_11;
  }
  float v18 = v8 + (float)((float)(v12 * 0.5) * -10.0);
  *(float *)(a3 + 196) = v18;
  if (!v15)
  {
    int v21 = 1;
    char v20 = 1;
    goto LABEL_16;
  }
LABEL_12:
  for (uint64_t j = 0; j != v15; ++j)
  {
    float v18 = v13 + v18;
    *(float *)(a3 + 200 + 4 * j) = v18;
  }
  if (v15 > 5)
  {
LABEL_17:
    uint64_t v23 = 0;
    uint64_t v24 = a3 + 28;
    do
    {
      float v25 = *(float *)(a3 + 196 + 4 * v23) - v11;
      uint64_t v26 = v23 + 1;
      float v27 = v11 + *(float *)(a3 + 196 + 4 * (v23 + 1));
      __int16 v29 = *(float **)a1;
      __int16 v28 = *(float **)(a1 + 8);
      if (v28 == *(float **)a1)
      {
        int v36 = *(float **)(a1 + 8);
      }
      else
      {
        unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v28 - *(void *)a1) >> 3);
        do
        {
          unint64_t v31 = v30 >> 1;
          uint64_t v32 = &v29[6 * (v30 >> 1)];
          float v34 = *v32;
          __int16 v33 = v32 + 6;
          v30 += ~(v30 >> 1);
          if (v34 < v25) {
            __int16 v29 = v33;
          }
          else {
            unint64_t v30 = v31;
          }
        }
        while (v30);
        if (v28 == v29)
        {
          int v36 = *(float **)(a1 + 8);
        }
        else
        {
          unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v29) >> 3);
          int v36 = v29;
          do
          {
            unint64_t v37 = v35 >> 1;
            __int32 v38 = &v36[6 * (v35 >> 1)];
            float v40 = *v38;
            uint64_t v39 = v38 + 6;
            v35 += ~(v35 >> 1);
            if (v40 > v27) {
              unint64_t v35 = v37;
            }
            else {
              int v36 = v39;
            }
          }
          while (v35);
        }
        __int16 v28 = v29;
      }
      sub_19058CBEC(v28, v36, 0, 0, (float *)buf);
      uint64_t v41 = a3 + 24 * v26;
      *(_OWORD *)(v41 + 4) = *(_OWORD *)buf;
      *(void *)(v41 + 20) = *(void *)&buf[16];
      if (!v23)
      {
        for (uint64_t k = 0; k != 12; k += 4)
          *(float *)(a3 + k + 16) = *(float *)(a3 + k + 40) + (float)(v25 * *(float *)(a3 + k + 28));
      }
      if (v15 - 1 == v23)
      {
        for (uint64_t m = 0; m != 12; m += 4)
          *(float *)(a3 + 24 * v15 + 40 + m) = *(float *)(v24 + m + 12) + (float)(v27 * *(float *)(v24 + m));
      }
      v24 += 24;
      ++v23;
    }
    while (v26 != v15);
    goto LABEL_41;
  }
  char v20 = 0;
  int v21 = v15 + 1;
LABEL_16:
  memset_pattern16((void *)(a3 + (4 * v21 + 196)), &unk_19060C450, 4 * (6 - v21) + 4);
  if ((v20 & 1) == 0) {
    goto LABEL_17;
  }
LABEL_41:
  if (v100)
  {
    unint64_t v44 = 0;
    double v45 = (unsigned char *)(a3 + 228);
    float32x2_t v46 = (float32x2_t)vdup_n_s32(0x3C8EFA35u);
    float32x2_t v47 = (float32x2_t)vdup_n_s32(0x42652EE1u);
    while (1)
    {
      __int16 v48 = *(float **)(a1 + 8);
      if (v48 == *(float **)a1) {
        break;
      }
      float v49 = (float)((float)(int)v44 * 4.0) + 2.0;
      unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v48 - *(void *)a1) >> 3);
      double v51 = *(float **)a1;
      do
      {
        unint64_t v52 = v50 >> 1;
        double v53 = &v51[6 * (v50 >> 1)];
        float v55 = *v53;
        __int16 v54 = v53 + 6;
        v50 += ~(v50 >> 1);
        if (v55 < (float)(v49 + -2.0)) {
          double v51 = v54;
        }
        else {
          unint64_t v50 = v52;
        }
      }
      while (v50);
      if (v48 == v51)
      {
        long long v63 = v51;
        double v51 = *(float **)(a1 + 8);
        goto LABEL_58;
      }
      float v56 = v49 + 2.0;
      unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * (((char *)v48 - (char *)v51) >> 3);
      uint64_t v58 = v51;
      do
      {
        unint64_t v59 = v57 >> 1;
        float v60 = &v58[6 * (v57 >> 1)];
        float v62 = *v60;
        long long v61 = v60 + 6;
        v57 += ~(v57 >> 1);
        if (v62 > v56) {
          unint64_t v57 = v59;
        }
        else {
          uint64_t v58 = v61;
        }
      }
      while (v57);
      long long v63 = v51;
LABEL_59:
      unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * (((char *)v58 - (char *)v63) >> 3);
      if (v64 > 4)
      {
        float32x2_t v67 = 0;
        *(void *)uint64_t buf = 0;
        *(_DWORD *)&uint8_t buf[8] = 0;
        if (v51 == v58)
        {
          float v70 = 0.0;
LABEL_76:
          unint64_t v91 = 0;
          *(float *)v22.i32 = (float)v64;
          *(float32x2_t *)uint64_t buf = vdiv_f32(v67, (float32x2_t)vdup_lane_s32(v22, 0));
          *(float *)&uint8_t buf[8] = v70 / (float)v64;
          float v92 = v45;
          do
          {
            float v93 = sqrtf(*(float *)sub_19042D844((uint64_t)buf, v91)) * 100.0;
            if (v93 < 1.0) {
              float v93 = 1.0;
            }
            *float v92 = (int)v93;
            v92 += 18;
            ++v91;
          }
          while (v91 != 3);
          goto LABEL_80;
        }
        float v69 = *(float *)(a3 + 220);
        float v68 = *(float *)(a3 + 224);
        float v70 = 0.0;
        while (2)
        {
          uint64_t v71 = 0;
          float v72 = *v51;
          while (1)
          {
            float v73 = *(float *)(a3 + 196 + 4 * v71);
            if ((float)(v68 + v73) > v72) {
              break;
            }
            if (++v71 == 6)
            {
              float v73 = v69;
              break;
            }
          }
          float v74 = (float)((float)(v72 - v73) / (float)(v68 + v68)) + 0.5;
          if (v74 <= 0.0)
          {
            uint64_t v83 = a3 + 24 * v71;
            float v84 = *(float *)(v83 + 24);
            float v85 = v72 * *(float *)(v83 + 12);
            float32x2_t v86 = *(float32x2_t *)(v83 + 4);
            float32x2_t v87 = *(float32x2_t *)(v83 + 16);
          }
          else
          {
            if (v74 < 1.0)
            {
              float v75 = v74 * (float)(v74 * (float)((float)(v74 * -2.0) + 3.0));
              uint64_t v76 = a3 + 24 * v71;
              float v77 = (float)((float)(v72 * *(float *)(v76 + 12)) + *(float *)(v76 + 24)) * 0.017453;
              float32x2_t v78 = vmul_n_f32(*(float32x2_t *)(v76 + 28), v72);
              float v79 = (float)((float)((float)(v72 * *(float *)(v76 + 36)) + *(float *)(v76 + 48)) * 0.017453) - v77;
              float32x2_t v80 = vmul_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v76 + 4), v72), *(float32x2_t *)(v76 + 16)), v46);
              float32x2_t v81 = vadd_f32(v80, vmul_n_f32(vsub_f32(vmul_f32(vadd_f32(v78, *(float32x2_t *)(v76 + 40)), v46), v80), v75));
              float v82 = v77 + (float)(v75 * v79);
              goto LABEL_73;
            }
            uint64_t v88 = a3 + 24 * v71;
            float v84 = *(float *)(v88 + 48);
            float v85 = v72 * *(float *)(v88 + 36);
            float32x2_t v86 = *(float32x2_t *)(v88 + 28);
            float32x2_t v87 = *(float32x2_t *)(v88 + 40);
          }
          float32x2_t v81 = vmul_f32(vadd_f32(vmul_n_f32(v86, v72), v87), v46);
          float v82 = (float)(v85 + v84) * 0.017453;
LABEL_73:
          float v89 = (float)(v82 * 57.296) - v51[3];
          float32x2_t v90 = vsub_f32(vmul_f32(v81, v47), *(float32x2_t *)(v51 + 1));
          float32x2_t v67 = vmla_f32(v67, v90, v90);
          *(float32x2_t *)uint64_t buf = v67;
          float v70 = v70 + (float)(v89 * v89);
          *(float *)&uint8_t buf[8] = v70;
          v51 += 6;
          if (v51 == v58) {
            goto LABEL_76;
          }
          continue;
        }
      }
      float v65 = sub_19056A7F0(*(void *)a1, v48, v44);
      uint64_t v66 = a3 + v44;
      *(unsigned char *)(v66 + 264) = (int)v65;
      *(unsigned char *)(v66 + 246) = (int)v65;
      *(unsigned char *)(a3 + 228 + v44) = (int)v65;
LABEL_80:
      ++v44;
      ++v45;
      if (v44 == 18) {
        return;
      }
    }
    double v51 = *(float **)a1;
    long long v63 = *(float **)(a1 + 8);
LABEL_58:
    uint64_t v58 = *(float **)(a1 + 8);
    goto LABEL_59;
  }
  for (unint64_t n = 0; n != 18; ++n)
  {
    float v95 = sub_19056A7F0(*(void *)a1, *(float **)(a1 + 8), n);
    float v96 = (unsigned char *)(a3 + n);
    v96[264] = (int)v95;
    v96[246] = (int)v95;
    v96[228] = (int)v95;
  }
}

void sub_19056B544(uint64_t a1, uint64_t *a2, int a3, double a4)
{
  uint64_t v7 = 0;
  __p = 0;
  float v40 = 0;
  do
  {
    for (uint64_t i = 0; i != 18; ++i)
    {
      float v9 = __p;
      uint64_t v39 = __p;
      uint64_t v10 = *a2;
      uint64_t v11 = a2[1];
      float v12 = 7.0;
      if (*a2 != v11)
      {
        float v13 = (float)((float)(int)i * 4.0) + 2.0;
        float v14 = v13 + -2.0;
        float v15 = v13 + 2.0;
        do
        {
          if (v14 <= *(float *)v10 && *(float *)v10 < v15)
          {
            float v17 = a4 - *(double *)(v10 + 16);
            float v18 = fabsf(v17);
            if (v9 >= (float *)v40)
            {
              char v20 = __p;
              uint64_t v21 = v9 - __p;
              unint64_t v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 62) {
                sub_1903479E8();
              }
              uint64_t v23 = v40 - (char *)__p;
              if ((v40 - (char *)__p) >> 1 > v22) {
                unint64_t v22 = v23 >> 1;
              }
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v24 = v22;
              }
              if (v24)
              {
                float v25 = (char *)sub_190347D04((uint64_t)&v40, v24);
                char v20 = __p;
                float v9 = v39;
              }
              else
              {
                float v25 = 0;
              }
              uint64_t v26 = (float *)&v25[4 * v21];
              float *v26 = v18;
              __int16 v19 = v26 + 1;
              while (v9 != v20)
              {
                int v27 = *((_DWORD *)v9-- - 1);
                *((_DWORD *)v26-- - 1) = v27;
              }
              __p = v26;
              float v40 = &v25[4 * v24];
              if (v20) {
                operator delete(v20);
              }
            }
            else
            {
              float *v9 = v18;
              __int16 v19 = v9 + 1;
            }
            uint64_t v39 = v19;
            float v9 = v19;
          }
          v10 += 24;
        }
        while (v10 != v11);
        if (v9 != __p)
        {
          if ((unint64_t)((char *)v9 - (char *)__p) > 0xB)
          {
            __int16 v28 = __p + 2;
            if (__p + 2 != v9) {
              sub_1904CF000((uint64_t)__p, __p + 2, v9);
            }
          }
          else
          {
            __int16 v28 = v9 - 1;
          }
          float v12 = *v28 / 86400.0;
        }
      }
      uint64_t v29 = a1 + 18 * v7 + i;
      unsigned int v31 = *(unsigned __int8 *)(v29 + 228);
      unint64_t v30 = (unsigned char *)(v29 + 228);
      float v32 = (float)v31 * 0.01;
      if (a3)
      {
        if (v12 > 2.0 && v32 < 0.1) {
          float v32 = 0.1;
        }
      }
      else
      {
        int v33 = (int)v12;
        if ((int)v12 >= 6) {
          int v33 = 6;
        }
        float v32 = v32 + flt_19060C3AC[v33 & ~(v33 >> 31)];
      }
      float v34 = v32 * 100.0;
      BOOL v35 = v32 <= 2.5;
      float v36 = 250.0;
      if (v35) {
        float v36 = v34;
      }
      *unint64_t v30 = (int)v36;
    }
    ++v7;
  }
  while (v7 != 3);
  if (__p) {
    operator delete(__p);
  }
}

void sub_19056B7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19056B814()
{
}

float sub_19056B828(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 4);
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 20) = 1;
  return result;
}

void sub_19056B854(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                float v41 = *(float *)(a2 - 24);
                unint64_t v40 = a2 - 24;
                if (v41 < *(float *)v10)
                {
                  uint64_t v100 = *(void *)(v10 + 16);
                  long long v92 = *(_OWORD *)v10;
                  long long v42 = *(_OWORD *)v40;
                  *(void *)(v10 + 16) = *(void *)(v40 + 16);
                  *(_OWORD *)unint64_t v10 = v42;
                  *(void *)(v40 + 16) = v100;
                  *(_OWORD *)unint64_t v40 = v92;
                }
                break;
              case 3uLL:
                sub_19056C130((long long *)v10, (long long *)(v10 + 24), (long long *)(a2 - 24));
                break;
              case 4uLL:
                sub_19056C428(v10, v10 + 24, v10 + 48, a2 - 24);
                break;
              case 5uLL:
                sub_19056C4F8((__n128 *)v10, (__n128 *)(v10 + 24), (__n128 *)(v10 + 48), (__n128 *)(v10 + 72), (__n128 *)(a2 - 24));
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 575)
          {
            unint64_t v43 = v10 + 24;
            BOOL v45 = v10 == a2 || v43 == a2;
            if (a4)
            {
              if (!v45)
              {
                uint64_t v46 = 0;
                unint64_t v47 = v10;
                do
                {
                  unint64_t v48 = v43;
                  float v49 = *(float *)(v47 + 24);
                  if (v49 < *(float *)v47)
                  {
                    long long v93 = *(_OWORD *)(v47 + 28);
                    int v101 = *(_DWORD *)(v47 + 44);
                    uint64_t v50 = v46;
                    while (1)
                    {
                      uint64_t v51 = v10 + v50;
                      *(_OWORD *)(v51 + 24) = *(_OWORD *)(v10 + v50);
                      *(void *)(v51 + 40) = *(void *)(v10 + v50 + 16);
                      if (!v50) {
                        break;
                      }
                      v50 -= 24;
                      if (v49 >= *(float *)(v51 - 24))
                      {
                        uint64_t v52 = v10 + v50 + 24;
                        goto LABEL_78;
                      }
                    }
                    uint64_t v52 = v10;
LABEL_78:
                    *(float *)uint64_t v52 = v49;
                    *(_DWORD *)(v52 + 20) = v101;
                    *(_OWORD *)(v52 + 4) = v93;
                  }
                  unint64_t v43 = v48 + 24;
                  v46 += 24;
                  unint64_t v47 = v48;
                }
                while (v48 + 24 != a2);
              }
            }
            else if (!v45)
            {
              do
              {
                unint64_t v79 = v43;
                float v80 = *(float *)(a1 + 24);
                if (v80 < *(float *)a1)
                {
                  long long v96 = *(_OWORD *)(a1 + 28);
                  int v104 = *(_DWORD *)(a1 + 44);
                  unint64_t v81 = v43;
                  do
                  {
                    *(_OWORD *)unint64_t v81 = *(_OWORD *)(v81 - 24);
                    *(void *)(v81 + 16) = *(void *)(v81 - 8);
                    float v82 = *(float *)(v81 - 48);
                    v81 -= 24;
                  }
                  while (v80 < v82);
                  *(float *)unint64_t v81 = v80;
                  *(_DWORD *)(v81 + 20) = v104;
                  *(_OWORD *)(v81 + 4) = v96;
                }
                v43 += 24;
                a1 = v79;
              }
              while (v79 + 24 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v53 = (v12 - 2) >> 1;
              int64_t v54 = v53;
              do
              {
                int64_t v55 = v54;
                if (v53 >= v54)
                {
                  uint64_t v56 = (2 * v54) | 1;
                  unint64_t v57 = v10 + 24 * v56;
                  if (2 * v55 + 2 < (uint64_t)v12 && *(float *)v57 < *(float *)(v57 + 24))
                  {
                    v57 += 24;
                    uint64_t v56 = 2 * v55 + 2;
                  }
                  unint64_t v58 = v10 + 24 * v55;
                  float v59 = *(float *)v58;
                  if (*(float *)v57 >= *(float *)v58)
                  {
                    int v102 = *(_DWORD *)(v58 + 20);
                    long long v94 = *(_OWORD *)(v58 + 4);
                    do
                    {
                      unint64_t v60 = v58;
                      unint64_t v58 = v57;
                      long long v61 = *(_OWORD *)v57;
                      *(void *)(v60 + 16) = *(void *)(v57 + 16);
                      *(_OWORD *)unint64_t v60 = v61;
                      if (v53 < v56) {
                        break;
                      }
                      uint64_t v62 = 2 * v56;
                      uint64_t v56 = (2 * v56) | 1;
                      unint64_t v57 = v10 + 24 * v56;
                      uint64_t v63 = v62 + 2;
                      if (v63 < (uint64_t)v12 && *(float *)v57 < *(float *)(v57 + 24))
                      {
                        v57 += 24;
                        uint64_t v56 = v63;
                      }
                    }
                    while (*(float *)v57 >= v59);
                    *(float *)unint64_t v58 = v59;
                    *(_DWORD *)(v58 + 20) = v102;
                    *(_OWORD *)(v58 + 4) = v94;
                  }
                }
                int64_t v54 = v55 - 1;
              }
              while (v55);
              int64_t v64 = v11 / 0x18uLL;
              do
              {
                uint64_t v65 = 0;
                uint64_t v103 = *(void *)(v10 + 16);
                long long v95 = *(_OWORD *)v10;
                unint64_t v66 = v10;
                do
                {
                  unint64_t v67 = v66;
                  v66 += 24 * v65 + 24;
                  uint64_t v68 = 2 * v65;
                  uint64_t v65 = (2 * v65) | 1;
                  int64_t v69 = v68 + 2;
                  if (v69 < v64 && *(float *)v66 < *(float *)(v66 + 24))
                  {
                    v66 += 24;
                    uint64_t v65 = v69;
                  }
                  long long v70 = *(_OWORD *)v66;
                  *(void *)(v67 + 16) = *(void *)(v66 + 16);
                  *(_OWORD *)unint64_t v67 = v70;
                }
                while (v65 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
                a2 -= 24;
                if (v66 == a2)
                {
                  *(void *)(v66 + 16) = v103;
                  *(_OWORD *)unint64_t v66 = v95;
                }
                else
                {
                  long long v71 = *(_OWORD *)a2;
                  *(void *)(v66 + 16) = *(void *)(a2 + 16);
                  *(_OWORD *)unint64_t v66 = v71;
                  *(void *)(a2 + 16) = v103;
                  *(_OWORD *)a2 = v95;
                  uint64_t v72 = v66 - v10 + 24;
                  if (v72 >= 25)
                  {
                    unint64_t v73 = (v72 / 0x18uLL - 2) >> 1;
                    unint64_t v74 = v10 + 24 * v73;
                    float v75 = *(float *)v66;
                    if (*(float *)v74 < *(float *)v66)
                    {
                      int v88 = *(_DWORD *)(v66 + 20);
                      long long v85 = *(_OWORD *)(v66 + 4);
                      do
                      {
                        unint64_t v76 = v66;
                        unint64_t v66 = v74;
                        long long v77 = *(_OWORD *)v74;
                        *(void *)(v76 + 16) = *(void *)(v74 + 16);
                        *(_OWORD *)unint64_t v76 = v77;
                        if (!v73) {
                          break;
                        }
                        unint64_t v73 = (v73 - 1) >> 1;
                        unint64_t v74 = v10 + 24 * v73;
                      }
                      while (*(float *)v74 < v75);
                      *(float *)unint64_t v66 = v75;
                      *(_DWORD *)(v66 + 20) = v88;
                      *(_OWORD *)(v66 + 4) = v85;
                    }
                  }
                }
              }
              while (v64-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 24 * (v12 >> 1);
          if ((unint64_t)v11 >= 0xC01)
          {
            sub_19056C130((long long *)a1, (long long *)(a1 + 24 * (v12 >> 1)), (long long *)(a2 - 24));
            uint64_t v15 = 3 * v13;
            float v16 = (long long *)(a1 + 24 * v13 - 24);
            sub_19056C130((long long *)(a1 + 24), v16, (long long *)(a2 - 48));
            float v17 = (long long *)(a1 + 24 + 8 * v15);
            sub_19056C130((long long *)(a1 + 48), v17, (long long *)(a2 - 72));
            sub_19056C130(v16, (long long *)v14, v17);
            uint64_t v97 = *(void *)(a1 + 16);
            long long v89 = *(_OWORD *)a1;
            uint64_t v18 = *(void *)(v14 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(void *)(a1 + 16) = v18;
            *(void *)(v14 + 16) = v97;
            *(_OWORD *)unint64_t v14 = v89;
          }
          else
          {
            sub_19056C130((long long *)(a1 + 24 * (v12 >> 1)), (long long *)a1, (long long *)(a2 - 24));
          }
          --a3;
          float v19 = *(float *)a1;
          if ((a4 & 1) != 0 || *(float *)(a1 - 24) < v19) {
            break;
          }
          int v87 = *(_DWORD *)(a1 + 20);
          long long v84 = *(_OWORD *)(a1 + 4);
          if (v19 >= *(float *)(a2 - 24))
          {
            unint64_t v33 = a1 + 24;
            do
            {
              unint64_t v10 = v33;
              if (v33 >= a2) {
                break;
              }
              v33 += 24;
            }
            while (v19 >= *(float *)v10);
          }
          else
          {
            unint64_t v10 = a1;
            do
            {
              float v32 = *(float *)(v10 + 24);
              v10 += 24;
            }
            while (v19 >= v32);
          }
          unint64_t v34 = a2;
          if (v10 < a2)
          {
            unint64_t v34 = a2;
            do
            {
              float v35 = *(float *)(v34 - 24);
              v34 -= 24;
            }
            while (v19 < v35);
          }
          while (v10 < v34)
          {
            uint64_t v99 = *(void *)(v10 + 16);
            long long v91 = *(_OWORD *)v10;
            long long v36 = *(_OWORD *)v34;
            *(void *)(v10 + 16) = *(void *)(v34 + 16);
            *(_OWORD *)unint64_t v10 = v36;
            *(void *)(v34 + 16) = v99;
            *(_OWORD *)unint64_t v34 = v91;
            do
            {
              float v37 = *(float *)(v10 + 24);
              v10 += 24;
            }
            while (v19 >= v37);
            do
            {
              float v38 = *(float *)(v34 - 24);
              v34 -= 24;
            }
            while (v19 < v38);
          }
          BOOL v4 = v10 - 24 >= a1;
          BOOL v5 = v10 - 24 == a1;
          if (v10 - 24 != a1)
          {
            long long v39 = *(_OWORD *)(v10 - 24);
            *(void *)(a1 + 16) = *(void *)(v10 - 8);
            *(_OWORD *)a1 = v39;
          }
          a4 = 0;
          *(float *)(v10 - 24) = v19;
          *(_DWORD *)(v10 - 4) = v87;
          *(_OWORD *)(v10 - 20) = v84;
        }
        uint64_t v20 = 0;
        int v86 = *(_DWORD *)(a1 + 20);
        long long v83 = *(_OWORD *)(a1 + 4);
        do
        {
          float v21 = *(float *)(a1 + v20 + 24);
          v20 += 24;
        }
        while (v21 < v19);
        unint64_t v22 = a1 + v20;
        unint64_t v23 = a2;
        if (v20 == 24)
        {
          unint64_t v23 = a2;
          do
          {
            if (v22 >= v23) {
              break;
            }
            float v25 = *(float *)(v23 - 24);
            v23 -= 24;
          }
          while (v25 >= v19);
        }
        else
        {
          do
          {
            float v24 = *(float *)(v23 - 24);
            v23 -= 24;
          }
          while (v24 >= v19);
        }
        unint64_t v10 = a1 + v20;
        if (v22 < v23)
        {
          unint64_t v26 = v23;
          do
          {
            uint64_t v98 = *(void *)(v10 + 16);
            long long v90 = *(_OWORD *)v10;
            long long v27 = *(_OWORD *)v26;
            *(void *)(v10 + 16) = *(void *)(v26 + 16);
            *(_OWORD *)unint64_t v10 = v27;
            *(void *)(v26 + 16) = v98;
            *(_OWORD *)unint64_t v26 = v90;
            do
            {
              float v28 = *(float *)(v10 + 24);
              v10 += 24;
            }
            while (v28 < v19);
            do
            {
              float v29 = *(float *)(v26 - 24);
              v26 -= 24;
            }
            while (v29 >= v19);
          }
          while (v10 < v26);
        }
        if (v10 - 24 != a1)
        {
          long long v30 = *(_OWORD *)(v10 - 24);
          *(void *)(a1 + 16) = *(void *)(v10 - 8);
          *(_OWORD *)a1 = v30;
        }
        *(float *)(v10 - 24) = v19;
        *(_DWORD *)(v10 - 4) = v86;
        *(_OWORD *)(v10 - 20) = v83;
        if (v22 >= v23) {
          break;
        }
LABEL_30:
        sub_19056B854(a1, v10 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v31 = sub_19056C220(a1, v10 - 24);
      if (sub_19056C220(v10, a2)) {
        break;
      }
      if (!v31) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 24;
    if (!v31) {
      continue;
    }
    break;
  }
}

long long *sub_19056C130(long long *result, long long *a2, long long *a3)
{
  float v3 = *(float *)a2;
  float v4 = *(float *)a3;
  if (*(float *)a2 >= *(float *)result)
  {
    if (v4 < v3)
    {
      uint64_t v8 = *((void *)a2 + 2);
      long long v9 = *a2;
      uint64_t v10 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v10;
      *a3 = v9;
      *((void *)a3 + 2) = v8;
      if (*(float *)a2 < *(float *)result)
      {
        uint64_t v11 = *((void *)result + 2);
        long long v12 = *result;
        uint64_t v13 = *((void *)a2 + 2);
        *float result = *a2;
        *((void *)result + 2) = v13;
        *a2 = v12;
        *((void *)a2 + 2) = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      uint64_t v14 = *((void *)result + 2);
      long long v15 = *result;
      uint64_t v16 = *((void *)a2 + 2);
      *float result = *a2;
      *((void *)result + 2) = v16;
      *a2 = v15;
      *((void *)a2 + 2) = v14;
      if (*(float *)a3 >= *(float *)a2) {
        return result;
      }
      uint64_t v5 = *((void *)a2 + 2);
      long long v6 = *a2;
      uint64_t v17 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v17;
    }
    else
    {
      uint64_t v5 = *((void *)result + 2);
      long long v6 = *result;
      uint64_t v7 = *((void *)a3 + 2);
      *float result = *a3;
      *((void *)result + 2) = v7;
    }
    *a3 = v6;
    *((void *)a3 + 2) = v5;
  }
  return result;
}

BOOL sub_19056C220(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      long long v6 = (long long *)(a2 - 24);
      if (*(float *)(a2 - 24) < *(float *)a1)
      {
        uint64_t v7 = *(void *)(a1 + 16);
        long long v8 = *(_OWORD *)a1;
        uint64_t v9 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(void *)(a1 + 16) = v9;
        long long *v6 = v8;
        *(void *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      sub_19056C130((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_19056C428(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      sub_19056C4F8((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), (__n128 *)(a2 - 24));
      return 1;
    default:
      uint64_t v10 = (float *)(a1 + 48);
      sub_19056C130((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48));
      uint64_t v11 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    float v14 = *(float *)v11;
    if (*(float *)v11 < *v10)
    {
      long long v18 = *(_OWORD *)(v11 + 4);
      int v19 = *(_DWORD *)(v11 + 20);
      uint64_t v15 = v12;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(void *)(v16 + 88) = *(void *)(a1 + v15 + 64);
        if (v15 == -48) {
          break;
        }
        v15 -= 24;
        if (v14 >= *(float *)(v16 + 24))
        {
          uint64_t v17 = a1 + v15 + 72;
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      *(float *)uint64_t v17 = v14;
      *(_OWORD *)(v17 + 4) = v18;
      *(_DWORD *)(v17 + 20) = v19;
      if (++v13 == 8) {
        return v11 + 24 == a2;
      }
    }
    uint64_t v10 = (float *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2) {
      return 1;
    }
  }
}

__n128 sub_19056C428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_19056C130((long long *)a1, (long long *)a2, (long long *)a3);
  result.n128_u32[0] = *(_DWORD *)a4;
  if (*(float *)a4 < *(float *)a3)
  {
    uint64_t v9 = *(void *)(a3 + 16);
    __n128 result = *(__n128 *)a3;
    uint64_t v10 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    *(void *)(a4 + 16) = v9;
    result.n128_u32[0] = *(_DWORD *)a3;
    if (*(float *)a3 < *(float *)a2)
    {
      uint64_t v11 = *(void *)(a2 + 16);
      __n128 result = *(__n128 *)a2;
      uint64_t v12 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v12;
      *(__n128 *)a3 = result;
      *(void *)(a3 + 16) = v11;
      result.n128_u32[0] = *(_DWORD *)a2;
      if (*(float *)a2 < *(float *)a1)
      {
        uint64_t v13 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v14 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v13;
      }
    }
  }
  return result;
}

__n128 sub_19056C4F8(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  __n128 result = sub_19056C428((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
  result.n128_u32[0] = a5->n128_u32[0];
  if (a5->n128_f32[0] < a4->n128_f32[0])
  {
    unint64_t v11 = a4[1].n128_u64[0];
    __n128 result = *a4;
    unint64_t v12 = a5[1].n128_u64[0];
    *a4 = *a5;
    a4[1].n128_u64[0] = v12;
    *a5 = result;
    a5[1].n128_u64[0] = v11;
    result.n128_u32[0] = a4->n128_u32[0];
    if (a4->n128_f32[0] < a3->n128_f32[0])
    {
      unint64_t v13 = a3[1].n128_u64[0];
      __n128 result = *a3;
      unint64_t v14 = a4[1].n128_u64[0];
      *a3 = *a4;
      a3[1].n128_u64[0] = v14;
      *a4 = result;
      a4[1].n128_u64[0] = v13;
      result.n128_u32[0] = a3->n128_u32[0];
      if (a3->n128_f32[0] < a2->n128_f32[0])
      {
        unint64_t v15 = a2[1].n128_u64[0];
        __n128 result = *a2;
        unint64_t v16 = a3[1].n128_u64[0];
        *a2 = *a3;
        a2[1].n128_u64[0] = v16;
        *a3 = result;
        a3[1].n128_u64[0] = v15;
        result.n128_u32[0] = a2->n128_u32[0];
        if (a2->n128_f32[0] < a1->n128_f32[0])
        {
          unint64_t v17 = a1[1].n128_u64[0];
          __n128 result = *a1;
          unint64_t v18 = a2[1].n128_u64[0];
          *a1 = *a2;
          a1[1].n128_u64[0] = v18;
          *a2 = result;
          a2[1].n128_u64[0] = v17;
        }
      }
    }
  }
  return result;
}

uint64_t sub_19056C88C(uint64_t a1, void *a2)
{
  return objc_msgSend_onDeviceOrientation_(a2, (const char *)a2, a1);
}

void sub_19056CC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19056CC1C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t result = objc_msgSend_initPrivate(*(void **)(a1 + 32), a2, a3);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = result;
  return result;
}

void sub_19056CCE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1902D6BD0();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_19056EDCC;
  v4[3] = &unk_1E568D118;
  v4[4] = a2;
  sub_1902CE9BC(v3, (uint64_t)v4);
}

void sub_19056CE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19056CE54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), sel_deallocPrivate, a3);
}

void sub_19056D1B8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_19056D25C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_userInfo(*(void **)(a1 + 32), a2, a3);
  long long v6 = objc_msgSend_objectForKey_(v4, v5, @"CMSetDeviceOrientationTypeKey");
  uint64_t v9 = objc_msgSend_intValue(v6, v7, v8);
  if (v9 >= 7)
  {
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD2540);
    }
    uint64_t v10 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v9;
      _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_FAULT, "The orientation %{public}d is not in bounds", buf, 8u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD2540);
      }
      unint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMDeviceOrientationManager onNotification:]_block_invoke", "CoreLocation: %s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
  }
  uint64_t v18 = 0;
  *(void *)uint64_t buf = CFAbsoluteTimeGetCurrent();
  LODWORD(v18) = v9;
  unint64_t v12 = objc_msgSend_objectForKey_(v4, v11, @"CMPersistOrientationCallbackModeKey");
  if (!v12 || objc_msgSend_BOOLValue(v12, v13, v14)) {
    objc_msgSend_setDeviceOrientationCallbackModePrivate_(*(void **)(a1 + 40), v13, v9);
  }
  return objc_msgSend_onDeviceOrientation_(*(void **)(a1 + 40), v13, (uint64_t)buf);
}

uint64_t sub_19056D728(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_startDeviceOrientationUpdatesPrivateToQueue_withHandler_, *(void *)(a1 + 40));
}

uint64_t sub_19056D964(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_stopDeviceOrientationUpdatesPrivate(*(void **)(a1 + 32), a2, a3);
}

void sub_19056DB34(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

id sub_19056DB78(uint64_t a1)
{
  id result = objc_loadWeak((id *)(a1 + 40));
  if (result)
  {
    uint64_t v4 = *(void *)(a1 + 32) + 64;
    return (id)objc_msgSend_onDeviceOrientation_(result, v3, v4);
  }
  return result;
}

void sub_19056DD54(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1902D8B58(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19056E360(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_19056EC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19056EC7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 48))
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = *(void *)(v1 + 40);
    uint64_t v2 = *(NSObject **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    if (v2) {
      dispatch_retain(v2);
    }
  }
}

os_log_t sub_19056ED9C()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Orientation");
  off_1EB3BE820 = result;
  return result;
}

uint64_t sub_19056EDCC(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_onMotionPreferencesUpdated(*(void **)(a1 + 32), a2, a3);
}

uint64_t sub_19056EDD4(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = *a1;
  switch(v2)
  {
    case 255:
      return 0;
    case 2:
      (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)a2 + 24))(a2, a1);
      break;
    case 1:
      (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)a2 + 16))(a2, a1);
      break;
  }
  return 1;
}

void *sub_19056EE70(void *a1)
{
  *a1 = &unk_1EDFC81E8;
  uint64_t v2 = a1[10];
  a1[10] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  return sub_1904DC240(a1);
}

void sub_19056EEF4(void *a1)
{
  sub_19056EE70(a1);

  JUMPOUT(0x192FCC980);
}

void sub_19056EF2C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = sub_1902D6BD0();
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = sub_19056EFBC;
  v7[3] = &unk_1E568E3E0;
  v7[4] = a1;
  void v7[5] = a2;
  *(double *)&v7[6] = a3;
  sub_1902CDE98(v6, (uint64_t)v7);
}

void sub_19056EFBC(uint64_t a1)
{
  uint64_t v1 = (void *)a1;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(const char **)(a1 + 32);
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40));
  if (v3)
  {
    uint64_t v4 = (char *)v3;
    if (qword_1EB3BE878 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
    }
    unint64_t v13 = off_1EB3BE870;
    uint64_t v4 = "assert";
    uint64_t v2 = "properties != nullptr";
    if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)uint64_t v20 = 0;
      *(_WORD *)&v20[4] = 2082;
      *(void *)&v20[6] = "";
      __int16 v21 = 2082;
      unint64_t v22 = "assert";
      __int16 v23 = 2081;
      float v24 = "properties != nullptr";
      _os_log_impl(&dword_1902AF000, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE878 != -1) {
        dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
      }
    }
    uint64_t v14 = off_1EB3BE870;
    if (os_signpost_enabled((os_log_t)off_1EB3BE870))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)uint64_t v20 = 0;
      *(_WORD *)&v20[4] = 2082;
      *(void *)&v20[6] = "";
      __int16 v21 = 2082;
      unint64_t v22 = "assert";
      __int16 v23 = 2081;
      float v24 = "properties != nullptr";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE878 != -1) {
        dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
      }
    }
    uint64_t v1 = off_1EB3BE870;
    if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)uint64_t v20 = 0;
      *(_WORD *)&v20[4] = 2082;
      *(void *)&v20[6] = "";
      __int16 v21 = 2082;
      unint64_t v22 = "assert";
      __int16 v23 = 2081;
      float v24 = "properties != nullptr";
      _os_log_impl(&dword_1902AF000, (os_log_t)v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    uint64_t v17 = 180;
    uint64_t v18 = "setDeviceMotionUpdateInterval_block_invoke";
    unint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Shared/Motion/Notifiers/CLDeviceMotion.mm";
    abort_report_np();
  }
  dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
LABEL_3:
  uint64_t v5 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *((void *)v1 + 6);
    *(_DWORD *)uint64_t buf = 134349056;
    *(void *)uint64_t v20 = v6;
    _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_INFO, "CLDeviceMotion::setDeviceMotionUpdateInterval changing update interval to: %{public}f", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
    }
    LODWORD(v17) = 12;
    unint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLDeviceMotion::setDeviceMotionUpdateInterval(CLDeviceMotion::Dispatcher *, CFTimeInterval)_block_invoke", "CoreLocation: %s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  *(_DWORD *)uint64_t buf = objc_msgSend_mode(v4, v7, v8, v16, v17, v18);
  if (sub_1902DDBB0((int *)buf))
  {
    int v11 = objc_msgSend_mode(v4, v9, v10);
    int v12 = sub_1902E00AC(v11);
    sub_1904DC320((uint64_t)v2, v12, *((void *)v1 + 5), (uint64_t)v1 + 48);
  }
}

BOOL sub_19056F3CC(uint64_t a1, int *a2)
{
  BOOL result = 0;
  int v4 = *a2;
  if (*a2 > 18)
  {
    if (v4 <= 66)
    {
      if (v4 == 19)
      {
        uint64_t v5 = *(void *)(a1 + 32);
        if (!v5) {
          return 0;
        }
      }
      else
      {
        if (v4 != 34) {
          return result;
        }
        uint64_t v5 = *(void *)(a1 + 48);
        if (!v5) {
          return 0;
        }
      }
LABEL_30:
      BOOL v7 = *(void *)(v5 + 56) == 0;
      return !v7;
    }
    if (v4 == 67)
    {
LABEL_19:
      uint64_t v5 = *(void *)(a1 + 64);
      if (!v5) {
        return 0;
      }
      goto LABEL_30;
    }
    if (v4 != 143) {
      return result;
    }
LABEL_16:
    uint64_t v6 = *(void *)(a1 + 72);
    if (!v6 || !*(void *)(v6 + 56)) {
      return 0;
    }
    BOOL v7 = *(unsigned char *)(a1 + 28) == 0;
    return !v7;
  }
  if (v4 <= 6)
  {
    if (v4 == 2)
    {
      if ((sub_1902CD6B0() & 0x80) != 0)
      {
        uint64_t v5 = *(void *)(a1 + 56);
        if (!v5) {
          return 0;
        }
      }
      else
      {
        uint64_t v5 = *(void *)(a1 + 40);
        if (!v5) {
          return 0;
        }
      }
      goto LABEL_30;
    }
    if (v4 != 3) {
      return result;
    }
    goto LABEL_19;
  }
  if (v4 == 7)
  {
    uint64_t v8 = *(void *)(a1 + 72);
    if (v8 && *(void *)(v8 + 56)) {
      return *(unsigned char *)(a1 + 28) == 0;
    }
    return 0;
  }
  if (v4 == 15) {
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_19056F510(uint64_t a1, uint64_t a2)
{
  return sub_1904DC8A8(a2, 6, a1, 8);
}

float sub_19056F524@<S0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, float32x4_t a4@<Q0>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  v15[0] = 0uLL;
  unint64_t v14 = 0xBFF0000000000000;
  sub_1902D9ACC(v15, a4);
  int v16 = 0;
  memset(&v15[1], 0, 32);
  long long v17 = xmmword_190609AC0;
  uint64_t v18 = 0x1FF00000000;
  int v19 = 0;
  char v20 = 0;
  uint64_t v21 = 0;
  if (a2 <= 18)
  {
    if (a2 <= 6)
    {
      if (a2 == 2)
      {
        if ((sub_1902CD6B0() & 0x80) != 0)
        {
          uint64_t v7 = *(void *)(a1 + 56);
          if (!v7) {
            return sub_1902DA570(a3, (float32x2_t *)&v14);
          }
        }
        else
        {
          uint64_t v7 = *(void *)(a1 + 40);
          if (!v7) {
            return sub_1902DA570(a3, (float32x2_t *)&v14);
          }
        }
        goto LABEL_30;
      }
      if (a2 != 3) {
        goto LABEL_13;
      }
      goto LABEL_29;
    }
    if (a2 != 7 && a2 != 15) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
  if (a2 > 66)
  {
    if (a2 == 67)
    {
LABEL_29:
      uint64_t v7 = *(void *)(a1 + 64);
      if (!v7) {
        return sub_1902DA570(a3, (float32x2_t *)&v14);
      }
LABEL_30:
      (*(void (**)(uint64_t, unint64_t *))(*(void *)v7 + 32))(v7, &v14);
      return sub_1902DA570(a3, (float32x2_t *)&v14);
    }
    if (a2 == 143)
    {
LABEL_24:
      uint64_t v10 = *(void *)(a1 + 72);
      if (v10) {
        (*(void (**)(uint64_t, unint64_t *))(*(void *)v10 + 32))(v10, &v14);
      }
      goto LABEL_26;
    }
  }
  else
  {
    if (a2 == 19)
    {
      uint64_t v7 = *(void *)(a1 + 32);
      if (!v7) {
        return sub_1902DA570(a3, (float32x2_t *)&v14);
      }
      goto LABEL_30;
    }
    if (a2 == 34)
    {
      uint64_t v7 = *(void *)(a1 + 48);
      if (!v7) {
        return sub_1902DA570(a3, (float32x2_t *)&v14);
      }
      goto LABEL_30;
    }
  }
LABEL_13:
  if (qword_1EB3BE878 != -1) {
    dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
  }
  uint64_t v8 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    int v25 = a2;
    _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_FAULT, "Device motion mode (%{public}d) not supported, unable to get device motion", buf, 8u);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
    }
    int v22 = 67240192;
    int v23 = a2;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "CLDeviceMotion::Sample CLDeviceMotion::getLastSample(const CLMotionTypeDeviceMotionMode)", "CoreLocation: %s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
LABEL_26:
  float result = sub_1902DA570(a3, (float32x2_t *)&v14);
  if (a2 == 143)
  {
    double v12 = *(double *)(a1 + 88);
    if (v12 >= 0.0)
    {
      float v13 = *(double *)(a1 + 96);
      sub_1904F1430(a3 + 8, v13, v12);
    }
    else
    {
      *(_DWORD *)(a3 + 96) = 1127481344;
    }
  }
  return result;
}

void sub_19056F864(void *a1, int a2, uint64_t a3, int *a4, float32x2_t *a5, float32x4_t a6)
{
  double v9 = *(double *)a6.i64;
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  v21[0] = 0uLL;
  float32x2_t v20 = (float32x2_t)0xBFF0000000000000;
  sub_1902D9ACC(v21, a6);
  int v22 = 0;
  memset(&v21[1], 0, 32);
  long long v23 = xmmword_190609AC0;
  uint64_t v24 = 0x1FF00000000;
  int v25 = 0;
  char v26 = 0;
  uint64_t v27 = 0;
  if (a2 <= 18)
  {
    switch(a2)
    {
      case 0:
        if (qword_1EB3BE878 != -1) {
          dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
        }
        double v12 = off_1EB3BE870;
        if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)uint64_t buf = 67240192;
          *(_DWORD *)&uint8_t buf[4] = 0;
          _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_FAULT, "Device motion mode (%{public}d) not supported, unable to get predicted device motion", buf, 8u);
        }
        if (sub_1902D8400(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE878 != -1) {
            dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
          }
          int v28 = 67240192;
          int v29 = 0;
          float v13 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 0, "void CLDeviceMotion::getPredictedSample(const CLMotionTypeDeviceMotionMode, const CFTimeInterval, CLDeviceMotion::Sample &, CMError &, CFTimeInterval &)", "CoreLocation: %s\n", v13);
          if (v13 != (char *)buf) {
            free(v13);
          }
        }
        goto LABEL_25;
      case 1:
      case 4:
      case 5:
      case 6:
        goto LABEL_25;
      case 2:
        if ((sub_1902CD6B0() & 0x80) != 0)
        {
          uint64_t v14 = a1[7];
          if (v14) {
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t v14 = a1[5];
          if (v14) {
            goto LABEL_24;
          }
        }
        break;
      case 3:
        goto LABEL_20;
      case 7:
        goto LABEL_23;
      default:
        if (a2 == 15) {
          goto LABEL_23;
        }
        goto LABEL_25;
    }
    goto LABEL_25;
  }
  if (a2 <= 66)
  {
    if (a2 == 19)
    {
      uint64_t v14 = a1[4];
      if (!v14) {
        goto LABEL_25;
      }
    }
    else
    {
      if (a2 != 34) {
        goto LABEL_25;
      }
      uint64_t v14 = a1[6];
      if (!v14) {
        goto LABEL_25;
      }
    }
LABEL_24:
    (*(void (**)(uint64_t, float32x2_t *))(*(void *)v14 + 32))(v14, &v20);
    *a5 = v20;
    sub_190526714((uint64_t)&v20, a4, v9);
    goto LABEL_25;
  }
  if (a2 == 67)
  {
LABEL_20:
    uint64_t v14 = a1[8];
    if (!v14) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (a2 != 143) {
    goto LABEL_25;
  }
LABEL_23:
  uint64_t v14 = a1[9];
  if (v14) {
    goto LABEL_24;
  }
LABEL_25:
  sub_1902DA570((uint64_t)buf, &v20);
  long long v15 = v35;
  long long v16 = v36;
  long long v17 = v33;
  *(_OWORD *)(a3 + 64) = v34;
  *(_OWORD *)(a3 + 80) = v15;
  *(_OWORD *)(a3 + 96) = v16;
  long long v18 = v31;
  long long v19 = v32;
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(_OWORD *)(a3 + 16) = v18;
  *(_DWORD *)(a3 + 112) = v37;
  *(_OWORD *)(a3 + 32) = v19;
  *(_OWORD *)(a3 + 48) = v17;
}

void sub_19056FBC4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!*a2)
  {
    *(void *)(a4 + 96) = *(void *)(a3 + 40);
    *(void *)(a4 + 88) = *(void *)(a3 + 56);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
    }
    uint64_t v5 = off_1EB3BE870;
    if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a4 + 88);
      uint64_t v6 = *(void *)(a4 + 96);
      *(_DWORD *)uint64_t buf = 134218240;
      uint64_t v10 = v6;
      __int16 v11 = 2048;
      uint64_t v12 = v7;
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_INFO, "Received geomagnetic model, declination,%f,timestamp,%f", buf, 0x16u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE878 != -1) {
        dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "static void CLDeviceMotion::onGeomagneticModelNotification(int, const CLGeomagneticModelProvider_Type::Notification &, const CLGeomagneticModelProvider_Type::NotificationData &, void *)", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

uint64_t sub_19056FDA8(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_1902C4008(a1, 0);
  *(_WORD *)(v2 + 200) = 263;
  *(unsigned char *)(v2 + 202) = 0;
  *(void *)(v2 + 208) = 0;
  *(void *)(v2 + 216) = 0;
  *(void *)uint64_t v2 = &unk_1EDFC9AE0;
  if ((sub_1902CD6B0() & 0x80) == 0)
  {
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
    }
    int v4 = off_1EB3BE870;
    if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 2082;
      uint64_t v12 = "assert";
      __int16 v13 = 2081;
      uint64_t v14 = "CLPlatformInfo::motionCaps().deviceMotion3Service";
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Device motion service 3 is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE878 != -1) {
        dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
      }
    }
    uint64_t v5 = off_1EB3BE870;
    if (os_signpost_enabled((os_log_t)off_1EB3BE870))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 2082;
      uint64_t v12 = "assert";
      __int16 v13 = 2081;
      uint64_t v14 = "CLPlatformInfo::motionCaps().deviceMotion3Service";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Device motion service 3 is not supported on this platform!", "{\"msg%{public}.0s\":\"Device motion service 3 is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE878 != -1) {
        dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
      }
    }
    uint64_t v6 = off_1EB3BE870;
    if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 2082;
      uint64_t v12 = "assert";
      __int16 v13 = 2081;
      uint64_t v14 = "CLPlatformInfo::motionCaps().deviceMotion3Service";
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Device motion service 3 is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  return a1;
}

void sub_190570074(_Unwind_Exception *a1)
{
  sub_1904C1A48(v1);
  _Unwind_Resume(a1);
}

void sub_190570090(void *a1)
{
  sub_1904C1A48(a1);

  JUMPOUT(0x192FCC980);
}

void sub_1905700CC(void *a1)
{
  sub_1904C1A48(a1);

  JUMPOUT(0x192FCC980);
}

void sub_190570108(void *a1)
{
  sub_1904C1A48(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t *sub_190570140(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a1 + 40;
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  uint64_t v5 = *(FILE **)(v2 + 2208);
  if (v5)
  {
    size_t v6 = *(int *)(v2 + 2200);
    if (v6) {
      fwrite((const void *)(v2 + 152), 1uLL, v6, v5);
    }
    *(_DWORD *)(v2 + 2200) = 0;
    sub_190570AEC(v2, v4, v6);
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  return a1;
}

void sub_190570204(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1904373C8((uint64_t)va);
  sub_1902E67BC(a1);
}

uint64_t sub_190570220()
{
  if (qword_1EB3BF5D8 != -1) {
    dispatch_once(&qword_1EB3BF5D8, &unk_1EDFD2580);
  }
  return qword_1EB3BF5C0;
}

void sub_190570264()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (qword_1E929D6B0 != -1) {
    dispatch_once(&qword_1E929D6B0, &unk_1EDFD3620);
  }
  uint64_t v0 = qword_1E929D6A0;
  if (os_log_type_enabled((os_log_t)qword_1E929D6A0, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1902AF000, v0, OS_LOG_TYPE_DEBUG, "creating the BinaryLog instance", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D6B0 != -1) {
      dispatch_once(&qword_1E929D6B0, &unk_1EDFD3620);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "static void CLBinaryLog::create()", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
  operator new();
}

void sub_190570A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_190592398(v18);
  MEMORY[0x192FCC980](v18, 0x10B3C40F30FBFA2);
  _Unwind_Resume(a1);
}

void sub_190570AB4(void *a1)
{
  sub_190592398(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190570AEC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  objc_msgSend_assertInside(*(void **)(*(void *)(a1 + 48) + 64), a2, a3);
  int v4 = *(_opaque_pthread_t **)(*(void *)(a1 + 48) + 80);
  if (v4 != pthread_self())
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD38E0);
    }
    size_t v6 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "assert";
      __int16 v15 = 2081;
      long long v16 = "(fMutex).__assertOwned()";
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD38E0);
      }
    }
    uint64_t v7 = off_1EB3BE880;
    if (os_signpost_enabled((os_log_t)off_1EB3BE880))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "assert";
      __int16 v15 = 2081;
      long long v16 = "(fMutex).__assertOwned()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD38E0);
      }
    }
    int v8 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "assert";
      __int16 v15 = 2081;
      long long v16 = "(fMutex).__assertOwned()";
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
  }
  uint64_t result = fclose(*(FILE **)(a1 + 2208));
  *(void *)(a1 + 2208) = 0;
  return result;
}

void sub_190570D78(NSObject *a1, const char *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  objc_msgSend_assertInside(*((void **)a1[6].isa + 8), a2, a3);
  uint64_t v5 = (_opaque_pthread_t *)*((void *)v4[6].isa + 10);
  if (v5 != pthread_self())
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD38E0);
    }
    p_cache = CMDeviceOrientationManager.cache;
    __int16 v11 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)__int16 v15 = 0;
      *(_WORD *)&v15[4] = 2082;
      *(void *)&v15[6] = "";
      __int16 v16 = 2082;
      uint64_t v17 = "assert";
      __int16 v18 = 2081;
      long long v19 = "(fMutex).__assertOwned()";
      _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD38E0);
      }
    }
    uint64_t v12 = off_1EB3BE880;
    if (os_signpost_enabled((os_log_t)off_1EB3BE880))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)__int16 v15 = 0;
      *(_WORD *)&v15[4] = 2082;
      *(void *)&v15[6] = "";
      __int16 v16 = 2082;
      uint64_t v17 = "assert";
      __int16 v18 = 2081;
      long long v19 = "(fMutex).__assertOwned()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD38E0);
      }
    }
    int v4 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)__int16 v15 = 0;
      *(_WORD *)&v15[4] = 2082;
      *(void *)&v15[6] = "";
      __int16 v16 = 2082;
      uint64_t v17 = "assert";
      __int16 v18 = 2081;
      long long v19 = "(fMutex).__assertOwned()";
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    goto LABEL_23;
  }
  p_cache = (void **)&v4[16].isa;
  uint64_t v7 = (const char *)&v4[16];
  if (SHIBYTE(v4[18].isa) < 0) {
    uint64_t v7 = (const char *)*p_cache;
  }
  int v8 = fopen(v7, "ab");
  v4[276].int isa = (Class)v8;
  if (!v8)
  {
    uint64_t v3 = &OBJC_IVAR___CMHeadphoneActivityManagerInternal_fLogger;
    if (qword_1E929D6B0 == -1)
    {
LABEL_6:
      __int16 v9 = qword_1E929D6A0;
      if (os_log_type_enabled((os_log_t)qword_1E929D6A0, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = p_cache;
        if (SHIBYTE(v4[18].isa) < 0) {
          int v10 = *p_cache;
        }
        *(_DWORD *)uint64_t buf = 136315138;
        *(void *)__int16 v15 = v10;
        _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_DEFAULT, "#Warning Unable to open %s", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (*((void *)v3 + 214) != -1) {
          dispatch_once(&qword_1E929D6B0, &unk_1EDFD3620);
        }
        __int16 v13 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CLBinaryLog::open()", "CoreLocation: %s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      return;
    }
LABEL_23:
    dispatch_once(&qword_1E929D6B0, &unk_1EDFD3620);
    goto LABEL_6;
  }
}

void sub_1905711B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(_DWORD *)(a1 + 112)) {
    goto LABEL_7;
  }
  uint64_t v3 = (const char *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
    uint64_t v3 = *(const char **)v3;
  }
  int v4 = (const char *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0) {
    int v4 = *(const char **)v4;
  }
  if (sub_190454728(v3, v4))
  {
LABEL_7:
    uint64_t v5 = (const char *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      uint64_t v5 = *(const char **)v5;
    }
    unlink(v5);
  }
  int v6 = *(_DWORD *)(a1 + 112);
  if (v6 >= 1)
  {
    v14[0] = 0;
    v14[1] = v14;
    v14[2] = 0x2020000000;
    int v15 = 0;
    uint64_t v7 = (uint64_t *)(a1 + 88);
    int v8 = *(char *)(a1 + 111);
    uint64_t v9 = a1 + 88;
    if (v8 < 0) {
      uint64_t v9 = *v7;
    }
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3321888768;
    v10[2] = sub_190571338;
    _DWORD v10[3] = &unk_1EDFD12A0;
    v10[5] = v2;
    if (v8 < 0)
    {
      sub_190347AFC(&__p, *(void **)(a1 + 88), *(void *)(a1 + 96));
      int v6 = *(_DWORD *)(a1 + 112);
    }
    else
    {
      long long __p = *(_OWORD *)v7;
      uint64_t v12 = *(void *)(a1 + 104);
    }
    v10[4] = v14;
    int v13 = v6;
    sub_190506800(v9, (uint64_t)v10);
    if (SHIBYTE(v12) < 0) {
      operator delete((void *)__p);
    }
    _Block_object_dispose(v14, 8);
  }
}

void sub_190571308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Block_object_dispose((const void *)(v20 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190571338(uint64_t a1, std::string::value_type *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (*(char *)(a1 + 71) >= 0) {
    size_t v5 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    size_t v5 = *(void *)(a1 + 56);
  }
  int v6 = &v23;
  sub_190395000((uint64_t)&v23, v5 + 1);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v6 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    if (*(char *)(a1 + 71) >= 0) {
      uint64_t v7 = (const void *)(a1 + 48);
    }
    else {
      uint64_t v7 = *(const void **)(a1 + 48);
    }
    memmove(v6, v7, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 47;
  int v8 = std::string::append(&v23, a2);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  int64_t v25 = v8->__r_.__value_.__r.__words[2];
  long long v24 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  sub_1902C3F54(&v23, a2);
  if (*(char *)(v4 + 103) < 0) {
    sub_190347AFC(&__dst, *(void **)(v4 + 80), *(void *)(v4 + 88));
  }
  else {
    std::string __dst = *(std::string *)(v4 + 80);
  }
  int v10 = std::string::append(&__dst, "_");
  std::string v22 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (sub_190592D90(v4, &v23.__r_.__value_.__l.__data_, (char *)&v22))
  {
    sub_1902C3F54(v19, a2);
    if (*(char *)(v4 + 127) < 0) {
      sub_190347AFC(&v17, *(void **)(v4 + 104), *(void *)(v4 + 112));
    }
    else {
      std::string v17 = *(std::string *)(v4 + 104);
    }
    uint64_t v12 = std::string::append(&v17, ".bz2");
    std::string v18 = *v12;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (sub_190592E68(v4, v19, (char *)&v18))
    {
      int v11 = 1;
    }
    else
    {
      sub_1902C3F54(__p, a2);
      int v11 = sub_190592E68(v4, __p, (char *)(v4 + 104));
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    if (v20 < 0) {
      operator delete(v19[0]);
    }
  }
  else
  {
    int v11 = 0;
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if (!v11) {
      goto LABEL_45;
    }
  }
  else if (!v11)
  {
    goto LABEL_45;
  }
  if (++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) > *(_DWORD *)(a1 + 72))
  {
    int v13 = v25 >= 0 ? (const char *)&v24 : (const char *)v24;
    if (unlink(v13)) {
      syslog(5, "%s,%s,Failed to delete log: %s", "NOTICE", "CLLog", v13);
    }
  }
LABEL_45:
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)v24);
  }
  return 1;
}

void sub_190571630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (*(char *)(v39 - 57) < 0) {
    operator delete(*(void **)(v39 - 80));
  }
  _Unwind_Resume(exception_object);
}

void *sub_1905716F4(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0) {
    return sub_190347AFC(result, *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  long long v3 = *(_OWORD *)(a2 + 48);
  result[2] = *(void *)(a2 + 64);
  *(_OWORD *)uint64_t result = v3;
  return result;
}

void sub_190571724(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
}

uint64_t sub_190571738(uint64_t a1, uint64_t a2)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  size_t v5 = (unsigned char *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v63 = a1 + 40;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 40);
  __int16 v64 = 256;
  if (v5[2192])
  {
    if (*(void *)(a1 + 2208) || (sub_190570D78(a1, v6, v7), *(void *)(a1 + 2208)))
    {
      int v62 = 0;
      int v8 = *(_DWORD *)(a1 + 2200);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
      int v10 = *(_DWORD *)(a1 + 2200);
      if (v9 + v8 >= 2048)
      {
        fwrite((const void *)(a1 + 152), 1uLL, v10, *(FILE **)(a1 + 2208));
        long long v70 = v5;
        (*(void (**)(unsigned char *))(*(void *)v5 + 16))(v5);
        __int16 v71 = 256;
        uint64_t v11 = MEMORY[0x192FCD040](*(void *)(a1 + 2208));
        if (ferror(*(FILE **)(a1 + 2208)))
        {
          if (qword_1E929D6B0 != -1) {
            dispatch_once(&qword_1E929D6B0, &unk_1EDFD3620);
          }
          uint64_t v14 = qword_1E929D6A0;
          if (os_log_type_enabled((os_log_t)qword_1E929D6A0, OS_LOG_TYPE_FAULT))
          {
            int v15 = *__error();
            char v16 = __error();
            std::string v17 = strerror(*v16);
            buf[0].st_dev = 67240450;
            *(_DWORD *)&buf[0].st_mode = v15;
            LOWORD(buf[0].st_ino) = 2082;
            *(__darwin_ino64_t *)((char *)&buf[0].st_ino + 2) = (__darwin_ino64_t)v17;
            _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_FAULT, "Failed to determine if log rotation is needed. errno, %{public}d, %{public}s", (uint8_t *)buf, 0x12u);
          }
          if (sub_1902D8400(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929D6B0 != -1) {
              dispatch_once(&qword_1E929D6B0, &unk_1EDFD3620);
            }
            int v52 = *__error();
            int64_t v53 = __error();
            int64_t v54 = strerror(*v53);
            int v72 = 67240450;
            *(_DWORD *)unint64_t v73 = v52;
            *(_WORD *)&v73[4] = 2082;
            *(void *)&v73[6] = v54;
            int64_t v55 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 0, "void CLBinaryLog::rotateIfNeeded(const double &)", "CoreLocation: %s\n", v55);
            if (v55 != (char *)buf) {
              free(v55);
            }
          }
          clearerr(*(FILE **)(a1 + 2208));
        }
        else
        {
          uint64_t v19 = *(unsigned int *)(a1 + 12);
          if ((int)v19 >= 1 && v11 > v19)
          {
            uint64_t v20 = sub_190592D84(a1, v12, v13);
            if (*(char *)(a1 + 79) >= 0) {
              size_t v21 = *(unsigned __int8 *)(a1 + 79);
            }
            else {
              size_t v21 = *(void *)(a1 + 64);
            }
            std::string v22 = v68;
            sub_190395000((uint64_t)v68, v21 + 4);
            if (v69 < 0) {
              std::string v22 = (void **)v68[0];
            }
            if (v21)
            {
              if (*(char *)(a1 + 79) >= 0) {
                std::string v23 = (const void *)(a1 + 56);
              }
              else {
                std::string v23 = *(const void **)(a1 + 56);
              }
              memmove(v22, v23, v21);
            }
            strcpy((char *)v22 + v21, "logs");
            sub_190592948((const void **)v68, a1 + 80, a1 + 104, v20, &v67);
            if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t size = HIBYTE(v67.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t size = v67.__r_.__value_.__l.__size_;
            }
            int64_t v25 = __p;
            sub_190395000((uint64_t)__p, size + 4);
            if (v66 < 0) {
              int64_t v25 = (void **)__p[0];
            }
            if (size)
            {
              if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                char v26 = &v67;
              }
              else {
                char v26 = (std::string *)v67.__r_.__value_.__r.__words[0];
              }
              memmove(v25, v26, size);
            }
            strcpy((char *)v25 + size, ".bz2");
            if (v69 >= 0) {
              uint64_t v27 = v68;
            }
            else {
              uint64_t v27 = (void **)v68[0];
            }
            if (stat((const char *)v27, buf))
            {
              if (v69 >= 0) {
                size_t v30 = HIBYTE(v69);
              }
              else {
                size_t v30 = (size_t)v68[1];
              }
              long long v31 = buf;
              sub_190395000((uint64_t)buf, v30 + 1);
              if ((buf[0].st_gid & 0x80000000) != 0) {
                long long v31 = *(stat **)&buf[0].st_dev;
              }
              if (v30)
              {
                if (v69 >= 0) {
                  long long v32 = v68;
                }
                else {
                  long long v32 = (void **)v68[0];
                }
                memmove(v31, v32, v30);
              }
              *(_WORD *)((char *)&v31->st_dev + v30) = 47;
              if ((buf[0].st_gid & 0x80000000) == 0) {
                long long v33 = buf;
              }
              else {
                long long v33 = *(stat **)&buf[0].st_dev;
              }
              uid_t v34 = getuid();
              gid_t v35 = getgid();
              sub_190453FC4(v33, v34, v35);
              if (SHIBYTE(buf[0].st_gid) < 0) {
                operator delete(*(void **)&buf[0].st_dev);
              }
            }
            sub_190570AEC(a1, v28, v29);
            int v37 = (const std::__fs::filesystem::path **)(a1 + 128);
            uint64_t v38 = (const std::__fs::filesystem::path *)(a1 + 128);
            if (*(char *)(a1 + 151) < 0) {
              uint64_t v38 = *v37;
            }
            if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v39 = (const std::__fs::filesystem::path *)&v67;
            }
            else {
              uint64_t v39 = (const std::__fs::filesystem::path *)v67.__r_.__value_.__r.__words[0];
            }
            rename(v38, v39, v36);
            if (v42)
            {
              if (qword_1E929D6B0 != -1) {
                dispatch_once(&qword_1E929D6B0, &unk_1EDFD3620);
              }
              unint64_t v43 = qword_1E929D6A0;
              if (os_log_type_enabled((os_log_t)qword_1E929D6A0, OS_LOG_TYPE_DEFAULT))
              {
                unint64_t v44 = (const std::__fs::filesystem::path *)(a1 + 128);
                if (*(char *)(a1 + 151) < 0) {
                  unint64_t v44 = *v37;
                }
                int v45 = SHIBYTE(v67.__r_.__value_.__r.__words[2]);
                std::string::size_type v46 = v67.__r_.__value_.__r.__words[0];
                unint64_t v47 = __error();
                unint64_t v48 = &v67;
                dev_t v49 = *v47;
                if (v45 < 0) {
                  unint64_t v48 = (std::string *)v46;
                }
                buf[0].st_dev = 136315650;
                *(void *)&buf[0].st_mode = v44;
                WORD2(buf[0].st_ino) = 2080;
                *(__darwin_ino64_t *)((char *)&buf[0].st_ino + 6) = (__darwin_ino64_t)v48;
                HIWORD(buf[0].st_gid) = 1024;
                buf[0].st_rdev = v49;
                _os_log_impl(&dword_1902AF000, v43, OS_LOG_TYPE_DEFAULT, "#Warning Failed to move aside log file %s to %s (%d)", (uint8_t *)buf, 0x1Cu);
              }
              if (sub_1902D8400(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929D6B0 != -1) {
                  dispatch_once(&qword_1E929D6B0, &unk_1EDFD3620);
                }
                if (*(char *)(a1 + 151) < 0) {
                  int v37 = (const std::__fs::filesystem::path **)*v37;
                }
                int v56 = SHIBYTE(v67.__r_.__value_.__r.__words[2]);
                std::string::size_type v57 = v67.__r_.__value_.__r.__words[0];
                unint64_t v58 = __error();
                float v59 = &v67;
                int v60 = *v58;
                if (v56 < 0) {
                  float v59 = (std::string *)v57;
                }
                int v72 = 136315650;
                *(void *)unint64_t v73 = v37;
                *(_WORD *)&v73[8] = 2080;
                *(void *)&v73[10] = v59;
                __int16 v74 = 1024;
                int v75 = v60;
                long long v61 = (char *)_os_log_send_and_compose_impl();
                sub_1902D398C("Generic", 1, 0, 2, "void CLBinaryLog::rotateIfNeeded(const double &)", "CoreLocation: %s\n", v61);
                if (v61 != (char *)buf) {
                  free(v61);
                }
              }
            }
            sub_190570D78(a1, v40, v41);
            *(void *)(a1 + 2216) = 0;
            blksize_t v50 = *(_DWORD *)(a1 + 16);
            uint64_t v51 = *(NSObject **)(a1 + 2224);
            *(void *)&buf[0].st_dev = MEMORY[0x1E4F143A8];
            buf[0].st_ino = 3321888768;
            *(void *)&buf[0].st_uid = sub_1905711B4;
            *(void *)&buf[0].st_rdev = &unk_1EDFD11C8;
            buf[0].st_atimespec.tv_sec = a1;
            buf[0].st_blksize_t size = v50;
            if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
              sub_190347AFC(&buf[0].st_atimespec.tv_nsec, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
            }
            else {
              *(std::string *)&buf[0].st_atimespec.tv_nsec = v67;
            }
            if (SHIBYTE(v66) < 0)
            {
              sub_190347AFC(&buf[0].st_ctimespec, __p[0], (unint64_t)__p[1]);
            }
            else
            {
              buf[0].st_ctimespec = *(timespec *)__p;
              buf[0].st_birthtimespec.tv_sec = v66;
            }
            if (SHIBYTE(v69) < 0)
            {
              sub_190347AFC(&buf[0].st_birthtimespec.tv_nsec, v68[0], (unint64_t)v68[1]);
            }
            else
            {
              *(_OWORD *)&buf[0].st_birthtimespec.tv_nsec = *(_OWORD *)v68;
              buf[0].st_blocks = v69;
            }
            dispatch_async(v51, buf);
            if (SHIBYTE(buf[0].st_blocks) < 0) {
              operator delete((void *)buf[0].st_birthtimespec.tv_nsec);
            }
            if (SHIBYTE(buf[0].st_birthtimespec.tv_sec) < 0) {
              operator delete((void *)buf[0].st_ctimespec.tv_sec);
            }
            if (SHIBYTE(buf[0].st_mtimespec.tv_nsec) < 0) {
              operator delete((void *)buf[0].st_atimespec.tv_nsec);
            }
            if (SHIBYTE(v66) < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v67.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v69) < 0) {
              operator delete(v68[0]);
            }
          }
        }
        (*(void (**)(unsigned char *))(*(void *)v5 + 24))(v5);
        int v10 = 0;
        *(_DWORD *)(a1 + 2200) = 0;
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a2 + 16))(a2, a1 + v10 + 152, 2048, &v62))
      {
        *(_DWORD *)(a1 + 2200) += v62;
      }
    }
  }
  return (*(uint64_t (**)(unsigned char *))(*(void *)v5 + 24))(v5);
}

void sub_190572020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  sub_1904373C8((uint64_t)&a33);
  sub_1904373C8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_190572114(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_assertInside(*(void **)(*(void *)(a1 + 48) + 64), a2, a3);
  pthread_self();
  sub_1902B44C0(*(void *)(a1 + 24), "LogFileRotationSizeBinary", (_DWORD *)(a1 + 12));
  uint64_t v4 = *(void *)(a1 + 24);

  return sub_1902B44C0(v4, "LogFileStorageCountBinary", (_DWORD *)(a1 + 16));
}

uint64_t sub_190572180(uint64_t a1)
{
  uint64_t v3 = a1 + 40;
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v33 = a1 + 40;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 40);
  __int16 v34 = 256;
  uint64_t v7 = sub_190592D84(a1, v4, v5);
  int v8 = *(FILE **)(a1 + 2208);
  if (v8)
  {
    size_t v9 = *(unsigned int *)(a1 + 2200);
    if ((int)v9 >= 1)
    {
      if (!fwrite((const void *)(a1 + 152), 1uLL, v9, v8)) {
        syslog(5, "%s,%s,Failed to write CLBinaryLog Buffer to disk\n", "NOTICE", "CLLog");
      }
      *(_DWORD *)(a1 + 2200) = 0;
    }
    sub_190570AEC(a1, v6, v9);
  }
  int v10 = (const char *)(a1 + 128);
  uint64_t v11 = (const char *)(a1 + 128);
  if (*(char *)(a1 + 151) < 0) {
    uint64_t v11 = *(const char **)v10;
  }
  if (!stat(v11, &v35))
  {
    sub_190592BE0(a1, a1 + 80, v7, (std::string *)&v35);
    int v15 = (const std::__fs::filesystem::path *)(a1 + 128);
    if (*(char *)(a1 + 151) < 0) {
      int v15 = *(const std::__fs::filesystem::path **)v10;
    }
    if ((v35.st_gid & 0x80000000) == 0) {
      char v16 = &v35;
    }
    else {
      char v16 = *(stat **)&v35.st_dev;
    }
    rename(v15, (const std::__fs::filesystem::path *)v16, v14);
    if (v17)
    {
      if (*(char *)(a1 + 151) < 0) {
        int v10 = *(const char **)v10;
      }
      int st_gid_high = SHIBYTE(v35.st_gid);
      uint64_t v19 = *(stat **)&v35.st_dev;
      uint64_t v20 = __error();
      size_t v21 = &v35;
      if (st_gid_high < 0) {
        size_t v21 = v19;
      }
      syslog(5, "%s,%s,Failed to move file %s to %s (%d)\n", "NOTICE", "CLLog", v10, (const char *)v21, *v20);
    }
    if (SHIBYTE(v35.st_gid) < 0) {
      operator delete(*(void **)&v35.st_dev);
    }
  }
  sub_190570D78(a1, v12, v13);
  *(void *)(a1 + 2216) = 0;
  if (*(char *)(a1 + 79) >= 0) {
    size_t v22 = *(unsigned __int8 *)(a1 + 79);
  }
  else {
    size_t v22 = *(void *)(a1 + 64);
  }
  std::string v23 = __src;
  sub_190395000((uint64_t)__src, v22 + 4);
  if (v32 < 0) {
    std::string v23 = (void **)__src[0];
  }
  if (v22)
  {
    if (*(char *)(a1 + 79) >= 0) {
      long long v24 = (const void *)(a1 + 56);
    }
    else {
      long long v24 = *(const void **)(a1 + 56);
    }
    memmove(v23, v24, v22);
  }
  strcpy((char *)v23 + v22, "logs");
  if (v32 >= 0) {
    int64_t v25 = __src;
  }
  else {
    int64_t v25 = (void **)__src[0];
  }
  if (!stat((const char *)v25, &v35))
  {
    char v26 = v32 >= 0 ? __src : (void **)__src[0];
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3321888768;
    v28[2] = sub_1905724E8;
    v28[3] = &unk_1EDFD1230;
    v28[4] = a1;
    if (SHIBYTE(v32) < 0)
    {
      sub_190347AFC(&__p, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      long long __p = *(_OWORD *)__src;
      uint64_t v30 = v32;
    }
    sub_190506800((uint64_t)v26, (uint64_t)v28);
    if (SHIBYTE(v30) < 0) {
      operator delete((void *)__p);
    }
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(__src[0]);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
}

void sub_190572484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  sub_1904373C8((uint64_t)&a32);
  _Unwind_Resume(a1);
}

uint64_t sub_1905724E8(uint64_t a1, std::string::value_type *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(char *)(a1 + 63) >= 0) {
    size_t v5 = *(unsigned __int8 *)(a1 + 63);
  }
  else {
    size_t v5 = *(void *)(a1 + 48);
  }
  int v6 = &v35;
  sub_190395000((uint64_t)&v35, v5 + 1);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v6 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    size_t v9 = *(char **)(a1 + 40);
    int v8 = (char *)(a1 + 40);
    uint64_t v7 = v9;
    if (v8[23] >= 0) {
      int v10 = v8;
    }
    else {
      int v10 = v7;
    }
    memmove(v6, v10, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 47;
  uint64_t v11 = std::string::append(&v35, a2);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  int64_t v37 = v11->__r_.__value_.__r.__words[2];
  long long v36 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  sub_190592484((uint64_t)&v33);
  uint64_t v13 = std::string::append(&v33, "/");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  int v15 = std::string::append(&v34, a2);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  sub_1902C3F54(&v34, a2);
  if (*(char *)(v4 + 103) < 0) {
    sub_190347AFC(&__dst, *(void **)(v4 + 80), *(void *)(v4 + 88));
  }
  else {
    std::string __dst = *(std::string *)(v4 + 80);
  }
  int v17 = std::string::append(&__dst, "_");
  std::string v33 = *v17;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (sub_190592D90(v4, &v34.__r_.__value_.__l.__data_, (char *)&v33))
  {
    sub_1902C3F54(v30, a2);
    if (*(char *)(v4 + 127) < 0) {
      sub_190347AFC(&v28, *(void **)(v4 + 104), *(void *)(v4 + 112));
    }
    else {
      std::string v28 = *(std::string *)(v4 + 104);
    }
    uint64_t v20 = std::string::append(&v28, ".bz2");
    std::string v29 = *v20;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (sub_190592E68(v4, v30, (char *)&v29))
    {
      int v19 = 1;
    }
    else
    {
      sub_1902C3F54(__p, a2);
      int v19 = sub_190592E68(v4, __p, (char *)(v4 + 104));
      if (v27 < 0) {
        operator delete(__p[0]);
      }
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (v31 < 0) {
      operator delete(v30[0]);
    }
  }
  else
  {
    int v19 = 0;
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v34.__r_.__value_.__l.__data_);
    if (!v19) {
      goto LABEL_51;
    }
  }
  else if (!v19)
  {
    goto LABEL_51;
  }
  if (v37 >= 0) {
    size_t v21 = (const std::__fs::filesystem::path *)&v36;
  }
  else {
    size_t v21 = (const std::__fs::filesystem::path *)v36;
  }
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v22 = (const std::__fs::filesystem::path *)&v35;
  }
  else {
    size_t v22 = (const std::__fs::filesystem::path *)v35.__r_.__value_.__r.__words[0];
  }
  rename(v21, v22, v18);
  if (v23)
  {
    long long v24 = __error();
    syslog(5, "%s,%s,Failed to move file %s to %s (%d)\n", "NOTICE", "CLLog", (const char *)v21, (const char *)v22, *v24);
  }
LABEL_51:
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  return 1;
}

void sub_190572858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (*(char *)(v48 - 121) < 0) {
    operator delete(*(void **)(v48 - 144));
  }
  if (*(char *)(v48 - 89) < 0) {
    operator delete(*(void **)(v48 - 112));
  }
  if (*(char *)(v48 - 57) < 0) {
    operator delete(*(void **)(v48 - 80));
  }
  _Unwind_Resume(exception_object);
}

void sub_19057294C()
{
  if (*(char *)(v0 - 89) < 0) {
    JUMPOUT(0x190572940);
  }
  JUMPOUT(0x190572944);
}

os_log_t sub_190572960()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Core");
  qword_1E929D6A0 = (uint64_t)result;
  return result;
}

uint64_t sub_190572AB0(uint64_t a1)
{
  kdebug_trace();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 16) + 16);

  return v2();
}

void sub_190572C6C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend__prepareDispatcher(WeakRetained, v1, v2);
}

void sub_190572E08(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

void sub_190572E2C()
{
  uint64_t v0 = sub_1902D6BD0();
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(std::__shared_weak_count **)(v0 + 32);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1902C4784(v1, "PocketStateMaxMonitorTime", &qword_1E929E3E0);
  if (v2)
  {
    sub_1902D8B58(v2);
  }
}

void sub_190572EA4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1902D8B58(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190572EBC(unsigned int *a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_onPocketStateUpdated_, *a1);
}

void sub_190573190()
{
  uint64_t v0 = sub_1902D6BD0();
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(std::__shared_weak_count **)(v0 + 32);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1902C47F8(v1, "DisablePocketState", (BOOL *)&byte_1EB3BF5E0);
  if (v2)
  {
    sub_1902D8B58(v2);
  }
}

void sub_190573208(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1902D8B58(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_190573448(uint64_t a1)
{
  if (sub_1904E0110())
  {
    uint64_t v2 = sub_1904E0110();
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 32);
    sub_1902CDE08(v2, 0, v3);
  }
}

uint64_t sub_190573588(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = NSString;
  size_t v5 = objc_msgSend_processInfo(MEMORY[0x1E4F28F80], a2, a3);
  uint64_t v8 = objc_msgSend_processName(v5, v6, v7);
  int v10 = objc_msgSend_stringWithFormat_(v4, v9, @"com.apple.CoreMotion.CMPocketStateManager.%@.%@", v8, *(void *)(a1 + 32));
  if (qword_1E929D778 != -1) {
    dispatch_once(&qword_1E929D778, &unk_1EDFC3668);
  }
  uint64_t v11 = qword_1E929D770;
  if (os_log_type_enabled((os_log_t)qword_1E929D770, OS_LOG_TYPE_INFO))
  {
    uint64_t v14 = objc_msgSend_UTF8String(v10, v12, v13);
    uint64_t v15 = *(void *)(a1 + 40);
    *(_DWORD *)uint64_t buf = 136315394;
    uint64_t v21 = v14;
    __int16 v22 = 2048;
    uint64_t v23 = v15;
    _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_INFO, "ADClient: %s + %llu", buf, 0x16u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D778 != -1) {
      dispatch_once(&qword_1E929D778, &unk_1EDFC3668);
    }
    objc_msgSend_UTF8String(v10, v17, v18);
    int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMPocketStateManager addToAggdScalarWithName:andScalar:]_block_invoke", "CoreLocation: %s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  return ADClientAddValueForScalarKey();
}

void sub_190573B5C(uint64_t a1)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (qword_1E929D778 != -1) {
    dispatch_once(&qword_1E929D778, &unk_1EDFC3668);
  }
  uint64_t v2 = qword_1E929D770;
  if (os_log_type_enabled((os_log_t)qword_1E929D770, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = mach_absolute_time();
    double v4 = sub_1902D8D34(v3);
    uint64_t v5 = *(void *)(a1 + 56);
    *(_DWORD *)uint64_t buf = 134218240;
    double v40 = v4;
    __int16 v41 = 2048;
    uint64_t v42 = v5;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_INFO, "%f: query started with timeout %f", buf, 0x16u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D778 != -1) {
      dispatch_once(&qword_1E929D778, &unk_1EDFC3668);
    }
    uint64_t v25 = mach_absolute_time();
    double v26 = sub_1902D8D34(v25);
    uint64_t v27 = *(void *)(a1 + 56);
    int v35 = 134218240;
    double v36 = v26;
    __int16 v37 = 2048;
    uint64_t v38 = v27;
    std::string v28 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMPocketStateManager queryStateOntoQueue:andMonitorFor:withTimeout:andHandler:]_block_invoke", "CoreLocation: %s\n", v28);
    if (v28 != (char *)buf) {
      free(v28);
    }
  }
  objc_msgSend_addToAggdScalarWithName_andScalar_(*(void **)(a1 + 32), v6, @"queryStart", 1);
  uint64_t v7 = *(void *)(a1 + 32);
  if (*(void *)(v7 + 8))
  {
    if (qword_1E929D778 != -1) {
      dispatch_once(&qword_1E929D778, &unk_1EDFC3668);
    }
    uint64_t v8 = qword_1E929D770;
    if (os_log_type_enabled((os_log_t)qword_1E929D770, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_INFO, "Query aborted", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D778 != -1) {
        dispatch_once(&qword_1E929D778, &unk_1EDFC3668);
      }
      LOWORD(v35) = 0;
      std::string v29 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMPocketStateManager queryStateOntoQueue:andMonitorFor:withTimeout:andHandler:]_block_invoke", "CoreLocation: %s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
    objc_msgSend_addToAggdScalarWithName_andScalar_(*(void **)(a1 + 32), v9, @"queryAbort", 1);
    dispatch_source_cancel(*(dispatch_source_t *)(*(void *)(a1 + 32) + 8));
    dispatch_release(*(dispatch_object_t *)(*(void *)(a1 + 32) + 8));
    *(void *)(*(void *)(a1 + 32) + 8) = 0;
    uint64_t v7 = *(void *)(a1 + 32);
  }
  *(void *)(*(void *)(a1 + 32) + 8) = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(v7 + 16));
  if (*(void *)(*(void *)(a1 + 32) + 8))
  {
    int v10 = [CMPocketStateQueueBlockPair alloc];
    long long v12 = objc_msgSend_initWithQueue_andBlock_(v10, v11, *(void *)(a1 + 40), *(void *)(a1 + 48));
    objc_msgSend_addObject_(*(void **)(*(void *)(a1 + 32) + 48), v13, (uint64_t)v12);

    uint64_t v14 = *(NSObject **)(*(void *)(a1 + 32) + 8);
    dispatch_time_t v15 = dispatch_time(0, (uint64_t)(*(double *)(a1 + 56) * 1000000000.0));
    dispatch_source_set_timer(v14, v15, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
    uint64_t v16 = *(void *)(a1 + 32);
    int v17 = *(NSObject **)(v16 + 8);
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 3221225472;
    handler[2] = sub_190574298;
    handler[3] = &unk_1E568D118;
    handler[4] = v16;
    dispatch_source_set_event_handler(v17, handler);
    uint64_t v18 = (double *)(a1 + 64);
    if (*(double *)(a1 + 64) <= *(double *)(*(void *)(a1 + 32) + 40))
    {
      uint64_t v22 = sub_1904E0110();
    }
    else
    {
      if (qword_1E929D778 != -1) {
        dispatch_once(&qword_1E929D778, &unk_1EDFC3668);
      }
      int v19 = qword_1E929D770;
      if (os_log_type_enabled((os_log_t)qword_1E929D770, OS_LOG_TYPE_FAULT))
      {
        double v20 = *(double *)(*(void *)(a1 + 32) + 40);
        uint64_t v21 = *(void *)(a1 + 64);
        *(_DWORD *)uint64_t buf = 134218240;
        double v40 = v20;
        __int16 v41 = 2048;
        uint64_t v42 = v21;
        _os_log_impl(&dword_1902AF000, v19, OS_LOG_TYPE_FAULT, "Attempted to exceed max monitor time %f, %f", buf, 0x16u);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D778 != -1) {
          dispatch_once(&qword_1E929D778, &unk_1EDFC3668);
        }
        double v31 = *(double *)(*(void *)(a1 + 32) + 40);
        uint64_t v32 = *(void *)(a1 + 64);
        int v35 = 134218240;
        double v36 = v31;
        __int16 v37 = 2048;
        uint64_t v38 = v32;
        std::string v33 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "-[CMPocketStateManager queryStateOntoQueue:andMonitorFor:withTimeout:andHandler:]_block_invoke", "CoreLocation: %s\n", v33);
        if (v33 != (char *)buf) {
          free(v33);
        }
      }
      uint64_t v22 = sub_1904E0110();
      uint64_t v18 = (double *)(*(void *)(a1 + 32) + 40);
    }
    sub_1904E1A64(v22, *v18);
    dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 32) + 8));
  }
  else
  {
    if (qword_1E929D778 != -1) {
      dispatch_once(&qword_1E929D778, &unk_1EDFC3668);
    }
    uint64_t v23 = qword_1E929D770;
    if (os_log_type_enabled((os_log_t)qword_1E929D770, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v23, OS_LOG_TYPE_FAULT, "Query timer failed to initialize", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D778 != -1) {
        dispatch_once(&qword_1E929D778, &unk_1EDFC3668);
      }
      LOWORD(v35) = 0;
      uint64_t v30 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMPocketStateManager queryStateOntoQueue:andMonitorFor:withTimeout:andHandler:]_block_invoke", "CoreLocation: %s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
    objc_msgSend_addToAggdScalarWithName_andScalar_(*(void **)(a1 + 32), v24, @"queryTimerFail", 1);
  }
}

void sub_190574298(uint64_t a1)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (qword_1E929D778 != -1) {
    dispatch_once(&qword_1E929D778, &unk_1EDFC3668);
  }
  uint64_t v2 = qword_1E929D770;
  if (os_log_type_enabled((os_log_t)qword_1E929D770, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = mach_absolute_time();
    *(_DWORD *)uint64_t buf = 134217984;
    double v58 = sub_1902D8D34(v3);
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_INFO, "QueryTimerFire,%f", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D778 != -1) {
      dispatch_once(&qword_1E929D778, &unk_1EDFC3668);
    }
    uint64_t v32 = mach_absolute_time();
    int v49 = 134217984;
    double v50 = sub_1902D8D34(v32);
    std::string v33 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMPocketStateManager queryStateOntoQueue:andMonitorFor:withTimeout:andHandler:]_block_invoke", "CoreLocation: %s\n", v33);
    if (v33 != (char *)buf) {
      free(v33);
    }
  }
  objc_msgSend_addToAggdScalarWithName_andScalar_(*(void **)(a1 + 32), v4, @"queryTimerFire", 1);
  uint64_t v5 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  if (v5)
  {
    dispatch_source_cancel(v5);
    dispatch_release(*(dispatch_object_t *)(*(void *)(a1 + 32) + 8));
    *(void *)(*(void *)(a1 + 32) + 8) = 0;
    uint64_t v7 = objc_msgSend_translateInternalState_(*(void **)(a1 + 32), v6, *(unsigned int *)(*(void *)(a1 + 32) + 24));
    size_t v9 = objc_msgSend_externalStateToString_(*(void **)(a1 + 32), v8, v7);
    int v10 = *(void **)(a1 + 32);
    uint64_t v12 = objc_msgSend_stringWithFormat_(NSString, v11, @"queryResponse.%@", v9);
    objc_msgSend_addToAggdScalarWithName_andScalar_(v10, v13, v12, 1);
    if (qword_1E929D778 != -1) {
      dispatch_once(&qword_1E929D778, &unk_1EDFC3668);
    }
    uint64_t v14 = qword_1E929D770;
    if (os_log_type_enabled((os_log_t)qword_1E929D770, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = mach_absolute_time();
      double v16 = sub_1902D8D34(v15);
      uint64_t v19 = objc_msgSend_UTF8String(v9, v17, v18);
      uint64_t v22 = objc_msgSend_count(*(void **)(*(void *)(a1 + 32) + 48), v20, v21);
      *(_DWORD *)uint64_t buf = 134218754;
      double v58 = v16;
      __int16 v59 = 1024;
      int v60 = v7;
      __int16 v61 = 2080;
      uint64_t v62 = v19;
      __int16 v63 = 2048;
      uint64_t v64 = v22;
      _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_DEFAULT, "%f: query response external=%u (%s), cbcount=%lu", buf, 0x26u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D778 != -1) {
        dispatch_once(&qword_1E929D778, &unk_1EDFC3668);
      }
      uint64_t v34 = mach_absolute_time();
      double v35 = sub_1902D8D34(v34);
      uint64_t v38 = objc_msgSend_UTF8String(v9, v36, v37);
      uint64_t v41 = objc_msgSend_count(*(void **)(*(void *)(a1 + 32) + 48), v39, v40);
      int v49 = 134218754;
      double v50 = v35;
      __int16 v51 = 1024;
      int v52 = v7;
      __int16 v53 = 2080;
      uint64_t v54 = v38;
      __int16 v55 = 2048;
      uint64_t v56 = v41;
      uint64_t v42 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMPocketStateManager queryStateOntoQueue:andMonitorFor:withTimeout:andHandler:]_block_invoke", "CoreLocation: %s\n", v42);
      if (v42 != (char *)buf) {
        free(v42);
      }
    }
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    uint64_t v24 = *(void **)(*(void *)(a1 + 32) + 48);
    uint64_t v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v23, (uint64_t)&v44, v48, 16);
    if (v25)
    {
      uint64_t v28 = v25;
      uint64_t v29 = *(void *)v45;
      do
      {
        for (uint64_t i = 0; i != v28; ++i)
        {
          if (*(void *)v45 != v29) {
            objc_enumerationMutation(v24);
          }
          objc_msgSend_dispatchWithState_andError_(*(void **)(*((void *)&v44 + 1) + 8 * i), v26, v7, 0);
        }
        uint64_t v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v26, (uint64_t)&v44, v48, 16);
      }
      while (v28);
    }
    objc_msgSend_removeAllObjects(*(void **)(*(void *)(a1 + 32) + 48), v26, v27);
  }
  else
  {
    if (qword_1E929D778 != -1) {
      dispatch_once(&qword_1E929D778, &unk_1EDFC3668);
    }
    double v31 = qword_1E929D770;
    if (os_log_type_enabled((os_log_t)qword_1E929D770, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v31, OS_LOG_TYPE_FAULT, "timer fired even though fQueryTimer is NULL", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D778 != -1) {
        dispatch_once(&qword_1E929D778, &unk_1EDFC3668);
      }
      LOWORD(v49) = 0;
      uint64_t v43 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMPocketStateManager queryStateOntoQueue:andMonitorFor:withTimeout:andHandler:]_block_invoke", "CoreLocation: %s\n", v43);
      if (v43 != (char *)buf) {
        free(v43);
      }
    }
  }
}

void sub_190574914(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  double v4 = objc_msgSend_userInfo(*(void **)(a1 + 32), a2, a3);
  int v6 = objc_msgSend_objectForKey_(v4, v5, @"CMSetPocketStateTypeKey");
  unsigned int v9 = objc_msgSend_intValue(v6, v7, v8);
  unsigned int v11 = v9;
  if (v9 < 4)
  {
    uint64_t v13 = *(void **)(a1 + 40);
    uint64_t v14 = objc_msgSend_translateExternalState_(v13, v10, v9);
    MEMORY[0x1F4181798](v13, sel_onPocketStateUpdated_, v14);
  }
  else
  {
    if (qword_1E929D778 != -1) {
      dispatch_once(&qword_1E929D778, &unk_1EDFC3668);
    }
    uint64_t v12 = qword_1E929D770;
    if (os_log_type_enabled((os_log_t)qword_1E929D770, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      unsigned int v17 = v11;
      _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_FAULT, "The pocket state %d is not in bounds", buf, 8u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D778 != -1) {
        dispatch_once(&qword_1E929D778, &unk_1EDFC3668);
      }
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMPocketStateManager onNotification:]_block_invoke", "CoreLocation: %s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
}

uint64_t sub_190574BB4(uint64_t a1, const char *a2, uint64_t a3)
{
  *(_DWORD *)(*(void *)(a1 + 32) + 24) = *(_DWORD *)(a1 + 40);
  objc_msgSend_delegate(*(void **)(a1 + 32), a2, a3);
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v7 = objc_msgSend_delegate(*(void **)(a1 + 32), v5, v6);
    uint64_t v8 = *(void **)(a1 + 32);
    objc_msgSend_translateInternalState_(v8, v9, *(unsigned int *)(a1 + 40));
    return MEMORY[0x1F4181798](v7, sel_pocketStateManager_didUpdateState_, v8);
  }
  return result;
}

os_log_t sub_190574C90()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Pocket");
  qword_1E929D770 = (uint64_t)result;
  return result;
}

void sub_190574CC4(uint64_t a1)
{
  sub_1902BC548(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190574CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a3, *(void *)(a1 + 24));
}

long double sub_190574D08(double a1, double a2, double a3, double a4)
{
  double v4 = a3;
  long double result = 0.0;
  if (a3 > 90.0 || a1 < -90.0 || a1 > 90.0 || a3 < -90.0) {
    return result;
  }
  double v7 = a4 + 360.0;
  if (a4 >= 0.0) {
    double v7 = a4;
  }
  double v8 = a2 + 360.0;
  if (a2 >= 0.0) {
    double v8 = a2;
  }
  double v9 = v8 - v7;
  if (v9 <= 180.0)
  {
    if (v9 < -180.0) {
      double v9 = v9 + 360.0;
    }
  }
  else
  {
    double v9 = v9 + -360.0;
  }
  if (fabs(a1 + v4) >= 0.0001)
  {
    double v42 = a2;
    double v43 = a4;
LABEL_18:
    double v11 = v9;
    goto LABEL_19;
  }
  double v10 = fabs(a1);
  if (v10 < 0.0001 && 180.0 - fabs(v9) < 0.0001) {
    return 20037508.3;
  }
  BOOL v41 = fabs(v10 + -90.0) < 0.0001;
  if (v41) {
    double v11 = 0.0;
  }
  else {
    double v11 = v9;
  }
  double v42 = a2;
  double v43 = a4;
  if (!v41 && 180.0 - fabs(v9) >= 0.0001) {
    goto LABEL_18;
  }
  if (a1 <= v4) {
    double v4 = v4 + -0.0001;
  }
  else {
    a1 = a1 + -0.0001;
  }
LABEL_19:
  double v12 = v11 * 0.0174532925;
  double v44 = a1;
  double v13 = tan(a1 * 0.0174532925);
  long double v14 = tan(v4 * 0.0174532925);
  long double v15 = v13 * 0.996647189;
  long double v16 = v14 * 0.996647189;
  double v17 = atan(v15);
  double v18 = atan(v16);
  __double2 v19 = __sincos_stret(v17);
  __double2 v20 = __sincos_stret(v18);
  unsigned int v21 = 0;
  double v22 = v19.__cosval * v20.__cosval;
  double v23 = v12;
  while (1)
  {
    __double2 v24 = __sincos_stret(v23);
    double v25 = sqrt((-(v19.__sinval * v20.__cosval) * v24.__cosval + v19.__cosval * v20.__sinval)* (-(v19.__sinval * v20.__cosval) * v24.__cosval + v19.__cosval * v20.__sinval)+ v20.__cosval * v24.__sinval * (v20.__cosval * v24.__sinval));
    if (v25 < 2.22044605e-15) {
      break;
    }
    double v26 = v22 * v24.__cosval + v19.__sinval * v20.__sinval;
    double v27 = fabs(v26);
    if (fabs(v25) > 1.0 || v27 > 1.0) {
      break;
    }
    double v29 = atan2(v25, v26);
    double v30 = v22 * v24.__sinval / v25;
    if (v30 > 1.0) {
      break;
    }
    double v31 = 1.0 - v30 * v30;
    if (fabs(v31) >= 2.22044605e-15)
    {
      double v33 = v26 - (v19.__sinval + v19.__sinval) * v20.__sinval / v31;
      double v32 = v31 * 0.000209550667 * ((v31 * -3.0 + 4.0) * 0.00335281066 + 4.0);
    }
    else
    {
      double v32 = 0.0;
      double v33 = -1.0;
    }
    double v34 = v30 * ((1.0 - v32) * 0.00335281066);
    double v35 = v33 * v33 * 2.0 + -1.0;
    double v36 = v12 + v34 * (v29 + v25 * v32 * (v33 + v26 * v32 * v35));
    if (vabdd_f64(v36, v23) > 0.000000001)
    {
      double v23 = v36;
      if (v21++ < 0x31) {
        continue;
      }
    }
    double v38 = v31 * 2.72331606e11 / 4.04083e13;
    double v39 = v38 * 0.0000610351562 * (v38 * (v38 * (v38 * -175.0 + 320.0) + -768.0) + 4096.0) + 1.0;
    double v40 = v38 * 0.0009765625 * (v38 * (v38 * (v38 * -47.0 + 74.0) + -128.0) + 256.0);
    return v39
         * 6356752.31
         * (v29 - v25 * v40 * (v33 + v40 * 0.25 * ((v33 * v33 * 4.0 + -3.0) * (v40 / 6.0 * v33 * 3.0) + v26 * v35)));
  }

  return sub_190575160(v44, v42, v4, v43);
}

long double sub_190575160(double a1, double a2, double a3, double a4)
{
  double v5 = 360.0;
  if (a2 < 0.0) {
    a2 = a2 + 360.0;
  }
  if (a4 < 0.0) {
    a4 = a4 + 360.0;
  }
  double v6 = a4 - a2;
  if (v6 <= 180.0)
  {
    if (v6 >= -180.0) {
      goto LABEL_9;
    }
  }
  else
  {
    double v5 = -360.0;
  }
  double v6 = v6 + v5;
LABEL_9:
  double v7 = a1 * 0.0174532925;
  double v8 = v6 * 0.0174532925;
  long double v9 = sin((a3 - a1) * 0.0174532925 * 0.5);
  long double v10 = v9 * v9;
  __double2 v11 = __sincos_stret(v7);
  long double v12 = v11.__cosval * cos(a3 * 0.0174532925);
  long double v13 = sin(v8 * 0.5);
  double v14 = v10 + v12 * (v13 * v13);
  double v15 = 1.0 - v14;
  if (v14 < 0.0) {
    double v14 = 0.0;
  }
  if (v15 < 0.0) {
    double v15 = 0.0;
  }
  long double v16 = atan2(sqrt(v14), sqrt(v15));
  return (fabs(v11.__sinval) * -21000.0 + 6378160.0) * (v16 + v16);
}

BOOL sub_190575288(double a1, double a2, double a3, double a4)
{
  if (a2 < 0.0) {
    a2 = a2 + 360.0;
  }
  if (a4 < 0.0) {
    a4 = a4 + 360.0;
  }
  double v4 = a4 - a2;
  if (v4 <= 180.0)
  {
    if (v4 < -180.0) {
      double v4 = v4 + 360.0;
    }
  }
  else
  {
    double v4 = v4 + -360.0;
  }
  unsigned int v5 = (int)v4;
  if ((int)v4 < 0) {
    unsigned int v5 = -v5;
  }
  int v6 = (int)a3 - (int)a1;
  if (v6 < 0) {
    int v6 = (int)a1 - (int)a3;
  }
  return v6 > 2 || v5 > 2;
}

BOOL sub_19057530C(double *a1, double *a2, double *a3, double *a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v10 = vabdd_f64(a5, a8);
  if (v10 <= 2.0)
  {
    double v21 = a1[3];
    if (v21 == 0.0 || vabdd_f64(a5, v21) > 0.005)
    {
      double v22 = (a5 + a8) * 0.5;
      a1[2] = v22 * 0.0174532925;
      a1[3] = v22;
      __double2 v23 = __sincos_stret(v22 * 0.0174532925);
      double v24 = v23.__sinval * -0.00669437999 * v23.__sinval + 1.0;
      double v25 = sqrt(v24);
      *a1 = 6335439.33 / (v24 * v25);
      a1[1] = 6378137.0 / v25;
      a1[4] = v23.__cosval;
    }
    double v26 = 360.0;
    double v27 = a6 + 360.0;
    if (a6 >= 0.0) {
      double v27 = a6;
    }
    double v28 = a9 + 360.0;
    if (a9 >= 0.0) {
      double v28 = a9;
    }
    double v29 = v28 - v27;
    if (v29 <= 180.0)
    {
      if (v29 >= -180.0)
      {
LABEL_13:
        *a2 = (a8 - a5) * 0.0174532925 * (*a1 + a7);
        *a3 = v29 * 0.0174532925 * ((a1[1] + a7) * a1[4]);
        *a4 = a10 - a7;
        return v10 <= 2.0;
      }
    }
    else
    {
      double v26 = -360.0;
    }
    double v29 = v29 + v26;
    goto LABEL_13;
  }
  return v10 <= 2.0;
}

long double sub_1905754A8(double *a1, double a2, double a3, double a4, double a5, double a6)
{
  double v14 = 0.0;
  double v15 = 0.0;
  if (!sub_190575288(a2, a3, a4, a5) && sub_19057530C(a1, &v15, &v14, &v13, a2, a3, a6, a4, a5, a6)) {
    return sqrt(v14 * v14 + v15 * v15);
  }

  return sub_190574D08(a2, a3, a4, a5);
}

void sub_190575584(double *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  double v6 = *(double *)(a2 + 36);
  double v7 = *(double *)(a3 + 36);
  if (v6 <= 0.0 || v7 <= 0.0)
  {
    if (v6 <= 0.0)
    {
      double v9 = 0.0;
      if (v7 <= 0.0) {
        goto LABEL_26;
      }
      double v8 = *(double *)(a3 + 28);
    }
    else
    {
      double v8 = *(double *)(a2 + 28);
    }
  }
  else
  {
    double v8 = (*(double *)(a2 + 28) + *(double *)(a3 + 28)) * 0.5;
  }
  double v9 = -450.0;
  if (v8 >= -450.0)
  {
    double v9 = 1000000.0;
    if (v8 <= 1000000.0)
    {
      double v9 = v8;
      goto LABEL_26;
    }
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD25C0);
    }
    __double2 v11 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134218240;
      unint64_t v18 = 0x412E848000000000;
      __int16 v19 = 2048;
      double v20 = v8;
      _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_DEFAULT, "#Warning refAlt > %.1lf,refAlt,%.1lf,using the max", buf, 0x16u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 == -1) {
        goto LABEL_23;
      }
      goto LABEL_29;
    }
  }
  else
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD25C0);
    }
    double v10 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134218240;
      unint64_t v18 = 0xC07C200000000000;
      __int16 v19 = 2048;
      double v20 = v8;
      _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_DEFAULT, "#Warning refAlt < %.1lf,refAlt,%.1lf,using the min", buf, 0x16u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 == -1)
      {
LABEL_23:
        long double v12 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "double CLDistanceCalc::calculateDistance(const CLDaemonLocation &, const CLDaemonLocation &)", "CoreLocation: %s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
        goto LABEL_26;
      }
LABEL_29:
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD25C0);
      goto LABEL_23;
    }
  }
LABEL_26:
  double v13 = *(double *)(a2 + 4);
  double v14 = *(double *)(a2 + 12);
  double v15 = *(double *)(a3 + 4);
  double v16 = *(double *)(a3 + 12);
  if (sub_190575288(v13, v14, v15, v16)) {
    sub_190574D08(v13, v14, v15, v16);
  }
  else {
    sub_1905754A8(a1, v13, v14, v15, v16, v9);
  }
}

uint64_t sub_190576BA8()
{
  if (qword_1EB3BF5F8 != -1) {
    dispatch_once(&qword_1EB3BF5F8, &unk_1EDFD25E0);
  }
  return qword_1EB3BF5F0;
}

void sub_190576BEC()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1905772C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_19047E7E8((uint64_t)va);
  double v8 = (std::__shared_weak_count *)v5[45];
  if (v8) {
    sub_1902D8B58(v8);
  }
  sub_1902D5AB8(v6);
  sub_1904DC240(v5);
  MEMORY[0x192FCC980](v5, 0x10F1C4010CC6B30);
  _Unwind_Resume(a1);
}

void sub_1905776E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_1902D6BD0();
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = sub_19057B950;
  v11[3] = &unk_1E568FCA8;
  v11[4] = a2;
  void v11[5] = a1;
  v11[6] = a3;
  v11[7] = a4;
  v11[8] = a5;
  sub_1902CDE98(v10, (uint64_t)v11);
}

void *sub_190577788(void *a1)
{
  *a1 = &unk_1EDFC9460;
  sub_1905777F4(a1);
  uint64_t v2 = (std::__shared_weak_count *)a1[45];
  if (v2) {
    sub_1902D8B58(v2);
  }
  sub_1902D5AB8(a1 + 13);

  return sub_1904DC240(a1);
}

void sub_1905777F4(void *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    sub_1902D5AB8(v2 + 90);
    sub_1902D5AB8(v2 + 61);
    sub_1902D5AB8(v2 + 32);
    sub_1902D5AB8(v2 + 3);
    MEMORY[0x192FCC980](v2, 0x1080C40300B9403);
    a1[5] = 0;
  }
  if (a1[6])
  {
    uint64_t v3 = sub_1902DFEC4();
    sub_1902CDE08(v3, 0, a1[6]);
    uint64_t v4 = a1[6];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    a1[6] = 0;
  }
  if (a1[8])
  {
    uint64_t v5 = sub_1902B4534();
    sub_1902CDE08(v5, 0, a1[8]);
    uint64_t v6 = a1[8];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    a1[8] = 0;
  }
  if (qword_1EB3BE828 != -1) {
    dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
  }
  double v7 = off_1EB3BE820;
  if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_DEFAULT, "Stopping orientation detection.", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
    }
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationNotifier::stopDetection()", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
}

void sub_190577A58(void *a1)
{
  sub_190577788(a1);

  JUMPOUT(0x192FCC980);
}

void sub_190577A90(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a2 >= 3)
  {
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
    }
    uint64_t v3 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_FAULT, "Unrecognized notification", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
      }
      LOWORD(v19) = 0;
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "virtual void CLOrientationNotifier::numberOfSpectatorsChanged(int, size_t)", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return;
  }
  if (!*(void *)(a1 + 352))
  {
    if (qword_1EB3BF808 != -1) {
      dispatch_once(&qword_1EB3BF808, &unk_1EDFD2180);
    }
    uint64_t v17 = 0x8A00000020;
    char v18 = 0;
    sub_19043791C((void *)qword_1EB3BF800, (uint64_t)&v17, (uint64_t *)buf);
    long long v8 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    double v9 = *(std::__shared_weak_count **)(a1 + 360);
    *(_OWORD *)(a1 + 352) = v8;
    if (v9)
    {
      sub_1902D8B58(v9);
      if (*(void *)&buf[8]) {
        sub_1902D8B58(*(std::__shared_weak_count **)&buf[8]);
      }
    }
    sub_1905D661C(*(void **)(a1 + 352), &unk_1EE001BB0);
  }
  if (a3 != 1)
  {
    if (!a3)
    {
      *(unsigned char *)(a1 + 33) = 0;
      if (*(void *)(a1 + 392))
      {
        uint64_t v10 = sub_190488420();
        sub_1902CDE08(v10, 0, *(void *)(a1 + 392));
        uint64_t v11 = *(void *)(a1 + 392);
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
        *(void *)(a1 + 392) = 0;
      }
      if ((sub_1902CD6B0() & 0x40) != 0)
      {
        sub_1902CDC50(*(void *)(a1 + 352), 0);
        int v12 = *(_DWORD *)(a1 + 368) - 1;
        *(_DWORD *)(a1 + 368) = v12;
        if (!v12)
        {
          sub_1905D5E88(*(void *)(a1 + 352), 0, 0);
          if (sub_1902B8788(*(void *)(a1 + 352))) {
            sub_190579848((void *)a1);
          }
        }
        sub_1905D506C(*(void *)(a1 + 352), 0, 0);
        sub_1905D4D98(*(void *)(a1 + 352), 0, 0);
        sub_1902CD864(*(void *)(a1 + 352), 0, 0);
      }
      if (*(void *)(a1 + 48)) {
        sub_1905777F4((void *)a1);
      }
    }
    return;
  }
  if ((sub_1902CD6B0() & 0x40) != 0)
  {
    sub_1902CD864(*(void *)(a1 + 352), (uint64_t)sub_1905781CC, a1);
    sub_1905D4D98(*(void *)(a1 + 352), (uint64_t)sub_190578570, a1);
    sub_1905D506C(*(void *)(a1 + 352), (uint64_t)nullsub_159, a1);
    int v13 = *(_DWORD *)(a1 + 368);
    *(_DWORD *)(a1 + 368) = v13 + 1;
    if (!v13)
    {
      sub_1905D5E88(*(void *)(a1 + 352), (const char *)sub_190579810, a1);
      if (sub_1902B8788(*(void *)(a1 + 352))) {
        sub_190579848((void *)a1);
      }
      sub_190579AA0(a1);
    }
    if (a2 <= 1)
    {
      sub_1902CDC50(*(void *)(a1 + 352), 1);
      goto LABEL_55;
    }
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
    }
    double v14 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = 2;
      _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_FAULT, "Unrecognized notification request %{public}u", buf, 8u);
    }
    if (!sub_1902D8400(115, 0)) {
      goto LABEL_55;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
    }
    int v19 = 67240192;
    int v20 = 2;
    double v15 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "virtual void CLOrientationNotifier::numberOfSpectatorsChanged(int, size_t)", "CoreLocation: %s\n", v15);
LABEL_62:
    if (v15 != (char *)buf) {
      free(v15);
    }
    goto LABEL_55;
  }
  if (a2 == 1)
  {
    sub_1905785B0(a1, 1);
    goto LABEL_55;
  }
  if (a2)
  {
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
    }
    double v16 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v16, OS_LOG_TYPE_FAULT, "Unrecognized notification", buf, 2u);
    }
    if (!sub_1902D8400(115, 0)) {
      goto LABEL_55;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
    }
    LOWORD(v19) = 0;
    double v15 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "virtual void CLOrientationNotifier::numberOfSpectatorsChanged(int, size_t)", "CoreLocation: %s\n", v15);
    goto LABEL_62;
  }
  sub_1905785B0(a1, 0);
LABEL_55:
  if (!*(void *)(a1 + 392)) {
    operator new();
  }
  *(unsigned char *)(a1 + 33) = 1;
}

void sub_1905781A0(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

void sub_1905781CC(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 48)) {
    return;
  }
  if (IOHIDEventGetType() == 10)
  {
    uint64_t IntegerValue = IOHIDEventGetIntegerValue();
    if ((unint64_t)(IntegerValue - 107) <= 0xFFFFFFFFFFFFFFF8)
    {
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
      }
      uint64_t v3 = off_1EB3BE820;
      if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134349056;
        uint64_t v10 = IntegerValue;
        _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_ERROR, "Received invalid orientation %{public}ld", buf, 0xCu);
      }
      if (!sub_1902D8400(115, 0)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "void CLOrientationNotifier::onIohidEvent(void *, void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v4);
      if (v4 == (char *)buf) {
        return;
      }
LABEL_25:
      free(v4);
      return;
    }
    unint64_t v6 = sub_1905E72B8();
    unint64_t TimeStamp = IOHIDEventGetTimeStamp();
    double v8 = sub_1902D8D34(TimeStamp);
    sub_19057C380(a1, v6, (IntegerValue - 100), v8);
  }
  else
  {
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
    }
    uint64_t v5 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      LODWORD(v10) = IOHIDEventGetType();
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_DEFAULT, "Received wrong event type %{public}u", buf, 8u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
      }
      IOHIDEventGetType();
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationNotifier::onIohidEvent(void *, void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf) {
        goto LABEL_25;
      }
    }
  }
}

uint64_t sub_190578570(NSObject *a1)
{
  sub_19057AA40(a1);

  return sub_19057BB34((uint64_t)a1, 1);
}

void sub_1905785B0(uint64_t a1, int a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    sub_1902D5AB8(v4 + 90);
    sub_1902D5AB8(v4 + 61);
    sub_1902D5AB8(v4 + 32);
    sub_1902D5AB8(v4 + 3);
    MEMORY[0x192FCC980](v4, 0x1080C40300B9403);
    *(void *)(a1 + 40) = 0;
  }
  unsigned int v5 = *(unsigned __int8 *)(a1 + 32);
  if (v5 < 2) {
    int v6 = 1;
  }
  else {
    int v6 = a2;
  }
  if (v6 == 1)
  {
    if (v5 >= 2 && a2 != 0)
    {
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
      }
      double v8 = off_1EB3BE820;
      if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = *(unsigned __int8 *)(a1 + 32);
        *(_DWORD *)uint64_t buf = 67240192;
        LODWORD(v35) = v9;
        _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_DEFAULT, "forceAccelOnly for device %{public}d", buf, 8u);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE828 != -1) {
          dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
        }
        double v32 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationNotifier::startDetection(BOOL)", "CoreLocation: %s\n", v32);
        if (v32 != (char *)buf) {
          free(v32);
        }
      }
      *(unsigned char *)(a1 + 32) = 0;
    }
    *(_DWORD *)(a1 + 56) = 1092616192;
    *(_DWORD *)(a1 + 76) = 1;
    *(void *)(a1 + 88) = 0;
  }
  else
  {
    *(void *)(a1 + 56) = 0x41A0000041C80000;
    uint64_t v10 = sub_1902D6BD0();
    uint64_t v11 = *(void *)(v10 + 24);
    int v12 = *(std::__shared_weak_count **)(v10 + 32);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1902C4784(v11, "OrientationGyroTimeout", (void *)(a1 + 88));
    if (v12) {
      sub_1902D8B58(v12);
    }
    double v13 = *(double *)(a1 + 88);
    *(unsigned char *)(a1 + 80) = v13 > 0.0;
    if (v13 > 0.0)
    {
      *(void *)(a1 + 112) = 8;
      *(void *)(a1 + 128) = 8;
      sub_1902B5164((void *)(a1 + 120));
      *(void *)(a1 + 200) = 8;
      sub_1902B5164((void *)(a1 + 192));
      *(void *)(a1 + 272) = 8;
      sub_1902B5164((void *)(a1 + 264));
      *(_DWORD *)(a1 + 76) = 2;
    }
    uint64_t v14 = sub_1902D6BD0();
    uint64_t v15 = *(void *)(v14 + 24);
    double v16 = *(std::__shared_weak_count **)(v14 + 32);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v17 = sub_19045F394(v15, "OrientationStableVariance", (float *)(a1 + 84));
    if (v16) {
      sub_1902D8B58(v16);
    }
    if ((v17 & 1) == 0) {
      *(_DWORD *)(a1 + 84) = 961656599;
    }
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
    }
    char v18 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = *(void *)(a1 + 88);
      int v20 = *(unsigned __int8 *)(a1 + 80);
      double v21 = *(float *)(a1 + 84);
      *(_DWORD *)uint64_t buf = 134349568;
      uint64_t v35 = v19;
      __int16 v36 = 1026;
      int v37 = v20;
      __int16 v38 = 2050;
      double v39 = v21;
      _os_log_impl(&dword_1902AF000, v18, OS_LOG_TYPE_INFO, "fOrientationGyroTimeout,%{public}f,fEnableGyroTimeout,%{public}d,fMaxAccelerationVarianceForStability,%{public}f", buf, 0x1Cu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
      }
      double v30 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationNotifier::startDetection(BOOL)", "CoreLocation: %s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
  }
  uint64_t v22 = sub_1902D6BD0();
  uint64_t v23 = *(void *)(v22 + 24);
  double v24 = *(std::__shared_weak_count **)(v22 + 32);
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1902B44C0(v23, "OrientationAccelDecimation", (_DWORD *)(a1 + 76));
  if (v24) {
    sub_1902D8B58(v24);
  }
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 76);
  if (*(float *)(a1 + 56) <= 0.0)
  {
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
    }
    double v27 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v27, OS_LOG_TYPE_FAULT, "Not starting orientation detection since requested accelerometer frequency < 0", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 == -1) {
        goto LABEL_82;
      }
      goto LABEL_84;
    }
  }
  else
  {
    if (sub_1902DFEC4())
    {
      if ((v6 & 1) != 0 || sub_1902B4534())
      {
        if (qword_1EB3BE828 != -1) {
          dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
        }
        double v25 = off_1EB3BE820;
        if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEFAULT))
        {
          int v26 = *(unsigned __int8 *)(a1 + 34);
          *(_DWORD *)uint64_t buf = 67240192;
          LODWORD(v35) = v26;
          _os_log_impl(&dword_1902AF000, v25, OS_LOG_TYPE_DEFAULT, "fHasSeenACaseLatchCoverOnce, %{public}d", buf, 8u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE828 != -1) {
            dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
          }
          double v31 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationNotifier::startDetection(BOOL)", "CoreLocation: %s\n", v31);
          if (v31 != (char *)buf) {
            free(v31);
          }
        }
        operator new();
      }
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
      }
      double v29 = off_1EB3BE820;
      if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_1902AF000, v29, OS_LOG_TYPE_FAULT, "No gyro; not detecting orientation!", buf, 2u);
      }
      if (!sub_1902D8400(115, 0)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 == -1)
      {
LABEL_82:
        double v33 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "void CLOrientationNotifier::startDetection(BOOL)", "CoreLocation: %s\n", v33);
        if (v33 != (char *)buf) {
          free(v33);
        }
        return;
      }
LABEL_84:
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
      goto LABEL_82;
    }
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
    }
    double v28 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v28, OS_LOG_TYPE_FAULT, "No accelerometer; not detecting orientation!", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 == -1) {
        goto LABEL_82;
      }
      goto LABEL_84;
    }
  }
}

void sub_1905792D4(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

void sub_19057933C(unsigned char *a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE828 != -1) {
    dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
  }
  uint64_t v4 = off_1EB3BE820;
  if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_INFO))
  {
    int v5 = *a1;
    *(_DWORD *)uint64_t buf = 67240192;
    LODWORD(v27) = v5;
    _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_INFO, "Received keyboard state %{public}u", buf, 8u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
    }
    int v13 = *a1;
    int v22 = 67240192;
    LODWORD(v23) = v13;
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "static void CLOrientationNotifier::onKeyboardState(const BOOL *, void *)", "CoreLocation: %s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  uint64_t v6 = *(void *)(a2 + 40);
  if (v6) {
    *(unsigned char *)(v6 + 1036) = *a1;
  }
  if (*(void *)(a2 + 384))
  {
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
    }
    double v7 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_INFO))
    {
      int v8 = *a1;
      *(_DWORD *)uint64_t buf = 67109120;
      LODWORD(v27) = v8;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_INFO, "Sending keyboard state %u to AOP", buf, 8u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
      }
      int v15 = *a1;
      int v22 = 67109120;
      LODWORD(v23) = v15;
      double v16 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "static void CLOrientationNotifier::onKeyboardState(const BOOL *, void *)", "CoreLocation: %s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    __int16 v21 = 5;
    HIBYTE(v21) = *a1;
    char v20 = 0;
    uint64_t v19 = 1;
    mach_error_t v9 = (*(uint64_t (**)(void, uint64_t, __int16 *, uint64_t, char *, uint64_t *))(**(void **)(a2 + 384)
                                                                                           + 160))(*(void *)(a2 + 384), 32, &v21, 2, &v20, &v19);
    if (v9)
    {
      mach_error_t v10 = v9;
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
      }
      uint64_t v11 = off_1EB3BE820;
      if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_FAULT))
      {
        int v12 = mach_error_string(v10);
        *(_DWORD *)uint64_t buf = 136315394;
        double v27 = v12;
        __int16 v28 = 1026;
        mach_error_t v29 = v10;
        _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_FAULT, "SendCommand() = %s (0x%{public}x)", buf, 0x12u);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE828 != -1) {
          dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
        }
        char v17 = mach_error_string(v10);
        int v22 = 136315394;
        uint64_t v23 = v17;
        __int16 v24 = 1026;
        mach_error_t v25 = v10;
        char v18 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "static void CLOrientationNotifier::onKeyboardState(const BOOL *, void *)", "CoreLocation: %s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
    }
  }
}

void sub_190579810(NSObject *a1)
{
  sub_190579848(a1);

  sub_190579AA0(a1);
}

void sub_190579848(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current == *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (a1[44])
    {
      uint64_t v5 = a1[48];
      if (v5) {
        (*(void (**)(uint64_t, void))(*(void *)v5 + 72))(v5, 0);
      }
      uint64_t v6 = (IOCFPlugInInterface ***)(a1 + 47);
      uint64_t v7 = a1[47];
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
        IODestroyPlugInInterface(*v6);
      }
      *(void *)(a1[44] + 8) = 0;
      void *v6 = 0;
      a1[48] = 0;
    }
  }
  else
  {
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
    }
    uint64_t v3 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_FAULT, "closeHidDriverInterface should be called from motion thread", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
      }
      __int16 v10 = 0;
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "void CLOrientationNotifier::closeHidDriverInterface()", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    uint64_t v4 = sub_1902D6BD0();
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    _OWORD v9[2] = sub_19057B010;
    float v9[3] = &unk_1E568CF68;
    v9[4] = a1;
    sub_1902CDE98(v4, (uint64_t)v9);
  }
}

void sub_190579AA0(NSObject *a1)
{
  kern_return_t ParentEntry;
  mach_error_t v14;
  NSObject *v15;
  char *v16;
  io_registry_entry_t v17;
  NSObject *v18;
  uint8_t *v19;
  NSObject *v20;
  kern_return_t v21;
  mach_error_t v22;
  NSObject *v23;
  char *v24;
  io_service_t v25;
  CFAllocatorRef v26;
  CFUUIDRef v27;
  CFUUIDRef v28;
  kern_return_t v29;
  mach_error_t v30;
  NSObject *v31;
  char *v32;
  char *v33;
  IOCFPlugInInterface **v34;
  HRESULT (__cdecl *QueryInterface)(void *, REFIID, LPVOID *);
  CFUUIDRef v36;
  CFUUIDBytes v37;
  mach_error_t v38;
  mach_error_t v39;
  NSObject *v40;
  char *v41;
  mach_error_t v42;
  mach_error_t v43;
  NSObject *v44;
  char *v45;
  NSObject *v46;
  Class v47;
  Class v48;
  objc_class *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  Class v59;
  Class v60;
  char *v61;
  io_registry_entry_t v62;
  io_registry_entry_t parent;
  SInt32 theScore;
  objc_class *v65;
  IOCFPlugInInterface **theInterface;
  uint64_t valuePtr;
  void v68[5];
  int v69;
  unsigned char v70[28];
  __int16 v71;
  IOCFPlugInInterface **v72;
  __int16 v73;
  objc_class *v74;
  uint8_t buf[4];
  unsigned char v76[28];
  __int16 v77;
  IOCFPlugInInterface **v78;
  __int16 v79;
  objc_class *v80;
  uint64_t v81;

  unint64_t v81 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current != *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
    }
    uint64_t v3 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_FAULT, "openHidDriverInterface should be called from motion thread", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
      }
      LOWORD(v69) = 0;
      double v50 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "void CLOrientationNotifier::openHidDriverInterface()", "CoreLocation: %s\n", v50);
      if (v50 != (char *)buf) {
        free(v50);
      }
    }
    uint64_t v4 = sub_1902D6BD0();
    v68[0] = MEMORY[0x1E4F143A8];
    v68[1] = 3221225472;
    v68[2] = sub_19057AA38;
    v68[3] = &unk_1E568CF68;
    v68[4] = a1;
    sub_1902CDE98(v4, (uint64_t)v68);
    return;
  }
  uint64_t isa = (uint64_t)a1[44].isa;
  if (!isa) {
    return;
  }
  theInterface = 0;
  int valuePtr = 0;
  uint64_t v65 = 0;
  uint64_t v6 = (__IOHIDServiceClient *)sub_1902B8788(isa);
  if (v6)
  {
    uint64_t v7 = v6;
    CFNumberRef RegistryID = (const __CFNumber *)IOHIDServiceClientGetRegistryID(v6);
    CFNumberGetValue(RegistryID, kCFNumberSInt64Type, &valuePtr);
    theScore = 0;
    mach_port_t v9 = *MEMORY[0x1E4F2EEF0];
    CFDictionaryRef v10 = IORegistryEntryIDMatching(valuePtr);
    io_service_t MatchingService = IOServiceGetMatchingService(v9, v10);
    if (MatchingService)
    {
      io_object_t v12 = MatchingService;
      uint64_t v62 = 0;
      parent = 0;
      ParentEntry = IORegistryEntryGetParentEntry(MatchingService, "IOService", &parent);
      if (ParentEntry)
      {
        uint64_t v14 = ParentEntry;
        if (qword_1EB3BE828 != -1) {
          dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
        }
        int v15 = off_1EB3BE820;
        if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_FAULT))
        {
          double v16 = mach_error_string(v14);
          *(_DWORD *)uint64_t buf = 67240450;
          *(_DWORD *)unint64_t v76 = v14;
          *(_WORD *)&v76[4] = 2082;
          *(void *)&v76[6] = v16;
          _os_log_impl(&dword_1902AF000, v15, OS_LOG_TYPE_FAULT, "Unable to get parent of orientation service,retCode,0x%{public}x,retStr,%{public}s", buf, 0x12u);
        }
        if (sub_1902D8400(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE828 != -1) {
            dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
          }
          __int16 v51 = mach_error_string(v14);
          blkcnt_t v69 = 67240450;
          *(_DWORD *)long long v70 = v14;
          *(_WORD *)&v70[4] = 2082;
          *(void *)&v70[6] = v51;
          int v52 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 0, "void CLOrientationNotifier::openHidDriverInterface()", "CoreLocation: %s\n", v52);
          if (v52 != (char *)buf) {
            free(v52);
          }
        }
        char v17 = v12;
LABEL_45:
        IOObjectRelease(v17);
        return;
      }
      IOObjectRelease(v12);
      __int16 v21 = IORegistryEntryGetParentEntry(parent, "IOService", &v62);
      if (v21)
      {
        int v22 = v21;
        if (qword_1EB3BE828 != -1) {
          dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
        }
        uint64_t v23 = off_1EB3BE820;
        if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_FAULT))
        {
          __int16 v24 = mach_error_string(v22);
          *(_DWORD *)uint64_t buf = 67240450;
          *(_DWORD *)unint64_t v76 = v22;
          *(_WORD *)&v76[4] = 2082;
          *(void *)&v76[6] = v24;
          _os_log_impl(&dword_1902AF000, v23, OS_LOG_TYPE_FAULT, "Unable to get grand parent of orientation service,retCode,0x%{public}x,retStr,%{public}s", buf, 0x12u);
        }
        if (sub_1902D8400(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE828 != -1) {
            dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
          }
          __int16 v53 = mach_error_string(v22);
          blkcnt_t v69 = 67240450;
          *(_DWORD *)long long v70 = v22;
          *(_WORD *)&v70[4] = 2082;
          *(void *)&v70[6] = v53;
          uint64_t v54 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 0, "void CLOrientationNotifier::openHidDriverInterface()", "CoreLocation: %s\n", v54);
          if (v54 != (char *)buf) {
            free(v54);
          }
        }
        char v17 = parent;
        goto LABEL_45;
      }
      IOObjectRelease(parent);
      mach_error_t v25 = v62;
      int v26 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
      double v27 = CFUUIDGetConstantUUIDWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], 0x7Au, 0xCFu, 0x53u, 0x32u, 0x1Au, 0x35u, 0x48u, 0x93u, 0x87u, 0xCBu, 0xBAu, 0x64u, 0xE1u, 0x88u, 0x7Fu, 0xAEu);
      __int16 v28 = CFUUIDGetConstantUUIDWithBytes(0, 0xC2u, 0x44u, 0xE8u, 0x58u, 0x10u, 0x9Cu, 0x11u, 0xD4u, 0x91u, 0xD4u, 0, 0x50u, 0xE4u, 0xC6u, 0x42u, 0x6Fu);
      mach_error_t v29 = IOCreatePlugInInterfaceForService(v25, v27, v28, &theInterface, &theScore);
      if (!v29)
      {
        double v34 = theInterface;
        QueryInterface = (*theInterface)->QueryInterface;
        __int16 v36 = CFUUIDGetConstantUUIDWithBytes(v26, 1u, 0x64u, 0x69u, 0xD8u, 0x77u, 0x3Bu, 0x46u, 0xACu, 0x90u, 0x9Eu, 0xF9u, 0xCu, 0x4Au, 0x6Eu, 0x75u, 0x77u);
        int v37 = CFUUIDGetUUIDBytes(v36);
        __int16 v38 = ((uint64_t (*)(IOCFPlugInInterface **, void, void, objc_class **))QueryInterface)(v34, *(void *)&v37.byte0, *(void *)&v37.byte8, &v65);
        if (v38)
        {
          double v39 = v38;
          if (qword_1EB3BE828 != -1) {
            dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
          }
          uint64_t v40 = off_1EB3BE820;
          if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_FAULT))
          {
            BOOL v41 = mach_error_string(v39);
            *(_DWORD *)uint64_t buf = 67240706;
            *(_DWORD *)unint64_t v76 = v39;
            *(_WORD *)&v76[4] = 2082;
            *(void *)&v76[6] = v41;
            *(_WORD *)&v76[14] = 2114;
            *(void *)&v76[16] = v7;
            _os_log_impl(&dword_1902AF000, v40, OS_LOG_TYPE_FAULT, "Unable to set up query interface,retCode,0x%{public}x,retStr,%{public}s,service,%{public}@", buf, 0x1Cu);
          }
          if (sub_1902D8400(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EB3BE828 != -1) {
              dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
            }
            __int16 v55 = mach_error_string(v39);
            blkcnt_t v69 = 67240706;
            *(_DWORD *)long long v70 = v39;
            *(_WORD *)&v70[4] = 2082;
            *(void *)&v70[6] = v55;
            *(_WORD *)&v70[14] = 2114;
            *(void *)&v70[16] = v7;
            uint64_t v56 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 0, "void CLOrientationNotifier::openHidDriverInterface()", "CoreLocation: %s\n", v56);
            if (v56 != (char *)buf) {
              free(v56);
            }
          }
        }
        else
        {
          double v42 = (*(uint64_t (**)(objc_class *, void))(*(void *)v65 + 64))(v65, 0);
          if (!v42)
          {
            if (qword_1EB3BE828 != -1) {
              dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
            }
            long long v46 = off_1EB3BE820;
            if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEFAULT))
            {
              long long v47 = a1[47].isa;
              uint64_t v48 = a1[48].isa;
              *(_DWORD *)uint64_t buf = 134219008;
              *(void *)unint64_t v76 = valuePtr;
              *(_WORD *)&v76[8] = 2048;
              *(void *)&v76[10] = v47;
              *(_WORD *)&v76[18] = 2048;
              *(void *)&v76[20] = v48;
              uint64_t v77 = 2048;
              float32x2_t v78 = theInterface;
              unint64_t v79 = 2048;
              float v80 = v65;
              _os_log_impl(&dword_1902AF000, v46, OS_LOG_TYPE_DEFAULT, "Opened hid driver interface, registryID %llx, {cfPlugInInterface, hidDriverInterface} was then {%p,%p}, is now {%p,%p}", buf, 0x34u);
            }
            if (sub_1902D8400(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EB3BE828 != -1) {
                dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
              }
              __int16 v59 = a1[47].isa;
              int v60 = a1[48].isa;
              blkcnt_t v69 = 134219008;
              *(void *)long long v70 = valuePtr;
              *(_WORD *)&v70[8] = 2048;
              *(void *)&v70[10] = v59;
              *(_WORD *)&v70[18] = 2048;
              *(void *)&v70[20] = v60;
              __int16 v71 = 2048;
              int v72 = theInterface;
              unint64_t v73 = 2048;
              __int16 v74 = v65;
              __int16 v61 = (char *)_os_log_send_and_compose_impl();
              sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationNotifier::openHidDriverInterface()", "CoreLocation: %s\n", v61);
              if (v61 != (char *)buf) {
                free(v61);
              }
            }
            *((void *)a1[44].isa + 1) = valuePtr;
            int v49 = v65;
            a1[47].uint64_t isa = (Class)theInterface;
            a1[48].uint64_t isa = v49;
            sub_19057AA40(a1);
            return;
          }
          double v43 = v42;
          if (qword_1EB3BE828 != -1) {
            dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
          }
          double v44 = off_1EB3BE820;
          if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_FAULT))
          {
            long long v45 = mach_error_string(v43);
            *(_DWORD *)uint64_t buf = 67240706;
            *(_DWORD *)unint64_t v76 = v43;
            *(_WORD *)&v76[4] = 2082;
            *(void *)&v76[6] = v45;
            *(_WORD *)&v76[14] = 2114;
            *(void *)&v76[16] = v7;
            _os_log_impl(&dword_1902AF000, v44, OS_LOG_TYPE_FAULT, "Unable to open hid device interface,retCode,0x%{public}x,retStr,%{public}s,service,%{public}@", buf, 0x1Cu);
          }
          if (sub_1902D8400(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EB3BE828 != -1) {
              dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
            }
            std::string::size_type v57 = mach_error_string(v43);
            blkcnt_t v69 = 67240706;
            *(_DWORD *)long long v70 = v43;
            *(_WORD *)&v70[4] = 2082;
            *(void *)&v70[6] = v57;
            *(_WORD *)&v70[14] = 2114;
            *(void *)&v70[16] = v7;
            double v58 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 0, "void CLOrientationNotifier::openHidDriverInterface()", "CoreLocation: %s\n", v58);
            if (v58 != (char *)buf) {
              free(v58);
            }
          }
          if (v65) {
            (*(void (**)(objc_class *, void))(*(void *)v65 + 72))(v65, 0);
          }
        }
        if (theInterface)
        {
          ((void (*)(IOCFPlugInInterface **))(*theInterface)->Release)(theInterface);
          IODestroyPlugInInterface(theInterface);
        }
        return;
      }
      uint64_t v30 = v29;
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
      }
      double v31 = off_1EB3BE820;
      if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_FAULT))
      {
        double v32 = mach_error_string(v30);
        *(_DWORD *)uint64_t buf = 67240706;
        *(_DWORD *)unint64_t v76 = v30;
        *(_WORD *)&v76[4] = 2082;
        *(void *)&v76[6] = v32;
        *(_WORD *)&v76[14] = 2114;
        *(void *)&v76[16] = v7;
        _os_log_impl(&dword_1902AF000, v31, OS_LOG_TYPE_FAULT, "Unable to create plugin interface,retCode,0x%{public}x,retStr,%{public}s,service,%{public}@", buf, 0x1Cu);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE828 != -1) {
          dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
        }
        double v33 = mach_error_string(v30);
        blkcnt_t v69 = 67240706;
        *(_DWORD *)long long v70 = v30;
        *(_WORD *)&v70[4] = 2082;
        *(void *)&v70[6] = v33;
        *(_WORD *)&v70[14] = 2114;
        *(void *)&v70[16] = v7;
LABEL_35:
        uint64_t v19 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "void CLOrientationNotifier::openHidDriverInterface()", "CoreLocation: %s\n");
LABEL_36:
        if (v19 != buf) {
          free(v19);
        }
      }
    }
    else
    {
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
      }
      char v20 = off_1EB3BE820;
      if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_1902AF000, v20, OS_LOG_TYPE_FAULT, "AOP service doesn't exist", buf, 2u);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE828 != -1) {
          dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
        }
        LOWORD(v69) = 0;
        goto LABEL_35;
      }
    }
  }
  else
  {
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
    }
    char v18 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v18, OS_LOG_TYPE_INFO, "IoHidDevice is not ready!", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
      }
      LOWORD(v69) = 0;
      uint64_t v19 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationNotifier::openHidDriverInterface()", "CoreLocation: %s\n");
      goto LABEL_36;
    }
  }
}

uint64_t sub_19057AA38(uint64_t a1)
{
  return sub_190579AA0(*(void *)(a1 + 32));
}

void sub_19057AA40(NSObject *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current == *(CFRunLoopRef *)qword_1EB3BF828)
  {
    v16[0] = 4;
    int isa_low = LOBYTE(a1[4].isa);
    v16[1] = a1[4].isa;
    int v1 = BYTE2(a1[4].isa);
    _DWORD v16[2] = BYTE2(a1[4].isa);
    if (qword_1EB3BE828 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
    }
    CFDictionaryRef v10 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)__int16 v21 = 0;
      *(_WORD *)&v21[4] = 2082;
      *(void *)&v21[6] = "";
      __int16 v22 = 2082;
      uint64_t v23 = "assert";
      __int16 v24 = 2081;
      mach_error_t v25 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"sendConfiguration should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
      }
    }
    uint64_t v11 = off_1EB3BE820;
    if (os_signpost_enabled((os_log_t)off_1EB3BE820))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)__int16 v21 = 0;
      *(_WORD *)&v21[4] = 2082;
      *(void *)&v21[6] = "";
      __int16 v22 = 2082;
      uint64_t v23 = "assert";
      __int16 v24 = 2081;
      mach_error_t v25 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "sendConfiguration should be running on motion thread", "{\"msg%{public}.0s\":\"sendConfiguration should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
      }
    }
    a1 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)__int16 v21 = 0;
      *(_WORD *)&v21[4] = 2082;
      *(void *)&v21[6] = "";
      __int16 v22 = 2082;
      uint64_t v23 = "assert";
      __int16 v24 = 2081;
      mach_error_t v25 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, a1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"sendConfiguration should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
  }
  dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
LABEL_3:
  uint64_t v5 = off_1EB3BE820;
  if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 67240448;
    *(_DWORD *)__int16 v21 = isa_low;
    *(_WORD *)&v21[4] = 1026;
    *(_DWORD *)&v21[6] = v1;
    _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_INFO, "Sending config,formFactor,%{public}d,handleCover,%{public}d", buf, 0xEu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
    }
    int v17 = 67240448;
    *(_DWORD *)char v18 = isa_low;
    *(_WORD *)&v18[4] = 1026;
    *(_DWORD *)&v18[6] = v1;
    io_object_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationNotifier::sendConfiguration()", "CoreLocation: %s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  uint64_t v15 = 3;
  mach_error_t v6 = (*(uint64_t (**)(Class, uint64_t, unsigned char *, uint64_t, unsigned char *, uint64_t *))(*(void *)a1[48].isa + 160))(a1[48].isa, 32, v16, 3, v16, &v15);
  if (v6)
  {
    mach_error_t v7 = v6;
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
    }
    int v8 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_FAULT))
    {
      mach_port_t v9 = mach_error_string(v7);
      *(_DWORD *)uint64_t buf = 136446466;
      *(void *)__int16 v21 = v9;
      *(_WORD *)&v21[8] = 1026;
      *(_DWORD *)&v21[10] = v7;
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_FAULT, "SendCommand(Config) = %{public}s (0x%{public}x)", buf, 0x12u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
      }
      int v13 = mach_error_string(v7);
      int v17 = 136446466;
      *(void *)char v18 = v13;
      *(_WORD *)&v18[8] = 1026;
      mach_error_t v19 = v7;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "void CLOrientationNotifier::sendConfiguration()", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
}

uint64_t sub_19057B010(uint64_t a1)
{
  return sub_190579848(*(void *)(a1 + 32));
}

void sub_19057B018(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (*(double *)(a2 + 336) == -1.79769313e308)
  {
    CFAbsoluteTimeGetCurrent();
    kdebug_trace();
    *(CFAbsoluteTime *)(a2 + 336) = CFAbsoluteTimeGetCurrent();
    if (*(void *)(a2 + 48))
    {
      uint64_t v4 = sub_1902DFEC4();
      uint64_t v5 = *(void *)(a2 + 48);
      *(double *)uint64_t buf = (float)(1.0 / (float)(*(float *)(a2 + 56) * (float)*(int *)(a2 + 76)));
      sub_1904DC320(v4, 0, v5, (uint64_t)buf);
    }
  }
  int v6 = *(_DWORD *)(a2 + 72);
  BOOL v7 = __OFSUB__(v6--, 1);
  *(_DWORD *)(a2 + 72) = v6;
  if ((v6 < 0) ^ v7 | (v6 == 0))
  {
    *(_DWORD *)(a2 + 72) = *(_DWORD *)(a2 + 76);
    sub_1905A45CC(*(void *)(a2 + 40), (float *)(a1 + 8), (void *)a1);
    if (sub_1905A6D00(*(unsigned __int8 **)(a2 + 40), &v26, &v25))
    {
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
      }
      int v8 = off_1EB3BE820;
      if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_INFO, "Sending orientation changed notification", buf, 2u);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE828 != -1) {
          dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
        }
        __int16 v22 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "static void CLOrientationNotifier::onAccelerometerData(const CLAccelerometer::Sample *, void *)", "CoreLocation: %s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      sub_1904DC8A8(a2, 0, (uint64_t)&v25, 16);
      sub_1904DC8A8(a2, 1, (uint64_t)&v25, 16);
    }
  }
  if (*(unsigned char *)(a2 + 80))
  {
    sub_1902D9094(a2 + 120, (float *)(a1 + 8));
    sub_1902D9094(a2 + 192, (float *)(a1 + 12));
    sub_1902D9094(a2 + 264, (float *)(a1 + 16));
    unint64_t v9 = *(void *)(a2 + 184);
    if (v9 < *(void *)(a2 + 128)) {
      goto LABEL_29;
    }
    float v10 = 0.0;
    float v11 = 0.0;
    if (v9 >= 2)
    {
      float v12 = (float)((float)v9 * *(float *)(a2 + 140)) - (float)(*(float *)(a2 + 136) * *(float *)(a2 + 136));
      float v11 = 0.0;
      if (v12 >= 0.0) {
        float v11 = v12 / (float)((v9 - 1) * v9);
      }
    }
    unint64_t v13 = *(void *)(a2 + 256);
    if (v13 >= 2)
    {
      float v14 = (float)((float)v13 * *(float *)(a2 + 212)) - (float)(*(float *)(a2 + 208) * *(float *)(a2 + 208));
      if (v14 >= 0.0) {
        float v10 = v14 / (float)((v13 - 1) * v13);
      }
    }
    unint64_t v15 = *(void *)(a2 + 328);
    float v16 = 0.0;
    if (v15 >= 2)
    {
      float v17 = (float)((float)v15 * *(float *)(a2 + 284)) - (float)(*(float *)(a2 + 280) * *(float *)(a2 + 280));
      if (v17 >= 0.0) {
        float v16 = v17 / (float)((v15 - 1) * v15);
      }
    }
    if (v11 >= v10) {
      float v10 = v11;
    }
    if (v10 < v16) {
      float v10 = v16;
    }
    if (v10 <= *(float *)(a2 + 84))
    {
      if (*(void *)(a2 + 64) && *(double *)a1 > *(double *)(a2 + 96) + *(double *)(a2 + 88))
      {
        if (qword_1EB3BE828 != -1) {
          dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
        }
        mach_error_t v19 = off_1EB3BE820;
        if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl(&dword_1902AF000, v19, OS_LOG_TYPE_INFO, "Device is stationary and OrientationGyroTimeout exceeded, disabling Gyro.", buf, 2u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE828 != -1) {
            dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
          }
          LOWORD(v25) = 0;
          __int16 v24 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "static void CLOrientationNotifier::onAccelerometerData(const CLAccelerometer::Sample *, void *)", "CoreLocation: %s\n", v24);
          if (v24 != (char *)buf) {
            free(v24);
          }
        }
        uint64_t v20 = sub_1902B4534();
        sub_1902CDE08(v20, 0, *(void *)(a2 + 64));
        uint64_t v21 = *(void *)(a2 + 64);
        if (v21) {
          (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
        }
        *(void *)(a2 + 64) = 0;
        sub_1905A9044(*(void *)(a2 + 40));
      }
    }
    else
    {
LABEL_29:
      *(void *)(a2 + 96) = *(void *)a1;
      if (!*(void *)(a2 + 64))
      {
        if (qword_1EB3BE828 != -1) {
          dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
        }
        char v18 = off_1EB3BE820;
        if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl(&dword_1902AF000, v18, OS_LOG_TYPE_INFO, "Device is in motion, re-enabling Gyro.", buf, 2u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE828 != -1) {
            dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
          }
          LOWORD(v25) = 0;
          uint64_t v23 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "static void CLOrientationNotifier::onAccelerometerData(const CLAccelerometer::Sample *, void *)", "CoreLocation: %s\n", v23);
          if (v23 != (char *)buf) {
            free(v23);
          }
        }
        operator new();
      }
    }
  }
}

void sub_19057B70C(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

void sub_19057B738(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*(double *)(a2 + 344) == -1.79769313e308)
  {
    CFAbsoluteTimeGetCurrent();
    kdebug_trace();
    *(CFAbsoluteTime *)(a2 + 344) = CFAbsoluteTimeGetCurrent();
  }
  sub_1905A49EC(*(void *)(a2 + 40), (float *)(a1 + 8), (double *)a1);
  if (!*(void *)(a2 + 48) && sub_1905A6D00(*(unsigned __int8 **)(a2 + 40), &v7, &v6))
  {
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
    }
    uint64_t v4 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_INFO, "GYRO: Sending orientation changed notification", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "static void CLOrientationNotifier::onGyroData(const CLGyro::Sample *, void *)", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    sub_1904DC8A8(a2, 0, (uint64_t)&v6, 16);
  }
}

void sub_19057B950(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  if (CFEqual(*(CFStringRef *)(a1 + 48), @"com.apple.springboard.HasSeenACaseLatchCoverNotification"))
  {
    *(unsigned char *)(v1 + 34) = 1;
    if (*(void *)(v1 + 384)) {
      sub_19057AA40(v1);
    }
  }
  if (qword_1EB3BE828 != -1) {
    dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
  }
  uint64_t v2 = off_1EB3BE820;
  if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(v1 + 34);
    *(_DWORD *)uint64_t buf = 67240192;
    int v6 = v3;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEFAULT, "fHasSeenACaseLatchCoverOnce, %{public}d", buf, 8u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationNotifier::onCoverNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

uint64_t sub_19057BB34(uint64_t a1, int a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if ((sub_1902CD6B0() & 0x40) != 0)
  {
    uint64_t v37 = 0;
    __int16 v38 = &v37;
    uint64_t v39 = 0x4012000000;
    uint64_t v40 = sub_1902DD190;
    BOOL v41 = nullsub_3;
    double v42 = &unk_190687D59;
    __int16 v44 = 0;
    int v5 = 3;
    uint64_t v43 = 2;
    uint64_t v33 = 0;
    double v34 = &v33;
    uint64_t v35 = 0x2020000000;
    uint64_t v36 = 10;
    while (1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = &v29;
      uint64_t v31 = 0x2020000000;
      int v32 = 0;
      uint64_t v6 = sub_1902D6BD0();
      v28[0] = MEMORY[0x1E4F143A8];
      v28[1] = 3221225472;
      v28[2] = sub_19057C6E4;
      v28[3] = &unk_1E568FCD0;
      v28[4] = &v29;
      void v28[5] = &v37;
      v28[6] = &v33;
      v28[7] = a1;
      sub_1902CDE98(v6, (uint64_t)v28);
      if (!*((_DWORD *)v30 + 6)) {
        break;
      }
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
      }
      uint64_t v7 = off_1EB3BE820;
      if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_INFO))
      {
        int v8 = mach_error_string(*((_DWORD *)v30 + 6));
        int v9 = *((_DWORD *)v30 + 6);
        *(_DWORD *)uint64_t buf = 136315394;
        double v50 = v8;
        __int16 v51 = 1026;
        int v52 = v9;
        _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_INFO, "SendCommand() = %s (0x%{public}x)", buf, 0x12u);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE828 != -1) {
          dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
        }
        float v10 = mach_error_string(*((_DWORD *)v30 + 6));
        int v11 = *((_DWORD *)v30 + 6);
        int v45 = 136315394;
        long long v46 = v10;
        __int16 v47 = 1026;
        int v48 = v11;
        float v12 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "CLOrientationNotifier::Sample CLOrientationNotifier::orientationBlocking(const BOOL)", "CoreLocation: %s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
      usleep(0x3E8u);
      _Block_object_dispose(&v29, 8);
      if (!--v5)
      {
        if (qword_1EB3BE828 != -1) {
          dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
        }
        mach_error_t v19 = off_1EB3BE820;
        if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl(&dword_1902AF000, v19, OS_LOG_TYPE_FAULT, "No reply for LastOrientation", buf, 2u);
        }
        double v4 = -1.0;
        if (sub_1902D8400(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE828 != -1) {
            dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
          }
          LOWORD(v29) = 0;
          uint64_t v23 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 0, "CLOrientationNotifier::Sample CLOrientationNotifier::orientationBlocking(const BOOL)", "CoreLocation: %s\n", v23);
          if (v23 != (char *)buf) {
            free(v23);
          }
        }
        goto LABEL_38;
      }
    }
    if (v34[3] == 10)
    {
      unint64_t v13 = v38;
      if (*(void *)(a1 + 402) > *(unint64_t *)((char *)v38 + 50))
      {
        uint64_t v14 = *(void *)(a1 + 400);
        *((_WORD *)v38 + 28) = *(_WORD *)(a1 + 408);
        v13[6] = v14;
      }
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
      }
      unint64_t v15 = off_1EB3BE820;
      if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = *((unsigned __int8 *)v38 + 49);
        *(_DWORD *)uint64_t buf = 67240192;
        LODWORD(v50) = v16;
        _os_log_impl(&dword_1902AF000, v15, OS_LOG_TYPE_DEFAULT, "Got cached orientation %{public}u", buf, 8u);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE828 != -1) {
          dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
        }
        int v24 = *((unsigned __int8 *)v38 + 49);
        int v45 = 67240192;
        LODWORD(v46) = v24;
        uint64_t v25 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "CLOrientationNotifier::Sample CLOrientationNotifier::orientationBlocking(const BOOL)", "CoreLocation: %s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
      _Block_object_dispose(&v29, 8);
      unint64_t v17 = *(uint64_t *)((char *)v38 + 50);
      double v18 = sub_1902D8D34(v17);
      double v4 = v18;
      if (a2) {
        sub_19057C380(a1, v17, *((unsigned __int8 *)v38 + 49), v18);
      }
    }
    else
    {
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
      }
      uint64_t v20 = off_1EB3BE820;
      if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_FAULT))
      {
        uint64_t v21 = (char *)v34[3];
        *(_DWORD *)uint64_t buf = 134349056;
        double v50 = v21;
        _os_log_impl(&dword_1902AF000, v20, OS_LOG_TYPE_FAULT, "SendCommand() got unexpected response size %{public}zd", buf, 0xCu);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE828 != -1) {
          dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
        }
        int v26 = (char *)v34[3];
        int v45 = 134349056;
        long long v46 = v26;
        double v27 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "CLOrientationNotifier::Sample CLOrientationNotifier::orientationBlocking(const BOOL)", "CoreLocation: %s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
      }
      _Block_object_dispose(&v29, 8);
      double v4 = -1.0;
    }
LABEL_38:
    _Block_object_dispose(&v33, 8);
    _Block_object_dispose(&v37, 8);
  }
  else
  {
    double v4 = -1.0;
  }
  return *(void *)&v4;
}

void sub_19057C324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_19057C380(uint64_t a1, unint64_t a2, unsigned int a3, double a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 402) >= a2)
  {
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
    }
    int v8 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67240448;
      unsigned int v14 = a3;
      __int16 v15 = 2050;
      unint64_t v16 = a2;
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_DEFAULT, "Skipping stale orientation (%{public}u @ %{public}llu)", buf, 0x12u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
      }
      LODWORD(v11) = 67240448;
      HIDWORD(v11) = a3;
      LOWORD(v12[0]) = 2050;
      *(void *)((char *)v12 + 2) = a2;
      float v10 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationNotifier::notifyAOO(const uint64_t, const uint8_t, const CLMotionTypeTimestamp)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  else
  {
    *(unsigned char *)(a1 + 401) = a3;
    *(void *)(a1 + 402) = a2;
    double v11 = a4;
    v12[0] = a3;
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
    }
    uint64_t v7 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      unsigned int v14 = a3;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_DEBUG, "AOO update: %u", buf, 8u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationNotifier::notifyAOO(const uint64_t, const uint8_t, const CLMotionTypeTimestamp)", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    sub_1904DC8A8(a1, 0, (uint64_t)&v11, 16);
    sub_1904DC8A8(a1, 1, (uint64_t)&v11, 16);
  }
}

uint64_t sub_19057C6E4(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1[7] + 384);
  if (v2)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v2 + 160))(v2, 32, *(void *)(a1[5] + 8) + 48, 1, *(void *)(a1[5] + 8) + 48, *(void *)(a1[6] + 8) + 24);
  }
  else
  {
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
    }
    double v4 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_FAULT, "fHidDeviceInterface NULL", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD3B80);
      }
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "CLOrientationNotifier::Sample CLOrientationNotifier::orientationBlocking(const BOOL)_block_invoke", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    uint64_t result = 4160749568;
  }
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = result;
  return result;
}

os_log_t sub_19057C8C4()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Orientation");
  off_1EB3BE820 = result;
  return result;
}

uint64_t sub_19057C8F4(uint64_t a1)
{
  *(void *)(a1 + 24) = 0;
  return a1;
}

double sub_19057C928(unsigned __int8 *a1, int a2)
{
  int v2 = *a1;
  *a1 = v2 & ~(_BYTE)a2;
  if ((v2 & (a2 ^ 0xFF)) == 0)
  {
    *((CFAbsoluteTime *)a1 + 2) = CFAbsoluteTimeGetCurrent();
    sub_19057C980((uint64_t)a1);
    double result = 2.22507386e-308;
    *(_OWORD *)(a1 + 8) = xmmword_19060C6D0;
  }
  return result;
}

BOOL sub_19057C980(uint64_t a1)
{
  double v1 = *(double *)(a1 + 8);
  if (v1 != 2.22507386e-308) {
    AnalyticsSendEventLazy();
  }
  return v1 != 2.22507386e-308;
}

uint64_t sub_19057CA20(uint64_t a1, const char *a2, uint64_t a3)
{
  _DWORD v8[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 24);
  v7[0] = @"bundleId";
  v7[1] = @"duration";
  v8[0] = v4;
  v8[1] = objc_msgSend_numberWithDouble_(NSNumber, a2, a3, *(double *)(v3 + 16) - *(double *)(v3 + 8));
  return objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v5, (uint64_t)v8, v7, 2);
}

unsigned char *sub_19057CAB8(unsigned char *result, uint64_t a2)
{
  switch(*result)
  {
    case 1:
      double result = (unsigned char *)(*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a2 + 16))(a2, result);
      break;
    case 2:
      double result = (unsigned char *)(*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a2 + 24))(a2, result);
      break;
    case 3:
      double result = (unsigned char *)(*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a2 + 32))(a2, result);
      break;
    case 4:
      double result = (unsigned char *)(*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a2 + 40))(a2, result);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_19057CBB0(float32x2_t *a1, float32x2_t *a2, double a3)
{
  sub_1904FABA0(a1 + 3, a2);
  uint64_t v5 = *(void *)&a1[7] - 1;
  a1[7] = (float32x2_t)v5;
  if (!v5)
  {
    a1[7] = a1[6];
    __int32 v6 = a1[5].i32[0];
    float32x2_t v8 = a1[4];
    __int32 v9 = v6;
    sub_19042FFA8((unsigned __int16 *)&a1[8], (uint64_t)&v8);
    sub_19057CC30((unsigned __int8 *)a1, a3);
  }
  return a1->u8[1];
}

void sub_19057CC30(unsigned __int8 *a1, double a2)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *((unsigned __int16 *)a1 + 33);
  if (*((_DWORD *)a1 + 17) != v2) {
    return;
  }
  uint64_t v5 = (unsigned __int16 *)(a1 + 64);
  float v6 = sub_1904308EC((unsigned __int16 *)a1 + 32, 0, v2);
  float v8 = v7;
  float v10 = v9;
  uint64_t v11 = 0;
  *(float *)float32x4_t v111 = v6;
  *(float *)&v111[1] = v7;
  *(float *)&v111[2] = v9;
  float v12 = 0.0;
  do
  {
    float v12 = v12 + (float)(*(float *)&v111[v11] * *(float *)&v111[v11]);
    ++v11;
  }
  while (v11 != 3);
  float v13 = sqrtf(v12);
  sub_190484254(v5, 0, *((unsigned __int16 *)a1 + 33));
  float v15 = v14;
  float v17 = v16;
  float v18 = -(float)(v13 + -1.0);
  if ((float)(v13 + -1.0) > 0.0) {
    float v18 = v13 + -1.0;
  }
  if (v18 > 0.25) {
    goto LABEL_14;
  }
  float v19 = v14 <= v17 ? v17 : v14;
  if (v19 > 0.25) {
    goto LABEL_14;
  }
  float v20 = -v6;
  if (v6 > 0.0) {
    float v20 = v6;
  }
  if (v20 > 1.1)
  {
LABEL_14:
    if (qword_1E929D6B8 != -1) {
      dispatch_once(&qword_1E929D6B8, &unk_1EDFD2600);
    }
    uint64_t v21 = qword_1E929D6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929D6A8, OS_LOG_TYPE_DEBUG))
    {
      if (v15 <= v17) {
        float v22 = v17;
      }
      else {
        float v22 = v15;
      }
      *(_DWORD *)uint64_t buf = 134218496;
      *(double *)v115 = v13;
      *(_WORD *)&v115[8] = 2048;
      *(double *)&v115[10] = v22;
      *(_WORD *)&v115[18] = 2048;
      *(double *)&v115[20] = v6;
      _os_log_impl(&dword_1902AF000, v21, OS_LOG_TYPE_DEBUG, "Invalid dynamics, mag, %.2f, xyVarMax, %.2f, xMean, %.2f", buf, 0x20u);
    }
    if (!sub_1902D8400(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929D6B8 != -1) {
      dispatch_once(&qword_1E929D6B8, &unk_1EDFD2600);
    }
    if (v15 <= v17) {
      float v99 = v17;
    }
    else {
      float v99 = v15;
    }
    int v112 = 134218496;
    *(double *)float v113 = v13;
    *(_WORD *)&v113[8] = 2048;
    *(double *)&v113[10] = v99;
    *(_WORD *)&v113[18] = 2048;
    *(double *)&v113[20] = v6;
    goto LABEL_142;
  }
  float v23 = sqrtf((float)(v8 * v8) + (float)(v6 * v6));
  if (v23 <= 1.1)
  {
    float v25 = v19;
    float v26 = (float)(atan2f(v23, -v10) * -57.296) + 90.0;
    if (v26 <= 0.0) {
      float v27 = -v26;
    }
    else {
      float v27 = v26;
    }
    if (v27 > 55.0 || ((int v28 = *a1, v27 > 30.0) ? (v29 = v28 == 0) : (v29 = 1), !v29))
    {
      if (qword_1E929D6B8 != -1) {
        dispatch_once(&qword_1E929D6B8, &unk_1EDFD2600);
      }
      long long v92 = qword_1E929D6A8;
      if (os_log_type_enabled((os_log_t)qword_1E929D6A8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 134217984;
        *(double *)v115 = v27;
        _os_log_impl(&dword_1902AF000, v92, OS_LOG_TYPE_DEBUG, "Invalid tilt, %.2f", buf, 0xCu);
      }
      if (!sub_1902D8400(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929D6B8 != -1) {
        dispatch_once(&qword_1E929D6B8, &unk_1EDFD2600);
      }
      int v112 = 134217984;
      *(double *)float v113 = v27;
      goto LABEL_142;
    }
    if (v8 <= 0.0) {
      float v30 = -v8;
    }
    else {
      float v30 = v8;
    }
    float v31 = atan2f(v6, v30);
    float v32 = v31 * 57.296;
    BOOL v33 = (float)(v31 * 57.296) <= 0.0;
    if ((float)(v31 * 57.296) <= 0.0) {
      int v34 = 1;
    }
    else {
      int v34 = 2;
    }
    float v35 = -(float)(v31 * 57.296);
    if (!v33) {
      float v35 = v32;
    }
    if (v35 < 25.0 || (v27 > 45.0 ? (BOOL v36 = v35 < 37.5) : (BOOL v36 = 0), v36))
    {
      if (qword_1E929D6B8 != -1) {
        dispatch_once(&qword_1E929D6B8, &unk_1EDFD2600);
      }
      long long v93 = qword_1E929D6A8;
      if (os_log_type_enabled((os_log_t)qword_1E929D6A8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 134217984;
        *(double *)v115 = v32;
        _os_log_impl(&dword_1902AF000, v93, OS_LOG_TYPE_DEBUG, "Invalid swivel, %.2f", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D6B8 != -1) {
          dispatch_once(&qword_1E929D6B8, &unk_1EDFD2600);
        }
        int v112 = 134217984;
        *(double *)float v113 = v32;
        float32x4_t v110 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CMCallHandednessDetector::detect(double)", "CoreLocation: %s\n", v110);
        if (v110 != (char *)buf) {
          free(v110);
        }
      }
      if (*a1) {
        return;
      }
      int v34 = 0;
    }
    else if (v28)
    {
      float v37 = sub_19042DEC0(v5);
      if (v37 <= 0.0) {
        float v37 = -v37;
      }
      if (v25 > 0.075 || v37 > 1.1) {
        goto LABEL_70;
      }
      float v38 = sub_19042DEC0(v5);
      float v39 = v38 - sub_19057D9EC(v5);
      if (v39 <= 0.0) {
        float v40 = -v39;
      }
      else {
        float v40 = v39;
      }
      sub_19042DEC0(v5);
      float v42 = v41;
      sub_19057D9EC(v5);
      float v44 = v42 - v43;
      float v45 = -(float)(v42 - v43);
      if (v44 <= 0.0) {
        float v46 = v45;
      }
      else {
        float v46 = v44;
      }
      float v47 = sub_19042DEC0(v5);
      float v49 = v48;
      float v50 = sub_19057D9EC(v5);
      float v52 = v49 - v51;
      float v53 = v47 - v50;
      if (v40 <= v46) {
        float v53 = v52;
      }
      if (v53 <= 0.0) {
        float v53 = -v53;
      }
      if (v53 > 0.6)
      {
LABEL_70:
        if (qword_1E929D6B8 != -1) {
          dispatch_once(&qword_1E929D6B8, &unk_1EDFD2600);
        }
        uint64_t v54 = qword_1E929D6A8;
        if (os_log_type_enabled((os_log_t)qword_1E929D6A8, OS_LOG_TYPE_DEBUG))
        {
          float v55 = sub_19042DEC0(v5);
          if (v55 <= 0.0) {
            float v55 = -v55;
          }
          double v56 = v55;
          float v57 = sub_19042DEC0(v5);
          float v58 = v57 - sub_19057D9EC(v5);
          if (v58 <= 0.0) {
            float v59 = -v58;
          }
          else {
            float v59 = v58;
          }
          sub_19042DEC0(v5);
          float v61 = v60;
          sub_19057D9EC(v5);
          float v63 = v61 - v62;
          float v64 = -(float)(v61 - v62);
          if (v63 <= 0.0) {
            float v65 = v64;
          }
          else {
            float v65 = v63;
          }
          float v66 = sub_19042DEC0(v5);
          float v68 = v67;
          float v69 = sub_19057D9EC(v5);
          float v71 = v68 - v70;
          float v72 = v66 - v69;
          if (v59 <= v65) {
            float v72 = v71;
          }
          if (v72 <= 0.0) {
            float v72 = -v72;
          }
          *(_DWORD *)uint64_t buf = 134218496;
          *(double *)v115 = v56;
          *(_WORD *)&v115[8] = 2048;
          *(double *)&v115[10] = v25;
          *(_WORD *)&v115[18] = 2048;
          *(double *)&v115[20] = v72;
          _os_log_impl(&dword_1902AF000, v54, OS_LOG_TYPE_DEBUG, "Swing1. xMag, %.2f, maxXYVar, %.2f, swingX, %.2f", buf, 0x20u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D6B8 != -1) {
            dispatch_once(&qword_1E929D6B8, &unk_1EDFD2600);
          }
          float v73 = sub_19042DEC0(v5);
          if (v73 <= 0.0) {
            float v73 = -v73;
          }
          double v74 = v73;
          float v75 = sub_19042DEC0(v5);
          float v76 = v75 - sub_19057D9EC(v5);
          if (v76 <= 0.0) {
            float v77 = -v76;
          }
          else {
            float v77 = v76;
          }
          sub_19042DEC0(v5);
          float v79 = v78;
          sub_19057D9EC(v5);
          float v81 = v79 - v80;
          float v82 = -(float)(v79 - v80);
          if (v81 <= 0.0) {
            float v83 = v82;
          }
          else {
            float v83 = v81;
          }
          float v84 = sub_19042DEC0(v5);
          float v86 = v85;
          float v87 = sub_19057D9EC(v5);
          float v89 = v86 - v88;
          float v90 = v84 - v87;
          if (v77 <= v83) {
            float v90 = v89;
          }
          if (v90 <= 0.0) {
            float v90 = -v90;
          }
          int v112 = 134218496;
          *(double *)float v113 = v74;
          *(_WORD *)&v113[8] = 2048;
          *(double *)&v113[10] = v25;
          *(_WORD *)&v113[18] = 2048;
          *(double *)&v113[20] = v90;
          long long v91 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "void CMCallHandednessDetector::detect(double)", "CoreLocation: %s\n", v91);
          if (v91 != (char *)buf) {
            goto LABEL_143;
          }
        }
        return;
      }
      float v97 = sub_19057D9EC(v5);
      if ((float)(v97 * sub_19042DEC0(v5)) < 0.0)
      {
        if (qword_1E929D6B8 != -1) {
          dispatch_once(&qword_1E929D6B8, &unk_1EDFD2600);
        }
        uint64_t v98 = qword_1E929D6A8;
        if (os_log_type_enabled((os_log_t)qword_1E929D6A8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl(&dword_1902AF000, v98, OS_LOG_TYPE_DEBUG, "Swing2. X sign flipping.", buf, 2u);
        }
        if (!sub_1902D8400(115, 2)) {
          return;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929D6B8 != -1) {
          dispatch_once(&qword_1E929D6B8, &unk_1EDFD2600);
        }
        LOWORD(v112) = 0;
LABEL_142:
        long long v91 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CMCallHandednessDetector::detect(double)", "CoreLocation: %s\n", v91);
        if (v91 == (char *)buf) {
          return;
        }
LABEL_143:
        free(v91);
        return;
      }
      if (qword_1E929D6B8 != -1) {
        dispatch_once(&qword_1E929D6B8, &unk_1EDFD2600);
      }
      uint64_t v100 = qword_1E929D6A8;
      if (os_log_type_enabled((os_log_t)qword_1E929D6A8, OS_LOG_TYPE_DEBUG))
      {
        float v101 = sub_19042DEC0(v5);
        if (v101 <= 0.0) {
          float v101 = -v101;
        }
        double v102 = v101;
        float v103 = sub_19042DEC0(v5);
        float v104 = v103 - sub_19057D9EC(v5);
        *(_DWORD *)uint64_t buf = 67109888;
        *(_DWORD *)v115 = v34;
        if (v104 <= 0.0) {
          float v104 = -v104;
        }
        *(_WORD *)&v115[4] = 2048;
        *(double *)&v115[6] = v102;
        *(_WORD *)&v115[14] = 2048;
        *(double *)&v115[16] = v25;
        *(_WORD *)&v115[24] = 2048;
        *(double *)&v115[26] = v104;
        _os_log_impl(&dword_1902AF000, v100, OS_LOG_TYPE_DEBUG, "Passed swing-detect. hand, %d, xMag, %.2f, maxXYVar, %.3f, swingX, %.3f", buf, 0x26u);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D6B8 != -1) {
          dispatch_once(&qword_1E929D6B8, &unk_1EDFD2600);
        }
        float v105 = sub_19042DEC0(v5);
        if (v105 <= 0.0) {
          float v105 = -v105;
        }
        double v106 = v105;
        float v107 = sub_19042DEC0(v5);
        float v108 = v107 - sub_19057D9EC(v5);
        int v112 = 67109888;
        *(_DWORD *)float v113 = v34;
        if (v108 <= 0.0) {
          float v108 = -v108;
        }
        *(_WORD *)&v113[4] = 2048;
        *(double *)&v113[6] = v106;
        *(_WORD *)&v113[14] = 2048;
        *(double *)&v113[16] = v25;
        *(_WORD *)&v113[24] = 2048;
        *(double *)&v113[26] = v108;
        v109 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CMCallHandednessDetector::detect(double)", "CoreLocation: %s\n", v109);
        if (v109 != (char *)buf) {
          free(v109);
        }
      }
    }
    if (a1[1] == v34)
    {
LABEL_119:
      a1[8] = 3;
      *((void *)a1 + 2) = 0;
      return;
    }
    int v94 = *a1;
    int v95 = a1[8];
    if (v95 == 3 || (long long v96 = (double *)(a1 + 16), a2 - *((double *)a1 + 2) > 2.0))
    {
      a1[8] = v34;
      long long v96 = (double *)(a1 + 16);
    }
    else
    {
      if (v95 == v34)
      {
        a1[1] = v34;
        *a1 = 0;
        goto LABEL_119;
      }
      a1[8] = v34;
    }
    *long long v96 = a2;
    if (!v94) {
      *(_DWORD *)uint64_t v5 = 0;
    }
    return;
  }
  if (qword_1E929D6B8 != -1) {
    dispatch_once(&qword_1E929D6B8, &unk_1EDFD2600);
  }
  int v24 = qword_1E929D6A8;
  if (os_log_type_enabled((os_log_t)qword_1E929D6A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134217984;
    *(double *)v115 = v23;
    _os_log_impl(&dword_1902AF000, v24, OS_LOG_TYPE_DEBUG, "Invalid xyNorm, %.2f", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D6B8 != -1) {
      dispatch_once(&qword_1E929D6B8, &unk_1EDFD2600);
    }
    int v112 = 134217984;
    *(double *)float v113 = v23;
    goto LABEL_142;
  }
}

float sub_19057D9EC(unsigned __int16 *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (!a1[1])
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3240);
    }
    uint64_t v3 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 139,front() on empty buffer.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3240);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "Element CMVectorBufferBase<float, 3>::front() const [T = float, N = 3]", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  return *(float *)sub_19043049C(a1, 0);
}

os_log_t sub_19057DB9C()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Gesture");
  qword_1E929D6A8 = (uint64_t)result;
  return result;
}

void sub_19057DF00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16) {
    sub_1902D8B58(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_19057E258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16) {
    sub_1902D8B58(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_19057E3E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a13) {
    sub_1902D8B58(a13);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(v19 - 40);
  if (v21) {
    sub_1902D8B58(v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_19057E614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1902D8B58(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_19057E824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a18) {
    sub_1902D8B58(a18);
  }
  if (a20) {
    sub_1902D8B58(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19057E85C(uint64_t a1, void *a2)
{
  uint64_t v4 = objc_msgSend_objectForKeyedSubscript_(a2, (const char *)a2, @"CMErrorMessage");
  uint64_t v6 = objc_msgSend_objectForKeyedSubscript_(a2, v5, @"CMReturnCode");
  char v9 = objc_msgSend_BOOLValue(v6, v7, v8);
  if (v4 || (v9 & 1) == 0)
  {
    float v12 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], v10, v11);
    objc_msgSend_removeItemAtURL_error_(v12, v13, *(void *)(a1 + 32), 0);
  }
  float v14 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v14();
}

void sub_19057EA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a12) {
    sub_1902D8B58(a12);
  }
  sub_1902D8B58(v18);
  _Unwind_Resume(a1);
}

void sub_19057EBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a13) {
    sub_1902D8B58(a13);
  }
  if (a16) {
    sub_1902D8B58(a16);
  }
  _Unwind_Resume(exception_object);
}

os_log_t sub_19057EC14()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Fall");
  qword_1E929D8F0 = (uint64_t)result;
  return result;
}

void sub_19057ED68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FCC980](v19, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_19057EDA4(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (qword_1E929D9C8 != -1) {
    dispatch_once(&qword_1E929D9C8, &unk_1EDFC3588);
  }
  uint64_t v3 = qword_1E929D9D0;
  if (os_log_type_enabled((os_log_t)qword_1E929D9D0, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = CLConnectionMessage::name(*a2);
    if (*(char *)(v4 + 23) >= 0) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = *(void *)v4;
    }
    *(_DWORD *)uint64_t buf = 136446210;
    uint64_t v8 = v5;
    _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEBUG, "Default handler received message %{public}s", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D9C8 != -1) {
      dispatch_once(&qword_1E929D9C8, &unk_1EDFC3588);
    }
    CLConnectionMessage::name(*a2);
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMPedestrianFenceManagerInternal init]_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void *sub_19057EF84(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = getpid();
  uint64_t ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2);
  if (ExecutablePathFromPid)
  {
    uint64_t v7 = ExecutablePathFromPid;
    if (qword_1E929D9C8 != -1) {
      dispatch_once(&qword_1E929D9C8, &unk_1EDFC3588);
    }
    uint64_t v8 = qword_1E929D9D0;
    if (os_log_type_enabled((os_log_t)qword_1E929D9D0, OS_LOG_TYPE_DEFAULT))
    {
      pid_t v9 = getpid();
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)uint64_t buf = 138478339;
      uint64_t v30 = v7;
      __int16 v31 = 1025;
      pid_t v32 = v9;
      __int16 v33 = 2049;
      uint64_t v34 = v10;
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_DEFAULT, "Client connection interrupt, %{private}@, %{private}d, %{private}p", buf, 0x1Cu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D9C8 != -1) {
        dispatch_once(&qword_1E929D9C8, &unk_1EDFC3588);
      }
      pid_t v18 = getpid();
      uint64_t v19 = *(void *)(a1 + 32);
      int v23 = 138478339;
      uint64_t v24 = v7;
      __int16 v25 = 1025;
      pid_t v26 = v18;
      __int16 v27 = 2049;
      uint64_t v28 = v19;
      float v20 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMPedestrianFenceManagerInternal init]_block_invoke", "CoreLocation: %s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
  }
  os_log_t result = *(void **)(*(void *)(a1 + 32) + 24);
  if (result)
  {
    float v12 = (uint64_t (**)(id, void, uint64_t))(id)objc_msgSend_copy(result, v5, v6);
    float v13 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v21 = *MEMORY[0x1E4F28568];
    float v22 = @"Session and fences lost due to disconnection";
    uint64_t v15 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v14, (uint64_t)&v22, &v21, 1);
    uint64_t v17 = objc_msgSend_errorWithDomain_code_userInfo_(v13, v16, @"CMPedestrianFenceErrorDomain", 5, v15);
    return (void *)v12[2](v12, 0, v17);
  }
  return result;
}

void sub_19057F318(uint64_t a1)
{
  v19[2] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 48))
  {

    *(void *)(*(void *)(a1 + 32) + 24) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 24);
    if (v3 != v2)
    {

      *(void *)(*(void *)(a1 + 32) + 24) = objc_msgSend_copy(*(void **)(a1 + 40), v4, v5);
    }
  }
  sub_1902C3F54(&__p, "PedestrianFence/kCLConnectionMessagePedestrianFenceStatus");
  v14[1] = MEMORY[0x1E4F143A8];
  v14[2] = 3221225472;
  void v14[3] = sub_19057F548;
  v14[4] = &unk_1E568D558;
  v14[5] = *(void *)(a1 + 32);
  CLConnectionClient::setHandlerForMessage();
  if (v17 < 0) {
    operator delete(__p);
  }
  v18[0] = @"kCLConnectionMessageSubscribeKey";
  v19[0] = objc_msgSend_numberWithBool_(NSNumber, v6, *(unsigned __int8 *)(a1 + 48));
  v18[1] = @"CMPedestrianFenceClientIdentifier";
  pid_t v9 = objc_msgSend_processInfo(MEMORY[0x1E4F28F80], v7, v8);
  v19[1] = objc_msgSend_processName(v9, v10, v11);
  v14[0] = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v12, (uint64_t)v19, v18, 2);
  sub_19042B270("PedestrianFence/kCLConnectionMessagePedestrianFenceSession", v14, &__p);
  float v13 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CLConnectionClient::sendMessage();
  if (v13) {
    sub_1902D8B58(v13);
  }
  if (v16) {
    sub_1902D8B58(v16);
  }
}

void sub_19057F504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, std::__shared_weak_count *a19, int a20,__int16 a21,char a22,char a23)
{
  if (a11) {
    sub_1902D8B58(a11);
  }
  if (a19) {
    sub_1902D8B58(a19);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19057F548(uint64_t a1, const char *a2, uint64_t a3)
{
  os_log_t result = *(void **)(*(void *)(a1 + 32) + 24);
  if (result)
  {
    uint64_t v5 = (id)objc_msgSend_copy(result, a2, a3);
    uint64_t v6 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v7 = objc_opt_class();
    uint64_t v8 = objc_opt_class();
    uint64_t v10 = (NSSet *)objc_msgSend_setWithObjects_(v6, v9, v7, v8, 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v10);
    uint64_t v13 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v12, @"CMPedestrianFenceStatus");
    float v14 = (uint64_t (*)(void *, uint64_t, void))v5[2];
    return (void *)v14(v5, v13, 0);
  }
  return result;
}

void sub_19057F698(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 16);
  if (v2 != *(void **)(a1 + 64))
  {

    *(void *)(*(void *)(a1 + 32) + 16) = objc_msgSend_copy(*(void **)(a1 + 64), v3, v4);
  }
  sub_1902C3F54(__p, "PedestrianFence/kCLConnectionMessagePedestrianFence");
  uint64_t v21 = MEMORY[0x1E4F143A8];
  uint64_t v22 = 3221225472;
  int v23 = sub_19057FA8C;
  uint64_t v24 = &unk_1E568D558;
  uint64_t v25 = *(void *)(a1 + 32);
  CLConnectionClient::setHandlerForMessage();
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  v19[0] = 0;
  v19[1] = 0;
  uint64_t v20 = 0;
  uint64_t v7 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v5, v6);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v8, *(void *)(a1 + 40), @"CMPedestrianFenceIdentifier");
  uint64_t v10 = objc_msgSend_numberWithBool_(NSNumber, v9, *(unsigned __int8 *)(a1 + 72));
  objc_msgSend_setObject_forKeyedSubscript_(v7, v11, v10, @"CMPedestrianFenceShouldWake");
  if (*(void *)(a1 + 48))
  {
    objc_msgSend_setObject_forKeyedSubscript_(v7, v12, MEMORY[0x1E4F1CC38], @"kCLConnectionMessageSubscribeKey");
    objc_msgSend_setObject_forKeyedSubscript_(v7, v13, *(void *)(a1 + 48), @"CMPedestrianFenceRadius");
    float v14 = "PedestrianFence/kCLConnectionMessagePedestrianFence";
LABEL_9:
    MEMORY[0x192FCC770](v19, v14);
    float v16 = (std::__shared_weak_count *)operator new(0x70uLL);
    v16->__shared_owners_ = 0;
    v16->__shared_weak_owners_ = 0;
    v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFD0DA0;
    MEMORY[0x192FCC420](&v16[1], v19, v7);
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    CLConnectionClient::sendMessage();
    if (v16) {
      sub_1902D8B58(v16);
    }
    sub_1902D8B58(v16);
    if (SHIBYTE(v20) < 0) {
      operator delete(v19[0]);
    }
    return;
  }
  uint64_t v15 = *(void *)(a1 + 56);
  if (v15)
  {
    objc_msgSend_setObject_forKeyedSubscript_(v7, v12, v15, @"CMPedestrianFenceDelay");
    float v14 = "PedestrianFence/kCLConnectionMessagePedestrianFenceSimulation";
    goto LABEL_9;
  }
  if (qword_1E929D9C8 != -1) {
    dispatch_once(&qword_1E929D9C8, &unk_1EDFC3588);
  }
  char v17 = qword_1E929D9D0;
  if (os_log_type_enabled((os_log_t)qword_1E929D9D0, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl(&dword_1902AF000, v17, OS_LOG_TYPE_ERROR, "Bad parameters given ", (uint8_t *)__p, 2u);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1E929D9C8 != -1) {
      dispatch_once(&qword_1E929D9C8, &unk_1EDFC3588);
    }
    pid_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "-[CMPedestrianFenceManagerInternal _setFence:withRadius:wake:delay:withCompletion:]_block_invoke", "CoreLocation: %s\n", v18);
    if (v18 != (char *)__p) {
      free(v18);
    }
  }
}

void sub_19057FA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19057FA8C(uint64_t a1, const char *a2, uint64_t a3)
{
  v27[1] = *MEMORY[0x1E4F143B8];
  os_log_t result = *(void **)(*(void *)(a1 + 32) + 16);
  if (result)
  {
    uint64_t v5 = (uint64_t (**)(id, void, uint64_t))(id)objc_msgSend_copy(result, a2, a3);
    uint64_t v6 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v7 = objc_opt_class();
    uint64_t v8 = objc_opt_class();
    uint64_t v10 = (NSSet *)objc_msgSend_setWithObjects_(v6, v9, v7, v8, 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v10);
    uint64_t v13 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v12, @"CMErrorMessage");
    if (v13)
    {
      unint64_t v16 = objc_msgSend_integerValue(v13, v14, v15);
      if (v16 > 4)
      {
        uint64_t v19 = @"Unknown error";
        uint64_t v18 = 103;
      }
      else
      {
        uint64_t v18 = qword_19060C6F0[v16];
        uint64_t v19 = off_1E568FDA0[v16];
      }
      uint64_t v22 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v26 = *MEMORY[0x1E4F28568];
      v27[0] = v19;
      uint64_t v23 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v17, (uint64_t)v27, &v26, 1);
      uint64_t v25 = objc_msgSend_errorWithDomain_code_userInfo_(v22, v24, @"CMErrorDomain", v18, v23);
      return (void *)v5[2](v5, 0, v25);
    }
    else
    {
      uint64_t v20 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v14, @"CMPedestrianFenceIdentifier");
      uint64_t v21 = v5[2];
      return (void *)v21(v5, v20, 0);
    }
  }
  return result;
}

void sub_19057FCD0(uint64_t a1, const char *a2)
{
  v12[4] = *MEMORY[0x1E4F143B8];
  v12[0] = MEMORY[0x1E4F1CC28];
  v11[0] = @"kCLConnectionMessageSubscribeKey";
  v11[1] = @"CMPedestrianFenceForceClear";
  v12[1] = objc_msgSend_numberWithBool_(NSNumber, a2, *(unsigned __int8 *)(a1 + 48));
  void v11[2] = @"CMPedestrianFenceForceClearAll";
  uint64_t v4 = objc_msgSend_numberWithBool_(NSNumber, v3, *(void *)(a1 + 32) == 0);
  v11[3] = @"CMPedestrianFenceIdentifier";
  uint64_t v6 = *(__CFString **)(a1 + 32);
  if (!v6) {
    uint64_t v6 = &stru_1EDFD5D50;
  }
  v12[2] = v4;
  void v12[3] = v6;
  uint64_t v10 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v5, (uint64_t)v12, v11, 4);
  sub_190581710("PedestrianFence/kCLConnectionMessagePedestrianFence", &v10, &v8);
  uint64_t v7 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CLConnectionClient::sendMessage();
  if (v7) {
    sub_1902D8B58(v7);
  }
  if (v9) {
    sub_1902D8B58(v9);
  }
}

void sub_19057FE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_1902D8B58(a11);
  }
  if (a13) {
    sub_1902D8B58(a13);
  }
  _Unwind_Resume(exception_object);
}

os_log_t sub_1905816E0()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "PedestrianFence");
  qword_1E929D9D0 = (uint64_t)result;
  return result;
}

void *sub_190581710@<X0>(char *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x70uLL);
  os_log_t result = sub_190581774(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_190581760(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_190581774(void *a1, char *__s, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDFD0DA0;
  sub_1905817E8((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_1905817D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1905817E8(int a1, uint64_t a2, char *__s, void *a4)
{
  sub_1902C3F54(__p, __s);
  MEMORY[0x192FCC420](a2, __p, *a4);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_190581840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19058185C(uint64_t a1)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  sub_190559F28(a1);
}

void sub_190581B68(_Unwind_Exception *a1)
{
  uint64_t v4 = v1[36];
  v1[36] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  char v5 = (std::__shared_weak_count *)v1[22];
  if (v5) {
    sub_1902D8B58(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)v1[20];
  if (v6) {
    sub_1902D8B58(v6);
  }
  uint64_t v7 = *v2;
  *uint64_t v2 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_19055A8A0((uint64_t)v1);
  _Unwind_Resume(a1);
}

void *sub_190581BF8(void *a1)
{
  *a1 = &unk_1EDFC76F8;
  sub_190581CC8((uint64_t)a1);
  uint64_t v2 = a1[36];
  a1[36] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[22];
  if (v3) {
    sub_1902D8B58(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[20];
  if (v4) {
    sub_1902D8B58(v4);
  }
  uint64_t v5 = a1[18];
  a1[18] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  return sub_19055A8A0((uint64_t)a1);
}

void sub_190581CC8(uint64_t a1)
{
  uint64_t v2 = *(__CFRunLoopTimer **)(a1 + 192);
  if (v2)
  {
    CFRunLoopTimerInvalidate(v2);
    CFRelease(*(CFTypeRef *)(a1 + 192));
    *(void *)(a1 + 192) = 0;
  }
}

void sub_190581D04(void *a1)
{
  sub_190581BF8(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190581D3C(uint64_t result, double *a2)
{
  double v2 = a2[7];
  if (v2 == -1.0)
  {
    uint64_t v6 = 0;
    long long v4 = 0u;
    long long v5 = 0u;
    long long v3 = 0u;
    double v2 = -1.0;
  }
  else
  {
    long long v3 = *(_OWORD *)a2;
    long long v4 = *((_OWORD *)a2 + 1);
    long long v5 = *((_OWORD *)a2 + 2);
    uint64_t v6 = *((void *)a2 + 6);
  }
  *(_OWORD *)(result + 200) = v3;
  *(_OWORD *)(result + 216) = v4;
  *(_OWORD *)(result + 232) = v5;
  *(void *)(result + 248) = v6;
  *(double *)(result + 256) = v2;
  return result;
}

void sub_190581DA8(uint64_t a1, int a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (qword_1E929D798 != -1) {
    dispatch_once(&qword_1E929D798, &unk_1EDFD2660);
  }
  long long v4 = qword_1E929D790;
  if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    int v7 = a2;
    _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_DEFAULT, "Compass for AOP started. CoverAttached %{public}d", buf, 8u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2660);
    }
    long long v5 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "virtual void CLCompass7::start(BOOL)", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  *(unsigned char *)(a1 + 272) = a2;
}

void sub_190581F5C()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (qword_1E929D798 != -1) {
    dispatch_once(&qword_1E929D798, &unk_1EDFD2660);
  }
  uint64_t v0 = qword_1E929D790;
  if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1902AF000, v0, OS_LOG_TYPE_DEFAULT, "Compass for AOP stopped.", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2660);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "virtual void CLCompass7::stop()", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

double sub_1905820E4(uint64_t a1, int a2, double *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  sub_19055AAA8(a1, a2, a3);
  if (!a2)
  {
    if (*a3 <= 0.0)
    {
      if (*(unsigned char *)(a1 + 184))
      {
        *(unsigned char *)(a1 + 184) = 0;
        sub_190581CC8(a1);
        context.versiounint64_t n = 0;
        context.info = (void *)a1;
        memset(&context.retain, 0, 24);
        CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        CFRunLoopTimerRef v10 = CFRunLoopTimerCreate(v8, Current + 600.0, 0.0, 0, 0, (CFRunLoopTimerCallBack)sub_190583530, &context);
        *(void *)(a1 + 192) = v10;
        if (v10)
        {
          if (qword_1E929D798 != -1) {
            dispatch_once(&qword_1E929D798, &unk_1EDFD2660);
          }
          uint64_t v11 = qword_1E929D790;
          if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t buf = 134349056;
            uint64_t v20 = 0x4082C00000000000;
            _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_DEBUG, "Keeping compass on for %{public}.0f seconds", buf, 0xCu);
          }
          if (sub_1902D8400(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929D798 != -1) {
              dispatch_once(&qword_1E929D798, &unk_1EDFD2660);
            }
            int v17 = 134349056;
            uint64_t v18 = 0x4082C00000000000;
            float v14 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 2, "void CLCompass7::startTurnOffTimer()", "CoreLocation: %s\n", v14);
            if (v14 != (char *)buf) {
              free(v14);
            }
          }
          sub_1902D6BD0();
          CFRunLoopAddTimer(*(CFRunLoopRef *)qword_1EB3BF828, *(CFRunLoopTimerRef *)(a1 + 192), (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
        }
        else
        {
          if (qword_1E929D798 != -1) {
            dispatch_once(&qword_1E929D798, &unk_1EDFD2660);
          }
          float v12 = qword_1E929D790;
          if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_FAULT, "Could not create turn-off timer", buf, 2u);
          }
          if (sub_1902D8400(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929D798 != -1) {
              dispatch_once(&qword_1E929D798, &unk_1EDFD2660);
            }
            LOWORD(v17) = 0;
            uint64_t v15 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 0, "void CLCompass7::startTurnOffTimer()", "CoreLocation: %s\n", v15);
            if (v15 != (char *)buf) {
              free(v15);
            }
          }
          sub_1905824B4(a1, (double *)(a1 + 264));
        }
      }
      if (*(void *)(a1 + 192)) {
        int v7 = (double *)&unk_19060C720;
      }
      else {
        int v7 = a3;
      }
      uint64_t v6 = a1;
    }
    else
    {
      uint64_t v6 = a1;
      int v7 = a3;
    }
    sub_1905824B4(v6, v7);
  }
  *(double *)(a1 + 264) = *a3;
  return *a3;
}

uint64_t sub_1905824B4(uint64_t a1, double *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (qword_1E929D798 != -1) {
    dispatch_once(&qword_1E929D798, &unk_1EDFD2660);
  }
  long long v4 = qword_1E929D790;
  if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEFAULT))
  {
    double v5 = *a2;
    *(_DWORD *)uint64_t buf = 134349056;
    *(double *)&uint8_t buf[4] = v5;
    _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_DEFAULT, "Setting compass update interval to %{public}f", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2660);
    }
    double v17 = *a2;
    int v21 = 134349056;
    double v22 = v17;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLCompass7::setDeviceMotionServiceUpdateInterval(const CFTimeInterval &)", "CoreLocation: %s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  if (*(unsigned char *)(a1 + 136))
  {
    char v6 = sub_1902CD6B0();
    int v7 = (uint64_t *)(a1 + 168);
    if ((v6 & 0x20) != 0) {
      CFAllocatorRef v8 = (uint64_t *)(a1 + 168);
    }
    else {
      CFAllocatorRef v8 = (uint64_t *)(a1 + 152);
    }
    if ((v6 & 0x20) != 0) {
      int v9 = 8;
    }
    else {
      int v9 = 4;
    }
    if ((v6 & 0x20) != 0) {
      int v7 = (uint64_t *)(a1 + 152);
    }
  }
  else
  {
    int v7 = (uint64_t *)(a1 + 168);
    CFAllocatorRef v8 = (uint64_t *)(a1 + 152);
    int v9 = 4;
  }
  if (*v7) {
    sub_1902CDC50(*v7, (uint64_t)rint(0.0));
  }
  uint64_t v10 = *v8;
  if (!*v8)
  {
    uint64_t v11 = (void *)sub_1902DF4A8();
    v19[0] = 65292;
    v19[1] = v9;
    char v20 = 0;
    sub_19043791C(v11, (uint64_t)v19, (uint64_t *)buf);
    long long v12 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v13 = (std::__shared_weak_count *)v8[1];
    *(_OWORD *)CFAllocatorRef v8 = v12;
    if (v13)
    {
      sub_1902D8B58(v13);
      if (*(void *)&buf[8]) {
        sub_1902D8B58(*(std::__shared_weak_count **)&buf[8]);
      }
    }
    sub_1902CD864(*v8, (uint64_t)sub_190582754, a1);
    uint64_t v10 = *v8;
  }
  double v14 = rint(*a2 * 1000000.0);
  if (*a2 < 0.0) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = (uint64_t)v14;
  }
  return sub_1902CDC50(v10, v15);
}

void sub_190582754()
{
  MEMORY[0x1F4188790]();
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  IOHIDEventGetVendorDefinedData();
  if (qword_1EB3BE898 != -1) {
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD3560);
  }
  uint64_t v0 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1902AF000, v0, OS_LOG_TYPE_DEBUG, "Empty payload, returning", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3560);
    }
    LOWORD(v3) = 0;
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "static void CLCompass7::onDeviceMotionServiceIohidEvent(void *, void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_190583514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

void sub_190583530(uint64_t a1, uint64_t a2)
{
  if (*(double *)(a2 + 264) <= 0.0) {
    sub_1905824B4(a2, (double *)(a2 + 264));
  }

  sub_190581CC8(a2);
}

void sub_19058357C(uint64_t a1, float a2, float a3)
{
  if (a2 != -1.0 && *(unsigned char *)(a1 + 272) && a3 > 0.0) {
    asinf(5.0 / a3);
  }
}

os_log_t sub_1905835F8()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Compass");
  qword_1E929D790 = (uint64_t)result;
  return result;
}

void sub_19058362C()
{
}

__n128 sub_190583644(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  *(_OWORD *)(a1 + 40) = a2[2];
  *(_OWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 8) = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  *(__n128 *)(a1 + 56) = result;
  return result;
}

void sub_1905837B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FCC980](v19, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_1905837F0(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v3 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  int v7 = (NSSet *)objc_msgSend_setWithObjects_(v3, v6, v4, v5, 0);
  if (*a2
    && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v7)) != 0
    && (uint64_t v10 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v9, @"CMErrorMessage")) != 0)
  {
    int v13 = objc_msgSend_intValue(v10, v11, v12);
  }
  else
  {
    int v13 = 103;
  }
  if (qword_1E929D718 != -1) {
    dispatch_once(&qword_1E929D718, &unk_1EDFC3548);
  }
  double v14 = qword_1E929D710;
  if (os_log_type_enabled((os_log_t)qword_1E929D710, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    int v17 = v13;
    _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_FAULT, "Failed with CMError code %{public}d", buf, 8u);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D718 != -1) {
      dispatch_once(&qword_1E929D718, &unk_1EDFC3548);
    }
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "-[CMSkiTrackerInternal init]_block_invoke", "CoreLocation: %s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
}

void sub_190583A08(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = getpid();
  uint64_t ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2);
  if (ExecutablePathFromPid)
  {
    uint64_t v5 = ExecutablePathFromPid;
    if (qword_1E929D718 != -1) {
      dispatch_once(&qword_1E929D718, &unk_1EDFC3548);
    }
    long long v6 = qword_1E929D710;
    if (os_log_type_enabled((os_log_t)qword_1E929D710, OS_LOG_TYPE_INFO))
    {
      pid_t v7 = getpid();
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = *(unsigned __int8 *)(v8 + 24);
      *(_DWORD *)uint64_t buf = 138413058;
      uint64_t v12 = v5;
      __int16 v13 = 1024;
      pid_t v14 = v7;
      __int16 v15 = 1024;
      int v16 = v9;
      __int16 v17 = 2048;
      uint64_t v18 = v8;
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_INFO, "CMSkiTracker client connection interrupt, %@, %d, %d, %p", buf, 0x22u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D718 != -1) {
        dispatch_once(&qword_1E929D718, &unk_1EDFC3548);
      }
      getpid();
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMSkiTrackerInternal init]_block_invoke", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

void sub_190583D5C(uint64_t a1)
{
  v31[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(void **)(v2 + 40);
  if (v3 != *(void **)(a1 + 48) || !*(unsigned char *)(v2 + 24))
  {

    *(void *)(*(void *)(a1 + 32) + 40) = *(id *)(a1 + 48);
    *(void *)(*(void *)(a1 + 32) + 32) = *(id *)(a1 + 40);
    *(void *)(*(void *)(a1 + 32) + 56) = 0xBFF0000000000000;
    uint64_t v22 = 0;
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5)
    {
      uint64_t v30 = @"CMSkiKeyDataRecord";
      v31[0] = v5;
      uint64_t v22 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v4, (uint64_t)v31, &v30, 1);
    }
    else
    {
      id v6 = objc_alloc(MEMORY[0x1E4F29128]);
      uint64_t v8 = objc_msgSend_initWithUUIDString_(v6, v7, @"00000000-0000-0000-0000-000000000000");
      int v9 = [CMSkiData alloc];
      uint64_t v11 = objc_msgSend_initWithSessionId_(v9, v10, (uint64_t)v8);
      uint64_t v28 = @"CMSkiKeyDataRecord";
      BOOL v29 = v11;
      uint64_t v22 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v12, (uint64_t)&v29, &v28, 1);
    }
    if (qword_1E929D718 != -1) {
      dispatch_once(&qword_1E929D718, &unk_1EDFC3548);
    }
    __int16 v13 = qword_1E929D710;
    if (os_log_type_enabled((os_log_t)qword_1E929D710, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 40);
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v14;
      _os_log_impl(&dword_1902AF000, v13, OS_LOG_TYPE_DEFAULT, "Querying data to anchor updates from %@", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1E929D718 != -1) {
        dispatch_once(&qword_1E929D718, &unk_1EDFC3548);
      }
      uint64_t v17 = *(void *)(a1 + 40);
      LODWORD(v25) = 138412290;
      *(void *)((char *)&v25 + 4) = v17;
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMSkiTrackerInternal _startUpdatesFromRecord:handler:]_block_invoke", "CoreLocation: %s\n", v18);
      if (v18 != (char *)&buf) {
        free(v18);
      }
    }
    sub_1905066B4("kCLConnectionMessageSkiDataQuery", &v22, &v25);
    uint64_t v15 = *(void *)(a1 + 32);
    long long v21 = v25;
    if (*((void *)&v25 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 1uLL, memory_order_relaxed);
      uint64_t v15 = *(void *)(a1 + 32);
    }
    v20[6] = MEMORY[0x1E4F143A8];
    v20[7] = 3221225472;
    v20[8] = sub_190584244;
    v20[9] = &unk_1E568D558;
    v20[10] = v15;
    CLConnectionClient::sendMessage();
    if (*((void *)&v21 + 1)) {
      sub_1902D8B58(*((std::__shared_weak_count **)&v21 + 1));
    }
    sub_1902C3F54(&buf, "kCLConnectionMessageSkiDataUpdate");
    v20[1] = MEMORY[0x1E4F143A8];
    v20[2] = 3221225472;
    v20[3] = sub_190584328;
    v20[4] = &unk_1E568D558;
    v20[5] = *(void *)(a1 + 32);
    CLConnectionClient::setHandlerForMessage();
    if (v27 < 0) {
      operator delete((void *)buf);
    }
    uint64_t v23 = @"kCLConnectionMessageSubscribeKey";
    uint64_t v24 = MEMORY[0x1E4F1CC38];
    v20[0] = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v16, (uint64_t)&v24, &v23, 1);
    sub_1905869D4("kCLConnectionMessageSkiDataUpdate", v20, &buf);
    uint64_t v19 = (std::__shared_weak_count *)*((void *)&buf + 1);
    if (*((void *)&buf + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 1uLL, memory_order_relaxed);
    }
    CLConnectionClient::sendMessage();
    if (v19) {
      sub_1902D8B58(v19);
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 24) = 1;
    if (*((void *)&buf + 1)) {
      sub_1902D8B58(*((std::__shared_weak_count **)&buf + 1));
    }
    if (*((void *)&v25 + 1)) {
      sub_1902D8B58(*((std::__shared_weak_count **)&v25 + 1));
    }
  }
}

void sub_1905841D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,void *__p,std::__shared_weak_count *a34,int a35,__int16 a36,char a37,char a38)
{
  if (a13) {
    sub_1902D8B58(a13);
  }
  if (a34) {
    sub_1902D8B58(a34);
  }
  if (a32) {
    sub_1902D8B58(a32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190584244(uint64_t result, uint64_t *a2)
{
  if (*(void *)(*(void *)(result + 32) + 40))
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v5 = objc_opt_class();
    uint64_t v6 = objc_opt_class();
    uint64_t v7 = objc_opt_class();
    uint64_t v8 = objc_opt_class();
    uint64_t v10 = (NSSet *)objc_msgSend_setWithObjects_(v4, v9, v5, v6, v7, v8, 0);
    __n128 result = *a2;
    if (*a2)
    {
      __n128 result = CLConnectionMessage::getDictionaryOfClasses((CLConnectionMessage *)result, v10);
      if (result)
      {
        uint64_t v11 = result;
        uint64_t v12 = *(void *)(v3 + 32);
        return MEMORY[0x1F4181798](v12, sel__handleUpdates_, v11);
      }
    }
  }
  return result;
}

void sub_190584328(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 40);
  if (v4)
  {
    id v6 = (id)objc_msgSend_copy(v4, a2, a3);
    uint64_t v7 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v8 = objc_opt_class();
    uint64_t v9 = objc_opt_class();
    uint64_t v10 = objc_opt_class();
    uint64_t v11 = objc_opt_class();
    __int16 v13 = (NSSet *)objc_msgSend_setWithObjects_(v7, v12, v8, v9, v10, v11, 0);
    if (*(void *)a2
      && (uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v13)) != 0)
    {
      uint64_t v15 = DictionaryOfClasses;
      uint64_t v16 = *(void *)(a1 + 32);
      MEMORY[0x1F4181798](v16, sel__handleUpdates_, v15);
    }
    else
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_19058447C;
      block[3] = &unk_1E568D2D0;
      block[4] = v6;
      dispatch_async(MEMORY[0x1E4F14428], block);
    }
  }
}

uint64_t sub_19058447C(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 103, 0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16);

  return v4(v2, 0, v3);
}

void sub_190584554(uint64_t a1, const char *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)(a1 + 32) + 24))
  {
    uint64_t v7 = @"kCLConnectionMessageSubscribeKey";
    uint64_t v8 = MEMORY[0x1E4F1CC28];
    uint64_t v6 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)&v8, &v7, 1);
    sub_1905869D4("kCLConnectionMessageSkiDataUpdate", &v6, buf);
    uint64_t v5 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CLConnectionClient::sendMessage();
    if (v5) {
      sub_1902D8B58(v5);
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 24) = 0;
    if (v10) {
      sub_1902D8B58(v10);
    }
  }
  else
  {
    if (qword_1E929D718 != -1) {
      dispatch_once(&qword_1E929D718, &unk_1EDFC3548);
    }
    uint64_t v3 = qword_1E929D710;
    if (os_log_type_enabled((os_log_t)qword_1E929D710, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_INFO, "Unable to stop Ski data updates as we are are not receiving updates.", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D718 != -1) {
        dispatch_once(&qword_1E929D718, &unk_1EDFC3548);
      }
      LOWORD(v6) = 0;
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMSkiTrackerInternal _stopUpdates]_block_invoke", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_190584788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a12) {
    sub_1902D8B58(a12);
  }
  if (a18) {
    sub_1902D8B58(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_19058482C(uint64_t a1, const char *a2)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v16 = @"CMSkiKeyDataRecord";
    v17[0] = v2;
    uint64_t v13 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v17, &v16, 1);
  }
  else
  {
    id v3 = objc_alloc(MEMORY[0x1E4F29128]);
    uint64_t v5 = objc_msgSend_initWithUUIDString_(v3, v4, @"00000000-0000-0000-0000-000000000000");
    uint64_t v6 = [CMSkiData alloc];
    uint64_t v8 = objc_msgSend_initWithSessionId_(v6, v7, (uint64_t)v5);
    uint64_t v14 = @"CMSkiKeyDataRecord";
    uint64_t v15 = v8;
    uint64_t v13 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v9, (uint64_t)&v15, &v14, 1);
  }
  sub_1905066B4("kCLConnectionMessageSkiDataQuery", &v13, &v11);
  uint64_t v10 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CLConnectionClient::sendMessage();
  if (v10) {
    sub_1902D8B58(v10);
  }
  if (v12) {
    sub_1902D8B58(v12);
  }
}

void sub_1905849D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15) {
    sub_1902D8B58(a15);
  }
  if (a17) {
    sub_1902D8B58(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905849FC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v4 = (id)objc_msgSend_copy(*(void **)(a1 + 32), a2, a3);
  uint64_t v5 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v11 = (NSSet *)objc_msgSend_setWithObjects_(v5, v10, v6, v7, v8, v9, 0);
  if (*(void *)a2
    && (uint64_t DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v11)) != 0)
  {
    uint64_t v14 = DictionaryOfClasses;
    uint64_t v15 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v13, @"CMErrorMessage");
    uint64_t v17 = objc_msgSend_objectForKeyedSubscript_(v14, v16, @"CMSkiKeyDataArray");
    if (v15)
    {
      uint64_t v18 = v24;
      v24[0] = MEMORY[0x1E4F143A8];
      v24[1] = 3221225472;
      v24[2] = sub_190584DE4;
      v24[3] = &unk_1E568D320;
      v24[4] = v15;
      v24[5] = v4;
    }
    else if (v17)
    {
      uint64_t v18 = v23;
      v23[0] = MEMORY[0x1E4F143A8];
      v23[1] = 3221225472;
      v23[2] = sub_190584E5C;
      v23[3] = &unk_1E568D320;
      v23[4] = v17;
      v23[5] = v4;
    }
    else
    {
      if (qword_1E929D718 != -1) {
        dispatch_once(&qword_1E929D718, &unk_1EDFC3548);
      }
      uint64_t v19 = qword_1E929D710;
      if (os_log_type_enabled((os_log_t)qword_1E929D710, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1902AF000, v19, OS_LOG_TYPE_FAULT, "Unable to parse kCLConnectionMessageSkiDataQuery message.", buf, 2u);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D718 != -1) {
          dispatch_once(&qword_1E929D718, &unk_1EDFC3548);
        }
        __int16 v22 = 0;
        char v20 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "-[CMSkiTrackerInternal _queryUpdatesFromRecord:handler:]_block_invoke", "CoreLocation: %s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
      uint64_t v18 = v21;
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      _OWORD v21[2] = sub_190584E74;
      float32x4_t v21[3] = &unk_1E568D2D0;
      v21[4] = v4;
    }
  }
  else
  {
    uint64_t v18 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_190584D80;
    block[3] = &unk_1E568D2D0;
    block[4] = v4;
  }
  dispatch_async(MEMORY[0x1E4F14428], v18);
}

uint64_t sub_190584D80(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 103, 0);
  id v4 = *(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16);

  return v4(v2, 0, v3);
}

uint64_t sub_190584DE4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = objc_msgSend_intValue(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_errorWithDomain_code_userInfo_(v3, v6, @"CMErrorDomain", v5, 0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, uint64_t))(v4 + 16);

  return v8(v4, 0, v7);
}

uint64_t sub_190584E5C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

uint64_t sub_190584E74(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 103, 0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16);

  return v4(v2, 0, v3);
}

uint64_t sub_1905855C8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = objc_msgSend_intValue(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_errorWithDomain_code_userInfo_(v3, v6, @"CMErrorDomain", v5, 0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, uint64_t))(v4 + 16);

  return v8(v4, 0, v7);
}

uint64_t sub_190585640(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

uint64_t sub_190585658(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 103, 0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16);

  return v4(v2, 0, v3);
}

void sub_190585730(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (qword_1E929D718 != -1) {
    dispatch_once(&qword_1E929D718, &unk_1EDFC3548);
  }
  uint64_t v2 = qword_1E929D710;
  if (os_log_type_enabled((os_log_t)qword_1E929D710, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEFAULT, "[live data] starting updates", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D718 != -1) {
      dispatch_once(&qword_1E929D718, &unk_1EDFC3548);
    }
    LOWORD(v6[0]) = 0;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMSkiTrackerInternal _startLiveUpdatesWithHandler:]_block_invoke", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }

  *(void *)(*(void *)(a1 + 32) + 48) = *(id *)(a1 + 40);
  sub_1902C3F54(buf, "kCLConnectionMessageSkiDataLiveUpdate");
  v6[2] = MEMORY[0x1E4F143A8];
  v6[3] = 3221225472;
  v6[4] = sub_190585A3C;
  v6[5] = &unk_1E568D558;
  v6[6] = *(void *)(a1 + 32);
  CLConnectionClient::setHandlerForMessage();
  if (v11 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v7 = @"kCLConnectionMessageSubscribeKey";
  uint64_t v8 = MEMORY[0x1E4F1CC38];
  v6[0] = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v3, (uint64_t)&v8, &v7, 1);
  sub_1904EF1FC("kCLConnectionMessageSkiDataLiveUpdate", v6, buf);
  int v5 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CLConnectionClient::sendMessage();
  if (v5) {
    sub_1902D8B58(v5);
  }
  if (v10) {
    sub_1902D8B58(v10);
  }
}

void sub_1905859F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,std::__shared_weak_count *a24,int a25,__int16 a26,char a27,char a28)
{
  if (a12) {
    sub_1902D8B58(a12);
  }
  if (a24) {
    sub_1902D8B58(a24);
  }
  _Unwind_Resume(exception_object);
}

void sub_190585A3C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 48);
  if (v3)
  {
    id v5 = (id)objc_msgSend_copy(v3, a2, a3);
    uint64_t v6 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v7 = objc_opt_class();
    uint64_t v8 = objc_opt_class();
    uint64_t v9 = objc_opt_class();
    char v11 = (NSSet *)objc_msgSend_setWithObjects_(v6, v10, v7, v8, v9, 0);
    if (*(void *)a2
      && (uint64_t DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v11),
          *(void *)a2)
      && (uint64_t v14 = DictionaryOfClasses) != 0)
    {
      if (objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v13, @"CMErrorMessage"))
      {
        if (qword_1E929D718 != -1) {
          dispatch_once(&qword_1E929D718, &unk_1EDFC3548);
        }
        uint64_t v16 = qword_1E929D710;
        if (os_log_type_enabled((os_log_t)qword_1E929D710, OS_LOG_TYPE_ERROR))
        {
          uint64_t v18 = objc_msgSend_objectForKeyedSubscript_(v14, v17, @"CMErrorMessage");
          *(_DWORD *)long long buf = 67109120;
          LODWORD(v46) = objc_msgSend_intValue(v18, v19, v20);
          _os_log_impl(&dword_1902AF000, v16, OS_LOG_TYPE_ERROR, "[live data] encountered error while trying to stream, %d", buf, 8u);
        }
        if (sub_1902D8400(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D718 != -1) {
            dispatch_once(&qword_1E929D718, &unk_1EDFC3548);
          }
          uint64_t v35 = objc_msgSend_objectForKeyedSubscript_(v14, v34, @"CMErrorMessage");
          int v43 = 67109120;
          LODWORD(v44) = objc_msgSend_intValue(v35, v36, v37);
          float v38 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 0, "-[CMSkiTrackerInternal _startLiveUpdatesWithHandler:]_block_invoke", "CoreLocation: %s\n", v38);
          if (v38 != (char *)buf) {
            free(v38);
          }
        }
        __int16 v22 = (void *)MEMORY[0x1E4F28C58];
        uint64_t v23 = objc_msgSend_objectForKeyedSubscript_(v14, v21, @"CMErrorMessage");
        uint64_t v26 = objc_msgSend_integerValue(v23, v24, v25);
        uint64_t v28 = objc_msgSend_errorWithDomain_code_userInfo_(v22, v27, @"CMErrorDomain", v26, 0);
        BOOL v29 = v41;
        v41[0] = MEMORY[0x1E4F143A8];
        v41[1] = 3221225472;
        v41[2] = sub_1905860CC;
        v41[3] = &unk_1E568D320;
        v41[4] = v28;
        v41[5] = v5;
      }
      else
      {
        uint64_t v31 = objc_msgSend_objectForKeyedSubscript_(v14, v15, @"CMSkiKeyDataRecord");
        if (qword_1E929D718 != -1) {
          dispatch_once(&qword_1E929D718, &unk_1EDFC3548);
        }
        pid_t v32 = qword_1E929D710;
        if (os_log_type_enabled((os_log_t)qword_1E929D710, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138412290;
          uint64_t v46 = v31;
          _os_log_impl(&dword_1902AF000, v32, OS_LOG_TYPE_INFO, "[live data] delivering live update %@", buf, 0xCu);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D718 != -1) {
            dispatch_once(&qword_1E929D718, &unk_1EDFC3548);
          }
          int v43 = 138412290;
          uint64_t v44 = v31;
          float v39 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "-[CMSkiTrackerInternal _startLiveUpdatesWithHandler:]_block_invoke", "CoreLocation: %s\n", v39);
          if (v39 != (char *)buf) {
            free(v39);
          }
        }
        BOOL v29 = v40;
        v40[0] = MEMORY[0x1E4F143A8];
        v40[1] = 3221225472;
        v40[2] = sub_1905860E4;
        v40[3] = &unk_1E568D320;
        v40[4] = v31;
        v40[5] = v5;
      }
    }
    else
    {
      if (qword_1E929D718 != -1) {
        dispatch_once(&qword_1E929D718, &unk_1EDFC3548);
      }
      uint64_t v30 = qword_1E929D710;
      if (os_log_type_enabled((os_log_t)qword_1E929D710, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1902AF000, v30, OS_LOG_TYPE_ERROR, "[live data] malformed payload while trying to stream", buf, 2u);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D718 != -1) {
          dispatch_once(&qword_1E929D718, &unk_1EDFC3548);
        }
        LOWORD(v43) = 0;
        __int16 v33 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "-[CMSkiTrackerInternal _startLiveUpdatesWithHandler:]_block_invoke", "CoreLocation: %s\n", v33);
        if (v33 != (char *)buf) {
          free(v33);
        }
      }
      BOOL v29 = block;
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_190586068;
      block[3] = &unk_1E568D2D0;
      block[4] = v5;
    }
    dispatch_async(MEMORY[0x1E4F14428], v29);
  }
}

uint64_t sub_190586068(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 103, 0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16);

  return v4(v2, 0, v3);
}

uint64_t sub_1905860CC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

uint64_t sub_1905860E4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_1905862E4(uint64_t a1, const char *a2)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = @"kCLConnectionMessageSubscribeKey";
  v7[0] = MEMORY[0x1E4F1CC28];
  uint64_t v5 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v7, &v6, 1);
  sub_1904EF1FC("kCLConnectionMessageSkiDataLiveUpdate", &v5, &v3);
  uint64_t v2 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CLConnectionClient::sendMessage();
  if (v2) {
    sub_1902D8B58(v2);
  }
  if (v4) {
    sub_1902D8B58(v4);
  }
}

void sub_1905863C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_1902D8B58(a11);
  }
  if (a13) {
    sub_1902D8B58(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1905864F0(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend__teardown(*(void **)(a1 + 32), a2, a3);
}

uint64_t sub_1905865F4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend__internal(*(void **)(a1 + 32), a2, a3);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);

  return objc_msgSend__startUpdatesFromRecord_handler_(v4, v5, v6, v7);
}

uint64_t sub_1905866A8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = objc_msgSend__internal(*(void **)(a1 + 32), a2, a3);

  return MEMORY[0x1F4181798](v3, sel__stopUpdates, v4);
}

uint64_t sub_1905867BC(uint64_t a1, const char *a2)
{
  uint64_t result = objc_msgSend_isAuthorizedForEntitlement_(CMMotionUtils, a2, @"com.apple.locationd.activity");
  qword_1EB3BF600 = result;
  return result;
}

uint64_t sub_1905868BC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend__internal(*(void **)(a1 + 32), a2, a3);
  uint64_t v5 = *(void *)(a1 + 40);

  return MEMORY[0x1F4181798](v4, sel__startLiveUpdatesWithHandler_, v5);
}

uint64_t sub_190586970(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = objc_msgSend__internal(*(void **)(a1 + 32), a2, a3);

  return MEMORY[0x1F4181798](v3, sel__stopLiveUpdates, v4);
}

os_log_t sub_1905869A4()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Skiing");
  qword_1E929D710 = (uint64_t)result;
  return result;
}

void *sub_1905869D4@<X0>(char *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x70uLL);
  os_log_t result = sub_190586A38(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_190586A24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_190586A38(void *a1, char *__s, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDFD0DA0;
  sub_190586AAC((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_190586A98(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_190586AAC(int a1, uint64_t a2, char *__s, void *a4)
{
  sub_1902C3F54(__p, __s);
  MEMORY[0x192FCC420](a2, __p, *a4);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_190586B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_190586BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FCC980](v15, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_190586CE8(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  char v7 = (NSSet *)objc_msgSend_setWithObjects_(v3, v6, v4, v5, 0);
  if (*a2
    && (uint64_t DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v7)) != 0
    && (uint64_t v10 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v9, @"CMErrorMessage")) != 0)
  {
    int v13 = objc_msgSend_intValue(v10, v11, v12);
  }
  else
  {
    int v13 = 103;
  }
  if (qword_1EB3BE888 != -1) {
    dispatch_once(&qword_1EB3BE888, &unk_1EDFD3880);
  }
  uint64_t v14 = off_1EB3BE880;
  if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 67240192;
    int v17 = v13;
    _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_FAULT, "Failed with CMError code %{public}d", buf, 8u);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3880);
    }
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "-[CMCatherineFeederInternal _startDaemonConnection]_block_invoke", "CoreLocation: %s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
}

void sub_190587014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_1902D8B58(a11);
  }
  if (a13) {
    sub_1902D8B58(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190587140(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend__teardown(*(void **)(*(void *)(a1 + 32) + 8), a2, a3);
}

uint64_t sub_190587380(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = objc_msgSend_internal(*(void **)(a1 + 32), a2, a3);
  uint64_t v4 = mach_absolute_time();
  sub_1902D8D34(v4);

  return MEMORY[0x1F4181798](v3, sel__feedCatherine_confidence_timestamp_, v5);
}

os_log_t sub_1905873E8()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Calorimetry");
  qword_1E929D768 = (uint64_t)result;
  return result;
}

void sub_190587A54(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x10F3C40E271C694);
  _Unwind_Resume(a1);
}

void sub_1905880CC(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t *sub_19058812C(uint64_t *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    os_log_t result = *(uint64_t **)(a2 + 160);
    if (result) {
      return (uint64_t *)sub_19045969C(result, v2);
    }
  }
  return result;
}

uint64_t *sub_190588148(uint64_t *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    os_log_t result = *(uint64_t **)(a2 + 160);
    if (result) {
      return (uint64_t *)sub_190459838(result, v2);
    }
  }
  return result;
}

uint64_t sub_190588164(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_onAudioAccessoryDeviceMotion_, a1);
}

void sub_190588170(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE838 != -1) {
    dispatch_once(&qword_1EB3BE838, &unk_1EDFC1F20);
  }
  uint64_t v4 = qword_1EB3BE830;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v5 = (void *)*v5;
    }
    int v6 = *(_DWORD *)a1;
    char v7 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      char v7 = (void *)*v7;
    }
    int v8 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)long long buf = 67240963;
    int v12 = v6;
    __int16 v13 = 2081;
    uint64_t v14 = v5;
    __int16 v15 = 2081;
    uint64_t v16 = v7;
    __int16 v17 = 1026;
    int v18 = v8;
    _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_INFO, "[CMHeadphoneActivityManager] Config,side,%{public}d,configuration,%{private}s,serialNumber,%{private}s,hardwareModel,%{public}d", buf, 0x22u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC1F20);
    }
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void onHeadphoneDeviceMotionConfig(const CLAccessoryDeviceMotion::Config *, void *)", "CoreLocation: %s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (a2)
  {
    uint64_t v9 = *(uint64_t **)(a2 + 160);
    if (v9) {
      sub_190458868(v9, (int *)a1);
    }
  }
}

uint64_t *sub_1905883C4(uint64_t *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (double *)result;
    os_log_t result = *(uint64_t **)(a2 + 160);
    if (result) {
      return (uint64_t *)sub_1904571D4(result, v2);
    }
  }
  return result;
}

void sub_1905889FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190588CE8(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_pauseActivityStreamingPrivate(*(void **)(a1 + 32), a2, a3);
  objc_msgSend_pauseStatusStreamingPrivate(*(void **)(a1 + 32), v4, v5);
  int v8 = *(void **)(*(void *)(a1 + 32) + 8);

  return objc_msgSend_stopMslLoggingPrivate(v8, v6, v7);
}

uint64_t sub_190588D80()
{
  if (sub_19046BC40() & 1) != 0 || (sub_19046BCE8() & 1) != 0 || (sub_1902BACB4()) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = objc_msgSend_isMotionActivityEntitled(CMMotionUtils, v0, v1);
  }
  byte_1EB3BF610 = result;
  return result;
}

__n128 sub_190588E60(uint64_t a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  long long v1 = *(_OWORD *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 8) + 8);
  block[1] = 3221225472;
  block[2] = sub_190588EE8;
  block[3] = &unk_1E568D398;
  long long v5 = v1;
  uint64_t v6 = *(void *)(a1 + 48);
  dispatch_async(v2, block);
  return result;
}

uint64_t sub_190588EE8(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_startActivityUpdatesPrivateToQueue_withHandler_, *(void *)(a1 + 40));
}

void sub_190588F70(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(*(void *)(v1 + 8) + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_190588FE8;
  block[3] = &unk_1E568D118;
  void block[4] = v1;
  dispatch_sync(v2, block);
}

uint64_t sub_190588FE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_stopActivityUpdatesPrivate, a3);
}

uint64_t sub_19058906C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_startStatusUpdatesPrivateToQueue_withHandler_, *(void *)(a1 + 40));
}

uint64_t sub_1905890F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_stopStatusUpdatesPrivate, a3);
}

uint64_t sub_1905891AC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t result = objc_msgSend_mslLoggingEnabledPrivate(*(void **)(*(void *)(a1 + 32) + 8), a2, a3);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_190589260(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel_startMslLoggingPrivateWithFilenamePrefix_filePath_, *(void *)(a1 + 40));
}

uint64_t sub_1905892EC(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_stopMslLoggingPrivate(*(void **)(*(void *)(a1 + 32) + 8), a2, a3);
}

void sub_190589574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_190589590(uint64_t result, uint64_t a2)
{
  if (!a2) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = (void *)MEMORY[0x1E4F28DC0];
  long long v5 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v11 = objc_msgSend_setWithObjects_(v5, v10, v6, v7, v8, v9, 0);
  __int16 v13 = objc_msgSend_unarchivedObjectOfClasses_fromData_error_(v4, v12, v11, a2, 0);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    Weauint64_t k = objc_loadWeak((id *)(v3 + 32));
    uint64_t v15 = (uint64_t)v13;
LABEL_7:
    return MEMORY[0x1F4181798](Weak, sel_onActivityPrivate_error_, v15);
  }
  objc_opt_class();
  uint64_t result = objc_opt_isKindOfClass();
  if ((result & 1) == 0) {
    return result;
  }
  __int16 v17 = objc_msgSend_objectForKeyedSubscript_(v13, v16, @"EventType");
  int isEqualToString = objc_msgSend_isEqualToString_(v17, v18, @"Activity");
  id v20 = objc_loadWeak((id *)(v3 + 32));
  id v22 = v20;
  if (isEqualToString)
  {
    uint64_t v23 = objc_msgSend_objectForKeyedSubscript_(v13, v21, @"PayloadData");
    objc_msgSend_objectForKeyedSubscript_(v13, v24, @"PayloadError");
    Weauint64_t k = v22;
    uint64_t v15 = v23;
    goto LABEL_7;
  }

  return MEMORY[0x1F4181798](v20, sel_onStatusEventPrivate_, v13);
}

uint64_t sub_1905898AC(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE878 != -1) {
    dispatch_once(&qword_1EB3BE878, &unk_1EDFC1F40);
  }
  uint64_t v2 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = a1[5];
    *(_DWORD *)long long buf = 138543618;
    uint64_t v8 = v3;
    __int16 v9 = 2114;
    uint64_t v10 = v4;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEBUG, "[CMHeadphoneActivityManager] motion activity: %{public}@ error: %{public}@", buf, 0x16u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFC1F40);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMHeadphoneActivityManager onActivityPrivate:error:]_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return (*(uint64_t (**)(void))(a1[6] + 16))();
}

void sub_190589D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_190589D4C(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)MEMORY[0x1E4F28DC0];
    long long v5 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v6 = objc_opt_class();
    uint64_t v7 = objc_opt_class();
    uint64_t v9 = objc_msgSend_setWithObjects_(v5, v8, v6, v7, 0);
    uint64_t v11 = objc_msgSend_unarchivedObjectOfClasses_fromData_error_(v4, v10, v9, a2, 0);
    objc_opt_class();
    uint64_t result = objc_opt_isKindOfClass();
    if (result)
    {
      Weauint64_t k = objc_loadWeak((id *)(v3 + 32));
      return MEMORY[0x1F4181798](Weak, sel_onStatusEventPrivate_, v11);
    }
  }
  return result;
}

void sub_19058A1C4(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 74))
  {
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFC1F40);
    }
    uint64_t v2 = off_1EB3BE870;
    if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEFAULT, "[CMHeadphoneActivityManager] Device connected", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE878 != -1) {
        dispatch_once(&qword_1EB3BE878, &unk_1EDFC1F40);
      }
      __int16 v9 = 0;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMHeadphoneActivityManager notifyDeviceConnectedEventToClientPrivate]_block_invoke", "CoreLocation: %s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 74) = 1;
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v5 = *(void *)(v4 + 64);
    if (v5)
    {
      uint64_t v6 = *(void **)(v4 + 56);
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 3221225472;
      _DWORD v8[2] = sub_19058A3DC;
      void v8[3] = &unk_1E568D2D0;
      v8[4] = v5;
      objc_msgSend_addOperationWithBlock_(v6, v3, (uint64_t)v8);
    }
  }
}

uint64_t sub_19058A3DC(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE878 != -1) {
    dispatch_once(&qword_1EB3BE878, &unk_1EDFC1F40);
  }
  uint64_t v2 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEBUG, "[CMHeadphoneActivityManager] notifying client of connection", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFC1F40);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMHeadphoneActivityManager notifyDeviceConnectedEventToClientPrivate]_block_invoke", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19058A604(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 74))
  {
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFC1F40);
    }
    uint64_t v2 = off_1EB3BE870;
    if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEFAULT, "[CMHeadphoneActivityManager] Device disconnected", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE878 != -1) {
        dispatch_once(&qword_1EB3BE878, &unk_1EDFC1F40);
      }
      __int16 v9 = 0;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMHeadphoneActivityManager notifyDeviceDisconnectedEventToClientPrivate]_block_invoke", "CoreLocation: %s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 74) = 0;
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v5 = *(void *)(v4 + 64);
    if (v5)
    {
      uint64_t v6 = *(void **)(v4 + 56);
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 3221225472;
      _DWORD v8[2] = sub_19058A818;
      void v8[3] = &unk_1E568D2D0;
      v8[4] = v5;
      objc_msgSend_addOperationWithBlock_(v6, v3, (uint64_t)v8);
    }
  }
}

uint64_t sub_19058A818(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE878 != -1) {
    dispatch_once(&qword_1EB3BE878, &unk_1EDFC1F40);
  }
  uint64_t v2 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEBUG, "[CMHeadphoneActivityManager] notifying client of disconnection", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFC1F40);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMHeadphoneActivityManager notifyDeviceDisconnectedEventToClientPrivate]_block_invoke", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

os_log_t sub_19058A9C4()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Accessory");
  qword_1EB3BE830 = (uint64_t)result;
  return result;
}

void sub_19058A9F4(uint64_t a1)
{
}

void sub_19058AA50(_Unwind_Exception *a1)
{
  sub_19056756C(v1);
  _Unwind_Resume(a1);
}

void sub_19058AA68(_DWORD *a1)
{
  sub_19056756C(a1);

  JUMPOUT(0x192FCC980);
}

void sub_19058AAA4(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  bzero(&v6, 0x12uLL);
  uint64_t v6 = *(void *)(a1 + 126);
  int v7 = *(_DWORD *)(a1 + 134);
  if (qword_1E929D798 != -1) {
    dispatch_once(&qword_1E929D798, &unk_1EDFD26E0);
  }
  uint64_t v2 = qword_1E929D790;
  if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)long long buf = 67110656;
    int v23 = (__int16)v6;
    __int16 v24 = 1024;
    int v25 = SWORD1(v6);
    __int16 v26 = 1024;
    int v27 = SWORD2(v6);
    __int16 v28 = 1024;
    int v29 = SHIWORD(v6);
    __int16 v30 = 1024;
    int v31 = (__int16)v7;
    __int16 v32 = 1024;
    int v33 = SHIWORD(v7);
    __int16 v34 = 1024;
    int v35 = v3;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_INFO, "Setting calibration data %d, %d, %d, %d, %d, %d from sensor mode %d", buf, 0x2Cu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD26E0);
    }
    int v4 = *(_DWORD *)(a1 + 64);
    int v8 = 67110656;
    int v9 = (__int16)v6;
    __int16 v10 = 1024;
    int v11 = SWORD1(v6);
    __int16 v12 = 1024;
    int v13 = SWORD2(v6);
    __int16 v14 = 1024;
    int v15 = SHIWORD(v6);
    __int16 v16 = 1024;
    int v17 = (__int16)v7;
    __int16 v18 = 1024;
    int v19 = SHIWORD(v7);
    __int16 v20 = 1024;
    int v21 = v4;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV11::chooseOffsetData()", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_1905683AC((float32x2_t *)a1, (__int16 *)&v6);
}

os_log_t sub_19058AD18()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Compass");
  qword_1E929D790 = (uint64_t)result;
  return result;
}

float sub_19058AD48(float *a1)
{
  uint64_t v1 = 0;
  float v2 = 0.0;
  do
  {
    float v2 = v2 + (float)(a1[v1] * a1[v1]);
    ++v1;
  }
  while (v1 != 3);
  float v3 = sqrtf(v2);
  if (v3 < 0.001) {
    return 0.0;
  }
  float v5 = *a1;
  float v6 = a1[1];
  float v7 = a1[2];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E929EAC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E929EAC0))
  {
    double v11 = sub_190501944();
    *(float *)&dword_1E929EAB0 = *(float *)&v11 + *(float *)&v11;
    *(float *)algn_1E929EAB4 = v12 + v12;
    *(float *)&dword_1E929EAB8 = v13 + v13;
    __cxa_guard_release(&qword_1E929EAC0);
  }
  float v8 = (float)(v7 / v3) * *(float *)&dword_1E929EAB8;
  float v9 = (float)(v8 + (float)((float)(v6 / v3) * *(float *)algn_1E929EAB4))
     + (float)((float)(v5 / v3) * *(float *)&dword_1E929EAB0);
  float v10 = 1.0;
  if (v9 <= 1.0)
  {
    float v10 = -1.0;
    if (v9 >= -1.0) {
      float v10 = (float)(v8 + (float)((float)(v6 / v3) * *(float *)algn_1E929EAB4))
    }
          + (float)((float)(v5 / v3) * *(float *)&dword_1E929EAB0);
  }

  return acosf(v10);
}

void sub_19058AE64(_Unwind_Exception *a1)
{
}

uint64_t sub_19058AE7C(uint64_t a1, uint64_t a2)
{
  int v4 = (_OWORD *)(a1 + 24);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0x3F80000000000000;
  sub_1902D9ACC((float32x4_t *)(a1 + 24), (float32x4_t)0);
  *(_OWORD *)(a1 + 40) = xmmword_190608E30;
  sub_1902D9ACC((float32x4_t *)(a1 + 40), (float32x4_t)xmmword_190608E30);
  if (a2 != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
    *int v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  return a1;
}

void sub_19058AF28(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (unint64_t)(*(double *)(a2 + 40) * 1000000.0);
  int v5 = *(_DWORD *)a2;
  unsigned int v6 = (*(_DWORD *)a2 < 0xCu) & (6u >> *(_DWORD *)a2);
  unsigned int v7 = *(_DWORD *)a1;
  BOOL v8 = 1;
  if (*(_DWORD *)a1 > 0xBu)
  {
LABEL_4:
    if ((v6 & v8) == 1 && !*(void *)(a1 + 16))
    {
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = v4;
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
      }
      double v11 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_INFO))
      {
        unint64_t v12 = *(void *)(a1 + 16);
        *(_DWORD *)long long buf = 134349056;
        unint64_t v30 = v12;
        _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_INFO, "[RelDM] Activity: detected moving to static. staticStartTime, %{public}llu", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 == -1) {
          goto LABEL_81;
        }
        goto LABEL_83;
      }
    }
    else if (v7 <= 0xB {
           && ((1 << v7) & 0xC06) != 0
    }
           && (v7 & 0xFFFFFFFE) != 10
           && ((*(_DWORD *)a2 > 0xBu) | (0xFF8u >> *(_DWORD *)a2) & 1) != 0)
    {
      *(void *)(a1 + 8) = v4;
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
      }
      float v9 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_INFO))
      {
        unint64_t v10 = *(void *)(a1 + 8);
        *(_DWORD *)long long buf = 134349056;
        unint64_t v30 = v10;
        _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_INFO, "[RelDM] Activity: detected static to moving. movingStartTime, %{public}llu", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 == -1)
        {
LABEL_81:
          __int16 v28 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "void CMRelDM::ActivityState::feedActivity(const CLMotionActivity &)", "CoreLocation: %s\n", v28);
          if (v28 != (char *)buf) {
            free(v28);
          }
          goto LABEL_25;
        }
LABEL_83:
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
        goto LABEL_81;
      }
    }
LABEL_25:
    unsigned int v13 = *(_DWORD *)a1;
    if (*(_DWORD *)a2 == 1)
    {
      if (v13 == 1) {
        goto LABEL_62;
      }
      *(void *)(a1 + 32) = -1;
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
      }
      __int16 v14 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134349056;
        unint64_t v30 = v4;
        _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_INFO, "[RelDM] Activity: entered frozen state, %{public}llu", buf, 0xCu);
      }
      if (!sub_1902D8400(115, 2)) {
        goto LABEL_40;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 == -1) {
        goto LABEL_73;
      }
    }
    else
    {
      if (v13 != 1)
      {
LABEL_41:
        if (v13 == 41 || v13 == 4)
        {
          if (*(_DWORD *)a2 != 4 && *(_DWORD *)a2 != 41)
          {
            *(void *)(a1 + 24) = v4;
            if (qword_1E929D8D8 != -1) {
              dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
            }
            __int16 v16 = qword_1E929D8E0;
            if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 134349056;
              unint64_t v30 = v4;
              _os_log_impl(&dword_1902AF000, v16, OS_LOG_TYPE_INFO, "[RelDM] Activity: walking stopped, %{public}llu", buf, 0xCu);
            }
            if (sub_1902D8400(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929D8D8 != -1) {
                dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
              }
LABEL_78:
              int v27 = (char *)_os_log_send_and_compose_impl();
              sub_1902D398C("Generic", 1, 0, 2, "void CMRelDM::ActivityState::feedActivity(const CLMotionActivity &)", "CoreLocation: %s\n", v27);
              if (v27 != (char *)buf) {
                free(v27);
              }
              goto LABEL_62;
            }
          }
        }
        else if (*(_DWORD *)a2 == 41 || *(_DWORD *)a2 == 4)
        {
          *(void *)(a1 + 24) = -1;
        }
        goto LABEL_62;
      }
      *(void *)(a1 + 32) = v4;
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
      }
      int v15 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134349056;
        unint64_t v30 = v4;
        _os_log_impl(&dword_1902AF000, v15, OS_LOG_TYPE_INFO, "[RelDM] Activity: exited frozen state, %{public}llu", buf, 0xCu);
      }
      if (!sub_1902D8400(115, 2))
      {
LABEL_40:
        unsigned int v13 = *(_DWORD *)a1;
        goto LABEL_41;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 == -1)
      {
LABEL_73:
        __int16 v26 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CMRelDM::ActivityState::feedActivity(const CLMotionActivity &)", "CoreLocation: %s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
        goto LABEL_40;
      }
    }
    dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
    goto LABEL_73;
  }
  if (((1 << v7) & 0xC06) != 0)
  {
    BOOL v8 = (v7 & 0xFFFFFFFE) == 10;
    goto LABEL_4;
  }
  if (v7) {
    goto LABEL_4;
  }
  if (v6)
  {
    *(void *)(a1 + 16) = v4;
    if (v5 == 1) {
      *(void *)(a1 + 32) = -1;
    }
  }
  else if ((*(_DWORD *)a2 > 0xBu) | (0xFF8u >> *(_DWORD *)a2) & 1)
  {
    *(void *)(a1 + 8) = v4;
  }
  if (qword_1E929D8D8 != -1) {
    dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
  }
  int v17 = qword_1E929D8E0;
  if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v18 = CLMotionActivity::activityTypeToString(*(_DWORD *)a2);
    uint64_t v19 = *(void *)(a2 + 40);
    *(_DWORD *)long long buf = 136446466;
    unint64_t v30 = (unint64_t)v18;
    __int16 v31 = 2050;
    *(void *)__int16 v32 = v19;
    _os_log_impl(&dword_1902AF000, v17, OS_LOG_TYPE_DEFAULT, "[RelDM] Activity: initialize srcMotionState. type %{public}s, timestamp, %{public}f", buf, 0x16u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
    }
    CLMotionActivity::activityTypeToString(*(_DWORD *)a2);
    goto LABEL_78;
  }
LABEL_62:
  *(void *)a1 = *(void *)a2;
  if (qword_1E929D8D8 != -1) {
    dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
  }
  __int16 v20 = qword_1E929D8E0;
  if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_INFO))
  {
    int v21 = CLMotionActivity::activityTypeToString(*(_DWORD *)a1);
    int v22 = *(_DWORD *)(a1 + 4);
    uint64_t v24 = *(void *)(a1 + 8);
    uint64_t v23 = *(void *)(a1 + 16);
    *(_DWORD *)long long buf = 136447234;
    unint64_t v30 = (unint64_t)v21;
    __int16 v31 = 1026;
    *(_DWORD *)__int16 v32 = v22;
    *(_WORD *)&v32[4] = 2050;
    *(void *)&v32[6] = v4;
    __int16 v33 = 2050;
    uint64_t v34 = v23;
    __int16 v35 = 2050;
    uint64_t v36 = v24;
    _os_log_impl(&dword_1902AF000, v20, OS_LOG_TYPE_INFO, "[RelDM] ActivityType, %{public}s, confidence, %{public}d, timestamp, %{public}llu, lastStaticTS, %{public}llu, lastMovingTS, %{public}llu", buf, 0x30u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
    }
    CLMotionActivity::activityTypeToString(*(_DWORD *)a1);
    int v25 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CMRelDM::ActivityState::feedActivity(const CLMotionActivity &)", "CoreLocation: %s\n", v25);
    if (v25 != (char *)buf) {
      free(v25);
    }
  }
}

void sub_19058B97C(int *a1, unint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *a1;
  if (*a1 <= 0xB)
  {
    if (((1 << v4) & 0xC06) != 0)
    {
      if ((v4 & 0xFFFFFFFE) != 0xA) {
        return;
      }
    }
    else if (!v4)
    {
      return;
    }
  }
  unint64_t v5 = *((void *)a1 + 1);
  BOOL v7 = a2 >= v5;
  unint64_t v6 = a2 - v5;
  BOOL v7 = v6 != 0 && v7 && v6 >= 0x30D41;
  if (v7 && *((void *)a1 + 2))
  {
    *((void *)a1 + 2) = 0;
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
    }
    BOOL v8 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *((void *)a1 + 1);
      *(_DWORD *)long long buf = 134349312;
      unint64_t v12 = a2;
      __int16 v13 = 2050;
      uint64_t v14 = v9;
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_DEBUG, "[RelDM] Activity: Reseting static startTime. Curr %{public}llu, lastMoving, %{public}llu", buf, 0x16u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
      }
      unint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CMRelDM::ActivityState::feedWatchdogTimestamp(uint64_t)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

float sub_19058BBA4(uint64_t a1, unint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(void *)(a1 + 16);
  float v3 = 0.0;
  if (v2)
  {
    BOOL v5 = a2 >= v2;
    unint64_t v6 = a2 - v2;
    if (v6 != 0 && v5)
    {
      return (float)v6 * 0.000001;
    }
    else
    {
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
      }
      BOOL v8 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        *(_DWORD *)long long buf = 134349312;
        unint64_t v13 = a2;
        __int16 v14 = 2050;
        uint64_t v15 = v9;
        _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_INFO, "[RelDM] Activity:timestamp error: current %{public}llu, lastStatic, %{public}llu", buf, 0x16u);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
        }
        double v11 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "float CMRelDM::ActivityState::getStaticDuration(uint64_t) const", "CoreLocation: %s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
    }
  }
  return v3;
}

float sub_19058BDA8(uint64_t a1, unint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(void *)(a1 + 8);
  float v3 = 0.0;
  if (v2)
  {
    BOOL v5 = a2 >= v2;
    unint64_t v6 = a2 - v2;
    if (v6 != 0 && v5)
    {
      return (float)v6 * 0.000001;
    }
    else
    {
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
      }
      BOOL v8 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = *(void *)(a1 + 8);
        *(_DWORD *)long long buf = 134349312;
        unint64_t v13 = a2;
        __int16 v14 = 2050;
        uint64_t v15 = v9;
        _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_INFO, "[RelDM] Activity:timestamp error: current %{public}llu, lastMoving, %{public}llu", buf, 0x16u);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
        }
        double v11 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "float CMRelDM::ActivityState::getMovingDuration(uint64_t) const", "CoreLocation: %s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
    }
  }
  return v3;
}

double sub_19058BFAC(uint64_t a1, unint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    if (v2 == -1) {
      return 0.0;
    }
    BOOL v5 = a2 >= v2;
    unint64_t v6 = a2 - v2;
    if (v6 != 0 && v5)
    {
      *(float *)&double result = (float)v6 * 0.000001;
    }
    else
    {
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
      }
      BOOL v8 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = *(void *)(a1 + 24);
        *(_DWORD *)long long buf = 134349312;
        unint64_t v13 = a2;
        __int16 v14 = 2050;
        uint64_t v15 = v9;
        _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_INFO, "[RelDM] Activity:timestamp error: current %{public}llu, lastWalkStop, %{public}llu", buf, 0x16u);
      }
      int v10 = sub_1902D8400(115, 2);
      double result = 0.0;
      if (v10)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
        }
        double v11 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "float CMRelDM::ActivityState::getTimeSinceWalkingStopped(uint64_t) const", "CoreLocation: %s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
        return 0.0;
      }
    }
  }
  else
  {
    LODWORD(result) = 2139095039;
  }
  return result;
}

double sub_19058C1C0(uint64_t a1, unint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    if (v2 == -1) {
      return 0.0;
    }
    BOOL v5 = a2 >= v2;
    unint64_t v6 = a2 - v2;
    if (v6 != 0 && v5)
    {
      *(float *)&double result = (float)v6 * 0.000001;
    }
    else
    {
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
      }
      BOOL v8 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 134349312;
        unint64_t v13 = a2;
        __int16 v14 = 2050;
        uint64_t v15 = v9;
        _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_INFO, "[RelDM] Activity:timestamp error: current %{public}llu, lastFrozenStopTimestamp, %{public}llu", buf, 0x16u);
      }
      int v10 = sub_1902D8400(115, 2);
      double result = 0.0;
      if (v10)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
        }
        double v11 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "float CMRelDM::ActivityState::getTimeSinceLastFrozenState(uint64_t) const", "CoreLocation: %s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
        return 0.0;
      }
    }
  }
  else
  {
    LODWORD(result) = 2139095039;
  }
  return result;
}

unint64_t sub_19058C3D4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  ++*(_DWORD *)a1;
  if (*(double *)(a1 + 8) == 0.0)
  {
    unint64_t v6 = *(unsigned __int16 *)(a1 + 18);
    if (*(_WORD *)(a1 + 18))
    {
      if (v6 > 2)
      {
        memset(__p, 0, 24);
        sub_1903479A4(__p, v6);
        unint64_t v12 = (char *)__p[1];
        bzero(__p[1], 8 * v6);
        unint64_t v13 = &v12[8 * v6];
        __p[1] = v13;
        if (*(_WORD *)(a1 + 18))
        {
          unint64_t v14 = 0;
          do
          {
            uint64_t v15 = (void *)sub_190448EE4((unsigned __int16 *)(a1 + 16), v14);
            uint64_t v16 = __p[0];
            *((void *)__p[0] + v14++) = *v15;
          }
          while (v14 < *(unsigned __int16 *)(a1 + 18));
          unint64_t v13 = (char *)__p[1];
        }
        else
        {
          uint64_t v16 = __p[0];
        }
        memset(buf, 0, 24);
        sub_19052EF7C(buf, v16, (uint64_t)v13, (v13 - (unsigned char *)v16) >> 3);
        std::__sort<std::__less<double,double> &,double *>();
        unint64_t v17 = (unint64_t)((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3) >> 1;
        if (((*(_DWORD *)&buf[8] - *(_DWORD *)buf) & 8) != 0) {
          double v9 = *(double *)(*(void *)buf + 8 * v17);
        }
        else {
          double v9 = (*(double *)(*(void *)buf + 8 * v17 - 8) + *(double *)(*(void *)buf + 8 * v17)) * 0.5;
        }
        *(void *)&uint8_t buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      else
      {
        unint64_t v7 = v6 + *(unsigned __int16 *)(a1 + 16) - 1;
        unint64_t v8 = *(unsigned int *)(a1 + 20);
        if (v7 < v8) {
          unint64_t v8 = 0;
        }
        double v9 = *(double *)(a1 + 16 + 8 * (v7 - v8) + 8);
      }
    }
    else
    {
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
      }
      int v10 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_ERROR, "[RelDM][UnTimesyncedAuxSampleHelper] Buffer is empty.", buf, 2u);
      }
      double v9 = 0.0;
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
        }
        LOWORD(__p[0]) = 0;
        double v11 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "double CMRelDM::UnTimesyncedAuxSampleHelper::getMedianOffset() const", "CoreLocation: %s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
    }
    *(double *)(a1 + 8) = v9;
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
    }
    __int16 v18 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = *(void *)(a1 + 8);
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v19;
      _os_log_impl(&dword_1902AF000, v18, OS_LOG_TYPE_DEFAULT, "[RelDM] Using auxTimeOfArrival. Offset, %f", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
      }
      int v25 = *(void **)(a1 + 8);
      LODWORD(__p[0]) = 134217984;
      *(void **)((char *)__p + 4) = v25;
      __int16 v26 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "uint64_t CMRelDM::UnTimesyncedAuxSampleHelper::constructAuxTimestampFromUntimesyncedAuxSample(uint64_t, uint64_t)", "CoreLocation: %s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
  }
  unint64_t result = (uint64_t)(*(double *)(a1 + 8) * 1000000.0) + a2;
  unint64_t v21 = result - a3;
  if (result > a3)
  {
    ++*(_DWORD *)(a1 + 4);
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
    }
    int v22 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_ERROR))
    {
      int v23 = *(_DWORD *)a1;
      int v24 = *(_DWORD *)(a1 + 4);
      *(_DWORD *)long long buf = 134218496;
      *(double *)&uint8_t buf[4] = (float)((float)v21 * 0.001);
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v23;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v24;
      _os_log_impl(&dword_1902AF000, v22, OS_LOG_TYPE_ERROR, "[RelDM] fake auxTimestamp is ahead of src, diffMS: %f, totalUnsynced: %u, totalOutlier, %u", buf, 0x18u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2700);
      }
      int v27 = *(_DWORD *)a1;
      int v28 = *(_DWORD *)(a1 + 4);
      LODWORD(__p[0]) = 134218496;
      *(double *)((char *)__p + 4) = (float)((float)v21 * 0.001);
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = v27;
      WORD1(__p[2]) = 1024;
      HIDWORD(__p[2]) = v28;
      int v29 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "uint64_t CMRelDM::UnTimesyncedAuxSampleHelper::constructAuxTimestampFromUntimesyncedAuxSample(uint64_t, uint64_t)", "CoreLocation: %s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
    if (*(_DWORD *)a1 >= 0x15u && (float)((float)*(unsigned int *)a1 * 0.15) < (float)*(unsigned int *)(a1 + 4)) {
      sub_1904AC5B0(a1, 0);
    }
    return a3;
  }
  return result;
}

void sub_19058CA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a11) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

os_log_t sub_19058CA44()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "RelativeDeviceMotion");
  qword_1E929D8E0 = (uint64_t)result;
  return result;
}

void sub_19058CBEC(float *a1@<X0>, float *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, float *a5@<X8>)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v67 = a3;
  uint64_t v68 = a4;
  *((void *)a5 + 1) = 0;
  *((void *)a5 + 2) = 0;
  *(void *)a5 = 0;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
  if (v6 >= 0x42)
  {
    if (qword_1EB3BE868 != -1) {
      dispatch_once(&qword_1EB3BE868, &unk_1EDFD2720);
    }
    uint64_t v54 = qword_1EB3BE860;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 68289539;
      int v70 = 0;
      __int16 v71 = 2082;
      float v72 = "";
      __int16 v73 = 2082;
      double v74 = "assert";
      __int16 v75 = 2081;
      float v76 = "n <= 65";
      _os_log_impl(&dword_1902AF000, v54, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE868 != -1) {
        dispatch_once(&qword_1EB3BE868, &unk_1EDFD2720);
      }
    }
    float v55 = qword_1EB3BE860;
    if (os_signpost_enabled((os_log_t)qword_1EB3BE860))
    {
      *(_DWORD *)long long buf = 68289539;
      int v70 = 0;
      __int16 v71 = 2082;
      float v72 = "";
      __int16 v73 = 2082;
      double v74 = "assert";
      __int16 v75 = 2081;
      float v76 = "n <= 65";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v55, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE868 != -1) {
        dispatch_once(&qword_1EB3BE868, &unk_1EDFD2720);
      }
    }
    double v56 = qword_1EB3BE860;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 68289539;
      int v70 = 0;
      __int16 v71 = 2082;
      float v72 = "";
      __int16 v73 = 2082;
      double v74 = "assert";
      __int16 v75 = 2081;
      float v76 = "n <= 65";
      _os_log_impl(&dword_1902AF000, v56, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_120:
    __break(1u);
  }
  float v66 = 0;
  unint64_t v7 = (v6 - 1) * v6;
  if (v7 <= 1) {
    unint64_t v8 = 1;
  }
  else {
    unint64_t v8 = v7;
  }
  if (v8 >> 62) {
    sub_1903479E8();
  }
  int v10 = a1;
  long long __p = (float *)sub_190347D04((uint64_t)&v66, v8);
  float v66 = &__p[v11];
  unint64_t v60 = v8;
  if (a2 == v10)
  {
    BOOL v63 = 0;
  }
  else
  {
    unint64_t v12 = v10 + 6;
    if (v10 + 6 == a2)
    {
      unint64_t v14 = v10;
      unint64_t v12 = v10;
    }
    else
    {
      float v13 = v10[6];
      if (v13 >= *v10) {
        unint64_t v14 = v10;
      }
      else {
        unint64_t v14 = v10 + 6;
      }
      if (v13 < *v10) {
        unint64_t v12 = v10;
      }
      uint64_t v15 = v10 + 12;
      if (v10 + 12 != a2)
      {
        if (v13 >= *v10) {
          float v13 = *v10;
        }
        uint64_t v16 = v10;
        while (1)
        {
          unint64_t v17 = v15;
          __int16 v18 = v15 + 6;
          if (v18 == a2) {
            break;
          }
          float v19 = v17[6];
          float v20 = *v17;
          if (v19 >= *v17)
          {
            if (v20 < v13)
            {
              float v13 = *v17;
              unint64_t v14 = v17;
            }
            if (v19 >= *v12) {
              unint64_t v12 = v16 + 18;
            }
          }
          else
          {
            float v13 = *v14;
            if (v19 < *v14)
            {
              float v13 = v17[6];
              unint64_t v14 = v18;
            }
            if (v20 >= *v12) {
              unint64_t v12 = v17;
            }
          }
          uint64_t v15 = v17 + 12;
          uint64_t v16 = v17;
          if (v17 + 12 == a2) {
            goto LABEL_32;
          }
        }
        if (*v17 >= *v14)
        {
          if (*v17 >= *v12) {
            unint64_t v12 = v17;
          }
        }
        else
        {
          unint64_t v14 = v17;
        }
      }
    }
LABEL_32:
    BOOL v63 = (float)(*v12 - *v14) >= 3.0;
  }
  unint64_t v21 = 0;
  float v61 = v10;
  float v62 = v10 + 6;
  do
  {
    if (BYTE4(v68))
    {
      float v22 = *(float *)sub_19042D844((uint64_t)&v67, v21);
      goto LABEL_36;
    }
    int v23 = __p;
    if (!v63) {
      goto LABEL_65;
    }
    float v65 = __p;
    if (v10 == a2) {
      goto LABEL_86;
    }
    if (v62 != a2)
    {
      int v24 = v62;
      int v25 = v10;
      do
      {
        __int16 v26 = v25;
        int v25 = v24;
        int v27 = v24;
        do
        {
          float v28 = *v26;
          float v29 = *v27;
          if (vabds_f32(*v26, *v27) > 0.25)
          {
            float v30 = sub_190448408((uint64_t)(v26 + 1), v21);
            float v31 = sub_190448408((uint64_t)(v27 + 1), v21);
            uint64_t v32 = v65;
            float v33 = (float)(v30 - v31) / (float)(v28 - v29);
            if (v65 >= v66)
            {
              uint64_t v34 = __p;
              uint64_t v35 = v65 - __p;
              unint64_t v36 = v35 + 1;
              if ((unint64_t)(v35 + 1) >> 62) {
                sub_1903479E8();
              }
              uint64_t v37 = (char *)v66 - (char *)__p;
              if (((char *)v66 - (char *)__p) >> 1 > v36) {
                unint64_t v36 = v37 >> 1;
              }
              if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v38 = v36;
              }
              if (v38)
              {
                float v39 = (char *)sub_190347D04((uint64_t)&v66, v38);
                uint64_t v34 = __p;
                uint64_t v32 = v65;
              }
              else
              {
                float v39 = 0;
              }
              float v40 = (float *)&v39[4 * v35];
              *float v40 = v33;
              int v23 = v40 + 1;
              while (v32 != v34)
              {
                int v41 = *((_DWORD *)v32-- - 1);
                *((_DWORD *)v40-- - 1) = v41;
              }
              long long __p = v40;
              float v66 = (float *)&v39[4 * v38];
              if (v34) {
                operator delete(v34);
              }
            }
            else
            {
              *float v65 = v33;
              int v23 = v65 + 1;
            }
            float v65 = v23;
          }
          v27 += 6;
        }
        while (v27 != a2);
        int v24 = v25 + 6;
      }
      while (v25 + 6 != a2);
      if (v23 == __p)
      {
        int v23 = __p;
        int v10 = v61;
      }
      else
      {
        float v22 = sub_1904CEF08((uint64_t)__p, v23);
        int v10 = v61;
LABEL_36:
        a5[v21] = v22;
        int v23 = __p;
      }
LABEL_65:
      float v65 = v23;
      if (v10 == a2) {
        goto LABEL_86;
      }
    }
    float v42 = v10;
    do
    {
      float v43 = sub_190448408((uint64_t)(v42 + 1), v21) - (float)(a5[v21] * *v42);
      uint64_t v44 = v65;
      if (v65 >= v66)
      {
        uint64_t v46 = __p;
        uint64_t v47 = v65 - __p;
        unint64_t v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 62) {
          sub_1903479E8();
        }
        uint64_t v49 = (char *)v66 - (char *)__p;
        if (((char *)v66 - (char *)__p) >> 1 > v48) {
          unint64_t v48 = v49 >> 1;
        }
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v50 = v48;
        }
        if (v50)
        {
          float v51 = (char *)sub_190347D04((uint64_t)&v66, v50);
          uint64_t v46 = __p;
          uint64_t v44 = v65;
        }
        else
        {
          float v51 = 0;
        }
        float v52 = (float *)&v51[4 * v47];
        float *v52 = v43;
        float v45 = v52 + 1;
        while (v44 != v46)
        {
          int v53 = *((_DWORD *)v44-- - 1);
          *((_DWORD *)v52-- - 1) = v53;
        }
        long long __p = v52;
        float v66 = (float *)&v51[4 * v50];
        if (v46) {
          operator delete(v46);
        }
      }
      else
      {
        *float v65 = v43;
        float v45 = v65 + 1;
      }
      float v65 = v45;
      v42 += 6;
    }
    while (v42 != a2);
    if (v45 != __p) {
      a5[v21 + 3] = sub_1904CEF08((uint64_t)__p, v45);
    }
LABEL_86:
    ++v21;
  }
  while (v21 != 3);
  if (v60 != v66 - __p)
  {
    if (qword_1EB3BE868 != -1) {
      dispatch_once(&qword_1EB3BE868, &unk_1EDFD2720);
    }
    float v57 = qword_1EB3BE860;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 68289539;
      int v70 = 0;
      __int16 v71 = 2082;
      float v72 = "";
      __int16 v73 = 2082;
      double v74 = "assert";
      __int16 v75 = 2081;
      float v76 = "buffer.capacity() == std::max<size_t>(1, n * (n - 1))";
      _os_log_impl(&dword_1902AF000, v57, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE868 != -1) {
        dispatch_once(&qword_1EB3BE868, &unk_1EDFD2720);
      }
    }
    float v58 = qword_1EB3BE860;
    if (os_signpost_enabled((os_log_t)qword_1EB3BE860))
    {
      *(_DWORD *)long long buf = 68289539;
      int v70 = 0;
      __int16 v71 = 2082;
      float v72 = "";
      __int16 v73 = 2082;
      double v74 = "assert";
      __int16 v75 = 2081;
      float v76 = "buffer.capacity() == std::max<size_t>(1, n * (n - 1))";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v58, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE868 != -1) {
        dispatch_once(&qword_1EB3BE868, &unk_1EDFD2720);
      }
    }
    float v59 = qword_1EB3BE860;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 68289539;
      int v70 = 0;
      __int16 v71 = 2082;
      float v72 = "";
      __int16 v73 = 2082;
      double v74 = "assert";
      __int16 v75 = 2081;
      float v76 = "buffer.capacity() == std::max<size_t>(1, n * (n - 1))";
      _os_log_impl(&dword_1902AF000, v59, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    goto LABEL_120;
  }
  if (__p) {
    operator delete(__p);
  }
}

void sub_19058D538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19058D6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FCC980](v19, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_19058D6EC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*a2
    && (CFDictionaryRef Dictionary = (void *)CLConnectionMessage::getDictionary(*a2)) != 0
    && (unsigned int v4 = objc_msgSend_objectForKeyedSubscript_(Dictionary, v3, @"CMErrorMessage")) != 0)
  {
    int v7 = objc_msgSend_intValue(v4, v5, v6);
  }
  else
  {
    int v7 = 103;
  }
  if (qword_1E929D760 != -1) {
    dispatch_once(&qword_1E929D760, &unk_1EDFD3AC0);
  }
  unint64_t v8 = qword_1E929D768;
  if (os_log_type_enabled((os_log_t)qword_1E929D768, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 67240192;
    int v11 = v7;
    _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_FAULT, "CMWorkoutMets, Failed with CMError code %{public}d", buf, 8u);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D760 != -1) {
      dispatch_once(&qword_1E929D760, &unk_1EDFD3AC0);
    }
    double v9 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "-[CMWorkoutMetsInternal init]_block_invoke", "CoreLocation: %s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
}

void sub_19058D8C8(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = getpid();
  uint64_t ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2);
  if (ExecutablePathFromPid)
  {
    BOOL v5 = (void *)ExecutablePathFromPid;
    if (qword_1E929D760 != -1) {
      dispatch_once(&qword_1E929D760, &unk_1EDFD3AC0);
    }
    uint64_t v6 = qword_1E929D768;
    if (os_log_type_enabled((os_log_t)qword_1E929D768, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = objc_msgSend_UTF8String(v5, v7, v8);
      pid_t v10 = getpid();
      uint64_t v11 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 136446722;
      uint64_t v16 = v9;
      __int16 v17 = 1026;
      pid_t v18 = v10;
      __int16 v19 = 2050;
      uint64_t v20 = v11;
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_INFO, "CMWorkoutMets, Client connection interrupt, %{public}s, %{public}d, %{public}p", buf, 0x1Cu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D760 != -1) {
        dispatch_once(&qword_1E929D760, &unk_1EDFD3AC0);
      }
      objc_msgSend_UTF8String(v5, v12, v13);
      getpid();
      unint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMWorkoutMetsInternal init]_block_invoke", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
}

void sub_19058DDB4(uint64_t a1, const char *a2, uint64_t a3)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    pid_t v10 = @"CMWorkoutSessionIdKey";
    v11[0] = v3;
    uint64_t v9 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v11, &v10, 1);
    sub_1904EF0B0("kCLConnectionMessageWorkoutMetsQuery", &v9, &v6);
    BOOL v5 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CLConnectionClient::sendMessage();
    if (v5) {
      sub_1902D8B58(v5);
    }
    if (v7) {
      sub_1902D8B58(v7);
    }
  }
  else
  {
    id v4 = (id)objc_msgSend_copy(*(void **)(a1 + 48), a2, a3);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19058DF78;
    block[3] = &unk_1E568D2D0;
    void block[4] = v4;
    dispatch_async(MEMORY[0x1E4F14428], block);
  }
}

void sub_19058DF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16) {
    sub_1902D8B58(a16);
  }
  if (a18) {
    sub_1902D8B58(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19058DF78(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 107, 0);
  id v4 = *(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16);

  return v4(v2, 0, v3);
}

void sub_19058DFDC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v4 = (id)objc_msgSend_copy(*(void **)(a1 + 32), a2, a3);
  BOOL v5 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  pid_t v10 = (NSSet *)objc_msgSend_setWithObjects_(v5, v9, v6, v7, v8, 0);
  if (*(void *)a2
    && (uint64_t DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v10)) != 0)
  {
    uint64_t v13 = DictionaryOfClasses;
    uint64_t v14 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v12, @"CMErrorMessage");
    uint64_t v16 = objc_msgSend_objectForKeyedSubscript_(v13, v15, @"CMWorkoutMetsQueryResult");
    if (v14)
    {
      __int16 v17 = v23;
      v23[0] = MEMORY[0x1E4F143A8];
      v23[1] = 3221225472;
      v23[2] = sub_19058E3AC;
      v23[3] = &unk_1E568D320;
      v23[4] = v14;
      v23[5] = v4;
    }
    else if (v16)
    {
      __int16 v17 = v22;
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = sub_19058E424;
      v22[3] = &unk_1E568D320;
      v22[4] = v16;
      v22[5] = v4;
    }
    else
    {
      if (qword_1E929D760 != -1) {
        dispatch_once(&qword_1E929D760, &unk_1EDFD3AC0);
      }
      pid_t v18 = qword_1E929D768;
      if (os_log_type_enabled((os_log_t)qword_1E929D768, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1902AF000, v18, OS_LOG_TYPE_FAULT, "Unable to parse kCLConnectionMessageWorkoutMetsQuery message.", buf, 2u);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D760 != -1) {
          dispatch_once(&qword_1E929D760, &unk_1EDFD3AC0);
        }
        __int16 v21 = 0;
        __int16 v19 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "-[CMWorkoutMetsInternal _queryWorkoutMetsWithSessionId:handler:]_block_invoke", "CoreLocation: %s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      __int16 v17 = v20;
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = sub_19058E43C;
      v20[3] = &unk_1E568D2D0;
      v20[4] = v4;
    }
  }
  else
  {
    __int16 v17 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19058E348;
    block[3] = &unk_1E568D2D0;
    void block[4] = v4;
  }
  dispatch_async(MEMORY[0x1E4F14428], v17);
}

uint64_t sub_19058E348(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 103, 0);
  id v4 = *(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16);

  return v4(v2, 0, v3);
}

uint64_t sub_19058E3AC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = objc_msgSend_intValue(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_errorWithDomain_code_userInfo_(v3, v6, @"CMErrorDomain", v5, 0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, uint64_t))(v4 + 16);

  return v8(v4, 0, v7);
}

uint64_t sub_19058E424(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

uint64_t sub_19058E43C(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 103, 0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16);

  return v4(v2, 0, v3);
}

uint64_t sub_19058E5BC(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend__teardown(*(void **)(*(void *)(a1 + 32) + 8), a2, a3);
}

uint64_t sub_19058E710(uint64_t a1, const char *a2)
{
  uint64_t result = objc_msgSend_isAuthorizedForEntitlement_(CMMotionUtils, a2, @"com.apple.locationd.activity");
  qword_1EB3BF620 = result;
  return result;
}

os_log_t sub_19058E748()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Calorimetry");
  qword_1E929D768 = (uint64_t)result;
  return result;
}

uint64_t sub_19058E778(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a1 = 1;
  *(void *)(a1 + 20) = 0;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 28) = 0x1900000000;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0x7FF8000000000000;
  *(unsigned char *)(a1 + 152) = 0;
  *(void *)(a1 + 156) = 0x7FC0000000000000;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  if (qword_1E929D998 != -1) {
    dispatch_once(&qword_1E929D998, &unk_1EDFD2760);
  }
  uint64_t v2 = qword_1E929D9A0;
  if (os_log_type_enabled((os_log_t)qword_1E929D9A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEFAULT, "Constructing CMTNBDoTEstimatorBase.", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D998 != -1) {
      dispatch_once(&qword_1E929D998, &unk_1EDFD2760);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "CMTNBDoTEstimatorBase::CMTNBDoTEstimatorBase()", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return a1;
}

void sub_19058E948(_Unwind_Exception *exception_object)
{
  uint64_t v3 = 0;
  uint64_t v4 = v1 + 176;
  while (1)
  {
    uint64_t v5 = *(void *)(v4 + v3);
    *(void *)(v4 + v3) = 0;
    if (v5) {
      MEMORY[0x192FCC980](v5, 0x1000C40FF89C88ELL);
    }
    v3 -= 8;
    if (v3 == -16) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t sub_19058E98C(uint64_t a1, uint64_t a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 68))
  {
    float v4 = atan2f(*(float *)(a2 + 48), *(float *)(a2 + 44));
    float v5 = (float)(v4 + 1.5708) + floor(((float)(v4 + 1.5708) + 3.14159265) / 6.28318531) * -6.28318531;
    float v32 = v5;
    if (*(_WORD *)(a1 + 30))
    {
      unint64_t v6 = *(unsigned __int16 *)(a1 + 30) + (unint64_t)*(unsigned __int16 *)(a1 + 28) - 1;
      unint64_t v7 = *(unsigned int *)(a1 + 32);
      if (v6 < v7) {
        unint64_t v7 = 0;
      }
      float v8 = *(float *)(a1 + 28 + 4 * (v6 - v7) + 8);
      double v9 = (float)(v5 - v8);
      if (v9 <= 3.14159265)
      {
        if (v9 < -3.14159265) {
          double v9 = v9 + 6.28318531;
        }
      }
      else
      {
        double v9 = v9 + -6.28318531;
      }
      float v10 = v9;
      float v32 = v8 + v10;
    }
    sub_19042D76C(a1, &v32);
    __float2 v11 = __sincosf_stret(v32);
    *(float *)(a1 + 136) = v11.__cosval;
    *(float *)(a1 + 140) = v11.__sinval;
    double v12 = *(double *)(a2 + 72);
    double v13 = *(double *)(a1 + 144);
    if (*(unsigned char *)a1) {
      sub_190430068(a1);
    }
    float v14 = *(float *)(a1 + 8);
    if (v14 < 0.0) {
      float v14 = 0.0;
    }
    float v15 = sqrtf(v14);
    if (v15 <= 2.0944) {
      float v16 = 1.0;
    }
    else {
      float v16 = 2.0944 / v15;
    }
    if (v12 - v13 > 1.75) {
      float v16 = exp((v12 - v13 + -1.75) * -0.5) * v16;
    }
    *(float *)(a1 + 156) = v16;
    if (qword_1E929D998 != -1) {
      dispatch_once(&qword_1E929D998, &unk_1EDFD2760);
    }
    __int16 v17 = qword_1E929D9A0;
    if (os_log_type_enabled((os_log_t)qword_1E929D9A0, OS_LOG_TYPE_DEBUG))
    {
      double v18 = *(double *)(a1 + 144);
      *(_DWORD *)long long buf = 134218240;
      double v44 = v12;
      __int16 v45 = 2048;
      double v46 = v18;
      _os_log_impl(&dword_1902AF000, v17, OS_LOG_TYPE_DEBUG, "[CMTNBDoTEstimatorBase] timestamp, %.4f, timeOfLastStep, %.4f\n", buf, 0x16u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D998 != -1) {
        dispatch_once(&qword_1E929D998, &unk_1EDFD2760);
      }
      double v27 = *(double *)(a1 + 144);
      int v33 = 134218240;
      double v34 = v12;
      __int16 v35 = 2048;
      double v36 = v27;
      float v28 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "CMTNBDoTEstimatorBase::TNBDoT CMTNBDoTEstimatorBase::directionFromTNB(const CMPdrInputs &)", "CoreLocation: %s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    double v19 = *(double *)(a1 + 144);
    float v20 = sub_19043180C((unsigned __int16 *)(a1 + 28), (unsigned int (*)(float, float))sub_190431A18, 0);
    float v21 = sub_19043180C((unsigned __int16 *)(a1 + 28), (unsigned int (*)(float, float))sub_190431A0C, 0);
    if (qword_1E929D998 != -1) {
      dispatch_once(&qword_1E929D998, &unk_1EDFD2760);
    }
    double v22 = v12 - v19;
    int v23 = qword_1E929D9A0;
    if (os_log_type_enabled((os_log_t)qword_1E929D9A0, OS_LOG_TYPE_DEBUG))
    {
      if (*(unsigned char *)a1) {
        sub_190430068(a1);
      }
      float v24 = *(float *)(a1 + 8);
      if (v24 < 0.0) {
        float v24 = 0.0;
      }
      float v25 = *(float *)(a1 + 156);
      *(_DWORD *)long long buf = 134219008;
      double v44 = (float)(sqrtf(v24) * 57.296);
      __int16 v45 = 2048;
      double v46 = (float)(v20 * 57.296);
      __int16 v47 = 2048;
      double v48 = (float)(v21 * 57.296);
      __int16 v49 = 2048;
      double v50 = v22;
      __int16 v51 = 2048;
      double v52 = v25;
      _os_log_impl(&dword_1902AF000, v23, OS_LOG_TYPE_DEBUG, "[CMTNBDoTEstimatorBase] Sway std %f, min, %f, max, %f, timeSinceStep, %f, quality, %.2f\n", buf, 0x34u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D998 != -1) {
        dispatch_once(&qword_1E929D998, &unk_1EDFD2760);
      }
      if (*(unsigned char *)a1) {
        sub_190430068(a1);
      }
      float v29 = *(float *)(a1 + 8);
      if (v29 < 0.0) {
        float v29 = 0.0;
      }
      int v33 = 134219008;
      float v30 = *(float *)(a1 + 156);
      double v34 = (float)(sqrtf(v29) * 57.296);
      __int16 v35 = 2048;
      double v36 = (float)(v20 * 57.296);
      __int16 v37 = 2048;
      double v38 = (float)(v21 * 57.296);
      __int16 v39 = 2048;
      double v40 = v22;
      __int16 v41 = 2048;
      double v42 = v30;
      float v31 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CMTNBDoTEstimatorBase::printDebugInfo(double) const", "CoreLocation: %s\n", v31);
      if (v31 != (char *)buf) {
        free(v31);
      }
    }
  }
  return *(void *)(a1 + 136);
}

double sub_19058EF5C(uint64_t a1, double a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  float v2 = *(float *)(a1 + 160);
  *(unsigned char *)(a1 + 152) = 0;
  double result = v2 * 0.5 + a2;
  *(double *)(a1 + 144) = result;
  return result;
}

void sub_19058F130()
{
}

float sub_19058F234(uint64_t a1, float *a2)
{
  unint64_t v4 = 0;
  float v6 = *a2;
  float v5 = a2[1];
  char v7 = 1;
  char v8 = 1;
  do
  {
    char v9 = v7;
    float v10 = *(float **)(a1 + 8 * v4 + 168);
    float v11 = sub_1905378D0((uint64_t)a2, v4);
    BOOL v12 = sub_19042FABC(v10, v11);
    char v7 = 0;
    v8 &= v12;
    unint64_t v4 = 1;
  }
  while ((v9 & 1) != 0);
  if (v8)
  {
    float v13 = *(float *)(*(void *)(a1 + 168) + 4 * *(void *)(*(void *)(a1 + 168) + 8) + 16);
    float v14 = *(float *)(*(void *)(a1 + 176) + 4 * *(void *)(*(void *)(a1 + 176) + 8) + 16);
  }
  else
  {
    float v13 = v6;
    float v14 = v5;
  }
  return v13 / sqrtf((float)(v14 * v14) + (float)(v13 * v13));
}

unsigned __int16 *sub_19058F2F0(unsigned __int16 *result, float a2, float a3, float a4, double a5)
{
  char v8 = result;
  float v13 = a2;
  float v11 = 0.0;
  float v12 = 0.0;
  *((unsigned char *)result + 200) = 0;
  if (a5 - *(double *)result >= 0.5)
  {
    float v9 = (float)(a3 - *((float *)result + 48))
       + floor(((float)(a3 - *((float *)result + 48)) + 3.14159265) / 6.28318531) * -6.28318531;
    float v10 = (float)(a4 - *((float *)result + 49))
        + floor(((float)(a4 - *((float *)result + 49)) + 3.14159265) / 6.28318531) * -6.28318531;
    float v11 = v10;
    float v12 = v9;
    *((unsigned char *)result + 200) = 1;
    sub_19042D76C((uint64_t)(result + 36), &v11);
    sub_19042D76C((uint64_t)(v8 + 6), &v12);
    double result = sub_19042D76C((uint64_t)(v8 + 66), &v13);
    *((float *)v8 + 48) = a3;
    *((float *)v8 + 49) = a4;
    *(double *)char v8 = a5;
  }
  return result;
}

BOOL sub_19058F3E8(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 200)
    || *(_DWORD *)(a1 + 44) != *(unsigned __int16 *)(a1 + 42)
    || sub_19043180C((unsigned __int16 *)(a1 + 160), (unsigned int (*)(float, float))sub_190431A18, 0) <= 0.0)
  {
    unint64_t v17 = *(unsigned __int16 *)(a1 + 160) + (unint64_t)*(unsigned __int16 *)(a1 + 162) - 1;
    unint64_t v18 = *(unsigned int *)(a1 + 164);
    if (v17 < v18) {
      unint64_t v18 = 0;
    }
    if (*(float *)(a1 + 160 + 4 * (v17 - v18) + 8) == 0.0)
    {
      int v19 = *(_DWORD *)(a1 + 204);
      BOOL v20 = __OFSUB__(v19, 1);
      int v21 = v19 - 1;
      if (v21 < 0 == v20)
      {
        BOOL v12 = 0;
        *(_DWORD *)(a1 + 204) = v21;
        return v12;
      }
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 12)) {
    sub_190430068(a1 + 12);
  }
  float v2 = *(float *)(a1 + 20);
  if (v2 < 0.0) {
    float v2 = 0.0;
  }
  float v3 = sqrtf(v2);
  float v4 = *(float *)(a1 + 24) + floor((*(float *)(a1 + 24) + 3.14159265) / 6.28318531) * -6.28318531;
  if (v4 <= 0.0) {
    float v5 = -v4;
  }
  else {
    float v5 = v4;
  }
  if (v3 <= v5) {
    float v6 = v5;
  }
  else {
    float v6 = v3;
  }
  if (v6 >= 0.2618) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 72)) {
    sub_190430068(a1 + 72);
  }
  float v7 = *(float *)(a1 + 80);
  if (v7 < 0.0) {
    float v7 = 0.0;
  }
  float v8 = *(float *)(a1 + 84) + floor((*(float *)(a1 + 84) + 3.14159265) / 6.28318531) * -6.28318531;
  if (v8 <= 0.0) {
    float v9 = -v8;
  }
  else {
    float v9 = v8;
  }
  if (qword_1E929D998 != -1)
  {
    float v24 = v7;
    dispatch_once(&qword_1E929D998, &unk_1EDFD2760);
    float v7 = v24;
  }
  float v10 = qword_1E929D9A0;
  float v11 = sqrtf(v7);
  if (os_log_type_enabled((os_log_t)qword_1E929D9A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134218240;
    double v29 = (float)(v11 * 57.296);
    __int16 v30 = 2048;
    double v31 = (float)(v9 * 57.296);
    _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_DEFAULT, "[CMTNBDoTEstimatorBase::AnomalySteppingDetect] dotStd, %.2f, dotDeltaSum, %.2f", buf, 0x16u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D998 != -1) {
      dispatch_once(&qword_1E929D998, &unk_1EDFD2760);
    }
    float v25 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "BOOL AnomalySteppingDetect::checkForAnomaly()", "CoreLocation: %s\n", v25);
    if (v25 != (char *)buf) {
      free(v25);
    }
  }
  BOOL v12 = v9 > 1.1345 || v11 > 0.87266;
  int v13 = *(_DWORD *)(a1 + 204);
  if (v12)
  {
    *(_DWORD *)(a1 + 204) = v13 + 1;
    if (qword_1E929D998 != -1) {
      dispatch_once(&qword_1E929D998, &unk_1EDFD2760);
    }
    float v14 = qword_1E929D9A0;
    if (os_log_type_enabled((os_log_t)qword_1E929D9A0, OS_LOG_TYPE_DEBUG))
    {
      int v15 = *(_DWORD *)(a1 + 204);
      *(_DWORD *)long long buf = 134219008;
      double v29 = (float)(v3 * 57.296);
      __int16 v30 = 2048;
      double v31 = (float)(v5 * 57.296);
      __int16 v32 = 2048;
      double v33 = (float)(v11 * 57.296);
      __int16 v34 = 2048;
      double v35 = (float)(v9 * 57.296);
      __int16 v36 = 1024;
      int v37 = v15;
      _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_DEBUG, "[CMTNBDoTEstimatorBase::AnomalySteppingDetect] headingStd, %.2f, headingDelta, %.2f, dotStd, %.2f, dotDelta, %.2f, count, %d", buf, 0x30u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D998 != -1) {
        dispatch_once(&qword_1E929D998, &unk_1EDFD2760);
      }
      uint64_t v26 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "BOOL AnomalySteppingDetect::checkForAnomaly()", "CoreLocation: %s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
    int v16 = *(_DWORD *)(a1 + 204);
    goto LABEL_44;
  }
  BOOL v20 = __OFSUB__(v13, 1);
  int v16 = v13 - 1;
  if (v16 < 0 != v20) {
    return 0;
  }
  *(_DWORD *)(a1 + 204) = v16;
LABEL_44:
  if (v16 >= 4)
  {
    if (qword_1E929D998 != -1) {
      dispatch_once(&qword_1E929D998, &unk_1EDFD2760);
    }
    double v22 = qword_1E929D9A0;
    if (os_log_type_enabled((os_log_t)qword_1E929D9A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v22, OS_LOG_TYPE_DEFAULT, "[CMTNBDoTEstimatorBase::AnomalySteppingDetect] TNB degenerate scenario detected! Switch to heading.", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D998 != -1) {
        dispatch_once(&qword_1E929D998, &unk_1EDFD2760);
      }
      double v27 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "BOOL AnomalySteppingDetect::checkForAnomaly()", "CoreLocation: %s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
    *(unsigned char *)(a1 + 8) = 1;
  }
  return v12;
}

os_log_t sub_19058FAC0()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "MotionContext");
  qword_1E929D9A0 = (uint64_t)result;
  return result;
}

uint64_t sub_1905906B8(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_pauseDeviceMotionStreamingPrivate(*(void **)(a1 + 32), a2, a3);
  float v6 = *(void **)(a1 + 32);

  return objc_msgSend_pauseStatusStreamingPrivate(v6, v4, v5);
}

uint64_t sub_190590744()
{
  if (sub_19046BC40() & 1) != 0 || (sub_19046BCE8() & 1) != 0 || (sub_1902BACB4()) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = objc_msgSend_isMotionActivityEntitled(CMMotionUtils, v0, v1);
  }
  byte_1EB3BF630 = result;
  return result;
}

void sub_190590824(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  float v2 = *(NSObject **)(*(void *)(v1 + 8) + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_19059089C;
  block[3] = &unk_1E568D118;
  void block[4] = v1;
  dispatch_async(v2, block);
}

uint64_t sub_19059089C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_startDeviceMotionUpdatesPrivateToQueue_withHandler_, 0);
}

__n128 sub_190590928(uint64_t a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  long long v1 = *(_OWORD *)(a1 + 32);
  float v2 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 8) + 8);
  block[1] = 3221225472;
  block[2] = sub_1905909B0;
  block[3] = &unk_1E568D398;
  long long v5 = v1;
  uint64_t v6 = *(void *)(a1 + 48);
  dispatch_async(v2, block);
  return result;
}

uint64_t sub_1905909B0(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_startDeviceMotionUpdatesPrivateToQueue_withHandler_, *(void *)(a1 + 40));
}

void sub_190590A38(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  float v2 = *(NSObject **)(*(void *)(v1 + 8) + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_190590AB0;
  block[3] = &unk_1E568D118;
  void block[4] = v1;
  dispatch_sync(v2, block);
}

uint64_t sub_190590AB0(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_stopDeviceMotionUpdatesPrivate(*(void **)(a1 + 32), a2, a3);
}

uint64_t sub_190590B30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_startStatusUpdatesPrivate, a3);
}

uint64_t sub_190590BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_stopStatusUpdatesPrivate, a3);
}

void sub_190590E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_190590E88(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    float v4 = (void *)MEMORY[0x1E4F28DC0];
    long long v5 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v6 = objc_opt_class();
    uint64_t v7 = objc_opt_class();
    uint64_t v8 = objc_opt_class();
    uint64_t v10 = objc_msgSend_setWithObjects_(v5, v9, v6, v7, v8, 0);
    uint64_t v12 = objc_msgSend_unarchivedObjectOfClasses_fromData_error_(v4, v11, v10, a2, 0);
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      Weauint64_t k = objc_loadWeak((id *)(v3 + 32));
      return MEMORY[0x1F4181798](Weak, sel_onDeviceMotionPrivate_, v12);
    }
    else
    {
      objc_opt_class();
      __n128 result = objc_opt_isKindOfClass();
      if (result)
      {
        id v14 = objc_loadWeak((id *)(v3 + 32));
        return MEMORY[0x1F4181798](v14, sel_onStatusEventPrivate_, v12);
      }
    }
  }
  return result;
}

uint64_t sub_1905910CC(uint64_t a1, const char *a2)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  v13[0] = @"logTimestamp";
  uint64_t v3 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, a2, *(void *)(a1 + 32));
  v13[1] = @"timeBetweenDeviceConnectAndFirstValidDeviceMotion";
  v14[0] = v3;
  v14[1] = objc_msgSend_numberWithDouble_(NSNumber, v4, v5, *(double *)(a1 + 40));
  uint64_t v7 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v6, (uint64_t)v14, v13, 2);
  if (qword_1EB3BE878 != -1) {
    dispatch_once(&qword_1EB3BE878, &unk_1EDFC1F00);
  }
  uint64_t v8 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138477827;
    uint64_t v12 = v7;
    _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_DEBUG, "[CMHeadphoneMotionManager] Sending analytics: \n%{private}@", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFC1F00);
    }
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMHeadphoneMotionManager pauseDeviceMotionStreamingPrivate]_block_invoke", "CoreLocation: %s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  return v7;
}

uint64_t sub_190591384(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE878 != -1) {
    dispatch_once(&qword_1EB3BE878, &unk_1EDFC1F00);
  }
  float v2 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138477827;
    uint64_t v7 = v3;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEBUG, "[CMHeadphoneMotionManager] deviceMotion: %{private}@", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFC1F00);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMHeadphoneMotionManager onDeviceMotionPrivate:]_block_invoke", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1905919BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1905919D8(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    float v4 = (void *)MEMORY[0x1E4F28DC0];
    uint64_t v5 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v6 = objc_opt_class();
    uint64_t v7 = objc_opt_class();
    uint64_t v9 = objc_msgSend_setWithObjects_(v5, v8, v6, v7, 0);
    uint64_t v11 = objc_msgSend_unarchivedObjectOfClasses_fromData_error_(v4, v10, v9, a2, 0);
    objc_opt_class();
    __n128 result = objc_opt_isKindOfClass();
    if (result)
    {
      Weauint64_t k = objc_loadWeak((id *)(v3 + 32));
      return MEMORY[0x1F4181798](Weak, sel_onStatusEventPrivate_, v11);
    }
  }
  return result;
}

uint64_t sub_190591E50(uint64_t result)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 42))
  {
    uint64_t v1 = result;
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFC1F00);
    }
    float v2 = off_1EB3BE870;
    if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEFAULT, "[CMHeadphoneMotionManager] Device connected", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE878 != -1) {
        dispatch_once(&qword_1EB3BE878, &unk_1EDFC1F00);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMHeadphoneMotionManager notifyDeviceConnectedEventToClientPrivate]_block_invoke", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(v1 + 32) + 8) + 42) = 1;
    objc_loadWeak((id *)(*(void *)(v1 + 32) + 16));
    __n128 result = objc_opt_respondsToSelector();
    if (result)
    {
      Weauint64_t k = objc_loadWeak((id *)(*(void *)(v1 + 32) + 16));
      return objc_msgSend_headphoneMotionManagerDidConnect_(Weak, v4, *(void *)(v1 + 32));
    }
  }
  return result;
}

uint64_t sub_1905920B0(uint64_t result)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 42))
  {
    uint64_t v1 = result;
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFC1F00);
    }
    float v2 = off_1EB3BE870;
    if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEFAULT, "[CMHeadphoneMotionManager] Device disconnected", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE878 != -1) {
        dispatch_once(&qword_1EB3BE878, &unk_1EDFC1F00);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMHeadphoneMotionManager notifyDeviceDisconnectedEventToClientPrivate]_block_invoke", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(v1 + 32) + 8) + 42) = 0;
    objc_loadWeak((id *)(*(void *)(v1 + 32) + 16));
    __n128 result = objc_opt_respondsToSelector();
    if (result)
    {
      Weauint64_t k = objc_loadWeak((id *)(*(void *)(v1 + 32) + 16));
      return objc_msgSend_headphoneMotionManagerDidDisconnect_(Weak, v4, *(void *)(v1 + 32));
    }
  }
  return result;
}

uint64_t sub_1905922AC()
{
  return sub_1902BAD40();
}

uint64_t sub_190592370(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
}

void *sub_190592398(void *a1)
{
  *a1 = &unk_1EDFCA2B0;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveEveryObserver(LocalCenter, a1);
  if (*((char *)a1 + 151) < 0) {
    operator delete((void *)a1[16]);
  }
  if (*((char *)a1 + 127) < 0) {
    operator delete((void *)a1[13]);
  }
  if (*((char *)a1 + 103) < 0) {
    operator delete((void *)a1[10]);
  }
  if (*((char *)a1 + 79) < 0) {
    operator delete((void *)a1[7]);
  }
  sub_1904674AC((uint64_t)(a1 + 5));
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    sub_1902D8B58(v3);
  }
  return a1;
}

uint64_t sub_190592444()
{
  uint64_t v0 = objc_opt_new();
  qword_1EB3BF640 = v0;

  return MEMORY[0x1F4181798](v0, sel_setDateFormat_, @"yyyy-MM-dd_HH-mm-ss");
}

void sub_190592484(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB3BF650, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB3BF650))
  {
    unk_1EB3BF690 = 0;
    xmmword_1EB3BF680 = 0uLL;
    __cxa_atexit(MEMORY[0x1E4FBA210], &xmmword_1EB3BF680, &dword_1902AF000);
    __cxa_guard_release(&qword_1EB3BF650);
  }
  if (qword_1EB3BF658 != -1) {
    dispatch_once(&qword_1EB3BF658, &unk_1EDFD3D60);
  }
  if (byte_1EB3BF697 < 0)
  {
    long long v2 = xmmword_1EB3BF680;
    sub_190347AFC((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1EB3BF680;
    *(void *)(a1 + 16) = unk_1EB3BF690;
  }
}

void sub_190592574()
{
}

void sub_190592588(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB3BF660, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB3BF660))
  {
    unk_1EB3BF6A8 = 0;
    xmmword_1EB3BF698 = 0uLL;
    __cxa_atexit(MEMORY[0x1E4FBA210], &xmmword_1EB3BF698, &dword_1902AF000);
    __cxa_guard_release(&qword_1EB3BF660);
  }
  if (qword_1EB3BF668 != -1) {
    dispatch_once(&qword_1EB3BF668, &unk_1EDFD2EC0);
  }
  if (byte_1EB3BF6AF < 0)
  {
    long long v2 = xmmword_1EB3BF698;
    sub_190347AFC((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1EB3BF698;
    *(void *)(a1 + 16) = unk_1EB3BF6A8;
  }
}

void sub_190592678()
{
  uint64_t v0 = NSString;
  sub_1902C3F54(v11, "mobile");
  sub_1902B90E0((uint64_t)v11, __p);
  if (v14 >= 0) {
    uint64_t v2 = objc_msgSend_stringWithUTF8String_(v0, v1, (uint64_t)__p);
  }
  else {
    uint64_t v2 = objc_msgSend_stringWithUTF8String_(v0, v1, (uint64_t)__p[0]);
  }
  float v4 = (void *)v2;
  uint64_t v5 = objc_msgSend_componentsJoinedByString_(&unk_1EE001950, v3, @"/");
  uint64_t v7 = objc_msgSend_stringByAppendingPathComponent_(v4, v6, v5);
  uint64_t v10 = objc_msgSend_UTF8String(v7, v8, v9);
  MEMORY[0x192FCC770](&xmmword_1EB3BF698, v10);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
}

void sub_190592734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_190592768(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB3BF670, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB3BF670))
  {
    unk_1EB3BF6C0 = 0;
    xmmword_1EB3BF6B0 = 0uLL;
    __cxa_atexit(MEMORY[0x1E4FBA210], &xmmword_1EB3BF6B0, &dword_1902AF000);
    __cxa_guard_release(&qword_1EB3BF670);
  }
  if (qword_1EB3BF678 != -1) {
    dispatch_once(&qword_1EB3BF678, &unk_1EDFD3440);
  }
  if (byte_1EB3BF6C7 < 0)
  {
    long long v2 = xmmword_1EB3BF6B0;
    sub_190347AFC((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1EB3BF6B0;
    *(void *)(a1 + 16) = unk_1EB3BF6C0;
  }
}

void sub_190592858()
{
  uint64_t v0 = NSString;
  sub_1902C3F54(v11, "mobile");
  sub_1902B90E0((uint64_t)v11, __p);
  if (v14 >= 0) {
    uint64_t v2 = objc_msgSend_stringWithUTF8String_(v0, v1, (uint64_t)__p);
  }
  else {
    uint64_t v2 = objc_msgSend_stringWithUTF8String_(v0, v1, (uint64_t)__p[0]);
  }
  float v4 = (void *)v2;
  uint64_t v5 = objc_msgSend_componentsJoinedByString_(&unk_1EE001968, v3, @"/");
  uint64_t v7 = objc_msgSend_stringByAppendingPathComponent_(v4, v6, v5);
  uint64_t v10 = objc_msgSend_UTF8String(v7, v8, v9);
  MEMORY[0x192FCC770](&xmmword_1EB3BF6B0, v10);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
}

void sub_190592914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_190592948(const void **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, std::string *a5@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v10 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v10 = (size_t)a1[1];
  }
  uint64_t v11 = &v35;
  sub_190395000((uint64_t)&v35, v10 + 1);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v11 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  if (v10)
  {
    if (*((char *)a1 + 23) >= 0) {
      char v12 = a1;
    }
    else {
      char v12 = *a1;
    }
    memmove(v11, v12, v10);
  }
  *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v10) = 47;
  int v13 = *(char *)(a2 + 23);
  if (v13 >= 0) {
    char v14 = (const std::string::value_type *)a2;
  }
  else {
    char v14 = *(const std::string::value_type **)a2;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a2 + 8);
  }
  int v16 = std::string::append(&v35, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  unint64_t v18 = std::string::append(&v36, "_");
  long long v20 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v20;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (qword_1EB3BF648 != -1) {
    dispatch_once(&qword_1EB3BF648, &unk_1EDFD27A0);
  }
  int v21 = objc_msgSend_stringFromDate_((void *)qword_1EB3BF640, v19, a4);
  float v24 = (char *)objc_msgSend_UTF8String(v21, v22, v23);
  sub_1902C3F54(__p, v24);
  if ((v34 & 0x80u) == 0) {
    float v25 = __p;
  }
  else {
    float v25 = (void **)__p[0];
  }
  if ((v34 & 0x80u) == 0) {
    std::string::size_type v26 = v34;
  }
  else {
    std::string::size_type v26 = (std::string::size_type)__p[1];
  }
  double v27 = std::string::append(&v37, (const std::string::value_type *)v25, v26);
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  int v29 = *(char *)(a3 + 23);
  if (v29 >= 0) {
    __int16 v30 = (const std::string::value_type *)a3;
  }
  else {
    __int16 v30 = *(const std::string::value_type **)a3;
  }
  if (v29 >= 0) {
    std::string::size_type v31 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v31 = *(void *)(a3 + 8);
  }
  __int16 v32 = std::string::append(&v38, v30, v31);
  *a5 = *v32;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if ((char)v34 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
}

void sub_190592B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 73) < 0) {
    operator delete(*(void **)(v33 - 96));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_190592BE0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  sub_190592484((uint64_t)v9);
  if (v10 >= 0) {
    uint64_t v8 = (char *)v9;
  }
  else {
    uint64_t v8 = (char *)v9[0];
  }
  sub_1902C3F54(__p, v8);
  sub_190592948((const void **)__p, a2, a1 + 104, a3, a4);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_190592C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_190592CB4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_190592768((uint64_t)v8);
  if (v9 >= 0) {
    float v4 = (char *)v8;
  }
  else {
    float v4 = (char *)v8[0];
  }
  sub_1902C3F54(__p, v4);
  uint64_t v7 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], v5, v6);
  sub_190592948((const void **)__p, a1 + 80, a1 + 104, v7, a2);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
}

void sub_190592D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190592D84(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_date(MEMORY[0x1E4F1C9C8], a2, a3);
}

uint64_t sub_190592D90(uint64_t a1, char **a2, char *a3)
{
  uint64_t v3 = (char *)*((unsigned __int8 *)a2 + 23);
  if ((char)v3 >= 0) {
    float v4 = (char *)a2;
  }
  else {
    float v4 = *a2;
  }
  int v5 = a3[23];
  if (v5 >= 0) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = *(char **)a3;
  }
  if (v5 >= 0) {
    int64_t v7 = a3[23];
  }
  else {
    int64_t v7 = *((void *)a3 + 1);
  }
  if (!v7) {
    return 1;
  }
  if ((char)v3 < 0) {
    uint64_t v3 = a2[1];
  }
  uint64_t v8 = &v3[(void)v4];
  if ((uint64_t)v3 >= v7)
  {
    int v12 = *v6;
    int v13 = v4;
    do
    {
      char v14 = &v3[-v7];
      if (v14 == (char *)-1) {
        break;
      }
      std::string::size_type v15 = (char *)memchr(v13, v12, (size_t)(v14 + 1));
      if (!v15) {
        break;
      }
      char v9 = v15;
      if (!memcmp(v15, v6, v7)) {
        return v9 != v8 && v9 == v4;
      }
      int v13 = v9 + 1;
      uint64_t v3 = (char *)(v8 - (v9 + 1));
    }
    while ((uint64_t)v3 >= v7);
  }
  char v9 = v8;
  return v9 != v8 && v9 == v4;
}

unint64_t sub_190592E68(uint64_t a1, void **a2, char *a3)
{
  unint64_t v3 = *((unsigned __int8 *)a2 + 23);
  char v4 = a3[23];
  if (v4 >= 0) {
    int64_t v5 = a3[23];
  }
  else {
    int64_t v5 = *((void *)a3 + 1);
  }
  if (v4 >= 0) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = *(char **)a3;
  }
  if ((v3 & 0x80u) == 0)
  {
    int64_t v7 = (char *)a2;
  }
  else
  {
    unint64_t v3 = (unint64_t)a2[1];
    int64_t v7 = (char *)*a2;
  }
  unint64_t result = v3 == v5;
  if (v3 < result) {
    return 1;
  }
  if (v5)
  {
    char v9 = &v7[result];
    char v10 = &v7[v3];
    int64_t v11 = &v7[v3] - v9;
    if (v11 >= v5)
    {
      int v14 = *v6;
      do
      {
        int64_t v15 = v11 - v5;
        if (v15 == -1) {
          break;
        }
        int v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16) {
          break;
        }
        int v12 = v16;
        if (!memcmp(v16, v6, v5)) {
          return v12 != v7 || v12 == v10;
        }
        char v9 = v12 + 1;
        int64_t v11 = v10 - (v12 + 1);
      }
      while (v11 >= v5);
    }
    int v12 = v10;
    return v12 != v7 || v12 == v10;
  }
  return result;
}

void sub_190592F48(uint64_t a1, uint64_t a2, char a3, unint64_t a4, float a5, float a6)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  *(_WORD *)(a1 + 12) = 0;
  unint64_t v7 = *(void *)(a1 + 24);
  if (a4 >= v7) {
    double v8 = (double)(a4 - v7) * 0.000001;
  }
  else {
    double v8 = 0.0;
  }
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)(a1 + 1)) {
      double v9 = *(float *)(a1 + 4);
    }
    else {
      double v9 = 1.5;
    }
    BOOL v11 = v9 >= v8 || *(_DWORD *)(a1 + 16) != 1;
LABEL_24:
    *(unsigned char *)a1 = v11;
    return;
  }
  if (*(_DWORD *)(a1 + 16) == 1) {
    return;
  }
  if (a3)
  {
    if (*(unsigned char *)(a1 + 1))
    {
      if (v8 <= *(float *)(a1 + 8)) {
        return;
      }
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD27C0);
      }
      char v10 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_DEBUG, "[CMRelDMCameraController] Requesting anchor periodically.", buf, 2u);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD27C0);
        }
        std::string::size_type v26 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CMRelDMCameraController::updateCameraRequest(const CMBleedToZero &, BOOL, float, float, uint64_t)", "CoreLocation: %s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      BOOL v11 = 1;
      goto LABEL_24;
    }
    float v15 = *(double *)(a2 + 80);
    double v16 = a5;
    if (v8 <= v16) {
      double v16 = v8;
    }
    if (v16 > 12.0 && v15 < 12.0)
    {
      *(unsigned char *)a1 = 1;
      *(unsigned char *)(a1 + 12) = 1;
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD27C0);
      }
      long long v20 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1902AF000, v20, OS_LOG_TYPE_DEBUG, "[CMRelDMCameraController] Request anchor after long moving duration.", buf, 2u);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 == -1) {
          goto LABEL_32;
        }
        goto LABEL_72;
      }
    }
    else
    {
      if (v8 <= 5.0 || *(unsigned char *)(a2 + 41) == 0 || v15 <= 1.0)
      {
        *(unsigned char *)a1 = 0;
        return;
      }
      double v21 = v15;
      double v22 = a6;
      if (v8 <= a6) {
        double v23 = v8;
      }
      else {
        double v23 = a6;
      }
      BOOL v24 = v8 > 17.5;
      *(unsigned char *)(a1 + 13) = v8 > 17.5;
      if (v23 > v21) {
        BOOL v24 = 1;
      }
      *(unsigned char *)a1 = v24;
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD27C0);
      }
      float v25 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 67109888;
        BOOL v28 = v23 > v21;
        __int16 v29 = 2048;
        double v30 = v22;
        __int16 v31 = 1024;
        BOOL v32 = v8 > 17.5;
        __int16 v33 = 2048;
        double v34 = v21;
        _os_log_impl(&dword_1902AF000, v25, OS_LOG_TYPE_DEBUG, "[CMRelDMCameraController] hasMovementSinceLastAnchorOrRequest, %d, timeSinceLastConsumedCamAnchor, %.3f, reachedExtendedDutyCycleStatic, %d, staticPoseDurationAfterDisturbance, %.3f", buf, 0x22u);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 == -1)
        {
LABEL_32:
          int v14 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "void CMRelDMCameraController::updateCameraRequest(const CMBleedToZero &, BOOL, float, float, uint64_t)", "CoreLocation: %s\n", v14);
          if (v14 != (char *)buf) {
            free(v14);
          }
          return;
        }
LABEL_72:
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD27C0);
        goto LABEL_32;
      }
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD27C0);
    }
    int v13 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v13, OS_LOG_TYPE_DEBUG, "[CMRelDMCameraController] Requesting anchor on initialization.", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 == -1) {
        goto LABEL_32;
      }
      goto LABEL_72;
    }
  }
}

void sub_190593554(uint64_t a1, unint64_t a2, unint64_t a3, int a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(void *)(a1 + 24);
  double v6 = (double)(a3 - v5) * 0.000001;
  if (a3 < v5) {
    double v6 = 0.0;
  }
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)(a1 + 1)) {
      double v7 = *(float *)(a1 + 4);
    }
    else {
      double v7 = 1.5;
    }
    BOOL v9 = v7 >= v6 || *(_DWORD *)(a1 + 16) != 1;
LABEL_22:
    *(unsigned char *)a1 = v9;
    return;
  }
  if (*(_DWORD *)(a1 + 16) == 1) {
    return;
  }
  if (*(unsigned char *)(a1 + 1))
  {
    if (v6 <= *(float *)(a1 + 8)) {
      return;
    }
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD27C0);
    }
    double v8 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_DEBUG, "[CMRelDMCameraController] Requesting anchor periodically during DV.", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD27C0);
      }
      float v15 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CMRelDMCameraController::updateCameraRequestDV(uint64_t, uint64_t, BOOL)", "CoreLocation: %s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    BOOL v9 = 1;
    goto LABEL_22;
  }
  if (!a4)
  {
    BOOL v13 = a3 <= a2 || a2 == 0;
    float v14 = (float)(a3 - a2) * 0.000001;
    if (v13) {
      float v14 = 0.0;
    }
    BOOL v9 = v14 > 1.0;
    if (v6 <= v14) {
      BOOL v9 = 0;
    }
    goto LABEL_22;
  }
  *(unsigned char *)a1 = 0;
  if (qword_1E929D8D8 != -1) {
    dispatch_once(&qword_1E929D8D8, &unk_1EDFD27C0);
  }
  BOOL v11 = qword_1E929D8E0;
  if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_DEBUG, "[CMRelDMCameraController] Not requesting anchor during DV because of walking detection.", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD27C0);
    }
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CMRelDMCameraController::updateCameraRequestDV(uint64_t, uint64_t, BOOL)", "CoreLocation: %s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
}

os_log_t sub_1905938DC()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "RelativeDeviceMotion");
  qword_1E929D8E0 = (uint64_t)result;
  return result;
}

double sub_19059390C()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v2 = v1;
  char v4 = v3;
  uint64_t v5 = v0;
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  __int32 v6 = v3[5].i32[1];
  v7.f32[0] = -v3[5].f32[0];
  *(float32x2_t *)v140[0].f32 = vneg_f32(v3[4]);
  v140[0].i64[1] = __PAIR64__(v6, v7.u32[0]);
  sub_1902D9ACC(v140, v7);
  float v8 = sub_1904CF73C(v140[0].f32, -v4[2].f32[1], -v4[3].f32[0], -v4[3].f32[1]);
  uint64_t v11 = *(unsigned __int16 *)(v5 + 42);
  if (*(_WORD *)(v5 + 42))
  {
    uint64_t v12 = *(unsigned __int16 *)(v5 + 40);
    unint64_t v13 = v11 + v12 - 1;
    unint64_t v14 = *(unsigned int *)(v5 + 44);
    if (v13 >= v14) {
      uint64_t v15 = *(unsigned int *)(v5 + 44);
    }
    else {
      uint64_t v15 = 0;
    }
    double v16 = (float *)(v5 + 40 + 24 * (v13 - v15));
    float v17 = v16[4];
    float v18 = v16[5];
    float v19 = v16[6];
  }
  else
  {
    unint64_t v14 = *(unsigned int *)(v5 + 44);
    uint64_t v12 = *(unsigned __int16 *)(v5 + 40);
    float v17 = 0.0;
    float v18 = 0.0;
    float v19 = 0.0;
  }
  long long v20 = (_WORD *)(v5 + 40);
  float v21 = v8 + v17;
  float v22 = v9 + v18;
  float v23 = v10 + v19;
  unint64_t v24 = v12 + v11;
  if (v24 >= v14) {
    unint64_t v25 = v14;
  }
  else {
    unint64_t v25 = 0;
  }
  std::string::size_type v26 = (float32x2_t *)(v5 + 24 * (v24 - v25));
  v26[6] = *v4;
  v26[7].f32[0] = v21;
  v26[7].f32[1] = v22;
  v26[8].f32[0] = v23;
  unsigned int v27 = *(unsigned __int16 *)(v5 + 42);
  if (v14 <= v27)
  {
    unint64_t v28 = (unsigned __int16)*v20 + 1;
    if (v28 < v14) {
      LOWORD(v14) = 0;
    }
    *long long v20 = v28 - v14;
  }
  else
  {
    LOWORD(v27) = v27 + 1;
    *(_WORD *)(v5 + 42) = v27;
  }
  double v29 = v2[1];
  if (v29 > 0.0 && vabdd_f64(v29, *(double *)(v5 + 8)) > 0.0001)
  {
    double v30 = *v2;
    if (*v2 < v29)
    {
      *(double *)(v5 + 8) = v29;
      v140[0].i64[0] = 0xC800000000;
      if ((_WORD)v27)
      {
        unint64_t v31 = 0;
        float32x2_t v32 = 0;
        float v33 = 0.0;
        do
        {
          double v34 = *(double *)sub_190594400((unsigned __int16 *)(v5 + 40), v31);
          double v35 = *(double *)sub_190594400((unsigned __int16 *)(v5 + 40), v31);
          if (v30 <= v34 && v35 <= v29)
          {
            uint64_t v37 = sub_190594400((unsigned __int16 *)(v5 + 40), v31);
            sub_19042FFA8((unsigned __int16 *)v140, v37 + 8);
            std::string v38 = (float32x2_t *)sub_190594400((unsigned __int16 *)(v5 + 40), v31);
            float32x2_t v32 = vadd_f32(v32, v38[1]);
            float v33 = v33 + v38[2].f32[0];
          }
          ++v31;
        }
        while (v31 < *(unsigned __int16 *)(v5 + 42));
        unsigned int v39 = v140[0].u16[1];
      }
      else
      {
        unsigned int v39 = 0;
        float32x2_t v32 = 0;
        float v33 = 0.0;
      }
      *(_DWORD *)v125 = 0;
      v40.i32[1] = 0;
      memset(v124, 0, sizeof(v124));
      if (v39)
      {
        unint64_t v41 = 0;
        *(float *)v40.i32 = (float)v39;
        float32x2_t v42 = vdiv_f32(v32, (float32x2_t)vdup_lane_s32(v40, 0));
        float v43 = v33 / (float)v39;
        do
        {
          double v44 = (float32x2_t *)sub_19043049C((unsigned __int16 *)v140, v41);
          float v45 = v44[1].f32[0] - v43;
          *(float32x2_t *)float v114 = vsub_f32(*v44, v42);
          *(float *)&v114[8] = v45;
          sub_19044CB9C((uint64_t)v114, (uint64_t)buf);
          for (unint64_t i = 0; i != 9; ++i)
            *((float *)v124 + i) = sub_19044CC24((uint64_t)buf, i) + *((float *)v124 + i);
          ++v41;
        }
        while (v41 < v140[0].u16[1]);
      }
      *(_OWORD *)long long buf = v124[0];
      *(_OWORD *)&uint8_t buf[16] = v124[1];
      *(_DWORD *)v133 = *(_DWORD *)v125;
      sub_19044CE00((uint64_t)buf, (uint64_t)v114);
      v113[0] = v47;
      v113[1] = v48;
      v113[2] = v49;
      v112[0] = (uint64_t)v113;
      v112[1] = (uint64_t)v114;
      sub_19044D420(v112, 0, 1uLL);
      sub_19044D420(v112, 0, 2uLL);
      sub_19044D420(v112, 1uLL, 2uLL);
      double v50 = v118;
      float v51 = *(float *)v119;
      if (qword_1E929D998 != -1) {
        dispatch_once(&qword_1E929D998, &unk_1EDFD27E0);
      }
      double v52 = qword_1E929D9A0;
      if (os_log_type_enabled((os_log_t)qword_1E929D9A0, OS_LOG_TYPE_DEBUG))
      {
        float32x2_t v53 = *v4;
        *(_DWORD *)long long buf = 134219520;
        *(float32x2_t *)&uint8_t buf[4] = v53;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(double *)&buf[14] = v30;
        *(_WORD *)&unsigned char buf[22] = 2048;
        *(double *)&buf[24] = v29;
        *(_WORD *)v133 = 2048;
        *(void *)&v133[2] = v140[0].u16[1];
        __int16 v134 = 2048;
        double v135 = *(float *)&v50;
        __int16 v136 = 2048;
        double v137 = *((float *)&v50 + 1);
        __int16 v138 = 2048;
        double v139 = v51;
        _os_log_impl(&dword_1902AF000, v52, OS_LOG_TYPE_DEBUG, "[CMPdr] pdrdir,time,%f,startImpulse,%f,endImpulse,%f,velBufferSize,%zu,planeNormal,%f,%f,%f\n", buf, 0x48u);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D998 != -1) {
          dispatch_once(&qword_1E929D998, &unk_1EDFD27E0);
        }
        float32x2_t v108 = *v4;
        LODWORD(v124[0]) = 134219520;
        *(float32x2_t *)((char *)v124 + 4) = v108;
        WORD6(v124[0]) = 2048;
        *(double *)((char *)v124 + 14) = v30;
        WORD3(v124[1]) = 2048;
        *((double *)&v124[1] + 1) = v29;
        *(_WORD *)v125 = 2048;
        *(void *)&v125[2] = v140[0].u16[1];
        __int16 v126 = 2048;
        double v127 = *(float *)&v50;
        __int16 v128 = 2048;
        double v129 = *((float *)&v50 + 1);
        __int16 v130 = 2048;
        double v131 = v51;
        v109 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "Pdr::PdrOutput CMPdrDirectionality::feedImuData(const AccessoryActivity::ImuData *const, const CMAccessoryStepDetector::Impulse *const)", "CoreLocation: %s\n", v109);
        if (v109 != buf) {
          free(v109);
        }
      }
      *(void *)&v124[0] = 0x3200000000;
      if (v140[0].i16[1])
      {
        int v54 = 0;
        unint64_t v55 = 0;
        unint64_t v56 = 0;
        do
        {
          float v57 = *(float *)sub_19043049C((unsigned __int16 *)v140, v56);
          float v58 = *(float *)(sub_19043049C((unsigned __int16 *)v140, v56) + 4);
          double v59 = (float)((float)((float)(*(float *)&v50 * v58) + (float)(v57 * *((float *)&v50 + 1)))
                      + (float)(*(float *)(sub_19043049C((unsigned __int16 *)v140, v56) + 8) * 0.0));
          unint64_t v60 = v55 + (unsigned __int16)v54;
          if (v60 >= 0x32) {
            uint64_t v61 = 0x7FFFFFFFFFFFFFE7;
          }
          else {
            uint64_t v61 = 0;
          }
          *((double *)&v124[v61] + v60 + 1) = v59;
          if (v55 > 0x31)
          {
            if ((unsigned __int16)v54 >= 0x31u) {
              int v62 = -50;
            }
            else {
              int v62 = 0;
            }
            int v63 = v54 + v62;
            int v54 = v63 + 1;
            LOWORD(v124[0]) = v63 + 1;
          }
          else
          {
            WORD1(v124[0]) = ++v55;
          }
          ++v56;
        }
        while (v56 < v140[0].u16[1]);
      }
      double v64 = sub_190594600((unsigned __int16 *)v124, (unsigned int (*)(double, double))sub_190594804);
      *(double *)v65.i64 = sub_190594600((unsigned __int16 *)v124, (unsigned int (*)(double, double))sub_190594810);
      if (WORD1(v124[0]))
      {
        unint64_t v67 = 0;
        double v68 = (v64 + *(double *)v65.i64) * 0.5;
        do
        {
          double v69 = *(double *)sub_190448EE4((unsigned __int16 *)v124, v67);
          *(double *)sub_190448EE4((unsigned __int16 *)v124, v67++) = v69 - v68;
        }
        while (v67 < WORD1(v124[0]));
        uint64_t v70 = WORD1(v124[0]) - 1;
      }
      else
      {
        uint64_t v70 = -1;
      }
      double v71 = *((double *)v124 + LOWORD(v124[0]) + 1);
      unint64_t v72 = v70 + LOWORD(v124[0]);
      uint64_t v73 = DWORD1(v124[0]);
      if (v72 < DWORD1(v124[0])) {
        uint64_t v73 = 0;
      }
      if (((*((void *)v124 + v72 - v73 + 1) ^ *((void *)v124 + LOWORD(v124[0]) + 1)) & 0x8000000000000000) != 0)
      {
        double v74 = sub_190594600((unsigned __int16 *)v124, (unsigned int (*)(double, double))sub_190594804);
        double v75 = *((double *)v124 + LOWORD(v124[0]) + 1);
        double v76 = sub_190594600((unsigned __int16 *)v124, (unsigned int (*)(double, double))sub_190594810);
        double v77 = vabdd_f64(v71, v74);
        double v78 = vabdd_f64(v75, v76);
        if (v78 >= v77) {
          double v79 = v77;
        }
        else {
          double v79 = v78;
        }
        unint64_t v80 = LOWORD(v124[0]) + (unint64_t)WORD1(v124[0]) - 1;
        uint64_t v81 = DWORD1(v124[0]);
        if (v80 < DWORD1(v124[0])) {
          uint64_t v81 = 0;
        }
        double v82 = *((double *)v124 + v80 - v81 + 1);
        double v83 = sub_190594600((unsigned __int16 *)v124, (unsigned int (*)(double, double))sub_190594804);
        unint64_t v84 = LOWORD(v124[0]) + (unint64_t)WORD1(v124[0]) - 1;
        uint64_t v85 = DWORD1(v124[0]);
        if (v84 < DWORD1(v124[0])) {
          uint64_t v85 = 0;
        }
        double v86 = *((double *)v124 + v84 - v85 + 1);
        *(double *)v65.i64 = sub_190594600((unsigned __int16 *)v124, (unsigned int (*)(double, double))sub_190594810);
        double v87 = vabdd_f64(v82, v83);
        *(double *)v65.i64 = vabdd_f64(v86, *(double *)v65.i64);
        if (*(double *)v65.i64 < v87) {
          double v87 = *(double *)v65.i64;
        }
        if (v79 <= v87)
        {
          unint64_t v90 = LOWORD(v124[0]) + (unint64_t)WORD1(v124[0]) - 1;
          uint64_t v91 = DWORD1(v124[0]);
          if (v90 < DWORD1(v124[0])) {
            uint64_t v91 = 0;
          }
          v65.i64[0] = *((void *)v124 + v90 - v91 + 1);
          if (v79 < v87) {
            *(double *)v65.i64 = *(double *)v65.i64 - *((double *)v124 + LOWORD(v124[0]) + 1);
          }
        }
        else
        {
          unint64_t v88 = LOWORD(v124[0]) + (unint64_t)WORD1(v124[0]) - 1;
          uint64_t v89 = DWORD1(v124[0]);
          if (v88 < DWORD1(v124[0])) {
            uint64_t v89 = 0;
          }
          *(double *)v65.i64 = *((double *)v124 + LOWORD(v124[0]) + 1) - *((double *)v124 + v88 - v89 + 1);
        }
      }
      else
      {
        *(double *)v65.i64 = -v71;
      }
      v66.i64[0] = 1.0;
      v92.f64[0] = NAN;
      v92.f64[1] = NAN;
      v92.f64[0] = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v92), v66, v65).i64;
      double v93 = atan2(v92.f64[0] * *(float *)&v50, v92.f64[0] * *((float *)&v50 + 1));
      double v94 = *(double *)(v5 + 16);
      if (v30 - *(double *)v5 <= 1.0)
      {
        __double2 v95 = __sincos_stret(v93);
        __double2 v96 = __sincos_stret(v94);
        double v97 = atan2((v95.__sinval + v96.__sinval) * 0.5, (v95.__cosval + v96.__cosval) * 0.5);
        double v98 = *(double *)(v5 + 24);
        __double2 v101 = __sincos_stret(v97);
        double cosval = v101.__cosval;
        double sinval = v101.__sinval;
        double v102 = *(double *)(v5 + 32);
        if (qword_1E929D998 != -1)
        {
          dispatch_once(&qword_1E929D998, &unk_1EDFD27E0);
          double cosval = v101.__cosval;
          double sinval = v101.__sinval;
        }
        double v103 = v98 + cosval * 0.73787;
        double v104 = v102 + sinval * 0.73787;
        float v105 = qword_1E929D9A0;
        if (os_log_type_enabled((os_log_t)qword_1E929D9A0, OS_LOG_TYPE_DEBUG))
        {
          float32x2_t v106 = *v4;
          *(_DWORD *)long long buf = 134219264;
          *(float32x2_t *)&uint8_t buf[4] = v106;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(double *)&buf[14] = v93;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(double *)&buf[24] = v97;
          *(_WORD *)v133 = 2048;
          *(double *)&v133[2] = v103;
          __int16 v134 = 2048;
          double v135 = v104;
          __int16 v136 = 2048;
          *(void *)&double v137 = WORD1(v124[0]);
          _os_log_impl(&dword_1902AF000, v105, OS_LOG_TYPE_DEBUG, "[CMPdr] directionResult,time,%f,directionRadians,%f,avgDirectionRadians,%f,x,%f,y,%f,scoreBufSize,%zu\n", buf, 0x3Eu);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D998 != -1) {
            dispatch_once(&qword_1E929D998, &unk_1EDFD27E0);
          }
          float32x2_t v110 = *v4;
          *(_DWORD *)float v114 = 134219264;
          *(float32x2_t *)&v114[4] = v110;
          __int16 v115 = 2048;
          double v116 = v93;
          __int16 v117 = 2048;
          double v118 = v97;
          *(_WORD *)v119 = 2048;
          *(double *)&v119[2] = v103;
          __int16 v120 = 2048;
          double v121 = v104;
          __int16 v122 = 2048;
          uint64_t v123 = WORD1(v124[0]);
          float32x4_t v111 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "Pdr::PdrOutput CMPdrDirectionality::feedImuData(const AccessoryActivity::ImuData *const, const CMAccessoryStepDetector::Impulse *const)", "CoreLocation: %s\n", v111);
          if (v111 != buf) {
            free(v111);
          }
        }
        *(double *)(v5 + 24) = v103;
        *(double *)(v5 + 32) = v104;
      }
      *(double *)(v5 + 16) = v93;
      *(double *)uint64_t v5 = v30;
    }
  }
  return *(double *)(v5 + 16) * 57.2957802;
}

os_log_t sub_1905943D0()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "MotionContext");
  qword_1E929D9A0 = (uint64_t)result;
  return result;
}

uint64_t sub_190594400(unsigned __int16 *a1, unint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3080);
    }
    float32x4_t v7 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)long long buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3080);
      }
      float v9 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "const T &CMQueue<CMPdrDirectionality::AggAccelSample>::operator[](const size_t) const [T = CMPdrDirectionality::AggAccelSample]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[12 * (v4 - v5) + 4];
}

double sub_190594600(unsigned __int16 *a1, unsigned int (*a2)(double, double))
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[1];
  if (a1[1])
  {
    unint64_t v5 = 0;
    double v6 = *(double *)sub_190448EE4(a1, 0);
    do
    {
      float32x4_t v7 = (double *)sub_190448EE4(a1, v5);
      double v8 = *v7;
      if (a2(*v7, v6)) {
        double v6 = v8;
      }
      ++v5;
    }
    while (v3 != v5);
  }
  else
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3080);
    }
    float v10 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_FAULT, "Assertion failed: n > 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 179,.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3080);
      }
      unint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "T CMQueue<double>::getComparison(int (*)(const T, const T), size_t) const [T = double]", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    return *(double *)sub_190448EE4(a1, 0);
  }
  return v6;
}

BOOL sub_190594804(double a1, double a2)
{
  return a2 < a1;
}

BOOL sub_190594810(double a1, double a2)
{
  return a1 < a2;
}

uint64_t sub_1905948EC()
{
  id v0 = objc_alloc(MEMORY[0x1E4F73038]);
  uint64_t result = objc_msgSend_initWithIdentifier_(v0, v1, @"CLGyroCalibrationDatabaseSilo");
  qword_1EB3BF6D0 = result;
  return result;
}

uint64_t sub_190594DBC()
{
  uint64_t result = sub_1902B4534();
  if (result) {
    byte_1EB3BF6C8 = 1;
  }
  return result;
}

uint64_t sub_190595334(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = &unk_1EDFC7778;
  sub_1902C3F54((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = objc_msgSend_silo(a3, v5, v6);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_1905953C4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1905953E0(uint64_t a1, const char *a2, uint64_t a3)
{
  *(void *)a1 = &unk_1EDFC7778;
  objc_msgSend_invalidate(*(void **)(a1 + 48), a2, a3);

  sub_190541C6C(a1 + 80, *(void **)(a1 + 88));
  sub_190541CCC(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void *sub_190595464@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1902C3F54(a2, __str);
}

uint64_t sub_1905954E0(uint64_t result)
{
  *(unsigned char *)(result + 108) = 1;
  return result;
}

uint64_t sub_1905954EC(uint64_t result)
{
  *(unsigned char *)(result + 108) = 1;
  return result;
}

uint64_t sub_1905954FC()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE868 != -1) {
    dispatch_once(&qword_1EB3BE868, &unk_1EDFC3728);
  }
  id v0 = qword_1EB3BE860;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1902AF000, v0, OS_LOG_TYPE_INFO, "Warning: Not implemented.", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE868 != -1) {
      dispatch_once(&qword_1EB3BE868, &unk_1EDFC3728);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "virtual BOOL CLGyroCalibrationDatabase::getGyroStats(CLMotionTypeRotationRate &, CLMotionTypeRotationRate &, CLMotionTypeRotationRate &, BOOL)", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 0;
}

uint64_t sub_190595688()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE868 != -1) {
    dispatch_once(&qword_1EB3BE868, &unk_1EDFC3728);
  }
  id v0 = qword_1EB3BE860;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1902AF000, v0, OS_LOG_TYPE_INFO, "Warning: Not implemented.", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE868 != -1) {
      dispatch_once(&qword_1EB3BE868, &unk_1EDFC3728);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "virtual int CLGyroCalibrationDatabase::getMaxDynamicTemperature()", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 0x80000000;
}

os_log_t sub_190595814()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Notifier");
  qword_1E929D720 = (uint64_t)result;
  return result;
}

void *sub_19059584C(void *a1)
{
  a1[3] = 0;
  *a1 = &unk_1EDFC94A0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = sub_1902D6BD0();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_190595920;
  v4[3] = &unk_1E568CF68;
  v4[4] = a1;
  sub_1902CDE98(v2, (uint64_t)v4);
  return a1;
}

void sub_1905958FC(_Unwind_Exception *a1)
{
  sub_1904C19F8(v2, 0);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    sub_1902D8B58(v4);
  }
  _Unwind_Resume(a1);
}

void sub_190595920(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (void *)sub_1902DF4A8();
  uint64_t v5 = 0x140000FF0CLL;
  char v6 = 0;
  sub_19043791C(v2, (uint64_t)&v5, (uint64_t *)&v7);
  long long v3 = v7;
  long long v7 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  *(_OWORD *)(v1 + 8) = v3;
  if (v4)
  {
    sub_1902D8B58(v4);
    if (*((void *)&v7 + 1)) {
      sub_1902D8B58(*((std::__shared_weak_count **)&v7 + 1));
    }
  }
  sub_1902CD864(*(void *)(v1 + 8), (uint64_t)nullsub_172, v1);
  sub_1905D53A8(*(void *)(v1 + 8), (uint64_t)sub_190595A90, v1);
  sub_1905D4D98(*(void *)(v1 + 8), (uint64_t)sub_190595A90, v1);
  sub_1905D5E88(*(void *)(v1 + 8), (const char *)sub_190595A90, v1);
  operator new();
}

void sub_190595A50(_Unwind_Exception *a1)
{
  if (v2) {
    sub_1902D8B58(v2);
  }
  MEMORY[0x192FCC980](v1, 0xA0C40D4F6A234);
  _Unwind_Resume(a1);
}

uint64_t sub_190595A90(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[3];
  sub_190513638(v2);
  sub_1905139C0(v2);
  long long v3 = *(uint64_t (**)(void *))(*a1 + 16);

  return v3(a1);
}

uint64_t sub_190595AF8(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFC94A0;
  sub_1904C19F8((void **)(a1 + 24), 0);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_1902D8B58(v2);
  }
  return a1;
}

void sub_190595B50(uint64_t a1)
{
  sub_190595AF8(a1);

  JUMPOUT(0x192FCC980);
}

BOOL sub_190595B88(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  sub_1902D6BD0();
  sub_1904DFAD8();
  if ((sub_1902CD6B0() & 0x100) == 0)
  {
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD2820);
    }
    long long v7 = off_1E929D6F8;
    if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      uint64_t v15 = "assert";
      __int16 v16 = 2081;
      float v17 = "isAvailable()";
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLSPUEclipseInterface] Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD2820);
      }
    }
    double v8 = off_1E929D6F8;
    if (os_signpost_enabled((os_log_t)off_1E929D6F8))
    {
      *(_DWORD *)long long buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      uint64_t v15 = "assert";
      __int16 v16 = 2081;
      float v17 = "isAvailable()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLSPUEclipseInterface] Service required", "{\"msg%{public}.0s\":\"[CLSPUEclipseInterface] Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD2820);
      }
    }
    float v9 = off_1E929D6F8;
    if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      uint64_t v15 = "assert";
      __int16 v16 = 2081;
      float v17 = "isAvailable()";
      _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLSPUEclipseInterface] Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
  }
  int v10 = 0;
  *(void *)long long buf = 4;
  return sub_1905145B0(*(void *)(a1 + 24), a2, a3, (uint64_t)&v10, (uint64_t)buf) == 0;
}

os_log_t sub_190595E2C()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Eclipse");
  off_1E929D6F8 = result;
  return result;
}

uint64_t sub_190595E5C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFC9860;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(unsigned char *)(a1 + 40) = 0;
  uint64_t v2 = sub_1902D6BD0();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_190595F38;
  v4[3] = &unk_1E568CF68;
  v4[4] = a1;
  sub_1902CDE98(v2, (uint64_t)v4);
  return a1;
}

void sub_190595F14(_Unwind_Exception *a1)
{
  sub_1904C19F8(v2, 0);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    sub_1902D8B58(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_190595F38(uint64_t a1)
{
  return sub_190595F40(*(void *)(a1 + 32));
}

uint64_t sub_190595F40(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  sub_1902D6BD0();
  sub_1904DFAD8();
  unint64_t v2 = sub_1902CD6B0();
  if ((v2 & 0x200) != 0)
  {
    if (!*(void *)(a1 + 8))
    {
      long long v3 = (void *)sub_1902DF4A8();
      uint64_t v9 = 0x150000FF0CLL;
      char v10 = 0;
      sub_19043791C(v3, (uint64_t)&v9, (uint64_t *)buf);
      long long v4 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
      *(_OWORD *)(a1 + 8) = v4;
      if (v5)
      {
        sub_1902D8B58(v5);
        if (*(void *)&buf[8]) {
          sub_1902D8B58(*(std::__shared_weak_count **)&buf[8]);
        }
      }
      sub_1902CD864(*(void *)(a1 + 8), (uint64_t)sub_190596850, a1);
      sub_1905D53A8(*(void *)(a1 + 8), (uint64_t)sub_1905964F8, a1);
      sub_1905D4D98(*(void *)(a1 + 8), (uint64_t)sub_1905964F8, a1);
      sub_1905D5E88(*(void *)(a1 + 8), (const char *)sub_1905964F8, a1);
      operator new();
    }
  }
  else
  {
    if (qword_1E929D8C8 != -1) {
      dispatch_once(&qword_1E929D8C8, &unk_1EDFD2840);
    }
    char v6 = qword_1E929D8D0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8D0, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_FAULT, "Service unavailable.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8C8 != -1) {
        dispatch_once(&qword_1E929D8C8, &unk_1EDFD2840);
      }
      __int16 v11 = 0;
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "BOOL CLSPUMagicMountInterface::openHidDevice()", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  return (v2 >> 9) & 1;
}

void sub_190596214(_Unwind_Exception *a1)
{
  if (v2) {
    sub_1902D8B58(v2);
  }
  MEMORY[0x192FCC980](v1, 0xA0C40D4F6A234);
  _Unwind_Resume(a1);
}

BOOL sub_190596254(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  sub_1902D6BD0();
  sub_1904DFAD8();
  if ((sub_1902CD6B0() & 0x200) == 0)
  {
    if (qword_1E929D8C8 != -1) {
      dispatch_once(&qword_1E929D8C8, &unk_1EDFD2840);
    }
    long long v7 = qword_1E929D8D0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8D0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      uint64_t v15 = "assert";
      __int16 v16 = 2081;
      float v17 = "isAvailable()";
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLMagicMountInterface] Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1E929D8C8 != -1) {
        dispatch_once(&qword_1E929D8C8, &unk_1EDFD2840);
      }
    }
    double v8 = qword_1E929D8D0;
    if (os_signpost_enabled((os_log_t)qword_1E929D8D0))
    {
      *(_DWORD *)long long buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      uint64_t v15 = "assert";
      __int16 v16 = 2081;
      float v17 = "isAvailable()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLMagicMountInterface] Service required", "{\"msg%{public}.0s\":\"[CLMagicMountInterface] Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1E929D8C8 != -1) {
        dispatch_once(&qword_1E929D8C8, &unk_1EDFD2840);
      }
    }
    uint64_t v9 = qword_1E929D8D0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8D0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      uint64_t v15 = "assert";
      __int16 v16 = 2081;
      float v17 = "isAvailable()";
      _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLMagicMountInterface] Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
  }
  int v10 = 0;
  *(void *)long long buf = 4;
  return sub_1905145B0(*(void *)(a1 + 24), a2, a3, (uint64_t)&v10, (uint64_t)buf) == 0;
}

BOOL sub_1905964F8(uint64_t a1)
{
  unint64_t v2 = *(uint64_t **)(a1 + 24);
  sub_190513638(v2);
  sub_1905139C0(v2);

  return sub_190596540(a1);
}

BOOL sub_190596540(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  sub_1902D6BD0();
  sub_1904DFAD8();
  v9[0] = 2;
  int v2 = *(unsigned __int8 *)(a1 + 40);
  v9[1] = *(unsigned char *)(a1 + 40);
  uint64_t v10 = 0;
  int v11 = 0;
  if (qword_1E929D8C8 != -1) {
    dispatch_once(&qword_1E929D8C8, &unk_1EDFD2840);
  }
  long long v3 = qword_1E929D8D0;
  if (os_log_type_enabled((os_log_t)qword_1E929D8D0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67240192;
    int v15 = v2;
    _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_INFO, "[CLMagicMountInterface] Sending config shouldKeepRunning,%{public}u,", buf, 8u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D8C8 != -1) {
      dispatch_once(&qword_1E929D8C8, &unk_1EDFD2840);
    }
    int v12 = 67240192;
    int v13 = v2;
    long long v7 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "BOOL CLSPUMagicMountInterface::configure()", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  BOOL v4 = sub_190596254(a1, (uint64_t)v9, (char *)0xE);
  if (!v4)
  {
    if (qword_1E929D8C8 != -1) {
      dispatch_once(&qword_1E929D8C8, &unk_1EDFD2840);
    }
    uint64_t v5 = qword_1E929D8D0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8D0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_ERROR, "[CLMagicMountInterface] Configure failed", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8C8 != -1) {
        dispatch_once(&qword_1E929D8C8, &unk_1EDFD2840);
      }
      LOWORD(v12) = 0;
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "BOOL CLSPUMagicMountInterface::configure()", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  return v4;
}

void sub_190596850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    IOHIDEventGetVendorDefinedData();
    if (qword_1E929D8C8 != -1) {
      dispatch_once(&qword_1E929D8C8, &unk_1EDFD2840);
    }
    BOOL v4 = qword_1E929D8D0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8D0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_INFO, "Empty payload, returning", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8C8 != -1) {
        dispatch_once(&qword_1E929D8C8, &unk_1EDFD2840);
      }
      uint64_t v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLSPUMagicMountInterface::onIoHidEvent(IOHIDEventRef)", "CoreLocation: %s\n");
LABEL_19:
      if (v5 != buf) {
        free(v5);
      }
    }
  }
  else
  {
    if (qword_1E929D8C8 != -1) {
      dispatch_once(&qword_1E929D8C8, &unk_1EDFD2840);
    }
    char v6 = qword_1E929D8D0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8D0, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_FAULT, "Event ref invalid", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8C8 != -1) {
        dispatch_once(&qword_1E929D8C8, &unk_1EDFD2840);
      }
      uint64_t v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "void CLSPUMagicMountInterface::onIoHidEvent(IOHIDEventRef)", "CoreLocation: %s\n");
      goto LABEL_19;
    }
  }
}

void sub_190596F14(uint64_t a1, char a2, double a3)
{
  uint64_t v6 = sub_1902D6BD0();
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_190596FA8;
  v7[3] = &unk_1E568FEC8;
  v7[4] = a1;
  char v8 = a2;
  *(double *)&void v7[5] = a3;
  sub_1902CDE98(v6, (uint64_t)v7);
}

void sub_190596FA8(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (sub_190595F40(v2))
  {
    v11[0] = 3;
    v11[1] = *(unsigned char *)(a1 + 48);
    unint64_t v12 = (unint64_t)(*(double *)(a1 + 40) * 1000000.0);
    if (qword_1E929D8C8 != -1) {
      dispatch_once(&qword_1E929D8C8, &unk_1EDFD2840);
    }
    long long v3 = qword_1E929D8D0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8D0, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(unsigned __int8 *)(a1 + 48);
      uint64_t v5 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 67240448;
      int v18 = v4;
      __int16 v19 = 2050;
      uint64_t v20 = v5;
      _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEFAULT, "[CLMagicMountInterface] Simulate,mountStatus,%{public}u,%{public}f", buf, 0x12u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8C8 != -1) {
        dispatch_once(&qword_1E929D8C8, &unk_1EDFD2840);
      }
      int v7 = *(unsigned __int8 *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      int v13 = 67240448;
      int v14 = v7;
      __int16 v15 = 2050;
      uint64_t v16 = v8;
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLSPUMagicMountInterface::simulateMagicMountEvent(uint8_t, CFTimeInterval)_block_invoke", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    if (!sub_190596254(v2, (uint64_t)v11, (char *)0xA))
    {
      if (qword_1E929D8C8 != -1) {
        dispatch_once(&qword_1E929D8C8, &unk_1EDFD2840);
      }
      uint64_t v6 = qword_1E929D8D0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8D0, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_ERROR, "[CLMagicMountInterface] Simulate failed", buf, 2u);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8C8 != -1) {
          dispatch_once(&qword_1E929D8C8, &unk_1EDFD2840);
        }
        LOWORD(v13) = 0;
        uint64_t v10 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "void CLSPUMagicMountInterface::simulateMagicMountEvent(uint8_t, CFTimeInterval)_block_invoke", "CoreLocation: %s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
    }
  }
}

os_log_t sub_1905972F0()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "MagicMount");
  qword_1E929D8D0 = (uint64_t)result;
  return result;
}

uint64_t sub_1905984A0(void *a1, const char *a2, uint64_t a3)
{
  int v4 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v5 = objc_msgSend_count(a1, a2, a3);
  uint64_t v7 = objc_msgSend_arrayWithCapacity_(v4, v6, v5);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_190598AE8;
  _DWORD v10[3] = &unk_1E568FEF0;
  v10[4] = v7;
  objc_msgSend_enumerateObjectsUsingBlock_(a1, v8, (uint64_t)v10);
  return v7;
}

os_log_t sub_190598AB8()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "HealthColdStorage");
  qword_1E929DA00 = (uint64_t)result;
  return result;
}

void sub_190598AE8(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (objc_opt_respondsToSelector())
  {
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v8 = objc_msgSend_sr_dictionaryRepresentation(a2, v4, v5);
    objc_msgSend_addObject_(v6, v7, v8);
  }
  else
  {
    if (qword_1E929D9F8 != -1) {
      dispatch_once(&qword_1E929D9F8, &unk_1EDFD2860);
    }
    uint64_t v9 = qword_1E929DA00;
    if (os_log_type_enabled((os_log_t)qword_1E929DA00, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      unint64_t v12 = a2;
      _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_ERROR, " sr_dictionaryRepresentation not available for %{public}@", buf, 0xCu);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D9F8 != -1) {
        dispatch_once(&qword_1E929D9F8, &unk_1EDFD2860);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "NSArray *convertedSRDictArrayFromContainer(NSArray *)_block_invoke", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

BOOL sub_190598EEC(void *a1, char *a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)objc_msgSend_length(a1, a2, a3) > 1)
  {
    int v11 = *(unsigned __int16 *)objc_msgSend_bytes(a1, v5, v6);
    if (a2)
    {
      *(_WORD *)a2 = v11;
    }
    else
    {
      if (qword_1EB3BE868 != -1) {
        dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
      }
      unint64_t v12 = qword_1EB3BE860;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_ERROR, "Invalid version parameter.", buf, 2u);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE868 != -1) {
          dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
        }
        uint64_t v13 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "BOOL CLGyroCalibrationUtils::isGYTTVersionValid(NSData *, UInt16 *)", "CoreLocation: %s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
    return v11 == 2;
  }
  else
  {
    if (qword_1EB3BE868 != -1) {
      dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
    }
    uint64_t v7 = qword_1EB3BE860;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_FAULT, "GYTT data not long enough to get version properly", buf, 2u);
    }
    int v8 = sub_1902D8400(115, 0);
    BOOL result = 0;
    if (v8)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE868 != -1) {
        dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "BOOL CLGyroCalibrationUtils::isGYTTVersionValid(NSData *, UInt16 *)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
      return 0;
    }
  }
  return result;
}

void sub_1905991EC(float **a1, void *a2)
{
  v150[1] = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t v3 = sub_1902D6BD0();
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = *(std::__shared_weak_count **)(v3 + 32);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v7 = sub_19045E038(v4, "GYTTOverride", &cf);
  if (v5) {
    sub_1902D8B58(v5);
  }
  if (v7)
  {
    CFRetain(cf);
  }
  else
  {
    v149 = @"name";
    v150[0] = @"gyro";
    uint64_t v8 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v6, (uint64_t)v150, &v149, 1);
    v147 = @"IOPropertyMatch";
    uint64_t v148 = v8;
    CFDictionaryRef v10 = (const __CFDictionary *)(id)objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v9, (uint64_t)&v148, &v147, 1);
    io_service_t MatchingService = IOServiceGetMatchingService(*MEMORY[0x1E4F2EEF0], v10);
    io_object_t v12 = MatchingService;
    if (!MatchingService)
    {
      if (qword_1E929D700 != -1) {
        dispatch_once(&qword_1E929D700, &unk_1EDFD3A80);
      }
      float v58 = qword_1E929D6F0;
      if (os_log_type_enabled((os_log_t)qword_1E929D6F0, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1902AF000, v58, OS_LOG_TYPE_FAULT, "Service doesn't exist", buf, 2u);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D700 != -1) {
          dispatch_once(&qword_1E929D700, &unk_1EDFD3A80);
        }
        LOWORD(v119) = 0;
        float v107 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "BOOL CLGyroCalibrationUtils::copyGYTTData(NSData **)", "CoreLocation: %s\n", v107);
        if (v107 != (char *)buf) {
          free(v107);
        }
      }
      goto LABEL_90;
    }
    CFTypeRef cf = IORegistryEntryCreateCFProperty(MatchingService, @"gyro-temp-table", (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    IOObjectRelease(v12);
  }
  if (cf)
  {
    CFTypeID v13 = CFGetTypeID(cf);
    if (v13 == CFDataGetTypeID())
    {
      float v113 = (__CFString *)cf;
      if (qword_1EB3BE868 != -1) {
        dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
      }
      int v14 = qword_1EB3BE860;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412290;
        __int16 v138 = v113;
        _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_DEBUG, "GYTT data %@", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE868 != -1) {
          dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
        }
        int v119 = 138412290;
        __int16 v120 = v113;
        LODWORD(v111) = 12;
        float32x2_t v106 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "BOOL CLGyroCalibrationUtils::copyGYTTData(NSData **)", "CoreLocation: %s\n", v106);
        if (v106 != (char *)buf) {
          free(v106);
        }
      }
      LOWORD(cf) = -1;
      if (sub_190598EEC(v113, (char *)&cf, v15))
      {
        uint64_t v18 = objc_msgSend_bytes(v113, v16, v17);
      }
      else
      {
        sub_1902BAD40();
        if (sub_1902E0068() - 191 >= 2)
        {
          uint64_t v87 = objc_msgSend_stringWithFormat_(NSString, v64, @"GYTT version (%u) does not match expected version (%u)", (unsigned __int16)cf, 2);
          if (a2)
          {
            id v93 = objc_alloc(MEMORY[0x1E4F28C58]);
            uint64_t v133 = *MEMORY[0x1E4F28568];
            uint64_t v134 = v87;
            uint64_t v95 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v94, (uint64_t)&v134, &v133, 1);
            *a2 = (id)objc_msgSend_initWithDomain_code_userInfo_(v93, v96, @"CMErrorDomainFactory", 5, v95);
          }
          if (qword_1EB3BE868 != -1) {
            dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
          }
          double v97 = qword_1EB3BE860;
          if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)long long buf = 138543362;
            __int16 v138 = (__CFString *)v87;
            _os_log_impl(&dword_1902AF000, v97, OS_LOG_TYPE_FAULT, "%{public}@", buf, 0xCu);
          }
          if (!sub_1902D8400(115, 0)) {
            goto LABEL_145;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE868 == -1) {
            goto LABEL_135;
          }
          goto LABEL_177;
        }
        if (qword_1EB3BE868 != -1) {
          dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
        }
        int8x16_t v65 = qword_1EB3BE860;
        if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1902AF000, v65, OS_LOG_TYPE_DEFAULT, "Attempting GYTT recovery!", buf, 2u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE868 != -1) {
            dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
          }
          LOWORD(v119) = 0;
          LODWORD(v111) = 2;
          v109 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "void CLGyroCalibrationUtils::readFactoryGYTTWithError(std::vector<std::pair<float, CLMotionTypeRotationRate>> &, NSError **)", "CoreLocation: %s\n", v109);
          if (v109 != (char *)buf) {
            free(v109);
          }
        }
        double v68 = (__CFString *)objc_msgSend_mutableCopy(v113, v66, v67);

        uint64_t v71 = objc_msgSend_bytes(v68, v69, v70);
        unint64_t v76 = objc_msgSend_length(v68, v72, v73);
        if (v76 >= 4)
        {
          uint64_t v77 = 0;
          do
          {
            *(_DWORD *)long long buf = bswap32(*(_DWORD *)(v71 + v77));
            objc_msgSend_replaceBytesInRange_withBytes_length_(v68, v74, v77, 4, buf, 4);
            v77 += 4;
            v76 -= 4;
          }
          while (v76 > 3);
        }
        if (!sub_190598EEC(v68, (char *)&cf, v75))
        {
          uint64_t v99 = objc_msgSend_stringWithFormat_(NSString, v78, @"After recovery, GYTT version (%u) still does not match expected version (%u)", (unsigned __int16)cf, 2);
          if (a2)
          {
            id v100 = objc_alloc(MEMORY[0x1E4F28C58]);
            uint64_t v131 = *MEMORY[0x1E4F28568];
            uint64_t v132 = v99;
            uint64_t v102 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v101, (uint64_t)&v132, &v131, 1);
            *a2 = (id)objc_msgSend_initWithDomain_code_userInfo_(v100, v103, @"CMErrorDomainFactory", 5, v102);
          }
          if (qword_1EB3BE868 != -1) {
            dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
          }
          double v104 = qword_1EB3BE860;
          if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)long long buf = 138543362;
            __int16 v138 = (__CFString *)v99;
            _os_log_impl(&dword_1902AF000, v104, OS_LOG_TYPE_FAULT, "%{public}@", buf, 0xCu);
          }
          if (sub_1902D8400(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EB3BE868 != -1) {
              dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
            }
            int v119 = 138543362;
            __int16 v120 = (__CFString *)v99;
            float32x2_t v110 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 0, "void CLGyroCalibrationUtils::readFactoryGYTTWithError(std::vector<std::pair<float, CLMotionTypeRotationRate>> &, NSError **)", "CoreLocation: %s\n", v110);
            if (v110 != (char *)buf) {
              free(v110);
            }
          }
          float v113 = v68;
          goto LABEL_145;
        }
        sub_1902BAD40();
        if (sub_1902E0068() - 191 <= 1)
        {
          uint64_t v81 = objc_msgSend_bytes(v68, v79, v80);
          __int16 v82 = *(_WORD *)(v81 + 4);
          *(_WORD *)long long buf = -*(_WORD *)(v81 + 6);
          LOWORD(v119) = v82;
          objc_msgSend_replaceBytesInRange_withBytes_length_(v68, v83, 4, 2, buf, 2);
          objc_msgSend_replaceBytesInRange_withBytes_length_(v68, v84, 6, 2, &v119, 2);
        }
        float v113 = v68;
        uint64_t v18 = objc_msgSend_bytes(v68, v79, v80);
      }
      uint64_t v21 = v18;
      uint64_t v23 = objc_msgSend_length(v113, v19, v20);
      if ((unint64_t)(v23 - 10) > 0xFFFFFFFFFFFFFFF7)
      {
        unint64_t v24 = 0;
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v25 = 2;
        uint64_t v112 = *MEMORY[0x1E4F28568];
        do
        {
          uint64_t v26 = *(void *)(v21 + v25);
          float v27 = (float)(__int16)v26 * 0.0039062;
          if (v27 > 100.0)
          {
            uint64_t v114 = *(void *)(v21 + v25);
            uint64_t v28 = objc_msgSend_stringWithFormat_(NSString, v22, @"Invalid GYTT temperature %f", v27, v111);
            if (a2)
            {
              id v29 = objc_alloc(MEMORY[0x1E4F28C58]);
              uint64_t v129 = v112;
              uint64_t v130 = v28;
              uint64_t v31 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v30, (uint64_t)&v130, &v129, 1);
              *a2 = (id)objc_msgSend_initWithDomain_code_userInfo_(v29, v32, @"CMErrorDomainFactory", 6, v31);
            }
            if (qword_1EB3BE868 != -1) {
              dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
            }
            float v33 = qword_1EB3BE860;
            if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138543362;
              __int16 v138 = (__CFString *)v28;
              _os_log_impl(&dword_1902AF000, v33, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
            }
            int v34 = sub_1902D8400(115, 0);
            uint64_t v26 = v114;
            if (v34)
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EB3BE868 != -1) {
                dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
              }
              int v119 = 138543362;
              __int16 v120 = (__CFString *)v28;
              LODWORD(v111) = 12;
              int v54 = (char *)_os_log_send_and_compose_impl();
              sub_1902D398C("Generic", 1, 0, 0, "void CLGyroCalibrationUtils::readFactoryGYTTWithError(std::vector<std::pair<float, CLMotionTypeRotationRate>> &, NSError **)", "CoreLocation: %s\n", v54);
              if (v54 != (char *)buf) {
                free(v54);
              }
              uint64_t v26 = v114;
            }
          }
          float v35 = (float)SWORD1(v26) * 0.0039062;
          float v36 = (float)SWORD2(v26) * 0.0039062;
          float v37 = (float)SHIWORD(v26) * 0.0039062;
          if (v26)
          {
            if (qword_1EB3BE868 != -1) {
              dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
            }
            std::string v38 = qword_1EB3BE860;
            if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = 134219008;
              __int16 v138 = v24;
              __int16 v139 = 2048;
              double v140 = v27;
              __int16 v141 = 2048;
              double v142 = v35;
              __int16 v143 = 2048;
              double v144 = v36;
              __int16 v145 = 2048;
              double v146 = v37;
              _os_log_impl(&dword_1902AF000, v38, OS_LOG_TYPE_DEBUG, "Reading GYTT point %zu: %f,%f,%f,%f", buf, 0x34u);
            }
            if (sub_1902D8400(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EB3BE868 != -1) {
                dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
              }
              int v119 = 134219008;
              __int16 v120 = v24;
              __int16 v121 = 2048;
              double v122 = v27;
              __int16 v123 = 2048;
              double v124 = v35;
              __int16 v125 = 2048;
              double v126 = v36;
              __int16 v127 = 2048;
              double v128 = v37;
              LODWORD(v111) = 52;
              float32x2_t v53 = (char *)_os_log_send_and_compose_impl();
              sub_1902D398C("Generic", 1, 0, 2, "void CLGyroCalibrationUtils::readFactoryGYTTWithError(std::vector<std::pair<float, CLMotionTypeRotationRate>> &, NSError **)", "CoreLocation: %s\n", v53);
              if (v53 != (char *)buf) {
                free(v53);
              }
            }
            int32x2_t v40 = a1[1];
            unint64_t v39 = (unint64_t)a1[2];
            if ((unint64_t)v40 >= v39)
            {
              double v44 = *a1;
              uint64_t v45 = ((char *)v40 - (char *)*a1) >> 4;
              unint64_t v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 60) {
                sub_1903479E8();
              }
              uint64_t v47 = v39 - (void)v44;
              if (v47 >> 3 > v46) {
                unint64_t v46 = v47 >> 3;
              }
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v48 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v48 = v46;
              }
              if (v48 >> 60) {
                sub_190347AC8();
              }
              int v49 = (char *)operator new(16 * v48);
              double v50 = (float *)&v49[16 * v45];
              float *v50 = v27;
              v50[1] = v35;
              v50[2] = v36;
              v50[3] = v37;
              float v51 = v50;
              if (v40 != v44)
              {
                do
                {
                  *((_OWORD *)v51 - 1) = *((_OWORD *)v40 - 1);
                  v51 -= 4;
                  v40 -= 4;
                }
                while (v40 != v44);
                int32x2_t v40 = v44;
              }
              double v52 = (float *)&v49[16 * v48];
              unint64_t v41 = v50 + 4;
              *a1 = v51;
              a1[1] = v50 + 4;
              a1[2] = v52;
              if (v40) {
                operator delete(v40);
              }
            }
            else
            {
              *int32x2_t v40 = v27;
              v40[1] = v35;
              unint64_t v41 = v40 + 4;
              v40[2] = v36;
              v40[3] = v37;
            }
            a1[1] = v41;
            unint64_t v24 = (__CFString *)((char *)v24 + 1);
          }
          else
          {
            if (qword_1EB3BE868 != -1) {
              dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
            }
            float32x2_t v42 = qword_1EB3BE860;
            if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = 134219008;
              __int16 v138 = v24;
              __int16 v139 = 2048;
              double v140 = v27;
              __int16 v141 = 2048;
              double v142 = v35;
              __int16 v143 = 2048;
              double v144 = v36;
              __int16 v145 = 2048;
              double v146 = v37;
              _os_log_impl(&dword_1902AF000, v42, OS_LOG_TYPE_DEBUG, "Skipping GYTT point %zu: %f,%f,%f,%f", buf, 0x34u);
            }
            if (sub_1902D8400(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EB3BE868 != -1) {
                dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
              }
              int v119 = 134219008;
              __int16 v120 = v24;
              __int16 v121 = 2048;
              double v122 = v27;
              __int16 v123 = 2048;
              double v124 = v35;
              __int16 v125 = 2048;
              double v126 = v36;
              __int16 v127 = 2048;
              double v128 = v37;
              LODWORD(v111) = 52;
              float v43 = (char *)_os_log_send_and_compose_impl();
              sub_1902D398C("Generic", 1, 0, 2, "void CLGyroCalibrationUtils::readFactoryGYTTWithError(std::vector<std::pair<float, CLMotionTypeRotationRate>> &, NSError **)", "CoreLocation: %s\n", v43);
              if (v43 != (char *)buf) {
                free(v43);
              }
            }
          }
          v25 += 8;
        }
        while ((unint64_t)(v23 - v25) > 7);
      }
      if (qword_1EB3BE868 != -1) {
        dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
      }
      uint64_t v85 = qword_1EB3BE860;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134217984;
        __int16 v138 = v24;
        _os_log_impl(&dword_1902AF000, v85, OS_LOG_TYPE_DEBUG, "%zu GYTT points found", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE868 != -1) {
          dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
        }
        int v119 = 134217984;
        __int16 v120 = v24;
        float32x2_t v108 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CLGyroCalibrationUtils::readFactoryGYTTWithError(std::vector<std::pair<float, CLMotionTypeRotationRate>> &, NSError **)", "CoreLocation: %s\n", v108);
        if (v108 != (char *)buf) {
          free(v108);
        }
      }
      if (v24) {
        goto LABEL_145;
      }
      uint64_t v87 = objc_msgSend_stringWithFormat_(NSString, v86, @"Insufficent GYTT points. Found: %zu", 0);
      if (a2)
      {
        id v88 = objc_alloc(MEMORY[0x1E4F28C58]);
        uint64_t v117 = *MEMORY[0x1E4F28568];
        uint64_t v118 = v87;
        uint64_t v90 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v89, (uint64_t)&v118, &v117, 1);
        *a2 = (id)objc_msgSend_initWithDomain_code_userInfo_(v88, v91, @"CMErrorDomainFactory", 7, v90);
      }
      if (qword_1EB3BE868 != -1) {
        dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
      }
      float64x2_t v92 = qword_1EB3BE860;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543362;
        __int16 v138 = (__CFString *)v87;
        _os_log_impl(&dword_1902AF000, v92, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
      }
      if (!sub_1902D8400(115, 0)) {
        goto LABEL_145;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE868 == -1)
      {
LABEL_135:
        int v119 = 138543362;
        __int16 v120 = (__CFString *)v87;
        double v98 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "void CLGyroCalibrationUtils::readFactoryGYTTWithError(std::vector<std::pair<float, CLMotionTypeRotationRate>> &, NSError **)", "CoreLocation: %s\n", v98);
        if (v98 != (char *)buf) {
          free(v98);
        }
LABEL_145:

        return;
      }
LABEL_177:
      dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
      goto LABEL_135;
    }
  }
  if ((sub_1902CD6B0() & 0x80000) != 0)
  {
    if (qword_1EB3BE868 != -1) {
      dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
    }
    float v57 = qword_1EB3BE860;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v57, OS_LOG_TYPE_DEFAULT, "No optional GYTT data found", buf, 2u);
    }
    if (!sub_1902D8400(115, 2)) {
      goto LABEL_83;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE868 != -1) {
      dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
    }
    LOWORD(v119) = 0;
    unint64_t v56 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "BOOL CLGyroCalibrationUtils::copyGYTTData(NSData **)", "CoreLocation: %s\n", v56);
  }
  else
  {
    if (qword_1EB3BE868 != -1) {
      dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
    }
    unint64_t v55 = qword_1EB3BE860;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v55, OS_LOG_TYPE_FAULT, "Cannot get GYTT property", buf, 2u);
    }
    if (!sub_1902D8400(115, 0)) {
      goto LABEL_83;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE868 != -1) {
      dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
    }
    LOWORD(v119) = 0;
    unint64_t v56 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "BOOL CLGyroCalibrationUtils::copyGYTTData(NSData **)", "CoreLocation: %s\n", v56);
  }
  if (v56 != (char *)buf) {
    free(v56);
  }
LABEL_83:
  if (cf) {
    CFRelease(cf);
  }
LABEL_90:
  if (a2)
  {
    id v59 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v135 = *MEMORY[0x1E4F28568];
    __int16 v136 = @"Failed to read GYTT key from gyro service";
    uint64_t v61 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v60, (uint64_t)&v136, &v135, 1);
    *a2 = (id)objc_msgSend_initWithDomain_code_userInfo_(v59, v62, @"CMErrorDomainFactory", 3, v61);
  }
  if (qword_1EB3BE868 != -1) {
    dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
  }
  int v63 = qword_1EB3BE860;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138543362;
    __int16 v138 = @"Failed to read GYTT key from gyro service";
    _os_log_impl(&dword_1902AF000, v63, OS_LOG_TYPE_ERROR, "%{public}@", buf, 0xCu);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE868 != -1) {
      dispatch_once(&qword_1EB3BE868, &unk_1EDFD2880);
    }
    int v119 = 138543362;
    __int16 v120 = @"Failed to read GYTT key from gyro service";
    float v105 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "void CLGyroCalibrationUtils::readFactoryGYTTWithError(std::vector<std::pair<float, CLMotionTypeRotationRate>> &, NSError **)", "CoreLocation: %s\n", v105);
    if (v105 != (char *)buf) {
      free(v105);
    }
  }
}

void sub_19059AA48(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1902D8B58(v1);
  }
  _Unwind_Resume(exception_object);
}

os_log_t sub_19059AA68()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "AOP");
  qword_1E929D6F0 = (uint64_t)result;
  return result;
}

void sub_19059AE8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 736);
  if (v4)
  {
    float v5 = (float)(unint64_t)(*(void *)(a2 + 8) - v4) / 1000000.0;
    *(float *)(a1 + 28) = v5;
    if (v5 >= 0.08)
    {
      if (*(_DWORD *)(a1 + 4))
      {
        *(_DWORD *)(a1 + 4) = 0;
        *(_DWORD *)(a1 + 48) = 0;
        *(_DWORD *)(a1 + 824) = 0;
        *(void *)(a1 + 712) = 0;
        *(_DWORD *)(a1 + 720) = 0;
        *(void *)(a1 + 728) = 0;
        *(void *)(a1 + 752) = 0;
      }
      goto LABEL_9;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 28) = 1025758986;
  }
  sub_19059AFC0(a1, a2);
  if (*(_DWORD *)(a1 + 4) != 2)
  {
LABEL_9:
    sub_19059B2F0(a1, a2);
    goto LABEL_10;
  }
  if (*(_DWORD *)a1)
  {
    *(_DWORD *)a1 = 0;
    *(_DWORD *)(a1 + 36) = 0;
    *(_DWORD *)(a1 + 44) = 0;
  }
LABEL_10:
  uint64_t v6 = *(void *)(a1 + 736);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 8) - v6;
    uint64_t v8 = *(unsigned __int16 *)(a1 + 794);
    unint64_t v9 = *(unsigned int *)(a1 + 796);
    uint64_t v10 = *(unsigned __int16 *)(a1 + 792);
    if (v10 + v8 >= v9) {
      uint64_t v11 = *(unsigned int *)(a1 + 796);
    }
    else {
      uint64_t v11 = 0;
    }
    *(void *)(a1 + 792 + 8 * (v10 + v8 - v11) + 8) = v7;
    if (v9 <= v8)
    {
      if (v10 + 1 < v9) {
        LOWORD(v9) = 0;
      }
      *(_WORD *)(a1 + 792) = v10 + 1 - v9;
    }
    else
    {
      *(_WORD *)(a1 + 794) = v8 + 1;
    }
  }
  *(void *)(a1 + 736) = *(void *)(a2 + 8);
}

void sub_19059AFC0(uint64_t a1, uint64_t a2)
{
  if (!*(_WORD *)(a1 + 50))
  {
    *(void *)(a1 + 728) = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 4) = 1;
  }
  sub_190430014((unsigned __int16 *)(a1 + 824), (_DWORD *)a2);
  if (*(_DWORD *)(a1 + 4) == 2 && *(float *)(a1 + 756) <= 22.5)
  {
    float v13 = *(float *)sub_190431610((unsigned __int16 *)(a1 + 824), 0);
    float v14 = *(float *)sub_190431610((unsigned __int16 *)(a1 + 824), 1uLL);
    float v15 = *(float *)sub_190431610((unsigned __int16 *)(a1 + 824), 2uLL);
    if (v13 >= v14) {
      float v16 = v14;
    }
    else {
      float v16 = v13;
    }
    if (v13 <= v14) {
      float v17 = v14;
    }
    else {
      float v17 = v13;
    }
    if (v17 < v15) {
      float v15 = v17;
    }
    if (v16 > v15) {
      float v15 = v16;
    }
    uint64_t v18 = *(unsigned __int16 *)(a1 + 48);
    uint64_t v4 = *(unsigned __int16 *)(a1 + 50);
    unint64_t v5 = *(unsigned int *)(a1 + 52);
    if (v18 + v4 >= v5) {
      uint64_t v19 = *(unsigned int *)(a1 + 52);
    }
    else {
      uint64_t v19 = 0;
    }
    *(float *)(a1 + 48 + 4 * (v18 + v4 - v19) + 8) = v15;
    if (v5 <= v4)
    {
      unint64_t v24 = v18 + 1;
      if (v24 >= v5) {
        __int16 v25 = v5;
      }
      else {
        __int16 v25 = 0;
      }
      *(_WORD *)(a1 + 48) = v24 - v25;
    }
    else
    {
      LOWORD(v4) = v4 + 1;
      *(_WORD *)(a1 + 50) = v4;
    }
  }
  else
  {
    sub_190430014((unsigned __int16 *)(a1 + 48), (_DWORD *)a2);
    LOWORD(v4) = *(_WORD *)(a1 + 50);
    LODWORD(v5) = *(_DWORD *)(a1 + 52);
  }
  int v6 = *(_DWORD *)(a1 + 752);
  *(_DWORD *)(a1 + 752) = v6 + 1;
  if (v5 == (unsigned __int16)v4 && v6 >= 163)
  {
    if (*(_DWORD *)(a1 + 4) == 2)
    {
      int v7 = *(_DWORD *)(a1 + 712);
      int v8 = *(_DWORD *)(a1 + 764);
      int v9 = *(_DWORD *)(a1 + 760);
      if (*(unsigned char *)(a1 + 768))
      {
LABEL_10:
        uint64_t v10 = (float *)&unk_19060B1F4;
        uint64_t v11 = (unsigned __int16 *)(a1 + 48);
        unsigned int v12 = 7;
LABEL_40:
        float v27 = sub_19059B468(v11, v7, v8, v9, v10, v12);
        *(float *)(a1 + 772) = v27;
        float v28 = sub_19043180C((unsigned __int16 *)(a1 + 48), (unsigned int (*)(float, float))sub_190431A0C, 0x8EuLL);
        float v29 = sub_19043180C((unsigned __int16 *)(a1 + 48), (unsigned int (*)(float, float))sub_190431A18, 0x8EuLL);
        uint64_t v30 = *(void *)(a2 + 8) - *(int *)(a1 + 720);
        *(float *)(a1 + 8) = v27;
        *(float *)(a1 + 12) = v28 - v29;
        *(void *)(a1 + 16) = v30;
        *(_DWORD *)(a1 + 752) -= *(_DWORD *)(a1 + 716);
        *(void *)(a1 + 744) = *(void *)(a2 + 8);
        return;
      }
LABEL_39:
      uint64_t v10 = (float *)&unk_19060B1DC;
      uint64_t v11 = (unsigned __int16 *)(a1 + 48);
      unsigned int v12 = 6;
      goto LABEL_40;
    }
    float v20 = 163000000.0 / (float)(unint64_t)(*(void *)(a2 + 8) - *(void *)(a1 + 728));
    *(float *)(a1 + 756) = v20;
    int v21 = *(unsigned __int8 *)(a1 + 768);
    if (*(unsigned char *)(a1 + 768))
    {
      int v7 = 150;
      *(_DWORD *)(a1 + 712) = 150;
      int v9 = (int)v20;
      *(_DWORD *)(a1 + 760) = (int)v20;
      int v8 = 14;
      *(_DWORD *)(a1 + 764) = 14;
      float v22 = (float)(int)v20;
      float v23 = 14.0;
      goto LABEL_38;
    }
    if (v20 <= 28.5)
    {
      if (v20 > 22.5)
      {
        int v7 = 36;
        *(_DWORD *)(a1 + 712) = 36;
        *(void *)(a1 + 760) = 0x8000000019;
        float v22 = 25.0;
        int v8 = 128;
        int v9 = 25;
        float v23 = 128.0;
        goto LABEL_38;
      }
      int v7 = 60;
      *(_DWORD *)(a1 + 712) = 60;
      *(void *)(a1 + 760) = 0x6800000014;
      float v22 = 20.0;
      int v8 = 104;
      int v9 = 20;
      *(float *)&int v26 = 104.0;
    }
    else
    {
      int v7 = 0;
      *(_DWORD *)(a1 + 712) = 0;
      *(void *)(a1 + 760) = 0xA400000020;
      int v8 = 164;
      int v9 = 32;
      float v22 = 32.0;
      *(float *)&int v26 = 164.0;
    }
    float v23 = *(float *)&v26;
LABEL_38:
    *(_DWORD *)(a1 + 716) = (int)(float)(v22 * *(float *)(a1 + 24));
    *(_DWORD *)(a1 + 720) = (int)(float)((float)((float)(1000000.0 / v20) * v23) * 0.5);
    *(_DWORD *)(a1 + 4) = 2;
    if (v21) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }
}

void sub_19059B2F0(uint64_t a1, uint64_t a2)
{
  float v4 = (float)(unint64_t)(*(void *)(a2 + 8) - *(void *)(a1 + 744)) / 1000000.0;
  if (*(_DWORD *)a1)
  {
    float v5 = *(float *)(a1 + 776);
    float v6 = 1.0;
    if (v5 != 0.0) {
      float v6 = 1.0 - expf((float)-*(float *)(a1 + 28) / v5);
    }
    *(float *)(a1 + 40) = v6;
    *(_DWORD *)(a1 + 36) = 3;
LABEL_9:
    float v9 = *(float *)a2;
    *(_DWORD *)(a1 + 36) = 4;
    float v10 = *(float *)(a1 + 44) - (float)(v6 * (float)(*(float *)(a1 + 44) - v9));
    goto LABEL_10;
  }
  float v7 = *(float *)(a1 + 8);
  float v8 = *(float *)(a1 + 776);
  if (v7 > -1.0)
  {
    float v6 = 1.0;
    if (v8 != 0.0) {
      float v6 = 1.0 - expf((float)-v4 / v8);
    }
    *(float *)(a1 + 40) = v6;
    *(float *)(a1 + 44) = v7;
    *(_DWORD *)(a1 + 36) = 3;
    *(_DWORD *)a1 = 1;
    goto LABEL_9;
  }
  float v12 = 1.0;
  if (v8 != 0.0) {
    float v12 = 1.0 - expf((float)-*(float *)(a1 + 28) / v8);
  }
  *(_DWORD *)(a1 + 36) = 0;
  *(float *)(a1 + 40) = v12;
  *(_DWORD *)(a1 + 44) = 0;
  *(void *)(a1 + 744) = *(void *)(a2 + 8);
  *(_DWORD *)a1 = 1;
  float v13 = *(float *)a2;
  *(_DWORD *)(a1 + 36) = 1;
  float v4 = 0.0;
  float v10 = v13 + 0.0;
LABEL_10:
  *(float *)(a1 + 44) = v10;
  if (v4 > *(float *)(a1 + 24))
  {
    *(_DWORD *)a1 = 2;
    uint64_t v11 = *(void *)(a2 + 8) - *(void *)(a1 + 784);
    *(float *)(a1 + 8) = v10;
    *(_DWORD *)(a1 + 12) = -1082130432;
    *(void *)(a1 + 16) = v11;
    *(void *)(a1 + 744) = *(void *)(a2 + 8);
  }
}

float sub_19059B468(unsigned __int16 *a1, int a2, int a3, int a4, float *a5, unsigned int a6)
{
  if ((a4 + 1) >= 3) {
    int v7 = 0;
  }
  else {
    int v7 = a4;
  }
  if (a3 >= 0) {
    int v8 = a3;
  }
  else {
    int v8 = a3 + 1;
  }
  uint64_t v9 = (v8 >> 1);
  float v10 = 0.0;
  float v11 = 0.0;
  float v12 = 0.0;
  if (a3 >= 2)
  {
    uint64_t v14 = 0;
    float v15 = (float)v7;
    unsigned int v16 = (a3 + 1) >> 1;
    char v28 = a3;
    int v17 = a3 + a2;
    int v29 = a2;
    uint64_t v18 = a2;
    uint64_t v19 = a6 - 1;
    float v20 = a5 + 1;
    float v21 = 0.0;
    do
    {
      float v22 = *a5;
      float v23 = v20;
      uint64_t v24 = v19;
      do
      {
        float v25 = *v23++;
        float v22 = v25 + (float)(v22 * (float)(v15 * (float)(int)(v16 + ~v14)));
        --v24;
      }
      while (v24);
      float v21 = v21 + v22;
      float v26 = *(float *)sub_190431610(a1, v14 + v18);
      float v10 = v10 + (float)((float)(v26 + *(float *)sub_190431610(a1, v17 + ~v14)) * v22);
      if (!v14) {
        float v11 = v22;
      }
      ++v14;
    }
    while (v14 != v9);
    float v12 = v21 + v21;
    a2 = v29;
    LOBYTE(a3) = v28;
  }
  if (a3) {
    float v10 = v10 + (float)(*(float *)sub_190431610(a1, (int)v9 + a2) * v11);
  }
  return v10 / v12;
}

void sub_19059BEB0(uint64_t a1)
{
  sub_19059BEFC(a1);
  sub_1902CDC50(*(void *)(a1 + 56), 1);
  *(unsigned char *)(a1 + 80) = 1;

  sub_19059C070(a1);
}

uint64_t sub_19059BEFC(uint64_t result)
{
  if (!*(void *)(result + 56))
  {
    uint64_t v1 = result;
    uint64_t v2 = (void *)sub_1902DF4A8();
    uint64_t v5 = 0x10000FF0CLL;
    char v6 = 0;
    sub_19043791C(v2, (uint64_t)&v5, (uint64_t *)&v7);
    long long v3 = v7;
    long long v7 = 0uLL;
    float v4 = *(std::__shared_weak_count **)(v1 + 64);
    *(_OWORD *)(v1 + 56) = v3;
    if (v4)
    {
      sub_1902D8B58(v4);
      if (*((void *)&v7 + 1)) {
        sub_1902D8B58(*((std::__shared_weak_count **)&v7 + 1));
      }
    }
    sub_1902CD864(*(void *)(v1 + 56), (uint64_t)sub_19059C284, v1);
    sub_1905D53A8(*(void *)(v1 + 56), (uint64_t)sub_19059C878, v1);
    sub_1905D4D98(*(void *)(v1 + 56), (uint64_t)sub_19059C878, v1);
    sub_1905D5E88(*(void *)(v1 + 56), (const char *)sub_19059C878, v1);
    operator new();
  }
  return result;
}

void sub_19059C034(_Unwind_Exception *a1)
{
  if (v2) {
    sub_1902D8B58(v2);
  }
  MEMORY[0x192FCC980](v1, 0xA0C40D4F6A234);
  _Unwind_Resume(a1);
}

void sub_19059C070(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  __int16 v4 = 1;
  HIBYTE(v4) = *(unsigned char *)(a1 + 80);
  sub_1902D6BD0();
  sub_1904DFAD8();
  v5[0] = 0;
  *(void *)long long buf = 4;
  if (sub_1905145B0(*(void *)(a1 + 72), (uint64_t)&v4, (char *)2, (uint64_t)v5, (uint64_t)buf))
  {
    if (qword_1E929D6B8 != -1) {
      dispatch_once(&qword_1E929D6B8, &unk_1EDFD28A0);
    }
    uint64_t v2 = qword_1E929D6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929D6A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_ERROR, "[PickupDetection] Configure failed", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D6B8 != -1) {
        dispatch_once(&qword_1E929D6B8, &unk_1EDFD28A0);
      }
      LOWORD(v5[0]) = 0;
      long long v3 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "void CMPickupServiceMotionCoprocessor::configure()", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

void sub_19059C23C(uint64_t a1)
{
  sub_19059BEFC(a1);
  sub_1902CDC50(*(void *)(a1 + 56), 0);
  *(unsigned char *)(a1 + 80) = 0;

  sub_19059C070(a1);
}

void sub_19059C284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    IOHIDEventGetVendorDefinedData();
    if (qword_1E929D6B8 != -1) {
      dispatch_once(&qword_1E929D6B8, &unk_1EDFD28A0);
    }
    __int16 v4 = qword_1E929D6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929D6A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_INFO, "Empty payload, returning", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D6B8 != -1) {
        dispatch_once(&qword_1E929D6B8, &unk_1EDFD28A0);
      }
      uint64_t v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CMPickupServiceMotionCoprocessor::onIoHidEvent(IOHIDEventRef)", "CoreLocation: %s\n");
LABEL_18:
      if (v5 != buf) {
        free(v5);
      }
    }
  }
  else
  {
    if (qword_1E929D6B8 != -1) {
      dispatch_once(&qword_1E929D6B8, &unk_1EDFD28A0);
    }
    char v6 = qword_1E929D6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929D6A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_FAULT, "Event ref invalid", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D6B8 != -1) {
        dispatch_once(&qword_1E929D6B8, &unk_1EDFD28A0);
      }
      uint64_t v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "void CMPickupServiceMotionCoprocessor::onIoHidEvent(IOHIDEventRef)", "CoreLocation: %s\n");
      goto LABEL_18;
    }
  }
}

void sub_19059C878(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 72);
  sub_190513638(v2);
  sub_1905139C0(v2);

  sub_19059C070(a1);
}

uint64_t sub_19059C8C0(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (qword_1E929D6B8 != -1) {
    dispatch_once(&qword_1E929D6B8, &unk_1EDFD28A0);
  }
  __int16 v4 = qword_1E929D6A8;
  if (os_log_type_enabled((os_log_t)qword_1E929D6A8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(unsigned __int8 *)(a2 + 1);
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = mach_absolute_time();
    *(_DWORD *)long long buf = 67240704;
    *(_DWORD *)&uint8_t buf[4] = v5;
    *(_WORD *)float v12 = 2050;
    *(void *)&v12[2] = v6;
    __int16 v13 = 2050;
    double v14 = sub_1902D8D34(v7);
    _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_DEBUG, "Report,pickupState,%{public}u,timestamp,%{public}lf,now,%{public}lf", buf, 0x1Cu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D6B8 != -1) {
      dispatch_once(&qword_1E929D6B8, &unk_1EDFD28A0);
    }
    uint64_t v9 = mach_absolute_time();
    sub_1902D8D34(v9);
    float v10 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "virtual void CMPickupServiceMotionCoprocessor::visitPickupState(const CMAudioAccessoryReport::PickupState *)", "CoreLocation: %s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  *(void *)long long buf = 0;
  buf[0] = *(unsigned char *)(a2 + 1);
  *(void *)float v12 = *(void *)(a1 + 48);
  uint64_t result = sub_1902D8BCC(a1, 0, (uint64_t)buf, 16);
  *(unsigned char *)(a1 + 32) = buf[0];
  return result;
}

uint64_t sub_19059CAF8(uint64_t a1, uint64_t a2)
{
  return sub_19059C8C0(a1 - 40, a2);
}

void *sub_19059CB00(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFC9EC0;
  *(void *)(a1 + 40) = &unk_1EDFC9F18;
  sub_1904C19F8((void **)(a1 + 72), 0);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    sub_1902D8B58(v2);
  }

  return sub_1904C590C((void *)a1);
}

void sub_19059CB88(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFC9EC0;
  *(void *)(a1 + 40) = &unk_1EDFC9F18;
  sub_1904C19F8((void **)(a1 + 72), 0);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    sub_1902D8B58(v2);
  }
  sub_1904C590C((void *)a1);

  JUMPOUT(0x192FCC980);
}

void *sub_19059CC24(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 40);
  *(void *)(a1 - 40) = &unk_1EDFC9EC0;
  *(void *)a1 = &unk_1EDFC9F18;
  sub_1904C19F8((void **)(a1 + 32), 0);
  long long v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    sub_1902D8B58(v3);
  }

  return sub_1904C590C(v2);
}

void sub_19059CCA8(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 40);
  *(void *)(a1 - 40) = &unk_1EDFC9EC0;
  *(void *)a1 = &unk_1EDFC9F18;
  sub_1904C19F8((void **)(a1 + 32), 0);
  long long v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    sub_1902D8B58(v3);
  }
  sub_1904C590C(v2);

  JUMPOUT(0x192FCC980);
}

os_log_t sub_19059CD40()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Gesture");
  qword_1E929D6A8 = (uint64_t)result;
  return result;
}

void sub_19059F95C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1902D8B58(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_19059F974()
{
}

void sub_19059FA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FCC980](v15, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

uint64_t sub_19059FA54(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*a2) {
    uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, *(NSSet **)(a1 + 32));
  }
  else {
    uint64_t DictionaryOfClasses = 0;
  }
  __int16 v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16);

  return v4(v2, DictionaryOfClasses);
}

void sub_19059FB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    sub_1902D8B58(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19059FDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unsigned int v16 = *(std::__shared_weak_count **)(v14 + 8);
  if (v16) {
    sub_1902D8B58(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_19059FDD4()
{
}

void sub_19059FE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FCC980](v15, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

uint64_t sub_1905A02A4(uint64_t a1, const char *a2, uint64_t a3)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t result = objc_msgSend_isMotionActivityEntitled(CMMotionUtils, a2, a3);
  if ((result & 1) == 0)
  {
    values = (void *)*MEMORY[0x1E4F1CFD0];
    keys[0] = @"_kTCCAccessRequestOptionSyncCallback";
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB3BF718, memory_order_acquire) & 1) == 0)
    {
      if (__cxa_guard_acquire(&qword_1EB3BF718))
      {
        qword_1EB3BF710 = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        __cxa_guard_release(&qword_1EB3BF718);
      }
    }
    return TCCAccessRequest();
  }
  return result;
}

void sub_1905A03A0(_Unwind_Exception *a1)
{
}

uint64_t sub_1905A0680(uint64_t a1)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  values = (void *)*MEMORY[0x1E4F1CFD0];
  keys[0] = @"_kTCCAccessRequestOptionSyncCallback";
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB3BF738, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB3BF738))
  {
    qword_1EB3BF730 = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    __cxa_guard_release(&qword_1EB3BF738);
  }
  if ((byte_1EB3BF6E8 & 1) == 0)
  {
    TCCAccessRequest();
    byte_1EB3BF6E8 = 1;
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1905A0794(_Unwind_Exception *a1)
{
}

void sub_1905A08E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a13) {
    sub_1902D8B58(a13);
  }
  sub_1902D8B58(v19);
  _Unwind_Resume(a1);
}

os_log_t sub_1905A1068()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Fall");
  qword_1E929D8F0 = (uint64_t)result;
  return result;
}

void *sub_1905A1098(void *a1)
{
  *a1 = &unk_1EDFC91A0;
  uint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    sub_1902D8B58(v2);
  }
  long long v3 = (std::__shared_weak_count *)a1[5];
  if (v3) {
    sub_1902D8B58(v3);
  }

  return sub_1904DC240(a1);
}

__CFString *sub_1905A1108(int a1)
{
  if ((a1 - 1) > 7) {
    return @"unknown";
  }
  else {
    return (__CFString *)*((void *)&off_1E568FFA8 + a1 - 1);
  }
}

__CFString *sub_1905A1130(unsigned int a1)
{
  if (a1 > 4) {
    return @"?";
  }
  else {
    return (__CFString *)*((void *)&off_1E568FFE8 + (int)a1);
  }
}

__CFString *sub_1905A1154(int a1)
{
  uint64_t v1 = @"?";
  if (a1 == 1) {
    uint64_t v1 = @"Disconnected";
  }
  if (a1) {
    return v1;
  }
  else {
    return @"Connected";
  }
}

__CFString *sub_1905A1180(unsigned int a1)
{
  if (a1 > 2) {
    return @"?";
  }
  else {
    return (__CFString *)*((void *)&off_1E5690010 + (int)a1);
  }
}

BOOL sub_1905A11A4(uint64_t a1)
{
  if (!*(void *)(a1 + 80)) {
    return 1;
  }
  sub_1905D878C();
  return !sub_1905DB6D8();
}

uint64_t sub_1905A11D4()
{
  uint64_t v6 = 0;
  uint64_t v0 = sub_1905D878C();
  sub_1905DAE20(v0, (int *)&v6 + 1, (int *)&v6);
  if (v6) {
    unsigned int v1 = 2;
  }
  else {
    unsigned int v1 = 4;
  }
  BOOL v3 = HIDWORD(v6) != 3 || v6 != 3;
  if (v6) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 3;
  }
  if (HIDWORD(v6)) {
    return v4;
  }
  else {
    return v1;
  }
}

uint64_t sub_1905A1244(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 80))
  {
    uint64_t v1 = sub_1905D878C();
    return sub_1905DB744(v1);
  }
  else
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
    }
    BOOL v3 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEFAULT, "[AccessoryNotifier] JBL is unavailable because BT accessory is not connected", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
      }
      unsigned int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "uint16_t CLAccessoryNotifier::getAdaptiveLatencyJitterBufferLevel() const", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return 0xFFFFLL;
  }
}

uint64_t sub_1905A1418(uint64_t a1, void *a2, void *a3)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (!a2 || !a3)
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
    }
    uint64_t v9 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_DEFAULT, "[AccessoryNotifier] Resetting active audio route", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
      }
      *(_WORD *)float v57 = 0;
      std::string v38 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAccessoryNotifier::selectActiveAudioRoute(NSString *, NSString *)", "CoreLocation: %s\n", v38);
      if (v38 != (char *)buf) {
        free(v38);
      }
    }
    uint64_t v10 = sub_1902D6BD0();
    v54[0] = MEMORY[0x1E4F143A8];
    v54[1] = 3221225472;
    v54[2] = sub_1905A2AD4;
    v54[3] = &unk_1E568CF68;
    v54[4] = a1;
    sub_1902CDE98(v10, (uint64_t)v54);
    return 1;
  }
  uint64_t v53 = 0;
  uint64_t v6 = (const char *)objc_msgSend_UTF8String(a2, (const char *)a2, (uint64_t)a3);
  if (sscanf(v6, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx", &v53, (char *)&v53 + 1, (char *)&v53 + 2, (char *)&v53 + 3, (char *)&v53 + 4, (char *)&v53 + 5) != 6)
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
    }
    float v12 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138477827;
      unint64_t v60 = a2;
      _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_ERROR, "[AccessoryNotifier] Warning! Invalid input BT address %{private}@", buf, 0xCu);
    }
    if (!sub_1902D8400(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
    }
    *(_DWORD *)float v57 = 138477827;
    *(void *)&v57[4] = a2;
    float v25 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "BOOL CLAccessoryNotifier::selectActiveAudioRoute(NSString *, NSString *)", "CoreLocation: %s\n", v25);
    goto LABEL_127;
  }
  if (v53 == *(void *)(a1 + 88))
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
    }
    uint64_t v7 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138477827;
      unint64_t v60 = a2;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_DEFAULT, "[AccessoryNotifier] The current active route is identical to the requsting device %{private}@", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
      }
      *(_DWORD *)float v57 = 138477827;
      *(void *)&v57[4] = a2;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAccessoryNotifier::selectActiveAudioRoute(NSString *, NSString *)", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    return 1;
  }
  *(void *)(a1 + 88) = v53;
  if (qword_1EB3BE838 != -1) {
    dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
  }
  uint64_t v14 = qword_1EB3BE830;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138477827;
    unint64_t v60 = a2;
    _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_DEFAULT, "[AccessoryNotifier] Selecting active audio route for BT Address %{private}@", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
    }
    *(_DWORD *)float v57 = 138477827;
    *(void *)&v57[4] = a2;
    unint64_t v39 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAccessoryNotifier::selectActiveAudioRoute(NSString *, NSString *)", "CoreLocation: %s\n", v39);
    if (v39 != (char *)buf) {
      free(v39);
    }
  }
  uint64_t v15 = (void *)sub_1905D878C();
  if ((sub_1905D9D8C(v15, v53) & 1) == 0)
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
    }
    uint64_t v24 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138478083;
      unint64_t v60 = a2;
      __int16 v61 = 2113;
      int v62 = a3;
      _os_log_impl(&dword_1902AF000, v24, OS_LOG_TYPE_ERROR, "[AccessoryNotifier] Warning! Spatial Audio is not supported for BT address %{private}@ with modelID %{private}@", buf, 0x16u);
    }
    if (!sub_1902D8400(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
    }
    *(_DWORD *)float v57 = 138478083;
    *(void *)&v57[4] = a2;
    *(_WORD *)&v57[12] = 2113;
    *(void *)&v57[14] = a3;
    float v25 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "BOOL CLAccessoryNotifier::selectActiveAudioRoute(NSString *, NSString *)", "CoreLocation: %s\n", v25);
LABEL_127:
    if (v25 != (char *)buf) {
      free(v25);
    }
    return 0;
  }
  uint64_t v19 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v16, (uint64_t)&v53, 6);
  int v20 = 0;
  *(void *)float v57 = 0;
  *(void *)&v57[8] = v57;
  *(void *)&v57[16] = 0x2020000000;
  uint64_t v58 = 0;
  do
  {
    if (v20)
    {
      if (v20 == 10) {
        break;
      }
      usleep(0x7A120u);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
      }
      float v21 = qword_1EB3BE830;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67240192;
        LODWORD(v6dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = v20 + 1;
        _os_log_impl(&dword_1902AF000, v21, OS_LOG_TYPE_DEFAULT, "[AccessoryNotifier] selectActiveAudioRoute retry #%{public}d", buf, 8u);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
        }
        int v55 = 67240192;
        int v56 = v20 + 1;
        float v23 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAccessoryNotifier::selectActiveAudioRoute(NSString *, NSString *)", "CoreLocation: %s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
    }
    uint64_t v22 = sub_1902D6BD0();
    v52[0] = MEMORY[0x1E4F143A8];
    v52[1] = 3221225472;
    v52[2] = sub_1905A2B94;
    v52[3] = &unk_1E568FF88;
    v52[5] = v57;
    v52[6] = a1;
    v52[4] = v19;
    sub_1902CDE98(v22, (uint64_t)v52);
    ++v20;
  }
  while (!*(void *)(*(void *)&v57[8] + 24));
  int v55 = 0;
  int v51 = 0;
  float v26 = (const char *)objc_msgSend_UTF8String(a3, v17, v18);
  if (sscanf(v26, "BTHeadphones%d,%d", &v55, &v51) == 2 && v55 == 76)
  {
    switch(v51)
    {
      case 8202:
      case 8223:
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
        }
        float v27 = qword_1EB3BE830;
        if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1902AF000, v27, OS_LOG_TYPE_DEFAULT, "[AccessoryNotifier] The active audio route is AirPods Max", buf, 2u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE838 != -1) {
            dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
          }
          __int16 v50 = 0;
          int32x2_t v40 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAccessoryNotifier::selectActiveAudioRoute(NSString *, NSString *)", "CoreLocation: %s\n", v40);
          if (v40 != (char *)buf) {
            free(v40);
          }
        }
        int v28 = 2;
        goto LABEL_115;
      case 8203:
      case 8204:
      case 8205:
      case 8207:
      case 8208:
      case 8209:
      case 8213:
      case 8214:
      case 8216:
      case 8218:
      case 8220:
      case 8221:
      case 8222:
        goto LABEL_73;
      case 8206:
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
        }
        float v33 = qword_1EB3BE830;
        if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1902AF000, v33, OS_LOG_TYPE_DEFAULT, "[AccessoryNotifier] The active audio route is AirPods Pro", buf, 2u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE838 != -1) {
            dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
          }
          __int16 v50 = 0;
          uint64_t v45 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAccessoryNotifier::selectActiveAudioRoute(NSString *, NSString *)", "CoreLocation: %s\n", v45);
          if (v45 != (char *)buf) {
            free(v45);
          }
        }
        int v28 = 1;
        goto LABEL_115;
      case 8210:
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
        }
        float v35 = qword_1EB3BE830;
        if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1902AF000, v35, OS_LOG_TYPE_DEFAULT, "[AccessoryNotifier] The active audio route is Beats Fit Pro", buf, 2u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE838 != -1) {
            dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
          }
          __int16 v50 = 0;
          uint64_t v47 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAccessoryNotifier::selectActiveAudioRoute(NSString *, NSString *)", "CoreLocation: %s\n", v47);
          if (v47 != (char *)buf) {
            free(v47);
          }
        }
        int v28 = 4;
        goto LABEL_115;
      case 8211:
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
        }
        uint64_t v31 = qword_1EB3BE830;
        if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1902AF000, v31, OS_LOG_TYPE_DEFAULT, "[AccessoryNotifier] The active audio route is AirPods (3rd generation)", buf, 2u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE838 != -1) {
            dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
          }
          __int16 v50 = 0;
          float v43 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAccessoryNotifier::selectActiveAudioRoute(NSString *, NSString *)", "CoreLocation: %s\n", v43);
          if (v43 != (char *)buf) {
            free(v43);
          }
        }
        int v28 = 3;
        goto LABEL_115;
      case 8212:
        goto LABEL_67;
      case 8215:
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
        }
        int v34 = qword_1EB3BE830;
        if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1902AF000, v34, OS_LOG_TYPE_DEFAULT, "[AccessoryNotifier] The active audio route is B453", buf, 2u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE838 != -1) {
            dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
          }
          __int16 v50 = 0;
          unint64_t v46 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAccessoryNotifier::selectActiveAudioRoute(NSString *, NSString *)", "CoreLocation: %s\n", v46);
          if (v46 != (char *)buf) {
            free(v46);
          }
        }
        int v28 = 6;
        goto LABEL_115;
      case 8217:
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
        }
        float v36 = qword_1EB3BE830;
        if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1902AF000, v36, OS_LOG_TYPE_DEFAULT, "[AccessoryNotifier] The active audio route is B768E", buf, 2u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE838 != -1) {
            dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
          }
          __int16 v50 = 0;
          unint64_t v48 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAccessoryNotifier::selectActiveAudioRoute(NSString *, NSString *)", "CoreLocation: %s\n", v48);
          if (v48 != (char *)buf) {
            free(v48);
          }
        }
        int v28 = 7;
        goto LABEL_115;
      case 8219:
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
        }
        float32x2_t v32 = qword_1EB3BE830;
        if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1902AF000, v32, OS_LOG_TYPE_DEFAULT, "[AccessoryNotifier] The active audio route is B768M", buf, 2u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE838 != -1) {
            dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
          }
          __int16 v50 = 0;
          double v44 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAccessoryNotifier::selectActiveAudioRoute(NSString *, NSString *)", "CoreLocation: %s\n", v44);
          if (v44 != (char *)buf) {
            free(v44);
          }
        }
        int v28 = 8;
        goto LABEL_115;
      default:
        if (v51 == 8228)
        {
LABEL_67:
          if (qword_1EB3BE838 != -1) {
            dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
          }
          int v29 = qword_1EB3BE830;
          if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1902AF000, v29, OS_LOG_TYPE_DEFAULT, "[AccessoryNotifier] The active audio route is AirPods Pro (2nd generation)", buf, 2u);
          }
          if (sub_1902D8400(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EB3BE838 != -1) {
              dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
            }
            __int16 v50 = 0;
            unint64_t v41 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAccessoryNotifier::selectActiveAudioRoute(NSString *, NSString *)", "CoreLocation: %s\n", v41);
            if (v41 != (char *)buf) {
              free(v41);
            }
          }
          int v28 = 5;
        }
        else
        {
LABEL_73:
          if (qword_1EB3BE838 != -1) {
            dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
          }
          uint64_t v30 = qword_1EB3BE830;
          if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1902AF000, v30, OS_LOG_TYPE_DEFAULT, "[AccessoryNotifier] The active audio route is unknown", buf, 2u);
          }
          if (sub_1902D8400(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EB3BE838 != -1) {
              dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
            }
            __int16 v50 = 0;
            float32x2_t v42 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAccessoryNotifier::selectActiveAudioRoute(NSString *, NSString *)", "CoreLocation: %s\n", v42);
            if (v42 != (char *)buf) {
              free(v42);
            }
          }
          int v28 = 0;
        }
LABEL_115:
        *(_DWORD *)(a1 + 52) = v28;
        break;
    }
  }
  else
  {
    int v28 = 0;
  }
  if (*(void *)(*(void *)&v57[8] + 24))
  {
    *(_DWORD *)(a1 + 48) = v28;
    *(unsigned char *)(a1 + 3dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
    uint64_t v37 = sub_1902D6BD0();
    v49[0] = MEMORY[0x1E4F143A8];
    v49[1] = 3221225472;
    v49[2] = sub_1905A2DEC;
    v49[3] = &unk_1E568CF68;
    v49[4] = a1;
    sub_1902CDE98(v37, (uint64_t)v49);
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v11 = 0;
  }
  _Block_object_dispose(v57, 8);
  return v11;
}

void sub_1905A2A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void sub_1905A2AD4(uint64_t a1, const char *a2)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  v2[11] = 0;
  uint64_t v3 = v2[4];
  if (v3)
  {
    if (v2[10])
    {
      uint64_t v4 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], a2, (uint64_t)(v2 + 10), 6);
      int v5 = (void *)v2[4];
      uint64_t v8 = @"BT_ADDR";
      v9[0] = v4;
      uint64_t v7 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v6, (uint64_t)v9, &v8, 1);
      sub_1905D661C(v5, v7);
    }
    else
    {

      *(void *)(v3 + 152) = 0;
    }
  }
}

void sub_1905A2B94(void *a1)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[6];
  sub_1905A2C68(v2);
  uint64_t v3 = *(void **)(v2 + 32);
  uint64_t v4 = a1[4];
  uint64_t v8 = @"BT_ADDR";
  v9[0] = v4;
  uint64_t v6 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v5, (uint64_t)v9, &v8, 1);
  sub_1905D661C(v3, v6);
  *(void *)(*(void *)(a1[5] + 8) + 24) = sub_1902B8788(*(void *)(v2 + 32));
  if (!*(void *)(*(void *)(a1[5] + 8) + 24))
  {
    uint64_t v7 = *(void *)(v2 + 32);

    *(void *)(v7 + 152) = 0;
  }
}

void sub_1905A2C68(uint64_t a1)
{
  if (!*(void *)(a1 + 32))
  {
    sub_1905D878C();
    int v3 = *(_DWORD *)(a1 + 56);
    int v2 = *(_DWORD *)(a1 + 60);
    if (!*(unsigned char *)(a1 + 29)) {
      operator new();
    }
    uint64_t v4 = (void *)sub_1902DF4A8();
    v7[0] = v3;
    v7[1] = v2;
    char v8 = 1;
    sub_19043791C(v4, (uint64_t)v7, (uint64_t *)&v9);
    long long v5 = v9;
    long long v9 = 0uLL;
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 40);
    *(_OWORD *)(a1 + 32) = v5;
    if (v6)
    {
      sub_1902D8B58(v6);
      if (*((void *)&v9 + 1)) {
        sub_1902D8B58(*((std::__shared_weak_count **)&v9 + 1));
      }
    }
    sub_1905D4D98(*(void *)(a1 + 32), (uint64_t)sub_1905A38D8, a1);
    sub_1905D506C(*(void *)(a1 + 32), (uint64_t)sub_1905A3D64, a1);
    sub_1902CD864(*(void *)(a1 + 32), (uint64_t)sub_1905A38B4, a1);
  }
}

void sub_1905A2DBC(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x10A1C40A8081CBALL);
  _Unwind_Resume(a1);
}

void sub_1905A2DEC(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(uint64_t **)(a1 + 32);
  uint64_t v9 = 0;
  if (sub_1902B8788(v1[4])
    && (int v2 = (__IOHIDServiceClient *)sub_1902B8788(v1[4]), sub_1905E84F4(&v9, v2, @"BT_ADDR", 6uLL)))
  {
    uint64_t v3 = v1[10];
    if (v3 != v9)
    {
      if (v3)
      {
        v1[10] = 0;
        (*(void (**)(uint64_t *))(*v1 + 48))(v1);
      }
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
      }
      uint64_t v4 = qword_1EB3BE830;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134283521;
        uint64_t v13 = v9;
        _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_DEFAULT, "[AccessoryNotifier] BT address of the active audio route : %{private}llx", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
        }
        int v10 = 134283521;
        uint64_t v11 = v9;
        char v8 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAccessoryNotifier::selectActiveAudioRoute(NSString *, NSString *)_block_invoke", "CoreLocation: %s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
      v1[10] = v9;
      uint64_t v5 = sub_1905D878C();
      sub_1905D8B0C(v5, v1[10]);
      (*(void (**)(uint64_t *))(*v1 + 48))(v1);
    }
  }
  else
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
    }
    uint64_t v6 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_ERROR, "[AccessoryNotifier] Failed to get an updated BT address", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
      }
      LOWORD(v1dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "BOOL CLAccessoryNotifier::selectActiveAudioRoute(NSString *, NSString *)_block_invoke", "CoreLocation: %s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

BOOL sub_1905A3184(const char *a1, NSObject *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current != *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFC35C8);
    }
    float v12 = off_1EB3BE890;
    uint64_t v6 = &qword_190607000;
    uint64_t v5 = (__IOHIDServiceClient *)"assert";
    a1 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 68289539;
      int v15 = 0;
      __int16 v16 = 2082;
      int v17 = "";
      __int16 v18 = 2082;
      uint64_t v19 = "assert";
      __int16 v20 = 2081;
      float v21 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLAccessoryNotifier] getConfig should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFC35C8);
      }
    }
    uint64_t v13 = off_1EB3BE890;
    if (os_signpost_enabled((os_log_t)off_1EB3BE890))
    {
      *(_DWORD *)long long buf = 68289539;
      int v15 = 0;
      __int16 v16 = 2082;
      int v17 = "";
      __int16 v18 = 2082;
      uint64_t v19 = "assert";
      __int16 v20 = 2081;
      float v21 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLAccessoryNotifier] getConfig should be running on motion thread", "{\"msg%{public}.0s\":\"[CLAccessoryNotifier] getConfig should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFC35C8);
      }
    }
    a2 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 68289539;
      int v15 = 0;
      __int16 v16 = 2082;
      int v17 = "";
      __int16 v18 = 2082;
      uint64_t v19 = "assert";
      __int16 v20 = 2081;
      float v21 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, a2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLAccessoryNotifier] getConfig should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_40:
    dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
    goto LABEL_13;
  }
  uint64_t v5 = (__IOHIDServiceClient *)sub_1902B8788(*((void *)a1 + 4));
  if (v5)
  {
    if (!sub_1905E7DC4(a2, v5, @"LocationID")) {
      sub_1905E7DC4(a2, v5, @"SIDE");
    }
    sub_1905E811C((uint64_t)&a2[1], v5, @"CFG#");
    sub_1905E811C((uint64_t)&a2[4], v5, @"SerialNumber");
    if (*((_DWORD *)a1 + 12)) {
      goto LABEL_27;
    }
    LODWORD(v6) = *(_DWORD *)(sub_1905D878C() + 24);
    switch((int)v6)
    {
      case 8202:
      case 8223:
        int v7 = 2;
        goto LABEL_26;
      case 8203:
      case 8204:
      case 8205:
      case 8207:
      case 8208:
      case 8209:
      case 8213:
      case 8214:
      case 8216:
      case 8218:
      case 8220:
      case 8221:
      case 8222:
        goto LABEL_10;
      case 8206:
        int v7 = 1;
        goto LABEL_26;
      case 8210:
        int v7 = 4;
        goto LABEL_26;
      case 8211:
        int v7 = 3;
        goto LABEL_26;
      case 8212:
        goto LABEL_9;
      case 8215:
        int v7 = 6;
        goto LABEL_26;
      case 8217:
        int v7 = 7;
        goto LABEL_26;
      case 8219:
        int v7 = 8;
        goto LABEL_26;
      default:
        if (v6 == 8228)
        {
LABEL_9:
          int v7 = 5;
LABEL_26:
          *((_DWORD *)a1 + 12) = v7;
          goto LABEL_27;
        }
LABEL_10:
        if (*((void *)a1 + 10)) {
          goto LABEL_27;
        }
        char v8 = (void *)sub_1905D878C();
        if (sub_1905D9D8C(v8, *((void *)a1 + 10))) {
          goto LABEL_27;
        }
        if (qword_1EB3BE838 != -1) {
          goto LABEL_40;
        }
        break;
    }
LABEL_13:
    uint64_t v9 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67174657;
      int v15 = (int)v6;
      _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_ERROR, "[CLAccessoryNotifier] Warning! The connected device %{private}d might not be supported", buf, 8u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "void CLAccessoryNotifier::refreshHardwareModel()", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
LABEL_27:
    LODWORD(a2[7].isa) = *((_DWORD *)a1 + 12);
  }
  return v5 != 0;
}

void sub_1905A36C0(uint64_t a1, int a2, unint64_t a3, unint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE838 != -1) {
    dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
  }
  char v8 = qword_1EB3BE830;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67240704;
    int v11 = a2;
    __int16 v12 = 2050;
    unint64_t v13 = a3;
    __int16 v14 = 2050;
    unint64_t v15 = a4;
    _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_INFO, "[AccessoryNotifier] numberOfClientsChanged notification:%{public}d, from:%{public}zu, to:%{public}zu", buf, 0x1Cu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
    }
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "virtual void CLAccessoryNotifier::numberOfClientsChanged(int, size_t, size_t)", "CoreLocation: %s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (a3 < a4) {
    *(unsigned char *)(a1 + 3dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
  }
}

uint64_t sub_1905A38B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void sub_1905A38D8(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v24 = 0;
  int v2 = (__IOHIDServiceClient *)sub_1902B8788(*(void *)(a1 + 32));
  if (!v2 || (uint64_t v3 = v2, !sub_1905E84F4(&v24, v2, @"BT_ADDR", 6uLL)))
  {
LABEL_24:
    *(_DWORD *)(a1 + 48) = 0;
    uint64_t v4 = (unsigned char *)(a1 + 30);
    goto LABEL_25;
  }
  if (v24 != *(void *)(a1 + 80))
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
    }
    unint64_t v13 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 80);
      *(_DWORD *)long long buf = 134284033;
      float v33 = v3;
      __int16 v34 = 2049;
      *(void *)float v35 = v14;
      *(_WORD *)&v35[8] = 2049;
      uint64_t v36 = v24;
      _os_log_impl(&dword_1902AF000, v13, OS_LOG_TYPE_DEFAULT, "[AccessoryNotifier] onNewHidService for service %{private}p. Updating BT address from %{private}llx to %{private}llx", buf, 0x20u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
      }
      uint64_t v22 = *(void *)(a1 + 80);
      int v27 = 134284033;
      int v28 = v3;
      __int16 v29 = 2049;
      *(void *)uint64_t v30 = v22;
      *(_WORD *)&v30[8] = 2049;
      uint64_t v31 = v24;
      float v23 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "static void CLAccessoryNotifier::onNewHidService(void *)", "CoreLocation: %s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    if (*(void *)(a1 + 80))
    {
      *(void *)(a1 + 8dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
      (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
    }
    *(void *)(a1 + 8dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = v24;
    uint64_t v15 = sub_1905D878C();
    sub_1905D8B0C(v15, *(void *)(a1 + 80));
    (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
    uint64_t v17 = *(void *)(a1 + 88);
    if (!v17 || *(void *)(a1 + 80) == v17)
    {
      uint64_t v18 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v16, (uint64_t)&v24, 6);
      uint64_t v19 = *(void **)(a1 + 32);
      float v25 = @"BT_ADDR";
      uint64_t v26 = v18;
      float v21 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v20, (uint64_t)&v26, &v25, 1);
      sub_1905D661C(v19, v21);
    }
    goto LABEL_24;
  }
  uint64_t v4 = (unsigned char *)(a1 + 30);
  if (*(unsigned char *)(a1 + 30))
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
    }
    uint64_t v5 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(__IOHIDServiceClient **)(a1 + 80);
      int v7 = *(_DWORD *)(a1 + 56);
      int v8 = *(_DWORD *)(a1 + 60);
      *(_DWORD *)long long buf = 134284033;
      float v33 = v6;
      __int16 v34 = 1026;
      *(_DWORD *)float v35 = v7;
      *(_WORD *)&v35[4] = 1026;
      *(_DWORD *)&v35[6] = v8;
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_ERROR, "[AccessoryNotifier] Duplicate service with the same BT address %{private}llx for usage page %{public}d usage %{public}d", buf, 0x18u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFD28E0);
      }
      uint64_t v9 = *(__IOHIDServiceClient **)(a1 + 80);
      int v10 = *(_DWORD *)(a1 + 56);
      int v11 = *(_DWORD *)(a1 + 60);
      int v27 = 134284033;
      int v28 = v9;
      __int16 v29 = 1026;
      *(_DWORD *)uint64_t v30 = v10;
      *(_WORD *)&v30[4] = 1026;
      *(_DWORD *)&v30[6] = v11;
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "static void CLAccessoryNotifier::onNewHidService(void *)", "CoreLocation: %s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
LABEL_25:
  *uint64_t v4 = 0;
}

void sub_1905A3D64(void *a1)
{
  uint64_t v2 = a1[4];

  *(void *)(v2 + 152) = 0;
  a1[10] = 0;
  (*(void (**)(void *))(*a1 + 48))(a1);
  uint64_t v3 = sub_1905D878C();

  sub_1905D8B0C(v3, 0);
}

os_log_t sub_1905A3DD8()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Accessory");
  qword_1EB3BE830 = (uint64_t)result;
  return result;
}

uint64_t sub_1905A3E08(uint64_t a1, unsigned int a2, char a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a1 = a2;
  *(_DWORD *)(a1 + 4) = 1092616192;
  *(void *)(a1 + 8) = 0x3FD3333340000000;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 17) = a3;
  *(void *)(a1 + 24) = &unk_1EDFC8FA8;
  *(void *)(a1 + 32) = 0;
  uint64_t v4 = (void *)(a1 + 40);
  *(void *)(a1 + 4dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = &unk_1EDFC93B0;
  uint64_t v5 = (void *)(a1 + 112);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = &unk_1EDFC93B0;
  uint64_t v19 = (void *)(a1 + 184);
  *(_OWORD *)(a1 + 12dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = &unk_1EDFC93B0;
  uint64_t v6 = a1 + 256;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 24dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 256) = &unk_1EDFC8FA8;
  *(void *)(a1 + 264) = 0;
  int v7 = (void *)(a1 + 272);
  *(void *)(a1 + 272) = &unk_1EDFC93B0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 4dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(void *)(a1 + 344) = &unk_1EDFC93B0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 40dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0u;
  *(void *)(a1 + 416) = &unk_1EDFC93B0;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 20dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(void *)(a1 + 488) = &unk_1EDFC8FA8;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = &unk_1EDFC93B0;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 56dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(void *)(a1 + 576) = &unk_1EDFC93B0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 60dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0u;
  *(void *)(a1 + 648) = &unk_1EDFC93B0;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(void *)(a1 + 72dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = &unk_1EDFC8FA8;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 736) = &unk_1EDFC93B0;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 76dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(void *)(a1 + 808) = &unk_1EDFC93B0;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(void *)(a1 + 88dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = &unk_1EDFC93B0;
  *(_OWORD *)(a1 + 949) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 92dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(unsigned char *)(a1 + 965) = 1;
  *(void *)(a1 + 968) = 0xBFF0000000000000;
  *(void *)(a1 + 976) = 0x3EE6666600000000;
  *(_DWORD *)(a1 + 984) = 7;
  *(void *)(a1 + 992) = 0xBFF0000000000000;
  *(void *)(a1 + 100dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 1008) = _Q0;
  *(void *)(a1 + 1024) = 0x3D23D70A3C23D70ALL;
  *(_DWORD *)(a1 + 1032) = 0;
  *(unsigned char *)(a1 + 1036) = 0;
  *(_DWORD *)(a1 + 104dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
  if (a2 >= 2)
  {
    *(_DWORD *)(a1 + 4) = 1103626240;
    *(void *)(a1 + 8) = 0x3FC99999A0000000;
    *(unsigned char *)(a1 + 16) = 1;
    *(void *)(a1 + 264) = 5;
    *(void *)(a1 + 28dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 5;
    sub_1902B5164(v7);
    *(void *)(a1 + 352) = 5;
    sub_1902B5164((void *)(a1 + 344));
    *(void *)(a1 + 424) = 5;
    sub_1902B5164((void *)(a1 + 416));
    *(void *)(a1 + 496) = 3;
    *(void *)(a1 + 512) = 3;
    sub_1902B5164((void *)(a1 + 504));
    *(void *)(a1 + 584) = 3;
    sub_1902B5164((void *)(a1 + 576));
    *(void *)(a1 + 656) = 3;
    sub_1902B5164((void *)(a1 + 648));
    *(void *)(a1 + 728) = 5;
    *(void *)(a1 + 744) = 5;
    sub_1902B5164((void *)(a1 + 736));
    *(void *)(a1 + 816) = 5;
    sub_1902B5164((void *)(a1 + 808));
    *(void *)(a1 + 888) = 5;
    sub_1902B5164((void *)(a1 + 880));
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
    }
    unint64_t v13 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134219008;
      uint64_t v21 = 0x4034000000000000;
      __int16 v22 = 1024;
      int v23 = 5;
      __int16 v24 = 1024;
      int v25 = 3;
      __int16 v26 = 1024;
      int v27 = 5;
      __int16 v28 = 1024;
      int v29 = 3;
      _os_log_impl(&dword_1902AF000, v13, OS_LOG_TYPE_DEBUG, "gyroFrequency,%.3f,gyroBufferSize,%d,gyroMeanBufferSize,%d,zRotBufferSize,%d,minRequiredZrots,%d", buf, 0x24u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
      }
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "CLOrientationDetector::CLOrientationDetector(FormFactor, BOOL)", "CoreLocation: %s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    *(float *)(a1 + 1024) = *(float *)(a1 + 1024) * 0.8;
    *(_DWORD *)(a1 + 1028) = 1023745720;
  }
  signed int v14 = llround(*(double *)(a1 + 8) * *(float *)(a1 + 4));
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 48) = v14;
  sub_1902B5164(v4);
  *(void *)(a1 + 12dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = v14;
  sub_1902B5164(v5);
  *(void *)(a1 + 192) = v14;
  sub_1902B5164(v19);
  if (qword_1EB3BE828 != -1) {
    dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
  }
  uint64_t v15 = off_1EB3BE820;
  if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v21) = v14;
    _os_log_impl(&dword_1902AF000, v15, OS_LOG_TYPE_DEBUG, "accelBufferSize,%d", buf, 8u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
    }
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "CLOrientationDetector::CLOrientationDetector(FormFactor, BOOL)", "CoreLocation: %s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  return a1;
}

void sub_1905A4594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  sub_1902D5AB8(v17);
  sub_1902D5AB8(a15);
  sub_1902D5AB8(a16);
  sub_1902D5AB8(a17);
  _Unwind_Resume(a1);
}

void sub_1905A45CC(uint64_t a1, float *a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  double v6 = *(double *)(a1 + 1008);
  if (v6 < 0.0 || *(double *)a3 >= v6 && *(double *)a3 - v6 <= 2.0 / *(float *)(a1 + 4))
  {
    sub_1902D9094(a1 + 40, a2);
    sub_1902D9094(a1 + 112, a2 + 1);
    sub_1902D9094(a1 + 184, a2 + 2);
    *(void *)(a1 + 1008) = *a3;
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
    }
    int v7 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
    {
      double v8 = *a2;
      double v9 = a2[1];
      double v10 = a2[2];
      uint64_t v11 = *a3;
      *(_DWORD *)long long buf = 134218752;
      double v17 = v8;
      __int16 v18 = 2048;
      double v19 = v9;
      __int16 v20 = 2048;
      double v21 = v10;
      __int16 v22 = 2048;
      uint64_t v23 = v11;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_DEBUG, "accel, %.3f, %.3f, %.3f, timestamp, %.20f", buf, 0x2Au);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
      }
      signed int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationDetector::addAccSample(const CLMotionTypeAcceleration &, const CFAbsoluteTime &)", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    if (*(unsigned char *)(a1 + 965)) {
      *(void *)(a1 + 968) = *a3;
    }
  }
  else
  {
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
    }
    __int16 v12 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEFAULT))
    {
      double v13 = *(double *)a3 - *(double *)(a1 + 1008);
      *(_DWORD *)long long buf = 134349056;
      double v17 = v13;
      _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_DEFAULT, "Accelerometer samples data gap or out of order! deltaInterval=%{public}.4f", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
      }
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationDetector::addAccSample(const CLMotionTypeAcceleration &, const CFAbsoluteTime &)", "CoreLocation: %s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    sub_1902B5164((void *)(a1 + 40));
    sub_1902B5164((void *)(a1 + 112));
    sub_1902B5164((void *)(a1 + 184));
    *(void *)(a1 + 1008) = 0xBFF0000000000000;
  }
}

void sub_1905A49EC(uint64_t a1, float *a2, double *a3)
{
  uint64_t v220 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 16))
  {
    double v6 = *(double *)(a1 + 1016);
    if (v6 < 0.0)
    {
      sub_1902D9094(a1 + 272, a2);
      sub_1902D9094(a1 + 344, a2 + 1);
      sub_1902D9094(a1 + 416, a2 + 2);
      goto LABEL_92;
    }
    double v7 = *a3 - v6;
    if (v7 < 0.0 || v7 * 20.0 > 2.5)
    {
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
      }
      double v9 = off_1EB3BE820;
      if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEFAULT))
      {
        double v10 = *a3 - *(double *)(a1 + 1016);
        *(float *)long long buf = 3.9122e-34;
        *(double *)v213 = v10;
        _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_DEFAULT, "Gyro samples data gap or out of order! deltaInterval=%{public}.4f", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE828 != -1) {
          dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
        }
        double v169 = *a3 - *(double *)(a1 + 1016);
        *(_DWORD *)v205 = 134349056;
        *(double *)&v205[4] = v169;
        v170 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationDetector::addGyroSample(const CLMotionTypeRotationRate &, const CFAbsoluteTime &)", "CoreLocation: %s\n", v170);
        if (v170 != (char *)buf) {
          free(v170);
        }
      }
      if (fabs(v7) * 20.0 > 4.0)
      {
        sub_1902B5164((void *)(a1 + 272));
        sub_1902B5164((void *)(a1 + 344));
        sub_1902B5164((void *)(a1 + 416));
        double v11 = -1.0;
LABEL_167:
        *(double *)(a1 + 1016) = v11;
        return;
      }
      if (v7 < 0.0) {
        return;
      }
    }
    sub_1902D9094(a1 + 272, a2);
    sub_1902D9094(a1 + 344, a2 + 1);
    __int16 v12 = a2 + 2;
    sub_1902D9094(a1 + 416, a2 + 2);
    unint64_t v13 = *(void *)(a1 + 336);
    float v14 = 0.0;
    float v15 = 0.0;
    if (v13) {
      float v15 = *(float *)(a1 + 288) / (float)v13;
    }
    unint64_t v16 = *(void *)(a1 + 408);
    if (v16) {
      float v14 = *(float *)(a1 + 360) / (float)v16;
    }
    unint64_t v17 = *(void *)(a1 + 480);
    if (v17) {
      float v18 = *(float *)(a1 + 432) / (float)v17;
    }
    else {
      float v18 = 0.0;
    }
    float v179 = v15;
    float v180 = v14;
    float v181 = v18;
    sub_1902D9094(a1 + 504, &v179);
    sub_1902D9094(a1 + 576, &v180);
    sub_1902D9094(a1 + 648, &v181);
    int v19 = *(unsigned __int8 *)(a1 + 960);
    if (*(unsigned char *)(a1 + 960) || *(_DWORD *)(a1 + 1004))
    {
      float v20 = fabsf(v179);
      float v21 = fabsf(v180);
      if (v20 < v21) {
        float v20 = v21;
      }
      float v188 = v20;
      float v22 = fabsf(v181);
      if (v19)
      {
        *(float *)long long buf = v22 - v20;
        sub_1902D9094(a1 + 736, &v181);
        sub_1902D9094(a1 + 808, (float *)buf);
        sub_1902D9094(a1 + 880, &v188);
        if (*(unsigned char *)(a1 + 960))
        {
LABEL_29:
          if (qword_1EB3BE828 != -1) {
            dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
          }
          uint64_t v23 = off_1EB3BE820;
          if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
          {
            unint64_t v24 = *(void *)(a1 + 800);
            float v25 = 0.0;
            float v26 = 0.0;
            if (v24) {
              float v26 = *(float *)(a1 + 752) / (float)v24;
            }
            unint64_t v27 = *(void *)(a1 + 872);
            if (v27) {
              float v25 = *(float *)(a1 + 824) / (float)v27;
            }
            unint64_t v28 = *(void *)(a1 + 944);
            float v29 = 0.0;
            float v30 = 0.0;
            if (v28) {
              float v30 = *(float *)(a1 + 896) / (float)v28;
            }
            float v31 = *v12;
            *(void *)v205 = &unk_1EDFC7D60;
            *(float *)&v205[8] = v26;
            *(float *)&v205[12] = v25;
            *(float *)&v205[16] = v30;
            if (v24) {
              float v29 = *(float *)(a1 + 752) / (float)v24;
            }
            float v32 = 0.0;
            float v33 = 0.0;
            if (v27) {
              float v33 = *(float *)(a1 + 824) / (float)v27;
            }
            if (v28) {
              float v32 = *(float *)(a1 + 896) / (float)v28;
            }
            v201 = &unk_1EDFC7D60;
            float v202 = v29;
            float v203 = v33;
            float v204 = v32;
            float v34 = 0.0;
            float v35 = 0.0;
            if (v24) {
              float v35 = *(float *)(a1 + 752) / (float)v24;
            }
            if (v27) {
              float v34 = *(float *)(a1 + 824) / (float)v27;
            }
            float v36 = 0.0;
            float v37 = 0.0;
            if (v28) {
              float v37 = *(float *)(a1 + 896) / (float)v28;
            }
            v197 = &unk_1EDFC7D60;
            float v198 = v35;
            float v199 = v34;
            float v200 = v37;
            if (v24 >= 2)
            {
              float v38 = (float)((float)v24 * *(float *)(a1 + 756)) - (float)(*(float *)(a1 + 752) * *(float *)(a1 + 752));
              if (v38 >= 0.0) {
                float v36 = v38 / (float)((v24 - 1) * v24);
              }
            }
            float v39 = 0.0;
            float v40 = 0.0;
            if (v27 >= 2)
            {
              float v41 = (float)((float)v27 * *(float *)(a1 + 828)) - (float)(*(float *)(a1 + 824) * *(float *)(a1 + 824));
              float v40 = 0.0;
              if (v41 >= 0.0) {
                float v40 = v41 / (float)((v27 - 1) * v27);
              }
            }
            if (v28 >= 2)
            {
              float v42 = (float)((float)v28 * *(float *)(a1 + 900)) - (float)(*(float *)(a1 + 896) * *(float *)(a1 + 896));
              if (v42 >= 0.0) {
                float v39 = v42 / (float)((v28 - 1) * v28);
              }
            }
            v193 = &unk_1EDFC7D60;
            float v194 = v36;
            float v195 = v40;
            float v196 = v39;
            float v43 = 0.0;
            float v44 = 0.0;
            if (v24 >= 2)
            {
              float v45 = (float)((float)v24 * *(float *)(a1 + 756)) - (float)(*(float *)(a1 + 752) * *(float *)(a1 + 752));
              float v44 = 0.0;
              if (v45 >= 0.0) {
                float v44 = v45 / (float)((v24 - 1) * v24);
              }
            }
            if (v27 >= 2)
            {
              float v46 = (float)((float)v27 * *(float *)(a1 + 828)) - (float)(*(float *)(a1 + 824) * *(float *)(a1 + 824));
              if (v46 >= 0.0) {
                float v43 = v46 / (float)((v27 - 1) * v27);
              }
            }
            float v47 = 0.0;
            float v48 = 0.0;
            if (v28 >= 2)
            {
              float v49 = (float)((float)v28 * *(float *)(a1 + 900)) - (float)(*(float *)(a1 + 896) * *(float *)(a1 + 896));
              float v48 = 0.0;
              if (v49 >= 0.0) {
                float v48 = v49 / (float)((v28 - 1) * v28);
              }
            }
            v189 = &unk_1EDFC7D60;
            float v190 = v44;
            float v191 = v43;
            float v192 = v48;
            if (v24 >= 2)
            {
              float v50 = (float)((float)v24 * *(float *)(a1 + 756)) - (float)(*(float *)(a1 + 752) * *(float *)(a1 + 752));
              if (v50 >= 0.0) {
                float v47 = v50 / (float)((v24 - 1) * v24);
              }
            }
            float v51 = 0.0;
            float v52 = 0.0;
            if (v27 >= 2)
            {
              float v53 = (float)((float)v27 * *(float *)(a1 + 828)) - (float)(*(float *)(a1 + 824) * *(float *)(a1 + 824));
              float v52 = 0.0;
              if (v53 >= 0.0) {
                float v52 = v53 / (float)((v27 - 1) * v27);
              }
            }
            double v54 = v31;
            double v55 = v33;
            if (v28 >= 2)
            {
              float v56 = (float)((float)v28 * *(float *)(a1 + 900)) - (float)(*(float *)(a1 + 896) * *(float *)(a1 + 896));
              if (v56 >= 0.0) {
                float v51 = v56 / (float)((v28 - 1) * v28);
              }
            }
            v184 = &unk_1EDFC7D60;
            float v185 = v47;
            float v186 = v52;
            float v187 = v51;
            *(float *)long long buf = 3.8529e-34;
            *(double *)v213 = v54;
            *(_WORD *)&v213[8] = 2048;
            *(double *)&v213[10] = (float)(v22 - v188);
            *(_WORD *)&v213[18] = 2048;
            *(double *)&v213[20] = v188;
            *(_WORD *)&v213[28] = 2048;
            *(double *)v214 = v26;
            *(_WORD *)&v214[8] = 2048;
            *(double *)v215 = v55;
            *(_WORD *)&v215[8] = 2048;
            *(double *)v216 = v37;
            *(_WORD *)&v216[8] = 2048;
            *(double *)v217 = v36;
            *(_WORD *)&v217[8] = 2048;
            *(double *)v218 = v43;
            *(_WORD *)&v218[8] = 2048;
            double v219 = v51;
            _os_log_impl(&dword_1902AF000, v23, OS_LOG_TYPE_DEBUG, "zRot (%.3f, %.3f, %.3f), mean(%.3f, %.3f, %.3f), var(%.3f, %.3f, %.3f)", buf, 0x5Cu);
          }
          if (sub_1902D8400(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EB3BE828 != -1) {
              dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
            }
            double v57 = *v12;
            double v58 = (float)(v22 - v188);
            double v59 = v188;
            sub_1905A6AA8((uint64_t)&v201, a1 + 720);
            double v60 = v202;
            sub_1905A6AA8((uint64_t)&v197, a1 + 720);
            double v61 = v199;
            sub_1905A6AA8((uint64_t)&v193, a1 + 720);
            double v62 = v196;
            sub_1905A6B1C((uint64_t)&v189, a1 + 720);
            double v63 = v190;
            sub_1905A6B1C((uint64_t)&v184, a1 + 720);
            float v64 = v186;
            sub_1905A6B1C((uint64_t)v182, a1 + 720);
            *(_DWORD *)v205 = 134220032;
            *(double *)&v205[4] = v57;
            *(_WORD *)&v205[12] = 2048;
            *(double *)&v205[14] = v58;
            *(_WORD *)&v205[22] = 2048;
            *(double *)&v205[24] = v59;
            *(_WORD *)&v205[32] = 2048;
            *(double *)v206 = v60;
            *(_WORD *)&v206[8] = 2048;
            *(double *)v207 = v61;
            *(_WORD *)&v207[8] = 2048;
            *(double *)v208 = v62;
            *(_WORD *)&v208[8] = 2048;
            *(double *)v209 = v63;
            *(_WORD *)&v209[8] = 2048;
            *(double *)v210 = v64;
            *(_WORD *)&v210[8] = 2048;
            double v211 = v183;
            int8x16_t v65 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationDetector::fillZRotBuffer(const CLMotionTypeRotationRate &, const CLVector3d<float> &)", "CoreLocation: %s\n", v65);
            if (v65 != (char *)buf) {
              free(v65);
            }
          }
        }
      }
      else if (v20 < 90.0 {
             && fabsf((float)(v181 + *v12) * 0.5) > (float)((float)(v20 + 30.0) * 1.25)
      }
             && (v22 > 45.0 || fabsf(*v12) > 75.0))
      {
        *(float *)long long buf = v22 - v20;
        sub_1902D9094(a1 + 736, &v181);
        sub_1902D9094(a1 + 808, (float *)buf);
        sub_1902D9094(a1 + 880, &v188);
        *(unsigned char *)(a1 + 96dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 1;
        *(void *)(a1 + 952) = (*(_DWORD *)(a1 + 952) + 1);
        *(_DWORD *)(a1 + 1032) = 0;
        goto LABEL_29;
      }
    }
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
    }
    int8x16_t v66 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
    {
      double v67 = *a2;
      double v68 = a2[1];
      double v69 = a2[2];
      int v70 = *(_DWORD *)(a1 + 1004);
      int v71 = *(unsigned __int8 *)(a1 + 960);
      double v72 = *a3;
      *(float *)long long buf = 3.8529e-34;
      *(double *)v213 = v67;
      *(_WORD *)&v213[8] = 2048;
      *(double *)&v213[10] = v68;
      *(_WORD *)&v213[18] = 2048;
      *(double *)&v213[20] = v69;
      *(_WORD *)&v213[28] = 2048;
      *(double *)v214 = v179;
      *(_WORD *)&v214[8] = 2048;
      *(double *)v215 = v180;
      *(_WORD *)&v215[8] = 2048;
      *(double *)v216 = v181;
      *(_WORD *)&v216[8] = 1024;
      *(_DWORD *)v217 = v70;
      *(_WORD *)&v217[4] = 1024;
      *(_DWORD *)&v217[6] = v71;
      *(_WORD *)v218 = 2048;
      *(double *)&v218[2] = v72;
      _os_log_impl(&dword_1902AF000, v66, OS_LOG_TYPE_DEBUG, "gyro, %.3f, %.3f, %.3f, gyroMean, %.3f, %.3f, %.3f, fLastDetection,%d,fStartZrot,%d, timestamp, %.10f", buf, 0x54u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
      }
      double v161 = *a2;
      double v162 = a2[1];
      double v163 = a2[2];
      int v164 = *(_DWORD *)(a1 + 1004);
      int v165 = *(unsigned __int8 *)(a1 + 960);
      double v166 = *a3;
      *(_DWORD *)v205 = 134220032;
      *(double *)&v205[4] = v161;
      *(_WORD *)&v205[12] = 2048;
      *(double *)&v205[14] = v162;
      *(_WORD *)&v205[22] = 2048;
      *(double *)&v205[24] = v163;
      *(_WORD *)&v205[32] = 2048;
      *(double *)v206 = v179;
      *(_WORD *)&v206[8] = 2048;
      *(double *)v207 = v180;
      *(_WORD *)&v207[8] = 2048;
      *(double *)v208 = v181;
      *(_WORD *)&v208[8] = 1024;
      *(_DWORD *)v209 = v164;
      *(_WORD *)&v209[4] = 1024;
      *(_DWORD *)&v209[6] = v165;
      *(_WORD *)v210 = 2048;
      *(double *)&v210[2] = v166;
      v167 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationDetector::addGyroSample(const CLMotionTypeRotationRate &, const CFAbsoluteTime &)", "CoreLocation: %s\n", v167);
      if (v167 != (char *)buf) {
        free(v167);
      }
    }
LABEL_92:
    *(_WORD *)(a1 + 963) = 0;
    uint64_t v73 = *(void *)(a1 + 336);
    float v74 = 0.0;
    float v75 = 0.0;
    if (v73) {
      float v75 = *(float *)(*(void *)(*(void *)(a1 + 304)
    }
                                 + (((unint64_t)(v73 + *(void *)(a1 + 328) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                     + 4 * ((v73 + *(void *)(a1 + 328) - 1) & 0x3FF));
    uint64_t v76 = *(void *)(a1 + 408);
    if (v76) {
      float v74 = *(float *)(*(void *)(*(void *)(a1 + 376)
    }
                                 + (((unint64_t)(v76 + *(void *)(a1 + 400) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                     + 4 * ((v76 + *(void *)(a1 + 400) - 1) & 0x3FF));
    uint64_t v77 = *(void *)(a1 + 480);
    if (v77) {
      float v78 = *(float *)(*(void *)(*(void *)(a1 + 448)
    }
                                 + (((unint64_t)(v77 + *(void *)(a1 + 472) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                     + 4 * ((v77 + *(void *)(a1 + 472) - 1) & 0x3FF));
    else {
      float v78 = 0.0;
    }
    v193 = &unk_1EDFC7D60;
    float v194 = v75;
    float v195 = v74;
    float v196 = v78;
    if (!*(unsigned char *)(a1 + 960)) {
      goto LABEL_115;
    }
    unint64_t v79 = *(void *)(a1 + 104);
    float v80 = 0.0;
    float v81 = 0.0;
    if (v79) {
      float v81 = *(float *)(a1 + 56) / (float)v79;
    }
    unint64_t v82 = *(void *)(a1 + 176);
    if (v82) {
      float v80 = *(float *)(a1 + 128) / (float)v82;
    }
    unint64_t v83 = *(void *)(a1 + 248);
    if (v83) {
      float v84 = *(float *)(a1 + 200) / (float)v83;
    }
    else {
      float v84 = 0.0;
    }
    v189 = &unk_1EDFC7D60;
    float v190 = v81;
    float v191 = v80;
    float v192 = v84;
    float v85 = (float)((float)((float)(v80 * v80) + (float)(v81 * v81)) + (float)(v84 * v84)) + -1.0;
    float v86 = fabsf(v85);
    if (v86 < 0.3 && fabsf(v84) > 0.9)
    {
      sub_1905A6BF0(a1, 1);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
      }
      uint64_t v87 = off_1EB3BE820;
      if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1902AF000, v87, OS_LOG_TYPE_DEBUG, "SCREEN FLAT. NOT FILLING UP ZROT BUFFER.", buf, 2u);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE828 != -1) {
          dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
        }
        *(_WORD *)v205 = 0;
        v168 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationDetector::checkForRotation()", "CoreLocation: %s\n", v168);
        if (v168 != (char *)buf) {
          free(v168);
        }
      }
      goto LABEL_114;
    }
    unint64_t v97 = *(void *)(a1 + 800);
    if (v97) {
      float v98 = *(float *)(a1 + 752) / (float)v97;
    }
    else {
      float v98 = 0.0;
    }
    float v99 = (float)(v78 / 20.0) + *(float *)(a1 + 956);
    *(float *)(a1 + 956) = v99;
    float v100 = fabsf(v99);
    float v101 = 2.0;
    if (v100 > 75.0) {
      float v101 = 15.0;
    }
    BOOL v102 = v78 >= v101 && v98 < -30.0;
    if (v102 || (v78 <= (float)-v101 ? (BOOL v103 = v98 <= 30.0) : (BOOL v103 = 1), !v103))
    {
      sub_1905A6BF0(a1, 1);
      *(unsigned char *)(a1 + 964) = 1;
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
      }
      __int16 v115 = off_1EB3BE820;
      if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1902AF000, v115, OS_LOG_TYPE_DEBUG, "Transient!", buf, 2u);
      }
      if (!sub_1902D8400(115, 2)) {
        goto LABEL_166;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
      }
      *(_WORD *)v205 = 0;
      __double2 v96 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationDetector::checkForRotation()", "CoreLocation: %s\n", v96);
      goto LABEL_284;
    }
    float v104 = 0.0;
    float v105 = 0.0;
    if (v97) {
      float v105 = *(float *)(*(void *)(*(void *)(a1 + 768)
    }
                                  + (((v97 + *(void *)(a1 + 792) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                      + 4 * ((v97 + *(void *)(a1 + 792) - 1) & 0x3FF));
    if (v77) {
      float v104 = *(float *)(*(void *)(*(void *)(a1 + 448)
    }
                                  + (((unint64_t)(v77 + *(void *)(a1 + 472) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                      + 4 * ((v77 + *(void *)(a1 + 472) - 1) & 0x3FF));
    if ((int)v73 >= 2 && v100 <= 65.0)
    {
      uint64_t v106 = (v73 - 2);
      unint64_t v107 = *(void *)(a1 + 328) + v106;
      unint64_t v108 = *(void *)(a1 + 400) + v106;
      uint64_t v109 = *(void *)(*(void *)(a1 + 376) + ((v108 >> 7) & 0x1FFFFFFFFFFFFF8));
      unint64_t v110 = *(void *)(a1 + 472) + v106;
      uint64_t v111 = *(void *)(*(void *)(a1 + 448) + ((v110 >> 7) & 0x1FFFFFFFFFFFFF8));
      *(_DWORD *)&v213[4] = *(_DWORD *)(*(void *)(*(void *)(a1 + 304) + ((v107 >> 7) & 0x1FFFFFFFFFFFFF8))
                                      + 4 * (v107 & 0x3FF));
      *(_DWORD *)&v213[8] = *(_DWORD *)(v109 + 4 * (v108 & 0x3FF));
      float v112 = *(float *)(v111 + 4 * (v110 & 0x3FF));
      if ((float)(v104 * v112) < 0.0)
      {
        sub_1905A6BF0(a1, 1);
        if (qword_1EB3BE828 != -1) {
          dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
        }
        float v113 = off_1EB3BE820;
        if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1902AF000, v113, OS_LOG_TYPE_DEBUG, "Likely transient.", buf, 2u);
        }
        if (!sub_1902D8400(115, 2)) {
          goto LABEL_231;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE828 == -1)
        {
LABEL_159:
          *(_WORD *)v205 = 0;
          uint64_t v114 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "BOOL CLOrientationDetector::updateZRotationStatus(float, float, float)", "CoreLocation: %s\n", v114);
          if (v114 != (char *)buf) {
            free(v114);
          }
LABEL_231:
          *(unsigned char *)(a1 + 963) = 0;
LABEL_114:
          float v75 = v194;
          float v74 = v195;
          float v78 = v196;
LABEL_115:
          float v88 = fabsf(v75);
          float v89 = fabsf(v74);
          float v90 = fabsf(v78);
          if (v88 >= v89) {
            float v89 = v88;
          }
          if (v89 >= v90) {
            float v91 = v89;
          }
          else {
            float v91 = v90;
          }
          if (v91 <= 60.0) {
            goto LABEL_166;
          }
          *(unsigned char *)(a1 + 964) = 1;
          if (v91 > 195.0)
          {
            int v92 = *(_DWORD *)(a1 + 976);
            BOOL v93 = __OFSUB__(v92, 1);
            int v94 = v92 - 1;
            if (v94 < 0 == v93) {
              *(_DWORD *)(a1 + 976) = v94;
            }
          }
          if (qword_1EB3BE828 != -1) {
            dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
          }
          uint64_t v95 = off_1EB3BE820;
          if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
          {
            *(float *)long long buf = 3.852e-34;
            *(double *)v213 = v91;
            _os_log_impl(&dword_1902AF000, v95, OS_LOG_TYPE_DEBUG, "Rotating! Current max gyro rate %.3f", buf, 0xCu);
          }
          if (!sub_1902D8400(115, 2)) {
            goto LABEL_166;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE828 != -1) {
            dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
          }
          *(_DWORD *)v205 = 134217984;
          *(double *)&v205[4] = v91;
          __double2 v96 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationDetector::checkForRotation()", "CoreLocation: %s\n", v96);
LABEL_284:
          if (v96 != (char *)buf) {
            free(v96);
          }
LABEL_166:
          double v11 = *a3;
          goto LABEL_167;
        }
LABEL_302:
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
        goto LABEL_159;
      }
      float v116 = fabsf(v112) - fabsf(v104);
      float v117 = 0.0;
      if (v99 > 45.0) {
        float v117 = 1.0;
      }
      float v118 = v116 + (float)(v117 * -5.0);
      if (v118 > 15.0)
      {
        ++*(_DWORD *)(a1 + 1032);
        int v119 = *(_DWORD *)(a1 + 952);
        if (v119 >= 1)
        {
          *(_DWORD *)(a1 + 952) = v119 - 1;
          if (v118 > 30.0 && v119 != 1)
          {
            *(_DWORD *)(a1 + 952) = v119 - 2;
            *(float *)(a1 + 956) = v99 * 0.8;
          }
          if (qword_1EB3BE828 != -1) {
            dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
          }
          __int16 v121 = off_1EB3BE820;
          if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
          {
            int v122 = *(_DWORD *)(a1 + 952);
            *(float *)long long buf = 3.8521e-34;
            *(double *)v213 = v118;
            *(_WORD *)&v213[8] = 1024;
            *(_DWORD *)&v213[10] = v122;
            _os_log_impl(&dword_1902AF000, v121, OS_LOG_TYPE_DEBUG, "Slowing. decrement numZRot,delta, %.3f, numZRot, %d", buf, 0x12u);
          }
          if (sub_1902D8400(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EB3BE828 != -1) {
              dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
            }
            int v175 = *(_DWORD *)(a1 + 952);
            *(_DWORD *)v205 = 134218240;
            *(double *)&v205[4] = v118;
            *(_WORD *)&v205[12] = 1024;
            *(_DWORD *)&v205[14] = v175;
            v176 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 2, "BOOL CLOrientationDetector::updateZRotationStatus(float, float, float)", "CoreLocation: %s\n", v176);
            if (v176 != (char *)buf) {
              free(v176);
            }
          }
        }
        if (v118 > 50.0 || *(_DWORD *)(a1 + 1032) > 3)
        {
          if (qword_1EB3BE828 != -1) {
            dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
          }
          double v124 = off_1EB3BE820;
          if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
          {
            int v125 = *(_DWORD *)(a1 + 1032);
            *(float *)long long buf = 3.8521e-34;
            *(double *)v213 = v118;
            *(_WORD *)&v213[8] = 1024;
            *(_DWORD *)&v213[10] = v125;
            _os_log_impl(&dword_1902AF000, v124, OS_LOG_TYPE_DEBUG, "ZDROP detected. deltaDrop, %.3f, fNumZDrops, %d", buf, 0x12u);
          }
          if (sub_1902D8400(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EB3BE828 != -1) {
              dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
            }
            int v177 = *(_DWORD *)(a1 + 1032);
            *(_DWORD *)v205 = 134218240;
            *(double *)&v205[4] = v118;
            *(_WORD *)&v205[12] = 1024;
            *(_DWORD *)&v205[14] = v177;
            v178 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 2, "BOOL CLOrientationDetector::updateZRotationStatus(float, float, float)", "CoreLocation: %s\n", v178);
            if (v178 != (char *)buf) {
              free(v178);
            }
          }
          sub_1905A6BF0(a1, 0);
          goto LABEL_231;
        }
        unint64_t v97 = *(void *)(a1 + 800);
      }
    }
    float v126 = 0.0;
    float v127 = 0.0;
    if (v97) {
      float v127 = *(float *)(a1 + 752) / (float)v97;
    }
    unint64_t v128 = *(void *)(a1 + 872);
    if (v128) {
      float v126 = *(float *)(a1 + 824) / (float)v128;
    }
    unint64_t v129 = *(void *)(a1 + 944);
    float v130 = 0.0;
    float v131 = 0.0;
    if (v129) {
      float v131 = *(float *)(a1 + 896) / (float)v129;
    }
    v201 = &unk_1EDFC7D60;
    float v202 = v127;
    float v203 = v126;
    float v204 = v131;
    if (v128) {
      float v130 = *(float *)(*(void *)(*(void *)(a1 + 840)
    }
                                  + (((v128 + *(void *)(a1 + 864) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                      + 4 * ((v128 + *(void *)(a1 + 864) - 1) & 0x3FF));
    if (v131 >= 90.0)
    {
      BOOL v133 = 0;
    }
    else
    {
      float v132 = (float)(v130 * 0.4) + (float)(v126 * 0.6);
      if ((float)(v132 - v131) > 60.0
        || v128
        && *(float *)(*(void *)(*(void *)(a1 + 840)
                                + (((v128 + *(void *)(a1 + 864) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                    + 4 * ((v128 + *(void *)(a1 + 864) - 1) & 0x3FF)) > 135.0)
      {
        BOOL v133 = 1;
      }
      else
      {
        float v134 = 0.0;
        if (v129 >= 2)
        {
          float v135 = (float)((float)v129 * *(float *)(a1 + 900)) - (float)(*(float *)(a1 + 896) * *(float *)(a1 + 896));
          if (v135 >= 0.0) {
            float v134 = v135 / (float)((v129 - 1) * v129);
          }
        }
        BOOL v133 = v132 > (float)(v131 * 1.05) && v134 < 400.0;
      }
    }
    float v136 = (float)(v78 + v105) * 0.5;
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
    }
    float v137 = fabsf(v136);
    float v138 = fabsf(v127);
    __int16 v139 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
    {
      int v140 = *(_DWORD *)(a1 + 952);
      *(float *)long long buf = 1.505e-36;
      *(_DWORD *)v213 = v133;
      *(_WORD *)&v213[4] = 2048;
      *(double *)&v213[6] = v204;
      *(_WORD *)&v213[14] = 2048;
      *(double *)&v213[16] = v138;
      *(_WORD *)&v213[24] = 1024;
      *(_DWORD *)&v213[26] = v140;
      *(_WORD *)v214 = 2048;
      *(double *)&v214[2] = v137;
      *(_WORD *)v215 = 2048;
      *(double *)&v215[2] = v100;
      *(_WORD *)v216 = 2048;
      *(double *)&v216[2] = v85;
      _os_log_impl(&dword_1902AF000, v139, OS_LOG_TYPE_DEBUG, "mostlyZ, %d, zRotMean.z, %.3f, zRot, %.3f, numZRots, %d, estCurr, %.3f, totalZ, %.2f, mag2MinusGrav, %.2f", buf, 0x40u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
      }
      int v171 = *(_DWORD *)(a1 + 952);
      *(_DWORD *)v205 = 67110656;
      *(_DWORD *)&v205[4] = v133;
      *(_WORD *)&v205[8] = 2048;
      *(double *)&v205[10] = v204;
      *(_WORD *)&v205[18] = 2048;
      *(double *)&v205[20] = v138;
      *(_WORD *)&v205[28] = 1024;
      *(_DWORD *)&v205[30] = v171;
      *(_WORD *)v206 = 2048;
      *(double *)&v206[2] = v137;
      *(_WORD *)v207 = 2048;
      *(double *)&v207[2] = v100;
      *(_WORD *)v208 = 2048;
      *(double *)&v208[2] = v85;
      v172 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "BOOL CLOrientationDetector::updateZRotationStatus(float, float, float)", "CoreLocation: %s\n", v172);
      if (v172 != (char *)buf) {
        free(v172);
      }
    }
    if (v85 >= 0.25 || v85 <= -0.85 || !v133) {
      goto LABEL_231;
    }
    BOOL v141 = v138 <= 45.0 || (int)v97 <= 1;
    BOOL v142 = !v141;
    if (v137 <= 150.0 && !v142) {
      goto LABEL_231;
    }
    int v143 = *(_DWORD *)(a1 + 952) + 1;
    *(_DWORD *)(a1 + 952) = v143;
    if (v100 <= 65.0)
    {
      float v146 = 0.0;
      if (v86 <= 0.3) {
        float v147 = 0.0;
      }
      else {
        float v147 = 1.0;
      }
      if (v86 > 0.1) {
        float v146 = 1.0;
      }
      float v148 = (float)((float)(v146 * 5.0) + 35.0) + (float)(v147 * 10.0);
      if (v143 >= (int)v97) {
        int v143 = v97;
      }
      if (v148 >= v100 || v143 <= 3) {
        goto LABEL_231;
      }
    }
    else
    {
      float v144 = 255.0;
      if (v100 > 100.0) {
        float v144 = 225.0;
      }
      if (fabsf(v104) > v144)
      {
        if (qword_1EB3BE828 != -1) {
          dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
        }
        __int16 v145 = off_1EB3BE820;
        if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1902AF000, v145, OS_LOG_TYPE_DEBUG, "Going through with 180 turn.", buf, 2u);
        }
        if (!sub_1902D8400(115, 2)) {
          goto LABEL_231;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE828 == -1) {
          goto LABEL_159;
        }
        goto LABEL_302;
      }
    }
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
    }
    v150 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v151 = *(void *)(a1 + 800);
      float v152 = 0.0;
      float v153 = 0.0;
      if (v151 >= 2)
      {
        float v154 = (float)((float)v151 * *(float *)(a1 + 756)) - (float)(*(float *)(a1 + 752) * *(float *)(a1 + 752));
        float v153 = 0.0;
        if (v154 >= 0.0) {
          float v153 = v154 / (float)((v151 - 1) * v151);
        }
      }
      unint64_t v155 = *(void *)(a1 + 872);
      if (v155 >= 2)
      {
        float v156 = (float)((float)v155 * *(float *)(a1 + 828)) - (float)(*(float *)(a1 + 824) * *(float *)(a1 + 824));
        if (v156 >= 0.0) {
          float v152 = v156 / (float)((v155 - 1) * v155);
        }
      }
      int v157 = *(_DWORD *)(a1 + 952);
      unint64_t v158 = *(void *)(a1 + 944);
      float v159 = 0.0;
      if (v158 >= 2)
      {
        float v160 = (float)((float)v158 * *(float *)(a1 + 900)) - (float)(*(float *)(a1 + 896) * *(float *)(a1 + 896));
        if (v160 >= 0.0) {
          float v159 = v160 / (float)((v158 - 1) * v158);
        }
      }
      *(void *)v205 = &unk_1EDFC7D60;
      *(float *)&v205[8] = v153;
      *(float *)&v205[12] = v152;
      *(float *)&v205[16] = v159;
      *(float *)long long buf = 1.5048e-36;
      *(_DWORD *)v213 = v97;
      *(_WORD *)&v213[4] = 1024;
      *(_DWORD *)&v213[6] = v157;
      *(_WORD *)&v213[10] = 2048;
      *(double *)&v213[12] = v153;
      _os_log_impl(&dword_1902AF000, v150, OS_LOG_TYPE_DEBUG, "Rotating around Z. numSamples: %d, numAccu, %d, zRotVar, %.3f", buf, 0x18u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
      }
      int v173 = *(_DWORD *)(a1 + 952);
      sub_1905A6B1C((uint64_t)&v197, a1 + 720);
      *(_DWORD *)v205 = 67109632;
      *(_DWORD *)&v205[4] = v97;
      *(_WORD *)&v205[8] = 1024;
      *(_DWORD *)&v205[10] = v173;
      *(_WORD *)&v205[14] = 2048;
      *(double *)&v205[16] = v198;
      v174 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "BOOL CLOrientationDetector::updateZRotationStatus(float, float, float)", "CoreLocation: %s\n", v174);
      if (v174 != (char *)buf) {
        free(v174);
      }
    }
    *(unsigned char *)(a1 + 963) = 1;
    goto LABEL_166;
  }
}

uint64_t sub_1905A6AA8(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 80);
  float v3 = 0.0;
  float v4 = 0.0;
  if (v2) {
    float v4 = *(float *)(a2 + 32) / (float)v2;
  }
  unint64_t v5 = *(void *)(a2 + 152);
  if (v5) {
    float v3 = *(float *)(a2 + 104) / (float)v5;
  }
  unint64_t v6 = *(void *)(a2 + 224);
  if (v6) {
    float v7 = *(float *)(a2 + 176) / (float)v6;
  }
  else {
    float v7 = 0.0;
  }
  *(void *)os_log_t result = &unk_1EDFC7D60;
  *(float *)(result + 8) = v4;
  *(float *)(result + 12) = v3;
  *(float *)(result + 16) = v7;
  return result;
}

uint64_t sub_1905A6B1C(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 80);
  float v3 = 0.0;
  float v4 = 0.0;
  if (v2 >= 2)
  {
    float v5 = (float)((float)v2 * *(float *)(a2 + 36)) - (float)(*(float *)(a2 + 32) * *(float *)(a2 + 32));
    float v4 = 0.0;
    if (v5 >= 0.0) {
      float v4 = v5 / (float)((v2 - 1) * v2);
    }
  }
  unint64_t v6 = *(void *)(a2 + 152);
  if (v6 >= 2)
  {
    float v7 = (float)((float)v6 * *(float *)(a2 + 108)) - (float)(*(float *)(a2 + 104) * *(float *)(a2 + 104));
    if (v7 >= 0.0) {
      float v3 = v7 / (float)((v6 - 1) * v6);
    }
  }
  unint64_t v8 = *(void *)(a2 + 224);
  float v9 = 0.0;
  if (v8 >= 2)
  {
    float v10 = (float)((float)v8 * *(float *)(a2 + 180)) - (float)(*(float *)(a2 + 176) * *(float *)(a2 + 176));
    if (v10 >= 0.0) {
      float v9 = v10 / (float)((v8 - 1) * v8);
    }
  }
  *(void *)os_log_t result = &unk_1EDFC7D60;
  *(float *)(result + 8) = v4;
  *(float *)(result + 12) = v3;
  *(float *)(result + 16) = v9;
  return result;
}

void sub_1905A6BF0(uint64_t a1, int a2)
{
  if (a2) {
    *(unsigned char *)(a1 + 96dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
  }
  *(void *)(a1 + 952) = 0;
  *(_DWORD *)(a1 + 1032) = 0;
  sub_1902B5164((void *)(a1 + 736));
  sub_1902B5164((void *)(a1 + 808));

  sub_1902B5164((void *)(a1 + 880));
}

uint64_t sub_1905A6C44(uint64_t result, void *a2)
{
  uint64_t v2 = a2[10];
  int v3 = 0;
  int v4 = 0;
  if (v2) {
    int v4 = *(_DWORD *)(*(void *)(a2[6] + (((unint64_t)(v2 + a2[9] - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
  }
                   + 4 * ((v2 + a2[9] - 1) & 0x3FF));
  uint64_t v5 = a2[19];
  if (v5) {
    int v3 = *(_DWORD *)(*(void *)(a2[15] + (((unint64_t)(v5 + a2[18] - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
  }
                   + 4 * ((v5 + a2[18] - 1) & 0x3FF));
  uint64_t v6 = a2[28];
  if (v6) {
    int v7 = *(_DWORD *)(*(void *)(a2[24] + (((unint64_t)(v6 + a2[27] - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
  }
                   + 4 * ((v6 + a2[27] - 1) & 0x3FF));
  else {
    int v7 = 0;
  }
  *(void *)os_log_t result = &unk_1EDFC7D60;
  *(_DWORD *)(result + 8) = v4;
  *(_DWORD *)(result + 12) = v3;
  *(_DWORD *)(result + 16) = v7;
  return result;
}

BOOL sub_1905A6D00(unsigned __int8 *a1, int *a2, void *a3)
{
  uint64_t v199 = *MEMORY[0x1E4F143B8];
  *((_DWORD *)a1 + 25dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
  unint64_t v6 = *((void *)a1 + 13);
  float v7 = 0.0;
  float v8 = 0.0;
  if (v6) {
    float v8 = *(float *)(*(void *)(*((void *)a1 + 9) + (((v6 + *((void *)a1 + 12) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
  }
                  + 4 * ((v6 + *((void *)a1 + 12) - 1) & 0x3FF));
  unint64_t v9 = *((void *)a1 + 22);
  if (v9) {
    float v7 = *(float *)(*(void *)(*((void *)a1 + 18) + (((v9 + *((void *)a1 + 21) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
  }
                  + 4 * ((v9 + *((void *)a1 + 21) - 1) & 0x3FF));
  unint64_t v10 = *((void *)a1 + 31);
  if (v10) {
    float v11 = *(float *)(*(void *)(*((void *)a1 + 27) + (((v10 + *((void *)a1 + 30) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
  }
                   + 4 * ((v10 + *((void *)a1 + 30) - 1) & 0x3FF));
  else {
    float v11 = 0.0;
  }
  float v158 = v8;
  float v159 = v7;
  float v160 = v11;
  if (a1[965] && *((double *)a1 + 126) > 0.0)
  {
    a1[961] = 0;
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
    }
    __int16 v12 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134218496;
      *(double *)&uint8_t buf[4] = v158;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v159;
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(double *)&buf[24] = v160;
      _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_DEBUG, "onStartup, x, %.3f, y, %.3f, z, %.3f", buf, 0x20u);
    }
    float v157 = 0.0;
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
      }
      *(_DWORD *)int v165 = 134218496;
      *(double *)&v165[4] = v158;
      *(_WORD *)&v165[12] = 2048;
      *(double *)&v165[14] = v159;
      *(_WORD *)&v165[22] = 2048;
      *(double *)&v165[24] = v160;
      unint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationDetector::calcCurrentOrientation()", "CoreLocation: %s\n", v13);
      if (v13 != buf) {
        free(v13);
      }
    }
    goto LABEL_164;
  }
  float v14 = 0.0;
  float v15 = 0.0;
  if (v6) {
    float v15 = *((float *)a1 + 14) / (float)v6;
  }
  if (v9) {
    float v14 = *((float *)a1 + 32) / (float)v9;
  }
  if (v10) {
    float v16 = *((float *)a1 + 50) / (float)v10;
  }
  else {
    float v16 = 0.0;
  }
  float v158 = v15;
  float v159 = v14;
  float v160 = v16;
  float v17 = (float)((float)(v14 * v14) + (float)(v15 * v15)) + (float)(v16 * v16);
  if (v6 >= *((void *)a1 + 6))
  {
    float v18 = 0.0;
    float v19 = 0.0;
    if (v6 >= 2)
    {
      float v20 = (float)((float)v6 * *((float *)a1 + 15)) - (float)(*((float *)a1 + 14) * *((float *)a1 + 14));
      float v19 = 0.0;
      if (v20 >= 0.0) {
        float v19 = v20 / (float)((v6 - 1) * v6);
      }
    }
    if (v9 >= 2)
    {
      float v21 = (float)((float)v9 * *((float *)a1 + 33)) - (float)(*((float *)a1 + 32) * *((float *)a1 + 32));
      if (v21 >= 0.0) {
        float v18 = v21 / (float)((v9 - 1) * v9);
      }
    }
    float v22 = 0.0;
    if (v10 >= 2)
    {
      float v23 = (float)((float)v10 * *((float *)a1 + 51)) - (float)(*((float *)a1 + 50) * *((float *)a1 + 50));
      if (v23 >= 0.0) {
        float v22 = v23 / (float)((v10 - 1) * v10);
      }
    }
    double v161 = &unk_1EDFC7D60;
    float v162 = v19;
    float v163 = v18;
    float v164 = v22;
    if (v19 >= v18) {
      float v18 = v19;
    }
    if (v18 < v22) {
      float v18 = v22;
    }
    float v157 = v18;
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
    }
    unint64_t v24 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134219776;
      *(double *)&uint8_t buf[4] = v162;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v163;
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(double *)&buf[24] = v164;
      *(_WORD *)&unsigned char buf[32] = 2048;
      *(double *)&buf[34] = v158;
      __int16 v183 = 2048;
      double v184 = v159;
      __int16 v185 = 2048;
      double v186 = v160;
      __int16 v187 = 2048;
      double v188 = v157;
      __int16 v189 = 2048;
      *(double *)float v190 = v17;
      _os_log_impl(&dword_1902AF000, v24, OS_LOG_TYPE_DEBUG, "acc variance, %.3f, %.3f, %.3f, acc mean, %.3f, %.3f, %.3f, maxVar, %.3f, mag2,%.3f", buf, 0x52u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
      }
      *(_DWORD *)int v165 = 134219776;
      *(double *)&v165[4] = v162;
      *(_WORD *)&v165[12] = 2048;
      *(double *)&v165[14] = v163;
      *(_WORD *)&v165[22] = 2048;
      *(double *)&v165[24] = v164;
      *(_WORD *)&v165[32] = 2048;
      *(double *)&v165[34] = v158;
      __int16 v166 = 2048;
      double v167 = v159;
      __int16 v168 = 2048;
      double v169 = v160;
      __int16 v170 = 2048;
      double v171 = v157;
      __int16 v172 = 2048;
      *(double *)int v173 = v17;
      int v143 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "float CLOrientationDetector::getAccStats(CLVector3d<float> &, float &)", "CoreLocation: %s\n", v143);
      if (v143 != buf) {
        free(v143);
      }
    }
  }
  else
  {
    float v157 = 3.4028e38;
  }
  float v25 = fabsf(v17 + -1.0);
  if (a1[16])
  {
    float v26 = fabsf(v160);
    if (a1[963])
    {
      if (v26 > 0.925) {
        goto LABEL_55;
      }
      if ((float)(*((float *)a1 + 257) * 3.5) < v157) {
        goto LABEL_54;
      }
      float v27 = 0.0;
      if (fabsf(*((float *)a1 + 239)) > 80.0) {
        float v27 = 1.0;
      }
      if ((float)((float)(v27 * 0.1) + 0.3) < v25)
      {
LABEL_54:
        uint64_t v28 = *((void *)a1 + 109);
        if (!v28
          || *(float *)(*(void *)(*((void *)a1 + 105)
                                  + (((unint64_t)(v28 + *((void *)a1 + 108) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                      + 4 * ((v28 + *((void *)a1 + 108) - 1) & 0x3FF)) < 90.0)
        {
LABEL_55:
          *(_WORD *)(a1 + 963) = 256;
          float v29 = *((float *)a1 + 239) * 0.8;
          *((float *)a1 + 239) = v29;
          --*((_DWORD *)a1 + 238);
          if (qword_1EB3BE828 != -1) {
            dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
          }
          float v30 = off_1EB3BE820;
          if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1902AF000, v30, OS_LOG_TYPE_DEBUG, "Nixed rotationAroundZ state.", buf, 2u);
          }
          if (sub_1902D8400(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EB3BE828 != -1) {
              dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
            }
            *(_WORD *)int v165 = 0;
            float v147 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationDetector::nixRotationAroundZIfNecessary(float, float, float)", "CoreLocation: %s\n", v147);
            if (v147 != buf) {
              free(v147);
            }
          }
        }
      }
      uint64_t v31 = *((void *)a1 + 42);
      int v32 = 0;
      int v33 = 0;
      if (v31) {
        int v33 = *(_DWORD *)(*(void *)(*((void *)a1 + 38)
      }
                                    + (((unint64_t)(v31 + *((void *)a1 + 41) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                        + 4 * ((v31 + *((void *)a1 + 41) - 1) & 0x3FF));
      uint64_t v34 = *((void *)a1 + 51);
      if (v34) {
        int v32 = *(_DWORD *)(*(void *)(*((void *)a1 + 47)
      }
                                    + (((unint64_t)(v34 + *((void *)a1 + 50) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                        + 4 * ((v34 + *((void *)a1 + 50) - 1) & 0x3FF));
      uint64_t v35 = *((void *)a1 + 60);
      if (v35) {
        float v36 = *(float *)(*(void *)(*((void *)a1 + 56)
      }
                                   + (((unint64_t)(v35 + *((void *)a1 + 59) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                       + 4 * ((v35 + *((void *)a1 + 59) - 1) & 0x3FF));
      else {
        float v36 = 0.0;
      }
      *(void *)long long buf = &unk_1EDFC7D60;
      *(_DWORD *)&uint8_t buf[8] = v33;
      *(_DWORD *)&unsigned char buf[12] = v32;
      *(float *)&uint8_t buf[16] = v36;
      if (fabsf(v36) <= 30.0) {
        goto LABEL_97;
      }
      uint64_t v39 = *((void *)a1 + 13);
      uint64_t v40 = *((void *)a1 + 22);
      uint64_t v41 = *((void *)a1 + 31);
      float v42 = v41
          ? *(float *)(*(void *)(*((void *)a1 + 27)
                                 + (((unint64_t)(v41 + *((void *)a1 + 30) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                     + 4 * ((v41 + *((void *)a1 + 30) - 1) & 0x3FF))
          : 0.0;
      if (fabsf(v42) >= 0.9) {
        goto LABEL_97;
      }
      float v43 = 0.0;
      float v44 = 0.0;
      if (v39) {
        float v44 = *(float *)(*(void *)(*((void *)a1 + 9)
      }
                                   + (((unint64_t)(v39 + *((void *)a1 + 12) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                       + 4 * ((v39 + *((void *)a1 + 12) - 1) & 0x3FF));
      if (v40) {
        float v43 = *(float *)(*(void *)(*((void *)a1 + 18)
      }
                                   + (((unint64_t)(v40 + *((void *)a1 + 21) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                       + 4 * ((v40 + *((void *)a1 + 21) - 1) & 0x3FF));
      if (v41) {
        float v45 = *(float *)(*(void *)(*((void *)a1 + 27)
      }
                                   + (((unint64_t)(v41 + *((void *)a1 + 30) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                       + 4 * ((v41 + *((void *)a1 + 30) - 1) & 0x3FF));
      else {
        float v45 = 0.0;
      }
      float v158 = v44;
      float v159 = v43;
      float v160 = v45;
      a1[962] = 0;
      *((_DWORD *)a1 + 245) = 1055286886;
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
      }
      float v46 = off_1EB3BE820;
      if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1902AF000, v46, OS_LOG_TYPE_DEBUG, "Ready for orientation change via rotation", buf, 2u);
      }
      if (!sub_1902D8400(115, 2)) {
        goto LABEL_97;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
      }
      *(_WORD *)int v165 = 0;
      float v38 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationDetector::setUpForOrienationChangeViaRotation(CLVector3d<float> &)", "CoreLocation: %s\n", v38);
LABEL_391:
      if (v38 != buf) {
        free(v38);
      }
      goto LABEL_97;
    }
    if (*((float *)a1 + 257) <= v157) {
      goto LABEL_97;
    }
    if (v26 >= 0.85 || *((_DWORD *)a1 + 251))
    {
      if (v26 > 0.9) {
        *((_DWORD *)a1 + 251) = 0;
      }
    }
    else
    {
      *((_DWORD *)a1 + 251) = 1;
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
      }
      float v37 = off_1EB3BE820;
      if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1902AF000, v37, OS_LOG_TYPE_DEBUG, "Setting lastPrimaryOrientation.", buf, 2u);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE828 != -1) {
          dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
        }
        *(_WORD *)int v165 = 0;
        float v38 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationDetector::updateLastPrimaryOrientationForZStats(float, float)", "CoreLocation: %s\n", v38);
        goto LABEL_391;
      }
    }
  }
LABEL_97:
  a1[961] = 1;
  float v47 = 1.0;
  float v48 = 1.5;
  if (*a1) {
    float v48 = 1.0;
  }
  if (!a1[963])
  {
    if (!*a1) {
      float v47 = 2.25;
    }
    if ((float)(v47 * *((float *)a1 + 256)) <= v157 || (float)(v48 * 0.15) <= v25)
    {
      if ((float)(v48 * 0.3) > v25)
      {
        float v51 = v47 * *((float *)a1 + 257);
        if (v51 > v157)
        {
          char v49 = a1[964];
          if (v49) {
            goto LABEL_105;
          }
LABEL_110:
          int v50 = 0;
          ++*((_DWORD *)a1 + 244);
          goto LABEL_118;
        }
        if (*((void *)a1 + 13) >= *((void *)a1 + 6)
          && fabsf(v160) < 0.95
          && (fabsf(v158) > 0.45 || fabsf(v159) > 0.45)
          && v51 * 4.0 > v157)
        {
          char v49 = 0;
          goto LABEL_110;
        }
      }
      char v49 = 0;
      int v50 = 1;
      goto LABEL_118;
    }
  }
  if (!a1[964])
  {
    int v50 = 0;
    a1[961] = 0;
    *((_DWORD *)a1 + 244) = 0;
    char v49 = 1;
    goto LABEL_118;
  }
LABEL_105:
  char v49 = 0;
  int v50 = 0;
LABEL_118:
  if (a1[16] && *((void *)a1 + 42) >= *((void *)a1 + 35))
  {
    unint64_t v52 = *((void *)a1 + 71);
    if (v52 < *((void *)a1 + 64)) {
      char v49 = 1;
    }
    if ((v49 & 1) == 0)
    {
      unsigned int v53 = *((_DWORD *)a1 + 244);
      if (v53 < 4 * (int)(float)(*((float *)a1 + 1) / 10.0))
      {
        float v54 = 0.0;
        float v55 = 0.0;
        if (v52 >= 2)
        {
          float v56 = (float)((float)v52 * *((float *)a1 + 131)) - (float)(*((float *)a1 + 130) * *((float *)a1 + 130));
          float v55 = 0.0;
          if (v56 >= 0.0) {
            float v55 = v56 / (float)((v52 - 1) * v52);
          }
        }
        unint64_t v57 = *((void *)a1 + 80);
        if (v57 >= 2)
        {
          float v58 = (float)((float)v57 * *((float *)a1 + 149)) - (float)(*((float *)a1 + 148) * *((float *)a1 + 148));
          if (v58 >= 0.0) {
            float v54 = v58 / (float)((v57 - 1) * v57);
          }
        }
        unint64_t v59 = *((void *)a1 + 89);
        float v60 = 0.0;
        if (v59 >= 2)
        {
          float v61 = (float)((float)v59 * *((float *)a1 + 167)) - (float)(*((float *)a1 + 166) * *((float *)a1 + 166));
          if (v61 >= 0.0) {
            float v60 = v61 / (float)((v59 - 1) * v59);
          }
        }
        *(void *)long long buf = &unk_1EDFC7D60;
        *(float *)&uint8_t buf[8] = v55;
        *(float *)&unsigned char buf[12] = v54;
        *(float *)&uint8_t buf[16] = v60;
        if (v55 >= v54) {
          float v54 = v55;
        }
        if (v54 >= v60) {
          float v62 = v54;
        }
        else {
          float v62 = v60;
        }
        if (v25 < 0.45 && (float)(*((float *)a1 + 257) * 4.0) > v157 && v62 < 2000.0)
        {
          sub_1905A6AA8((uint64_t)v165, (uint64_t)(a1 + 488));
          float v63 = fabsf(*(float *)&v165[8]);
          float v64 = fabsf(*(float *)&v165[12]);
          float v65 = fabsf(*(float *)&v165[16]);
          if (v63 < v64) {
            float v63 = v64;
          }
          if (v63 < v65) {
            float v63 = v65;
          }
          if (v63 < 30.0 || v62 < 800.0 && v63 < 60.0)
          {
            sub_1905A6C44((uint64_t)&v161, (void *)a1 + 32);
            float v66 = fabsf(v162);
            float v67 = fabsf(v163);
            float v68 = fabsf(v164);
            if (v66 < v67) {
              float v66 = v67;
            }
            if (v66 < v68) {
              float v66 = v68;
            }
            if (!a1[964] || v66 < 175.0) {
              *((_DWORD *)a1 + 244) = v53 + 2;
            }
            int v50 = 0;
          }
        }
      }
    }
  }
  if (v50)
  {
    *((_DWORD *)a1 + 244) = 0;
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
    }
    double v69 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v69, OS_LOG_TYPE_DEBUG, "Resetting stable count", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
      }
      *(_WORD *)int v165 = 0;
      BOOL v142 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "BOOL CLOrientationDetector::deviceIsMoving(const CLVector3d<float> &, float, float)", "CoreLocation: %s\n", v142);
      if (v142 != buf) {
        free(v142);
      }
    }
  }
  if (!a1[961] || (a1[962] = 1, *((_DWORD *)a1 + 244) >= (4 * (int)(float)(*((float *)a1 + 1) / 10.0))))
  {
LABEL_164:
    unsigned int v70 = *a1;
    if (*a1)
    {
      float v71 = 0.45;
      if (a1[962]) {
        float v71 = 0.5;
      }
      float v72 = *((float *)a1 + 245);
      if (v72 <= v71) {
        float v73 = v71;
      }
      else {
        float v73 = (float)(v72 + v71) * 0.5;
      }
      *((float *)a1 + 245) = v73;
      float v74 = 0.35;
    }
    else
    {
      float v73 = 0.5;
      float v74 = 0.4;
    }
    if (v159 < 0.0) {
      int v75 = 1;
    }
    else {
      int v75 = 2;
    }
    if (v159 <= 0.0) {
      float v76 = -v159;
    }
    else {
      float v76 = v159;
    }
    if (v158 < 0.0) {
      int v77 = 3;
    }
    else {
      int v77 = 4;
    }
    if (v158 <= 0.0) {
      float v78 = -v158;
    }
    else {
      float v78 = v158;
    }
    if (v76 > v78)
    {
      if (!a1[963] || (float v79 = 0.5, v78 >= 0.5) || a1[961] || v160 <= -0.85)
      {
        if (v78 <= 0.15 && v160 >= -0.8) {
          float v78 = 0.0;
        }
        if (v159 < 0.0 || v70 < 2)
        {
          float v79 = v73;
        }
        else
        {
          float v74 = v74 + 0.15;
          float v79 = v73 + 0.15;
        }
      }
      else
      {
        float v78 = 0.0;
        float v74 = 0.4;
      }
      if (v76 > v79 && (float)(v76 - v78) > v74)
      {
        *((_DWORD *)a1 + 25dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = v75;
        float v73 = v79;
        goto LABEL_287;
      }
      float v73 = v79;
      goto LABEL_261;
    }
    if (!a1[963] || v76 >= 0.5 || a1[961] || v160 <= -0.85)
    {
      if (v76 <= 0.15 && v160 >= -0.8) {
        float v76 = 0.0;
      }
    }
    else
    {
      float v76 = 0.0;
      float v74 = 0.4;
      float v73 = 0.5;
    }
    if (v158 >= 0.0 && v70 >= 2 && a1[17])
    {
      double v82 = *((double *)a1 + 126) - *((double *)a1 + 121);
      if (v76 >= 0.05)
      {
LABEL_227:
        int v83 = 0;
        goto LABEL_228;
      }
      int v83 = 0;
      if (v160 < -0.9 && v160 > -1.1)
      {
        uint64_t v84 = 0;
        while (1)
        {
          if (byte_19060C9C0[v84] == v70)
          {
            if (a1[1036])
            {
              if (!byte_19060C9C0[v84 + 13]) {
                goto LABEL_226;
              }
            }
            else if (byte_19060C9C0[v84 + 13])
            {
              goto LABEL_226;
            }
            float v85 = &byte_19060C9C0[v84];
            if (v82 < 5.0 || byte_19060C9C0[v84 + 12] == 0)
            {
              float v88 = *((float *)v85 + 1);
              float v87 = *((float *)v85 + 2);
              if (vabds_f32(v78, v88) <= v87)
              {
                if (qword_1EB3BE828 != -1) {
                  dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
                }
                float v132 = off_1EB3BE820;
                if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)long long buf = 134218240;
                  *(double *)&uint8_t buf[4] = v88;
                  *(_WORD *)&unsigned char buf[12] = 2048;
                  *(double *)&buf[14] = v87;
                  _os_log_impl(&dword_1902AF000, v132, OS_LOG_TYPE_DEBUG, "Within magic angle limits: Threshold %.4f, Delta %.4f", buf, 0x16u);
                }
                if (sub_1902D8400(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EB3BE828 != -1) {
                    dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
                  }
                  *(_DWORD *)int v165 = 134218240;
                  *(double *)&v165[4] = v88;
                  *(_WORD *)&v165[12] = 2048;
                  *(double *)&v165[14] = v87;
                  float v156 = (char *)_os_log_send_and_compose_impl();
                  sub_1902D398C("Generic", 1, 0, 2, "static BOOL CLOrientationDetector::withinMagicAngleLimits(FormFactor, BOOL, float, BOOL)", "CoreLocation: %s\n", v156);
                  if (v156 != buf) {
                    free(v156);
                  }
                }
                int v83 = 1;
                break;
              }
            }
          }
LABEL_226:
          v84 += 16;
          if (v84 == 320) {
            goto LABEL_227;
          }
        }
      }
LABEL_228:
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
      }
      float v89 = off_1EB3BE820;
      if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
      {
        int v90 = *a1;
        double v91 = *((double *)a1 + 126) - *((double *)a1 + 121);
        *(_DWORD *)long long buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v90;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v82 < 5.0;
        *(_WORD *)&buf[14] = 2048;
        *(double *)&uint8_t buf[16] = v91;
        _os_log_impl(&dword_1902AF000, v89, OS_LOG_TYPE_DEBUG, "Ipad %d: screenJustTurnedOn, %d, deltaTime %.5f", buf, 0x18u);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE828 != -1) {
          dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
        }
        int v151 = *a1;
        double v152 = *((double *)a1 + 126) - *((double *)a1 + 121);
        *(_DWORD *)int v165 = 67109632;
        *(_DWORD *)&v165[4] = v151;
        *(_WORD *)&v165[8] = 1024;
        *(_DWORD *)&v165[10] = v82 < 5.0;
        *(_WORD *)&v165[14] = 2048;
        *(double *)&v165[16] = v152;
        float v153 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "BOOL CLOrientationDetector::atMagicCoverRestingAngle(const float *, float, float, float)", "CoreLocation: %s\n", v153);
        if (v153 != buf) {
          free(v153);
        }
      }
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
      }
      int v92 = off_1EB3BE820;
      if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
      {
        int v93 = a1[962];
        *(_DWORD *)long long buf = 67110144;
        *(_DWORD *)&uint8_t buf[4] = v82 < 5.0;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = 0;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&uint8_t buf[16] = v83;
        *(_WORD *)&buf[20] = 1024;
        *(_DWORD *)&unsigned char buf[22] = v93;
        *(_WORD *)&buf[26] = 2048;
        *(double *)&unsigned char buf[28] = v157;
        _os_log_impl(&dword_1902AF000, v92, OS_LOG_TYPE_DEBUG, "allowShallow, %d, magicCaseRest, %d, tiltIn, %d, wasMoving, %d, maxVar, %.5f", buf, 0x24u);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE828 != -1) {
          dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
        }
        int v154 = a1[962];
        *(_DWORD *)int v165 = 67110144;
        *(_DWORD *)&v165[4] = v82 < 5.0;
        *(_WORD *)&v165[8] = 1024;
        *(_DWORD *)&v165[10] = 0;
        *(_WORD *)&v165[14] = 1024;
        *(_DWORD *)&v165[16] = v83;
        *(_WORD *)&v165[20] = 1024;
        *(_DWORD *)&v165[22] = v154;
        *(_WORD *)&v165[26] = 2048;
        *(double *)&v165[28] = v157;
        unint64_t v155 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "BOOL CLOrientationDetector::atMagicCoverRestingAngle(const float *, float, float, float)", "CoreLocation: %s\n", v155);
        if (v155 != buf) {
          free(v155);
        }
      }
      char v94 = v83 ^ 1;
      if (a1[962]) {
        char v94 = 1;
      }
      if ((v94 & 1) != 0 || (float)(*((float *)a1 + 256) * 0.025) <= v157)
      {
        if (*((double *)a1 + 124) > 0.0) {
          *((void *)a1 + 124) = 0xBFF0000000000000;
        }
      }
      else
      {
        double v95 = *((double *)a1 + 124);
        if (v95 < 0.0)
        {
          double v95 = *((double *)a1 + 126);
          *((double *)a1 + 124) = v95;
        }
        if (a1[965] || *((_DWORD *)a1 + 246) == 4 || *((double *)a1 + 126) - v95 > dbl_19060C9B0[*a1 == 2])
        {
          *((_DWORD *)a1 + 25dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 4;
          *((void *)a1 + 124) = 0xBFF0000000000000;
          goto LABEL_287;
        }
      }
    }
    if ((float)(v78 - v73) > 0.0 && (float)(v78 - v76) > v74)
    {
      if (*a1 >= 2u
        || (float)(v78 - v73) > 0.15
        && (int v96 = *((_DWORD *)a1 + 260) + 1, *((_DWORD *)a1 + 260) = v96, v96 >= (int)(float)(*((float *)a1 + 1) * 0.3)))
      {
        *((_DWORD *)a1 + 25dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = v77;
LABEL_287:
        a1[965] = 0;
        if (!a1[961])
        {
          a1[962] = 0;
          if (a1[16])
          {
            if (*a1 >= 2u && *((float *)a1 + 256) > v157)
            {
              unint64_t v117 = *((void *)a1 + 71);
              float v118 = 0.0;
              float v119 = 0.0;
              if (v117) {
                float v119 = *((float *)a1 + 130) / (float)v117;
              }
              unint64_t v120 = *((void *)a1 + 80);
              if (v120) {
                float v118 = *((float *)a1 + 148) / (float)v120;
              }
              unint64_t v121 = *((void *)a1 + 89);
              if (v121) {
                float v122 = *((float *)a1 + 166) / (float)v121;
              }
              else {
                float v122 = 0.0;
              }
              *(void *)int v165 = &unk_1EDFC7D60;
              *(float *)&v165[8] = v119;
              *(float *)&v165[12] = v118;
              *(float *)&v165[16] = v122;
              float v127 = fabsf(v122);
              float v128 = fabsf(v119);
              float v129 = fabsf(v118);
              if (v128 >= v129) {
                float v129 = v128;
              }
              if (v127 >= v129) {
                float v129 = v127;
              }
              if ((*((int *)a1 + 238) < 2 || *((_DWORD *)a1 + 250) == *((_DWORD *)a1 + 246))
                && (fabsf(v160) > 0.85 || v129 < 30.0))
              {
                sub_1905A6BF0((uint64_t)a1, 1);
                if (qword_1EB3BE828 != -1) {
                  dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
                }
                float v130 = off_1EB3BE820;
                if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)long long buf = 0;
                  _os_log_impl(&dword_1902AF000, v130, OS_LOG_TYPE_DEBUG, "Not filling Zrot buffer.", buf, 2u);
                }
                if (sub_1902D8400(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EB3BE828 != -1) {
                    dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
                  }
                  LOWORD(v161) = 0;
                  float v131 = (char *)_os_log_send_and_compose_impl();
                  sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationDetector::resetZStatsWhenQuiescent(float, float)", "CoreLocation: %s\n", v131);
                  if (v131 != buf) {
                    free(v131);
                  }
                }
              }
            }
          }
        }
        if (qword_1EB3BE828 != -1) {
          dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
        }
        float v104 = off_1EB3BE820;
        if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
        {
          int v105 = *((_DWORD *)a1 + 250);
          int v106 = a1[961];
          int v107 = a1[962];
          int v108 = *((_DWORD *)a1 + 246);
          int v109 = *((_DWORD *)a1 + 244);
          uint64_t v110 = *((void *)a1 + 126);
          *(_DWORD *)long long buf = 134221056;
          *(double *)&uint8_t buf[4] = v74;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(double *)&buf[14] = v73;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(double *)&buf[24] = v158;
          *(_WORD *)&unsigned char buf[32] = 2048;
          *(double *)&buf[34] = v159;
          __int16 v183 = 2048;
          double v184 = v160;
          __int16 v185 = 2048;
          double v186 = (float)(v76 - v78);
          __int16 v187 = 2048;
          double v188 = v76;
          __int16 v189 = 1024;
          *(_DWORD *)float v190 = v105;
          *(_WORD *)&v190[4] = 1024;
          *(_DWORD *)&v190[6] = v106;
          __int16 v191 = 1024;
          int v192 = v107;
          __int16 v193 = 1024;
          int v194 = v108;
          __int16 v195 = 1024;
          int v196 = v109;
          __int16 v197 = 2048;
          uint64_t v198 = v110;
          _os_log_impl(&dword_1902AF000, v104, OS_LOG_TYPE_DEBUG, "deltaWeightThreshold, %.3f, tiltWeightTheshold, %.3f, currAcc, %.3f, %.3f, %.3f, deltaWeight, %.3f, tilt, %.3f, fCurrentOrientation, %d, isMoving, %d, wasMoving, %d, fLastClearOrientation, %d, fStableCount, %d, DetectionTime, %f", buf, 0x70u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE828 != -1) {
            dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
          }
          int v133 = *((_DWORD *)a1 + 250);
          int v134 = a1[961];
          int v135 = a1[962];
          int v136 = *((_DWORD *)a1 + 246);
          int v137 = *((_DWORD *)a1 + 244);
          uint64_t v138 = *((void *)a1 + 126);
          *(_DWORD *)int v165 = 134221056;
          *(double *)&v165[4] = v74;
          *(_WORD *)&v165[12] = 2048;
          *(double *)&v165[14] = v73;
          *(_WORD *)&v165[22] = 2048;
          *(double *)&v165[24] = v158;
          *(_WORD *)&v165[32] = 2048;
          *(double *)&v165[34] = v159;
          __int16 v166 = 2048;
          double v167 = v160;
          __int16 v168 = 2048;
          double v169 = (float)(v76 - v78);
          __int16 v170 = 2048;
          double v171 = v76;
          __int16 v172 = 1024;
          *(_DWORD *)int v173 = v133;
          *(_WORD *)&v173[4] = 1024;
          *(_DWORD *)&v173[6] = v134;
          __int16 v174 = 1024;
          int v175 = v135;
          __int16 v176 = 1024;
          int v177 = v136;
          __int16 v178 = 1024;
          int v179 = v137;
          __int16 v180 = 2048;
          uint64_t v181 = v138;
          __int16 v139 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationDetector::calcCurrentOrientation()", "CoreLocation: %s\n", v139);
          if (v139 != buf) {
            free(v139);
          }
        }
        goto LABEL_293;
      }
    }
LABEL_261:
    if (*((_DWORD *)a1 + 250)) {
      goto LABEL_287;
    }
    if (a1[16] && a1[963])
    {
      uint64_t v97 = *((void *)a1 + 60);
      float v98 = v97
          ? *(float *)(*(void *)(*((void *)a1 + 56)
                                 + (((unint64_t)(v97 + *((void *)a1 + 59) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                     + 4 * ((v97 + *((void *)a1 + 59) - 1) & 0x3FF))
          : 0.0;
      if (fabsf(v98) > 60.0) {
        goto LABEL_287;
      }
    }
    if (v76 >= v78) {
      float v99 = v76;
    }
    else {
      float v99 = v78;
    }
    if (v160 <= 0.0)
    {
      if (v160 >= -0.5 || (float)((float)-v160 - v99) <= 0.4) {
        goto LABEL_279;
      }
      int v100 = 5;
    }
    else
    {
      if (v160 <= 0.5 || (float)(v160 - v99) <= 0.4) {
        goto LABEL_279;
      }
      int v100 = 6;
    }
    *((_DWORD *)a1 + 25dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = v100;
LABEL_279:
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
    }
    float v101 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEBUG))
    {
      if (v160 <= 0.0) {
        float v102 = -v160;
      }
      else {
        float v102 = v160;
      }
      int v103 = *((_DWORD *)a1 + 250);
      *(_DWORD *)long long buf = 134218496;
      *(double *)&uint8_t buf[4] = v102;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v99;
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&buf[24] = v103;
      _os_log_impl(&dword_1902AF000, v101, OS_LOG_TYPE_DEBUG, "FaceUp/Down: maxWeight,%.3f, 2ndWeight,%.3f, orientation,%d", buf, 0x1Cu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
      }
      if (v160 <= 0.0) {
        float v148 = -v160;
      }
      else {
        float v148 = v160;
      }
      int v149 = *((_DWORD *)a1 + 250);
      *(_DWORD *)int v165 = 134218496;
      *(double *)&v165[4] = v148;
      *(_WORD *)&v165[12] = 2048;
      *(double *)&v165[14] = v99;
      *(_WORD *)&v165[22] = 1024;
      *(_DWORD *)&v165[24] = v149;
      v150 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationDetector::calcCurrentOrientation()", "CoreLocation: %s\n", v150);
      if (v150 != buf) {
        free(v150);
      }
    }
    goto LABEL_287;
  }
LABEL_293:
  int v111 = *((_DWORD *)a1 + 250);
  *a2 = v111;
  if (*((_DWORD *)a1 + 250))
  {
    *((_DWORD *)a1 + 26dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
  }
  else
  {
    int v116 = *((_DWORD *)a1 + 246);
    if (v116 && v116 != 7)
    {
      *a2 = v116;
      int v111 = v116;
    }
  }
  int v112 = *((_DWORD *)a1 + 246);
  *a3 = *((void *)a1 + 126);
  if (v111 != v112)
  {
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
    }
    float v113 = off_1EB3BE820;
    if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v114 = *((int *)a1 + 246);
      if (v114 > 6) {
        __int16 v115 = "Unexpected";
      }
      else {
        __int16 v115 = off_1E5690028[v114];
      }
      uint64_t v123 = *a2;
      if (v123 > 6) {
        double v124 = "Unexpected";
      }
      else {
        double v124 = off_1E5690028[v123];
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = v115;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v124;
      _os_log_impl(&dword_1902AF000, v113, OS_LOG_TYPE_DEFAULT, "Notify from, %{public}s -> %{public}s ", buf, 0x16u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE828 != -1) {
        dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
      }
      uint64_t v140 = *((int *)a1 + 246);
      if (v140 > 6) {
        BOOL v141 = "Unexpected";
      }
      else {
        BOOL v141 = off_1E5690028[v140];
      }
      uint64_t v144 = *a2;
      if (v144 > 6) {
        __int16 v145 = "Unexpected";
      }
      else {
        __int16 v145 = off_1E5690028[v144];
      }
      *(_DWORD *)int v165 = 136446466;
      *(void *)&v165[4] = v141;
      *(_WORD *)&v165[12] = 2082;
      *(void *)&v165[14] = v145;
      float v146 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "BOOL CLOrientationDetector::calcOrientation(CMDeviceOrientationType &, CLMotionTypeTimestamp &)", "CoreLocation: %s\n", v146);
      if (v146 != buf) {
        free(v146);
      }
    }
    *((_DWORD *)a1 + 246) = *((_DWORD *)a1 + 250);
    *((_DWORD *)a1 + 245) = 1055286886;
    a1[962] = 0;
    sub_1905A6BF0((uint64_t)a1, 1);
    int v125 = *((_DWORD *)a1 + 250);
    if ((v125 - 5) < 2) {
      int v125 = 0;
    }
    *((_DWORD *)a1 + 251) = v125;
  }
  return v111 != v112;
}

void sub_1905A9044(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE828 != -1) {
    dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
  }
  uint64_t v2 = off_1EB3BE820;
  if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_INFO, "Disabling gyro.", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
    }
    int v3 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationDetector::disableGyro()", "CoreLocation: %s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  if (*(unsigned char *)(a1 + 16))
  {
    *(unsigned char *)(a1 + 16) = 0;
    sub_1902B5164((void *)(a1 + 272));
    sub_1902B5164((void *)(a1 + 344));
    sub_1902B5164((void *)(a1 + 416));
    sub_1902B5164((void *)(a1 + 504));
    sub_1902B5164((void *)(a1 + 576));
    sub_1902B5164((void *)(a1 + 648));
    sub_1905A6BF0(a1, 1);
  }
}

void sub_1905A9220(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE828 != -1) {
    dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
  }
  uint64_t v2 = off_1EB3BE820;
  if (os_log_type_enabled((os_log_t)off_1EB3BE820, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_INFO, "Enabling gyro.", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE828 != -1) {
      dispatch_once(&qword_1EB3BE828, &unk_1EDFD2900);
    }
    int v3 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLOrientationDetector::enableGyro()", "CoreLocation: %s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  *(void *)(a1 + 1016) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 16) = 1;
}

os_log_t sub_1905A93C4()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Orientation");
  off_1EB3BE820 = result;
  return result;
}

uint64_t sub_1905A9CAC(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_onMagicMountData_, a1);
}

void sub_1905A9EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FCC980](v19, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_1905A9EDC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v3 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  float v7 = (NSSet *)objc_msgSend_setWithObjects_(v3, v6, v4, v5, 0);
  if (*a2)
  {
    uint64_t DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v7);
    unint64_t v10 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v9, @"CMErrorMessage");
  }
  else
  {
    uint64_t DictionaryOfClasses = 0;
    unint64_t v10 = objc_msgSend_objectForKeyedSubscript_(0, (const char *)v7, @"CMErrorMessage");
  }
  if (!DictionaryOfClasses || !v10)
  {
    if (qword_1E929D8C8 != -1) {
      dispatch_once(&qword_1E929D8C8, &unk_1EDFD3F60);
    }
    float v16 = qword_1E929D8D0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8D0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v16, OS_LOG_TYPE_ERROR, "Invalid service response.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8C8 == -1) {
        goto LABEL_46;
      }
      goto LABEL_48;
    }
    return;
  }
  uint64_t v13 = objc_msgSend_integerValue(v10, v11, v12);
  uint64_t v14 = v13;
  if (v13 > 108)
  {
    if (v13 == 110)
    {
      if (qword_1E929D8C8 != -1) {
        dispatch_once(&qword_1E929D8C8, &unk_1EDFD3F60);
      }
      float v18 = qword_1E929D8D0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8D0, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1902AF000, v18, OS_LOG_TYPE_ERROR, "Not entitled to manage the AOP service.", buf, 2u);
      }
      if (!sub_1902D8400(115, 0)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8C8 != -1) {
        goto LABEL_48;
      }
    }
    else
    {
      if (v13 != 109)
      {
LABEL_38:
        if (qword_1E929D8C8 != -1) {
          dispatch_once(&qword_1E929D8C8, &unk_1EDFD3F60);
        }
        uint64_t v19 = qword_1E929D8D0;
        if (os_log_type_enabled((os_log_t)qword_1E929D8D0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 134349056;
          uint64_t v22 = v14;
          _os_log_impl(&dword_1902AF000, v19, OS_LOG_TYPE_ERROR, "Service request failed! error,%{public}ld", buf, 0xCu);
        }
        if (!sub_1902D8400(115, 0)) {
          return;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8C8 != -1) {
          goto LABEL_48;
        }
        goto LABEL_46;
      }
      if (qword_1E929D8C8 != -1) {
        dispatch_once(&qword_1E929D8C8, &unk_1EDFD3F60);
      }
      float v17 = qword_1E929D8D0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8D0, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1902AF000, v17, OS_LOG_TYPE_ERROR, "Service is not available!", buf, 2u);
      }
      if (!sub_1902D8400(115, 0)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8C8 != -1) {
        goto LABEL_48;
      }
    }
LABEL_46:
    float v20 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "-[CMMagicMountManagerInternal connect]_block_invoke", "CoreLocation: %s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
    return;
  }
  if (v13 == 100) {
    return;
  }
  if (v13 != 108) {
    goto LABEL_38;
  }
  if (qword_1E929D8C8 != -1) {
    dispatch_once(&qword_1E929D8C8, &unk_1EDFD3F60);
  }
  float v15 = qword_1E929D8D0;
  if (os_log_type_enabled((os_log_t)qword_1E929D8D0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1902AF000, v15, OS_LOG_TYPE_ERROR, "Unable to communicate with AOP service!", buf, 2u);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D8C8 == -1) {
      goto LABEL_46;
    }
LABEL_48:
    dispatch_once(&qword_1E929D8C8, &unk_1EDFD3F60);
    goto LABEL_46;
  }
}

void sub_1905AA474(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)(a1 + 32) + 64))
  {
    if (qword_1E929D8C8 != -1) {
      dispatch_once(&qword_1E929D8C8, &unk_1EDFD3F60);
    }
    uint64_t v2 = qword_1E929D8D0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8D0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_INFO, "Connection interrupted! Resending service request.", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8C8 != -1) {
        dispatch_once(&qword_1E929D8C8, &unk_1EDFD3F60);
      }
      __int16 v6 = 0;
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMMagicMountManagerInternal connect]_block_invoke", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 64) = 0;
    uint64_t v3 = sub_1902D6BD0();
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = sub_1905AA674;
    v5[3] = &unk_1E568D118;
    _DWORD v5[4] = *(void *)(a1 + 32);
    sub_1902CE9BC(v3, (uint64_t)v5);
  }
}

uint64_t sub_1905AA674(uint64_t result, const char *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (!*(unsigned char *)(v3 + 64))
  {
    *(unsigned char *)(v3 + 64) = 1;
    return objc_msgSend_sendServiceRequestPrivate(*(void **)(result + 32), a2, a3);
  }
  return result;
}

void sub_1905AA794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_1902D8B58(a11);
  }
  if (a13) {
    sub_1902D8B58(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905AAA18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1902D8B58(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905AAB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1905AAB5C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t result = objc_msgSend_initPrivate(*(void **)(a1 + 32), a2, a3);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 4dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = result;
  return result;
}

void sub_1905AACCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1905AACE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), sel_deallocPrivate, a3);
}

uint64_t sub_1905AAF30(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_startMagicMountUpdatesPrivateToQueue_withHandler_, *(void *)(a1 + 40));
}

uint64_t sub_1905AB128(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_stopMagicMountUpdatesPrivate(*(void **)(a1 + 32), a2, a3);
}

uint64_t sub_1905AB4F4(uint64_t a1, const char *a2)
{
  return objc_msgSend_setAPWakesAllowedPrivate_(*(void **)(a1 + 32), a2, *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_1905AB790(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_1905ABBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_1905ABBF8(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

__n128 sub_1905ABC08(uint64_t a1)
{
  __n128 result = *(__n128 *)(*(void *)(*(void *)(a1 + 32) + 8) + 8);
  *(__n128 *)(*(void *)(*(void *)(a1 + 40) + 8) + 48) = result;
  return result;
}

void sub_1905ABD40(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (qword_1E929D8C8 != -1) {
    dispatch_once(&qword_1E929D8C8, &unk_1EDFD3F60);
  }
  uint64_t v3 = qword_1E929D8D0;
  if (os_log_type_enabled((os_log_t)qword_1E929D8D0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    *(_DWORD *)long long buf = 134349312;
    uint64_t v17 = v4;
    __int16 v18 = 2050;
    uint64_t v19 = v5;
    _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEFAULT, "Feeding mountStatus=%{public}ld timestamp,%{public}f", buf, 0x16u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D8C8 != -1) {
      dispatch_once(&qword_1E929D8C8, &unk_1EDFD3F60);
    }
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMMagicMountManager feedMountStatus:apAwake:simulated:timestamp:]_block_invoke", "CoreLocation: %s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  double v8 = *(double *)(v2 + 8);
  uint64_t v9 = *(void *)(a1 + 40);
  if (*(void *)(v2 + 16) != v9 || !*(unsigned char *)(a1 + 56) || *(unsigned char *)(a1 + 57) || v8 == 0.0)
  {
    double v10 = *(double *)(a1 + 48);
    if (v10 <= v8)
    {
      if (qword_1E929D8C8 != -1) {
        dispatch_once(&qword_1E929D8C8, &unk_1EDFD3F60);
      }
      float v11 = qword_1E929D8D0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8D0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = *(void *)(v2 + 8);
        uint64_t v13 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 134349312;
        uint64_t v17 = v12;
        __int16 v18 = 2050;
        uint64_t v19 = v13;
        _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_ERROR, "Invalid magic mount state. Timestamp went backwards! old timestamp,%{public}f, new timestamp %{public}f", buf, 0x16u);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8C8 != -1) {
          dispatch_once(&qword_1E929D8C8, &unk_1EDFD3F60);
        }
        float v15 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "-[CMMagicMountManager feedMountStatus:apAwake:simulated:timestamp:]_block_invoke", "CoreLocation: %s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
    }
    else
    {
      *(double *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v9;
    }
    objc_msgSend_sendMagicMountStateToClientPrivate(*(void **)(a1 + 32), v6, v7);
  }
}

void sub_1905AC240(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

os_log_t sub_1905AC558()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "MagicMount");
  qword_1E929D8D0 = (uint64_t)result;
  return result;
}

void sub_1905AC58C(uint64_t a1)
{
  sub_1902BC548(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1905AC5C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a3, *(void *)(a1 + 24));
}

void sub_1905AC7A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905AC7F4(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void **)(a1 + 32);
  objc_sync_enter(v4);
  CFDictionaryRef Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_19045CAD8(v23, Dictionary);
  if ((*(int (**)(void *))(v23[0] + 856))(v23) < 1)
  {
    if (qword_1E929D738 != -1) {
      dispatch_once(&qword_1E929D738, &unk_1EDFD38A0);
    }
    float v15 = qword_1E929D730;
    if (os_log_type_enabled((os_log_t)qword_1E929D730, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v15, OS_LOG_TYPE_FAULT, "Could not get dictionary for kCLConnectionMessageActivityAlarm", buf, 2u);
    }
    if (!sub_1902D8400(115, 0)) {
      goto LABEL_18;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929D738 != -1) {
      dispatch_once(&qword_1E929D738, &unk_1EDFD38A0);
    }
    LOWORD(v2dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
    float v16 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "-[CMActivityAlarmProxy init]_block_invoke", "CoreLocation: %s\n", v16);
LABEL_23:
    if (v16 != (char *)buf) {
      free(v16);
    }
    goto LABEL_18;
  }
  int v21 = 0;
  unsigned int v22 = -1;
  unint64_t v20 = 0xBFF0000000000000;
  if (!sub_1905389CC(&v22, &v21, &v20, (uint64_t)v23))
  {
LABEL_18:
    id v11 = 0;
    goto LABEL_19;
  }
  uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 32);
  uint64_t v8 = objc_msgSend_numberWithInt_(NSNumber, v6, v22);
  id v11 = (id)objc_msgSend_objectForKey_(v7, v9, v8);
  if (!v11)
  {
    if (qword_1E929D738 != -1) {
      dispatch_once(&qword_1E929D738, &unk_1EDFD38A0);
    }
    uint64_t v17 = qword_1E929D730;
    if (os_log_type_enabled((os_log_t)qword_1E929D730, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v17, OS_LOG_TYPE_DEFAULT, "#Warning Did not find the triggered activity alarm in the current set of alarms.", buf, 2u);
    }
    if (!sub_1902D8400(115, 2)) {
      goto LABEL_18;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929D738 != -1) {
      dispatch_once(&qword_1E929D738, &unk_1EDFD38A0);
    }
    float v16 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMActivityAlarmProxy init]_block_invoke", "CoreLocation: %s\n", v16);
    goto LABEL_23;
  }
  uint64_t v12 = *(void **)(*(void *)(a1 + 32) + 32);
  uint64_t v13 = objc_msgSend_numberWithInt_(NSNumber, v10, v22);
  objc_msgSend_removeObjectForKey_(v12, v14, v13);
LABEL_19:
  sub_19045CCC8(v23);
  objc_sync_exit(v4);
  objc_msgSend_fire(v11, v18, v19);
}

void sub_1905ACBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_19045CCC8((uint64_t *)va);
  objc_sync_exit(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_1905ACBDC(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  objc_sync_enter(v2);
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v4 + 48))
  {
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    uint64_t v5 = *(void **)(v4 + 32);
    uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v3, (uint64_t)&v30, v34, 16);
    if (v6)
    {
      uint64_t v7 = *(void *)v31;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v31 != v7) {
            objc_enumerationMutation(v5);
          }
          uint64_t v9 = *(void **)(*((void *)&v30 + 1) + 8 * i);
          sub_1902C34CC(v29);
          LODWORD(v25) = objc_msgSend_intValue(v9, v10, v11);
          uint64_t v13 = objc_msgSend_objectForKeyedSubscript_(*(void **)(*(void *)(a1 + 32) + 32), v12, (uint64_t)v9);
          int v28 = objc_msgSend_trigger(v13, v14, v15);
          uint64_t v17 = objc_msgSend_objectForKeyedSubscript_(*(void **)(*(void *)(a1 + 32) + 32), v16, (uint64_t)v9);
          objc_msgSend_duration(v17, v18, v19);
          uint64_t v26 = v20;
          sub_190538954(&v25, &v28, &v26, (uint64_t)v29);
          LOBYTE(v26) = 1;
          sub_190461598((uint64_t)v29, "kCLConnectionMessageSubscribeKey", &v26);
          uint64_t v25 = v29[1];
          sub_190545E24("kCLConnectionMessageActivityAlarmStart", &v25, &v26);
          uint64_t v23 = v26;
          unint64_t v24 = v27;
          if (v27) {
            atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          CLConnectionClient::sendMessage();
          if (v24) {
            sub_1902D8B58(v24);
          }
          if (v27) {
            sub_1902D8B58(v27);
          }
          sub_19045CCC8(v29);
        }
        uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v21, (uint64_t)&v30, v34, 16, v23);
      }
      while (v6);
    }
  }
  return objc_sync_exit(v2);
}

void sub_1905ACDD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  objc_sync_exit(v15);
  _Unwind_Resume(a1);
}

void sub_1905ACE34(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (qword_1E929D738 != -1) {
    dispatch_once(&qword_1E929D738, &unk_1EDFD38A0);
  }
  uint64_t v3 = qword_1E929D730;
  if (os_log_type_enabled((os_log_t)qword_1E929D730, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = CLConnectionMessage::name(*a2);
    if (*(char *)(v4 + 23) >= 0) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = *(void *)v4;
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v8 = v5;
    _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEBUG, "Default handler received message %s", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D738 != -1) {
      dispatch_once(&qword_1E929D738, &unk_1EDFD38A0);
    }
    CLConnectionMessage::name(*a2);
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMActivityAlarmProxy init]_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_1905AD0A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1905AD144(uint64_t a1)
{
  id result = objc_alloc_init(*(Class *)(a1 + 32));
  qword_1EB3BF748 = (uint64_t)result;
  return result;
}

void sub_1905AD444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  objc_sync_exit(v19);
  _Unwind_Resume(a1);
}

void sub_1905AD81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  objc_sync_exit(v27);
  _Unwind_Resume(a1);
}

os_log_t sub_1905AD894()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "ActivityAlarm");
  qword_1E929D730 = (uint64_t)result;
  return result;
}

void sub_1905ADCDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1902D8B58(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905AE390(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1905AE514(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1905AE530(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v2 = *(const void **)(a1 + 40);

  _Block_release(v2);
}

void sub_1905AE57C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v2 = *(const void **)(a1 + 40);

  _Block_release(v2);
}

os_log_t sub_1905AE5F0()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "ActivityAlarm");
  qword_1E929D730 = (uint64_t)result;
  return result;
}

void sub_1905AE620()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1905AE860(_Unwind_Exception *a1)
{
  sub_1904DC240(v1);
  MEMORY[0x192FCC980](v1, 0x10F1C40233A07BALL);
  _Unwind_Resume(a1);
}

uint64_t sub_1905AE898(uint64_t a1, uint64_t a2, int a3, intptr_t a4)
{
  int v8 = a3;
  uint64_t result = sub_1902D8BCC(a1, 0, (uint64_t)&v8, 4);
  if (a3 == -536870272 || a3 == -536870288) {
    return IOAllowPowerChange(*(_DWORD *)(a1 + 44), a4);
  }
  return result;
}

void *sub_1905AE914(io_object_t *notifier)
{
  *(void *)notifier = &unk_1EDFC91F0;
  uint64_t v2 = notifier + 10;
  if (notifier[10])
  {
    IODeregisterForSystemPower(notifier + 10);
    *uint64_t v2 = 0;
  }
  uint64_t v3 = (IONotificationPort *)*((void *)notifier + 6);
  if (v3)
  {
    IONotificationPortDestroy(v3);
    *((void *)notifier + 6) = 0;
  }
  io_connect_t v4 = notifier[11];
  if (v4)
  {
    IOServiceClose(v4);
    notifier[11] = 0;
  }

  return sub_1904DC240(notifier);
}

void sub_1905AE9A4(io_object_t *a1)
{
  sub_1905AE914(a1);

  JUMPOUT(0x192FCC980);
}

void sub_1905AF398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FCC980](v15, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_1905AF3D4(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v7 = (NSSet *)objc_msgSend_setWithObjects_(v3, v6, v4, v5, 0);
  if (*a2)
  {
    uint64_t DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v7);
    if (DictionaryOfClasses)
    {
      uint64_t v10 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v9, @"CMErrorMessage");
      if (v10)
      {
        uint64_t v11 = (void *)v10;
        if (qword_1E929D748 != -1) {
          dispatch_once(&qword_1E929D748, &unk_1EDFD3EC0);
        }
        uint64_t v12 = qword_1E929D740;
        if (os_log_type_enabled((os_log_t)qword_1E929D740, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)long long buf = 67240192;
          int v19 = objc_msgSend_intValue(v11, v13, v14);
          _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_FAULT, "Failed with CMError code %{public}d", buf, 8u);
        }
        if (sub_1902D8400(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D748 != -1) {
            dispatch_once(&qword_1E929D748, &unk_1EDFD3EC0);
          }
          objc_msgSend_intValue(v11, v15, v16);
          uint64_t v17 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 0, "-[CMStepCounterProxy init]_block_invoke", "CoreLocation: %s\n", v17);
          if (v17 != (char *)buf) {
            free(v17);
          }
        }
      }
    }
  }
}

void sub_1905AF80C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a17) {
    sub_1902D8B58(a17);
  }
  if (a19) {
    sub_1902D8B58(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905AF838(void *a1, const char *a2)
{
  uint64_t v3 = (void *)a1[4];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 1);
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  objc_msgSend__handleQueryResponse_onQueue_withHandler_(v3, a2, (uint64_t)&v5, a1[5], a1[6]);
  if (v6) {
    sub_1902D8B58(v6);
  }
}

void sub_1905AF894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1902D8B58(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905AFA38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,std::__shared_weak_count *a21,int a22,__int16 a23,char a24,char a25)
{
  if (a10) {
    sub_1902D8B58(a10);
  }
  if (a21) {
    sub_1902D8B58(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905AFA7C(void *a1, CLConnectionMessage **a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v9 = (NSSet *)objc_msgSend_setWithObjects_(v4, v8, v5, v6, v7, 0);
  if (*a2 && (uint64_t DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v9)) != 0)
  {
    uint64_t v12 = DictionaryOfClasses;
    uint64_t v13 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v11, @"CMErrorMessage");
    uint64_t v15 = objc_msgSend_objectForKeyedSubscript_(v12, v14, @"CMPedometerDataObject");
    if (v13)
    {
      *(unsigned char *)(a1[4] + 16) = 0;
      v39[0] = MEMORY[0x1E4F143A8];
      v39[1] = 3221225472;
      v39[2] = sub_1905AFEDC;
      _OWORD v39[3] = &unk_1E568D320;
      __int16 v18 = (void *)a1[5];
      uint64_t v19 = a1[6];
      v39[4] = v13;
      v39[5] = v19;
      objc_msgSend_addOperationWithBlock_(v18, v16, (uint64_t)v39);
      return;
    }
    int v21 = v15;
    if (v15)
    {
      uint64_t v22 = objc_msgSend_endDate(v15, v16, v17);
      uint64_t v25 = objc_msgSend_numberOfSteps(v21, v23, v24);
      int v28 = objc_msgSend_intValue(v25, v26, v27);
      uint64_t v30 = a1[4];
      if (*(void *)(v30 + 32) == -1)
      {
        *(void *)(v30 + 32) = v28;
        uint64_t v30 = a1[4];
      }
      if (!v28)
      {
        *(void *)(v30 + 32) = 0;
        uint64_t v30 = a1[4];
      }
      uint64_t v31 = *(void *)(v30 + 40);
      uint64_t v32 = v28;
      if (v31 == -1 || v28 - v31 >= a1[7])
      {
        v37[0] = MEMORY[0x1E4F143A8];
        v37[1] = 3221225472;
        v37[2] = sub_1905AFF78;
        v37[3] = &unk_1E5690090;
        int v38 = v28;
        long long v33 = (void *)a1[5];
        uint64_t v34 = a1[6];
        v37[5] = v22;
        v37[6] = v34;
        v37[4] = v30;
        objc_msgSend_addOperationWithBlock_(v33, v29, (uint64_t)v37);
        *(void *)(a1[4] + 4dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = v32;
      }
      return;
    }
    if (qword_1E929D748 != -1) {
      dispatch_once(&qword_1E929D748, &unk_1EDFD3EC0);
    }
    uint64_t v35 = qword_1E929D740;
    if (os_log_type_enabled((os_log_t)qword_1E929D740, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 138543362;
      float v43 = v12;
      _os_log_impl(&dword_1902AF000, v35, OS_LOG_TYPE_FAULT, "Unable to parse mesage (%{public}@) when starting updates to queue", buf, 0xCu);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D748 != -1) {
        dispatch_once(&qword_1E929D748, &unk_1EDFD3EC0);
      }
      int v40 = 138543362;
      uint64_t v41 = v12;
LABEL_30:
      float v36 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMStepCounterProxy _startStepCountingUpdatesToQueue:updateOn:withHandler:]_block_invoke", "CoreLocation: %s\n", v36);
      if (v36 != (char *)buf) {
        free(v36);
      }
    }
  }
  else
  {
    if (qword_1E929D748 != -1) {
      dispatch_once(&qword_1E929D748, &unk_1EDFD3EC0);
    }
    uint64_t v20 = qword_1E929D740;
    if (os_log_type_enabled((os_log_t)qword_1E929D740, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v20, OS_LOG_TYPE_ERROR, "Unable to parse message when starting updates to queue!", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D748 != -1) {
        dispatch_once(&qword_1E929D748, &unk_1EDFD3EC0);
      }
      LOWORD(v4dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
      goto LABEL_30;
    }
  }
}

uint64_t sub_1905AFEDC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], a2, a3);
  uint64_t v6 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v9 = objc_msgSend_integerValue(*(void **)(a1 + 32), v7, v8);
  uint64_t v11 = objc_msgSend_errorWithDomain_code_userInfo_(v6, v10, @"CMErrorDomain", v9, 0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 16);

  return v12(v4, 0, v5, v11);
}

uint64_t sub_1905AFF78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

uint64_t sub_1905B041C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = objc_msgSend_integerValue(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_errorWithDomain_code_userInfo_(v3, v6, @"CMErrorDomain", v5, 0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, uint64_t))(v4 + 16);

  return v8(v4, 0, v7);
}

uint64_t sub_1905B0494(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(a1 + 40), 0);
}

uint64_t sub_1905B04AC(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 103, 0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16);

  return v4(v2, 0, v3);
}

uint64_t sub_1905B07A8()
{
  return TCCAccessRequest();
}

void sub_1905B0838(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = *(NSObject **)(objc_msgSend_stepcounterProxy(*(void **)(a1 + 32), a2, a3) + 24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1905B08CC;
  block[3] = &unk_1E568D3E8;
  long long v5 = *(_OWORD *)(a1 + 48);
  long long v7 = *(_OWORD *)(a1 + 32);
  long long v8 = v5;
  uint64_t v9 = *(void *)(a1 + 64);
  dispatch_async(v4, block);
}

uint64_t sub_1905B08CC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_stepcounterProxy(*(void **)(a1 + 32), a2, a3);
  uint64_t v5 = *(void *)(a1 + 40);

  return MEMORY[0x1F4181798](v4, sel__queryStepCountStartingFromInternal_to_toQueue_withHandler_, v5);
}

void sub_1905B0A34(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(objc_msgSend_stepcounterProxy(*(void **)(a1 + 32), a2, a3) + 16))
  {
    if (qword_1E929D748 != -1) {
      dispatch_once(&qword_1E929D748, &unk_1EDFD3EC0);
    }
    uint64_t v3 = qword_1E929D740;
    if (os_log_type_enabled((os_log_t)qword_1E929D740, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_FAULT, "Unable to start additional step updates while it is already active", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D748 != -1) {
        dispatch_once(&qword_1E929D748, &unk_1EDFD3EC0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMStepCounter startStepCountingUpdatesToQueue:updateOn:withHandler:]_block_invoke", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    TCCAccessRequest();
  }
}

void sub_1905B0C3C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = *(NSObject **)(objc_msgSend_stepcounterProxy(*(void **)(a1 + 32), a2, a3) + 24);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1905B0CCC;
  v6[3] = &unk_1E568DE28;
  long long v7 = *(_OWORD *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = v5;
  dispatch_async(v4, v6);
}

uint64_t sub_1905B0CCC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend_stepcounterProxy(*(void **)(a1 + 32), a2, a3);
  uint64_t v5 = *(void *)(a1 + 40);

  return MEMORY[0x1F4181798](v4, sel__startStepCountingUpdatesToQueue_updateOn_withHandler_, v5);
}

void sub_1905B0D8C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(objc_msgSend_stepcounterProxy(*(void **)(a1 + 32), a2, a3) + 16))
  {
    uint64_t v16 = @"kCLConnectionMessageSubscribeKey";
    uint64_t v17 = MEMORY[0x1E4F1CC28];
    __p[0] = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v4, (uint64_t)&v17, &v16, 1);
    sub_1905255CC("kCLConnectionMessageStepCountUpdate", __p, &v14);
    objc_msgSend_stepcounterProxy(*(void **)(a1 + 32), v5, v6);
    uint64_t v13 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CLConnectionClient::sendMessage();
    if (v13) {
      sub_1902D8B58(v13);
    }
    objc_msgSend_stepcounterProxy(*(void **)(a1 + 32), v7, v8);
    sub_1902C3F54(__p, "kCLConnectionMessageStepCountUpdate");
    CLConnectionClient::setHandlerForMessage();
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    *(unsigned char *)(objc_msgSend_stepcounterProxy(*(void **)(a1 + 32), v9, v10) + 16) = 0;
    if (v15) {
      sub_1902D8B58(v15);
    }
  }
  else
  {
    if (qword_1E929D748 != -1) {
      dispatch_once(&qword_1E929D748, &unk_1EDFD3EC0);
    }
    uint64_t v11 = qword_1E929D740;
    if (os_log_type_enabled((os_log_t)qword_1E929D740, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_FAULT, "Unable to stop step updates as we are are not receiving updates", (uint8_t *)__p, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1E929D748 != -1) {
        dispatch_once(&qword_1E929D748, &unk_1EDFD3EC0);
      }
      LOWORD(v14) = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMStepCounter stopStepCountingUpdates]_block_invoke", "CoreLocation: %s\n", v12);
      if (v12 != (char *)__p) {
        free(v12);
      }
    }
  }
}

void sub_1905B1008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a14) {
    sub_1902D8B58(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905B1150(uint64_t a1)
{
  sub_19044FADC("kCLConnectionMessageStepCountReset", &v5);
  objc_msgSend_stepcounterProxy(*(void **)(a1 + 32), v2, v3);
  uint64_t v4 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CLConnectionClient::sendMessage();
  if (v4) {
    sub_1902D8B58(v4);
  }
  if (v6) {
    sub_1902D8B58(v6);
  }
}

void sub_1905B11D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_1902D8B58(a11);
  }
  if (a13) {
    sub_1902D8B58(a13);
  }
  _Unwind_Resume(exception_object);
}

os_log_t sub_1905B120C()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Pedometer");
  qword_1E929D740 = (uint64_t)result;
  return result;
}

void sub_1905B1DC8(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE878 != -1) {
    dispatch_once(&qword_1EB3BE878, &unk_1EDFD29C0);
  }
  uint64_t v2 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v6 = v3;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEBUG, "Dumped gyro cal database with id %@", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD29C0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "CLSensorFusionService::CLSensorFusionService(int)_block_invoke", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

uint64_t sub_1905B1F7C(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1EDFC94C8;
  if (qword_1EB3BE878 != -1) {
    dispatch_once(&qword_1EB3BE878, &unk_1EDFD29C0);
  }
  uint64_t v2 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)long long buf = 67240192;
    int v7 = v3;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEBUG, "Stopping device motion service %{public}#x", buf, 8u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD29C0);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "virtual CLSensorFusionService::~CLSensorFusionService()", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return a1;
}

void sub_1905B2150(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1902E67BC(a1);
}

void sub_1905B2164(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 88);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 88));
  *(void *)a2 = *(void *)(a1 + 96);
  if (a1 + 96 != a2) {
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 104);
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 124);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 128);
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 132);
  *(_DWORD *)(a2 + 4dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = *(_DWORD *)(a1 + 136);
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(a1 + 140);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 144);
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 148);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 152);
  *(void *)(a2 + 6dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = *(void *)(a1 + 156);
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 164);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 168);
  *(_DWORD *)(a2 + 76) = *(_DWORD *)(a1 + 172);
  *(_DWORD *)(a2 + 8dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = *(_DWORD *)(a1 + 176);
  long long v5 = *(_OWORD *)(a1 + 180);
  *(_DWORD *)(a2 + 10dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = *(_DWORD *)(a1 + 196);
  *(_OWORD *)(a2 + 84) = v5;

  os_unfair_lock_unlock(v4);
}

uint64_t sub_1905B224C(uint64_t result, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  *(void *)(result + 48) = *a2;
  uint64_t v2 = (uint64_t *)(result + 48);
  if (*(void *)(result + 72))
  {
    uint64_t v3 = result;
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD29C0);
    }
    uint64_t v4 = off_1EB3BE870;
    if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *v2;
      *(_DWORD *)long long buf = 134349056;
      uint64_t v8 = v5;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_INFO, "Set device motion sensor status %{public}ld", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE878 != -1) {
        dispatch_once(&qword_1EB3BE878, &unk_1EDFD29C0);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLSensorFusionService::updateSensorStatus(const SensorStatus &)", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    return (*(uint64_t (**)(uint64_t *, void))(v3 + 72))(v2, *(void *)(v3 + 80));
  }
  return result;
}

void sub_1905B2420()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (sub_1902DFEC4()) {
    operator new();
  }
  if (qword_1E929D6B8 != -1) {
    dispatch_once(&qword_1E929D6B8, &unk_1EDFD29E0);
  }
  uint64_t v0 = qword_1E929D6A8;
  if (os_log_type_enabled((os_log_t)qword_1E929D6A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1902AF000, v0, OS_LOG_TYPE_DEFAULT, "#Warning No accelerometer; not starting CMPickupDetector detection!",
      buf,
      2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D6B8 != -1) {
      dispatch_once(&qword_1E929D6B8, &unk_1EDFD29E0);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "virtual void CMPickupServiceAP::startDetection()", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_1905B282C(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_1905B2858(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(a1 + 16);
  double v5 = *(double *)a1;
  float32x2_t v10 = *(float32x2_t *)(a1 + 8);
  int v11 = v4;
  uint64_t result = sub_1905C1514(*(unsigned __int8 **)(a2 + 40), &v10, (unint64_t)(v5 * 1000000.0));
  if (result != *(unsigned __int8 *)(a2 + 32))
  {
    unsigned __int8 v7 = result;
    if (qword_1E929D6B8 != -1) {
      dispatch_once(&qword_1E929D6B8, &unk_1EDFD29E0);
    }
    uint64_t v8 = qword_1E929D6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929D6A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_DEBUG, "Sending CMPickupDetector notification.", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D6B8 != -1) {
        dispatch_once(&qword_1E929D6B8, &unk_1EDFD29E0);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "static void CMPickupServiceAP::onAccelerometerData(const CLAccelerometer::Sample *, void *)", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    *(void *)long long buf = v7;
    double v13 = *(double *)a1;
    uint64_t result = sub_1904DC8A8(a2, 0, (uint64_t)buf, 16);
    *(unsigned char *)(a2 + 32) = v7;
  }
  return result;
}

void *sub_1905B2A5C(void *result)
{
  if (result[6])
  {
    uint64_t v1 = result;
    uint64_t v2 = sub_1902DFEC4();
    sub_1902CDE08(v2, 0, v1[6]);
    uint64_t result = (void *)v1[6];
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    v1[6] = 0;
  }
  return result;
}

void *sub_1905B2AC4(void *a1)
{
  *a1 = &unk_1EDFC8FC8;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    MEMORY[0x192FCC980](v2, 0x1000C40F66057FCLL);
  }

  return sub_1904C590C(a1);
}

void sub_1905B2B34(void *a1)
{
  *a1 = &unk_1EDFC8FC8;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    MEMORY[0x192FCC980](v2, 0x1000C40F66057FCLL);
  }
  sub_1904C590C(a1);

  JUMPOUT(0x192FCC980);
}

os_log_t sub_1905B2BB8()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Gesture");
  qword_1E929D6A8 = (uint64_t)result;
  return result;
}

void sub_1905B3BE0(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0xA0C40A8488062);
  _Unwind_Resume(a1);
}

void sub_1905B4980(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_1905B49D4(uint64_t result, uint64_t a2)
{
  if (result) {
    return MEMORY[0x1F4181798](a2, sel__feedDeviceMotion_, result);
  }
  return result;
}

uint64_t sub_1905B49E8(uint64_t result, uint64_t a2)
{
  if (result) {
    return MEMORY[0x1F4181798](a2, sel__feedAccel_, result);
  }
  return result;
}

uint64_t sub_1905B49FC(uint64_t result, uint64_t a2)
{
  if (result) {
    return MEMORY[0x1F4181798](a2, sel__feedGyro_, result);
  }
  return result;
}

uint64_t sub_1905B4A10(uint64_t result, uint64_t a2)
{
  if (result) {
    return MEMORY[0x1F4181798](a2, sel__feedGyroTemperature_, result);
  }
  return result;
}

uint64_t sub_1905B4A24(uint64_t result, uint64_t a2)
{
  if (a2) {
    return MEMORY[0x1F4181798](*(void *)(*(void *)(*(void *)(result + 32) + 8) + 40), sel__feedHeadAccessoryDeviceMotion_, a2);
  }
  return result;
}

uint64_t sub_1905B4A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), sel_logCounters, a3);
}

void sub_1905B5708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

os_log_t sub_1905B5DEC()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Workout");
  qword_1E929D940 = (uint64_t)result;
  return result;
}

void sub_1905B5E1C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1E929D938 != -1) {
      dispatch_once(&qword_1E929D938, &unk_1EDFD2A00);
    }
    uint64_t v2 = qword_1E929D940;
    if (os_log_type_enabled((os_log_t)qword_1E929D940, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEFAULT, "[camera] Accessory device motion status : Disconnected", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D938 == -1)
      {
LABEL_16:
        int v4 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "_ZL22accessoryStatusHandler_block_invoke", "CoreLocation: %s\n", v4);
        if (v4 != (char *)buf) {
          free(v4);
        }
        return;
      }
LABEL_18:
      dispatch_once(&qword_1E929D938, &unk_1EDFD2A00);
      goto LABEL_16;
    }
  }
  else
  {
    if (qword_1E929D938 != -1) {
      dispatch_once(&qword_1E929D938, &unk_1EDFD2A00);
    }
    uint64_t v3 = qword_1E929D940;
    if (os_log_type_enabled((os_log_t)qword_1E929D940, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEFAULT, "[camera] Accessory device motion status : Connected", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D938 == -1) {
        goto LABEL_16;
      }
      goto LABEL_18;
    }
  }
}

uint64_t *sub_1905B6070(uint64_t **a1, uint64_t *a2)
{
  os_log_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_190437FD4(result);
    JUMPOUT(0x192FCC980);
  }
  return result;
}

uint64_t sub_1905B6D7C()
{
  uint64_t result = sub_190455148(@"BKDigitizerSignpostsEnabled", @"com.apple.backboardd", (Boolean *)&byte_1EB3BF750);
  byte_1EB3BF751 = result;
  return result;
}

uint64_t sub_1905B6F5C(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_onEclipseData_, a1);
}

uint64_t sub_1905B6F68(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_onViewObstructedStateData_, a1);
}

uint64_t sub_1905B6F74(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_onCameraCapturePoseData_, a1);
}

void sub_1905B7250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1905B7268(uint64_t a1, const char *a2)
{
  uint64_t result = objc_msgSend_initPrivateWithClientType_(*(void **)(a1 + 32), a2, 0);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 4dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = result;
  return result;
}

void sub_1905B7380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1905B7398(uint64_t a1, const char *a2)
{
  uint64_t result = objc_msgSend_initPrivateWithClientType_(*(void **)(a1 + 32), a2, *(void *)(a1 + 48));
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 4dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = result;
  return result;
}

void sub_1905B751C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1905B7534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), sel_deallocPrivate, a3);
}

void sub_1905B76B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FCC980](v21, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_1905B76F0(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  unsigned __int8 v7 = (NSSet *)objc_msgSend_setWithObjects_(v3, v6, v4, v5, 0);
  if (*a2)
  {
    uint64_t DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v7);
    float32x2_t v10 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v9, @"CMErrorMessage");
  }
  else
  {
    uint64_t DictionaryOfClasses = 0;
    float32x2_t v10 = objc_msgSend_objectForKeyedSubscript_(0, (const char *)v7, @"CMErrorMessage");
  }
  if (!DictionaryOfClasses || !v10)
  {
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
    }
    uint64_t v16 = off_1E929D6F8;
    if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v16, OS_LOG_TYPE_ERROR, "Invalid service response.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D708 == -1) {
        goto LABEL_46;
      }
      goto LABEL_48;
    }
    return;
  }
  uint64_t v13 = objc_msgSend_integerValue(v10, v11, v12);
  uint64_t v14 = v13;
  if (v13 > 108)
  {
    if (v13 == 110)
    {
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
      }
      __int16 v18 = off_1E929D6F8;
      if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1902AF000, v18, OS_LOG_TYPE_ERROR, "Not entitled to manage the AOP service.", buf, 2u);
      }
      if (!sub_1902D8400(115, 0)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929D708 != -1) {
        goto LABEL_48;
      }
    }
    else
    {
      if (v13 != 109)
      {
LABEL_38:
        if (qword_1E929D708 != -1) {
          dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
        }
        char v19 = off_1E929D6F8;
        if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 134349056;
          uint64_t v22 = v14;
          _os_log_impl(&dword_1902AF000, v19, OS_LOG_TYPE_ERROR, "Service request failed! error,%{public}ld", buf, 0xCu);
        }
        if (!sub_1902D8400(115, 0)) {
          return;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929D708 != -1) {
          goto LABEL_48;
        }
        goto LABEL_46;
      }
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
      }
      uint64_t v17 = off_1E929D6F8;
      if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1902AF000, v17, OS_LOG_TYPE_ERROR, "Service is not available!", buf, 2u);
      }
      if (!sub_1902D8400(115, 0)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929D708 != -1) {
        goto LABEL_48;
      }
    }
LABEL_46:
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "-[CMSuppressionManager connect]_block_invoke", "CoreLocation: %s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
    return;
  }
  if (v13 == 100) {
    return;
  }
  if (v13 != 108) {
    goto LABEL_38;
  }
  if (qword_1E929D708 != -1) {
    dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
  }
  uint64_t v15 = off_1E929D6F8;
  if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1902AF000, v15, OS_LOG_TYPE_ERROR, "Unable to communicate with AOP service!", buf, 2u);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D708 == -1) {
      goto LABEL_46;
    }
LABEL_48:
    dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
    goto LABEL_46;
  }
}

void sub_1905B7C88(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)(a1 + 32) + 232))
  {
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
    }
    uint64_t v2 = off_1E929D6F8;
    if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_INFO, "Connection interrupted! Resending service request.", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
      }
      __int16 v7 = 0;
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMSuppressionManager connect]_block_invoke", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 232) = 0;
    uint64_t v3 = sub_1902D6BD0();
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = sub_1905B7E88;
    v5[3] = &unk_1E568D190;
    long long v6 = *(_OWORD *)(a1 + 32);
    sub_1902CE9BC(v3, (uint64_t)v5);
  }
}

uint64_t sub_1905B7E88(uint64_t result, const char *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (!*(unsigned char *)(v3 + 232))
  {
    *(unsigned char *)(v3 + 232) = 1;
    return objc_msgSend_sendServiceRequestPrivate(*(void **)(result + 40), a2, a3);
  }
  return result;
}

void sub_1905B8014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_1902D8B58(a11);
  }
  if (a13) {
    sub_1902D8B58(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905B81CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a17) {
    sub_1902D8B58(a17);
  }
  if (a19) {
    sub_1902D8B58(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905B8200(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_objectForKeyedSubscript_(a2, (const char *)a2, @"CMErrorMessage");
  if (!a2 || !v4)
  {
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
    }
    int v11 = off_1E929D6F8;
    if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_ERROR, "View Obstructed State Invalid service response!", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D708 == -1) {
        goto LABEL_34;
      }
      goto LABEL_36;
    }
    return;
  }
  uint64_t v7 = objc_msgSend_integerValue(v4, v5, v6);
  if (v7 == 100) {
    return;
  }
  uint64_t v8 = v7;
  if (v7 == 108)
  {
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
    }
    uint64_t v12 = off_1E929D6F8;
    if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_ERROR))
    {
      int v13 = *(unsigned __int8 *)(a1 + 32);
      *(_DWORD *)long long buf = 67240192;
      int v18 = v13;
      _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_ERROR, "View Obstructed State Unable to communicate with AOP service! enable,%{public}d", buf, 8u);
    }
    if (!sub_1902D8400(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929D708 != -1) {
      goto LABEL_36;
    }
LABEL_34:
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "-[CMSuppressionManager sendViewObstructedRequestPrivate]_block_invoke", "CoreLocation: %s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
    return;
  }
  if (v7 != 109)
  {
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
    }
    uint64_t v14 = off_1E929D6F8;
    if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_ERROR))
    {
      int v15 = *(unsigned __int8 *)(a1 + 32);
      *(_DWORD *)long long buf = 67240448;
      int v18 = v15;
      __int16 v19 = 2050;
      uint64_t v20 = v8;
      _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_ERROR, "View Obstructed State Service request failed! enable,%{public}d, error,%{public}ld", buf, 0x12u);
    }
    if (!sub_1902D8400(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929D708 != -1) {
      goto LABEL_36;
    }
    goto LABEL_34;
  }
  if (qword_1E929D708 != -1) {
    dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
  }
  uint64_t v9 = off_1E929D6F8;
  if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_ERROR))
  {
    int v10 = *(unsigned __int8 *)(a1 + 32);
    *(_DWORD *)long long buf = 67240192;
    int v18 = v10;
    _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_ERROR, "View Obstructed State Service is not available! enable,%{public}d", buf, 8u);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D708 == -1) {
      goto LABEL_34;
    }
LABEL_36:
    dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
    goto LABEL_34;
  }
}

void sub_1905B8744(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(unsigned char *)(v1 + 232))
  {
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
    }
    uint64_t v2 = off_1E929D6F8;
    if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_ERROR, "Service already started.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMSuppressionManager startService]_block_invoke", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
  else
  {
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
    }
    uint64_t v5 = off_1E929D6F8;
    if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v6, v7);
      uint64_t v9 = *(void *)(v1 + 344);
      *(_DWORD *)long long buf = 134349314;
      uint64_t v14 = v8;
      __int16 v15 = 2114;
      uint64_t v16 = v9;
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_DEFAULT, "[%{public}ld][%{public}@] Start service called.", buf, 0x16u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
      }
      objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v10, v11);
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMSuppressionManager startService]_block_invoke", "CoreLocation: %s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    *(unsigned char *)(v1 + 232) = 1;
  }
}

void sub_1905B8AE0(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(unsigned char *)(v1 + 232))
  {
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
    }
    uint64_t v3 = off_1E929D6F8;
    if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v4, v5);
      uint64_t v7 = *(void *)(v1 + 344);
      *(_DWORD *)long long buf = 134349314;
      uint64_t v16 = v6;
      __int16 v17 = 2114;
      uint64_t v18 = v7;
      _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEFAULT, "[%{public}ld][%{public}@] Stop service called.", buf, 0x16u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
      }
      objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v11, v12);
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMSuppressionManager stopService]_block_invoke", "CoreLocation: %s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    *(unsigned char *)(v1 + 232) = 0;
    objc_msgSend_sendServiceRequestPrivate(*(void **)(a1 + 32), v8, v9);
  }
  else
  {
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
    }
    int v10 = off_1E929D6F8;
    if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_ERROR, "Service already stopped (or service has not been started yet).", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMSuppressionManager stopService]_block_invoke", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
}

uint64_t sub_1905B8E98(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_startSuppressionUpdatesToQueue_withOptions_withHandler_, *(void *)(a1 + 40));
}

uint64_t sub_1905B8F40(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (qword_1E929D708 != -1) {
    dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
  }
  uint64_t v3 = off_1E929D6F8;
  if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v4, v5);
    uint64_t v7 = *(void *)(v2 + 344);
    unsigned int v8 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)long long buf = 134350594;
    uint64_t v17 = v6;
    __int16 v18 = 2114;
    uint64_t v19 = v7;
    __int16 v20 = 1026;
    int v21 = v8 & 1;
    __int16 v22 = 1026;
    int v23 = (v8 >> 1) & 1;
    __int16 v24 = 1026;
    int v25 = (v8 >> 2) & 1;
    __int16 v26 = 1026;
    int v27 = (v8 >> 3) & 1;
    __int16 v28 = 1026;
    int v29 = (v8 >> 4) & 1;
    _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEFAULT, "[%{public}ld][%{public}@] Starting suppression updates with useViewObstructed,%{public}u,useSmartPowerNap,%{public}u,useWatchPresence,%{public}u,useAlwaysOnViewObstructed,%{public}u,useFacedown,%{public}u", buf, 0x34u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
    }
    objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v13, v14);
    __int16 v15 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMSuppressionManager startSuppressionUpdatesToQueue:withOptions:withHandler:]_block_invoke", "CoreLocation: %s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  *(void *)(v2 + 336) = *(void *)(a1 + 56);
  objc_msgSend_sendServiceRequestPrivate(*(void **)(a1 + 32), v9, v10);
  return objc_msgSend_startSuppressionUpdatesPrivateToQueue_withOptions_withHandler_(*(void **)(a1 + 32), v11, *(void *)(a1 + 40), *(void *)(a1 + 56), *(void *)(a1 + 48));
}

uint64_t sub_1905B9248(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_stopSuppressionUpdatesPrivate(*(void **)(a1 + 32), a2, a3);
}

void sub_1905B9300(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (qword_1E929D708 != -1) {
    dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
  }
  uint64_t v3 = off_1E929D6F8;
  if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v4, v5);
    uint64_t v7 = *(void *)(v2 + 344);
    *(_DWORD *)long long buf = 134349314;
    uint64_t v12 = v6;
    __int16 v13 = 2114;
    uint64_t v14 = v7;
    _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEFAULT, "[%{public}ld][%{public}@] Significant user interaction detected", buf, 0x16u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
    }
    objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v8, v9);
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMSuppressionManager didDetectSignificantUserInteraction]_block_invoke", "CoreLocation: %s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (qword_1E929E9B0 != -1) {
    dispatch_once(&qword_1E929E9B0, &unk_1EDFD20A0);
  }
  sub_190531B84(qword_1E929E9B8, 0);
}

uint64_t sub_1905B971C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_startCameraCapturePoseUpdatesPrivateToQueue_withHandler_, *(void *)(a1 + 40));
}

uint64_t sub_1905B9914(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_stopCameraCapturePoseUpdatesPrivate(*(void **)(a1 + 32), a2, a3);
}

void sub_1905B9AE8()
{
  if (qword_1E929E9B0 != -1) {
    dispatch_once(&qword_1E929E9B0, &unk_1EDFD20A0);
  }
  uint64_t v0 = qword_1E929E9B8;

  sub_190531B84(v0, 1);
}

void sub_1905B9D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void sub_1905B9DB0(uint64_t a1)
{
  if (qword_1E929E9B0 != -1) {
    dispatch_once(&qword_1E929E9B0, &unk_1EDFD20A0);
  }
  double v6 = 0.0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_190531A8C(&v6);
  double v2 = v6;
  if (v6 != 0.0)
  {
    uint64_t v3 = [CMSuppressionEvent alloc];
    if ((_BYTE)v7) {
      uint64_t v5 = objc_msgSend_initWithEventType_reason_timestamp_(v3, v4, 1, 1, v2);
    }
    else {
      uint64_t v5 = objc_msgSend_initWithEventType_reason_timestamp_(v3, v4, 2, 1, v2);
    }
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 4dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = v5;
  }
}

void sub_1905BA0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

uint64_t sub_1905BA0D0(uint64_t a1)
{
  if (qword_1E929E9B0 != -1) {
    dispatch_once(&qword_1E929E9B0, &unk_1EDFD20A0);
  }
  memset(v11, 0, 34);
  sub_190531B14((uint64_t)v11);
  double v2 = [CMStaticCameraPose alloc];
  LODWORD(v4) = *(_DWORD *)((char *)v11 + 14);
  LODWORD(v3) = *(_DWORD *)((char *)v11 + 10);
  LODWORD(v6) = *(_DWORD *)((char *)&v11[1] + 6);
  LODWORD(v5) = *(_DWORD *)((char *)&v11[1] + 2);
  LODWORD(v8) = *(_DWORD *)((char *)&v11[1] + 14);
  LODWORD(v7) = *(_DWORD *)((char *)&v11[1] + 10);
  uint64_t result = objc_msgSend_initWithIsStatic_timeInStaticState_timeInMovingState_portraitAngle_portraitUpsideDownAngle_landscapeLeftAngle_landscapeRightAngle_faceUpAngle_faceDownAngle_(v2, v9, BYTE1(v11[0]), *(float *)((char *)v11 + 2), *(float *)((char *)v11 + 6), v3, v4, v5, v6, v7, v8);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 4dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = result;
  return result;
}

void sub_1905BA4D0(uint64_t a1)
{
  (*(void (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
  if (qword_1E929E9B0 != -1) {
    dispatch_once(&qword_1E929E9B0, &unk_1EDFD20A0);
  }
  uint64_t v1 = sub_1902D6BD0();

  sub_1902CE9BC(v1, (uint64_t)&unk_1EDFC3748);
}

void sub_1905BB23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_1905BB254(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 8dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = *(void *)(a2 + 80);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

__n128 sub_1905BB26C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  __n128 result = *(__n128 *)(v1 + 8);
  long long v4 = *(_OWORD *)(v1 + 24);
  *(void *)(v2 + 8dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = *(void *)(v1 + 40);
  *(__n128 *)(v2 + 48) = result;
  *(_OWORD *)(v2 + 64) = v4;
  return result;
}

void sub_1905BB340(uint64_t a1)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(double **)(*(void *)(a1 + 32) + 8);
  if (*((void *)v2 + 14) || *(unsigned char *)(a1 + 72))
  {
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
    }
    long long v3 = off_1E929D6F8;
    if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v4, v5);
      uint64_t v7 = *((void *)v2 + 43);
      uint64_t v9 = objc_msgSend_stringForEventType_(CMSuppressionEvent, v8, *(void *)(a1 + 40));
      uint64_t v10 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 134349826;
      uint64_t v40 = v6;
      __int16 v41 = 2114;
      uint64_t v42 = v7;
      __int16 v43 = 2114;
      uint64_t v44 = v9;
      __int16 v45 = 2050;
      uint64_t v46 = v10;
      _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEFAULT, "[%{public}ld][%{public}@] -> Feeding view obstructed event: %{public}@ @ %{public}f", buf, 0x2Au);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
      }
      objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v32, v33);
      objc_msgSend_stringForEventType_(CMSuppressionEvent, v34, *(void *)(a1 + 40));
      uint64_t v35 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMSuppressionManager feedViewObstructedEvent:facedown:timeSinceLastFacedownStatic:timestamp:force:]_block_invoke", "CoreLocation: %s\n", v35);
      if (v35 != (char *)buf) {
        free(v35);
      }
    }
    double v13 = *(double *)(a1 + 48);
    if (v13 <= v2[9])
    {
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
      }
      uint64_t v17 = off_1E929D6F8;
      if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v18, v19);
        uint64_t v21 = *((void *)v2 + 43);
        uint64_t v22 = *((void *)v2 + 9);
        uint64_t v23 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 134349826;
        uint64_t v40 = v20;
        __int16 v41 = 2114;
        uint64_t v42 = v21;
        __int16 v43 = 2050;
        uint64_t v44 = v22;
        __int16 v45 = 2050;
        uint64_t v46 = v23;
        _os_log_impl(&dword_1902AF000, v17, OS_LOG_TYPE_ERROR, "[%{public}ld][%{public}@] Invalid view obstructed event. Timestamp went backwards! old timestamp,%{public}f, new timestamp %{public}f", buf, 0x2Au);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D708 != -1) {
          dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
        }
        objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v36, v37);
        int v38 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "-[CMSuppressionManager feedViewObstructedEvent:facedown:timeSinceLastFacedownStatic:timestamp:force:]_block_invoke", "CoreLocation: %s\n", v38);
        if (v38 != (char *)buf) {
          free(v38);
        }
      }
    }
    else
    {
      uint64_t v14 = *(void *)(a1 + 40);
      uint64_t v15 = *(void *)(a1 + 56);
      uint64_t v16 = *(void *)(a1 + 64);
      v2[9] = v13;
      *((void *)v2 + 1dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = v14;
      *((void *)v2 + 11) = 1;
      *((void *)v2 + 12) = v15;
      *((void *)v2 + 13) = v16;
    }
    objc_msgSend_updateSuppressionStateAndSendToClient(*(void **)(a1 + 32), v11, v12);
  }
  else
  {
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
    }
    __int16 v24 = off_1E929D6F8;
    if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v25, v26);
      uint64_t v28 = *((void *)v2 + 43);
      *(_DWORD *)long long buf = 134349314;
      uint64_t v40 = v27;
      __int16 v41 = 2114;
      uint64_t v42 = v28;
      _os_log_impl(&dword_1902AF000, v24, OS_LOG_TYPE_ERROR, "[%{public}ld][%{public}@] Not feeding view obstructed event! Suppression already stopped.", buf, 0x16u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
      }
      objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v29, v30);
      uint64_t v31 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMSuppressionManager feedViewObstructedEvent:facedown:timeSinceLastFacedownStatic:timestamp:force:]_block_invoke", "CoreLocation: %s\n", v31);
      if (v31 != (char *)buf) {
        free(v31);
      }
    }
  }
}

void sub_1905BB99C(uint64_t a1)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(double **)(*(void *)(a1 + 32) + 8);
  if (*((void *)v2 + 25) || *(unsigned char *)(a1 + 56))
  {
    if (v2[15] == 0.0 && *(void *)(a1 + 40) == 2)
    {
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
      }
      long long v3 = off_1E929D6F8;
      if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v4, v5);
        uint64_t v7 = *((void *)v2 + 43);
        uint64_t v9 = objc_msgSend_stringForEventType_(CMSuppressionEvent, v8, *(void *)(a1 + 40));
        uint64_t v10 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 134349826;
        uint64_t v49 = v6;
        __int16 v50 = 2114;
        uint64_t v51 = v7;
        __int16 v52 = 2114;
        uint64_t v53 = v9;
        __int16 v54 = 2050;
        uint64_t v55 = v10;
        _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEFAULT, "[%{public}ld][%{public}@] -> Not feeding smart power nap event: %{public}@ @ %{public}f", buf, 0x2Au);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D708 != -1) {
          dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
        }
        objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v11, v12);
        objc_msgSend_stringForEventType_(CMSuppressionEvent, v13, *(void *)(a1 + 40));
        uint64_t v14 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "-[CMSuppressionManager feedSmartPowerNapEvent:timestamp:force:]_block_invoke", "CoreLocation: %s\n");
LABEL_35:
        if (v14 != buf) {
          free(v14);
        }
      }
    }
    else
    {
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
      }
      uint64_t v15 = off_1E929D6F8;
      if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v16, v17);
        uint64_t v19 = *((void *)v2 + 43);
        uint64_t v21 = objc_msgSend_stringForEventType_(CMSuppressionEvent, v20, *(void *)(a1 + 40));
        uint64_t v22 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 134349826;
        uint64_t v49 = v18;
        __int16 v50 = 2114;
        uint64_t v51 = v19;
        __int16 v52 = 2114;
        uint64_t v53 = v21;
        __int16 v54 = 2050;
        uint64_t v55 = v22;
        _os_log_impl(&dword_1902AF000, v15, OS_LOG_TYPE_DEFAULT, "[%{public}ld][%{public}@] -> Feeding smart power nap event: %{public}@ @ %{public}f", buf, 0x2Au);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D708 != -1) {
          dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
        }
        objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v41, v42);
        objc_msgSend_stringForEventType_(CMSuppressionEvent, v43, *(void *)(a1 + 40));
        uint64_t v44 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "-[CMSuppressionManager feedSmartPowerNapEvent:timestamp:force:]_block_invoke", "CoreLocation: %s\n", v44);
        if (v44 != (char *)buf) {
          free(v44);
        }
      }
      double v25 = *(double *)(a1 + 48);
      if (v25 <= v2[15])
      {
        if (qword_1E929D708 != -1) {
          dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
        }
        uint64_t v27 = off_1E929D6F8;
        if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v30 = objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v28, v29);
          uint64_t v31 = *((void *)v2 + 43);
          uint64_t v32 = *((void *)v2 + 15);
          uint64_t v33 = *(void *)(a1 + 48);
          *(_DWORD *)long long buf = 134349826;
          uint64_t v49 = v30;
          __int16 v50 = 2114;
          uint64_t v51 = v31;
          __int16 v52 = 2050;
          uint64_t v53 = v32;
          __int16 v54 = 2050;
          uint64_t v55 = v33;
          _os_log_impl(&dword_1902AF000, v27, OS_LOG_TYPE_ERROR, "[%{public}ld][%{public}@] Invalid smart power nap event. Timestamp went backwards! old timestamp,%{public}f, new timestamp %{public}f", buf, 0x2Au);
        }
        if (sub_1902D8400(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D708 != -1) {
            dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
          }
          objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v45, v46);
          uint64_t v47 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 0, "-[CMSuppressionManager feedSmartPowerNapEvent:timestamp:force:]_block_invoke", "CoreLocation: %s\n", v47);
          if (v47 != (char *)buf) {
            free(v47);
          }
        }
      }
      else
      {
        uint64_t v26 = *(void *)(a1 + 40);
        v2[15] = v25;
        *((void *)v2 + 16) = v26;
        *((void *)v2 + 17) = 2;
        v2[18] = 0.0;
        v2[19] = 0.0;
      }
      objc_msgSend_updateSuppressionStateAndSendToClient(*(void **)(a1 + 32), v23, v24);
    }
  }
  else
  {
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
    }
    uint64_t v34 = off_1E929D6F8;
    if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v35, v36);
      uint64_t v38 = *((void *)v2 + 43);
      *(_DWORD *)long long buf = 134349314;
      uint64_t v49 = v37;
      __int16 v50 = 2114;
      uint64_t v51 = v38;
      _os_log_impl(&dword_1902AF000, v34, OS_LOG_TYPE_ERROR, "[%{public}ld][%{public}@] Not feeding smart power nap event! Suppression already stopped.", buf, 0x16u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
      }
      objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v39, v40);
      uint64_t v14 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMSuppressionManager feedSmartPowerNapEvent:timestamp:force:]_block_invoke", "CoreLocation: %s\n");
      goto LABEL_35;
    }
  }
}

void sub_1905BC1C4(uint64_t a1)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(double **)(*(void *)(a1 + 32) + 8);
  if (*((void *)v2 + 26) || *(unsigned char *)(a1 + 56))
  {
    if (v2[20] == 0.0 && *(void *)(a1 + 40) == 2)
    {
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
      }
      long long v3 = off_1E929D6F8;
      if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v4, v5);
        uint64_t v7 = *((void *)v2 + 43);
        uint64_t v9 = objc_msgSend_stringForEventType_(CMSuppressionEvent, v8, *(void *)(a1 + 40));
        uint64_t v10 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 134349826;
        uint64_t v49 = v6;
        __int16 v50 = 2114;
        uint64_t v51 = v7;
        __int16 v52 = 2114;
        uint64_t v53 = v9;
        __int16 v54 = 2050;
        uint64_t v55 = v10;
        _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEFAULT, "[%{public}ld][%{public}@] -> Not feeding device presence event: %{public}@ @ %{public}f", buf, 0x2Au);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D708 != -1) {
          dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
        }
        objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v11, v12);
        objc_msgSend_stringForEventType_(CMSuppressionEvent, v13, *(void *)(a1 + 40));
        uint64_t v14 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "-[CMSuppressionManager feedDevicePresenceEvent:timestamp:force:]_block_invoke", "CoreLocation: %s\n");
LABEL_35:
        if (v14 != buf) {
          free(v14);
        }
      }
    }
    else
    {
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
      }
      uint64_t v15 = off_1E929D6F8;
      if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v16, v17);
        uint64_t v19 = *((void *)v2 + 43);
        uint64_t v21 = objc_msgSend_stringForEventType_(CMSuppressionEvent, v20, *(void *)(a1 + 40));
        uint64_t v22 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 134349826;
        uint64_t v49 = v18;
        __int16 v50 = 2114;
        uint64_t v51 = v19;
        __int16 v52 = 2114;
        uint64_t v53 = v21;
        __int16 v54 = 2050;
        uint64_t v55 = v22;
        _os_log_impl(&dword_1902AF000, v15, OS_LOG_TYPE_DEFAULT, "[%{public}ld][%{public}@] -> Feeding device presence event: %{public}@ @ %{public}f", buf, 0x2Au);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D708 != -1) {
          dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
        }
        objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v41, v42);
        objc_msgSend_stringForEventType_(CMSuppressionEvent, v43, *(void *)(a1 + 40));
        uint64_t v44 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "-[CMSuppressionManager feedDevicePresenceEvent:timestamp:force:]_block_invoke", "CoreLocation: %s\n", v44);
        if (v44 != (char *)buf) {
          free(v44);
        }
      }
      double v25 = *(double *)(a1 + 48);
      if (v25 <= v2[20])
      {
        if (qword_1E929D708 != -1) {
          dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
        }
        uint64_t v27 = off_1E929D6F8;
        if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v30 = objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v28, v29);
          uint64_t v31 = *((void *)v2 + 43);
          uint64_t v32 = *((void *)v2 + 20);
          uint64_t v33 = *(void *)(a1 + 48);
          *(_DWORD *)long long buf = 134349826;
          uint64_t v49 = v30;
          __int16 v50 = 2114;
          uint64_t v51 = v31;
          __int16 v52 = 2050;
          uint64_t v53 = v32;
          __int16 v54 = 2050;
          uint64_t v55 = v33;
          _os_log_impl(&dword_1902AF000, v27, OS_LOG_TYPE_ERROR, "[%{public}ld][%{public}@] Invalid device presence event. Timestamp went backwards! old timestamp,%{public}f, new timestamp %{public}f", buf, 0x2Au);
        }
        if (sub_1902D8400(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D708 != -1) {
            dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
          }
          objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v45, v46);
          uint64_t v47 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 0, "-[CMSuppressionManager feedDevicePresenceEvent:timestamp:force:]_block_invoke", "CoreLocation: %s\n", v47);
          if (v47 != (char *)buf) {
            free(v47);
          }
        }
      }
      else
      {
        uint64_t v26 = *(void *)(a1 + 40);
        v2[20] = v25;
        *((void *)v2 + 21) = v26;
        *((void *)v2 + 22) = 4;
        v2[23] = 0.0;
        v2[24] = 0.0;
      }
      objc_msgSend_updateSuppressionStateAndSendToClient(*(void **)(a1 + 32), v23, v24);
    }
  }
  else
  {
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
    }
    uint64_t v34 = off_1E929D6F8;
    if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v35, v36);
      uint64_t v38 = *((void *)v2 + 43);
      *(_DWORD *)long long buf = 134349314;
      uint64_t v49 = v37;
      __int16 v50 = 2114;
      uint64_t v51 = v38;
      _os_log_impl(&dword_1902AF000, v34, OS_LOG_TYPE_ERROR, "[%{public}ld][%{public}@] Not feeding device presence event! Suppression already stopped.", buf, 0x16u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
      }
      objc_msgSend_suppressionClientType(*(void **)(a1 + 32), v39, v40);
      uint64_t v14 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMSuppressionManager feedDevicePresenceEvent:timestamp:force:]_block_invoke", "CoreLocation: %s\n");
      goto LABEL_35;
    }
  }
}

void sub_1905BD490(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_1905BD4B8(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v5 = objc_msgSend_syncState(*(void **)(*(void *)(a1 + 32) + 200), v3, v4);
  double v7 = CFAbsoluteTimeGetCurrent() - Current;
  if (v7 > 10.0)
  {
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
    }
    double v8 = off_1E929D6F8;
    if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 134349056;
      double v19 = v7;
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_FAULT, "SmartPowerNap syncState took longer than 10s to return. Waited: %{public}f", buf, 0xCu);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
      }
      int v16 = 134349056;
      double v17 = v7;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMSuppressionManager startSuppressionUpdatesPrivateToQueue:withOptions:withHandler:]_block_invoke", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
  objc_msgSend_handleSmartPowerNapState_(*(void **)(a1 + 40), v6, v5);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void **)(v9 + 200);
  uint64_t v11 = *(void *)(v9 + 64);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = sub_1905BD704;
  float32x4_t v15[3] = &unk_1E5690270;
  v15[4] = *(void *)(a1 + 40);
  return objc_msgSend_registerWithCallback_callback_(v10, v12, v11, v15);
}

uint64_t sub_1905BD704(uint64_t a1, const char *a2)
{
  return objc_msgSend_handleSmartPowerNapState_(*(void **)(a1 + 32), a2, (uint64_t)a2);
}

uint64_t sub_1905BDDEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_sendViewObstructedStateToClientPrivate_, a3);
}

uint64_t sub_1905BDFF0(uint64_t result, const char *a2)
{
  uint64_t v2 = *(void *)(result + 40);
  *(unsigned char *)(*(void *)(result + 32) + 16) = *(unsigned char *)(result + 48);
  *(void *)(*(void *)(result + 32) + 24) = v2;
  uint64_t v3 = *(void *)(*(void *)(result + 32) + 8);
  uint64_t v4 = *(void **)(v3 + 312);
  if (v4)
  {
    uint64_t v5 = *(void *)(v3 + 320);
    if (v5)
    {
      v7[0] = MEMORY[0x1E4F143A8];
      v7[1] = 3221225472;
      _DWORD v7[2] = sub_1905BE098;
      v7[3] = &unk_1E5690298;
      char v8 = *(unsigned char *)(result + 48);
      uint64_t v6 = *(void *)(result + 40);
      v7[4] = v5;
      void v7[5] = v6;
      return objc_msgSend_addOperationWithBlock_(v4, a2, (uint64_t)v7);
    }
  }
  return result;
}

uint64_t sub_1905BE098(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 40), 0);
}

uint64_t sub_1905BE2B0(uint64_t a1, const char *a2, uint64_t a3)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 233) = 1;
  objc_msgSend_sendViewObstructedRequestPrivate(*(void **)(a1 + 32), a2, a3);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);

  return MEMORY[0x1F4181798](v4, sel_startViewObstructedStateUpdatesPrivateToQueue_withHandler_, v5);
}

uint64_t sub_1905BE4E8(uint64_t a1, const char *a2, uint64_t a3)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 233) = 0;
  objc_msgSend_sendViewObstructedRequestPrivate(*(void **)(a1 + 32), a2, a3);
  uint64_t v6 = *(void **)(a1 + 32);

  return objc_msgSend_stopViewObstructedStateUpdatesPrivate(v6, v4, v5);
}

void sub_1905BE948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1905BE96C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_1905BEB04(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

void sub_1905BF31C()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = sub_1902D6BD0();
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(std::__shared_weak_count **)(v0 + 32);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  buf[0] = 0;
  int v3 = sub_1902C47F8(v1, "EnableSuppressionManagerOnUnsupportedHardware", (BOOL *)buf);
  if (buf[0]) {
    int v4 = v3;
  }
  else {
    int v4 = 0;
  }
  byte_1E929E520 = v4;
  if (v2)
  {
    sub_1902D8B58(v2);
    int v4 = byte_1E929E520;
  }
  if (v4)
  {
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
    }
    uint64_t v5 = off_1E929D6F8;
    if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_DEFAULT, "Default to enable suppression manager on unsupported hardware is enabled!", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD4440);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "BOOL isSuppressionAvailablePrivate()_block_invoke", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_1905BF504(_Unwind_Exception *exception_object)
{
}

os_log_t sub_1905BF524()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Eclipse");
  off_1E929D6F8 = result;
  return result;
}

Class sub_1905BF554()
{
  if (qword_1E929E538 != -1) {
    dispatch_once(&qword_1E929E538, &unk_1EDFD4460);
  }
  Class result = objc_getClass("_PMSmartPowerNap");
  qword_1E929E530 = (uint64_t)result;
  off_1EB3BE8A0[0] = sub_1905BF5B8;
  return result;
}

uint64_t sub_1905BF5B8()
{
  return qword_1E929E530;
}

void *sub_1905BF5C4()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/LowPowerMode.framework/LowPowerMode", 2);
  qword_1E929E510 = (uint64_t)result;
  return result;
}

Class sub_1905BF5F0()
{
  if (qword_1E929E548 != -1) {
    dispatch_once(&qword_1E929E548, &unk_1EDFD4480);
  }
  Class result = objc_getClass("DPCManager");
  qword_1E929E540 = (uint64_t)result;
  off_1EB3BE8A8[0] = sub_1905BF654;
  return result;
}

uint64_t sub_1905BF654()
{
  return qword_1E929E540;
}

void *sub_1905BF660()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/DevicePresence.framework/DevicePresence", 2);
  qword_1E929E518 = (uint64_t)result;
  return result;
}

void sub_1905BF690(uint64_t a1)
{
  sub_1902BC548(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1905BF6C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a3, *(void *)(a1 + 24));
}

void sub_1905BF6D8(uint64_t a1)
{
  sub_1902BC548(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1905BF710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a3, *(void *)(a1 + 24));
}

void sub_1905BF720(uint64_t a1)
{
  sub_1902BC548(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1905BF758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a3, *(void *)(a1 + 24));
}

uint64_t sub_1905BFE44(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t result = 0;
  int v4 = *(_DWORD *)(a1 + 8);
  do
  {
    if (v4)
    {
      --v4;
      unsigned int v5 = *(unsigned __int8 *)(a1 + 12);
    }
    else
    {
      uint64_t v6 = (unsigned __int8 *)(*(void *)a1)++;
      unsigned int v5 = *v6;
      *(unsigned char *)(a1 + 12) = v5;
      int v4 = 7;
    }
    *(_DWORD *)(a1 + 8) = v4;
    result |= (unint64_t)((v5 >> v4) & 1) << v2++;
  }
  while (v2 != 64);
  return result;
}

uint64_t sub_1905BFEA0(uint64_t result, int a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = result;
  int v3 = 0;
  LODWORD(result) = 0;
  int v4 = *(_DWORD *)(v2 + 8);
  do
  {
    if (v4)
    {
      --v4;
      unsigned int v5 = *(unsigned __int8 *)(v2 + 12);
    }
    else
    {
      uint64_t v6 = (unsigned __int8 *)(*(void *)v2)++;
      unsigned int v5 = *v6;
      *(unsigned char *)(v2 + 12) = v5;
      int v4 = 7;
    }
    *(_DWORD *)(v2 + 8) = v4;
    uint64_t result = (((v5 >> v4) & 1) << v3++) | result;
  }
  while (a2 != v3);
  return result;
}

uint64_t sub_1905BFF08(uint64_t a1)
{
  int v2 = sub_1905BFEA0(a1, 4);
  int v3 = ((v2 << 28 >> 31) & 0xFFFFFFF0) + v2;
  if (v3 == -8)
  {
    uint64_t result = sub_1905BFE44(a1);
    uint64_t v5 = *(void *)(a1 + 16);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t result = v5 + v3 + *(void *)(a1 + 24);
  }
  *(void *)(a1 + 16) = result;
  *(void *)(a1 + 24) = result - v5;
  return result;
}

float sub_1905BFF68@<S0>(int *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v6 = *a1;
  uint64_t v7 = sub_1905BFF08((uint64_t)a1);
  sub_1905C002C((uint64_t)a1, (uint64_t)&v9, (uint64_t)(a1 + 8));
  *a2 = *a1 - v6;
  *(float32x2_t *)a3 = vmul_f32(vcvt_f32_s32(v9), (float32x2_t)vdup_n_s32(0x39800000u));
  float result = (float)v10 * 0.00024414;
  *(float *)(a3 + 8) = result;
  *(void *)(a3 + 12) = v7;
  return result;
}

uint64_t sub_1905C002C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  int v7 = byte_19060CD59[(int)sub_1905BFEA0(a1, 3)];
  do
  {
    uint64_t result = sub_1905BFEA0(a1, v7);
    if ((result & (1 << (v7 - 1))) != 0) {
      int v9 = -1 << v7;
    }
    else {
      int v9 = 0;
    }
    int v10 = *(_DWORD *)(a3 + v6) + result + v9;
    *(_DWORD *)(a2 + v6) = v10;
    *(_DWORD *)(a3 + v6) = v10;
    v6 += 4;
  }
  while (v6 != 12);
  return result;
}

float32x4_t sub_1905C00CC@<Q0>(int *a1@<X0>, _DWORD *a2@<X1>, float32x4_t *a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v6 = *a1;
  uint64_t v7 = sub_1905BFF08((uint64_t)a1);
  sub_1905C017C((uint64_t)a1, (uint64_t)&v9, (uint64_t)(a1 + 8));
  *a2 = *a1 - v6;
  float32x4_t result = vmulq_f32(vcvtq_f32_s32(v9), (float32x4_t)vdupq_n_s32(0x3D800000u));
  *a3 = result;
  a3[1].i64[0] = v7;
  return result;
}

uint64_t sub_1905C017C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  int v7 = byte_19060CD61[(int)sub_1905BFEA0(a1, 3)];
  do
  {
    uint64_t result = sub_1905BFEA0(a1, v7);
    if ((result & (1 << (v7 - 1))) != 0) {
      int v9 = -1 << v7;
    }
    else {
      int v9 = 0;
    }
    int v10 = *(_DWORD *)(a3 + v6) + result + v9;
    *(_DWORD *)(a2 + v6) = v10;
    *(_DWORD *)(a3 + v6) = v10;
    v6 += 4;
  }
  while (v6 != 16);
  return result;
}

float32x2_t sub_1905C021C@<D0>(int *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  v16[1] = *(int32x2_t *)MEMORY[0x1E4F143B8];
  int v6 = *a1;
  uint64_t v7 = sub_1905BFF08((uint64_t)a1);
  sub_1905C02E8((uint64_t)a1, (uint64_t)v16, (uint64_t)(a1 + 8));
  *a2 = *a1 - v6;
  float32x2_t v8 = (float32x2_t)vdup_n_s32(0x39800000u);
  float32x2_t v9 = vmul_f32(vcvt_f32_s32(v16[0]), v8);
  v8.i32[0] = 1119092736;
  v8.i32[0] = vadd_f32(v9, v8).u32[0];
  __asm { FMOV            V2.2S, #10.0 }
  float32x2_t result = vmul_f32(v9, _D2);
  v8.i32[1] = result.i32[1];
  *(float32x2_t *)a3 = v8;
  *(_DWORD *)(a3 + 8) = 0;
  *(void *)(a3 + 12) = v7;
  return result;
}

uint64_t sub_1905C02E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  int v7 = byte_19060CD69[(int)sub_1905BFEA0(a1, 3)];
  char v8 = 1;
  do
  {
    char v9 = v8;
    uint64_t result = sub_1905BFEA0(a1, v7);
    char v8 = 0;
    if ((result & (1 << (v7 - 1))) != 0) {
      int v11 = -1 << v7;
    }
    else {
      int v11 = 0;
    }
    int v12 = *(_DWORD *)(a3 + 4 * v6) + result + v11;
    *(_DWORD *)(a2 + 4 * v6) = v12;
    *(_DWORD *)(a3 + 4 * v6) = v12;
    uint64_t v6 = 1;
  }
  while ((v9 & 1) != 0);
  return result;
}

Class sub_1905C0464()
{
  if (qword_1E929E950 != -1) {
    dispatch_once(&qword_1E929E950, &unk_1EDFD2A60);
  }
  Class result = objc_getClass("NRPairedDeviceRegistry");
  qword_1E929E948 = (uint64_t)result;
  off_1EB3BE8B0[0] = sub_1905C04C8;
  return result;
}

uint64_t sub_1905C04C8()
{
  return qword_1E929E948;
}

void *sub_1905C04D4()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry", 2);
  qword_1E929E958 = (uint64_t)result;
  return result;
}

uint64_t sub_1905C0500()
{
  if (qword_1E929E950 != -1) {
    dispatch_once(&qword_1E929E950, &unk_1EDFD2A60);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)qword_1E929E958, "NRDevicePropertyIsAltAccount");
  if (v0)
  {
    uint64_t result = *v0;
    qword_1E929E960 = result;
  }
  else
  {
    uint64_t result = qword_1E929E960;
  }
  off_1EB3BE8B8[0] = sub_1905C0580;
  return result;
}

uint64_t sub_1905C0580()
{
  return qword_1E929E960;
}

double sub_1905C058C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFC93D0;
  *(void *)(a1 + 8) = 0x1000000000;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 233) = 0;
  *(unsigned char *)(a1 + 244) = 1;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 272) = 0x2000000000;
  *(void *)(a1 + 408) = 0;
  *(_WORD *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 42dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 973279855;
  *(int32x2_t *)(a1 + 424) = vdup_n_s32(0x3A03126Fu);
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 1;
  *(_DWORD *)(a1 + 48dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 32;
  *(_DWORD *)(a1 + 492) = 0;
  *(void *)(a1 + 484) = 0;
  *(_DWORD *)(a1 + 496) = 1065353216;
  *(unsigned char *)(a1 + 50dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
  *(void *)(a1 + 504) = 0xA00000000;
  *(_DWORD *)(a1 + 672) = 1065353216;
  *(void *)(a1 + 68dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0x500000000;
  *(void *)(a1 + 728) = 0x500000000;
  *(_DWORD *)(a1 + 208) = 0;
  *(void *)(a1 + 813) = 0;
  *(_OWORD *)(a1 + 80dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0u;
  *(void *)&double result = 1003306496;
  *(_OWORD *)(a1 + 212) = xmmword_19060CD80;
  return result;
}

int32x2_t sub_1905C0668(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(void *)(a1 + 408) = 0;
  *(unsigned char *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 452) = 0;
  *(void *)(a1 + 444) = 0;
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(unsigned char *)(a1 + 24dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
  *(_OWORD *)(a1 + 80dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0u;
  *(_DWORD *)(a1 + 816) = 0;
  *(_DWORD *)(a1 + 42dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 973279855;
  int32x2_t result = vdup_n_s32(0x3A03126Fu);
  *(int32x2_t *)(a1 + 424) = result;
  *(void *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  *(void *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 44dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 244) = 1;
  *(void *)(a1 + 484) = 0;
  *(void *)(a1 + 492) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 504) = 0;
  *(unsigned char *)(a1 + 50dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
  *(_DWORD *)(a1 + 672) = 1065353216;
  *(_DWORD *)(a1 + 68dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
  *(_DWORD *)(a1 + 728) = 0;
  *(unsigned char *)(a1 + 82dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
  return result;
}

float sub_1905C0704(uint64_t a1, float32x2_t *a2, uint64_t a3)
{
  sub_19042FFA8((unsigned __int16 *)(a1 + 8), (uint64_t)a2);
  sub_1904FABA0((float32x2_t *)(a1 + 208), a2);
  *(void *)(a1 + 228) = *(void *)(a1 + 808);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a1 + 816);
  *(unsigned char *)(a1 + 24dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = sub_1905C0788(a1, *(void *)(a1 + 800), a1 + 228);
  *(void *)(a1 + 80dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = a3;
  *(_DWORD *)(a1 + 808) = a2->i32[0];
  *(_DWORD *)(a1 + 812) = a2->i32[1];
  float result = a2[1].f32[0];
  *(float *)(a1 + 816) = result;
  return result;
}

uint64_t sub_1905C0788(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(unsigned __int16 *)(a1 + 682);
  if (*(_DWORD *)(a1 + 684) != v3) {
    return 0;
  }
  unint64_t v4 = a2;
  uint64_t v6 = *(unsigned __int16 *)(a1 + 680);
  if (*(void *)(a1 + 688 + 8 * v6) > a2) {
    return 0;
  }
  unint64_t v7 = v3 + v6 - 1;
  uint64_t v8 = v7 >= v3 ? *(unsigned __int16 *)(a1 + 682) : 0;
  unint64_t v9 = *(void *)(a1 + 688 + 8 * (v7 - v8));
  if (v9 + 10000 < a2) {
    return 0;
  }
  BOOL v12 = v9 >= a2;
  uint64_t v13 = v9 - a2;
  if (!v12)
  {
    uint64_t v14 = 0;
    float v15 = (float)v13 * 0.000001;
    unint64_t v16 = *(unsigned __int16 *)(a1 + 728) + (unint64_t)*(unsigned __int16 *)(a1 + 730) - 1;
    unint64_t v17 = *(unsigned int *)(a1 + 732);
    if (v16 < v17) {
      unint64_t v17 = 0;
    }
    uint64_t v18 = (float32x2_t *)(a1 + 728 + 12 * (v16 - v17));
    float v19 = v15 * v18[2].f32[0];
    float32x2_t v32 = vmul_n_f32(v18[1], v15);
    float v33 = v19;
    do
    {
      v32.f32[v14] = -v32.f32[v14];
      ++v14;
    }
    while (v14 != 3);
    float32x2_t v30 = v32;
    float v31 = v33;
    sub_190556004((float *)&v30, (uint64_t)&v32);
    *(float *)a3 = sub_1904CF674((uint64_t)&v32, (float *)a3);
    *(_DWORD *)(a3 + 4) = v20;
    *(_DWORD *)(a3 + 8) = v21;
    return 1;
  }
  if (v3 == 1) {
    return 1;
  }
  unint64_t v22 = 0;
  do
  {
    uint64_t v23 = (unint64_t *)sub_19047A7F8((unsigned __int16 *)(a1 + 680), v22++);
    if (v4 >= *v23 && v4 < *(void *)sub_19047A7F8((unsigned __int16 *)(a1 + 680), v22))
    {
      float v29 = (float)(*(void *)sub_19047A7F8((unsigned __int16 *)(a1 + 680), v22) - v4) * 0.000001;
      uint64_t v24 = (float32x2_t *)sub_19043049C((unsigned __int16 *)(a1 + 728), v22);
      uint64_t v25 = 0;
      float v26 = v29 * v24[1].f32[0];
      float32x2_t v32 = vmul_n_f32(*v24, v29);
      float v33 = v26;
      do
      {
        v32.f32[v25] = -v32.f32[v25];
        ++v25;
      }
      while (v25 != 3);
      float32x2_t v30 = v32;
      float v31 = v33;
      sub_190556004((float *)&v30, (uint64_t)&v32);
      *(float *)a3 = sub_1904CF674((uint64_t)&v32, (float *)a3);
      *(_DWORD *)(a3 + 4) = v27;
      *(_DWORD *)(a3 + 8) = v28;
      unint64_t v4 = *(void *)sub_19047A7F8((unsigned __int16 *)(a1 + 680), v22);
    }
    uint64_t result = 1;
  }
  while (v22 < (unint64_t)*(unsigned __int16 *)(a1 + 682) - 1);
  return result;
}

void sub_1905C09F0(uint64_t a1, float32x2_t *a2, unint64_t a3)
{
  if (*(unsigned char *)(a1 + 416))
  {
    uint64_t v6 = (float32x2_t *)(a1 + 444);
    if (*(unsigned char *)(a1 + 820))
    {
      *(void *)(a1 + 256) = 0;
      *(void *)(a1 + 264) = 0;
      *(_DWORD *)(a1 + 272) = 0;
      *(unsigned char *)(a1 + 244) = 1;
      v9.i32[0] = a2->i32[0];
      *(_DWORD *)(a1 + 456) = a2->i32[0];
      __int32 v7 = a2->i32[1];
      *(_DWORD *)(a1 + 46dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = v7;
      float v8 = a2[1].f32[0];
      *(float *)(a1 + 464) = v8;
      *(void *)(a1 + 484) = 0;
      *(void *)(a1 + 492) = 0x3F80000000000000;
      *(_DWORD *)(a1 + 504) = 0;
      *(unsigned char *)(a1 + 50dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
      *(_DWORD *)(a1 + 672) = 1065353216;
      *(unsigned char *)(a1 + 82dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
      v9.i32[1] = v7;
    }
    else
    {
      float32x2_t v9 = *(float32x2_t *)(a1 + 456);
      float v8 = *(float *)(a1 + 464);
    }
    float v10 = (float)((float)(v8 + a2[1].f32[0]) * 0.5) - *(float *)(a1 + 452);
    float32x2_t v35 = vsub_f32(vmul_f32(vadd_f32(v9, *a2), (float32x2_t)0x3F0000003F000000), *v6);
    float v36 = v10;
    uint64_t v11 = *(unsigned __int16 *)(a1 + 682);
    unint64_t v12 = *(unsigned int *)(a1 + 684);
    uint64_t v13 = *(unsigned __int16 *)(a1 + 680);
    if (v13 + v11 >= v12) {
      uint64_t v14 = *(unsigned int *)(a1 + 684);
    }
    else {
      uint64_t v14 = 0;
    }
    *(void *)(a1 + 680 + 8 * (v13 + v11 - v14) + 8) = a3;
    if (v12 <= v11)
    {
      if (v13 + 1 < v12) {
        LOWORD(v12) = 0;
      }
      *(_WORD *)(a1 + 68dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = v13 + 1 - v12;
    }
    else
    {
      *(_WORD *)(a1 + 682) = v11 + 1;
    }
    sub_19042FFA8((unsigned __int16 *)(a1 + 728), (uint64_t)&v35);
    float v15 = a2[1].f32[0] - *(float *)(a1 + 452);
    *(float32x2_t *)(a1 + 432) = vsub_f32(*a2, *v6);
    *(float *)(a1 + 44dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = v15;
    *(_DWORD *)(a1 + 456) = a2->i32[0];
    *(_DWORD *)(a1 + 46dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = a2->i32[1];
    *(_DWORD *)(a1 + 464) = a2[1].i32[0];
    int v16 = *(_DWORD *)(a1 + 476) + 1;
    *(_DWORD *)(a1 + 476) = v16;
    if (v16 == *(_DWORD *)(a1 + 472))
    {
      uint64_t v17 = 0;
      float v18 = 0.0;
      do
      {
        float v18 = v18 + (float)(*(float *)(a1 + 432 + v17) * *(float *)(a1 + 432 + v17));
        v17 += 4;
      }
      while (v17 != 12);
      v34.i32[0] = sqrtf(v18);
      sub_19042D76C(a1 + 244, v34.f32);
      *(_DWORD *)(a1 + 476) = 0;
    }
    unint64_t v19 = *(void *)(a1 + 408);
    if (v19)
    {
      BOOL v20 = a3 >= v19;
      unint64_t v21 = a3 - v19;
      if (v21 != 0 && v20)
      {
        float v22 = (float)(*(float *)(a1 + 440) * (float)v21) * 0.000001;
        float32x2_t v31 = vmul_f32(vmul_n_f32(*(float32x2_t *)(a1 + 432), (float)v21), (float32x2_t)vdup_n_s32(0x358637BDu));
        float v32 = v22;
        *(double *)v23.i64 = sub_1904CF7FC(&v33, (float *)&v31);
        sub_1904CF3F4((uint64_t)&v33, (float *)(a1 + 484), &v34, v23);
        *(float32x4_t *)(a1 + 484) = v34;
      }
    }
    unsigned __int8 v24 = *(unsigned char *)(a1 + 500) + 1;
    *(unsigned char *)(a1 + 50dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = v24;
    if ((*(_DWORD *)(a1 + 468) * v24) >> 4 >= 0x753)
    {
      sub_1904FAC28((unsigned __int16 *)(a1 + 504), (_OWORD *)(a1 + 484));
      *(unsigned char *)(a1 + 50dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
    }
    if (*(_DWORD *)(a1 + 508) == *(unsigned __int16 *)(a1 + 506))
    {
      unint64_t v25 = 0;
      float v26 = 1.0;
      do
      {
        uint64_t v27 = sub_1905022B4((unsigned __int16 *)(a1 + 504), v25);
        v28.f32[0] = -*(float *)(a1 + 492);
        unsigned int v29 = *(_DWORD *)(a1 + 496);
        *(float32x2_t *)v33.f32 = vneg_f32(v6[5]);
        v33.i64[1] = __PAIR64__(v29, v28.u32[0]);
        float32x4_t v30 = sub_1902D9ACC(&v33, v28);
        sub_1904CF3F4(v27, v33.f32, &v34, v30);
        if (v26 >= v34.f32[3]) {
          float v26 = v34.f32[3];
        }
        ++v25;
      }
      while (v25 != 10);
      *(float *)(a1 + 672) = v26;
    }
    *(void *)(a1 + 408) = a3;
  }
}

BOOL sub_1905C0CE8(uint64_t a1)
{
  int v2 = (unsigned __int16 *)(a1 + 8);
  float v3 = sub_1904308EC((unsigned __int16 *)(a1 + 8), 0, *(unsigned __int16 *)(a1 + 10));
  uint64_t v4 = 0;
  float v15 = v3;
  int v16 = v5;
  int v17 = v6;
  float v7 = 0.0;
  do
  {
    float v7 = v7 + (float)(*(float *)((char *)&v15 + v4) * *(float *)((char *)&v15 + v4));
    v4 += 4;
  }
  while (v4 != 12);
  float v8 = sqrtf(v7) + -1.0;
  if (v8 <= 0.0) {
    float v8 = -v8;
  }
  if (v8 >= 0.05) {
    return 0;
  }
  sub_190484254(v2, 0, *(unsigned __int16 *)(a1 + 10));
  uint64_t v9 = 0;
  float v15 = v10;
  int v16 = v11;
  int v17 = v12;
  float v13 = 0.0;
  do
  {
    float v13 = v13 + (float)(*(float *)((char *)&v15 + v9) * *(float *)((char *)&v15 + v9));
    v9 += 4;
  }
  while (v9 != 12);
  return sqrtf(v13) < 0.01;
}

uint64_t sub_1905C0DD0(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 417) = *(void *)(a2 + 64) != 0;
  return result;
}

void *sub_1905C0DE4(void *result)
{
  *uint64_t result = &unk_1EDFC93D0;
  return result;
}

void sub_1905C0E04(void *a1)
{
  *a1 = &unk_1EDFC93D0;
  JUMPOUT(0x192FCC980);
}

void sub_1905C1098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  sub_19042FFA8((unsigned __int16 *)a1, a2);
  if (a5 != 2)
  {
    unint64_t v9 = *(unsigned __int16 *)(a1 + 2);
    if (v9 >= 0x1F)
    {
      float v10 = sub_1904308EC((unsigned __int16 *)a1, 0, v9);
      float v12 = v11;
      float v14 = v13;
      *(float *)float32x4_t v33 = v10;
      *(float *)&v33[1] = v11;
      *(float *)&v33[2] = v13;
      sub_190484254((unsigned __int16 *)a1, 0, *(unsigned __int16 *)(a1 + 2));
      uint64_t v17 = 0;
      float v31 = v16;
      int v32 = v18;
      float v19 = 0.0;
      do
      {
        float v19 = v19 + (float)(*(float *)&v33[v17] * *(float *)&v33[v17]);
        ++v17;
      }
      while (v17 != 3);
      float v20 = sqrtf(v19) + -1.0;
      if (v15 <= 0.0) {
        float v21 = -v15;
      }
      else {
        float v21 = v15;
      }
      for (uint64_t i = 4; i != 12; i += 4)
      {
        float v23 = *(float *)&v30[i];
        if (v23 <= 0.0) {
          float v23 = -v23;
        }
        if (v23 > v21) {
          float v21 = v23;
        }
      }
      float v24 = -v20;
      if (v20 > 0.0) {
        float v24 = v20;
      }
      if (v21 < 0.000002 && v24 < 0.05)
      {
        float v25 = -v14;
        if (v14 > 0.0) {
          float v25 = v14;
        }
        float v26 = v25 + -1.0;
        if (v26 <= 0.0) {
          float v26 = -v26;
        }
        if (v26 <= 0.05)
        {
          if (qword_1EB3BE888 != -1) {
            dispatch_once(&qword_1EB3BE888, &unk_1EDFD2A80);
          }
          uint64_t v27 = off_1EB3BE880;
          if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 134218752;
            double v43 = v10;
            __int16 v44 = 2048;
            double v45 = v12;
            __int16 v46 = 2048;
            double v47 = v14;
            __int16 v48 = 2048;
            double v49 = v21;
            _os_log_impl(&dword_1902AF000, v27, OS_LOG_TYPE_DEBUG, "[Gesture] Grabbing reference pose while static, %.3f, %.3f, %.3f, varInfNorm, %.8f", buf, 0x2Au);
          }
          if (!sub_1902D8400(115, 2)) {
            goto LABEL_45;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE888 != -1) {
            dispatch_once(&qword_1EB3BE888, &unk_1EDFD2A80);
          }
          int v34 = 134218752;
          double v35 = v10;
          __int16 v36 = 2048;
          double v37 = v12;
          __int16 v38 = 2048;
          double v39 = v14;
          __int16 v40 = 2048;
          double v41 = v21;
          goto LABEL_50;
        }
      }
      if (a5 == 1 && a4 && !*(void *)(a1 + 752))
      {
        if (v15 <= v16)
        {
          float v15 = v16;
          if (v16 < 0.00008)
          {
LABEL_40:
            if (qword_1EB3BE888 != -1) {
              dispatch_once(&qword_1EB3BE888, &unk_1EDFD2A80);
            }
            float32x4_t v28 = off_1EB3BE880;
            if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_1902AF000, v28, OS_LOG_TYPE_DEBUG, "[Gesture] Getting new reference in StableState when no reference is available yet.", buf, 2u);
            }
            if (!sub_1902D8400(115, 2)) {
              goto LABEL_45;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1EB3BE888 != -1) {
              dispatch_once(&qword_1EB3BE888, &unk_1EDFD2A80);
            }
            LOWORD(v34) = 0;
LABEL_50:
            unsigned int v29 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 2, "void CMPickupDetector::StaticReference::feedBufferAndCalcReference(const CMVector3d &, uint64_t, uint64_t, DetectionState)", "CoreLocation: %s\n", v29);
            if (v29 != (char *)buf) {
              free(v29);
            }
LABEL_45:
            *(void *)(a1 + 752) = a3;
            *(float *)(a1 + 76dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = sqrtf((float)(v12 * v12) + (float)(v10 * v10));
            return;
          }
        }
        else if (v15 < 0.00008)
        {
          goto LABEL_40;
        }
        if ((unint64_t)(a3 - a4) >= 0x1E8481 && v15 < 0.0004) {
          goto LABEL_40;
        }
      }
    }
  }
}

uint64_t sub_1905C1514(unsigned __int8 *a1, float32x2_t *a2, unint64_t a3)
{
  sub_1904FABA0((float32x2_t *)a1 + 1, a2);
  uint64_t v5 = *((void *)a1 + 5) - 1;
  *((void *)a1 + 5) = v5;
  if (!v5)
  {
    *((void *)a1 + 5) = *((void *)a1 + 4);
    int v6 = *((_DWORD *)a1 + 6);
    uint64_t v8 = *((void *)a1 + 2);
    int v9 = v6;
    sub_1905C1098((uint64_t)(a1 + 48), (uint64_t)&v8, a3, *((void *)a1 + 105), *a1);
    *((void *)a1 + 102) = a3;
    sub_1905C15A0((uint64_t)a1, (float *)&v8, a3);
  }
  return *a1;
}

uint64_t sub_1905C15A0(uint64_t a1, float *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  if (*(unsigned char *)a1 == 1)
  {
    uint64_t result = sub_1905C1B40(a1, a2, a3);
    if (!result) {
      return result;
    }
    unint64_t v3 = 0;
    *(unsigned char *)a1 = 2;
    *(void *)(a1 + 80dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
    *(_DWORD *)(a1 + 808) = 0;
    *(_DWORD *)(a1 + 836) = 0;
  }
  else
  {
    uint64_t result = sub_1905C1618(a1, a3);
    if (!result) {
      return result;
    }
    *(unsigned char *)a1 = 1;
    *(void *)(a1 + 832) = 0;
  }
  *(void *)(a1 + 84dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = v3;
  return result;
}

uint64_t sub_1905C1618(uint64_t a1, unint64_t a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(unsigned __int16 *)(a1 + 50);
  if (v2 < 0x1F) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 800);
  if (v6 == a2 && v6 - 1 < a2)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD2A80);
    }
    float v21 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v21, OS_LOG_TYPE_DEBUG, "[Gesture] Entered Stable state from being static/frozen", buf, 2u);
    }
    if (!sub_1902D8400(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE888 == -1)
    {
LABEL_43:
      float v25 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "BOOL CMPickupDetector::checkForStable(uint64_t)", "CoreLocation: %s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
      return 1;
    }
LABEL_45:
    dispatch_once(&qword_1EB3BE888, &unk_1EDFD2A80);
    goto LABEL_43;
  }
  float v8 = sub_1904308EC((unsigned __int16 *)(a1 + 48), 0, v2);
  float v10 = v9;
  sub_190484254((unsigned __int16 *)(a1 + 48), 0, *(unsigned __int16 *)(a1 + 50));
  float v13 = sqrtf((float)(v10 * v10) + (float)(v8 * v8));
  if (v11 <= v12) {
    float v14 = v12;
  }
  else {
    float v14 = v11;
  }
  BOOL v15 = v13 <= 0.35 && v14 < 0.0004;
  if (qword_1EB3BE888 != -1) {
    dispatch_once(&qword_1EB3BE888, &unk_1EDFD2A80);
  }
  float v16 = off_1EB3BE880;
  if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEBUG))
  {
    int v17 = *(_DWORD *)(a1 + 836);
    float v18 = v13 - *(float *)(a1 + 808);
    *(_DWORD *)long long buf = 67109888;
    *(_DWORD *)uint64_t v27 = v17;
    if (v18 <= 0.0) {
      float v18 = -v18;
    }
    *(_WORD *)&v27[4] = 2048;
    *(double *)&v27[6] = v14;
    __int16 v28 = 2048;
    double v29 = v13;
    __int16 v30 = 2048;
    double v31 = v18;
    _os_log_impl(&dword_1902AF000, v16, OS_LOG_TYPE_DEBUG, "[Gesture] fStableCount, %d, maxXYVar, %.8f, xyMeanNorm, %.3f, deltaTiltMean, %.3f", buf, 0x26u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD2A80);
    }
    float v24 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "BOOL CMPickupDetector::checkForStable(uint64_t)", "CoreLocation: %s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  int v19 = *(_DWORD *)(a1 + 836);
  if (v15)
  {
    *(_DWORD *)(a1 + 836) = v19 + 1;
    if (v19 >= 62)
    {
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD2A80);
      }
      float v20 = off_1EB3BE880;
      if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134217984;
        *(double *)uint64_t v27 = (float)((float)a2 * 0.000001);
        _os_log_impl(&dword_1902AF000, v20, OS_LOG_TYPE_DEBUG, "[Gesture] Entered Stable state. timestamp, %.6f", buf, 0xCu);
      }
      if (!sub_1902D8400(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 == -1) {
        goto LABEL_43;
      }
      goto LABEL_45;
    }
    return 0;
  }
  BOOL v22 = __OFSUB__(v19, 1);
  int v23 = v19 - 1;
  if (v23 < 0 != v22) {
    return 0;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 836) = v23;
  return result;
}

uint64_t sub_1905C1B40(uint64_t a1, float *a2, unint64_t a3)
{
  uint64_t result = 0;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 800);
  if (v5 - 1 >= a3 || ((a3 - v5) & 0x8000000000000000) != 0) {
    return result;
  }
  sub_190484254((unsigned __int16 *)(a1 + 48), 0, *(unsigned __int16 *)(a1 + 50));
  float v9 = v8;
  float v11 = v10;
  float v13 = v12;
  float v14 = sqrtf((float)(a2[1] * a2[1]) + (float)(*a2 * *a2)) - *(float *)(a1 + 808);
  if (v14 <= 0.0) {
    float v15 = -v14;
  }
  else {
    float v15 = v14;
  }
  uint64_t v16 = *(void *)(a1 + 824);
  if (qword_1EB3BE888 != -1) {
    dispatch_once(&qword_1EB3BE888, &unk_1EDFD2A80);
  }
  unint64_t v17 = a3 - v16;
  float v18 = off_1EB3BE880;
  if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEBUG))
  {
    int v19 = *(_DWORD *)(a1 + 832);
    if (v9 <= v11) {
      float v20 = v11;
    }
    else {
      float v20 = v9;
    }
    *(_DWORD *)long long buf = 134218752;
    double v28 = v15;
    __int16 v29 = 1024;
    int v30 = v19;
    __int16 v31 = 2048;
    double v32 = (float)(v13 / v20);
    __int16 v33 = 2048;
    double v34 = (float)((float)v17 * 0.000001);
    _os_log_impl(&dword_1902AF000, v18, OS_LOG_TYPE_DEBUG, "[Gesture] deltaTilt, %.3f, fLiftCount, %d, z2xyRatio, %.3f, dt, %.2f", buf, 0x26u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD2A80);
    }
    float v25 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "BOOL CMPickupDetector::checkForLift(const CMVector3d &, uint64_t)", "CoreLocation: %s\n", v25);
    if (v25 != (char *)buf) {
      free(v25);
    }
  }
  int v21 = *(_DWORD *)(a1 + 832);
  if (v15 >= 0.035)
  {
    if (v21 <= 2) {
      *(void *)(a1 + 824) = a3;
    }
    if (v15 < 0.07) {
      int v22 = 1;
    }
    else {
      int v22 = 2;
    }
    goto LABEL_23;
  }
  if (v21 >= 1 && v15 <= 0.004)
  {
    int v22 = -1;
LABEL_23:
    v21 += v22;
    *(_DWORD *)(a1 + 832) = v21;
  }
  if (v21 < 13) {
    return 0;
  }
  if (v17 >> 8 > 0xC34)
  {
    uint64_t result = 0;
    *(_DWORD *)(a1 + 832) = 0;
    return result;
  }
  float v23 = v9 <= v11 ? v11 : v9;
  if (v13 >= (float)(v23 * 16.0)) {
    return 0;
  }
  if (qword_1EB3BE888 != -1) {
    dispatch_once(&qword_1EB3BE888, &unk_1EDFD2A80);
  }
  float v24 = off_1EB3BE880;
  if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134217984;
    double v28 = (float)((float)a3 * 0.000001);
    _os_log_impl(&dword_1902AF000, v24, OS_LOG_TYPE_DEBUG, "[Gesture] Entered Lift state. timestamp, %.6f", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD2A80);
    }
    float v26 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "BOOL CMPickupDetector::checkForLift(const CMVector3d &, uint64_t)", "CoreLocation: %s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  return 1;
}

void sub_1905C2010(uint64_t a1, char a2, int a3, char a4, char a5)
{
  uint64_t v9 = sub_1902C4008(a1, a3);
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)(v9 + 208) = 0;
  *(void *)(v9 + 216) = 0;
  *(unsigned char *)(v9 + 224) = a5;
  *(unsigned char *)(v9 + 225) = 0;
  *(void *)(v9 + 256) = 0;
  *(void *)(v9 + 264) = 0;
  *(unsigned char *)(v9 + 272) = 0;
  *(unsigned char *)(v9 + 273) = v10;
  *(void *)uint64_t v9 = &unk_1EDFC9990;
  *(void *)(v9 + 20dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = &unk_1EDFC99F8;
  *(unsigned char *)(v9 + 274) = a4;
  *(unsigned char *)(v9 + 275) = 0;
  *(void *)(v9 + 28dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
  uint64_t v11 = sub_1902B4534();
  double v12 = sub_1902B4DA8(v11, (double *)(a1 + 24));
  sub_1904D1BD4(a1 + 288, &v12, a1 + 16, a2);
}

void sub_1905C20EC(_Unwind_Exception *a1)
{
  sub_190445960(v2);
  sub_1905B1F7C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1905C2108(void *a1)
{
  *a1 = &unk_1EDFC9990;
  unint64_t v2 = a1 + 25;
  a1[25] = &unk_1EDFC99F8;
  sub_1902DE10C((uint64_t)(a1 + 25));
  sub_1902DE0A4(v2);
  sub_1902DE03C(v2);
  sub_1904D23D4(a1 + 36);
  sub_190445960(v2);

  return sub_1905B1F7C((uint64_t)a1);
}

uint64_t sub_1905C21A8(uint64_t a1)
{
  return sub_1905C2108((void *)(a1 - 200));
}

void sub_1905C21B0(void *a1)
{
  sub_1905C2108(a1);

  JUMPOUT(0x192FCC980);
}

void sub_1905C21E8(uint64_t a1)
{
  sub_1905C2108((void *)(a1 - 200));

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1905C2224(uint64_t a1)
{
  uint64_t v2 = a1 + 288;
  sub_1904D24A4(a1 + 288);
  if (*(unsigned char *)(a1 + 274))
  {
    sub_190445C68(a1 + 200);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v6 = 0xBFF0000000000000;
    uint64_t v3 = mach_absolute_time();
    double v5 = sub_1902D8D34(v3);
    sub_1904D3C0C(v2, (double *)&v8, (double *)&v7, (double *)&v6, &v5);
  }
  sub_190445A68(a1 + 200);
  sub_190445B8C(a1 + 200);
  uint64_t v8 = 2;
  uint64_t result = sub_1905B224C(a1, &v8);
  *(unsigned char *)(a1 + 275) = 0;
  *(void *)(a1 + 28dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
  return result;
}

void *sub_1905C22D4(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 200);
  sub_1902DE10C(a1 + 200);
  sub_1902DE0A4(v1);

  return sub_1902DE03C(v1);
}

void sub_1905C2318(uint64_t a1, int a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE878 != -1) {
    dispatch_once(&qword_1EB3BE878, &unk_1EDFD2AA0);
  }
  uint64_t v4 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109120;
    int v7 = a2;
    _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_INFO, "Application state changed, %d", buf, 8u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD2AA0);
    }
    double v5 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "virtual void CLSensorFusionServiceLegacy::applicationStateChanged(BOOL)", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  *(unsigned char *)(a1 + 275) = a2 ^ 1;
}

void sub_1905C24D0(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  float v4 = *(float *)(a2 + 12);
  *(double *)long long buf = *(float *)(a2 + 8);
  uint64_t v5 = a1 + 304;
  uint64_t v6 = a1 + 288;
  double v24 = v4;
  v38[0] = *(float *)(a2 + 16);
  sub_1904D25B4(a1 + 288, (float64x2_t *)buf, (uint64_t)&v24, v38, (void *)a2);
  v7.i64[0] = *(void *)(a1 + 464);
  float v8 = 0.0;
  float v9 = 0.0;
  float v10 = 0.0;
  if (*(double *)v7.i64 > 0.0)
  {
    double v11 = *(double *)(a1 + 328);
    double v12 = *(double *)(a1 + 320) + *(double *)(a1 + 320);
    double v13 = *(double *)(a1 + 304);
    double v14 = *(double *)(a1 + 312);
    float v8 = *(float *)(a1 + 472) - (v11 * (v14 + v14) - v13 * v12);
    float v9 = *(float *)(a1 + 476) - (-(v11 * (v13 + v13)) - v14 * v12);
    *(double *)v7.i64 = *(float *)(a1 + 480) - (v13 * (v13 + v13) + -1.0 + v14 * (v14 + v14));
    float v10 = *(double *)v7.i64;
  }
  int v15 = *(_DWORD *)(a1 + 452);
  float32x4_t v25 = 0uLL;
  double v24 = -1.0;
  sub_1902D9ACC(&v25, v7);
  double v16 = *(double *)a2;
  double v24 = *(double *)a2;
  float64x2_t v17 = *(float64x2_t *)(v5 + 16);
  *(float32x4_t *)long long buf = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v5), v17);
  sub_1902D9ACC((float32x4_t *)buf, (float32x4_t)v17);
  float32x4_t v25 = *(float32x4_t *)buf;
  float v26 = v8;
  float v27 = v9;
  float v28 = v10;
  uint64_t v29 = *(void *)(v5 + 140);
  int v30 = v15;
  __int16 v33 = 511;
  long long v31 = xmmword_190609AD0;
  long long v32 = xmmword_19060AF90;
  __int16 v34 = (*(unsigned __int8 *)(a1 + 296) << 8) | (16 * *(unsigned __int8 *)(a1 + 252));
  int v35 = 3;
  uint64_t v37 = 0;
  double v18 = *(double *)(a1 + 280);
  char v36 = *(unsigned char *)(a2 + 22);
  if (v18 != 0.0)
  {
    double v19 = v16 - v18;
    if (v16 - v18 > 0.100000001)
    {
      if (qword_1EB3BE878 != -1) {
        dispatch_once(&qword_1EB3BE878, &unk_1EDFD2AA0);
      }
      float v20 = off_1EB3BE870;
      if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134217984;
        *(double *)&uint8_t buf[4] = v19;
        _os_log_impl(&dword_1902AF000, v20, OS_LOG_TYPE_INFO, "Large time gap, %lf", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE878 != -1) {
          dispatch_once(&qword_1EB3BE878, &unk_1EDFD2AA0);
        }
        LODWORD(v38[0]) = 134217984;
        *(double *)((char *)v38 + 4) = v19;
        int v22 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "virtual void CLSensorFusionServiceLegacy::feedGyroData(const CLGyro::Sample *)", "CoreLocation: %s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      if (*(unsigned char *)(a1 + 275))
      {
        if (qword_1EB3BE878 != -1) {
          dispatch_once(&qword_1EB3BE878, &unk_1EDFD2AA0);
        }
        int v21 = off_1EB3BE870;
        if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1902AF000, v21, OS_LOG_TYPE_DEFAULT, "Reset while backgrounded", buf, 2u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE878 != -1) {
            dispatch_once(&qword_1EB3BE878, &unk_1EDFD2AA0);
          }
          LOWORD(v38[0]) = 0;
          float v23 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "virtual void CLSensorFusionServiceLegacy::feedGyroData(const CLGyro::Sample *)", "CoreLocation: %s\n", v23);
          if (v23 != (char *)buf) {
            free(v23);
          }
        }
        sub_1904D24A4(v6);
      }
    }
  }
  *(double *)(a1 + 28dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = v16;
  sub_1902D9B30(a1, (uint64_t)&v24);
}

void sub_1905C2960(uint64_t a1, uint64_t a2)
{
}

void sub_1905C2968(uint64_t a1, float32x2_t *a2, float *a3)
{
}

void sub_1905C2970(uint64_t a1, float32x2_t *a2, float *a3)
{
}

void sub_1905C2978(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a2 + 12);
  double v5 = *(float *)(a2 + 8);
  double v3 = *(float *)(a2 + 16);
  double v4 = v2;
  sub_1904D3C0C(a1 + 288, &v5, &v4, &v3, (void *)a2);
}

void sub_1905C29C8(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1905C29EC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDFC1CB0;
  *(_WORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 1dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 2dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0x3F80000000000000;
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 8dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 1;
  v4[0] = xmmword_19060CE04;
  v4[1] = unk_19060CE14;
  int v5 = 973279855;
  sub_190555CD4(a1 + 28, (uint64_t)v4);
  return a1;
}

uint64_t sub_1905C2A80(uint64_t a1)
{
  *(unsigned char *)(a1 + 1dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 2dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0x3F80000000000000;
  v3[0] = xmmword_19060CE04;
  v3[1] = unk_19060CE14;
  int v4 = 973279855;
  uint64_t result = sub_190555CD4(a1 + 28, (uint64_t)v3);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 8dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 1;
  return result;
}

void sub_1905C2AF4(uint64_t a1)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB3BF768, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB3BF768))
  {
    dword_1EB3BF760 = 1060439283;
    __cxa_guard_release(&qword_1EB3BF768);
  }
  uint64_t v2 = *(void *)(a1 + 56);
  unsigned int v3 = *(unsigned __int16 *)(v2 + 10);
  if (*(_DWORD *)(v2 + 12) == v3)
  {
    if (*(unsigned char *)(v2 + 417))
    {
      BOOL v4 = !sub_1905C0CE8(v2);
      uint64_t v2 = *(void *)(a1 + 56);
      if (v4)
      {
        uint64_t v36 = 0;
        float v5 = *(float *)(v2 + 216);
        float v6 = *(float *)(v2 + 220);
        float v7 = *(float *)(v2 + 224);
        *(float *)long long buf = v5;
        *(float *)&uint8_t buf[4] = v6;
        *(float *)&uint8_t buf[8] = v7;
        float v37 = 0.0;
        do
        {
          float v37 = v37 + (float)(*(float *)&buf[v36] * *(float *)&buf[v36]);
          v36 += 4;
        }
        while (v36 != 12);
        if (sqrtf(v37) > 0.00000011921)
        {
          uint64_t v38 = 0;
          float v39 = 0.0;
          do
          {
            float v39 = v39 + (float)(*(float *)&buf[v38] * *(float *)&buf[v38]);
            v38 += 4;
          }
          while (v38 != 12);
          float v40 = sqrtf(v39);
          float v5 = v5 / v40;
          float v6 = v6 / v40;
          float v7 = v7 / v40;
        }
LABEL_13:
        float v13 = fabsf(v5);
        float v14 = (float)(v7 * -0.0) - v6;
        float v15 = v5 + (float)(v7 * 0.0);
        float v16 = (float)(v6 * -0.0) + (float)(v5 * 0.0);
        if (v13 > *(float *)&dword_1EB3BF760) {
          float v17 = v16;
        }
        else {
          float v17 = 0.0;
        }
        if (v13 > *(float *)&dword_1EB3BF760) {
          float v18 = v15;
        }
        else {
          float v18 = 0.0;
        }
        if (v13 > *(float *)&dword_1EB3BF760) {
          float v19 = v14;
        }
        else {
          float v19 = 1.0;
        }
        uint64_t v20 = *(void *)(a1 + 56);
        if (*(unsigned char *)(v20 + 417))
        {
          BOOL v21 = sub_1905C0CE8(v20);
          if (!*(unsigned char *)(a1 + 10))
          {
            BOOL v29 = v21;
            uint64_t v20 = *(void *)(a1 + 56);
            if (!v29)
            {
              float v30 = *(float *)(v20 + 216);
              float v31 = *(float *)(v20 + 220);
              float v32 = *(float *)(v20 + 224);
              *(float *)float v67 = v30;
              goto LABEL_36;
            }
            goto LABEL_34;
          }
        }
        else if (!*(unsigned char *)(a1 + 10))
        {
LABEL_34:
          float v33 = sub_1904308EC((unsigned __int16 *)(v20 + 8), 0, *(unsigned __int16 *)(v20 + 10));
          goto LABEL_35;
        }
        float v33 = sub_1904CF514((float *)(a1 + 12));
LABEL_35:
        float v30 = v33;
        float v31 = v34;
        float v32 = v35;
        *(float *)float v67 = v33;
LABEL_36:
        uint64_t v41 = 0;
        *(float *)&v67[1] = v31;
        *(float *)&v67[2] = v32;
        float v42 = 0.0;
        do
        {
          float v42 = v42 + (float)(*(float *)&v67[v41] * *(float *)&v67[v41]);
          ++v41;
        }
        while (v41 != 3);
        float v43 = sqrtf(v42);
        float v44 = fabsf(v43 + -1.0);
        if (v44 <= 1.0)
        {
          float v47 = (float)(v44 / v43) * (float)(v44 / v43);
          float v48 = 1.0 / v47;
          v78[0] = 25.0;
          if (v47 < 0.0109) {
            float v48 = 91.743;
          }
          v78[1] = v48;
          v66.i64[0] = 0;
          v66.i64[1] = 0x3F80000000000000;
          BOOL v46 = sub_1904CF974(v78, &v66, (uint64_t)&v68, v19, v18, v17, v30, v31, v32, v27, v28, v22, v23, v24, v25, v26, __PAIR64__(LODWORD(v18), LODWORD(v19)), v17);
          if (v46)
          {
            if ((float32x4_t *)(a1 + 12) != &v66) {
              *(float32x4_t *)(a1 + 12) = v66;
            }
            if ((sub_190555CD4(a1 + 28, (uint64_t)&v68) & 1) == 0)
            {
              if (qword_1EB3BE888 != -1) {
                dispatch_once(&qword_1EB3BE888, &unk_1EDFD2AC0);
              }
              double v49 = off_1EB3BE880;
              if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl(&dword_1902AF000, v49, OS_LOG_TYPE_DEBUG, "invalid initial covariance !(P > 0), using default", buf, 2u);
              }
              if (sub_1902D8400(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EB3BE888 != -1) {
                  dispatch_once(&qword_1EB3BE888, &unk_1EDFD2AC0);
                }
                float v65 = (char *)_os_log_send_and_compose_impl();
                sub_1902D398C("Generic", 1, 0, 2, "BOOL CMSensorFusionMekfPhone::initializeState(const CMVector3d &, const CMVector3d &, float)", "CoreLocation: %s\n", v65);
                if (v65 != buf) {
                  free(v65);
                }
              }
              *(_DWORD *)&unsigned char buf[32] = 973279855;
              *(_OWORD *)long long buf = xmmword_19060CE04;
              *(_OWORD *)&uint8_t buf[16] = unk_19060CE14;
              sub_190555CD4(a1 + 28, (uint64_t)buf);
            }
          }
          else
          {
            if (qword_1EB3BE888 != -1) {
              dispatch_once(&qword_1EB3BE888, &unk_1EDFD2AC0);
            }
            uint64_t v50 = off_1EB3BE880;
            if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_1902AF000, v50, OS_LOG_TYPE_DEBUG, "initializeState northAndGravity failed", buf, 2u);
            }
            if (sub_1902D8400(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EB3BE888 != -1) {
                dispatch_once(&qword_1EB3BE888, &unk_1EDFD2AC0);
              }
              float v64 = (char *)_os_log_send_and_compose_impl();
              sub_1902D398C("Generic", 1, 0, 2, "BOOL CMSensorFusionMekfPhone::initializeState(const CMVector3d &, const CMVector3d &, float)", "CoreLocation: %s\n", v64);
              if (v64 != buf) {
                free(v64);
              }
            }
          }
        }
        else
        {
          if (qword_1EB3BE888 != -1) {
            dispatch_once(&qword_1EB3BE888, &unk_1EDFD2AC0);
          }
          double v45 = off_1EB3BE880;
          if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 134217984;
            *(double *)&uint8_t buf[4] = v43;
            _os_log_impl(&dword_1902AF000, v45, OS_LOG_TYPE_DEBUG, "initializeState MaxInitialDiffUnity failed,magnitude,%f", buf, 0xCu);
          }
          if (sub_1902D8400(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EB3BE888 != -1) {
              dispatch_once(&qword_1EB3BE888, &unk_1EDFD2AC0);
            }
            int v68 = 134217984;
            *(double *)double v69 = v43;
            float v63 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 2, "BOOL CMSensorFusionMekfPhone::initializeState(const CMVector3d &, const CMVector3d &, float)", "CoreLocation: %s\n", v63);
            if (v63 != buf) {
              free(v63);
            }
          }
          BOOL v46 = 0;
        }
        *(unsigned char *)(a1 + 1dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = v46;
        if (qword_1EB3BE888 != -1) {
          dispatch_once(&qword_1EB3BE888, &unk_1EDFD2AC0);
        }
        uint64_t v51 = off_1EB3BE880;
        if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEBUG))
        {
          int v52 = *(unsigned __int8 *)(a1 + 10);
          double v53 = *(float *)(a1 + 12);
          double v54 = *(float *)(a1 + 16);
          double v55 = *(float *)(a1 + 20);
          double v56 = *(float *)(a1 + 24);
          *(_DWORD *)long long buf = 67110400;
          *(_DWORD *)&uint8_t buf[4] = v52;
          *(_WORD *)&uint8_t buf[8] = 2048;
          *(double *)&buf[10] = v53;
          *(_WORD *)&buf[18] = 2048;
          *(double *)&buf[20] = v54;
          *(_WORD *)&unsigned char buf[28] = 2048;
          *(double *)&buf[30] = v55;
          __int16 v80 = 2048;
          double v81 = v56;
          __int16 v82 = 1024;
          BOOL v83 = v4;
          _os_log_impl(&dword_1902AF000, v51, OS_LOG_TYPE_DEBUG, "initialized down,%u,q.x,%f,q.y,%f,q.z,%f,q.w,%f, withAvgGrav, %d", buf, 0x36u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE888 != -1) {
            dispatch_once(&qword_1EB3BE888, &unk_1EDFD2AC0);
          }
          int v57 = *(unsigned __int8 *)(a1 + 10);
          double v58 = *(float *)(a1 + 12);
          double v59 = *(float *)(a1 + 16);
          double v60 = *(float *)(a1 + 20);
          double v61 = *(float *)(a1 + 24);
          int v68 = 67110400;
          *(_DWORD *)double v69 = v57;
          *(_WORD *)&v69[4] = 2048;
          *(double *)&v69[6] = v58;
          __int16 v70 = 2048;
          double v71 = v59;
          __int16 v72 = 2048;
          double v73 = v60;
          __int16 v74 = 2048;
          double v75 = v61;
          __int16 v76 = 1024;
          BOOL v77 = v4;
          float v62 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "virtual void CMSensorFusionMekfPhone::initializeAttitude()", "CoreLocation: %s\n", v62);
          if (v62 != buf) {
            free(v62);
          }
        }
        return;
      }
      unsigned int v3 = *(unsigned __int16 *)(v2 + 10);
    }
    float v5 = sub_1904308EC((unsigned __int16 *)(v2 + 8), 0, v3);
    uint64_t v8 = 0;
    *(float *)long long buf = v5;
    *(float *)&uint8_t buf[4] = v6;
    *(float *)&uint8_t buf[8] = v7;
    float v9 = 0.0;
    do
    {
      float v9 = v9 + (float)(*(float *)&buf[v8] * *(float *)&buf[v8]);
      v8 += 4;
    }
    while (v8 != 12);
    if (sqrtf(v9) > 0.00000011921)
    {
      uint64_t v10 = 0;
      float v11 = 0.0;
      do
      {
        float v11 = v11 + (float)(*(float *)&buf[v10] * *(float *)&buf[v10]);
        v10 += 4;
      }
      while (v10 != 12);
      float v12 = sqrtf(v11);
      float v5 = v5 / v12;
      float v6 = v6 / v12;
      float v7 = v7 / v12;
    }
    BOOL v4 = 0;
    goto LABEL_13;
  }
}

void sub_1905C3414(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (*(_WORD *)(v1 + 10))
  {
    sub_19042DEC0((unsigned __int16 *)(v1 + 8));
    sub_1904CF514((float *)(a1 + 12));
  }
}

double sub_1905C3488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v13 = *(void *)a2;
  __int32 v14 = *(_DWORD *)(a2 + 8);
  do
  {
    *(float *)((char *)&v13 + v6) = -*(float *)((char *)&v13 + v6);
    v6 += 4;
  }
  while (v6 != 12);
  v12.i64[0] = v13;
  v12.i32[2] = v14;
  sub_190556004(v12.f32, (uint64_t)&v13);
  *(float *)(a1 + 64) = sub_1904CF674((uint64_t)&v13, (float *)(a1 + 64));
  *(_DWORD *)(a1 + 68) = v7;
  *(_DWORD *)(a1 + 72) = v8;
  sub_1905560C4(a1 + 28, (uint64_t)&v13, a3);
  *(double *)v9.i64 = sub_1904CF7FC(&v12, (float *)a2);
  sub_1904CF3F4((uint64_t)&v12, (float *)(a1 + 12), &v11, v9);
  double result = *(double *)v11.i64;
  *(float32x4_t *)(a1 + 12) = v11;
  return result;
}

double sub_1905C3554(void *a1, int a2, unint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!(*(unsigned int (**)(void *))(*a1 + 64))(a1)) {
    return result;
  }
  unint64_t v7 = *(void *)(a1[7] + 408);
  BOOL v8 = a3 >= v7;
  unint64_t v9 = a3 - v7;
  if (v9 == 0 || !v8) {
    return result;
  }
  double result = (double)v9 * 0.000001;
  *(float *)&double result = result;
  if (*(float *)&result <= 0.0) {
    return result;
  }
  if (a2 == 2 || a2 == 1)
  {
    int v10 = 833342583;
    goto LABEL_18;
  }
  int v10 = 0;
  if (a2)
  {
LABEL_18:
    *(_DWORD *)long long buf = v10;
    int v16 = v10;
    int v17 = v10;
    uint64_t v13 = 0;
    int v14 = 0;
    return sub_1905C3488((uint64_t)a1, (uint64_t)&v13, (uint64_t)buf);
  }
  if (qword_1EB3BE888 != -1) {
    dispatch_once(&qword_1EB3BE888, &unk_1EDFD2AC0);
  }
  float32x4_t v11 = off_1EB3BE880;
  if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_DEBUG, "invalid quiescentState kInMotion, ignoring quiescent", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD2AC0);
    }
    LOWORD(v13) = 0;
    float32x4_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "virtual void CMSensorFusionMekfPhone::feedQuiescent(CMDeviceMotionInputs::QuiescentState, uint64_t)", "CoreLocation: %s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  return result;
}

void sub_1905C377C(uint64_t a1, float32x2_t *a2, unint64_t a3)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1))
  {
    uint64_t v6 = *(void *)(a1 + 56);
    unint64_t v7 = *(void *)(v6 + 408);
    BOOL v8 = a3 >= v7;
    unint64_t v9 = a3 - v7;
    if (v9 != 0 && v8)
    {
      float v10 = (double)v9 * 0.000001;
      if (v10 > 0.0)
      {
        float32x2_t v11 = vsub_f32(*a2, *(float32x2_t *)(v6 + 444));
        float v12 = a2[1].f32[0] - *(float *)(v6 + 452);
        float32x2_t v42 = v11;
        float v43 = v12;
        float v13 = vaddv_f32(vmul_f32(v11, v11));
        float v14 = v12 * v12;
        uint64_t v40 = 0;
        int v41 = 0;
        float v37 = (double)v9 * 0.000001;
        if (*(unsigned char *)(a1 + 9))
        {
          unint64_t v15 = 0;
          float32x2_t v44 = vmul_f32(v11, (float32x2_t)vdup_n_s32(0x3D23D70Au));
          float v45 = v12 * 0.04;
          do
          {
            int v16 = (float *)sub_19042D844((uint64_t)&v44, v15);
            float v17 = fminf(fmaxf(*v16 * *v16, 0.0027416), 9.8696);
            *(float *)sub_19042D844((uint64_t)&v40, v15++) = v17;
          }
          while (v15 != 3);
          *(unsigned char *)(a1 + 9) = 0;
          float v10 = v37;
        }
        unint64_t v18 = 0;
        float v19 = v13 + v14;
        float v20 = v10 * v10;
        float v21 = (float)(v10 * 0.0017) * (float)(v10 * 0.0017);
        float v22 = (float)(v10 * 17.453) * (float)(v10 * 17.453);
        do
        {
          float v23 = (float)(v20 * sub_190448408(*(void *)(a1 + 56) + 420, v18)) + (float)(v37 * 0.000000010966);
          float v24 = sub_190448408((uint64_t)&v42, v18);
          float v25 = v23 + (float)((float)((float)(v24 * 0.00033) * v37) * (float)((float)(v24 * 0.00033) * v37));
          float v26 = sub_190448408((uint64_t)&v42, v18);
          float v27 = v25 + (float)((float)(v19 - (float)(v26 * v26)) * v21);
          float v28 = sub_190448408((uint64_t)&v42, v18);
          if (v28 <= 0.0) {
            float v28 = -v28;
          }
          BOOL v29 = v28 <= 27.925;
          float v30 = 0.0;
          if (!v29) {
            float v30 = v22;
          }
          float v31 = *(float *)sub_19042D844((uint64_t)&v40, v18) + (float)(v27 + v30);
          *(float *)sub_19042D844((uint64_t)&v44, v18++) = v31;
        }
        while (v18 != 3);
        uint64_t v32 = *(void *)(a1 + 56);
        float v33 = (float)((float)((float)(*(float *)(v32 + 464) + a2[1].f32[0]) * 0.5) - *(float *)(v32 + 452)) * v37;
        float32x2_t v38 = vmul_n_f32(vsub_f32(vmul_f32(vadd_f32(*(float32x2_t *)(v32 + 456), *a2), (float32x2_t)0x3F0000003F000000), *(float32x2_t *)(v32 + 444)), v37);
        float v39 = v33;
        sub_1905C3488(a1, (uint64_t)&v38, (uint64_t)&v44);
        uint64_t v34 = 0;
        float v35 = a2->f32[0];
        if (a2->f32[0] <= 0.0) {
          float v35 = -a2->f32[0];
        }
        do
        {
          float v36 = a2->f32[v34 + 1];
          if (v36 <= 0.0) {
            float v36 = -v36;
          }
          if (v36 > v35) {
            float v35 = v36;
          }
          ++v34;
        }
        while (v34 != 2);
        if (v35 > 27.925) {
          *(void *)(a1 + 8dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 1;
        }
      }
    }
  }
}

uint64_t sub_1905C3A84(float32x2_t *a1)
{
  if (!a1[1].i8[2])
  {
    (*(void (**)(float32x2_t *))(*(void *)a1 + 160))(a1);
    return 0;
  }
  float32x2_t v2 = a1[7];
  int v3 = *(unsigned __int8 *)(*(void *)&v2 + 820);
  if (a1[1].i8[0]) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    unint64_t v5 = 1;
    a1[10] = (float32x2_t)1;
    a1[1].i16[0] = 256;
LABEL_10:
    float v6 = 1.0 / (float)v5;
    if (v6 < 0.001)
    {
      unint64_t v5 = 999;
      a1[10] = (float32x2_t)999;
      float v6 = 0.001;
    }
    goto LABEL_12;
  }
  unint64_t v5 = (unint64_t)a1[10];
  a1[1].i8[0] = v3 != 0;
  if (v5) {
    goto LABEL_10;
  }
  float v6 = 1.0;
LABEL_12:
  if (*(unsigned char *)(*(void *)&v2 + 240))
  {
    float32_t v7 = (float)((float)(1.0 - v6) * a1[9].f32[0]) + (float)(v6 * *(float *)(*(void *)&v2 + 236));
    a1[8] = vadd_f32(vmul_n_f32(a1[8], 1.0 - v6), vmul_n_f32(*(float32x2_t *)(*(void *)&v2 + 228), v6));
    a1[9].f32[0] = v7;
    a1[10] = (float32x2_t)(v5 + 1);
    int v3 = *(unsigned __int8 *)(*(void *)&v2 + 820);
  }
  if (v3 || *(_DWORD *)(*(void *)&v2 + 276) == *(unsigned __int16 *)(*(void *)&v2 + 274))
  {
    unint64_t v8 = *(unsigned __int16 *)(*(void *)&v2 + 10);
    if (*(_DWORD *)(*(void *)&v2 + 12) == v8)
    {
      float v63 = v6;
      sub_190484254((unsigned __int16 *)(*(void *)&v2 + 8), 0, v8);
      HIDWORD(v65) = v10;
      float v66 = v11;
      if (v9 <= 0.0) {
        float v12 = -v9;
      }
      else {
        float v12 = v9;
      }
      for (uint64_t i = 4; i != 12; i += 4)
      {
        float v14 = *(float *)((char *)&v65 + i);
        if (v14 <= 0.0) {
          float v14 = -v14;
        }
        if (v14 > v12) {
          float v12 = v14;
        }
      }
      float v15 = sub_1904308EC((unsigned __int16 *)(*(void *)&a1[7] + 8), 0, *(unsigned __int16 *)(*(void *)&a1[7] + 10));
      uint64_t v16 = 0;
      unint64_t v65 = __PAIR64__(v17, LODWORD(v15));
      float v66 = v18;
      float v19 = 0.0;
      do
      {
        float v19 = v19 + (float)(*(float *)((char *)&v65 + v16) * *(float *)((char *)&v65 + v16));
        v16 += 4;
      }
      while (v16 != 12);
      float v20 = sqrtf(v12);
      float v21 = sqrtf(v19) + -1.0;
      float32x2_t v22 = a1[7];
      float v23 = 0.0;
      if (*(unsigned char *)(*(void *)&v22 + 820))
      {
        float v24 = 0.0;
      }
      else
      {
        float v24 = sub_19042FE34(*(void *)&v22 + 244, 32 - *(_DWORD *)(*(void *)&v22 + 480), *(_DWORD *)(*(void *)&v22 + 480));
        float32x2_t v22 = a1[7];
      }
      float v25 = fabsf(v21);
      float v26 = sub_1905C40A0(flt_19060CE28, (uint64_t)&unk_19060CE34, 3, v20);
      float v27 = sub_1904308EC((unsigned __int16 *)(*(void *)&v22 + 8), 0, *(unsigned __int16 *)(*(void *)&v22 + 10));
      uint64_t v28 = 0;
      unint64_t v65 = __PAIR64__(v29, LODWORD(v27));
      float v66 = v30;
      do
      {
        float v23 = v23 + (float)(*(float *)((char *)&v65 + v28) * *(float *)((char *)&v65 + v28));
        v28 += 4;
      }
      while (v28 != 12);
      float v31 = sub_1905C40A0(flt_19060CE40, (uint64_t)&unk_19060CE5C, 7, sqrtf(v23) + -1.0);
      float32x2_t v2 = a1[7];
      if (v20 < 0.1 && v25 < 0.12 && v24 < 0.05)
      {
        float v32 = sub_1905C40A0(flt_19060CE78, (uint64_t)&unk_19060CE84, 3, v24);
        if (v26 >= v31) {
          float v33 = v31;
        }
        else {
          float v33 = v26;
        }
        if (v33 < v32) {
          float v32 = v33;
        }
        float v34 = v32 * v32;
        goto LABEL_44;
      }
      int v3 = *(unsigned __int8 *)(*(void *)&v2 + 820);
      float v6 = v63;
    }
    float v34 = 0.0;
    if (v3)
    {
LABEL_44:
      uint64_t v35 = sub_190430B48((unsigned __int16 *)(*(void *)&v2 + 8), 7uLL);
      uint64_t v36 = 0;
      __int32 v38 = *(_DWORD *)v35;
      float v37 = *(float *)(v35 + 4);
      float v39 = *(float *)(v35 + 8);
      LODWORD(v65) = *(_DWORD *)v35;
      *((float *)&v65 + 1) = v37;
      float v66 = v39;
      float v40 = 0.0;
      do
      {
        float v40 = v40 + (float)(*(float *)((char *)&v65 + v36) * *(float *)((char *)&v65 + v36));
        v36 += 4;
      }
      while (v36 != 12);
      if (sqrtf(v40) > 0.00000011921)
      {
        uint64_t v41 = 0;
        float v42 = 0.0;
        do
        {
          float v42 = v42 + (float)(*(float *)((char *)&v65 + v41) * *(float *)((char *)&v65 + v41));
          v41 += 4;
        }
        while (v41 != 12);
        float v43 = sqrtf(v42);
        *(float *)&__int32 v38 = *(float *)&v38 / v43;
        float v37 = v37 / v43;
        float v39 = v39 / v43;
      }
      unint64_t v65 = __PAIR64__(LODWORD(v37), v38);
      float v66 = v39;
      if (*(unsigned char *)(*(void *)&a1[7] + 820)) {
        float v34 = 0.1;
      }
      float32x2_t v44 = (float *)&a1[1] + 1;
LABEL_71:
      v64[0] = sub_1904CF514(v44);
      v64[1] = v60;
      v64[2] = v61;
      sub_1905C3F9C((uint64_t)a1, (float32x2_t *)&v65, (uint64_t)v64, v34);
      return 1;
    }
  }
  if (*(unsigned char *)(*(void *)&v2 + 240))
  {
    float v45 = 0.0;
    uint64_t v46 = 16;
    float v47 = v6 / 0.001;
    do
    {
      float v45 = v45 + (float)(a1->f32[v46] * a1->f32[v46]);
      ++v46;
    }
    while (v46 != 19);
    float v48 = sqrtf(v45);
    float v49 = v48 + -1.0;
    if ((float)(v48 + -1.0) <= 0.0) {
      float v49 = -(float)(v48 + -1.0);
    }
    float v50 = acosf(1.0 / (float)(v49 + 1.0));
    if (v48 < 1.0 && v50 <= (float)((float)((float)(1.0 - v48) * 180.0) * 0.017453)) {
      float v50 = (float)((float)(1.0 - v48) * 180.0) * 0.017453;
    }
    uint64_t v51 = 0;
    float v52 = v50 * v50;
    float v54 = a1[8].f32[0];
    float v53 = a1[8].f32[1];
    float v55 = a1[9].f32[0];
    unint64_t v65 = __PAIR64__(LODWORD(v53), LODWORD(v54));
    float v66 = v55;
    float v56 = 0.0;
    do
    {
      float v56 = v56 + (float)(*(float *)((char *)&v65 + v51) * *(float *)((char *)&v65 + v51));
      v51 += 4;
    }
    while (v51 != 12);
    if ((float)(v47 * 0.00030462) <= v52) {
      float v34 = v52;
    }
    else {
      float v34 = v47 * 0.00030462;
    }
    if (sqrtf(v56) > 0.00000011921)
    {
      uint64_t v57 = 0;
      float v58 = 0.0;
      do
      {
        float v58 = v58 + (float)(*(float *)((char *)&v65 + v57) * *(float *)((char *)&v65 + v57));
        v57 += 4;
      }
      while (v57 != 12);
      float v59 = sqrtf(v58);
      float v54 = v54 / v59;
      float v53 = v53 / v59;
      float v55 = v55 / v59;
    }
    unint64_t v65 = __PAIR64__(LODWORD(v53), LODWORD(v54));
    float32x2_t v44 = (float *)&a1[1] + 1;
    float v66 = v55;
    goto LABEL_71;
  }
  return 0;
}

double sub_1905C3F9C(uint64_t a1, float32x2_t *a2, uint64_t a3, float a4)
{
  float v5 = *(float *)(a3 + 8);
  float v6 = a2[1].f32[0] - v5;
  float32x2_t v7 = *(float32x2_t *)a3;
  float32x2_t v31 = vsub_f32(*a2, *(float32x2_t *)a3);
  float v32 = v6;
  float32x2_t v8 = *(float32x2_t *)(a3 + 4);
  v25[0] = 0;
  *(float *)&v25[1] = v5;
  float32x2_t v26 = vneg_f32(v8);
  int v27 = 0;
  float32x2_t v28 = v7;
  float v29 = -v7.f32[0];
  int v30 = 0;
  *(float *)float v24 = a4;
  *(float *)&v24[1] = a4;
  *(float *)&v24[2] = a4;
  sub_190556578((float *)(a1 + 28), (uint64_t)v25, (uint64_t)v24, (uint64_t)&v31);
  float v10 = v9;
  float v12 = v11;
  float v14 = v13;
  float v15 = sub_1904CF514((float *)(a1 + 12));
  float v18 = (float)((float)(v14 * v16) + (float)(v12 * v17)) + (float)(v10 * v15);
  v23[0] = v10 - (float)(v15 * v18);
  v23[1] = v12 - (float)(v17 * v18);
  void v23[2] = v14 - (float)(v16 * v18);
  *(double *)v19.i64 = sub_1904CF7FC(&v22, v23);
  sub_1904CF3F4((uint64_t)&v22, (float *)(a1 + 12), &v21, v19);
  double result = *(double *)v21.i64;
  *(float32x4_t *)(a1 + 12) = v21;
  return result;
}

float sub_1905C40A0(float *a1, uint64_t a2, uint64_t a3, float a4)
{
  if (*a1 >= a4) {
    return *(float *)a2;
  }
  uint64_t v4 = a3 - 1;
  if (a1[a3 - 1] <= a4) {
    return *(float *)(a2 + 4 * v4);
  }
  uint64_t v5 = 0;
  while (1)
  {
    float v6 = a1[v5];
    if (v6 <= a4)
    {
      float v7 = a1[v5 + 1];
      if (v7 >= a4) {
        break;
      }
    }
    if (v4 == ++v5) {
      return *(float *)a2;
    }
  }
  float v9 = v7 - v6;
  if ((float)(v7 - v6) <= 0.0)
  {
    float v11 = *(float *)(a2 + 4 * v5);
    float v12 = 0.0;
  }
  else
  {
    float v10 = (float *)(a2 + 4 * v5);
    float v11 = *v10;
    float v12 = (float)(v10[1] - *v10) / v9;
  }
  return v11 + (float)(v12 * (float)(a4 - v6));
}

void sub_1905C4130()
{
}

uint64_t sub_1905C4144(uint64_t a1)
{
  return a1 + 12;
}

uint64_t sub_1905C414C(uint64_t a1)
{
  return *(void *)(a1 + 56) + 432;
}

BOOL sub_1905C4158(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  return *(unsigned char *)(v1 + 416) && *(void *)(v1 + 408) && *(unsigned char *)(a1 + 10) != 0;
}

void sub_1905C43E8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

void sub_1905C4444(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  if ((*(void *)(v4 + 136) || *(void *)(v4 + 144)) && !*(unsigned char *)(v4 + 168))
  {
    uint64_t v5 = _Block_copy(*(const void **)(v4 + 144));
    float v6 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 136));
    float v7 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v8 = objc_opt_class();
    uint64_t v9 = objc_opt_class();
    uint64_t v10 = objc_opt_class();
    float v12 = (NSSet *)objc_msgSend_setWithObjects_(v7, v11, v8, v9, v10, 0);
    if (*a2 && (uint64_t DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v12)) != 0)
    {
      float v15 = DictionaryOfClasses;
      uint64_t v16 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v14, @"CMErrorMessage");
      float v18 = objc_msgSend_objectForKeyedSubscript_(v15, v17, @"CMSignificantElevationKeySample");
      if (v16)
      {
        uint64_t v21 = *(void *)(a1 + 32);
        if (*(void *)(v21 + 144))
        {
          float32x4_t v22 = *(NSObject **)(v21 + 120);
          v99[0] = MEMORY[0x1E4F143A8];
          v99[1] = 3221225472;
          v99[2] = sub_1905C4A88;
          v99[3] = &unk_1E568D320;
          v99[4] = v16;
          v99[5] = v5;
          float v23 = v99;
LABEL_26:
          dispatch_async(v22, v23);
          goto LABEL_32;
        }
        if (v6)
        {
          float32x4_t v22 = *(NSObject **)(v21 + 120);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = sub_1905C4B00;
          block[3] = &unk_1E568D320;
          void block[4] = v16;
          void block[5] = v6;
          float v23 = block;
          goto LABEL_26;
        }
LABEL_32:
        _Block_release(v6);
        _Block_release(v5);
        return;
      }
      float32x2_t v26 = v18;
      if (v18)
      {
        double v27 = *(double *)(*(void *)(a1 + 32) + 152);
        if (v27 == -1.0
          || (float32x2_t v28 = objc_msgSend_elevationAscended(v18, v19, v20),
              objc_msgSend_doubleValue(v28, v29, v30),
              v27 > v31)
          || (double v32 = *(double *)(*(void *)(a1 + 32) + 160),
              float v33 = objc_msgSend_elevationDescended(v26, v19, v20),
              objc_msgSend_doubleValue(v33, v34, v35),
              v32 > v36))
        {
          float v37 = objc_msgSend_elevationAscended(v26, v19, v20);
          objc_msgSend_doubleValue(v37, v38, v39);
          *(void *)(*(void *)(a1 + 32) + 152) = v40;
          float v43 = objc_msgSend_elevationDescended(v26, v41, v42);
          objc_msgSend_doubleValue(v43, v44, v45);
          *(void *)(*(void *)(a1 + 32) + 16dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = v46;
          goto LABEL_32;
        }
        double v95 = [CMSignificantElevationSample alloc];
        uint64_t v94 = objc_msgSend_recordId(v26, v53, v54);
        uint64_t v57 = objc_msgSend_sourceId(v26, v55, v56);
        uint64_t started = objc_msgSend_startDate(v26, v58, v59);
        uint64_t v63 = objc_msgSend_endDate(v26, v61, v62);
        float v64 = NSNumber;
        float v67 = objc_msgSend_elevationAscended(v26, v65, v66);
        objc_msgSend_doubleValue(v67, v68, v69);
        uint64_t v73 = objc_msgSend_numberWithDouble_(v64, v71, v72, v70 - *(double *)(*(void *)(a1 + 32) + 152));
        __int16 v74 = NSNumber;
        BOOL v77 = objc_msgSend_elevationDescended(v26, v75, v76);
        objc_msgSend_doubleValue(v77, v78, v79);
        uint64_t v83 = objc_msgSend_numberWithDouble_(v74, v81, v82, v80 - *(double *)(*(void *)(a1 + 32) + 160));
        float v85 = objc_msgSend_initWithRecordId_sourceId_startDate_endDate_elevationAscended_elevationDescended_(v95, v84, v94, v57, started, v63, v73, v83);
        uint64_t v86 = *(void *)(a1 + 32);
        if (*(void *)(v86 + 144))
        {
          float v87 = *(NSObject **)(v86 + 120);
          v97[0] = MEMORY[0x1E4F143A8];
          v97[1] = 3221225472;
          v97[2] = sub_1905C4B78;
          v97[3] = &unk_1E568D320;
          v97[4] = v85;
          v97[5] = v5;
          float v88 = v97;
        }
        else
        {
          if (!v6)
          {
LABEL_39:

            goto LABEL_32;
          }
          float v87 = *(NSObject **)(v86 + 120);
          v96[0] = MEMORY[0x1E4F143A8];
          v96[1] = 3221225472;
          v96[2] = sub_1905C4B90;
          v96[3] = &unk_1E568D2F8;
          v96[4] = v85;
          v96[5] = v6;
          float v88 = v96;
        }
        dispatch_async(v87, v88);
        goto LABEL_39;
      }
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD2AE0);
      }
      float v47 = off_1EB3BE880;
      if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
      {
        float v50 = objc_msgSend_description(v15, v48, v49);
        *(_DWORD *)long long buf = 136446210;
        uint64_t v103 = objc_msgSend_UTF8String(v50, v51, v52);
        _os_log_impl(&dword_1902AF000, v47, OS_LOG_TYPE_FAULT, "Unable to parse message (%{public}s) when starting updates to queue", buf, 0xCu);
      }
      if (!sub_1902D8400(115, 0)) {
        goto LABEL_32;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD2AE0);
      }
      double v91 = objc_msgSend_description(v15, v89, v90);
      int v100 = 136446210;
      uint64_t v101 = objc_msgSend_UTF8String(v91, v92, v93);
    }
    else
    {
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD2AE0);
      }
      float v24 = off_1EB3BE880;
      if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1902AF000, v24, OS_LOG_TYPE_ERROR, "Unable to parse message when starting updates to queue!", buf, 2u);
      }
      if (!sub_1902D8400(115, 0)) {
        goto LABEL_32;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD2AE0);
      }
      LOWORD(v10dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
    }
    float v25 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "-[CMAltimeterInternal init]_block_invoke", "CoreLocation: %s\n", v25);
    if (v25 != (char *)buf) {
      free(v25);
    }
    goto LABEL_32;
  }
}

uint64_t sub_1905C4A88(uint64_t a1, const char *a2, uint64_t a3)
{
  int v3 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = objc_msgSend_integerValue(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_errorWithDomain_code_userInfo_(v3, v6, @"CMErrorDomain", v5, 0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, uint64_t))(v4 + 16);

  return v8(v4, 0, v7);
}

uint64_t sub_1905C4B00(uint64_t a1, const char *a2, uint64_t a3)
{
  int v3 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = objc_msgSend_integerValue(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_errorWithDomain_code_userInfo_(v3, v6, @"CMErrorDomain", v5, 0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, uint64_t))(v4 + 16);

  return v8(v4, 0, v7);
}

uint64_t sub_1905C4B78(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_1905C4B90(uint64_t a1)
{
  float32x2_t v2 = [CMElevationData alloc];
  id v4 = (id)objc_msgSend_initWithSignificantElevationSample_(v2, v3, *(void *)(a1 + 32));
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1905C4BFC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(NSObject **)(v2 + 120);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3321888768;
  block[2] = sub_1905C4C94;
  block[3] = &unk_1EDFD1200;
  uint64_t v5 = *a2;
  id v4 = (std::__shared_weak_count *)a2[1];
  void block[4] = v2;
  void block[5] = v5;
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_async(v3, block);
  if (v7) {
    sub_1902D8B58(v7);
  }
}

uint64_t sub_1905C4C94(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(void *)(v1 + 24) && *(void *)(v1 + 16) && !*(unsigned char *)(v1 + 184))
  {
    uint64_t v2 = result;
    int v3 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v4 = objc_opt_class();
    uint64_t v5 = objc_opt_class();
    uint64_t v6 = objc_opt_class();
    uint64_t v8 = (NSSet *)objc_msgSend_setWithObjects_(v3, v7, v4, v5, v6, 0);
    uint64_t DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)(v2 + 40), v8);
    uint64_t v11 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v10, @"CMErrorMessage");
    float v13 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v12, @"CMFilteredElevationKeySample");
    if (v11)
    {
      uint64_t v16 = *(void *)(v2 + 32);
      float v17 = *(void **)(v16 + 24);
      v48[0] = MEMORY[0x1E4F143A8];
      v48[1] = 3221225472;
      v48[2] = sub_1905C4F38;
      v48[3] = &unk_1E568D190;
      v48[4] = v11;
      v48[5] = v16;
      return objc_msgSend_addOperationWithBlock_(v17, v14, (uint64_t)v48);
    }
    else
    {
      float v18 = v13;
      if (v13)
      {
        float32x4_t v19 = objc_msgSend_elevationAscended(v13, v14, v15);
        objc_msgSend_doubleValue(v19, v20, v21);
        double v23 = v22;
        float32x2_t v26 = objc_msgSend_elevationDescended(v18, v24, v25);
        double result = objc_msgSend_doubleValue(v26, v27, v28);
        uint64_t v30 = *(void *)(v2 + 32);
        if (*(float *)(v30 + 56) <= 150.0)
        {
          float v31 = v23 - v29;
          if (*(double *)(v30 + 176) == 3.40282347e38)
          {
            *(double *)(v30 + 176) = v31;
          }
          else
          {
            float v34 = [CMAltitudeData alloc];
            uint64_t started = objc_msgSend_startDate(v18, v35, v36);
            objc_msgSend_timeIntervalSinceReferenceDate(started, v38, v39);
            uint64_t v42 = objc_msgSend_initWithTimestamp_pressure_relativeAltitude_(v34, v40, v41);
            uint64_t v43 = *(void *)(v2 + 32);
            float32x2_t v44 = *(void **)(v43 + 24);
            v46[0] = MEMORY[0x1E4F143A8];
            v46[1] = 3221225472;
            v46[2] = sub_1905C52FC;
            v46[3] = &unk_1E568D190;
            v46[4] = v43;
            v46[5] = v42;
            return objc_msgSend_addOperationWithBlock_(v44, v45, (uint64_t)v46);
          }
        }
      }
      else
      {
        uint64_t v32 = *(void *)(v2 + 32);
        float v33 = *(void **)(v32 + 24);
        v47[0] = MEMORY[0x1E4F143A8];
        v47[1] = 3221225472;
        v47[2] = sub_1905C5124;
        v47[3] = &unk_1E568D118;
        v47[4] = v32;
        return objc_msgSend_addOperationWithBlock_(v33, v14, (uint64_t)v47);
      }
    }
  }
  return result;
}

void sub_1905C4F38(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (qword_1E929D788 != -1) {
    dispatch_once(&qword_1E929D788, &unk_1EDFC1F80);
  }
  uint64_t v2 = qword_1E929D780;
  if (os_log_type_enabled((os_log_t)qword_1E929D780, OS_LOG_TYPE_ERROR))
  {
    int v5 = objc_msgSend_intValue(*(void **)(a1 + 32), v3, v4);
    int v15 = 68289282;
    int v16 = 0;
    __int16 v17 = 2082;
    float v18 = "";
    __int16 v19 = 1026;
    int v20 = v5;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Error receiving filtered elevation updates\", \"error\":%{public}d}", (uint8_t *)&v15, 0x18u);
    if (qword_1E929D788 != -1) {
      dispatch_once(&qword_1E929D788, &unk_1EDFC1F80);
    }
  }
  uint64_t v6 = qword_1E929D780;
  if (os_signpost_enabled((os_log_t)qword_1E929D780))
  {
    int v9 = objc_msgSend_intValue(*(void **)(a1 + 32), v7, v8);
    int v15 = 68289282;
    int v16 = 0;
    __int16 v17 = 2082;
    float v18 = "";
    __int16 v19 = 1026;
    int v20 = v9;
    _os_signpost_emit_with_name_impl(&dword_1902AF000, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Error receiving filtered elevation updates", "{\"msg%{public}.0s\":\"Error receiving filtered elevation updates\", \"error\":%{public}d}", (uint8_t *)&v15, 0x18u);
  }
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 16);
  if (v10)
  {
    uint64_t v11 = (void *)MEMORY[0x1E4F28C58];
    int v12 = objc_msgSend_intValue(*(void **)(a1 + 32), v7, v8);
    uint64_t v14 = objc_msgSend_errorWithDomain_code_userInfo_(v11, v13, @"CMErrorDomain", v12, 0);
    (*(void (**)(uint64_t, void, uint64_t))(v10 + 16))(v10, 0, v14);
  }
}

void sub_1905C5124(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (qword_1E929D788 != -1) {
    dispatch_once(&qword_1E929D788, &unk_1EDFC1F80);
  }
  uint64_t v2 = qword_1E929D780;
  if (os_log_type_enabled((os_log_t)qword_1E929D780, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_ERROR, "Received empty filtered elevation update", buf, 2u);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D788 != -1) {
      dispatch_once(&qword_1E929D788, &unk_1EDFC1F80);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "-[CMAltimeterInternal init]_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 16);
  if (v4)
  {
    uint64_t v5 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v3, @"CMErrorDomain", 103, 0);
    (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v4, 0, v5);
  }
}

void sub_1905C52FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 16);
  if (v2) {
    (*(void (**)(uint64_t, void, void))(v2 + 16))(v2, *(void *)(a1 + 40), 0);
  }
  int v3 = *(void **)(a1 + 40);
}

uint64_t sub_1905C5350(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 4dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1905C536C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_1902D8B58(v1);
  }
}

void sub_1905C537C(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  int v3 = (std::__shared_weak_count *)*((void *)a2 + 1);
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  objc_msgSend__handleAbsoluteAltitudeUpdate_(v2, a2, (uint64_t)&v4);
  if (v5) {
    sub_1902D8B58(v5);
  }
}

void sub_1905C53D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1902D8B58(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905C54DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1905C556C(void *result, const char *a2)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = result[4];
  if (*(void *)(v2 + 128))
  {
    int v3 = result;
    uint64_t v4 = *(const void **)(v2 + 136);
    if (v4)
    {
      _Block_release(v4);
      *(void *)(v3[4] + 136) = 0;
    }
    else
    {
      uint64_t v10 = @"kCLConnectionMessageSubscribeKey";
      v11[0] = MEMORY[0x1E4F1CC38];
      uint64_t v7 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v11, &v10, 1);
      sub_1905C9A7C(&v8, &v7);
      uint64_t v5 = v9;
      uint64_t v6 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      CLConnectionClient::sendMessage();
      if (v6) {
        sub_1902D8B58(v6);
      }
      if (v5) {
        sub_1902D8B58(v5);
      }
    }
    double result = _Block_copy((const void *)v3[5]);
    *(void *)(v3[4] + 136) = result;
    *(unsigned char *)(v3[4] + 168) = 0;
  }
  return result;
}

void sub_1905C5680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1902D8B58(a10);
  }
  if (v10) {
    sub_1902D8B58(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905C5720(uint64_t a1, const char *a2)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = @"kCLConnectionMessageSubscribeKey";
  v9[0] = MEMORY[0x1E4F1CC28];
  uint64_t v5 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v9, &v8, 1);
  sub_1905C9A7C(&v6, &v5);
  int v3 = v7;
  uint64_t v4 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CLConnectionClient::sendMessage();
  if (v4) {
    sub_1902D8B58(v4);
  }
  _Block_release(*(const void **)(*(void *)(a1 + 32) + 136));
  *(void *)(*(void *)(a1 + 32) + 136) = 0;
  *(void *)(*(void *)(a1 + 32) + 152) = 0xBFF0000000000000;
  *(void *)(*(void *)(a1 + 32) + 16dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0xBFF0000000000000;
  *(unsigned char *)(*(void *)(a1 + 32) + 168) = 1;
  if (v3) {
    sub_1902D8B58(v3);
  }
}

void sub_1905C582C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    sub_1902D8B58(v10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1905C58D4(void *result, const char *a2)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = result[4];
  if (*(void *)(v2 + 128))
  {
    int v3 = result;
    uint64_t v4 = *(const void **)(v2 + 144);
    if (v4)
    {
      _Block_release(v4);
      *(void *)(v3[4] + 144) = 0;
    }
    else
    {
      uint64_t v10 = @"kCLConnectionMessageSubscribeKey";
      v11[0] = MEMORY[0x1E4F1CC38];
      uint64_t v7 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v11, &v10, 1);
      sub_1905C9A7C(&v8, &v7);
      uint64_t v5 = v9;
      uint64_t v6 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      CLConnectionClient::sendMessage();
      if (v6) {
        sub_1902D8B58(v6);
      }
      if (v5) {
        sub_1902D8B58(v5);
      }
    }
    double result = _Block_copy((const void *)v3[5]);
    *(void *)(v3[4] + 144) = result;
    *(unsigned char *)(v3[4] + 168) = 0;
  }
  return result;
}

void sub_1905C59E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1902D8B58(a10);
  }
  if (v10) {
    sub_1902D8B58(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905C5A88(uint64_t a1, const char *a2)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = @"kCLConnectionMessageSubscribeKey";
  v9[0] = MEMORY[0x1E4F1CC28];
  uint64_t v5 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v9, &v8, 1);
  sub_1905C9A7C(&v6, &v5);
  int v3 = v7;
  uint64_t v4 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CLConnectionClient::sendMessage();
  if (v4) {
    sub_1902D8B58(v4);
  }
  _Block_release(*(const void **)(*(void *)(a1 + 32) + 144));
  *(void *)(*(void *)(a1 + 32) + 144) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 168) = 1;
  if (v3) {
    sub_1902D8B58(v3);
  }
}

void sub_1905C5B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    sub_1902D8B58(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905C5C2C(uint64_t a1)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  if (*(void *)(*(void *)(a1 + 32) + 128))
  {
    uint64_t v2 = [CMMotionTimeRange alloc];
    objc_msgSend_timeIntervalSinceReferenceDate(*(void **)(a1 + 40), v3, v4);
    double v6 = v5;
    objc_msgSend_timeIntervalSinceReferenceDate(*(void **)(a1 + 48), v7, v8);
    uint64_t started = objc_msgSend_initWithStartDate_endDate_(v2, v9, v10, v6, v11);
    float v18 = @"CMSignificantElevationKeyQueryTimeRange";
    v19[0] = started;
    uint64_t v17 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v13, (uint64_t)v19, &v18, 1);

    sub_1902DD634("kCLConnectionMessageSignificantElevationDeltaQuery", &v17, &v15);
    uint64_t v14 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CLConnectionClient::sendMessage();
    if (v14) {
      sub_1902D8B58(v14);
    }
    if (v16) {
      sub_1902D8B58(v16);
    }
  }
}

void sub_1905C5DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a17) {
    sub_1902D8B58(a17);
  }
  if (a19) {
    sub_1902D8B58(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905C5DD4(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  int v9 = (NSSet *)objc_msgSend_setWithObjects_(v4, v8, v5, v6, v7, 0);
  if (!*a2 || (uint64_t DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v9)) == 0)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD2AE0);
    }
    uint64_t v21 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v21, OS_LOG_TYPE_ERROR, "Unable to parse message when checking for availability!", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD2AE0);
      }
      LOWORD(v51) = 0;
      uint64_t v46 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMAltimeterInternal _querySignificantElevationChangeFromDate:toDate:withHandler:]_block_invoke", "CoreLocation: %s\n", v46);
      if (v46 != (char *)buf) {
        free(v46);
      }
    }
    float v18 = *(NSObject **)(*(void *)(a1 + 32) + 120);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1905C63F4;
    block[3] = &unk_1E568D2D0;
    void block[4] = *(void *)(a1 + 40);
    int v20 = block;
    goto LABEL_11;
  }
  int v12 = DictionaryOfClasses;
  uint64_t v13 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v11, @"CMErrorMessage");
  uint64_t v15 = objc_msgSend_objectForKeyedSubscript_(v12, v14, @"CMSignificantElevationKeySample");
  if (v13)
  {
    float v18 = *(NSObject **)(*(void *)(a1 + 32) + 120);
    v50[0] = MEMORY[0x1E4F143A8];
    v50[1] = 3221225472;
    v50[2] = sub_1905C6300;
    v50[3] = &unk_1E568D320;
    uint64_t v19 = *(void *)(a1 + 40);
    v50[4] = v13;
    v50[5] = v19;
    int v20 = v50;
LABEL_11:
    dispatch_async(v18, v20);
    return;
  }
  double v22 = v15;
  if (v15)
  {
    double v23 = objc_msgSend_elevationAscended(v15, v16, v17);
    objc_msgSend_doubleValue(v23, v24, v25);
    if (v28 == 0.0
      && (double v29 = objc_msgSend_elevationDescended(v22, v26, v27),
          objc_msgSend_doubleValue(v29, v30, v31),
          v32 == 0.0))
    {
      float v18 = *(NSObject **)(*(void *)(a1 + 32) + 120);
      v49[0] = MEMORY[0x1E4F143A8];
      v49[1] = 3221225472;
      v49[2] = sub_1905C6378;
      v49[3] = &unk_1E568D2D0;
      v49[4] = *(void *)(a1 + 40);
      int v20 = v49;
    }
    else
    {
      float v18 = *(NSObject **)(*(void *)(a1 + 32) + 120);
      v48[0] = MEMORY[0x1E4F143A8];
      v48[1] = 3221225472;
      v48[2] = sub_1905C63DC;
      v48[3] = &unk_1E568D320;
      uint64_t v33 = *(void *)(a1 + 40);
      v48[4] = v22;
      v48[5] = v33;
      int v20 = v48;
    }
    goto LABEL_11;
  }
  if (qword_1EB3BE888 != -1) {
    dispatch_once(&qword_1EB3BE888, &unk_1EDFD2AE0);
  }
  float v34 = off_1EB3BE880;
  if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
  {
    float v37 = objc_msgSend_description(v12, v35, v36);
    *(_DWORD *)long long buf = 136446210;
    uint64_t v54 = objc_msgSend_UTF8String(v37, v38, v39);
    _os_log_impl(&dword_1902AF000, v34, OS_LOG_TYPE_FAULT, "Unable to parse message (%{public}s) for query response", buf, 0xCu);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD2AE0);
    }
    uint64_t v42 = objc_msgSend_description(v12, v40, v41);
    int v51 = 136446210;
    uint64_t v52 = objc_msgSend_UTF8String(v42, v43, v44);
    uint64_t v45 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "-[CMAltimeterInternal _querySignificantElevationChangeFromDate:toDate:withHandler:]_block_invoke", "CoreLocation: %s\n", v45);
    if (v45 != (char *)buf) {
      free(v45);
    }
  }
}

uint64_t sub_1905C6300(uint64_t a1, const char *a2, uint64_t a3)
{
  int v3 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = objc_msgSend_integerValue(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_errorWithDomain_code_userInfo_(v3, v6, @"CMErrorDomain", v5, 0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, uint64_t))(v4 + 16);

  return v8(v4, 0, v7);
}

uint64_t sub_1905C6378(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 109, 0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16);

  return v4(v2, 0, v3);
}

uint64_t sub_1905C63DC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

uint64_t sub_1905C63F4(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 103, 0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16);

  return v4(v2, 0, v3);
}

void sub_1905C64D8(uint64_t a1, const char *a2, uint64_t a3)
{
  v22[4] = *MEMORY[0x1E4F143B8];
  v21[0] = @"CMElevationProfileKeyQueryStartTime";
  uint64_t v4 = NSNumber;
  objc_msgSend_timeIntervalSinceReferenceDate(*(void **)(a1 + 32), a2, a3);
  v22[0] = objc_msgSend_numberWithDouble_(v4, v5, v6);
  v21[1] = @"CMElevationProfileKeyQueryEndTime";
  uint64_t v7 = NSNumber;
  objc_msgSend_timeIntervalSinceReferenceDate(*(void **)(a1 + 40), v8, v9);
  v22[1] = objc_msgSend_numberWithDouble_(v7, v10, v11);
  _OWORD v21[2] = @"CMElevationProfileKeyQueryBatchSize";
  v22[2] = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v12, *(void *)(a1 + 64));
  float32x4_t v21[3] = @"CMElevationProfileKeyQueryFromRecordId";
  v22[3] = objc_msgSend_numberWithInt_(NSNumber, v13, *(unsigned int *)(a1 + 72));
  uint64_t v20 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v14, (uint64_t)v22, v21, 4);
  v18[0] = 0;
  v18[1] = v18;
  void v18[2] = 0x2020000000;
  int v19 = *(_DWORD *)(a1 + 72);
  sub_19044F990("kCLConnectionMessageElevationProfileQuery", &v20, &v16);
  uint64_t v15 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CLConnectionClient::sendMessage();
  if (v15) {
    sub_1902D8B58(v15);
  }
  if (v17) {
    sub_1902D8B58(v17);
  }
  _Block_object_dispose(v18, 8);
}

void sub_1905C66D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, ...)
{
  va_start(va, a16);
  if (a14) {
    sub_1902D8B58(a14);
  }
  if (a16) {
    sub_1902D8B58(a16);
  }
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1905C6710(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v10 = (NSSet *)objc_msgSend_setWithObjects_(v4, v9, v5, v6, v7, v8, 0);
  if (*a2 && (uint64_t DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v10)) != 0)
  {
    uint64_t v13 = DictionaryOfClasses;
    uint64_t v14 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v12, @"CMErrorMessage");
    uint64_t v16 = objc_msgSend_objectForKeyedSubscript_(v13, v15, @"CMElevationProfileKeyAltitudeArray");
    float v18 = objc_msgSend_objectForKeyedSubscript_(v13, v17, @"CMElevationProfileKeyLastBatch");
    char v21 = objc_msgSend_BOOLValue(v18, v19, v20);
    double v23 = objc_msgSend_objectForKeyedSubscript_(v13, v22, @"CMElevationProfileKeyQueryFromRecordId");
    *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = objc_msgSend_intValue(v23, v24, v25);
    objc_msgSend_description(v13, v26, v27);
    if (v14)
    {
      double v28 = *(NSObject **)(*(void *)(a1 + 32) + 120);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_1905C6C00;
      block[3] = &unk_1E568D320;
      uint64_t v29 = *(void *)(a1 + 56);
      void block[4] = v14;
      void block[5] = v29;
      dispatch_async(v28, block);
      if (qword_1E929D758 != -1) {
        dispatch_once(&qword_1E929D758, &unk_1EDFC1FA0);
      }
      uint64_t v30 = qword_1E929D750;
      if (os_log_type_enabled((os_log_t)qword_1E929D750, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1902AF000, v30, OS_LOG_TYPE_FAULT, "Unable to parse message for query response", buf, 2u);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D758 != -1) {
          dispatch_once(&qword_1E929D758, &unk_1EDFC1FA0);
        }
        __int16 v41 = 0;
        uint64_t v31 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "-[CMAltimeterInternal _queryElevationProfileFromDate:toDate:withBatchSize:fromRecordId:withHandler:]_block_invoke", "CoreLocation: %s\n", v31);
        if (v31 != (char *)buf) {
          free(v31);
        }
      }
    }
    else
    {
      float v34 = *(NSObject **)(*(void *)(a1 + 32) + 120);
      v39[0] = MEMORY[0x1E4F143A8];
      v39[1] = 3221225472;
      v39[2] = sub_1905C6C7C;
      _OWORD v39[3] = &unk_1E568E9D8;
      uint64_t v35 = *(void *)(a1 + 56);
      v39[4] = v16;
      v39[5] = v35;
      char v40 = v21;
      dispatch_async(v34, v39);
      if ((v21 & 1) == 0) {
        objc_msgSend__queryElevationProfileFromDate_toDate_withBatchSize_fromRecordId_withHandler_(*(void **)(a1 + 32), v36, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 72), *(unsigned int *)(*(void *)(*(void *)(a1 + 64) + 8) + 24), *(void *)(a1 + 56));
      }
    }
  }
  else
  {
    if (qword_1E929D758 != -1) {
      dispatch_once(&qword_1E929D758, &unk_1EDFC1FA0);
    }
    double v32 = qword_1E929D750;
    if (os_log_type_enabled((os_log_t)qword_1E929D750, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1902AF000, v32, OS_LOG_TYPE_ERROR, "Unable to parse message when checking for availability.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D758 != -1) {
        dispatch_once(&qword_1E929D758, &unk_1EDFC1FA0);
      }
      __int16 v41 = 0;
      float v37 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMAltimeterInternal _queryElevationProfileFromDate:toDate:withBatchSize:fromRecordId:withHandler:]_block_invoke", "CoreLocation: %s\n", v37);
      if (v37 != (char *)buf) {
        free(v37);
      }
    }
    uint64_t v33 = *(NSObject **)(*(void *)(a1 + 32) + 120);
    v38[0] = MEMORY[0x1E4F143A8];
    v38[1] = 3221225472;
    double v38[2] = sub_1905C6C98;
    v38[3] = &unk_1E568D2D0;
    v38[4] = *(void *)(a1 + 56);
    dispatch_async(v33, v38);
  }
}

uint64_t sub_1905C6C00(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = objc_msgSend_integerValue(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_errorWithDomain_code_userInfo_(v3, v6, @"CMErrorDomain", v5, 0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, void, uint64_t))(v4 + 16);

  return v8(v4, 0, 0, v7);
}

uint64_t sub_1905C6C7C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), a1 + 48, 0);
}

uint64_t sub_1905C6C98(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 103, 0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, void, uint64_t))(v2 + 16);

  return v4(v2, 0, 0, v3);
}

void *sub_1905C6D7C(void *a1, const char *a2)
{
  double result = (void *)a1[4];
  if (result[16]) {
    return objc_msgSend__queryElevationProfileFromDate_toDate_withBatchSize_fromRecordId_withHandler_(result, a2, a1[5], a1[6], a1[8], 0, a1[7]);
  }
  return result;
}

void sub_1905C70B8(uint64_t a1, const char *a2)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = @"kCLConnectionMessageSubscribeKey";
  v8[0] = MEMORY[0x1E4F1CC38];
  uint64_t v4 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v8, &v7, 1);
  sub_19049655C("kCLConnectionMessageFilteredElevationUpdate", &v4, &v5);
  uint64_t v3 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CLConnectionClient::sendMessage();
  if (v3) {
    sub_1902D8B58(v3);
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 184) = 0;
  if (v6) {
    sub_1902D8B58(v6);
  }
}

void sub_1905C71A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a11) {
    sub_1902D8B58(a11);
  }
  if (a14) {
    sub_1902D8B58(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905C7244(uint64_t a1, const char *a2)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(*(void *)(a1 + 32) + 56) = 2139095039;
  *(void *)(*(void *)(a1 + 32) + 176) = 0x47EFFFFFE0000000;
  uint64_t v7 = @"kCLConnectionMessageSubscribeKey";
  v8[0] = MEMORY[0x1E4F1CC28];
  uint64_t v4 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v8, &v7, 1);
  sub_19049655C("kCLConnectionMessageFilteredElevationUpdate", &v4, &v5);
  uint64_t v3 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CLConnectionClient::sendMessage();
  if (v3) {
    sub_1902D8B58(v3);
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 184) = 1;
  if (v6) {
    sub_1902D8B58(v6);
  }
}

void sub_1905C7354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a11) {
    sub_1902D8B58(a11);
  }
  if (a14) {
    sub_1902D8B58(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905C7434(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = _Block_copy(*(const void **)(a1 + 48));
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(NSObject **)(v4 + 112);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1905C74D0;
  block[3] = &unk_1E568D398;
  uint64_t v6 = *(void *)(a1 + 32);
  void block[4] = v4;
  void block[5] = v6;
  void block[6] = v3;
  dispatch_async(v5, block);
}

void sub_1905C74D0(uint64_t a1, const char *a2, uint64_t a3)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)(a1 + 32);
  objc_msgSend__releaseHandlerObjects(*(void **)(a1 + 32), a2, a3);
  *(void *)(*v3 + 192) = v3[1];
  *(void *)(*v3 + 20dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = v3[2];
  uint64_t v9 = @"kCLConnectionMessageSubscribeKey";
  v10[0] = MEMORY[0x1E4F1CC38];
  uint64_t v6 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v4, (uint64_t)v10, &v9, 1);
  sub_1904E6458("kCLConnectionMessageAbsoluteAltitudeUpdate", &v6, &v7);
  uint64_t v5 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CLConnectionClient::sendMessage();
  if (v5) {
    sub_1902D8B58(v5);
  }
  if (v8) {
    sub_1902D8B58(v8);
  }
}

void sub_1905C75D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a11) {
    sub_1902D8B58(a11);
  }
  if (a14) {
    sub_1902D8B58(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905C7674(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(NSObject **)(v1 + 112);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1905C76E8;
  block[3] = &unk_1E568D118;
  void block[4] = v1;
  dispatch_async(v2, block);
}

void sub_1905C76E8(uint64_t a1, const char *a2)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = @"kCLConnectionMessageSubscribeKey";
  v10[0] = MEMORY[0x1E4F1CC28];
  uint64_t v6 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v10, &v9, 1);
  sub_1904E6458("kCLConnectionMessageAbsoluteAltitudeUpdate", &v6, &v7);
  uint64_t v5 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CLConnectionClient::sendMessage();
  if (v5) {
    sub_1902D8B58(v5);
  }
  objc_msgSend__releaseHandlerObjects(*(void **)(a1 + 32), v3, v4);
  if (v8) {
    sub_1902D8B58(v8);
  }
}

void sub_1905C77D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1902D8B58(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905C7D98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 192) && (uint64_t v3 = *(const void **)(v2 + 200)) != 0)
  {
    uint64_t v4 = _Block_copy(v3);
    uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 192);
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    void v8[2] = sub_1905C7E5C;
    void v8[3] = &unk_1E568D320;
    v8[4] = *(void *)(a1 + 40);
    void v8[5] = v4;
    objc_msgSend_addOperationWithBlock_(v5, v6, (uint64_t)v8);
  }
  else
  {
    uint64_t v7 = *(void **)(a1 + 40);
  }
}

void sub_1905C7E5C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  uint64_t v2 = *(void **)(a1 + 32);
}

uint64_t sub_1905C7EC8(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_onFilteredPressure_, a1);
}

void sub_1905C8040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1905C8058(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t result = objc_msgSend_initPrivate(*(void **)(a1 + 32), a2, a3);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 4dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = result;
  return result;
}

void sub_1905C81C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1905C81E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), sel_deallocPrivate, a3);
}

uint64_t sub_1905C8530(uint64_t a1, const char *a2, uint64_t a3)
{
  if (objc_msgSend_authorizationStatus(CMMotionUtils, a2, a3) == 3)
  {
    uint64_t v5 = sub_1902D6BD0();
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = sub_1905C8630;
    void v12[3] = &unk_1E568D398;
    long long v13 = *(_OWORD *)(a1 + 32);
    uint64_t v14 = *(void *)(a1 + 48);
    sub_1902CE9BC(v5, (uint64_t)v12);
    return objc_msgSend__startRelativeAltitudeUpdates(*(void **)(*(void *)(a1 + 32) + 8), v6, v7);
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v4, @"CMErrorDomain", 105, 0);
    uint64_t v11 = *(uint64_t (**)(uint64_t, void, uint64_t))(v9 + 16);
    return v11(v9, 0, v10);
  }
}

uint64_t sub_1905C8630(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_startRelativeAltitudeUpdatesPrivateToQueue_withHandler_, *(void *)(a1 + 40));
}

uint64_t sub_1905C8864(uint64_t a1)
{
  uint64_t v2 = sub_1902D6BD0();
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1905C88F0;
  v6[3] = &unk_1E568D118;
  void v6[4] = *(void *)(a1 + 32);
  sub_1902CDE98(v2, (uint64_t)v6);
  return objc_msgSend__stopRelativeAltitudeUpdates(*(void **)(*(void *)(a1 + 32) + 8), v3, v4);
}

uint64_t sub_1905C88F0(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_stopRelativeAltitudeUpdatesPrivate(*(void **)(a1 + 32), a2, a3);
}

uint64_t sub_1905C89C8(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel__startSignificantElevationUpdatesWithHandler_, *(void *)(a1 + 40));
}

uint64_t sub_1905C8A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel__stopSignificantElevationUpdates, a3);
}

uint64_t sub_1905C8BBC(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel__querySignificantElevationChangeFromDate_toDate_withHandler_, *(void *)(a1 + 40));
}

void sub_1905C8DA8(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

void sub_1905C9348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1905C9370(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

uint64_t sub_1905C9724(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel__queryElevationProfileFromDate_toDate_withBatchSize_withHandler_, *(void *)(a1 + 40));
}

uint64_t sub_1905C983C(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend__teardown(*(void **)(*(void *)(a1 + 32) + 8), a2, a3);
}

uint64_t sub_1905C9934(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend__internal(*(void **)(a1 + 32), a2, a3);
  uint64_t v5 = *(void *)(a1 + 40);

  return MEMORY[0x1F4181798](v4, sel__startElevationUpdatesWithHandler_, v5);
}

uint64_t sub_1905C99E8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = objc_msgSend__internal(*(void **)(a1 + 32), a2, a3);

  return MEMORY[0x1F4181798](v3, sel__stopElevationUpdates, v4);
}

os_log_t sub_1905C9A1C()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Pressure");
  qword_1E929D780 = (uint64_t)result;
  return result;
}

os_log_t sub_1905C9A4C()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Altimeter");
  qword_1E929D750 = (uint64_t)result;
  return result;
}

void sub_1905C9A7C(void *a1, void *a2)
{
  uint64_t v4 = operator new(0x70uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_1EDFD0DA0;
  sub_1902C3F54(__p, "kCLConnectionMessageSignificantElevationUpdate");
  MEMORY[0x192FCC420](v4 + 3, __p, *a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_1905C9B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void sub_1905C9CB8(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 49) < 0) {
    operator delete(*(void **)(v2 - 72));
  }
  MEMORY[0x192FCC980](v1, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_1905C9CF4(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v8 = (NSSet *)objc_msgSend_setWithObjects_(v4, v7, v5, v6, 0);
  if (*a2
    && (uint64_t DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v8)) != 0
    && (uint64_t v11 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v10, @"CMErrorMessage")) != 0)
  {
    int v14 = objc_msgSend_intValue(v11, v12, v13);
  }
  else
  {
    int v14 = 103;
  }
  if (qword_1E929D8B8 != -1) {
    dispatch_once(&qword_1E929D8B8, &unk_1EDFD3F80);
  }
  uint64_t v15 = qword_1E929D8C0;
  if (os_log_type_enabled((os_log_t)qword_1E929D8C0, OS_LOG_TYPE_FAULT))
  {
    uint64_t v16 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 67240448;
    int v19 = v14;
    __int16 v20 = 2048;
    uint64_t v21 = v16;
    _os_log_impl(&dword_1902AF000, v15, OS_LOG_TYPE_FAULT, "Failed with CMError code %{public}d, %p", buf, 0x12u);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D8B8 != -1) {
      dispatch_once(&qword_1E929D8B8, &unk_1EDFD3F80);
    }
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "-[CMSwimTrackerInternal init]_block_invoke", "CoreLocation: %s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
}

void sub_1905C9F30(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = getpid();
  uint64_t ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2);
  if (ExecutablePathFromPid)
  {
    uint64_t v5 = ExecutablePathFromPid;
    if (qword_1E929D8B8 != -1) {
      dispatch_once(&qword_1E929D8B8, &unk_1EDFD3F80);
    }
    uint64_t v6 = qword_1E929D8C0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8C0, OS_LOG_TYPE_INFO))
    {
      pid_t v7 = getpid();
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = *(unsigned __int8 *)(v8 + 24);
      *(_DWORD *)long long buf = 138413058;
      uint64_t v12 = v5;
      __int16 v13 = 1024;
      pid_t v14 = v7;
      __int16 v15 = 1024;
      int v16 = v9;
      __int16 v17 = 2048;
      uint64_t v18 = v8;
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_INFO, "Client connection interrupt, %@, %d, %d, %p", buf, 0x22u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8B8 != -1) {
        dispatch_once(&qword_1E929D8B8, &unk_1EDFD3F80);
      }
      getpid();
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMSwimTrackerInternal init]_block_invoke", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

void sub_1905CA26C(uint64_t a1)
{
  v37[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 32);
  if (v3 != *(void **)(a1 + 48) || !*(unsigned char *)(v2 + 24))
  {

    *(void *)(*(void *)(a1 + 32) + 32) = *(id *)(a1 + 48);
    objc_msgSend__resetOffsets(*(void **)(a1 + 32), v4, v5);
    uint64_t v31 = 0;
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7)
    {
      uint64_t v36 = @"CMSwimKeyDataRecord";
      v37[0] = v7;
      uint64_t v31 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v6, (uint64_t)v37, &v36, 1);
    }
    else
    {
      id v8 = objc_alloc(MEMORY[0x1E4F29128]);
      uint64_t v10 = objc_msgSend_initWithUUIDString_(v8, v9, @"00000000-0000-0000-0000-000000000000");
      uint64_t v11 = [CMSwimData alloc];
      __int16 v13 = objc_msgSend_initWithSessionId_(v11, v12, (uint64_t)v10);
      float v34 = @"CMSwimKeyDataRecord";
      uint64_t v35 = v13;
      uint64_t v31 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v14, (uint64_t)&v35, &v34, 1);
    }
    sub_1905869D4("kCLConnectionMessageSwimDataQuery", &v31, &v29);
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v27 = v29;
    double v28 = v30;
    if (v30)
    {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v15 = *(void *)(a1 + 32);
    }
    uint64_t v22 = MEMORY[0x1E4F143A8];
    uint64_t v23 = 3221225472;
    float v24 = sub_1905CA5D8;
    uint64_t v25 = &unk_1E568D558;
    uint64_t v26 = v15;
    CLConnectionClient::sendMessage();
    if (v28) {
      sub_1902D8B58(v28);
    }
    sub_1902C3F54(&__p, "kCLConnectionMessageSwimDataUpdate");
    v18[1] = MEMORY[0x1E4F143A8];
    void v18[2] = 3221225472;
    void v18[3] = sub_1905CA6BC;
    v18[4] = &unk_1E568D558;
    v18[5] = *(void *)(a1 + 32);
    CLConnectionClient::setHandlerForMessage();
    if (v21 < 0) {
      operator delete(__p);
    }
    double v32 = @"kCLConnectionMessageSubscribeKey";
    uint64_t v33 = MEMORY[0x1E4F1CC38];
    v18[0] = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v16, (uint64_t)&v33, &v32, 1);
    sub_1902BB770("kCLConnectionMessageSwimDataUpdate", v18, &__p);
    __int16 v17 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CLConnectionClient::sendMessage();
    if (v17) {
      sub_1902D8B58(v17);
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 24) = 1;
    if (v20) {
      sub_1902D8B58(v20);
    }
    if (v30) {
      sub_1902D8B58(v30);
    }
  }
}

void sub_1905CA568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, std::__shared_weak_count *a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (a11) {
    sub_1902D8B58(a11);
  }
  if (a19) {
    sub_1902D8B58(a19);
  }
  if (a32) {
    sub_1902D8B58(a32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1905CA5D8(uint64_t result, uint64_t *a2)
{
  if (*(void *)(*(void *)(result + 32) + 32))
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v5 = objc_opt_class();
    uint64_t v6 = objc_opt_class();
    uint64_t v7 = objc_opt_class();
    uint64_t v8 = objc_opt_class();
    uint64_t v10 = (NSSet *)objc_msgSend_setWithObjects_(v4, v9, v5, v6, v7, v8, 0);
    os_log_t result = *a2;
    if (*a2)
    {
      os_log_t result = CLConnectionMessage::getDictionaryOfClasses((CLConnectionMessage *)result, v10);
      if (result)
      {
        uint64_t v11 = result;
        uint64_t v12 = *(void *)(v3 + 32);
        return MEMORY[0x1F4181798](v12, sel__handleUpdates_, v11);
      }
    }
  }
  return result;
}

void sub_1905CA6BC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 32);
  if (v4)
  {
    id v6 = (id)objc_msgSend_copy(v4, a2, a3);
    uint64_t v7 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v8 = objc_opt_class();
    uint64_t v9 = objc_opt_class();
    uint64_t v10 = objc_opt_class();
    uint64_t v11 = objc_opt_class();
    __int16 v13 = (NSSet *)objc_msgSend_setWithObjects_(v7, v12, v8, v9, v10, v11, 0);
    if (*(void *)a2
      && (uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v13)) != 0)
    {
      uint64_t v15 = DictionaryOfClasses;
      uint64_t v16 = *(void *)(a1 + 32);
      MEMORY[0x1F4181798](v16, sel__handleUpdates_, v15);
    }
    else
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_1905CA810;
      block[3] = &unk_1E568D2D0;
      void block[4] = v6;
      dispatch_async(MEMORY[0x1E4F14428], block);
    }
  }
}

uint64_t sub_1905CA810(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 103, 0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16);

  return v4(v2, 0, v3);
}

void sub_1905CA8E8(uint64_t a1, const char *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)(a1 + 32) + 24))
  {
    uint64_t v10 = @"kCLConnectionMessageSubscribeKey";
    uint64_t v11 = MEMORY[0x1E4F1CC28];
    v12[0] = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)&v11, &v10, 1);
    sub_1902BB770("kCLConnectionMessageSwimDataUpdate", v12, &buf);
    uint64_t v9 = *(std::__shared_weak_count **)&buf_4[4];
    if (*(void *)&buf_4[4]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf_4[4] + 8), 1uLL, memory_order_relaxed);
    }
    CLConnectionClient::sendMessage();
    if (v9) {
      sub_1902D8B58(v9);
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 24) = 0;
    objc_msgSend__resetOffsets(*(void **)(a1 + 32), v3, v4);
    if (*(void *)&buf_4[4]) {
      sub_1902D8B58(*(std::__shared_weak_count **)&buf_4[4]);
    }
  }
  else
  {
    if (qword_1E929D8B8 != -1) {
      dispatch_once(&qword_1E929D8B8, &unk_1EDFD3F80);
    }
    uint64_t v5 = qword_1E929D8C0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8C0, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int buf = 134217984;
      *(void *)buf_4 = v6;
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_INFO, "Unable to stop swim data updates as we are are not receiving updates, %p", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1E929D8B8 != -1) {
        dispatch_once(&qword_1E929D8B8, &unk_1EDFD3F80);
      }
      uint64_t v7 = *(void *)(a1 + 32);
      LODWORD(v12[0]) = 134217984;
      *(void *)((char *)v12 + 4) = v7;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMSwimTrackerInternal _stopUpdates]_block_invoke", "CoreLocation: %s\n", v8);
      if (v8 != (char *)&buf) {
        free(v8);
      }
    }
  }
}

void sub_1905CAB4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    sub_1902D8B58(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905CABF8(uint64_t a1, const char *a2)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v16 = @"CMSwimKeyDataRecord";
    v17[0] = v2;
    uint64_t v13 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v17, &v16, 1);
  }
  else
  {
    id v3 = objc_alloc(MEMORY[0x1E4F29128]);
    uint64_t v5 = objc_msgSend_initWithUUIDString_(v3, v4, @"00000000-0000-0000-0000-000000000000");
    uint64_t v6 = [CMSwimData alloc];
    uint64_t v8 = objc_msgSend_initWithSessionId_(v6, v7, (uint64_t)v5);
    pid_t v14 = @"CMSwimKeyDataRecord";
    uint64_t v15 = v8;
    uint64_t v13 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v9, (uint64_t)&v15, &v14, 1);
  }
  sub_1905869D4("kCLConnectionMessageSwimDataQuery", &v13, &v11);
  uint64_t v10 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CLConnectionClient::sendMessage();
  if (v10) {
    sub_1902D8B58(v10);
  }
  if (v12) {
    sub_1902D8B58(v12);
  }
}

void sub_1905CADA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a17) {
    sub_1902D8B58(a17);
  }
  if (a19) {
    sub_1902D8B58(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905CADCC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v5 = (id)objc_msgSend_copy(*(void **)(a1 + 40), a2, a3);
  uint64_t v6 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_opt_class();
  uint64_t v12 = (NSSet *)objc_msgSend_setWithObjects_(v6, v11, v7, v8, v9, v10, 0);
  if (*(void *)a2
    && (uint64_t DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v12)) != 0)
  {
    uint64_t v15 = DictionaryOfClasses;
    uint64_t v16 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v14, @"CMErrorMessage");
    uint64_t v18 = objc_msgSend_objectForKeyedSubscript_(v15, v17, @"CMSwimKeyDataArray");
    if (v16)
    {
      uint64_t v19 = v26;
      v26[0] = MEMORY[0x1E4F143A8];
      v26[1] = 3221225472;
      v26[2] = sub_1905CB1DC;
      v26[3] = &unk_1E568D320;
      v26[4] = v16;
      v26[5] = v5;
    }
    else if (v18)
    {
      uint64_t v19 = v25;
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 3221225472;
      _DWORD v25[2] = sub_1905CB254;
      v25[3] = &unk_1E568D320;
      v25[4] = v18;
      v25[5] = v5;
    }
    else
    {
      if (qword_1E929D8B8 != -1) {
        dispatch_once(&qword_1E929D8B8, &unk_1EDFD3F80);
      }
      __int16 v20 = qword_1E929D8C0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8C0, OS_LOG_TYPE_FAULT))
      {
        uint64_t v21 = *(void *)(a1 + 32);
        *(_DWORD *)int buf = 134217984;
        uint64_t v31 = v21;
        _os_log_impl(&dword_1902AF000, v20, OS_LOG_TYPE_FAULT, "Unable to parse query message, %p", buf, 0xCu);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8B8 != -1) {
          dispatch_once(&qword_1E929D8B8, &unk_1EDFD3F80);
        }
        uint64_t v22 = *(void *)(a1 + 32);
        int v28 = 134217984;
        uint64_t v29 = v22;
        uint64_t v23 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "-[CMSwimTrackerInternal _querySwimUpdatesFromRecord:handler:]_block_invoke", "CoreLocation: %s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
      uint64_t v19 = v24;
      v24[0] = MEMORY[0x1E4F143A8];
      v24[1] = 3221225472;
      v24[2] = sub_1905CB26C;
      _DWORD v24[3] = &unk_1E568D2D0;
      v24[4] = v5;
    }
  }
  else
  {
    uint64_t v19 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1905CB178;
    block[3] = &unk_1E568D2D0;
    void block[4] = v5;
  }
  dispatch_async(MEMORY[0x1E4F14428], v19);
}

uint64_t sub_1905CB178(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 103, 0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16);

  return v4(v2, 0, v3);
}

uint64_t sub_1905CB1DC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = objc_msgSend_intValue(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_errorWithDomain_code_userInfo_(v3, v6, @"CMErrorDomain", v5, 0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, uint64_t))(v4 + 16);

  return v8(v4, 0, v7);
}

uint64_t sub_1905CB254(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

uint64_t sub_1905CB26C(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 103, 0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16);

  return v4(v2, 0, v3);
}

void sub_1905CB4F8(uint64_t a1, const char *a2, uint64_t a3)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v10 = @"CMSwimSWOLFSessionIdKey";
    v11[0] = v3;
    uint64_t v9 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v11, &v10, 1);
    sub_19044F990("kCLConnectionMessageSwimSWOLFSessionQuery", &v9, &v6);
    int v5 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CLConnectionClient::sendMessage();
    if (v5) {
      sub_1902D8B58(v5);
    }
    if (v7) {
      sub_1902D8B58(v7);
    }
  }
  else
  {
    id v4 = (id)objc_msgSend_copy(*(void **)(a1 + 48), a2, a3);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1905CB6BC;
    block[3] = &unk_1E568D2D0;
    void block[4] = v4;
    dispatch_async(MEMORY[0x1E4F14428], block);
  }
}

void sub_1905CB690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16) {
    sub_1902D8B58(a16);
  }
  if (a18) {
    sub_1902D8B58(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1905CB6BC(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 107, 0);
  id v4 = *(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16);

  return v4(v2, 0, v3);
}

void sub_1905CB720(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v4 = (id)objc_msgSend_copy(*(void **)(a1 + 32), a2, a3);
  int v5 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v10 = (NSSet *)objc_msgSend_setWithObjects_(v5, v9, v6, v7, v8, 0);
  if (*(void *)a2
    && (uint64_t DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v10)) != 0)
  {
    uint64_t v13 = DictionaryOfClasses;
    uint64_t v14 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v12, @"CMErrorMessage");
    uint64_t v16 = objc_msgSend_objectForKeyedSubscript_(v13, v15, @"CMSwimSWOLFDataKey");
    if (v14)
    {
      __int16 v17 = v23;
      v23[0] = MEMORY[0x1E4F143A8];
      v23[1] = 3221225472;
      void v23[2] = sub_1905CBAF0;
      float v23[3] = &unk_1E568D320;
      v23[4] = v14;
      v23[5] = v4;
    }
    else if (v16)
    {
      __int16 v17 = v22;
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = sub_1905CBB68;
      v22[3] = &unk_1E568D320;
      v22[4] = v16;
      void v22[5] = v4;
    }
    else
    {
      if (qword_1E929D8B8 != -1) {
        dispatch_once(&qword_1E929D8B8, &unk_1EDFD3F80);
      }
      uint64_t v18 = qword_1E929D8C0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8C0, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl(&dword_1902AF000, v18, OS_LOG_TYPE_FAULT, "Unable to parse kCLConnectionMessageSwimSWOLFSessionQuery message.", buf, 2u);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8B8 != -1) {
          dispatch_once(&qword_1E929D8B8, &unk_1EDFD3F80);
        }
        __int16 v21 = 0;
        uint64_t v19 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "-[CMSwimTrackerInternal _querySWOLFSummaryWithSessionID:handler:]_block_invoke", "CoreLocation: %s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      __int16 v17 = v20;
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = sub_1905CBB80;
      v20[3] = &unk_1E568D2D0;
      v20[4] = v4;
    }
  }
  else
  {
    __int16 v17 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1905CBA8C;
    block[3] = &unk_1E568D2D0;
    void block[4] = v4;
  }
  dispatch_async(MEMORY[0x1E4F14428], v17);
}

uint64_t sub_1905CBA8C(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 103, 0);
  id v4 = *(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16);

  return v4(v2, 0, v3);
}

uint64_t sub_1905CBAF0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = objc_msgSend_intValue(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_errorWithDomain_code_userInfo_(v3, v6, @"CMErrorDomain", v5, 0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, uint64_t))(v4 + 16);

  return v8(v4, 0, v7);
}

uint64_t sub_1905CBB68(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

uint64_t sub_1905CBB80(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 103, 0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16);

  return v4(v2, 0, v3);
}

uint64_t sub_1905CC9B0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = objc_msgSend_intValue(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_errorWithDomain_code_userInfo_(v3, v6, @"CMErrorDomain", v5, 0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, uint64_t))(v4 + 16);

  return v8(v4, 0, v7);
}

uint64_t sub_1905CCA28(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 103, 0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16);

  return v4(v2, 0, v3);
}

uint64_t sub_1905CCA8C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

uint64_t sub_1905CCBB4(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend__teardown(*(void **)(a1 + 32), a2, a3);
}

uint64_t sub_1905CCCC4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend__internal(*(void **)(a1 + 32), a2, a3);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);

  return objc_msgSend__startUpdatesFromRecord_handler_(v4, v5, v6, v7);
}

uint64_t sub_1905CCD78(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = objc_msgSend__internal(*(void **)(a1 + 32), a2, a3);

  return MEMORY[0x1F4181798](v3, sel__stopUpdates, v4);
}

uint64_t sub_1905CCE8C(uint64_t a1, const char *a2)
{
  uint64_t result = objc_msgSend_isAuthorizedForEntitlement_(CMMotionUtils, a2, @"com.apple.locationd.activity");
  qword_1EB3BF770 = result;
  return result;
}

uint64_t sub_1905CCFA4(uint64_t a1, const char *a2)
{
  uint64_t result = objc_msgSend_isAuthorizedForEntitlement_(CMMotionUtils, a2, @"com.apple.locationd.activity");
  qword_1EB3BF780 = result;
  return result;
}

os_log_t sub_1905CCFDC()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Swimming");
  qword_1E929D8C0 = (uint64_t)result;
  return result;
}

os_log_t sub_1905CD868()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "MotionAlarm");
  qword_1E929D6C0 = (uint64_t)result;
  return result;
}

double sub_1905CEBF4()
{
  uint64_t v0 = mach_continuous_time();

  return sub_1902D8D34(v0);
}

void *sub_1905CFBF0(void *a1)
{
  *a1 = &unk_1EDFC2858;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v2 = sub_1902D6BD0();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  _OWORD v4[2] = sub_1905CFCA8;
  v4[3] = &unk_1E568CF68;
  v4[4] = a1;
  sub_1902CDE98(v2, (uint64_t)v4);
  return a1;
}

void sub_1905CFC90(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    sub_1902D8B58(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1905CFCA8(uint64_t a1)
{
  return sub_1905CFCB0(*(void *)(a1 + 32));
}

BOOL sub_1905CFCB0(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  sub_1902D6BD0();
  sub_1904DFAD8();
  BOOL v2 = +[CMOdometryManager isAvailable]_0();
  if (v2)
  {
    if (!*(void *)(a1 + 8))
    {
      uint64_t v3 = (void *)sub_1902DF4A8();
      uint64_t v9 = 0x160000FF0CLL;
      char v10 = 0;
      sub_19043791C(v3, (uint64_t)&v9, (uint64_t *)buf);
      long long v4 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      int v5 = *(std::__shared_weak_count **)(a1 + 16);
      *(_OWORD *)(a1 + 8) = v4;
      if (v5)
      {
        sub_1902D8B58(v5);
        if (*(void *)&buf[8]) {
          sub_1902D8B58(*(std::__shared_weak_count **)&buf[8]);
        }
      }
      sub_1902CD864(*(void *)(a1 + 8), (uint64_t)sub_1905CFF84, a1);
    }
  }
  else
  {
    if (qword_1E929D9D8 != -1) {
      dispatch_once(&qword_1E929D9D8, &unk_1EDFD2B40);
    }
    uint64_t v6 = qword_1E929D9E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D9E0, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_FAULT, "Service unavailable.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D9D8 != -1) {
        dispatch_once(&qword_1E929D9D8, &unk_1EDFD2B40);
      }
      __int16 v11 = 0;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "BOOL CLSPUInertialOdometryInterface::openHidDevice()", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  return v2;
}

void *sub_1905CFECC(void *a1)
{
  *a1 = &unk_1EDFC2858;
  BOOL v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_1902D8B58(v2);
  }
  return a1;
}

void sub_1905CFF18(void *a1)
{
  *a1 = &unk_1EDFC2858;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_1902D8B58(v1);
  }

  JUMPOUT(0x192FCC980);
}

void sub_1905CFF84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    IOHIDEventGetVendorDefinedData();
    if (qword_1E929D9D8 != -1) {
      dispatch_once(&qword_1E929D9D8, &unk_1EDFD2B40);
    }
    long long v4 = qword_1E929D9E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D9E0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_INFO, "Empty payload, returning", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D9D8 != -1) {
        dispatch_once(&qword_1E929D9D8, &unk_1EDFD2B40);
      }
      int v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLSPUInertialOdometryInterface::onIoHidEvent(IOHIDEventRef)", "CoreLocation: %s\n");
LABEL_19:
      if (v5 != buf) {
        free(v5);
      }
    }
  }
  else
  {
    if (qword_1E929D9D8 != -1) {
      dispatch_once(&qword_1E929D9D8, &unk_1EDFD2B40);
    }
    uint64_t v6 = qword_1E929D9E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D9E0, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_FAULT, "Event ref invalid", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D9D8 != -1) {
        dispatch_once(&qword_1E929D9D8, &unk_1EDFD2B40);
      }
      int v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "void CLSPUInertialOdometryInterface::onIoHidEvent(IOHIDEventRef)", "CoreLocation: %s\n");
      goto LABEL_19;
    }
  }
}

os_log_t sub_1905D0668()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "InertialOdometry");
  qword_1E929D9E0 = (uint64_t)result;
  return result;
}

uint64_t sub_1905D0698(void *a1)
{
  *a1 = &unk_1EDFC82B8;
  sub_1905D06F0((uint64_t)a1);

  return sub_1905D4CF4((uint64_t)a1);
}

void sub_1905D06F0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 172))
  {
    BOOL v2 = (os_unfair_lock_s *)(a1 + 168);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 168));
    sub_1902B8788(a1);
    IOHIDServiceClientFastPathInvalidate();
    *(unsigned char *)(a1 + 172) = 0;
    os_unfair_lock_unlock(v2);
  }
}

void sub_1905D0758(void *a1)
{
  sub_1905D0698(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1905D0790(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 172))
  {
    uint64_t v1 = (os_unfair_lock_s *)(a1 + 168);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 168));
    int v2 = IOHIDServiceClientFastPathCopyEventWithStatus();
    os_unfair_lock_unlock(v1);
    if (v2)
    {
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD2B60);
      }
      uint64_t v3 = off_1EB3BE890;
      if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 67240192;
        int v7 = v2;
        _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_INFO, "[FastPath] copyEvent Failed (%{public}x)", buf, 8u);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE898 != -1) {
          dispatch_once(&qword_1EB3BE898, &unk_1EDFD2B60);
        }
        int v5 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "virtual IOHIDEventRef FastPathDevice::copyEvent()", "CoreLocation: %s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
    }
  }
  return 0;
}

void sub_1905D0D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,std::__shared_weak_count *a24,int a25,__int16 a26,char a27,char a28)
{
  if (a11) {
    sub_1902D8B58(a11);
  }
  if (a24) {
    sub_1902D8B58(a24);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905D0DA0(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  int v5 = objc_msgSend_objectForKeyedSubscript_(Dictionary, v4, @"CMBatchedSensorAvailable");
  int v8 = objc_msgSend_BOOLValue(v5, v6, v7);
  if (qword_1E929DA08 != -1) {
    dispatch_once(&qword_1E929DA08, &unk_1EDFC3648);
  }
  uint64_t v9 = qword_1E929DA10;
  if (os_log_type_enabled((os_log_t)qword_1E929DA10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67240192;
    int v12 = v8;
    _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_DEFAULT, "[framework] received availability update %{public}d", buf, 8u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929DA08 != -1) {
      dispatch_once(&qword_1E929DA08, &unk_1EDFC3648);
    }
    char v10 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMBatchedSensorManagerInternal _connect]_block_invoke", "CoreLocation: %s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 32) = v8;
}

void sub_1905D0F74(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  long long v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  uint64_t v7 = (NSSet *)objc_msgSend_setWithObjects_(v4, v6, v5, 0);
  uint64_t DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v7);
  char v10 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v9, @"CMErrorMessage");
  int v13 = objc_msgSend_intValue(v10, v11, v12);
  if (qword_1E929DA08 != -1) {
    dispatch_once(&qword_1E929DA08, &unk_1EDFC3648);
  }
  uint64_t v14 = qword_1E929DA10;
  if (os_log_type_enabled((os_log_t)qword_1E929DA10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67240192;
    int v28 = v13;
    _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_DEFAULT, "[framework] received error %{public}d", buf, 8u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929DA08 != -1) {
      dispatch_once(&qword_1E929DA08, &unk_1EDFC3648);
    }
    int v25 = 67240192;
    int v26 = v13;
    __int16 v20 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMBatchedSensorManagerInternal _connect]_block_invoke", "CoreLocation: %s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  uint64_t v15 = *(void **)(a1 + 32);
  uint64_t v16 = v15[5];
  if (v16)
  {
    __int16 v17 = v15[3];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1905D1228;
    block[3] = &unk_1E568D240;
    void block[4] = v16;
    int v24 = v13;
    dispatch_async(v17, block);
    uint64_t v15 = *(void **)(a1 + 32);
  }
  uint64_t v18 = v15[7];
  if (v18)
  {
    uint64_t v19 = v15[3];
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    _OWORD v21[2] = sub_1905D1290;
    float32x4_t v21[3] = &unk_1E568D240;
    void v21[4] = v18;
    int v22 = v13;
    dispatch_async(v19, v21);
  }
}

uint64_t sub_1905D1228(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", *(unsigned int *)(a1 + 40), 0);
  long long v4 = *(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16);

  return v4(v2, 0, v3);
}

uint64_t sub_1905D1290(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", *(unsigned int *)(a1 + 40), 0);
  long long v4 = *(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16);

  return v4(v2, 0, v3);
}

void sub_1905D142C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905D1A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,std::__shared_weak_count *a30,int a31,__int16 a32,char a33,char a34)
{
  if (a13) {
    sub_1902D8B58(a13);
  }
  if (a30) {
    sub_1902D8B58(a30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1905D1A60(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 109, 0);
  long long v4 = *(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16);

  return v4(v2, 0, v3);
}

void sub_1905D1AC4(uint64_t a1, uint64_t *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  long long v4 = objc_opt_class();
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  __int16 v17 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v8 = objc_msgSend__newArrayByUnpackingAccelerometerBatch_(v4, v5, (uint64_t)&v16);
  if (v17) {
    sub_1902D8B58(v17);
  }
  uint64_t v9 = *(void **)(a1 + 32);
  uint64_t v10 = v9[5];
  if (v10)
  {
    if (qword_1E929DA08 != -1) {
      dispatch_once(&qword_1E929DA08, &unk_1EDFC3648);
    }
    __int16 v11 = qword_1E929DA10;
    if (os_log_type_enabled((os_log_t)qword_1E929DA10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_INFO, "[framework-accel] invoking client handler", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929DA08 != -1) {
        dispatch_once(&qword_1E929DA08, &unk_1EDFC3648);
      }
      __int16 v15 = 0;
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMBatchedSensorManagerInternal _startAccelerometerUpdatesWithHandler:]_block_invoke", "CoreLocation: %s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    uint64_t v12 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1905D1D30;
    block[3] = &unk_1E568D320;
    void block[4] = v8;
    void block[5] = v10;
    dispatch_async(v12, block);
    uint64_t v9 = *(void **)(a1 + 32);
  }
  objc_msgSend_setAccelBatch_(v9, v7, (uint64_t)v8);
}

void sub_1905D1D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    sub_1902D8B58(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1905D1D30(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_1905D1FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a13) {
    sub_1902D8B58(a13);
  }
  if (a20) {
    sub_1902D8B58(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905D2BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,std::__shared_weak_count *a30,int a31,__int16 a32,char a33,char a34)
{
  if (a13) {
    sub_1902D8B58(a13);
  }
  if (a30) {
    sub_1902D8B58(a30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1905D2C24(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 109, 0);
  long long v4 = *(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16);

  return v4(v2, 0, v3);
}

void sub_1905D2C88(uint64_t a1, uint64_t *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  long long v4 = objc_opt_class();
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  __int16 v17 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v8 = objc_msgSend__newArrayByUnpackingDeviceMotionBatch_(v4, v5, (uint64_t)&v16);
  if (v17) {
    sub_1902D8B58(v17);
  }
  uint64_t v9 = *(void **)(a1 + 32);
  uint64_t v10 = v9[7];
  if (v10)
  {
    if (qword_1E929DA08 != -1) {
      dispatch_once(&qword_1E929DA08, &unk_1EDFC3648);
    }
    __int16 v11 = qword_1E929DA10;
    if (os_log_type_enabled((os_log_t)qword_1E929DA10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_INFO, "[framework-dm] invoking client handler", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929DA08 != -1) {
        dispatch_once(&qword_1E929DA08, &unk_1EDFC3648);
      }
      __int16 v15 = 0;
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMBatchedSensorManagerInternal _startDeviceMotionUpdatesWithHandler:]_block_invoke", "CoreLocation: %s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    uint64_t v12 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1905D2EF4;
    block[3] = &unk_1E568D320;
    void block[4] = v8;
    void block[5] = v10;
    dispatch_async(v12, block);
    uint64_t v9 = *(void **)(a1 + 32);
  }
  objc_msgSend_setDeviceMotionBatch_(v9, v7, (uint64_t)v8);
}

void sub_1905D2ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    sub_1902D8B58(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1905D2EF4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_1905D3198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a13) {
    sub_1902D8B58(a13);
  }
  if (a20) {
    sub_1902D8B58(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1905D39B4(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend__teardown(*(void **)(a1 + 32), a2, a3);
}

void sub_1905D3A54(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(*(void *)(v1 + 8) + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1905D3ACC;
  block[3] = &unk_1E568D118;
  void block[4] = v1;
  dispatch_async(v2, block);
}

uint64_t sub_1905D3ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel__startAccelerometerUpdates, a3);
}

void sub_1905D3B50(uint64_t a1)
{
  v3[0] = MEMORY[0x1E4F143A8];
  long long v1 = *(_OWORD *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 8) + 16);
  v3[1] = 3221225472;
  _OWORD v3[2] = sub_1905D3BCC;
  v3[3] = &unk_1E568D2F8;
  long long v4 = v1;
  dispatch_async(v2, v3);
}

uint64_t sub_1905D3BCC(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel__startAccelerometerUpdatesWithHandler_, *(void *)(a1 + 40));
}

uint64_t sub_1905D3C50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel__stopAccelerometerUpdates, a3);
}

void sub_1905D3CFC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(*(void *)(v1 + 8) + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1905D3D74;
  block[3] = &unk_1E568D118;
  void block[4] = v1;
  dispatch_async(v2, block);
}

uint64_t sub_1905D3D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel__startDeviceMotionUpdates, a3);
}

void sub_1905D3DF8(uint64_t a1)
{
  v3[0] = MEMORY[0x1E4F143A8];
  long long v1 = *(_OWORD *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 8) + 16);
  v3[1] = 3221225472;
  _OWORD v3[2] = sub_1905D3E74;
  v3[3] = &unk_1E568D2F8;
  long long v4 = v1;
  dispatch_async(v2, v3);
}

uint64_t sub_1905D3E74(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel__startDeviceMotionUpdatesWithHandler_, *(void *)(a1 + 40));
}

uint64_t sub_1905D3EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel__stopDeviceMotionUpdates, a3);
}

os_log_t sub_1905D3F0C()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "BatchedSensor");
  qword_1E929DA10 = (uint64_t)result;
  return result;
}

void sub_1905D3F3C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1905D3F44(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFC8B90;
  uint64_t v2 = *(__CFRunLoopTimer **)(a1 + 56);
  if (v2)
  {
    CFRunLoopTimerInvalidate(v2);
    CFRelease(*(CFTypeRef *)(a1 + 56));
  }
  sub_1905D3FBC(a1);
  long long v4 = (void **)(a1 + 8);
  sub_1905D6E5C(&v4);
  return a1;
}

void sub_1905D3FBC(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current != *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    uint64_t v5 = off_1EB3BE890;
    p_cache = (void **)"CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 68289539;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "assert";
      __int16 v15 = 2081;
      uint64_t v16 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] closeHid should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    uint64_t v6 = off_1EB3BE890;
    if (os_signpost_enabled((os_log_t)off_1EB3BE890))
    {
      *(_DWORD *)int buf = 68289539;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "assert";
      __int16 v15 = 2081;
      uint64_t v16 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] closeHid should be running on motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] closeHid should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    uint64_t v7 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 68289539;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "assert";
      __int16 v15 = 2081;
      uint64_t v16 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] closeHid should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    goto LABEL_20;
  }
  if (*(void *)(a1 + 40))
  {
    sub_1902D6BD0();
    IOHIDEventSystemClientUnscheduleWithRunLoop();
    IOHIDEventSystemClientUnregisterEventCallback();
    IOHIDEventSystemClientUnregisterResetCallback();
    IOHIDEventSystemClientUnregisterDeviceMatchingCallback();
    CFRelease(*(CFTypeRef *)(a1 + 40));
    *(void *)(a1 + 4dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
  }
  p_cache = CMDeviceOrientationManager.cache;
  if (qword_1EB3BE898 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
  long long v4 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Hid interface closed", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (p_cache[275] != (void *)-1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::closeHid()", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
}

void sub_1905D4404(uint64_t a1)
{
  sub_1905D3F44(a1);

  JUMPOUT(0x192FCC980);
}

void sub_1905D443C(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE898 != -1) {
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
  }
  uint64_t v2 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] It looks like our HID event system just become available (again)", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    long long v4 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::onEventSystemReset(void *)", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  uint64_t v3 = sub_1902D6BD0();
  *(void *)int buf = MEMORY[0x1E4F143A8];
  uint64_t v6 = 3221225472;
  uint64_t v7 = sub_1905D4C38;
  int v8 = &unk_1E568CF68;
  uint64_t v9 = a1;
  sub_1902CE9BC(v3, (uint64_t)buf);
}

void sub_1905D4624(uint64_t a1, char *a2, __IOHIDServiceClient *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (a2 == "REMOVED")
  {
    CFRunLoopTimerContext context = (void *)MEMORY[0x192FCD2F0]();
    uint64_t v6 = *(uint64_t **)(a1 + 8);
    uint64_t v5 = *(uint64_t **)(a1 + 16);
    if (v6 != v5)
    {
      while (1)
      {
        uint64_t v7 = (std::__shared_weak_count *)v6[1];
        if (v7) {
          break;
        }
LABEL_29:
        v6 += 2;
        if (v6 == v5) {
          goto LABEL_40;
        }
      }
      uint64_t v8 = *v6;
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = std::__shared_weak_count::lock(v7);
      if (!v9)
      {
LABEL_28:
        std::__shared_weak_count::__release_weak(v7);
        goto LABEL_29;
      }
      uint64_t v10 = v9;
      if (v8 && *(void *)(v8 + 80) && (__IOHIDServiceClient *)sub_1902B8788(v8) == a3)
      {
        id v11 = (id)IOHIDServiceClientCopyProperty(a3, @"PrimaryUsagePage");
        int v14 = objc_msgSend_intValue(v11, v12, v13);
        id v15 = (id)IOHIDServiceClientCopyProperty(a3, @"PrimaryUsage");
        int v18 = objc_msgSend_intValue(v15, v16, v17);
        if (qword_1EB3BE898 != -1) {
          dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
        }
        uint64_t v19 = off_1EB3BE890;
        if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v20 = *(void *)(v8 + 152);
          *(_DWORD *)int buf = 134284291;
          uint64_t v30 = (uint64_t)a3;
          __int16 v31 = 1026;
          int v32 = v14;
          __int16 v33 = 1026;
          int v34 = v18;
          __int16 v35 = 2113;
          uint64_t v36 = v20;
          _os_log_impl(&dword_1902AF000, v19, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] onServiceRemoval - IOHIDServiceClientRef for service %{private}p with usage pair {%{public}d, %{public}d} and property %{private}@ will be removed.", buf, 0x22u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE898 != -1) {
            dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
          }
          uint64_t v27 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::onServiceRemoval(void *, IOHIDServiceClientRef)", "CoreLocation: %s\n", v27);
          if (v27 != (char *)buf) {
            free(v27);
          }
        }
        (*(void (**)(void))(v8 + 80))(*(void *)(v8 + 88));
        sub_1902CC21C(v8, v21);
        sub_1902CC320(a1, a3);
        if (sub_1902B8788(v8))
        {
          sub_1902D6C14(a1);
          if (qword_1EB3BE898 != -1) {
            dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
          }
          int v22 = off_1EB3BE890;
          if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v23 = sub_1902B8788(v8);
            uint64_t v24 = *(void *)(v8 + 152);
            *(_DWORD *)int buf = 134284291;
            uint64_t v30 = v23;
            __int16 v31 = 1026;
            int v32 = v14;
            __int16 v33 = 1026;
            int v34 = v18;
            __int16 v35 = 2113;
            uint64_t v36 = v24;
            _os_log_impl(&dword_1902AF000, v22, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] onServiceRemoval - successfully switch to service %{private}p with usage pair {%{public}d, %{public}d} and property %{private}@.", buf, 0x22u);
          }
          if (!sub_1902D8400(115, 2)) {
            goto LABEL_27;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE898 != -1) {
            dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
          }
          sub_1902B8788(v8);
          int v25 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::onServiceRemoval(void *, IOHIDServiceClientRef)", "CoreLocation: %s\n", v25);
        }
        else
        {
          if (qword_1EB3BE898 != -1) {
            dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
          }
          int v26 = off_1EB3BE890;
          if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl(&dword_1902AF000, v26, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] onServiceRemoval - no available alternatives", buf, 2u);
          }
          if (!sub_1902D8400(115, 2)) {
            goto LABEL_27;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE898 != -1) {
            dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
          }
          int v25 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::onServiceRemoval(void *, IOHIDServiceClientRef)", "CoreLocation: %s\n", v25);
        }
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
LABEL_27:
      sub_1902D8B58(v10);
      goto LABEL_28;
    }
LABEL_40:
  }
}

void sub_1905D4BF8(_Unwind_Exception *a1)
{
  sub_1902D8B58(v2);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_1905D4C38(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_1902CC320((const char *)v1, 0);
  uint64_t v2 = *(uint64_t **)(v1 + 8);
  for (uint64_t i = *(uint64_t **)(v1 + 16); v2 != i; v2 += 2)
  {
    long long v4 = (std::__shared_weak_count *)v2[1];
    if (v4)
    {
      uint64_t v5 = *v2;
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v6 = std::__shared_weak_count::lock(v4);
      if (v6)
      {
        uint64_t v7 = v6;
        if (v5)
        {
          uint64_t v8 = *(void (**)(void))(v5 + 96);
          if (v8) {
            v8(*(void *)(v5 + 104));
          }
        }
        sub_1902D8B58(v7);
      }
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1905D4CD8(_Unwind_Exception *a1)
{
  sub_1902D8B58(v2);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1905D4CF4(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCA918;

  *(void *)(a1 + 16dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }

  *(void *)(a1 + 152) = 0;
  return a1;
}

void sub_1905D4D60(uint64_t a1)
{
  sub_1905D4CF4(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1905D4D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  uint64_t result = sub_1902D6BD0();
  if (Current != *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    uint64_t v8 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
    {
      int v10 = *(_DWORD *)(a1 + 16);
      int v9 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)int buf = 68290051;
      int v18 = 0;
      __int16 v19 = 2082;
      uint64_t v20 = "";
      __int16 v21 = 1026;
      int v22 = v9;
      __int16 v23 = 1026;
      int v24 = v10;
      __int16 v25 = 2082;
      int v26 = "assert";
      __int16 v27 = 2081;
      int v28 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setNewServiceCallback should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    id v11 = off_1EB3BE890;
    if (os_signpost_enabled((os_log_t)off_1EB3BE890))
    {
      int v13 = *(_DWORD *)(a1 + 16);
      int v12 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)int buf = 68290051;
      int v18 = 0;
      __int16 v19 = 2082;
      uint64_t v20 = "";
      __int16 v21 = 1026;
      int v22 = v12;
      __int16 v23 = 1026;
      int v24 = v13;
      __int16 v25 = 2082;
      int v26 = "assert";
      __int16 v27 = 2081;
      int v28 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] setNewServiceCallback should be called from motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] setNewServiceCallback should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    int v14 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
    {
      int v16 = *(_DWORD *)(a1 + 16);
      int v15 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)int buf = 68290051;
      int v18 = 0;
      __int16 v19 = 2082;
      uint64_t v20 = "";
      __int16 v21 = 1026;
      int v22 = v15;
      __int16 v23 = 1026;
      int v24 = v16;
      __int16 v25 = 2082;
      int v26 = "assert";
      __int16 v27 = 2081;
      int v28 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setNewServiceCallback should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
    }
    abort_report_np();
  }
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  return result;
}

uint64_t sub_1905D506C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current != *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    uint64_t v8 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
    {
      int v10 = *(_DWORD *)(a1 + 16);
      int v9 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)int buf = 68290051;
      int v18 = 0;
      __int16 v19 = 2082;
      uint64_t v20 = "";
      __int16 v21 = 1026;
      int v22 = v9;
      __int16 v23 = 1026;
      int v24 = v10;
      __int16 v25 = 2082;
      int v26 = "assert";
      __int16 v27 = 2081;
      int v28 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setServiceRemovalCallback should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    id v11 = off_1EB3BE890;
    if (os_signpost_enabled((os_log_t)off_1EB3BE890))
    {
      int v13 = *(_DWORD *)(a1 + 16);
      int v12 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)int buf = 68290051;
      int v18 = 0;
      __int16 v19 = 2082;
      uint64_t v20 = "";
      __int16 v21 = 1026;
      int v22 = v12;
      __int16 v23 = 1026;
      int v24 = v13;
      __int16 v25 = 2082;
      int v26 = "assert";
      __int16 v27 = 2081;
      int v28 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] setServiceRemovalCallback should be called from motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] setServiceRemovalCallback should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    int v14 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
    {
      int v16 = *(_DWORD *)(a1 + 16);
      int v15 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)int buf = 68290051;
      int v18 = 0;
      __int16 v19 = 2082;
      uint64_t v20 = "";
      __int16 v21 = 1026;
      int v22 = v15;
      __int16 v23 = 1026;
      int v24 = v16;
      __int16 v25 = 2082;
      int v26 = "assert";
      __int16 v27 = 2081;
      int v28 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setServiceRemovalCallback should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
    }
    abort_report_np();
  }
  *(void *)(a1 + 8dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = a2;
  *(void *)(a1 + 88) = a3;
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    return IOHIDServiceClientRegisterRemovalCallback();
  }
  return result;
}

uint64_t sub_1905D53A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  uint64_t result = sub_1902D6BD0();
  if (Current != *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    uint64_t v8 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
    {
      int v10 = *(_DWORD *)(a1 + 16);
      int v9 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)int buf = 68290051;
      int v18 = 0;
      __int16 v19 = 2082;
      uint64_t v20 = "";
      __int16 v21 = 1026;
      int v22 = v9;
      __int16 v23 = 1026;
      int v24 = v10;
      __int16 v25 = 2082;
      int v26 = "assert";
      __int16 v27 = 2081;
      int v28 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setIoHidResetCallback should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    id v11 = off_1EB3BE890;
    if (os_signpost_enabled((os_log_t)off_1EB3BE890))
    {
      int v13 = *(_DWORD *)(a1 + 16);
      int v12 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)int buf = 68290051;
      int v18 = 0;
      __int16 v19 = 2082;
      uint64_t v20 = "";
      __int16 v21 = 1026;
      int v22 = v12;
      __int16 v23 = 1026;
      int v24 = v13;
      __int16 v25 = 2082;
      int v26 = "assert";
      __int16 v27 = 2081;
      int v28 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] setIoHidResetCallback should be called from motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] setIoHidResetCallback should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    int v14 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
    {
      int v16 = *(_DWORD *)(a1 + 16);
      int v15 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)int buf = 68290051;
      int v18 = 0;
      __int16 v19 = 2082;
      uint64_t v20 = "";
      __int16 v21 = 1026;
      int v22 = v15;
      __int16 v23 = 1026;
      int v24 = v16;
      __int16 v25 = 2082;
      int v26 = "assert";
      __int16 v27 = 2081;
      int v28 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setIoHidResetCallback should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
    }
    abort_report_np();
  }
  *(void *)(a1 + 96) = a2;
  *(void *)(a1 + 104) = a3;
  return result;
}

CFTypeRef sub_1905D567C(uint64_t a1, const __CFString *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current != *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    uint64_t v7 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
    {
      int v9 = *(_DWORD *)(a1 + 16);
      int v8 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)int buf = 68290051;
      int v17 = 0;
      __int16 v18 = 2082;
      __int16 v19 = "";
      __int16 v20 = 1026;
      int v21 = v8;
      __int16 v22 = 1026;
      int v23 = v9;
      __int16 v24 = 2082;
      __int16 v25 = "assert";
      __int16 v26 = 2081;
      __int16 v27 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] copyProperty should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    int v10 = off_1EB3BE890;
    if (os_signpost_enabled((os_log_t)off_1EB3BE890))
    {
      int v12 = *(_DWORD *)(a1 + 16);
      int v11 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)int buf = 68290051;
      int v17 = 0;
      __int16 v18 = 2082;
      __int16 v19 = "";
      __int16 v20 = 1026;
      int v21 = v11;
      __int16 v22 = 1026;
      int v23 = v12;
      __int16 v24 = 2082;
      __int16 v25 = "assert";
      __int16 v26 = 2081;
      __int16 v27 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] copyProperty should be called from motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] copyProperty should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    int v13 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
    {
      int v15 = *(_DWORD *)(a1 + 16);
      int v14 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)int buf = 68290051;
      int v17 = 0;
      __int16 v18 = 2082;
      __int16 v19 = "";
      __int16 v20 = 1026;
      int v21 = v14;
      __int16 v22 = 1026;
      int v23 = v15;
      __int16 v24 = 2082;
      __int16 v25 = "assert";
      __int16 v26 = 2081;
      __int16 v27 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] copyProperty should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
    }
    abort_report_np();
  }
  if (!sub_1902DF564((void *)a1)) {
    return 0;
  }
  uint64_t v5 = *(__IOHIDServiceClient **)(a1 + 24);

  return IOHIDServiceClientCopyProperty(v5, a2);
}

uint64_t sub_1905D59A4(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current != *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    long long v4 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 68289539;
      int v12 = 0;
      __int16 v13 = 2082;
      int v14 = "";
      __int16 v15 = 2082;
      int v16 = "assert";
      __int16 v17 = 2081;
      __int16 v18 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    uint64_t v5 = off_1EB3BE890;
    if (os_signpost_enabled((os_log_t)off_1EB3BE890))
    {
      *(_DWORD *)int buf = 68289539;
      int v12 = 0;
      __int16 v13 = 2082;
      int v14 = "";
      __int16 v15 = 2082;
      int v16 = "assert";
      __int16 v17 = 2081;
      __int16 v18 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] should be running on motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    uint64_t v6 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 68289539;
      int v12 = 0;
      __int16 v13 = 2082;
      int v14 = "";
      __int16 v15 = 2082;
      int v16 = "assert";
      __int16 v17 = 2081;
      __int16 v18 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
LABEL_27:
    abort_report_np();
  }
  sub_1902D65C4(*(void *)(a1 + 32));
  if (!*(_DWORD *)(a1 + 144))
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    uint64_t v7 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 68289539;
      int v12 = 0;
      __int16 v13 = 2082;
      int v14 = "";
      __int16 v15 = 2082;
      int v16 = "assert";
      __int16 v17 = 2081;
      __int16 v18 = "eventType > 0";
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] must have event type set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    int v8 = off_1EB3BE890;
    if (os_signpost_enabled((os_log_t)off_1EB3BE890))
    {
      *(_DWORD *)int buf = 68289539;
      int v12 = 0;
      __int16 v13 = 2082;
      int v14 = "";
      __int16 v15 = 2082;
      int v16 = "assert";
      __int16 v17 = 2081;
      __int16 v18 = "eventType > 0";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] must have event type set", "{\"msg%{public}.0s\":\"[CLIoHidInterface] must have event type set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    int v9 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 68289539;
      int v12 = 0;
      __int16 v13 = 2082;
      int v14 = "";
      __int16 v15 = 2082;
      int v16 = "assert";
      __int16 v17 = 2081;
      __int16 v18 = "eventType > 0";
      _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] must have event type set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_27;
  }
  uint64_t v3 = *(void *)(a1 + 24);

  return MEMORY[0x1F40E8D08](v3);
}

void sub_1905D5E88(uint64_t a1, const char *a2, NSObject *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current != *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    __int16 v13 = off_1EB3BE890;
    p_cache = (void **)"";
    a2 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
    {
      int v15 = *(_DWORD *)(a1 + 16);
      int v14 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)int buf = 68290051;
      *(_DWORD *)int v23 = 0;
      *(_WORD *)&v23[4] = 2082;
      *(void *)&void v23[6] = "";
      __int16 v24 = 1026;
      int v25 = v14;
      __int16 v26 = 1026;
      *(_DWORD *)__int16 v27 = v15;
      *(_WORD *)&v27[4] = 2082;
      *(void *)&v27[6] = "assert";
      __int16 v28 = 2081;
      uint64_t v29 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setRegistryIDChangedCallback should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    int v16 = off_1EB3BE890;
    if (os_signpost_enabled((os_log_t)off_1EB3BE890))
    {
      int v18 = *(_DWORD *)(a1 + 16);
      int v17 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)int buf = 68290051;
      *(_DWORD *)int v23 = 0;
      *(_WORD *)&v23[4] = 2082;
      *(void *)&void v23[6] = "";
      __int16 v24 = 1026;
      int v25 = v17;
      __int16 v26 = 1026;
      *(_DWORD *)__int16 v27 = v18;
      *(_WORD *)&v27[4] = 2082;
      *(void *)&v27[6] = "assert";
      __int16 v28 = 2081;
      uint64_t v29 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] setRegistryIDChangedCallback should be called from motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] setRegistryIDChangedCallback should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    a3 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
    {
      int v20 = *(_DWORD *)(a1 + 16);
      int v19 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)int buf = 68290051;
      *(_DWORD *)int v23 = 0;
      *(_WORD *)&v23[4] = 2082;
      *(void *)&void v23[6] = "";
      __int16 v24 = 1026;
      int v25 = v19;
      __int16 v26 = 1026;
      *(_DWORD *)__int16 v27 = v20;
      *(_WORD *)&v27[4] = 2082;
      *(void *)&v27[6] = "assert";
      __int16 v28 = 2081;
      uint64_t v29 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, a3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setRegistryIDChangedCallback should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
    }
    abort_report_np();
LABEL_23:
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    goto LABEL_5;
  }
  if (*(const char **)(a1 + 112) == a2 && *(NSObject **)(a1 + 120) == a3) {
    return;
  }
  p_cache = CMDeviceOrientationManager.cache;
  if (qword_1EB3BE898 != -1) {
    goto LABEL_23;
  }
LABEL_5:
  int v8 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
  {
    int v9 = "Opening";
    if (!*(void *)(a1 + 112)) {
      int v9 = "Closing";
    }
    int v11 = *(_DWORD *)(a1 + 16);
    int v10 = *(_DWORD *)(a1 + 20);
    uint64_t v12 = *(void *)(a1 + 24);
    *(_DWORD *)int buf = 136446979;
    *(void *)int v23 = v9;
    *(_WORD *)&v23[8] = 1026;
    *(_DWORD *)&v23[10] = v10;
    __int16 v24 = 1026;
    int v25 = v11;
    __int16 v26 = 2049;
    *(void *)__int16 v27 = v12;
    _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_INFO, "%{public}s hid driver interface for usage pair {%{public}d, %{public}d}, hidServiceRef %{private}p", buf, 0x22u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (p_cache[275] != (void *)-1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    int v21 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::Device::setRegistryIDChangedCallback(OnRegistryIDChanged, void *)", "CoreLocation: %s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
  *(void *)(a1 + 112) = a2;
  *(void *)(a1 + 12dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = a3;
}

uint64_t sub_1905D634C(_DWORD *a1, int a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  uint64_t result = sub_1902D6BD0();
  if (Current != *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    uint64_t v6 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
    {
      int v8 = a1[4];
      int v7 = a1[5];
      *(_DWORD *)int buf = 68290051;
      int v16 = 0;
      __int16 v17 = 2082;
      int v18 = "";
      __int16 v19 = 1026;
      int v20 = v7;
      __int16 v21 = 1026;
      int v22 = v8;
      __int16 v23 = 2082;
      __int16 v24 = "assert";
      __int16 v25 = 2081;
      __int16 v26 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setEventType should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    int v9 = off_1EB3BE890;
    if (os_signpost_enabled((os_log_t)off_1EB3BE890))
    {
      int v11 = a1[4];
      int v10 = a1[5];
      *(_DWORD *)int buf = 68290051;
      int v16 = 0;
      __int16 v17 = 2082;
      int v18 = "";
      __int16 v19 = 1026;
      int v20 = v10;
      __int16 v21 = 1026;
      int v22 = v11;
      __int16 v23 = 2082;
      __int16 v24 = "assert";
      __int16 v25 = 2081;
      __int16 v26 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] setEventType should be called from motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] setEventType should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    uint64_t v12 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
    {
      int v14 = a1[4];
      int v13 = a1[5];
      *(_DWORD *)int buf = 68290051;
      int v16 = 0;
      __int16 v17 = 2082;
      int v18 = "";
      __int16 v19 = 1026;
      int v20 = v13;
      __int16 v21 = 1026;
      int v22 = v14;
      __int16 v23 = 2082;
      __int16 v24 = "assert";
      __int16 v25 = 2081;
      __int16 v26 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setEventType should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
    }
    abort_report_np();
  }
  a1[36] = a2;
  return result;
}

void sub_1905D661C(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current != *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    __int16 v19 = off_1EB3BE890;
    p_cache = (void **)"assert";
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 68289539;
      *(_DWORD *)__int16 v25 = 0;
      *(_WORD *)&v25[4] = 2082;
      *(void *)&void v25[6] = "";
      *(_WORD *)&v25[14] = 2082;
      *(void *)&v25[16] = "assert";
      __int16 v26 = 2081;
      uint64_t v27 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v19, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setMatchingProperties should be called from motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    int v20 = off_1EB3BE890;
    if (os_signpost_enabled((os_log_t)off_1EB3BE890))
    {
      *(_DWORD *)int buf = 68289539;
      *(_DWORD *)__int16 v25 = 0;
      *(_WORD *)&v25[4] = 2082;
      *(void *)&void v25[6] = "";
      *(_WORD *)&v25[14] = 2082;
      *(void *)&v25[16] = "assert";
      __int16 v26 = 2081;
      uint64_t v27 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] setMatchingProperties should be called from motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] setMatchingProperties should be called from motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    a1 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 68289539;
      *(_DWORD *)__int16 v25 = 0;
      *(_WORD *)&v25[4] = 2082;
      *(void *)&void v25[6] = "";
      *(_WORD *)&v25[14] = 2082;
      *(void *)&v25[16] = "assert";
      __int16 v26 = 2081;
      uint64_t v27 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, (os_log_t)a1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setMatchingProperties should be called from motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    goto LABEL_43;
  }
  if (objc_msgSend_isEqualToDictionary_(a2, v5, *((void *)a1 + 19)))
  {
    p_cache = CMDeviceOrientationManager.cache;
    if (qword_1EB3BE898 == -1)
    {
LABEL_4:
      int v7 = off_1EB3BE890;
      if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *((void *)a1 + 19);
        *(_DWORD *)int buf = 138477827;
        *(void *)__int16 v25 = v8;
        _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] setMatchingProperties - Early return for identical properties %{private}@", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (p_cache[275] != (void *)-1) {
          dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
        }
        int v9 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::Device::setMatchingProperties(NSDictionary<NSString *,id> *)", "CoreLocation: %s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      return;
    }
LABEL_43:
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    goto LABEL_4;
  }
  id v10 = a2;

  *((void *)a1 + 19) = a2;
  int v11 = (__IOHIDServiceClient *)*((void *)a1 + 3);
  if (v11 && (sub_1902B4578(v11, a2) & 1) == 0)
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    uint64_t v12 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *((void *)a1 + 3);
      uint64_t v14 = *((void *)a1 + 19);
      *(_DWORD *)int buf = 134283779;
      *(void *)__int16 v25 = v13;
      *(_WORD *)&v25[8] = 2114;
      *(void *)&v25[10] = v14;
      _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] setMatchingProperties - Previously matched service ref %{private}p does not match new properties %{public}@. Clearing and refreshing.", buf, 0x16u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
      __int16 v21 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::Device::setMatchingProperties(NSDictionary<NSString *,id> *)", "CoreLocation: %s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    if ((sub_1902D79BC(*((__IOHIDServiceClient **)a1 + 3), @"ReportInterval", &unk_1EE001E28) & 1) == 0)
    {
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
      int v16 = off_1EB3BE890;
      if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl(&dword_1902AF000, v16, OS_LOG_TYPE_ERROR, "[CLIoHidInterface] setMatchingProperties - Failed to stop streaming from the old service", buf, 2u);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE898 != -1) {
          dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
        }
        __int16 v23 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "void CLIoHidInterface::Device::setMatchingProperties(NSDictionary<NSString *,id> *)", "CoreLocation: %s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
    }
    sub_1902CC21C((uint64_t)a1, v15);
    sub_1902CC320(*((const char **)a1 + 4), 0);
    if (*((void *)a1 + 3))
    {
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
      __int16 v17 = off_1EB3BE890;
      if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = *((void *)a1 + 3);
        *(_DWORD *)int buf = 134283521;
        *(void *)__int16 v25 = v18;
        _os_log_impl(&dword_1902AF000, v17, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] setMatchingProperties - successfully switch to new service %{private}p", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE898 != -1) {
          dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
        }
        int v22 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::Device::setMatchingProperties(NSDictionary<NSString *,id> *)", "CoreLocation: %s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      sub_1902D6C14(*((void *)a1 + 4));
    }
  }
}

uint64_t sub_1905D6E44(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 64);
  if (v2) {
    return v2(*(void *)(v1 + 72));
  }
  return result;
}

void sub_1905D6E5C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1905D6EB0((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1905D6EB0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    long long v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  a1[1] = v2;
}

void sub_1905D7C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a13) {
    sub_1902D8B58(a13);
  }
  if (a22) {
    sub_1902D8B58(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905D8084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_1902D8B58(v20);
  _Unwind_Resume(a1);
}

void sub_1905D8388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1902D8B58(a15);
  }
  _Unwind_Resume(exception_object);
}

os_log_t sub_1905D83CC()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Kappa");
  qword_1E929D900 = (uint64_t)result;
  return result;
}

os_log_t sub_1905D83FC()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Fall");
  qword_1E929D8F0 = (uint64_t)result;
  return result;
}

os_log_t sub_1905D842C()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Igneous");
  qword_1E929DA20 = (uint64_t)result;
  return result;
}

uint64_t sub_1905D874C()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28C10]);
  qword_1EB3BF7A0 = (uint64_t)v0;

  return MEMORY[0x1F4181798](v0, sel_setDateFormat_, @"yyyy-MM-dd HH:mm:ss Z");
}

uint64_t sub_1905D878C()
{
  if (qword_1E929E980 != -1) {
    dispatch_once(&qword_1E929E980, &unk_1EDFD2C00);
  }
  return qword_1E929E978;
}

void sub_1905D87D0()
{
}

void sub_1905D889C(_Unwind_Exception *a1)
{
  sub_1905DF484(v5);
  sub_1905DF484(v4);
  sub_1905DF484(v6);
  sub_1905DF484(v3);
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  MEMORY[0x192FCC980](v1, 0x10B2C400E532B5FLL);
  _Unwind_Resume(a1);
}

void sub_1905D88F8(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];

  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  if (*(void *)(a1 + 8))
  {
    BTAccessoryManagerDeregisterCustomMessageClient();
    BTAccessoryManagerRemoveCallbacks();
    *(void *)(a1 + 8) = 0;
  }
  *(void *)a1 = 0;
  int v2 = BTSessionAttachWithQueue();
  if (v2)
  {
    int v3 = v2;
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    uint64_t v4 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 67240192;
      int v7 = v3;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] Failed to register BT session callback. Error: %{public}d", buf, 8u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::attachBTSession()", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

void sub_1905D8B0C(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    *(void *)__str = 0;
    uint64_t v9 = 0;
    __int16 v10 = 0;
    snprintf(__str, 0x12uLL, "%02x:%02x:%02x:%02x:%02x:%02x", a2, BYTE1(a2), BYTE2(a2), BYTE3(a2), BYTE4(a2), BYTE5(a2));
    MEMORY[0x192FCC770](a1 + 40, __str);
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    int v3 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = a1 + 40;
      if (*(char *)(a1 + 63) < 0) {
        uint64_t v4 = *(void *)(a1 + 40);
      }
      *(_DWORD *)int buf = 136380675;
      uint64_t v12 = v4;
      _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] BT address of the current device is %{private}s", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::setBTAddress(uint64_t)", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    sub_1905D8E88(a1);
  }
  else
  {
    MEMORY[0x192FCC770](a1 + 40, "");
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    uint64_t v5 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] clear the BT address", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
      }
      *(_WORD *)__str = 0;
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::setBTAddress(uint64_t)", "CoreLocation: %s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }

    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
  }
}

void sub_1905D8E88(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current != *(CFRunLoopRef *)qword_1EB3BF828)
  {
    uint64_t v3 = sub_1902D6BD0();
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = sub_1905D9654;
    _DWORD v24[3] = &unk_1E568CF68;
    v24[4] = a1;
    sub_1902CDE98(v3, (uint64_t)v24);
    return;
  }
  if (!*(void *)a1)
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    uint64_t v6 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] refresh device handle - invalid BT session", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
      }
      LOWORD(v25) = 0;
      goto LABEL_39;
    }
    return;
  }
  uint64_t v4 = (void *)(a1 + 40);
  int v5 = *(char *)(a1 + 63);
  if (v5 < 0)
  {
    if (*(void *)(a1 + 48) == 17) {
      goto LABEL_17;
    }
  }
  else if (v5 == 17)
  {
LABEL_17:
    int v7 = BTDeviceAddressFromString();
    if (v7)
    {
      int v8 = v7;
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
      }
      uint64_t v9 = qword_1EB3BE830;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
      {
        __int16 v10 = (void *)(a1 + 40);
        if (*(char *)(a1 + 63) < 0) {
          __int16 v10 = (void *)*v4;
        }
        *(_DWORD *)int buf = 136380931;
        uint64_t v30 = v10;
        __int16 v31 = 1026;
        int v32 = v8;
        _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] refresh device handle - Failed to convert %{private}s into a valid BT address. Error: %{public}d", buf, 0x12u);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
        }
        if (*(char *)(a1 + 63) < 0) {
          uint64_t v4 = (void *)*v4;
        }
        int v25 = 136380931;
        __int16 v26 = v4;
        __int16 v27 = 1026;
        int v28 = v8;
        int v22 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::refreshBTDevice()", "CoreLocation: %s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      if (v8 == 1) {
        sub_1905D88F8(a1);
      }
      return;
    }
    int v14 = BTDeviceFromAddress();
    if (v14)
    {
      int v15 = v14;
      *(void *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
      }
      int v16 = qword_1EB3BE830;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = a1 + 40;
        if (*(char *)(a1 + 63) < 0) {
          uint64_t v17 = *v4;
        }
        *(_DWORD *)int buf = 136380931;
        uint64_t v30 = (void *)v17;
        __int16 v31 = 1026;
        int v32 = v15;
        _os_log_impl(&dword_1902AF000, v16, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] refresh device handle - Failed to get the device handle with BT address %{private}s. Error: %{public}d", buf, 0x12u);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
        }
        if (*(char *)(a1 + 63) < 0) {
          uint64_t v4 = (void *)*v4;
        }
        int v25 = 136380931;
        __int16 v26 = v4;
        __int16 v27 = 1026;
        int v28 = v15;
LABEL_39:
        uint64_t v13 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::refreshBTDevice()", "CoreLocation: %s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
        return;
      }
    }
    else
    {
      int DeviceId = BTDeviceGetDeviceId();
      if (DeviceId)
      {
        int v19 = DeviceId;
        *(_DWORD *)(a1 + 24) = 0;
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
        }
        int v20 = qword_1EB3BE830;
        if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 67240192;
          LODWORD(v3dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = v19;
          _os_log_impl(&dword_1902AF000, v20, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] refresh device handle - Failed to get the product ID. Error: %{public}d", buf, 8u);
        }
        if (sub_1902D8400(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE838 != -1) {
            dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
          }
          int v25 = 67240192;
          LODWORD(v26) = v19;
          __int16 v23 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::refreshBTDevice()", "CoreLocation: %s\n", v23);
          if (v23 != (char *)buf) {
            free(v23);
          }
        }
      }
      sub_1905D965C(a1);
      for (uint64_t i = *(uint64_t ***)(a1 + 160); i; uint64_t i = (uint64_t **)*i)
        ((void (*)(void, uint64_t *))i[3])(0, i[2]);
    }
    return;
  }
  if (qword_1EB3BE838 != -1) {
    dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
  }
  int v11 = qword_1EB3BE830;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
  {
    uint64_t v12 = a1 + 40;
    if (*(char *)(a1 + 63) < 0) {
      uint64_t v12 = *v4;
    }
    *(_DWORD *)int buf = 136380675;
    uint64_t v30 = (void *)v12;
    _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] refresh device handle - invalid BT address %{private}s", buf, 0xCu);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    if (*(char *)(a1 + 63) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    int v25 = 136380675;
    __int16 v26 = v4;
    goto LABEL_39;
  }
}

uint64_t sub_1905D9654(uint64_t a1)
{
  return sub_1905D8E88(*(void *)(a1 + 32));
}

void sub_1905D965C(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current != *(CFRunLoopRef *)qword_1EB3BF828)
  {
    uint64_t v3 = sub_1902D6BD0();
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    v26[2] = sub_1905DAB48;
    v26[3] = &unk_1E568CF68;
    v26[4] = a1;
    sub_1902CDE98(v3, (uint64_t)v26);
    return;
  }
  if (*(void *)(a1 + 16))
  {
    if (*(char *)(a1 + 63) < 0) {
      uint64_t v4 = *(void *)(a1 + 48);
    }
    else {
      uint64_t v4 = *(unsigned __int8 *)(a1 + 63);
    }
    if (v4 == 17)
    {
      uint64_t v6 = *(void *)(a1 + 88);
      uint64_t v7 = *(void *)(a1 + 128);
      int v8 = BTAccessoryManagerRemoteTimeSyncEnable();
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
      }
      uint64_t v9 = qword_1EB3BE830;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v10 = "disable";
        if (v6) {
          __int16 v10 = "enable";
        }
        *(_DWORD *)int buf = 136446722;
        int v34 = v10;
        if (v8) {
          int v11 = "failed";
        }
        else {
          int v11 = "succeeded";
        }
        __int16 v35 = 2082;
        uint64_t v36 = v11;
        __int16 v37 = 1026;
        int v38 = v8;
        _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] %{public}s high precision TimeSync %{public}s. Status: %{public}d", buf, 0x1Cu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
        }
        int v20 = "disable";
        if (v6) {
          int v20 = "enable";
        }
        int v27 = 136446722;
        int v28 = v20;
        if (v8) {
          __int16 v21 = "failed";
        }
        else {
          __int16 v21 = "succeeded";
        }
        __int16 v29 = 2082;
        uint64_t v30 = v21;
        __int16 v31 = 1026;
        int v32 = v8;
        int v22 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::updateTimeSync()", "CoreLocation: %s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      if (!v6)
      {
        int v12 = BTAccessoryManagerSensorStreamTimeSyncEnable();
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
        }
        uint64_t v13 = qword_1EB3BE830;
        if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
        {
          int v14 = "disable";
          if (v7) {
            int v14 = "enable";
          }
          *(_DWORD *)int buf = 136446722;
          int v34 = v14;
          if (v12) {
            int v15 = "failed";
          }
          else {
            int v15 = "succeeded";
          }
          __int16 v35 = 2082;
          uint64_t v36 = v15;
          __int16 v37 = 1026;
          int v38 = v12;
          _os_log_impl(&dword_1902AF000, v13, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] %{public}s low precision TimeSync %{public}s. Status: %{public}d", buf, 0x1Cu);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE838 != -1) {
            dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
          }
          __int16 v23 = "disable";
          if (v7) {
            __int16 v23 = "enable";
          }
          int v27 = 136446722;
          int v28 = v23;
          if (v12) {
            __int16 v24 = "failed";
          }
          else {
            __int16 v24 = "succeeded";
          }
          __int16 v29 = 2082;
          uint64_t v30 = v24;
          __int16 v31 = 1026;
          int v32 = v12;
          int v25 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::updateTimeSync()", "CoreLocation: %s\n", v25);
          if (v25 != (char *)buf) {
            free(v25);
          }
        }
        if (!v7)
        {

          *(void *)(a1 + 32) = 0;
        }
      }
      return;
    }
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    int v16 = (const char *)(a1 + 40);
    uint64_t v17 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = (const char *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        uint64_t v18 = *(const char **)v16;
      }
      *(_DWORD *)int buf = 136380675;
      int v34 = v18;
      _os_log_impl(&dword_1902AF000, v17, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] update TimeSync failed due to invalid BT address %{private}s", buf, 0xCu);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
      }
      if (*(char *)(a1 + 63) < 0) {
        int v16 = *(const char **)v16;
      }
      int v27 = 136380675;
      int v28 = v16;
LABEL_52:
      int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::updateTimeSync()", "CoreLocation: %s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
  }
  else
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    int v5 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] update TimeSync failed due to invalid BT device", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
      }
      LOWORD(v27) = 0;
      goto LABEL_52;
    }
  }
}

uint64_t sub_1905D9D8C(void *a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!*a1) {
    return 1;
  }
  *(void *)__str = 0;
  uint64_t v12 = 0;
  __int16 v13 = 0;
  snprintf(__str, 0x12uLL, "%02x:%02x:%02x:%02x:%02x:%02x", a2, BYTE1(a2), BYTE2(a2), BYTE3(a2), BYTE4(a2), BYTE5(a2));
  if (BTDeviceAddressFromString())
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    int v2 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136380675;
      __int16 v10 = __str;
      _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] isSpatialAudioSupported - Failed to convert %{private}s into a valid BT address", buf, 0xCu);
    }
    if (!sub_1902D8400(115, 0)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE838 == -1) {
      goto LABEL_28;
    }
LABEL_30:
    dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
LABEL_28:
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "BOOL CLAudioAccessoryInterface::isSpatialAudioSupported(uint64_t) const", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
    return 1;
  }
  if (BTDeviceFromAddress())
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    uint64_t v3 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136380675;
      __int16 v10 = __str;
      _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] isSpatialAudioSupported - Failed to get the device handle with BT address %{private}s", buf, 0xCu);
    }
    if (!sub_1902D8400(115, 0)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE838 == -1) {
      goto LABEL_28;
    }
    goto LABEL_30;
  }
  BTAccessoryManagerGetSpatialAudioPlatformSupport();
  uint64_t v4 = 0;
  if (qword_1EB3BE838 != -1) {
    dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
  }
  uint64_t v6 = qword_1EB3BE830;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 136380675;
    __int16 v10 = __str;
    _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] isSpatialAudioSupported - not supported for device %{private}s", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAudioAccessoryInterface::isSpatialAudioSupported(uint64_t) const", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return v4;
}

void sub_1905DA228(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v11 = a2;
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current == *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (a3)
    {
      sub_1905DF4D0((void *)(a1 + 104), &v11);
      int v8 = (float *)(a1 + 64);
    }
    else
    {
      sub_1905DF4D0((void *)(a1 + 64), &v11);
      int v8 = (float *)(a1 + 104);
    }
    sub_1905DF76C(v8, &v11, &v11);
    sub_1905D965C(a1);
  }
  else
  {
    uint64_t v7 = sub_1902D6BD0();
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    void v9[2] = sub_1905DA31C;
    float v9[3] = &unk_1E568FEC8;
    v9[4] = a1;
    void v9[5] = a2;
    char v10 = a3;
    sub_1902CDE98(v7, (uint64_t)v9);
  }
}

uint64_t sub_1905DA31C(uint64_t a1)
{
  return sub_1905DA228(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

void sub_1905DA32C(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current == *(CFRunLoopRef *)qword_1EB3BF828)
  {
    sub_1905DF4D0((void *)(a1 + 64), &v7);
    sub_1905DF4D0((void *)(a1 + 104), &v7);
    sub_1905D965C(a1);
  }
  else
  {
    uint64_t v5 = sub_1902D6BD0();
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = sub_1905DA3FC;
    v6[3] = &unk_1E568F5A8;
    void v6[4] = a1;
    void v6[5] = a2;
    sub_1902CDE98(v5, (uint64_t)v6);
  }
}

uint64_t sub_1905DA3FC(uint64_t a1)
{
  return sub_1905DA32C(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_1905DA408(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
}

void sub_1905DA41C(uint64_t a1, uint64_t a2, int a3, unsigned char *a4, unint64_t a5, uint64_t a6)
{
  if (a3 == 1024) {
    sub_1905DC5F0(a6, a2, a4, a5);
  }
}

void sub_1905DA438(uint64_t a1, int a2, int a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  dispatch_assert_queue_V2(MEMORY[0x1E4F14428]);
  if ((a2 & 0xFFFFFFFD) != 0) {
    return;
  }
  if (a2 == 2 || !a2 && a3)
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    int v8 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = "attaching BT session failed";
      if (a3 == 2) {
        uint64_t v9 = "BT session terminated";
      }
      *(_DWORD *)int buf = 136446210;
      int v25 = v9;
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] %{public}s. Re-attaching......", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
      }
      __int16 v21 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::btSessionEventHandler(BTSession, BTSessionEvent, BTResult)", "CoreLocation: %s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    sub_1905D88F8((uint64_t)a4);
    return;
  }
  *a4 = a1;
  if (qword_1EB3BE838 != -1) {
    dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
  }
  char v10 = qword_1EB3BE830;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] BT session attached", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    int v22 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::btSessionEventHandler(BTSession, BTSessionEvent, BTResult)", "CoreLocation: %s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  int Default = BTAccessoryManagerGetDefault();
  if (Default)
  {
    int v12 = Default;
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    __int16 v13 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 67240192;
      LODWORD(v25) = v12;
      _os_log_impl(&dword_1902AF000, v13, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] Accessory Mananger unavailable. Status %{public}d", buf, 8u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 == -1)
      {
LABEL_40:
        int v20 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::btSessionEventHandler(BTSession, BTSessionEvent, BTResult)", "CoreLocation: %s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
        return;
      }
LABEL_55:
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
      goto LABEL_40;
    }
  }
  else
  {
    sub_1905D965C((uint64_t)a4);
    int v14 = BTAccessoryManagerAddCallbacks();
    if (v14)
    {
      int v15 = v14;
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
      }
      int v16 = qword_1EB3BE830;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 67240192;
        LODWORD(v25) = v15;
        _os_log_impl(&dword_1902AF000, v16, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] Failed to register BT accessory callback.  Status %{public}d", buf, 8u);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
        }
        __int16 v23 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::btSessionEventHandler(BTSession, BTSessionEvent, BTResult)", "CoreLocation: %s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
    }
    int v17 = BTAccessoryManagerRegisterCustomMessageClient();
    if (!v17)
    {
      sub_1905D8E88((uint64_t)a4);
      return;
    }
    int v18 = v17;
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    int v19 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 67240192;
      LODWORD(v25) = v18;
      _os_log_impl(&dword_1902AF000, v19, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] Failed to register for custom callback. BTResult: %{public}d", buf, 8u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 == -1) {
        goto LABEL_40;
      }
      goto LABEL_55;
    }
  }
}

uint64_t sub_1905DAB48(uint64_t a1)
{
  return sub_1905D965C(*(void *)(a1 + 32));
}

uint64_t sub_1905DAB50(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void **)(a1 + 32);
  if (v4 && objc_msgSend_lockState(v4, a2, a3) == 2)
  {
    *(_DWORD *)int buf = 0;
    return objc_msgSend_convertFromDomainToMachAbsoluteTime_withFlags_(*(void **)(a1 + 32), v6, (uint64_t)a2, buf);
  }
  uint64_t v8 = mach_continuous_time();
  double v9 = sub_1902D8D34(v8);
  if (v9 - *(double *)&qword_1E929E970 <= 1.0) {
    return 0;
  }
  if (!*(void *)(a1 + 32))
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    uint64_t v11 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] TimeSync error! No TimeSync clock", buf, 2u);
    }
    if (!sub_1902D8400(115, 0)) {
      goto LABEL_19;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE838 == -1) {
      goto LABEL_21;
    }
    goto LABEL_23;
  }
  if (qword_1EB3BE838 != -1) {
    dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
  }
  char v10 = qword_1EB3BE830;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] TimeSync error! Clock not locked", buf, 2u);
  }
  if (!sub_1902D8400(115, 0)) {
    goto LABEL_19;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1EB3BE838 != -1) {
LABEL_23:
  }
    dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
LABEL_21:
  int v12 = (char *)_os_log_send_and_compose_impl();
  sub_1902D398C("Generic", 1, 0, 0, "uint64_t CLAudioAccessoryInterface::convertTimeSyncTimestamp(uint64_t) const", "CoreLocation: %s\n", v12);
  if (v12 != (char *)buf) {
    free(v12);
  }
LABEL_19:
  uint64_t result = 0;
  qword_1E929E970 = *(void *)&v9;
  return result;
}

void sub_1905DAE20(uint64_t a1, int *a2, int *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  *a3 = 3;
  *a2 = 3;
  if (*(void *)(a1 + 16))
  {
    if (*(char *)(a1 + 63) < 0) {
      uint64_t v6 = *(void *)(a1 + 48);
    }
    else {
      uint64_t v6 = *(unsigned __int8 *)(a1 + 63);
    }
    if (v6 == 17)
    {
      int v8 = BTAccessoryManagerGetInEarDetectionEnable();
      if (v8)
      {
        int v9 = v8;
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
        }
        char v10 = qword_1EB3BE830;
        if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 67240192;
          LODWORD(v26) = v9;
          _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] in ear status - failed to get IED setting. Error: %{public}d", buf, 8u);
        }
        if (sub_1902D8400(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE838 == -1)
          {
LABEL_52:
            int v22 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::getInEarStatus(BTAccessoryInEarStatus &, BTAccessoryInEarStatus &) const", "CoreLocation: %s\n", v22);
            if (v22 != (char *)buf) {
              free(v22);
            }
            return;
          }
LABEL_62:
          dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
          goto LABEL_52;
        }
      }
      else
      {
        int v13 = BTAccessoryManagerGetInEarStatus();
        if (v13)
        {
          int v14 = v13;
          if (qword_1EB3BE838 != -1) {
            dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
          }
          int v15 = qword_1EB3BE830;
          if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 67240192;
            LODWORD(v26) = v14;
            _os_log_impl(&dword_1902AF000, v15, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] in ear status - failed to get inear status. Error: %{public}d", buf, 8u);
          }
          if (sub_1902D8400(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EB3BE838 != -1) {
              dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
            }
            __int16 v23 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::getInEarStatus(BTAccessoryInEarStatus &, BTAccessoryInEarStatus &) const", "CoreLocation: %s\n", v23);
            if (v23 != (char *)buf) {
              free(v23);
            }
          }
          *a3 = 3;
          *a2 = 3;
        }
        else
        {
          if (qword_1EB3BE838 != -1) {
            dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
          }
          int v16 = qword_1EB3BE830;
          if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v17 = *a2;
            if (v17 > 3) {
              int v18 = @"?";
            }
            else {
              int v18 = off_1E56904F8[v17];
            }
            uint64_t v19 = *a3;
            if (v19 > 3) {
              int v20 = @"?";
            }
            else {
              int v20 = off_1E56904F8[v19];
            }
            *(_DWORD *)int buf = 138543618;
            uint64_t v26 = v18;
            __int16 v27 = 2114;
            int v28 = v20;
            _os_log_impl(&dword_1902AF000, v16, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] in ear status - Primary:%{public}@, Secondary:%{public}@", buf, 0x16u);
          }
          if (sub_1902D8400(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EB3BE838 != -1) {
              dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
            }
            __int16 v24 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::getInEarStatus(BTAccessoryInEarStatus &, BTAccessoryInEarStatus &) const", "CoreLocation: %s\n", v24);
            if (v24 != (char *)buf) {
              free(v24);
            }
          }
          if (!*a2)
          {
            unsigned int v21 = *(_DWORD *)(a1 + 24) - 8202;
            if (v21 <= 0x15 && ((1 << v21) & 0x202001) != 0) {
              *a3 = 0;
            }
          }
        }
      }
    }
    else
    {
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
      }
      uint64_t v11 = qword_1EB3BE830;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
      {
        int v12 = (__CFString *)(a1 + 40);
        if (*(char *)(a1 + 63) < 0) {
          int v12 = *(__CFString **)(a1 + 40);
        }
        *(_DWORD *)int buf = 136380675;
        uint64_t v26 = v12;
        _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] in ear status - invalid BT address %{private}s", buf, 0xCu);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE838 == -1) {
          goto LABEL_52;
        }
        goto LABEL_62;
      }
    }
  }
  else
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    uint64_t v7 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] in ear status - invalid BT device", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 == -1) {
        goto LABEL_52;
      }
      goto LABEL_62;
    }
  }
}

BOOL sub_1905DB6D8()
{
  if (qword_1E929E980 != -1) {
    dispatch_once(&qword_1E929E980, &unk_1EDFD2C00);
  }
  int v2 = 0;
  int v1 = 0;
  sub_1905DAE20(qword_1E929E978, &v2, &v1);
  return v2 == 0;
}

uint64_t sub_1905DB744(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int AdaptiveLatencyJitterBufferLevel = BTAccessoryManagerGetAdaptiveLatencyJitterBufferLevel();
  if (AdaptiveLatencyJitterBufferLevel)
  {
    int v3 = AdaptiveLatencyJitterBufferLevel;
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    uint64_t v4 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 67240192;
      int v9 = v3;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] Failed to get jitter buffer level. Error: %{public}d", buf, 8u);
    }
    if (!sub_1902D8400(115, 0)) {
      return 0xFFFFLL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    uint64_t v5 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "uint16_t CLAudioAccessoryInterface::getAdaptiveLatencyJitterBufferLevel() const", "CoreLocation: %s\n");
LABEL_21:
    if (v5 != buf) {
      free(v5);
    }
    return 0xFFFFLL;
  }
  if (*(void *)(a1 + 16) != 4294901761)
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    uint64_t v6 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] Received jitter buffer level for unexpected BT device", buf, 2u);
    }
    if (!sub_1902D8400(115, 2)) {
      return 0xFFFFLL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    uint64_t v5 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "uint16_t CLAudioAccessoryInterface::getAdaptiveLatencyJitterBufferLevel() const", "CoreLocation: %s\n");
    goto LABEL_21;
  }
  return 0xFFFFLL;
}

void *sub_1905DBA50(uint64_t a1, uint64_t (*a2)(void, uint64_t), uint64_t a3)
{
  uint64_t v6 = a3;
  uint64_t v7 = &v6;
  uint64_t result = sub_1905DFB9C((float *)(a1 + 144), &v6, (uint64_t)&unk_1906099C2, &v7);
  result[3] = a2;
  if (*(void *)(a1 + 16)) {
    return (void *)a2(0, v6);
  }
  return result;
}

void sub_1905DBABC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current != *(CFRunLoopRef *)qword_1EB3BF828)
  {
    uint64_t v9 = sub_1902D6BD0();
    v37[0] = MEMORY[0x1E4F143A8];
    v37[1] = 3221225472;
    void v37[2] = sub_1905DC5E0;
    v37[3] = &unk_1E568E3E0;
    v37[4] = a1;
    v37[5] = a2;
    int v38 = a3;
    int v39 = a4;
    sub_1902CDE98(v9, (uint64_t)v37);
    return;
  }
  switch(a3)
  {
    case 5:
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
      }
      uint64_t v10 = qword_1EB3BE830;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 134283521;
        uint64_t v47 = a2;
        _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] BT_ACCESSORY_SETTINGS_CHANGED device:%{private}p", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
        }
        int v40 = 134283521;
        uint64_t v41 = a2;
        uint64_t v33 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::accessoryEventHandler(BTDevice, BTAccessoryEvent, BTAccessoryState)", "CoreLocation: %s\n", v33);
        if (v33 != (char *)buf) {
          free(v33);
        }
      }
      for (uint64_t i = *(uint64_t ***)(a1 + 160); i; uint64_t i = (uint64_t **)*i)
        ((void (*)(void, uint64_t *))i[3])(0, i[2]);
      return;
    case 6:
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
      }
      int v18 = qword_1EB3BE830;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 134283521;
        uint64_t v47 = a2;
        _os_log_impl(&dword_1902AF000, v18, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] BT_ACCESSORY_IN_EAR_STATUS_CHANGED device:%{private}p", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
        }
        int v40 = 134283521;
        uint64_t v41 = a2;
        __int16 v35 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::accessoryEventHandler(BTDevice, BTAccessoryEvent, BTAccessoryState)", "CoreLocation: %s\n", v35);
        if (v35 != (char *)buf) {
          free(v35);
        }
      }
      for (uint64_t j = *(uint64_t ***)(a1 + 160); j; uint64_t j = (uint64_t **)*j)
        ((void (*)(void, uint64_t *))j[3])(0, j[2]);
      return;
    case 7:
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
      }
      int v12 = qword_1EB3BE830;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 134283521;
        uint64_t v47 = a2;
        _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] TIMESYNC_AVAILABLE device:%{private}p", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
        }
        int v40 = 134283521;
        uint64_t v41 = a2;
        int v34 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::accessoryEventHandler(BTDevice, BTAccessoryEvent, BTAccessoryState)", "CoreLocation: %s\n", v34);
        if (v34 != (char *)buf) {
          free(v34);
        }
      }
      if (objc_msgSend_sharedClockManager(MEMORY[0x1E4FAF2E0], v13, v14))
      {
        int TimeSyncId = BTAccessoryManagerGetTimeSyncId();
        if (TimeSyncId)
        {
          int v16 = TimeSyncId;
          if (qword_1EB3BE838 != -1) {
            dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
          }
          uint64_t v17 = qword_1EB3BE830;
          if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 67240192;
            LODWORD(v47) = v16;
            _os_log_impl(&dword_1902AF000, v17, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] Get TimeSync ID failed result:%{public}d", buf, 8u);
          }
          if (sub_1902D8400(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EB3BE838 != -1) {
              dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
            }
            int v40 = 67240192;
            LODWORD(v41) = v16;
LABEL_51:
            __int16 v23 = (uint8_t *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::accessoryEventHandler(BTDevice, BTAccessoryEvent, BTAccessoryState)", "CoreLocation: %s\n");
LABEL_52:
            if (v23 != buf) {
              free(v23);
            }
          }
        }
        else
        {

          uint64_t v26 = objc_msgSend_sharedClockManager(MEMORY[0x1E4FAF2E0], v24, v25);
          id v28 = (id)objc_msgSend_clockWithClockIdentifier_(v26, v27, 0);
          *(void *)(a1 + 32) = v28;
          if (v28)
          {
            if (qword_1EB3BE838 != -1) {
              dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
            }
            uint64_t v29 = qword_1EB3BE830;
            if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v30 = *(void *)(a1 + 32);
              *(_DWORD *)int buf = 134284033;
              uint64_t v47 = a2;
              __int16 v48 = 2049;
              uint64_t v49 = 0;
              __int16 v50 = 2049;
              uint64_t v51 = v30;
              _os_log_impl(&dword_1902AF000, v29, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] Got TimeSync ID device:%{private}p tsID:0x%{private}llx clock:%{private}p", buf, 0x20u);
            }
            if (sub_1902D8400(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EB3BE838 != -1) {
                dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
              }
              uint64_t v31 = *(void *)(a1 + 32);
              int v40 = 134284033;
              uint64_t v41 = a2;
              __int16 v42 = 2049;
              uint64_t v43 = 0;
              __int16 v44 = 2049;
              uint64_t v45 = v31;
              __int16 v23 = (uint8_t *)_os_log_send_and_compose_impl();
              sub_1902D398C("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::accessoryEventHandler(BTDevice, BTAccessoryEvent, BTAccessoryState)", "CoreLocation: %s\n");
              goto LABEL_52;
            }
          }
          else
          {
            if (qword_1EB3BE838 != -1) {
              dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
            }
            int v32 = qword_1EB3BE830;
            if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)int buf = 0;
              _os_log_impl(&dword_1902AF000, v32, OS_LOG_TYPE_ERROR, "[CLAuDioAccessoryInterface] Failed to get the TimeSync clock", buf, 2u);
            }
            if (sub_1902D8400(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EB3BE838 != -1) {
                dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
              }
              LOWORD(v4dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
              goto LABEL_51;
            }
          }
        }
      }
      else
      {
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
        }
        int v22 = qword_1EB3BE830;
        if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl(&dword_1902AF000, v22, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] Failed to get the TimeSync clock manager", buf, 2u);
        }
        if (sub_1902D8400(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE838 != -1) {
            dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
          }
          LOWORD(v4dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
          goto LABEL_51;
        }
      }
      return;
    case 8:
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
      }
      int v20 = qword_1EB3BE830;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 134283521;
        uint64_t v47 = a2;
        _os_log_impl(&dword_1902AF000, v20, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] TIMESYNC_NOT_AVAILABLE device:%{private}p", buf, 0xCu);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
        }
        int v40 = 134283521;
        uint64_t v41 = a2;
        uint64_t v36 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::accessoryEventHandler(BTDevice, BTAccessoryEvent, BTAccessoryState)", "CoreLocation: %s\n", v36);
        if (v36 != (char *)buf) {
          free(v36);
        }
      }
      unsigned int v21 = *(void **)(a1 + 32);
      if (v21)
      {

        *(void *)(a1 + 32) = 0;
      }
      return;
    default:
      return;
  }
}

uint64_t sub_1905DC5E0(uint64_t a1)
{
  return sub_1905DBABC(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52));
}

void sub_1905DC5F0(uint64_t a1, uint64_t a2, unsigned char *a3, unint64_t a4)
{
  uint64_t v779 = *MEMORY[0x1E4F143B8];
  if (a4 <= 5)
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    uint64_t v4 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] isValidDailyUsageMessage: Invalid header size", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
      }
      *(_WORD *)v459 = 0;
LABEL_10:
      uint64_t v5 = (unsigned char *)_os_log_send_and_compose_impl();
      uint64_t v6 = "static BOOL BT::CLAudioAccessoryHelper::isValidDailyUsageMessage(BTData _Nonnull, size_t)";
LABEL_11:
      sub_1902D398C("Generic", 1, 0, 0, v6, "CoreLocation: %s\n");
      goto LABEL_59;
    }
    return;
  }
  if (*a3 != 4)
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    v266 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v266, OS_LOG_TYPE_DEBUG, "[HeadphoneUsage] Ignoring, not an AACP Log Message ", buf, 2u);
    }
    if (!sub_1902D8400(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    *(_WORD *)v459 = 0;
LABEL_58:
    uint64_t v5 = (unsigned char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "static BOOL BT::CLAudioAccessoryHelper::isValidDailyUsageMessage(BTData _Nonnull, size_t)", "CoreLocation: %s\n");
LABEL_59:
    if (v5 != buf) {
      free(v5);
    }
    return;
  }
  int v8 = a3[3] & 0x3F;
  if (v8 != 1)
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    v267 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v8;
      _os_log_impl(&dword_1902AF000, v267, OS_LOG_TYPE_DEBUG, "[HeadphoneUsage] isValidDailyUsageMessage: Ignoring message type (%d) that is not DailyUsage", buf, 8u);
    }
    if (!sub_1902D8400(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    *(_DWORD *)v459 = 67109120;
    *(_DWORD *)&v459[4] = v8;
    goto LABEL_58;
  }
  int v9 = a3[5];
  if ((v9 - 7) > 1)
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    v268 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v9;
      _os_log_impl(&dword_1902AF000, v268, OS_LOG_TYPE_INFO, "[HeadphoneUsage] Unexpected AWD version %d", buf, 8u);
    }
    if (!sub_1902D8400(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    *(_DWORD *)v459 = 67109120;
    *(_DWORD *)&v459[4] = v9;
    goto LABEL_58;
  }
  __int16 v10 = a4;
  int v11 = word_19060CF8E[15 * a3[5] + 1];
  int v12 = (unsigned __int16)(a4 - 4);
  if (v12 == v11)
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    uint64_t v14 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_DEBUG, "[HeadphoneUsage] Bluetooth message passed sanity checks.", buf, 2u);
    }
    uint64_t v289 = a1;
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
      }
      *(_WORD *)v459 = 0;
      v284 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "static BOOL BT::CLAudioAccessoryHelper::isValidDailyUsageMessage(BTData _Nonnull, size_t)", "CoreLocation: %s\n", v284);
      if (v284 != buf) {
        free(v284);
      }
    }
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    int v15 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v15, OS_LOG_TYPE_DEFAULT, "[HeadphoneUsage] Interface: Bluetooth daily usage event received. Parsing data.", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
      }
      *(_WORD *)v459 = 0;
      v285 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::dailyUsageEventHandler(BTDevice, BTData, size_t)", "CoreLocation: %s\n", v285);
      if (v285 != buf) {
        free(v285);
      }
    }
    unsigned __int16 v16 = v10 - 4;
    uint64_t v17 = a3 + 4;
    size_t v18 = (unsigned __int16)(v10 - 4);
    if (v18 <= 0x2D4) {
      size_t v19 = 725 - v16;
    }
    else {
      size_t v19 = 0;
    }
    bzero(&__dst[v16], v19);
    memcpy(__dst, v17, v18);
    int v20 = (void *)MEMORY[0x1E4F1CA60];
    *(void *)v459 = @"bud_type";
    *(void *)int buf = objc_msgSend_numberWithUnsignedChar_(NSNumber, v21, __dst[0]);
    *(void *)&v459[8] = @"awd_length";
    *(void *)&uint8_t buf[8] = objc_msgSend_numberWithUnsignedShort_(NSNumber, v22, *(unsigned __int16 *)&__dst[3]);
    *(void *)&v459[16] = @"awd_version";
    *(void *)&uint8_t buf[16] = objc_msgSend_numberWithUnsignedChar_(NSNumber, v23, __dst[1]);
    *(void *)&v459[24] = @"status";
    *(void *)&buf[24] = objc_msgSend_numberWithUnsignedChar_(NSNumber, v24, __dst[2]);
    v460 = @"signature";
    uint64_t v620 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v25, *(unsigned __int16 *)&__dst[5]);
    v461 = @"product_id";
    uint64_t v621 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v26, *(unsigned __int16 *)&__dst[7]);
    v462 = @"sw_version";
    uint64_t v622 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v27, v291);
    v463 = @"case_hw_version";
    uint64_t v623 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v28, v292);
    v464 = @"case_sw_version";
    uint64_t v624 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v29, v293);
    v465 = @"a2dp_time_mode_off_l";
    uint64_t v625 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v30, v294);
    v466 = @"a2dp_time_mode_anc_l";
    uint64_t v626 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v31, v295);
    v467 = @"a2dp_time_mode_trcy_l";
    uint64_t v627 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v32, v296);
    v468 = @"a2dp_time_mode_unused_l";
    uint64_t v628 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v33, v297);
    v469 = @"hfp_time_off_l";
    uint64_t v629 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v34, v298);
    v470 = @"hfp_time_anc_l";
    uint64_t v630 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v35, v299);
    v471 = @"hfp_time_trcy_l";
    uint64_t v631 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v36, v300);
    v472 = @"hfp_time_unused_l";
    uint64_t v632 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v37, v301);
    v473 = @"idle_time_off_l";
    uint64_t v633 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v38, v302);
    v474 = @"idle_time_anc_l";
    uint64_t v634 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v39, v303);
    v475 = @"idle_time_trcy_l";
    uint64_t v635 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v40, v304);
    v476 = @"idle_time_unused_l";
    uint64_t v636 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v41, v305);
    v477 = @"a2dp_battery_usage_l";
    uint64_t v637 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v42, v306);
    v478 = @"hfp_battery_usage_l";
    uint64_t v638 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v43, v307);
    v479 = @"idle_battery_usage_l";
    uint64_t v639 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v44, v308);
    v480 = @"a2dp_bud_temp_max_l";
    uint64_t v640 = objc_msgSend_numberWithChar_(NSNumber, v45, v309);
    v481 = @"hfp_bud_temp_max_l";
    uint64_t v641 = objc_msgSend_numberWithChar_(NSNumber, v46, v310);
    v482 = @"a2dp_bud_temp_avg_l";
    uint64_t v642 = objc_msgSend_numberWithChar_(NSNumber, v47, v311);
    v483 = @"hfp_bud_temp_avg_l";
    uint64_t v643 = objc_msgSend_numberWithChar_(NSNumber, v48, v312);
    v484 = @"time_out_of_ear_idle_l";
    uint64_t v644 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v49, v313);
    v485 = @"time_out_of_ear_incase_l";
    uint64_t v645 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v50, v314);
    v486 = @"ied_activated_count_l";
    uint64_t v646 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v51, v315);
    v487 = @"fw_update_retry_count_l";
    uint64_t v647 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v52, v316);
    v488 = @"bud_charging_cycle_l";
    uint64_t v648 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v53, v317);
    v489 = @"a2dp_time_mode_off_r";
    uint64_t v649 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v54, v318);
    v490 = @"a2dp_time_mode_anc_r";
    uint64_t v650 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v55, v319);
    v491 = @"a2dp_time_mode_trcy_r";
    uint64_t v651 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v56, v320);
    v492 = @"a2dp_time_mode_unused_r";
    uint64_t v652 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v57, v321);
    v493 = @"hfp_time_off_r";
    uint64_t v653 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v58, v322);
    v494 = @"hfp_time_anc_r";
    uint64_t v654 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v59, v323);
    v495 = @"hfp_time_trcy_r";
    uint64_t v655 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v60, v324);
    v496 = @"hfp_time_unused_r";
    uint64_t v656 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v61, v325);
    v497 = @"idle_time_off_r";
    uint64_t v657 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v62, v326);
    v498 = @"idle_time_anc_r";
    uint64_t v658 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v63, v327);
    v499 = @"idle_time_trcy_r";
    uint64_t v659 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v64, v328);
    v500 = @"idle_time_unused_r";
    uint64_t v660 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v65, v329);
    v501 = @"a2dp_battery_usage_r";
    uint64_t v661 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v66, v330);
    v502 = @"hfp_battery_usage_r";
    uint64_t v662 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v67, v331);
    v503 = @"idle_battery_usage_r";
    uint64_t v663 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v68, v332);
    v504 = @"a2dp_bud_temp_max_r";
    uint64_t v664 = objc_msgSend_numberWithChar_(NSNumber, v69, v333);
    v505 = @"hfp_bud_temp_max_r";
    uint64_t v665 = objc_msgSend_numberWithChar_(NSNumber, v70, v334);
    v506 = @"a2dp_bud_temp_avg_r";
    uint64_t v666 = objc_msgSend_numberWithChar_(NSNumber, v71, v335);
    v507 = @"hfp_bud_temp_avg_r";
    uint64_t v667 = objc_msgSend_numberWithChar_(NSNumber, v72, v336);
    v508 = @"time_out_of_ear_idle_r";
    uint64_t v668 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v73, v337);
    v509 = @"time_out_of_ear_incase_r";
    uint64_t v669 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v74, v338);
    v510 = @"ied_activated_count_r";
    uint64_t v670 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v75, v339);
    v511 = @"fw_update_retry_count_r";
    uint64_t v671 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v76, v340);
    v512 = @"bud_charging_cycle_r";
    uint64_t v672 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v77, v341);
    v513 = @"a2dp_time_both_in_ear_off";
    uint64_t v673 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v78, v342);
    v514 = @"a2dp_time_both_in_ear_anc";
    uint64_t v674 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v79, v343);
    v515 = @"a2dp_time_both_in_ear_trcy";
    uint64_t v675 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v80, v344);
    v516 = @"a2dp_time_both_in_ear_unused";
    uint64_t v676 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v81, v345);
    v517 = @"hfp_time_both_in_ear_off";
    uint64_t v677 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v82, v346);
    v518 = @"hfp_time_both_in_ear_anc";
    uint64_t v678 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v83, v347);
    v519 = @"hfp_time_both_in_ear_trcy";
    uint64_t v679 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v84, v348);
    v520 = @"hfp_time_both_in_ear_unused";
    uint64_t v680 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v85, v349);
    v521 = @"idle_time_both_in_ear_off";
    uint64_t v681 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v86, v350);
    v522 = @"idle_time_both_in_ear_anc";
    uint64_t v682 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v87, v351);
    v523 = @"idle_time_both_in_ear_trcy";
    uint64_t v683 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v88, v352);
    v524 = @"idle_time_both_in_ear_unused";
    uint64_t v684 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v89, v353);
    v525 = @"time_both_out_of_ear_idle";
    uint64_t v685 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v90, v354);
    v526 = @"time_out_of_ear_both_incase";
    uint64_t v686 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v91, v355);
    v527 = @"hs_on_acc_cnt";
    uint64_t v687 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v92, v356);
    v528 = @"siri_on_source_cnt";
    uint64_t v688 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v93, v357);
    v529 = @"siri_on_accessory_cnt";
    uint64_t v689 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v94, v358);
    v530 = @"total_time_in_connect_session";
    uint64_t v690 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v95, v359);
    v531 = @"bud_swap_count";
    uint64_t v691 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v96, v360);
    v532 = @"bud_daily_charging_soc_delta_l";
    uint64_t v692 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v97, v362);
    v533 = @"bud_daily_charging_soc_delta_r";
    uint64_t v693 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v98, v363);
    v534 = @"bud_max_daily_temp_during_chr_l";
    uint64_t v694 = objc_msgSend_numberWithChar_(NSNumber, v99, v364);
    v535 = @"bud_max_daily_temp_during_chr_r";
    uint64_t v695 = objc_msgSend_numberWithChar_(NSNumber, v100, v365);
    v536 = @"bud_avg_daily_temp_during_chr_l";
    uint64_t v696 = objc_msgSend_numberWithChar_(NSNumber, v101, v366);
    v537 = @"bud_avg_daily_temp_during_chr_r";
    uint64_t v697 = objc_msgSend_numberWithChar_(NSNumber, v102, v367);
    v538 = @"case_soc_delta_bud_chr";
    uint64_t v698 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v103, v368);
    v539 = @"case_temp_max_while_discharging";
    uint64_t v699 = objc_msgSend_numberWithChar_(NSNumber, v104, v369);
    v540 = @"case_temp_avg_daily";
    uint64_t v700 = objc_msgSend_numberWithChar_(NSNumber, v105, v370);
    v541 = @"case_at_maxchr_time_in_day";
    uint64_t v701 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v106, v371);
    v542 = @"case_charging_cycle";
    uint64_t v702 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v107, v372);
    v543 = @"source_conn_productid_1";
    uint64_t v703 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v108, v373);
    v544 = @"source_conn_productid_2";
    uint64_t v704 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v109, v374);
    v545 = @"source_conn_productid_3";
    uint64_t v705 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v110, v375);
    v546 = @"source_conn_productid_4";
    uint64_t v706 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v111, v376);
    v547 = @"source_conn_productid_5";
    uint64_t v707 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v112, v377);
    v548 = @"source_conn_time_1";
    uint64_t v708 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v113, v378);
    v549 = @"source_conn_time_2";
    uint64_t v709 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v114, v379);
    v550 = @"source_conn_time_3";
    uint64_t v710 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v115, v380);
    v551 = @"source_conn_time_4";
    uint64_t v711 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v116, v381);
    v552 = @"source_conn_time_5";
    uint64_t v712 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v117, v382);
    v553 = @"sw_version_ext";
    uint64_t v713 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v118, v383[5]);
    v554 = @"triangle_conn_time";
    uint64_t v714 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v119, v384);
    v555 = @"hw_version";
    uint64_t v715 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v120, v385);
    v556 = @"double_tap_cnt_l";
    uint64_t v716 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v121, v386);
    v557 = @"single_tap_cnt_l";
    uint64_t v717 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v122, v387);
    v558 = @"press_hold_l";
    uint64_t v718 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v123, v388);
    v559 = @"ied_detect_l";
    uint64_t v719 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v124, v389);
    v560 = @"crash_cnt_l";
    uint64_t v720 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v125, v390[2]);
    v561 = @"bud_mileage_l";
    uint64_t v721 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v126, *(unsigned int *)&v398[14]);
    v562 = @"first_time_use_l";
    uint64_t v722 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v127, v399);
    v563 = @"double_tap_cnt_r";
    uint64_t v723 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v128, v400);
    v564 = @"single_tap_cnt_r";
    uint64_t v724 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v129, v401);
    v565 = @"press_hold_r";
    uint64_t v725 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v130, v402);
    v566 = @"ied_detect_r";
    uint64_t v726 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v131, v403);
    v567 = @"crash_cnt_r";
    uint64_t v727 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v132, v404[2]);
    v568 = @"bud_mileage_r";
    uint64_t v728 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v133, *(unsigned int *)&v412[14]);
    v569 = @"first_time_use_r";
    uint64_t v729 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v134, v413);
    v570 = @"scp_active_time";
    uint64_t v730 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v135, v414);
    v571 = @"scp_ohd_time";
    uint64_t v731 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v136, v415);
    v572 = @"scp_fwup_time";
    uint64_t v732 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v137, v416);
    v573 = @"scp_idle_time";
    uint64_t v733 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v138, v417);
    v574 = @"scp_ttop_time";
    uint64_t v734 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v139, v418);
    v575 = @"scp_prioff_time";
    uint64_t v735 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v140, v419);
    v576 = @"scp_up_to_active";
    uint64_t v736 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v141, v420);
    v577 = @"scp_up_to_ohd";
    uint64_t v737 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v142, v421);
    v578 = @"scp_up_to_fwup";
    uint64_t v738 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v143, v422);
    v579 = @"scp_up_to_idle";
    uint64_t v739 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v144, v423);
    v580 = @"scp_up_to_ttop";
    uint64_t v740 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v145, v424);
    v581 = @"scp_down_to_ohd";
    uint64_t v741 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v146, v425);
    v582 = @"scp_down_to_fwup";
    uint64_t v742 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v147, v426);
    v583 = @"scp_down_to_idle";
    uint64_t v743 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v148, v427);
    v584 = @"scp_down_to_ttop";
    uint64_t v744 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v149, v428);
    v585 = @"scp_down_to_prioff";
    uint64_t v745 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v150, v429);
    v586 = @"scp_bt_disc";
    uint64_t v746 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v151, v430);
    v587 = @"scp_bt_conn";
    uint64_t v747 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v152, v431);
    v588 = @"scp_bt_a2dp";
    uint64_t v748 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v153, v432);
    v589 = @"scp_bt_call";
    uint64_t v749 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v154, v433);
    v590 = @"scp_scp_b2p_timeout";
    uint64_t v750 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v155, v434);
    v591 = @"scp_scp_b2p_tx_retry";
    uint64_t v751 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v156, v435);
    v592 = @"scp_scp_b2p_rx_error";
    uint64_t v752 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v157, v436);
    v593 = @"scp_scp_b2p_tx_raw";
    uint64_t v753 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v158, v437);
    v594 = @"scp_scp_b2p_rx_raw";
    uint64_t v754 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v159, v438);
    v595 = @"scp_pri_b2p_timeout";
    uint64_t v755 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v160, v439);
    v596 = @"scp_pri_b2p_tx_retry";
    uint64_t v756 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v161, v440);
    v597 = @"scp_pri_b2p_rx_error";
    uint64_t v757 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v162, v441);
    v598 = @"scp_pri_b2p_tx_raw";
    uint64_t v758 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v163, v442);
    v599 = @"scp_pri_b2p_rx_raw";
    uint64_t v759 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v164, v443);
    v600 = @"scp_chun_tx_error";
    uint64_t v760 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v165, v444);
    v601 = @"scp_chun_rx_error";
    uint64_t v761 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v166, v445);
    v602 = @"scp_chun_unlock";
    uint64_t v762 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v167, v446);
    v603 = @"scp_chun_missed_frame";
    uint64_t v763 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v168, v447);
    v604 = @"appleID_paired_count";
    uint64_t v764 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v169, v448);
    v605 = @"uvlo_count_l";
    uint64_t v765 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v170, v449);
    v606 = @"time_since_last_uvlo_l";
    uint64_t v766 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v171, v450);
    v607 = @"low_batt_signal_count_l";
    uint64_t v767 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v172, v451);
    v608 = @"num_sessions_l";
    uint64_t v768 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v173, v452);
    v609 = @"flash_pe_count_l";
    uint64_t v769 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v174, v453);
    v610 = @"bud_color_l";
    uint64_t v770 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v175, v454);
    v611 = @"uvlo_count_r";
    uint64_t v771 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v176, v455);
    v612 = @"time_since_last_uvlo_r";
    uint64_t v772 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v177, v456);
    v613 = @"low_batt_signal_count_r";
    uint64_t v773 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v178, v457);
    v614 = @"num_sessions_r";
    uint64_t v774 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v179, v458[58]);
    v615 = @"flash_pe_count_r";
    uint64_t v775 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v180, v458[59]);
    v616 = @"bud_color_r";
    uint64_t v776 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v181, v458[60]);
    v617 = @"case_charge_event_count";
    uint64_t v777 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v182, v361);
    v618 = @"system_color";
    uint64_t v778 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v183, v458[61]);
    uint64_t v185 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v184, (uint64_t)buf, v459, 163);
    __int16 v187 = objc_msgSend_dictionaryWithDictionary_(v20, v186, v185);
    sub_1905DF1E8(@"array_rfu", (const char *)5, 4u, (uint64_t)v383, v187);
    sub_1905DF1E8(@"ied_histogram_l", (const char *)2, 2u, (uint64_t)v390, v187);
    sub_1905DF1E8(@"a2dp_time_ext_l", (const char *)4, 2u, (uint64_t)&v391, v187);
    sub_1905DF1E8(@"hfp_time_ext_l", (const char *)4, 2u, (uint64_t)&v392, v187);
    sub_1905DF1E8(@"idle_time_ext_l", (const char *)4, 2u, (uint64_t)&v393, v187);
    sub_1905DF1E8(@"a2dp_battery_usage_ext_l", (const char *)8, 2u, (uint64_t)&v394, v187);
    sub_1905DF1E8(@"hfp_battery_usage_ext_l", (const char *)8, 2u, (uint64_t)&v395, v187);
    sub_1905DF1E8(@"idle_battery_usage_ext_l", (const char *)8, 2u, (uint64_t)&v396, v187);
    sub_1905DF1E8(@"array_rfu_l", (const char *)5, 4u, (uint64_t)&v397, v187);
    sub_1905DF1E8(@"volume_his_l", (const char *)7, 2u, (uint64_t)v398, v187);
    sub_1905DF1E8(@"ied_histogram_r", (const char *)2, 2u, (uint64_t)v404, v187);
    sub_1905DF1E8(@"a2dp_time_ext_r", (const char *)4, 2u, (uint64_t)&v405, v187);
    sub_1905DF1E8(@"hfp_time_ext_r", (const char *)4, 2u, (uint64_t)&v406, v187);
    sub_1905DF1E8(@"idle_time_ext_r", (const char *)4, 2u, (uint64_t)&v407, v187);
    sub_1905DF1E8(@"a2dp_battery_usage_ext_r", (const char *)8, 2u, (uint64_t)&v408, v187);
    sub_1905DF1E8(@"hfp_battery_usage_ext_r", (const char *)8, 2u, (uint64_t)&v409, v187);
    sub_1905DF1E8(@"idle_battery_usage_ext_r", (const char *)8, 2u, (uint64_t)&v410, v187);
    sub_1905DF1E8(@"array_rfu_r", (const char *)5, 4u, (uint64_t)&v411, v187);
    sub_1905DF1E8(@"volume_his_r", (const char *)7, 2u, (uint64_t)v412, v187);
    uint64_t v189 = 0;
    float v190 = (unsigned __int16 *)v458;
    do
    {
      uint64_t v191 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v188, *((unsigned __int8 *)v190 - 71));
      uint64_t v193 = objc_msgSend_stringWithFormat_(NSString, v192, @"bud_start_soc_at_undock_l_%u", v189);
      objc_msgSend_setObject_forKeyedSubscript_(v187, v194, v191, v193);
      uint64_t v196 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v195, *((unsigned __int8 *)v190 - 70));
      uint64_t v198 = objc_msgSend_stringWithFormat_(NSString, v197, @"bud_end_soc_at_dock_l_%u", v189);
      objc_msgSend_setObject_forKeyedSubscript_(v187, v199, v196, v198);
      uint64_t v201 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v200, *(unsigned __int16 *)((char *)v190 - 69));
      uint64_t v203 = objc_msgSend_stringWithFormat_(NSString, v202, @"length_of_session_l_%u", v189);
      objc_msgSend_setObject_forKeyedSubscript_(v187, v204, v201, v203);
      uint64_t v206 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v205, *((unsigned __int8 *)v190 - 2));
      uint64_t v208 = objc_msgSend_stringWithFormat_(NSString, v207, @"bud_start_soc_at_undock_r_%u", v189);
      objc_msgSend_setObject_forKeyedSubscript_(v187, v209, v206, v208);
      uint64_t v211 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v210, *((unsigned __int8 *)v190 - 1));
      uint64_t v213 = objc_msgSend_stringWithFormat_(NSString, v212, @"bud_end_soc_at_dock_r_%u", v189);
      objc_msgSend_setObject_forKeyedSubscript_(v187, v214, v211, v213);
      unsigned int v215 = *v190;
      v190 += 2;
      uint64_t v217 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v216, v215);
      uint64_t v219 = objc_msgSend_stringWithFormat_(NSString, v218, @"length_of_session_r_%u", v189);
      objc_msgSend_setObject_forKeyedSubscript_(v187, v220, v217, v219);
      ++v189;
    }
    while (v189 != 15);
    uint64_t v221 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v188, v458[62]);
    objc_msgSend_setObject_forKeyedSubscript_(v187, v222, v221, @"case_hw_version_maj");
    uint64_t v224 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v223, v458[63]);
    objc_msgSend_setObject_forKeyedSubscript_(v187, v225, v224, @"case_hw_version_min");
    uint64_t v227 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v226, v458[64]);
    objc_msgSend_setObject_forKeyedSubscript_(v187, v228, v227, @"case_hw_version_rev");
    uint64_t v230 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v229, v458[65]);
    objc_msgSend_setObject_forKeyedSubscript_(v187, v231, v230, @"case_sw_version_maj");
    uint64_t v233 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v232, v458[66]);
    objc_msgSend_setObject_forKeyedSubscript_(v187, v234, v233, @"case_sw_version_min");
    uint64_t v236 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v235, v458[67]);
    objc_msgSend_setObject_forKeyedSubscript_(v187, v237, v236, @"case_sw_version_rev");
    uint64_t v239 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v238, v458[68]);
    objc_msgSend_setObject_forKeyedSubscript_(v187, v240, v239, @"appleID_hijack_cnt");
    if (!v187)
    {
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
      }
      v270 = qword_1EB3BE830;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl(&dword_1902AF000, v270, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] Error forming metric dictionary, aborting.", buf, 2u);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
        }
        *(_WORD *)v459 = 0;
        uint64_t v5 = (unsigned char *)_os_log_send_and_compose_impl();
        uint64_t v6 = "void CLAudioAccessoryInterface::dailyUsageEventHandler(BTDevice, BTData, size_t)";
        goto LABEL_11;
      }
      return;
    }
    uint64_t v241 = v289;
    if (*(void *)(v289 + 8))
    {
      id v242 = objc_alloc(MEMORY[0x1E4F1CA58]);
      v244 = objc_msgSend_initWithLength_(v242, v243, 1000);
      *(void *)std::string __dst = 0;
      objc_msgSend_mutableBytes(v244, v245, v246);
      objc_msgSend_length(v244, v247, v248);
      int AccessoryInfo = BTAccessoryManagerGetAccessoryInfo();
      if (AccessoryInfo || !*(void *)__dst)
      {

        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
        }
        v273 = qword_1EB3BE830;
        if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = AccessoryInfo;
          *(_WORD *)&uint8_t buf[8] = 2048;
          *(void *)&buf[10] = *(void *)__dst;
          _os_log_impl(&dword_1902AF000, v273, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] Error: Unable to retrieve data,status:%d,infoLen:%zu", buf, 0x12u);
        }
        if (!sub_1902D8400(115, 0)) {
          goto LABEL_122;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
        }
        *(_DWORD *)v459 = 67109376;
        *(_DWORD *)&v459[4] = AccessoryInfo;
        *(_WORD *)&v459[8] = 2048;
        *(void *)&v459[10] = *(void *)__dst;
      }
      else
      {
        objc_msgSend_setLength_(v244, v249, *(uint64_t *)__dst);
        v252 = objc_msgSend_JSONObjectWithData_options_error_(MEMORY[0x1E4F28D90], v251, (uint64_t)v244, 0, 0);

        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          v254 = objc_msgSend_objectForKeyedSubscript_(v252, v253, @"AACPVersionInfo");
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0 && (unint64_t)objc_msgSend_count(v254, v255, v256) >= 0xA)
          {
            uint64_t v258 = objc_msgSend_objectAtIndex_(v254, v257, 3);
            uint64_t v260 = objc_msgSend_objectAtIndex_(v254, v259, 8);
            uint64_t v262 = objc_msgSend_objectAtIndex_(v254, v261, 9);
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  objc_msgSend_setObject_forKeyedSubscript_(v187, v263, v258, @"serial_number_system");
                  objc_msgSend_setObject_forKeyedSubscript_(v187, v264, v260, @"serial_number_left");
                  objc_msgSend_setObject_forKeyedSubscript_(v187, v265, v262, @"serial_number_right");
LABEL_127:
                  if (qword_1EB3BE838 != -1) {
                    dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
                  }
                  v278 = qword_1EB3BE830;
                  if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)int buf = 138477827;
                    *(void *)&uint8_t buf[4] = v187;
                    _os_log_impl(&dword_1902AF000, v278, OS_LOG_TYPE_INFO, "[HeadphoneUsage] Interface: Parsed metrics: %{private}@", buf, 0xCu);
                  }
                  if (sub_1902D8400(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1EB3BE838 != -1) {
                      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
                    }
                    *(_DWORD *)v459 = 138477827;
                    *(void *)&v459[4] = v187;
                    v286 = (char *)_os_log_send_and_compose_impl();
                    sub_1902D398C("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::dailyUsageEventHandler(BTDevice, BTData, size_t)", "CoreLocation: %s\n", v286);
                    if (v286 != buf) {
                      free(v286);
                    }
                    uint64_t v241 = v289;
                  }
                  for (uint64_t i = *(uint64_t ***)(v241 + 200); i; uint64_t i = (uint64_t **)*i)
                  {
                    if (qword_1EB3BE838 != -1) {
                      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
                    }
                    v280 = qword_1EB3BE830;
                    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEBUG))
                    {
                      v281 = i[2];
                      *(_DWORD *)int buf = 67109378;
                      *(_DWORD *)&uint8_t buf[4] = 1;
                      *(_WORD *)&uint8_t buf[8] = 2112;
                      *(void *)&buf[10] = v281;
                      _os_log_impl(&dword_1902AF000, v280, OS_LOG_TYPE_DEBUG, "[HeadphoneUsage] notifyClientsWithData,event %d,client %@", buf, 0x12u);
                    }
                    if (sub_1902D8400(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1EB3BE838 != -1) {
                        dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
                      }
                      v282 = i[2];
                      *(void *)v459 = 0x104000202;
                      *(_WORD *)&v459[8] = 2112;
                      *(void *)&v459[10] = v282;
                      v283 = (char *)_os_log_send_and_compose_impl();
                      sub_1902D398C("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::notifyClientsWithData(Event, NSDictionary *)", "CoreLocation: %s\n", v283);
                      if (v283 != buf) {
                        free(v283);
                      }
                    }
                    ((void (*)(uint64_t, void *, uint64_t *))i[3])(1, v187, i[2]);
                  }
                  return;
                }
              }
            }
            if (qword_1EB3BE838 != -1) {
              dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
            }
            v276 = qword_1EB3BE830;
            if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)int buf = 0;
              _os_log_impl(&dword_1902AF000, v276, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] Error: Expected serial number as NSString*, got different type.", buf, 2u);
            }
            if (!sub_1902D8400(115, 0))
            {
LABEL_122:
              if (qword_1EB3BE838 != -1) {
                dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
              }
              v277 = qword_1EB3BE830;
              if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)int buf = 0;
                _os_log_impl(&dword_1902AF000, v277, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] Error retrieving serial numbers, will omit from message.", buf, 2u);
              }
              if (sub_1902D8400(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EB3BE838 != -1) {
                  dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
                }
                *(_WORD *)v459 = 0;
                v287 = (char *)_os_log_send_and_compose_impl();
                sub_1902D398C("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::dailyUsageEventHandler(BTDevice, BTData, size_t)", "CoreLocation: %s\n", v287);
                if (v287 != buf) {
                  free(v287);
                }
                uint64_t v241 = v289;
              }
              goto LABEL_127;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1EB3BE838 != -1) {
              dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
            }
            *(_WORD *)v459 = 0;
          }
          else
          {
            if (qword_1EB3BE838 != -1) {
              dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
            }
            v275 = qword_1EB3BE830;
            if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)int buf = 0;
              _os_log_impl(&dword_1902AF000, v275, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] Error: AACPVersionInfo array of unexpected type or size.", buf, 2u);
            }
            if (!sub_1902D8400(115, 0)) {
              goto LABEL_122;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1EB3BE838 != -1) {
              dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
            }
            *(_WORD *)v459 = 0;
          }
        }
        else
        {
          if (qword_1EB3BE838 != -1) {
            dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
          }
          v274 = qword_1EB3BE830;
          if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl(&dword_1902AF000, v274, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] Error: Accessory info dictionary is of unexpected class.", buf, 2u);
          }
          if (!sub_1902D8400(115, 0)) {
            goto LABEL_122;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE838 != -1) {
            dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
          }
          *(_WORD *)v459 = 0;
        }
      }
      v272 = (unsigned char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "static BOOL BT::CLAudioAccessoryHelper::addSerialNumbersToDict(BTAccessoryManager _Nonnull, BTDevice _Nonnull, NSMutableDictionary * _Nonnull)", "CoreLocation: %s\n");
    }
    else
    {
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
      }
      v271 = qword_1EB3BE830;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 138412290;
        *(void *)&uint8_t buf[4] = a2;
        _os_log_impl(&dword_1902AF000, v271, OS_LOG_TYPE_DEBUG, "[HeadphoneUsage] BT Accessory Manager no longer exists, cannot retrieve serial numbers,device:%@", buf, 0xCu);
      }
      if (!sub_1902D8400(115, 2)) {
        goto LABEL_122;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
      }
      *(_DWORD *)v459 = 138412290;
      *(void *)&v459[4] = a2;
      v272 = (unsigned char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "static BOOL BT::CLAudioAccessoryHelper::addSerialNumbersToDict(BTAccessoryManager _Nonnull, BTDevice _Nonnull, NSMutableDictionary * _Nonnull)", "CoreLocation: %s\n");
    }
    if (v272 != buf) {
      free(v272);
    }
    uint64_t v241 = v289;
    goto LABEL_122;
  }
  if (qword_1EB3BE838 != -1) {
    dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
  }
  v269 = qword_1EB3BE830;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)int buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = v9;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = 1;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&uint8_t buf[16] = v11;
    *(_WORD *)&buf[20] = 1024;
    *(_DWORD *)&unsigned char buf[22] = v12;
    _os_log_impl(&dword_1902AF000, v269, OS_LOG_TYPE_FAULT, "[HeadphoneUsage] Unexpected AWD data length for AWDVersion %d: type %d expected len %d actual %d. Header mismatch with Bluetooth likely.", buf, 0x1Au);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    *(_DWORD *)v459 = 67109888;
    *(_DWORD *)&v459[4] = v9;
    *(_WORD *)&v459[8] = 1024;
    *(_DWORD *)&v459[10] = 1;
    *(_WORD *)&v459[14] = 1024;
    *(_DWORD *)&v459[16] = v11;
    *(_WORD *)&v459[20] = 1024;
    *(_DWORD *)&v459[22] = v12;
    goto LABEL_10;
  }
}

os_log_t sub_1905DF1B8()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Accessory");
  qword_1EB3BE830 = (uint64_t)result;
  return result;
}

void sub_1905DF1E8(uint64_t a1, const char *a2, unsigned int a3, uint64_t a4, void *a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a1 && a4 && a5)
  {
    unsigned int v9 = 0;
    unsigned int v10 = a3 * a2;
    do
    {
      switch(a3)
      {
        case 4u:
          uint64_t v11 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, a2, *(unsigned int *)(a4 + v9));
          break;
        case 3u:
          uint64_t v11 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, a2, *(unsigned __int16 *)(a4 + v9) | ((unint64_t)*(unsigned __int8 *)(a4 + v9 + 2) << 16));
          break;
        case 2u:
          uint64_t v11 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, a2, *(unsigned __int16 *)(a4 + v9));
          break;
        default:
          uint64_t v11 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, a2, 0);
          break;
      }
      uint64_t v13 = v11;
      uint64_t v14 = objc_msgSend_stringWithFormat_(NSString, v12, @"%@_%u", a1, v9 / a3);
      objc_msgSend_setObject_forKey_(a5, v15, v13, v14);
      v9 += a3;
    }
    while (v9 < v10);
  }
  else
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
    }
    unsigned __int16 v16 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 138412802;
      uint64_t v19 = a1;
      __int16 v20 = 2048;
      uint64_t v21 = a4;
      __int16 v22 = 2112;
      __int16 v23 = a5;
      _os_log_impl(&dword_1902AF000, v16, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] addExpandedArrayToDictionary: Invalid parameters. arrayName: %@, array: %p, dict: %@", buf, 0x20u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFC37E8);
      }
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "static void BT::CLAudioAccessoryHelper::addExpandedArrayToDictionary(NSString * _Nonnull, uint32_t, uint8_t, uint8_t * _Nonnull, NSMutableDictionary * _Nonnull, BOOL)", "CoreLocation: %s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
}

uint64_t sub_1905DF484(uint64_t a1)
{
  int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_1905DF4D0(void *a1, void *a2)
{
  os_log_t result = sub_1905DF508(a1, a2);
  if (result)
  {
    sub_1905DF5F4(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void *sub_1905DF508(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  int v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  os_log_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      os_log_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1905DF5F4(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_1905DF638(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  long long __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *sub_1905DF638@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint8x8_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    uint8x8_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  void *v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void *sub_1905DF76C(float *a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v15 = a1[8];
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            sub_190347AC8();
          }
          __int16 v20 = operator new(8 * *(void *)&prime);
          uint64_t v21 = *(void **)a1;
          *(void *)a1 = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          __int16 v23 = (void *)*((void *)a1 + 2);
          if (v23)
          {
            unint64_t v24 = v23[1];
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v24) = a1 + 4;
            uint64_t v29 = (void *)*v23;
            if (*v23)
            {
              do
              {
                unint64_t v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(void *)&prime) {
                    v30 %= *(void *)&prime;
                  }
                }
                else
                {
                  v30 &= *(void *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v30))
                  {
                    *(void *)(*(void *)a1 + 8 * v3dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = v23;
                    goto LABEL_55;
                  }
                  *__int16 v23 = *v29;
                  *uint64_t v29 = **(void **)(*(void *)a1 + 8 * v30);
                  **(void **)(*(void *)a1 + 8 * v3dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = v29;
                  uint64_t v29 = v23;
                }
                unint64_t v30 = v24;
LABEL_55:
                __int16 v23 = v29;
                uint64_t v29 = (void *)*v29;
                unint64_t v24 = v30;
              }
              while (v29);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        __int16 v35 = *(void **)a1;
        *(void *)a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v31 = *(void **)a1;
  int v32 = *(void **)(*(void *)a1 + 8 * v3);
  if (v32)
  {
    *uint64_t i = *v32;
LABEL_72:
    *int v32 = i;
    goto LABEL_73;
  }
  *uint64_t i = *((void *)a1 + 2);
  *((void *)a1 + 2) = i;
  v31[v3] = a1 + 4;
  if (*i)
  {
    unint64_t v33 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9) {
        v33 %= v9;
      }
    }
    else
    {
      v33 &= v9 - 1;
    }
    int v32 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return i;
}

void sub_1905DFB88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1905DFB9C(float *a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *((void *)a1 + 1);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    int v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v16 = a1[8];
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v10 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v10) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v10 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            sub_190347AC8();
          }
          uint64_t v21 = operator new(8 * *(void *)&prime);
          uint64_t v22 = *(void **)a1;
          *(void *)a1 = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          unint64_t v24 = (void *)*((void *)a1 + 2);
          if (v24)
          {
            unint64_t v25 = v24[1];
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v25) = a1 + 4;
            unint64_t v30 = (void *)*v24;
            if (*v24)
            {
              do
              {
                unint64_t v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }
                else
                {
                  v31 &= *(void *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v31))
                  {
                    *(void *)(*(void *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  void *v24 = *v30;
                  *unint64_t v30 = **(void **)(*(void *)a1 + 8 * v31);
                  **(void **)(*(void *)a1 + 8 * v31) = v30;
                  unint64_t v30 = v24;
                }
                unint64_t v31 = v25;
LABEL_55:
                unint64_t v24 = v30;
                unint64_t v30 = (void *)*v30;
                unint64_t v25 = v31;
              }
              while (v30);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v36 = *(void **)a1;
        *(void *)a1 = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v10 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  int v32 = *(void **)a1;
  unint64_t v33 = *(void **)(*(void *)a1 + 8 * v4);
  if (v33)
  {
    *uint64_t i = *v33;
LABEL_72:
    *unint64_t v33 = i;
    goto LABEL_73;
  }
  *uint64_t i = *((void *)a1 + 2);
  *((void *)a1 + 2) = i;
  v32[v4] = a1 + 4;
  if (*i)
  {
    unint64_t v34 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v34 >= v10) {
        v34 %= v10;
      }
    }
    else
    {
      v34 &= v10 - 1;
    }
    unint64_t v33 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return i;
}

void sub_1905DFFBC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1905DFFD0(uint64_t a1, unsigned char *a2, int a3)
{
  uint64_t v3 = 0;
  switch(*a2)
  {
    case 1:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
      return 1;
    case 2:
      if (a3 != 72) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
      return 1;
    case 3:
      if (a3 != 105) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
      return 1;
    case 4:
      if (a3 != 64) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
      return 1;
    case 5:
      if (a3 != 16) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
      return 1;
    case 6:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 64))(a1);
      return 1;
    case 7:
      if (a3 != 212) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 72))(a1);
      return 1;
    case 8:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 80))(a1);
      return 1;
    case 9:
      if (a3 != 212) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
      return 1;
    case 0xA:
      if (a3 != 193) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 272))(a1);
      return 1;
    case 0xC:
      if (a3 != 12) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      return 1;
    case 0xD:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 104))(a1);
      return 1;
    case 0xE:
      if (a3 != 55) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
      return 1;
    case 0xF:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 120))(a1);
      return 1;
    case 0x11:
      if (a3 != 36) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 128))(a1);
      return 1;
    case 0x14:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 152))(a1);
      return 1;
    case 0x15:
      if (a3 != 48) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 160))(a1);
      return 1;
    case 0x17:
      if (a3 != 21) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 168))(a1);
      return 1;
    case 0x18:
      if (a3 != 89) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 176))(a1);
      return 1;
    case 0x19:
      if (a3 != 218) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
      return 1;
    case 0x1B:
      if (a3 != 132) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 200))(a1);
      return 1;
    case 0x1C:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
      return 1;
    case 0x1D:
      if (a3 != 32) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 136))(a1);
      return 1;
    case 0x1F:
      if (a3 != 12) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
      return 1;
    case 0x20:
      if (a3 != 157) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 208))(a1);
      return 1;
    case 0x21:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 216))(a1);
      return 1;
    case 0x22:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 224))(a1);
      return 1;
    case 0x23:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 232))(a1);
      return 1;
    case 0x24:
      if (a3 != 28) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 248))(a1);
      return 1;
    case 0x25:
      if (a3 != 21) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 256))(a1);
      return 1;
    case 0x26:
      if (a3 != 16) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 264))(a1);
      return 1;
    case 0x27:
      if (a3 != 205) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 280))(a1);
      return 1;
    case 0x28:
      if (a3 != 25) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 288))(a1);
      return 1;
    case 0x29:
      if (a3 != 69) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 296))(a1);
      return 1;
    case 0x2B:
      if (a3 != 28) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 240))(a1);
      return 1;
    case 0x2C:
      if (a3 != 29) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 312))(a1);
      return 1;
    case 0x2D:
      if (a3 != 37) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 320))(a1);
      return 1;
    case 0x2E:
      if (a3 != 45) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 328))(a1);
      return 1;
    case 0x2F:
      if (a3 != 113) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 336))(a1);
      return 1;
    case 0x30:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 304))(a1);
      return 1;
    case 0x31:
      if (a3 != 68) {
        return 0;
      }
      unint64_t v4 = *(void (**)(void))(*(void *)a1 + 352);
      goto LABEL_126;
    case 0x32:
      if (a3 != 43) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 360))(a1);
      return 1;
    case 0x33:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 368))(a1);
      return 1;
    case 0x34:
      if (a3 != 49) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 384))(a1);
      return 1;
    case 0x35:
      if (a3 != 20) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 392))(a1);
      return 1;
    case 0x36:
      if (a3 != 12) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 400))(a1);
      return 1;
    case 0x37:
      if (a3 != 30) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 408))(a1);
      return 1;
    case 0x38:
      if (a3 != 28) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 416))(a1);
      return 1;
    case 0x39:
      if (a3 != 57) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 344))(a1);
      return 1;
    case 0x3A:
      if (a3 != 232) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 376))(a1);
      return 1;
    case 0x3B:
      if (a3 != 44) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 472))(a1);
      return 1;
    case 0x3C:
      if (a3 != 10) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 488))(a1);
      return 1;
    case 0x40:
      if (a3 != 29) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 424))(a1);
      return 1;
    case 0x41:
      if (a3 != 9) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 440))(a1);
      return 1;
    case 0x42:
      if (a3 != 12) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 448))(a1);
      return 1;
    case 0x43:
      if (a3 != 12) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 496))(a1);
      return 1;
    case 0x44:
      if (a3 != 76) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 456))(a1);
      return 1;
    case 0x45:
      if (a3 != 39) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 504))(a1);
      return 1;
    case 0x47:
      if (a3 != 45) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 512))(a1);
      return 1;
    case 0x48:
      if (a3 != 16) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 528))(a1);
      return 1;
    case 0x49:
      if (a3 != 83) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 520))(a1);
      return 1;
    case 0x4A:
      if (a3 != 51) {
        return 0;
      }
      unint64_t v4 = *(void (**)(void))(*(void *)a1 + 544);
LABEL_126:
      v4();
      return 1;
    case 0x4B:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 552))(a1);
      return 1;
    case 0x4C:
      if (a3 != 10) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 536))(a1);
      return 1;
    case 0x4D:
      if (a3 != 13) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 480))(a1);
      return 1;
    case 0x4E:
      if (a3 != 58) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 464))(a1);
      return 1;
    case 0x4F:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 560))(a1);
      return 1;
    case 0x50:
      if (a3 != 18) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 568))(a1);
      return 1;
    case 0x52:
      if (a3 != 26) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 576))(a1);
      return 1;
    case 0x53:
      if (a3 != 22) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 584))(a1);
      return 1;
    case 0x54:
      if (a3 != 17) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 592))(a1);
      return 1;
    case 0x55:
      if (a3 != 20) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 600))(a1);
      return 1;
    case 0x56:
      if (a3 != 113) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 608))(a1);
      return 1;
    case 0x57:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 616))(a1);
      return 1;
    case 0x58:
      if (a3 != 61) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 624))(a1);
      return 1;
    case 0x59:
      if (a3 != 47) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 432))(a1);
      return 1;
    case 0x5A:
      if (a3 != 210) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 632))(a1);
      return 1;
    case 0x5B:
      if (a3 != 88) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 640))(a1);
      return 1;
    case 0x5C:
      if (a3 != 17) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 648))(a1);
      return 1;
    case 0xB0:
      if (a3 != 17) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 144))(a1);
      return 1;
    default:
      return v3;
  }
}

uint64_t sub_1905E1364(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0x3F80000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0x4000000000;
  *(unsigned char *)(a1 + 3648) = 1;
  *(void *)(a1 + 3668) = 0;
  *(void *)(a1 + 366dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
  *(void *)(a1 + 3676) = 0x800000000;
  *(void *)(a1 + 3716) = 0;
  *(_DWORD *)(a1 + 3724) = 0;
  *(void *)(a1 + 3728) = 0xBF8000003F800000;
  *(void *)(a1 + 3736) = 0;
  *(void *)(a1 + 3744) = 0x3F80000000000000;
  if (qword_1E929D8D8 != -1) {
    dispatch_once(&qword_1E929D8D8, &unk_1EDFD2C20);
  }
  uint64_t v2 = qword_1E929D8E0;
  if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_INFO, "[CMHeadToHeadsetAttitudeEstimator] Created the online H2H estimator.", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2C20);
    }
    uint8x8_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "CMHeadToHeadsetAttitudeEstimator::CMHeadToHeadsetAttitudeEstimator()", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_1905E1560(a1, v3);
  return a1;
}

void sub_1905E1560(uint64_t a1, float32x4_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 16) = 0;
  a2.f32[0] = -*(float *)(a1 + 3744);
  __int32 v3 = *(_DWORD *)(a1 + 3748);
  *(float32x2_t *)buf.f32 = vneg_f32(*(float32x2_t *)(a1 + 3736));
  buf.i32[2] = a2.i32[0];
  buf.i32[3] = v3;
  sub_1902D9ACC(&buf, a2);
  unint64_t v4 = 0;
  *(float32x4_t *)a1 = buf;
  int v8 = 0;
  memset(v7, 0, sizeof(v7));
  do
  {
    *(_DWORD *)sub_190448B30((uint64_t)v7, v4, v4) = 949990671;
    ++v4;
  }
  while (v4 != 3);
  sub_190555CD4(a1 + 20, (uint64_t)v7);
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 3668) = 0;
  *(void *)(a1 + 366dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
  *(_DWORD *)(a1 + 3676) = 0;
  *(unsigned char *)(a1 + 3648) = 1;
  *(void *)(a1 + 3716) = 0;
  *(_DWORD *)(a1 + 3724) = 0;
  *(void *)(a1 + 3728) = 0xBF8000003F800000;
  if (qword_1E929D8D8 != -1) {
    dispatch_once(&qword_1E929D8D8, &unk_1EDFD2C20);
  }
  uint8x8_t v5 = qword_1E929D8E0;
  if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_INFO))
  {
    buf.i16[0] = 0;
    _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_INFO, "[CMHeadToHeadsetAttitudeEstimator]:[reset] Reset.", (uint8_t *)&buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2C20);
    }
    unint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CMHeadToHeadsetAttitudeEstimator::reset()", "CoreLocation: %s\n", v6);
    if (v6 != (char *)&buf) {
      free(v6);
    }
  }
}

void sub_1905E1798(uint64_t a1, float32x2_t *a2, float32x4_t a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_5;
  }
  sub_1904CF4AC(a2, a1 + 3736, (float32x4_t *)buf, a3);
  a3.f32[0] = sub_1904CF8B4((float32x4_t *)buf);
  uint64_t v5 = 0;
  unsigned __int32 v18 = a3.i32[0];
  unint64_t v19 = __PAIR64__(v7, v6);
  a3.i64[0] = 0;
  do
  {
    a3.f32[0] = a3.f32[0] + (float)(*(float *)((char *)&v18 + v5) * *(float *)((char *)&v18 + v5));
    v5 += 4;
  }
  while (v5 != 12);
  a3.f32[0] = sqrtf(a3.f32[0]);
  if (a3.f32[0] >= 0.000001)
  {
LABEL_5:
    if ((float32x2_t *)(a1 + 3736) != a2)
    {
      a3 = *(float32x4_t *)a2->f32;
      *(_OWORD *)(a1 + 3736) = *(_OWORD *)a2->f32;
    }
    sub_1905E1560(a1, a3);
    *(unsigned char *)(a1 + 16) = 1;
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD2C20);
    }
    int v8 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_INFO))
    {
      double v9 = *(float *)a1;
      double v10 = *(float *)(a1 + 4);
      double v11 = *(float *)(a1 + 8);
      double v12 = *(float *)(a1 + 12);
      *(_DWORD *)float32x4_t buf = 134349824;
      double v27 = v9;
      __int16 v28 = 2050;
      double v29 = v10;
      __int16 v30 = 2050;
      double v31 = v11;
      __int16 v32 = 2050;
      double v33 = v12;
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_INFO, "[CMHeadToHeadsetAttitudeEstimator]:[setDefaultQHeadToHeadset] Default qFB: %{public}.7f %{public}.7f %{public}.7f %{public}.7f", buf, 0x2Au);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2C20);
      }
      *(double *)&unint64_t v13 = *(float *)a1;
      double v14 = *(float *)(a1 + 4);
      double v15 = *(float *)(a1 + 8);
      double v16 = *(float *)(a1 + 12);
      unsigned __int32 v18 = 134349824;
      unint64_t v19 = v13;
      __int16 v20 = 2050;
      double v21 = v14;
      __int16 v22 = 2050;
      double v23 = v15;
      __int16 v24 = 2050;
      double v25 = v16;
      BOOL v17 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CMHeadToHeadsetAttitudeEstimator::setDefaultQHeadToHeadset(const CMOQuaternion &)", "CoreLocation: %s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
}

void sub_1905E1A34(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, double a5)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 16)) {
    return;
  }
  uint64_t v8 = *(unsigned __int16 *)(a1 + 58);
  if (*(_WORD *)(a1 + 58))
  {
    uint64_t v9 = a1 + 64;
    uint64_t v10 = *(unsigned __int16 *)(a1 + 56);
    unint64_t v11 = v8 + v10 - 1;
    unint64_t v12 = *(unsigned int *)(a1 + 60);
    if (v11 >= v12) {
      uint64_t v13 = *(unsigned int *)(a1 + 60);
    }
    else {
      uint64_t v13 = 0;
    }
    if (*(void *)(v9 + 56 * (v11 - v13)) >= a4)
    {
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD2C20);
      }
      double v14 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_ERROR))
      {
        unint64_t v15 = *(unsigned __int16 *)(a1 + 56) + (unint64_t)*(unsigned __int16 *)(a1 + 58) - 1;
        unint64_t v16 = *(unsigned int *)(a1 + 60);
        if (v15 < v16) {
          unint64_t v16 = 0;
        }
        uint64_t v17 = *(void *)(v9 + 56 * (v15 - v16));
        *(_DWORD *)float32x4_t buf = 134349312;
        *(void *)&uint8_t buf[4] = v17;
        __int16 v86 = 2050;
        unint64_t v87 = a4;
        _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_ERROR, "[CMHeadToHeadsetAttitudeEstimator]:[feedIMUData] Backwards or repeated IMU timestamp. Previous: %{public}llu us, this: %{public}llu us", buf, 0x16u);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD2C20);
        }
        unint64_t v18 = *(unsigned __int16 *)(a1 + 56) + (unint64_t)*(unsigned __int16 *)(a1 + 58) - 1;
        unint64_t v19 = *(unsigned int *)(a1 + 60);
        if (v18 < v19) {
          unint64_t v19 = 0;
        }
        uint64_t v20 = *(void *)(v9 + 56 * (v18 - v19));
        LODWORD(v81[0]) = 134349312;
        *(void *)((char *)v81 + 4) = v20;
        WORD6(v81[0]) = 2050;
        *(void *)((char *)v81 + 14) = a4;
        double v21 = (unsigned char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "void CMHeadToHeadsetAttitudeEstimator::feedIMUData(const CMRelDM::IMUData &, const CMRelDM::IMUData &, const double, const uint64_t)", "CoreLocation: %s\n");
LABEL_69:
        if (v21 != buf) {
          free(v21);
        }
        return;
      }
      return;
    }
  }
  else
  {
    unint64_t v12 = *(unsigned int *)(a1 + 60);
    uint64_t v10 = *(unsigned __int16 *)(a1 + 56);
  }
  long long v22 = *(_OWORD *)(a2 + 56);
  long long v23 = *(_OWORD *)(a3 + 7);
  long long v79 = v23;
  long long v80 = v22;
  uint64_t v24 = *a3;
  uint64_t v77 = *a3;
  int v25 = *((_DWORD *)a3 + 2);
  int v78 = v25;
  unint64_t v26 = v10 + v8;
  if (v26 >= v12) {
    unint64_t v27 = v12;
  }
  else {
    unint64_t v27 = 0;
  }
  uint64_t v28 = a1 + 56 * (v26 - v27);
  *(void *)(v28 + 64) = a4;
  *(_OWORD *)(v28 + 72) = v22;
  *(_OWORD *)(v28 + 88) = v23;
  *(_DWORD *)(v28 + 112) = v25;
  *(void *)(v28 + 104) = v24;
  unsigned int v29 = *(unsigned __int16 *)(a1 + 58);
  if (v12 <= v29)
  {
    unint64_t v30 = *(unsigned __int16 *)(a1 + 56) + 1;
    if (v30 < v12) {
      LOWORD(v12) = 0;
    }
    *(_WORD *)(a1 + 56) = v30 - v12;
  }
  else
  {
    *(_WORD *)(a1 + 58) = v29 + 1;
  }
  uint64_t v31 = 0;
  float v32 = 0.0;
  do
  {
    float v32 = v32 + (float)(*(float *)(a2 + v31) * *(float *)(a2 + v31));
    v31 += 4;
  }
  while (v31 != 12);
  *(_DWORD *)float32x4_t buf = sqrtf(v32);
  sub_19042D76C(a1 + 3648, (float *)buf);
  uint64_t v33 = a1 + 20;
  float v34 = sub_1905E2F70(a1 + 20, 0, 0);
  for (unint64_t i = 1; i != 3; ++i)
    float v34 = v34 + sub_1905E2F70(a1 + 20, i, i);
  if (v34 < 0.27416)
  {
    unint64_t v36 = 0;
    float v37 = a5;
    float v72 = v37;
    int v82 = 0;
    memset(v81, 0, sizeof(v81));
    do
    {
      *(_DWORD *)sub_190448B30((uint64_t)v81, v36, v36) = 1065353216;
      ++v36;
    }
    while (v36 != 3);
    unint64_t v38 = 0;
    v75[0] = v81[0];
    v75[1] = v81[1];
    int v76 = v82;
    do
      *(_DWORD *)sub_19042D844((uint64_t)buf, v38++) = 1008981770;
    while (v38 != 3);
    unint64_t v39 = 0;
    float32x2_t v73 = vmul_n_f32(*(float32x2_t *)buf, v72);
    float v74 = *(float *)&buf[8] * v72;
    uint64_t v40 = a1 + 32;
    do
    {
      unint64_t v41 = 2;
      do
      {
        for (unint64_t j = 0; j != v41; ++j)
        {
          float v43 = *(float *)sub_190448B30((uint64_t)v81, v39, j);
          float v44 = *(float *)sub_190556B18(v40, j, v41);
          uint64_t v45 = (float *)sub_190448B30((uint64_t)v81, v39, v41);
          *uint64_t v45 = *v45 + (float)(v43 * v44);
        }
        --v41;
      }
      while (v41);
      ++v39;
    }
    while (v39 != 3);
    for (unint64_t k = 2; ; --k)
    {
      unint64_t v47 = 0;
      v88[k] = 0.0;
      float v48 = 0.0;
      do
      {
        float v49 = *(float *)sub_190448B30((uint64_t)v81, k, v47);
        float v50 = v49 * *(float *)sub_190448B30((uint64_t)v81, k, v47);
        float v48 = v48 + (float)(v50 * *(float *)sub_190556E74(v33, v47));
        v88[k] = v48;
        ++v47;
      }
      while (v47 != 3);
      for (unint64_t m = 0; m != 3; ++m)
      {
        float v52 = *(float *)sub_190448B30((uint64_t)v75, k, m);
        float v53 = v52 * *(float *)sub_190448B30((uint64_t)v75, k, m);
        float v48 = v48 + (float)(v53 * sub_190448408((uint64_t)&v73, m));
        v88[k] = v48;
      }
      if (v48 <= 0.0) {
        break;
      }
      if (!k)
      {
        do
        {
          float v71 = v88[k];
          *(float *)sub_190556E74(v33, k++) = v71;
        }
        while (k != 3);
        return;
      }
      for (unint64_t n = 0; n != k; ++n)
      {
        unint64_t v55 = 0;
        float v56 = 0.0;
        do
        {
          float v57 = *(float *)sub_190448B30((uint64_t)v81, n, v55);
          float v58 = v57 * *(float *)sub_190556E74(v33, v55);
          float v56 = v56 + (float)(v58 * *(float *)sub_190448B30((uint64_t)v81, k, v55++));
        }
        while (v55 != 3);
        for (iunint64_t i = 0; ii != 3; ++ii)
        {
          float v60 = *(float *)sub_190448B30((uint64_t)v75, n, ii);
          float v61 = v60 * sub_190448408((uint64_t)&v73, ii);
          float v56 = v56 + (float)(v61 * *(float *)sub_190448B30((uint64_t)v75, k, ii));
        }
        unint64_t v62 = 0;
        *(float *)sub_190556B18(v40, n, k) = v56 / v48;
        do
        {
          float v63 = *(float *)sub_190556B18(v40, n, k);
          float v64 = *(float *)sub_190448B30((uint64_t)v81, k, v62);
          unint64_t v65 = (float *)sub_190448B30((uint64_t)v81, n, v62);
          *unint64_t v65 = *v65 - (float)(v63 * v64);
          ++v62;
        }
        while (v62 != 3);
        for (junint64_t j = 0; jj != 3; ++jj)
        {
          float v67 = *(float *)sub_190556B18(v40, n, k);
          float v68 = *(float *)sub_190448B30((uint64_t)v75, k, jj);
          uint64_t v69 = (float *)sub_190448B30((uint64_t)v75, n, jj);
          *uint64_t v69 = *v69 - (float)(v67 * v68);
        }
      }
    }
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3100);
    }
    double v70 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)float32x4_t buf = 134217984;
      *(void *)&uint8_t buf[4] = k;
      _os_log_impl(&dword_1902AF000, v70, OS_LOG_TYPE_DEBUG, "D[%zu] <= 0, matrix ! positive definite", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3100);
      }
      int v83 = 134217984;
      unint64_t v84 = k;
      double v21 = (unsigned char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CMFactoredMatrix<float, 3>::thorntonTemporalUpdate(CMMatrix<T, N, N> &, CMMatrix<T, N, M> &, const CMVector<T, M> &) [T = float, N = 3, M = 3UL]", "CoreLocation: %s\n");
      goto LABEL_69;
    }
  }
}

void sub_1905E224C(uint64_t a1, float32x2_t *a2, unint64_t a3, float a4)
{
  unint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    BOOL v5 = v4 >= a3;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5 && *(unsigned char *)(a1 + 16) && *(_WORD *)(a1 + 58))
  {
    float v8 = (float)a3;
    uint64_t v9 = a1 + 64;
    unint64_t v10 = *(unsigned __int16 *)(a1 + 58) + (unint64_t)*(unsigned __int16 *)(a1 + 56) - 1;
    unint64_t v11 = *(unsigned int *)(a1 + 60);
    if (v10 < v11) {
      unint64_t v11 = 0;
    }
    if ((float)((float)*(unint64_t *)(v9 + 56 * (v10 - v11)) + 5000.0) >= v8
      && (float)(v8 + 5000.0) >= (float)*(unint64_t *)(v9 + 56 * *(unsigned __int16 *)(a1 + 56)))
    {
      *(float *)(a1 + 3732) = a4;
      sub_1905E232C(a1, a3, a2);
      if ((float32x2_t *)(a1 + 3716) != a2) {
        *(_OWORD *)(a1 + 3716) = *(_OWORD *)a2->f32;
      }
      *(void *)(a1 + 48) = a3;
    }
  }
}

void sub_1905E232C(uint64_t a1, unint64_t a2, float32x2_t *a3)
{
  unsigned int v6 = (unsigned __int16 *)(a1 + 56);
  uint64_t v7 = a1 + 64;
  uint64_t v8 = *(unsigned __int16 *)(a1 + 58);
  unint64_t v9 = *(unsigned __int16 *)(a1 + 56) + v8 - 1;
  unint64_t v10 = *(unsigned int *)(a1 + 60);
  if (v9 < v10) {
    unint64_t v10 = 0;
  }
  if (*(void *)(v7 + 56 * (v9 - v10)) >= a2)
  {
    if (v8 == 1 || *(void *)(v7 + 56 * *(unsigned __int16 *)(a1 + 56)) > a2) {
      goto LABEL_16;
    }
    unint64_t v13 = 0;
    unsigned __int8 v14 = 0;
    do
    {
      if (*(void *)sub_1905E3230(v6, v13) >= a2) {
        break;
      }
      unint64_t v13 = ++v14;
    }
    while ((unint64_t)*(unsigned __int16 *)(a1 + 58) - 1 > v14);
    if (!v14)
    {
LABEL_16:
      unsigned __int8 v11 = 0;
    }
    else
    {
      unint64_t v15 = a2 - *(void *)sub_1905E3230(v6, v14 - 1);
      if (v15 >= *(void *)sub_1905E3230(v6, v13) - a2) {
        unsigned __int8 v11 = v14;
      }
      else {
        unsigned __int8 v11 = v14 - 1;
      }
    }
  }
  else
  {
    unsigned __int8 v11 = v8 - 1;
  }
  unint64_t v16 = v11;
  uint64_t v17 = (float *)(sub_1905E3230(v6, v11) + 8);
  uint64_t v18 = sub_1905E3230(v6, v16);
  sub_1905E2508(a1, v19, v17, (float *)(v18 + 24), (float *)a3);
  uint64_t v20 = (float *)(sub_1905E3230(v6, v16) + 40);

  sub_1905E29C0(a1, a2, a3, v20, v21);
}

float sub_1905E24A8(float32x2_t *a1, float32x4_t a2)
{
  sub_1904CF4AC(a1, (uint64_t)&a1[467], &v8, a2);
  float v2 = sub_1904CF8B4(&v8);
  uint64_t v3 = 0;
  *(float *)unint64_t v9 = v2;
  v9[1] = v4;
  void v9[2] = v5;
  float v6 = 0.0;
  do
  {
    float v6 = v6 + (float)(*(float *)&v9[v3] * *(float *)&v9[v3]);
    ++v3;
  }
  while (v3 != 3);
  return sqrtf(v6);
}

void sub_1905E2508(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5)
{
  float v8 = sub_1904CF514(a4);
  float v11 = sub_1904CF73C((float *)a1, v8, v9, v10);
  float v13 = v12;
  float v15 = v14;
  float v64 = (float)(180.0 - *(float *)(a1 + 3732)) * -0.017453;
  uint64_t v65 = 0;
  *(double *)v16.i64 = sub_1904CF7FC(&v63, &v64);
  *(double *)v17.i64 = sub_1904CF3F4((uint64_t)&v63, a5, &v62, v16);
  __int32 v18 = v62.i32[3];
  v17.i32[0] = v62.i32[2];
  float v19 = -v62.f32[2];
  *(float *)&uint64_t v51 = -v62.f32[0];
  *((float *)&v51 + 1) = -v62.f32[1];
  v73.f32[0] = -v62.f32[0];
  v73.f32[1] = -v62.f32[1];
  v73.f32[2] = -v62.f32[2];
  v73.i32[3] = v62.i32[3];
  sub_1902D9ACC(&v73, v17);
  float v20 = sub_1904CF514(a3);
  float v23 = sub_1904CF73C(v73.f32, v20, v21, v22);
  float v25 = v24;
  float v27 = v26;
  uint64_t v28 = 0;
  v61[0] = v23 - v11;
  v61[1] = v24 - v13;
  v61[2] = v26 - v15;
  LODWORD(v56) = 0;
  *((float *)&v56 + 1) = v15;
  *((float *)&v56 + 2) = -v13;
  *((float *)&v56 + 3) = -v15;
  LODWORD(v57) = 0;
  *(void *)((char *)&v57 + 4) = __PAIR64__(LODWORD(v13), LODWORD(v11));
  *((float *)&v57 + 3) = -v11;
  int v58 = 0;
  do
  {
    *(float *)((char *)&v56 + v28) = *(float *)((char *)&v56 + v28) + *(float *)((char *)&v56 + v28);
    v28 += 4;
  }
  while (v28 != 36);
  v59[0] = v56;
  v59[1] = v57;
  uint64_t v29 = *(void *)(a1 + 20);
  int v60 = v58;
  uint64_t v52 = v29;
  int v53 = *(_DWORD *)(a1 + 28);
  uint64_t v54 = *(void *)(a1 + 32);
  int v55 = *(_DWORD *)(a1 + 40);
  memset(&v73, 0, 108);
  v68.i64[0] = v51;
  v68.i64[1] = __PAIR64__(v18, LODWORD(v19));
  sub_1902D9ACC(&v68, (float32x4_t)HIDWORD(v51));
  sub_1904D08E8(v68.f32, (float *)v71, 1.0);
  sub_1905E2EB0((uint64_t)v71, (uint64_t)&v73, 0);
  sub_1904D08E8((float *)a1, (float *)v71, 1.0);
  sub_1905E2EB0((uint64_t)v71, (uint64_t)&v73, 3);
  uint64_t v30 = 0;
  v68.i32[0] = 0;
  v68.f32[1] = v27;
  v68.f32[2] = -v25;
  v68.f32[3] = -v27;
  LODWORD(v69) = 0;
  *(void *)((char *)&v69 + 4) = __PAIR64__(LODWORD(v25), LODWORD(v23));
  *((float *)&v69 + 3) = -v23;
  int v70 = 0;
  do
  {
    v68.f32[v30] = v68.f32[v30] + v68.f32[v30];
    ++v30;
  }
  while (v30 != 9);
  v71[0] = v68;
  v71[1] = v69;
  int v72 = v70;
  sub_1905E2EB0((uint64_t)v71, (uint64_t)&v73, 6);
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_1EB3BF7B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(qword_1EB3BF7B0))
  {
    xmmword_1EB3BF7C0 = (__int128)vdupq_n_s32(0x3D20D97Cu);
    unk_1EB3BF7D0 = xmmword_19060D0C0;
    dword_1EB3BF7E0 = 1040583314;
    __cxa_guard_release(qword_1EB3BF7B0);
  }
  for (unint64_t i = 0; i != 3; ++i)
  {
    float v32 = sub_190479D80((uint64_t)&v73, i, 0) * *(float *)&xmmword_1EB3BF7C0;
    *(float *)sub_19042D844((uint64_t)v71, i) = v32;
    for (unint64_t j = 1; j != 9; ++j)
    {
      float v34 = sub_190479D80((uint64_t)&v73, i, j);
      float v35 = sub_190473BE4((uint64_t)&xmmword_1EB3BF7C0, j);
      unint64_t v36 = (float *)sub_19042D844((uint64_t)v71, i);
      *unint64_t v36 = *v36 + (float)(v34 * v35);
    }
  }
  unint64_t v37 = 0;
  uint64_t v66 = *(void *)&v71[0];
  int v67 = DWORD2(v71[0]);
  do
  {
    float v38 = sub_190448408((uint64_t)&v66, v37);
    float v39 = v38 * sub_190448408((uint64_t)&v66, v37);
    *(float *)sub_19042D844((uint64_t)v71, v37++) = v39;
  }
  while (v37 != 3);
  v73.i64[0] = *(void *)&v71[0];
  v73.i32[2] = DWORD2(v71[0]);
  sub_190556578((float *)(a1 + 20), (uint64_t)v59, (uint64_t)&v73, (uint64_t)v61);
  uint64_t v43 = 0;
  *(void *)&v71[0] = __PAIR64__(LODWORD(v41), v40.u32[0]);
  *((float *)v71 + 2) = v42;
  float v44 = 0.0;
  do
  {
    float v44 = v44 + (float)(*(float *)((char *)v71 + v43) * *(float *)((char *)v71 + v43));
    v43 += 4;
  }
  while (v43 != 12);
  if ((float)(sqrtf(v44) * 57.296) > 15.0)
  {
    *(void *)(a1 + 2dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = v52;
    *(_DWORD *)(a1 + 28) = v53;
    *(void *)(a1 + 32) = v54;
    *(_DWORD *)(a1 + 4dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = v55;
    __asm { FMOV            V2.2S, #16.0 }
    *(float32x2_t *)v68.f32 = vmul_f32(*(float32x2_t *)v73.f32, _D2);
    v68.f32[2] = v73.f32[2] * 16.0;
    sub_190556578((float *)(a1 + 20), (uint64_t)v59, (uint64_t)&v68, (uint64_t)v61);
  }
  float v50 = (float)((float)(v15 * v42) + (float)(v41 * v13)) + (float)(v40.f32[0] * v11);
  *(float *)float v71 = v40.f32[0] - (float)(v11 * v50);
  *((float *)v71 + 1) = v41 - (float)(v13 * v50);
  v40.f32[0] = v42 - (float)(v15 * v50);
  *((float *)v71 + 2) = v40.f32[0];
  sub_1905E2D94((float *)a1, (unsigned __int32 *)v71, v40);
}

void sub_1905E29C0(uint64_t a1, unint64_t a2, float32x2_t *a3, float *a4, float32x4_t a5)
{
  if (*(unsigned char *)(a1 + 16) && *(_DWORD *)(a1 + 3680) == *(unsigned __int16 *)(a1 + 3678))
  {
    uint64_t v9 = a1 + 3648;
    if (*(unsigned char *)(a1 + 3648)) {
      sub_190430068(v9);
    }
    if (*(float *)(a1 + 3652) <= 0.017453)
    {
      uint64_t v10 = *(void *)(a1 + 48);
      if (v10)
      {
        float v11 = (float)(a2 - v10) * 0.000001;
        if (v11 <= 0.25)
        {
          __int32 v12 = a3[1].i32[1];
          a5.f32[0] = -a3[1].f32[0];
          *(float32x2_t *)v64[0].f32 = vneg_f32(*a3);
          v64[0].i64[1] = __PAIR64__(v12, a5.u32[0]);
          float32x4_t v13 = sub_1902D9ACC(v64, a5);
          sub_1904CF3F4((uint64_t)v64, (float *)(a1 + 3716), &v68, v13);
          float v14 = sub_1904CF8B4(&v68) / v11;
          float v16 = v15 / v11;
          float v18 = v17 / v11;
          *(float *)int v67 = v14;
          *(float *)&v67[1] = v16;
          *(float *)&v67[2] = v18;
          float v19 = (float)a2;
          uint64_t v20 = a1 + 64;
          unint64_t v21 = *(unsigned __int16 *)(a1 + 56) + (unint64_t)*(unsigned __int16 *)(a1 + 58) - 1;
          unint64_t v22 = *(unsigned int *)(a1 + 60);
          if (v21 < v22) {
            unint64_t v22 = 0;
          }
          if ((float)((float)*(unint64_t *)(v20 + 56 * (v21 - v22)) + 50000.0) >= v19)
          {
            unint64_t v23 = *(void *)(v20 + 56 * *(unsigned __int16 *)(a1 + 56));
            if (v23 < 0xC351 || (float)((float)v23 + -50000.0) <= v19)
            {
              uint64_t v24 = 0;
              float v25 = 0.0;
              do
              {
                float v25 = v25 + (float)(a4[v24] * a4[v24]);
                ++v24;
              }
              while (v24 != 3);
              if (sqrtf(v25) >= 0.17453)
              {
                uint64_t v26 = 0;
                float v27 = 0.0;
                do
                {
                  float v27 = v27 + (float)(a4[v26] * a4[v26]);
                  ++v26;
                }
                while (v26 != 3);
                uint64_t v28 = 0;
                float v29 = sqrtf(v27) * 0.1;
                float v30 = 0.0;
                do
                {
                  float v30 = v30 + (float)(a4[v28] * a4[v28]);
                  ++v28;
                }
                while (v28 != 3);
                uint64_t v31 = 0;
                float v32 = 0.0;
                do
                {
                  float v32 = v32 + (float)(*(float *)&v67[v31] * *(float *)&v67[v31]);
                  ++v31;
                }
                while (v31 != 3);
                if (v29 < 0.087266) {
                  float v29 = 0.087266;
                }
                if (vabds_f32(sqrtf(v30), sqrtf(v32)) <= v29)
                {
                  float v33 = sub_1904CF73C((float *)a1, *a4, a4[1], a4[2]);
                  uint64_t v34 = 0;
                  v66[0] = v14 - v33;
                  v66[1] = v16 - *(float *)&v35;
                  v66[2] = v18 - v36;
                  v61.i32[0] = 0;
                  v61.f32[1] = v36;
                  v61.f32[2] = -*(float *)&v35;
                  v61.f32[3] = -v36;
                  v62.i32[0] = 0;
                  *(uint64_t *)((char *)v62.i64 + 4) = __PAIR64__(v35, LODWORD(v33));
                  v62.f32[3] = -v33;
                  int v63 = 0;
                  do
                  {
                    v61.f32[v34] = v61.f32[v34] + v61.f32[v34];
                    ++v34;
                  }
                  while (v34 != 9);
                  v64[0] = v61;
                  v64[1] = v62;
                  int v65 = v63;
                  float32x2_t v59 = (float32x2_t)vdup_n_s32(0x3E8C5E23u);
                  uint64_t v37 = *(void *)(a1 + 20);
                  float v60 = 0.27416;
                  uint64_t v55 = v37;
                  uint64_t v38 = *(void *)(a1 + 32);
                  int v56 = *(_DWORD *)(a1 + 28);
                  uint64_t v57 = v38;
                  int v58 = *(_DWORD *)(a1 + 40);
                  sub_190556578((float *)(a1 + 20), (uint64_t)v64, (uint64_t)&v59, (uint64_t)v66);
                  uint64_t v39 = 0;
                  __int32 v52 = v42.i32[0];
                  int v53 = v40;
                  int v54 = v41;
                  v42.i64[0] = 0;
                  do
                  {
                    v42.f32[0] = v42.f32[0] + (float)(*(float *)((char *)&v52 + v39) * *(float *)((char *)&v52 + v39));
                    v39 += 4;
                  }
                  while (v39 != 12);
                  v42.f32[0] = sqrtf(v42.f32[0]) * 57.296;
                  if (v42.f32[0] > 15.0)
                  {
                    *(void *)(a1 + 2dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = v55;
                    *(_DWORD *)(a1 + 28) = v56;
                    *(void *)(a1 + 32) = v57;
                    *(_DWORD *)(a1 + 4dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = v58;
                    __asm { FMOV            V2.2S, #16.0 }
                    float32x2_t v50 = vmul_f32(v59, _D2);
                    float v51 = v60 * 16.0;
                    sub_190556578((float *)(a1 + 20), (uint64_t)v64, (uint64_t)&v50, (uint64_t)v66);
                    __int32 v52 = v42.i32[0];
                    int v53 = v48;
                    int v54 = v49;
                  }
                  sub_1905E2D94((float *)a1, (unsigned __int32 *)&v52, v42);
                }
              }
            }
          }
        }
      }
    }
  }
}

double sub_1905E2D94(float *a1, unsigned __int32 *a2, float32x4_t a3)
{
  uint64_t v4 = 0;
  a3.i32[0] = *a2;
  unsigned __int32 v5 = a2[1];
  unsigned __int32 v6 = a2[2];
  v19[0] = *a2;
  v19[1] = v5;
  void v19[2] = v6;
  float v7 = 0.0;
  do
  {
    float v7 = v7 + (float)(*(float *)&v19[v4] * *(float *)&v19[v4]);
    ++v4;
  }
  while (v4 != 3);
  uint64_t v8 = 0;
  float v9 = 0.0;
  do
  {
    float v9 = v9 + (float)(*(float *)&v19[v8] * *(float *)&v19[v8]);
    ++v8;
  }
  while (v8 != 3);
  float v10 = 1.0 - (float)(sqrtf(v7) * sqrtf(v9));
  float v11 = 0.0;
  if (v10 > 0.0)
  {
    for (uint64_t i = 0; i != 3; ++i)
      float v11 = v11 + (float)(*(float *)&v19[i] * *(float *)&v19[i]);
    uint64_t v13 = 0;
    float v14 = 0.0;
    do
    {
      float v14 = v14 + (float)(*(float *)&v19[v13] * *(float *)&v19[v13]);
      ++v13;
    }
    while (v13 != 3);
    float v11 = 1.0 - (float)(sqrtf(v11) * sqrtf(v14));
  }
  v18.i64[0] = __PAIR64__(v5, a3.u32[0]);
  a3.f32[0] = sqrtf(v11);
  v18.i64[1] = __PAIR64__(a3.u32[0], v6);
  float32x4_t v15 = sub_1902D9ACC(&v18, a3);
  sub_1904CF3F4((uint64_t)&v18, a1, &v17, v15);
  double result = *(double *)v17.i64;
  *(float32x4_t *)a1 = v17;
  return result;
}

float *sub_1905E2EB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (unint64_t i = 0; i != 3; ++i)
  {
    for (unint64_t j = 0; j != 3; ++j)
    {
      float v8 = sub_1904741A8(a1, i, j);
      double result = (float *)sub_190474508(a2, i, a3 + j);
      *double result = v8 + *result;
    }
  }
  return result;
}

os_log_t sub_1905E2F40()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "RelativeDeviceMotion");
  qword_1E929D8E0 = (uint64_t)result;
  return result;
}

float sub_1905E2F70(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 <= a3) {
    unint64_t v3 = a3;
  }
  else {
    unint64_t v3 = a2;
  }
  float v4 = 0.0;
  if (v3 <= 2)
  {
    uint64_t v8 = a1 + 12;
    do
    {
      float v9 = 1.0;
      float v10 = 1.0;
      if (a3 != v3)
      {
        float v10 = 0.0;
        if (v3 > a3) {
          float v10 = sub_1905E3044(v8, a3, v3);
        }
      }
      if (a2 != v3)
      {
        float v9 = 0.0;
        if (v3 > a2) {
          float v9 = sub_1905E3044(v8, a2, v3);
        }
      }
      float v4 = v4 + (float)((float)(v9 * *(float *)(a1 + 4 * v3++)) * v10);
    }
    while (v3 != 3);
  }
  return v4;
}

float sub_1905E3044(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a3 <= a2)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3100);
    }
    float v7 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)float32x4_t buf = 134218240;
      unint64_t v10 = a3;
      __int16 v11 = 2048;
      unint64_t v12 = a2;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: col > row, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMFactoredMatrix.h, line 232,invalid element %zu <= %zu.", buf, 0x16u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3100);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "T CMFactoredMatrix<float, 3>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) const [T = float, N = 3]", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  return *(float *)(a1 + 4 * (a2 + (((a3 - 1) * a3) >> 1)));
}

uint64_t sub_1905E3230(unsigned __int16 *a1, unint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3100);
    }
    float v7 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)float32x4_t buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3100);
      }
      float v9 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "const T &CMQueue<CMHeadToHeadsetAttitudeEstimator::SrcAuxIMUDataPair>::operator[](const size_t) const [T = CMHeadToHeadsetAttitudeEstimator::SrcAuxIMUDataPair]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[28 * (v4 - v5) + 4];
}

uint64_t sub_1905E37CC()
{
  if (qword_1EB3BF7F0 != -1) {
    dispatch_once(&qword_1EB3BF7F0, &unk_1EDFD2C40);
  }
  return qword_1EB3BF7E8;
}

void sub_1905E3810()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if ((sub_1902CD6B0() & 4) != 0) {
    operator new();
  }
  if (qword_1EB3BE818 != -1) {
    dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
  }
  id v0 = qword_1EB3BE810;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE810, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)float32x4_t buf = 0;
    _os_log_impl(&dword_1902AF000, v0, OS_LOG_TYPE_DEFAULT, "#Warning Gesture service is not available on this platform", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE818 != -1) {
      dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
    }
    int v1 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "static void CLGestureService::create()", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_1905E3C8C(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x10F1C40D044DD44);
  _Unwind_Resume(a1);
}

uint64_t sub_1905E3CD4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1EB3BF808 != -1) {
    dispatch_once(&qword_1EB3BF808, &unk_1EDFD2180);
  }
  uint64_t v5 = 0x30000FF0CLL;
  char v6 = 0;
  sub_19043791C((void *)qword_1EB3BF800, (uint64_t)&v5, (uint64_t *)&v7);
  long long v2 = v7;
  long long v7 = 0uLL;
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  *(_OWORD *)(v1 + 4dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = v2;
  if (v3)
  {
    sub_1902D8B58(v3);
    if (*((void *)&v7 + 1)) {
      sub_1902D8B58(*((std::__shared_weak_count **)&v7 + 1));
    }
  }
  sub_1902CD864(*(void *)(v1 + 40), (uint64_t)sub_1905E3DC8, v1);
  sub_1905D5E88(*(void *)(v1 + 40), (const char *)sub_1905E4368, v1);
  sub_1905D53A8(*(void *)(v1 + 40), (uint64_t)sub_1905E4368, v1);
  return sub_1905D4D98(*(void *)(v1 + 40), (uint64_t)sub_1905E4368, v1);
}

void sub_1905E3DC8()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  IOHIDEventGetVendorDefinedData();
  if (qword_1E929D700 != -1) {
    dispatch_once(&qword_1E929D700, &unk_1EDFC37A8);
  }
  id v0 = qword_1E929D6F0;
  if (os_log_type_enabled((os_log_t)qword_1E929D6F0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)float32x4_t buf = 0;
    _os_log_impl(&dword_1902AF000, v0, OS_LOG_TYPE_FAULT, "Empty payload", buf, 2u);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D700 != -1) {
      dispatch_once(&qword_1E929D700, &unk_1EDFC37A8);
    }
    LOWORD(__dst) = 0;
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "static void CLGestureService::onGestureServiceIohidEvent(void *, void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_1905E4368(uint64_t *a1)
{
  sub_1905E5140(a1);

  sub_1905E4448(a1);
}

void *sub_1905E43A0(void *a1)
{
  *a1 = &unk_1EDFC8B50;
  long long v2 = (std::__shared_weak_count *)a1[6];
  a1[5] = 0;
  a1[6] = 0;
  if (v2)
  {
    sub_1902D8B58(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[6];
    if (v3) {
      sub_1902D8B58(v3);
    }
  }

  return sub_1904DC240(a1);
}

void sub_1905E4410(void *a1)
{
  sub_1905E43A0(a1);

  JUMPOUT(0x192FCC980);
}

void sub_1905E4448(uint64_t *a1)
{
  kern_return_t v16;
  mach_error_t v17;
  NSObject *v18;
  char *v19;
  NSObject *v20;
  uint8_t *v21;
  NSObject *v22;
  IOCFPlugInInterface **v23;
  HRESULT (__cdecl *QueryInterface)(void *, REFIID, LPVOID *);
  CFUUIDRef v25;
  CFUUIDBytes v26;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void v42[5];
  SInt32 theScore;
  uint64_t v44;
  IOCFPlugInInterface **theInterface;
  uint64_t valuePtr;
  int v47;
  unsigned char v48[18];
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  IOCFPlugInInterface **v52;
  __int16 v53;
  uint64_t v54;
  uint8_t buf[4];
  unsigned char v56[18];
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  IOCFPlugInInterface **v60;
  __int16 v61;
  uint64_t v62;
  uint64_t v63;

  int v63 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current != *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (qword_1EB3BE818 != -1) {
      dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
    }
    uint64_t v3 = qword_1EB3BE810;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE810, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)float32x4_t buf = 0;
      _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_FAULT, "openHidDriverInterface should be called from motion thread", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE818 != -1) {
        dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
      }
      LOWORD(v47) = 0;
      float v33 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "void CLGestureService::openHidDriverInterface()", "CoreLocation: %s\n", v33);
      if (v33 != (char *)buf) {
        free(v33);
      }
    }
    uint64_t v4 = sub_1902D6BD0();
    v42[0] = MEMORY[0x1E4F143A8];
    v42[1] = 3221225472;
    v42[2] = sub_1905E5138;
    v42[3] = &unk_1E568CF68;
    v42[4] = a1;
    sub_1902CDE98(v4, (uint64_t)v42);
    return;
  }
  if (!a1[5]) {
    return;
  }
  if (qword_1EB3BE818 != -1) {
    dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
  }
  uint64_t v5 = qword_1EB3BE810;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE810, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)float32x4_t buf = 0;
    _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_INFO, "Open hid driver interface", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE818 != -1) {
      dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
    }
    LOWORD(v47) = 0;
    uint64_t v34 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLGestureService::openHidDriverInterface()", "CoreLocation: %s\n", v34);
    if (v34 != (char *)buf) {
      free(v34);
    }
  }
  theInterface = 0;
  int valuePtr = 0;
  float v44 = 0;
  char v6 = (__IOHIDServiceClient *)sub_1902B8788(a1[5]);
  if (!v6)
  {
    if (qword_1EB3BE818 != -1) {
      dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
    }
    uint64_t v20 = qword_1EB3BE810;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE810, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)float32x4_t buf = 0;
      _os_log_impl(&dword_1902AF000, v20, OS_LOG_TYPE_INFO, "IoHidDevice is not ready!", buf, 2u);
    }
    if (!sub_1902D8400(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE818 != -1) {
      dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
    }
    LOWORD(v47) = 0;
    unint64_t v21 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLGestureService::openHidDriverInterface()", "CoreLocation: %s\n");
LABEL_40:
    if (v21 != buf) {
      free(v21);
    }
    return;
  }
  long long v7 = v6;
  CFNumberRef RegistryID = (const __CFNumber *)IOHIDServiceClientGetRegistryID(v6);
  CFNumberGetValue(RegistryID, kCFNumberSInt64Type, &valuePtr);
  theScore = 0;
  mach_port_t v9 = *MEMORY[0x1E4F2EEF0];
  CFDictionaryRef v10 = IORegistryEntryIDMatching(valuePtr);
  io_service_t MatchingService = IOServiceGetMatchingService(v9, v10);
  if (!MatchingService)
  {
    if (qword_1EB3BE818 != -1) {
      dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
    }
    unint64_t v22 = qword_1EB3BE810;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE810, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)float32x4_t buf = 0;
      _os_log_impl(&dword_1902AF000, v22, OS_LOG_TYPE_FAULT, "Service doesn't exist", buf, 2u);
    }
    if (!sub_1902D8400(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE818 != -1) {
      dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
    }
    LOWORD(v47) = 0;
    unint64_t v21 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "void CLGestureService::openHidDriverInterface()", "CoreLocation: %s\n");
    goto LABEL_40;
  }
  io_service_t v12 = MatchingService;
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
  CFUUIDRef v14 = CFUUIDGetConstantUUIDWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], 0x3Bu, 0xC5u, 0xCCu, 0x87u, 0x84u, 0x5Eu, 0x48u, 0xABu, 0xA9u, 0xC2u, 0x94u, 0x36u, 0, 0x1Bu, 0xA6u, 0x8Au);
  CFUUIDRef v15 = CFUUIDGetConstantUUIDWithBytes(0, 0xC2u, 0x44u, 0xE8u, 0x58u, 0x10u, 0x9Cu, 0x11u, 0xD4u, 0x91u, 0xD4u, 0, 0x50u, 0xE4u, 0xC6u, 0x42u, 0x6Fu);
  float v16 = IOCreatePlugInInterfaceForService(v12, v14, v15, &theInterface, &theScore);
  if (v16)
  {
    float32x4_t v17 = v16;
    if (qword_1EB3BE818 != -1) {
      dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
    }
    float32x4_t v18 = qword_1EB3BE810;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE810, OS_LOG_TYPE_FAULT))
    {
      float v19 = mach_error_string(v17);
      *(_DWORD *)float32x4_t buf = 136315138;
      *(void *)int v56 = v19;
      _os_log_impl(&dword_1902AF000, v18, OS_LOG_TYPE_FAULT, "Unable to create plugin interface %s", buf, 0xCu);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE818 != -1) {
        dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
      }
      unsigned int v35 = mach_error_string(v17);
      unint64_t v47 = 136315138;
      *(void *)int v48 = v35;
      float32_t v36 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "void CLGestureService::openHidDriverInterface()", "CoreLocation: %s\n", v36);
      if (v36 != (char *)buf) {
        free(v36);
      }
    }
    IOObjectRelease(v12);
    return;
  }
  IOObjectRelease(v12);
  unint64_t v23 = theInterface;
  QueryInterface = (*theInterface)->QueryInterface;
  float v25 = CFUUIDGetConstantUUIDWithBytes(v13, 0x6Eu, 0xBEu, 0xBAu, 0x6Eu, 9u, 0x1Eu, 0x45u, 0x2Eu, 0x82u, 0xEAu, 0x29u, 0x79u, 0x81u, 0x6Fu, 0xB1u, 0xB5u);
  uint64_t v26 = CFUUIDGetUUIDBytes(v25);
  if (((unsigned int (*)(IOCFPlugInInterface **, void, void, uint64_t *))QueryInterface)(v23, *(void *)&v26.byte0, *(void *)&v26.byte8, &v44))
  {
    if (qword_1EB3BE818 != -1) {
      dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
    }
    float v27 = qword_1EB3BE810;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE810, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)float32x4_t buf = 0;
      _os_log_impl(&dword_1902AF000, v27, OS_LOG_TYPE_FAULT, "Unable to set up query interface", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE818 != -1) {
        dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
      }
      LOWORD(v47) = 0;
      uint64_t v37 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "void CLGestureService::openHidDriverInterface()", "CoreLocation: %s\n", v37);
      if (v37 != (char *)buf) {
        free(v37);
      }
    }
LABEL_48:
    if (theInterface)
    {
      ((void (*)(IOCFPlugInInterface **))(*theInterface)->Release)(theInterface);
      IODestroyPlugInInterface(theInterface);
    }
    return;
  }
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)v44 + 64))(v44, 0))
  {
    if (qword_1EB3BE818 != -1) {
      dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
    }
    uint64_t v28 = qword_1EB3BE810;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE810, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)float32x4_t buf = 67240450;
      *(_DWORD *)int v56 = 0;
      *(_WORD *)&v56[4] = 2114;
      *(void *)&v56[6] = v7;
      _os_log_impl(&dword_1902AF000, v28, OS_LOG_TYPE_FAULT, "Unable to create plugin interface: kr:%{public}x service:%{public}@", buf, 0x12u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE818 != -1) {
        dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
      }
      unint64_t v47 = 67240450;
      *(_DWORD *)int v48 = 0;
      *(_WORD *)&v48[4] = 2114;
      *(void *)&void v48[6] = v7;
      uint64_t v38 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "void CLGestureService::openHidDriverInterface()", "CoreLocation: %s\n", v38);
      if (v38 != (char *)buf) {
        free(v38);
      }
    }
    if (v44) {
      (*(void (**)(uint64_t, void))(*(void *)v44 + 72))(v44, 0);
    }
    goto LABEL_48;
  }
  if (qword_1EB3BE818 != -1) {
    dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
  }
  float v29 = qword_1EB3BE810;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE810, OS_LOG_TYPE_INFO))
  {
    float v30 = a1[7];
    uint64_t v31 = a1[8];
    *(_DWORD *)float32x4_t buf = 134219008;
    *(void *)int v56 = valuePtr;
    *(_WORD *)&v56[8] = 2048;
    *(void *)&v56[10] = v30;
    uint64_t v57 = 2048;
    int v58 = v31;
    float32x2_t v59 = 2048;
    float v60 = theInterface;
    float32x4_t v61 = 2048;
    float32x4_t v62 = v44;
    _os_log_impl(&dword_1902AF000, v29, OS_LOG_TYPE_INFO, "Opened hid driver interface, registryID %llx, {cfPlugInInterface, hidDriverInterface} was then {%p,%p}, is now {%p,%p}", buf, 0x34u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE818 != -1) {
      dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
    }
    uint64_t v39 = a1[7];
    int v40 = a1[8];
    unint64_t v47 = 134219008;
    *(void *)int v48 = valuePtr;
    *(_WORD *)&v48[8] = 2048;
    *(void *)&v48[10] = v39;
    int v49 = 2048;
    float32x2_t v50 = v40;
    float v51 = 2048;
    __int32 v52 = theInterface;
    int v53 = 2048;
    int v54 = v44;
    int v41 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLGestureService::openHidDriverInterface()", "CoreLocation: %s\n", v41);
    if (v41 != (char *)buf) {
      free(v41);
    }
  }
  *(void *)(a1[5] + 8) = valuePtr;
  float v32 = v44;
  a1[7] = (uint64_t)theInterface;
  a1[8] = v32;
}

uint64_t sub_1905E5138(uint64_t a1)
{
  return sub_1905E4448(*(void *)(a1 + 32));
}

void sub_1905E5140(void *a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE818 != -1) {
    dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
  }
  long long v2 = qword_1EB3BE810;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE810, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)float32x4_t buf = 0;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_INFO, "Close hid driver interface", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE818 != -1) {
      dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
    }
    LOWORD(v19) = 0;
    CFAllocatorRef v13 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLGestureService::closeHidDriverInterface()", "CoreLocation: %s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current != *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (qword_1EB3BE818 != -1) {
      dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
    }
    uint64_t v4 = qword_1EB3BE810;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE810, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)float32x4_t buf = 0;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_FAULT, "closeHidDriverInterface should be called from motion thread", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE818 != -1) {
        dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
      }
      LOWORD(v19) = 0;
      CFUUIDRef v14 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "void CLGestureService::closeHidDriverInterface()", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    uint64_t v5 = sub_1902D6BD0();
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    void v18[2] = sub_1905E5660;
    void v18[3] = &unk_1E568CF68;
    v18[4] = a1;
    sub_1902CDE98(v5, (uint64_t)v18);
    return;
  }
  uint64_t v6 = a1[5];
  if (!v6) {
    return;
  }
  long long v7 = (IOCFPlugInInterface **)a1[7];
  uint64_t v8 = a1[8];
  mach_port_t v9 = a1 + 7;
  if (v8)
  {
    (*(void (**)(void, void))(*(void *)v8 + 72))(a1[8], 0);
    if (!v7) {
      goto LABEL_19;
    }
  }
  else if (!v7)
  {
    *(void *)(v6 + 8) = 0;
    void *v9 = 0;
    a1[8] = 0;
    return;
  }
  ((void (*)(IOCFPlugInInterface **))(*v7)->Release)(v7);
  IODestroyPlugInInterface(v7);
LABEL_19:
  *(void *)(a1[5] + 8) = 0;
  void *v9 = 0;
  a1[8] = 0;
  if (qword_1EB3BE818 != -1) {
    dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
  }
  CFDictionaryRef v10 = qword_1EB3BE810;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE810, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = a1[7];
    uint64_t v12 = a1[8];
    *(_DWORD *)float32x4_t buf = 134218752;
    uint64_t v28 = v7;
    __int16 v29 = 2048;
    uint64_t v30 = v8;
    __int16 v31 = 2048;
    uint64_t v32 = v11;
    __int16 v33 = 2048;
    uint64_t v34 = v12;
    _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_INFO, "Closed hid driver interface, {cfPlugInInterface, hidDriverInterface} was then {%p,%p}, is now {%p,%p}", buf, 0x2Au);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE818 != -1) {
      dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
    }
    uint64_t v15 = a1[7];
    uint64_t v16 = a1[8];
    int v19 = 134218752;
    uint64_t v20 = v7;
    __int16 v21 = 2048;
    uint64_t v22 = v8;
    __int16 v23 = 2048;
    uint64_t v24 = v15;
    __int16 v25 = 2048;
    uint64_t v26 = v16;
    float32x4_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLGestureService::closeHidDriverInterface()", "CoreLocation: %s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
}

uint64_t sub_1905E5660(uint64_t a1)
{
  return sub_1905E5140(*(void *)(a1 + 32));
}

void sub_1905E5668(uint64_t a1)
{
  uint64_t v2 = sub_1902D6BD0();
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  _OWORD v3[2] = sub_1905E56E4;
  v3[3] = &unk_1E568CF68;
  void v3[4] = a1;
  sub_1902CDE98(v2, (uint64_t)v3);
}

void sub_1905E56E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(v1 + 36);
  *(_DWORD *)(v1 + 36) = v2 + 1;
  if (!v2)
  {
    if (sub_1902B8788(*(void *)(v1 + 40))) {
      sub_1905E5140((void *)v1);
    }
    sub_1905E4448((uint64_t *)v1);
  }
}

void sub_1905E5748(uint64_t a1)
{
  uint64_t v2 = sub_1902D6BD0();
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  _OWORD v3[2] = sub_1905E57C4;
  v3[3] = &unk_1E568CF68;
  void v3[4] = a1;
  sub_1902CDE98(v2, (uint64_t)v3);
}

void sub_1905E57C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(v1 + 36) - 1;
  *(_DWORD *)(v1 + 36) = v2;
  if (!v2 && sub_1902B8788(*(void *)(v1 + 40)))
  {
    sub_1905E5140((void *)v1);
  }
}

BOOL sub_1905E5820(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if ((sub_1902CD6B0() & 4) == 0)
  {
    p_cache = CMDeviceOrientationManager.cache;
    if (qword_1EB3BE818 != -1) {
      dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
    }
    float32x4_t v18 = qword_1EB3BE810;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE810, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)float32x4_t buf = 68289539;
      *(_DWORD *)float v27 = 0;
      *(_WORD *)&v27[4] = 2082;
      *(void *)&v27[6] = "";
      __int16 v28 = 2082;
      __int16 v29 = "assert";
      __int16 v30 = 2081;
      __int16 v31 = "isGestureServiceAvailable()";
      _os_log_impl(&dword_1902AF000, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Service required to send gesture command\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE818 != -1) {
        dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
      }
    }
    int v19 = qword_1EB3BE810;
    if (os_signpost_enabled((os_log_t)qword_1EB3BE810))
    {
      *(_DWORD *)float32x4_t buf = 68289539;
      *(_DWORD *)float v27 = 0;
      *(_WORD *)&v27[4] = 2082;
      *(void *)&v27[6] = "";
      __int16 v28 = 2082;
      __int16 v29 = "assert";
      __int16 v30 = 2081;
      __int16 v31 = "isGestureServiceAvailable()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Service required to send gesture command", "{\"msg%{public}.0s\":\"Service required to send gesture command\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE818 != -1) {
        dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
      }
    }
    a1 = qword_1EB3BE810;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE810, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)float32x4_t buf = 68289539;
      *(_DWORD *)float v27 = 0;
      *(_WORD *)&v27[4] = 2082;
      *(void *)&v27[6] = "";
      __int16 v28 = 2082;
      __int16 v29 = "assert";
      __int16 v30 = 2081;
      __int16 v31 = "isGestureServiceAvailable()";
      _os_log_impl(&dword_1902AF000, a1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Service required to send gesture command\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_36:
    dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
    goto LABEL_5;
  }
  sub_1905E5668((uint64_t)a1);
  Class isa = a1[8].isa;
  if (!isa)
  {
    if (qword_1EB3BE818 != -1) {
      dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
    }
    uint64_t v15 = qword_1EB3BE810;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE810, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)float32x4_t buf = 0;
      _os_log_impl(&dword_1902AF000, v15, OS_LOG_TYPE_INFO, "gestureHidDriverInterface NULL", buf, 2u);
    }
    if (!sub_1902D8400(115, 2)) {
      goto LABEL_17;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE818 != -1) {
      dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
    }
    LOWORD(v22) = 0;
    CFUUIDRef v14 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "BOOL CLGestureService::sendGestureServiceCommand(const void *, size_t)", "CoreLocation: %s\n", v14);
    if (v14 == (char *)buf) {
      goto LABEL_17;
    }
LABEL_40:
    free(v14);
LABEL_17:
    BOOL v12 = 0;
    goto LABEL_24;
  }
  int v21 = 0;
  uint64_t v20 = 4;
  int v8 = (*(uint64_t (**)(Class, uint64_t, uint64_t, int *, uint64_t *))(*(void *)isa + 80))(isa, a2, a3, &v21, &v20);
  if (!v8)
  {
    BOOL v12 = v20 == 4 && v21 != 0;
    goto LABEL_24;
  }
  LODWORD(p_cache) = v8;
  uint64_t v3 = CMDeviceOrientationManager.cache;
  if (qword_1EB3BE818 != -1) {
    goto LABEL_36;
  }
LABEL_5:
  CFDictionaryRef v10 = qword_1EB3BE810;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE810, OS_LOG_TYPE_FAULT))
  {
    uint64_t v11 = mach_error_string((mach_error_t)p_cache);
    *(_DWORD *)float32x4_t buf = 136315394;
    *(void *)float v27 = v11;
    *(_WORD *)&v27[8] = 1024;
    *(_DWORD *)&v27[10] = p_cache;
    _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_FAULT, "sendGestureServiceCommand() = %s (0x%x)", buf, 0x12u);
  }
  BOOL v12 = 0;
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (v3[259] != (void *)-1) {
      dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
    }
    CFAllocatorRef v13 = mach_error_string((mach_error_t)p_cache);
    int v22 = 136315394;
    __int16 v23 = v13;
    __int16 v24 = 1024;
    int v25 = (int)p_cache;
    CFUUIDRef v14 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "BOOL CLGestureService::sendGestureServiceCommand(const void *, size_t)", "CoreLocation: %s\n", v14);
    if (v14 == (char *)buf) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }
LABEL_24:
  sub_1905E5748((uint64_t)a1);
  return v12;
}

BOOL sub_1905E5DC8(uint64_t a1, int a2, int a3)
{
  int v7 = 5;
  BYTE1(v7) = a2;
  BYTE2(v7) = a3;
  BOOL result = sub_1905E5820(a1, (uint64_t)&v7, 4);
  if (a2 == 8 && result) {
    *(unsigned char *)(a1 + 32) = a3 != 0;
  }
  return result;
}

void sub_1905E5E34(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB3BE818 != -1) {
      dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
    }
    uint64_t v3 = qword_1EB3BE810;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE810, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)float32x4_t buf = 68289539;
      int v7 = 0;
      __int16 v8 = 2082;
      mach_port_t v9 = "";
      __int16 v10 = 2082;
      uint64_t v11 = "assert";
      __int16 v12 = 2081;
      CFAllocatorRef v13 = "notification == kNotificationGestureReport";
      _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE818 != -1) {
        dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
      }
    }
    uint64_t v4 = qword_1EB3BE810;
    if (os_signpost_enabled((os_log_t)qword_1EB3BE810))
    {
      *(_DWORD *)float32x4_t buf = 68289539;
      int v7 = 0;
      __int16 v8 = 2082;
      mach_port_t v9 = "";
      __int16 v10 = 2082;
      uint64_t v11 = "assert";
      __int16 v12 = 2081;
      CFAllocatorRef v13 = "notification == kNotificationGestureReport";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE818 != -1) {
        dispatch_once(&qword_1EB3BE818, &unk_1EDFD36E0);
      }
    }
    uint64_t v5 = qword_1EB3BE810;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE810, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)float32x4_t buf = 68289539;
      int v7 = 0;
      __int16 v8 = 2082;
      mach_port_t v9 = "";
      __int16 v10 = 2082;
      uint64_t v11 = "assert";
      __int16 v12 = 2081;
      CFAllocatorRef v13 = "notification == kNotificationGestureReport";
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
  }
  if (a3)
  {
    sub_1905E5668(a1);
  }
  else
  {
    sub_1905E5748(a1);
  }
}

os_log_t sub_1905E60EC()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "WakeGesture");
  qword_1EB3BE810 = (uint64_t)result;
  return result;
}

os_log_t sub_1905E611C()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "AOP");
  qword_1E929D6F0 = (uint64_t)result;
  return result;
}

os_log_t sub_1905E614C()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Oversize");
  qword_1E929D950 = (uint64_t)result;
  return result;
}

void sub_1905E617C()
{
}

void sub_1905E621C(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x10F1C40E7E486F4);
  _Unwind_Resume(a1);
}

void sub_1905E6244(void *a1)
{
  sub_1905A1098(a1);

  JUMPOUT(0x192FCC980);
}

double sub_1905E627C(uint64_t a1, int a2, double *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFD32A0);
    }
    uint64_t v4 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)float32x4_t buf = 67240192;
      LODWORD(v16) = a2;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_FAULT, "[AccessoryGyro] Unrecognized update interval notification %{public}d", buf, 8u);
    }
    double v5 = 0.0;
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFD32A0);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryGyro::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    sub_1905A2C68(a1);
    if (*a3 > 0.0)
    {
      (*(void (**)(double))(**(void **)(a1 + 32) + 16))(*a3);
      (*(void (**)(void))(**(void **)(a1 + 32) + 16))();
      *(unsigned char *)(a1 + 3dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
    }
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFD32A0);
    }
    mach_port_t v9 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)a3;
      *(_DWORD *)float32x4_t buf = 134349056;
      uint64_t v16 = v10;
      _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_INFO, "[AccessoryGyro] Setting update interval to %{public}f", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFD32A0);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryGyro::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    double v11 = rint(*a3 * 1000000.0);
    if (*a3 < 0.0) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = (uint64_t)v11;
    }
    sub_1902CDC50(*(void *)(a1 + 32), v12);
    return *a3;
  }
  return v5;
}

double sub_1905E6690(uint64_t a1, int a2, double *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFD32A0);
    }
    uint64_t v4 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)float32x4_t buf = 67240192;
      LODWORD(v14) = a2;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_FAULT, "[AccessoryGyro] Unrecognized batch interval notification %{public}d", buf, 8u);
    }
    double v5 = 0.0;
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFD32A0);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryGyro::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    sub_1905A2C68(a1);
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFD32A0);
    }
    mach_port_t v9 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_INFO))
    {
      double v10 = *a3;
      *(_DWORD *)float32x4_t buf = 134349056;
      double v14 = v10;
      _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_INFO, "[AccessoryGyro] Setting batch interval to %{public}f", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFD32A0);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryGyro::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    sub_1902CDBA4(*(void *)(a1 + 32), *a3);
    return *a3;
  }
  return v5;
}

void sub_1905E69BC(uint64_t a1)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  if (IOHIDEventGetType() == 20)
  {
    IOHIDEventGetFloatValue();
    float v3 = v2;
    float v25 = v3;
    IOHIDEventGetFloatValue();
    float v5 = v4;
    float v26 = v5;
    IOHIDEventGetFloatValue();
    float v7 = v6;
    float v27 = v7;
    unint64_t TimeStamp = IOHIDEventGetTimeStamp();
    double v9 = sub_1902D8D34(TimeStamp);
    double v24 = v9;
    unsigned __int16 IntegerValue = IOHIDEventGetIntegerValue();
    unsigned __int16 v29 = IntegerValue;
    uint64_t v11 = sub_1905E72B8();
    uint64_t v28 = v11;
    float v12 = *(float *)(a1 + 100);
    float v30 = v12;
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFD32A0);
    }
    CFAllocatorRef v13 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)float32x4_t buf = 67241728;
      int isa = IntegerValue;
      __int16 v49 = 2050;
      double v50 = v3;
      __int16 v51 = 2050;
      double v52 = v5;
      __int16 v53 = 2050;
      double v54 = v7;
      __int16 v55 = 2050;
      double v56 = v12;
      __int16 v57 = 2050;
      uint64_t v58 = v11;
      __int16 v59 = 2050;
      double v60 = v9;
      _os_log_impl(&dword_1902AF000, v13, OS_LOG_TYPE_DEBUG, "[AccessoryGyro] seq,%{public}d,x,%{public}20.20f,y,%{public}20.20f,z,%{public}20.20f,temp,%{public}20.20f,sensorTime,%{public}llu,timestamp,%{public}20.20f", buf, 0x44u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFD32A0);
      }
      LODWORD(v31.isa) = 67241728;
      HIDWORD(v31.isa) = IntegerValue;
      *(_WORD *)uint64_t v32 = 2050;
      *(double *)&v32[2] = v3;
      __int16 v33 = 2050;
      double v34 = v5;
      __int16 v35 = 2050;
      *(double *)float32_t v36 = v7;
      *(_WORD *)&v36[8] = 2050;
      double v37 = v12;
      __int16 v38 = 2050;
      *(void *)uint64_t v39 = v11;
      *(_WORD *)&v39[8] = 2050;
      double v40 = v9;
      int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "virtual void CLAccessoryGyro::onEventData(void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    sub_1902D8BCC(a1, 0, (uint64_t)&v24, 40);
    if (!*(unsigned char *)(a1 + 30))
    {
      *(unsigned char *)(a1 + 3dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 1;
      LODWORD(v31.isa) = 0;
      sub_1902C3F54(v32, "N/A");
      sub_1902C3F54(&v36[2], "N/A");
      *(_DWORD *)&void v39[6] = 0;
      if (sub_1905A3184((const char *)a1, &v31))
      {
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFD32A0);
        }
        double v14 = qword_1EB3BE830;
        if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEBUG))
        {
          if (v36[1] >= 0) {
            double v15 = COERCE_DOUBLE(v32);
          }
          else {
            double v15 = *(double *)v32;
          }
          if (v39[5] >= 0) {
            double v16 = COERCE_DOUBLE(&v36[2]);
          }
          else {
            double v16 = *(double *)&v36[2];
          }
          *(_DWORD *)float32x4_t buf = 67240707;
          int isa = (int)v31.isa;
          __int16 v49 = 2081;
          double v50 = v15;
          __int16 v51 = 2081;
          double v52 = v16;
          _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_DEBUG, "[AccessoryGyro] config,side,%{public}d,configuration,%{private}s,serialNumber,%{private}s", buf, 0x1Cu);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE838 != -1) {
            dispatch_once(&qword_1EB3BE838, &unk_1EDFD32A0);
          }
          if (v36[1] >= 0) {
            uint64_t v20 = v32;
          }
          else {
            uint64_t v20 = *(unsigned char **)v32;
          }
          if (v39[5] >= 0) {
            int v21 = &v36[2];
          }
          else {
            int v21 = *(unsigned char **)&v36[2];
          }
          int v41 = 67240707;
          int v42 = (int)v31.isa;
          __int16 v43 = 2081;
          float v44 = v20;
          __int16 v45 = 2081;
          uint64_t v46 = v21;
          int v22 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "void CLAccessoryGyro::onGyroData(const Sample &)", "CoreLocation: %s\n", v22);
          if (v22 != (char *)buf) {
            free(v22);
          }
        }
        sub_1902D8BCC(a1, 1, (uint64_t)&v31, 64);
      }
      else
      {
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFD32A0);
        }
        float32x4_t v18 = qword_1EB3BE830;
        if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)float32x4_t buf = 0;
          _os_log_impl(&dword_1902AF000, v18, OS_LOG_TYPE_FAULT, "[AccessoryGyro] Service not found!", buf, 2u);
        }
        if (sub_1902D8400(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE838 != -1) {
            dispatch_once(&qword_1EB3BE838, &unk_1EDFD32A0);
          }
          LOWORD(v41) = 0;
          __int16 v23 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 0, "void CLAccessoryGyro::onGyroData(const Sample &)", "CoreLocation: %s\n", v23);
          if (v23 != (char *)buf) {
            free(v23);
          }
        }
      }
      if ((v39[5] & 0x80000000) != 0) {
        operator delete(*(void **)&v36[2]);
      }
      if ((v36[1] & 0x80000000) != 0) {
        operator delete(*(void **)v32);
      }
    }
  }
  else if (IOHIDEventGetType() == 15)
  {
    IOHIDEventGetFloatValue();
    *(float *)&double v17 = v17;
    *(_DWORD *)(a1 + 10dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = LODWORD(v17);
  }
}

void sub_1905E7058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

os_log_t sub_1905E7094()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Accessory");
  qword_1EB3BE830 = (uint64_t)result;
  return result;
}

uint64_t sub_1905E72B8()
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  Childreunint64_t n = (const __CFArray *)IOHIDEventGetChildren();
  if (!Children || (CFArrayRef v1 = Children, !CFArrayGetCount(Children)))
  {
    if (qword_1E929D7B8 != -1) {
      dispatch_once(&qword_1E929D7B8, &unk_1EDFD2C80);
    }
    double v6 = qword_1E929D7B0;
    if (os_log_type_enabled((os_log_t)qword_1E929D7B0, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)float32x4_t buf = 0;
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_FAULT, "Event has no children", buf, 2u);
    }
    if (!sub_1902D8400(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929D7B8 == -1) {
      goto LABEL_33;
    }
LABEL_46:
    dispatch_once(&qword_1E929D7B8, &unk_1EDFD2C80);
LABEL_33:
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "uint64_t sensorTimeFromHidChildEvent(IOHIDEventRef)", "CoreLocation: %s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
    return 0;
  }
  CFArrayGetValueAtIndex(v1, 0);
  uint64_t IntegerValue = IOHIDEventGetIntegerValue();
  if (IOHIDEventGetIntegerValue() == 65301 && IntegerValue == 2)
  {
    uint64_t DataValue = IOHIDEventGetDataValue();
    uint64_t v4 = IOHIDEventGetIntegerValue();
    if (DataValue)
    {
      if (v4 == 8) {
        return *(void *)DataValue;
      }
      if (qword_1E929D7B8 != -1) {
        dispatch_once(&qword_1E929D7B8, &unk_1EDFD2C80);
      }
      float v12 = qword_1E929D7B0;
      if (os_log_type_enabled((os_log_t)qword_1E929D7B0, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)float32x4_t buf = 68289539;
        int v16 = 0;
        __int16 v17 = 2082;
        float32x4_t v18 = "";
        __int16 v19 = 2082;
        uint64_t v20 = "assert";
        __int16 v21 = 2081;
        int v22 = "length == sensorTimeSize";
        _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unexpected sensor time length!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_1E929D7B8 != -1) {
          dispatch_once(&qword_1E929D7B8, &unk_1EDFD2C80);
        }
      }
      CFAllocatorRef v13 = qword_1E929D7B0;
      if (os_signpost_enabled((os_log_t)qword_1E929D7B0))
      {
        *(_DWORD *)float32x4_t buf = 68289539;
        int v16 = 0;
        __int16 v17 = 2082;
        float32x4_t v18 = "";
        __int16 v19 = 2082;
        uint64_t v20 = "assert";
        __int16 v21 = 2081;
        int v22 = "length == sensorTimeSize";
        _os_signpost_emit_with_name_impl(&dword_1902AF000, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unexpected sensor time length!", "{\"msg%{public}.0s\":\"Unexpected sensor time length!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_1E929D7B8 != -1) {
          dispatch_once(&qword_1E929D7B8, &unk_1EDFD2C80);
        }
      }
      double v14 = qword_1E929D7B0;
      if (os_log_type_enabled((os_log_t)qword_1E929D7B0, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)float32x4_t buf = 68289539;
        int v16 = 0;
        __int16 v17 = 2082;
        float32x4_t v18 = "";
        __int16 v19 = 2082;
        uint64_t v20 = "assert";
        __int16 v21 = 2081;
        int v22 = "length == sensorTimeSize";
        _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Unexpected sensor time length!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }
    }
    else
    {
      if (qword_1E929D7B8 != -1) {
        dispatch_once(&qword_1E929D7B8, &unk_1EDFD2C80);
      }
      __int16 v8 = qword_1E929D7B0;
      if (os_log_type_enabled((os_log_t)qword_1E929D7B0, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)float32x4_t buf = 68289539;
        int v16 = 0;
        __int16 v17 = 2082;
        float32x4_t v18 = "";
        __int16 v19 = 2082;
        uint64_t v20 = "assert";
        __int16 v21 = 2081;
        int v22 = "payload";
        _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid child event payload!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_1E929D7B8 != -1) {
          dispatch_once(&qword_1E929D7B8, &unk_1EDFD2C80);
        }
      }
      double v9 = qword_1E929D7B0;
      if (os_signpost_enabled((os_log_t)qword_1E929D7B0))
      {
        *(_DWORD *)float32x4_t buf = 68289539;
        int v16 = 0;
        __int16 v17 = 2082;
        float32x4_t v18 = "";
        __int16 v19 = 2082;
        uint64_t v20 = "assert";
        __int16 v21 = 2081;
        int v22 = "payload";
        _os_signpost_emit_with_name_impl(&dword_1902AF000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid child event payload!", "{\"msg%{public}.0s\":\"Invalid child event payload!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_1E929D7B8 != -1) {
          dispatch_once(&qword_1E929D7B8, &unk_1EDFD2C80);
        }
      }
      double v10 = qword_1E929D7B0;
      if (os_log_type_enabled((os_log_t)qword_1E929D7B0, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)float32x4_t buf = 68289539;
        int v16 = 0;
        __int16 v17 = 2082;
        float32x4_t v18 = "";
        __int16 v19 = 2082;
        uint64_t v20 = "assert";
        __int16 v21 = 2081;
        int v22 = "payload";
        _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid child event payload!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }
    }
    abort_report_np();
  }
  if (qword_1E929D7B8 != -1) {
    dispatch_once(&qword_1E929D7B8, &unk_1EDFD2C80);
  }
  float v7 = qword_1E929D7B0;
  if (os_log_type_enabled((os_log_t)qword_1E929D7B0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)float32x4_t buf = 0;
    _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_FAULT, "Event has no timestamp", buf, 2u);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D7B8 == -1) {
      goto LABEL_33;
    }
    goto LABEL_46;
  }
  return 0;
}

CFArrayRef sub_1905E79C0(uint64_t a1, unsigned char *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  Childreunint64_t n = (const __CFArray *)IOHIDEventGetChildren();
  CFArrayRef v4 = Children;
  *a2 = 0;
  if (Children)
  {
    if (!CFArrayGetCount(Children)) {
      return 0;
    }
    *a2 = 1;
    if (CFArrayGetCount(v4) < 1) {
      return 0;
    }
    CFIndex v5 = 0;
    while (1)
    {
      CFArrayGetValueAtIndex(v4, v5);
      uint64_t IntegerValue = IOHIDEventGetIntegerValue();
      uint64_t v7 = IOHIDEventGetIntegerValue();
      uint64_t v8 = IOHIDEventGetIntegerValue();
      uint64_t v9 = v8;
      if (v7 == 65301 && IntegerValue == 4 && v8 == 8) {
        break;
      }
      if (qword_1EB3BE838 != -1) {
        dispatch_once(&qword_1EB3BE838, &unk_1EDFD33C0);
      }
      double v10 = qword_1EB3BE830;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)float32x4_t buf = 134284033;
        uint64_t v18 = v7;
        __int16 v19 = 2049;
        uint64_t v20 = IntegerValue;
        __int16 v21 = 2049;
        uint64_t v22 = v9;
        _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_DEBUG, "[AccessoryDeviceMotion] Invalid child event for BTC timestamp: usage page 0x%{private}lx usage 0x%{private}lx length %{private}zu", buf, 0x20u);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFD33C0);
        }
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "uint64_t btcTimeFromHidChildEvent(IOHIDEventRef, BOOL &)", "CoreLocation: %s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      if (++v5 >= CFArrayGetCount(v4)) {
        return 0;
      }
    }
    CFArrayRef v4 = *(const __CFArray **)IOHIDEventGetDataValue();
    uint64_t v12 = mach_continuous_time();
    double v13 = sub_1902D8D34(v12);
    if (!v4)
    {
      if (v13 - *(double *)&qword_1E929E988 > 1.0)
      {
        qword_1E929E988 = *(void *)&v13;
        if (qword_1EB3BE838 != -1) {
          dispatch_once(&qword_1EB3BE838, &unk_1EDFD33C0);
        }
        double v14 = qword_1EB3BE830;
        if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)float32x4_t buf = 0;
          _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] Invalid child BTC timestamp", buf, 2u);
        }
        if (sub_1902D8400(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE838 != -1) {
            dispatch_once(&qword_1EB3BE838, &unk_1EDFD33C0);
          }
          int v16 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 0, "uint64_t btcTimeFromHidChildEvent(IOHIDEventRef, BOOL &)", "CoreLocation: %s\n", v16);
          if (v16 != (char *)buf) {
            free(v16);
          }
        }
      }
      return 0;
    }
  }
  return v4;
}

BOOL sub_1905E7DC4(void *a1, IOHIDServiceClientRef service, CFStringRef key)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFTypeRef v5 = IOHIDServiceClientCopyProperty(service, key);
  if (v5)
  {
    double v6 = v5;
    CFTypeID TypeID = CFNumberGetTypeID();
    BOOL v8 = TypeID == CFGetTypeID(v6);
    BOOL v9 = v8;
    if (v8)
    {
      CFNumberGetValue((CFNumberRef)v6, kCFNumberIntType, a1);
    }
    else
    {
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3580);
      }
      uint64_t v11 = off_1EB3BE890;
      if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)float32x4_t buf = 138543362;
        CFStringRef v16 = key;
        _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_ERROR, "Invalid type for key %{public}@!", buf, 0xCu);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE898 != -1) {
          dispatch_once(&qword_1EB3BE898, &unk_1EDFD3580);
        }
        double v14 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "BOOL getIntFromHIDService(int *, IOHIDServiceClientRef, CFStringRef)", "CoreLocation: %s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
    }
    CFRelease(v6);
  }
  else
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3580);
    }
    double v10 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)float32x4_t buf = 138543362;
      CFStringRef v16 = key;
      _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_DEFAULT, "#Warning Key %{public}@ not found!", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3580);
      }
      double v13 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "BOOL getIntFromHIDService(int *, IOHIDServiceClientRef, CFStringRef)", "CoreLocation: %s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    return 0;
  }
  return v9;
}

uint64_t sub_1905E811C(uint64_t a1, IOHIDServiceClientRef service, CFStringRef key)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  CFDataRef v5 = (const __CFData *)IOHIDServiceClientCopyProperty(service, key);
  if (v5)
  {
    CFDataRef v6 = v5;
    CFTypeID TypeID = CFDataGetTypeID();
    if (TypeID == CFGetTypeID(v6))
    {
      BytePtr = (UInt8 *)CFDataGetBytePtr(v6);
      CFIndex Length = CFDataGetLength(v6);
      size_t v10 = 0;
      if (Length)
      {
        while (BytePtr[v10])
        {
          if (Length == ++v10)
          {
            size_t v10 = Length;
            break;
          }
        }
      }
      sub_190467400(buf, BytePtr, v10);
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      *(_OWORD *)a1 = *(_OWORD *)buf;
      *(void *)(a1 + 16) = v22;
    }
    else
    {
      CFTypeID v13 = CFStringGetTypeID();
      if (v13 != CFGetTypeID(v6))
      {
        if (qword_1EB3BE898 != -1) {
          dispatch_once(&qword_1EB3BE898, &unk_1EDFD3580);
        }
        uint64_t v17 = off_1EB3BE890;
        if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)float32x4_t buf = 138543362;
          *(void *)&uint8_t buf[4] = key;
          _os_log_impl(&dword_1902AF000, v17, OS_LOG_TYPE_ERROR, "Invalid type for key %{public}@!", buf, 0xCu);
        }
        if (sub_1902D8400(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE898 != -1) {
            dispatch_once(&qword_1EB3BE898, &unk_1EDFD3580);
          }
          uint64_t v20 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 0, "BOOL getStringFromHIDService(std::string &, IOHIDServiceClientRef, CFStringRef)", "CoreLocation: %s\n", v20);
          if (v20 != (char *)buf) {
            free(v20);
          }
        }
        uint64_t v12 = 0;
        goto LABEL_25;
      }
      uint64_t v16 = objc_msgSend_UTF8String(v6, v14, v15);
      MEMORY[0x192FCC770](a1, v16);
    }
    uint64_t v12 = 1;
LABEL_25:
    CFRelease(v6);
    return v12;
  }
  if (qword_1EB3BE898 != -1) {
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD3580);
  }
  uint64_t v11 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)float32x4_t buf = 138543362;
    *(void *)&uint8_t buf[4] = key;
    _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_DEFAULT, "#Warning Key %{public}@ not found!", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3580);
    }
    __int16 v19 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "BOOL getStringFromHIDService(std::string &, IOHIDServiceClientRef, CFStringRef)", "CoreLocation: %s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  return 0;
}

NSObject *sub_1905E84F4(void *a1, IOHIDServiceClientRef service, __CFString *key, size_t a4)
{
  CFDataRef v5 = key;
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  CFTypeRef v7 = IOHIDServiceClientCopyProperty(service, key);
  if (v7)
  {
    BOOL v8 = (void *)v7;
    CFTypeID TypeID = CFDataGetTypeID();
    BOOL v10 = TypeID == CFGetTypeID(v8);
    CFTypeID v13 = v10;
    if (v10)
    {
      if (objc_msgSend_length(v8, v11, v12) == a4)
      {
        uint64_t v16 = (const void *)objc_msgSend_bytes(v8, v14, v15);
        memcpy(a1, v16, a4);
LABEL_16:
        CFRelease(v8);
        return v13;
      }
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3580);
      }
      uint64_t v22 = off_1EB3BE890;
      p_cache = (void **)"[data length] == expected_length";
      if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)float32x4_t buf = 68290051;
        *(_DWORD *)int v41 = 0;
        *(_WORD *)&v41[4] = 2082;
        *(void *)&void v41[6] = "";
        __int16 v42 = 2082;
        uint64_t v43 = objc_msgSend_UTF8String(v5, v23, v24);
        __int16 v44 = 2050;
        uint64_t v45 = objc_msgSend_length(v8, v25, v26);
        __int16 v46 = 2082;
        unint64_t v47 = "assert";
        __int16 v48 = 2081;
        __int16 v49 = "[data length] == expected_length";
        _os_log_impl(&dword_1902AF000, v22, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unexpected length!\", \"key\":%{public, location:escape_only}s, \"length\":%{public}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
        if (qword_1EB3BE898 != -1) {
          dispatch_once(&qword_1EB3BE898, &unk_1EDFD3580);
        }
      }
      float v27 = off_1EB3BE890;
      if (os_signpost_enabled((os_log_t)off_1EB3BE890))
      {
        uint64_t v30 = objc_msgSend_UTF8String(v5, v28, v29);
        uint64_t v33 = objc_msgSend_length(v8, v31, v32);
        *(_DWORD *)float32x4_t buf = 68290051;
        *(_DWORD *)int v41 = 0;
        *(_WORD *)&v41[4] = 2082;
        *(void *)&void v41[6] = "";
        __int16 v42 = 2082;
        uint64_t v43 = v30;
        __int16 v44 = 2050;
        uint64_t v45 = v33;
        __int16 v46 = 2082;
        unint64_t v47 = "assert";
        __int16 v48 = 2081;
        __int16 v49 = "[data length] == expected_length";
        _os_signpost_emit_with_name_impl(&dword_1902AF000, v27, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unexpected length!", "{\"msg%{public}.0s\":\"Unexpected length!\", \"key\":%{public, location:escape_only}s, \"length\":%{public}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
        if (qword_1EB3BE898 != -1) {
          dispatch_once(&qword_1EB3BE898, &unk_1EDFD3580);
        }
      }
      CFTypeID v13 = off_1EB3BE890;
      if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
      {
        CFDataRef v5 = (__CFString *)objc_msgSend_UTF8String(v5, v34, v35);
        uint64_t v38 = objc_msgSend_length(v8, v36, v37);
        *(_DWORD *)float32x4_t buf = 68290051;
        *(_DWORD *)int v41 = 0;
        *(_WORD *)&v41[4] = 2082;
        *(void *)&void v41[6] = "";
        __int16 v42 = 2082;
        uint64_t v43 = (uint64_t)v5;
        __int16 v44 = 2050;
        uint64_t v45 = v38;
        __int16 v46 = 2082;
        unint64_t v47 = "assert";
        __int16 v48 = 2081;
        __int16 v49 = "[data length] == expected_length";
        _os_log_impl(&dword_1902AF000, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Unexpected length!\", \"key\":%{public, location:escape_only}s, \"length\":%{public}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      }
      abort_report_np();
    }
    else
    {
      p_cache = CMDeviceOrientationManager.cache;
      if (qword_1EB3BE898 == -1)
      {
LABEL_13:
        __int16 v19 = off_1EB3BE890;
        if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)float32x4_t buf = 138543362;
          *(void *)int v41 = v5;
          _os_log_impl(&dword_1902AF000, v19, OS_LOG_TYPE_ERROR, "Invalid type for key %{public}@!", buf, 0xCu);
        }
        if (sub_1902D8400(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (p_cache[275] != (void *)-1) {
            dispatch_once(&qword_1EB3BE898, &unk_1EDFD3580);
          }
          uint64_t v39 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 0, "BOOL getBytesFromHIDService(void *, IOHIDServiceClientRef, CFStringRef, size_t)", "CoreLocation: %s\n", v39);
          if (v39 != (char *)buf) {
            free(v39);
          }
        }
        goto LABEL_16;
      }
    }
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD3580);
    goto LABEL_13;
  }
  if (qword_1EB3BE898 != -1) {
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD3580);
  }
  uint64_t v17 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)float32x4_t buf = 138543362;
    *(void *)int v41 = v5;
    _os_log_impl(&dword_1902AF000, v17, OS_LOG_TYPE_DEFAULT, "#Warning Key %{public}@ not found!", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3580);
    }
    __int16 v21 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "BOOL getBytesFromHIDService(void *, IOHIDServiceClientRef, CFStringRef, size_t)", "CoreLocation: %s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
  return 0;
}

os_log_t sub_1905E8ADC()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Sensors");
  qword_1E929D7B0 = (uint64_t)result;
  return result;
}

os_log_t sub_1905E8B0C()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Accessory");
  qword_1EB3BE830 = (uint64_t)result;
  return result;
}

uint64_t sub_1905E949C(uint64_t a1)
{
  *(void *)(a1 + 144) = a1 + 152;
  *(void *)(a1 + 8) = 256;
  *(_DWORD *)a1 = 8;
  int32x2_t v2 = (int32x2_t)0x100000000;
  uint64_t v3 = 152;
  float64x2_t v11 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  float64x2_t v12 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
  do
  {
    int32x2_t v4 = vneg_s32(v2);
    v5.i64[0] = v4.i32[0];
    v5.i64[1] = v4.i32[1];
    float32x2_t v6 = vcvt_f32_f64(vmulq_f64(vmulq_f64(vcvtq_f64_s64(v5), v12), v11));
    float v13 = v6.f32[0];
    __float2 v7 = __sincosf_stret(v6.f32[1]);
    __float2 v8 = __sincosf_stret(v13);
    v14.val[1] = (float32x2_t)__PAIR64__(LODWORD(v7.__sinval), LODWORD(v8.__sinval));
    v14.val[0] = (float32x2_t)__PAIR64__(LODWORD(v7.__cosval), LODWORD(v8.__cosval));
    BOOL v9 = (float *)(a1 + v3);
    vst2_f32(v9, v14);
    int32x2_t v2 = vadd_s32(v2, (int32x2_t)0x200000002);
    v3 += 16;
  }
  while (v3 != 2200);
  sub_1905E9590(256, (int *)(a1 + 16));
  return a1;
}

uint64_t sub_1905E9590(uint64_t result, int *a2)
{
  float v2 = sqrtf((float)(int)result);
  int v3 = 4;
  do
  {
    while ((int)result % v3)
    {
      int v4 = v3 + 2;
      if (v3 == 2) {
        int v4 = 3;
      }
      if (v3 == 4) {
        int v3 = 2;
      }
      else {
        int v3 = v4;
      }
      if (v2 < (float)v3) {
        int v3 = result;
      }
    }
    os_log_t result = ((int)result / v3);
    *a2 = v3;
    a2[1] = result;
    a2 += 2;
  }
  while ((int)result > 1);
  return result;
}

void sub_1905E95E8(uint64_t a1, _DWORD *a2, unsigned __int16 *a3)
{
  v13[255] = *MEMORY[0x1E4F143B8];
  int64x2_t v5 = (int *)(a1 + 8);
  bzero(&v12, 8 * *(int *)(a1 + 8));
  sub_1905E96CC(&v12, a3, 0, 1, 1u, v5 + 2, (uint64_t)v5);
  *a2 = 0;
  unint64_t v6 = *v5;
  if ((int)v6 >= 4)
  {
    float v7 = (float)(int)v6;
    uint64_t v8 = (v6 >> 1) - 1;
    BOOL v9 = (float *)(a2 + 1);
    BOOL v10 = (float32x2_t *)v13;
    do
    {
      float32x2_t v11 = *v10++;
      *v9++ = sqrtf(vaddv_f32(vmul_f32(v11, v11)) / v7);
      --v8;
    }
    while (v8);
  }
}

void sub_1905E96CC(float *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, uint64_t a7)
{
  BOOL v9 = a1;
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  int v10 = a6[1];
  uint64_t v11 = v10 * *a6;
  int v73 = *a6;
  if (v10 == 1)
  {
    int v12 = a4 * a5;
    uint64_t v13 = 8 * v11;
    float32x2x2_t v14 = a1;
    do
    {
      float *v14 = *(float *)sub_190431610(a2, (int)a3);
      v14 += 2;
      LODWORD(a3) = a3 + v12;
      v13 -= 8;
    }
    while (v13);
  }
  else
  {
    unint64_t v15 = 0;
    uint64_t v16 = a6 + 2;
    uint64_t v17 = *a6 * a4;
    int v18 = a4 * a5;
    uint64_t v19 = 8 * v11;
    do
    {
      sub_1905E96CC(&v9[v15 / 4], a2, a3, v17, a5, v16, a7);
      a3 = (a3 + v18);
      v15 += 8 * v10;
    }
    while (v19 != v15);
  }
  if (v73 == 2)
  {
    double v60 = (float *)(*(void *)(a7 + 136) + 4);
    uint64_t v61 = 2 * v10;
    do
    {
      float32x4_t v62 = &v9[v61];
      float v63 = *(v60 - 1);
      float v64 = v9[v61];
      float v65 = v9[v61 + 1];
      float v66 = (float)(v64 * v63) - (float)(v65 * *v60);
      float v67 = (float)(v63 * v65) + (float)(v64 * *v60);
      float v68 = v9[1] - v67;
      *float32x4_t v62 = *v9 - v66;
      v62[1] = v68;
      float v69 = v67 + v9[1];
      float *v9 = v66 + *v9;
      v9[1] = v69;
      v9 += 2;
      v60 += 2 * a4;
      --v10;
    }
    while (v10);
  }
  else
  {
    uint64_t v20 = v10;
    if (v73 == 4)
    {
      uint64_t v21 = 2 * v10;
      uint64_t v22 = v9 + 1;
      uint64_t v23 = (float *)(*(void *)(a7 + 136) + 4);
      uint64_t v24 = 4 * v10;
      int v25 = *(_DWORD *)(a7 + 4);
      uint64_t v26 = 6 * v10;
      float v27 = v23;
      uint64_t v28 = v23;
      do
      {
        uint64_t v29 = &v22[v21];
        float v30 = *(v23 - 1);
        float v31 = v22[v21 - 1];
        float v32 = v22[2 * v10];
        float v33 = (float)(v31 * v30) - (float)(v32 * *v23);
        float v34 = (float)(v30 * v32) + (float)(v31 * *v23);
        uint64_t v35 = &v22[v24];
        float v36 = *(v27 - 1);
        float v37 = v22[v24 - 1];
        float v38 = v22[4 * v10];
        float v39 = (float)(v37 * v36) - (float)(v38 * *v27);
        float v40 = (float)(v36 * v38) + (float)(v37 * *v27);
        int v41 = &v22[v26];
        float v42 = *(v28 - 1);
        float v43 = v22[v26 - 1];
        float v44 = v22[6 * v10];
        float v45 = (float)(v43 * v42) - (float)(v44 * *v28);
        float v46 = (float)(v42 * v44) + (float)(v43 * *v28);
        float v47 = *(v22 - 1);
        float v48 = v47 - v39;
        float v49 = *v22 - v40;
        float v50 = v39 + v47;
        float v51 = v40 + *v22;
        *(v22 - 1) = v50;
        float *v22 = v51;
        float v52 = v34 + v46;
        float v53 = v33 - v45;
        float v54 = v34 - v46;
        *(v35 - 1) = v50 - (float)(v33 + v45);
        *uint64_t v35 = v51 - v52;
        float v55 = v52 + *v22;
        *(v22 - 1) = (float)(v33 + v45) + *(v22 - 1);
        float *v22 = v55;
        if (v25)
        {
          float v56 = v48 + v54;
          float v57 = v49 - v53;
          float v58 = v48 - v54;
          float v59 = v49 + v53;
        }
        else
        {
          float v58 = v48 + v54;
          float v59 = v49 - v53;
          float v56 = v48 - v54;
          float v57 = v49 + v53;
        }
        v22[2 * v10] = v59;
        v22[6 * v10] = v57;
        v22 += 2;
        v28 += 6 * a4;
        *(v29 - 1) = v58;
        v27 += 4 * a4;
        v23 += 2 * a4;
        *(v41 - 1) = v56;
        --v20;
      }
      while (v20);
    }
    else
    {
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD2CC0);
      }
      int v70 = off_1EB3BE880;
      if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)float32x4_t buf = 67109120;
        int v77 = v73;
        _os_log_impl(&dword_1902AF000, v70, OS_LOG_TYPE_FAULT, "Error in FFT,p,%d", buf, 8u);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE888 != -1) {
          dispatch_once(&qword_1EB3BE888, &unk_1EDFD2CC0);
        }
        float v71 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "void kf_work(kiss_fft_cpx *, const CMQueue<scalar_32> &, int, const size_t, int, const int *, const kiss_fft_state *)", "CoreLocation: %s\n", v71);
        if (v71 != (char *)buf) {
          free(v71);
        }
      }
    }
  }
}

void sub_1905E9AE4(uint64_t a1, char a2, int a3)
{
  uint64_t v5 = sub_1902C4008(a1, a3);
  char v6 = *(unsigned char *)(v5 + 8);
  *(void *)(v5 + 256) = 0;
  *(void *)(v5 + 264) = 0;
  *(unsigned char *)(v5 + 272) = 0;
  *(void *)(v5 + 208) = 0;
  *(void *)(v5 + 216) = 0;
  *(_WORD *)(v5 + 224) = 0;
  *(unsigned char *)(v5 + 273) = v6;
  *(void *)uint64_t v5 = &unk_1EDFC9F80;
  *(void *)(v5 + 20dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = &unk_1EDFC9FE8;
  *(void *)(v5 + 28dispatch_queue_create("com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue", 0) = 0;
  *(void *)(v5 + 288) = 0;
  uint64_t v7 = sub_1902B4534();
  double v8 = sub_1902B4DA8(v7, (double *)(a1 + 24));
  sub_1904D1BD4(a1 + 296, &v8, a1 + 16, a2);
}

void sub_1905E9BF4(_Unwind_Exception *a1)
{
  sub_190445960(v2);
  sub_1905B1F7C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1905E9C20(void *a1)
{
  *a1 = &unk_1EDFC9F80;
  float v2 = a1 + 25;
  a1[25] = &unk_1EDFC9FE8;
  sub_1902BF7D4(a1);
  sub_1904D23D4(a1 + 37);
  sub_190445960(v2);

  return sub_1905B1F7C((uint64_t)a1);
}

uint64_t sub_1905E9CAC(uint64_t a1)
{
  return sub_1905E9C20((void *)(a1 - 200));
}

void sub_1905E9CB4(void *a1)
{
  sub_1905E9C20(a1);

  JUMPOUT(0x192FCC980);
}

void sub_1905E9CEC(uint64_t a1)
{
  sub_1905E9C20((void *)(a1 - 200));

  JUMPOUT(0x192FCC980);
}

void sub_1905E9D28(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE878 != -1) {
    dispatch_once(&qword_1EB3BE878, &unk_1EDFD2CE0);
  }
  float v2 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_INFO))
  {
    sub_1902D6BD0();
    uint64_t v3 = *(void *)_CFGetProgname();
    *(_DWORD *)float32x4_t buf = 136446210;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_INFO, "%{public}s is enabling power conservative device motion for parallax.", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD2CE0);
    }
    sub_1902D6BD0();
    uint64_t v5 = *(void *)_CFGetProgname();
    LODWORD(v9[0]) = 136446210;
    *(void *)((char *)v9 + 4) = v5;
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "virtual void CLSensorFusionService3AxisDynamicGyro::start()", "CoreLocation: %s\n", v6);
    if (v6 != buf) {
      free(v6);
    }
  }
  sub_1904D24A4(a1 + 296);
  *(void *)float32x4_t buf = 0;
  unint64_t v8 = 0xBFF0000000000000;
  v9[0] = 0.0;
  uint64_t v4 = mach_absolute_time();
  double v7 = sub_1902D8D34(v4);
  sub_1904D3C0C(a1 + 296, (double *)buf, v9, (double *)&v8, &v7);
  operator new();
}

void sub_1905EA0E0(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

void sub_1905EA110(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 312;
  float v5 = *(float *)(a2 + 12);
  double v17 = *(float *)(a2 + 8);
  *(double *)v16.i64 = v5;
  double v32 = *(float *)(a2 + 16);
  sub_1904D25B4(a1 + 296, (float64x2_t *)&v17, (uint64_t)&v16, &v32, (void *)a2);
  v6.i64[0] = *(void *)(a1 + 472);
  float v7 = 0.0;
  float v8 = 0.0;
  float v9 = 0.0;
  if (*(double *)v6.i64 > 0.0)
  {
    double v10 = *(double *)(a1 + 336);
    double v11 = *(double *)(a1 + 328) + *(double *)(a1 + 328);
    double v12 = *(double *)(a1 + 312);
    double v13 = *(double *)(a1 + 320);
    float v7 = *(float *)(a1 + 480) - (v10 * (v13 + v13) - v12 * v11);
    float v8 = *(float *)(a1 + 484) - (-(v10 * (v12 + v12)) - v13 * v11);
    *(double *)v6.i64 = *(float *)(a1 + 488) - (v12 * (v12 + v12) + -1.0 + v13 * (v13 + v13));
    float v9 = *(double *)v6.i64;
  }
  int v14 = *(_DWORD *)(a1 + 460);
  float32x4_t v18 = 0uLL;
  double v17 = -1.0;
  sub_1902D9ACC(&v18, v6);
  char v27 = 1;
  double v17 = *(double *)a2;
  float64x2_t v15 = *(float64x2_t *)(v4 + 16);
  float32x4_t v16 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v4), v15);
  sub_1902D9ACC(&v16, (float32x4_t)v15);
  float32x4_t v18 = v16;
  float v19 = v7;
  float v20 = v8;
  float v21 = v9;
  uint64_t v22 = *(void *)(v4 + 140);
  int v23 = v14;
  char v26 = -1;
  long long v24 = xmmword_190609AD0;
  long long v25 = xmmword_19060AF90;
  __int16 v28 = (*(unsigned __int8 *)(a1 + 304) << 8) | (16 * *(unsigned __int8 *)(a1 + 252));
  int v29 = 2;
  uint64_t v31 = 0;
  char v30 = 0;
  sub_1902D9B30(a1, (uint64_t)&v17);
}

void sub_1905EA2B4(uint64_t a1, uint64_t a2)
{
}

void sub_1905EA2BC(uint64_t a1, float32x2_t *a2, float *a3)
{
}

void sub_1905EA2C4(uint64_t a1, float32x2_t *a2, float *a3)
{
}

uint64_t sub_1905EA2CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_190445A68(v1 + 200);
  if (!*(void *)(v1 + 288)) {
    operator new();
  }
  sub_190445B8C(v1 + 200);
  uint64_t v3 = 2;
  return sub_1905B224C(v1, &v3);
}

void sub_1905EA3B0(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_1905EA3D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_1902DE0A4((void *)(v1 + 200));
  uint64_t v3 = 1;
  return sub_1905B224C(v1, &v3);
}

uint64_t sub_1905EA418(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1EB3BE878 != -1) {
    dispatch_once(&qword_1EB3BE878, &unk_1EDFD2CE0);
  }
  float v2 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)float32x4_t buf = 0;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_INFO, "Device is stationary and Timeout exceeded, turning off device motion gyro heartbeat and bias estimator.", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD2CE0);
    }
    float32x4_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "virtual void CLSensorFusionService3AxisDynamicGyro::feedAccelerometerData(const CLAccelerometer::Sample *)_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (*(void *)(v1 + 288))
  {
    uint64_t v3 = sub_1902B4534();
    sub_1902CDE08(v3, 0, *(void *)(v1 + 288));
    uint64_t v4 = *(void *)(v1 + 288);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    *(void *)(v1 + 288) = 0;
  }
  sub_1902DE10C(v1 + 200);
  *(void *)float32x4_t buf = 0;
  return sub_1905B224C(v1, buf);
}

os_log_t sub_1905EAF68()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "CyclingPower");
  qword_1E929D9F0 = (uint64_t)result;
  return result;
}

os_log_t sub_1905EB5C4()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Notifier");
  qword_1E929D720 = (uint64_t)result;
  return result;
}

os_log_t sub_1905EC27C()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Notifier");
  qword_1E929D720 = (uint64_t)result;
  return result;
}

uint64_t sub_1905EC3A0()
{
  return 1;
}

void sub_1905EC3A8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE888 != -1) {
    dispatch_once(&qword_1EB3BE888, &unk_1EDFD2D60);
  }
  float32x4_t v6 = off_1EB3BE880;
  if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)float32x4_t buf = 67109376;
    int v25 = v7;
    __int16 v26 = 1024;
    int v27 = a2;
    _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_DEBUG, "signal,from,%d,event,%d", buf, 0xEu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD2D60);
    }
    float v21 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CMFiniteStateMachine::signal(uint8_t, const void *)", "CoreLocation: %s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
  unint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
LABEL_23:
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD2D60);
    }
    double v17 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)float32x4_t buf = 0;
      _os_log_impl(&dword_1902AF000, v17, OS_LOG_TYPE_DEBUG, "no transition", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD2D60);
      }
      uint64_t v22 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CMFiniteStateMachine::signal(uint8_t, const void *)", "CoreLocation: %s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
    return;
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  while (1)
  {
    double v11 = (unsigned __int8 *)(*(void *)a1 + v9);
    if (*v11 != *(unsigned __int8 *)(a1 + 16) || v11[1] != a2) {
      goto LABEL_17;
    }
    int v12 = v11[2];
    double v13 = (void (*)(uint64_t, uint64_t))*((void *)v11 + 2);
    int v14 = (*((uint64_t (**)(uint64_t, uint64_t))v11 + 1))(a1, a3);
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD2D60);
    }
    float64x2_t v15 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)float32x4_t buf = 67109376;
      int v25 = v10;
      __int16 v26 = 1024;
      int v27 = v14;
      _os_log_impl(&dword_1902AF000, v15, OS_LOG_TYPE_DEBUG, "guard check,arc,%d,passed,%d", buf, 0xEu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD2D60);
      }
      float32x4_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CMFiniteStateMachine::signal(uint8_t, const void *)", "CoreLocation: %s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    if (v14) {
      break;
    }
    unint64_t v8 = *(void *)(a1 + 8);
LABEL_17:
    ++v10;
    v9 += 24;
    if (v8 <= v10) {
      goto LABEL_23;
    }
  }
  if (*(unsigned __int8 *)(a1 + 17) <= 1u && *(unsigned __int8 *)(a1 + 16) != v12)
  {
    if (qword_1E929D968 != -1) {
      dispatch_once(&qword_1E929D968, &unk_1EDFD30A0);
    }
    float32x4_t v18 = qword_1E929D970;
    if (os_log_type_enabled((os_log_t)qword_1E929D970, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = *(unsigned __int8 *)(a1 + 17);
      int v20 = *(unsigned __int8 *)(a1 + 16);
      *(_DWORD *)float32x4_t buf = 67109888;
      int v25 = v19;
      __int16 v26 = 1024;
      int v27 = a2;
      __int16 v28 = 1024;
      int v29 = v20;
      __int16 v30 = 1024;
      int v31 = v12;
      _os_log_impl(&dword_1902AF000, v18, OS_LOG_TYPE_DEFAULT, "[FSM] %u,event,%u,transition,from,%u,to,%u", buf, 0x1Au);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D968 != -1) {
        dispatch_once(&qword_1E929D968, &unk_1EDFD30A0);
      }
      int v23 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CMFiniteStateMachine::signal(uint8_t, const void *)", "CoreLocation: %s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
  }
  *(unsigned char *)(a1 + 16) = v12;
  v13(a1, a3);
}

os_log_t sub_1905ECA40()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "FSM");
  qword_1E929D970 = (uint64_t)result;
  return result;
}

void sub_1905ECC04(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 49) < 0) {
    operator delete(*(void **)(v2 - 72));
  }
  MEMORY[0x192FCC980](v1, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

uint64_t sub_1905ECC40(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_opt_class();
  int v12 = (NSSet *)objc_msgSend_setWithObjects_(v4, v11, v5, v6, v7, v8, v9, v10, 0);
  if (*a2) {
    uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v12);
  }
  else {
    uint64_t DictionaryOfClasses = 0;
  }
  uint64_t v14 = *(void *)(a1 + 32);

  return MEMORY[0x1F4181798](v14, sel__handleDaemonEvent_, DictionaryOfClasses);
}

void sub_1905ECD2C(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = getpid();
  uint64_t ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2);
  if (ExecutablePathFromPid)
  {
    uint64_t v7 = ExecutablePathFromPid;
    if (qword_1E929D938 != -1) {
      dispatch_once(&qword_1E929D938, &unk_1EDFD2D80);
    }
    uint64_t v8 = qword_1E929D940;
    if (os_log_type_enabled((os_log_t)qword_1E929D940, OS_LOG_TYPE_DEFAULT))
    {
      pid_t v9 = getpid();
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(v10 + 72);
      *(_DWORD *)float32x4_t buf = 138413058;
      uint64_t v26 = v7;
      __int16 v27 = 1024;
      pid_t v28 = v9;
      __int16 v29 = 2048;
      uint64_t v30 = v11;
      __int16 v31 = 2048;
      uint64_t v32 = v10;
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_DEFAULT, "Workout, client connection interrupt, %@, %d, %ld, %p", buf, 0x26u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D938 != -1) {
        dispatch_once(&qword_1E929D938, &unk_1EDFD2D80);
      }
      getpid();
      long long v24 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMWorkoutManagerInternal init]_block_invoke", "CoreLocation: %s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
  }
  int v12 = objc_msgSend_copy(*(void **)(*(void *)(a1 + 32) + 40), v5, v6);
  float32x4_t v16 = objc_msgSend_copy(*(void **)(*(void *)(a1 + 32) + 48), v13, v14);
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = *(void *)(v17 + 72);
  if (v18 == 2)
  {
    objc_msgSend__beginWorkoutSession_withWorkout_enableWorkoutChangeDetection_((void *)v17, v15, *(void *)(v17 + 56), v12, *(unsigned __int8 *)(v17 + 64));
    if (v16 && objc_msgSend_type(v16, v22, v23) == 33) {
      objc_msgSend__setCurrentWorkoutType_isManualTransition_(*(void **)(a1 + 32), v22, (uint64_t)v16, 1);
    }
    objc_msgSend__pauseWorkout_(*(void **)(a1 + 32), v22, *(void *)(*(void *)(a1 + 32) + 48));
  }
  else if (v18 == 1)
  {
    objc_msgSend__beginWorkoutSession_withWorkout_enableWorkoutChangeDetection_((void *)v17, v15, *(void *)(v17 + 56), v12, *(unsigned __int8 *)(v17 + 64));
    if (v16)
    {
      if (objc_msgSend_type(v16, v19, v20) == 33) {
        objc_msgSend__setCurrentWorkoutType_isManualTransition_(*(void **)(a1 + 32), v21, (uint64_t)v16, 1);
      }
    }
  }
}

void sub_1905ED108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905ED8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a17) {
    sub_1902D8B58(a17);
  }
  if (a26) {
    sub_1902D8B58(a26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1905ED910(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v8 = (NSSet *)objc_msgSend_setWithObjects_(v4, v7, v5, v6, 0);
  if (*a2) {
    uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v8);
  }
  else {
    uint64_t DictionaryOfClasses = 0;
  }
  uint64_t v10 = *(void *)(a1 + 32);

  return MEMORY[0x1F4181798](v10, sel__handleDaemonResponse_, DictionaryOfClasses);
}

void sub_1905EDC0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a12) {
    sub_1902D8B58(a12);
  }
  if (a18) {
    sub_1902D8B58(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905EDF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a18) {
    sub_1902D8B58(a18);
  }
  sub_1902D8B58(v32);
  _Unwind_Resume(a1);
}

uint64_t sub_1905EDFE0(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v8 = (NSSet *)objc_msgSend_setWithObjects_(v4, v7, v5, v6, 0);
  if (*a2) {
    uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v8);
  }
  else {
    uint64_t DictionaryOfClasses = 0;
  }
  uint64_t v10 = *(void *)(a1 + 32);

  return MEMORY[0x1F4181798](v10, sel__handleDaemonResponse_, DictionaryOfClasses);
}

void sub_1905F0AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, std::__shared_weak_count *a19, int a20,__int16 a21,char a22,char a23)
{
  if (a11) {
    sub_1902D8B58(a11);
  }
  if (a19) {
    sub_1902D8B58(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1905F0B34(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_opt_class();
  int v12 = (NSSet *)objc_msgSend_setWithObjects_(v4, v11, v5, v6, v7, v8, v9, v10, 0);
  uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v12);
  uint64_t v14 = *(void *)(a1 + 32);

  return MEMORY[0x1F4181798](v14, sel__handleDaemonEvent_, DictionaryOfClasses);
}

void sub_1905F0D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, std::__shared_weak_count *a19, int a20,__int16 a21,char a22,char a23)
{
  if (a11) {
    sub_1902D8B58(a11);
  }
  if (a19) {
    sub_1902D8B58(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1905F0DB8(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_opt_class();
  int v12 = (NSSet *)objc_msgSend_setWithObjects_(v4, v11, v5, v6, v7, v8, v9, v10, 0);
  uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v12);
  uint64_t v14 = *(void *)(a1 + 32);

  return MEMORY[0x1F4181798](v14, sel__handleDaemonEvent_, DictionaryOfClasses);
}

void sub_1905F0FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1902D8B58(a15);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v15 - 32);
  if (v17) {
    sub_1902D8B58(v17);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1905F0FE4(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v9 = (NSSet *)objc_msgSend_setWithObjects_(v4, v8, v5, v6, v7, 0);
  if (!*a2 || (uint64_t DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v9)) == 0)
  {
    if (qword_1E929D760 != -1) {
      dispatch_once(&qword_1E929D760, &unk_1EDFC2040);
    }
    pid_t v28 = qword_1E929D768;
    if (os_log_type_enabled((os_log_t)qword_1E929D768, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)float32x4_t buf = 0;
      _os_log_impl(&dword_1902AF000, v28, OS_LOG_TYPE_ERROR, "Prompts needed response invalid.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D760 != -1) {
        dispatch_once(&qword_1E929D760, &unk_1EDFC2040);
      }
      uint64_t v33 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMWorkoutManagerInternal _getPromptsNeededForWorkoutType:handler:]_block_invoke", "CoreLocation: %s\n", v33);
      if (v33 != (char *)buf) {
        free(v33);
      }
    }
    uint64_t v23 = *(void *)(a1 + 32);
    uint64_t v27 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v29, @"CMErrorDomain", 103, 0);
    return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(v23 + 16))(v23, 0, v27);
  }
  int v12 = DictionaryOfClasses;
  double v13 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v11, @"CMErrorMessage");
  os_log_t result = objc_msgSend_objectForKeyedSubscript_(v12, v14, @"CMReturnCode");
  if (v13)
  {
    if (qword_1E929D760 != -1) {
      dispatch_once(&qword_1E929D760, &unk_1EDFC2040);
    }
    uint64_t v18 = qword_1E929D768;
    if (os_log_type_enabled((os_log_t)qword_1E929D768, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)float32x4_t buf = 134349056;
      uint64_t v38 = objc_msgSend_integerValue(v13, v19, v20);
      _os_log_impl(&dword_1902AF000, v18, OS_LOG_TYPE_ERROR, "Querying for calibration prompts encountered an error: %{public}ld.", buf, 0xCu);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D760 != -1) {
        dispatch_once(&qword_1E929D760, &unk_1EDFC2040);
      }
      objc_msgSend_integerValue(v13, v34, v35);
      float v36 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMWorkoutManagerInternal _getPromptsNeededForWorkoutType:handler:]_block_invoke", "CoreLocation: %s\n", v36);
      if (v36 != (char *)buf) {
        free(v36);
      }
    }
    uint64_t v23 = *(void *)(a1 + 32);
    long long v24 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v25 = objc_msgSend_integerValue(v13, v21, v22);
    uint64_t v27 = objc_msgSend_errorWithDomain_code_userInfo_(v24, v26, @"CMErrorDomain", v25, 0);
    return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(v23 + 16))(v23, 0, v27);
  }
  if (result)
  {
    uint64_t v30 = *(void *)(a1 + 32);
    uint64_t v31 = objc_msgSend_unsignedIntegerValue(result, v16, v17);
    uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, void))(v30 + 16);
    return (void *)v32(v30, v31, 0);
  }
  return result;
}

uint64_t sub_1905F1430(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v8 = (NSSet *)objc_msgSend_setWithObjects_(v4, v7, v5, v6, 0);
  if (*a2) {
    uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v8);
  }
  else {
    uint64_t DictionaryOfClasses = 0;
  }
  uint64_t v10 = *(void *)(a1 + 32);

  return MEMORY[0x1F4181798](v10, sel__handleDaemonResponse_, DictionaryOfClasses);
}

void sub_1905F1824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  if (a17) {
    sub_1902D8B58(a17);
  }
  if (a30) {
    sub_1902D8B58(a30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1905F1850(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v8 = (NSSet *)objc_msgSend_setWithObjects_(v4, v7, v5, v6, 0);
  if (*a2) {
    uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v8);
  }
  else {
    uint64_t DictionaryOfClasses = 0;
  }
  uint64_t v10 = *(void *)(a1 + 32);

  return MEMORY[0x1F4181798](v10, sel__handleDaemonResponse_, DictionaryOfClasses);
}

void sub_1905F1C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  if (a17) {
    sub_1902D8B58(a17);
  }
  if (a28) {
    sub_1902D8B58(a28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1905F1C94(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v8 = (NSSet *)objc_msgSend_setWithObjects_(v4, v7, v5, v6, 0);
  if (*a2) {
    uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v8);
  }
  else {
    uint64_t DictionaryOfClasses = 0;
  }
  uint64_t v10 = *(void *)(a1 + 32);

  return MEMORY[0x1F4181798](v10, sel__handleDaemonResponse_, DictionaryOfClasses);
}

void sub_1905F2038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  if (a17) {
    sub_1902D8B58(a17);
  }
  if (a28) {
    sub_1902D8B58(a28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1905F2064(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v8 = (NSSet *)objc_msgSend_setWithObjects_(v4, v7, v5, v6, 0);
  if (*a2) {
    uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v8);
  }
  else {
    uint64_t DictionaryOfClasses = 0;
  }
  uint64_t v10 = *(void *)(a1 + 32);

  return MEMORY[0x1F4181798](v10, sel__handleDaemonResponse_, DictionaryOfClasses);
}

void sub_1905F2408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  if (a17) {
    sub_1902D8B58(a17);
  }
  if (a28) {
    sub_1902D8B58(a28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1905F2434(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v8 = (NSSet *)objc_msgSend_setWithObjects_(v4, v7, v5, v6, 0);
  if (*a2) {
    uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v8);
  }
  else {
    uint64_t DictionaryOfClasses = 0;
  }
  uint64_t v10 = *(void *)(a1 + 32);

  return MEMORY[0x1F4181798](v10, sel__handleDaemonResponse_, DictionaryOfClasses);
}

void sub_1905F292C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18) {
    sub_1902D8B58(a18);
  }
  sub_1902D8B58(v28);
  _Unwind_Resume(a1);
}

uint64_t sub_1905F2980(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v10 = (char *)objc_msgSend_setWithObjects_(v4, v9, v5, v6, v7, v8, 0);
  if (!*a2 || (uint64_t DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, (NSSet *)v10)) == 0)
  {
    objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v10, @"CMErrorDomain", 103, 0);
    if (qword_1E929D938 != -1) {
      dispatch_once(&qword_1E929D938, &unk_1EDFD2D80);
    }
    __int16 v29 = qword_1E929D940;
    if (os_log_type_enabled((os_log_t)qword_1E929D940, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)float32x4_t buf = 0;
      _os_log_impl(&dword_1902AF000, v29, OS_LOG_TYPE_ERROR, "[snapshot] error, nil event dictionary", buf, 2u);
    }
    if (!sub_1902D8400(115, 0)) {
      goto LABEL_17;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929D938 != -1) {
      dispatch_once(&qword_1E929D938, &unk_1EDFD2D80);
    }
    goto LABEL_27;
  }
  int v12 = DictionaryOfClasses;
  if (objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v10, @"CMErrorMessage"))
  {
    uint64_t v14 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v15 = objc_msgSend_objectForKeyedSubscript_(v12, v13, @"CMErrorMessage");
    uint64_t v18 = objc_msgSend_integerValue(v15, v16, v17);
    objc_msgSend_errorWithDomain_code_userInfo_(v14, v19, @"CMErrorDomain", v18, 0);
    if (qword_1E929D938 != -1) {
      dispatch_once(&qword_1E929D938, &unk_1EDFD2D80);
    }
    uint64_t v20 = qword_1E929D940;
    if (os_log_type_enabled((os_log_t)qword_1E929D940, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = objc_msgSend_objectForKeyedSubscript_(v12, v21, @"CMErrorMessage");
      *(_DWORD *)float32x4_t buf = 67109120;
      LODWORD(v37) = objc_msgSend_intValue(v22, v23, v24);
      _os_log_impl(&dword_1902AF000, v20, OS_LOG_TYPE_ERROR, "[snapshot] error, %d", buf, 8u);
    }
    if (!sub_1902D8400(115, 0)) {
      goto LABEL_17;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929D938 != -1) {
      dispatch_once(&qword_1E929D938, &unk_1EDFD2D80);
    }
    uint64_t v26 = objc_msgSend_objectForKeyedSubscript_(v12, v25, @"CMErrorMessage");
    objc_msgSend_intValue(v26, v27, v28);
LABEL_27:
    float v34 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "-[CMWorkoutManagerInternal _snapshotWithCompletion:]_block_invoke", "CoreLocation: %s\n", v34);
    if (v34 != (char *)buf) {
      free(v34);
    }
LABEL_17:
    uint64_t v30 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
    return v30();
  }
  uint64_t v32 = objc_msgSend_objectForKeyedSubscript_(v12, v13, @"CMWorkoutSnapshotData");
  if (qword_1E929D938 != -1) {
    dispatch_once(&qword_1E929D938, &unk_1EDFD2D80);
  }
  uint64_t v33 = qword_1E929D940;
  if (os_log_type_enabled((os_log_t)qword_1E929D940, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)float32x4_t buf = 138412290;
    uint64_t v37 = v32;
    _os_log_impl(&dword_1902AF000, v33, OS_LOG_TYPE_INFO, "[snapshot] reporting workout snapshot %@", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D938 != -1) {
      dispatch_once(&qword_1E929D938, &unk_1EDFD2D80);
    }
    uint64_t v35 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMWorkoutManagerInternal _snapshotWithCompletion:]_block_invoke", "CoreLocation: %s\n", v35);
    if (v35 != (char *)buf) {
      free(v35);
    }
  }
  uint64_t v30 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
  return v30();
}

void sub_1905F3358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  if (a17) {
    sub_1902D8B58(a17);
  }
  if (a30) {
    sub_1902D8B58(a30);
  }
  _Unwind_Resume(exception_object);
}

void sub_1905F3384(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v8 = (NSSet *)objc_msgSend_setWithObjects_(v4, v7, v5, v6, 0);
  if (*a2)
  {
    uint64_t DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v8);
    uint64_t v11 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v10, @"CMErrorMessage");
  }
  else
  {
    uint64_t DictionaryOfClasses = 0;
    uint64_t v11 = objc_msgSend_objectForKeyedSubscript_(0, (const char *)v8, @"CMErrorMessage");
  }
  if (v11)
  {
    if (qword_1E929D938 != -1) {
      dispatch_once(&qword_1E929D938, &unk_1EDFD2D80);
    }
    int v12 = qword_1E929D940;
    if (os_log_type_enabled((os_log_t)qword_1E929D940, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v13, @"CMErrorMessage");
      *(_DWORD *)float32x4_t buf = 134218240;
      uint64_t v26 = v14;
      __int16 v27 = 1024;
      int v28 = objc_msgSend_intValue(v15, v16, v17);
      _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_ERROR, "Workout, reminder mute settings, error muting reminder for type, %ld, error, %d", buf, 0x12u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D938 != -1) {
        dispatch_once(&qword_1E929D938, &unk_1EDFD2D80);
      }
      int v19 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v18, @"CMErrorMessage");
      objc_msgSend_intValue(v19, v20, v21);
LABEL_21:
      uint64_t v24 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMWorkoutManagerInternal _muteReminderType:mute:]_block_invoke", "CoreLocation: %s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
  }
  else
  {
    if (qword_1E929D938 != -1) {
      dispatch_once(&qword_1E929D938, &unk_1EDFD2D80);
    }
    uint64_t v22 = qword_1E929D940;
    if (os_log_type_enabled((os_log_t)qword_1E929D940, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *(void *)(a1 + 32);
      *(_DWORD *)float32x4_t buf = 134217984;
      uint64_t v26 = v23;
      _os_log_impl(&dword_1902AF000, v22, OS_LOG_TYPE_ERROR, "Workout, reminder mute settings, error (unspecified) muting reminder for type %ld", buf, 0xCu);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D938 != -1) {
        dispatch_once(&qword_1E929D938, &unk_1EDFD2D80);
      }
      goto LABEL_21;
    }
  }
}

uint64_t sub_1905F3DB8(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend__teardown(*(void **)(a1 + 32), a2, a3);
}

uint64_t sub_1905F3E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__registerForWorkoutEvents, a3);
}

uint64_t sub_1905F3F7C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__startWorkout_, *(void *)(a1 + 40));
}

uint64_t sub_1905F4058(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__stopWorkout_, *(void *)(a1 + 40));
}

uint64_t sub_1905F4334(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend__internal(*(void **)(a1 + 32), a2, a3);
  uint64_t v5 = *(void *)(a1 + 48);

  return MEMORY[0x1F4181798](v4, sel__getPromptsNeededForWorkoutType_handler_, v5);
}

uint64_t sub_1905F4448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__setSuggestedStopTimeout_, a3);
}

uint64_t sub_1905F44CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__userDismissedWorkoutAlert, a3);
}

uint64_t sub_1905F45A8(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__triggerWorkoutLocationUpdateForTesting_, *(void *)(a1 + 40));
}

uint64_t sub_1905F4630(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel__muteReminderType_mute_, *(void *)(a1 + 40));
}

uint64_t sub_1905F4774(uint64_t a1, const char *a2)
{
  return objc_msgSend__beginWorkoutSession_withWorkout_enableWorkoutChangeDetection_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
}

uint64_t sub_1905F4860(uint64_t a1, const char *a2)
{
  return objc_msgSend__setCurrentWorkoutType_isManualTransition_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

uint64_t sub_1905F4940(uint64_t a1, const char *a2)
{
  return objc_msgSend__endWorkoutSession_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40));
}

uint64_t sub_1905F4A1C(uint64_t a1, const char *a2)
{
  return objc_msgSend__pauseWorkout_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40));
}

uint64_t sub_1905F4AF8(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__resumeWorkout_, *(void *)(a1 + 40));
}

uint64_t sub_1905F4B7C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 8), sel__snapshotWithCompletion_, *(void *)(a1 + 40));
}

os_log_t sub_1905F4B88()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Workout");
  qword_1E929D940 = (uint64_t)result;
  return result;
}

os_log_t sub_1905F4BB8()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Calorimetry");
  qword_1E929D768 = (uint64_t)result;
  return result;
}

os_log_t sub_1905F4BE8()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Swimming");
  qword_1E929D8C0 = (uint64_t)result;
  return result;
}

void sub_1905F4C18()
{
  __assert_rtn("setFlushTimeoutSeconds_block_invoke", "MSLWriter.cpp", 56, "(fFd == -1) && (\"Writer::setFlushTimeout() must be called before ::open().\")");
}

void sub_1905F4C44(uint64_t a1, void *a2, os_log_t log)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a1 + 39) < 0) {
    a2 = (void *)*a2;
  }
  int v3 = 136446210;
  uint64_t v4 = a2;
  _os_log_error_impl(&dword_1902AF000, log, OS_LOG_TYPE_ERROR, "Unable to create directory at path: %{public}s", (uint8_t *)&v3, 0xCu);
}

uint64_t sub_1905F4CCC(os_log_t log)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = 136315650;
  int v3 = "assert";
  __int16 v4 = 2080;
  uint64_t v5 = "fValid";
  __int16 v6 = 2080;
  uint64_t v7 = "On call to writeItem client should check if the logger was opened";
  _os_log_fault_impl(&dword_1902AF000, log, OS_LOG_TYPE_FAULT, "Event: %s\n Condition: %s\n Message: %s", (uint8_t *)&v2, 0x20u);
  if (qword_1E929E7E0 == -1) {
    return 1;
  }
  dispatch_once(&qword_1E929E7E0, &unk_1EDFD1340);
  return 0;
}

uint64_t sub_1905F4DA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t sub_1905F4DC8()
{
  return MEMORY[0x1F4188670]();
}

uint64_t sub_1905F4DD8()
{
  return MEMORY[0x1F4188680]();
}

uint64_t sub_1905F4DE8()
{
  return MEMORY[0x1F41886A0]();
}

uint64_t sub_1905F4DF8()
{
  return MEMORY[0x1F4183880]();
}

uint64_t sub_1905F4E08()
{
  return MEMORY[0x1F4183A80]();
}

uint64_t sub_1905F4E18()
{
  return MEMORY[0x1F40E6370]();
}

uint64_t sub_1905F4E28()
{
  return MEMORY[0x1F4187BF0]();
}

uint64_t sub_1905F4E38()
{
  return MEMORY[0x1F4187EA8]();
}

uint64_t sub_1905F4E48()
{
  return MEMORY[0x1F4187EB8]();
}

uint64_t sub_1905F4E58()
{
  return MEMORY[0x1F4187EC0]();
}

uint64_t sub_1905F4E68()
{
  return MEMORY[0x1F4187ED0]();
}

uint64_t sub_1905F4E88()
{
  return MEMORY[0x1F4187F00]();
}

uint64_t sub_1905F4E98()
{
  return MEMORY[0x1F41886C0]();
}

uint64_t sub_1905F4EA8()
{
  return MEMORY[0x1F41886E0]();
}

uint64_t sub_1905F4EB8()
{
  return MEMORY[0x1F4188700]();
}

uint64_t sub_1905F4EC8()
{
  return MEMORY[0x1F41847C0]();
}

uint64_t sub_1905F4ED8()
{
  return MEMORY[0x1F4184820]();
}

uint64_t sub_1905F4EE8()
{
  return MEMORY[0x1F4184CF0]();
}

uint64_t sub_1905F4EF8()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t sub_1905F4F08()
{
  return MEMORY[0x1F4185298]();
}

uint64_t sub_1905F4F18()
{
  return MEMORY[0x1F4185350]();
}

uint64_t sub_1905F4F28()
{
  return MEMORY[0x1F4185398]();
}

uint64_t ADClientAddValueForScalarKey()
{
  return MEMORY[0x1F41071E8]();
}

uint64_t ADClientPushValueForDistributionKey()
{
  return MEMORY[0x1F4107208]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1F41138B0]();
}

void AudioServicesPlaySystemSound(SystemSoundID inSystemSoundID)
{
}

uint64_t BKSHIDServicesRequestEstimatedProximityEvents()
{
  return MEMORY[0x1F410BFD8]();
}

uint64_t BTAccessoryManagerAddCallbacks()
{
  return MEMORY[0x1F412F5C8]();
}

uint64_t BTAccessoryManagerDeregisterCustomMessageClient()
{
  return MEMORY[0x1F412F5D8]();
}

uint64_t BTAccessoryManagerGetAccessoryInfo()
{
  return MEMORY[0x1F412F5E8]();
}

uint64_t BTAccessoryManagerGetAdaptiveLatencyJitterBufferLevel()
{
  return MEMORY[0x1F412F5F0]();
}

uint64_t BTAccessoryManagerGetDefault()
{
  return MEMORY[0x1F412F610]();
}

uint64_t BTAccessoryManagerGetInEarDetectionEnable()
{
  return MEMORY[0x1F412F628]();
}

uint64_t BTAccessoryManagerGetInEarStatus()
{
  return MEMORY[0x1F412F630]();
}

uint64_t BTAccessoryManagerGetSpatialAudioPlatformSupport()
{
  return MEMORY[0x1F412F640]();
}

uint64_t BTAccessoryManagerGetTimeSyncId()
{
  return MEMORY[0x1F412F648]();
}

uint64_t BTAccessoryManagerRegisterCustomMessageClient()
{
  return MEMORY[0x1F412F650]();
}

uint64_t BTAccessoryManagerRemoteTimeSyncEnable()
{
  return MEMORY[0x1F412F658]();
}

uint64_t BTAccessoryManagerRemoveCallbacks()
{
  return MEMORY[0x1F412F660]();
}

uint64_t BTAccessoryManagerSensorStreamTimeSyncEnable()
{
  return MEMORY[0x1F412F670]();
}

uint64_t BTDeviceAddressFromString()
{
  return MEMORY[0x1F412F678]();
}

uint64_t BTDeviceFromAddress()
{
  return MEMORY[0x1F412F6A8]();
}

uint64_t BTDeviceGetDeviceId()
{
  return MEMORY[0x1F412F6F8]();
}

uint64_t BTSessionAttachWithQueue()
{
  return MEMORY[0x1F412F898]();
}

void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len)
{
}

void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon, unsigned int *nbytes_in, unsigned int *nbytes_out)
{
}

BZFILE *__cdecl BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity, int workFactor)
{
  return (BZFILE *)MEMORY[0x1F417E340](bzerror, f, *(void *)&blockSize100k, *(void *)&verbosity, *(void *)&workFactor);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1F40D72D8](arg);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x1F40D7528](allocator, bundleURL);
}

CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1F40D75D0](bundle, key);
}

uint64_t CFCopyHomeDirectoryURLForUser()
{
  return MEMORY[0x1F40D77B8]();
}

uint64_t CFCopyUserName()
{
  return MEMORY[0x1F40D77D8]();
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1F40D7860]();
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7990](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D79A8](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1F40D7AA8](err);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return (CFErrorDomain)MEMORY[0x1F40D7AB8](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

uint64_t CFGetUserName()
{
  return MEMORY[0x1F40D7B88]();
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D08]();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D20]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer)
{
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x1F40D7E08](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x1F40D7E30](number);
}

CFArrayRef CFPreferencesCopyKeyList(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFArrayRef)MEMORY[0x1F40D7EB8](applicationID, userName, hostName);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7ED0](key, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE0](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetMultiple(CFDictionaryRef keysToSet, CFArrayRef keysToRemove, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1F40D7F10](applicationID, userName, hostName);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40D7F18](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F50](allocator, data, options, format, error);
}

CFIndex CFPropertyListWrite(CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return MEMORY[0x1F40D7F70](propertyList, stream, format, options, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFRunLoopAddObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFRunLoopAddTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B0]();
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B8]();
}

CFRunLoopObserverRef CFRunLoopObserverCreate(CFAllocatorRef allocator, CFOptionFlags activities, Boolean repeats, CFIndex order, CFRunLoopObserverCallBack callout, CFRunLoopObserverContext *context)
{
  return (CFRunLoopObserverRef)MEMORY[0x1F40D80D8](allocator, activities, repeats, order, callout, context);
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
}

void CFRunLoopRemoveObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFRunLoopRemoveTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode)
{
}

void CFRunLoopRun(void)
{
}

CFRunLoopSourceRef CFRunLoopSourceCreate(CFAllocatorRef allocator, CFIndex order, CFRunLoopSourceContext *context)
{
  return (CFRunLoopSourceRef)MEMORY[0x1F40D8140](allocator, order, context);
}

CFRunLoopTimerRef CFRunLoopTimerCreate(CFAllocatorRef allocator, CFAbsoluteTime fireDate, CFTimeInterval interval, CFOptionFlags flags, CFIndex order, CFRunLoopTimerCallBack callout, CFRunLoopTimerContext *context)
{
  return (CFRunLoopTimerRef)MEMORY[0x1F40D8180](allocator, flags, order, callout, context, fireDate, interval);
}

CFRunLoopTimerRef CFRunLoopTimerCreateWithHandler(CFAllocatorRef allocator, CFAbsoluteTime fireDate, CFTimeInterval interval, CFOptionFlags flags, CFIndex order, void *block)
{
  return (CFRunLoopTimerRef)MEMORY[0x1F40D8188](allocator, flags, order, block, fireDate, interval);
}

void CFRunLoopTimerInvalidate(CFRunLoopTimerRef timer)
{
}

void CFRunLoopTimerSetNextFireDate(CFRunLoopTimerRef timer, CFAbsoluteTime fireDate)
{
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x1F40D83E0](alloc, theArray, separatorString);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1F40D8490](alloc, formatOptions, format);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1F40D8500](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1F40D8758](anURL, pathStyle);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D88A0](allocator, filePath, pathStyle, isDirectory);
}

CFUUIDRef CFUUIDGetConstantUUIDWithBytes(CFAllocatorRef alloc, UInt8 byte0, UInt8 byte1, UInt8 byte2, UInt8 byte3, UInt8 byte4, UInt8 byte5, UInt8 byte6, UInt8 byte7, UInt8 byte8, UInt8 byte9, UInt8 byte10, UInt8 byte11, UInt8 byte12, UInt8 byte13, UInt8 byte14, UInt8 byte15)
{
  return (CFUUIDRef)MEMORY[0x1F40D89D0](alloc, byte0, byte1, byte2, byte3, byte4, byte5, byte6);
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1 = MEMORY[0x1F40D89E8](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

SInt32 CFUserNotificationDisplayNotice(CFTimeInterval timeout, CFOptionFlags flags, CFURLRef iconURL, CFURLRef soundURL, CFURLRef localizationURL, CFStringRef alertHeader, CFStringRef alertMessage, CFStringRef defaultButtonTitle)
{
  return MEMORY[0x1F40D8A50](flags, iconURL, soundURL, localizationURL, alertHeader, alertMessage, defaultButtonTitle, timeout);
}

void CFWriteStreamClose(CFWriteStreamRef stream)
{
}

CFTypeRef CFWriteStreamCopyProperty(CFWriteStreamRef stream, CFStreamPropertyKey propertyName)
{
  return (CFTypeRef)MEMORY[0x1F40D8A90](stream, propertyName);
}

CFWriteStreamRef CFWriteStreamCreateWithAllocatedBuffers(CFAllocatorRef alloc, CFAllocatorRef bufferAllocator)
{
  return (CFWriteStreamRef)MEMORY[0x1F40D8AA0](alloc, bufferAllocator);
}

Boolean CFWriteStreamOpen(CFWriteStreamRef stream)
{
  return MEMORY[0x1F40D8AD0](stream);
}

IOReturn IOAllowPowerChange(io_connect_t kernelPort, intptr_t notificationID)
{
  return MEMORY[0x1F40E8678](*(void *)&kernelPort, notificationID);
}

kern_return_t IOCreatePlugInInterfaceForService(io_service_t service, CFUUIDRef pluginType, CFUUIDRef interfaceType, IOCFPlugInInterface ***theInterface, SInt32 *theScore)
{
  return MEMORY[0x1F40E8748](*(void *)&service, pluginType, interfaceType, theInterface, theScore);
}

IOReturn IODeregisterForSystemPower(io_object_t *notifier)
{
  return MEMORY[0x1F40E8778](notifier);
}

kern_return_t IODestroyPlugInInterface(IOCFPlugInInterface **interface)
{
  return MEMORY[0x1F40E8780](interface);
}

IOReturn IOHIDDeviceClose(IOHIDDeviceRef device, IOOptionBits options)
{
  return MEMORY[0x1F40E8798](device, *(void *)&options);
}

IOReturn IOHIDDeviceGetReport(IOHIDDeviceRef device, IOHIDReportType reportType, CFIndex reportID, uint8_t *report, CFIndex *pReportLength)
{
  return MEMORY[0x1F40E87C8](device, *(void *)&reportType, reportID, report, pReportLength);
}

IOReturn IOHIDDeviceOpen(IOHIDDeviceRef device, IOOptionBits options)
{
  return MEMORY[0x1F40E87E8](device, *(void *)&options);
}

uint64_t IOHIDEventConformsTo()
{
  return MEMORY[0x1F40E88E0]();
}

uint64_t IOHIDEventGetChildren()
{
  return MEMORY[0x1F40E89C8]();
}

uint64_t IOHIDEventGetDataValue()
{
  return MEMORY[0x1F40E89D0]();
}

uint64_t IOHIDEventGetFloatValue()
{
  return MEMORY[0x1F40E89F8]();
}

uint64_t IOHIDEventGetIntegerValue()
{
  return MEMORY[0x1F40E8A00]();
}

uint64_t IOHIDEventGetTimeStamp()
{
  return MEMORY[0x1F40E8A28]();
}

uint64_t IOHIDEventGetType()
{
  return MEMORY[0x1F40E8A38]();
}

uint64_t IOHIDEventGetVendorDefinedData()
{
  return MEMORY[0x1F40E8A48]();
}

CFArrayRef IOHIDEventSystemClientCopyServices(IOHIDEventSystemClientRef client)
{
  return (CFArrayRef)MEMORY[0x1F40E8AB8](client);
}

uint64_t IOHIDEventSystemClientCreateWithType()
{
  return MEMORY[0x1F40E8AC8]();
}

uint64_t IOHIDEventSystemClientRegisterDeviceMatchingCallback()
{
  return MEMORY[0x1F40E8AE0]();
}

uint64_t IOHIDEventSystemClientRegisterEventCallback()
{
  return MEMORY[0x1F40E8AF0]();
}

uint64_t IOHIDEventSystemClientRegisterResetCallback()
{
  return MEMORY[0x1F40E8B10]();
}

uint64_t IOHIDEventSystemClientScheduleWithRunLoop()
{
  return MEMORY[0x1F40E8B20]();
}

uint64_t IOHIDEventSystemClientSetMatchingMultiple()
{
  return MEMORY[0x1F40E8B40]();
}

Boolean IOHIDEventSystemClientSetProperty(IOHIDEventSystemClientRef client, CFStringRef key, CFTypeRef property)
{
  return MEMORY[0x1F40E8B48](client, key, property);
}

uint64_t IOHIDEventSystemClientUnregisterDeviceMatchingCallback()
{
  return MEMORY[0x1F40E8B58]();
}

uint64_t IOHIDEventSystemClientUnregisterEventCallback()
{
  return MEMORY[0x1F40E8B68]();
}

uint64_t IOHIDEventSystemClientUnregisterResetCallback()
{
  return MEMORY[0x1F40E8B80]();
}

uint64_t IOHIDEventSystemClientUnscheduleWithRunLoop()
{
  return MEMORY[0x1F40E8B90]();
}

IOReturn IOHIDManagerClose(IOHIDManagerRef manager, IOOptionBits options)
{
  return MEMORY[0x1F40E8C50](manager, *(void *)&options);
}

CFSetRef IOHIDManagerCopyDevices(IOHIDManagerRef manager)
{
  return (CFSetRef)MEMORY[0x1F40E8C58](manager);
}

IOHIDManagerRef IOHIDManagerCreate(CFAllocatorRef allocator, IOOptionBits options)
{
  return (IOHIDManagerRef)MEMORY[0x1F40E8C68](allocator, *(void *)&options);
}

IOReturn IOHIDManagerOpen(IOHIDManagerRef manager, IOOptionBits options)
{
  return MEMORY[0x1F40E8C80](manager, *(void *)&options);
}

void IOHIDManagerSetDeviceMatching(IOHIDManagerRef manager, CFDictionaryRef matching)
{
}

BOOLean_t IOHIDServiceClientConformsTo(IOHIDServiceClientRef service, uint32_t usagePage, uint32_t usage)
{
  return MEMORY[0x1F40E8D00](service, *(void *)&usagePage, *(void *)&usage);
}

CFTypeRef IOHIDServiceClientCopyProperty(IOHIDServiceClientRef service, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1F40E8D20](service, key);
}

uint64_t IOHIDServiceClientFastPathCopyEventWithStatus()
{
  return MEMORY[0x1F40E8D28]();
}

uint64_t IOHIDServiceClientFastPathInit()
{
  return MEMORY[0x1F40E8D30]();
}

uint64_t IOHIDServiceClientFastPathInvalidate()
{
  return MEMORY[0x1F40E8D38]();
}

CFTypeRef IOHIDServiceClientGetRegistryID(IOHIDServiceClientRef service)
{
  return (CFTypeRef)MEMORY[0x1F40E8D40](service);
}

uint64_t IOHIDServiceClientRegisterRemovalCallback()
{
  return MEMORY[0x1F40E8D58]();
}

Boolean IOHIDServiceClientSetProperty(IOHIDServiceClientRef service, CFStringRef key, CFTypeRef property)
{
  return MEMORY[0x1F40E8D60](service, key, property);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x1F40E8ED8](*(void *)&iterator);
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return (IONotificationPortRef)MEMORY[0x1F40E8F08](*(void *)&mainPort);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
}

CFRunLoopSourceRef IONotificationPortGetRunLoopSource(IONotificationPortRef notify)
{
  return (CFRunLoopSourceRef)MEMORY[0x1F40E8F20](notify);
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1F40E8F60](*(void *)&object);
}

io_connect_t IORegisterForSystemPower(void *refcon, IONotificationPortRef *thePortRef, IOServiceInterestCallback callback, io_object_t *notifier)
{
  return MEMORY[0x1F40E9148](refcon, thePortRef, callback, notifier);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1F40E9168](*(void *)&entry, key, allocator, *(void *)&options);
}

kern_return_t IORegistryEntryGetParentEntry(io_registry_entry_t entry, const io_name_t plane, io_registry_entry_t *parent)
{
  return MEMORY[0x1F40E91C8](*(void *)&entry, plane, parent);
}

CFMutableDictionaryRef IORegistryEntryIDMatching(uint64_t entryID)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40E9200](entryID);
}

CFTypeRef IORegistryEntrySearchCFProperty(io_registry_entry_t entry, const io_name_t plane, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1F40E9208](*(void *)&entry, plane, key, allocator, *(void *)&options);
}

kern_return_t IOServiceAddInterestNotification(IONotificationPortRef notifyPort, io_service_t service, const io_name_t interestType, IOServiceInterestCallback callback, void *refCon, io_object_t *notification)
{
  return MEMORY[0x1F40E9230](notifyPort, *(void *)&service, interestType, callback, refCon, notification);
}

kern_return_t IOServiceAddMatchingNotification(IONotificationPortRef notifyPort, const io_name_t notificationType, CFDictionaryRef matching, IOServiceMatchingCallback callback, void *refCon, io_iterator_t *notification)
{
  return MEMORY[0x1F40E9238](notifyPort, notificationType, matching, callback, refCon, notification);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x1F40E9240](*(void *)&connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x1F40E9250](*(void *)&mainPort, matching);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x1F40E9258](*(void *)&mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40E9268](name);
}

CFMutableDictionaryRef IOServiceNameMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40E9278](name);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1F417CDE0]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1F417CE00]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x1F417CE28]();
}

uint64_t MGIsDeviceOfType()
{
  return MEMORY[0x1F417CE40]();
}

uint64_t MGIsDeviceOneOfType()
{
  return MEMORY[0x1F417CE48]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1F40E7010](aClassName);
}

uint64_t NSPopAutoreleasePool()
{
  return MEMORY[0x1F40E71E0]();
}

uint64_t NSPushAutoreleasePool()
{
  return MEMORY[0x1F40E71F0]();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1F40E72B0](aSelector);
}

uint64_t PLLogTimeSensitiveRegisteredEvent()
{
  return MEMORY[0x1F4145D98]();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1F40F7138](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1F40F7160](allocator);
}

uint64_t TCCAccessPreflight()
{
  return MEMORY[0x1F415CBB8]();
}

uint64_t TCCAccessRequest()
{
  return MEMORY[0x1F415CBD8]();
}

uint64_t TCCAccessRestricted()
{
  return MEMORY[0x1F415CC18]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFCopyServerVersionDictionary()
{
  return MEMORY[0x1F40D8D00]();
}

uint64_t _CFCopySystemVersionDictionary()
{
  return MEMORY[0x1F40D8D10]();
}

uint64_t _CFGetProgname()
{
  return MEMORY[0x1F40D8E00]();
}

uint64_t _CFRunLoopSetPerCalloutAutoreleasepoolEnabled()
{
  return MEMORY[0x1F40D90C0]();
}

int _NSGetExecutablePath(char *buf, uint32_t *bufsize)
{
  return MEMORY[0x1F40C9AE8](buf, bufsize);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t CLConnectionClient::sendMessage()
{
  return MEMORY[0x1F412AA98]();
}

{
  return MEMORY[0x1F412AAA0]();
}

uint64_t CLConnectionClient::sendMessageSync()
{
  return MEMORY[0x1F412AAA8]();
}

uint64_t CLConnectionClient::setHandlerForMessage()
{
  return MEMORY[0x1F412AAB0]();
}

uint64_t CLConnectionClient::setInterruptionHandler()
{
  return MEMORY[0x1F412AAB8]();
}

uint64_t CLConnectionClient::setDefaultMessageHandler()
{
  return MEMORY[0x1F412AAC0]();
}

uint64_t CLConnectionClient::start(CLConnectionClient *this)
{
  return MEMORY[0x1F412AAD0](this);
}

uint64_t CLConnectionClient::CLConnectionClient()
{
  return MEMORY[0x1F412AAD8]();
}

void CLConnectionClient::~CLConnectionClient(CLConnectionClient *this)
{
}

uint64_t CLConnectionMessage::setFileDescriptor(CLConnectionMessage *this)
{
  return MEMORY[0x1F412AAE8](this);
}

uint64_t CLConnectionMessage::CLConnectionMessage()
{
  return MEMORY[0x1F412AAF0]();
}

{
  return MEMORY[0x1F412AAF8]();
}

void CLConnectionMessage::~CLConnectionMessage(CLConnectionMessage *this)
{
}

uint64_t PB::TextFormatter::beginObject(PB::TextFormatter *this, const char *a2)
{
  return MEMORY[0x1F4147448](this, a2);
}

uint64_t PB::TextFormatter::format()
{
  return MEMORY[0x1F4147450]();
}

{
  return MEMORY[0x1F4147458]();
}

uint64_t PB::TextFormatter::format(PB::TextFormatter *this, const char *a2)
{
  return MEMORY[0x1F4147460](this, a2);
}

{
  return MEMORY[0x1F4147478](this, a2);
}

{
  return MEMORY[0x1F4147480](this, a2);
}

{
  return MEMORY[0x1F4147488](this, a2);
}

{
  return MEMORY[0x1F4147490](this, a2);
}

uint64_t PB::TextFormatter::format(PB::TextFormatter *this, const char *a2, double a3)
{
  return MEMORY[0x1F4147468](this, a2, a3);
}

uint64_t PB::TextFormatter::format(PB::TextFormatter *this, const char *a2, float a3)
{
  return MEMORY[0x1F4147470](this, a2, a3);
}

void PB::Base::~Base(PB::Base *this)
{
}

uint64_t PB::Reader::recallMark()
{
  return MEMORY[0x1F41474C0]();
}

uint64_t PB::Reader::read()
{
  return MEMORY[0x1F41474C8]();
}

{
  return MEMORY[0x1F41474D0]();
}

uint64_t PB::Reader::skip(PB::Reader *this)
{
  return MEMORY[0x1F41474E0](this);
}

uint64_t PB::Reader::placeMark()
{
  return MEMORY[0x1F41474E8]();
}

uint64_t PB::Reader::Reader(PB::Reader *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F41474F0](this, a2);
}

uint64_t PB::Writer::writeVarInt(PB::Writer *this)
{
  return MEMORY[0x1F4147510](this);
}

{
  return MEMORY[0x1F4147518](this);
}

{
  return MEMORY[0x1F4147520](this);
}

{
  return MEMORY[0x1F4147528](this);
}

uint64_t PB::Writer::writeSubmessage(PB::Writer *this, const PB::Base *a2)
{
  return MEMORY[0x1F4147530](this, a2);
}

uint64_t PB::Writer::write()
{
  return MEMORY[0x1F4147538]();
}

{
  return MEMORY[0x1F4147540]();
}

uint64_t PB::Writer::write(PB::Writer *this)
{
  return MEMORY[0x1F4147550](this);
}

uint64_t PB::Writer::write(PB::Writer *this, double a2)
{
  return MEMORY[0x1F4147558](this, a2);
}

uint64_t PB::Writer::write(PB::Writer *this, float a2)
{
  return MEMORY[0x1F4147560](this, a2);
}

uint64_t PB::Writer::writeSInt(PB::Writer *this)
{
  return MEMORY[0x1F4147568](this);
}

{
  return MEMORY[0x1F4147570](this);
}

uint64_t PB::Writer::Writer(PB::Writer *this)
{
  return MEMORY[0x1F4147578](this);
}

void PB::Writer::~Writer(PB::Writer *this)
{
}

uint64_t CLConnectionMessage::getDictionary(CLConnectionMessage *this)
{
  return MEMORY[0x1F412AB08](this);
}

uint64_t CLConnectionMessage::getRawPayload(CLConnectionMessage *this)
{
  return MEMORY[0x1F412AB10](this);
}

uint64_t CLConnectionMessage::getObjectOfClass(CLConnectionMessage *this, objc_class *a2)
{
  return MEMORY[0x1F412AB18](this, a2);
}

uint64_t CLConnectionMessage::getObjectOfClasses(CLConnectionMessage *this, NSSet *a2)
{
  return MEMORY[0x1F412AB20](this, a2);
}

uint64_t CLConnectionMessage::getDictionaryOfClasses(CLConnectionMessage *this, NSSet *a2)
{
  return MEMORY[0x1F412AB28](this, a2);
}

uint64_t CLConnectionMessage::name(CLConnectionMessage *this)
{
  return MEMORY[0x1F412AB30](this);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x1F417E390](this, __s);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1F417E3A8]();
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x1F417E400](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

uint64_t std::time_put<char,std::ostreambuf_iterator<char>>::put()
{
  return MEMORY[0x1F417E428]();
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x1F417E550](this, *(void *)&__ecode);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5B8](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5D8](this, __s);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1F417E670](this, __str);
}

std::string *__cdecl std::string::operator=(std::string *this, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1F417E678](this, __c);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1F417E860]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E880]();
}

{
  return MEMORY[0x1F417E8D0]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x1F417E960](__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1F417EA90](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x1F417EAA8](retstr, __s);
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

uint64_t std::__sort<std::__less<double,double> &,double *>()
{
  return MEMORY[0x1F417EC38]();
}

uint64_t std::__sort<std::__less<float,float> &,float *>()
{
  return MEMORY[0x1F417EC40]();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x1F417ECA0]();
}

time_t std::chrono::system_clock::to_time_t(const std::chrono::system_clock::time_point *__t)
{
  return MEMORY[0x1F417ECA8](__t);
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x1F417ECE0](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x1F417ECE8](this);
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1F40C9B60](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1F417EFA8](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x1F40C9C80](a1);
  result.__double cosval = v2;
  result.__double sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  MEMORY[0x1F40C9C88](a1);
  result.__double cosval = v2;
  result.__double sinval = v1;
  return result;
}

const mach_header *__cdecl _dyld_get_image_header(uint32_t image_index)
{
  return (const mach_header *)MEMORY[0x1F40C9E08](*(void *)&image_index);
}

const char *__cdecl _dyld_get_image_name(uint32_t image_index)
{
  return (const char *)MEMORY[0x1F40C9E10](*(void *)&image_index);
}

uint32_t _dyld_image_count(void)
{
  return MEMORY[0x1F40C9E60]();
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x1F40C9F70](dso, description, activity, *(void *)&flags);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_log_send_and_compose_impl()
{
  return MEMORY[0x1F40C9FF8]();
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t abort_report_np()
{
  return MEMORY[0x1F40CA1E8]();
}

float acosf(float a1)
{
  MEMORY[0x1F40CA340](a1);
  return result;
}

uint32_t arc4random(void)
{
  return MEMORY[0x1F40CA3A8]();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1F40CA3C0](*(void *)&__upper_bound);
}

long double asin(long double __x)
{
  MEMORY[0x1F40CA3D0](__x);
  return result;
}

float asinf(float a1)
{
  MEMORY[0x1F40CA3D8](a1);
  return result;
}

long double atan(long double __x)
{
  MEMORY[0x1F40CA450](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x1F40CA460](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  MEMORY[0x1F40CA468](a1, a2);
  return result;
}

float atanf(float a1)
{
  MEMORY[0x1F40CA470](a1);
  return result;
}

int backtrace(void **a1, int a2)
{
  return MEMORY[0x1F40CA4F8](a1, *(void *)&a2);
}

char *__cdecl basename(char *a1)
{
  return (char *)MEMORY[0x1F40CA518](a1);
}

void bzero(void *a1, size_t a2)
{
}

void clearerr(FILE *a1)
{
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

long double cos(long double __x)
{
  MEMORY[0x1F40CB8A8](__x);
  return result;
}

float cosf(float a1)
{
  MEMORY[0x1F40CB8B0](a1);
  return result;
}

int deflate(z_streamp strm, int flush)
{
  return MEMORY[0x1F4182BD0](strm, *(void *)&flush);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x1F4182BE0](strm);
}

int deflateInit_(z_streamp strm, int level, const char *version, int stream_size)
{
  return MEMORY[0x1F4182BF0](strm, *(void *)&level, version, *(void *)&stream_size);
}

int deflateReset(z_streamp strm)
{
  return MEMORY[0x1F4182C08](strm);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C0](flags, block);
}

intptr_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CB9F8](block, timeout);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA10](buffer, size, queue, destructor);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return (void *)MEMORY[0x1F40CBA68](key);
}

void dispatch_io_barrier(dispatch_io_t channel, dispatch_block_t barrier)
{
}

dispatch_io_t dispatch_io_create(dispatch_io_type_t type, dispatch_fd_t fd, dispatch_queue_t queue, void *cleanup_handler)
{
  return (dispatch_io_t)MEMORY[0x1F40CBAD8](type, *(void *)&fd, queue, cleanup_handler);
}

void dispatch_io_write(dispatch_io_t channel, off_t offset, dispatch_data_t data, dispatch_queue_t queue, dispatch_io_handler_t io_handler)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x1F40CBDA0](a1, a2);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

uint64_t espresso_context_destroy()
{
  return MEMORY[0x1F4118640]();
}

uint64_t espresso_create_context()
{
  return MEMORY[0x1F4118660]();
}

uint64_t espresso_create_plan()
{
  return MEMORY[0x1F4118670]();
}

uint64_t espresso_network_bind_buffer()
{
  return MEMORY[0x1F41186E8]();
}

uint64_t espresso_plan_add_network()
{
  return MEMORY[0x1F41187E0]();
}

uint64_t espresso_plan_build()
{
  return MEMORY[0x1F41187E8]();
}

uint64_t espresso_plan_destroy()
{
  return MEMORY[0x1F4118810]();
}

uint64_t espresso_plan_execute_sync()
{
  return MEMORY[0x1F4118820]();
}

long double exp(long double __x)
{
  MEMORY[0x1F40CBFE0](__x);
  return result;
}

float expf(float a1)
{
  MEMORY[0x1F40CBFF8](a1);
  return result;
}

long double expm1(long double __x)
{
  MEMORY[0x1F40CC000](__x);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

int feof(FILE *a1)
{
  return MEMORY[0x1F40CC098](a1);
}

int ferror(FILE *a1)
{
  return MEMORY[0x1F40CC0A0](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1F40CC0C8](a1);
}

int fgetpos(FILE *a1, fpos_t *a2)
{
  return MEMORY[0x1F40CC0F8](a1, a2);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1F40CC1E8](*(void *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1F40CC1F0](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC200](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fsync(int a1)
{
  return MEMORY[0x1F40CC2D8](*(void *)&a1);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x1F40CC2E0](a1);
}

FILE *__cdecl funopen(const void *a1, int (__cdecl *a2)(void *, char *, int), int (__cdecl *a3)(void *, const char *, int), fpos_t (__cdecl *a4)(void *, fpos_t, int), int (__cdecl *a5)(void *))
{
  return (FILE *)MEMORY[0x1F40CC320](a1, a2, a3, a4, a5);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

gid_t getgid(void)
{
  return MEMORY[0x1F40CC3D0]();
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

passwd *__cdecl getpwnam(const char *a1)
{
  return (passwd *)MEMORY[0x1F40CC4D8](a1);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1F40CC568](a1, a2);
}

uid_t getuid(void)
{
  return MEMORY[0x1F40CC570]();
}

int inflate(z_streamp strm, int flush)
{
  return MEMORY[0x1F4182CB0](strm, *(void *)&flush);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x1F4182CB8](strm);
}

int inflateInit_(z_streamp strm, const char *version, int stream_size)
{
  return MEMORY[0x1F4182CD8](strm, version, *(void *)&stream_size);
}

int inflateReset(z_streamp strm)
{
  return MEMORY[0x1F4182CE0](strm);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1F40CC700]();
}

int lchmod(const char *a1, mode_t a2)
{
  return MEMORY[0x1F40CC7F0](a1, a2);
}

int lchown(const char *a1, uid_t a2, gid_t a3)
{
  return MEMORY[0x1F40CC7F8](a1, *(void *)&a2, *(void *)&a3);
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x1F40CC868](a1);
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x1F40CC8F8](*(void *)&a1, a2, *(void *)&a3);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CC900](a1, a2);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40CC910]();
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x1F40CC930]();
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1F40CC940](*(void *)&error_value);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1F40CCDD0](a1, a2);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE88](a1, a2);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1F40CD028](*(void *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1F40CD040](*(void *)&token, state64);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1F40CD058](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeak(id *location)
{
  return (id)MEMORY[0x1F4181778](location);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

void objc_moveWeak(id *to, id *from)
{
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)((uint64_t (*)(id, SEL))MEMORY[0x1F4181798])(a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x1F40CD0F0](a1, *(void *)&a2, *(void *)&a3, *(void *)&a4);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1F40CD5A0]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

void perror(const char *a1)
{
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x1F40CD828](a1, a2);
  return result;
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1F40CD830](*(void *)&__fd, __buf, __nbyte, a4);
}

int proc_pidpath(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1F40CD8B8](*(void *)&pid, buffer, *(void *)&buffersize);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x1F40CD930](a1);
}

int pthread_attr_setschedparam(pthread_attr_t *a1, const sched_param *a2)
{
  return MEMORY[0x1F40CD950](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1F40CD9B8](a1, a2, a3, a4);
}

uint64_t pthread_dependency_fulfill_np()
{
  return MEMORY[0x1F40CD9C0]();
}

uint64_t pthread_dependency_init_np()
{
  return MEMORY[0x1F40CD9C8]();
}

uint64_t pthread_dependency_wait_np()
{
  return MEMORY[0x1F40CD9D0]();
}

int pthread_getschedparam(pthread_t a1, int *a2, sched_param *a3)
{
  return MEMORY[0x1F40CDA18](a1, a2, a3);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1F40CDAA0](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1F40CDAA8](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1F40CDAC0](a1, *(void *)&a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1F40CDB30]();
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x1F40CDB60](a1);
}

int pthread_setschedparam(pthread_t a1, int a2, const sched_param *a3)
{
  return MEMORY[0x1F40CDB68](a1, *(void *)&a2, a3);
}

ssize_t pwrite(int __fd, const void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1F40CDBC0](*(void *)&__fd, __buf, __nbyte, a4);
}

int rand(void)
{
  return MEMORY[0x1F40CDC08]();
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
}

int sched_get_priority_max(int a1)
{
  return MEMORY[0x1F40CDEB8](*(void *)&a1);
}

int setvbuf(FILE *a1, char *a2, int a3, size_t a4)
{
  return MEMORY[0x1F40CDFD0](a1, a2, *(void *)&a3, a4);
}

long double sin(long double __x)
{
  MEMORY[0x1F40CE058](__x);
  return result;
}

float sinf(float a1)
{
  MEMORY[0x1F40CE060](a1);
  return result;
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1F40CE078](*(void *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int snprintf_l(char *a1, size_t a2, locale_t a3, const char *a4, ...)
{
  return MEMORY[0x1F40CE088](a1, a2, a3, a4);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x1F4182060](a1);
}

int sqlite3_close_v2(sqlite3 *a1)
{
  return MEMORY[0x1F4182068](a1);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  MEMORY[0x1F4182098](a1, *(void *)&iCol);
  return result;
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820A0](a1, *(void *)&iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820A8](a1, *(void *)&iCol);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x1F41820C8](a1, *(void *)&iCol);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x1F4182198](a1);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F41821D8](pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x1F4182280](filename, ppDb, *(void *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1F4182290](db, zSql, *(void *)&nByte, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F41822C0](pStmt);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x1F41823B0](a1);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0D0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1F40CE178](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1F40CE1F8](__dst, __src, __n);
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1F4186410]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1F4186458]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1F4186530]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1F4186610]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1F4186628]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1F4186670]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1F41866B8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1F4188250]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1F4188260]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x1F41868E8]();
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1F40CE3D0](a1, a2, a3, a4, a5);
}

void syslog(int a1, const char *a2, ...)
{
}

long double tan(long double __x)
{
  MEMORY[0x1F40CE420](__x);
  return result;
}

int unlink(const char *a1)
{
  return MEMORY[0x1F40CE5E0](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1F40CE608](*(void *)&a1);
}

void uuid_clear(uuid_t uu)
{
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return MEMORY[0x1F40CE660](in, uu);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1F40CE790](__str, __size, __format, a4);
}

const xmlChar *__cdecl xmlBufferContent(const xmlBuffer *buf)
{
  return (const xmlChar *)MEMORY[0x1F41825E0](buf);
}

xmlBufferPtr xmlBufferCreate(void)
{
  return (xmlBufferPtr)MEMORY[0x1F41825E8]();
}

void xmlBufferFree(xmlBufferPtr buf)
{
}

int xmlBufferLength(const xmlBuffer *buf)
{
  return MEMORY[0x1F41825F8](buf);
}

void xmlFreeTextWriter(xmlTextWriterPtr writer)
{
}

xmlTextWriterPtr xmlNewTextWriterMemory(xmlBufferPtr buf, int compression)
{
  return (xmlTextWriterPtr)MEMORY[0x1F4182790](buf, *(void *)&compression);
}

int xmlTextWriterFlush(xmlTextWriterPtr writer)
{
  return MEMORY[0x1F4182A00](writer);
}

int xmlTextWriterWriteBase64(xmlTextWriterPtr writer, const char *data, int start, int len)
{
  return MEMORY[0x1F4182A38](writer, data, *(void *)&start, *(void *)&len);
}

void xpc_connection_activate(xpc_connection_t connection)
{
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

xpc_connection_t xpc_connection_create(const char *name, dispatch_queue_t targetq)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBA8](name, targetq);
}

xpc_connection_t xpc_connection_create_from_endpoint(xpc_endpoint_t endpoint)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBC0](endpoint);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBD0](name, targetq, flags);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_barrier(xpc_connection_t connection, dispatch_block_t barrier)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
}

void xpc_connection_suspend(xpc_connection_t connection)
{
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1F40CED90](bytes, length);
}

size_t xpc_data_get_bytes(xpc_object_t xdata, void *buffer, size_t off, size_t length)
{
  return MEMORY[0x1F40CEDA8](xdata, buffer, off, length);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return (const void *)MEMORY[0x1F40CEDB0](xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return MEMORY[0x1F40CEDC0](xdata);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x1F40CEE40](original);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1F40CEEF0](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEF10](xdict, key);
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_endpoint_t xpc_endpoint_create(xpc_connection_t connection)
{
  return (xpc_endpoint_t)MEMORY[0x1F40CF018](connection);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1F40CF148](object);
}

xpc_object_t xpc_string_create(const char *string)
{
  return (xpc_object_t)MEMORY[0x1F40CF290](string);
}