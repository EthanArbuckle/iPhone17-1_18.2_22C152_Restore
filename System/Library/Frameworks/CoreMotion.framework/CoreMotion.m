void sub_1902B1F24(void *a1, void *a2)
{
  void *v4;
  void *__p[2];
  char v6;

  v4 = operator new(0x70uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &unk_1EDFD0DA0;
  sub_1902C3F54(__p, "kCLConnectionMessageMotionState");
  MEMORY[0x192FCC420](v4 + 3, __p, *a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_1902B1FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_1902B1FEC(uint64_t a1, int a2, uint64_t a3, double a4)
{
  uint64_t v13 = 0;
  v14 = &v13;
  uint64_t v15 = 0x2020000000;
  char v16 = 0;
  uint64_t v8 = sub_1902D6BD0();
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = sub_1902B2EE0;
  v11[3] = &unk_1E568E2F8;
  v11[4] = &v13;
  v11[5] = a1;
  int v12 = a2;
  v11[6] = a3;
  *(double *)&v11[7] = a4;
  sub_1902CDE98(v8, (uint64_t)v11);
  uint64_t v9 = *((unsigned __int8 *)v14 + 24);
  _Block_object_dispose(&v13, 8);
  return v9;
}

void sub_1902B20C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1902B23B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 73) < 0) {
    operator delete(*(void **)(v1 - 96));
  }
  _Unwind_Resume(exception_object);
}

void sub_1902B2414(int a1, uint64_t a2, char *__s, void *a4)
{
  sub_1902C3F54(__p, __s);
  MEMORY[0x192FCC420](a2, __p, *a4);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1902B246C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFRunLoopTimerRef *sub_1902B2488(CFRunLoopTimerRef *a1, int a2, char a3)
{
  *a1 = (CFRunLoopTimerRef)&unk_1EDFC8B90;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *((_DWORD *)a1 + 8) = a2;
  a1[5] = 0;
  *((unsigned char *)a1 + 48) = a3;
  *((_DWORD *)a1 + 13) = 0;
  a1[7] = 0;
  context.version = 0;
  context.info = a1;
  memset(&context.retain, 0, 24);
  CFRunLoopTimerRef v4 = CFRunLoopTimerCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1.79769313e308, 1.79769313e308, 0, 0, (CFRunLoopTimerCallBack)sub_1905D3F3C, &context);
  a1[7] = v4;
  if (v4)
  {
    sub_1902D6BD0();
    CFRunLoopAddTimer(*(CFRunLoopRef *)qword_1EB3BF828, a1[7], (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
  }
  return a1;
}

void sub_1902B2560(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1905D6E5C((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1902B25B0(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &unk_1EDFC8E50;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = a3;
  is_mul_ok(a3, 0x50uLL);
  operator new[]();
}

void sub_1902B2690(uint64_t a1, double *a2)
{
  double v4 = a2[2];
  double v5 = a2[3] + a2[3];
  double v6 = a2[1];
  float v7 = v6 * v5 - *a2 * (v4 + v4);
  float v8 = (v6 + v6) * *a2 + v4 * v5;
  float v9 = sqrtf((float)(v8 * v8) + (float)(v7 * v7));
  if (v9 == 0.0)
  {
    long long v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
  }
  else
  {
    double v11 = 1.0 - v6 * (v6 + v6) - v4 * (v4 + v4);
    float v12 = v11;
    double v13 = v9;
    if (v12 >= 0.0)
    {
      float v15 = v11;
      float v14 = acosf(v15);
    }
    else
    {
      float v14 = -acosf(-v12);
    }
    __double2 v16 = __sincos_stret(v14 * 0.5);
    double cosval = v16.__cosval;
    double v18 = v16.__sinval / v13 * (float)-v8;
    double v19 = v16.__sinval / v13 * v7;
    double v20 = 0.0;
    if (v12 < 0.0)
    {
      double cosval = -(v16.__sinval / v13 * (float)-v8);
      double v18 = v16.__cosval;
      double v19 = 0.0;
      double v20 = -(v16.__sinval / v13 * v7);
    }
    sub_1902DAB58((double *)a1, &cosval, a2);
  }
}

void sub_1902B27AC(uint64_t a1@<X0>, void *a2@<X8>)
{
  v3 = a2;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  LODWORD(a2) = *(char *)(a1 + 23);
  if ((a2 & 0x80000000) != 0)
  {
    if (*(void *)(a1 + 8))
    {
LABEL_3:
      if ((a2 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((_BYTE)a2)
  {
    goto LABEL_3;
  }
  CFStringRef v4 = (const __CFString *)CFCopyUserName();
  sub_1902C36AC(v4, (uint64_t)&v15);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
  unint64_t v5 = v15.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 16) = *((void *)&v15.__r_.__value_.__l + 2);
  a2 = (void *)HIBYTE(v5);
  if ((a2 & 0x80) == 0)
  {
LABEL_4:
    if (!(_BYTE)a2) {
      return;
    }
    goto LABEL_11;
  }
LABEL_10:
  if (!*(void *)(a1 + 8)) {
    return;
  }
LABEL_11:
  sub_1902DF048(&v14);
  double v6 = std::string::append(&v14, "/private/var/Managed Preferences/");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  int v8 = *(char *)(a1 + 23);
  if (v8 >= 0) {
    float v9 = (const std::string::value_type *)a1;
  }
  else {
    float v9 = *(const std::string::value_type **)a1;
  }
  if (v8 >= 0) {
    std::string::size_type v10 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v10 = *(void *)(a1 + 8);
  }
  double v11 = std::string::append(&v15, v9, v10);
  std::string::size_type size = v11->__r_.__value_.__l.__size_;
  void *v3 = v11->__r_.__value_.__r.__words[0];
  v3[1] = size;
  *(void *)((char *)v3 + 15) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  LOBYTE(size) = *((unsigned char *)&v11->__r_.__value_.__s + 23);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  int v13 = SHIBYTE(v15.__r_.__value_.__r.__words[2]);
  *((unsigned char *)v3 + 23) = size;
  if (v13 < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_1902B28D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1902B2908(uint64_t a1, IOHIDServiceClientRef service)
{
  uint64_t result = IOHIDServiceClientConformsTo(service, *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 16));
  if (result)
  {
    unint64_t v5 = *(void **)(a1 + 152);
    return sub_1902B4578(service, v5);
  }
  return result;
}

void sub_1902B2BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a18) {
    sub_1902D8B58(a18);
  }
  if (a20) {
    sub_1902D8B58(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_1902B2C20()
{
  v0 = (const void *)MGCopyAnswer();
  if (v0)
  {
    uint64_t v1 = v0;
    if (CFEqual(v0, @"iPhone")) {
      byte_1EB3BE953 = 1;
    }
    CFRelease(v1);
  }
}

void sub_1902B2C90(int a1, uint64_t a2, char *__s)
{
  sub_1902C3F54(__p, __s);
  MEMORY[0x192FCC410](a2, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1902B2CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1902B2CFC(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  sub_1902CD6F4(a1, (double *)(a1 + 40));
  if (*(unsigned char *)(a1 + 201))
  {
    BOOL v2 = sub_1902B5A04(*(void *)(a1 + 208), 0);
    *(unsigned char *)(a1 + 202) = v2;
    if (v2)
    {
      if (qword_1EB3BE878 != -1) {
        dispatch_once(&qword_1EB3BE878, &unk_1EDFD1980);
      }
      v3 = off_1EB3BE870;
      if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = sub_1902B8788(*(void *)(a1 + 208));
        *(_DWORD *)buf = 134349056;
        uint64_t v7 = v4;
        _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEFAULT, "Fast path has been initialized,serviceRef,%{public}p", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE878 != -1) {
          dispatch_once(&qword_1EB3BE878, &unk_1EDFD1980);
        }
        sub_1902B8788(*(void *)(a1 + 208));
        char v5 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "virtual void CLSensorFusionServiceSPU::start()", "CoreLocation: %s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
    }
  }
}

void sub_1902B2EE0(uint64_t a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned int *)(a1 + 64);
  v3 = *(void **)(a1 + 40);
  unint64_t v4 = *(void *)(a1 + 48);
  unsigned int v5 = (*(uint64_t (**)(unint64_t))(*(void *)v4 + 24))(v4);
  double v6 = (double *)(a1 + 56);
  double v7 = *(double *)(a1 + 56);
  double v8 = v7 * (double)v5;
  double v33 = v8;
  if (v7 != 0.0)
  {
    if (v7 >= 0.0)
    {
      uint64_t v14 = v3[2];
      if (v8 > 0.0
        && ((uint64_t v15 = v14 + 80 * (int)v2, v17 = *(double *)(v15 + 8), v16 = (double *)(v15 + 8), v18 = v17, v8 < v17)
         || v18 <= 0.0))
      {
        *__double2 v16 = v8;
        double v20 = (*(double (**)(void *, uint64_t, double *))(*v3 + 24))(v3, v2, &v33);
        uint64_t v14 = v3[2];
        *(double *)(v14 + 80 * (int)v2 + 24) = v20;
        double v19 = *v6;
        double v8 = v33;
      }
      else
      {
        double v19 = v7;
      }
      v21 = (double *)(v14 + 80 * (int)v2);
      if (v19 < *v21 || *v21 <= 0.0)
      {
        double *v21 = v19;
        double v25 = (*(double (**)(void *, uint64_t, uint64_t))(*v3 + 16))(v3, v2, a1 + 56);
        uint64_t v26 = v3[2] + 80 * (int)v2;
        *(double *)(v26 + 16) = v25;
        *(void *)buf = v4;
        *(void *)v41 = 0x100000000;
        *(double *)&v41[8] = v19;
        *(double *)&v41[16] = v8;
        sub_1902DD2E8((uint64_t *)(v26 + 32), v4, (uint64_t)buf);
        sub_1902CE6F4((uint64_t)v3, v2);
      }
      else
      {
        if (*(double *)(v14 + 80 * (int)v2 + 16) <= 0.0)
        {
          if (qword_1EB3BE898 != -1) {
            dispatch_once(&qword_1EB3BE898, &unk_1EDFD1B80);
          }
          v22 = off_1EB3BE890;
          if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1902AF000, v22, OS_LOG_TYPE_FAULT, "CLMotionNotifier::addDispatcherPrivate UpdateInterval is zero!", buf, 2u);
          }
          if (sub_1902D8400(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EB3BE898 != -1) {
              dispatch_once(&qword_1EB3BE898, &unk_1EDFD1B80);
            }
            LOWORD(v34) = 0;
            v32 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 0, "BOOL CLMotionNotifier::addDispatcherPrivate(int, Dispatcher *, const CFTimeInterval &)", "CoreLocation: %s\n", v32);
            if (v32 != (char *)buf) {
              free(v32);
            }
          }
        }
        uint64_t v23 = v3[2] + 80 * (int)v2;
        unsigned int v24 = llround(*v6 / *(double *)(v23 + 16));
        *(void *)buf = v4;
        *(_DWORD *)v41 = 0;
        *(_DWORD *)&v41[4] = v24;
        *(double *)&v41[8] = v19;
        *(double *)&v41[16] = v8;
        sub_1902DD2E8((uint64_t *)(v23 + 32), v4, (uint64_t)buf);
      }
      (*(void (**)(void *, uint64_t, uint64_t))(*v3 + 40))(v3, v2, *(void *)(v3[2] + 80 * (int)v2 + 48) - 1);
    }
    else
    {
      float v9 = (void *)(v3[2] + 80 * (int)v2);
      std::string::size_type v10 = operator new(0x18uLL);
      v10[2] = v4;
      uint64_t v11 = v9[7];
      v9 += 7;
      *std::string::size_type v10 = v11;
      v10[1] = v9;
      *(void *)(v11 + 8) = v10;
      *float v9 = v10;
      ++v9[2];
      (*(void (**)(void *, uint64_t))(*v3 + 32))(v3, v2);
    }
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD1B80);
    }
    v27 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEBUG))
    {
      double v28 = *v6;
      double v29 = 0.0;
      if (*v6 > 0.0) {
        double v29 = 1.0 / v28;
      }
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v2;
      *(_WORD *)v41 = 2048;
      *(double *)&v41[2] = v28;
      *(_WORD *)&v41[10] = 2048;
      *(double *)&v41[12] = v29;
      _os_log_impl(&dword_1902AF000, v27, OS_LOG_TYPE_DEBUG, "CLMotionNotifier::addDispatcherPrivate Added dispatcher for notification:%d, Update Interval:%f(%.1fHz)", buf, 0x1Cu);
    }
    if (!sub_1902D8400(115, 2)) {
      goto LABEL_35;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD1B80);
    }
    double v30 = *v6;
    double v31 = 0.0;
    if (*v6 > 0.0) {
      double v31 = 1.0 / v30;
    }
    int v34 = 67109632;
    int v35 = v2;
    __int16 v36 = 2048;
    double v37 = v30;
    __int16 v38 = 2048;
    double v39 = v31;
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "BOOL CLMotionNotifier::addDispatcherPrivate(int, Dispatcher *, const CFTimeInterval &)", "CoreLocation: %s\n", v13);
LABEL_41:
    if (v13 != (char *)buf) {
      free(v13);
    }
    goto LABEL_35;
  }
  if (qword_1EB3BE898 != -1) {
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD1B80);
  }
  float v12 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_FAULT, "Requested update interval cannot be == 0.0 and dispatcher cannot be NULL. Use interval < 0.0 for spectator.", buf, 2u);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD1B80);
    }
    LOWORD(v34) = 0;
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "BOOL CLMotionNotifier::addDispatcherPrivate(int, Dispatcher *, const CFTimeInterval &)", "CoreLocation: %s\n", v13);
    goto LABEL_41;
  }
LABEL_35:
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v7 != 0.0;
}

uint64_t sub_1902B35C0()
{
  if (qword_1EB3BF5B8 != -1) {
    dispatch_once(&qword_1EB3BF5B8, &unk_1EDFD2560);
  }
  return qword_1EB3BF5B0;
}

unsigned char *sub_1902B3604()
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE968 != -1) {
    dispatch_once(&qword_1EB3BE968, &unk_1EDFD1660);
  }
  if (qword_1EB3BE970 != -1) {
    dispatch_once(&qword_1EB3BE970, &unk_1EDFC1FE0);
  }
  uint64_t v0 = 0;
  int v1 = dword_1EB3BE95C;
  switch(dword_1EB3BE95C)
  {
    case 0:
    case 261:
      if (qword_1E929DA68 != -1) {
        dispatch_once(&qword_1E929DA68, &unk_1EDFD42C0);
      }
      int v13 = qword_1E929DA70;
      if (os_log_type_enabled((os_log_t)qword_1E929DA70, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67174657;
        int v20 = v1;
        _os_log_impl(&dword_1902AF000, v13, OS_LOG_TYPE_ERROR, "Unsupported HW type %{private}d; file a radar to CoreMotion Factory | 1.0",
          buf,
          8u);
      }
      if (!sub_1902D8400(115, 0)) {
        goto LABEL_11;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929DA68 != -1) {
        dispatch_once(&qword_1E929DA68, &unk_1EDFD42C0);
      }
      int v17 = 67174657;
      int v18 = v1;
      goto LABEL_77;
    case 2:
    case 3:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
    case 37:
    case 38:
    case 40:
    case 41:
    case 43:
    case 52:
    case 81:
    case 83:
    case 85:
    case 87:
      if (qword_1E929DA68 != -1) {
        dispatch_once(&qword_1E929DA68, &unk_1EDFD42C0);
      }
      uint64_t v2 = qword_1E929DA70;
      if (os_log_type_enabled((os_log_t)qword_1E929DA70, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109120;
        int v20 = v1;
        _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_FAULT, "Old hardware,%d is not supported", buf, 8u);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929DA68 != -1) {
          dispatch_once(&qword_1E929DA68, &unk_1EDFD42C0);
        }
        int v17 = 67109120;
        int v18 = v1;
LABEL_77:
        __double2 v16 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "CLPlatformInfo::MotionCapabilities CLPlatformInfo::queryMotionCaps()", "CoreLocation: %s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
LABEL_11:
      uint64_t v0 = 0;
      break;
    case 24:
    case 25:
    case 27:
    case 28:
      uint64_t v7 = 2940500222;
      goto LABEL_55;
    case 26:
      uint64_t v14 = 2806282494;
      goto LABEL_71;
    case 29:
      unsigned __int16 v12 = 24577;
      goto LABEL_66;
    case 30:
    case 31:
    case 32:
      unsigned __int16 v12 = 30721;
LABEL_66:
      uint64_t v0 = v12 | 0x21400000u;
      break;
    case 33:
    case 209:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 240:
    case 241:
      unsigned __int16 v3 = 762;
      goto LABEL_17;
    case 34:
    case 154:
    case 155:
    case 156:
    case 157:
    case 188:
    case 189:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 210:
    case 217:
    case 218:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 242:
    case 243:
      unsigned __int16 v3 = 6906;
LABEL_17:
      uint64_t v0 = v3 | 0x31460000u;
      break;
    case 35:
    case 36:
    case 64:
    case 65:
      unsigned __int16 v8 = 30922;
      goto LABEL_29;
    case 39:
    case 42:
      uint64_t v0 = 0x28011654E00ELL;
      break;
    case 44:
      unsigned __int16 v8 = 24826;
LABEL_29:
      uint64_t v0 = v8 | 0x21440000u;
      break;
    case 45:
      uint64_t v0 = 558135546;
      break;
    case 46:
    case 62:
    case 161:
      unsigned __int16 v5 = 24826;
      goto LABEL_51;
    case 47:
    case 63:
      unsigned __int16 v5 = 30970;
      goto LABEL_51;
    case 48:
    case 186:
      uint64_t v0 = 826598138;
      break;
    case 49:
    case 134:
    case 135:
    case 136:
    case 137:
    case 187:
    case 190:
    case 202:
      unsigned __int16 v5 = -1286;
      goto LABEL_51;
    case 50:
    case 51:
      unint64_t v6 = 0x28015654E00ELL;
      goto LABEL_72;
    case 54:
    case 55:
      uint64_t v7 = 3211147518;
LABEL_55:
      unint64_t v9 = v7 & 0xFFFF0000FFFFFFFFLL | 0x2900000000;
      goto LABEL_56;
    case 56:
    case 57:
    case 58:
    case 59:
      unint64_t v9 = 0x8029BF4638FELL;
LABEL_56:
      uint64_t v0 = v9 & 0xFFFFFFFFFFFFLL | 0x101000000000000;
      break;
    case 60:
    case 61:
    case 196:
      uint64_t v0 = 0x200000000;
      break;
    case 66:
    case 67:
    case 74:
    case 75:
      unint64_t v6 = 0x24355E54E00ELL;
      goto LABEL_72;
    case 68:
    case 69:
    case 71:
    case 72:
      uint64_t v10 = 0x1218029BF461AFELL;
      goto LABEL_63;
    case 70:
    case 73:
      uint64_t v11 = 0xC029BF4618FELL;
      goto LABEL_58;
    case 76:
    case 146:
    case 147:
      unsigned __int16 v5 = -7942;
LABEL_51:
      uint64_t v0 = v5 | 0x31440000u;
      break;
    case 77:
    case 145:
      uint64_t v10 = 826604282;
      goto LABEL_63;
    case 78:
    case 79:
    case 80:
    case 142:
      uint64_t v11 = 0x8029BF461AFELL;
LABEL_58:
      uint64_t v0 = v11 & 0xFFFFFFFFFFFFLL | 0x121000000000000;
      break;
    case 82:
    case 84:
      unint64_t v6 = 0x27B55E54E00ELL;
      goto LABEL_72;
    case 86:
    case 88:
      uint64_t v0 = 0x124B55E54E00ELL;
      break;
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
      unint64_t v6 = 0x24B55E54E01ELL;
      goto LABEL_72;
    case 95:
    case 96:
    case 97:
    case 98:
      uint64_t v0 = 0x30924B55E54E01ELL;
      break;
    case 99:
    case 100:
    case 101:
    case 102:
      uint64_t v0 = 0x70934B55E54E01ELL;
      break;
    case 103:
    case 104:
    case 105:
    case 106:
      uint64_t v0 = 0x70934B55E55001ELL;
      break;
    case 107:
    case 108:
    case 109:
    case 110:
      uint64_t v4 = 0x24B55E54E01ELL;
      goto LABEL_14;
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 260:
      uint64_t v4 = 0x34B55E55001ELL;
LABEL_14:
      uint64_t v0 = v4 & 0xFFFFFFFFFFFFLL | 0x70B000000000000;
      break;
    case 138:
    case 139:
    case 140:
    case 141:
    case 143:
    case 219:
      uint64_t v0 = 0x1258029BF461AFELL;
      break;
    case 144:
    case 239:
      uint64_t v10 = 826678010;
LABEL_63:
      uint64_t v0 = v10 - 512;
      break;
    case 148:
      uint64_t v0 = 0x9B746204ELL;
      break;
    case 149:
      uint64_t v14 = 373686414;
LABEL_71:
      unint64_t v6 = v14 & 0xFFFF0000FFFFFFFFLL | 0x900000000;
      goto LABEL_72;
    case 150:
    case 151:
    case 152:
    case 153:
      unint64_t v6 = 0x20355E54E00ELL;
LABEL_72:
      uint64_t v0 = v6 & 0xFFFFFFFFFFFFLL | 0x1000000000000;
      break;
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 176:
    case 177:
      uint64_t v0 = 0x13D8029BF461AFELL;
      break;
    case 175:
    case 220:
    case 221:
    case 222:
    case 223:
      uint64_t v0 = 0x13B8029BF461AFELL;
      break;
    case 178:
    case 179:
    case 180:
    case 181:
      uint64_t v0 = 0x13B8029BF461BFELL;
      break;
    case 182:
    case 183:
    case 184:
    case 224:
    case 225:
      uint64_t v0 = 0x13B8029BF461FFELL;
      break;
    case 191:
    case 192:
    case 193:
    case 194:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
      uint64_t v0 = 277217290;
      break;
    default:
      break;
  }
  LOBYTE(v17) = BYTE1(v0) & 1;
  uint64_t result = sub_1902BAAB8(buf, (uint64_t)"OverrideMotionCapEclipseService", &v17, 0);
  qword_1EB3BEA00 = v0 & 0x73FFFBFFFF7FEFFLL | ((unint64_t)buf[1] << 8);
  return result;
}

void sub_1902B3C14(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCA2B0;
  *(_WORD *)(a1 + 8) = 0;
  *(void *)(a1 + 12) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_1902B95B8((void *)(a1 + 40));
}

void sub_1902B3CCC(_Unwind_Exception *exception_object)
{
  unsigned __int16 v3 = *(std::__shared_weak_count **)(v1 + 32);
  if (v3) {
    sub_1902D8B58(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1902B3DDC(CFTypeRef cf)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (!qword_1EB3BF820) {
    goto LABEL_15;
  }
  if ((CFTypeRef)qword_1EB3BF820 == cf)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFC3978);
    }
    unsigned __int16 v3 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEFAULT, "#Warning Setting CLCommon's runloop after it was already established", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 == -1) {
        goto LABEL_30;
      }
      goto LABEL_32;
    }
  }
  else
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFC3978);
    }
    uint64_t v2 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEFAULT, "#Warning Changing CLCommon's runloop after it was already established", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 == -1)
      {
LABEL_30:
        unint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CLCommonSetRunLoop(CFRunLoopRef)", "CoreLocation: %s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        goto LABEL_15;
      }
LABEL_32:
      dispatch_once(&qword_1EB3BE888, &unk_1EDFC3978);
      goto LABEL_30;
    }
  }
LABEL_15:
  if (cf) {
    CFRetain(cf);
  }
  if (qword_1EB3BF820) {
    CFRelease((CFTypeRef)qword_1EB3BF820);
  }
  if (qword_1EB3BE888 != -1) {
    dispatch_once(&qword_1EB3BE888, &unk_1EDFC3978);
  }
  uint64_t v4 = off_1EB3BE880;
  if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    CFTypeRef v8 = cf;
    _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_DEBUG, "CLCommonSetRunLoop, %p", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFC3978);
    }
    unsigned __int16 v5 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLCommonSetRunLoop(CFRunLoopRef)", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  qword_1EB3BF820 = (uint64_t)cf;
}

BOOL sub_1902B41B0(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB3BF810);
  uint64_t v2 = (const char *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    uint64_t v2 = *(const char **)v2;
  }
  sub_1902DF9A8(a1 + 120, v2);
  int v3 = CFPreferencesSynchronize(*(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  if (*(unsigned char *)(a1 + 16)) {
    sub_19047E8B8((char *)a1, 0);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB3BF810);
  return v3 != 0;
}

void sub_1902B4238(_Unwind_Exception *a1)
{
}

void sub_1902B449C(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x1080C40E5CA5B2BLL);
  _Unwind_Resume(a1);
}

uint64_t sub_1902B44C0(uint64_t a1, const char *a2, _DWORD *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  uint64_t v6 = sub_1902DD914(a1, (uint64_t)v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t sub_1902B4534()
{
  if (qword_1EB3BF260 != -1) {
    dispatch_once(&qword_1EB3BF260, &unk_1EDFD1B20);
  }
  return qword_1EB3BF258;
}

uint64_t sub_1902B4578(__IOHIDServiceClient *a1, void *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(a2, (const char *)a2, (uint64_t)&v21, v37, 16);
  if (!v4) {
    return 1;
  }
  uint64_t v6 = v4;
  uint64_t v7 = *(void *)v22;
LABEL_3:
  uint64_t v8 = 0;
  while (1)
  {
    if (*(void *)v22 != v7) {
      objc_enumerationMutation(a2);
    }
    CFStringRef v9 = *(const __CFString **)(*((void *)&v21 + 1) + 8 * v8);
    uint64_t v10 = (const void *)objc_msgSend_objectForKeyedSubscript_(a2, v5, (uint64_t)v9);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    uint64_t v11 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543875;
      CFStringRef v32 = v9;
      __int16 v33 = 2113;
      int v34 = v10;
      __int16 v35 = 2049;
      __int16 v36 = a1;
      _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Checking matching property %{public}@ = %{private}@ for service ref %{private}p", buf, 0x20u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
      int v25 = 138543875;
      CFStringRef v26 = v9;
      __int16 v27 = 2113;
      double v28 = v10;
      __int16 v29 = 2049;
      double v30 = a1;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "static BOOL CLIoHidInterface::Device::serviceMatchesProperties(IOHIDServiceClientRef, NSDictionary<NSString *,id> *)", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    CFTypeRef v12 = IOHIDServiceClientCopyProperty(a1, v9);
    if (!v12) {
      break;
    }
    int v13 = v12;
    if (!CFEqual(v12, v10))
    {
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
      double v19 = off_1EB3BE890;
      if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543875;
        CFStringRef v32 = v9;
        __int16 v33 = 2114;
        int v34 = v13;
        __int16 v35 = 2049;
        __int16 v36 = a1;
        _os_log_impl(&dword_1902AF000, v19, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Property mismatch! %{public}@ = %{public}@ for service ref %{private}p", buf, 0x20u);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE898 != -1) {
          dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
        }
        int v25 = 138543875;
        CFStringRef v26 = v9;
        __int16 v27 = 2114;
        double v28 = v13;
        __int16 v29 = 2049;
        double v30 = a1;
        int v20 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "static BOOL CLIoHidInterface::Device::serviceMatchesProperties(IOHIDServiceClientRef, NSDictionary<NSString *,id> *)", "CoreLocation: %s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
      CFRelease(v13);
      return 0;
    }
    CFRelease(v13);
    if (v6 == ++v8)
    {
      uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(a2, v5, (uint64_t)&v21, v37, 16);
      uint64_t v6 = v15;
      uint64_t result = 1;
      if (!v6) {
        return result;
      }
      goto LABEL_3;
    }
  }
  if (qword_1EB3BE898 != -1) {
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
  }
  int v17 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543875;
    CFStringRef v32 = v9;
    __int16 v33 = 2114;
    int v34 = v10;
    __int16 v35 = 2049;
    __int16 v36 = a1;
    _os_log_impl(&dword_1902AF000, v17, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Invalid matching property %{public}@ = %{public}@ for service ref %{private}p", buf, 0x20u);
  }
  uint64_t result = sub_1902D8400(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    int v25 = 138543875;
    CFStringRef v26 = v9;
    __int16 v27 = 2114;
    double v28 = v10;
    __int16 v29 = 2049;
    double v30 = a1;
    int v18 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "static BOOL CLIoHidInterface::Device::serviceMatchesProperties(IOHIDServiceClientRef, NSDictionary<NSString *,id> *)", "CoreLocation: %s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
    return 0;
  }
  return result;
}

double sub_1902B4DA8(uint64_t a1, double *a2)
{
  if ((sub_1902CD6B0() & 1) != 0 || (sub_1902CD6B0() & 2) != 0)
  {
    double result = *(double *)(a1 + 40);
    return result * *a2;
  }
  double result = *a2;
  if (*a2 <= 0.01 && result > 0.0)
  {
    a2 = (double *)(a1 + 40);
    return result * *a2;
  }
  return result;
}

void sub_1902B4E0C(uint64_t a1, int a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  float v4 = *(float *)(a1 + 120);
  float v5 = *(float *)(a1 + 124);
  *(float *)(a1 + 200) = v4;
  *(float *)(a1 + 204) = v5;
  float v6 = *(float *)(a1 + 128);
  *(float *)(a1 + 208) = v6;
  *(float *)(a1 + 216) = sqrtf((float)((float)(v5 * v5) + (float)(v4 * v4)) + (float)(v6 * v6));
  if (qword_1E929D798 != -1) {
    dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
  }
  uint64_t v7 = qword_1E929D790;
  if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
  {
    double v8 = *(float *)(a1 + 200);
    double v9 = *(float *)(a1 + 204);
    double v10 = *(float *)(a1 + 208);
    int v11 = *(_DWORD *)(a1 + 20);
    int v12 = *(_DWORD *)(a1 + 224);
    int v13 = *(_DWORD *)(a1 + 168);
    int v14 = *(_DWORD *)(a1 + 172);
    int v15 = *(_DWORD *)(a1 + 176);
    int v16 = *(_DWORD *)(a1 + 236);
    int v17 = *(_DWORD *)(a1 + 240);
    *(_DWORD *)buf = 134220544;
    double v21 = v8;
    __int16 v22 = 2048;
    double v23 = v9;
    __int16 v24 = 2048;
    double v25 = v10;
    __int16 v26 = 1024;
    int v27 = v11;
    __int16 v28 = 1024;
    int v29 = v12;
    __int16 v30 = 1024;
    int v31 = v13;
    __int16 v32 = 1024;
    int v33 = v14;
    __int16 v34 = 1024;
    int v35 = v15;
    __int16 v36 = 1024;
    int v37 = v16;
    __int16 v38 = 1024;
    int v39 = v17;
    __int16 v40 = 1024;
    int v41 = a2;
    _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_DEBUG, "set coasting vector (%.3f/%.3f/%.3f), levels (%d %d) conv(%d %d %d) age (%d) syncAge (%d) DueTo (%d)", buf, 0x50u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
    }
    double v19 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::setCoastingVector(BOOL)", "CoreLocation: %s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  *(_DWORD *)(a1 + 240) = 0;
  int v18 = *(_DWORD *)(a1 + 20);
  if (a2)
  {
    *(_DWORD *)(a1 + 224) = v18;
    sub_1902B5164((void *)(a1 + 1080));
    sub_1902B5164((void *)(a1 + 1008));
    sub_1902B5164((void *)(a1 + 1152));
    *(unsigned char *)(a1 + 59) = 1;
  }
  else
  {
    if (v18 > *(_DWORD *)(a1 + 224))
    {
      *(_DWORD *)(a1 + 236) = 0;
      *(_DWORD *)(a1 + 1608) = 0;
    }
    *(void *)(a1 + 264) = 0;
    *(_DWORD *)(a1 + 272) = 0;
    *(void *)(a1 + 288) = 0;
    *(_DWORD *)(a1 + 296) = 0;
    *(void *)(a1 + 304) = 0;
    *(_WORD *)(a1 + 312) = 0;
    *(_DWORD *)(a1 + 224) = v18;
    sub_1902B5164((void *)(a1 + 1080));
    sub_1902B5164((void *)(a1 + 1008));
    sub_1902B5164((void *)(a1 + 1152));
  }
}

void sub_1902B5164(void *a1)
{
  uint64_t v2 = (void **)a1[4];
  uint64_t v3 = a1[5];
  a1[8] = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[5];
      uint64_t v2 = (void **)(a1[4] + 8);
      a1[4] = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 512;
    goto LABEL_7;
  }
  if (v4 >> 3 == 2)
  {
    uint64_t v6 = 1024;
LABEL_7:
    a1[7] = v6;
  }
  a1[2] = 0;
}

void sub_1902B51E0(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 320) = 3;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  bzero(*(void **)(a1 + 1576), 0x6CuLL);
  uint64_t v2 = *(_DWORD **)(a1 + 1576);
  *uint64_t v2 = 1065353216;
  v2[4] = 1065353216;
  v2[8] = 1065353216;
  *(unsigned char *)(a1 + 25) = 0;
  if (qword_1E929D798 != -1) {
    dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
  }
  uint64_t v3 = qword_1E929D790;
  if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEBUG, "compass calibrator reset", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
    }
    unint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::reset()", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

void sub_1902B5544()
{
  CFBooleanRef v0 = (const __CFBoolean *)MGCopyAnswer();
  if (v0)
  {
    CFBooleanRef v1 = v0;
    CFTypeID v2 = CFGetTypeID(v0);
    if (v2 == CFBooleanGetTypeID() && CFBooleanGetValue(v1)) {
      int v3 = 4;
    }
    else {
      int v3 = sub_1902CEA58();
    }
    dword_1EB3BE95C = v3;
    CFRelease(v1);
  }
  else
  {
    dword_1EB3BE95C = sub_1902CEA58();
  }
}

intptr_t sub_1902B5958(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(NSObject **)(v2 + 24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_19052009C;
  block[3] = &unk_1E568E898;
  char v7 = *(unsigned char *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 48);
  block[4] = v2;
  block[5] = v4;
  dispatch_async(v3, block);
  intptr_t result = dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 72), 0xFFFFFFFFFFFFFFFFLL);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(void *)(*(void *)(a1 + 32) + 96);
  return result;
}

BOOL sub_1902B5A04(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current != *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD2B60);
    }
    double v10 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)int v17 = 0;
      *(_WORD *)&v17[4] = 2082;
      *(void *)&v17[6] = "";
      *(_WORD *)&v17[14] = 2082;
      *(void *)&v17[16] = "assert";
      __int16 v18 = 2081;
      double v19 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[FastPathDevice] initializeFastPath should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD2B60);
      }
    }
    int v11 = off_1EB3BE890;
    if (os_signpost_enabled((os_log_t)off_1EB3BE890))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)int v17 = 0;
      *(_WORD *)&v17[4] = 2082;
      *(void *)&v17[6] = "";
      *(_WORD *)&v17[14] = 2082;
      *(void *)&v17[16] = "assert";
      __int16 v18 = 2081;
      double v19 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[FastPathDevice] initializeFastPath should be running on motion thread", "{\"msg%{public}.0s\":\"[FastPathDevice] initializeFastPath should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD2B60);
      }
    }
    int v12 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)int v17 = 0;
      *(_WORD *)&v17[4] = 2082;
      *(void *)&v17[6] = "";
      *(_WORD *)&v17[14] = 2082;
      *(void *)&v17[16] = "assert";
      __int16 v18 = 2081;
      double v19 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[FastPathDevice] initializeFastPath should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    goto LABEL_33;
  }
  if (*(unsigned char *)(a1 + 172))
  {
    if (qword_1EB3BE898 == -1)
    {
LABEL_4:
      uint64_t v5 = off_1EB3BE890;
      if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_FAULT, "[FastPath] Already initialized", buf, 2u);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE898 != -1) {
          dispatch_once(&qword_1EB3BE898, &unk_1EDFD2B60);
        }
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "BOOL FastPathDevice::initializeFastPath(NSDictionary *)", "CoreLocation: %s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      return 1;
    }
LABEL_33:
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD2B60);
    goto LABEL_4;
  }
  if (sub_1902DF564((void *)a1))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 168));
    sub_1902B8788(a1);
    *(unsigned char *)(a1 + 172) = IOHIDServiceClientFastPathInit() != 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 168));
    if (!*(unsigned char *)(a1 + 172))
    {
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD2B60);
      }
      char v7 = off_1EB3BE890;
      if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        *(void *)int v17 = sub_1902B8788(a1);
        *(_WORD *)&v17[8] = 2112;
        *(void *)&v17[10] = a2;
        _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_ERROR, "[FastPath] Initialization failed,serviceRef,%@,properties,%@", buf, 0x16u);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE898 != -1) {
          dispatch_once(&qword_1EB3BE898, &unk_1EDFD2B60);
        }
        sub_1902B8788(a1);
        int v15 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "BOOL FastPathDevice::initializeFastPath(NSDictionary *)", "CoreLocation: %s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
    }
    return *(unsigned char *)(a1 + 172) != 0;
  }
  else
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD2B60);
    }
    double v8 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_ERROR, "[FastPath] Couldn't initialize FastPath due null service ref", buf, 2u);
    }
    int v9 = sub_1902D8400(115, 0);
    BOOL result = 0;
    if (v9)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD2B60);
      }
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "BOOL FastPathDevice::initializeFastPath(NSDictionary *)", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
      return 0;
    }
  }
  return result;
}

void sub_1902B60FC(uint64_t a1)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  if (*(void *)(*(void *)(a1 + 32) + 8))
  {
    sub_1902C3F54(&__p, "kCLConnectionMessageVO2MaxRetrocomputeStatusUpdate");
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    v4[3] = sub_1902BA184;
    v4[4] = &unk_1E568D558;
    v4[5] = *(void *)(a1 + 32);
    CLConnectionClient::setHandlerForMessage();
    if (v7 < 0) {
      operator delete(__p);
    }
    double v8 = @"kCLConnectionMessageSubscribeKey";
    v9[0] = MEMORY[0x1E4F1CC38];
    v4[0] = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v2, (uint64_t)v9, &v8, 1);
    sub_1902DD634("kCLConnectionMessageVO2MaxRetrocomputeStatusUpdate", v4, &__p);
    int v3 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CLConnectionClient::sendMessage();
    if (v3) {
      sub_1902D8B58(v3);
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 24) = 1;
    if (v6) {
      sub_1902D8B58(v6);
    }
  }
}

void sub_1902B6274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, std::__shared_weak_count *a19, int a20,__int16 a21,char a22,char a23)
{
  if (a11) {
    sub_1902D8B58(a11);
  }
  if (a19) {
    sub_1902D8B58(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_1902B660C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a18) {
    sub_1902D8B58(a18);
  }
  if (a22) {
    sub_1902D8B58(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_1902B6638()
{
}

void sub_1902B6708(_Unwind_Exception *a1)
{
  int v3 = (std::__shared_weak_count *)v1[28];
  if (v3) {
    sub_1902D8B58(v3);
  }
  sub_190592398(v1);
  MEMORY[0x192FCC980](v1, 0x10B3C4059D1D8F6);
  _Unwind_Resume(a1);
}

void sub_1902B6748()
{
  CFBooleanRef v0 = (const __CFBoolean *)MGCopyAnswer();
  if (v0)
  {
    CFBooleanRef v1 = v0;
    CFTypeID v2 = CFGetTypeID(v0);
    if (v2 == CFBooleanGetTypeID() && CFBooleanGetValue(v1) == 1) {
      byte_1EB3BE954 = 1;
    }
    CFRelease(v1);
  }
}

void sub_1902B6888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FCC980](v15, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_1902B68C4(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  double v8 = (NSSet *)objc_msgSend_setWithObjects_(v4, v7, v5, v6, 0);
  if (*a2
    && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v8),
        (int v11 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v10, @"CMOverrideResult")) != 0)&& (v14 = *(void *)(a1 + 32), *(void *)(v14 + 40))&& *(unsigned char *)(v14 + 56))
  {
    *(void *)(*(void *)(a1 + 32) + 64) = objc_msgSend_integerValue(v11, v12, v13);
    *(unsigned char *)(*(void *)(a1 + 32) + 56) = 0;
    uint64_t v15 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    dispatch_semaphore_signal(v15);
  }
  else
  {
    if (qword_1E929D7A0 != -1) {
      dispatch_once(&qword_1E929D7A0, &unk_1EDFD3EA0);
    }
    int v16 = qword_1E929D7A8;
    if (os_log_type_enabled((os_log_t)qword_1E929D7A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v16, OS_LOG_TYPE_ERROR, "Could not parse dictionary for kCLConnectionMessageSidebandOverride", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D7A0 != -1) {
        dispatch_once(&qword_1E929D7A0, &unk_1EDFD3EA0);
      }
      int v17 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMActivityManagerInternal connect]_block_invoke", "CoreLocation: %s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
}

dispatch_queue_t sub_1902B6B24(dispatch_queue_t result)
{
  if (!*((void *)result[4].isa + 9))
  {
    dispatch_queue_t v1 = result;
    *((void *)result[4].isa + 9) = dispatch_semaphore_create(0);
    if (!*((void *)v1[4].isa + 9)) {
      *(void *)(*((void *)v1[5].isa + 1) + 24) = 3;
    }
    BOOL result = dispatch_queue_create("com.apple.CoreMotion.MotionStateSim", 0);
    *((void *)v1[4].isa + 10) = result;
    if (!*((void *)v1[4].isa + 10)) {
      *(void *)(*((void *)v1[5].isa + 1) + 24) = 3;
    }
  }
  return result;
}

void sub_1902B6BB0(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current != *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (qword_1EB3BE898 != -1) {
      goto LABEL_40;
    }
    while (1)
    {
      double v21 = off_1EB3BE890;
      if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)int v27 = 2082;
        *(void *)&v27[2] = "";
        *(_WORD *)&v27[10] = 2082;
        *(void *)&v27[12] = "assert";
        *(_WORD *)&v27[20] = 2081;
        *(void *)&v27[22] = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
        _os_log_impl(&dword_1902AF000, v21, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] addDevice should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_1EB3BE898 != -1) {
          dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
        }
      }
      __int16 v22 = off_1EB3BE890;
      if (os_signpost_enabled((os_log_t)off_1EB3BE890))
      {
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)int v27 = 2082;
        *(void *)&v27[2] = "";
        *(_WORD *)&v27[10] = 2082;
        *(void *)&v27[12] = "assert";
        *(_WORD *)&v27[20] = 2081;
        *(void *)&v27[22] = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
        _os_signpost_emit_with_name_impl(&dword_1902AF000, v22, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] addDevice should be running on motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] addDevice should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_1EB3BE898 != -1) {
          dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
        }
      }
      double v23 = off_1EB3BE890;
      if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)int v27 = 2082;
        *(void *)&v27[2] = "";
        *(_WORD *)&v27[10] = 2082;
        *(void *)&v27[12] = "assert";
        *(_WORD *)&v27[20] = 2081;
        *(void *)&v27[22] = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
        _os_log_impl(&dword_1902AF000, v23, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] addDevice should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }
      abort_report_np();
      __break(1u);
LABEL_40:
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
  }
  if (qword_1EB3BE898 != -1) {
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
  }
  uint64_t v5 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(*a2 + 16);
    int v7 = *(_DWORD *)(*a2 + 20);
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = v7;
    *(_WORD *)int v27 = 1026;
    *(_DWORD *)&v27[2] = v6;
    _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Adding new Device with usage pair {%{public}d, %{public}d}", buf, 0xEu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    __int16 v24 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::addDevice(std::shared_ptr<CLIoHidInterface::Device>)", "CoreLocation: %s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  long long v8 = *(_OWORD *)a2;
  uint64_t v9 = a2[1];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
  }
  unint64_t v10 = a1[3];
  int v11 = (char *)a1[2];
  if ((unint64_t)v11 >= v10)
  {
    uint64_t v13 = (char *)a1[1];
    uint64_t v14 = (v11 - v13) >> 4;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 60) {
      sub_1903479E8();
    }
    long long v25 = v8;
    if ((uint64_t)(v10 - (void)v13) >> 3 > v15) {
      unint64_t v15 = (uint64_t)(v10 - (void)v13) >> 3;
    }
    if (v10 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    *(void *)&v27[24] = a1 + 3;
    if (v16 >> 60) {
      sub_190347AC8();
    }
    int v17 = (char *)operator new(16 * v16);
    __int16 v18 = &v17[16 * v14];
    *(_OWORD *)__int16 v18 = v25;
    int v12 = v18 + 16;
    if (v11 == v13)
    {
      int64x2_t v20 = vdupq_n_s64((unint64_t)v11);
    }
    else
    {
      do
      {
        long long v19 = *((_OWORD *)v11 - 1);
        v11 -= 16;
        *((_OWORD *)v18 - 1) = v19;
        v18 -= 16;
        *(void *)int v11 = 0;
        *((void *)v11 + 1) = 0;
      }
      while (v11 != v13);
      int64x2_t v20 = *(int64x2_t *)(a1 + 1);
      unint64_t v10 = a1[3];
    }
    a1[1] = v18;
    a1[2] = v12;
    *(int64x2_t *)int v27 = v20;
    a1[3] = &v17[16 * v16];
    *(void *)&v27[16] = v10;
    *(void *)buf = v20.i64[0];
    sub_1902DD7C4((uint64_t)buf);
  }
  else
  {
    *(void *)int v11 = v8;
    *((void *)v11 + 1) = v9;
    int v12 = v11 + 16;
    a1[2] = v11 + 16;
  }
  a1[2] = v12;
}

void sub_1902B70D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1902B70F8(NSObject *a1)
{
  dispatch_queue_t v1 = a1;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  Class isa = a1[5].isa;
  if ((sub_1902CD6B0() & 0x100) != 0)
  {
    if (qword_1E929D708 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD3280);
    }
    unint64_t v15 = off_1E929D6F8;
    if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)__int16 v34 = 0;
      *(_WORD *)&v34[4] = 2082;
      *(void *)&v34[6] = "";
      *(_WORD *)&v34[14] = 2082;
      *(void *)&v34[16] = "assert";
      __int16 v35 = 2081;
      __int16 v36 = "isAvailable()";
      _os_log_impl(&dword_1902AF000, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLSPUEclipseInterface] Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD3280);
      }
    }
    unint64_t v16 = off_1E929D6F8;
    if (os_signpost_enabled((os_log_t)off_1E929D6F8))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)__int16 v34 = 0;
      *(_WORD *)&v34[4] = 2082;
      *(void *)&v34[6] = "";
      *(_WORD *)&v34[14] = 2082;
      *(void *)&v34[16] = "assert";
      __int16 v35 = 2081;
      __int16 v36 = "isAvailable()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLSPUEclipseInterface] Service required", "{\"msg%{public}.0s\":\"[CLSPUEclipseInterface] Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD3280);
      }
    }
    dispatch_queue_t v1 = off_1E929D6F8;
    if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)__int16 v34 = 0;
      *(_WORD *)&v34[4] = 2082;
      *(void *)&v34[6] = "";
      *(_WORD *)&v34[14] = 2082;
      *(void *)&v34[16] = "assert";
      __int16 v35 = 2081;
      __int16 v36 = "isAvailable()";
      _os_log_impl(&dword_1902AF000, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLSPUEclipseInterface] Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
  }
  dispatch_once(&qword_1E929D708, &unk_1EDFD3280);
LABEL_3:
  int v3 = off_1E929D6F8;
  if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEFAULT, "[CLSPUEclipseClient] Sending query command.", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD3280);
    }
    *(_WORD *)double v23 = 0;
    int v17 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "BOOL CLSPUEclipseClient::querySuppressionBlocking(BOOL &, CLMotionTypeTimestamp &)_block_invoke", "CoreLocation: %s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  char v24 = 5;
  memset(v23, 0, sizeof(v23));
  uint64_t v22 = 37;
  mach_error_t v4 = sub_1905145B0(*((void *)isa + 3), (uint64_t)&v24, (char *)1, (uint64_t)v23, (uint64_t)&v22);
  if (v4)
  {
    mach_error_t v5 = v4;
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD3280);
    }
    int v6 = off_1E929D6F8;
    if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_ERROR))
    {
      int v7 = mach_error_string(v5);
      *(_DWORD *)buf = 136446466;
      *(void *)__int16 v34 = v7;
      *(_WORD *)&v34[8] = 1026;
      *(_DWORD *)&v34[10] = v5;
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_ERROR, "[CLSPUEclipseClient] Query failed: %{public}s (0x%{public}x)", buf, 0x12u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD3280);
      }
      long long v8 = mach_error_string(v5);
      int v25 = 136446466;
      uint64_t v26 = (uint64_t)v8;
      __int16 v27 = 1026;
      LODWORD(v28) = v5;
LABEL_69:
      double v21 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "BOOL CLSPUEclipseClient::querySuppressionBlocking(BOOL &, CLMotionTypeTimestamp &)_block_invoke", "CoreLocation: %s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
  else if (v22 == 37)
  {
    if (v23[1])
    {
      if (*(void *)&v23[10])
      {
        *(double *)v1[6].Class isa = (double)*(unint64_t *)&v23[10] * 0.000001;
        *(unsigned char *)v1[7].Class isa = v23[19];
        if (qword_1E929D708 != -1) {
          dispatch_once(&qword_1E929D708, &unk_1EDFD3280);
        }
        uint64_t v9 = off_1E929D6F8;
        if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = *(void *)v1[6].isa;
          int v11 = *(unsigned __int8 *)v1[7].isa;
          *(_DWORD *)buf = 134349824;
          *(void *)__int16 v34 = v10;
          *(_WORD *)&v34[8] = 2050;
          *(double *)&v34[10] = (double)*(unint64_t *)&v23[2] * 0.000001;
          *(_WORD *)&v34[18] = 1026;
          *(_DWORD *)&v34[20] = v11;
          __int16 v35 = 1026;
          LODWORD(v36) = v23[20];
          _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_DEFAULT, "[CLSPUEclipseClient] Query reply: timestamp,%{public}f, replyTimestamp,%{public}f, suppress,%{public}d, awake,%{public}d", buf, 0x22u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D708 != -1) {
            dispatch_once(&qword_1E929D708, &unk_1EDFD3280);
          }
          uint64_t v18 = *(void *)v1[6].isa;
          int v19 = *(unsigned __int8 *)v1[7].isa;
          int v25 = 134349824;
          uint64_t v26 = v18;
          __int16 v27 = 2050;
          double v28 = (double)*(unint64_t *)&v23[2] * 0.000001;
          __int16 v29 = 1026;
          int v30 = v19;
          __int16 v31 = 1026;
          int v32 = v23[20];
          int64x2_t v20 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "BOOL CLSPUEclipseClient::querySuppressionBlocking(BOOL &, CLMotionTypeTimestamp &)_block_invoke", "CoreLocation: %s\n", v20);
          if (v20 != (char *)buf) {
            free(v20);
          }
        }
        *(unsigned char *)(*((void *)v1[4].isa + 1) + 24) = 1;
      }
      else
      {
        if (qword_1E929D708 != -1) {
          dispatch_once(&qword_1E929D708, &unk_1EDFD3280);
        }
        uint64_t v14 = off_1E929D6F8;
        if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_ERROR, "[CLSPUEclipseClient] No suppression event available yet.", buf, 2u);
        }
        if (sub_1902D8400(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D708 != -1) {
            dispatch_once(&qword_1E929D708, &unk_1EDFD3280);
          }
          LOWORD(v25) = 0;
          goto LABEL_69;
        }
      }
    }
    else
    {
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD3280);
      }
      uint64_t v13 = off_1E929D6F8;
      if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1902AF000, v13, OS_LOG_TYPE_ERROR, "[CLSPUEclipseClient] Service not running.", buf, 2u);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D708 != -1) {
          dispatch_once(&qword_1E929D708, &unk_1EDFD3280);
        }
        LOWORD(v25) = 0;
        goto LABEL_69;
      }
    }
  }
  else
  {
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD3280);
    }
    int v12 = off_1E929D6F8;
    if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(void *)__int16 v34 = v22;
      _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_ERROR, "[CLSPUEclipseClient] Unexpected response size: %{public}zu", buf, 0xCu);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD3280);
      }
      int v25 = 134349056;
      uint64_t v26 = v22;
      goto LABEL_69;
    }
  }
}

void sub_1902B7B14()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1902B8730(_Unwind_Exception *a1)
{
  if (v2) {
    sub_1902D8B58(v2);
  }
  mach_error_t v4 = (std::__shared_weak_count *)v1[11];
  if (v4) {
    sub_1902D8B58(v4);
  }
  sub_1904DC240(v1);
  MEMORY[0x192FCC980](v1, 0x10F1C40A1449BFALL);
  _Unwind_Resume(a1);
}

uint64_t sub_1902B8788(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current != *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    mach_error_t v4 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 2082;
      int v12 = "assert";
      __int16 v13 = 2081;
      uint64_t v14 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] Should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    mach_error_t v5 = off_1EB3BE890;
    if (os_signpost_enabled((os_log_t)off_1EB3BE890))
    {
      *(_DWORD *)buf = 68289539;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 2082;
      int v12 = "assert";
      __int16 v13 = 2081;
      uint64_t v14 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] Should be running on motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] Should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    int v6 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 2082;
      int v12 = "assert";
      __int16 v13 = 2081;
      uint64_t v14 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] Should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
  }
  return *(void *)(a1 + 24);
}

void sub_1902B8A0C(uint64_t a1, int a2, int *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 60) = a2;
  if (a2)
  {
    int v4 = *a3;
    *(_DWORD *)(a1 + 120) = *a3;
    int v5 = a3[1];
    *(_DWORD *)(a1 + 124) = v5;
    int v6 = a3[2];
    *(_DWORD *)(a1 + 128) = v6;
    *(_DWORD *)(a1 + 200) = v4;
    *(_DWORD *)(a1 + 204) = v5;
    *(_DWORD *)(a1 + 208) = v6;
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
    }
    int v7 = qword_1E929D790;
    if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
    {
      double v8 = *(float *)(a1 + 200);
      double v9 = *(float *)(a1 + 204);
      double v10 = *(float *)(a1 + 208);
      double v11 = *(float *)(a1 + 120);
      double v12 = *(float *)(a1 + 124);
      double v13 = *(float *)(a1 + 128);
      *(_DWORD *)buf = 134219264;
      double v16 = v8;
      __int16 v17 = 2048;
      double v18 = v9;
      __int16 v19 = 2048;
      double v20 = v10;
      __int16 v21 = 2048;
      double v22 = v11;
      __int16 v23 = 2048;
      double v24 = v12;
      __int16 v25 = 2048;
      double v26 = v13;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_DEBUG, "fCoastingVecPrint: %.3f, %.3f, %.3f, %.3f, %.3f, %.3f", buf, 0x3Eu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::referenceAttitudeChanged(BOOL, const CLMotionTypeMagneticField &)", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
}

void sub_1902B8C88()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1902B90C0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1902B90E0(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (const char *)a1;
  v22[2] = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    if (!*(void *)(a1 + 8))
    {
LABEL_7:
      uint64_t v4 = CFCopyUserName();
      goto LABEL_8;
    }
    uint64_t v2 = *(const char **)a1;
  }
  else if (!*(unsigned char *)(a1 + 23))
  {
    goto LABEL_7;
  }
  uint64_t v4 = (uint64_t)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2, 0x8000100u);
LABEL_8:
  int v5 = (const void *)v4;
  sub_1902BAD40();
  if (sub_1902E0024() && (int v6 = getenv("_SET_CLPERSISTENTSTORE_TEST_PATH")) != 0)
  {
    double v8 = NSString;
    v22[0] = objc_msgSend_stringWithUTF8String_(NSString, v7, (uint64_t)v6);
    v22[1] = v5;
    uint64_t v10 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v9, (uint64_t)v22, 2);
    double v12 = objc_msgSend_pathWithComponents_(v8, v11, v10);
    uint64_t v15 = (char *)objc_msgSend_UTF8String(v12, v13, v14);
    sub_1902C3F54(&v20, v15);
    *(_OWORD *)a2 = v20;
    a2[2] = v21;
  }
  else if (v5)
  {
    CFURLRef v16 = (const __CFURL *)CFCopyHomeDirectoryURLForUser();
    CFURLRef v17 = v16;
    if (v16)
    {
      CFStringRef v18 = CFURLCopyFileSystemPath(v16, kCFURLPOSIXPathStyle);
      CFStringRef v19 = v18;
      if (v18)
      {
        sub_1902C36AC(v18, (uint64_t)&v20);
        *(_OWORD *)a2 = v20;
        a2[2] = v21;
        CFRelease(v19);
      }
      CFRelease(v17);
    }
    CFRelease(v5);
  }
}

void sub_1902B925C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1902B928C(uint64_t a1, char *a2, __IOHIDServiceClient *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a2 == "ADDED")
  {
    int v5 = (void *)MEMORY[0x192FCD2F0]();
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEBUG))
    {
      id v6 = (id)IOHIDServiceClientCopyProperty(a3, @"PrimaryUsagePage");
      int v9 = objc_msgSend_intValue(v6, v7, v8);
      id v10 = (id)IOHIDServiceClientCopyProperty(a3, @"PrimaryUsage");
      int v13 = objc_msgSend_intValue(v10, v11, v12);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
      uint64_t v14 = off_1EB3BE890;
      if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240448;
        int v23 = v9;
        __int16 v24 = 1026;
        int v25 = v13;
        _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] New IOHIDServiceClientRef for usage pair {%{public}d, %{public}d} just became available.", buf, 0xEu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE898 != -1) {
          dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
        }
        uint64_t v21 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::onServiceRegistration(void *, IOHIDServiceClientRef)", "CoreLocation: %s\n", v21);
        if (v21 != (char *)buf) {
          free(v21);
        }
      }
    }
    uint64_t v15 = *(void *)(a1 + 8);
    for (uint64_t i = *(void *)(a1 + 16); v15 != i; v15 += 16)
    {
      CFURLRef v17 = *(std::__shared_weak_count **)(v15 + 8);
      if (v17)
      {
        CFStringRef v18 = *(void **)v15;
        atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        CFStringRef v19 = std::__shared_weak_count::lock(v17);
        if (v19)
        {
          long long v20 = v19;
          if (v18 && (sub_1902B2908((uint64_t)v18, a3) & 1) != 0)
          {
            sub_1902BCACC(v18, (char *)a3, 1);
            if (v18[10]) {
              IOHIDServiceClientRegisterRemovalCallback();
            }
          }
          sub_1902D8B58(v20);
        }
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_1902B9594(_Unwind_Exception *exception_object)
{
}

void sub_1902B95B8(void *a1)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  *a1 = &unk_1EDFC7648;
  operator new();
}

void sub_1902B9710(uint64_t a1, float *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (qword_1E929D798 != -1) {
    dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
  }
  uint64_t v4 = qword_1E929D790;
  if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_DEBUG, "Divergence!!! Resetting.", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::handleDivergence(const CLVector3d<float> &)", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_1902B5164((void *)(a1 + 1248));
  sub_1902B5164((void *)(a1 + 1320));
  sub_1902B5164((void *)(a1 + 1392));
  if (*(unsigned char *)(a1 + 24))
  {
    sub_1902D9094(a1 + 1248, (float *)(a1 + 72));
    sub_1902D9094(a1 + 1320, (float *)(a1 + 76));
    sub_1902D9094(a1 + 1392, (float *)(a1 + 80));
  }
  sub_1902CADC0((float64x2_t *)a1, a2, (float32x2_t *)(a1 + 336), *(_DWORD *)(a1 + 20));
}

BOOL sub_1902B991C(uint64_t a1, unsigned int *a2, int a3, float *a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  *a4 = 0.0;
  unint64_t v8 = *(void *)(a1 + 1312);
  float v9 = 0.0;
  float v10 = 0.0;
  if (v8 >= 2)
  {
    float v11 = (float)((float)v8 * *(float *)(a1 + 1268)) - (float)(*(float *)(a1 + 1264) * *(float *)(a1 + 1264));
    float v10 = 0.0;
    if (v11 >= 0.0) {
      float v10 = v11 / (float)((v8 - 1) * v8);
    }
  }
  unint64_t v12 = *(void *)(a1 + 1384);
  if (v12 >= 2)
  {
    float v13 = (float)((float)v12 * *(float *)(a1 + 1340)) - (float)(*(float *)(a1 + 1336) * *(float *)(a1 + 1336));
    if (v13 >= 0.0) {
      float v9 = v13 / (float)((v12 - 1) * v12);
    }
  }
  unint64_t v14 = *(void *)(a1 + 1456);
  float v15 = 0.0;
  if (v14 >= 2)
  {
    float v16 = (float)((float)v14 * *(float *)(a1 + 1412)) - (float)(*(float *)(a1 + 1408) * *(float *)(a1 + 1408));
    if (v16 >= 0.0) {
      float v15 = v16 / (float)((v14 - 1) * v14);
    }
  }
  float v28 = v10;
  float v29 = v9;
  float v30 = v15;
  float v17 = (float)(v9 * (float)a2[1]) + (float)((float)*a2 * v10);
  float v18 = (float)a2[2];
  if (qword_1E929D798 != -1) {
    dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
  }
  float v19 = v17 + (float)(v18 * v15);
  long long v20 = qword_1E929D790;
  if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v21 = *a2;
    unsigned int v22 = a2[1];
    unsigned int v23 = a2[2];
    uint64_t v24 = *(void *)(a1 + 1312);
    *(_DWORD *)buf = 67111168;
    unsigned int v32 = v21;
    __int16 v33 = 1024;
    unsigned int v34 = v22;
    __int16 v35 = 1024;
    unsigned int v36 = v23;
    __int16 v37 = 2048;
    double v38 = v28;
    __int16 v39 = 2048;
    double v40 = v29;
    __int16 v41 = 2048;
    double v42 = v30;
    __int16 v43 = 2048;
    double v44 = v19;
    __int16 v45 = 1024;
    int v46 = a3;
    __int16 v47 = 1024;
    int v48 = v24;
    _os_log_impl(&dword_1902AF000, v20, OS_LOG_TYPE_DEBUG, "new estimates calculated, converged(%d %d %d) Var (%.3f %.3f %.3f), remain (%.3f), level (%d), num=%d ", buf, 0x48u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
    }
    uint64_t v27 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::sanityCheck(unsigned int *, CLMotionTypeCompassCalibrationLevel, float &)", "CoreLocation: %s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
  }
  float v25 = 100.0 / (float)a3;
  if (v19 > v25) {
    *a4 = (float)(v19 - v25) / v25;
  }
  return v19 <= v25;
}

void sub_1902B9CFC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  uint64_t v7 = (NSSet *)objc_msgSend_setWithObjects_(v4, v6, v5, 0);
  if (*a2 && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v7)) != 0)
  {
    float v10 = DictionaryOfClasses;
    float v11 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v9, @"CMErrorMessage");
    if (v11)
    {
      float v13 = v11;
      id v14 = v11;
      float v15 = v27;
      v27[0] = MEMORY[0x1E4F143A8];
      v27[1] = 3221225472;
      v27[2] = sub_19050C984;
      v27[3] = &unk_1E568D2F8;
      uint64_t v16 = *(void *)(a1 + 32);
      v27[4] = v13;
      v27[5] = v16;
    }
    else
    {
      float v18 = objc_msgSend_objectForKeyedSubscript_(v10, v12, @"CMVO2MaxRetrocomputeRecord");
      if (v18)
      {
        float v19 = v18;
        id v20 = v18;
        float v15 = v25;
        v25[0] = MEMORY[0x1E4F143A8];
        v25[1] = 3221225472;
        v25[2] = sub_1902DD244;
        v25[3] = &unk_1E568D320;
        uint64_t v21 = *(void *)(a1 + 32);
        v25[4] = v19;
        v25[5] = v21;
      }
      else
      {
        if (qword_1E929D6E8 != -1) {
          dispatch_once(&qword_1E929D6E8, &unk_1EDFD3E40);
        }
        unsigned int v22 = qword_1E929D6E0;
        if (os_log_type_enabled((os_log_t)qword_1E929D6E0, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1902AF000, v22, OS_LOG_TYPE_ERROR, "Error in retrocomputeStateWithHandler: Unable to parse query response", buf, 2u);
        }
        if (sub_1902D8400(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D6E8 != -1) {
            dispatch_once(&qword_1E929D6E8, &unk_1EDFD3E40);
          }
          __int16 v29 = 0;
          uint64_t v24 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 0, "-[CMVO2MaxRetrocomputeManager retrocomputeStateWithHandler:]_block_invoke", "CoreLocation: %s\n", v24);
          if (v24 != (char *)buf) {
            free(v24);
          }
        }
        float v15 = v26;
        v26[0] = MEMORY[0x1E4F143A8];
        v26[1] = 3221225472;
        v26[2] = sub_19050CB8C;
        v26[3] = &unk_1E568D2D0;
        v26[4] = *(void *)(a1 + 32);
      }
    }
  }
  else
  {
    if (qword_1E929D6E8 != -1) {
      dispatch_once(&qword_1E929D6E8, &unk_1EDFD3E40);
    }
    float v17 = qword_1E929D6E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D6E0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v17, OS_LOG_TYPE_ERROR, "Response invalid for retrocomputeStateWithHandler. Internal error occured.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D6E8 != -1) {
        dispatch_once(&qword_1E929D6E8, &unk_1EDFD3E40);
      }
      __int16 v29 = 0;
      unsigned int v23 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMVO2MaxRetrocomputeManager retrocomputeStateWithHandler:]_block_invoke", "CoreLocation: %s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    float v15 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19050C914;
    block[3] = &unk_1E568D2D0;
    block[4] = *(void *)(a1 + 32);
  }
  dispatch_async(MEMORY[0x1E4F14428], v15);
}

uint64_t sub_1902BA184(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  uint64_t v7 = (NSSet *)objc_msgSend_setWithObjects_(v4, v6, v5, 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v7);
  if (*a2) {
    BOOL v10 = DictionaryOfClasses == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    if (qword_1E929D6E8 != -1) {
      dispatch_once(&qword_1E929D6E8, &unk_1EDFD3E40);
    }
    float v11 = qword_1E929D6E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D6E0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_ERROR, "Response invalid for retrocompute status update.  Internal error occured.", buf, 2u);
    }
    if (!sub_1902D8400(115, 0)) {
      goto LABEL_11;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929D6E8 == -1) {
      goto LABEL_35;
    }
    goto LABEL_41;
  }
  float v15 = DictionaryOfClasses;
  uint64_t v16 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v9, @"CMErrorMessage");
  uint64_t v18 = objc_msgSend_objectForKeyedSubscript_(v15, v17, @"CMVO2MaxRetrocomputeRecord");
  if (!v16)
  {
    if (v18)
    {
      objc_loadWeak((id *)(*(void *)(a1 + 32) + 32));
      uint64_t result = objc_opt_respondsToSelector();
      if (result)
      {
        id Weak = objc_loadWeak((id *)(*(void *)(a1 + 32) + 32));
        uint64_t v28 = *(void *)(a1 + 32);
        return MEMORY[0x1F4181798](Weak, sel_vo2MaxRetrocomputeManager_didUpdateState_, v28);
      }
      return result;
    }
    if (qword_1E929D6E8 != -1) {
      dispatch_once(&qword_1E929D6E8, &unk_1EDFD3E40);
    }
    __int16 v29 = qword_1E929D6E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D6E0, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v29, OS_LOG_TYPE_FAULT, "Unable to parse kCLConnectionMessageVO2MaxRetrocomputeStatusUpdate message", buf, 2u);
    }
    if (!sub_1902D8400(115, 0))
    {
LABEL_11:
      objc_loadWeak((id *)(*(void *)(a1 + 32) + 32));
      uint64_t result = objc_opt_respondsToSelector();
      if ((result & 1) == 0) {
        return result;
      }
      uint64_t v14 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v13, @"CMErrorDomain", 103, 0);
      goto LABEL_20;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929D6E8 == -1)
    {
LABEL_35:
      float v30 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMVO2MaxRetrocomputeManager startRetrocomputeStatusUpdates]_block_invoke", "CoreLocation: %s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
      goto LABEL_11;
    }
LABEL_41:
    dispatch_once(&qword_1E929D6E8, &unk_1EDFD3E40);
    goto LABEL_35;
  }
  uint64_t v21 = (void *)MEMORY[0x1E4F28C58];
  int v22 = objc_msgSend_intValue(v16, v19, v20);
  uint64_t v14 = objc_msgSend_errorWithDomain_code_userInfo_(v21, v23, @"CMErrorDomain", v22, 0);
  if (qword_1E929D6E8 != -1) {
    dispatch_once(&qword_1E929D6E8, &unk_1EDFD3E40);
  }
  uint64_t v24 = qword_1E929D6E0;
  if (os_log_type_enabled((os_log_t)qword_1E929D6E0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    uint64_t v33 = v14;
    _os_log_impl(&dword_1902AF000, v24, OS_LOG_TYPE_ERROR, "Received error for retrocompute status update: %{public}@", buf, 0xCu);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D6E8 != -1) {
      dispatch_once(&qword_1E929D6E8, &unk_1EDFD3E40);
    }
    uint64_t v31 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "-[CMVO2MaxRetrocomputeManager startRetrocomputeStatusUpdates]_block_invoke", "CoreLocation: %s\n", v31);
    if (v31 != (char *)buf) {
      free(v31);
    }
  }
  objc_loadWeak((id *)(*(void *)(a1 + 32) + 32));
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
LABEL_20:
    id v25 = objc_loadWeak((id *)(*(void *)(a1 + 32) + 32));
    return objc_msgSend_vo2MaxRetrocomputeManager_updateFailedWithError_(v25, v26, *(void *)(a1 + 32), v14);
  }
  return result;
}

void sub_1902BAA94(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

unsigned char *sub_1902BAAB8(unsigned char *a1, uint64_t a2, unsigned char *a3, char a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[1] = *a3;
  a1[2] = a4;
  if (qword_1EB3BE898 != -1) {
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD4320);
  }
  id v6 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v10 = a2;
    _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_INFO, "motion default ignored,'%{public}s'.", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD4320);
    }
    unint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "CLMotionDefaultsWrite<BOOL>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = BOOL]", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return a1;
}

uint64_t sub_1902BACB4()
{
  if (qword_1EB3BE9C0 != -1) {
    dispatch_once(&qword_1EB3BE9C0, &unk_1EDFD41E0);
  }
  return byte_1EB3BE951;
}

uint64_t sub_1902BAD40()
{
  if (qword_1EB3BE968 != -1) {
    dispatch_once(&qword_1EB3BE968, &unk_1EDFD1660);
  }
  return qword_1EB3BE960;
}

unint64_t sub_1902BAD84()
{
  if ((sub_1902CD6B0() & 0x20) != 0) {
    return 1;
  }
  else {
    return ((unint64_t)sub_1902CD6B0() >> 4) & 1;
  }
}

uint64_t sub_1902BADB0(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = sub_1902BB1DC();
  if ((v2 & 4) != 0)
  {
    if (!*(void *)(a1 + 40))
    {
      int v3 = (void *)sub_1902DF4A8();
      uint64_t v24 = 0x30000FF00;
      char v25 = 0;
      sub_19043791C(v3, (uint64_t)&v24, (uint64_t *)buf);
      long long v6 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      uint64_t v7 = *(std::__shared_weak_count **)(a1 + 48);
      *(_OWORD *)(a1 + 40) = v6;
      if (v7)
      {
        sub_1902D8B58(v7);
        if (*(void *)&buf[8]) {
          sub_1902D8B58(*(std::__shared_weak_count **)&buf[8]);
        }
      }
      unint64_t v8 = objc_msgSend_mutableCopy(&unk_1EE0019F8, v4, v5);
      unsigned int v23 = 0;
      uint64_t v9 = sub_1902D6BD0();
      uint64_t v10 = *(void *)(v9 + 24);
      uint64_t v11 = *(std::__shared_weak_count **)(v9 + 32);
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v12 = sub_19045E8CC(v10, "IMULocationID", &v23);
      uint64_t v14 = v23;
      if (v23) {
        int v15 = 1;
      }
      else {
        int v15 = v12;
      }
      if (v11) {
        sub_1902D8B58(v11);
      }
      if (v15)
      {
        uint64_t v16 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v13, v14);
        objc_msgSend_setObject_forKey_(v8, v17, v16, @"LocationID");
        if (qword_1EB3BE848 != -1) {
          dispatch_once(&qword_1EB3BE848, &unk_1EDFD3220);
        }
        uint64_t v18 = qword_1EB3BE840;
        if (os_log_type_enabled((os_log_t)qword_1EB3BE840, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v14;
          _os_log_impl(&dword_1902AF000, v18, OS_LOG_TYPE_DEFAULT, "Setting Accel matching properties with IMULocationID %d", buf, 8u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE848 != -1) {
            dispatch_once(&qword_1EB3BE848, &unk_1EDFD3220);
          }
          int v26 = 67109120;
          int v27 = v14;
          int v22 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAccelerometer::openHidDevice()", "CoreLocation: %s\n", v22);
          if (v22 != (char *)buf) {
            free(v22);
          }
        }
      }
      sub_1905D661C(*(void **)(a1 + 40), v8);
      sub_1902CD864(*(void *)(a1 + 40), (uint64_t)sub_1902D7F78, a1);
    }
  }
  else
  {
    if (qword_1EB3BE848 != -1) {
      dispatch_once(&qword_1EB3BE848, &unk_1EDFD3220);
    }
    float v19 = qword_1EB3BE840;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE840, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v19, OS_LOG_TYPE_FAULT, "Accel unavailable, unable to establish hid interface", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE848 != -1) {
        dispatch_once(&qword_1EB3BE848, &unk_1EDFD3220);
      }
      LOWORD(v26) = 0;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "BOOL CLAccelerometer::openHidDevice()", "CoreLocation: %s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
  return (v2 >> 2) & 1;
}

void sub_1902BB1A8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1902BB1DC()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE970 != -1) {
    dispatch_once(&qword_1EB3BE970, &unk_1EDFC1FE0);
  }
  uint64_t result = 0;
  int v1 = dword_1EB3BE95C;
  switch(dword_1EB3BE95C)
  {
    case 0:
    case 261:
      if (qword_1E929DA68 != -1) {
        dispatch_once(&qword_1E929DA68, &unk_1EDFD42C0);
      }
      uint64_t v7 = qword_1E929DA70;
      if (os_log_type_enabled((os_log_t)qword_1E929DA70, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        int v10 = v1;
        _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_ERROR, "Unsupported HW type %d; file a radar to CoreMotion Factory | 1.0",
          buf,
          8u);
      }
      int v8 = sub_1902D8400(115, 0);
      uint64_t result = 0;
      if (v8)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929DA68 != -1) {
          goto LABEL_36;
        }
        goto LABEL_15;
      }
      break;
    case 2:
    case 3:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
    case 37:
    case 38:
    case 40:
    case 41:
    case 43:
    case 52:
    case 81:
    case 83:
    case 85:
    case 87:
      if (qword_1E929DA68 != -1) {
        dispatch_once(&qword_1E929DA68, &unk_1EDFD42C0);
      }
      uint64_t v4 = qword_1E929DA70;
      if (os_log_type_enabled((os_log_t)qword_1E929DA70, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109120;
        int v10 = v1;
        _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_FAULT, "Old hardware,%d is not supported", buf, 8u);
      }
      int v5 = sub_1902D8400(115, 0);
      uint64_t result = 0;
      if (v5)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929DA68 != -1) {
LABEL_36:
        }
          dispatch_once(&qword_1E929DA68, &unk_1EDFD42C0);
LABEL_15:
        long long v6 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "static CLPlatformInfo::MotionProviders CLPlatformInfo::motionProviders()", "CoreLocation: %s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        uint64_t result = 0;
      }
      break;
    case 6:
    case 60:
    case 61:
    case 196:
      uint64_t result = 4;
      break;
    case 24:
    case 25:
    case 27:
    case 28:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 78:
    case 79:
    case 80:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 168:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 176:
    case 177:
    case 219:
      uint64_t result = 31;
      break;
    case 26:
      uint64_t result = 15;
      break;
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 62:
    case 63:
    case 64:
    case 65:
    case 76:
    case 77:
    case 134:
    case 135:
    case 136:
    case 137:
    case 144:
    case 145:
    case 146:
    case 147:
    case 154:
    case 155:
    case 156:
    case 157:
    case 161:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
      uint64_t result = 23;
      break;
    case 39:
    case 42:
    case 148:
    case 149:
    case 191:
    case 192:
    case 193:
    case 194:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
      uint64_t result = 6;
      break;
    case 50:
    case 51:
    case 66:
    case 67:
    case 74:
    case 75:
    case 82:
    case 84:
    case 86:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 150:
    case 151:
    case 152:
    case 153:
      if (qword_1EB3BE9F0 != -1) {
        dispatch_once(&qword_1EB3BE9F0, &unk_1EDFD42A0);
      }
      BOOL v2 = byte_1EB3BE957 == 0;
      unsigned int v3 = 22;
      goto LABEL_21;
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 260:
      if (qword_1EB3BE9F0 != -1) {
        dispatch_once(&qword_1EB3BE9F0, &unk_1EDFD42A0);
      }
      BOOL v2 = byte_1EB3BE957 == 0;
      unsigned int v3 = 54;
LABEL_21:
      if (v2) {
        uint64_t result = v3;
      }
      else {
        uint64_t result = v3 + 1;
      }
      break;
    case 169:
    case 175:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
      uint64_t result = 63;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1902BB744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_1902D8B58(a11);
  }
  if (a13) {
    sub_1902D8B58(a13);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1902BB770@<X0>(char *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  long long v6 = operator new(0x70uLL);
  uint64_t result = sub_1905200E8(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1902BB7C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1902BBBF0(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = *(NSObject **)(v2 + 24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_19052008C;
  block[3] = &unk_1E568E898;
  char v13 = *(unsigned char *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 48);
  block[4] = v2;
  void block[5] = v4;
  dispatch_async(v3, block);
  int v5 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  dispatch_time_t v6 = dispatch_time(0, 5000000000);
  intptr_t v7 = dispatch_semaphore_wait(v5, v6);
  if (v7)
  {
    intptr_t v8 = v7;
    if (qword_1E929D7A0 != -1) {
      dispatch_once(&qword_1E929D7A0, &unk_1EDFD3EA0);
    }
    uint64_t v9 = qword_1E929D7A8;
    if (os_log_type_enabled((os_log_t)qword_1E929D7A8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      intptr_t v17 = v8;
      _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_FAULT, "Timeout occurred after 5 seconds during overrideOscarSideband:withState:.  Wait uint64_t result = %{public}ld", buf, 0xCu);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D7A0 != -1) {
        dispatch_once(&qword_1E929D7A0, &unk_1EDFD3EA0);
      }
      int v14 = 134349056;
      intptr_t v15 = v8;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMActivityManager overrideOscarSideband:withState:]_block_invoke", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    uint64_t v10 = 3;
  }
  else
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 64);
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v10;
}

void sub_1902BBE4C(void *a1, int *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE878 != -1) {
    dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
  }
  uint64_t v4 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *a2;
    *(_DWORD *)buf = 67240192;
    int v13 = v5;
    _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_DEFAULT, "Stopping device motion, mode=%{public}#x", buf, 8u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
    }
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLDeviceMotion::disableSensorFusionWithMode(const CLMotionTypeDeviceMotionMode &)", "CoreLocation: %s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  if (sub_1902DDBB0(a2))
  {
    int v6 = *a2;
    if (*a2 <= 18)
    {
      if (v6 <= 6)
      {
        if (v6 != 2)
        {
          if (v6 != 3) {
            goto LABEL_19;
          }
          goto LABEL_33;
        }
        sub_1902BAD40();
        if ((sub_1902CD6B0() & 0x80) != 0)
        {
          uint64_t v7 = a1[7];
          if (!v7) {
            return;
          }
        }
        else
        {
          uint64_t v7 = a1[5];
          if (!v7) {
            return;
          }
        }
LABEL_31:
        sub_1902DE314(v7);
        return;
      }
      if (v6 != 7 && v6 != 15) {
        goto LABEL_19;
      }
LABEL_30:
      uint64_t v7 = a1[9];
      if (!v7) {
        return;
      }
      goto LABEL_31;
    }
    if (v6 > 66)
    {
      if (v6 == 67)
      {
LABEL_33:
        uint64_t v7 = a1[8];
        if (!v7) {
          return;
        }
        goto LABEL_31;
      }
      if (v6 == 143) {
        goto LABEL_30;
      }
    }
    else
    {
      if (v6 == 19)
      {
        uint64_t v7 = a1[4];
        if (!v7) {
          return;
        }
        goto LABEL_31;
      }
      if (v6 == 34)
      {
        uint64_t v7 = a1[6];
        if (!v7) {
          return;
        }
        goto LABEL_31;
      }
    }
LABEL_19:
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
    }
    intptr_t v8 = off_1EB3BE870;
    if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_FAULT))
    {
      int v9 = *a2;
      *(_DWORD *)buf = 67240192;
      int v13 = v9;
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_FAULT, "Device motion mode (%{public}d) not supported, unable to disable sensor fusion", buf, 8u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE878 != -1) {
        dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "void CLDeviceMotion::disableSensorFusionWithMode(const CLMotionTypeDeviceMotionMode &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

double sub_1902BC214(uint64_t a1, int a2, double *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB3BE848 != -1) {
      dispatch_once(&qword_1EB3BE848, &unk_1EDFD3220);
    }
    uint64_t v4 = qword_1EB3BE840;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE840, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v14) = a2;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_FAULT, "Unrecognized notification %{public}d", buf, 8u);
    }
    double v5 = 0.0;
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE848 != -1) {
        dispatch_once(&qword_1EB3BE848, &unk_1EDFD3220);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccelerometer::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    double v5 = 0.0;
    if (sub_1902BADB0(a1))
    {
      if (qword_1EB3BE848 != -1) {
        dispatch_once(&qword_1EB3BE848, &unk_1EDFD3220);
      }
      int v9 = qword_1EB3BE840;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE840, OS_LOG_TYPE_INFO))
      {
        double v10 = *a3;
        *(_DWORD *)buf = 134349056;
        double v14 = v10;
        _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_INFO, "Setting batch interval to %{public}f", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE848 != -1) {
          dispatch_once(&qword_1EB3BE848, &unk_1EDFD3220);
        }
        int v12 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccelerometer::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
      sub_1902CDBA4(*(void *)(a1 + 40), *a3);
      return *a3;
    }
  }
  return v5;
}

uint64_t sub_1902BC548(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCA950;

  return a1;
}

double sub_1902BC594(uint64_t a1, int a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB3BE848 != -1) {
      dispatch_once(&qword_1EB3BE848, &unk_1EDFD3220);
    }
    unsigned int v3 = qword_1EB3BE840;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE840, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_FAULT, "Unrecognized notification", buf, 2u);
    }
    double v4 = 0.0;
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE848 != -1) {
        dispatch_once(&qword_1EB3BE848, &unk_1EDFD3220);
      }
      double v5 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccelerometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  else
  {
    double v4 = 0.0;
    if (sub_1902BADB0(a1))
    {
      if (qword_1EB3BE848 != -1) {
        dispatch_once(&qword_1EB3BE848, &unk_1EDFD3220);
      }
      intptr_t v8 = qword_1EB3BE840;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE840, OS_LOG_TYPE_INFO))
      {
        double v9 = *(double *)a3;
        *(_DWORD *)buf = 134349056;
        double v15 = v9;
        _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_INFO, "Setting accelerometer update interval to %{public}f", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE848 != -1) {
          dispatch_once(&qword_1EB3BE848, &unk_1EDFD3220);
        }
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccelerometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      double v10 = rint(*(double *)a3 * 1000000.0);
      if (*(double *)a3 < 0.0) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = (uint64_t)v10;
      }
      sub_1902CDC50(*(void *)(a1 + 40), v11);
      return *(double *)a3;
    }
  }
  return v4;
}

void sub_1902BC8C8(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  if (qword_1E929D798 != -1) {
    dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
  }
  int v1 = qword_1E929D790;
  if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1902AF000, v1, OS_LOG_TYPE_DEBUG, "exits coasting", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::exitCoasting()", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
}

void sub_1902BCACC(void *a1, char *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current != *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    uint64_t v21 = off_1EB3BE890;
    p_cache = (void **)&qword_190607000;
    a2 = "assert";
    unsigned int v3 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v44 = 2082;
      *(void *)__int16 v45 = "";
      *(_WORD *)&v45[8] = 2082;
      *(void *)&v45[10] = "assert";
      *(_WORD *)&v45[18] = 2081;
      *(void *)&v45[20] = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v21, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] Should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    int v22 = off_1EB3BE890;
    if (os_signpost_enabled((os_log_t)off_1EB3BE890))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v44 = 2082;
      *(void *)__int16 v45 = "";
      *(_WORD *)&v45[8] = 2082;
      *(void *)&v45[10] = "assert";
      *(_WORD *)&v45[18] = 2081;
      *(void *)&v45[20] = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v22, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] Should be running on motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] Should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    a1 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v44 = 2082;
      *(void *)__int16 v45 = "";
      *(_WORD *)&v45[8] = 2082;
      *(void *)&v45[10] = "assert";
      *(_WORD *)&v45[18] = 2081;
      *(void *)&v45[20] = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, (os_log_t)a1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] Should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_43:
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
LABEL_19:
    double v15 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = *((_DWORD *)a1 + 4);
      int v16 = *((_DWORD *)a1 + 5);
      uint64_t v18 = *((void *)a1 + 19);
      *(_DWORD *)buf = 67240963;
      *(_DWORD *)&uint8_t buf[4] = v16;
      __int16 v44 = 1026;
      *(_DWORD *)__int16 v45 = v17;
      *(_WORD *)&v45[4] = 2049;
      *(void *)&v45[6] = a2;
      *(_WORD *)&v45[14] = 2113;
      *(void *)&v45[16] = v18;
      _os_log_impl(&dword_1902AF000, v15, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Service ref with usage pair {%{public}d, %{public}d} is %{private}p with matching properties %{private}@", buf, 0x22u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (p_cache[275] != (void *)-1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
      int v24 = *((_DWORD *)a1 + 4);
      int v23 = *((_DWORD *)a1 + 5);
      char v25 = (char *)*((void *)a1 + 19);
      int v33 = 67240963;
      int v34 = v23;
      __int16 v35 = 1026;
      int v36 = v24;
      __int16 v37 = 2049;
      double v38 = a2;
      __int16 v39 = 2113;
      double v40 = v25;
      int v26 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::Device::updateServiceRef(IOHIDServiceClientRef, BOOL)", "CoreLocation: %s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
    *((void *)a1 + 3) = CFRetain(a2);
    if (!v3) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  uint64_t v7 = (char *)*((void *)a1 + 3);
  if (v7 == a2) {
    return;
  }
  if (!v7)
  {
    p_cache = CMDeviceOrientationManager.cache;
    if (qword_1EB3BE898 == -1) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }
  if (!v3) {
    return;
  }
  if (*((unsigned char *)a1 + 40)
    && (sub_1902D79BC(*((__IOHIDServiceClient **)a1 + 3), @"ReportInterval", &unk_1EE001E28) & 1) == 0)
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    intptr_t v8 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_ERROR, "[CLIoHidInterface] Failed to stop streaming from the old service before switching to the new one", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
      LOWORD(v33) = 0;
      uint64_t v31 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "void CLIoHidInterface::Device::updateServiceRef(IOHIDServiceClientRef, BOOL)", "CoreLocation: %s\n", v31);
      if (v31 != (char *)buf) {
        free(v31);
      }
    }
  }
  if (qword_1EB3BE898 != -1) {
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
  }
  double v9 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *((_DWORD *)a1 + 4);
    int v10 = *((_DWORD *)a1 + 5);
    uint64_t v12 = *((void *)a1 + 19);
    *(_DWORD *)buf = 67241219;
    *(_DWORD *)&uint8_t buf[4] = v10;
    __int16 v44 = 1026;
    *(_DWORD *)__int16 v45 = v11;
    *(_WORD *)&v45[4] = 2049;
    *(void *)&v45[6] = v7;
    *(_WORD *)&v45[14] = 2049;
    *(void *)&v45[16] = a2;
    *(_WORD *)&v45[24] = 2113;
    *(void *)&v45[26] = v12;
    _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Device,usagePage,%{public}d,usage,%{public}d,hidserviceref,old,%{private}p,new,%{private}p,matchingProperties,%{private}@", buf, 0x2Cu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    int v28 = *((_DWORD *)a1 + 4);
    int v27 = *((_DWORD *)a1 + 5);
    uint64_t v29 = *((void *)a1 + 19);
    int v33 = 67241219;
    int v34 = v27;
    __int16 v35 = 1026;
    int v36 = v28;
    __int16 v37 = 2049;
    double v38 = v7;
    __int16 v39 = 2049;
    double v40 = a2;
    __int16 v41 = 2113;
    uint64_t v42 = v29;
    float v30 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::Device::updateServiceRef(IOHIDServiceClientRef, BOOL)", "CoreLocation: %s\n", v30);
    if (v30 != (char *)buf) {
      free(v30);
    }
  }
  sub_1902CC21C((uint64_t)a1, v13);
  *((void *)a1 + 3) = CFRetain(a2);
LABEL_23:
  sub_1902D6C14(*((void *)a1 + 4));
LABEL_24:
  if (*((void *)a1 + 14))
  {
    *(void *)buf = 0;
    CFNumberRef RegistryID = (const __CFNumber *)IOHIDServiceClientGetRegistryID((IOHIDServiceClientRef)a2);
    CFNumberGetValue(RegistryID, kCFNumberSInt64Type, buf);
    if (*(void *)buf != *((void *)a1 + 1)) {
      (*((void (**)(void))a1 + 14))(*((void *)a1 + 15));
    }
  }
  if (*((void *)a1 + 8) && ((v3 & 1) != 0 || *((unsigned char *)a1 + 40)))
  {
    uint64_t v20 = sub_1902D6BD0();
    v32[0] = MEMORY[0x1E4F143A8];
    v32[1] = 3221225472;
    v32[2] = sub_1905D6E44;
    v32[3] = &unk_1E568CF68;
    v32[4] = a1;
    sub_1902CE9BC(v20, (uint64_t)v32);
  }
}

uint64_t sub_1902BD2DC(uint64_t a1)
{
  int v1 = (void *)a1;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(const char **)(a1 + 32);
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40));
  if (v3)
  {
    uint64_t v4 = (char *)v3;
    if (qword_1EB3BE878 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
    }
    float v19 = off_1EB3BE870;
    uint64_t v4 = "assert";
    uint64_t v2 = "properties != nullptr";
    if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)uint64_t v31 = 0;
      *(_WORD *)&v31[4] = 2082;
      *(void *)&v31[6] = "";
      __int16 v32 = 2082;
      int v33 = "assert";
      __int16 v34 = 2081;
      __int16 v35 = "properties != nullptr";
      _os_log_impl(&dword_1902AF000, v19, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE878 != -1) {
        dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
      }
    }
    uint64_t v20 = off_1EB3BE870;
    if (os_signpost_enabled((os_log_t)off_1EB3BE870))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)uint64_t v31 = 0;
      *(_WORD *)&v31[4] = 2082;
      *(void *)&v31[6] = "";
      __int16 v32 = 2082;
      int v33 = "assert";
      __int16 v34 = 2081;
      __int16 v35 = "properties != nullptr";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE878 != -1) {
        dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
      }
    }
    int v1 = off_1EB3BE870;
    if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)uint64_t v31 = 0;
      *(_WORD *)&v31[4] = 2082;
      *(void *)&v31[6] = "";
      __int16 v32 = 2082;
      int v33 = "assert";
      __int16 v34 = 2081;
      __int16 v35 = "properties != nullptr";
      _os_log_impl(&dword_1902AF000, (os_log_t)v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    uint64_t v28 = 192;
    uint64_t v29 = "addDeviceMotionDispatcher_block_invoke";
    int v27 = "/Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Shared/Motion/Notifiers/CLDeviceMotion.mm";
    abort_report_np();
  }
  dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
LABEL_3:
  double v5 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_INFO))
  {
    intptr_t v8 = objc_msgSend_description(v4, v6, v7);
    uint64_t v11 = objc_msgSend_UTF8String(v8, v9, v10);
    *(_DWORD *)buf = 136446210;
    *(void *)uint64_t v31 = v11;
    _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_INFO, "CLDeviceMotion::addDeviceMotionDispatcher adding dispatcher with property: %{public}s", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
    }
    int v23 = objc_msgSend_description(v4, v21, v22, v27, v28, v29);
    objc_msgSend_UTF8String(v23, v24, v25);
    LODWORD(v28) = 12;
    int v26 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLDeviceMotion::addDeviceMotionDispatcher(CLDeviceMotion::Dispatcher *, CFTimeInterval)_block_invoke", "CoreLocation: %s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  *(_DWORD *)buf = objc_msgSend_mode(v4, v12, v13, v27, v28);
  uint64_t result = sub_1902DDBB0((int *)buf);
  if (result)
  {
    int v17 = objc_msgSend_mode(v4, v15, v16);
    int v18 = sub_1902E00AC(v17);
    return sub_1902B1FEC((uint64_t)v2, v18, *((void *)v1 + 5), *((double *)v1 + 6));
  }
  return result;
}

void sub_1902BD700(uint64_t a1)
{
  int v1 = (void *)a1;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(const char **)(a1 + 32);
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40));
  if (v3)
  {
    uint64_t v4 = (char *)v3;
    if (qword_1EB3BE878 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
    }
    int v18 = off_1EB3BE870;
    uint64_t v4 = "assert";
    uint64_t v2 = "properties != nullptr";
    if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)float v30 = 0;
      *(_WORD *)&v30[4] = 2082;
      *(void *)&v30[6] = "";
      __int16 v31 = 2082;
      __int16 v32 = "assert";
      __int16 v33 = 2081;
      __int16 v34 = "properties != nullptr";
      _os_log_impl(&dword_1902AF000, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE878 != -1) {
        dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
      }
    }
    float v19 = off_1EB3BE870;
    if (os_signpost_enabled((os_log_t)off_1EB3BE870))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)float v30 = 0;
      *(_WORD *)&v30[4] = 2082;
      *(void *)&v30[6] = "";
      __int16 v31 = 2082;
      __int16 v32 = "assert";
      __int16 v33 = 2081;
      __int16 v34 = "properties != nullptr";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE878 != -1) {
        dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
      }
    }
    int v1 = off_1EB3BE870;
    if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)float v30 = 0;
      *(_WORD *)&v30[4] = 2082;
      *(void *)&v30[6] = "";
      __int16 v31 = 2082;
      __int16 v32 = "assert";
      __int16 v33 = 2081;
      __int16 v34 = "properties != nullptr";
      _os_log_impl(&dword_1902AF000, (os_log_t)v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    uint64_t v27 = 204;
    uint64_t v28 = "removeDeviceMotionDispatcher_block_invoke";
    int v26 = "/Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Shared/Motion/Notifiers/CLDeviceMotion.mm";
    abort_report_np();
  }
  dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
LABEL_3:
  double v5 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_INFO))
  {
    intptr_t v8 = objc_msgSend_description(v4, v6, v7);
    uint64_t v11 = objc_msgSend_UTF8String(v8, v9, v10);
    *(_DWORD *)buf = 136446210;
    *(void *)float v30 = v11;
    _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_INFO, "CLDeviceMotion::removeDeviceMotionDispatcher removing dispatcher with property: %{public}s", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
    }
    uint64_t v22 = objc_msgSend_description(v4, v20, v21, v26, v27, v28);
    objc_msgSend_UTF8String(v22, v23, v24);
    LODWORD(v27) = 12;
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLDeviceMotion::removeDeviceMotionDispatcher(CLDeviceMotion::Dispatcher *)_block_invoke", "CoreLocation: %s\n", v25);
    if (v25 != (char *)buf) {
      free(v25);
    }
  }
  *(_DWORD *)buf = objc_msgSend_mode(v4, v12, v13, v26, v27);
  if (sub_1902DDBB0((int *)buf))
  {
    int v16 = objc_msgSend_mode(v4, v14, v15);
    int v17 = sub_1902E00AC(v16);
    sub_1902CDE08((uint64_t)v2, v17, *((void *)v1 + 5));
  }
}

void sub_1902BDB28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    IOHIDEventGetVendorDefinedData();
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD31C0);
    }
    uint64_t v4 = off_1E929D6F8;
    if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_INFO, "Empty payload, returning", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD31C0);
      }
      double v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLEclipseNotifier::onIoHidEvent(IOHIDEventRef)", "CoreLocation: %s\n");
LABEL_19:
      if (v5 != buf) {
        free(v5);
      }
    }
  }
  else
  {
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD31C0);
    }
    int v6 = off_1E929D6F8;
    if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_FAULT, "Event ref invalid", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD31C0);
      }
      double v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "void CLEclipseNotifier::onIoHidEvent(IOHIDEventRef)", "CoreLocation: %s\n");
      goto LABEL_19;
    }
  }
}

void sub_1902BE1F4(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  double v9 = (NSSet *)objc_msgSend_setWithObjects_(v4, v8, v5, v6, v7, 0);
  if (*a2 && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v9)) != 0)
  {
    if (!*(void *)(*(void *)(a1 + 32) + 16)) {
      return;
    }
    uint64_t v12 = DictionaryOfClasses;
    uint64_t v13 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v11, @"CMErrorMessage");
    uint64_t v15 = objc_msgSend_objectForKeyedSubscript_(v12, v14, @"CMActivityData");
    if (v13)
    {
      if (qword_1E929D7A0 != -1) {
        dispatch_once(&qword_1E929D7A0, &unk_1EDFD3EA0);
      }
      int v16 = qword_1E929D7A8;
      if (os_log_type_enabled((os_log_t)qword_1E929D7A8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67240192;
        int v29 = objc_msgSend_intValue(v13, v17, v18);
        _os_log_impl(&dword_1902AF000, v16, OS_LOG_TYPE_FAULT, "Error occurred while trying to retrieve activity update: CMErrorDomain Code:%{public}d", buf, 8u);
      }
      if (!sub_1902D8400(115, 0)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929D7A0 != -1) {
        dispatch_once(&qword_1E929D7A0, &unk_1EDFD3EA0);
      }
      int v26 = 67240192;
      int v27 = objc_msgSend_intValue(v13, v19, v20);
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMActivityManagerInternal connect]_block_invoke", "CoreLocation: %s\n", v21);
      if (v21 == (char *)buf) {
        return;
      }
LABEL_34:
      free(v21);
      return;
    }
    if (v15)
    {
      uint64_t v23 = *(void *)(*(void *)(a1 + 32) + 16);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_19051F284;
      block[3] = &unk_1E568D320;
      block[4] = v15;
      void block[5] = v23;
      dispatch_async(MEMORY[0x1E4F14428], block);
      return;
    }
    if (qword_1E929D7A0 != -1) {
      dispatch_once(&qword_1E929D7A0, &unk_1EDFD3EA0);
    }
    uint64_t v24 = qword_1E929D7A8;
    if (os_log_type_enabled((os_log_t)qword_1E929D7A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v24, OS_LOG_TYPE_FAULT, "Unable to parse kCLConnectionMessageMotionState message!", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D7A0 != -1) {
        dispatch_once(&qword_1E929D7A0, &unk_1EDFD3EA0);
      }
      LOWORD(v26) = 0;
      goto LABEL_33;
    }
  }
  else
  {
    if (qword_1E929D7A0 != -1) {
      dispatch_once(&qword_1E929D7A0, &unk_1EDFD3EA0);
    }
    uint64_t v22 = qword_1E929D7A8;
    if (os_log_type_enabled((os_log_t)qword_1E929D7A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v22, OS_LOG_TYPE_ERROR, "Could not get dictionary for kCLConnectionMessageMotionState", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D7A0 != -1) {
        dispatch_once(&qword_1E929D7A0, &unk_1EDFD3EA0);
      }
      LOWORD(v26) = 0;
LABEL_33:
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMActivityManagerInternal connect]_block_invoke", "CoreLocation: %s\n", v21);
      if (v21 == (char *)buf) {
        return;
      }
      goto LABEL_34;
    }
  }
}

void sub_1902BE6CC(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x192FCD2F0]();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1902BE718(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();

  return pthread_dependency_fulfill_np();
}

uint64_t sub_1902BE760(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)MEMORY[0x192FCD2F0]();
  uint64_t v3 = (const char **)_CFGetProgname();
  BOOL v4 = strcmp(*v3, "locationd") == 0;
  *(unsigned char *)(qword_1EB3BF828 + 16) = v4;
  pthread_setname_np("com.apple.CoreMotion.MotionThread");
  if (!*(unsigned char *)(qword_1EB3BF828 + 16)) {
    operator new();
  }
  sub_19046FADC(buf);
  long long v5 = *(_OWORD *)&buf[0].version;
  buf[0].version = 0;
  buf[0].info = 0;
  uint64_t v6 = *(std::__shared_weak_count **)(qword_1EB3BF828 + 32);
  *(_OWORD *)(qword_1EB3BF828 + 24) = v5;
  if (v6)
  {
    sub_1902D8B58(v6);
    if (buf[0].info) {
      sub_1902D8B58((std::__shared_weak_count *)buf[0].info);
    }
  }
  int v33 = 0;
  if ((sub_1902B44C0(*(void *)(qword_1EB3BF828 + 24), "MotionThreadPriority", &v33) & 1) == 0) {
    int v33 = -1;
  }
  int v31 = 0;
  uint64_t v7 = pthread_self();
  int v8 = pthread_getschedparam(v7, &v31, &v32);
  if (v8)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3960);
    }
    double v9 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf[0].version) = 67240192;
      HIDWORD(buf[0].version) = v8;
      _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_FAULT, "Could not get scheduling parameters for motion thread, error = %{public}d", (uint8_t *)buf, 8u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3960);
      }
      LODWORD(context.version) = 67240192;
      HIDWORD(context.version) = v8;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "static void *CLMotionCore::runMotionThread(void *)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  else
  {
    int sched_priority = v33;
    if (v33 <= 0)
    {
      int priority_max = sched_get_priority_max(v31);
      int sched_priority = v32.sched_priority;
      if (priority_max > v32.sched_priority) {
        int sched_priority = priority_max;
      }
    }
    v32.int sched_priority = sched_priority;
    uint64_t v13 = pthread_self();
    pthread_setschedparam(v13, v31, &v32);
    double v14 = pthread_self();
    pthread_getschedparam(v14, &v31, &v32);
  }
  *(void *)qword_1EB3BF828 = CFRunLoopGetCurrent();
  sub_1902DFF08(a1);
  pthread_dependency_fulfill_np();
  memset(&context, 0, sizeof(context));
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  int v16 = CFRunLoopSourceCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &context);
  if (!v16)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3960);
    }
    int v17 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf[0].version) = 0;
      _os_log_impl(&dword_1902AF000, v17, OS_LOG_TYPE_FAULT, "could not create runloop source", (uint8_t *)buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3960);
      }
      LOWORD(v34) = 0;
      uint64_t v30 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "static void *CLMotionCore::runMotionThread(void *)", "CoreLocation: %s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
  }
  CFStringRef v18 = (const __CFString *)*MEMORY[0x1E4F1D410];
  CFRunLoopAddSource(*(CFRunLoopRef *)qword_1EB3BF828, v16, (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
  int v19 = _CFRunLoopSetPerCalloutAutoreleasepoolEnabled();
  if (qword_1EB3BE898 != -1) {
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD3A00);
  }
  uint64_t v20 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0].version) = 67174657;
    HIDWORD(buf[0].version) = v19;
    _os_log_impl(&dword_1902AF000, v20, OS_LOG_TYPE_DEBUG, "_CFRunLoopSetPerCalloutAutoreleasepoolEnabled() returned a value of, %{private}d.", (uint8_t *)buf, 8u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3A00);
    }
    int v34 = 67174657;
    int v35 = v19;
    uint64_t v28 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "static void *CLMotionCore::runMotionThread(void *)", "CoreLocation: %s\n", v28);
    if (v28 != (char *)buf) {
      free(v28);
    }
  }
  if (v19)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    CFMutableArrayRef Mutable = 0;
  }
  else
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, 0);
    buf[0].version = 0;
    buf[0].info = Mutable;
    buf[0].retain = (const void *(__cdecl *)(const void *))MEMORY[0x1E4F1C280];
    buf[0].release = (void (__cdecl *)(const void *))MEMORY[0x1E4F1C278];
    buf[0].copyDescription = (CFStringRef (__cdecl *)(const void *))MEMORY[0x1E4F1C220];
    uint64_t v22 = CFRunLoopObserverCreate(0, 1uLL, 1u, -2147483647, (CFRunLoopObserverCallBack)sub_1904DFD78, buf);
    uint64_t v21 = CFRunLoopObserverCreate(0, 0xA0uLL, 1u, 0x7FFFFFFFLL, (CFRunLoopObserverCallBack)sub_1904DFD78, buf);
    CFRunLoopAddObserver(*(CFRunLoopRef *)qword_1EB3BF828, v22, v18);
    CFRunLoopAddObserver(*(CFRunLoopRef *)qword_1EB3BF828, v21, v18);
  }
  *(void *)(qword_1EB3BF828 + 40) = 0;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v25 = CFRunLoopTimerCreateWithHandler(v15, Current + 1.0, 5.0, 0, 0, &unk_1EDFD3420);
  CFRunLoopAddTimer(*(CFRunLoopRef *)qword_1EB3BF828, v25, v18);
  CFRunLoopRun();
  if (qword_1EB3BE888 != -1) {
    dispatch_once(&qword_1EB3BE888, &unk_1EDFD3960);
  }
  int v26 = off_1EB3BE880;
  if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
  {
    LOWORD(buf[0].version) = 0;
    _os_log_impl(&dword_1902AF000, v26, OS_LOG_TYPE_FAULT, "Motion thread exiting", (uint8_t *)buf, 2u);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3960);
    }
    LOWORD(context.version) = 0;
    int v29 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "static void *CLMotionCore::runMotionThread(void *)", "CoreLocation: %s\n", v29);
    if (v29 != (char *)buf) {
      free(v29);
    }
  }
  if (v25)
  {
    CFRunLoopRemoveTimer(*(CFRunLoopRef *)qword_1EB3BF828, v25, v18);
    CFRelease(v25);
  }
  if (v21)
  {
    CFRunLoopRemoveObserver(*(CFRunLoopRef *)qword_1EB3BF828, v21, v18);
    CFRelease(v21);
  }
  if (v22)
  {
    CFRunLoopRemoveObserver(*(CFRunLoopRef *)qword_1EB3BF828, v22, v18);
    CFRelease(v22);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v16)
  {
    CFRunLoopRemoveSource(*(CFRunLoopRef *)qword_1EB3BF828, v16, v18);
    CFRelease(v16);
  }
  return 0;
}

void sub_1902BF048(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x10F3C40E271C694);
  _Unwind_Resume(a1);
}

void sub_1902BF7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,std::__shared_weak_count *a60)
{
  if (a18) {
    sub_1902D8B58(a18);
  }
  if (a60) {
    sub_1902D8B58(a60);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1902BF7D4(void *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE878 != -1) {
    dispatch_once(&qword_1EB3BE878, &unk_1EDFD2CE0);
  }
  uint64_t v2 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_INFO))
  {
    sub_1902D6BD0();
    uint64_t v3 = *(void *)_CFGetProgname();
    *(_DWORD *)buf = 136446210;
    uint64_t v9 = v3;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_INFO, "%{public}s is disabling power conservation for parallax.", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD2CE0);
    }
    sub_1902D6BD0();
    _CFGetProgname();
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "virtual void CLSensorFusionService3AxisDynamicGyro::stop()", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_1902DE10C((uint64_t)(a1 + 25));
  sub_1902DE0A4(a1 + 25);
  if (a1[36])
  {
    uint64_t v4 = sub_1902B4534();
    sub_1902CDE08(v4, 0, a1[36]);
    uint64_t v5 = a1[36];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    a1[36] = 0;
  }
  sub_1902DE03C(a1 + 25);
  uint64_t result = a1[35];
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    a1[35] = 0;
  }
  return result;
}

BOOL sub_1902BFA30(uint64_t a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  BOOL v4 = sub_1902BFD08(a1);
  if (v4)
  {
    double v6 = *(double *)(a1 + 64);
    double v5 = *(double *)(a1 + 72);
    if (v6 == 0.0 || (v5 != 0.0 ? (BOOL v7 = v5 < v6) : (BOOL v7 = 0), v7)) {
      double v6 = *(double *)(a1 + 72);
    }
    int v8 = (void *)MEMORY[0x192FCD2F0]();
    (*(void (**)(void, __CFString *, void *))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), @"GyroProperties", &unk_1EE001A48);
    double v9 = 0.0;
    if (v6 != 1.79769313e308) {
      double v9 = v6;
    }
    double v10 = rint(v9 * 1000000.0);
    if (v9 < 0.0) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = (uint64_t)v10;
    }
    sub_1902CDC50(*(void *)(a1 + 80), v11);
    if ((a2 & 0x80000000) == 0)
    {
      uint64_t v13 = *(void *)(a1 + 80);
      uint64_t v14 = objc_msgSend_numberWithInt_(NSNumber, v12, a2 != 0);
      (*(void (**)(uint64_t, __CFString *, uint64_t))(*(void *)v13 + 16))(v13, @"GyroExtLevelTriggerSync", v14);
      *(_DWORD *)(a1 + 32) = a2;
    }
    if (sub_1902BFD08(a1))
    {
      uint64_t v15 = sub_1902CDBA4(*(void *)(a1 + 80), 0.015);
      if (qword_1EB3BE868 != -1) {
        dispatch_once(&qword_1EB3BE868, &unk_1EDFD3EE0);
      }
      int v16 = qword_1EB3BE860;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE860, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134349056;
        uint64_t v20 = v15;
        _os_log_impl(&dword_1902AF000, v16, OS_LOG_TYPE_INFO, "Setting gyro batch interval to: %{public}ld us", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE868 != -1) {
          dispatch_once(&qword_1EB3BE868, &unk_1EDFD3EE0);
        }
        CFStringRef v18 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "BOOL CLGyro::setGyroBatchInterval(const CFTimeInterval &)", "CoreLocation: %s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
    }
  }
  return v4;
}

BOOL sub_1902BFD08(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 80) && (sub_1902BB1DC() & 2) != 0)
  {
    uint64_t v2 = (void *)sub_1902DF4A8();
    uint64_t v21 = 0x90000FF00;
    char v22 = 0;
    sub_19043791C(v2, (uint64_t)&v21, (uint64_t *)buf);
    long long v5 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    double v6 = *(std::__shared_weak_count **)(a1 + 88);
    *(_OWORD *)(a1 + 80) = v5;
    if (v6)
    {
      sub_1902D8B58(v6);
      if (*(void *)&buf[8]) {
        sub_1902D8B58(*(std::__shared_weak_count **)&buf[8]);
      }
    }
    BOOL v7 = objc_msgSend_mutableCopy(&unk_1EE001A20, v3, v4);
    unsigned int v20 = 0;
    uint64_t v8 = sub_1902D6BD0();
    uint64_t v9 = *(void *)(v8 + 24);
    double v10 = *(std::__shared_weak_count **)(v8 + 32);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v11 = sub_19045E8CC(v9, "IMULocationID", &v20);
    uint64_t v13 = v20;
    if (v20) {
      int v14 = 1;
    }
    else {
      int v14 = v11;
    }
    if (v10) {
      sub_1902D8B58(v10);
    }
    if (v14)
    {
      uint64_t v15 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v12, v13);
      objc_msgSend_setObject_forKey_(v7, v16, v15, @"LocationID");
      if (qword_1EB3BE848 != -1) {
        dispatch_once(&qword_1EB3BE848, &unk_1EDFD3E20);
      }
      int v17 = qword_1EB3BE840;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE840, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v13;
        _os_log_impl(&dword_1902AF000, v17, OS_LOG_TYPE_DEFAULT, "Setting Gyro matching properties with IMULocationID %d", buf, 8u);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE848 != -1) {
          dispatch_once(&qword_1EB3BE848, &unk_1EDFD3E20);
        }
        int v23 = 67109120;
        int v24 = v13;
        int v19 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "BOOL CLGyro::openHidDevice()", "CoreLocation: %s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    sub_1905D661C(*(void **)(a1 + 80), v7);
    sub_1902CD864(*(void *)(a1 + 80), (uint64_t)sub_1904D8144, a1);
  }
  return *(void *)(a1 + 80) != 0;
}

void sub_1902BFFD0(_Unwind_Exception *exception_object)
{
}

void sub_1902C0004(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x1FF) != 0) {
    unint64_t v6 = (v5 >> 9) + 1;
  }
  else {
    unint64_t v6 = v5 >> 9;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 9) {
    unint64_t v8 = v7 >> 9;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      int v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      int v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          int v29 = (char *)sub_1902C0520(v28);
          int v31 = &v29[8 * (v28 >> 2)];
          sched_param v32 = (uint64_t *)a1[1];
          uint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            uint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            int v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)int v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          __int16 v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            uint64_t v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          uint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            uint64_t v3 = (char *)a1[1];
          }
          int v27 = &v3[-8 * (v24 >> 1)];
          uint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)uint64_t v3 = v18;
      uint64_t v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          *(void *)&long long v85 = operator new(0x1000uLL);
          sub_1902C0558(a1, &v85);
          --v6;
          if (!--v9) {
            goto LABEL_73;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          *(void *)&long long v85 = operator new(0x1000uLL);
          sub_19052024C((uint64_t)a1, &v85);
          if (a1[2] - a1[1] == 8) {
            uint64_t v60 = 511;
          }
          else {
            uint64_t v60 = 512;
          }
          uint64_t v61 = v60 + a1[4];
          a1[4] = v61;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_73:
        uint64_t v61 = a1[4];
      }
      a1[4] = v61 - (v8 << 9);
      if (v8)
      {
        v62 = (char *)a1[2];
        do
        {
          v63 = (void *)a1[1];
          uint64_t v66 = *v63;
          v64 = (char *)(v63 + 1);
          uint64_t v65 = v66;
          a1[1] = v64;
          if (v62 == (char *)a1[3])
          {
            uint64_t v67 = (uint64_t)&v64[-*a1];
            if ((unint64_t)v64 <= *a1)
            {
              if (v62 == (char *)*a1) {
                unint64_t v74 = 1;
              }
              else {
                unint64_t v74 = (uint64_t)&v62[-*a1] >> 2;
              }
              v75 = (char *)sub_1902C0520(v74);
              v77 = &v75[8 * (v74 >> 2)];
              v78 = (uint64_t *)a1[1];
              v62 = v77;
              uint64_t v79 = a1[2] - (void)v78;
              if (v79)
              {
                v62 = &v77[v79 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v80 = 8 * (v79 >> 3);
                v81 = &v75[8 * (v74 >> 2)];
                do
                {
                  uint64_t v82 = *v78++;
                  *(void *)v81 = v82;
                  v81 += 8;
                  v80 -= 8;
                }
                while (v80);
              }
              v83 = (char *)*a1;
              *a1 = v75;
              a1[1] = v77;
              a1[2] = v62;
              a1[3] = &v75[8 * v76];
              if (v83)
              {
                operator delete(v83);
                v62 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v68 = v67 >> 3;
              BOOL v22 = v67 >> 3 < -1;
              uint64_t v69 = (v67 >> 3) + 2;
              if (v22) {
                uint64_t v70 = v69;
              }
              else {
                uint64_t v70 = v68 + 1;
              }
              v71 = &v64[-8 * (v70 >> 1)];
              int64_t v72 = v62 - v64;
              if (v62 != v64)
              {
                memmove(&v64[-8 * (v70 >> 1)], v64, v62 - v64);
                v62 = (char *)a1[1];
              }
              v73 = &v62[-8 * (v70 >> 1)];
              v62 = &v71[v72];
              a1[1] = v73;
              a1[2] = &v71[v72];
            }
          }
          *(void *)v62 = v65;
          v62 = (char *)(a1[2] + 8);
          a1[2] = v62;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        uint64_t v13 = (char *)(v9 + v11);
      }
      else {
        uint64_t v13 = (char *)v12;
      }
      unint64_t v14 = v11 - v8;
      v87 = a1 + 3;
      if (v13) {
        uint64_t v13 = (char *)sub_1902C0520((unint64_t)v13);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v38 = v8 << 9;
      *(void *)&long long v85 = v13;
      *((void *)&v85 + 1) = &v13[8 * v14];
      *(void *)&long long v86 = *((void *)&v85 + 1);
      *((void *)&v86 + 1) = &v13[8 * v15];
      do
      {
        v84 = operator new(0x1000uLL);
        sub_1902C0558(&v85, &v84);
        --v9;
      }
      while (v9);
      if (v8)
      {
        __int16 v39 = (void *)a1[1];
        double v40 = (char *)v86;
        do
        {
          if (v40 == *((char **)&v86 + 1))
          {
            __int16 v41 = (char *)*((void *)&v85 + 1);
            uint64_t v42 = (void *)v85;
            if (*((void *)&v85 + 1) <= (unint64_t)v85)
            {
              if (v40 == (char *)v85) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (uint64_t)&v40[-v85] >> 2;
              }
              uint64_t v49 = (char *)sub_1902C0520(v48);
              uint64_t v52 = v40 - v41;
              BOOL v51 = v40 == v41;
              double v40 = &v49[8 * (v48 >> 2)];
              if (!v51)
              {
                double v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *(void *)v41;
                  v41 += 8;
                  *(void *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              *(void *)&long long v85 = v49;
              *((void *)&v85 + 1) = &v49[8 * (v48 >> 2)];
              *(void *)&long long v86 = v40;
              *((void *)&v86 + 1) = &v49[8 * v50];
              if (v42) {
                operator delete(v42);
              }
            }
            else
            {
              uint64_t v43 = (uint64_t)(*((void *)&v85 + 1) - v85) >> 3;
              if (v43 >= -1) {
                uint64_t v44 = v43 + 1;
              }
              else {
                uint64_t v44 = v43 + 2;
              }
              uint64_t v45 = *((void *)&v85 + 1) - 8 * (v44 >> 1);
              uint64_t v46 = &v40[-*((void *)&v85 + 1)];
              if (v40 != *((char **)&v85 + 1))
              {
                memmove((void *)(*((void *)&v85 + 1) - 8 * (v44 >> 1)), *((const void **)&v85 + 1), (size_t)&v40[-*((void *)&v85 + 1)]);
                double v40 = v41;
              }
              __int16 v47 = &v40[-8 * (v44 >> 1)];
              double v40 = &v46[v45];
              *((void *)&v85 + 1) = v47;
              *(void *)&long long v86 = &v46[v45];
            }
          }
          *(void *)double v40 = *v39;
          double v40 = (char *)(v86 + 8);
          *(void *)&long long v86 = v86 + 8;
          __int16 v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      for (j = (void *)a1[2]; j != (void *)a1[1]; sub_19052024C((uint64_t)&v85, j))
        --j;
      v57 = (char *)*a1;
      long long v58 = v86;
      *(_OWORD *)a1 = v85;
      *((_OWORD *)a1 + 1) = v58;
      a1[4] -= v38;
      if (v57) {
        operator delete(v57);
      }
    }
  }
}

void sub_1902C04D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1902C0520(unint64_t a1)
{
  if (a1 >> 61) {
    sub_190347AC8();
  }
  return operator new(8 * a1);
}

void sub_1902C0558(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    unint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      int v17 = (char *)sub_1902C0520(v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      uint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void sub_1902C12A4(void *a1, int a2, uint64_t *a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE878 != -1) {
    dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
  }
  uint64_t v6 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *a3;
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 2050;
    *(void *)&buf[10] = v7;
    _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_INFO, "CLDeviceMotion::minimumUpdateIntervalChanged,notification,%{public}d,minimumUpdateInterval,%{public}f", buf, 0x12u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
    }
    int v29 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "virtual CFTimeInterval CLDeviceMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v29);
    if (v29 != buf) {
      free(v29);
    }
  }
  if (qword_1EB3BE878 != -1) {
    dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
  }
  BOOL v8 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_INFO))
  {
    double v9 = sub_1902C1904((uint64_t)a1, 0);
    double v10 = sub_1902C1904((uint64_t)a1, 9);
    double v11 = sub_1902C1904((uint64_t)a1, 1);
    double v12 = sub_1902C1904((uint64_t)a1, 10);
    double v13 = sub_1902C1904((uint64_t)a1, 2);
    double v14 = sub_1902C1904((uint64_t)a1, 3);
    double v15 = sub_1902C1904((uint64_t)a1, 4);
    double v16 = sub_1902C1904((uint64_t)a1, 5);
    *(_DWORD *)buf = 134350848;
    *(double *)&uint8_t buf[4] = v9;
    *(_WORD *)&buf[12] = 2050;
    *(double *)&buf[14] = v10;
    __int16 v32 = 2050;
    double v33 = v11;
    __int16 v34 = 2050;
    double v35 = v12;
    __int16 v36 = 2050;
    double v37 = v13;
    __int16 v38 = 2050;
    double v39 = v14;
    __int16 v40 = 2050;
    double v41 = v15;
    __int16 v42 = 2050;
    double v43 = v16;
    _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_INFO, "minimumUpdateInterval GyroOnly:%{public}f, 3AxisDynamicGyro:%{public}f, 6Axis:%{public}f, 6AxisThrottledGyro:%{public}f, 9Axis:%{public}f, 9AxisWithNorthReference:%{public}f, 9AxisWithTrueNorthReference:%{public}f, BuildGYTT:%{public}f", buf, 0x52u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
    }
    sub_1902C1904((uint64_t)a1, 0);
    sub_1902C1904((uint64_t)a1, 9);
    sub_1902C1904((uint64_t)a1, 1);
    sub_1902C1904((uint64_t)a1, 10);
    sub_1902C1904((uint64_t)a1, 2);
    sub_1902C1904((uint64_t)a1, 3);
    sub_1902C1904((uint64_t)a1, 4);
    sub_1902C1904((uint64_t)a1, 5);
    uint64_t v30 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "virtual CFTimeInterval CLDeviceMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v30);
    if (v30 != buf) {
      free(v30);
    }
  }
  switch(a2)
  {
    case 0:
      uint64_t v27 = a1[7];
      if (v27)
      {
        *(void *)buf = sub_1902C1904((uint64_t)a1, 0);
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v27 + 16))(v27, buf);
      }
      uint64_t v28 = a1[5];
      if (v28) {
        goto LABEL_47;
      }
      break;
    case 1:
    case 10:
      if (a1[8])
      {
        double v23 = sub_1902C1904((uint64_t)a1, 1);
        double v24 = sub_1902C1904((uint64_t)a1, 10);
        if (v23 <= 0.0) {
          double v25 = 1.79769313e308;
        }
        else {
          double v25 = v23;
        }
        if (v24 <= 0.0) {
          double v24 = 1.79769313e308;
        }
        if (v24 >= v25) {
          double v24 = v25;
        }
        if (v24 == 1.79769313e308) {
          double v24 = 0.0;
        }
        *(double *)buf = v24;
        uint64_t v22 = a1[8];
        goto LABEL_39;
      }
      break;
    case 2:
    case 3:
    case 4:
      if (a1[9])
      {
        double v17 = sub_1902C1904((uint64_t)a1, 2);
        double v18 = sub_1902C1904((uint64_t)a1, 3);
        if (v17 <= 0.0) {
          double v19 = 1.79769313e308;
        }
        else {
          double v19 = v17;
        }
        if (v18 <= 0.0) {
          double v18 = 1.79769313e308;
        }
        if (v18 >= v19) {
          double v20 = v19;
        }
        else {
          double v20 = v18;
        }
        double v21 = sub_1902C1904((uint64_t)a1, 4);
        if (v21 <= 0.0) {
          double v21 = 1.79769313e308;
        }
        if (v21 >= v20) {
          double v21 = v20;
        }
        if (v21 == 1.79769313e308) {
          double v21 = 0.0;
        }
        *(double *)buf = v21;
        uint64_t v22 = a1[9];
LABEL_39:
        int64_t v26 = *(void (**)(void))(*(void *)v22 + 16);
        goto LABEL_48;
      }
      break;
    case 5:
      uint64_t v28 = a1[4];
      if (v28) {
        goto LABEL_47;
      }
      break;
    case 9:
      uint64_t v28 = a1[6];
      if (v28)
      {
LABEL_47:
        int64_t v26 = *(void (**)(void))(*(void *)v28 + 16);
LABEL_48:
        v26();
      }
      break;
    default:
      return;
  }
}

double sub_1902C1904(uint64_t a1, int a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 24) > a2) {
    return *(double *)(*(void *)(a1 + 16) + 80 * a2);
  }
  if (qword_1EB3BE898 != -1) {
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD1B80);
  }
  uint64_t v4 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    int v8 = a2;
    _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_FAULT, "Unknown notification %d", buf, 8u);
  }
  double v3 = -1.0;
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD1B80);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "CFTimeInterval CLMotionNotifier::minimumUpdateInterval(int)", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return v3;
}

void sub_1902C1B5C(char *a1, int a2, unint64_t a3, unint64_t a4)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  p_cache = CMDeviceOrientationManager.cache;
  if (qword_1EB3BE878 != -1) {
    dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
  }
  uint64_t v9 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_INFO))
  {
    int buf = 67240704;
    *(_DWORD *)buf_4 = a2;
    *(_WORD *)&buf_4[4] = 2050;
    *(void *)&buf_4[6] = a3;
    *(_WORD *)&buf_4[14] = 2050;
    *(void *)&buf_4[16] = a4;
    _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_INFO, "CLDeviceMotion::numberOfClientsChanged notification:%{public}d, from:%{public}zu, to:%{public}zu", (uint8_t *)&buf, 0x1Cu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
    }
    __int16 v36 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "virtual void CLDeviceMotion::numberOfClientsChanged(int, size_t, size_t)", "CoreLocation: %s\n", v36);
    if (v36 != (char *)&buf) {
      free(v36);
    }
  }
  if (qword_1EB3BE878 != -1) {
    dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
  }
  double v10 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_INFO))
  {
    uint64_t v41 = sub_1902C27E0((uint64_t)a1, 0);
    int v42 = a2;
    uint64_t v11 = sub_1902C27E0((uint64_t)a1, 9);
    uint64_t v12 = sub_1902C27E0((uint64_t)a1, 1);
    uint64_t v13 = sub_1902C27E0((uint64_t)a1, 10);
    uint64_t v14 = sub_1902C27E0((uint64_t)a1, 2);
    unint64_t v15 = a3;
    unint64_t v16 = a4;
    uint64_t v17 = sub_1902C27E0((uint64_t)a1, 3);
    uint64_t v18 = sub_1902C27E0((uint64_t)a1, 4);
    uint64_t v19 = sub_1902C27E0((uint64_t)a1, 5);
    int buf = 134350848;
    *(void *)buf_4 = v41;
    *(_WORD *)&buf_4[8] = 2050;
    *(void *)&buf_4[10] = v11;
    a2 = v42;
    *(_WORD *)&buf_4[18] = 2050;
    *(void *)&buf_4[20] = v12;
    *(_WORD *)&buf_4[28] = 2050;
    *(void *)&buf_4[30] = v13;
    __int16 v45 = 2050;
    uint64_t v46 = v14;
    p_cache = CMDeviceOrientationManager.cache;
    __int16 v47 = 2050;
    uint64_t v48 = v17;
    a4 = v16;
    a3 = v15;
    __int16 v49 = 2050;
    uint64_t v50 = v18;
    __int16 v51 = 2050;
    uint64_t v52 = v19;
    _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_INFO, "numberOfClients GyroOnly:%{public}zd, 3AxisDynamicGyro:%{public}zd, 6Axis:%{public}zd, 6AxisThrottledGyro:%{public}zd, 9Axis:%{public}zd, 9AxisWithNorthReference:%{public}zd, 9AxisWithTrueNorthReference:%{public}zd, BuildGYTT:%{public}zd", (uint8_t *)&buf, 0x52u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
    }
    sub_1902C27E0((uint64_t)a1, 0);
    sub_1902C27E0((uint64_t)a1, 9);
    sub_1902C27E0((uint64_t)a1, 1);
    sub_1902C27E0((uint64_t)a1, 10);
    sub_1902C27E0((uint64_t)a1, 2);
    sub_1902C27E0((uint64_t)a1, 3);
    sub_1902C27E0((uint64_t)a1, 4);
    sub_1902C27E0((uint64_t)a1, 5);
    double v37 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "virtual void CLDeviceMotion::numberOfClientsChanged(int, size_t, size_t)", "CoreLocation: %s\n", v37);
    if (v37 != (char *)&buf) {
      free(v37);
    }
    p_cache = (void **)(CMDeviceOrientationManager + 16);
  }
  int v20 = a2;
  if (a2 == 10) {
    LODWORD(v21) = 1;
  }
  else {
    LODWORD(v21) = a2;
  }
  uint64_t v22 = sub_1902C27E0((uint64_t)a1, 2);
  uint64_t v23 = sub_1902C27E0((uint64_t)a1, 3);
  uint64_t v24 = sub_1902C27E0((uint64_t)a1, 4);
  char v25 = sub_1902CD6B0();
  if (v21 > 9) {
    goto LABEL_34;
  }
  if (((1 << (char)v21) & 0x223) == 0)
  {
    if (((1 << (char)v21) & 0xC) != 0) {
      goto LABEL_53;
    }
    if (v21 == 4)
    {
      if (a3 || a4 != 1)
      {
        if (a3 != 1 || a4 || !*((void *)a1 + 10)) {
          goto LABEL_53;
        }
        uint64_t v40 = 1;
        char v26 = v25;
        if (p_cache[271] != (void *)-1) {
          dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
        }
        int v31 = off_1EB3BE870;
        if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_INFO))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1902AF000, v31, OS_LOG_TYPE_INFO, "Unregistering for geomagnetic model updates", (uint8_t *)&buf, 2u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (p_cache[271] != (void *)-1) {
            dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
          }
          double v39 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "void CLDeviceMotion::unregisterForGeomagneticModelNotification()", "CoreLocation: %s\n", v39);
          if (v39 != (char *)&buf) {
            free(v39);
          }
          a4 = 0;
        }
        objc_msgSend_unregister_forNotification_(*(void **)(*((void *)a1 + 10) + 16), v32, *(void *)(*((void *)a1 + 10) + 8), 0);
        *(_OWORD *)(a1 + 88) = xmmword_190607410;
      }
      else
      {
        if (!*((void *)a1 + 10))
        {
          sub_1904DF754();
          sub_1905419CC();
        }
        uint64_t v40 = 0;
        char v26 = v25;
        if (p_cache[271] != (void *)-1) {
          dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
        }
        uint64_t v27 = off_1EB3BE870;
        if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_INFO))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1902AF000, v27, OS_LOG_TYPE_INFO, "Registering for geomagnetic model updates", (uint8_t *)&buf, 2u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (p_cache[271] != (void *)-1) {
            dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
          }
          __int16 v38 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "void CLDeviceMotion::registerForGeomagneticModelNotification()", "CoreLocation: %s\n", v38);
          if (v38 != (char *)&buf) {
            free(v38);
          }
          a4 = 1;
        }
        objc_msgSend_register_forNotification_registrationInfo_(*(void **)(*((void *)a1 + 10) + 16), v28, *(void *)(*((void *)a1 + 10) + 8), 0, 0);
      }
      a3 = v40;
      char v25 = v26;
LABEL_53:
      uint64_t v33 = v23 + v22 + v24;
      if (a3 < a4)
      {
        if (v33 == 1)
        {
          int buf = sub_1902C29B0(v21);
          sub_1902CCA9C((uint64_t)a1, &buf);
        }
        if (*(void *)(*((void *)a1 + 9) + 56)) {
          return;
        }
        if (p_cache[271] != (void *)-1) {
          dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
        }
        __int16 v34 = off_1EB3BE870;
        double v21 = &qword_190607000;
        if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_FAULT))
        {
          int buf = 68289539;
          *(_DWORD *)buf_4 = 0;
          *(_WORD *)&buf_4[4] = 2082;
          *(void *)&buf_4[6] = "";
          *(_WORD *)&buf_4[14] = 2082;
          *(void *)&buf_4[16] = "assert";
          *(_WORD *)&buf_4[24] = 2081;
          *(void *)&buf_4[26] = "fSensorFusionService9Axis->isRunning()";
          _os_log_impl(&dword_1902AF000, v34, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"9Axis should be running\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x26u);
          if (p_cache[271] != (void *)-1) {
            dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
          }
        }
        double v35 = off_1EB3BE870;
        if (os_signpost_enabled((os_log_t)off_1EB3BE870))
        {
          int buf = 68289539;
          *(_DWORD *)buf_4 = 0;
          *(_WORD *)&buf_4[4] = 2082;
          *(void *)&buf_4[6] = "";
          *(_WORD *)&buf_4[14] = 2082;
          *(void *)&buf_4[16] = "assert";
          *(_WORD *)&buf_4[24] = 2081;
          *(void *)&buf_4[26] = "fSensorFusionService9Axis->isRunning()";
          _os_signpost_emit_with_name_impl(&dword_1902AF000, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "9Axis should be running", "{\"msg%{public}.0s\":\"9Axis should be running\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x26u);
          if (p_cache[271] != (void *)-1) {
            dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
          }
        }
        a1 = (char *)off_1EB3BE870;
        if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_INFO))
        {
          int buf = 68289539;
          *(_DWORD *)buf_4 = 0;
          *(_WORD *)&buf_4[4] = 2082;
          *(void *)&buf_4[6] = "";
          *(_WORD *)&buf_4[14] = 2082;
          *(void *)&buf_4[16] = "assert";
          *(_WORD *)&buf_4[24] = 2081;
          *(void *)&buf_4[26] = "fSensorFusionService9Axis->isRunning()";
          _os_log_impl(&dword_1902AF000, (os_log_t)a1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"9Axis should be running\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x26u);
        }
        char v25 = abort_report_np();
      }
      if (v33 != ((v25 & 0x10) == 0)) {
        return;
      }
LABEL_69:
      int buf = sub_1902C29B0(v21);
      sub_1902BBE4C(a1, &buf);
      return;
    }
LABEL_34:
    if (p_cache[271] != (void *)-1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
    }
    int v29 = off_1EB3BE870;
    if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_FAULT))
    {
      int buf = 67240192;
      *(_DWORD *)buf_4 = v20;
      _os_log_impl(&dword_1902AF000, v29, OS_LOG_TYPE_FAULT, "Device motion mode (%{public}d) not supported, can't process client change", (uint8_t *)&buf, 8u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (p_cache[271] != (void *)-1) {
        dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
      }
      uint64_t v30 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "virtual void CLDeviceMotion::numberOfClientsChanged(int, size_t, size_t)", "CoreLocation: %s\n", v30);
      if (v30 != (char *)&buf) {
        free(v30);
      }
    }
    return;
  }
  if (!a3 && a4 == 1)
  {
    int buf = sub_1902C29B0(v21);
    sub_1902CCA9C((uint64_t)a1, &buf);
    return;
  }
  if (a3 == 1 && !a4) {
    goto LABEL_69;
  }
}

uint64_t sub_1902C27E0(uint64_t a1, int a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 24) > a2) {
    return *(void *)(*(void *)(a1 + 16) + 80 * a2 + 48);
  }
  if (qword_1EB3BE898 != -1) {
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD1B80);
  }
  uint64_t v4 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)int buf = 67109120;
    int v7 = a2;
    _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_FAULT, "Unknown notification %d", buf, 8u);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD1B80);
    }
    unint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "ssize_t CLMotionNotifier::numberOfClients(int)", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return -1;
}

uint64_t sub_1902C29B0(unsigned int a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a1 < 0xB && ((0x63Fu >> a1) & 1) != 0) {
    return dword_19060C4DC[a1];
  }
  if (qword_1EB3BE878 != -1) {
    dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
  }
  uint64_t v2 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)int buf = 67240192;
    unsigned int v7 = a1;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_FAULT, "No viable conversion for notification %{public}#x", buf, 8u);
  }
  int v3 = sub_1902D8400(115, 0);
  uint64_t result = 0;
  if (v3)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
    }
    unint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "static CLMotionTypeDeviceMotionMode CLDeviceMotion::CLDeviceMotionNotificationToCLMotionTypeDeviceMotionMode(const int)", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 0;
  }
  return result;
}

void sub_1902C2CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v17) {
    sub_1902D8B58(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1902C2D10(uint64_t a1, const __CFString *a2, char a3, uint64_t a4)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = sub_1902C34CC((void *)a1);
  *uint64_t v8 = &unk_1EDFC7E20;
  *((unsigned char *)v8 + 16) = 0;
  *(_OWORD *)(v8 + 3) = 0u;
  uint64_t v9 = (void **)(v8 + 3);
  *(_OWORD *)(v8 + 5) = 0u;
  *(_OWORD *)(v8 + 7) = 0u;
  v8[10] = a4;
  v8[11] = -1;
  *((unsigned char *)v8 + 96) = a3;
  sub_1902C34CC(v8 + 13);
  *(void *)(a1 + 104) = &unk_1EDFCA2E0;
  sub_1902C34CC((void *)(a1 + 120));
  *(void *)(a1 + 120) = &unk_1EDFCA2E0;
  *(void *)(a1 + 72) = a2;
  CFRetain(a2);
  CFRetain(*(CFTypeRef *)(a1 + 80));
  sub_1902C36AC(*(const __CFString **)(a1 + 80), (uint64_t)&v57);
  if (v58 >= 0) {
    double v10 = (const char *)&v57;
  }
  else {
    double v10 = (const char *)v57;
  }
  uint64_t v11 = getpwnam(v10);
  if (v11)
  {
    *(void *)(a1 + 88) = *(void *)&v11->pw_uid;
  }
  else
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD1760);
    }
    uint64_t v12 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      uint64_t v13 = &v57;
      if (v58 < 0) {
        uint64_t v13 = (long long *)v57;
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
      _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_FAULT, "could not read user %{public}s uid/gid", (uint8_t *)buf, 0xCu);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD1760);
      }
      uint64_t v44 = &v57;
      if (v58 < 0) {
        uint64_t v44 = (long long *)v57;
      }
      LODWORD(v59.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v44;
      __int16 v45 = (std::string *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "CLPreferences::CLPreferences(CFStringRef, BOOL, CFStringRef)", "CoreLocation: %s\n", (const char *)v45);
      if (v45 != buf) {
        free(v45);
      }
    }
  }
  if (SHIBYTE(v58) < 0)
  {
    sub_190347AFC(__dst, (void *)v57, *((unint64_t *)&v57 + 1));
  }
  else
  {
    *(_OWORD *)__dst = v57;
    uint64_t v55 = v58;
  }
  sub_1902B90E0((uint64_t)__dst, &v56);
  uint64_t v14 = std::string::append(&v56, "/Library/Preferences/");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  sub_1902C36AC(a2, (uint64_t)&v51);
  if ((v53 & 0x80u) == 0) {
    unint64_t v16 = (const std::string::value_type *)&v51;
  }
  else {
    unint64_t v16 = (const std::string::value_type *)v51;
  }
  if ((v53 & 0x80u) == 0) {
    std::string::size_type v17 = v53;
  }
  else {
    std::string::size_type v17 = v52;
  }
  uint64_t v18 = std::string::append(&v59, v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  sub_1902C3F54(&__p, ".plist");
  if ((v50 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v50 & 0x80u) == 0) {
    std::string::size_type v21 = v50;
  }
  else {
    std::string::size_type v21 = v49;
  }
  uint64_t v22 = std::string::append(buf, p_p, v21);
  std::string::size_type v23 = v22->__r_.__value_.__r.__words[0];
  v60[0] = v22->__r_.__value_.__l.__size_;
  *(void *)((char *)v60 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
  char v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v9);
  }
  uint64_t v25 = v60[0];
  *(void *)(a1 + 24) = v23;
  *(void *)(a1 + 32) = v25;
  *(void *)(a1 + 39) = *(void *)((char *)v60 + 7);
  *(unsigned char *)(a1 + 47) = v24;
  if ((char)v50 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  if ((char)v53 < 0) {
    operator delete(v51);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v55) < 0) {
    operator delete(__dst[0]);
  }
  if (SHIBYTE(v58) < 0)
  {
    sub_190347AFC(v46, (void *)v57, *((unint64_t *)&v57 + 1));
  }
  else
  {
    *(_OWORD *)uint64_t v46 = v57;
    uint64_t v47 = v58;
  }
  sub_1902B27AC((uint64_t)v46, &v56);
  char v26 = std::string::append(&v56, "/");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  sub_1902C36AC(a2, (uint64_t)&v51);
  if ((v53 & 0x80u) == 0) {
    uint64_t v28 = (const std::string::value_type *)&v51;
  }
  else {
    uint64_t v28 = (const std::string::value_type *)v51;
  }
  if ((v53 & 0x80u) == 0) {
    std::string::size_type v29 = v53;
  }
  else {
    std::string::size_type v29 = v52;
  }
  uint64_t v30 = std::string::append(&v59, v28, v29);
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  sub_1902C3F54(&__p, ".plist");
  if ((v50 & 0x80u) == 0) {
    __int16 v32 = (const std::string::value_type *)&__p;
  }
  else {
    __int16 v32 = (const std::string::value_type *)__p;
  }
  if ((v50 & 0x80u) == 0) {
    std::string::size_type v33 = v50;
  }
  else {
    std::string::size_type v33 = v49;
  }
  __int16 v34 = std::string::append(buf, v32, v33);
  std::string::size_type v35 = v34->__r_.__value_.__r.__words[0];
  v60[0] = v34->__r_.__value_.__l.__size_;
  *(void *)((char *)v60 + 7) = *(std::string::size_type *)((char *)&v34->__r_.__value_.__r.__words[1] + 7);
  char v36 = HIBYTE(v34->__r_.__value_.__r.__words[2]);
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v37 = v60[0];
  *(void *)(a1 + 48) = v35;
  *(void *)(a1 + 56) = v37;
  *(void *)(a1 + 63) = *(void *)((char *)v60 + 7);
  *(unsigned char *)(a1 + 71) = v36;
  if ((char)v50 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  if ((char)v53 < 0) {
    operator delete(v51);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete(v46[0]);
  }
  __int16 v38 = getpwnam("root");
  BOOL v42 = 0;
  if (v38)
  {
    double v39 = v38;
    uid_t pw_uid = v38->pw_uid;
    if (pw_uid == getuid())
    {
      gid_t pw_gid = v39->pw_gid;
      if (pw_gid == getgid()) {
        BOOL v42 = 1;
      }
    }
  }
  *(unsigned char *)(a1 + 16) = v42;
  sub_1902B41B0(a1);
  if (SHIBYTE(v58) < 0) {
    operator delete((void *)v57);
  }
  return a1;
}

void sub_1902C3334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  sub_19045CCC8(v65);
  sub_19045CCC8(v64);
  if (*(char *)(v63 + 71) < 0) {
    operator delete(*(void **)(v63 + 48));
  }
  if (*(char *)(v63 + 47) < 0) {
    operator delete(*v66);
  }
  sub_19045CCC8((void *)v63);
  _Unwind_Resume(a1);
}

void *sub_1902C34CC(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *a1 = &unk_1EDFC8380;
  a1[1] = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  a1[1] = Mutable;
  if (!Mutable)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD15E0);
    }
    int v3 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_FAULT, "could not create new mutable dictionary", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD15E0);
      }
      unint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "CLNameValuePair::CLNameValuePair()", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return a1;
}

BOOL sub_1902C36AC@<W0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  BOOL result = sub_1902C371C(a1, a2);
  if (!result)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(unsigned char **)a2 = 0;
      *(void *)(a2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 23) = 0;
    }
  }
  return result;
}

void sub_1902C3700(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1902C371C(const __CFString *cf, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!cf) {
    goto LABEL_19;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 == CFStringGetTypeID())
  {
    CStringPtr = CFStringGetCStringPtr(cf, 0x8000100u);
    if (!CStringPtr)
    {
      *(void *)bufferSize = 0;
      v33.length = CFStringGetLength(cf);
      v33.location = 0;
      CFStringGetBytes(cf, v33, 0x8000100u, 0, 0, 0, 0, (CFIndex *)bufferSize);
      ++*(void *)bufferSize;
      operator new[]();
    }
    MEMORY[0x192FCC770](a2, CStringPtr);
    return 1;
  }
  CFTypeID v7 = CFGetTypeID(cf);
  if (v7 != CFDataGetTypeID())
  {
LABEL_19:
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD15E0);
    }
    uint64_t v18 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEFAULT))
    {
      if (cf) {
        CFTypeID v19 = CFGetTypeID(cf);
      }
      else {
        CFTypeID v19 = -1;
      }
      *(_DWORD *)int buf = 134349056;
      *(void *)&uint8_t buf[4] = v19;
      _os_log_impl(&dword_1902AF000, v18, OS_LOG_TYPE_DEFAULT, "#Warning type IDs do not match - %{public}lu", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD15E0);
      }
      if (cf) {
        CFTypeID v23 = CFGetTypeID(cf);
      }
      else {
        CFTypeID v23 = -1;
      }
      *(_DWORD *)bufferSize = 134349056;
      *(void *)&bufferSize[4] = v23;
      char v24 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, std::string &)", "CoreLocation: %s\n", v24);
      if (v24 != buf) {
        free(v24);
      }
    }
    MEMORY[0x192FCC770](a2, "");
    return 0;
  }
  BytePtr = (const char *)CFDataGetBytePtr((CFDataRef)cf);
  int Length = CFDataGetLength((CFDataRef)cf);
  if (!BytePtr)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD15E0);
    }
    std::string::size_type v21 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = Length;
      _os_log_impl(&dword_1902AF000, v21, OS_LOG_TYPE_FAULT, "can't convert %{public}u data bytes", buf, 8u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD15E0);
      }
      *(_DWORD *)bufferSize = 67240192;
      *(_DWORD *)&bufferSize[4] = Length;
      uint64_t v22 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, std::string &)", "CoreLocation: %s\n", v22);
      if (v22 != buf) {
        free(v22);
      }
    }
    return 0;
  }
  double v10 = xmlBufferCreate();
  if (!v10) {
    return 0;
  }
  uint64_t v11 = v10;
  uint64_t v12 = xmlNewTextWriterMemory(v10, 0);
  if (v12)
  {
    uint64_t v13 = v12;
    int v14 = xmlTextWriterWriteBase64(v12, BytePtr, 0, Length);
    BOOL v6 = v14 != -1;
    if (v14 != -1)
    {
      xmlTextWriterFlush(v13);
      long long v15 = (xmlChar *)xmlBufferContent(v11);
      int v16 = xmlBufferLength(v11);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD15E0);
      }
      std::string::size_type v17 = off_1EB3BE880;
      if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 134218498;
        *(void *)&uint8_t buf[4] = v15;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v16;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v15;
        _os_log_impl(&dword_1902AF000, v17, OS_LOG_TYPE_DEBUG, "processed %p %d to (%s)", buf, 0x1Cu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE888 != -1) {
          dispatch_once(&qword_1EB3BE888, &unk_1EDFD15E0);
        }
        *(_DWORD *)bufferSize = 134218498;
        *(void *)&bufferSize[4] = v15;
        __int16 v27 = 1024;
        int v28 = v16;
        __int16 v29 = 2080;
        uint64_t v30 = v15;
        uint64_t v25 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "static BOOL CLNameValuePair::encodeBase64(const void *, unsigned long, std::string &)", "CoreLocation: %s\n", v25);
        if (v25 != buf) {
          free(v25);
        }
      }
      sub_190467400(buf, v15, v16);
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      *(_OWORD *)a2 = *(_OWORD *)buf;
      *(void *)(a2 + 16) = *(void *)&buf[16];
    }
    xmlFreeTextWriter(v13);
  }
  else
  {
    BOOL v6 = 0;
  }
  xmlBufferFree(v11);
  return v6;
}

void sub_1902C3EE0(int a1, uint64_t a2, char *__s, void *a4)
{
  sub_1902C3F54(__p, __s);
  MEMORY[0x192FCC420](a2, __p, *a4);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1902C3F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1902C3F54(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_190347B9C();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    BOOL v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    BOOL v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t sub_1902C4008(uint64_t a1, int a2)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1EDFC94C8;
  *(unsigned char *)(a1 + 8) = 0;
  int v3 = (BOOL *)(a1 + 8);
  *(_DWORD *)(a1 + 12) = a2;
  *(_OWORD *)(a1 + 16) = xmmword_19060CB80;
  size_t v4 = (uint64_t *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = xmmword_19060CB80;
  size_t v5 = (void *)(a1 + 32);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(void *)(a1 + 96) = 0xBFF0000000000000;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = 0;
  sub_1902D9ACC((float32x4_t *)(a1 + 104), (float32x4_t)0);
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 156) = xmmword_190609AC0;
  *(void *)(a1 + 172) = 0x1FF00000000;
  *(_DWORD *)(a1 + 180) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  if (qword_1EB3BE878 != -1) {
    dispatch_once(&qword_1EB3BE878, &unk_1EDFD29C0);
  }
  BOOL v6 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)int buf = 67240192;
    LODWORD(v63) = v7;
    _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_DEBUG, "Starting device motion service %{public}d", buf, 8u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD29C0);
    }
    int v56 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)uint64_t v69 = 67240192;
    *(_DWORD *)&v69[4] = v56;
    long long v57 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "CLSensorFusionService::CLSensorFusionService(int)", "CoreLocation: %s\n", v57);
    if (v57 != (char *)buf) {
      free(v57);
    }
  }
  uint64_t v8 = sub_1902D6BD0();
  uint64_t v9 = *(void *)(v8 + 24);
  double v10 = *(std::__shared_weak_count **)(v8 + 32);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v11 = sub_1902C47F8(v9, "LogDeviceMotion", v3);
  if (v10) {
    sub_1902D8B58(v10);
  }
  if ((v11 & 1) == 0) {
    BOOL *v3 = 0;
  }
  sub_1902D6BD0();
  BOOL v61 = *(unsigned char *)(qword_1EB3BF828 + 16);
  uint64_t v12 = sub_1902D6BD0();
  uint64_t v13 = *(void *)(v12 + 24);
  int v14 = *(std::__shared_weak_count **)(v12 + 32);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1902C47F8(v13, "DeviceMotionUseThrottledInterval", &v61);
  if (v14) {
    sub_1902D8B58(v14);
  }
  uint64_t v15 = sub_1902D6BD0();
  uint64_t v16 = *(void *)(v15 + 24);
  std::string::size_type v17 = *(std::__shared_weak_count **)(v15 + 32);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v18 = sub_1902C4784(v16, "DeviceMotionAccelerometerUpdateInterval", v4);
  if (v17) {
    sub_1902D8B58(v17);
  }
  if ((v18 & 1) == 0) {
    *size_t v4 = qword_19060CB90[!v61];
  }
  uint64_t v19 = sub_1902D6BD0();
  uint64_t v20 = *(void *)(v19 + 24);
  std::string::size_type v21 = *(std::__shared_weak_count **)(v19 + 32);
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v22 = sub_1902C4784(v20, "DeviceMotionGyroUpdateInterval", (void *)(a1 + 24));
  if (v21) {
    sub_1902D8B58(v21);
  }
  if ((v22 & 1) == 0) {
    *(void *)(a1 + 24) = qword_19060CBA0[!v61];
  }
  uint64_t v23 = sub_1902D6BD0();
  uint64_t v24 = *(void *)(v23 + 24);
  uint64_t v25 = *(std::__shared_weak_count **)(v23 + 32);
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v26 = sub_1902C4784(v24, "DeviceMotionCompassUpdateInterval", v5);
  if (v25) {
    sub_1902D8B58(v25);
  }
  if ((v26 & 1) == 0) {
    *size_t v5 = 0x3F847AE147AE147BLL;
  }
  uint64_t v27 = sub_1902B4534();
  double v28 = sub_1902B4DA8(v27, (double *)(a1 + 24));
  if (qword_1EB3BE878 != -1) {
    dispatch_once(&qword_1EB3BE878, &unk_1EDFD29C0);
  }
  __int16 v29 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v30 = *v4;
    *(_DWORD *)int buf = 134349312;
    double v63 = v28;
    __int16 v64 = 2050;
    uint64_t v65 = v30;
    _os_log_impl(&dword_1902AF000, v29, OS_LOG_TYPE_DEBUG, "GyroUpdateInterval,%{public}.4f,AccelerometerUpdateInterval,%{public}.4f", buf, 0x16u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD29C0);
    }
    uint64_t v58 = *v4;
    *(_DWORD *)uint64_t v69 = 134349312;
    *(double *)&v69[4] = v28;
    *(_WORD *)&v69[12] = 2050;
    *(void *)&v69[14] = v58;
    std::string v59 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "CLSensorFusionService::CLSensorFusionService(int)", "CoreLocation: %s\n", v59);
    if (v59 != (char *)buf) {
      free(v59);
    }
  }
  if (*v3)
  {
    *(void *)uint64_t v69 = &unk_1EDFCA898;
    *(void *)&v69[8] = CFAbsoluteTimeGetCurrent();
    float v31 = v28;
    *(float *)&v69[20] = v31;
    uint64_t v32 = sub_190570220();
    sub_190571738(v32, (uint64_t)v69);
    sub_190395088(buf);
    sub_1903AE520((uint64_t)buf);
    v68 |= 1u;
    uint64_t v66 = *(void *)&v69[8];
    uint64_t v33 = v67;
    *(unsigned char *)(v67 + 12) |= 1u;
    *(float *)(v33 + 8) = v31;
    sub_19039A590((PB::Base *)buf);
  }
  sub_1902D6BD0();
  if (*(unsigned char *)(qword_1EB3BF828 + 16))
  {
    uint64_t v34 = sub_1902D6BD0();
    uint64_t v35 = *(void *)(v34 + 24);
    char v36 = *(std::__shared_weak_count **)(v34 + 32);
    if (v36) {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    buf[0] = 0;
    int v37 = sub_1902C47F8(v35, "DumpGyroCalibrationDatabaseOnDeviceMotionStart", (BOOL *)buf);
    if (buf[0]) {
      int v40 = v37;
    }
    else {
      int v40 = 0;
    }
    if (v36) {
      sub_1902D8B58(v36);
    }
    if (v40)
    {
      uint64_t v41 = NSString;
      BOOL v42 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], v38, v39);
      objc_msgSend_timeIntervalSinceReferenceDate(v42, v43, v44);
      uint64_t v47 = objc_msgSend_stringWithFormat_(v41, v45, @"%.0f", v46);
      uint64_t v48 = (void *)sub_1904DF754();
      __int16 v51 = objc_msgSend_vendor(v48, v49, v50);
      unsigned __int8 v53 = objc_msgSend_proxyForService_(v51, v52, @"CLGyroCalibrationDatabase");
      v60[0] = MEMORY[0x1E4F143A8];
      v60[1] = 3221225472;
      void v60[2] = sub_1905B1DC8;
      v60[3] = &unk_1E5690130;
      v60[4] = v47;
      objc_msgSend_dumpDatabase_onCompletion_(v53, v54, v47, v60);
    }
  }
  return a1;
}

void sub_1902C4724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (v17) {
    sub_1902D8B58(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1902C4784(uint64_t a1, const char *a2, void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  uint64_t v6 = sub_1902C5108(a1, (uint64_t)v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t sub_1902C47F8(uint64_t a1, const char *a2, BOOL *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  uint64_t v6 = sub_1902C486C(a1, (uint64_t)v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t sub_1902C486C(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)a1 + 904))(a1, a2, &cf)) {
    return 0;
  }
  uint64_t v6 = sub_1904606BC(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD15E0);
    }
    int v7 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      *(_DWORD *)int buf = 138412546;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      uint64_t v20 = a2;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD15E0);
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      int v13 = 138412546;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      uint64_t v16 = a2;
      char v11 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, BOOL &, int) const", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t sub_1902C4B08(uint64_t a1, const __CFString *a2, uint64_t *a3, int a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, const __CFString *, CFTypeRef *))(*(void *)a1 + 912))(a1, a2, &cf);
  if (result)
  {
    *a3 = 0;
    CFTypeID v8 = CFGetTypeID(cf);
    if (v8 == CFArrayGetTypeID())
    {
      CFIndex v9 = a4 & ~(a4 >> 31);
      if (CFArrayGetCount((CFArrayRef)cf) > v9)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v9);
LABEL_34:
        *a3 = (uint64_t)ValueAtIndex;
        CFRetain(ValueAtIndex);
        CFRelease(cf);
        return 1;
      }
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD15E0);
      }
      std::string::size_type v17 = off_1EB3BE880;
      if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
      {
        sub_1902C36AC(a2, (uint64_t)__p);
        int v18 = SBYTE3(v31);
        __int16 v19 = *(unsigned char **)__p;
        CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
        uint64_t v21 = __p;
        *(_DWORD *)int buf = 136446722;
        if (v18 < 0) {
          uint64_t v21 = v19;
        }
        *(void *)uint64_t v33 = v21;
        *(_WORD *)&v33[8] = 1026;
        *(_DWORD *)&v33[10] = v9;
        __int16 v34 = 2050;
        uint64_t v35 = (unsigned char *)Count;
        _os_log_impl(&dword_1902AF000, v17, OS_LOG_TYPE_FAULT, "specified index is out of range for key %{public}s (%{public}d of %{public}ld)", buf, 0x1Cu);
        if (SBYTE3(v31) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_1902D8400(115, 0)) {
        goto LABEL_31;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD15E0);
      }
      sub_1902C36AC(a2, (uint64_t)v26);
      int v22 = v27;
      uint64_t v23 = (void **)v26[0];
      CFIndex v24 = CFArrayGetCount((CFArrayRef)cf);
      uint64_t v25 = v26;
      *(_DWORD *)__p = 136446722;
      if (v22 < 0) {
        uint64_t v25 = v23;
      }
      *(void *)&__p[4] = v25;
      *(_WORD *)&__p[12] = 1026;
      *(_DWORD *)&__p[14] = v9;
      __int16 v30 = 2050;
      CFIndex v31 = v24;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0) {
        operator delete(v26[0]);
      }
    }
    else
    {
      if (a4 < 1)
      {
        ValueAtIndex = cf;
        goto LABEL_34;
      }
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD15E0);
      }
      char v11 = off_1EB3BE880;
      if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
      {
        CFTypeID v12 = CFGetTypeID(cf);
        sub_1902C36AC(a2, (uint64_t)__p);
        int v13 = (v31 & 0x80000000) == 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)int buf = 67240706;
        *(_DWORD *)uint64_t v33 = a4;
        *(_WORD *)&v33[4] = 2050;
        *(void *)&v33[6] = v12;
        __int16 v34 = 2082;
        uint64_t v35 = v13;
        _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_FAULT, "specified index %{public}d not applicable to type %{public}lu for key %{public}s", buf, 0x1Cu);
        if (SBYTE3(v31) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_1902D8400(115, 0)) {
        goto LABEL_31;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD15E0);
      }
      CFTypeID v14 = CFGetTypeID(cf);
      sub_1902C36AC(a2, (uint64_t)v26);
      if (v27 >= 0) {
        __int16 v15 = v26;
      }
      else {
        __int16 v15 = (void **)v26[0];
      }
      *(_DWORD *)__p = 67240706;
      *(_DWORD *)&__p[4] = a4;
      *(_WORD *)&__p[8] = 2050;
      *(void *)&__p[10] = v14;
      __int16 v30 = 2082;
      CFIndex v31 = (CFIndex)v15;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0) {
        operator delete(v26[0]);
      }
    }
    sub_1902D398C("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::copyInternal(CFStringRef, CFTypeRef &, int) const", "CoreLocation: %s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
LABEL_31:
    CFRelease(cf);
    uint64_t result = *a3;
    if (*a3)
    {
      CFRelease((CFTypeRef)result);
      return 0;
    }
  }
  return result;
}

void sub_1902C5000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1902C5038(uint64_t a1, const void *a2, void *a3)
{
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), a2);
  CFStringRef v5 = Value;
  *a3 = Value;
  if (Value) {
    CFRetain(Value);
  }
  return v5 != 0;
}

BOOL sub_1902C507C(uint64_t a1, const __CFString *a2, void *a3)
{
  if (sub_1902C5038(a1 + 120, a2, a3)) {
    return 1;
  }
  CFPropertyListRef v6 = CFPreferencesCopyValue(a2, *(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), (CFStringRef)*MEMORY[0x1E4F1D3E0]);
  *a3 = v6;
  if (v6) {
    return 1;
  }

  return sub_1902C5038(a1 + 104, a2, a3);
}

uint64_t sub_1902C5108(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)a1 + 904))(a1, a2, &cf)) {
    return 0;
  }
  uint64_t v6 = sub_190460B30(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD15E0);
    }
    int v7 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      *(_DWORD *)int buf = 138412546;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      uint64_t v20 = a2;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD15E0);
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      int v13 = 138412546;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      uint64_t v16 = a2;
      char v11 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, double &, int) const", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

void sub_1902C53A4()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE898 != -1) {
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD3A00);
  }
  uint64_t v0 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_1902AF000, v0, OS_LOG_TYPE_DEBUG, "Ping timer fired, resetting watchdog", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3A00);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "static void *CLMotionCore::runMotionThread(void *)_block_invoke", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  uint64_t v1 = qword_1EB3BF828;
  uint64_t v2 = *(NSObject **)(qword_1EB3BF828 + 40);
  if (v2
    || (int v3 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, MEMORY[0x1E4F14428]),
        *(void *)(qword_1EB3BF828 + 40) = v3,
        dispatch_source_set_event_handler(v3, &unk_1EDFD3660),
        dispatch_resume(*(dispatch_object_t *)(qword_1EB3BF828 + 40)),
        uint64_t v1 = qword_1EB3BF828,
        (uint64_t v2 = *(NSObject **)(qword_1EB3BF828 + 40)) != 0))
  {
    ++*(_DWORD *)(v1 + 48);
    dispatch_time_t v4 = dispatch_time(0, 60000000000);
    dispatch_source_set_timer(v2, v4, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
  }
  else
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3A00);
    }
    CFStringRef v5 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_ERROR, "Failed to create watchdog timer", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3A00);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "static void *CLMotionCore::runMotionThread(void *)_block_invoke", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_1902C56EC(uint64_t a1, float *a2, double *a3)
{
  uint64_t v500 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
    }
    uint64_t v16 = qword_1E929D790;
    if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v16, OS_LOG_TYPE_FAULT, "Attitude data not set.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
      }
      *(_WORD *)v476 = 0;
      std::string::size_type v17 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "CoreLocation: %s\n", v17);
      goto LABEL_333;
    }
    return;
  }
  ++*(_DWORD *)(a1 + 324);
  if (!*(unsigned char *)(a1 + 184)) {
    goto LABEL_76;
  }
  float v6 = *(float *)(a1 + 16);
  double v7 = v6;
  unint64_t v8 = *(void *)(a1 + 1144);
  if (v6 * 8.0 >= (double)*(int *)(a1 + 248)) {
    goto LABEL_699;
  }
  float v9 = 0.0;
  if (v8 >= 2)
  {
    float v10 = (float)((float)v8 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
    if (v10 >= 0.0) {
      float v9 = v10 / (float)((v8 - 1) * v8);
    }
  }
  if (v9 >= 0.01
    || (unint64_t v11 = *(void *)(a1 + 1072), v11 >= 2)
    && (float v12 = (float)((float)v11 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024)),
        v12 >= 0.0)
    && (float)(v12 / (float)((v11 - 1) * v11)) >= 20.0
    || (unint64_t v13 = *(void *)(a1 + 1216), v13 >= 2)
    && (float v14 = (float)((float)v13 * *(float *)(a1 + 1172)) - (float)(*(float *)(a1 + 1168) * *(float *)(a1 + 1168)),
        v14 >= 0.0)
    && (float)(v14 / (float)((v13 - 1) * v13)) >= 10.0)
  {
LABEL_699:
    if (v8)
    {
      float v18 = *(float *)(a1 + 1096);
      if ((float)(v18 / (float)v8) >= 1.0)
      {
        int v26 = *(_DWORD *)(a1 + 232);
        if (roundf(v6 * 120.0) >= (float)v26
          || v8 >= 2
          && (float v27 = (float)((float)v8 * *(float *)(a1 + 1100)) - (float)(v18 * v18), v27 >= 0.0)
          && (float)(v27 / (float)((v8 - 1) * v8)) >= 0.04)
        {
          if (round(v7 * 360.0) >= (double)v26) {
            goto LABEL_76;
          }
          (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
          if (qword_1E929D798 != -1) {
            dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
          }
          __int16 v29 = qword_1E929D790;
          if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl(&dword_1902AF000, v29, OS_LOG_TYPE_DEBUG, "Coasting for too long. Exit coasting.", buf, 2u);
          }
          if (!sub_1902D8400(115, 2)) {
            goto LABEL_76;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929D798 != -1) {
            goto LABEL_691;
          }
        }
        else
        {
          (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
          if (qword_1E929D798 != -1) {
            dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
          }
          double v28 = qword_1E929D790;
          if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl(&dword_1902AF000, v28, OS_LOG_TYPE_DEBUG, "Waiting too long for high magnitude interference to go away. Exit coasting.", buf, 2u);
          }
          if (!sub_1902D8400(115, 2)) {
            goto LABEL_76;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929D798 != -1) {
            goto LABEL_691;
          }
        }
LABEL_620:
        *(_WORD *)v476 = 0;
        v402 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::resetAfterCoasting()", "CoreLocation: %s\n", v402);
        if (v402 != buf) {
          free(v402);
        }
        goto LABEL_76;
      }
    }
    int v19 = *(_DWORD *)(a1 + 232);
    if (roundf(v6 * 120.0) <= (float)v19) {
      goto LABEL_71;
    }
    if (!*(unsigned char *)(a1 + 333)) {
      goto LABEL_76;
    }
    if (round(v7 * 30.0) > (double)v19) {
      goto LABEL_76;
    }
    if (*(float *)(a1 + 1224) <= 30.0) {
      goto LABEL_76;
    }
    if (v8 >= 2)
    {
      float v20 = (float)((float)v8 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
      if (v20 >= 0.0 && (float)(v20 / (float)((v8 - 1) * v8)) >= 0.01) {
        goto LABEL_76;
      }
    }
    unint64_t v21 = *(void *)(a1 + 1072);
    if (v21 >= 2)
    {
      float v22 = (float)((float)v21 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024));
      if (v22 >= 0.0 && (float)(v22 / (float)((v21 - 1) * v21)) >= 200.0) {
        goto LABEL_76;
      }
    }
    unint64_t v23 = *(void *)(a1 + 1216);
    if (v23 >= 2)
    {
      float v25 = (float)v23;
      float v24 = *(float *)(a1 + 1168);
      float v30 = (float)((float)v23 * *(float *)(a1 + 1172)) - (float)(v24 * v24);
      if (v30 >= 0.0 && (float)(v30 / (float)((v23 - 1) * v23)) >= 100.0) {
        goto LABEL_76;
      }
    }
    else
    {
      if (!v23)
      {
        double v31 = 0.0;
LABEL_67:
        if (v21) {
          double v32 = (float)(*(float *)(a1 + 1024) / (float)v21) * 0.9;
        }
        else {
          double v32 = 0.0;
        }
        if (v32 <= v31) {
          goto LABEL_76;
        }
LABEL_71:
        (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
        if (qword_1E929D798 != -1) {
          dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
        }
        uint64_t v33 = qword_1E929D790;
        if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl(&dword_1902AF000, v33, OS_LOG_TYPE_DEBUG, "Waiting too long for internal re-calibration. Prompt user.", buf, 2u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D798 == -1) {
            goto LABEL_620;
          }
          goto LABEL_691;
        }
        goto LABEL_76;
      }
      float v24 = *(float *)(a1 + 1168);
      float v25 = 1.0;
    }
    double v31 = (float)(v24 / v25);
    goto LABEL_67;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (qword_1E929D798 != -1) {
    dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
  }
  __int16 v15 = qword_1E929D790;
  if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_1902AF000, v15, OS_LOG_TYPE_DEBUG, "Bad heading divergence for too long. Prompt user to re-calibrate.", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 == -1) {
      goto LABEL_620;
    }
LABEL_691:
    dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
    goto LABEL_620;
  }
LABEL_76:
  *(unsigned char *)(a1 + 59) = 0;
  *(unsigned char *)(a1 + 25) = 0;
  v454 = (float32x2_t *)(a1 + 336);
  sub_190528CE0((float32x2_t *)(a1 + 336), a3);
  double v34 = a3[3];
  double v35 = a3[2] + a3[2];
  double v36 = *a3;
  double v37 = a3[1];
  float v38 = v34 * (v37 + v37) - *a3 * v35;
  *(float *)&double v35 = -(v34 * (v36 + v36)) - v37 * v35;
  *(float *)&double v34 = v36 * (v36 + v36) + -1.0 + v37 * (v37 + v37);
  v471 = &unk_1EDFC7D60;
  float v472 = v38;
  int v473 = LODWORD(v35);
  int v474 = LODWORD(v34);
  if (*(unsigned char *)(a1 + 56))
  {
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
    }
    uint64_t v39 = qword_1E929D790;
    if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v39, OS_LOG_TYPE_INFO, "Resetting calibrator states.", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
      }
      *(_WORD *)v476 = 0;
      v388 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::resetCalibration(const CLVector3d<float> &, const CLMatrix3d<float> &)", "CoreLocation: %s\n", v388);
      if (v388 != buf) {
        free(v388);
      }
    }
    *(_WORD *)(a1 + 332) = 1;
    *(unsigned char *)(a1 + 57) = 1;
    *(unsigned char *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 236) = 0;
    *(_DWORD *)(a1 + 240) = 0;
    *(_DWORD *)(a1 + 216) = 0;
    *(_DWORD *)(a1 + 20) = 0;
    *(_DWORD *)(a1 + 28) = 0;
    *(void *)(a1 + 320) = 3;
    *(void *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    *(void *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    *(void *)(a1 + 200) = 0;
    *(_DWORD *)(a1 + 208) = 0;
    *(void *)(a1 + 520) = 0;
    *(_DWORD *)(a1 + 528) = 0;
    float v41 = a2[3];
    float v40 = a2[4];
    float v42 = a2[2];
    float v43 = (float)((float)(*(float *)(a1 + 384) * v41) + (float)(v42 * *(float *)(a1 + 360)))
        + (float)(v40 * *(float *)(a1 + 408));
    *(float32x2_t *)(a1 + 120) = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)(a1 + 376), v41), *(float32x2_t *)(a1 + 352), v42), *(float32x2_t *)(a1 + 400), v40);
    *(float *)(a1 + 128) = v43;
    bzero((void *)(a1 + 1472), 0x48uLL);
    *(float64x2_t *)(a1 + 1520) = vcvtq_f64_f32(*(float32x2_t *)(a1 + 120));
    *(double *)(a1 + 1536) = *(float *)(a1 + 128);
    bzero(*(void **)(a1 + 1568), 0x144uLL);
    uint64_t v44 = *(_DWORD **)(a1 + 1568);
    *uint64_t v44 = 1091567616;
    v44[10] = 1091567616;
    v44[20] = 1091567616;
    v44[30] = 869711765;
    v44[40] = 869711765;
    v44[50] = 869711765;
    v44[60] = 1091567616;
    v44[70] = 1091567616;
    v44[80] = 1091567616;
    sub_1905284FC(a1);
    long long v45 = *((_OWORD *)a3 + 1);
    *(_OWORD *)(a1 + 416) = *(_OWORD *)a3;
    *(_OWORD *)(a1 + 432) = v45;
    if ((float *)(a1 + 448) != a2)
    {
      *(void *)(a1 + 456) = *((void *)a2 + 1);
      *(float *)(a1 + 464) = a2[4];
    }
    *(unsigned char *)(a1 + 332) = 1;
    *(unsigned char *)(a1 + 56) = 0;
  }
  else if (!*(unsigned char *)(a1 + 332))
  {
    goto LABEL_88;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 72))(a1)) {
    *(unsigned char *)(a1 + 332) = 0;
  }
LABEL_88:
  *(int32x2_t *)(a1 + 236) = vadd_s32(*(int32x2_t *)(a1 + 236), (int32x2_t)0x100000001);
  uint64_t v46 = *(void *)(a1 + 1000);
  unint64_t v47 = *(void *)(v46 + 64);
  float v48 = 0.0;
  if (v47)
  {
    float v49 = *(float *)(v46 + 16);
    float v50 = v49 / (float)v47;
    if (v47 != 1)
    {
      float v51 = (float)((float)v47 * *(float *)(v46 + 20)) - (float)(v49 * v49);
      if (v51 >= 0.0) {
        float v48 = v51 / (float)((v47 - 1) * v47);
      }
    }
  }
  else
  {
    float v50 = 0.0;
  }
  BOOL v52 = v48 <= 6.0 && v50 <= 4.7124;
  BOOL v53 = v48 <= 0.8 && v50 <= 1.5708;
  sub_1902D9094(a1 + 552, a2 + 2);
  sub_1902D9094(a1 + 624, a2 + 3);
  sub_1902D9094(a1 + 696, a2 + 4);
  unint64_t v54 = *(void *)(a1 + 616);
  float v55 = 0.0;
  float v56 = 0.0;
  if (v54) {
    float v56 = *(float *)(a1 + 568) / (float)v54;
  }
  unint64_t v57 = *(void *)(a1 + 688);
  if (v57) {
    float v55 = *(float *)(a1 + 640) / (float)v57;
  }
  unint64_t v58 = *(void *)(a1 + 760);
  if (v58) {
    float v59 = *(float *)(a1 + 712) / (float)v58;
  }
  else {
    float v59 = 0.0;
  }
  v468 = &unk_1EDFC7D60;
  float32x2_t v469 = (float32x2_t)__PAIR64__(LODWORD(v55), LODWORD(v56));
  float v470 = v59;
  float32x2_t v464 = (float32x2_t)&unk_1EDFC7D60;
  float v465 = v56;
  float v466 = v55;
  float v467 = v59;
  float32_t v60 = sub_1905291CC((float32x2_t *)a1, &v464);
  if (!(*(unsigned int (**)(uint64_t, float32_t))(*(void *)a1 + 72))(a1, v60)) {
    goto LABEL_162;
  }
  if (*(unsigned char *)(a1 + 60))
  {
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
    }
    BOOL v61 = qword_1E929D790;
    if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136315138;
      *(void *)&uint8_t buf[4] = "Compass-withFusion";
      _os_log_impl(&dword_1902AF000, v61, OS_LOG_TYPE_DEBUG, "Type,%s,Updating reference frame.", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
      }
      *(_DWORD *)v476 = 136315138;
      *(void *)&v476[4] = "Compass-withFusion";
      v390 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "CoreLocation: %s\n", v390);
      if (v390 != buf) {
        free(v390);
      }
    }
    *(unsigned char *)(a1 + 60) = 0;
  }
  uint64_t v62 = (int *)(a1 + 20);
  if (*(int *)(a1 + 20) <= 3) {
    int v63 = 3;
  }
  else {
    int v63 = *(_DWORD *)(a1 + 20);
  }
  float v64 = *(float *)(a1 + 216);
  if (v64 <= 0.0)
  {
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
    }
    uint64_t v66 = qword_1E929D790;
    if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v66, OS_LOG_TYPE_FAULT, "Coasting vector not set.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
      }
      *(_WORD *)v476 = 0;
      v401 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "CoreLocation: %s\n", v401);
      if (v401 != buf) {
        free(v401);
      }
    }
    goto LABEL_126;
  }
  *(float *)&double v457 = vabds_f32(v64, sqrtf((float)((float)(v466 * v466) + (float)(v465 * v465)) + (float)(v467 * v467)))
                  / v64;
  sub_1902D9094(a1 + 1080, (float *)&v457);
  float v65 = (double)(5 - v63) * 0.25 + 1.5;
  if (*(float *)&v457 > (float)((float)(v65 * 10.0) * 0.1875))
  {
    if (*(unsigned char *)(a1 + 184)) {
      ++*(_DWORD *)(a1 + 232);
    }
    else {
      sub_190528E90(a1);
    }
    unint64_t v213 = *(void *)(a1 + 1144);
    if (v213)
    {
      if ((float v214 = *(float *)(a1 + 1096) / (float)v213, v214 > 5.0)
        && roundf(*(float *)(a1 + 16) * 30.0) < (float)*(int *)(a1 + 232)
        || v214 > 10.0 && roundf(*(float *)(a1 + 16) * 10.0) < (float)*(int *)(a1 + 232))
      {
        (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
        if (qword_1E929D798 != -1) {
          dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
        }
        v215 = qword_1E929D790;
        if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl(&dword_1902AF000, v215, OS_LOG_TYPE_DEBUG, "Prolonged high magDiff. Likely bad calibration. Resetting.", buf, 2u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D798 != -1) {
            dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
          }
          *(_WORD *)v476 = 0;
          v414 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "CoreLocation: %s\n", v414);
          if (v414 != buf) {
            free(v414);
          }
        }
      }
    }
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
    }
    v216 = qword_1E929D790;
    if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
    {
      double v217 = sqrtf((float)((float)(v466 * v466) + (float)(v465 * v465)) + (float)(v467 * v467));
      double v218 = *(float *)(a1 + 200);
      double v219 = *(float *)(a1 + 204);
      double v220 = *(float *)(a1 + 208);
      double v221 = (float)((float)*(int *)(a1 + 232) / *(float *)(a1 + 16));
      unint64_t v222 = *(void *)(a1 + 1144);
      double v223 = 0.0;
      if (v222 >= 2)
      {
        float v224 = (float)((float)v222 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
        uint64_t v225 = (v222 - 1) * v222;
        if (v224 >= 0.0) {
          double v223 = (float)(v224 / (float)(unint64_t)v225);
        }
        else {
          double v223 = 0.0;
        }
      }
      int v226 = *(unsigned __int8 *)(a1 + 333);
      *(_DWORD *)int buf = 134220544;
      *(double *)&uint8_t buf[4] = *(float *)&v457;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v217;
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(double *)&buf[24] = v465;
      *(_WORD *)&buf[32] = 2048;
      *(double *)&buf[34] = v466;
      *(_WORD *)&buf[42] = 2048;
      *(double *)&buf[44] = v467;
      *(_WORD *)&buf[52] = 2048;
      *(double *)&buf[54] = v218;
      *(_WORD *)&buf[62] = 2048;
      *(double *)&buf[64] = v219;
      *(_WORD *)&buf[72] = 2048;
      *(double *)&buf[74] = v220;
      __int16 v494 = 2048;
      double v495 = v221;
      __int16 v496 = 2048;
      double v497 = v223;
      __int16 v498 = 1024;
      int v499 = v226;
      _os_log_impl(&dword_1902AF000, v216, OS_LOG_TYPE_DEBUG, "Extremely high magnitude.  magDiff (%.3f), magnitude (%.3f), calibrated (%.3f/%.3f/%.3f), coastVector (%.3f/%.3f/%.3f),coastingTime,%.3f,magDiffVar,%.3f,resetInternal,%d", buf, 0x6Cu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
      }
      double v227 = sqrtf((float)((float)(v466 * v466) + (float)(v465 * v465)) + (float)(v467 * v467));
      double v228 = *(float *)(a1 + 200);
      double v229 = *(float *)(a1 + 204);
      double v230 = *(float *)(a1 + 208);
      double v231 = (float)((float)*(int *)(a1 + 232) / *(float *)(a1 + 16));
      unint64_t v232 = *(void *)(a1 + 1144);
      double v233 = 0.0;
      if (v232 >= 2)
      {
        float v234 = (float)((float)v232 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
        if (v234 >= 0.0) {
          double v233 = (float)(v234 / (float)((v232 - 1) * v232));
        }
      }
      int v235 = *(unsigned __int8 *)(a1 + 333);
      *(_DWORD *)v476 = 134220544;
      *(double *)&v476[4] = *(float *)&v457;
      *(_WORD *)&v476[12] = 2048;
      *(double *)&v476[14] = v227;
      *(_WORD *)&v476[22] = 2048;
      *(double *)&v476[24] = v465;
      *(_WORD *)&v476[32] = 2048;
      *(double *)&v476[34] = v466;
      *(_WORD *)&v476[42] = 2048;
      *(double *)&v476[44] = v467;
      *(_WORD *)&v476[52] = 2048;
      *(double *)&v476[54] = v228;
      *(_WORD *)&v476[62] = 2048;
      *(double *)&v476[64] = v229;
      *(_WORD *)&v476[72] = 2048;
      double v477 = v230;
      __int16 v478 = 2048;
      double v479 = v231;
      __int16 v480 = 2048;
      double v481 = v233;
      __int16 v482 = 1024;
      int v483 = v235;
      std::string::size_type v17 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "CoreLocation: %s\n", v17);
LABEL_333:
      if (v17 != buf) {
        free(v17);
      }
      return;
    }
    return;
  }
  float v189 = *(float *)(a1 + 200);
  float v190 = *(float *)(a1 + 204);
  float v191 = *(float *)(a1 + 208);
  *(float *)&unsigned int v192 = (float)((float)(v190 * *(float *)(a1 + 356)) + (float)(v189 * *(float *)(a1 + 352)))
                  + (float)(v191 * *(float *)(a1 + 360));
  *(float *)&unsigned int v193 = (float)((float)(v190 * *(float *)(a1 + 380)) + (float)(v189 * *(float *)(a1 + 376)))
                  + (float)(v191 * *(float *)(a1 + 384));
  float v194 = (float)((float)(v190 * *(float *)(a1 + 404)) + (float)(v189 * *(float *)(a1 + 400)))
       + (float)(v191 * *(float *)(a1 + 408));
  *(void *)&v461.f64[0] = &unk_1EDFC7D60;
  *(void *)&v461.f64[1] = __PAIR64__(v193, v192);
  *(float *)&double v462 = v194;
  LODWORD(v486) = 0;
  *(float *)&v486 = sub_190529058((float *)&v464, (float *)&v461) * 57.296;
  float v195 = 90.0 - sub_190529058((float *)&v464, (float *)&v471) * 57.2957795;
  float v196 = 90.0 - sub_190529058((float *)&v461, (float *)&v471) * 57.2957795;
  float v453 = v195;
  LODWORD(v455[0]) = vabds_f32(v195, v196);
  sub_1902D9094(a1 + 1008, (float *)&v486);
  sub_1902D9094(a1 + 1152, (float *)v455);
  *(_DWORD *)(a1 + 1224) = 0;
  v491.i32[0] = 0;
  v489.i32[0] = 0;
  float v197 = 0.0;
  if (sub_19053155C((float *)&v461, (float *)&v471, (float *)&v489))
  {
    if (sub_19053155C((float *)&v464, (float *)&v471, (float *)&v491))
    {
      float v197 = v491.f32[0] - v489.f32[0];
      float v198 = vabds_f32(v491.f32[0], v489.f32[0]);
      *(float *)(a1 + 1224) = v198;
      if (v198 > 180.0)
      {
        float v199 = 360.0 - v198;
        *(float *)(a1 + 1224) = v199;
        if (v197 < 0.0) {
          float v197 = -v199;
        }
        else {
          float v197 = v199;
        }
      }
    }
  }
  if (*v62 < 2 || !v53 && (v52 & (*(unsigned int (**)(uint64_t))(*(void *)a1 + 80))(a1)) != 1) {
    goto LABEL_592;
  }
  *(unsigned char *)(a1 + 185) = 0;
  unint64_t v200 = *(void *)(a1 + 1216);
  float v201 = 0.0;
  float v202 = 0.0;
  if (v200 >= 2)
  {
    float v203 = (float)((float)v200 * *(float *)(a1 + 1172)) - (float)(*(float *)(a1 + 1168) * *(float *)(a1 + 1168));
    if (v203 >= 0.0) {
      float v202 = v203 / (float)((v200 - 1) * v200);
    }
  }
  unint64_t v204 = *(void *)(a1 + 1072);
  if (v204 >= 2)
  {
    float v205 = (float)((float)v204 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024));
    if (v205 >= 0.0) {
      float v201 = v205 / (float)((v204 - 1) * v204);
    }
  }
  unint64_t v206 = *(void *)(a1 + 1144);
  float v207 = 0.0;
  if (v206 >= 2)
  {
    float v208 = (float)((float)v206 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
    if (v208 >= 0.0) {
      float v207 = v208 / (float)((v206 - 1) * v206);
    }
  }
  float v210 = *(float *)(a1 + 1224);
  if (*(unsigned char *)(a1 + 252))
  {
    if (v210 > 27.5)
    {
      float v209 = v65 * 0.0032;
      if (v207 <= v209 && (!v206 || (float)(*(float *)(a1 + 1096) / (float)v206) < 0.45))
      {
        if (qword_1E929D798 != -1) {
          dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
        }
        v211 = qword_1E929D790;
        if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl(&dword_1902AF000, v211, OS_LOG_TYPE_DEBUG, "Likely bad database lookup. Resetting. ", buf, 2u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D798 != -1) {
            dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
          }
          *(_WORD *)v476 = 0;
          v436 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "CoreLocation: %s\n", v436);
          if (v436 != buf) {
            free(v436);
          }
        }
        (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
        return;
      }
    }
  }
  int v236 = *(_DWORD *)(a1 + 248);
  if (v210 <= 80.0)
  {
    if (v236 < 1) {
      goto LABEL_352;
    }
    int v237 = -1;
  }
  else
  {
    int v237 = 1;
  }
  *(_DWORD *)(a1 + 248) = v237 + v236;
LABEL_352:
  float v451 = v202;
  float v450 = v65 * 0.0032;
  if (qword_1E929D798 != -1) {
    dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
  }
  v242 = qword_1E929D790;
  if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
  {
    int v243 = *(_DWORD *)(a1 + 236);
    int v244 = *(_DWORD *)(a1 + 248);
    *(_DWORD *)int buf = 134219776;
    *(double *)&uint8_t buf[4] = v65;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v243;
    *(_WORD *)&buf[18] = 2048;
    *(double *)&buf[20] = *(float *)&v457;
    *(_WORD *)&buf[28] = 2048;
    *(double *)&buf[30] = v197;
    *(_WORD *)&buf[38] = 2048;
    *(double *)&CFRunLoopObserverContext buf[40] = *(float *)&v486;
    *(_WORD *)&buf[48] = 1024;
    *(_DWORD *)&buf[50] = v244;
    *(_WORD *)&buf[54] = 2048;
    *(double *)&buf[56] = v453;
    *(_WORD *)&buf[64] = 1024;
    *(_DWORD *)&buf[66] = v451 < (float)(v65 * 13.0);
    _os_log_impl(&dword_1902AF000, v242, OS_LOG_TYPE_DEBUG, "******* scale(%.3f),cAge(%d), magDiff(%.3f), dHeading(%.3f), deltaAngle(%.3f), numBad(%d), calInc(%.3f), incDiffIsStable(%d)", buf, 0x46u);
  }
  float v452 = v65 * 13.0;
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
    }
    int v423 = *(_DWORD *)(a1 + 236);
    int v424 = *(_DWORD *)(a1 + 248);
    *(_DWORD *)v476 = 134219776;
    *(double *)&v476[4] = v65;
    *(_WORD *)&v476[12] = 1024;
    *(_DWORD *)&v476[14] = v423;
    *(_WORD *)&v476[18] = 2048;
    *(double *)&v476[20] = *(float *)&v457;
    *(_WORD *)&v476[28] = 2048;
    *(double *)&v476[30] = v197;
    *(_WORD *)&v476[38] = 2048;
    *(double *)&v476[40] = *(float *)&v486;
    *(_WORD *)&v476[48] = 1024;
    *(_DWORD *)&v476[50] = v424;
    *(_WORD *)&v476[54] = 2048;
    *(double *)&v476[56] = v453;
    *(_WORD *)&v476[64] = 1024;
    *(_DWORD *)&v476[66] = v451 < v452;
    v425 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "CoreLocation: %s\n", v425);
    if (v425 != buf) {
      free(v425);
    }
  }
  float v245 = v65 * 13.0;
  double v246 = v452;
  double v247 = v201;
  double v248 = v452 * 1.5;
  if (!v53
    || *(float *)(a1 + 16) >= (float)(*(_DWORD *)(a1 + 324) - *(_DWORD *)(a1 + 328))
    || (LODWORD(v246) = *(_DWORD *)(a1 + 1216),
        round((double)*(unint64_t *)(a1 + 1160) * 0.5) >= (double)*(unint64_t *)&v246)
    || (double v249 = v247,
        *(_DWORD *)(a1 + 328) = 0,
        sub_1902D1604(a1, v451 < v452, v248 > v247, v207 <= v450, (float *)&v464, (float *)&v461, v65, v197, *(float *)&v486, *(float *)v455, v453, v196, *(float *)&v457), v247 = v249, float v245 = v65 * 13.0, !*(unsigned char *)(a1 + 313)))
  {
    float v250 = *(float *)(a1 + 16);
    unint64_t v251 = *(void *)(a1 + 1072);
    float v252 = 0.0;
    float v253 = 0.0;
    if (v251) {
      float v253 = *(float *)(a1 + 1024) / (float)v251;
    }
    double v254 = v250;
    unint64_t v255 = *(void *)(a1 + 1144);
    if (v255) {
      float v252 = *(float *)(a1 + 1096) / (float)v255;
    }
    double v256 = (double)*(int *)(a1 + 236);
    double v257 = v254 * 2.0 + 40.0;
    if (*(unsigned char *)(a1 + 185))
    {
      if (!*(unsigned char *)(a1 + 184)) {
        goto LABEL_592;
      }
      float v258 = v65 * 13.75;
      float v259 = v65 * 0.1875;
      goto LABEL_376;
    }
    float v260 = *(float *)(a1 + 1224);
    if (v260 > 80.0
      && v196 > 78.0
      && v250 < (float)*(int *)(a1 + 248)
      && v253 > 13.75
      && v252 < 0.45
      && (v254 * 3.5 < (double)*(int *)(a1 + 240) || v257 >= v256))
    {
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
      }
      v378 = qword_1E929D790;
      if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl(&dword_1902AF000, v378, OS_LOG_TYPE_DEBUG, "Steep inclination. Likely bad interference or bad database lookup. Resetting. ", buf, 2u);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D798 != -1) {
          dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
        }
        *(_WORD *)v476 = 0;
        v447 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "CoreLocation: %s\n", v447);
        if (v447 != buf) {
          free(v447);
        }
      }
      *(_DWORD *)(a1 + 248) = 0;
      (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
      return;
    }
    float v258 = v65 * 13.75;
    float v259 = v65 * 0.1875;
    if (*(unsigned char *)(a1 + 184))
    {
LABEL_376:
      int v261 = *(_DWORD *)(a1 + 232) + 1;
      *(_DWORD *)(a1 + 232) = v261;
      if (v252 > v259 || v207 > v450 || v253 > v258 && *(float *)(a1 + 1224) >= v258 || v248 <= v247)
      {
        if (*(unsigned char *)(a1 + 333)) {
          goto LABEL_592;
        }
        if (roundf(v250 * 10.0) >= (float)v261
          && v257 < v256
          && (v453 >= 78.0 || v451 >= v245 || v252 >= 0.45 || v253 <= v258 || *(float *)(a1 + 1224) <= 80.0))
        {
          return;
        }
        sub_190528774((void *)(a1 + 1232));
        int v263 = 1;
      }
      else
      {
        if (qword_1E929D798 != -1) {
          dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
        }
        v262 = qword_1E929D790;
        if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl(&dword_1902AF000, v262, OS_LOG_TYPE_DEBUG, "Interference is gone.", buf, 2u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D798 != -1) {
            dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
          }
          *(_WORD *)v476 = 0;
          v444 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "CoreLocation: %s\n", v444);
          if (v444 != buf) {
            free(v444);
          }
        }
        sub_1902BC8C8(a1);
        if (!*(unsigned char *)(a1 + 333) || *(int *)(a1 + 1592) > 2) {
          goto LABEL_592;
        }
        int v263 = 0;
        uint64_t v62 = (int *)(a1 + 1464);
      }
      sub_1902CADC0((float64x2_t *)a1, (float *)&v464, v454, *v62);
      if (*(unsigned char *)(a1 + 333)) {
        goto LABEL_592;
      }
LABEL_591:
      if (v263) {
        return;
      }
LABEL_592:
      if (!*(unsigned char *)(a1 + 333) && *(unsigned char *)(a1 + 184) && *(float *)&v457 > (float)((float)(v65 + 1.0) * 0.1875)) {
        return;
      }
      goto LABEL_126;
    }
    if (v260 <= 13.75 && *(float *)&v457 <= 0.45)
    {
LABEL_541:
      int v263 = 0;
LABEL_552:
      BOOL v375 = 0;
      float v376 = (float)(v65 * 4.0) * 13.75;
      int v377 = *(_DWORD *)(a1 + 228);
      if (*(unsigned char *)(a1 + 24) && v377 >= 2) {
        BOOL v375 = (*(float *)&v486 > v376 || *(float *)(a1 + 1224) > 32.0) && *(float *)&v457 < 1.12499997;
      }
      if (v377 > 40 || *(float *)&v486 > v376 || v375)
      {
        BOOL v384 = !v375;
        if (*(unsigned char *)(a1 + 24)) {
          BOOL v384 = 0;
        }
        if (v384
          || (int v385 = *(_DWORD *)(a1 + 236), v386 = *(float *)(a1 + 16), v386 * 0.25 <= (double)v385)
          && ((float)(v386 * 10.0) <= (float)v385 || v386 >= (float)*(int *)(a1 + 248) || v453 >= 78.0 || v451 >= v245))
        {
          sub_190528E90(a1);
          *(_DWORD *)(a1 + 228) = 0;
          return;
        }
        if (qword_1E929D798 != -1) {
          dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
        }
        v387 = qword_1E929D790;
        if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl(&dword_1902AF000, v387, OS_LOG_TYPE_DEBUG, "Likely bad database lookup. Resetting. ", buf, 2u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D798 != -1) {
            dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
          }
          *(_WORD *)v476 = 0;
          v449 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "CoreLocation: %s\n", v449);
          if (v449 != buf) {
            free(v449);
          }
        }
        (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
      }
      goto LABEL_591;
    }
    float v373 = v65 + 0.8;
    if (*(float *)&v486 < (float)(v373 * 13.75)
      && (*(float *)&v486 <= 13.75 || *(float *)&v457 < (float)(v373 * 0.1875)))
    {
      int v379 = *(float *)&v457 > v259 || v53;
      int v380 = *(_DWORD *)(a1 + 228);
      if (*(float *)&v486 <= v258 || !v379)
      {
        _VF = __OFSUB__(v380, 1);
        int v389 = v380 - 1;
        if (v389 < 0 == _VF)
        {
          int v263 = 0;
          *(_DWORD *)(a1 + 228) = v389;
          goto LABEL_552;
        }
        goto LABEL_541;
      }
      *(_DWORD *)(a1 + 228) = v380 + 1;
      int v381 = *(unsigned __int8 *)(a1 + 333);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
      }
      v382 = qword_1E929D790;
      if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 134218752;
        *(double *)&uint8_t buf[4] = *(float *)&v486;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v197;
        *(_WORD *)&unsigned char buf[22] = 2048;
        *(double *)&buf[24] = *(float *)&v457;
        *(_WORD *)&buf[32] = 2048;
        *(double *)&buf[34] = *(float *)v455;
        _os_log_impl(&dword_1902AF000, v382, OS_LOG_TYPE_DEBUG, "**INTERFERENCE-0 dAngle=%.3f,dHeading=%.3f,magDiff=%.3f,incDiff=%.3f", buf, 0x2Au);
      }
      int v263 = v381 ^ 1;
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D798 != -1) {
          dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
        }
        *(_DWORD *)v476 = 134218752;
        *(double *)&v476[4] = *(float *)&v486;
        *(_WORD *)&v476[12] = 2048;
        *(double *)&v476[14] = v197;
        *(_WORD *)&v476[22] = 2048;
        *(double *)&v476[24] = *(float *)&v457;
        *(_WORD *)&v476[32] = 2048;
        *(double *)&v476[34] = *(float *)v455;
        v383 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "CoreLocation: %s\n", v383);
        if (v383 != buf) {
          free(v383);
        }
      }
    }
    else
    {
      *(_DWORD *)(a1 + 228) += 5;
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
      }
      v374 = qword_1E929D790;
      if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 134218752;
        *(double *)&uint8_t buf[4] = *(float *)&v486;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v197;
        *(_WORD *)&unsigned char buf[22] = 2048;
        *(double *)&buf[24] = *(float *)&v457;
        *(_WORD *)&buf[32] = 2048;
        *(double *)&buf[34] = *(float *)v455;
        _os_log_impl(&dword_1902AF000, v374, OS_LOG_TYPE_DEBUG, "**INTERFERENCE-1 dAngle=%.3f,dHeading=%.3f,magDiff=%.3f,incDiff=%.3f", buf, 0x2Au);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D798 != -1) {
          dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
        }
        *(_DWORD *)v476 = 134218752;
        *(double *)&v476[4] = *(float *)&v486;
        *(_WORD *)&v476[12] = 2048;
        *(double *)&v476[14] = v197;
        *(_WORD *)&v476[22] = 2048;
        *(double *)&v476[24] = *(float *)&v457;
        *(_WORD *)&v476[32] = 2048;
        *(double *)&v476[34] = *(float *)v455;
        v448 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "CoreLocation: %s\n", v448);
        if (v448 != buf) {
          free(v448);
        }
      }
      int v263 = 1;
    }
    float v245 = v65 * 13.0;
    goto LABEL_552;
  }
LABEL_126:
  if (*(unsigned char *)(a1 + 184))
  {
    HIDWORD(v67) = -858993459 * *(_DWORD *)(a1 + 324) + 429496728;
    LODWORD(v67) = HIDWORD(v67);
    if ((v67 >> 1) <= 0x19999998)
    {
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
      }
      char v68 = qword_1E929D790;
      if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
      {
        int v69 = *(unsigned __int8 *)(a1 + 333);
        *(_DWORD *)int buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v69;
        _os_log_impl(&dword_1902AF000, v68, OS_LOG_TYPE_DEBUG, "Updating during coasting, fIsResetInternal(%d)", buf, 8u);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D798 != -1) {
          dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
        }
        int v403 = *(unsigned __int8 *)(a1 + 333);
        *(_DWORD *)v476 = 67109120;
        *(_DWORD *)&v476[4] = v403;
        v404 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "CoreLocation: %s\n", v404);
        if (v404 != buf) {
          free(v404);
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 185)) {
    BOOL v70 = v53;
  }
  else {
    BOOL v70 = 0;
  }
  if (v70)
  {
    int v71 = *(_DWORD *)(a1 + 324);
    BOOL v72 = v50 > 0.15;
    if (v48 >= 0.01) {
      BOOL v72 = 0;
    }
    if (*(unsigned char *)(a1 + 313)) {
      goto LABEL_148;
    }
    float v73 = fabsf(*(float *)(a1 + 308));
    int v74 = *(_DWORD *)(a1 + 304);
    if (v74 >= 2 && v73 > (float)((float)((float)(v71 - *(_DWORD *)(a1 + 316)) / *(float *)(a1 + 16)) * 40.0)) {
      goto LABEL_148;
    }
    if (v74 >= 6 && v73 > 100.0) {
      goto LABEL_148;
    }
    char v75 = !v72;
    if (v74 < 7) {
      char v75 = 1;
    }
    if ((v75 & 1) != 0 || v73 <= 70.0)
    {
      sub_190528D84((uint64_t)buf, (uint64_t)v454);
      float v264 = (float)((float)(v466 * *(float *)&buf[68]) + (float)(v465 * *(float *)&buf[64]))
           + (float)(v467 * *(float *)&buf[72]);
      float v265 = (float)((float)(v466 * *(float *)&buf[44]) + (float)(v465 * *(float *)&buf[40]))
           + (float)(v467 * *(float *)&buf[48]);
      *(float *)(a1 + 120) = (float)((float)(v466 * *(float *)&buf[20]) + (float)(v465 * *(float *)&buf[16]))
                           + (float)(v467 * *(float *)&buf[24]);
      *(float *)(a1 + 124) = v265;
      *(float *)(a1 + 128) = v264;
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
      }
      v266 = qword_1E929D790;
      if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 134218240;
        *(double *)&uint8_t buf[4] = v50;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v48;
        _os_log_impl(&dword_1902AF000, v266, OS_LOG_TYPE_DEBUG, "resync coasting vector. rotM,%.3f,rotV,%.3f", buf, 0x16u);
      }
      if (!sub_1902D8400(115, 2)) {
        goto LABEL_155;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
      }
      *(_DWORD *)v476 = 134218240;
      *(double *)&v476[4] = v50;
      *(_WORD *)&v476[12] = 2048;
      *(double *)&v476[14] = v48;
      v267 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "CoreLocation: %s\n", v267);
    }
    else
    {
LABEL_148:
      *(void *)(a1 + 72) = *(void *)(a1 + 264);
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 272);
      float v76 = *(float *)(a1 + 288);
      float v77 = *(float *)(a1 + 292);
      *(float *)(a1 + 120) = v76;
      *(float *)(a1 + 124) = v77;
      float v78 = *(float *)(a1 + 296);
      *(float *)(a1 + 128) = v78;
      *(_DWORD *)(a1 + 328) = v71;
      *(void *)(a1 + 264) = 0;
      *(_DWORD *)(a1 + 272) = 0;
      *(void *)(a1 + 288) = 0;
      *(_DWORD *)(a1 + 296) = 0;
      *(void *)(a1 + 304) = 0;
      *(_WORD *)(a1 + 312) = 0;
      if (!*(unsigned char *)(a1 + 333))
      {
        float v79 = (float)((float)(v77 * *(float *)(a1 + 356)) + (float)(v76 * *(float *)(a1 + 352)))
            + (float)(v78 * *(float *)(a1 + 360));
        float v80 = (float)((float)(v77 * *(float *)(a1 + 380)) + (float)(v76 * *(float *)(a1 + 376)))
            + (float)(v78 * *(float *)(a1 + 384));
        float v81 = (float)((float)(v77 * *(float *)(a1 + 404)) + (float)(v76 * *(float *)(a1 + 400)))
            + (float)(v78 * *(float *)(a1 + 408));
        *(void *)int buf = &unk_1EDFC7D60;
        *(float *)&uint8_t buf[8] = v79;
        *(float *)&buf[12] = v80;
        *(float *)&uint8_t buf[16] = v81;
        sub_1902CADC0((float64x2_t *)a1, (float *)buf, v454, 3);
      }
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
      }
      uint64_t v82 = qword_1E929D790;
      if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl(&dword_1902AF000, v82, OS_LOG_TYPE_DEBUG, "BACKUP resync coasting vector", buf, 2u);
      }
      if (!sub_1902D8400(115, 2)) {
        goto LABEL_155;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
      }
      *(_WORD *)v476 = 0;
      v267 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "CoreLocation: %s\n", v267);
    }
    if (v267 != buf) {
      free(v267);
    }
LABEL_155:
    sub_1902B4E0C(a1, 1);
    goto LABEL_162;
  }
  HIDWORD(v83) = -858993459 * *(_DWORD *)(a1 + 324) + 429496728;
  LODWORD(v83) = HIDWORD(v83);
  if ((v83 >> 1) <= 0x19999998)
  {
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
    }
    v84 = qword_1E929D790;
    if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
    {
      double v85 = *a3;
      uint64_t v86 = *((void *)a3 + 1);
      uint64_t v87 = *((void *)a3 + 2);
      uint64_t v88 = *((void *)a3 + 3);
      *(_DWORD *)int buf = 67110912;
      *(_DWORD *)&uint8_t buf[4] = v52;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v53;
      *(_WORD *)&buf[14] = 2048;
      *(double *)&uint8_t buf[16] = v50;
      *(_WORD *)&buf[24] = 2048;
      *(double *)&buf[26] = v48;
      *(_WORD *)&buf[34] = 2048;
      *(double *)&buf[36] = v85;
      *(_WORD *)&buf[44] = 2048;
      *(void *)&buf[46] = v86;
      *(_WORD *)&buf[54] = 2048;
      *(void *)&buf[56] = v87;
      *(_WORD *)&buf[64] = 2048;
      *(void *)&buf[66] = v88;
      _os_log_impl(&dword_1902AF000, v84, OS_LOG_TYPE_DEBUG, "device status: (smooth static) = (%d %d), rotM,%.3f,rotV,%.3f, q.x,%.3f,q.y,%.3f,q.z,%.3f,q.w,%.3f)", buf, 0x4Au);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
      }
      double v405 = *a3;
      uint64_t v406 = *((void *)a3 + 1);
      uint64_t v407 = *((void *)a3 + 2);
      uint64_t v408 = *((void *)a3 + 3);
      *(_DWORD *)v476 = 67110912;
      *(_DWORD *)&v476[4] = v52;
      *(_WORD *)&v476[8] = 1024;
      *(_DWORD *)&v476[10] = v53;
      *(_WORD *)&v476[14] = 2048;
      *(double *)&v476[16] = v50;
      *(_WORD *)&v476[24] = 2048;
      *(double *)&v476[26] = v48;
      *(_WORD *)&v476[34] = 2048;
      *(double *)&v476[36] = v405;
      *(_WORD *)&v476[44] = 2048;
      *(void *)&v476[46] = v406;
      *(_WORD *)&v476[54] = 2048;
      *(void *)&v476[56] = v407;
      *(_WORD *)&v476[64] = 2048;
      *(void *)&v476[66] = v408;
      v409 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "CoreLocation: %s\n", v409);
      if (v409 != buf) {
        free(v409);
      }
    }
  }
LABEL_162:
  int v89 = *(unsigned __int8 *)(a1 + 57);
  if (!*(unsigned char *)(a1 + 57) || *(_DWORD *)(a1 + 20) != 5 || !*(unsigned char *)(a1 + 220))
  {
    float64x2_t v461 = vnegq_f64(*(float64x2_t *)(a1 + 416));
    uint64_t v92 = *(void *)(a1 + 440);
    double v462 = -*(double *)(a1 + 432);
    uint64_t v463 = v92;
    sub_1904D39A0(&v457, v461.f64, a3);
    double v94 = v457;
    double v93 = v458;
    double v96 = v459;
    double v95 = v460;
    float v97 = v470;
    float v98 = v470 - *(float *)(a1 + 464);
    v455[0] = &unk_1EDFC7D60;
    float v99 = fabs(v457) + fabs(v458) + fabs(v459) + fabs(v460);
    if (v470 == 0.0) {
      float v97 = 1.0;
    }
    float v100 = v98 / v97;
    __asm { FMOV            V8.2S, #1.0 }
    float32x2_t v106 = vabs_f32(vdiv_f32(vsub_f32(v469, *(float32x2_t *)(a1 + 456)), (float32x2_t)vbsl_s8((int8x8_t)vceqz_f32(v469), _D8, (int8x8_t)v469)));
    v455[1] = v106;
    float v107 = fabsf(v100);
    float v456 = v107;
    if (v99 < 1.001)
    {
      double v108 = (float)(vaddv_f32(v106) + v107);
      if (v108 > 0.2)
      {
        ++*(_DWORD *)(a1 + 472);
        --*(_DWORD *)(a1 + 236);
        if (qword_1E929D798 != -1) {
          dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
        }
        v109 = qword_1E929D790;
        if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
        {
          int v110 = *(_DWORD *)(a1 + 472);
          *(_DWORD *)int buf = 67110400;
          *(_DWORD *)&uint8_t buf[4] = v110;
          *(_WORD *)&uint8_t buf[8] = 2048;
          *(double *)&buf[10] = v94;
          *(_WORD *)&buf[18] = 2048;
          *(double *)&buf[20] = v93;
          *(_WORD *)&buf[28] = 2048;
          *(double *)&buf[30] = v96;
          *(_WORD *)&buf[38] = 2048;
          *(double *)&CFRunLoopObserverContext buf[40] = v95;
          *(_WORD *)&buf[48] = 2048;
          *(double *)&buf[50] = v108;
          _os_log_impl(&dword_1902AF000, v109, OS_LOG_TYPE_DEBUG, "numSamplesSkipped (%d), deltaQ (%.3f/%.3f/%.3f/%.3f), deltaReadingM (%.3f)", buf, 0x3Au);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D798 != -1) {
            dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
          }
          int v111 = *(_DWORD *)(a1 + 472);
          *(_DWORD *)v476 = 67110400;
          *(_DWORD *)&v476[4] = v111;
          *(_WORD *)&v476[8] = 2048;
          *(double *)&v476[10] = v94;
          *(_WORD *)&v476[18] = 2048;
          *(double *)&v476[20] = v93;
          *(_WORD *)&v476[28] = 2048;
          *(double *)&v476[30] = v96;
          *(_WORD *)&v476[38] = 2048;
          *(double *)&v476[40] = v95;
          *(_WORD *)&v476[48] = 2048;
          *(double *)&v476[50] = v108;
          std::string::size_type v17 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "CoreLocation: %s\n", v17);
          goto LABEL_333;
        }
        return;
      }
    }
    if (v89 && *(_DWORD *)(a1 + 20) == 5)
    {
      if (!v53)
      {
        ++*(_DWORD *)(a1 + 472);
        --*(_DWORD *)(a1 + 236);
        return;
      }
      if (!*(unsigned char *)(a1 + 184)
        && !*(unsigned char *)(a1 + 220)
        && (float)(*(float *)(a1 + 16) * 4.0) <= (float)*(int *)(a1 + 236))
      {
        *(unsigned char *)(a1 + 220) = 1;
      }
    }
    uint64_t v112 = 0;
    uint64_t v113 = *(void *)(a1 + 1568);
    float v114 = 0.0;
    do
    {
      float v114 = v114 + *(float *)(v113 + v112);
      v112 += 40;
    }
    while (v112 != 360);
    double v115 = exp(v114 * 5.0) * 15.0;
    if (v115 > 5000.0) {
      double v115 = 5000.0;
    }
    if (v115 < 300.0) {
      double v115 = 300.0;
    }
    double v116 = exp(-1.0 / *(float *)(a1 + 16) / v115);
    int v117 = *(_DWORD *)(a1 + 472);
    if (v117 < 2)
    {
      double v119 = v116;
    }
    else
    {
      int v118 = v117 - 1;
      double v119 = v116;
      do
      {
        double v119 = v116 * v119;
        --v118;
      }
      while (v118);
    }
    uint64_t v120 = 0;
    int v121 = *(_DWORD *)(a1 + 20);
    *(float64x2_t *)(a1 + 1520) = vmlaq_n_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 144)), 1.0 - v119), *(float64x2_t *)(a1 + 1520), v119);
    *(double *)(a1 + 1536) = (1.0 - v119) * *(float *)(a1 + 152) + v119 * *(double *)(a1 + 1536);
    double v122 = v119 * v119;
    double v123 = (1.0 - v119 * v119) * 6.25;
    uint64_t v124 = v113 + 240;
    for (uint64_t i = 6; i != 9; ++i)
    {
      for (uint64_t j = 0; j != 108; j += 36)
      {
        float v127 = v122 * *(float *)(v124 + j);
        if (v120 == j)
        {
          float v128 = v123 + v127;
          float v127 = v128;
        }
        *(float *)(v124 + j) = v127;
      }
      v120 += 36;
      v124 += 4;
    }
    sub_1904D3A74((void **)(a1 + 1544), v113, 9);
    uint64_t v129 = 0;
    uint64_t v130 = *(void *)(a1 + 1576);
    float32x2_t v131 = v469;
    *(float *)(v130 + 36) = -v469.f32[0];
    *(float *)(v130 + 52) = -v131.f32[1];
    float v132 = v470;
    *(float *)(v130 + 68) = -v470;
    *(_DWORD *)(v130 + 72) = *(_DWORD *)(a1 + 352);
    *(_DWORD *)(v130 + 84) = *(_DWORD *)(a1 + 356);
    *(_DWORD *)(v130 + 96) = *(_DWORD *)(a1 + 360);
    *(_DWORD *)(v130 + 76) = *(_DWORD *)(a1 + 376);
    *(_DWORD *)(v130 + 88) = *(_DWORD *)(a1 + 380);
    *(_DWORD *)(v130 + 100) = *(_DWORD *)(a1 + 384);
    *(_DWORD *)(v130 + 80) = *(_DWORD *)(a1 + 400);
    *(_DWORD *)(v130 + 92) = *(_DWORD *)(a1 + 404);
    *(_DWORD *)(v130 + 104) = *(_DWORD *)(a1 + 408);
    v486 = (void *)_D8;
    v487.i32[0] = 1065353216;
    float v492 = 0.0;
    float32x2_t v491 = 0;
    v133 = (float *)v130;
    do
    {
      float v134 = v491.f32[v129];
      v135 = v133;
      for (uint64_t k = 1472; k != 1544; k += 8)
      {
        float v137 = *v135;
        v135 += 3;
        float v134 = v134 + v137 * *(double *)(a1 + k);
      }
      v491.f32[v129++] = v134;
      ++v133;
    }
    while (v129 != 3);
    float32x2_t v489 = vsub_f32(v131, v491);
    float v490 = v132 - v492;
    sub_1904D3318(buf, (uint64_t *)(a1 + 1544), v130, (uint64_t)&v486, (uint64_t)&v489, 9, 3, (uint64_t)v476);
    v138 = *(void **)(a1 + 1568);
    bzero(*(void **)(a1 + 1584), 0x144uLL);
    bzero(v138, 0x144uLL);
    uint64_t v139 = 0;
    uint64_t v140 = *(void *)(a1 + 1552);
    v141 = *(float **)(a1 + 1584);
    uint64_t v142 = *(void *)(a1 + 1544);
    v143 = v141;
    do
    {
      v141[10 * v139] = *(float *)(v140 + 4 * v139);
      if (v139)
      {
        uint64_t v144 = 0;
        v145 = v143;
        do
        {
          float *v145 = *(float *)(v140 + 4 * v139) * *(float *)(v142 + 4 * (((int)v139 - 1) * (int)v139 / 2) + 4 * v144);
          v145 += 9;
          ++v144;
        }
        while (v139 != v144);
      }
      ++v139;
      ++v143;
    }
    while (v139 != 9);
    for (unint64_t m = 0; m != 9; ++m)
    {
      unint64_t v147 = 0;
      uint64_t v148 = *(void *)(a1 + 1544);
      v149 = v141;
      do
      {
        if (m <= v147) {
          LODWORD(n) = v147;
        }
        else {
          LODWORD(n) = m;
        }
        uint64_t v151 = 9 * v147;
        if (m >= v147)
        {
          float v152 = v141[v151 + (int)n] + 0.0;
          LODWORD(n) = n + 1;
        }
        else
        {
          float v152 = 0.0;
        }
        if ((int)n <= 8)
        {
          for (uint64_t n = n; n != 9; ++n)
            float v152 = v152 + (float)(*(float *)(v148 + 4 * (m + ((int)n - 1) * (int)n / 2)) * v149[n]);
        }
        *((float *)v138 + v151 + m) = v152;
        ++v147;
        v149 += 9;
      }
      while (v147 != 9);
    }
    for (iuint64_t i = 0; ii != 72; ii += 8)
      *(double *)(a1 + ii + 1472) = *(double *)&buf[ii] + *(double *)(a1 + ii + 1472);
    float v154 = *(double *)(a1 + 1520);
    float v155 = *(double *)(a1 + 1528);
    float v156 = *(double *)(a1 + 1536);
    *(float *)(a1 + 144) = v154;
    *(float *)(a1 + 148) = v155;
    *(float *)(a1 + 152) = v156;
    if (v121 > 0)
    {
      int v157 = *(_DWORD *)(a1 + 504) + 1;
      *(_DWORD *)(a1 + 504) = v157;
      float v158 = *(float *)(a1 + 488) + v154;
      *(float *)(a1 + 488) = v158;
      float v159 = *(float *)(a1 + 492) + v155;
      *(float *)(a1 + 492) = v159;
      float v160 = *(float *)(a1 + 496) + v156;
      *(float *)(a1 + 496) = v160;
      float v161 = 1.0 / (double)v157;
      *(float *)(a1 + 144) = v158 * v161;
      *(float *)(a1 + 148) = v159 * v161;
      *(float *)(a1 + 152) = v160 * v161;
    }
    *(void *)(a1 + 1592) = 0;
    *(void *)(a1 + 1600) = 0;
    v162 = (_OWORD *)(a1 + 1592);
    float v163 = *(double *)(a1 + 1472);
    *(float *)int buf = v163;
    float v164 = *(double *)(a1 + 1480);
    *(float *)v476 = v164;
    float v165 = *(double *)(a1 + 1488);
    *(float *)&v486 = v165;
    sub_1902D9094(a1 + 784, (float *)buf);
    sub_1902D9094(a1 + 856, (float *)v476);
    sub_1902D9094(a1 + 928, (float *)&v486);
    uint64_t v166 = 0;
    v167 = *(float **)(a1 + 1568);
    float v168 = 0.0;
    do
    {
      float v169 = *v167;
      v167 += 10;
      v491.f32[v166] = v169;
      float v168 = v168 + v169;
      ++v166;
    }
    while (v166 != 3);
    unint64_t v170 = *(void *)(a1 + 848);
    float v171 = 0.0;
    float v172 = 0.0;
    if (v170 >= 2)
    {
      float v173 = (float)((float)v170 * *(float *)(a1 + 804)) - (float)(*(float *)(a1 + 800) * *(float *)(a1 + 800));
      float v172 = 0.0;
      if (v173 >= 0.0) {
        float v172 = v173 / (float)((v170 - 1) * v170);
      }
    }
    float v174 = sqrtf(v172);
    v489.f32[0] = v174;
    unint64_t v175 = *(void *)(a1 + 920);
    if (v175 >= 2)
    {
      float v176 = (float)((float)v175 * *(float *)(a1 + 876)) - (float)(*(float *)(a1 + 872) * *(float *)(a1 + 872));
      if (v176 >= 0.0) {
        float v171 = v176 / (float)((v175 - 1) * v175);
      }
    }
    float v177 = sqrtf(v171);
    v489.f32[1] = v177;
    unint64_t v178 = *(void *)(a1 + 992);
    float v179 = 0.0;
    if (v178 >= 2)
    {
      float v180 = (float)((float)v178 * *(float *)(a1 + 948)) - (float)(*(float *)(a1 + 944) * *(float *)(a1 + 944));
      if (v180 >= 0.0) {
        float v179 = v180 / (float)((v178 - 1) * v178);
      }
    }
    float v490 = sqrtf(v179);
    float v181 = (float)(v174 + v177) + v490;
    if (v181 > 1000.0)
    {
LABEL_248:
      sub_1902B9710(a1, (float *)&v464);
LABEL_467:
      if (*(unsigned char *)(a1 + 244))
      {
        int v312 = *(_DWORD *)(a1 + 20);
        int v313 = *(_DWORD *)(a1 + 1592);
        if (v312 >= 2)
        {
          if (v312 != v313) {
            goto LABEL_471;
          }
          double v314 = *(double *)(a1 + 1472);
          double v315 = vabdd_f64(*(float *)(a1 + 520), v314);
          LODWORD(v314) = *(_DWORD *)(a1 + 1596);
          double v316 = *(double *)(a1 + 1480);
          double v317 = vabdd_f64(*(float *)(a1 + 524), v316);
          LODWORD(v316) = *(_DWORD *)(a1 + 1600);
          double v318 = v317 * (double)*(unint64_t *)&v316 + v315 * (double)*(unint64_t *)&v314;
          double v319 = *(double *)(a1 + 1488);
          double v320 = vabdd_f64(*(float *)(a1 + 528), v319);
          LODWORD(v319) = *(_DWORD *)(a1 + 1604);
          *(float *)&double v318 = v318 + v320 * (double)*(unint64_t *)&v319;
          int v313 = *(_DWORD *)(a1 + 20);
          if (*(float *)&v318 > 2.5) {
LABEL_471:
          }
            *(unsigned char *)(a1 + 25) = 1;
        }
        float v321 = *(double *)(a1 + 1472);
        float v322 = *(double *)(a1 + 1480);
        float v323 = *(double *)(a1 + 1488);
        *(float *)(a1 + 72) = v321;
        *(float *)(a1 + 76) = v322;
        *(float *)(a1 + 80) = v323;
        float v324 = *(double *)(a1 + 1512);
        *(float32x2_t *)(a1 + 96) = vcvt_f32_f64(*(float64x2_t *)(a1 + 1496));
        *(float *)(a1 + 104) = v324;
        float v325 = *(double *)(a1 + 1536);
        *(float32x2_t *)(a1 + 120) = vcvt_f32_f64(*(float64x2_t *)(a1 + 1520));
        *(float *)(a1 + 128) = v325;
        *(_DWORD *)(a1 + 20) = v313;
        *(void *)(a1 + 168) = *(void *)(a1 + 1596);
        *(_DWORD *)(a1 + 176) = *(_DWORD *)(a1 + 1604);
        if (*(unsigned char *)(a1 + 25))
        {
          *(float *)(a1 + 520) = v321;
          *(float *)(a1 + 524) = v322;
          *(float *)(a1 + 528) = v323;
        }
        *(unsigned char *)(a1 + 24) = 0;
        *(unsigned char *)(a1 + 252) = 0;
        if (qword_1E929D798 != -1) {
          dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
        }
        v326 = qword_1E929D790;
        if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v327 = *(void *)(a1 + 1472);
          uint64_t v328 = *(void *)(a1 + 1480);
          uint64_t v329 = *(void *)(a1 + 1488);
          uint64_t v330 = *(void *)(a1 + 1496);
          uint64_t v331 = *(void *)(a1 + 1504);
          uint64_t v332 = *(void *)(a1 + 1512);
          uint64_t v333 = *(void *)(a1 + 1520);
          uint64_t v334 = *(void *)(a1 + 1528);
          double v335 = *(double *)(a1 + 1536);
          *(_DWORD *)int buf = 134220032;
          *(void *)&uint8_t buf[4] = v327;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v328;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&buf[24] = v329;
          *(_WORD *)&buf[32] = 2048;
          *(void *)&buf[34] = v330;
          *(_WORD *)&buf[42] = 2048;
          *(void *)&buf[44] = v331;
          *(_WORD *)&buf[52] = 2048;
          *(void *)&buf[54] = v332;
          *(_WORD *)&buf[62] = 2048;
          *(void *)&buf[64] = v333;
          *(_WORD *)&buf[72] = 2048;
          *(void *)&buf[74] = v334;
          __int16 v494 = 2048;
          double v495 = v335;
          _os_log_impl(&dword_1902AF000, v326, OS_LOG_TYPE_DEBUG, "bias.x,%.3f,bias.y,%.3f,bias.z,%.3f,scale.x,%.5f,scale.y,%.5f,scale.z,%.5f,extF.x,%.3f,extF.y,%.3f,extF.z,%.3f", buf, 0x5Cu);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D798 != -1) {
            dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
          }
          uint64_t v391 = *(void *)(a1 + 1472);
          uint64_t v392 = *(void *)(a1 + 1480);
          uint64_t v393 = *(void *)(a1 + 1488);
          uint64_t v394 = *(void *)(a1 + 1496);
          uint64_t v395 = *(void *)(a1 + 1504);
          uint64_t v396 = *(void *)(a1 + 1512);
          uint64_t v397 = *(void *)(a1 + 1520);
          double v398 = *(double *)(a1 + 1528);
          double v399 = *(double *)(a1 + 1536);
          *(_DWORD *)v476 = 134220032;
          *(void *)&v476[4] = v391;
          *(_WORD *)&v476[12] = 2048;
          *(void *)&v476[14] = v392;
          *(_WORD *)&v476[22] = 2048;
          *(void *)&v476[24] = v393;
          *(_WORD *)&v476[32] = 2048;
          *(void *)&v476[34] = v394;
          *(_WORD *)&v476[42] = 2048;
          *(void *)&v476[44] = v395;
          *(_WORD *)&v476[52] = 2048;
          *(void *)&v476[54] = v396;
          *(_WORD *)&v476[62] = 2048;
          *(void *)&v476[64] = v397;
          *(_WORD *)&v476[72] = 2048;
          double v477 = v398;
          __int16 v478 = 2048;
          double v479 = v399;
          v400 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::setCalibrationValues()", "CoreLocation: %s\n", v400);
          if (v400 != buf) {
            free(v400);
          }
        }
        sub_1902B4E0C(a1, 0);
        *(unsigned char *)(a1 + 244) = 0;
        *(unsigned char *)(a1 + 220) = 0;
      }
      *(_DWORD *)(a1 + 472) = 0;
      long long v336 = *((_OWORD *)a3 + 1);
      *(_OWORD *)(a1 + 416) = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 432) = v336;
      if (&v468 != (void **)(a1 + 448))
      {
        *(float32x2_t *)(a1 + 456) = v469;
        *(float *)(a1 + 464) = v470;
      }
      return;
    }
    if (*(int *)(a1 + 20) < 3 || *(unsigned char *)(a1 + 24)) {
      float v182 = 0.08;
    }
    else {
      float v182 = 0.04;
    }
    uint64_t v183 = 0;
    int v184 = 0;
    float v185 = 0.0;
    do
    {
      int v186 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
      float v187 = v491.f32[v183];
      if (v187 <= 0.02) {
        int v188 = v186;
      }
      else {
        int v188 = 0;
      }
      if (v188 == 1 && v489.f32[v183] > 10.0) {
        goto LABEL_248;
      }
      if (v187 > v185) {
        float v185 = v491.f32[v183];
      }
      if (v187 <= v182 && v489.f32[v183] <= 1.0)
      {
        *(_DWORD *)(a1 + v183 * 4 + 1596) = 1;
        ++v184;
      }
      ++v183;
    }
    while (v183 != 3);
    if (v168 <= 0.125
      && (v184 == 3
       || (int v212 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1), v181 < 15.0)
       && v212 != 1
       && v185 <= 0.08))
    {
      _OWORD *v162 = xmmword_19060B760;
      *(_DWORD *)(a1 + 320) = -1;
      if (v168 <= 0.06) {
        *(_DWORD *)v162 = 5;
      }
    }
    else if (v181 <= 1.0 && v184 >= 1)
    {
      if (v168 <= 0.6)
      {
        *(_DWORD *)v162 = 3;
        if (v184 <= 1)
        {
          uint64_t v238 = 0;
          int v239 = -1;
          float v240 = 9.0;
          do
          {
            if (!*(_DWORD *)(a1 + 1596 + 4 * v238) && v491.f32[v238] < v240)
            {
              int v239 = v238;
              float v240 = v491.f32[v238];
            }
            ++v238;
          }
          while (v238 != 3);
          *(_DWORD *)(a1 + 4 * v239 + 1596) = 1;
        }
      }
      else if (v184 >= 2)
      {
        *(_DWORD *)v162 = v184;
      }
      if (*(_DWORD *)(a1 + 1596))
      {
        *(_DWORD *)(a1 + 320) = 0;
      }
      else
      {
        if (*(_DWORD *)(a1 + 1600)) {
          int v241 = 1;
        }
        else {
          int v241 = 2;
        }
        *(_DWORD *)(a1 + 320) = v241;
      }
    }
    float v475 = 0.0;
    if (*(unsigned char *)(a1 + 57))
    {
      int v268 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
      int v269 = *(_DWORD *)(a1 + 1592);
      int v270 = *(_DWORD *)(a1 + 20);
      if (v269 >= v270) {
        int v271 = v268;
      }
      else {
        int v271 = 0;
      }
      if (v271 == 1)
      {
        float v272 = *(float *)(a1 + 80) - *(double *)(a1 + 1488);
        float v273 = fabsf(v272);
        v486 = &unk_1EDFC7D60;
        float32x2_t v274 = vabs_f32(vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 72)), *(float64x2_t *)(a1 + 1472))));
        float32x2_t v487 = v274;
        float v488 = v273;
        if (v269 <= v270 && (float v275 = vaddv_f32(v274) + v273, 10.0 / (double)v270 >= v275))
        {
          if (v275 <= 1.0) {
            goto LABEL_467;
          }
          if (qword_1E929D798 != -1) {
            dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
          }
          v349 = qword_1E929D790;
          if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v350 = *(void *)(a1 + 1472);
            uint64_t v351 = *(void *)(a1 + 1480);
            uint64_t v352 = *(void *)(a1 + 1488);
            int v353 = *(_DWORD *)(a1 + 1608);
            *(_DWORD *)int buf = 134218752;
            *(void *)&uint8_t buf[4] = v350;
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v351;
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(void *)&buf[24] = v352;
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v353;
            _os_log_impl(&dword_1902AF000, v349, OS_LOG_TYPE_DEBUG, "estimates improved.(%.3f/%.3f/%.3f), numImprov=%d ", buf, 0x26u);
          }
          if (sub_1902D8400(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929D798 != -1) {
              dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
            }
            uint64_t v439 = *(void *)(a1 + 1472);
            uint64_t v440 = *(void *)(a1 + 1480);
            uint64_t v441 = *(void *)(a1 + 1488);
            int v442 = *(_DWORD *)(a1 + 1608);
            *(_DWORD *)v476 = 134218752;
            *(void *)&v476[4] = v439;
            *(_WORD *)&v476[12] = 2048;
            *(void *)&v476[14] = v440;
            *(_WORD *)&v476[22] = 2048;
            *(void *)&v476[24] = v441;
            *(_WORD *)&v476[32] = 1024;
            *(_DWORD *)&v476[34] = v442;
            v443 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "CoreLocation: %s\n", v443);
            if (v443 != buf) {
              free(v443);
            }
          }
          float v354 = *(double *)(a1 + 1472);
          *(float *)int buf = v354;
          float v355 = *(double *)(a1 + 1480);
          *(float *)v476 = v355;
          float v356 = *(double *)(a1 + 1488);
          float v484 = v356;
          sub_190528E34(a1 + 1232, (float *)buf, (float *)v476, &v484);
          uint64_t v357 = 0;
          float v358 = 0.0;
          do
          {
            float v358 = v358 + (float)((float)*(unsigned int *)(a1 + v357 * 4 + 1596) * v491.f32[v357]);
            ++v357;
          }
          while (v357 != 3);
          if (v358 < 0.03)
          {
            unsigned int v359 = *(_DWORD *)(a1 + 1608) + 1;
            *(_DWORD *)(a1 + 1608) = v359;
            if (v359 >= 2)
            {
              if (qword_1E929D798 != -1) {
                dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
              }
              v360 = qword_1E929D790;
              if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
              {
                int v361 = *(unsigned __int8 *)(a1 + 184);
                *(_DWORD *)int buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v361;
                _os_log_impl(&dword_1902AF000, v360, OS_LOG_TYPE_DEBUG, "new estimates needed, fIsCoasting (%d)", buf, 8u);
              }
              if (sub_1902D8400(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929D798 != -1) {
                  dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
                }
                int v445 = *(unsigned __int8 *)(a1 + 184);
                *(_DWORD *)v476 = 67109120;
                *(_DWORD *)&v476[4] = v445;
                v446 = (char *)_os_log_send_and_compose_impl();
                sub_1902D398C("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "CoreLocation: %s\n", v446);
                if (v446 != buf) {
                  free(v446);
                }
              }
              sub_1902CADC0((float64x2_t *)a1, (float *)&v464, v454, *(_DWORD *)(a1 + 1592));
              *(_DWORD *)(a1 + 1608) = 0;
              goto LABEL_467;
            }
          }
        }
        else
        {
          if (qword_1E929D798 != -1) {
            dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
          }
          v276 = qword_1E929D790;
          if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v277 = *(void *)(a1 + 1472);
            uint64_t v278 = *(void *)(a1 + 1480);
            uint64_t v279 = *(void *)(a1 + 1488);
            int v280 = *(_DWORD *)(a1 + 1596);
            int v281 = *(_DWORD *)(a1 + 1600);
            int v282 = *(_DWORD *)(a1 + 1604);
            int v283 = *(_DWORD *)(a1 + 1592);
            *(_DWORD *)int buf = 134219776;
            *(void *)&uint8_t buf[4] = v277;
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v278;
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(void *)&buf[24] = v279;
            *(_WORD *)&buf[32] = 2048;
            *(double *)&buf[34] = v168;
            *(_WORD *)&buf[42] = 1024;
            *(_DWORD *)&buf[44] = v280;
            *(_WORD *)&buf[48] = 1024;
            *(_DWORD *)&buf[50] = v281;
            *(_WORD *)&buf[54] = 1024;
            *(_DWORD *)&buf[56] = v282;
            *(_WORD *)&buf[60] = 1024;
            *(_DWORD *)&buf[62] = v283;
            _os_log_impl(&dword_1902AF000, v276, OS_LOG_TYPE_DEBUG, "calibrated, first estimates completed (%.3f/%.3f/%.3f/%.3f), conv(%d %d %d), level (%d)", buf, 0x42u);
          }
          if (sub_1902D8400(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929D798 != -1) {
              dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
            }
            uint64_t v415 = *(void *)(a1 + 1472);
            uint64_t v416 = *(void *)(a1 + 1480);
            uint64_t v417 = *(void *)(a1 + 1488);
            int v418 = *(_DWORD *)(a1 + 1596);
            int v419 = *(_DWORD *)(a1 + 1600);
            int v420 = *(_DWORD *)(a1 + 1604);
            int v421 = *(_DWORD *)(a1 + 1592);
            *(_DWORD *)v476 = 134219776;
            *(void *)&v476[4] = v415;
            *(_WORD *)&v476[12] = 2048;
            *(void *)&v476[14] = v416;
            *(_WORD *)&v476[22] = 2048;
            *(void *)&v476[24] = v417;
            *(_WORD *)&v476[32] = 2048;
            *(double *)&v476[34] = v168;
            *(_WORD *)&v476[42] = 1024;
            *(_DWORD *)&v476[44] = v418;
            *(_WORD *)&v476[48] = 1024;
            *(_DWORD *)&v476[50] = v419;
            *(_WORD *)&v476[54] = 1024;
            *(_DWORD *)&v476[56] = v420;
            *(_WORD *)&v476[60] = 1024;
            *(_DWORD *)&v476[62] = v421;
            v422 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "CoreLocation: %s\n", v422);
            if (v422 != buf) {
              free(v422);
            }
          }
          float v284 = *(double *)(a1 + 1472);
          *(float *)int buf = v284;
          float v285 = *(double *)(a1 + 1480);
          *(float *)v476 = v285;
          float v286 = *(double *)(a1 + 1488);
          float v484 = v286;
          sub_1902D9094(a1 + 1248, (float *)buf);
          sub_1902D9094(a1 + 1320, (float *)v476);
          sub_1902D9094(a1 + 1392, &v484);
          *(void *)v476 = *(void *)(a1 + 168);
          *(_DWORD *)&v476[8] = *(_DWORD *)(a1 + 176);
          if (!sub_1902B991C(a1, (unsigned int *)v476, *(_DWORD *)(a1 + 1592), &v475))
          {
            if (qword_1E929D798 != -1) {
              dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
            }
            v308 = qword_1E929D790;
            if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
            {
              int v309 = *(unsigned __int8 *)(a1 + 184);
              *(_DWORD *)int buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v309;
              _os_log_impl(&dword_1902AF000, v308, OS_LOG_TYPE_DEBUG, "new estimates denied, fIsCoasting (%d)", buf, 8u);
            }
            if (sub_1902D8400(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929D798 != -1) {
                dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
              }
              int v434 = *(unsigned __int8 *)(a1 + 184);
              float v484 = 1.5047e-36;
              int v485 = v434;
              v435 = (char *)_os_log_send_and_compose_impl();
              sub_1902D398C("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "CoreLocation: %s\n", v435);
              if (v435 != buf) {
                free(v435);
              }
            }
            sub_1902CADC0((float64x2_t *)a1, (float *)&v464, v454, *(_DWORD *)(a1 + 1592));
            goto LABEL_467;
          }
          if ((*(_DWORD *)(a1 + 172) + *(_DWORD *)(a1 + 168) + *(_DWORD *)(a1 + 176)) <= 2
            && (float)(*(float *)(a1 + 16) * 180.0) < (float)*(int *)(a1 + 236))
          {
            int v287 = *(_DWORD *)(a1 + 1592);
            if (v287 >= 4 && v287 > *(_DWORD *)(a1 + 20))
            {
              sub_1902CADC0((float64x2_t *)a1, (float *)&v464, v454, v287);
              goto LABEL_467;
            }
          }
          if (qword_1E929D798 != -1) {
            dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
          }
          v310 = qword_1E929D790;
          if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
          {
            int v311 = *(unsigned __int8 *)(a1 + 184);
            *(_DWORD *)int buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v311;
            _os_log_impl(&dword_1902AF000, v310, OS_LOG_TYPE_DEBUG, "taking new estimates, fIsCoasting (%d)", buf, 8u);
          }
          if (sub_1902D8400(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929D798 != -1) {
              dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
            }
            int v437 = *(unsigned __int8 *)(a1 + 184);
            float v484 = 1.5047e-36;
            int v485 = v437;
            v438 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "CoreLocation: %s\n", v438);
            if (v438 != buf) {
              free(v438);
            }
          }
        }
      }
      else
      {
        if (v269 <= v270) {
          goto LABEL_467;
        }
        if (qword_1E929D798 != -1) {
          dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
        }
        v297 = qword_1E929D790;
        if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v298 = *(void *)(a1 + 1472);
          uint64_t v299 = *(void *)(a1 + 1480);
          uint64_t v300 = *(void *)(a1 + 1488);
          int v301 = *(_DWORD *)(a1 + 1596);
          int v302 = *(_DWORD *)(a1 + 1600);
          int v303 = *(_DWORD *)(a1 + 1604);
          int v304 = *(_DWORD *)(a1 + 1592);
          *(_DWORD *)int buf = 134219776;
          *(void *)&uint8_t buf[4] = v298;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v299;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&buf[24] = v300;
          *(_WORD *)&buf[32] = 2048;
          *(double *)&buf[34] = v168;
          *(_WORD *)&buf[42] = 1024;
          *(_DWORD *)&buf[44] = v301;
          *(_WORD *)&buf[48] = 1024;
          *(_DWORD *)&buf[50] = v302;
          *(_WORD *)&buf[54] = 1024;
          *(_DWORD *)&buf[56] = v303;
          *(_WORD *)&buf[60] = 1024;
          *(_DWORD *)&buf[62] = v304;
          _os_log_impl(&dword_1902AF000, v297, OS_LOG_TYPE_DEBUG, "first estimates completed (%.3f/%.3f/%.3f/%.3f), conv(%d %d %d), level (%d)", buf, 0x42u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D798 != -1) {
            dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
          }
          uint64_t v426 = *(void *)(a1 + 1472);
          uint64_t v427 = *(void *)(a1 + 1480);
          uint64_t v428 = *(void *)(a1 + 1488);
          int v429 = *(_DWORD *)(a1 + 1596);
          int v430 = *(_DWORD *)(a1 + 1600);
          int v431 = *(_DWORD *)(a1 + 1604);
          int v432 = *(_DWORD *)(a1 + 1592);
          *(_DWORD *)v476 = 134219776;
          *(void *)&v476[4] = v426;
          *(_WORD *)&v476[12] = 2048;
          *(void *)&v476[14] = v427;
          *(_WORD *)&v476[22] = 2048;
          *(void *)&v476[24] = v428;
          *(_WORD *)&v476[32] = 2048;
          *(double *)&v476[34] = v168;
          *(_WORD *)&v476[42] = 1024;
          *(_DWORD *)&v476[44] = v429;
          *(_WORD *)&v476[48] = 1024;
          *(_DWORD *)&v476[50] = v430;
          *(_WORD *)&v476[54] = 1024;
          *(_DWORD *)&v476[56] = v431;
          *(_WORD *)&v476[60] = 1024;
          *(_DWORD *)&v476[62] = v432;
          v433 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "CoreLocation: %s\n", v433);
          if (v433 != buf) {
            free(v433);
          }
        }
        sub_1902B5164((void *)(a1 + 1248));
        sub_1902B5164((void *)(a1 + 1320));
        sub_1902B5164((void *)(a1 + 1392));
        float v305 = *(double *)(a1 + 1472);
        *(float *)int buf = v305;
        float v306 = *(double *)(a1 + 1480);
        *(float *)v476 = v306;
        float v307 = *(double *)(a1 + 1488);
        *(float *)&v486 = v307;
        sub_1902D9094(a1 + 1248, (float *)buf);
        sub_1902D9094(a1 + 1320, (float *)v476);
        sub_1902D9094(a1 + 1392, (float *)&v486);
      }
      *(unsigned char *)(a1 + 244) = 1;
      goto LABEL_467;
    }
    if (!*(unsigned char *)(a1 + 333) || *(_DWORD *)(a1 + 1592) < *(_DWORD *)(a1 + 1464))
    {
      if (!*(unsigned char *)(a1 + 24)
        || (int v288 = *(_DWORD *)(a1 + 1592), v288 < *(_DWORD *)(a1 + 20)) && (v184 < 2 || v288 <= 2))
      {
        if (!*(unsigned char *)(a1 + 184)) {
          goto LABEL_467;
        }
        BOOL v289 = roundf(*(float *)(a1 + 16) * 20.0) >= (float)*(int *)(a1 + 232) || v184 < 2;
        if (v289 || *(int *)v162 < 3) {
          goto LABEL_467;
        }
      }
    }
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
    }
    v290 = qword_1E929D790;
    if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v291 = *(void *)(a1 + 1472);
      uint64_t v292 = *(void *)(a1 + 1480);
      uint64_t v293 = *(void *)(a1 + 1488);
      *(_DWORD *)int buf = 134218496;
      *(void *)&uint8_t buf[4] = v291;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v292;
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(void *)&buf[24] = v293;
      _os_log_impl(&dword_1902AF000, v290, OS_LOG_TYPE_DEBUG, "new internal estimates (%.3f %.3f %.3f)", buf, 0x20u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
      }
      uint64_t v410 = *(void *)(a1 + 1472);
      uint64_t v411 = *(void *)(a1 + 1480);
      uint64_t v412 = *(void *)(a1 + 1488);
      *(_DWORD *)v476 = 134218496;
      *(void *)&v476[4] = v410;
      *(_WORD *)&v476[12] = 2048;
      *(void *)&v476[14] = v411;
      *(_WORD *)&v476[22] = 2048;
      *(void *)&v476[24] = v412;
      v413 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "CoreLocation: %s\n", v413);
      if (v413 != buf) {
        free(v413);
      }
    }
    *(unsigned char *)(a1 + 57) = 1;
    if (!*(unsigned char *)(a1 + 333))
    {
      float v337 = *(double *)(a1 + 1472);
      *(float *)int buf = v337;
      float v338 = *(double *)(a1 + 1480);
      *(float *)v476 = v338;
      float v339 = *(double *)(a1 + 1488);
      *(float *)&v486 = v339;
      sub_1902D9094(a1 + 1248, (float *)buf);
      sub_1902D9094(a1 + 1320, (float *)v476);
      sub_1902D9094(a1 + 1392, (float *)&v486);
      BOOL v340 = sub_1902B991C(a1, (unsigned int *)(a1 + 1596), *(_DWORD *)(a1 + 1592), &v475);
      int v341 = *(_DWORD *)(a1 + 1592);
      if (v340)
      {
        if (v341 == 3 && *(int *)(a1 + 20) >= 4)
        {
          sub_190528E34(a1 + 1232, (float *)(a1 + 72), (float *)(a1 + 76), (float *)(a1 + 80));
          goto LABEL_467;
        }
        sub_1905290C4(a1);
        if (qword_1E929D798 != -1) {
          dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
        }
        v370 = qword_1E929D790;
        if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
        {
          int v371 = *(_DWORD *)v162;
          *(_DWORD *)int buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v371;
          _os_log_impl(&dword_1902AF000, v370, OS_LOG_TYPE_DEBUG, "taking new estimates, reached database. (%d)", buf, 8u);
        }
        if (!sub_1902D8400(115, 2)) {
          goto LABEL_467;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929D798 != -1) {
          dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
        }
        int v372 = *(_DWORD *)v162;
        *(_DWORD *)v476 = 67109120;
        *(_DWORD *)&v476[4] = v372;
        v348 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "CoreLocation: %s\n", v348);
      }
      else
      {
        sub_1902CADC0((float64x2_t *)a1, (float *)&v464, v454, v341);
        float v362 = v475;
        if (v475 > 25.0 && !*(unsigned char *)(a1 + 184)) {
          *(unsigned char *)(a1 + 252) = 1;
        }
        if (qword_1E929D798 != -1) {
          dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
        }
        v363 = qword_1E929D790;
        if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
        {
          int v364 = *(_DWORD *)(a1 + 1592);
          int v365 = *(unsigned __int8 *)(a1 + 252);
          *(_DWORD *)int buf = 67109632;
          *(_DWORD *)&uint8_t buf[4] = v364;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v365;
          *(_WORD *)&buf[14] = 2048;
          *(double *)&uint8_t buf[16] = v362;
          _os_log_impl(&dword_1902AF000, v363, OS_LOG_TYPE_DEBUG, "new esitmates disagree with database. (%d,%d,%.3f)", buf, 0x18u);
        }
        if (!sub_1902D8400(115, 2)) {
          goto LABEL_467;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929D798 != -1) {
          dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
        }
        int v366 = *(_DWORD *)(a1 + 1592);
        int v367 = *(unsigned __int8 *)(a1 + 252);
        *(_DWORD *)v476 = 67109632;
        *(_DWORD *)&v476[4] = v366;
        *(_WORD *)&v476[8] = 1024;
        *(_DWORD *)&v476[10] = v367;
        *(_WORD *)&v476[14] = 2048;
        *(double *)&v476[16] = v362;
        v348 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "CoreLocation: %s\n", v348);
      }
LABEL_537:
      if (v348 != buf) {
        free(v348);
      }
      goto LABEL_467;
    }
    float v294 = *(double *)(a1 + 1472);
    *(float *)int buf = v294;
    float v295 = *(double *)(a1 + 1480);
    *(float *)v476 = v295;
    float v296 = *(double *)(a1 + 1488);
    *(float *)&v486 = v296;
    sub_1902D9094(a1 + 1248, (float *)buf);
    sub_1902D9094(a1 + 1320, (float *)v476);
    sub_1902D9094(a1 + 1392, (float *)&v486);
    if (*(void *)(a1 + 1312) < *(void *)(a1 + 1256))
    {
      sub_1902CADC0((float64x2_t *)a1, (float *)&v464, v454, *(_DWORD *)(a1 + 1464));
      goto LABEL_467;
    }
    if (sub_1902B991C(a1, (unsigned int *)(a1 + 1596), *(_DWORD *)(a1 + 1464), &v475))
    {
      sub_1905290C4(a1);
      float v342 = *(double *)(a1 + 1472);
      float v343 = *(double *)(a1 + 1480);
      float v344 = *(double *)(a1 + 1488);
      sub_190529138(a1, v342, v343, v344);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
      }
      v345 = qword_1E929D790;
      if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
      {
        int v346 = *(unsigned __int8 *)(a1 + 184);
        *(_DWORD *)int buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v346;
        _os_log_impl(&dword_1902AF000, v345, OS_LOG_TYPE_DEBUG, "taking new estimates, Internal. fIsCoasting (%d)", buf, 8u);
      }
      if (!sub_1902D8400(115, 2)) {
        goto LABEL_467;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 == -1) {
        goto LABEL_494;
      }
    }
    else
    {
      sub_1902CADC0((float64x2_t *)a1, (float *)&v464, v454, *(_DWORD *)(a1 + 1592));
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
      }
      v368 = qword_1E929D790;
      if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
      {
        int v369 = *(unsigned __int8 *)(a1 + 184);
        *(_DWORD *)int buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v369;
        _os_log_impl(&dword_1902AF000, v368, OS_LOG_TYPE_DEBUG, "new estimates denied, fIsCoasting (%d)", buf, 8u);
      }
      if (!sub_1902D8400(115, 2)) {
        goto LABEL_467;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 == -1) {
        goto LABEL_494;
      }
    }
    dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
LABEL_494:
    int v347 = *(unsigned __int8 *)(a1 + 184);
    *(_DWORD *)v476 = 67109120;
    *(_DWORD *)&v476[4] = v347;
    v348 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "CoreLocation: %s\n", v348);
    goto LABEL_537;
  }
  HIDWORD(v90) = -858993459 * *(_DWORD *)(a1 + 324) + 429496728;
  LODWORD(v90) = HIDWORD(v90);
  if ((v90 >> 2) <= 0xCCCCCCC)
  {
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
    }
    v91 = qword_1E929D790;
    if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v91, OS_LOG_TYPE_DEBUG, "coasting vector is mature, no more updating", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
      }
      *(_WORD *)v476 = 0;
      std::string::size_type v17 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "CoreLocation: %s\n", v17);
      goto LABEL_333;
    }
  }
}

void sub_1902CADC0(float64x2_t *a1, float *a2, float32x2_t *a3, int a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  BYTE5(a1[20].f64[1]) = 1;
  BYTE1(a1[3].f64[1]) = 0;
  LODWORD(a1[91].f64[1]) = a4;
  float v6 = a2[2];
  float v7 = a2[3];
  float v8 = a2[4];
  float v9 = (float)((float)(a3[6].f32[0] * v7) + (float)(v6 * a3[3].f32[0])) + (float)(v8 * a3[9].f32[0]);
  float v10 = a1 + 92;
  float32x2_t v18 = vmla_n_f32(vmla_n_f32(vmul_n_f32(a3[5], v7), a3[2], v6), a3[8], v8);
  bzero(&a1[92], 0x48uLL);
  a1[92] = vcvtq_f64_f32(*(float32x2_t *)&a1[4].f64[1]);
  a1[93].f64[0] = *(float *)a1[5].f64;
  *(float64x2_t *)((char *)v10 + 24) = vcvtq_f64_f32(*(float32x2_t *)&a1[6].f64[0]);
  a1[94].f64[1] = *(float *)&a1[6].f64[1];
  a1[95] = vcvtq_f64_f32(v18);
  a1[96].f64[0] = v9;
  bzero(*(void **)&a1[98].f64[0], 0x144uLL);
  float v11 = 9.0;
  if ((*(unsigned int (**)(float64x2_t *))(*(void *)&a1->f64[0] + 72))(a1))
  {
    int v12 = HIDWORD(a1[1].f64[0]);
    if (!LOBYTE(a1[1].f64[1])) {
      v12 *= v12;
    }
    float v11 = 9.0 / (float)v12;
  }
  float64_t v13 = a1[98].f64[0];
  **(float **)&float64_t v13 = v11;
  *(float *)(*(void *)&v13 + 40) = v11;
  *(float *)(*(void *)&v13 + 80) = v11;
  *(_DWORD *)(*(void *)&v13 + 120) = 869711765;
  *(_DWORD *)(*(void *)&v13 + 160) = 869711765;
  *(_DWORD *)(*(void *)&v13 + 200) = 869711765;
  *(float *)(*(void *)&v13 + 240) = v11;
  *(float *)(*(void *)&v13 + 280) = v11;
  *(float *)(*(void *)&v13 + 320) = v11;
  a1[32].f64[1] = a1[4].f64[1];
  LODWORD(a1[33].f64[0]) = LODWORD(a1[5].f64[0]);
  sub_1905284FC((uint64_t)a1);
  if (qword_1E929D798 != -1) {
    dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
  }
  float v14 = qword_1E929D790;
  if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
  {
    int v15 = HIDWORD(a1[1].f64[0]);
    int v16 = LOBYTE(a1[1].f64[1]);
    *(_DWORD *)int buf = 67109888;
    int v20 = v15;
    __int16 v21 = 1024;
    int v22 = a4;
    __int16 v23 = 1024;
    int v24 = v16;
    __int16 v25 = 2048;
    double v26 = v11;
    _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_DEBUG, "reset internal. levels-data(%d %d %d), pScale=%.3f ", buf, 0x1Eu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
    }
    std::string::size_type v17 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::resetInternal(const CLVector3d<float> &, const CLMatrix3d<float> &, CLMotionTypeCompassCalibrationLevel)", "CoreLocation: %s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
}

void sub_1902CB12C(NSObject *a1)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  uint64_t v3 = sub_1902D6BD0();
  if (Current != *(CFRunLoopRef *)qword_1EB3BF828)
  {
    p_cache = CMDeviceOrientationManager.cache;
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    float v30 = off_1EB3BE890;
    double v26 = (void **)"CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 68289539;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = "assert";
      __int16 v47 = 2081;
      float v48 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v30, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setMatchingForDevices should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    double v31 = off_1EB3BE890;
    if (os_signpost_enabled((os_log_t)off_1EB3BE890))
    {
      *(_DWORD *)int buf = 68289539;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = "assert";
      __int16 v47 = 2081;
      float v48 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v31, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] setMatchingForDevices should be running on motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] setMatchingForDevices should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    a1 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 68289539;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = "assert";
      __int16 v47 = 2081;
      float v48 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, a1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setMatchingForDevices should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    uint64_t v35 = 281;
    double v36 = "setMatchingForDevices";
    double v34 = "/Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Shared/Motion/IO/CLIoHidInterface.mm";
    abort_report_np();
    __break(1u);
LABEL_49:
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
LABEL_28:
    uint64_t v27 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 134349056;
      *(void *)uint64_t v44 = p_cache;
      _os_log_impl(&dword_1902AF000, v27, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Setting matching multiple for %{public}lu events", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v26[275] != (void *)-1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
      int v41 = 134349056;
      *(void *)float v42 = p_cache;
      LODWORD(v35) = 12;
      double v32 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::setMatchingForDevices()", "CoreLocation: %s\n", v32);
      if (v32 != (char *)buf) {
        free(v32);
      }
    }
    objc_msgSend_arrayWithArray_(MEMORY[0x1E4F1C978], v28, (uint64_t)v38, v34, v35, v36);
    IOHIDEventSystemClientSetMatchingMultiple();
    sub_1902CB970((const char *)a1);
    sub_1902CC320((const char *)a1, 0);
    return;
  }
  CFRunLoopSourceContext context = (void *)MEMORY[0x192FCD2F0](v3);
  uint64_t v4 = sub_1902CD6B0();
  float v38 = objc_msgSend_arrayWithCapacity_(MEMORY[0x1E4F1CA48], v5, (a1[2].isa - a1[1].isa) >> 4);
  Class isa = a1[1].isa;
  Class v6 = a1[2].isa;
  if (isa == (void *)v6)
  {
    p_cache = 0;
LABEL_27:
    double v26 = CMDeviceOrientationManager.cache;
    if (qword_1EB3BE898 == -1) {
      goto LABEL_28;
    }
    goto LABEL_49;
  }
  p_cache = 0;
  while (1)
  {
    float v9 = (std::__shared_weak_count *)isa[1];
    if (v9) {
      break;
    }
LABEL_19:
    isa += 2;
    if (isa == (void *)v6) {
      goto LABEL_27;
    }
  }
  uint64_t v10 = *isa;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  float v11 = std::__shared_weak_count::lock(v9);
  if (!v11)
  {
LABEL_18:
    std::__shared_weak_count::__release_weak(v9);
    goto LABEL_19;
  }
  int v12 = v11;
  if (!v10)
  {
LABEL_17:
    sub_1902D8B58(v12);
    goto LABEL_18;
  }
  if ((v4 & 0x800000000000) != 0 || *(_DWORD *)(v10 + 20) != 65280 || *(_DWORD *)(v10 + 16) != 8)
  {
    if (*(void *)(v10 + 48))
    {
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
      float64_t v13 = off_1EB3BE890;
      if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEBUG))
      {
        int v15 = *(_DWORD *)(v10 + 16);
        int v14 = *(_DWORD *)(v10 + 20);
        *(_DWORD *)int buf = 67240448;
        *(_DWORD *)uint64_t v44 = v14;
        *(_WORD *)&v44[4] = 1026;
        *(_DWORD *)&v44[6] = v15;
        _os_log_impl(&dword_1902AF000, v13, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Adding match entry for usage pair {%{public}d, %{public}d}", buf, 0xEu);
      }
      unint64_t v17 = 0x1E4F28000uLL;
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE898 != -1) {
          dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
        }
        int v24 = *(_DWORD *)(v10 + 16);
        int v23 = *(_DWORD *)(v10 + 20);
        int v41 = 67240448;
        *(_DWORD *)float v42 = v23;
        *(_WORD *)&v42[4] = 1026;
        *(_DWORD *)&v42[6] = v24;
        LODWORD(v35) = 14;
        __int16 v25 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::setMatchingForDevices()", "CoreLocation: %s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
        unint64_t v17 = 0x1E4F28000;
      }
      v39[0] = @"PrimaryUsagePage";
      uint64_t v18 = objc_msgSend_numberWithInt_(*(void **)(v17 + 3792), v16, *(unsigned int *)(v10 + 20));
      v39[1] = @"PrimaryUsage";
      v40[0] = v18;
      v40[1] = objc_msgSend_numberWithInt_(*(void **)(v17 + 3792), v19, *(unsigned int *)(v10 + 16));
      uint64_t v21 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v20, (uint64_t)v40, v39, 2);
      objc_msgSend_setObject_atIndexedSubscript_(v38, v22, v21, p_cache);
      p_cache = (void **)((char *)p_cache + 1);
    }
    goto LABEL_17;
  }
  if (qword_1EB3BE898 != -1) {
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
  }
  __int16 v29 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_1902AF000, v29, OS_LOG_TYPE_INFO, "[CLIoHidInterface] Prox: remove set matching multiple", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    LOWORD(v41) = 0;
    uint64_t v33 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::setMatchingForDevices()", "CoreLocation: %s\n", v33);
    if (v33 != (char *)buf) {
      free(v33);
    }
  }
  IOHIDEventSystemClientSetMatchingMultiple();
  sub_1902CB970((const char *)a1);
  sub_1902CC320((const char *)a1, 0);
  sub_1902D8B58(v12);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1902CB940(_Unwind_Exception *a1)
{
  sub_1902D8B58(v2);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_1902CB970(const char *a1)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current == *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (qword_1EB3BE898 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    float v42 = off_1EB3BE890;
    a1 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 68289539;
      *(_DWORD *)float v64 = 0;
      *(_WORD *)&v64[4] = 2082;
      *(void *)&v64[6] = "";
      *(_WORD *)&v64[14] = 2082;
      *(void *)&v64[16] = "assert";
      *(_WORD *)&v64[24] = 2081;
      float v65 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v42, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] invalidateDeviceServiceRefs should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    float v43 = off_1EB3BE890;
    if (os_signpost_enabled((os_log_t)off_1EB3BE890))
    {
      *(_DWORD *)int buf = 68289539;
      *(_DWORD *)float v64 = 0;
      *(_WORD *)&v64[4] = 2082;
      *(void *)&v64[6] = "";
      *(_WORD *)&v64[14] = 2082;
      *(void *)&v64[16] = "assert";
      *(_WORD *)&v64[24] = 2081;
      float v65 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v43, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] invalidateDeviceServiceRefs should be running on motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] invalidateDeviceServiceRefs should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    uint64_t v44 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 68289539;
      *(_DWORD *)float v64 = 0;
      *(_WORD *)&v64[4] = 2082;
      *(void *)&v64[6] = "";
      *(_WORD *)&v64[14] = 2082;
      *(void *)&v64[16] = "assert";
      *(_WORD *)&v64[24] = 2081;
      float v65 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v44, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] invalidateDeviceServiceRefs should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    uint64_t v47 = 187;
    float v48 = "invalidateDeviceServiceRefs";
    uint64_t v46 = "/Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Shared/Motion/IO/CLIoHidInterface.mm";
    abort_report_np();
    __break(1u);
  }
  dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
LABEL_3:
  uint64_t v3 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_INFO, "[CLIoHidInterface] Invalidating hid service refs", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    LOWORD(v66[0]) = 0;
    LODWORD(v47) = 2;
    __int16 v45 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::invalidateDeviceServiceRefs()", "CoreLocation: %s\n", v45);
    if (v45 != (char *)buf) {
      free(v45);
    }
  }
  uint64_t v4 = (uint64_t *)*((void *)a1 + 1);
  CFStringRef v5 = (uint64_t *)*((void *)a1 + 2);
  if (v4 != v5)
  {
    uint64_t v49 = v5;
    do
    {
      Class v6 = (std::__shared_weak_count *)v4[1];
      if (v6)
      {
        uint64_t v7 = *v4;
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        BOOL v52 = v6;
        float v51 = std::__shared_weak_count::lock(v6);
        if (v51)
        {
          if (v7)
          {
            float v50 = v4;
            sub_1902CC21C(v7, v8);
            if (qword_1EB3BE898 != -1) {
              dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
            }
            float v9 = off_1EB3BE890;
            if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEBUG))
            {
              int v11 = *(_DWORD *)(v7 + 16);
              int v10 = *(_DWORD *)(v7 + 20);
              BOOL v12 = *(void *)(v7 + 48) != 0;
              uint64_t v13 = *(void *)(v7 + 24);
              *(_DWORD *)int buf = 67240961;
              *(_DWORD *)float v64 = v10;
              *(_WORD *)&v64[4] = 1026;
              *(_DWORD *)&v64[6] = v11;
              *(_WORD *)&v64[10] = 1026;
              *(_DWORD *)&v64[12] = v12;
              *(_WORD *)&v64[16] = 2049;
              *(void *)&v64[18] = v13;
              _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Device,hidUsagePage,%{public}d,hidUsage,%{public}d,hasCallback,%{public}d,serviceRef,%{private}p", buf, 0x1Eu);
            }
            if (sub_1902D8400(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EB3BE898 != -1) {
                dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
              }
              int v38 = *(_DWORD *)(v7 + 16);
              int v37 = *(_DWORD *)(v7 + 20);
              BOOL v39 = *(void *)(v7 + 48) != 0;
              uint64_t v40 = *(void *)(v7 + 24);
              v66[0] = 67240961;
              v66[1] = v37;
              __int16 v67 = 1026;
              int v68 = v38;
              __int16 v69 = 1026;
              BOOL v70 = v39;
              __int16 v71 = 2049;
              uint64_t v72 = v40;
              LODWORD(v47) = 30;
              int v41 = (char *)_os_log_send_and_compose_impl();
              sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::Device::print() const", "CoreLocation: %s\n", v41);
              if (v41 != (char *)buf) {
                free(v41);
              }
            }
            if (qword_1EB3BE898 != -1) {
              dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
            }
            if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEBUG))
            {
              long long v55 = 0u;
              long long v56 = 0u;
              long long v53 = 0u;
              long long v54 = 0u;
              int v15 = *(void **)(v7 + 160);
              uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v14, (uint64_t)&v53, v66, 16);
              if (v17)
              {
                uint64_t v18 = *(void *)v54;
                do
                {
                  uint64_t v19 = 0;
                  do
                  {
                    if (*(void *)v54 != v18) {
                      objc_enumerationMutation(v15);
                    }
                    uint64_t v20 = *(void *)(*((void *)&v53 + 1) + 8 * v19);
                    uint64_t v21 = objc_msgSend_objectForKeyedSubscript_(*(void **)(v7 + 160), v16, v20, v46, v47, v48);
                    if (qword_1EB3BE898 != -1) {
                      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
                    }
                    int v22 = off_1EB3BE890;
                    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v25 = objc_msgSend_value(v21, v23, v24);
                      int v28 = objc_msgSend_dirty(v21, v26, v27);
                      *(_DWORD *)int buf = 138543874;
                      *(void *)float v64 = v20;
                      *(_WORD *)&v64[8] = 2114;
                      *(void *)&v64[10] = v25;
                      *(_WORD *)&v64[18] = 1026;
                      *(_DWORD *)&v64[20] = v28;
                      _os_log_impl(&dword_1902AF000, v22, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] \tProperty: %{public}@ = %{public}@,dirty,%{public}d", buf, 0x1Cu);
                    }
                    if (sub_1902D8400(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1EB3BE898 != -1) {
                        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
                      }
                      uint64_t v31 = objc_msgSend_value(v21, v29, v30);
                      int v34 = objc_msgSend_dirty(v21, v32, v33);
                      int v57 = 138543874;
                      uint64_t v58 = v20;
                      __int16 v59 = 2114;
                      uint64_t v60 = v31;
                      __int16 v61 = 1026;
                      int v62 = v34;
                      LODWORD(v47) = 28;
                      uint64_t v35 = (char *)_os_log_send_and_compose_impl();
                      sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::Device::printProperties() const", "CoreLocation: %s\n", v35);
                      if (v35 != (char *)buf) {
                        free(v35);
                      }
                    }
                    ++v19;
                  }
                  while (v17 != v19);
                  uint64_t v36 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v53, v66, 16);
                  uint64_t v17 = v36;
                }
                while (v36);
              }
            }
            CFStringRef v5 = v49;
            uint64_t v4 = v50;
          }
          sub_1902D8B58(v51);
        }
        std::__shared_weak_count::__release_weak(v52);
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
}

void sub_1902CC1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, std::__shared_weak_count *a18)
{
}

uint64_t sub_1902CC21C(uint64_t a1, const char *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 24) = 0;
  }
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v4 = *(void **)(a1 + 160);
  uint64_t result = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, a2, (uint64_t)&v12, v16, 16);
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void *)v13;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v4);
        }
        int v10 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 160), v6, *(void *)(*((void *)&v12 + 1) + 8 * v9));
        objc_msgSend_setDirty_(v10, v11, 1);
        ++v9;
      }
      while (v7 != v9);
      uint64_t result = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v6, (uint64_t)&v12, v16, 16);
      uint64_t v7 = result;
    }
    while (result);
  }
  return result;
}

void sub_1902CC320(const char *a1, __IOHIDServiceClient *a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current == *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (qword_1EB3BE898 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    int v34 = off_1EB3BE890;
    a1 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 68289539;
      *(_DWORD *)long long v56 = 0;
      *(_WORD *)&v56[4] = 2082;
      *(void *)&v56[6] = "";
      __int16 v57 = 2082;
      *(void *)uint64_t v58 = "assert";
      *(_WORD *)&v58[8] = 2081;
      __int16 v59 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v34, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] refreshDeviceServiceRefs should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    uint64_t v35 = off_1EB3BE890;
    if (os_signpost_enabled((os_log_t)off_1EB3BE890))
    {
      *(_DWORD *)int buf = 68289539;
      *(_DWORD *)long long v56 = 0;
      *(_WORD *)&v56[4] = 2082;
      *(void *)&v56[6] = "";
      __int16 v57 = 2082;
      *(void *)uint64_t v58 = "assert";
      *(_WORD *)&v58[8] = 2081;
      __int16 v59 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] refreshDeviceServiceRefs should be running on motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] refreshDeviceServiceRefs should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    uint64_t v36 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 68289539;
      *(_DWORD *)long long v56 = 0;
      *(_WORD *)&v56[4] = 2082;
      *(void *)&v56[6] = "";
      __int16 v57 = 2082;
      *(void *)uint64_t v58 = "assert";
      *(_WORD *)&v58[8] = 2081;
      __int16 v59 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v36, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] refreshDeviceServiceRefs should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
LABEL_3:
  uint64_t v4 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_INFO, "[CLIoHidInterface] Refreshing service refs", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    LOWORD(v46) = 0;
    int v37 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::refreshDeviceServiceRefs(const IOHIDServiceClientRef)", "CoreLocation: %s\n", v37);
    if (v37 != (char *)buf) {
      free(v37);
    }
  }
  CFArrayRef v5 = IOHIDEventSystemClientCopyServices(*((IOHIDEventSystemClientRef *)a1 + 5));
  obuint64_t j = v5;
  if (v5)
  {
    CFRunLoopSourceContext context = (void *)MEMORY[0x192FCD2F0](v5, v6, v7);
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v8, (uint64_t)&v42, v54, 16);
    if (v9)
    {
      uint64_t v40 = *(void *)v43;
      do
      {
        uint64_t v10 = 0;
        do
        {
          if (*(void *)v43 != v40) {
            objc_enumerationMutation(obj);
          }
          int v11 = *(__IOHIDServiceClient **)(*((void *)&v42 + 1) + 8 * v10);
          if (qword_1EB3BE898 != -1) {
            dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
          }
          if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEBUG))
          {
            id v13 = (id)IOHIDServiceClientCopyProperty(v11, @"PrimaryUsagePage");
            int v16 = objc_msgSend_intValue(v13, v14, v15);
            id v17 = (id)IOHIDServiceClientCopyProperty(v11, @"PrimaryUsage");
            int v20 = objc_msgSend_intValue(v17, v18, v19);
            id v21 = (id)IOHIDServiceClientCopyProperty(v11, @"LocationID");
            int v24 = objc_msgSend_intValue(v21, v22, v23);
            if (qword_1EB3BE898 != -1) {
              dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
            }
            uint64_t v25 = off_1EB3BE890;
            if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 134284289;
              *(void *)long long v56 = v11;
              *(_WORD *)&v56[8] = 1026;
              *(_DWORD *)&v56[10] = v16;
              __int16 v57 = 1026;
              *(_DWORD *)uint64_t v58 = v20;
              *(_WORD *)&v58[4] = 1026;
              *(_DWORD *)&v58[6] = v24;
              _os_log_impl(&dword_1902AF000, v25, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Check service ref %{private}p with usage pair {%{public}d, %{public}d} locationID %{public}d as a potential match", buf, 0x1Eu);
            }
            if (sub_1902D8400(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EB3BE898 != -1) {
                dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
              }
              int v46 = 134284289;
              uint64_t v47 = v11;
              __int16 v48 = 1026;
              int v49 = v16;
              __int16 v50 = 1026;
              int v51 = v20;
              __int16 v52 = 1026;
              int v53 = v24;
              double v32 = (char *)_os_log_send_and_compose_impl();
              sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::refreshDeviceServiceRefs(const IOHIDServiceClientRef)", "CoreLocation: %s\n", v32);
              if (v32 != (char *)buf) {
                free(v32);
              }
            }
          }
          if (v11 != a2)
          {
            uint64_t v27 = *((void *)a1 + 1);
            uint64_t v26 = *((void *)a1 + 2);
            while (v27 != v26)
            {
              int v28 = *(std::__shared_weak_count **)(v27 + 8);
              if (v28)
              {
                __int16 v29 = *(void **)v27;
                atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                uint64_t v30 = std::__shared_weak_count::lock(v28);
                if (v30)
                {
                  uint64_t v31 = v30;
                  if (v29 && (sub_1902B2908((uint64_t)v29, v11) & 1) != 0)
                  {
                    sub_1902BCACC(v29, (char *)v11, 0);
                    if (v29[10]) {
                      IOHIDServiceClientRegisterRemovalCallback();
                    }
                  }
                  sub_1902D8B58(v31);
                }
                std::__shared_weak_count::__release_weak(v28);
              }
              v27 += 16;
            }
          }
          ++v10;
        }
        while (v10 != v9);
        uint64_t v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v12, (uint64_t)&v42, v54, 16);
        uint64_t v9 = v33;
      }
      while (v33);
    }
  }
}

void sub_1902CCA78(_Unwind_Exception *a1)
{
  sub_1902D8B58(v2);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1902CCA9C(uint64_t a1, int *a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  int v4 = *a2;
  if ((*a2 & 4) != 0) {
    *(unsigned char *)(a1 + 28) = (*a2 & 8) != 0;
  }
  int v5 = v4 & 1;
  if (qword_1EB3BE878 != -1) {
    dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
  }
  unsigned int v6 = v4 & 2;
  unsigned int v7 = v4 & 4;
  unsigned int v8 = v4 & 0x10;
  uint64_t v9 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *a2;
    int v11 = *(unsigned __int8 *)(a1 + 28);
    *(_DWORD *)int buf = 67241472;
    *(_DWORD *)&uint8_t buf[4] = v10;
    __int16 v38 = 1026;
    int v39 = v5;
    __int16 v40 = 1026;
    unsigned int v41 = v6 >> 1;
    __int16 v42 = 1026;
    unsigned int v43 = v7 >> 2;
    __int16 v44 = 1026;
    v45[0] = v11;
    LOWORD(v45[1]) = 1026;
    *(_DWORD *)((char *)&v45[1] + 2) = v8 >> 4;
    _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_DEFAULT, "Starting device motion, mode=%{public}#x,useAccelerometer=%{public}d,useGyro=%{public}d,useCompass=%{public}d,fUseNorthRef=%{public}d,buildingGYTT=%{public}d", buf, 0x26u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
    }
    int v23 = *a2;
    int v24 = *(unsigned __int8 *)(a1 + 28);
    v26[0] = 67241472;
    v26[1] = v23;
    __int16 v27 = 1026;
    int v28 = v5;
    __int16 v29 = 1026;
    unsigned int v30 = v6 >> 1;
    __int16 v31 = 1026;
    unsigned int v32 = v7 >> 2;
    __int16 v33 = 1026;
    int v34 = v24;
    __int16 v35 = 1026;
    unsigned int v36 = v8 >> 4;
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLDeviceMotion::enableSensorFusionWithMode(const CLMotionTypeDeviceMotionMode &)", "CoreLocation: %s\n", v25);
    if (v25 != (char *)buf) {
      free(v25);
    }
  }
  uint64_t result = sub_1902DDBB0(a2);
  if (!result) {
    return result;
  }
  LOBYTE(v26[0]) = 0;
  uint64_t v13 = sub_1902D6BD0();
  uint64_t v14 = *(void *)(v13 + 24);
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 32);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v16 = sub_1902C47F8(v14, "LogSensorFusion", (BOOL *)v26);
  if (v15) {
    sub_1902D8B58(v15);
  }
  if ((v16 & 1) == 0) {
    LOBYTE(v26[0]) = 0;
  }
  uint64_t result = *a2;
  if ((int)result > 18)
  {
    if ((int)result <= 66)
    {
      if (result == 19)
      {
        id v17 = *(void **)(a1 + 32);
        if (!v17) {
          operator new();
        }
      }
      else
      {
        if (result != 34) {
          return result;
        }
        id v17 = *(void **)(a1 + 48);
        if (!v17) {
          operator new();
        }
        v17[9] = sub_19056F510;
        v17[10] = a1;
      }
      goto LABEL_50;
    }
    if (result == 67) {
      goto LABEL_34;
    }
    if (result != 143) {
      return result;
    }
LABEL_31:
    uint64_t v18 = *(void *)(a1 + 72);
    if (!v18)
    {
      if ((sub_1902CD6B0() & 0x10) == 0) {
        operator new();
      }
      operator new();
    }
    (*(void (**)(uint64_t, void))(*(void *)v18 + 24))(v18, *(unsigned __int8 *)(a1 + 28));
    uint64_t v20 = *(void *)(a1 + 72);
    int v21 = sub_1902E00AC(*a2);
    *(void *)int buf = sub_1902C1904(a1, v21);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v20 + 16))(v20, buf);
    id v17 = *(void **)(a1 + 72);
    goto LABEL_50;
  }
  if ((int)result > 6)
  {
    if (result != 7 && result != 15) {
      return result;
    }
    goto LABEL_31;
  }
  if (result != 2)
  {
    if (result != 3) {
      return result;
    }
LABEL_34:
    uint64_t v19 = *(void *)(a1 + 64);
    if (!v19)
    {
      if ((sub_1902CD6B0() & 8) == 0)
      {
        if ((sub_1902CD6B0() & 0x10) == 0) {
          operator new();
        }
        operator new();
      }
      operator new();
    }
    int v22 = sub_1902E00AC(result);
    *(void *)int buf = sub_1902C1904(a1, v22);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v19 + 16))(v19, buf);
    id v17 = *(void **)(a1 + 64);
LABEL_50:
    if ((void (*)(float32x2_t *, uint64_t, uint64_t))v17[7] != sub_1902DA44C || v17[8] != a1)
    {
      v17[7] = sub_1902DA44C;
      v17[8] = a1;
      return (*(uint64_t (**)(void *))(*v17 + 48))(v17);
    }
    return result;
  }
  uint64_t result = sub_1902CD6B0();
  if ((result & 0x80) != 0)
  {
    if (!*(void *)(a1 + 56)) {
      operator new();
    }
  }
  else if (!*(void *)(a1 + 40))
  {
    operator new();
  }
  return result;
}

void sub_1902CD5E4(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x10E1C407F10D4D4);
  _Unwind_Resume(a1);
}

uint64_t sub_1902CD6B0()
{
  if (qword_1EB3BE9F8 != -1) {
    dispatch_once(&qword_1EB3BE9F8, &unk_1EDFC1BC0);
  }
  return qword_1EB3BEA00;
}

void sub_1902CD6F4(uint64_t a1, double *a2)
{
  uint64_t v4 = *(void *)(a1 + 208);
  if (!v4)
  {
    int v5 = *(unsigned __int8 *)(a1 + 200);
    unsigned int v6 = (void *)sub_1902DF4A8();
    unsigned int v7 = (std::__shared_weak_count *)operator new(0xC8uLL);
    v7->__shared_owners_ = 0;
    v7->__shared_weak_owners_ = 0;
    v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFD0D68;
    uint64_t v4 = (uint64_t)&v7[1];
    sub_1902DF4EC((uint64_t)&v7[1], 65292, v5, 0, (uint64_t)v6);
    v7[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFC82B8;
    LODWORD(v7[8].__vftable) = 0;
    BYTE4(v7[8].__vftable) = 0;
    int v11 = v7 + 1;
    long long v12 = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_1902B6BB0(v6, &v11);
    if (v12) {
      sub_1902D8B58(v12);
    }
    unsigned int v8 = *(std::__shared_weak_count **)(a1 + 216);
    *(void *)(a1 + 208) = v4;
    *(void *)(a1 + 216) = v7;
    if (v8)
    {
      sub_1902D8B58(v8);
      uint64_t v4 = *(void *)(a1 + 208);
    }
  }
  double v9 = rint(*a2 * 1000000.0);
  if (*a2 < 0.0) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = (uint64_t)v9;
  }
  sub_1902CDC50(v4, v10);
  sub_1902CD864(*(void *)(a1 + 208), (uint64_t)sub_1902D9270, a1);
}

void sub_1902CD830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1902D8B58(a10);
  }
  sub_1902D8B58(v10);
  _Unwind_Resume(a1);
}

void sub_1902CD864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current != *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    double v9 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
    {
      int v11 = *(_DWORD *)(a1 + 16);
      int v10 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)int buf = 68290051;
      int v19 = 0;
      __int16 v20 = 2082;
      int v21 = "";
      __int16 v22 = 1026;
      int v23 = v10;
      __int16 v24 = 1026;
      int v25 = v11;
      __int16 v26 = 2082;
      __int16 v27 = "assert";
      __int16 v28 = 2081;
      __int16 v29 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setCallback should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    long long v12 = off_1EB3BE890;
    if (os_signpost_enabled((os_log_t)off_1EB3BE890))
    {
      int v14 = *(_DWORD *)(a1 + 16);
      int v13 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)int buf = 68290051;
      int v19 = 0;
      __int16 v20 = 2082;
      int v21 = "";
      __int16 v22 = 1026;
      int v23 = v13;
      __int16 v24 = 1026;
      int v25 = v14;
      __int16 v26 = 2082;
      __int16 v27 = "assert";
      __int16 v28 = 2081;
      __int16 v29 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] setCallback should be called from motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] setCallback should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    uint64_t v15 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
    {
      int v17 = *(_DWORD *)(a1 + 16);
      int v16 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)int buf = 68290051;
      int v19 = 0;
      __int16 v20 = 2082;
      int v21 = "";
      __int16 v22 = 1026;
      int v23 = v16;
      __int16 v24 = 1026;
      int v25 = v17;
      __int16 v26 = 2082;
      __int16 v27 = "assert";
      __int16 v28 = 2081;
      __int16 v29 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setCallback should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
    }
    abort_report_np();
  }
  sub_1902D65C4(*(void *)(a1 + 32));
  BOOL v7 = *(void *)(a1 + 48) != 0;
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 56) = a3;
  if ((((a2 == 0) ^ v7) & 1) == 0)
  {
    unsigned int v8 = *(NSObject **)(a1 + 32);
    sub_1902CB12C(v8);
  }
}

uint64_t sub_1902CDBA4(uint64_t a1, double a2)
{
  uint64_t v3 = (uint64_t)rint(a2 * 1000000.0);
  if (v3 >= 1000000) {
    uint64_t v3 = 1000000;
  }
  if (v3 <= 10000) {
    uint64_t v4 = 10000;
  }
  else {
    uint64_t v4 = v3;
  }
  id v5 = objc_alloc(NSNumber);
  BOOL v7 = objc_msgSend_initWithLong_(v5, v6, v4);
  (*(void (**)(uint64_t, __CFString *, void *))(*(void *)a1 + 16))(a1, @"BatchInterval", v7);

  return v4;
}

uint64_t sub_1902CDC50(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc(NSNumber);
  unsigned int v6 = objc_msgSend_initWithLong_(v4, v5, a2);
  (*(void (**)(uint64_t, __CFString *, void *))(*(void *)a1 + 16))(a1, @"ReportInterval", v6);

  return a2;
}

void sub_1902CDE08(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = sub_1902D6BD0();
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = sub_1902CDF80;
  v7[3] = &unk_1E568E318;
  int v8 = a2;
  v7[4] = a1;
  v7[5] = a3;
  sub_1902CDE98(v6, (uint64_t)v7);
}

void sub_1902CDE98(uint64_t a1, uint64_t a2)
{
  if (CFRunLoopGetCurrent() == *(CFRunLoopRef *)qword_1EB3BF828)
  {
    id v4 = (void *)MEMORY[0x192FCD2F0]();
    (*(void (**)(uint64_t))(a2 + 16))(a2);
  }
  else
  {
    uint64_t inited = pthread_dependency_init_np();
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = sub_1902BE718;
    v5[3] = &unk_1E568D268;
    v5[4] = a2;
    v5[5] = &v6;
    sub_1902CE9BC(inited, (uint64_t)v5);
    pthread_dependency_wait_np();
  }
}

uint64_t *sub_1902CDF80(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 48);
  uint64_t v3 = *(void **)(a1 + 32);
  unint64_t v2 = *(void *)(a1 + 40);
  uint64_t v4 = v3[2];
  uint64_t v5 = v4 + 80 * (int)v1;
  int v8 = *(uint64_t **)(v5 + 40);
  BOOL v7 = (uint64_t *)(v5 + 40);
  char v6 = v8;
  if (!v8) {
    goto LABEL_12;
  }
  double v9 = (uint64_t **)(v7 - 1);
  int v10 = v7;
  int v11 = v6;
  do
  {
    unint64_t v12 = v11[4];
    BOOL v13 = v12 >= v2;
    if (v12 >= v2) {
      int v14 = (uint64_t **)v11;
    }
    else {
      int v14 = (uint64_t **)(v11 + 1);
    }
    if (v13) {
      int v10 = v11;
    }
    int v11 = *v14;
  }
  while (*v14);
  if (v10 != v7 && v10[4] <= v2)
  {
    int v21 = (uint64_t *)v10[1];
    if (v21)
    {
      do
      {
        __int16 v22 = v21;
        int v21 = (uint64_t *)*v21;
      }
      while (v21);
    }
    else
    {
      int v23 = v10;
      do
      {
        __int16 v22 = (uint64_t *)v23[2];
        BOOL v24 = *v22 == (void)v23;
        int v23 = v22;
      }
      while (!v24);
    }
    if (*v9 == v10) {
      *double v9 = v22;
    }
    --v7[1];
    sub_1902CE250(v6, v10);
    operator delete(v10);
    uint64_t v25 = v3[2];
    double v26 = sub_1902CE5D4(v25, v1);
    double v34 = v26;
    double v27 = sub_1902CE664(v25, v1);
    double v33 = v27;
    __int16 v28 = (double *)(v25 + 80 * (int)v1);
    if (v26 != *v28)
    {
      *__int16 v28 = v26;
      *(double *)(v3[2] + 80 * (int)v1 + 16) = (*(double (**)(void *, uint64_t, double *))(*v3 + 16))(v3, v1, &v34);
      sub_1902CE6F4((uint64_t)v3, v1);
      uint64_t v25 = v3[2];
    }
    uint64_t v29 = v25 + 80 * (int)v1;
    double v31 = *(double *)(v29 + 8);
    uint64_t v30 = (double *)(v29 + 8);
    if (v27 != v31)
    {
      *uint64_t v30 = v27;
      double v32 = (*(double (**)(void *, uint64_t, double *))(*v3 + 24))(v3, v1, &v33);
      uint64_t v25 = v3[2];
      *(double *)(v25 + 80 * (int)v1 + 24) = v32;
    }
    return (uint64_t *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*v3 + 40))(v3, v1, *(void *)(v25 + 80 * (int)v1 + 48) + 1);
  }
  else
  {
LABEL_12:
    uint64_t v15 = v4 + 80 * (int)v1;
    int v16 = (uint64_t *)(v15 + 56);
    for (uint64_t result = *(uint64_t **)(v15 + 64); result != v16; uint64_t result = (uint64_t *)result[1])
    {
      if (result[2] == v2)
      {
        if (result != v16)
        {
          uint64_t v18 = *result;
          *(void *)(v18 + 8) = result[1];
          *(void *)result[1] = v18;
          --v16[2];
          operator delete(result);
          uint64_t v19 = *(void *)(v3[2] + 80 * (int)v1 + 72);
          __int16 v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v3 + 32);
          return (uint64_t *)v20(v3, v1, v19);
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t *sub_1902CE250(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  char v6 = (uint64_t **)v3[2];
  BOOL v7 = *v6;
  if (*v6 == v3)
  {
    *char v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      BOOL v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      BOOL v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 != v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v18 = v7[1];
      *(void *)uint64_t v12 = v18;
      if (v18) {
        *(void *)(v18 + 16) = v12;
      }
      v7[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(void *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12) {
        uint64_t result = v7;
      }
      BOOL v7 = *(uint64_t **)v12;
    }
    uint64_t v19 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v19 + 24)) {
      goto LABEL_68;
    }
    __int16 v20 = (uint64_t *)v7[1];
    if (v20 && !*((unsigned char *)v20 + 24))
    {
      if (v19 && !*((unsigned char *)v19 + 24))
      {
LABEL_68:
        __int16 v20 = v7;
      }
      else
      {
        *((unsigned char *)v20 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v26 = *v20;
        v7[1] = *v20;
        if (v26) {
          *(void *)(v26 + 16) = v7;
        }
        v20[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
        *__int16 v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        uint64_t v19 = v7;
      }
      uint64_t v23 = v20[2];
      *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v19 + 24) = 1;
      BOOL v24 = *(uint64_t **)v23;
      uint64_t v27 = *(void *)(*(void *)v23 + 8);
      *(void *)uint64_t v23 = v27;
      if (v27) {
        *(void *)(v27 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((unsigned char *)v7 + 24) = 0;
    int v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
LABEL_49:
    BOOL v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    BOOL v13 = *(uint64_t **)(v12 + 8);
    uint64_t v14 = *v13;
    *(void *)(v12 + 8) = *v13;
    if (v14) {
      *(void *)(v14 + 16) = v12;
    }
    v13[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
    *BOOL v13 = v12;
    *(void *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7) {
      uint64_t result = v7;
    }
    BOOL v7 = *(uint64_t **)(*v7 + 8);
  }
  uint64_t v15 = (void *)*v7;
  if (!*v7 || *((unsigned char *)v15 + 24))
  {
    int v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_59;
    }
    *((unsigned char *)v7 + 24) = 0;
    int v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      int v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  int v16 = (uint64_t *)v7[1];
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_59:
    uint64_t v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v22 = v15[1];
    *BOOL v7 = v22;
    if (v22) {
      *(void *)(v22 + 16) = v7;
    }
    v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    int v16 = v7;
  }
  uint64_t v23 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  BOOL v24 = *(uint64_t **)(v23 + 8);
  uint64_t v25 = *v24;
  *(void *)(v23 + 8) = *v24;
  if (v25) {
    *(void *)(v25 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  *BOOL v24 = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

double sub_1902CE5D4(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + 80 * a2;
  uint64_t v3 = *(double **)(v2 + 32);
  uint64_t v4 = (double *)(v2 + 40);
  if (v3 == v4)
  {
    double result = 1.79769313e308;
  }
  else
  {
    double result = 1.79769313e308;
    do
    {
      double v6 = v3[6];
      if (v6 < result && v6 > 0.0) {
        double result = v3[6];
      }
      int v8 = (double *)*((void *)v3 + 1);
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          int v8 = *(double **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (double *)*((void *)v3 + 2);
          BOOL v10 = *(void *)v9 == (void)v3;
          uint64_t v3 = v9;
        }
        while (!v10);
      }
      uint64_t v3 = v9;
    }
    while (v9 != v4);
  }
  if (result == 1.79769313e308) {
    return 0.0;
  }
  return result;
}

double sub_1902CE664(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + 80 * a2;
  uint64_t v3 = *(double **)(v2 + 32);
  uint64_t v4 = (double *)(v2 + 40);
  if (v3 == v4)
  {
    double result = 1.79769313e308;
  }
  else
  {
    double result = 1.79769313e308;
    do
    {
      double v6 = v3[7];
      if (v6 < result && v6 > 0.0) {
        double result = v3[7];
      }
      int v8 = (double *)*((void *)v3 + 1);
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          int v8 = *(double **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (double *)*((void *)v3 + 2);
          BOOL v10 = *(void *)v9 == (void)v3;
          uint64_t v3 = v9;
        }
        while (!v10);
      }
      uint64_t v3 = v9;
    }
    while (v9 != v4);
  }
  if (result == 1.79769313e308) {
    return 0.0;
  }
  return result;
}

void sub_1902CE6F4(uint64_t a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = v2 + 80 * a2;
  double v6 = *(void **)(v3 + 32);
  uint64_t v4 = v3 + 32;
  int v5 = v6;
  double v7 = *(double *)(v4 - 16);
  if (v7 <= 0.0)
  {
    if (v5 != (void *)(v4 + 8))
    {
      do
      {
        *((_DWORD *)v5 + 11) = 1;
        int v17 = (void *)v5[1];
        if (v17)
        {
          do
          {
            uint64_t v18 = v17;
            int v17 = (void *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            uint64_t v18 = (void *)v5[2];
            BOOL v15 = *v18 == (void)v5;
            int v5 = v18;
          }
          while (!v15);
        }
        int v5 = v18;
      }
      while (v18 != (void *)(v4 + 8));
    }
  }
  else if (v5 != (void *)(v2 + 80 * a2 + 40))
  {
    do
    {
      if (v7 <= 0.0)
      {
        if (qword_1EB3BE898 != -1) {
          dispatch_once(&qword_1EB3BE898, &unk_1EDFD1B80);
        }
        BOOL v10 = off_1EB3BE890;
        if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
        {
          uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 80 * a2 + 16);
          *(_DWORD *)int buf = 134217984;
          uint64_t v20 = v11;
          _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_FAULT, "CLMotionNotifier::updateSamplePeriod UpdateInterval:%f", buf, 0xCu);
        }
        if (sub_1902D8400(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB3BE898 != -1) {
            dispatch_once(&qword_1EB3BE898, &unk_1EDFD1B80);
          }
          int v16 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 0, "void CLMotionNotifier::updateSamplePeriods(int)", "CoreLocation: %s\n", v16);
          if (v16 != (char *)buf) {
            free(v16);
          }
        }
      }
      uint64_t v12 = *(void *)(a1 + 16);
      double v7 = *(double *)(v12 + 80 * a2 + 16);
      *((_DWORD *)v5 + 11) = llround(*((double *)v5 + 6) / v7);
      BOOL v13 = (void *)v5[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          BOOL v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)v5[2];
          BOOL v15 = *v14 == (void)v5;
          int v5 = v14;
        }
        while (!v15);
      }
      int v5 = v14;
    }
    while (v14 != (void *)(v12 + 80 * a2 + 40));
  }
}

void sub_1902CE9BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(__CFRunLoop **)qword_1EB3BF828;
  uint64_t v3 = (const void *)*MEMORY[0x1E4F1D418];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1902BE6CC;
  block[3] = &unk_1E568D2D0;
  block[4] = a2;
  CFRunLoopPerformBlock(v2, v3, block);
  CFRunLoopWakeUp(*(CFRunLoopRef *)qword_1EB3BF828);
}

uint64_t sub_1902CEA58()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (MGIsDeviceOfType()) {
    return 2;
  }
  int v14 = 1244490093;
  *(_OWORD *)int buf = xmmword_190607BD8;
  if (MGIsDeviceOfType()) {
    return 5;
  }
  int v9 = 1377801277;
  *(_OWORD *)int v8 = xmmword_190607BEC;
  if (MGIsDeviceOfType()) {
    return 5;
  }
  if (MGIsDeviceOfType()) {
    return 19;
  }
  if (MGIsDeviceOfType()) {
    return 20;
  }
  int v14 = 1839812531;
  *(_OWORD *)int buf = xmmword_190607C00;
  if (MGIsDeviceOfType() & 1) != 0 || (MGIsDeviceOfType()) {
    return 20;
  }
  if (MGIsDeviceOfType()) {
    return 52;
  }
  int v14 = -435113336;
  *(_OWORD *)int buf = xmmword_190607C14;
  if (MGIsDeviceOfType()) {
    return 53;
  }
  int v14 = -1997581659;
  *(_OWORD *)int buf = xmmword_190607C28;
  if (MGIsDeviceOfType() & 1) != 0 || (MGIsDeviceOfType()) {
    return 158;
  }
  int v14 = -1441055153;
  *(_OWORD *)int buf = xmmword_190607C3C;
  if (MGIsDeviceOfType()) {
    return 159;
  }
  if (MGIsDeviceOfType()) {
    return 160;
  }
  if (MGIsDeviceOfType()) {
    return 3;
  }
  if (MGIsDeviceOfType()) {
    return 6;
  }
  int v14 = 1602014129;
  *(_OWORD *)int buf = xmmword_190607C50;
  if (MGIsDeviceOfType()) {
    return 7;
  }
  int v14 = -810116762;
  *(_OWORD *)int buf = xmmword_190607C64;
  if (MGIsDeviceOfType()) {
    return 8;
  }
  int v14 = -1195351767;
  *(_OWORD *)int buf = xmmword_190607C78;
  if (MGIsDeviceOfType()) {
    return 9;
  }
  if (MGIsDeviceOfType()) {
    return 10;
  }
  if (MGIsDeviceOfType()) {
    return 11;
  }
  int v14 = 1789837692;
  *(_OWORD *)int buf = xmmword_190607C8C;
  if (MGIsDeviceOfType()) {
    return 13;
  }
  int v14 = 48355600;
  *(_OWORD *)int buf = xmmword_190607CA0;
  if (MGIsDeviceOfType()) {
    return 14;
  }
  int v14 = -1239654590;
  *(_OWORD *)int buf = xmmword_190607CB4;
  if (MGIsDeviceOfType()) {
    return 15;
  }
  int v14 = -679691073;
  *(_OWORD *)int buf = xmmword_190607CC8;
  if (MGIsDeviceOfType()) {
    return 16;
  }
  int v14 = -1579092758;
  *(_OWORD *)int buf = xmmword_190607CDC;
  if (MGIsDeviceOfType()) {
    return 17;
  }
  int v14 = 1430379884;
  *(_OWORD *)int buf = xmmword_190607CF0;
  if (MGIsDeviceOfType()) {
    return 18;
  }
  if (MGIsDeviceOfType()) {
    return 21;
  }
  int v14 = -798153473;
  *(_OWORD *)int buf = xmmword_190607D04;
  if (MGIsDeviceOfType()) {
    return 22;
  }
  int v14 = -776721724;
  *(_OWORD *)int buf = xmmword_190607D18;
  if (MGIsDeviceOfType()) {
    return 23;
  }
  int v14 = -1403227947;
  *(_OWORD *)int buf = xmmword_190607D2C;
  if (MGIsDeviceOfType()) {
    return 24;
  }
  int v14 = 729118884;
  *(_OWORD *)int buf = xmmword_190607D40;
  if (MGIsDeviceOfType()) {
    return 25;
  }
  int v14 = 1046806126;
  *(_OWORD *)int buf = xmmword_190607D54;
  if (MGIsDeviceOfType()) {
    return 26;
  }
  int v9 = -188760945;
  *(_OWORD *)int v8 = xmmword_190607D68;
  if (MGIsDeviceOfType()) {
    return 26;
  }
  int v14 = -489993439;
  *(_OWORD *)int buf = xmmword_190607D7C;
  if (MGIsDeviceOfType()) {
    return 27;
  }
  int v14 = 886875686;
  *(_OWORD *)int buf = xmmword_190607D90;
  if (MGIsDeviceOfType()) {
    return 28;
  }
  int v14 = -1639077591;
  *(_OWORD *)int buf = xmmword_190607DA4;
  if (MGIsDeviceOfType()) {
    return 29;
  }
  int v14 = 338555555;
  *(_OWORD *)int buf = xmmword_190607DB8;
  if (MGIsDeviceOneOfType()) {
    return 30;
  }
  int v14 = 1032708406;
  *(_OWORD *)int buf = xmmword_190607DCC;
  if (MGIsDeviceOfType()) {
    return 31;
  }
  int v14 = 729903963;
  *(_OWORD *)int buf = xmmword_190607DE0;
  if (MGIsDeviceOfType()) {
    return 32;
  }
  int v14 = 1278131292;
  *(_OWORD *)int buf = xmmword_190607DF4;
  if (MGIsDeviceOfType()) {
    return 33;
  }
  int v14 = -1841712216;
  *(_OWORD *)int buf = xmmword_190607E08;
  if (MGIsDeviceOfType()) {
    return 34;
  }
  int v14 = 1275676051;
  *(_OWORD *)int buf = xmmword_190607E1C;
  if (MGIsDeviceOfType()) {
    return 35;
  }
  int v14 = 1908474541;
  *(_OWORD *)int buf = xmmword_190607E30;
  if (MGIsDeviceOfType()) {
    return 36;
  }
  int v14 = -1022451852;
  *(_OWORD *)int buf = xmmword_190607E44;
  if (MGIsDeviceOfType()) {
    return 62;
  }
  int v14 = 1729782187;
  *(_OWORD *)int buf = xmmword_190607E58;
  if (MGIsDeviceOfType()) {
    return 63;
  }
  if (MGIsDeviceOfType()) {
    return 37;
  }
  int v14 = 368885834;
  *(_OWORD *)int buf = xmmword_190607E6C;
  if (MGIsDeviceOfType()) {
    return 38;
  }
  int v14 = -414334491;
  *(_OWORD *)int buf = xmmword_190607E80;
  if (MGIsDeviceOfType()) {
    return 39;
  }
  if (MGIsDeviceOfType()) {
    return 40;
  }
  int v14 = -526227167;
  *(_OWORD *)int buf = xmmword_190607E94;
  if (MGIsDeviceOfType()) {
    return 41;
  }
  int v14 = -1509831889;
  *(_OWORD *)int buf = xmmword_190607EA8;
  if (MGIsDeviceOfType()) {
    return 42;
  }
  int v14 = 1960366092;
  *(_OWORD *)int buf = xmmword_190607EBC;
  if (MGIsDeviceOfType()) {
    return 43;
  }
  int v14 = -2114570942;
  *(_OWORD *)int buf = xmmword_190607ED0;
  if (MGIsDeviceOfType()) {
    return 148;
  }
  int v14 = -1527788847;
  *(_OWORD *)int buf = xmmword_190607EE4;
  if (MGIsDeviceOfType()) {
    return 44;
  }
  int v14 = 1532898719;
  *(_OWORD *)int buf = xmmword_190607EF8;
  if (MGIsDeviceOfType()) {
    return 45;
  }
  int v14 = 996646949;
  *(_OWORD *)int buf = xmmword_190607F0C;
  if (MGIsDeviceOfType()) {
    return 46;
  }
  int v14 = -563086000;
  *(_OWORD *)int buf = xmmword_190607F20;
  if (MGIsDeviceOfType()) {
    return 47;
  }
  int v14 = 659506830;
  *(_OWORD *)int buf = xmmword_190607F34;
  if (MGIsDeviceOfType()) {
    return 48;
  }
  int v14 = 213746202;
  *(_OWORD *)int buf = xmmword_190607F48;
  if (MGIsDeviceOfType()) {
    return 49;
  }
  int v14 = 289690957;
  *(_OWORD *)int buf = xmmword_190607F5C;
  if (MGIsDeviceOfType()) {
    return 50;
  }
  int v14 = 586720268;
  *(_OWORD *)int buf = xmmword_190607F70;
  if (MGIsDeviceOfType()) {
    return 51;
  }
  int v14 = -350584140;
  *(_OWORD *)int buf = xmmword_190607F84;
  if (MGIsDeviceOfType()) {
    return 54;
  }
  int v14 = 368778837;
  *(_OWORD *)int buf = xmmword_190607F98;
  if (MGIsDeviceOfType()) {
    return 55;
  }
  if (MGIsDeviceOfType()) {
    return 56;
  }
  int v14 = -1418383976;
  *(_OWORD *)int buf = xmmword_190607FAC;
  if (MGIsDeviceOfType()) {
    return 57;
  }
  int v14 = -1213485500;
  *(_OWORD *)int buf = xmmword_190607FC0;
  if (MGIsDeviceOfType()) {
    return 58;
  }
  if (MGIsDeviceOfType()) {
    return 59;
  }
  int v14 = 1425254930;
  *(_OWORD *)int buf = xmmword_190607FD4;
  if (MGIsDeviceOfType()) {
    return 60;
  }
  int v14 = 1899561076;
  *(_OWORD *)int buf = xmmword_190607FE8;
  if (MGIsDeviceOfType()) {
    return 61;
  }
  int v14 = -199226823;
  *(_OWORD *)int buf = xmmword_190607FFC;
  if (MGIsDeviceOfType()) {
    return 64;
  }
  int v9 = 1412427398;
  *(_OWORD *)int v8 = xmmword_190608010;
  if (MGIsDeviceOfType()) {
    return 64;
  }
  int v14 = -1283070668;
  *(_OWORD *)int buf = xmmword_190608024;
  if (MGIsDeviceOfType()) {
    return 65;
  }
  int v9 = 160260070;
  *(_OWORD *)int v8 = xmmword_190608038;
  if (MGIsDeviceOfType()) {
    return 65;
  }
  int v14 = 1711910369;
  *(_OWORD *)int buf = xmmword_19060804C;
  if (MGIsDeviceOfType()) {
    return 66;
  }
  int v14 = -1282800328;
  *(_OWORD *)int buf = xmmword_190608060;
  if (MGIsDeviceOfType()) {
    return 67;
  }
  int v14 = 897736383;
  *(_OWORD *)int buf = xmmword_190608074;
  if (MGIsDeviceOfType()) {
    return 68;
  }
  int v14 = -453987047;
  *(_OWORD *)int buf = xmmword_190608088;
  if (MGIsDeviceOfType()) {
    return 69;
  }
  int v14 = 450980336;
  *(_OWORD *)int buf = xmmword_19060809C;
  if (MGIsDeviceOfType()) {
    return 70;
  }
  int v14 = 414393924;
  *(_OWORD *)int buf = xmmword_1906080B0;
  if (MGIsDeviceOfType()) {
    return 71;
  }
  int v14 = -996295886;
  *(_OWORD *)int buf = xmmword_1906080C4;
  if (MGIsDeviceOfType()) {
    return 72;
  }
  int v14 = -337121064;
  *(_OWORD *)int buf = xmmword_1906080D8;
  if (MGIsDeviceOfType()) {
    return 73;
  }
  int v14 = -2092955395;
  *(_OWORD *)int buf = xmmword_1906080EC;
  if (MGIsDeviceOfType()) {
    return 74;
  }
  int v14 = 674998600;
  *(_OWORD *)int buf = xmmword_190608100;
  if (MGIsDeviceOfType()) {
    return 75;
  }
  int v14 = 317289457;
  *(_OWORD *)int buf = xmmword_190608114;
  if (MGIsDeviceOfType()) {
    return 76;
  }
  int v14 = 401945557;
  *(_OWORD *)int buf = xmmword_190608128;
  if (MGIsDeviceOfType()) {
    return 77;
  }
  int v14 = -232427879;
  *(_OWORD *)int buf = xmmword_19060813C;
  if (MGIsDeviceOfType()) {
    return 78;
  }
  int v14 = -427474227;
  *(_OWORD *)int buf = xmmword_190608150;
  if (MGIsDeviceOfType()) {
    return 79;
  }
  int v9 = 1477534141;
  *(_OWORD *)int v8 = xmmword_190608164;
  if (MGIsDeviceOfType()) {
    return 79;
  }
  int v14 = -1843102369;
  *(_OWORD *)int buf = xmmword_190608178;
  if (MGIsDeviceOfType()) {
    return 80;
  }
  if (MGIsDeviceOfType()) {
    return 81;
  }
  int v14 = 470738981;
  *(_OWORD *)int buf = xmmword_19060818C;
  if (MGIsDeviceOfType()) {
    return 82;
  }
  if (MGIsDeviceOfType()) {
    return 83;
  }
  int v14 = 710807826;
  *(_OWORD *)int buf = xmmword_1906081A0;
  if (MGIsDeviceOfType()) {
    return 84;
  }
  if (MGIsDeviceOfType()) {
    return 85;
  }
  int v14 = 1860682089;
  *(_OWORD *)int buf = xmmword_1906081B4;
  if (MGIsDeviceOfType()) {
    return 86;
  }
  if (MGIsDeviceOfType()) {
    return 87;
  }
  int v14 = -2085056298;
  *(_OWORD *)int buf = xmmword_1906081C8;
  if (MGIsDeviceOfType()) {
    return 88;
  }
  int v14 = 2146530832;
  *(_OWORD *)int buf = xmmword_1906081DC;
  if (MGIsDeviceOfType()) {
    return 89;
  }
  int v14 = -1742178852;
  *(_OWORD *)int buf = xmmword_1906081F0;
  if (MGIsDeviceOfType()) {
    return 90;
  }
  int v14 = 617174804;
  *(_OWORD *)int buf = xmmword_190608204;
  if (MGIsDeviceOfType()) {
    return 91;
  }
  int v14 = 1330813729;
  *(_OWORD *)int buf = xmmword_190608218;
  if (MGIsDeviceOfType()) {
    return 92;
  }
  if (MGIsDeviceOfType()) {
    return 93;
  }
  if (MGIsDeviceOfType()) {
    return 94;
  }
  int v14 = 152704997;
  *(_OWORD *)int buf = xmmword_19060822C;
  if (MGIsDeviceOfType()) {
    return 95;
  }
  int v14 = -338255497;
  *(_OWORD *)int buf = xmmword_190608240;
  if (MGIsDeviceOfType()) {
    return 96;
  }
  int v14 = -1040127899;
  *(_OWORD *)int buf = xmmword_190608254;
  if (MGIsDeviceOfType()) {
    return 97;
  }
  int v14 = 283967174;
  *(_OWORD *)int buf = xmmword_190608268;
  if (MGIsDeviceOfType()) {
    return 98;
  }
  int v14 = 1530707451;
  *(_OWORD *)int buf = xmmword_19060827C;
  if (MGIsDeviceOfType()) {
    return 99;
  }
  int v14 = -871113647;
  *(_OWORD *)int buf = xmmword_190608290;
  if (MGIsDeviceOfType()) {
    return 100;
  }
  int v14 = 483476120;
  *(_OWORD *)int buf = xmmword_1906082A4;
  if (MGIsDeviceOfType()) {
    return 101;
  }
  int v14 = 1472775220;
  *(_OWORD *)int buf = xmmword_1906082B8;
  if (MGIsDeviceOfType()) {
    return 102;
  }
  int v14 = 56502976;
  *(_OWORD *)int buf = xmmword_1906082CC;
  if (MGIsDeviceOfType()) {
    return 103;
  }
  int v14 = 282158961;
  *(_OWORD *)int buf = xmmword_1906082E0;
  if (MGIsDeviceOfType()) {
    return 104;
  }
  int v14 = 1282132887;
  *(_OWORD *)int buf = xmmword_1906082F4;
  if (MGIsDeviceOfType()) {
    return 105;
  }
  int v14 = -961843768;
  *(_OWORD *)int buf = xmmword_190608308;
  if (MGIsDeviceOfType()) {
    return 106;
  }
  int v14 = 1326690998;
  *(_OWORD *)int buf = xmmword_19060831C;
  if (MGIsDeviceOfType()) {
    return 107;
  }
  int v14 = -441172408;
  *(_OWORD *)int buf = xmmword_190608330;
  if (MGIsDeviceOfType()) {
    return 108;
  }
  int v14 = -126099363;
  *(_OWORD *)int buf = xmmword_190608344;
  if (MGIsDeviceOfType()) {
    return 109;
  }
  int v14 = 1756484512;
  *(_OWORD *)int buf = xmmword_190608358;
  if (MGIsDeviceOfType()) {
    return 110;
  }
  int v14 = 763775061;
  *(_OWORD *)int buf = xmmword_19060836C;
  if (MGIsDeviceOfType()) {
    return 111;
  }
  int v14 = -1092155788;
  *(_OWORD *)int buf = xmmword_190608380;
  if (MGIsDeviceOfType()) {
    return 112;
  }
  int v14 = -557458837;
  *(_OWORD *)int buf = xmmword_190608394;
  if (MGIsDeviceOfType()) {
    return 113;
  }
  int v14 = -63049871;
  *(_OWORD *)int buf = xmmword_1906083A8;
  if (MGIsDeviceOfType()) {
    return 114;
  }
  int v14 = 1730000236;
  *(_OWORD *)int buf = xmmword_1906083BC;
  if (MGIsDeviceOfType()) {
    return 115;
  }
  int v14 = 406601745;
  *(_OWORD *)int buf = xmmword_1906083D0;
  if (MGIsDeviceOfType()) {
    return 116;
  }
  int v14 = 1530338216;
  *(_OWORD *)int buf = xmmword_1906083E4;
  if (MGIsDeviceOfType()) {
    return 117;
  }
  int v14 = -1930811061;
  *(_OWORD *)int buf = xmmword_1906083F8;
  if (MGIsDeviceOfType()) {
    return 118;
  }
  int v14 = 1654218604;
  *(_OWORD *)int buf = xmmword_19060840C;
  if (MGIsDeviceOfType()) {
    return 119;
  }
  int v14 = -182498503;
  *(_OWORD *)int buf = xmmword_190608420;
  if (MGIsDeviceOfType()) {
    return 124;
  }
  int v14 = -2030489149;
  *(_OWORD *)int buf = xmmword_190608434;
  if (MGIsDeviceOfType()) {
    return 120;
  }
  int v14 = 841005628;
  *(_OWORD *)int buf = xmmword_190608448;
  if (MGIsDeviceOfType()) {
    return 121;
  }
  int v14 = 223445260;
  *(_OWORD *)int buf = xmmword_19060845C;
  if (MGIsDeviceOfType()) {
    return 122;
  }
  int v14 = 1219348060;
  *(_OWORD *)int buf = xmmword_190608470;
  if (MGIsDeviceOfType()) {
    return 123;
  }
  if (MGIsDeviceOfType()) {
    return 125;
  }
  if (MGIsDeviceOfType()) {
    return 126;
  }
  if (MGIsDeviceOfType()) {
    return 127;
  }
  if (MGIsDeviceOfType()) {
    return 128;
  }
  if (MGIsDeviceOfType()) {
    return 129;
  }
  if (MGIsDeviceOfType()) {
    return 130;
  }
  if (MGIsDeviceOfType()) {
    return 131;
  }
  if (MGIsDeviceOfType()) {
    return 132;
  }
  if (MGIsDeviceOfType()) {
    return 133;
  }
  int v14 = 2030516999;
  *(_OWORD *)int buf = xmmword_190608484;
  *(_OWORD *)int v8 = xmmword_190608498;
  int v9 = -1276010597;
  if (MGIsDeviceOneOfType()) {
    return 134;
  }
  int v14 = -762483149;
  *(_OWORD *)int buf = xmmword_1906084AC;
  *(_OWORD *)int v8 = xmmword_1906084C0;
  int v9 = -1926937532;
  if (MGIsDeviceOneOfType()) {
    return 135;
  }
  int v14 = -1902732724;
  *(_OWORD *)int buf = xmmword_1906084D4;
  *(_OWORD *)int v8 = xmmword_1906084E8;
  int v9 = -342357580;
  if (MGIsDeviceOneOfType()) {
    return 136;
  }
  int v14 = 300442574;
  *(_OWORD *)int buf = xmmword_1906084FC;
  *(_OWORD *)int v8 = xmmword_190608510;
  int v9 = -1294188889;
  if (MGIsDeviceOneOfType()) {
    return 137;
  }
  if (MGIsDeviceOfType()) {
    return 138;
  }
  int v14 = -61007701;
  *(_OWORD *)int buf = xmmword_190608524;
  if (MGIsDeviceOfType()) {
    return 139;
  }
  if (MGIsDeviceOfType()) {
    return 140;
  }
  int v14 = -235416490;
  *(_OWORD *)int buf = xmmword_190608538;
  if (MGIsDeviceOfType()) {
    return 141;
  }
  int v14 = -820493242;
  *(_OWORD *)int buf = xmmword_19060854C;
  if (MGIsDeviceOfType()) {
    return 143;
  }
  int v14 = -1157300313;
  *(_OWORD *)int buf = xmmword_190608560;
  if (MGIsDeviceOfType()) {
    return 144;
  }
  int v14 = -2132668294;
  *(_OWORD *)int buf = xmmword_190608574;
  if (MGIsDeviceOfType()) {
    return 145;
  }
  if (MGIsDeviceOfType()) {
    return 146;
  }
  if (MGIsDeviceOfType()) {
    return 147;
  }
  if (MGIsDeviceOfType()) {
    return 149;
  }
  if (MGIsDeviceOfType()) {
    return 150;
  }
  int v14 = 1737149739;
  *(_OWORD *)int buf = xmmword_190608588;
  if (MGIsDeviceOfType()) {
    return 151;
  }
  int v14 = 1577888303;
  *(_OWORD *)int buf = xmmword_19060859C;
  if (MGIsDeviceOfType()) {
    return 152;
  }
  int v14 = -1918230744;
  *(_OWORD *)int buf = xmmword_1906085B0;
  if (MGIsDeviceOfType()) {
    return 153;
  }
  int v14 = 1126727276;
  *(_OWORD *)int buf = xmmword_1906085C4;
  if (MGIsDeviceOfType()) {
    return 154;
  }
  int v14 = 300130091;
  *(_OWORD *)int buf = xmmword_1906085D8;
  if (MGIsDeviceOfType()) {
    return 155;
  }
  int v14 = 343814884;
  *(_OWORD *)int buf = xmmword_1906085EC;
  if (MGIsDeviceOfType()) {
    return 156;
  }
  int v14 = -1675932945;
  *(_OWORD *)int buf = xmmword_190608600;
  if (MGIsDeviceOfType()) {
    return 157;
  }
  if (MGIsDeviceOfType()) {
    return 161;
  }
  if (MGIsDeviceOfType()) {
    return 162;
  }
  if (MGIsDeviceOfType()) {
    return 166;
  }
  int v14 = -1840391155;
  *(_OWORD *)int buf = xmmword_190608614;
  if (MGIsDeviceOfType()) {
    return 167;
  }
  int v14 = -121925081;
  *(_OWORD *)int buf = xmmword_190608628;
  if (MGIsDeviceOfType()) {
    return 142;
  }
  int v14 = 1071957977;
  *(_OWORD *)int buf = xmmword_19060863C;
  if (MGIsDeviceOfType()) {
    return 168;
  }
  int v14 = 438437663;
  *(_OWORD *)int buf = xmmword_190608650;
  if (MGIsDeviceOfType()) {
    return 169;
  }
  int v14 = 1575123478;
  *(_OWORD *)int buf = xmmword_190608664;
  if (MGIsDeviceOfType()) {
    return 170;
  }
  int v14 = -382792827;
  *(_OWORD *)int buf = xmmword_190608678;
  if (MGIsDeviceOfType()) {
    return 171;
  }
  int v14 = 123138233;
  *(_OWORD *)int buf = xmmword_19060868C;
  if (MGIsDeviceOfType()) {
    return 172;
  }
  int v14 = 681511593;
  *(_OWORD *)int buf = xmmword_1906086A0;
  if (MGIsDeviceOfType()) {
    return 173;
  }
  if (MGIsDeviceOfType()) {
    return 174;
  }
  if (MGIsDeviceOfType()) {
    return 175;
  }
  int v14 = 713503427;
  *(_OWORD *)int buf = xmmword_1906086B4;
  if (MGIsDeviceOfType()) {
    return 176;
  }
  int v14 = -1632750650;
  *(_OWORD *)int buf = xmmword_1906086C8;
  if (MGIsDeviceOfType()) {
    return 177;
  }
  int v14 = -1820426635;
  *(_OWORD *)int buf = xmmword_1906086DC;
  if (MGIsDeviceOfType()) {
    return 178;
  }
  int v14 = -937652876;
  *(_OWORD *)int buf = xmmword_1906086F0;
  if (MGIsDeviceOfType()) {
    return 179;
  }
  int v14 = 1874287171;
  *(_OWORD *)int buf = xmmword_190608704;
  if (MGIsDeviceOfType()) {
    return 180;
  }
  int v14 = -781324731;
  *(_OWORD *)int buf = xmmword_190608718;
  if (MGIsDeviceOfType()) {
    return 181;
  }
  int v14 = 1214880059;
  *(_OWORD *)int buf = xmmword_19060872C;
  if (MGIsDeviceOfType()) {
    return 182;
  }
  int v14 = 426359977;
  *(_OWORD *)int buf = xmmword_190608740;
  if (MGIsDeviceOfType()) {
    return 183;
  }
  if (MGIsDeviceOfType()) {
    return 180;
  }
  if (MGIsDeviceOfType()) {
    return 184;
  }
  if (MGIsDeviceOfType()) {
    return 163;
  }
  if (MGIsDeviceOfType()) {
    return 185;
  }
  if (MGIsDeviceOfType()) {
    return 164;
  }
  if (MGIsDeviceOfType()) {
    return 165;
  }
  int v14 = 345196535;
  *(_OWORD *)int buf = xmmword_190608754;
  if (MGIsDeviceOfType()) {
    return 186;
  }
  int v14 = 440949464;
  *(_OWORD *)int buf = xmmword_190608768;
  if (MGIsDeviceOfType()) {
    return 187;
  }
  int v14 = 688565114;
  *(_OWORD *)int buf = xmmword_19060877C;
  if (MGIsDeviceOfType()) {
    return 188;
  }
  int v14 = -493418906;
  *(_OWORD *)int buf = xmmword_190608790;
  if (MGIsDeviceOfType()) {
    return 189;
  }
  if (MGIsDeviceOfType()) {
    return 190;
  }
  int v14 = -584398440;
  *(_OWORD *)int buf = xmmword_1906087A4;
  if (MGIsDeviceOfType()) {
    return 195;
  }
  int v14 = -879476163;
  *(_OWORD *)int buf = xmmword_1906087B8;
  if (MGIsDeviceOfType()) {
    return 196;
  }
  int v14 = -695298128;
  *(_OWORD *)int buf = xmmword_1906087CC;
  *(_OWORD *)int v8 = xmmword_1906087E0;
  int v9 = 804488105;
  if (MGIsDeviceOneOfType()) {
    return 197;
  }
  int v14 = 1614584579;
  *(_OWORD *)int buf = xmmword_1906087F4;
  *(_OWORD *)int v8 = xmmword_190608808;
  int v9 = 324288768;
  if (MGIsDeviceOneOfType()) {
    return 198;
  }
  int v14 = 460218192;
  *(_OWORD *)int buf = xmmword_19060881C;
  *(_OWORD *)int v8 = xmmword_190608830;
  int v9 = 2144905009;
  if (MGIsDeviceOneOfType()) {
    return 199;
  }
  int v14 = 127894440;
  *(_OWORD *)int buf = xmmword_190608844;
  *(_OWORD *)int v8 = xmmword_190608858;
  int v9 = 1070997468;
  if (MGIsDeviceOneOfType()) {
    return 200;
  }
  int v14 = 372777383;
  *(_OWORD *)int buf = xmmword_19060886C;
  if (MGIsDeviceOfType()) {
    return 201;
  }
  int v14 = -858079590;
  *(_OWORD *)int buf = xmmword_190608880;
  if (MGIsDeviceOfType()) {
    return 202;
  }
  int v14 = -212523443;
  *(_OWORD *)int buf = xmmword_190608894;
  if (MGIsDeviceOfType()) {
    return 203;
  }
  int v14 = 646100384;
  *(_OWORD *)int buf = xmmword_1906088A8;
  if (MGIsDeviceOfType()) {
    return 204;
  }
  int v14 = -340360463;
  *(_OWORD *)int buf = xmmword_1906088BC;
  if (MGIsDeviceOfType()) {
    return 205;
  }
  int v14 = 1605231531;
  *(_OWORD *)int buf = xmmword_1906088D0;
  if (MGIsDeviceOfType()) {
    return 206;
  }
  if (MGIsDeviceOfType()) {
    return 207;
  }
  if (MGIsDeviceOfType()) {
    return 208;
  }
  int v14 = -545612308;
  *(_OWORD *)int buf = xmmword_1906088E4;
  if (MGIsDeviceOfType()) {
    return 209;
  }
  int v14 = 1178062702;
  *(_OWORD *)int buf = xmmword_1906088F8;
  if (MGIsDeviceOfType()) {
    return 210;
  }
  int v14 = 958549802;
  *(_OWORD *)int buf = xmmword_19060890C;
  if (MGIsDeviceOfType()) {
    return 211;
  }
  int v14 = 1377540371;
  *(_OWORD *)int buf = xmmword_190608920;
  if (MGIsDeviceOfType()) {
    return 212;
  }
  if (MGIsDeviceOfType()) {
    return 213;
  }
  if (MGIsDeviceOfType()) {
    return 214;
  }
  if (MGIsDeviceOfType()) {
    return 215;
  }
  if (MGIsDeviceOfType()) {
    return 216;
  }
  if (MGIsDeviceOfType()) {
    return 217;
  }
  if (MGIsDeviceOfType()) {
    return 218;
  }
  int v14 = -1431778695;
  *(_OWORD *)int buf = xmmword_190608934;
  if (MGIsDeviceOfType()) {
    return 219;
  }
  int v14 = 533419158;
  *(_OWORD *)int buf = xmmword_190608948;
  if (MGIsDeviceOfType()) {
    return 220;
  }
  int v14 = 1106979518;
  *(_OWORD *)int buf = xmmword_19060895C;
  if (MGIsDeviceOfType()) {
    return 221;
  }
  int v14 = -609570151;
  *(_OWORD *)int buf = xmmword_190608970;
  if (MGIsDeviceOfType()) {
    return 222;
  }
  int v14 = -874769875;
  *(_OWORD *)int buf = xmmword_190608984;
  if (MGIsDeviceOfType()) {
    return 223;
  }
  int v14 = 1223847566;
  *(_OWORD *)int buf = xmmword_190608998;
  if (MGIsDeviceOfType()) {
    return 224;
  }
  int v14 = 185580364;
  *(_OWORD *)int buf = xmmword_1906089AC;
  if (MGIsDeviceOfType()) {
    return 225;
  }
  if (MGIsDeviceOfType()) {
    return 226;
  }
  int v14 = 1878025452;
  *(_OWORD *)int buf = xmmword_1906089C0;
  if (MGIsDeviceOfType()) {
    return 227;
  }
  int v14 = 1725957070;
  *(_OWORD *)int buf = xmmword_1906089D4;
  if (MGIsDeviceOfType()) {
    return 228;
  }
  int v14 = 538967431;
  *(_OWORD *)int buf = xmmword_1906089E8;
  if (MGIsDeviceOfType()) {
    return 229;
  }
  int v14 = 2060712151;
  *(_OWORD *)int buf = xmmword_1906089FC;
  if (MGIsDeviceOfType()) {
    return 230;
  }
  int v14 = 802516499;
  *(_OWORD *)int buf = xmmword_190608A10;
  if (MGIsDeviceOfType()) {
    return 231;
  }
  int v14 = -1919324456;
  *(_OWORD *)int buf = xmmword_190608A24;
  if (MGIsDeviceOfType()) {
    return 232;
  }
  int v14 = 1127969586;
  *(_OWORD *)int buf = xmmword_190608A38;
  if (MGIsDeviceOfType()) {
    return 233;
  }
  int v14 = 1292009573;
  *(_OWORD *)int buf = xmmword_190608A4C;
  if (MGIsDeviceOfType()) {
    return 234;
  }
  if (MGIsDeviceOfType()) {
    return 235;
  }
  if (MGIsDeviceOfType()) {
    return 236;
  }
  if (MGIsDeviceOfType()) {
    return 237;
  }
  if (MGIsDeviceOfType()) {
    return 238;
  }
  if (MGIsDeviceOfType()) {
    return 142;
  }
  if (qword_1EB3BE968 != -1) {
    dispatch_once(&qword_1EB3BE968, &unk_1EDFD1660);
  }
  if (sub_19046B0F0()) {
    return 1;
  }
  if (MGIsDeviceOfType()) {
    return 239;
  }
  int v14 = -12497897;
  *(_OWORD *)int buf = xmmword_190608A60;
  if (MGIsDeviceOfType()) {
    return 240;
  }
  int v14 = -518121279;
  *(_OWORD *)int buf = xmmword_190608A74;
  if (MGIsDeviceOfType()) {
    return 241;
  }
  int v14 = -773054213;
  *(_OWORD *)int buf = xmmword_190608A88;
  if (MGIsDeviceOfType()) {
    return 242;
  }
  int v14 = -1204420428;
  *(_OWORD *)int buf = xmmword_190608A9C;
  if (MGIsDeviceOfType()) {
    return 243;
  }
  if (MGIsDeviceOfType()) {
    return 260;
  }
  uint64_t v1 = (const void *)MGCopyAnswer();
  if (v1)
  {
    if (qword_1E929DA68 != -1) {
      dispatch_once(&qword_1E929DA68, &unk_1EDFD42C0);
    }
    uint64_t v2 = qword_1E929DA70;
    if (os_log_type_enabled((os_log_t)qword_1E929DA70, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 138477827;
      *(void *)&uint8_t buf[4] = v1;
      _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_ERROR, "unknown HW model %{private}@; file radar to CoreMotion Factory | 1.0",
        buf,
        0xCu);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929DA68 != -1) {
        dispatch_once(&qword_1E929DA68, &unk_1EDFD42C0);
      }
      *(_DWORD *)int v8 = 138477827;
      *(void *)&v8[4] = v1;
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "static CLPlatformInfo::Hardware CLPlatformInfo::queryEmbeddedSystemHardware()", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    CFRelease(v1);
    return 0;
  }
  if (qword_1E929DA68 != -1) {
    dispatch_once(&qword_1E929DA68, &unk_1EDFD42C0);
  }
  uint64_t v3 = qword_1E929DA70;
  if (os_log_type_enabled((os_log_t)qword_1E929DA70, OS_LOG_TYPE_ERROR))
  {
    sub_1902C36AC(@"HWModelStr", (uint64_t)buf);
    uint64_t v4 = v15 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)int v8 = 136380675;
    *(void *)&v8[4] = v4;
    _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_ERROR, "unknown HW model %{private}s; file radar to CoreMotion Factory | 1.0",
      v8,
      0xCu);
    if (v15 < 0) {
      operator delete(*(void **)buf);
    }
  }
  uint64_t result = sub_1902D8400(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929DA68 != -1) {
      dispatch_once(&qword_1E929DA68, &unk_1EDFD42C0);
    }
    sub_1902C36AC(@"HWModelStr", (uint64_t)v8);
    if (v10 >= 0) {
      double v6 = v8;
    }
    else {
      double v6 = *(uint8_t **)v8;
    }
    int v11 = 136380675;
    uint64_t v12 = v6;
    double v7 = (char *)_os_log_send_and_compose_impl();
    if (v10 < 0) {
      operator delete(*(void **)v8);
    }
    sub_1902D398C("Generic", 1, 0, 0, "static CLPlatformInfo::Hardware CLPlatformInfo::queryEmbeddedSystemHardware()", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
    return 0;
  }
  return result;
}

void sub_1902D1604(uint64_t a1, int a2, int a3, int a4, float *a5, float *a6, float a7, float a8, float a9, float a10, float a11, float a12, float a13)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  int v19 = *(_DWORD *)(a1 + 240);
  float v20 = (float)v19;
  float v21 = *(float *)(a1 + 16);
  double v22 = 0.0;
  if ((float)(v21 * 10.0) < (float)v19) {
    double v22 = 1.0;
  }
  unint64_t v23 = *(void *)(a1 + 1072);
  float v24 = 0.0;
  float v25 = 0.0;
  if (v23) {
    float v25 = *(float *)(a1 + 1024) / (float)v23;
  }
  double v26 = a7;
  unint64_t v27 = *(void *)(a1 + 1216);
  if (v27) {
    float v24 = *(float *)(a1 + 1168) / (float)v27;
  }
  double v28 = v22 * 0.1 + v26 * 0.16;
  unint64_t v29 = *(void *)(a1 + 1144);
  if (v29) {
    float v30 = *(float *)(a1 + 1096) / (float)v29;
  }
  else {
    float v30 = 0.0;
  }
  double v31 = (double)*(int *)(a1 + 232);
  float v32 = v28;
  double v33 = v21;
  if (round(v21 * 20.0) < v31)
  {
    float v34 = 0.1875;
    if (v32 >= 0.1875) {
      float v34 = v32;
    }
    if (v30 > v34 && *(float *)(a1 + 1224) < 13.75 && v25 < 27.5 && a2 && a4 && a3 && a11 < 78.0 && v25 * 0.9 < v24)
    {
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
      }
      __int16 v35 = qword_1E929D790;
      if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
      {
        int v36 = *(_DWORD *)(a1 + 232);
        int v37 = *(_DWORD *)(a1 + 240);
        *(_DWORD *)int buf = 134219776;
        *(double *)double v116 = v30;
        *(_WORD *)&v116[8] = 2048;
        *(double *)&v116[10] = v24;
        *(_WORD *)&v116[18] = 2048;
        *(double *)&v116[20] = a9;
        *(_WORD *)&v116[28] = 2048;
        *(double *)&v116[30] = a13;
        *(_WORD *)&v116[38] = 2048;
        *(double *)&v116[40] = a12;
        *(_WORD *)&v116[48] = 2048;
        *(double *)&v116[50] = a11;
        *(_WORD *)&v116[58] = 1024;
        *(_DWORD *)&v116[60] = v36;
        *(_WORD *)&v116[64] = 1024;
        *(_DWORD *)&v116[66] = v37;
        _os_log_impl(&dword_1902AF000, v35, OS_LOG_TYPE_DEBUG, "Resync after long coasting with mag drift. mag/incDiffMean(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), Age(%d,%d)", buf, 0x4Au);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D798 != -1) {
          dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
        }
        uint64_t v112 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::resync(float, BOOL, BOOL, BOOL, float, float, float, const CLVector3d<float> &, float, float, float, const CLVector3d<float> &)", "CoreLocation: %s\n", v112);
        if (v112 != (char *)buf) {
          free(v112);
        }
      }
      *(unsigned char *)(a1 + 185) = 1;
      if (!*(unsigned char *)(a1 + 333)) {
        sub_1902CADC0((float64x2_t *)a1, a5, (float32x2_t *)(a1 + 336), 3);
      }
      return;
    }
  }
  if (a9 <= 5.0 && *(float *)(a1 + 1224) <= 13.75) {
    goto LABEL_155;
  }
  if (v25 <= 4.0 || !a3) {
    goto LABEL_155;
  }
  BOOL v38 = v30 >= v32 || a4 == 0;
  if (v38 || a2 == 0) {
    goto LABEL_155;
  }
  float v40 = v26 * 2.0 + 4.0;
  if (v40 >= a10 && v24 <= v40)
  {
    float v45 = *(float *)(a1 + 1224);
    goto LABEL_57;
  }
  float v42 = v21 + v21;
  BOOL v46 = v30 < 0.1 && v42 < v20 || (float)(v21 * 10.0) < v20 || *(unsigned char *)(a1 + 184) != 0;
  float v45 = *(float *)(a1 + 1224);
  BOOL v47 = v45 >= 27.5;
  if (vabds_f32(v45, a9) < 5.0) {
    BOOL v47 = 0;
  }
  if ((!v46 || v47)
    && (v25 * 0.9 >= v24 || v42 >= v20 && (v21 >= v20 || a9 * 0.95 >= a10) || v25 <= v45 || v45 >= 27.5))
  {
LABEL_155:
    if ((-858993459 * *(_DWORD *)(a1 + 324) + 429496729) > 0x33333332) {
      return;
    }
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
    }
    float v79 = qword_1E929D790;
    if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v80 = *(void *)(a1 + 1072);
      double v81 = 0.0;
      double v82 = 0.0;
      if (v80 >= 2)
      {
        float v83 = (float)((float)v80 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024));
        double v82 = 0.0;
        if (v83 >= 0.0) {
          double v82 = (float)(v83 / (float)((v80 - 1) * v80));
        }
      }
      unint64_t v84 = *(void *)(a1 + 1144);
      if (v84 >= 2)
      {
        float v85 = (float)((float)v84 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
        if (v85 >= 0.0) {
          double v81 = (float)(v85 / (float)((v84 - 1) * v84));
        }
      }
      int v86 = *(_DWORD *)(a1 + 248);
      double v87 = *(float *)(a1 + 200);
      double v88 = *(float *)(a1 + 204);
      double v89 = *(float *)(a1 + 208);
      double v90 = a6[2];
      double v91 = a6[3];
      double v92 = a6[4];
      double v93 = a5[2];
      double v94 = a5[3];
      double v95 = a5[4];
      unint64_t v96 = *(void *)(a1 + 1216);
      double v97 = 0.0;
      if (v96 >= 2)
      {
        float v98 = (float)((float)v96 * *(float *)(a1 + 1172)) - (float)(*(float *)(a1 + 1168) * *(float *)(a1 + 1168));
        if (v98 >= 0.0) {
          double v97 = (float)(v98 / (float)((v96 - 1) * v96));
        }
      }
      int v100 = *(_DWORD *)(a1 + 236);
      int v99 = *(_DWORD *)(a1 + 240);
      double v101 = *(float *)(a1 + 216);
      int v102 = *(_DWORD *)(a1 + 232);
      *(_DWORD *)int buf = 67115008;
      *(_DWORD *)double v116 = v86;
      *(_WORD *)&v116[4] = 2048;
      *(double *)&v116[6] = a8;
      *(_WORD *)&v116[14] = 2048;
      *(double *)&v116[16] = v87;
      *(_WORD *)&v116[24] = 2048;
      *(double *)&v116[26] = v88;
      *(_WORD *)&v116[34] = 2048;
      *(double *)&v116[36] = v89;
      *(_WORD *)&v116[44] = 2048;
      *(double *)&v116[46] = v90;
      *(_WORD *)&v116[54] = 2048;
      *(double *)&v116[56] = v91;
      *(_WORD *)&v116[64] = 2048;
      *(double *)&v116[66] = v92;
      *(_WORD *)&v116[74] = 2048;
      *(double *)&v116[76] = v93;
      *(_WORD *)&v116[84] = 2048;
      *(double *)&v116[86] = v94;
      *(_WORD *)&v116[94] = 2048;
      *(double *)&v116[96] = v95;
      *(_WORD *)&v116[104] = 2048;
      *(double *)&v116[106] = v25;
      *(_WORD *)&v116[114] = 2048;
      *(double *)&v116[116] = v82;
      *(_WORD *)&v116[124] = 2048;
      *(double *)&v116[126] = v30;
      *(_WORD *)&v116[134] = 2048;
      *(double *)&v116[136] = v81;
      *(_WORD *)&v116[144] = 2048;
      *(double *)&v116[146] = v24;
      *(_WORD *)&v116[154] = 2048;
      *(double *)&v116[156] = v97;
      *(_WORD *)&v116[164] = 2048;
      *(double *)&v116[166] = a9;
      *(_WORD *)&v116[174] = 2048;
      *(double *)&v116[176] = a13;
      *(_WORD *)&v116[184] = 2048;
      *(double *)&v116[186] = (float)(a11 - a12);
      *(_WORD *)&v116[194] = 2048;
      *(double *)&v116[196] = v101;
      *(_WORD *)&v116[204] = 1024;
      *(_DWORD *)&v116[206] = v100;
      __int16 v117 = 1024;
      int v118 = v99;
      __int16 v119 = 1024;
      int v120 = v102;
      _os_log_impl(&dword_1902AF000, v79, OS_LOG_TYPE_DEBUG, "numBad(%d), delH(%.3f), coastVec(%.3f/%.3f/%.3f), expectedVec(%.3f/%.3f/%.3f), calibrated(%.3f/%.3f/%.3f), angleDiff(%.3f/%.3f), magDiff(%.3f/%.4f), incDiff(%.3f/%.3f), measure(%.3f/%.3f/%.3f), coasting(%.3f/%d/%d), coastingCount(%d)", buf, 0xE2u);
    }
    if (!sub_1902D8400(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 != -1) {
      goto LABEL_150;
    }
    goto LABEL_144;
  }
LABEL_57:
  if (v45 >= 27.5 && v45 >= a9)
  {
    double v48 = 0.0;
    if (v33 * 3.0 < v31) {
      double v48 = 1.0;
    }
    if (v45 >= (float)(a9 * 4.0) || v48 * 10.0 + 80.0 <= v45)
    {
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
      }
      v103 = qword_1E929D790;
      if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
      {
        int v104 = *(unsigned __int8 *)(a1 + 312);
        int v105 = *(_DWORD *)(a1 + 240);
        *(_DWORD *)int buf = 67109376;
        *(_DWORD *)double v116 = v104;
        *(_WORD *)&v116[4] = 1024;
        *(_DWORD *)&v116[6] = v105;
        _os_log_impl(&dword_1902AF000, v103, OS_LOG_TYPE_DEBUG, "fBackupInfoSet(%d), syncAge(%d)", buf, 0xEu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D798 != -1) {
          dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
        }
        int v110 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::resync(float, BOOL, BOOL, BOOL, float, float, float, const CLVector3d<float> &, float, float, float, const CLVector3d<float> &)", "CoreLocation: %s\n", v110);
        if (v110 != (char *)buf) {
          free(v110);
        }
      }
      if (!*(unsigned char *)(a1 + 312)
        || *(float *)(a1 + 16) * 1.5 <= (double)*(int *)(a1 + 240)
        || *(float *)(a1 + 1224) <= 80.0
        || a12 <= 78.0
        || *(int *)(a1 + 248) < 5)
      {
        if (qword_1E929D798 != -1) {
          dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
        }
        float v107 = qword_1E929D790;
        if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
        {
          int v108 = *(_DWORD *)(a1 + 248);
          int v109 = *(_DWORD *)(a1 + 240);
          *(_DWORD *)int buf = 67110912;
          *(_DWORD *)double v116 = v108;
          *(_WORD *)&v116[4] = 2048;
          *(double *)&v116[6] = v30;
          *(_WORD *)&v116[14] = 2048;
          *(double *)&v116[16] = v24;
          *(_WORD *)&v116[24] = 2048;
          *(double *)&v116[26] = a9;
          *(_WORD *)&v116[34] = 2048;
          *(double *)&v116[36] = a13;
          *(_WORD *)&v116[44] = 2048;
          *(double *)&v116[46] = a12;
          *(_WORD *)&v116[54] = 2048;
          *(double *)&v116[56] = a11;
          *(_WORD *)&v116[64] = 1024;
          *(_DWORD *)&v116[66] = v109;
          _os_log_impl(&dword_1902AF000, v107, OS_LOG_TYPE_DEBUG, "RESYNC Rejected. numBad=%d,mag/incDiffMean(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), syncAge(%d)", buf, 0x4Au);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D798 == -1) {
            goto LABEL_144;
          }
          goto LABEL_150;
        }
        return;
      }
      *(unsigned char *)(a1 + 185) = 1;
      *(unsigned char *)(a1 + 313) = 1;
      *(_DWORD *)(a1 + 248) = 0;
      if (qword_1E929D798 != -1) {
        dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
      }
      float32x2_t v106 = qword_1E929D790;
      if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl(&dword_1902AF000, v106, OS_LOG_TYPE_DEBUG, "Likely bad resync. Backup.", buf, 2u);
      }
      if (!sub_1902D8400(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929D798 != -1) {
        goto LABEL_150;
      }
LABEL_144:
      int v111 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::resync(float, BOOL, BOOL, BOOL, float, float, float, const CLVector3d<float> &, float, float, float, const CLVector3d<float> &)", "CoreLocation: %s\n", v111);
      if (v111 != (char *)buf) {
        free(v111);
      }
      return;
    }
  }
  *(unsigned char *)(a1 + 185) = 1;
  if (!*(unsigned char *)(a1 + 333) && *(unsigned char *)(a1 + 184) && v25 < 27.5 && v30 < 0.15 && v24 < 5.0)
  {
    sub_1902CADC0((float64x2_t *)a1, a5, (float32x2_t *)(a1 + 336), 3);
    int v19 = *(_DWORD *)(a1 + 240);
    double v33 = *(float *)(a1 + 16);
  }
  if (v33 * 1.5 >= (double)v19 && ((int v49 = *(_DWORD *)(a1 + 304)) != 0 || *(unsigned char *)(a1 + 312)))
  {
    float v50 = *(float *)(a1 + 308);
    float v51 = fabsf(v50);
    float v52 = v50 + a8;
    *(float *)(a1 + 308) = v52;
    float v53 = fabsf(v52);
    if (v53 > (float)(v51 + 5.0))
    {
      *(_DWORD *)(a1 + 304) = v49 + 1;
      if (v49 >= 1 && v53 < (float)((float)(v49 + 1) * 5.0))
      {
        *(void *)(a1 + 264) = 0;
        *(_DWORD *)(a1 + 272) = 0;
        *(void *)(a1 + 288) = 0;
        *(_DWORD *)(a1 + 296) = 0;
        *(void *)(a1 + 304) = 0;
        *(_WORD *)(a1 + 312) = 0;
      }
    }
  }
  else
  {
    *(void *)(a1 + 264) = *(void *)(a1 + 72);
    *(_DWORD *)(a1 + 272) = *(_DWORD *)(a1 + 80);
    *(void *)(a1 + 288) = *(void *)(a1 + 200);
    *(_DWORD *)(a1 + 296) = *(_DWORD *)(a1 + 208);
    *(_DWORD *)(a1 + 316) = *(_DWORD *)(a1 + 324);
    *(_DWORD *)(a1 + 304) = 0;
    *(_WORD *)(a1 + 312) = 1;
    *(float *)(a1 + 308) = a8;
  }
  if (qword_1E929D798 != -1) {
    dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
  }
  long long v54 = qword_1E929D790;
  if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v55 = *(void *)(a1 + 1072);
    double v56 = 0.0;
    double v57 = 0.0;
    if (v55 >= 2)
    {
      float v58 = (float)((float)v55 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024));
      double v57 = 0.0;
      if (v58 >= 0.0) {
        double v57 = (float)(v58 / (float)((v55 - 1) * v55));
      }
    }
    float v59 = a5[4];
    unint64_t v60 = *(void *)(a1 + 1144);
    if (v60 >= 2)
    {
      float v61 = (float)((float)v60 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
      if (v61 >= 0.0) {
        double v56 = (float)(v61 / (float)((v60 - 1) * v60));
      }
    }
    int v62 = *(_DWORD *)(a1 + 248);
    int v63 = *(_DWORD *)(a1 + 304);
    double v64 = *(float *)(a1 + 308);
    double v65 = a6[2];
    double v66 = a6[3];
    double v67 = a6[4];
    double v68 = a5[2];
    double v69 = a5[3];
    unint64_t v70 = *(void *)(a1 + 1216);
    double v71 = 0.0;
    if (v70 >= 2)
    {
      float v72 = (float)((float)v70 * *(float *)(a1 + 1172)) - (float)(*(float *)(a1 + 1168) * *(float *)(a1 + 1168));
      if (v72 >= 0.0) {
        double v71 = (float)(v72 / (float)((v70 - 1) * v70));
      }
    }
    double v73 = *(float *)(a1 + 216);
    float v74 = (float)(*(_DWORD *)(a1 + 324) - *(_DWORD *)(a1 + 316));
    int v76 = *(_DWORD *)(a1 + 236);
    int v75 = *(_DWORD *)(a1 + 240);
    int v77 = *(_DWORD *)(a1 + 232);
    *(_DWORD *)int buf = 67115520;
    float v78 = *(float *)(a1 + 16);
    *(_DWORD *)double v116 = v62;
    *(_WORD *)&v116[4] = 2048;
    *(double *)&v116[6] = v26;
    *(_WORD *)&v116[14] = 2048;
    *(double *)&v116[16] = a8;
    *(_WORD *)&v116[24] = 1024;
    *(_DWORD *)&v116[26] = v63;
    *(_WORD *)&v116[30] = 2048;
    *(double *)&v116[32] = v64;
    *(_WORD *)&v116[40] = 2048;
    *(double *)&v116[42] = v65;
    *(_WORD *)&v116[50] = 2048;
    *(double *)&v116[52] = v66;
    *(_WORD *)&v116[60] = 2048;
    *(double *)&v116[62] = v67;
    *(_WORD *)&v116[70] = 2048;
    *(double *)&v116[72] = v68;
    *(_WORD *)&v116[80] = 2048;
    *(double *)&v116[82] = v69;
    *(_WORD *)&v116[90] = 2048;
    *(double *)&v116[92] = v59;
    *(_WORD *)&v116[100] = 2048;
    *(double *)&v116[102] = v25;
    *(_WORD *)&v116[110] = 2048;
    *(double *)&v116[112] = v57;
    *(_WORD *)&v116[120] = 2048;
    *(double *)&v116[122] = v30;
    *(_WORD *)&v116[130] = 2048;
    *(double *)&v116[132] = v56;
    *(_WORD *)&v116[140] = 2048;
    *(double *)&v116[142] = v24;
    *(_WORD *)&v116[150] = 2048;
    *(double *)&v116[152] = v71;
    *(_WORD *)&v116[160] = 2048;
    *(double *)&v116[162] = a9;
    *(_WORD *)&v116[170] = 2048;
    *(double *)&v116[172] = a13;
    *(_WORD *)&v116[180] = 2048;
    *(double *)&v116[182] = (float)(a11 - a12);
    *(_WORD *)&v116[190] = 2048;
    *(double *)&v116[192] = a12;
    *(_WORD *)&v116[200] = 2048;
    *(double *)&v116[202] = v73;
    __int16 v117 = 1024;
    int v118 = v76;
    __int16 v119 = 1024;
    int v120 = v75;
    __int16 v121 = 1024;
    int v122 = v77;
    __int16 v123 = 2048;
    double v124 = (float)(v74 / v78);
    _os_log_impl(&dword_1902AF000, v54, OS_LOG_TYPE_DEBUG, "DRIFT DETECTED. numBad=%d,s=%.3f,delH(%.3f,%d,%.3f), expectedVec (%.3f/%.3f/%.3f), calibrated(%.3f/%.3f/%.3f), angleDiff(%.3f/%.3f), magDiff(%.3f/%.4f), incDiff(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), coasting(%.3f/%d/%d), coastingCount(%d),deltaTime(%.3f)", buf, 0xF2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 == -1) {
      goto LABEL_144;
    }
LABEL_150:
    dispatch_once(&qword_1E929D798, &unk_1EDFD2000);
    goto LABEL_144;
  }
}

void sub_1902D2B84(uint64_t a1, uint64_t a2)
{
  uint64_t v196 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 8;
  int v5 = (float *)(a2 + 12);
  sub_1902D913C((void *)(a1 + 8), (float *)(a2 + 12));
  unint64_t v6 = *(void *)(a1 + 48);
  if (v6 >= 0x14)
  {
    float v7 = *v5;
    int v8 = (int)*v5;
    if (*(_DWORD *)(a1 + 104) <= v8 && *(_DWORD *)(a1 + 108) >= v8)
    {
      unint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = v6 - 1;
      float v11 = *(float *)(*(void *)(*(void *)(a1 + 16) + (((v9 + v10) >> 7) & 0x1FFFFFFFFFFFFF8))
                     + 4 * ((v9 + v10) & 0x3FF))
          - *(float *)(*(void *)(*(void *)(a1 + 16) + ((v9 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v9 & 0x3FF));
      if (v11 == 0.0)
      {
LABEL_89:
        *(void *)(a1 + 40) = v9 + 1;
        *(void *)(a1 + 48) = v10;
        sub_1902D91C4(v4, 1);
        return;
      }
      int v163 = (int)*v5;
      uint64_t v12 = *(void *)(a1 + 64);
      if (v12)
      {
        uint64_t v13 = a1 + 64;
        do
        {
          int v14 = *(_DWORD *)(v12 + 32);
          BOOL v15 = v14 < v8;
          if (v14 >= v8) {
            uint64_t v16 = (uint64_t *)v12;
          }
          else {
            uint64_t v16 = (uint64_t *)(v12 + 8);
          }
          if (!v15) {
            uint64_t v13 = v12;
          }
          uint64_t v12 = *v16;
        }
        while (*v16);
        if (v13 != a1 + 64 && *(_DWORD *)(v13 + 32) <= v8)
        {
LABEL_34:
          float v29 = powf(0.2, v11 * 0.05);
          if (v11 >= 0.0)
          {
            float v30 = v29;
            int v31 = v8 + 1;
          }
          else
          {
            float v30 = powf(0.2, v11 * -0.05);
            int v31 = v8;
          }
          v162 = (uint64_t **)(a1 + 80);
          if (*((_DWORD *)sub_1902D3A38((uint64_t **)(a1 + 80), v8, &v163) + 8) == 30
            && (float)((float)(1.0 - v30) * 2147500000.0) > (float)rand())
          {
            float v32 = sub_1902D3A38(v162, v8, &v163);
            --*((_DWORD *)v32 + 8);
            if (qword_1E929D788 != -1) {
              dispatch_once(&qword_1E929D788, &unk_1EDFD1F80);
            }
            double v33 = qword_1E929D780;
            if (os_log_type_enabled((os_log_t)qword_1E929D780, OS_LOG_TYPE_DEBUG))
            {
              float v34 = sub_1902D4FD4((uint64_t **)(a1 + 56), v8, &v163);
              uint64_t v35 = *(void *)(*(void *)(*((void *)v34 + 6) + ((*((void *)v34 + 9) >> 5) & 0x7FFFFFFFFFFFFF8))
                              + 16 * *((void *)v34 + 9));
              int v36 = *((_DWORD *)sub_1902D3A38(v162, v8, &v163) + 8);
              *(_DWORD *)int buf = 136315906;
              *(void *)&uint8_t buf[4] = "PopSampleTime";
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v35;
              *(_WORD *)&unsigned char buf[22] = 2080;
              *(void *)&buf[24] = "CalibrationBinCount";
              *(_WORD *)float v185 = 1024;
              *(_DWORD *)&v185[2] = v36;
              _os_log_impl(&dword_1902AF000, v33, OS_LOG_TYPE_DEBUG, "%s,%f,%s,%d", buf, 0x26u);
            }
            if (sub_1902D8400(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929D788 != -1) {
                dispatch_once(&qword_1E929D788, &unk_1EDFD1F80);
              }
              int v157 = sub_1902D4FD4((uint64_t **)(a1 + 56), v8, &v163);
              double v158 = *(double *)(*(void *)(*((void *)v157 + 6) + ((*((void *)v157 + 9) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * *((void *)v157 + 9));
              int v159 = *((_DWORD *)sub_1902D3A38(v162, v8, &v163) + 8);
              int v164 = 136315906;
              float v165 = "PopSampleTime";
              __int16 v166 = 2048;
              double v167 = v158;
              __int16 v168 = 2080;
              float v169 = "CalibrationBinCount";
              __int16 v170 = 1024;
              LODWORD(v171) = v159;
              float v160 = (char *)_os_log_send_and_compose_impl();
              sub_1902D398C("Generic", 1, 0, 2, "void CLRobustSlopeEstimator::addPoint(const CLPressure::Sample *)", "CoreLocation: %s\n", v160);
              if (v160 != (char *)buf) {
                free(v160);
              }
            }
            int v37 = sub_1902D4FD4((uint64_t **)(a1 + 56), v8, &v163);
            *(int64x2_t *)(v37 + 72) = vaddq_s64(*(int64x2_t *)(v37 + 72), (int64x2_t)xmmword_19060B3A0);
            sub_190520BFC((uint64_t)(v37 + 40), 1);
          }
          int v38 = *((_DWORD *)sub_1902D3A38(v162, v8, &v163) + 8);
          double v39 = *(double *)a2;
          if (v38 >= 1 && v39 - *(float *)a1 <= (float)((float)((float)((float)v31 - v7) / v11) / (float)(30 - v38))) {
            goto LABEL_88;
          }
          float v40 = v39;
          *(float *)a1 = v40;
          unsigned int v41 = sub_1902D4FD4((uint64_t **)(a1 + 56), v8, &v163);
          float v42 = v41;
          unsigned int v43 = (char *)*((void *)v41 + 7);
          __int16 v44 = (char *)*((void *)v41 + 6);
          uint64_t v45 = v43 - v44;
          if (v43 == v44) {
            uint64_t v46 = 0;
          }
          else {
            uint64_t v46 = 32 * (v43 - v44) - 1;
          }
          unint64_t v47 = *((void *)v41 + 9);
          unint64_t v48 = *((void *)v41 + 10) + v47;
          if (v46 != v48)
          {
LABEL_83:
            *(_OWORD *)(*(void *)&v44[(v48 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v48) = *(_OWORD *)a2;
            ++*((void *)v42 + 10);
            double v90 = sub_1902D3A38(v162, v8, &v163);
            ++*((_DWORD *)v90 + 8);
            if (qword_1E929D788 != -1) {
              dispatch_once(&qword_1E929D788, &unk_1EDFD1F80);
            }
            double v91 = qword_1E929D780;
            if (os_log_type_enabled((os_log_t)qword_1E929D780, OS_LOG_TYPE_DEBUG))
            {
              double v92 = *(double *)a2;
              float v94 = *(float *)(a2 + 8);
              float v93 = *(float *)(a2 + 12);
              int v95 = *((_DWORD *)sub_1902D3A38(v162, v8, &v163) + 8);
              *(_DWORD *)int buf = 136317442;
              *(void *)&uint8_t buf[4] = "CalibrationSampleTime";
              *(_WORD *)&buf[12] = 2048;
              *(double *)&buf[14] = v92;
              *(_WORD *)&unsigned char buf[22] = 2080;
              *(void *)&buf[24] = "CalibrationSamplePressure";
              *(_WORD *)float v185 = 2048;
              *(double *)&v185[2] = v94;
              *(_WORD *)&v185[10] = 2080;
              *(void *)&v185[12] = "CalibrationSampleTemperature";
              __int16 v186 = 2048;
              double v187 = v93;
              __int16 v188 = 2080;
              float v189 = "CalibrationTemperatureRate";
              __int16 v190 = 2048;
              double v191 = v11;
              __int16 v192 = 2080;
              unsigned int v193 = "CalibrationBinCount";
              __int16 v194 = 1024;
              int v195 = v95;
              _os_log_impl(&dword_1902AF000, v91, OS_LOG_TYPE_DEBUG, "%s,%f,%s,%f,%s,%f,%s,%f,%s,%d", buf, 0x62u);
            }
            if (sub_1902D8400(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929D788 != -1) {
                dispatch_once(&qword_1E929D788, &unk_1EDFD1F80);
              }
              double v152 = *(double *)a2;
              float v154 = *(float *)(a2 + 8);
              float v153 = *(float *)(a2 + 12);
              int v155 = *((_DWORD *)sub_1902D3A38(v162, v8, &v163) + 8);
              int v164 = 136317442;
              float v165 = "CalibrationSampleTime";
              __int16 v166 = 2048;
              double v167 = v152;
              __int16 v168 = 2080;
              float v169 = "CalibrationSamplePressure";
              __int16 v170 = 2048;
              double v171 = v154;
              __int16 v172 = 2080;
              float v173 = "CalibrationSampleTemperature";
              __int16 v174 = 2048;
              double v175 = v153;
              __int16 v176 = 2080;
              float v177 = "CalibrationTemperatureRate";
              __int16 v178 = 2048;
              double v179 = v11;
              __int16 v180 = 2080;
              float v181 = "CalibrationBinCount";
              __int16 v182 = 1024;
              int v183 = v155;
              float v156 = (char *)_os_log_send_and_compose_impl();
              sub_1902D398C("Generic", 1, 0, 2, "void CLRobustSlopeEstimator::addPoint(const CLPressure::Sample *)", "CoreLocation: %s\n", v156);
              if (v156 != (char *)buf) {
                free(v156);
              }
            }
LABEL_88:
            unint64_t v9 = *(void *)(a1 + 40);
            uint64_t v10 = *(void *)(a1 + 48) - 1;
            goto LABEL_89;
          }
          if (v47 < 0x100)
          {
            int v62 = (char *)*((void *)v41 + 8);
            int v63 = (char *)*((void *)v41 + 5);
            if (v45 >> 3 >= (unint64_t)((v62 - v63) >> 3))
            {
              uint64_t v161 = v45 >> 3;
              if (v62 == v63) {
                unint64_t v66 = 1;
              }
              else {
                unint64_t v66 = (v62 - v63) >> 2;
              }
              double v67 = (char *)sub_1902C0520(v66);
              uint64_t v69 = v68;
              unint64_t v70 = operator new(0x1000uLL);
              double v71 = &v67[8 * v161];
              uint64_t v72 = v69;
              double v73 = &v67[8 * v69];
              if (v161 == v72)
              {
                uint64_t v74 = 8 * v161;
                if (v45 < 1)
                {
                  int v118 = v70;
                  uint64_t v119 = v74 >> 2;
                  if (v43 == v44) {
                    unint64_t v120 = 1;
                  }
                  else {
                    unint64_t v120 = v119;
                  }
                  __int16 v121 = (char *)sub_1902C0520(v120);
                  double v71 = &v121[8 * (v120 >> 2)];
                  double v73 = &v121[8 * v122];
                  if (v67) {
                    operator delete(v67);
                  }
                  double v67 = v121;
                  unint64_t v70 = v118;
                }
                else
                {
                  uint64_t v75 = v74 >> 3;
                  if (v75 >= -1) {
                    unint64_t v76 = v75 + 1;
                  }
                  else {
                    unint64_t v76 = v75 + 2;
                  }
                  v71 -= 8 * (v76 >> 1);
                }
              }
              *(void *)double v71 = v70;
              __int16 v123 = v71 + 8;
              for (uint64_t i = *((void *)v42 + 7); i != *((void *)v42 + 6); i -= 8)
              {
                if (v71 == v67)
                {
                  if (v123 >= v73)
                  {
                    if (v73 == v67) {
                      unint64_t v129 = 1;
                    }
                    else {
                      unint64_t v129 = (v73 - v67) >> 2;
                    }
                    uint64_t v130 = (char *)sub_1902C0520(v129);
                    float v132 = v130;
                    double v71 = &v130[(2 * v129 + 6) & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v133 = v123 - v67;
                    BOOL v77 = v123 == v67;
                    __int16 v123 = v71;
                    if (!v77)
                    {
                      __int16 v123 = &v71[v133 & 0xFFFFFFFFFFFFFFF8];
                      uint64_t v134 = 8 * (v133 >> 3);
                      v135 = v71;
                      v136 = (uint64_t *)v67;
                      do
                      {
                        uint64_t v137 = *v136++;
                        *(void *)v135 = v137;
                        v135 += 8;
                        v134 -= 8;
                      }
                      while (v134);
                    }
                    double v73 = &v130[8 * v131];
                    if (v67) {
                      operator delete(v67);
                    }
                    double v67 = v132;
                  }
                  else
                  {
                    uint64_t v125 = (v73 - v123) >> 3;
                    if (v125 >= -1) {
                      uint64_t v126 = v125 + 1;
                    }
                    else {
                      uint64_t v126 = v125 + 2;
                    }
                    uint64_t v127 = v126 >> 1;
                    double v71 = &v67[8 * (v126 >> 1)];
                    float v128 = v67;
                    if (v123 != v67)
                    {
                      memmove(v71, v67, v123 - v67);
                      float v128 = v123;
                    }
                    __int16 v123 = &v128[8 * v127];
                  }
                }
                uint64_t v138 = *(void *)(i - 8);
                *((void *)v71 - 1) = v138;
                v71 -= 8;
              }
              uint64_t v139 = (void *)*((void *)v42 + 5);
              *((void *)v42 + 5) = v67;
              *((void *)v42 + 6) = v71;
              *((void *)v42 + 7) = v123;
              *((void *)v42 + 8) = v73;
              if (v139) {
                operator delete(v139);
              }
              goto LABEL_82;
            }
            double v64 = operator new(0x1000uLL);
            double v65 = v64;
            if (v62 == v43)
            {
              if (v44 == v63)
              {
                if (v43 == v44) {
                  unint64_t v96 = 1;
                }
                else {
                  unint64_t v96 = (v62 - v44) >> 2;
                }
                double v97 = (char *)sub_1902C0520(v96);
                __int16 v44 = &v97[8 * ((v96 + 3) >> 2)];
                int v99 = (uint64_t *)*((void *)v42 + 6);
                int v100 = v44;
                uint64_t v101 = *((void *)v42 + 7) - (void)v99;
                if (v101)
                {
                  int v100 = &v44[v101 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v102 = 8 * (v101 >> 3);
                  v103 = &v97[8 * ((v96 + 3) >> 2)];
                  do
                  {
                    uint64_t v104 = *v99++;
                    *(void *)v103 = v104;
                    v103 += 8;
                    v102 -= 8;
                  }
                  while (v102);
                }
                int v105 = (void *)*((void *)v42 + 5);
                *((void *)v42 + 5) = v97;
                *((void *)v42 + 6) = v44;
                *((void *)v42 + 7) = v100;
                *((void *)v42 + 8) = &v97[8 * v98];
                if (v105)
                {
                  operator delete(v105);
                  __int16 v44 = (char *)*((void *)v42 + 6);
                }
              }
              *((void *)v44 - 1) = v65;
              float32x2_t v106 = (char *)*((void *)v42 + 6);
              float v107 = (char *)*((void *)v42 + 7);
              *((void *)v42 + 6) = v106 - 8;
              uint64_t v108 = *((void *)v106 - 1);
              *((void *)v42 + 6) = v106;
              if (v107 == *((char **)v42 + 8))
              {
                unint64_t v109 = *((void *)v42 + 5);
                uint64_t v110 = (uint64_t)&v106[-v109];
                if ((unint64_t)v106 <= v109)
                {
                  uint64_t v140 = (uint64_t)&v107[-v109];
                  BOOL v77 = v140 == 0;
                  uint64_t v141 = v140 >> 2;
                  if (v77) {
                    unint64_t v142 = 1;
                  }
                  else {
                    unint64_t v142 = v141;
                  }
                  v143 = (char *)sub_1902C0520(v142);
                  v145 = &v143[8 * (v142 >> 2)];
                  v146 = (uint64_t *)*((void *)v42 + 6);
                  float v107 = v145;
                  uint64_t v147 = *((void *)v42 + 7) - (void)v146;
                  if (v147)
                  {
                    float v107 = &v145[v147 & 0xFFFFFFFFFFFFFFF8];
                    uint64_t v148 = 8 * (v147 >> 3);
                    v149 = &v143[8 * (v142 >> 2)];
                    do
                    {
                      uint64_t v150 = *v146++;
                      *(void *)v149 = v150;
                      v149 += 8;
                      v148 -= 8;
                    }
                    while (v148);
                  }
                  uint64_t v151 = (void *)*((void *)v42 + 5);
                  *((void *)v42 + 5) = v143;
                  *((void *)v42 + 6) = v145;
                  *((void *)v42 + 7) = v107;
                  *((void *)v42 + 8) = &v143[8 * v144];
                  if (v151)
                  {
                    operator delete(v151);
                    float v107 = (char *)*((void *)v42 + 7);
                  }
                }
                else
                {
                  uint64_t v111 = v110 >> 3;
                  BOOL v15 = v110 >> 3 < -1;
                  uint64_t v112 = (v110 >> 3) + 2;
                  if (v15) {
                    uint64_t v113 = v112;
                  }
                  else {
                    uint64_t v113 = v111 + 1;
                  }
                  uint64_t v114 = -(v113 >> 1);
                  uint64_t v115 = v113 >> 1;
                  double v116 = &v106[-8 * v115];
                  int64_t v117 = v107 - v106;
                  if (v107 != v106)
                  {
                    memmove(&v106[-8 * v115], v106, v107 - v106);
                    float32x2_t v106 = (char *)*((void *)v42 + 6);
                  }
                  float v107 = &v116[v117];
                  *((void *)v42 + 6) = &v106[8 * v114];
                  *((void *)v42 + 7) = &v116[v117];
                }
              }
              *(void *)float v107 = v108;
            }
            else
            {
              *(void *)unsigned int v43 = v64;
            }
          }
          else
          {
            *((void *)v41 + 9) = v47 - 256;
            uint64_t v51 = *(void *)v44;
            int v49 = v44 + 8;
            uint64_t v50 = v51;
            *((void *)v41 + 6) = v49;
            if (v43 == *((char **)v41 + 8))
            {
              unint64_t v52 = *((void *)v41 + 5);
              uint64_t v53 = (uint64_t)&v49[-v52];
              if ((unint64_t)v49 <= v52)
              {
                uint64_t v78 = (uint64_t)&v43[-v52];
                BOOL v77 = v78 == 0;
                uint64_t v79 = v78 >> 2;
                if (v77) {
                  unint64_t v80 = 1;
                }
                else {
                  unint64_t v80 = v79;
                }
                double v81 = (char *)sub_1902C0520(v80);
                float v83 = &v81[8 * (v80 >> 2)];
                unint64_t v84 = (uint64_t *)*((void *)v42 + 6);
                unsigned int v43 = v83;
                uint64_t v85 = *((void *)v42 + 7) - (void)v84;
                if (v85)
                {
                  unsigned int v43 = &v83[v85 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v86 = 8 * (v85 >> 3);
                  double v87 = &v81[8 * (v80 >> 2)];
                  do
                  {
                    uint64_t v88 = *v84++;
                    *(void *)double v87 = v88;
                    v87 += 8;
                    v86 -= 8;
                  }
                  while (v86);
                }
                double v89 = (void *)*((void *)v42 + 5);
                *((void *)v42 + 5) = v81;
                *((void *)v42 + 6) = v83;
                *((void *)v42 + 7) = v43;
                *((void *)v42 + 8) = &v81[8 * v82];
                if (v89)
                {
                  operator delete(v89);
                  unsigned int v43 = (char *)*((void *)v42 + 7);
                }
              }
              else
              {
                uint64_t v54 = v53 >> 3;
                BOOL v15 = v53 >> 3 < -1;
                uint64_t v55 = (v53 >> 3) + 2;
                if (v15) {
                  uint64_t v56 = v55;
                }
                else {
                  uint64_t v56 = v54 + 1;
                }
                uint64_t v57 = -(v56 >> 1);
                uint64_t v58 = v56 >> 1;
                float v59 = &v49[-8 * v58];
                int64_t v60 = v43 - v49;
                if (v43 != v49)
                {
                  memmove(&v49[-8 * v58], v49, v43 - v49);
                  unsigned int v43 = (char *)*((void *)v42 + 6);
                }
                float v61 = &v43[8 * v57];
                unsigned int v43 = &v59[v60];
                *((void *)v42 + 6) = v61;
                *((void *)v42 + 7) = &v59[v60];
              }
            }
            *(void *)unsigned int v43 = v50;
          }
          *((void *)v42 + 7) += 8;
LABEL_82:
          __int16 v44 = (char *)*((void *)v42 + 6);
          unint64_t v48 = *((void *)v42 + 10) + *((void *)v42 + 9);
          int v8 = v163;
          goto LABEL_83;
        }
      }
      *(_OWORD *)float v185 = 0u;
      memset(buf, 0, sizeof(buf));
      int v17 = sub_1902D4FD4((uint64_t **)(a1 + 56), v8, &v163);
      int v19 = (void **)*((void *)v17 + 6);
      uint64_t v18 = *((void *)v17 + 7);
      *((void *)v17 + 10) = 0;
      unint64_t v20 = v18 - (void)v19;
      if ((unint64_t)(v18 - (void)v19) >= 0x11)
      {
        do
        {
          operator delete(*v19);
          uint64_t v18 = *((void *)v17 + 7);
          int v19 = (void **)(*((void *)v17 + 6) + 8);
          *((void *)v17 + 6) = v19;
          unint64_t v20 = v18 - (void)v19;
        }
        while ((unint64_t)(v18 - (void)v19) > 0x10);
      }
      unint64_t v21 = v20 >> 3;
      if (v21 == 1)
      {
        uint64_t v22 = 128;
      }
      else
      {
        if (v21 != 2)
        {
LABEL_22:
          if (*((void *)v17 + 10))
          {
            sub_190520BFC((uint64_t)(v17 + 40), 0);
            uint64_t v24 = *((void *)v17 + 6);
            uint64_t v23 = *((void *)v17 + 7);
            if (v23 == v24) {
              uint64_t v25 = 0;
            }
            else {
              uint64_t v25 = 32 * (v23 - v24) - 1;
            }
            if ((unint64_t)(v25 - (*((void *)v17 + 10) + *((void *)v17 + 9))) >= 0x100)
            {
              operator delete(*(void **)(v23 - 8));
              *((void *)v17 + 7) -= 8;
            }
          }
          else
          {
            while ((void **)v18 != v19)
            {
              operator delete(*(void **)(v18 - 8));
              int v19 = (void **)*((void *)v17 + 6);
              uint64_t v18 = *((void *)v17 + 7) - 8;
              *((void *)v17 + 7) = v18;
            }
            *((void *)v17 + 9) = 0;
          }
          sub_190520C58((void **)v17 + 5);
          uint64_t v27 = *((void *)v17 + 6);
          uint64_t v26 = *((void *)v17 + 7);
          if (v26 != v27) {
            *((void *)v17 + 7) = v26 + ((v27 - v26 + 7) & 0xFFFFFFFFFFFFFFF8);
          }
          sub_190520C58((void **)v17 + 5);
          *(_OWORD *)(v17 + 40) = *(_OWORD *)buf;
          long long v28 = *(_OWORD *)v185;
          *(_OWORD *)(v17 + 56) = *(_OWORD *)&buf[16];
          memset(buf, 0, sizeof(buf));
          *(_OWORD *)(v17 + 72) = v28;
          *(void *)float v185 = 0;
          *(void *)&v185[8] = 0;
          sub_190520B54(buf);
          *((_DWORD *)sub_1902D3A38((uint64_t **)(a1 + 80), v8, &v163) + 8) = 0;
          float v7 = *v5;
          goto LABEL_34;
        }
        uint64_t v22 = 256;
      }
      *((void *)v17 + 9) = v22;
      goto LABEL_22;
    }
  }
}

void sub_1902D3948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  operator delete(v30);
  if (v29) {
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1902D398C(const char *a1, int a2, int a3, signed int a4, const char *a5, char *a6, ...)
{
  va_start(va, a6);
  if (qword_1EB3BF858 != -1) {
    dispatch_once(&qword_1EB3BF858, &unk_1EDFD1D20);
  }
  if (a3) {
    return sub_1904F1D18(qword_1EB3BF850, a1, a2, a4, a5, a6, va);
  }
  else {
    return sub_1902D50B4(qword_1EB3BF850, a1, a2, a4, a5, a6, va);
  }
}

uint64_t **sub_1902D3A38(uint64_t **a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        float v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        int v5 = *v7;
        unint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      int v5 = v7[1];
      if (!v5)
      {
        unint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    float v7 = a1 + 1;
LABEL_9:
    unint64_t v9 = (uint64_t *)v7;
    float v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *float v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *unint64_t v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    float v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      float v11 = *v6;
    }
    sub_1902DD3B4(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_1902D3B04(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v260 = *MEMORY[0x1E4F143B8];
  int32x4_t v6 = vdupq_n_s32(0x7F7FFFFFu);
  *(void *)int buf = v6.i64[0];
  *(void *)&long long v7 = 0x8000000080000000;
  *((void *)&v7 + 1) = 0x8000000080000000;
  *(_OWORD *)&buf[12] = v7;
  *(_DWORD *)&uint8_t buf[8] = 2139095039;
  *(_DWORD *)&buf[28] = 0x7FFFFFFF;
  int32x4_t v251 = v6;
  *(void *)&long long v252 = v6.i64[0];
  *((void *)&v252 + 1) = 0x7FFFFFFF7F7FFFFFLL;
  char v253 = 0;
  long long v254 = 0u;
  long long v255 = 0u;
  long long v256 = 0u;
  sub_1902C0004(&v254, 1uLL);
  uint64_t v8 = *((void *)&v256 + 1);
  unint64_t v9 = v256;
  uint64_t v11 = *((void *)&v254 + 1);
  uint64_t v10 = v255;
  uint64_t v12 = (char **)(*((void *)&v254 + 1) + 8 * (((void)v256 + *((void *)&v256 + 1)) >> 9));
  uint64_t v13 = *v12;
  if ((void)v255 == *((void *)&v254 + 1)) {
    int v14 = 0;
  }
  else {
    int v14 = &(*v12)[8 * ((v256 + *((void *)&v256 + 1)) & 0x1FF)];
  }
  uint64_t v15 = (v14 - v13) >> 3;
  if (v14 - v13 < -7)
  {
    unint64_t v19 = 510 - v15;
    int v17 = &v12[-(v19 >> 9)];
    uint64_t v18 = (uint64_t)&(*v17)[8 * (~(_WORD)v19 & 0x1FF)];
  }
  else
  {
    unint64_t v16 = v15 + 1;
    int v17 = &v12[v16 >> 9];
    uint64_t v18 = (uint64_t)&(*v17)[8 * (v16 & 0x1FF)];
  }
  if (v14 != (char *)v18)
  {
    double v229 = a1;
    do
    {
      unint64_t v20 = v13 + 4096;
      if (v12 == v17) {
        unint64_t v20 = (char *)v18;
      }
      if (v14 == v20)
      {
        uint64_t v21 = 0;
      }
      else
      {
        uint64_t v21 = v20 - v14;
        memset_pattern16(v14, &unk_19060B3B0, (v20 - v14) & 0xFFFFFFFFFFFFFFF8);
      }
      v8 += v21 >> 3;
      if (v12 == v17) {
        break;
      }
      uint64_t v22 = v12[1];
      ++v12;
      uint64_t v13 = v22;
      int v14 = v22;
    }
    while (v22 != (char *)v18);
    *((void *)&v256 + 1) = v8;
    a1 = v229;
  }
  long long v23 = v252;
  *(int32x4_t *)(a3 + 32) = v251;
  *(_OWORD *)(a3 + 48) = v23;
  *(unsigned char *)(a3 + 64) = v253;
  long long v24 = *(_OWORD *)&buf[16];
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(_OWORD *)(a3 + 16) = v24;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  uint64_t v25 = (char *)(v11 + 8 * (v9 >> 9));
  *(_OWORD *)(a3 + 104) = 0u;
  if (v10 == v11)
  {
    uint64_t v26 = 0;
    uint64_t v28 = 0;
    uint64_t v27 = (char *)(v10 + 8 * ((v8 + v9) >> 9));
  }
  else
  {
    uint64_t v26 = (uint64_t *)(*(void *)v25 + 8 * (v9 & 0x1FF));
    uint64_t v27 = (char *)(v11 + 8 * ((v8 + v9) >> 9));
    uint64_t v28 = *(void *)v27 + 8 * ((v8 + v9) & 0x1FF);
  }
  if ((uint64_t *)v28 != v26)
  {
    uint64_t v29 = ((v28 - *(void *)v27) >> 3) + ((v27 - v25) << 6);
    uint64_t v30 = (uint64_t)v26 - *(void *)v25;
    uint64_t v31 = v29 - (v30 >> 3);
    if (v29 != v30 >> 3)
    {
      sub_1902C0004((void *)(a3 + 72), v29 - (v30 >> 3));
      uint64_t v32 = *(void *)(a3 + 112);
      uint64_t v33 = *(void *)(a3 + 80);
      unint64_t v34 = *(void *)(a3 + 104) + v32;
      uint64_t v35 = (void *)(v33 + 8 * (v34 >> 9));
      int v36 = (void *)*v35;
      uint64_t v37 = *v35 + 8 * (v34 & 0x1FF);
      int v38 = *(void *)(a3 + 88) == v33 ? 0 : (void *)v37;
      uint64_t v39 = v31 + v38 - v36;
      if (v39 < 1)
      {
        unint64_t v41 = 511 - v39;
        LOWORD(v39) = ~(511 - v39);
        float v40 = &v35[-(v41 >> 9)];
      }
      else
      {
        float v40 = &v35[(unint64_t)v39 >> 9];
      }
      uint64_t v42 = *v40 + 8 * (v39 & 0x1FF);
      if (v38 != (void *)v42)
      {
        do
        {
          unsigned int v43 = v36 + 512;
          if (v35 == v40) {
            unsigned int v43 = (void *)v42;
          }
          if (v38 == v43)
          {
            unsigned int v43 = v38;
          }
          else
          {
            __int16 v44 = v38;
            do
            {
              uint64_t v45 = *v26++;
              *v44++ = v45;
              if ((uint64_t *)((char *)v26 - *(void *)v25) == (uint64_t *)4096)
              {
                uint64_t v46 = (uint64_t *)*((void *)v25 + 1);
                v25 += 8;
                uint64_t v26 = v46;
              }
            }
            while (v44 != v43);
            uint64_t v32 = *(void *)(a3 + 112);
          }
          v32 += v43 - v38;
          *(void *)(a3 + 112) = v32;
          if (v35 == v40) {
            break;
          }
          unint64_t v47 = (void *)v35[1];
          ++v35;
          int v36 = v47;
          int v38 = v47;
        }
        while (v47 != (void *)v42);
      }
    }
  }
  if (a1[12])
  {
    unint64_t v48 = a1 + 11;
    uint64_t v49 = a1[11];
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1[10] + 28);
    if (v49)
    {
      do
      {
        uint64_t v50 = v49;
        uint64_t v49 = *(void *)(v49 + 8);
      }
      while (v49);
    }
    else
    {
      do
      {
        uint64_t v50 = v48[2];
        BOOL v51 = *(void *)v50 == (void)v48;
        unint64_t v48 = (void *)v50;
      }
      while (v51);
    }
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(v50 + 28);
  }
  sub_1904CECDC(&v254);
  if (a1[9] < (unint64_t)a2)
  {
    if (qword_1E929D788 != -1) {
      dispatch_once(&qword_1E929D788, &unk_1EDFD1F80);
    }
    unint64_t v52 = qword_1E929D780;
    if (os_log_type_enabled((os_log_t)qword_1E929D780, OS_LOG_TYPE_INFO))
    {
      uint64_t v53 = a1[9];
      *(_DWORD *)int buf = 134217984;
      *(void *)&uint8_t buf[4] = v53;
      _os_log_impl(&dword_1902AF000, v52, OS_LOG_TYPE_INFO, "CLRobustSlopeEstimator given only %zd bins", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D788 != -1) {
        dispatch_once(&qword_1E929D788, &unk_1EDFD1F80);
      }
      uint64_t v54 = a1[9];
      LODWORD(v257) = 134217984;
      *(void *)((char *)&v257 + 4) = v54;
      uint64_t v55 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "CLPressureStats CLRobustSlopeEstimator::computeStats(int)", "CoreLocation: %s\n", v55);
      if (v55 != buf) {
        free(v55);
      }
    }
    return;
  }
  uint64_t v56 = (uint64_t **)(a1 + 7);
  long long v240 = 0u;
  long long v241 = 0u;
  long long v239 = 0u;
  uint64_t v57 = (uint64_t *)a1[7];
  uint64_t v58 = a1;
  float v59 = a1 + 8;
  while (1)
  {
    int64_t v60 = (uint64_t *)*v59;
    float v61 = v59;
    if (*v59)
    {
      do
      {
        int v62 = v60;
        int64_t v60 = (uint64_t *)v60[1];
      }
      while (v60);
    }
    else
    {
      do
      {
        int v62 = (uint64_t *)v61[2];
        BOOL v51 = *v62 == (void)v61;
        float v61 = v62;
      }
      while (v51);
    }
    if (v57 == v62) {
      break;
    }
    unint64_t v63 = v57[9];
    uint64_t v64 = v57[6];
    uint64_t v65 = v57[7];
    unint64_t v66 = (void *)(v64 + 8 * (v63 >> 8));
    if (v65 == v64) {
      uint64_t v67 = 0;
    }
    else {
      uint64_t v67 = *v66 + 16 * v63;
    }
    while (1)
    {
      if (v65 == v64)
      {
        uint64_t v83 = 0;
      }
      else
      {
        unint64_t v82 = v57[10] + v57[9];
        uint64_t v83 = *(void *)(v64 + ((v82 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v82;
      }
      unint64_t v70 = (uint64_t *)v57[1];
      if (v67 == v83) {
        break;
      }
      uint64_t v68 = v57;
      if (v70)
      {
        do
        {
          uint64_t v69 = v70;
          unint64_t v70 = (uint64_t *)*v70;
        }
        while (v70);
      }
      else
      {
        do
        {
          uint64_t v69 = (uint64_t *)v68[2];
          BOOL v51 = *v69 == (void)v68;
          uint64_t v68 = v69;
        }
        while (!v51);
      }
      if (v69 != v59)
      {
        do
        {
          unint64_t v71 = v69[9];
          uint64_t v72 = v69[6];
          uint64_t v73 = v69[7];
          uint64_t v74 = (void *)(v72 + 8 * (v71 >> 8));
          if (v73 == v72) {
            uint64_t v75 = 0;
          }
          else {
            uint64_t v75 = *v74 + 16 * v71;
          }
          while (1)
          {
            if (v73 == v72)
            {
              uint64_t v78 = 0;
            }
            else
            {
              unint64_t v77 = v69[10] + v69[9];
              uint64_t v78 = *(void *)(v72 + ((v77 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v77;
            }
            if (v75 == v78) {
              break;
            }
            *(float *)int buf = (float)(*(float *)(v75 + 8) - *(float *)(v67 + 8))
                          / (float)(*(float *)(v75 + 12) - *(float *)(v67 + 12));
            sub_1902D913C(&v239, (float *)buf);
            v75 += 16;
            if (v75 - *v74 == 4096)
            {
              uint64_t v76 = v74[1];
              ++v74;
              uint64_t v75 = v76;
            }
            uint64_t v72 = v69[6];
            uint64_t v73 = v69[7];
          }
          uint64_t v79 = (uint64_t *)v69[1];
          if (v79)
          {
            do
            {
              unint64_t v80 = v79;
              uint64_t v79 = (uint64_t *)*v79;
            }
            while (v79);
          }
          else
          {
            do
            {
              unint64_t v80 = (uint64_t *)v69[2];
              BOOL v51 = *v80 == (void)v69;
              uint64_t v69 = v80;
            }
            while (!v51);
          }
          uint64_t v69 = v80;
        }
        while (v80 != v59);
      }
      v67 += 16;
      if (v67 - *v66 == 4096)
      {
        uint64_t v81 = v66[1];
        ++v66;
        uint64_t v67 = v81;
      }
      uint64_t v64 = v57[6];
      uint64_t v65 = v57[7];
    }
    unint64_t v84 = v57;
    if (v70)
    {
      do
      {
        uint64_t v57 = v70;
        unint64_t v70 = (uint64_t *)*v70;
      }
      while (v70);
    }
    else
    {
      do
      {
        uint64_t v57 = (uint64_t *)v84[2];
        BOOL v51 = *v57 == (void)v84;
        unint64_t v84 = v57;
      }
      while (!v51);
    }
  }
  uint64_t v85 = (char *)(*((void *)&v239 + 1) + 8 * ((unint64_t)v241 >> 10));
  if ((void)v240 == *((void *)&v239 + 1))
  {
    uint64_t v86 = 0;
    uint64_t v88 = 0;
    double v87 = (char *)(*((void *)&v239 + 1) + 8 * ((*((void *)&v241 + 1) + (void)v241) >> 10));
  }
  else
  {
    uint64_t v86 = *(void *)v85 + 4 * (v241 & 0x3FF);
    double v87 = (char *)(*((void *)&v239 + 1) + 8 * ((*((void *)&v241 + 1) + (void)v241) >> 10));
    uint64_t v88 = *(void *)v87 + 4 * ((*((void *)&v241 + 1) + v241) & 0x3FF);
  }
  float v89 = sub_1905203F0(v85, v86, v87, v88);
  double v90 = (void **)*((void *)&v239 + 1);
  *((void *)&v241 + 1) = 0;
  unint64_t v91 = v240 - *((void *)&v239 + 1);
  if ((void)v240 - *((void *)&v239 + 1) >= 0x11uLL)
  {
    do
    {
      operator delete(*v90);
      double v90 = (void **)(*((void *)&v239 + 1) + 8);
      *((void *)&v239 + 1) = v90;
      unint64_t v91 = v240 - (void)v90;
    }
    while ((void)v240 - (void)v90 > 0x10uLL);
  }
  if (v91 >> 3 == 1)
  {
    uint64_t v92 = 512;
  }
  else
  {
    if (v91 >> 3 != 2) {
      goto LABEL_110;
    }
    uint64_t v92 = 1024;
  }
  *(void *)&long long v241 = v92;
LABEL_110:
  long long v237 = 0u;
  long long v238 = 0u;
  long long v236 = 0u;
  float v93 = *v56;
  if (*v56 == v59)
  {
    int v105 = 0;
    uint64_t v104 = 0;
    unint64_t v109 = 0;
  }
  else
  {
    do
    {
      unint64_t v94 = v93[9];
      uint64_t v95 = v93[6];
      uint64_t v96 = v93[7];
      double v97 = (void *)(v95 + 8 * (v94 >> 8));
      if (v96 == v95) {
        uint64_t v98 = 0;
      }
      else {
        uint64_t v98 = *v97 + 16 * v94;
      }
      while (1)
      {
        if (v96 == v95)
        {
          uint64_t v101 = 0;
        }
        else
        {
          unint64_t v100 = v93[10] + v93[9];
          uint64_t v101 = *(void *)(v95 + ((v100 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v100;
        }
        if (v98 == v101) {
          break;
        }
        *(float *)int buf = *(float *)(v98 + 8) + (float)((float)-v89 * *(float *)(v98 + 12));
        sub_1902D913C(&v236, (float *)buf);
        v98 += 16;
        if (v98 - *v97 == 4096)
        {
          uint64_t v99 = v97[1];
          ++v97;
          uint64_t v98 = v99;
        }
        uint64_t v95 = v93[6];
        uint64_t v96 = v93[7];
      }
      uint64_t v102 = (uint64_t *)v93[1];
      if (v102)
      {
        do
        {
          v103 = v102;
          uint64_t v102 = (uint64_t *)*v102;
        }
        while (v102);
      }
      else
      {
        do
        {
          v103 = (uint64_t *)v93[2];
          BOOL v51 = *v103 == (void)v93;
          float v93 = v103;
        }
        while (!v51);
      }
      float v93 = v103;
    }
    while (v103 != v59);
    uint64_t v104 = *((void *)&v236 + 1);
    int v105 = (char *)(*((void *)&v236 + 1) + 8 * ((unint64_t)v238 >> 10));
    if ((void)v237 != *((void *)&v236 + 1))
    {
      uint64_t v106 = *(void *)v105 + 4 * (v238 & 0x3FF);
      float v107 = (char *)(*((void *)&v236 + 1) + 8 * ((*((void *)&v238 + 1) + (void)v238) >> 10));
      uint64_t v108 = *(void *)v107 + 4 * ((*((void *)&v238 + 1) + v238) & 0x3FF);
      goto LABEL_132;
    }
    unint64_t v109 = *((void *)&v238 + 1) + v238;
  }
  uint64_t v106 = 0;
  uint64_t v108 = 0;
  float v107 = (char *)(v104 + 8 * (v109 >> 10));
LABEL_132:
  float v110 = sub_1905203F0(v105, v106, v107, v108);
  long long v234 = 0u;
  long long v235 = 0u;
  long long v233 = 0u;
  uint64_t v111 = *((void *)&v236 + 1);
  uint64_t v112 = v237;
  uint64_t v113 = (void *)(*((void *)&v236 + 1) + 8 * ((unint64_t)v238 >> 10));
  if ((void)v237 == *((void *)&v236 + 1)) {
    uint64_t v114 = 0;
  }
  else {
    uint64_t v114 = (float *)(*v113 + 4 * (v238 & 0x3FF));
  }
  while (1)
  {
    uint64_t v116 = v112 == v111
         ? 0
         : *(void *)(v111 + (((*((void *)&v238 + 1) + (void)v238) >> 7) & 0x1FFFFFFFFFFFFF8))
         + 4 * ((*((void *)&v238 + 1) + v238) & 0x3FF);
    if (v114 == (float *)v116) {
      break;
    }
    *(_DWORD *)int buf = vabds_f32(*v114, v110);
    sub_1902D913C(&v233, (float *)buf);
    if ((float *)((char *)++v114 - *v113) == (float *)4096)
    {
      uint64_t v115 = (float *)v113[1];
      ++v113;
      uint64_t v114 = v115;
    }
    uint64_t v111 = *((void *)&v236 + 1);
    uint64_t v112 = v237;
  }
  int64_t v117 = (char *)(*((void *)&v233 + 1) + 8 * ((unint64_t)v235 >> 10));
  if ((void)v234 == *((void *)&v233 + 1))
  {
    uint64_t v118 = 0;
    uint64_t v120 = 0;
    uint64_t v119 = (char *)(*((void *)&v233 + 1) + 8 * ((*((void *)&v235 + 1) + (void)v235) >> 10));
  }
  else
  {
    uint64_t v118 = *(void *)v117 + 4 * (v235 & 0x3FF);
    uint64_t v119 = (char *)(*((void *)&v233 + 1) + 8 * ((*((void *)&v235 + 1) + (void)v235) >> 10));
    uint64_t v120 = *(void *)v119 + 4 * ((*((void *)&v235 + 1) + v235) & 0x3FF);
  }
  float v121 = sub_1905203F0(v117, v118, v119, v120);
  uint64_t v122 = (void **)*((void *)&v233 + 1);
  __int16 v123 = (float **)(*((void *)&v233 + 1) + 8 * ((unint64_t)v235 >> 10));
  double v124 = *v123;
  uint64_t v125 = &(*v123)[v235 & 0x3FF];
  uint64_t v126 = *(void *)(*((void *)&v233 + 1) + (((*((void *)&v235 + 1) + (void)v235) >> 7) & 0x1FFFFFFFFFFFFF8))
       + 4 * ((*((void *)&v235 + 1) + v235) & 0x3FF);
  if (v125 != (float *)v126)
  {
    uint64_t v127 = &(*v123)[v235 & 0x3FF];
    while (1)
    {
      if ((char *)++v127 - (char *)v124 == 4096)
      {
        float v128 = v123[1];
        ++v123;
        double v124 = v128;
        uint64_t v127 = v128;
      }
      if (v127 == (float *)v126) {
        break;
      }
      if (*v125 < *v127) {
        uint64_t v125 = v127;
      }
    }
  }
  float v129 = *v125;
  *((void *)&v235 + 1) = 0;
  unint64_t v130 = v234 - *((void *)&v233 + 1);
  if ((void)v234 - *((void *)&v233 + 1) >= 0x11uLL)
  {
    do
    {
      operator delete(*v122);
      uint64_t v122 = (void **)(*((void *)&v233 + 1) + 8);
      *((void *)&v233 + 1) = v122;
      unint64_t v130 = v234 - (void)v122;
    }
    while ((void)v234 - (void)v122 > 0x10uLL);
  }
  if (v130 >> 3 == 1)
  {
    uint64_t v131 = 512;
  }
  else
  {
    if (v130 >> 3 != 2) {
      goto LABEL_160;
    }
    uint64_t v131 = 1024;
  }
  *(void *)&long long v235 = v131;
LABEL_160:
  float v132 = (void **)*((void *)&v236 + 1);
  *((void *)&v238 + 1) = 0;
  unint64_t v133 = v237 - *((void *)&v236 + 1);
  if ((void)v237 - *((void *)&v236 + 1) >= 0x11uLL)
  {
    do
    {
      operator delete(*v132);
      float v132 = (void **)(*((void *)&v236 + 1) + 8);
      *((void *)&v236 + 1) = v132;
      unint64_t v133 = v237 - (void)v132;
    }
    while ((void)v237 - (void)v132 > 0x10uLL);
  }
  if (v133 >> 3 == 1)
  {
    uint64_t v134 = 512;
  }
  else
  {
    if (v133 >> 3 != 2) {
      goto LABEL_167;
    }
    uint64_t v134 = 1024;
  }
  *(void *)&long long v238 = v134;
LABEL_167:
  *(float *)a3 = v89;
  *(float *)(a3 + 4) = v121;
  *(float *)(a3 + 8) = v129;
  *(unsigned char *)(a3 + 64) = 1;
  long long v231 = 0u;
  long long v232 = 0u;
  *(_OWORD *)__p = 0u;
  int v136 = *((_DWORD *)v58 + 26);
  int v135 = *((_DWORD *)v58 + 27);
  int v242 = v136;
  if (v136 <= v135)
  {
    uint64_t v141 = &OBJC_IVAR___CMHeadphoneActivityManagerInternal_fLogger;
    unint64_t v142 = &OBJC_IVAR___CMHeadphoneActivityManagerInternal_fLogger;
    do
    {
      uint64_t v143 = *v59;
      if (*v59)
      {
        uint64_t v144 = v59;
        do
        {
          int v145 = *(_DWORD *)(v143 + 32);
          BOOL v146 = v145 < v136;
          if (v145 >= v136) {
            uint64_t v147 = (uint64_t *)v143;
          }
          else {
            uint64_t v147 = (uint64_t *)(v143 + 8);
          }
          if (!v146) {
            uint64_t v144 = (uint64_t *)v143;
          }
          uint64_t v143 = *v147;
        }
        while (*v147);
        if (v144 != v59 && v136 >= *((_DWORD *)v144 + 8))
        {
          long long v258 = 0u;
          long long v259 = 0u;
          long long v257 = 0u;
          uint64_t v148 = sub_1902D4FD4(v56, v136, &v242);
          unint64_t v149 = *((void *)v148 + 9);
          uint64_t v150 = *((void *)v148 + 6);
          uint64_t v151 = (void *)(v150 + 8 * (v149 >> 8));
          if (*((void *)v148 + 7) == v150) {
            uint64_t v152 = 0;
          }
          else {
            uint64_t v152 = *v151 + 16 * v149;
          }
          while (1)
          {
            float v154 = sub_1902D4FD4(v56, v136, &v242);
            uint64_t v155 = *((void *)v154 + 6);
            if (*((void *)v154 + 7) == v155)
            {
              uint64_t v157 = 0;
            }
            else
            {
              unint64_t v156 = *((void *)v154 + 10) + *((void *)v154 + 9);
              uint64_t v157 = *(void *)(v155 + ((v156 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v156;
            }
            if (v152 == v157) {
              break;
            }
            sub_1902D913C(&v257, (float *)(v152 + 8));
            v152 += 16;
            if (v152 - *v151 == 4096)
            {
              uint64_t v153 = v151[1];
              ++v151;
              uint64_t v152 = v153;
            }
            int v136 = v242;
          }
          if (*((void *)&v259 + 1))
          {
            double v158 = (char *)(*((void *)&v257 + 1) + 8 * ((unint64_t)v259 >> 10));
            if ((void)v258 == *((void *)&v257 + 1))
            {
              uint64_t v159 = 0;
              uint64_t v161 = 0;
              float v160 = (char *)(*((void *)&v257 + 1) + 8 * (((void)v259 + *((void *)&v259 + 1)) >> 10));
            }
            else
            {
              uint64_t v159 = *(void *)v158 + 4 * (v259 & 0x3FF);
              float v160 = (char *)(*((void *)&v257 + 1) + 8 * (((void)v259 + *((void *)&v259 + 1)) >> 10));
              uint64_t v161 = *(void *)v160 + 4 * ((v259 + *((void *)&v259 + 1)) & 0x3FF);
            }
            float v162 = sub_1905203F0(v158, v159, v160, v161);
            int v163 = (char *)v231;
            int v164 = (char *)__p[1];
            uint64_t v165 = v231 - (unint64_t)__p[1];
            if ((void *)v231 == __p[1]) {
              unint64_t v166 = 0;
            }
            else {
              unint64_t v166 = (((void)v231 - (unint64_t)__p[1]) << 6) - 1;
            }
            uint64_t v167 = *((void *)&v232 + 1);
            unint64_t v168 = *((void *)&v232 + 1) + v232;
            if (v166 == *((void *)&v232 + 1) + (void)v232)
            {
              if ((unint64_t)v232 < 0x200)
              {
                double v179 = v141;
                uint64_t v180 = v165 >> 3;
                if (v165 >> 3 >= (unint64_t)((uint64_t)(*((void *)&v231 + 1) - (unint64_t)__p[0]) >> 3))
                {
                  if (*((void **)&v231 + 1) == __p[0]) {
                    unint64_t v181 = 1;
                  }
                  else {
                    unint64_t v181 = (uint64_t)(*((void *)&v231 + 1) - (unint64_t)__p[0]) >> 2;
                  }
                  v251.i64[0] = (uint64_t)&v231 + 8;
                  *(void *)int buf = sub_1902C0520(v181);
                  *(void *)&uint8_t buf[8] = *(void *)buf + 8 * v180;
                  *(void *)&uint8_t buf[16] = *(void *)&buf[8];
                  *(void *)&buf[24] = *(void *)buf + 8 * v182;
                  *(void *)int v243 = operator new(0x1000uLL);
                  sub_1902C0558(buf, v243);
                  int v183 = (void *)v231;
                  uint64_t v141 = v179;
                  unint64_t v142 = &OBJC_IVAR___CMHeadphoneActivityManagerInternal_fLogger;
                  while (v183 != __p[1])
                    sub_19052024C((uint64_t)buf, --v183);
                  int v184 = __p[0];
                  *(_OWORD *)__p = *(_OWORD *)buf;
                  long long v231 = *(_OWORD *)&buf[16];
                  if (v184) {
                    operator delete(v184);
                  }
                }
                else if (*((void *)&v231 + 1) == (void)v231)
                {
                  *(void *)int buf = operator new(0x1000uLL);
                  sub_19052024C((uint64_t)__p, buf);
                  float v199 = (char *)v231;
                  unint64_t v200 = (char *)__p[1] + 8;
                  uint64_t v201 = *(void *)__p[1];
                  __p[1] = (char *)__p[1] + 8;
                  unint64_t v142 = &OBJC_IVAR___CMHeadphoneActivityManagerInternal_fLogger;
                  if ((void)v231 == *((void *)&v231 + 1))
                  {
                    uint64_t v202 = v200 - (char *)__p[0];
                    if (v200 <= __p[0])
                    {
                      if ((void *)v231 == __p[0]) {
                        unint64_t v207 = 1;
                      }
                      else {
                        unint64_t v207 = (uint64_t)(v231 - (unint64_t)__p[0]) >> 2;
                      }
                      float v208 = (char *)sub_1902C0520(v207);
                      float v210 = (uint64_t *)__p[1];
                      float v199 = &v208[8 * (v207 >> 2)];
                      uint64_t v211 = v231 - (unint64_t)__p[1];
                      if ((void *)v231 != __p[1])
                      {
                        float v199 = &v208[8 * (v207 >> 2) + (v211 & 0xFFFFFFFFFFFFFFF8)];
                        uint64_t v212 = 8 * (v211 >> 3);
                        unint64_t v213 = &v208[8 * (v207 >> 2)];
                        do
                        {
                          uint64_t v214 = *v210++;
                          *(void *)unint64_t v213 = v214;
                          v213 += 8;
                          v212 -= 8;
                        }
                        while (v212);
                      }
                      v215 = __p[0];
                      __p[0] = v208;
                      __p[1] = &v208[8 * (v207 >> 2)];
                      *(void *)&long long v231 = v199;
                      *((void *)&v231 + 1) = &v208[8 * v209];
                      unint64_t v142 = &OBJC_IVAR___CMHeadphoneActivityManagerInternal_fLogger;
                      if (v215)
                      {
                        operator delete(v215);
                        float v199 = (char *)v231;
                      }
                    }
                    else
                    {
                      uint64_t v203 = v202 >> 3;
                      BOOL v146 = v202 >> 3 < -1;
                      uint64_t v204 = (v202 >> 3) + 2;
                      if (!v146) {
                        uint64_t v204 = v203 + 1;
                      }
                      float v205 = &v200[-8 * (v204 >> 1)];
                      uint64_t v206 = v231 - (void)v200;
                      if ((char *)v231 != v200)
                      {
                        uint64_t v228 = v204;
                        memmove(&v200[-8 * (v204 >> 1)], v200, v231 - (void)v200);
                        uint64_t v204 = v228;
                        unint64_t v200 = (char *)__p[1];
                      }
                      float v199 = &v205[v206];
                      __p[1] = &v200[-8 * (v204 >> 1)];
                      *(void *)&long long v231 = &v205[v206];
                    }
                  }
                  *(void *)float v199 = v201;
                  *(void *)&long long v231 = v231 + 8;
                  uint64_t v141 = v179;
                }
                else
                {
                  *(void *)int buf = operator new(0x1000uLL);
                  sub_1902C0558(__p, buf);
                  uint64_t v141 = v179;
                  unint64_t v142 = &OBJC_IVAR___CMHeadphoneActivityManagerInternal_fLogger;
                }
              }
              else
              {
                *(void *)&long long v232 = v232 - 512;
                float v169 = (char *)__p[1] + 8;
                uint64_t v170 = *(void *)__p[1];
                __p[1] = (char *)__p[1] + 8;
                if ((void)v231 == *((void *)&v231 + 1))
                {
                  double v171 = v141;
                  uint64_t v172 = v169 - (char *)__p[0];
                  if (v169 <= __p[0])
                  {
                    if ((void *)v231 == __p[0]) {
                      unint64_t v185 = 1;
                    }
                    else {
                      unint64_t v185 = (uint64_t)(v231 - (unint64_t)__p[0]) >> 2;
                    }
                    __int16 v186 = (char *)sub_1902C0520(v185);
                    __int16 v188 = (uint64_t *)__p[1];
                    int v163 = &v186[8 * (v185 >> 2)];
                    uint64_t v189 = v231 - (unint64_t)__p[1];
                    if ((void *)v231 != __p[1])
                    {
                      int v163 = &v186[8 * (v185 >> 2) + (v189 & 0xFFFFFFFFFFFFFFF8)];
                      uint64_t v190 = 8 * (v189 >> 3);
                      double v191 = &v186[8 * (v185 >> 2)];
                      do
                      {
                        uint64_t v192 = *v188++;
                        *(void *)double v191 = v192;
                        v191 += 8;
                        v190 -= 8;
                      }
                      while (v190);
                    }
                    unsigned int v193 = __p[0];
                    __p[0] = v186;
                    __p[1] = &v186[8 * (v185 >> 2)];
                    *(void *)&long long v231 = v163;
                    *((void *)&v231 + 1) = &v186[8 * v187];
                    unint64_t v142 = &OBJC_IVAR___CMHeadphoneActivityManagerInternal_fLogger;
                    if (v193)
                    {
                      operator delete(v193);
                      int v163 = (char *)v231;
                    }
                  }
                  else
                  {
                    uint64_t v173 = v172 >> 3;
                    BOOL v146 = v172 >> 3 < -1;
                    uint64_t v174 = (v172 >> 3) + 2;
                    if (v146) {
                      uint64_t v175 = v174;
                    }
                    else {
                      uint64_t v175 = v173 + 1;
                    }
                    __int16 v176 = &v169[-8 * (v175 >> 1)];
                    uint64_t v177 = v231 - (void)v169;
                    if ((char *)v231 != v169)
                    {
                      memmove(&v169[-8 * (v175 >> 1)], v169, v231 - (void)v169);
                      int v163 = (char *)__p[1];
                    }
                    __int16 v178 = &v163[-8 * (v175 >> 1)];
                    int v163 = &v176[v177];
                    __p[1] = v178;
                    *(void *)&long long v231 = &v176[v177];
                    uint64_t v141 = v171;
                    unint64_t v142 = &OBJC_IVAR___CMHeadphoneActivityManagerInternal_fLogger;
                  }
                }
                *(void *)int v163 = v170;
                *(void *)&long long v231 = v231 + 8;
              }
              int v164 = (char *)__p[1];
              uint64_t v167 = *((void *)&v232 + 1);
              unint64_t v168 = *((void *)&v232 + 1) + v232;
            }
            uint64_t v194 = *(void *)&v164[(v168 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v168 & 0x1FF);
            *(float *)uint64_t v194 = v162;
            *(float *)(v194 + 4) = (float)v136 + 0.5;
            *((void *)&v232 + 1) = v167 + 1;
            if (*((void *)v141 + 241) != -1) {
              dispatch_once(&qword_1E929D788, &unk_1EDFD1F80);
            }
            int v195 = *((void *)v142 + 240);
            if (os_log_type_enabled(v195, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v196 = (float *)(*(void *)((char *)__p[1]
                                         + (((unint64_t)(*((void *)&v232 + 1) + v232 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                             + 8 * ((*((void *)&v232 + 1) + v232 - 1) & 0x1FF));
              double v197 = v196[1];
              double v198 = *v196;
              *(_DWORD *)int buf = 136315906;
              *(void *)&uint8_t buf[4] = "PRTTSampleTemperature";
              *(_WORD *)&buf[12] = 2048;
              *(double *)&buf[14] = v197;
              *(_WORD *)&unsigned char buf[22] = 2080;
              *(void *)&buf[24] = "PRTTSamplePressure";
              v251.i16[0] = 2048;
              *(double *)((char *)v251.i64 + 2) = v198;
              _os_log_impl(&dword_1902AF000, v195, OS_LOG_TYPE_DEBUG, "%s,%f,%s,%f", buf, 0x2Au);
            }
            if (sub_1902D8400(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (*((void *)v141 + 241) != -1) {
                dispatch_once(&qword_1E929D788, &unk_1EDFD1F80);
              }
              v216 = (float *)(*(void *)((char *)__p[1]
                                         + (((unint64_t)(*((void *)&v232 + 1) + v232 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                             + 8 * ((*((void *)&v232 + 1) + v232 - 1) & 0x1FF));
              double v217 = v216[1];
              double v218 = *v216;
              *(_DWORD *)int v243 = 136315906;
              *(void *)&v243[4] = "PRTTSampleTemperature";
              __int16 v244 = 2048;
              double v245 = v217;
              __int16 v246 = 2080;
              double v247 = "PRTTSamplePressure";
              __int16 v248 = 2048;
              double v249 = v218;
              double v219 = (char *)_os_log_send_and_compose_impl();
              sub_1902D398C("Generic", 1, 0, 2, "std::deque<CLMotionTypePressure> CLRobustSlopeEstimator::computePRTT()", "CoreLocation: %s\n", v219);
              if (v219 != buf) {
                free(v219);
              }
            }
          }
          sub_1902D5B70(&v257);
        }
      }
      int v242 = v136 + 1;
      BOOL v146 = v136++ < *((_DWORD *)v58 + 27);
    }
    while (v146);
  }
  uint64_t v138 = *(void ***)(a3 + 80);
  uint64_t v137 = *(void *)(a3 + 88);
  *(void *)(a3 + 112) = 0;
  unint64_t v139 = v137 - (void)v138;
  if ((unint64_t)(v137 - (void)v138) < 0x11)
  {
    uint64_t v140 = (void **)(a3 + 72);
  }
  else
  {
    uint64_t v140 = (void **)(a3 + 72);
    do
    {
      operator delete(*v138);
      uint64_t v137 = *(void *)(a3 + 88);
      uint64_t v138 = (void **)(*(void *)(a3 + 80) + 8);
      *(void *)(a3 + 80) = v138;
      unint64_t v139 = v137 - (void)v138;
    }
    while ((unint64_t)(v137 - (void)v138) > 0x10);
  }
  unint64_t v220 = v139 >> 3;
  if (v220 == 1)
  {
    uint64_t v221 = 256;
    goto LABEL_264;
  }
  if (v220 == 2)
  {
    uint64_t v221 = 512;
LABEL_264:
    *(void *)(a3 + 104) = v221;
  }
  uint64_t v222 = *(void *)(a3 + 112);
  if (v222)
  {
    unint64_t v223 = *(void *)(a3 + 104);
    if (v223 >= 0x200)
    {
      operator delete(*v138);
      uint64_t v137 = *(void *)(a3 + 88);
      uint64_t v138 = (void **)(*(void *)(a3 + 80) + 8);
      *(void *)(a3 + 80) = v138;
      uint64_t v222 = *(void *)(a3 + 112);
      unint64_t v223 = *(void *)(a3 + 104) - 512;
      *(void *)(a3 + 104) = v223;
    }
    if ((void **)v137 == v138) {
      uint64_t v224 = 0;
    }
    else {
      uint64_t v224 = ((v137 - (void)v138) << 6) - 1;
    }
    if (v224 - (v223 + v222) >= 0x200)
    {
      operator delete(*(void **)(v137 - 8));
      *(void *)(a3 + 88) -= 8;
    }
  }
  else
  {
    while ((void **)v137 != v138)
    {
      operator delete(*(void **)(v137 - 8));
      uint64_t v138 = *(void ***)(a3 + 80);
      uint64_t v137 = *(void *)(a3 + 88) - 8;
      *(void *)(a3 + 88) = v137;
    }
    *(void *)(a3 + 104) = 0;
  }
  sub_1902DD6F4(v140);
  uint64_t v226 = *(void *)(a3 + 80);
  uint64_t v225 = *(void *)(a3 + 88);
  if (v225 != v226) {
    *(void *)(a3 + 88) = v225 + ((v226 - v225 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  sub_1902DD6F4(v140);
  long long v227 = v231;
  *(_OWORD *)(a3 + 72) = *(_OWORD *)__p;
  *(_OWORD *)(a3 + 88) = v227;
  *(_OWORD *)__p = 0u;
  long long v231 = 0u;
  *(_OWORD *)(a3 + 104) = v232;
  long long v232 = 0uLL;
  sub_1904CECDC(__p);
  sub_1902D5B70(&v233);
  sub_1902D5B70(&v236);
  sub_1902D5B70(&v239);
}

void sub_1902D4EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60)
{
  sub_1904CECDC(v60);
  _Unwind_Resume(a1);
}

char *sub_1902D4FD4(uint64_t **a1, int a2, _DWORD *a3)
{
  int32x4_t v6 = a1 + 1;
  int v5 = (char *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        long long v7 = v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        int v5 = *(char **)v7;
        int32x4_t v6 = (uint64_t **)v7;
        if (!*(void *)v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      int v5 = (char *)*((void *)v7 + 1);
      if (!v5)
      {
        int32x4_t v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    long long v7 = (char *)(a1 + 1);
LABEL_9:
    unint64_t v9 = v7;
    long long v7 = (char *)operator new(0x58uLL);
    *((_DWORD *)v7 + 8) = *a3;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(void *)long long v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v9;
    *int32x4_t v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    sub_1902DD3B4(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t sub_1902D50B4(uint64_t a1, const char *a2, int a3, signed int a4, const char *a5, const char *a6, va_list a7, ...)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  fpos_t v13 = a1 + 40;
  (*(void (**)(uint64_t))(*(void *)(a1 + 40) + 16))(a1 + 40);
  unsigned int v14 = vsnprintf(__str, 0x1FFuLL, a6, a7);
  if ((v14 & 0x80000000) == 0)
  {
    if (v14 >= 0x1FF) {
      operator new[]();
    }
    uint64_t v15 = (int)v14 - 1;
    if (__str[v15] != 10) {
      __assert_rtn("vlog", "CLLog.mm", 172, "'\\n' == buffer[fullContentLength - 1]");
    }
    if (v14 >= 2)
    {
      uint64_t v15 = v15;
      unint64_t v16 = __str;
      do
      {
        if (*v16 == 10) {
          *unint64_t v16 = 32;
        }
        ++v16;
        --v15;
      }
      while (v15);
    }
    double Current = CFAbsoluteTimeGetCurrent();
    double v18 = Current;
    if (*(unsigned char *)(a1 + 152))
    {
      if (a4 > 5) {
        unint64_t v19 = "NONE";
      }
      else {
        unint64_t v19 = off_1E568E5F0[a4];
      }
      fprintf(*(FILE **)(a1 + 200), "%s,%s,Time,%08.3f,Function,\"%s\",", v19, a2, Current, a5);
      fputs(__str, *(FILE **)(a1 + 200));
    }
    else
    {
      unint64_t v20 = *(FILE **)(a1 + 184);
      if (v20 && *(_DWORD *)(a1 + 160) >= a4)
      {
        if (a4 > 5) {
          uint64_t v21 = "NONE";
        }
        else {
          uint64_t v21 = off_1E568E5F0[a4];
        }
        fprintf(v20, "%s,%s,Time,%08.3f,Function,\"%s\",", v21, a2, Current, a5);
        fputs(__str, *(FILE **)(a1 + 184));
        if (*(_DWORD *)(a1 + 172) >= a4) {
          sub_1904F1FA0(a1, 3, *(FILE **)(a1 + 184));
        }
        v50[1] = v13;
        (*(void (**)(fpos_t))(*(void *)v13 + 16))(v13);
        __int16 v51 = 256;
        if (*(int *)(a1 + 12) >= 1)
        {
          long long v23 = *(FILE **)(a1 + 184);
          if (v23)
          {
            if (*(char *)(a1 + 151) < 0 ? *(void *)(a1 + 136) : *(unsigned __int8 *)(a1 + 151))
            {
              if (*(char *)(a1 + 79) < 0 ? *(void *)(a1 + 64) : *(unsigned __int8 *)(a1 + 79))
              {
                v50[0] = 0;
                fgetpos(v23, v50);
                if (v50[0] >= *(int *)(a1 + 12))
                {
                  fpos_t v77 = v13;
                  (*(void (**)(fpos_t))(*(void *)v13 + 16))(v13);
                  __int16 v78 = 256;
                  sub_1902C3F54(__p, ".log");
                  uint64_t v28 = sub_190592D84(a1, v26, v27);
                  sub_190592948((const void **)(a1 + 56), a1 + 80, (uint64_t)__p, v28, &v76);
                  if (SHIBYTE(v53) < 0) {
                    operator delete(__p[0]);
                  }
                  if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    size_t size = HIBYTE(v76.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    size_t size = v76.__r_.__value_.__l.__size_;
                  }
                  uint64_t v30 = &v74;
                  sub_190395000((uint64_t)&v74, size + 4);
                  if (v75 < 0) {
                    uint64_t v30 = (long long *)v74;
                  }
                  if (size)
                  {
                    if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      uint64_t v31 = &v76;
                    }
                    else {
                      uint64_t v31 = (std::string *)v76.__r_.__value_.__r.__words[0];
                    }
                    memmove(v30, v31, size);
                  }
                  strcpy((char *)v30 + size, ".bz2");
                  sub_1904F2E9C(a1);
                  if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    uint64_t v32 = &v76;
                  }
                  else {
                    uint64_t v32 = (std::string *)v76.__r_.__value_.__r.__words[0];
                  }
                  uid_t v33 = getuid();
                  gid_t v34 = getgid();
                  sub_190453FC4(v32, v33, v34);
                  int v36 = (char *)(a1 + 128);
                  uint64_t v37 = (const std::__fs::filesystem::path *)(a1 + 128);
                  if (*(char *)(a1 + 151) < 0) {
                    uint64_t v37 = *(const std::__fs::filesystem::path **)v36;
                  }
                  if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    int v38 = (const std::__fs::filesystem::path *)&v76;
                  }
                  else {
                    int v38 = (const std::__fs::filesystem::path *)v76.__r_.__value_.__r.__words[0];
                  }
                  rename(v37, v38, v35);
                  if (v39)
                  {
                    int v40 = SHIBYTE(v75);
                    unint64_t v41 = (const char *)v74;
                    uint64_t v42 = __error();
                    unsigned int v43 = (const char *)&v74;
                    if (v40 < 0) {
                      unsigned int v43 = v41;
                    }
                    syslog(3, "%s,%s,Failed to move aside log file %s (%d)\n", "ERROR", "CLLog", v43, *v42);
                  }
                  if (*(char *)(a1 + 151) < 0) {
                    int v36 = *(char **)v36;
                  }
                  sub_1904F287C(a1, v36);
                  if (*(char *)(a1 + 103) < 0)
                  {
                    sub_190347AFC(&__dst, *(void **)(a1 + 80), *(void *)(a1 + 88));
                  }
                  else
                  {
                    long long __dst = *(_OWORD *)(a1 + 80);
                    uint64_t v73 = *(void *)(a1 + 96);
                  }
                  if (*(char *)(a1 + 79) < 0)
                  {
                    sub_190347AFC(&v70, *(void **)(a1 + 56), *(void *)(a1 + 64));
                  }
                  else
                  {
                    long long v70 = *(_OWORD *)(a1 + 56);
                    uint64_t v71 = *(void *)(a1 + 72);
                  }
                  int v44 = *(_DWORD *)(a1 + 16);
                  v68[0] = 0;
                  v68[1] = v68;
                  v68[2] = 0x2020000000;
                  int v69 = 0;
                  v62[0] = MEMORY[0x1E4F143A8];
                  v62[1] = 3321888768;
                  v62[2] = sub_1904F2F1C;
                  v62[3] = &unk_1EDFD1160;
                  v62[5] = a1;
                  if (SHIBYTE(v73) < 0)
                  {
                    sub_190347AFC(&v63, (void *)__dst, *((unint64_t *)&__dst + 1));
                  }
                  else
                  {
                    long long v63 = __dst;
                    uint64_t v64 = v73;
                  }
                  v62[4] = v68;
                  int v67 = v44;
                  if (SHIBYTE(v71) < 0)
                  {
                    sub_190347AFC(&v65, (void *)v70, *((unint64_t *)&v70 + 1));
                  }
                  else
                  {
                    long long v65 = v70;
                    uint64_t v66 = v71;
                  }
                  uint64_t v45 = *(NSObject **)(a1 + 208);
                  __p[0] = (void *)MEMORY[0x1E4F143A8];
                  __p[1] = (void *)3321888768;
                  uint64_t v53 = sub_1904F3308;
                  uint64_t v54 = &unk_1EDFD1198;
                  int v61 = v44;
                  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
                    sub_190347AFC(&v56, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v56 = v76;
                  }
                  if (SHIBYTE(v75) < 0)
                  {
                    sub_190347AFC(&v57, (void *)v74, *((unint64_t *)&v74 + 1));
                  }
                  else
                  {
                    long long v57 = v74;
                    uint64_t v58 = v75;
                  }
                  if (SHIBYTE(v71) < 0)
                  {
                    sub_190347AFC(&v59, (void *)v70, *((unint64_t *)&v70 + 1));
                  }
                  else
                  {
                    long long v59 = v70;
                    uint64_t v60 = v71;
                  }
                  uint64_t v55 = v62;
                  dispatch_async(v45, __p);
                  if (SHIBYTE(v60) < 0) {
                    operator delete((void *)v59);
                  }
                  if (SHIBYTE(v58) < 0) {
                    operator delete((void *)v57);
                  }
                  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v56.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v66) < 0) {
                    operator delete((void *)v65);
                  }
                  if (SHIBYTE(v64) < 0) {
                    operator delete((void *)v63);
                  }
                  _Block_object_dispose(v68, 8);
                  if (SHIBYTE(v71) < 0) {
                    operator delete((void *)v70);
                  }
                  if (SHIBYTE(v73) < 0) {
                    operator delete((void *)__dst);
                  }
                  if (SHIBYTE(v75) < 0) {
                    operator delete((void *)v74);
                  }
                  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v76.__r_.__value_.__l.__data_);
                  }
                  (*(void (**)(fpos_t))(*(void *)v13 + 24))(v13);
                }
              }
            }
          }
        }
        (*(void (**)(fpos_t))(*(void *)v13 + 24))(v13);
      }
      uint64_t v46 = *(FILE **)(a1 + 192);
      if (v46 && *(_DWORD *)(a1 + 164) >= a4)
      {
        if (a4 > 5) {
          unint64_t v47 = "NONE";
        }
        else {
          unint64_t v47 = off_1E568E5F0[a4];
        }
        fprintf(v46, "%s,%s,Time,%08.3f,", v47, a2, v18);
        fputs(__str, *(FILE **)(a1 + 192));
      }
      if ((!a3 || *(_DWORD *)(a1 + 176)) && *(_DWORD *)(a1 + 168) >= a4)
      {
        if (a4) {
          int v48 = 5;
        }
        else {
          int v48 = 3;
        }
        syslog(v48, "%s", __str);
      }
    }
  }
  return (*(uint64_t (**)(fpos_t))(*(void *)v13 + 24))(v13);
}

void sub_1902D595C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  _Block_object_dispose(&a65, 8);
  if (a72 < 0) {
    operator delete(a69);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  sub_1904373C8((uint64_t)&a79);
  sub_1904373C8((uint64_t)&a22);
  if (v79) {
    MEMORY[0x192FCC960](v79, 0x1000C8077774924);
  }
  sub_1904373C8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void *sub_1902D5AB8(void *a1)
{
  *a1 = &unk_1EDFC8FA8;
  a1[20] = &unk_1EDFC93B0;
  sub_1902D5B70(a1 + 23);
  a1[11] = &unk_1EDFC93B0;
  sub_1902D5B70(a1 + 14);
  a1[2] = &unk_1EDFC93B0;
  sub_1902D5B70(a1 + 5);
  return a1;
}

uint64_t sub_1902D5B70(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    long long v7 = *v2++;
    operator delete(v7);
  }

  return sub_1902D5C18((uint64_t)a1);
}

uint64_t sub_1902D5C18(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void sub_1902D610C(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

void sub_1902D6138(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current != *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    uint64_t v12 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
    {
      int v14 = *(_DWORD *)(a1 + 16);
      int v13 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)int buf = 68290051;
      *(_DWORD *)uint64_t v22 = 0;
      *(_WORD *)&v22[4] = 2082;
      *(void *)&v22[6] = "";
      __int16 v23 = 1026;
      int v24 = v13;
      __int16 v25 = 1026;
      int v26 = v14;
      __int16 v27 = 2082;
      uint64_t v28 = "assert";
      __int16 v29 = 2081;
      uint64_t v30 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setProperty should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    uint64_t v15 = off_1EB3BE890;
    if (os_signpost_enabled((os_log_t)off_1EB3BE890))
    {
      int v17 = *(_DWORD *)(a1 + 16);
      int v16 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)int buf = 68290051;
      *(_DWORD *)uint64_t v22 = 0;
      *(_WORD *)&v22[4] = 2082;
      *(void *)&v22[6] = "";
      __int16 v23 = 1026;
      int v24 = v16;
      __int16 v25 = 1026;
      int v26 = v17;
      __int16 v27 = 2082;
      uint64_t v28 = "assert";
      __int16 v29 = 2081;
      uint64_t v30 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] setProperty should be called from motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] setProperty should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    a2 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
    {
      int v19 = *(_DWORD *)(a1 + 16);
      int v18 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)int buf = 68290051;
      *(_DWORD *)uint64_t v22 = 0;
      *(_WORD *)&v22[4] = 2082;
      *(void *)&v22[6] = "";
      __int16 v23 = 1026;
      int v24 = v18;
      __int16 v25 = 1026;
      int v26 = v19;
      __int16 v27 = 2082;
      uint64_t v28 = "assert";
      __int16 v29 = 2081;
      uint64_t v30 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, a2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setProperty should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
    }
    abort_report_np();
LABEL_20:
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    goto LABEL_5;
  }
  sub_1902D65C4(*(void *)(a1 + 32));
  if (a3)
  {
    long long v7 = [CLPropertyValue alloc];
    id v9 = (id)objc_msgSend_initWithValue_dirty_(v7, v8, a3, 1);
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 160), v10, (uint64_t)v9, a2);
    goto LABEL_8;
  }
  if (qword_1EB3BE898 != -1) {
    goto LABEL_20;
  }
LABEL_5:
  uint64_t v11 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)int buf = 138543362;
    *(void *)uint64_t v22 = a2;
    _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_FAULT, "[CLIoHidInterface] Could not set property value for %{public}@", buf, 0xCu);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    unint64_t v20 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "virtual void CLIoHidInterface::Device::setProperty(NSString *, id)", "CoreLocation: %s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
LABEL_8:
  sub_1902D6C14(*(void *)(a1 + 32));
}

void sub_1902D65C4(uint64_t a1)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current != *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    id v9 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 68289539;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      int v17 = "assert";
      __int16 v18 = 2081;
      int v19 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] initializeHidIfNecessary should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    uint64_t v10 = off_1EB3BE890;
    if (os_signpost_enabled((os_log_t)off_1EB3BE890))
    {
      *(_DWORD *)int buf = 68289539;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      int v17 = "assert";
      __int16 v18 = 2081;
      int v19 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] initializeHidIfNecessary should be running on motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] initializeHidIfNecessary should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    uint64_t v11 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 68289539;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      int v17 = "assert";
      __int16 v18 = 2081;
      int v19 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] initializeHidIfNecessary should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_30:
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
LABEL_7:
    uint64_t v6 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Event system client initialized successfully", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
      long long v7 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::initializeHidIfNecessary()", "CoreLocation: %s\n");
LABEL_34:
      if (v7 != buf) {
        free(v7);
      }
      return;
    }
    return;
  }
  if (*(void *)(a1 + 40)) {
    return;
  }
  unint64_t v20 = @"HighFrequency";
  uint64_t v4 = MEMORY[0x1E4F1CC38];
  if (!*(unsigned char *)(a1 + 48)) {
    uint64_t v4 = MEMORY[0x1E4F1CC28];
  }
  v21[0] = v4;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v3, (uint64_t)v21, &v20, 1);
  uint64_t v5 = IOHIDEventSystemClientCreateWithType();
  *(void *)(a1 + 40) = v5;
  if (v5)
  {
    sub_1902D6BD0();
    IOHIDEventSystemClientScheduleWithRunLoop();
    IOHIDEventSystemClientRegisterEventCallback();
    IOHIDEventSystemClientRegisterResetCallback();
    IOHIDEventSystemClientRegisterDeviceMatchingCallback();
    sub_1902CB12C(a1);
    IOHIDEventSystemClientSetProperty(*(IOHIDEventSystemClientRef *)(a1 + 40), @"PreserveTimestamp", (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
    if (qword_1EB3BE898 == -1) {
      goto LABEL_7;
    }
    goto LABEL_30;
  }
  if (qword_1EB3BE898 != -1) {
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
  }
  int v8 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_FAULT, "[CLIoHidInterface] Could not create event system client. All bets are off", buf, 2u);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    long long v7 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "void CLIoHidInterface::initializeHidIfNecessary()", "CoreLocation: %s\n");
    goto LABEL_34;
  }
}

uint64_t sub_1902D6BD0()
{
  if (qword_1EB3BE930 != -1) {
    dispatch_once(&qword_1EB3BE930, &unk_1EDFD1BE0);
  }
  return qword_1EB3BF828;
}

void sub_1902D6C14(uint64_t a1)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  p_cache = CMDeviceOrientationManager.cache;
  if (Current == *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (qword_1EB3BE898 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    uint64_t v66 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 68289539;
      *(_DWORD *)float v93 = 0;
      *(_WORD *)&v93[4] = 2082;
      *(void *)&v93[6] = "";
      *(_WORD *)&v93[14] = 2082;
      *(void *)&v93[16] = "assert";
      *(_WORD *)&v93[24] = 2081;
      *(void *)&v93[26] = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v66, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] applyAllDirtyDeviceProperties should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    int v67 = off_1EB3BE890;
    if (os_signpost_enabled((os_log_t)off_1EB3BE890))
    {
      *(_DWORD *)int buf = 68289539;
      *(_DWORD *)float v93 = 0;
      *(_WORD *)&v93[4] = 2082;
      *(void *)&v93[6] = "";
      *(_WORD *)&v93[14] = 2082;
      *(void *)&v93[16] = "assert";
      *(_WORD *)&v93[24] = 2081;
      *(void *)&v93[26] = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v67, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] applyAllDirtyDeviceProperties should be running on motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] applyAllDirtyDeviceProperties should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    p_cache = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 68289539;
      *(_DWORD *)float v93 = 0;
      *(_WORD *)&v93[4] = 2082;
      *(void *)&v93[6] = "";
      *(_WORD *)&v93[14] = 2082;
      *(void *)&v93[16] = "assert";
      *(_WORD *)&v93[24] = 2081;
      *(void *)&v93[26] = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, p_cache, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] applyAllDirtyDeviceProperties should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    uint64_t v70 = 219;
    uint64_t v71 = "applyAllDirtyDeviceProperties";
    int v69 = "/Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Shared/Motion/IO/CLIoHidInterface.mm";
    abort_report_np();
    __break(1u);
  }
  dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
LABEL_3:
  Class isa = p_cache[274].isa;
  if (os_log_type_enabled(isa, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_1902AF000, isa, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Apply all dirty device properties", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    LOWORD(v83) = 0;
    LODWORD(v70) = 2;
    uint64_t v68 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::applyAllDirtyDeviceProperties()", "CoreLocation: %s\n", v68);
    if (v68 != (char *)buf) {
      free(v68);
    }
    p_cache = (CMDeviceOrientationManager + 16);
  }
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v6 = *(void **)(a1 + 16);
  if (v5 == v6) {
    goto LABEL_56;
  }
  LOBYTE(v7) = 1;
  uint64_t v76 = a1;
  uint64_t v72 = *(void **)(a1 + 16);
  do
  {
    int v8 = (std::__shared_weak_count *)v5[1];
    if (v8)
    {
      uint64_t v9 = *v5;
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v75 = v8;
      long long v74 = std::__shared_weak_count::lock(v8);
      if (v74)
      {
        uint64_t v73 = v5;
        if (v9)
        {
          long long v81 = 0u;
          long long v82 = 0u;
          long long v79 = 0u;
          long long v80 = 0u;
          obuint64_t j = *(id *)(v9 + 160);
          uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v10, (uint64_t)&v79, v91, 16);
          if (v12)
          {
            uint64_t v78 = *(void *)v80;
            do
            {
              uint64_t v13 = 0;
              do
              {
                if (*(void *)v80 != v78) {
                  objc_enumerationMutation(obj);
                }
                CFStringRef v14 = *(const __CFString **)(*((void *)&v79 + 1) + 8 * v13);
                uint64_t v15 = objc_msgSend_objectForKeyedSubscript_(*(void **)(v9 + 160), v11, (uint64_t)v14, v69, v70, v71);
                if (objc_msgSend_dirty(v15, v16, v17))
                {
                  if (!*(void *)(v9 + 24)) {
                    sub_1902CC320(a1, 0);
                  }
                  if (*(int *)(a1 + 52) >= 10 && *(unsigned char *)(v9 + 40))
                  {
                    LOBYTE(v7) = 1;
                  }
                  else
                  {
                    int v19 = *(__IOHIDServiceClient **)(v9 + 24);
                    if (v19)
                    {
                      unint64_t v20 = (const void *)objc_msgSend_value(v15, v11, v18);
                      int v21 = sub_1902D79BC(v19, v14, v20);
                      objc_msgSend_setDirty_(v15, v22, v21 ^ 1u);
                      if (v7) {
                        int v7 = objc_msgSend_dirty(v15, v23, v24) ^ 1;
                      }
                      else {
                        LOBYTE(v7) = 0;
                      }
                      if (qword_1EB3BE898 != -1) {
                        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
                      }
                      uint64_t v28 = p_cache[274].isa;
                      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
                      {
                        int v32 = *(_DWORD *)(v9 + 16);
                        int v31 = *(_DWORD *)(v9 + 20);
                        uint64_t v33 = objc_msgSend_value(v15, v29, v30);
                        int v36 = objc_msgSend_dirty(v15, v34, v35);
                        *(_DWORD *)int buf = 67241218;
                        uint64_t v37 = "successfully";
                        if (v36) {
                          uint64_t v37 = "unsuccessfully";
                        }
                        *(_DWORD *)float v93 = v31;
                        *(_WORD *)&v93[4] = 1026;
                        *(_DWORD *)&v93[6] = v32;
                        *(_WORD *)&v93[10] = 2114;
                        *(void *)&v93[12] = v14;
                        *(_WORD *)&v93[20] = 2114;
                        *(void *)&v93[22] = v33;
                        *(_WORD *)&v93[30] = 2082;
                        *(void *)&v93[32] = v37;
                        _os_log_impl(&dword_1902AF000, v28, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Property for usage pair {%{public}d, %{public}d}: {%{public}@ = %{public}@} was set %{public}s", buf, 0x2Cu);
                        a1 = v76;
                        p_cache = CMDeviceOrientationManager.cache;
                      }
                      if (sub_1902D8400(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1EB3BE898 != -1) {
                          dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
                        }
                        int v41 = *(_DWORD *)(v9 + 16);
                        int v40 = *(_DWORD *)(v9 + 20);
                        uint64_t v42 = objc_msgSend_value(v15, v38, v39);
                        int v45 = objc_msgSend_dirty(v15, v43, v44);
                        int v83 = 67241218;
                        uint64_t v46 = "successfully";
                        if (v45) {
                          uint64_t v46 = "unsuccessfully";
                        }
                        *(_DWORD *)unint64_t v84 = v40;
                        *(_WORD *)&v84[4] = 1026;
                        *(_DWORD *)&v84[6] = v41;
                        __int16 v85 = 2114;
                        CFStringRef v86 = v14;
                        __int16 v87 = 2114;
                        uint64_t v88 = v42;
                        __int16 v89 = 2082;
                        double v90 = v46;
                        LODWORD(v70) = 44;
                        unint64_t v47 = (char *)_os_log_send_and_compose_impl();
                        sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::applyAllDirtyDeviceProperties()", "CoreLocation: %s\n", v47);
                        a1 = v76;
                        p_cache = (CMDeviceOrientationManager + 16);
                        if (v47 != (char *)buf) {
                          free(v47);
                        }
                      }
                    }
                    else
                    {
                      if (qword_1EB3BE898 != -1) {
                        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
                      }
                      __int16 v25 = p_cache[274].isa;
                      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
                      {
                        int v27 = *(_DWORD *)(v9 + 16);
                        int v26 = *(_DWORD *)(v9 + 20);
                        *(_DWORD *)int buf = 67240448;
                        *(_DWORD *)float v93 = v26;
                        *(_WORD *)&v93[4] = 1026;
                        *(_DWORD *)&v93[6] = v27;
                        _os_log_impl(&dword_1902AF000, v25, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Service for device with usage pair {%{public}d, %{public}d} is not ready", buf, 0xEu);
                      }
                      if (sub_1902D8400(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1EB3BE898 != -1) {
                          dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
                        }
                        int v49 = *(_DWORD *)(v9 + 16);
                        int v48 = *(_DWORD *)(v9 + 20);
                        int v83 = 67240448;
                        *(_DWORD *)unint64_t v84 = v48;
                        *(_WORD *)&v84[4] = 1026;
                        *(_DWORD *)&v84[6] = v49;
                        LODWORD(v70) = 14;
                        uint64_t v50 = (char *)_os_log_send_and_compose_impl();
                        sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::applyAllDirtyDeviceProperties()", "CoreLocation: %s\n", v50);
                        if (v50 != (char *)buf) {
                          free(v50);
                        }
                      }
                      LOBYTE(v7) = 0;
                    }
                  }
                }
                ++v13;
              }
              while (v12 != v13);
              uint64_t v51 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v11, (uint64_t)&v79, v91, 16);
              uint64_t v12 = v51;
            }
            while (v51);
          }
        }
        sub_1902D8B58(v74);
        uint64_t v6 = v72;
        uint64_t v5 = v73;
      }
      std::__shared_weak_count::__release_weak(v75);
    }
    v5 += 2;
  }
  while (v5 != v6);
  if (v7)
  {
LABEL_56:
    *(_DWORD *)(a1 + 52) = 0;
LABEL_57:
    double v52 = 1.79769313e308;
    goto LABEL_58;
  }
  int v53 = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(a1 + 52) = v53 + 1;
  if (v53 <= 4)
  {
    double v54 = CFAbsoluteTimeGetCurrent();
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    uint64_t v55 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 134349056;
      *(void *)float v93 = 0x3FD0000000000000;
      _os_log_impl(&dword_1902AF000, v55, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Could not set all properties. Setting timer to fire %{public}f seconds from now", buf, 0xCu);
    }
    int v56 = sub_1902D8400(115, 2);
    double v52 = v54 + 0.25;
    if (v56)
    {
      double v57 = v54 + 0.25;
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
      int v83 = 134349056;
      *(void *)unint64_t v84 = 0x3FD0000000000000;
      uint64_t v58 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::applyAllDirtyDeviceProperties()", "CoreLocation: %s\n", v58);
      a1 = v76;
      if (v58 != (char *)buf) {
        free(v58);
      }
      double v52 = v57;
    }
    goto LABEL_58;
  }
  if (v53 > 9)
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    uint64_t v64 = p_cache[274].isa;
    if (os_log_type_enabled(v64, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v64, OS_LOG_TYPE_FAULT, "[CLIoHidInterface] Could not set all properties after too many retries. Giving up.", buf, 2u);
    }
    if (!sub_1902D8400(115, 0)) {
      goto LABEL_57;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    LOWORD(v83) = 0;
    long long v65 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "void CLIoHidInterface::applyAllDirtyDeviceProperties()", "CoreLocation: %s\n", v65);
    if (v65 != (char *)buf) {
      free(v65);
    }
    double v52 = 1.79769313e308;
LABEL_91:
    a1 = v76;
    goto LABEL_58;
  }
  double v59 = CFAbsoluteTimeGetCurrent();
  if (qword_1EB3BE898 != -1) {
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
  }
  uint64_t v60 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 134349056;
    *(void *)float v93 = 0x4004000000000000;
    _os_log_impl(&dword_1902AF000, v60, OS_LOG_TYPE_INFO, "[CLIoHidInterface] Could not set all properties. Setting timer to fire %{public}f seconds from now", buf, 0xCu);
  }
  int v61 = sub_1902D8400(115, 2);
  double v52 = v59 + 2.5;
  if (v61)
  {
    double v62 = v59 + 2.5;
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    int v83 = 134349056;
    *(void *)unint64_t v84 = 0x4004000000000000;
    long long v63 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::applyAllDirtyDeviceProperties()", "CoreLocation: %s\n", v63);
    if (v63 != (char *)buf) {
      free(v63);
    }
    double v52 = v62;
    goto LABEL_91;
  }
LABEL_58:
  CFRunLoopTimerSetNextFireDate(*(CFRunLoopTimerRef *)(a1 + 56), v52);
}

void sub_1902D796C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, std::__shared_weak_count *a16)
{
}

uint64_t sub_1902D79BC(__IOHIDServiceClient *a1, const __CFString *a2, const void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current != *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    uint64_t v13 = off_1EB3BE890;
    p_cache = (void **)"CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 68289539;
      int v17 = 0;
      __int16 v18 = 2082;
      int v19 = "";
      __int16 v20 = 2082;
      int v21 = "assert";
      __int16 v22 = 2081;
      __int16 v23 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setPropertyIoHid should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    CFStringRef v14 = off_1EB3BE890;
    if (os_signpost_enabled((os_log_t)off_1EB3BE890))
    {
      *(_DWORD *)int buf = 68289539;
      int v17 = 0;
      __int16 v18 = 2082;
      int v19 = "";
      __int16 v20 = 2082;
      int v21 = "assert";
      __int16 v22 = 2081;
      __int16 v23 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] setPropertyIoHid should be running on motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] setPropertyIoHid should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    uint64_t v15 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 68289539;
      int v17 = 0;
      __int16 v18 = 2082;
      int v19 = "";
      __int16 v20 = 2082;
      int v21 = "assert";
      __int16 v22 = 2081;
      __int16 v23 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setPropertyIoHid should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    goto LABEL_29;
  }
  if (!a1)
  {
    p_cache = CMDeviceOrientationManager.cache;
    if (qword_1EB3BE898 == -1)
    {
LABEL_6:
      uint64_t v9 = off_1EB3BE890;
      if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_FAULT, "[CLIoHidInterface] Property can not be set for null hidServiceRef", buf, 2u);
      }
      int v10 = sub_1902D8400(115, 0);
      uint64_t result = 0;
      if (!v10) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (p_cache[275] != (void *)-1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
      uint64_t v11 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "BOOL CLIoHidInterface::setPropertyIoHid(IOHIDServiceClientRef, CFStringRef, CFTypeRef)", "CoreLocation: %s\n");
LABEL_33:
      if (v11 != buf) {
        free(v11);
      }
      return 0;
    }
LABEL_29:
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    goto LABEL_6;
  }
  if (IOHIDServiceClientSetProperty(a1, a2, a3)) {
    return 1;
  }
  if (qword_1EB3BE898 != -1) {
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
  }
  uint64_t v12 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] IOHIDServiceClientSetProperty() returned false", buf, 2u);
  }
  uint64_t result = sub_1902D8400(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    uint64_t v11 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "BOOL CLIoHidInterface::setPropertyIoHid(IOHIDServiceClientRef, CFStringRef, CFTypeRef)", "CoreLocation: %s\n");
    goto LABEL_33;
  }
  return result;
}

void sub_1902D7F78(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (IOHIDEventGetType() == 13)
  {
    if (IOHIDEventGetIntegerValue() == 1)
    {
      if (qword_1EB3BE848 != -1) {
        dispatch_once(&qword_1EB3BE848, &unk_1EDFD3220);
      }
      uint64_t v2 = qword_1EB3BE840;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE840, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEBUG, "Received shake data, discarding.", buf, 2u);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE848 != -1) {
          dispatch_once(&qword_1EB3BE848, &unk_1EDFD3220);
        }
        *(_WORD *)int v32 = 0;
        uint64_t v3 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "static void CLAccelerometer::onAccelerometerIohidEvent(void *, void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v3);
        if (v3 != (char *)buf) {
          free(v3);
        }
      }
    }
    else
    {
      IOHIDEventGetFloatValue();
      float v5 = v4;
      IOHIDEventGetFloatValue();
      float v7 = v6;
      IOHIDEventGetFloatValue();
      float v9 = v8;
      unint64_t TimeStamp = IOHIDEventGetTimeStamp();
      double v11 = sub_1902D8D34(TimeStamp);
      double v18 = v11;
      float v19 = v5;
      float v20 = v7;
      float v21 = v9;
      if (qword_1EB3BE848 != -1) {
        dispatch_once(&qword_1EB3BE848, &unk_1EDFD3220);
      }
      uint64_t v12 = qword_1EB3BE840;
      if (os_log_type_enabled((os_log_t)qword_1EB3BE840, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 134218752;
        double v23 = v5;
        __int16 v24 = 2048;
        double v25 = v7;
        __int16 v26 = 2048;
        double v27 = v9;
        __int16 v28 = 2048;
        double v29 = v11;
        _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_DEBUG, "[Accelerometer] x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f", buf, 0x2Au);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE848 != -1) {
          dispatch_once(&qword_1EB3BE848, &unk_1EDFD3220);
        }
        *(_DWORD *)int v32 = 134218752;
        *(double *)&v32[4] = v5;
        *(_WORD *)&v32[12] = 2048;
        *(double *)&v32[14] = v7;
        __int16 v33 = 2048;
        double v34 = v9;
        *(_WORD *)uint64_t v35 = 2048;
        *(double *)&v35[2] = v11;
        int v17 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CLAccelerometer::onAccelerometerData(const CLMotionTypeAcceleration &, const CLMotionTypeTimestamp &)", "CoreLocation: %s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
      if (*(unsigned char *)(a1 + 32))
      {
        *(void *)int v32 = &unk_1EDFCA858;
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        *(float *)uint64_t v35 = v5;
        *(float *)&v35[4] = v7;
        *(float *)&v35[8] = v9;
        *(CFAbsoluteTime *)&v32[8] = Current;
        double v34 = v11;
        uint64_t v14 = sub_190570220();
        sub_190571738(v14, (uint64_t)v32);
        sub_190395088(buf);
        sub_1903AE2E0((uint64_t)buf);
        v31 |= 1u;
        uint64_t v30 = *(void *)&v32[8];
        double v15 = v27;
        char v16 = *(unsigned char *)(*(void *)&v27 + 32);
        *(double *)(*(void *)&v27 + 8) = v11;
        *(float *)(*(void *)&v15 + 20) = v5;
        *(float *)(*(void *)&v15 + 24) = v7;
        *(unsigned char *)(*(void *)&v15 + 32) = v16 | 0x1D;
        *(float *)(*(void *)&v15 + 28) = v9;
        sub_19039A590((PB::Base *)buf);
      }
      sub_1902D8BCC(a1, 0, (uint64_t)&v18, 24);
    }
  }
}

void sub_1902D83E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_19039A590((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1902D8400(uint64_t a1, int a2)
{
  if (qword_1EB3BF858 != -1) {
    dispatch_once(&qword_1EB3BF858, &unk_1EDFD1D20);
  }
  if (*(_DWORD *)(qword_1EB3BF850 + 160) >= a2
    || *(_DWORD *)(qword_1EB3BF850 + 164) >= a2
    || *(_DWORD *)(qword_1EB3BF850 + 168) >= a2)
  {
    return 1;
  }
  else
  {
    return *(unsigned __int8 *)(qword_1EB3BF850 + 152);
  }
}

void sub_1902D8480(uint64_t a1, uint64_t a2, __IOHIDServiceClient *a3, uint64_t a4)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    int Type = IOHIDEventGetType();
    if (Type)
    {
      float v9 = *(uint64_t **)(a1 + 8);
      int v10 = *(uint64_t **)(a1 + 16);
      if (v9 != v10)
      {
        int v11 = Type;
        do
        {
          uint64_t v12 = (std::__shared_weak_count *)v9[1];
          if (v12)
          {
            uint64_t v13 = *v9;
            atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            uint64_t v14 = std::__shared_weak_count::lock(v12);
            if (v14)
            {
              double v15 = v14;
              if (v13)
              {
                char v16 = *(void (**)(void, uint64_t, __IOHIDServiceClient *, uint64_t))(v13 + 48);
                if (v16)
                {
                  if (*(__IOHIDServiceClient **)(v13 + 24) == a3
                    || ((v17 = *(_DWORD *)(v13 + 144)) != 0 ? (BOOL v18 = v17 == v11) : (BOOL v18 = 0), v18))
                  {
                    v16(*(void *)(v13 + 56), a2, a3, a4);
                  }
                }
              }
              sub_1902D8B58(v15);
            }
            std::__shared_weak_count::__release_weak(v12);
          }
          v9 += 2;
        }
        while (v9 != v10);
      }
    }
    else
    {
      uint64_t valuePtr = 0;
      CFNumberRef RegistryID = (const __CFNumber *)IOHIDServiceClientGetRegistryID(a3);
      CFNumberGetValue(RegistryID, kCFNumberSInt64Type, &valuePtr);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
      float v21 = off_1EB3BE890;
      if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 134283777;
        int v40 = a3;
        __int16 v41 = 2050;
        uint64_t v42 = valuePtr;
        _os_log_impl(&dword_1902AF000, v21, OS_LOG_TYPE_INFO, "[CLIoHidInterface] Got null event,sender %{private}p,registryID %{public}llx", buf, 0x16u);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE898 != -1) {
          dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
        }
        int v35 = 134283777;
        uint64_t v36 = a3;
        __int16 v37 = 2050;
        uint64_t v38 = valuePtr;
        __int16 v33 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::onEvent(void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v33);
        if (v33 != (char *)buf) {
          free(v33);
        }
      }
      double v23 = *(uint64_t **)(a1 + 8);
      for (uint64_t i = *(uint64_t **)(a1 + 16); v23 != i; v23 += 2)
      {
        __int16 v24 = (std::__shared_weak_count *)v23[1];
        if (v24)
        {
          uint64_t v25 = *v23;
          atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          __int16 v26 = std::__shared_weak_count::lock(v24);
          if (v26)
          {
            double v27 = v26;
            if (v25)
            {
              if (*(void *)(v25 + 8) == valuePtr && *(void *)(v25 + 128))
              {
                if (qword_1EB3BE898 != -1) {
                  dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
                }
                __int16 v28 = off_1EB3BE890;
                if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)int buf = 0;
                  _os_log_impl(&dword_1902AF000, v28, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Fetching historical events", buf, 2u);
                }
                if (sub_1902D8400(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EB3BE898 != -1) {
                    dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
                  }
                  LOWORD(v35) = 0;
                  char v31 = (char *)_os_log_send_and_compose_impl();
                  sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::onEvent(void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v31);
                  if (v31 != (char *)buf) {
                    free(v31);
                  }
                }
                (*(void (**)(void))(v25 + 128))(*(void *)(v25 + 136));
              }
              else
              {
                if (qword_1EB3BE898 != -1) {
                  dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
                }
                double v29 = off_1EB3BE890;
                if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)int buf = 0;
                  _os_log_impl(&dword_1902AF000, v29, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Did not fetch historical events", buf, 2u);
                }
                if (sub_1902D8400(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EB3BE898 != -1) {
                    dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
                  }
                  LOWORD(v35) = 0;
                  uint64_t v30 = (char *)_os_log_send_and_compose_impl();
                  sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::onEvent(void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v30);
                  if (v30 != (char *)buf) {
                    free(v30);
                  }
                }
              }
            }
            sub_1902D8B58(v27);
          }
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
  }
  else
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    float v19 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v19, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Received null sender", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
      LOWORD(v35) = 0;
      int v32 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLIoHidInterface::onEvent(void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v32);
      if (v32 != (char *)buf) {
        free(v32);
      }
    }
  }
}

void sub_1902D8B18(_Unwind_Exception *a1)
{
  sub_1902D8B58(v2);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_1902D8B58(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

uint64_t sub_1902D8BCC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *(void *)(result + 16);
  int v9 = a2;
  uint64_t v10 = v8 + 80 * (int)a2;
  int v11 = *(void **)(v10 + 32);
  if (v11 != (void *)(v10 + 40))
  {
    do
    {
      int v12 = *((_DWORD *)v11 + 10);
      if (!v12)
      {
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)v11[4] + 16))(v11[4], a2, a3, a4);
        int v12 = *((_DWORD *)v11 + 10);
      }
      *((_DWORD *)v11 + 10) = (v12 + 1) % *((_DWORD *)v11 + 11);
      uint64_t v13 = (void *)v11[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)v11[2];
          BOOL v15 = *v14 == (void)v11;
          int v11 = v14;
        }
        while (!v15);
      }
      uint64_t v8 = *(void *)(v7 + 16);
      int v11 = v14;
    }
    while (v14 != (void *)(v8 + 80 * v9 + 40));
  }
  uint64_t v16 = v8 + 80 * v9;
  uint64_t v17 = *(void *)(v16 + 64);
  if (v17 != v16 + 56)
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v17 + 16) + 16))(*(void *)(v17 + 16), a2, a3, a4);
      uint64_t v17 = *(void *)(v17 + 8);
    }
    while (v17 != *(void *)(v7 + 16) + 80 * v9 + 56);
  }
  return result;
}

double sub_1902D8D34(unint64_t a1)
{
  double v2 = *(double *)&qword_1EB3BF818;
  if (*(double *)&qword_1EB3BF818 == 0.0)
  {
    mach_timebase_info(&info);
    if (info.denom)
    {
      denounint64_t m = info.denom;
      uint32_t numer = info.numer;
      do
      {
        uint32_t v5 = denom;
        denounint64_t m = numer % denom;
        uint32_t numer = v5;
      }
      while (denom);
    }
    else
    {
      uint32_t v5 = info.numer;
    }
    unsigned int v6 = 1000000000;
    uint32_t v7 = info.numer / v5;
    do
    {
      uint32_t v8 = v7;
      uint32_t v7 = v6;
      unsigned int v6 = v8 % v6;
    }
    while (v6);
    double v2 = (double)(info.numer / v5 / v7) / (double)(0x3B9ACA00 / v7 * (unint64_t)(info.denom / v5));
    *(double *)&qword_1EB3BF818 = v2;
  }
  return v2 * (double)a1;
}

double sub_1902D8DF4(uint64_t a1, uint64_t a2)
{
  return sub_1902D8DFC(a1 - 200, a2);
}

double sub_1902D8DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 280);
  sub_1902D9094(v4 + 16, (float *)(a2 + 8));
  sub_1902D9094(v4 + 88, (float *)(a2 + 12));
  sub_1902D9094(v4 + 160, (float *)(a2 + 16));
  uint64_t v5 = *(void *)(a1 + 280);
  unint64_t v6 = *(void *)(v5 + 80);
  if (v6 < *(void *)(v5 + 24)) {
    goto LABEL_16;
  }
  double result = 0.0;
  float v8 = 0.0;
  if (v6 >= 2)
  {
    float v9 = (float)((float)v6 * *(float *)(v5 + 36)) - (float)(*(float *)(v5 + 32) * *(float *)(v5 + 32));
    float v8 = 0.0;
    if (v9 >= 0.0) {
      float v8 = v9 / (float)((v6 - 1) * v6);
    }
  }
  unint64_t v10 = *(void *)(v5 + 152);
  if (v10 >= 2)
  {
    float v11 = (float)((float)v10 * *(float *)(v5 + 108)) - (float)(*(float *)(v5 + 104) * *(float *)(v5 + 104));
    if (v11 >= 0.0) {
      *(float *)&double result = v11 / (float)((v10 - 1) * v10);
    }
  }
  unint64_t v12 = *(void *)(v5 + 224);
  float v13 = 0.0;
  if (v12 >= 2)
  {
    float v14 = (float)((float)v12 * *(float *)(v5 + 180)) - (float)(*(float *)(v5 + 176) * *(float *)(v5 + 176));
    if (v14 >= 0.0) {
      float v13 = v14 / (float)((v12 - 1) * v12);
    }
  }
  if (v8 >= *(float *)&result) {
    *(float *)&double result = v8;
  }
  if (*(float *)&result < v13) {
    *(float *)&double result = v13;
  }
  if (*(float *)&result > *(float *)(a1 + 944))
  {
LABEL_16:
    double result = *(double *)a2;
    *(void *)(a1 + 936) = *(void *)a2;
    if (*(void *)(a1 + 48) == 2) {
      return result;
    }
    uint64_t v15 = sub_1902D6BD0();
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = sub_1905EA2CC;
    v20[3] = &unk_1E568CF68;
    v20[4] = a1;
    uint64_t v16 = v20;
    goto LABEL_18;
  }
  uint64_t v17 = *(void *)(a1 + 48);
  if (v17 == 1)
  {
    double result = *(double *)a2;
    if (*(double *)a2 > *(double *)(a1 + 936) + *(double *)(a1 + 928))
    {
      uint64_t v15 = sub_1902D6BD0();
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 3221225472;
      v18[2] = sub_1905EA418;
      v18[3] = &unk_1E568CF68;
      v18[4] = a1;
      uint64_t v16 = v18;
      goto LABEL_18;
    }
  }
  else if (v17 == 2)
  {
    double result = *(double *)a2;
    if (*(double *)a2 > *(double *)(a1 + 936) + *(double *)(a1 + 920))
    {
      uint64_t v15 = sub_1902D6BD0();
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 3221225472;
      v19[2] = sub_1905EA3D4;
      v19[3] = &unk_1E568CF68;
      v19[4] = a1;
      uint64_t v16 = v19;
LABEL_18:
      sub_1902CE9BC(v15, (uint64_t)v16);
    }
  }
  return result;
}

float sub_1902D9094(uint64_t a1, float *a2)
{
  uint64_t v4 = a1 + 24;
  sub_1902D913C((void *)(a1 + 24), a2);
  unint64_t v5 = *(void *)(a1 + 64);
  if (v5 > *(void *)(a1 + 8))
  {
    unint64_t v6 = *(void *)(a1 + 56);
    float v7 = *(float *)(*(void *)(*(void *)(a1 + 32) + ((v6 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v6 & 0x3FF));
    float v8 = *(float *)(a1 + 16) - v7;
    float v9 = *(float *)(a1 + 20) - (float)(v7 * v7);
    *(float *)(a1 + 16) = v8;
    *(float *)(a1 + 20) = v9;
    *(void *)(a1 + 56) = v6 + 1;
    *(void *)(a1 + 64) = v5 - 1;
    sub_1902D91C4(v4, 1);
  }
  float v10 = *(float *)(a1 + 20);
  *(float *)(a1 + 16) = *a2 + *(float *)(a1 + 16);
  float result = v10 + (float)(*a2 * *a2);
  *(float *)(a1 + 20) = result;
  return result;
}

float sub_1902D913C(void *a1, float *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1904C730C(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  float result = *a2;
  *(float *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
  return result;
}

uint64_t sub_1902D91C4(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x400) {
    a2 = 1;
  }
  if (v2 < 0x800) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 1024;
  }
  return v4 ^ 1u;
}

uint64_t sub_1902D9224(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a1);
}

uint64_t sub_1902D9254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a3, *(void *)(a1 + 24));
}

BOOL CLMotionActivity::isTypeScubaDiving(int a1)
{
  return a1 == 18200;
}

void sub_1902D9270(uint64_t a1, float32x4_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v8[0] = 0uLL;
  unint64_t v7 = 0xBFF0000000000000;
  sub_1902D9ACC(v8, a2);
  int v9 = 0;
  memset(&v8[1], 0, 32);
  long long v10 = xmmword_190609AC0;
  uint64_t v11 = 0x1FF00000000;
  int v12 = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  if (sub_1902D92FC(a5, (uint64_t)&v7, (float32x4_t)xmmword_190609AC0)) {
    sub_1902D9B30(a1, (uint64_t)&v7);
  }
}

uint64_t sub_1902D92FC(uint64_t a1, uint64_t a2, float32x4_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  *(void *)a2 = 0xBFF0000000000000;
  memset(buf, 0, sizeof(buf));
  sub_1902D9ACC((float32x4_t *)buf, a3);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)buf;
  *(void *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_DWORD *)(a2 + 56) = 0;
  *(void *)(a2 + 80) = 0;
  *(unsigned char *)(a2 + 88) = 0;
  if (a1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    IOHIDEventGetVendorDefinedData();
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD1980);
    }
    unint64_t v7 = off_1EB3BE870;
    if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_INFO, "Empty payload, returning", buf, 2u);
    }
    uint64_t result = sub_1902D8400(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE878 != -1) {
        dispatch_once(&qword_1EB3BE878, &unk_1EDFD1980);
      }
      __int16 __dst = 0;
LABEL_19:
      unint64_t v8 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "static BOOL CLSensorFusionServiceSPU::populateDeviceMotion(IOHIDEventRef, uint32_t, CLSensorFusionService::Sample &)", "CoreLocation: %s\n");
      if (v8 != buf) {
        free(v8);
      }
      return 0;
    }
  }
  else
  {
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD1980);
    }
    uint64_t v5 = off_1EB3BE870;
    if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_INFO, "#Warning Device motion event ref invalid", buf, 2u);
    }
    uint64_t result = sub_1902D8400(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE878 != -1) {
        dispatch_once(&qword_1EB3BE878, &unk_1EDFD1980);
      }
      __int16 __dst = 0;
      goto LABEL_19;
    }
  }
  return result;
}

float32x4_t sub_1902D9ACC(float32x4_t *a1, float32x4_t result)
{
  result.f32[0] = sqrtf((float)((float)((float)(a1->f32[1] * a1->f32[1]) + (float)(a1->f32[0] * a1->f32[0]))+ (float)(a1->f32[2] * a1->f32[2]))+ (float)(a1->f32[3] * a1->f32[3]));
  float v2 = result.f32[0] + -1.0;
  if ((float)(result.f32[0] + -1.0) <= 0.0) {
    float v2 = -(float)(result.f32[0] + -1.0);
  }
  if (v2 >= 0.00000011921)
  {
    if (result.f32[0] == 0.0)
    {
      a1->i64[0] = 0;
      a1->i64[1] = 0x3F80000000000000;
    }
    else
    {
      uint64_t result = vdivq_f32(*a1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)result.f32, 0));
      *a1 = result;
    }
  }
  return result;
}

void sub_1902D9B30(uint64_t a1, uint64_t a2)
{
  sub_1902D9C34(a1, a2);
  int v4 = *(void (**)(uint64_t, void, void))(a1 + 56);
  if (v4) {
    v4(a2, *(unsigned int *)(a1 + 12), *(void *)(a1 + 64));
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 88));
  *(void *)(a1 + 96) = *(void *)a2;
  if (a1 + 96 != a2) {
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 8);
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 156) = *(void *)(a2 + 60);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 100);
  *(_OWORD *)(a1 + 180) = v5;

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 88));
}

void sub_1902D9C34(uint64_t a1, uint64_t a2)
{
  uint64_t v186 = *MEMORY[0x1E4F143B8];
  if (*(double *)(a1 + 96) <= 0.0)
  {
    os_log_type_t v4 = OS_LOG_TYPE_DEFAULT;
  }
  else if (((*(unsigned __int16 *)(a1 + 178) ^ *(unsigned __int16 *)(a2 + 82)) >> 8))
  {
    os_log_type_t v4 = OS_LOG_TYPE_DEFAULT;
  }
  else
  {
    os_log_type_t v4 = OS_LOG_TYPE_DEBUG;
  }
  uint64_t v5 = mach_absolute_time();
  double v6 = sub_1902D8D34(v5);
  double v7 = *(double *)a2;
  if (qword_1EB3BE878 != -1) {
    dispatch_once(&qword_1EB3BE878, &unk_1EDFD29C0);
  }
  double v8 = v6 - v7;
  int v9 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, v4))
  {
    double v10 = *(float *)(a2 + 8);
    double v11 = *(float *)(a2 + 12);
    double v12 = *(float *)(a2 + 16);
    double v13 = *(float *)(a2 + 20);
    double v14 = *(float *)(a2 + 24);
    double v15 = *(float *)(a2 + 28);
    double v16 = *(float *)(a2 + 32);
    double v17 = (float)(*(float *)(a2 + 36) * 57.296);
    double v18 = (float)(*(float *)(a2 + 40) * 57.296);
    double v19 = (float)(*(float *)(a2 + 44) * 57.296);
    double v20 = *(float *)(a2 + 48);
    double v21 = *(float *)(a2 + 52);
    double v22 = *(float *)(a2 + 56);
    double v23 = *(float *)(a2 + 68);
    double v24 = *(float *)(a2 + 72);
    double v25 = *(float *)(a2 + 76);
    double v26 = *(float *)(a2 + 60);
    double v27 = *(float *)(a2 + 64);
    int v28 = *(char *)(a2 + 80);
    int v29 = *(_DWORD *)(a2 + 84);
    int v30 = *(unsigned __int8 *)(a2 + 81);
    int v31 = *(unsigned __int16 *)(a2 + 82);
    uint64_t v32 = *(void *)(a2 + 96);
    double v33 = *(double *)a2;
    *(_DWORD *)int buf = 134224384;
    double v93 = v10;
    __int16 v94 = 2048;
    double v95 = v11;
    __int16 v96 = 2048;
    double v97 = v12;
    __int16 v98 = 2048;
    double v99 = v13;
    __int16 v100 = 2048;
    double v101 = v14;
    __int16 v102 = 2048;
    double v103 = v15;
    __int16 v104 = 2048;
    double v105 = v16;
    __int16 v106 = 2048;
    double v107 = v17;
    __int16 v108 = 2048;
    double v109 = v18;
    __int16 v110 = 2048;
    double v111 = v19;
    __int16 v112 = 2048;
    double v113 = v20;
    __int16 v114 = 2048;
    double v115 = v21;
    __int16 v116 = 2048;
    double v117 = v22;
    __int16 v118 = 2048;
    double v119 = v23;
    __int16 v120 = 2048;
    double v121 = v24;
    __int16 v122 = 2048;
    double v123 = v25;
    __int16 v124 = 2048;
    double v125 = v26;
    __int16 v126 = 2048;
    double v127 = v27;
    __int16 v128 = 1026;
    int v129 = v28;
    __int16 v130 = 1026;
    int v131 = v29;
    __int16 v132 = 1026;
    int v133 = v30;
    __int16 v134 = 1026;
    int v135 = v31;
    __int16 v136 = 2050;
    uint64_t v137 = v32;
    __int16 v138 = 2050;
    double v139 = v33;
    __int16 v140 = 2050;
    double v141 = v6;
    __int16 v142 = 2050;
    double v143 = v8;
    _os_log_impl(&dword_1902AF000, v9, v4, "[CLSensorFusionService] q.x,%10.10f,q.y,%10.10f,q.z,%10.10f,q.w,%10.10f,userAccel.x,%10.10f,userAccel.y,%10.10f,userAccel.z,%10.10f,rotationRate.x,%10.10f,rotationRate.y,%10.10f,rotationRate.z,%10.10f,magneticField.x,%10.10f,magneticField.y,%10.10f,magneticField.z,%10.10f,magBiasEstVar.x,%10.10f,magBiasEstVar.y,%10.10f,magBiasEstVar.z,%10.10f,heading,%.3f,accuracy,%.3f,level,%{public}d,variant,%{public}d,mode,%{public}d,status,%{public}#02x,clientID,%{public}llu,timestamp,%{public}lf,now,%{public}lf,latency,%{public}lf", buf, 0xF6u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD29C0);
    }
    double v67 = *(float *)(a2 + 8);
    double v68 = *(float *)(a2 + 12);
    double v69 = *(float *)(a2 + 16);
    double v70 = *(float *)(a2 + 20);
    double v71 = *(float *)(a2 + 24);
    double v72 = *(float *)(a2 + 28);
    double v73 = *(float *)(a2 + 32);
    double v74 = (float)(*(float *)(a2 + 36) * 57.296);
    double v75 = (float)(*(float *)(a2 + 40) * 57.296);
    double v76 = (float)(*(float *)(a2 + 44) * 57.296);
    double v77 = *(float *)(a2 + 48);
    double v78 = *(float *)(a2 + 52);
    double v79 = *(float *)(a2 + 56);
    double v80 = *(float *)(a2 + 68);
    double v81 = *(float *)(a2 + 72);
    double v82 = *(float *)(a2 + 76);
    double v83 = *(float *)(a2 + 60);
    double v84 = *(float *)(a2 + 64);
    int v85 = *(char *)(a2 + 80);
    int v86 = *(_DWORD *)(a2 + 84);
    int v87 = *(unsigned __int8 *)(a2 + 81);
    int v88 = *(unsigned __int16 *)(a2 + 82);
    uint64_t v89 = *(void *)(a2 + 96);
    double v90 = *(double *)a2;
    *(_DWORD *)uint64_t v147 = 134224384;
    *(double *)&v147[4] = v67;
    *(_WORD *)&v147[12] = 2048;
    *(double *)&v147[14] = v68;
    __int16 v148 = 2048;
    double v149 = v69;
    *(_WORD *)uint64_t v150 = 2048;
    *(double *)&v150[2] = v70;
    *(_WORD *)&v150[10] = 2048;
    *(double *)&v150[12] = v71;
    *(_WORD *)&v150[20] = 2048;
    *(double *)&v150[22] = v72;
    *(_WORD *)&v150[30] = 2048;
    *(double *)&v150[32] = v73;
    *(_WORD *)uint64_t v151 = 2048;
    *(double *)&v151[2] = v74;
    *(_WORD *)&v151[10] = 2048;
    double v152 = v75;
    __int16 v153 = 2048;
    *(double *)float v154 = v76;
    *(_WORD *)&v154[8] = 2048;
    double v155 = v77;
    __int16 v156 = 2048;
    double v157 = v78;
    __int16 v158 = 2048;
    double v159 = v79;
    __int16 v160 = 2048;
    double v161 = v80;
    __int16 v162 = 2048;
    double v163 = v81;
    __int16 v164 = 2048;
    double v165 = v82;
    __int16 v166 = 2048;
    double v167 = v83;
    __int16 v168 = 2048;
    double v169 = v84;
    __int16 v170 = 1026;
    int v171 = v85;
    __int16 v172 = 1026;
    int v173 = v86;
    __int16 v174 = 1026;
    int v175 = v87;
    __int16 v176 = 1026;
    int v177 = v88;
    __int16 v178 = 2050;
    uint64_t v179 = v89;
    __int16 v180 = 2050;
    double v181 = v90;
    __int16 v182 = 2050;
    double v183 = v6;
    __int16 v184 = 2050;
    double v185 = v8;
    unint64_t v91 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLSensorFusionService::logSample(const CLSensorFusionService::Sample *)", "CoreLocation: %s\n", v91);
    if (v91 != (char *)buf) {
      free(v91);
    }
  }
  if (*(unsigned char *)(a1 + 8))
  {
    *(void *)uint64_t v147 = &unk_1EDFCA698;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    double v35 = *(double *)a2;
    *(CFAbsoluteTime *)&v147[8] = Current;
    double v149 = v35;
    *(_OWORD *)uint64_t v150 = *(_OWORD *)(a2 + 8);
    *(void *)&v150[16] = *(void *)(a2 + 24);
    LODWORD(Current) = *(_DWORD *)(a2 + 32);
    *(float32x2_t *)&v150[28] = vmul_f32(*(float32x2_t *)(a2 + 36), (float32x2_t)vdup_n_s32(0x42652EE1u));
    *(float *)&double v35 = *(float *)(a2 + 44) * 57.296;
    *(_DWORD *)&v150[24] = LODWORD(Current);
    *(_DWORD *)&v150[36] = LODWORD(v35);
    *(void *)uint64_t v151 = *(void *)(a2 + 48);
    LODWORD(v35) = *(_DWORD *)(a2 + 60);
    *(_DWORD *)&v151[8] = *(_DWORD *)(a2 + 56);
    LOBYTE(v152) = *(unsigned char *)(a2 + 80);
    LODWORD(Current) = *(_DWORD *)(a2 + 64);
    HIDWORD(v152) = LODWORD(v35);
    *(_DWORD *)&v154[2] = LODWORD(Current);
    int v36 = *(unsigned __int8 *)(a2 + 81);
    *(_DWORD *)&v154[6] = *(_DWORD *)(a2 + 84);
    LODWORD(v155) = v36;
    HIDWORD(v155) = *(void *)(a2 + 96);
    __int16 v156 = *(_WORD *)(a2 + 82);
    uint64_t v37 = sub_190570220();
    sub_190571738(v37, (uint64_t)v147);
    sub_190395088(buf);
    sub_1903AE880((uint64_t)buf);
    v146 |= 1u;
    uint64_t v144 = *(void *)&v147[8];
    uint64_t v38 = v145;
    double v39 = *(double *)a2;
    *(_DWORD *)(v145 + 124) |= 0x10u;
    *(double *)(v38 + 40) = v39;
    uint64_t v40 = v145;
    double v41 = *(float *)(a2 + 8);
    *(_DWORD *)(v145 + 124) |= 2u;
    *(double *)(v40 + 16) = v41;
    uint64_t v42 = v145;
    double v43 = *(float *)(a2 + 12);
    *(_DWORD *)(v145 + 124) |= 4u;
    *(double *)(v42 + 24) = v43;
    uint64_t v44 = v145;
    double v45 = *(float *)(a2 + 16);
    *(_DWORD *)(v145 + 124) |= 8u;
    *(double *)(v44 + 32) = v45;
    uint64_t v46 = v145;
    double v47 = *(float *)(a2 + 20);
    *(_DWORD *)(v145 + 124) |= 1u;
    *(double *)(v46 + 8) = v47;
    uint64_t v48 = v145;
    LODWORD(v47) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(v145 + 124) |= 0x40000u;
    *(_DWORD *)(v48 + 100) = LODWORD(v47);
    uint64_t v49 = v145;
    LODWORD(v47) = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(v145 + 124) |= 0x80000u;
    *(_DWORD *)(v49 + 104) = LODWORD(v47);
    uint64_t v50 = v145;
    LODWORD(v47) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(v145 + 124) |= 0x100000u;
    *(_DWORD *)(v50 + 108) = LODWORD(v47);
    uint64_t v51 = v145;
    *(float *)&double v47 = *(float *)(a2 + 36) * 57.296;
    *(_DWORD *)(v145 + 124) |= 0x2000u;
    *(_DWORD *)(v51 + 80) = LODWORD(v47);
    uint64_t v52 = v145;
    *(float *)&double v47 = *(float *)(a2 + 40) * 57.296;
    *(_DWORD *)(v145 + 124) |= 0x4000u;
    *(_DWORD *)(v52 + 84) = LODWORD(v47);
    uint64_t v53 = v145;
    *(float *)&double v47 = *(float *)(a2 + 44) * 57.296;
    *(_DWORD *)(v145 + 124) |= 0x8000u;
    *(_DWORD *)(v53 + 88) = LODWORD(v47);
    uint64_t v54 = v145;
    LODWORD(v47) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(v145 + 124) |= 0x100u;
    *(_DWORD *)(v54 + 60) = LODWORD(v47);
    uint64_t v55 = v145;
    LODWORD(v47) = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(v145 + 124) |= 0x200u;
    *(_DWORD *)(v55 + 64) = LODWORD(v47);
    uint64_t v56 = v145;
    LODWORD(v47) = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(v145 + 124) |= 0x400u;
    *(_DWORD *)(v56 + 68) = LODWORD(v47);
    uint64_t v57 = v145;
    int v58 = *(char *)(a2 + 80);
    *(_DWORD *)(v145 + 124) |= 0x80u;
    *(_DWORD *)(v57 + 56) = v58;
    uint64_t v59 = v145;
    LODWORD(v47) = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(v145 + 124) |= 0x800u;
    *(_DWORD *)(v59 + 72) = LODWORD(v47);
    uint64_t v60 = v145;
    LODWORD(v47) = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(v145 + 124) |= 0x20u;
    *(_DWORD *)(v60 + 48) = LODWORD(v47);
    uint64_t v61 = v145;
    int v62 = *(unsigned __int8 *)(a2 + 81);
    *(_DWORD *)(v145 + 124) |= 0x1000u;
    *(_DWORD *)(v61 + 76) = v62;
    uint64_t v63 = v145;
    uint64_t v64 = *(void *)(a2 + 96);
    *(_DWORD *)(v145 + 124) |= 0x40u;
    *(_DWORD *)(v63 + 52) = v64;
    uint64_t v65 = v145;
    LODWORD(v64) = *(unsigned __int16 *)(a2 + 82);
    *(_DWORD *)(v145 + 124) |= 0x10000u;
    *(_DWORD *)(v65 + 92) = v64;
    uint64_t v66 = v145;
    LODWORD(v64) = *(_DWORD *)(a2 + 84);
    *(_DWORD *)(v145 + 124) |= 0x200000u;
    *(_DWORD *)(v66 + 112) = v64;
    sub_19039A590((PB::Base *)buf);
  }
}

void sub_1902DA424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19039A590((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1902DA440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a3, *(void *)(a1 + 24));
}

void sub_1902DA44C(float32x2_t *a1, uint64_t a2, uint64_t a3)
{
  sub_1902DA570((uint64_t)v9, a1);
  if (a2 <= 0xA)
  {
    if (((1 << a2) & 0x1C) != 0)
    {
      sub_1902D8BCC(a3, 2, (uint64_t)v9, 120);
      sub_1902D8BCC(a3, 3, (uint64_t)v9, 120);
      double v7 = *(double *)(a3 + 88);
      if (v7 >= 0.0)
      {
        float v8 = *(double *)(a3 + 96);
        sub_1904F1430((uint64_t)v10, v8, v7);
      }
      else
      {
        v10[22] = 1127481344;
      }
      uint64_t v5 = a3;
      uint64_t v6 = 4;
    }
    else if (((1 << a2) & 0x221) != 0)
    {
      uint64_t v5 = a3;
      uint64_t v6 = a2;
    }
    else
    {
      if (((1 << a2) & 0x402) == 0) {
        return;
      }
      sub_1902D8BCC(a3, 1, (uint64_t)v9, 120);
      uint64_t v5 = a3;
      uint64_t v6 = 10;
    }
    sub_1902D8BCC(v5, v6, (uint64_t)v9, 120);
  }
}

float sub_1902DA570(uint64_t a1, float32x2_t *a2)
{
  float32x2_t v2 = *a2;
  *(float64x2_t *)(a1 + 16) = vcvtq_f64_f32(a2[1]);
  float v3 = a2[2].f32[1];
  *(double *)(a1 + 32) = a2[2].f32[0];
  *(float32x2_t *)a1 = v2;
  *(double *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 40) = a2[3].i32[0];
  *(_DWORD *)(a1 + 44) = a2[3].i32[1];
  *(_DWORD *)(a1 + 48) = a2[4].i32[0];
  *(_DWORD *)(a1 + 52) = a2[4].i32[1];
  *(_DWORD *)(a1 + 56) = a2[5].i32[0];
  *(_DWORD *)(a1 + 60) = a2[5].i32[1];
  *(_DWORD *)(a1 + 64) = a2[6].i32[0];
  *(_DWORD *)(a1 + 68) = a2[6].i32[1];
  __int32 v4 = a2[7].i32[1];
  *(_DWORD *)(a1 + 72) = a2[7].i32[0];
  *(_WORD *)(a1 + 110) = 0;
  int v5 = a2[10].i8[0];
  if ((v5 + 1) >= 8) {
    int v5 = 0;
  }
  *(_DWORD *)(a1 + 76) = v5;
  __int16 v6 = a2[10].i16[1];
  *(unsigned char *)(a1 + 81) = (v6 & 0x10) != 0;
  *(unsigned char *)(a1 + 80) = (v6 & 8) != 0;
  *(unsigned char *)(a1 + 82) = HIBYTE(v6) & 1;
  *(_DWORD *)(a1 + 84) = v4;
  *(unsigned char *)(a1 + 88) = (v6 & 0x4000) != 0;
  *(unsigned char *)(a1 + 89) = (v6 & 0x40) != 0;
  float result = a2[8].f32[0];
  *(float *)(a1 + 96) = result;
  *(_DWORD *)(a1 + 92) = 0;
  *(unsigned char *)(a1 + 100) = a2[11].i8[0];
  *(_WORD *)(a1 + 110) = v6;
  *(unsigned char *)(a1 + 108) = a2[10].i8[1];
  *(_DWORD *)(a1 + 112) = 0;
  return result;
}

uint64_t sub_1902DA648(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_onDeviceMotion_, a1);
}

double sub_1902DAB58(double *a1, double *a2, double *a3)
{
  double v4 = a2[2];
  double v3 = a2[3];
  double v5 = a3[2];
  double v6 = a3[3];
  double v7 = *a2;
  double v8 = *a3;
  a1[1] = v3 * v5 + *a2 * a3[1] - v4 * v6 + a2[1] * *a3;
  double v9 = a3[1];
  double v10 = a2[1];
  a1[2] = v7 * v5 - v3 * v9 + v10 * v6 + v4 * v8;
  double v11 = a2[2];
  double v12 = a3[2];
  a1[3] = v11 * v9 - v10 * v12 + v7 * v6 + v3 * v8;
  double result = -(v11 * v12) - v10 * v9 - a2[3] * a3[3] + v7 * v8;
  *a1 = result;
  return result;
}

float sub_1902DAF50(double *a1)
{
  float v1 = a1[1] * (a1[3] + a1[3]) - *a1 * (a1[2] + a1[2]);
  return -v1;
}

BOOL CLMotionActivity::isTypeOutdoorWheelchair(int a1)
{
  return a1 == 90603;
}

uint64_t CLMotionActivity::isTypeInVehicle(uint64_t result)
{
  unsigned int v1 = 1;
  if ((int)result > 51)
  {
    if (result == 52 || result == 56) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (!result) {
    return result;
  }
  if (result != 5) {
LABEL_7:
  }
    unsigned int v1 = 0;
LABEL_8:
  if ((result & 0xFFFFFFFE) == 0xA) {
    return 1;
  }
  else {
    return v1;
  }
}

void sub_1902DB10C(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (qword_1E929D708 != -1) {
    dispatch_once(&qword_1E929D708, &unk_1EDFD31C0);
  }
  double v3 = off_1E929D6F8;
  if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_INFO))
  {
    int v4 = *(_DWORD *)(a2 + 1);
    *(_DWORD *)int buf = 67240192;
    int v7 = v4;
    _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_INFO, "pong,%{public}u", buf, 8u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD31C0);
    }
    double v5 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "virtual void CLEclipseNotifier::visitPong(const CMEclipseReport::Pong *)", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_1902DB2C0()
{
}

uint64_t sub_1902DB2D4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_1902DB3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a11) {
    sub_1902D8B58(a11);
  }
  if (a14) {
    sub_1902D8B58(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1902DB410(uint64_t a1, const char *a2)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  int v7 = @"CMPedometerDataObject";
  v8[0] = v2;
  uint64_t v6 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v8, &v7, 1);
  sub_190445684("kCLConnectionMessageStepCountRecordQuery", &v6, &v4);
  double v3 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CLConnectionClient::sendMessage();
  if (v3) {
    sub_1902D8B58(v3);
  }
  if (v5) {
    sub_1902D8B58(v5);
  }
}

void sub_1902DB548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a17) {
    sub_1902D8B58(a17);
  }
  if (a19) {
    sub_1902D8B58(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLMotionActivity::isTypePedestrian(unsigned int a1)
{
  return (a1 < 0x2A) & (0x20000000110uLL >> a1);
}

BOOL CLMotionActivity::isTypeIndoorPedestrian(int a1)
{
  return a1 == 12150 || a1 == 17150;
}

uint64_t sub_1902DB6BC(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v4 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 103, 0);
  double v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 16);

  return v5(v2, 0, v3, v4);
}

uint64_t sub_1902DB724(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 103, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(v3 + 16))(v3, 0, v4);
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    return MEMORY[0x1F4181798](v6, sel__subscribeToCumulativePedometerUpdates_, v7);
  }
  return result;
}

void sub_1902DB7A8(void *a1)
{
  sub_1902DB7E0(a1);

  JUMPOUT(0x192FCC980);
}

void *sub_1902DB7E0(void *a1)
{
  *a1 = &unk_1EDFC9790;
  sub_190547DA0((uint64_t)a1, 0, 0);
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2) {
    MEMORY[0x192FCC980](v2, 0x1000C401249A764);
  }

  return sub_1904DC240(a1);
}

double CLMotionActivity::getInit@<D0>(CLMotionActivity *this@<X0>, uint64_t a2@<X8>)
{
  double result = 0.0;
  *(void *)a2 = 0;
  *(void *)(a2 + 88) = 0;
  *(_DWORD *)(a2 + 36) = 0;
  *(void *)(a2 + 20) = 0;
  *(void *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a2 + 40) = 0xBFF0000000000000;
  *(_DWORD *)(a2 + 52) = 0;
  *(void *)(a2 + 56) = 0xBFF0000000000000;
  *(void *)(a2 + 80) = 0xBFF0000000000000;
  *(unsigned char *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 96) = 0;
  *(void *)(a2 + 100) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(_DWORD *)(a2 + 128) = 0;
  return result;
}

BOOL CLMotionActivity::isTypeOutdoorRowing(int a1)
{
  return a1 == 18050;
}

BOOL CLMotionActivity::isCycling(CLMotionActivity *this)
{
  return this->type == 6;
}

uint64_t CLMotionActivity::isTypeDriving(unsigned int a1)
{
  return (a1 < 0x39) & (0x110000000000020uLL >> a1);
}

BOOL CLMotionActivity::isTypeRunning(int a1)
{
  return a1 == 8;
}

void *sub_1902DBA14(uint64_t a1)
{
  Class v2 = NSClassFromString(&cfstr_Uiapplication.isa);
  double result = objc_msgSend_performSelector_(v2, v3, (uint64_t)sel_sharedApplication);
  if (result)
  {
    double result = objc_msgSend_performSelector_(result, v5, (uint64_t)sel_applicationState);
    *(unsigned char *)(*(void *)(a1 + 32) + 632) = result == 0;
  }
  return result;
}

void sub_1902DBA6C()
{
}

uint64_t CLMotionActivity::isInVehicle(CLMotionActivity *this)
{
  int type = this->type;
  unsigned int v2 = 1;
  if (this->type > 51)
  {
    if (type == 52 || type == 56) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (!type) {
    return 0;
  }
  if (type != 5) {
LABEL_7:
  }
    unsigned int v2 = 0;
LABEL_8:
  if ((type & 0xFFFFFFFE) == 0xA) {
    return 1;
  }
  else {
    return v2;
  }
}

BOOL CLMotionActivity::isMounted(CLMotionActivity *this)
{
  return this->mountedState == 1;
}

uint64_t CLMotionActivity::isTypeMoving(unsigned int a1)
{
  return (a1 > 0xB) | (0x3F8u >> a1) & 1;
}

BOOL CLMotionActivity::isTypeDownhillSkiing(int a1)
{
  return a1 == 19150;
}

double CLMotionActivity::init(CLMotionActivity *this)
{
  double result = 0.0;
  *(void *)&this->int type = 0;
  *(void *)&this[1].source = 0;
  this->tilt = 0.0;
  *(void *)&this->conservativeMountedState = 0;
  *(void *)&this->mountedState = 0;
  HIDWORD(this->conservativeMountedProbability) = 0;
  this->timestamp = -1.0;
  this->exitState = 0;
  this->estExitTime = -1.0;
  *(void *)&this[1].int type = 0xBFF0000000000000;
  this->isStanding = 0;
  this->isVehicleConnected = 0;
  LOBYTE(this[1].mountedConfidence) = 0;
  *(void *)&this[1].conservativeMountedState = 0;
  this->source = 0;
  this->vehicleint Type = 0;
  *(void *)&this[1].isStanding = 0;
  this[1].timestamp = 0.0;
  *(_DWORD *)&this[1].isVehicleConnected = 0;
  return result;
}

uint64_t CLMotionActivity::isTypeStatic(unsigned int a1)
{
  return (a1 < 0xC) & (0xC06u >> a1);
}

BOOL CLMotionActivity::isSimilar(CLMotionActivity *this, const CLMotionActivity *a2, const CLMotionActivity *a3)
{
  return this->type == a2->type
      && this->confidence == a2->confidence
      && this->mountedState == a2->mountedState
      && this->mountedConfidence == a2->mountedConfidence
      && this->exitState == a2->exitState
      && this->isStanding == a2->isStanding
      && this->isVehicleConnected == a2->isVehicleConnected
      && ((LOBYTE(a2[1].mountedConfidence) ^ LOBYTE(this[1].mountedConfidence)) & 0x1F) == 0
      && LODWORD(this[1].conservativeMountedProbability) == LODWORD(a2[1].conservativeMountedProbability)
      && this[1].conservativeMountedState == a2[1].conservativeMountedState
      && *(void *)&this[1].timestamp == *(void *)&a2[1].timestamp
      && *(_DWORD *)&this[1].isVehicleConnected == *(_DWORD *)&a2[1].isVehicleConnected
      && this->vehicleType == a2->vehicleType;
}

uint64_t CLMotionActivity::isStatic(CLMotionActivity *this)
{
  return (this->type < 0xCu) & (0xC06u >> this->type);
}

uint64_t sub_1902DBD70()
{
  uint64_t result = sub_1902E0068();
  if ((result - 1) > 0xF0) {
    char v1 = 0;
  }
  else {
    char v1 = byte_19060A598[(int)result - 1];
  }
  byte_1EB3BF250 = v1;
  return result;
}

void sub_1902DBDB0()
{
  qword_1EB3BEA80 = @"/";
}

void sub_1902DBDC4()
{
}

void sub_1902DBE10(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x10A1C40A8081CBALL);
  _Unwind_Resume(a1);
}

uint64_t sub_1902DBE34()
{
  uint64_t result = sub_1902BB1DC();
  if ((result & 4) != 0) {
    operator new();
  }
  return result;
}

void sub_1902DBF0C(_Unwind_Exception *a1)
{
  if (v2) {
    sub_1902D8B58(v2);
  }
  uint64_t v4 = (std::__shared_weak_count *)v1[6];
  if (v4) {
    sub_1902D8B58(v4);
  }
  sub_1904DC240(v1);
  MEMORY[0x192FCC980](v1, 0x10F1C40926F10A7);
  _Unwind_Resume(a1);
}

uint64_t sub_1902DBF60()
{
  return pthread_dependency_init_np();
}

void sub_1902DBF74()
{
}

void sub_1902DBFC4()
{
  if (qword_1EB3BE970 != -1) {
    dispatch_once(&qword_1EB3BE970, &unk_1EDFC1FE0);
  }
  BOOL v0 = 1;
  if ((dword_1EB3BE95C - 244) >= 0x10) {
    BOOL v0 = (dword_1EB3BE95C - 191) < 4 || dword_1EB3BE95C == 1;
  }
  byte_1EB3BE951 = v0;
}

uint64_t sub_1902DC030()
{
  uint64_t result = sub_1902DFEC4();
  if (result)
  {
    uint64_t result = sub_1902B4534();
    if (result) {
      operator new();
    }
  }
  return result;
}

void sub_1902DC0D0(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x10F1C4049473D51);
  _Unwind_Resume(a1);
}

os_log_t sub_1902DC0F4()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC124()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC154()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC184()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC1B4()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC1E4()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC214()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC244()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC274()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC2A4()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC2D4()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC304()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC334()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC364()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC394()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC3C4()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC3F4()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC424()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC454()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC484()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC4B4()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC4E4()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC514()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC544()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC574()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC5A4()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC5D4()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC604()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC634()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC664()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC694()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC6C4()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC6F4()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC724()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC754()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC784()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB3BE880 = result;
  return result;
}

os_log_t sub_1902DC7B4()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1EB3BE870 = result;
  return result;
}

os_log_t sub_1902DC7E4()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1EB3BE870 = result;
  return result;
}

os_log_t sub_1902DC814()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1EB3BE870 = result;
  return result;
}

os_log_t sub_1902DC844()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1EB3BE870 = result;
  return result;
}

os_log_t sub_1902DC874()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1EB3BE870 = result;
  return result;
}

os_log_t sub_1902DC8A4()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1EB3BE870 = result;
  return result;
}

os_log_t sub_1902DC8D4()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1EB3BE870 = result;
  return result;
}

os_log_t sub_1902DC904()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1EB3BE870 = result;
  return result;
}

os_log_t sub_1902DC934()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1EB3BE870 = result;
  return result;
}

os_log_t sub_1902DC964()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1EB3BE870 = result;
  return result;
}

os_log_t sub_1902DC994()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1EB3BE870 = result;
  return result;
}

os_log_t sub_1902DC9C4()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1EB3BE870 = result;
  return result;
}

os_log_t sub_1902DC9F4()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1EB3BE870 = result;
  return result;
}

os_log_t sub_1902DCA24()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1EB3BE870 = result;
  return result;
}

os_log_t sub_1902DCA54()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1EB3BE870 = result;
  return result;
}

os_log_t sub_1902DCA84()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1EB3BE870 = result;
  return result;
}

os_log_t sub_1902DCAB4()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1EB3BE870 = result;
  return result;
}

os_log_t sub_1902DCAE4()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1EB3BE890 = result;
  return result;
}

os_log_t sub_1902DCB14()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1EB3BE890 = result;
  return result;
}

os_log_t sub_1902DCB44()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1EB3BE890 = result;
  return result;
}

os_log_t sub_1902DCB74()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1EB3BE890 = result;
  return result;
}

os_log_t sub_1902DCBA4()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1EB3BE890 = result;
  return result;
}

os_log_t sub_1902DCBD4()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1EB3BE890 = result;
  return result;
}

os_log_t sub_1902DCC04()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1EB3BE890 = result;
  return result;
}

os_log_t sub_1902DCC34()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1EB3BE890 = result;
  return result;
}

os_log_t sub_1902DCC64()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1EB3BE890 = result;
  return result;
}

os_log_t sub_1902DCC94()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1EB3BE890 = result;
  return result;
}

os_log_t sub_1902DCCC4()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1EB3BE890 = result;
  return result;
}

os_log_t sub_1902DCCF4()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1EB3BE890 = result;
  return result;
}

os_log_t sub_1902DCD24()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1EB3BE890 = result;
  return result;
}

os_log_t sub_1902DCD54()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1EB3BE890 = result;
  return result;
}

os_log_t sub_1902DCD84()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1EB3BE890 = result;
  return result;
}

os_log_t sub_1902DCDB4()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1EB3BE890 = result;
  return result;
}

os_log_t sub_1902DCDE4()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1EB3BE890 = result;
  return result;
}

os_log_t sub_1902DCE14()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1EB3BE890 = result;
  return result;
}

os_log_t sub_1902DCE44()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1EB3BE890 = result;
  return result;
}

os_log_t sub_1902DCE74()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1EB3BE890 = result;
  return result;
}

os_log_t sub_1902DCEA4()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1EB3BE890 = result;
  return result;
}

os_log_t sub_1902DCED4()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1EB3BE890 = result;
  return result;
}

os_log_t sub_1902DCF04()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Gyro");
  qword_1EB3BE860 = (uint64_t)result;
  return result;
}

os_log_t sub_1902DCF34()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Gyro");
  qword_1EB3BE860 = (uint64_t)result;
  return result;
}

os_log_t sub_1902DCF64()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Gyro");
  qword_1EB3BE860 = (uint64_t)result;
  return result;
}

os_log_t sub_1902DCF94()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Gyro");
  qword_1EB3BE860 = (uint64_t)result;
  return result;
}

os_log_t sub_1902DCFC4()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Gyro");
  qword_1EB3BE860 = (uint64_t)result;
  return result;
}

os_log_t sub_1902DCFF4()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Gyro");
  qword_1EB3BE860 = (uint64_t)result;
  return result;
}

os_log_t sub_1902DD024()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Gyro");
  qword_1EB3BE860 = (uint64_t)result;
  return result;
}

os_log_t sub_1902DD054()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Gyro");
  qword_1EB3BE860 = (uint64_t)result;
  return result;
}

void sub_1902DD084(uint64_t a1)
{
}

void sub_1902DD094(uint64_t a1)
{
}

void sub_1902DD0A0(uint64_t a1)
{
}

void sub_1902DD0AC(uint64_t a1)
{
}

void sub_1902DD0B8(uint64_t a1)
{
}

void sub_1902DD0C4(uint64_t a1)
{
}

void sub_1902DD0D0(uint64_t a1)
{
}

void sub_1902DD0E0(uint64_t a1)
{
}

void sub_1902DD0EC(uint64_t a1)
{
}

void sub_1902DD0F8(uint64_t a1)
{
}

void sub_1902DD104(uint64_t a1)
{
}

void sub_1902DD110(uint64_t a1, uint64_t a2)
{
}

void *sub_1902DD120(uint64_t a1, uint64_t a2)
{
  return memcpy((void *)(a1 + 48), (const void *)(a2 + 48), 0x140uLL);
}

void sub_1902DD130(uint64_t a1, uint64_t a2)
{
}

void sub_1902DD140(uint64_t a1, uint64_t a2)
{
}

void sub_1902DD150(uint64_t a1, uint64_t a2)
{
}

void sub_1902DD160(uint64_t a1, uint64_t a2)
{
}

void sub_1902DD170(uint64_t a1, uint64_t a2)
{
}

void sub_1902DD180(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1902DD190(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(_WORD *)(result + 56) = *(_WORD *)(a2 + 56);
  *(void *)(result + 48) = v2;
  return result;
}

void sub_1902DD1A4(uint64_t a1, uint64_t a2)
{
}

void sub_1902DD1B4(uint64_t a1, uint64_t a2)
{
}

void sub_1902DD1C4(uint64_t a1, uint64_t a2)
{
}

void sub_1902DD1D4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1902DD1E4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = objc_msgSend_attitudeReferenceFrame(v3, a2, a3);

  return MEMORY[0x1F4181798](v3, sel_startDeviceMotionUpdatesPrivateUsingReferenceFrame_toQueue_withHandler_, v4);
}

uint64_t sub_1902DD22C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_setDeviceMotionCallback_info_interval_fsync_, *(void *)(a1 + 40));
}

void sub_1902DD244(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();

  uint64_t v2 = *(void **)(a1 + 40);
}

uint64_t sub_1902DD298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_setDeviceMotionUpdateIntervalPrivate_, a3);
}

uint64_t sub_1902DD2A8(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_didBecomeActivePrivate_, *(void *)(a1 + 40));
}

uint64_t sub_1902DD2B4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t result = objc_msgSend_initPrivate(*(void **)(a1 + 32), a2, a3);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = result;
  return result;
}

uint64_t *sub_1902DD2E8(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v6 = (uint64_t **)(result + 1);
  double v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        double v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      double v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    double v9 = operator new(0x40uLL);
    v9[4] = *(void *)a3;
    v9[5] = *(void *)(a3 + 8);
    *((_OWORD *)v9 + 3) = *(_OWORD *)(a3 + 16);
    *double v9 = 0;
    v9[1] = 0;
    void v9[2] = v7;
    *uint64_t v6 = v9;
    uint64_t v10 = *(void *)*v4;
    if (v10)
    {
      *uint64_t v4 = v10;
      double v11 = *v6;
    }
    else
    {
      double v11 = v9;
    }
    uint64_t result = sub_1902DD3B4((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

uint64_t *sub_1902DD3B4(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            double v9 = (uint64_t **)a2[2];
          }
          else
          {
            double v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            void v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *double v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), double v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *double v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void *sub_1902DD54C(void *a1, char *__s, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDFD0DA0;
  sub_1902B2414((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_1902DD5AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *sub_1902DD5C0(void *a1, char *__s)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDFD0DA0;
  sub_1902B2C90((int)&v4, (uint64_t)(a1 + 3), __s);
  return a1;
}

void sub_1902DD61C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *sub_1902DD634@<X0>(char *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  int v6 = operator new(0x70uLL);
  uint64_t result = sub_1902DD54C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1902DD684(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1902DD698@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  char v4 = operator new(0x70uLL);
  uint64_t result = sub_1902DD5C0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1902DD6E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1902DD6F4(void **a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[1];
  uint64_t v4 = (unsigned char *)a1[3] - (unsigned char *)*a1;
  unint64_t v5 = (v2 - v3) >> 3;
  if (v5 >= v4 >> 3) {
    return;
  }
  if (v2 == v3)
  {
    double v9 = 0;
    int v6 = 0;
    goto LABEL_8;
  }
  int v6 = (char *)sub_1902C0520(v5);
  uint64_t v7 = a1[1];
  uint64_t v2 = a1[2];
  double v9 = &v6[8 * v8];
  uint64_t v10 = v2 - v7;
  if (v2 == v7)
  {
LABEL_8:
    uint64_t v13 = v2;
    goto LABEL_9;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * (v10 >> 3);
  do
  {
    *(void *)&v6[v11] = *(void *)&v7[v11];
    v11 += 8;
  }
  while (v12 != v11);
  uint64_t v2 = a1[1];
  uint64_t v13 = a1[2];
LABEL_9:
  int64_t v14 = v13 - v2;
  double v15 = *a1;
  *a1 = v6;
  a1[1] = v6;
  a1[2] = &v6[v14];
  a1[3] = v9;
  if (v15)
  {
    operator delete(v15);
  }
}

uint64_t sub_1902DD7C4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1902DD824(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_19057C8F4(result);
    JUMPOUT(0x192FCC980);
  }
  return result;
}

void sub_1902DD874(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1902DD8DC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1902DD914(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)a1 + 904))(a1, a2, &cf)) {
    return 0;
  }
  uint64_t v6 = sub_19046092C(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD15E0);
    }
    uint64_t v7 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      *(_DWORD *)int buf = 138412546;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      uint64_t v20 = a2;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD15E0);
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      int v13 = 138412546;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      uint64_t v16 = a2;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, int &, int) const", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t sub_1902DDBB0(int *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v2 = *a1;
  BOOL v3 = (*a1 - 7) > 0x3C || ((1 << (*a1 - 7)) & 0x1000000008001101) == 0;
  if (v3 && (v2 - 2) >= 2 && v2 != 143)
  {
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
    }
    uint64_t v11 = off_1EB3BE870;
    if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_FAULT))
    {
      int v12 = *a1;
      *(_DWORD *)int buf = 67240192;
      int v16 = v12;
      _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_FAULT, "Unsupported mode (%{public}d). Returning.", buf, 8u);
    }
    int v13 = sub_1902D8400(115, 0);
    uint64_t result = 0;
    if (!v13) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 == -1)
    {
LABEL_34:
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "BOOL CLDeviceMotion::isModeValid(const CLMotionTypeDeviceMotionMode &) const", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
      return 0;
    }
LABEL_37:
    dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
    goto LABEL_34;
  }
  if ((v2 & 4) == 0) {
    goto LABEL_11;
  }
  if (!sub_190559E34())
  {
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
    }
    uint64_t v8 = off_1EB3BE870;
    if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_FAULT))
    {
      int v9 = *a1;
      *(_DWORD *)int buf = 67240192;
      int v16 = v9;
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_FAULT, "Unsupported mode (%{public}d). Compass not found. Returning.", buf, 8u);
    }
    int v10 = sub_1902D8400(115, 0);
    uint64_t result = 0;
    if (!v10) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 == -1) {
      goto LABEL_34;
    }
    goto LABEL_37;
  }
  int v2 = *a1;
LABEL_11:
  if ((v2 & 2) != 0) {
    return 1;
  }
  if (qword_1EB3BE878 != -1) {
    dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
  }
  uint64_t v4 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_FAULT))
  {
    int v5 = *a1;
    *(_DWORD *)int buf = 67240192;
    int v16 = v5;
    _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_FAULT, "Unsupported mode (%{public}d). Couldn't do DeviceMotion without Gyro. Returning.", buf, 8u);
  }
  int v6 = sub_1902D8400(115, 0);
  uint64_t result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 == -1) {
      goto LABEL_34;
    }
    goto LABEL_37;
  }
  return result;
}

uint64_t sub_1902DDFC4(uint64_t a1, void *a2, uint64_t a3)
{
  *(unsigned char *)a1 = 0;
  long long v4 = xmmword_19060C6D0;
  *(_OWORD *)(a1 + 8) = xmmword_19060C6D0;
  *(void *)(a1 + 24) = 0;
  if (a2)
  {
    int v5 = (__CFString *)objc_msgSend_copy(a2, (const char *)a2, a3);
    long long v4 = xmmword_19060C6D0;
  }
  else
  {
    int v5 = @"BundleIdNotAvailable";
  }
  *(void *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  return a1;
}

void sub_1902DE02C(uint64_t a1, void *a2)
{
  *(void *)(a1 + 40) = *a2;
  sub_1902CD6F4(a1, (double *)(a1 + 40));
}

void *sub_1902DE03C(void *result)
{
  if (result[1])
  {
    uint64_t v1 = result;
    uint64_t v2 = sub_1902DFEC4();
    sub_1902CDE08(v2, 0, v1[1]);
    uint64_t result = (void *)v1[1];
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    v1[1] = 0;
  }
  return result;
}

void *sub_1902DE0A4(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t v2 = sub_1902B4534();
    sub_1902CDE08(v2, 0, v1[2]);
    uint64_t result = (void *)v1[2];
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    v1[2] = 0;
  }
  return result;
}

void sub_1902DE10C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 25))
  {
    uint64_t v2 = sub_190472B14();
    sub_190472C28(v2);
    *(unsigned char *)(a1 + 25) = 0;
  }
}

void sub_1902DE140(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v1 = a1 + 56;
  *(_DWORD *)(a1 + 20) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 776) = 0;
  *(_WORD *)(a1 + 60) = 0;
  sub_1902E05D4(a1 + 62);
  sub_1902E50F0(v1 + 208, 0, 0, 0, v1, *(_DWORD *)(v1 + 720));
  if (qword_1E929D798 != -1) {
    dispatch_once(&qword_1E929D798, &unk_1EDFD2140);
  }
  uint64_t v2 = qword_1E929D790;
  if (os_log_type_enabled((os_log_t)qword_1E929D790, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEBUG, "compass calibrator has been reset", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D798 != -1) {
      dispatch_once(&qword_1E929D798, &unk_1EDFD2140);
    }
    BOOL v3 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "virtual void CLCompassCalibratorAKM::reset()", "CoreLocation: %s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
}

double sub_1902DE304(uint64_t a1, double *a2)
{
  double result = *a2;
  *(double *)(a1 + 40) = *a2;
  return result;
}

__n128 sub_1902DE314(uint64_t a1)
{
  *(double *)v2.i64 = (*(double (**)(uint64_t))(*(void *)a1 + 56))(a1);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  float32x4_t v4 = 0uLL;
  sub_1902D9ACC(&v4, v2);
  *(_DWORD *)uint64_t v7 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  *(_OWORD *)&v7[4] = xmmword_190609AC0;
  *(void *)&v7[20] = 0x1FF00000000;
  v8.n128_u32[0] = 0;
  v8.n128_u8[4] = 0;
  v8.n128_u32[3] = 0;
  *(void *)(a1 + 96) = 0xBFF0000000000000;
  *(float32x4_t *)(a1 + 104) = v4;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)v7;
  *(_OWORD *)(a1 + 164) = *(_OWORD *)&v7[12];
  *(_OWORD *)(a1 + 136) = v6;
  *(_OWORD *)(a1 + 120) = v5;
  __n128 result = v8;
  *(_DWORD *)(a1 + 196) = 0;
  *(__n128 *)(a1 + 180) = result;
  return result;
}

void sub_1902DE3E8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(double *)a2 - *(double *)(a1 + 216) <= 1.5) {
      double v8 = *(double *)a2 - *(double *)(a1 + 216);
    }
    else {
      double v8 = 1.5;
    }
    if (qword_1E929D998 != -1) {
      dispatch_once(&qword_1E929D998, &unk_1EDFD2120);
    }
    int v9 = qword_1E929D9A0;
    if (os_log_type_enabled((os_log_t)qword_1E929D9A0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 134217984;
      *(double *)&uint8_t buf[4] = v8;
      _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_DEBUG, "[CMDoTEstimator] Time since last step, %.2f\n", buf, 0xCu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D998 != -1) {
        dispatch_once(&qword_1E929D998, &unk_1EDFD2120);
      }
      int v96 = 134217984;
      double v97 = v8;
      int v87 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "Pdr::PdrOutput CMPdrEstimatorOnHead::feedImuData(const AccessoryActivity::ImuData *const, const CMAccessoryStepDetector::Impulse *const, BOOL)", "CoreLocation: %s\n", v87);
      if (v87 != buf) {
        free(v87);
      }
    }
    *(double *)v10.i64 = sub_19058EF5C(a1 + 72, *(double *)(a3 + 8));
    int v11 = *(_DWORD *)(a2 + 44);
    v10.f32[0] = -*(float *)(a2 + 40);
    *(float32x2_t *)int buf = vneg_f32(*(float32x2_t *)(a2 + 32));
    *(_DWORD *)&uint8_t buf[8] = v10.i32[0];
    *(_DWORD *)double v109 = v11;
    float32x4_t v12 = sub_1902D9ACC((float32x4_t *)buf, v10);
    sub_1904CF3F4((uint64_t)buf, (float *)(a1 + 8), &v95, v12);
    float v13 = sub_1904CF73C(v95.f32, 0.0, 0.0, 1.0);
    float v15 = atan2f(v14, v13);
    __float2 v16 = __sincosf_stret(v15);
    unint64_t v17 = 0;
    unint64_t v94 = __PAIR64__(LODWORD(v16.__sinval), LODWORD(v16.__cosval));
    char v18 = 1;
    char v19 = 1;
    do
    {
      char v20 = v18;
      uint64_t v21 = *(float **)(a1 + 8 * v17 + 472);
      float v22 = sub_1905378D0((uint64_t)&v94, v17);
      BOOL v23 = sub_19042FABC(v21, v22);
      char v18 = 0;
      v19 &= v23;
      unint64_t v17 = 1;
    }
    while ((v20 & 1) != 0);
    if (v19)
    {
      float cosval = *(float *)(*(void *)(a1 + 472) + 4 * *(void *)(*(void *)(a1 + 472) + 8) + 16);
      float sinval = *(float *)(*(void *)(a1 + 480) + 4 * *(void *)(*(void *)(a1 + 480) + 8) + 16);
    }
    else
    {
      float sinval = v16.__sinval;
      float cosval = v16.__cosval;
    }
    float v28 = sqrtf((float)(sinval * sinval) + (float)(cosval * cosval));
    *(float *)(a1 + 60) = cosval / v28;
    *(float *)(a1 + 64) = sinval / v28;
    if (a4)
    {
      int v29 = *(_DWORD *)(a2 + 44);
      v24.f32[0] = -*(float *)(a2 + 40);
      *(float32x2_t *)int buf = vneg_f32(*(float32x2_t *)(a2 + 32));
      *(_DWORD *)&uint8_t buf[8] = v24.i32[0];
      *(_DWORD *)double v109 = v29;
      sub_1902D9ACC((float32x4_t *)buf, v24);
      float v30 = sub_1904CF73C((float *)buf, -*(float *)(a2 + 20), -*(float *)(a2 + 24), -*(float *)(a2 + 28));
      uint64_t v31 = 0;
      *(float *)double v93 = v30;
      v93[1] = v32;
      v93[2] = v33;
      float v34 = 0.0;
      do
      {
        float v34 = v34 + (float)(*(float *)&v93[v31] * *(float *)&v93[v31]);
        ++v31;
      }
      while (v31 != 3);
      if (sqrtf(v34) > 0.02)
      {
        v35.i32[0] = LODWORD(v16.__cosval);
        *(float *)(a1 + 28) = v15;
        *(float *)(a1 + 32) = v16.__cosval;
        float v36 = 0.0;
        *(float *)(a1 + 36) = v16.__sinval;
        if (v8 > 0.0)
        {
          v35.i32[1] = LODWORD(v16.__sinval);
          *(float32x2_t *)(a1 + 40) = vadd_f32(vmul_f32(v35, (float32x2_t)vdup_n_s32(0x3F49DB23u)), *(float32x2_t *)(a1 + 40));
          *(float *)(a1 + 48) = *(float *)(a1 + 48) + 0.0;
          float v36 = 0.7885 / v8;
        }
        *(float *)(a1 + 52) = v36;
        if (qword_1E929D998 != -1) {
          dispatch_once(&qword_1E929D998, &unk_1EDFD2120);
        }
        uint64_t v37 = qword_1E929D9A0;
        if (os_log_type_enabled((os_log_t)qword_1E929D9A0, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v38 = 0;
          float v39 = 0.0;
          do
          {
            float v39 = v39 + (float)(*(float *)&v93[v38] * *(float *)&v93[v38]);
            ++v38;
          }
          while (v38 != 3);
          *(_DWORD *)int buf = 134217984;
          *(double *)&uint8_t buf[4] = sqrtf(v39);
          _os_log_impl(&dword_1902AF000, v37, OS_LOG_TYPE_DEBUG, "[CMDoTEstimator] DoG: userAccelNorm, %f\n", buf, 0xCu);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D998 != -1) {
            dispatch_once(&qword_1E929D998, &unk_1EDFD2120);
          }
          uint64_t v40 = 0;
          float v41 = 0.0;
          do
          {
            float v41 = v41 + (float)(*(float *)&v93[v40] * *(float *)&v93[v40]);
            ++v40;
          }
          while (v40 != 3);
          int v96 = 134217984;
          double v97 = sqrtf(v41);
          uint64_t v42 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "void CMPdrEstimatorOnHead::directionOfGaze(const CMVector3d &, float, double)", "CoreLocation: %s\n", v42);
          if (v42 != buf) {
            free(v42);
          }
        }
      }
    }
    else
    {
      uint64_t v43 = sub_19058E98C(a1 + 72, *(void *)a1);
      float v45 = v44;
      double v46 = *(double *)a2;
      float v47 = atan2f(*(float *)(a1 + 64), *(float *)(a1 + 60));
      uint64_t v48 = *(float **)a1;
      int v49 = *(unsigned __int8 *)(*(void *)a1 + 68);
      float v50 = *(float *)(*(void *)a1 + 56);
      if (sub_19042FABC(*(float **)(a1 + 464), v50)) {
        float v50 = *(float *)(*(void *)(a1 + 464) + 4 * *(void *)(*(void *)(a1 + 464) + 8) + 16);
      }
      if (v49)
      {
        float v51 = v45;
        if (*(unsigned char *)(a1 + 264))
        {
          v52.i32[0] = *(_DWORD *)(a1 + 60);
          float v53 = *(float *)(a1 + 64);
          *(_DWORD *)(a1 + 32) = v52.i32[0];
          *(float *)(a1 + 36) = v53;
          uint64_t v54 = &qword_190607000;
        }
        else
        {
          if (sub_19058F3E8(a1 + 256))
          {
            *(void *)(a1 + 280) = 0;
            *(void *)(a1 + 288) = 0;
            *(_DWORD *)(a1 + 296) = 0;
            *(unsigned char *)(a1 + 268) = 1;
            *(_DWORD *)(a1 + 356) = 0;
            *(void *)(a1 + 348) = 0;
            *(void *)(a1 + 340) = 0;
            *(unsigned char *)(a1 + 328) = 1;
            *(void *)(a1 + 400) = 0;
            *(void *)(a1 + 408) = 0;
            *(_DWORD *)(a1 + 416) = 0;
            *(unsigned char *)(a1 + 388) = 1;
            *(void *)(a1 + 256) = 0x7FF8000000000000;
            *(unsigned char *)(a1 + 456) = 0;
          }
          uint64_t v54 = &qword_190607000;
          if (v51 >= 0.5)
          {
            *(float *)int buf = v51 * *(float *)&v43;
            *(float *)&uint8_t buf[4] = v51 * *((float *)&v43 + 1);
            v52.f32[0] = sub_19058F234(a1 + 72, (float *)buf);
            *(_DWORD *)(a1 + 32) = v52.i32[0];
            *(float *)(a1 + 36) = v53;
          }
          else
          {
            float32x2_t v60 = vmul_f32(*(float32x2_t *)(a1 + 60), (float32x2_t)vdup_n_s32(0x3F19999Au));
            v61.f32[0] = sub_19058F234(a1 + 72, (float *)(a1 + 60));
            v61.i32[1] = v62;
            float32x2_t v52 = vadd_f32(v60, vmul_f32(v61, (float32x2_t)vdup_n_s32(0x3ECCCCCCu)));
            *(float32x2_t *)(a1 + 32) = v52;
            float v53 = v52.f32[1];
          }
        }
        if (*(_DWORD *)(a1 + 56) == 1)
        {
          float v63 = 0.7885;
        }
        else
        {
          unint64_t v64 = 0;
          float v65 = v48[15];
          float v66 = v48[16];
          float v67 = v65 * v48[11];
          float v68 = v48[14];
          float v69 = (float)((float)(v65 * v48[12]) + (float)(v66 * v48[6])) * v68;
          float v70 = (float)((float)(v65 * v48[13]) + (float)(v66 * v48[7])) * v68;
          *(float *)int buf = (float)(v67 + (float)(v66 * v48[5])) * v68;
          *(float *)&uint8_t buf[4] = v69;
          *(float *)&uint8_t buf[8] = v70;
          float v71 = v50 * 24.896;
          do
          {
            unint64_t v72 = v64 + 1;
            float v73 = flt_19060BA5C[v64 + 1];
            float v71 = v71 + (float)(v73 * sub_190448408((uint64_t)buf, v64));
            unint64_t v64 = v72;
          }
          while (v72 != 3);
          *(float *)(a1 + 52) = v71;
          float v63 = *(double *)(*(void *)a1 + 80) * (float)(v71 * v51);
          v52.i32[0] = *(_DWORD *)(a1 + 32);
          float v53 = *(float *)(a1 + 36);
        }
        *(float *)(a1 + 40) = (float)(v52.f32[0] * v63) + *(float *)(a1 + 40);
        *(float32x2_t *)(a1 + 44) = vadd_f32((float32x2_t)COERCE_UNSIGNED_INT(v53 * v63), *(float32x2_t *)(a1 + 44));
        float v74 = atan2f(*((float *)&v43 + 1), *(float *)&v43);
        float v75 = *(float *)(a1 + 28);
        double v76 = (float)(v75 - v47) + floor(((float)(v75 - v47) + 3.14159265) / 6.28318531) * -6.28318531;
        double v77 = (float)(v74 - v75) + floor(((float)(v74 - v75) + 3.14159265) / 6.28318531) * -6.28318531;
        if (qword_1E929D998 != -1) {
          dispatch_once(&qword_1E929D998, &unk_1EDFD2120);
        }
        float v78 = v76;
        float v79 = v77;
        double v80 = qword_1E929D9A0;
        if (os_log_type_enabled((os_log_t)qword_1E929D9A0, OS_LOG_TYPE_DEBUG))
        {
          double v81 = *(float *)(a1 + 40);
          double v82 = *(float *)(a1 + 44);
          float v83 = *((float *)v54 + 9);
          double v84 = (float)(*(float *)(a1 + 28) * v83);
          *(_DWORD *)int buf = 134219264;
          *(double *)&uint8_t buf[4] = v81;
          *(_WORD *)double v109 = 2048;
          *(double *)&v109[2] = v82;
          __int16 v110 = 2048;
          double v111 = (float)(v78 * v83);
          __int16 v112 = 2048;
          double v113 = v84;
          __int16 v114 = 2048;
          double v115 = (float)(v47 * v83);
          __int16 v116 = 2048;
          double v117 = (float)(v79 * v83);
          _os_log_impl(&dword_1902AF000, v80, OS_LOG_TYPE_DEBUG, "[CMDoTEstimator] position [%f, %f], gazeDiffDot, %.2f, dot %.2f, gaze, %.2f, swayDelta, %.2f\n", buf, 0x3Eu);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D998 != -1) {
            dispatch_once(&qword_1E929D998, &unk_1EDFD2120);
          }
          double v89 = *(float *)(a1 + 40);
          double v90 = *(float *)(a1 + 44);
          double v91 = (float)(*(float *)(a1 + 28) * 57.296);
          int v96 = 134219264;
          double v97 = v89;
          __int16 v98 = 2048;
          double v99 = v90;
          __int16 v100 = 2048;
          double v101 = (float)(v78 * 57.296);
          __int16 v102 = 2048;
          double v103 = v91;
          __int16 v104 = 2048;
          double v105 = (float)(v47 * 57.296);
          __int16 v106 = 2048;
          double v107 = (float)(v79 * 57.296);
          uint64_t v92 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "void CMPdrEstimatorOnHead::printDebugInfo(float, float) const", "CoreLocation: %s\n", v92);
          if (v92 != buf) {
            free(v92);
          }
        }
        v58.i32[0] = *(_DWORD *)(a1 + 32);
        float v59 = *(float *)(a1 + 36);
      }
      else
      {
        float32x2_t v55 = vmul_f32(*(float32x2_t *)(a1 + 60), (float32x2_t)vdup_n_s32(0x3F19999Au));
        v56.f32[0] = sub_19058F234(a1 + 72, (float *)(a1 + 60));
        v56.i32[1] = v57;
        float32x2_t v58 = vadd_f32(v55, vmul_f32(v56, (float32x2_t)vdup_n_s32(0x3ECCCCCCu)));
        *(float32x2_t *)(a1 + 32) = v58;
        *(_DWORD *)(a1 + 52) = 0;
        float v59 = v58.f32[1];
      }
      float v85 = atan2f(v59, v58.f32[0]);
      *(float *)(a1 + 28) = v85;
      float v86 = 0.0;
      if (v46 - *(double *)(a1 + 216) < 1.5) {
        float v86 = 1.0;
      }
      sub_19058F2F0((unsigned __int16 *)(a1 + 256), v86, v47, v85, v46);
    }
  }
  else
  {
    if (qword_1E929D998 != -1) {
      dispatch_once(&qword_1E929D998, &unk_1EDFD2120);
    }
    double v27 = qword_1E929D9A0;
    if (os_log_type_enabled((os_log_t)qword_1E929D9A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1902AF000, v27, OS_LOG_TYPE_DEFAULT, "[CMDoTEstimator] HeadSet Orientation is not set!", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D998 != -1) {
        dispatch_once(&qword_1E929D998, &unk_1EDFD2120);
      }
      LOWORD(v96) = 0;
      int v88 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "Pdr::PdrOutput CMPdrEstimatorOnHead::feedImuData(const AccessoryActivity::ImuData *const, const CMAccessoryStepDetector::Impulse *const, BOOL)", "CoreLocation: %s\n", v88);
      if (v88 != buf) {
        free(v88);
      }
    }
  }
}

void sub_1902DF010(void *a1)
{
  sub_1902D5AB8(a1);

  JUMPOUT(0x192FCC980);
}

double sub_1902DF048@<D0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (qword_1EB3BEA88 != -1) {
    dispatch_once(&qword_1EB3BEA88, &unk_1EDFD16A0);
  }
  if (qword_1EB3BEA80)
  {
    sub_1902C36AC((const __CFString *)qword_1EB3BEA80, (uint64_t)&v3);
    double result = *(double *)&v3;
    *(_OWORD *)a1 = v3;
    a1[2] = v4;
  }
  return result;
}

uint64_t sub_1902DF0C4(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (qword_1E929D708 != -1) {
    dispatch_once(&qword_1E929D708, &unk_1EDFD31C0);
  }
  uint64_t v4 = off_1E929D6F8;
  if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a2 + 1);
    int v6 = *(unsigned __int8 *)(a2 + 2);
    int v7 = *(unsigned __int8 *)(a2 + 3);
    int v8 = *(unsigned __int8 *)(a2 + 4);
    int v9 = *(unsigned __int8 *)(a2 + 5);
    double v10 = *(float *)(a2 + 6);
    double v11 = *(float *)(a2 + 10);
    int v12 = *(unsigned __int8 *)(a2 + 14);
    double v13 = *(float *)(a2 + 15);
    uint64_t v18 = *(void *)(a1 + 48);
    uint64_t v14 = mach_absolute_time();
    *(_DWORD *)int buf = 67242752;
    *(_DWORD *)&uint8_t buf[4] = v5;
    LOWORD(v20) = 1026;
    *(_DWORD *)((char *)&v20 + 2) = v6;
    HIWORD(v20) = 1026;
    *(_DWORD *)uint64_t v21 = v7;
    *(_WORD *)&v21[4] = 1026;
    *(_DWORD *)&v21[6] = v8;
    __int16 v22 = 1026;
    int v23 = v9;
    __int16 v24 = 2050;
    double v25 = v10;
    __int16 v26 = 2050;
    double v27 = v11;
    __int16 v28 = 1026;
    int v29 = v12;
    __int16 v30 = 2050;
    double v31 = v13;
    __int16 v32 = 2050;
    uint64_t v33 = v18;
    __int16 v34 = 2050;
    double v35 = sub_1902D8D34(v14);
    _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_DEFAULT, "Report,shouldSuppress,%{public}u,APAwake,%{public}u,currentState,%{public}u,orientation,%{public}u,motionType,%{public}u,lux,%{public}f,pocketProbability,%{public}f,facedownStatic,%{public}u,timeSinceLastFacedownStatic,%{public}lf,timestamp,%{public}lf,now,%{public}lf", buf, 0x58u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD31C0);
    }
    uint64_t v16 = mach_absolute_time();
    sub_1902D8D34(v16);
    unint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "virtual void CLEclipseNotifier::visitSuppress(const CMEclipseReport::Suppress *)", "CoreLocation: %s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  uint64_t v20 = 0;
  *(void *)int buf = *(void *)(a1 + 48);
  LOBYTE(v20) = *(unsigned char *)(a2 + 1);
  BYTE1(v20) = *(unsigned char *)(a2 + 14);
  *(double *)uint64_t v21 = *(float *)(a2 + 15);
  return sub_1902D8BCC(a1, 0, (uint64_t)buf, 24);
}

double sub_1902DF41C()
{
  return -1.0;
}

void sub_1902DF428(uint64_t a1)
{
  sub_1902BC548(a1);

  JUMPOUT(0x192FCC980);
}

void sub_1902DF460(uint64_t a1)
{
  sub_1902BC548(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902DF498()
{
  return 1;
}

uint64_t sub_1902DF4A0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1902DF4A8()
{
  if (qword_1EB3BF798 != -1) {
    dispatch_once(&qword_1EB3BF798, &unk_1EDFD2BA0);
  }
  return qword_1EB3BF790;
}

uint64_t sub_1902DF4EC(uint64_t a1, int a2, int a3, char a4, uint64_t a5)
{
  *(void *)a1 = &unk_1EDFCA918;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a5;
  *(unsigned char *)(a1 + 40) = a4;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = -1;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = objc_opt_new();
  return a1;
}

uint64_t sub_1902DF564(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1902D6BD0();
  if (Current != *(CFRunLoopRef *)qword_1EB3BF828)
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    int v8 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 68289539;
      int v11 = 0;
      __int16 v12 = 2082;
      double v13 = "";
      __int16 v14 = 2082;
      float v15 = "assert";
      __int16 v16 = 2081;
      unint64_t v17 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] Should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    int v9 = off_1EB3BE890;
    if (os_signpost_enabled((os_log_t)off_1EB3BE890))
    {
      *(_DWORD *)int buf = 68289539;
      int v11 = 0;
      __int16 v12 = 2082;
      double v13 = "";
      __int16 v14 = 2082;
      float v15 = "assert";
      __int16 v16 = 2081;
      unint64_t v17 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] Should be running on motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] Should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
      }
    }
    a1 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 68289539;
      int v11 = 0;
      __int16 v12 = 2082;
      double v13 = "";
      __int16 v14 = 2082;
      float v15 = "assert";
      __int16 v16 = 2081;
      unint64_t v17 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_1902AF000, (os_log_t)a1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] Should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_26:
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    goto LABEL_7;
  }
  sub_1902D65C4(*((void *)a1 + 4));
  if (*((void *)a1 + 3)) {
    return 1;
  }
  sub_1902CC320(*((const char **)a1 + 4), 0);
  if (*((void *)a1 + 3)) {
    return 1;
  }
  if (qword_1EB3BE898 != -1) {
    goto LABEL_26;
  }
LABEL_7:
  uint64_t v4 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *((_DWORD *)a1 + 4);
    int v5 = *((_DWORD *)a1 + 5);
    *(_DWORD *)int buf = 67240448;
    int v11 = v5;
    __int16 v12 = 1026;
    LODWORD(v13) = v6;
    _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Service for usage pair {%{public}d, %{public}d} is not ready", buf, 0xEu);
  }
  uint64_t result = sub_1902D8400(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD3F40);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "BOOL CLIoHidInterface::Device::initializeServiceRef()", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
    return 0;
  }
  return result;
}

BOOL sub_1902DF9A8(uint64_t a1, const char *a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1E4F1CB10];
  uint64_t v5 = objc_msgSend_stringWithUTF8String_(NSString, a2, (uint64_t)a2);
  uint64_t isDirectory = objc_msgSend_fileURLWithPath_isDirectory_(v4, v6, v5, 0);
  float v51 = 0;
  if (objc_msgSend_instancesRespondToSelector_(MEMORY[0x1E4F1C9B8], v8, (uint64_t)sel_dataWithContentsOfURL_options_error_))uint64_t v10 = objc_msgSend_dataWithContentsOfURL_options_error_(MEMORY[0x1E4F1C9B8], v9, isDirectory, 0, &v51); {
  else
  }
    uint64_t v10 = objc_msgSend_dataWithContentsOfURL_(MEMORY[0x1E4F1C9B8], v9, isDirectory);
  if (!v10)
  {
    if (!v51) {
      return 0;
    }
    (*(void (**)(uint64_t, void))(*(void *)a1 + 872))(a1, 0);
    __int16 v14 = objc_msgSend_domain(v51, v12, v13);
    if (objc_msgSend_isEqual_(v14, v15, *MEMORY[0x1E4F281F8]) && objc_msgSend_code(v51, v16, v17) == 260)
    {
      if (qword_1E929D6B0 != -1) {
        dispatch_once(&qword_1E929D6B0, &unk_1EDFD3AA0);
      }
      uint64_t v18 = qword_1E929D6A0;
      if (os_log_type_enabled((os_log_t)qword_1E929D6A0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = objc_msgSend_description(v51, v19, v20);
        uint64_t v24 = objc_msgSend_UTF8String(v21, v22, v23);
        *(_DWORD *)int buf = 68289538;
        int v53 = 0;
        __int16 v54 = 2082;
        float32x2_t v55 = "";
        __int16 v56 = 2082;
        __int32 v57 = a2;
        __int16 v58 = 2082;
        uint64_t v59 = v24;
        _os_log_impl(&dword_1902AF000, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"file does not exist... clearing\", \"file\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}s}", buf, 0x26u);
        if (qword_1E929D6B0 != -1) {
          dispatch_once(&qword_1E929D6B0, &unk_1EDFD3AA0);
        }
      }
      uint64_t v25 = qword_1E929D6A0;
      BOOL result = os_signpost_enabled((os_log_t)qword_1E929D6A0);
      if (!result) {
        return result;
      }
      __int16 v28 = objc_msgSend_description(v51, v26, v27);
      uint64_t v31 = objc_msgSend_UTF8String(v28, v29, v30);
      *(_DWORD *)int buf = 68289538;
      int v53 = 0;
      __int16 v54 = 2082;
      float32x2_t v55 = "";
      __int16 v56 = 2082;
      __int32 v57 = a2;
      __int16 v58 = 2082;
      uint64_t v59 = v31;
      __int16 v32 = "file does not exist... clearing";
      uint64_t v33 = "{\"msg%{public}.0s\":\"file does not exist... clearing\", \"file\":%{public, location:escape_only}s, \"error"
            "\":%{public, location:escape_only}s}";
    }
    else
    {
      if (qword_1E929D6B0 != -1) {
        dispatch_once(&qword_1E929D6B0, &unk_1EDFD3AA0);
      }
      uint64_t v38 = qword_1E929D6A0;
      if (os_log_type_enabled((os_log_t)qword_1E929D6A0, OS_LOG_TYPE_ERROR))
      {
        float v41 = objc_msgSend_description(v51, v39, v40);
        uint64_t v44 = objc_msgSend_UTF8String(v41, v42, v43);
        *(_DWORD *)int buf = 68289538;
        int v53 = 0;
        __int16 v54 = 2082;
        float32x2_t v55 = "";
        __int16 v56 = 2082;
        __int32 v57 = a2;
        __int16 v58 = 2082;
        uint64_t v59 = v44;
        _os_log_impl(&dword_1902AF000, v38, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Warning Error reading file\", \"file\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}s}", buf, 0x26u);
        if (qword_1E929D6B0 != -1) {
          dispatch_once(&qword_1E929D6B0, &unk_1EDFD3AA0);
        }
      }
      uint64_t v25 = qword_1E929D6A0;
      BOOL result = os_signpost_enabled((os_log_t)qword_1E929D6A0);
      if (!result) {
        return result;
      }
      float v47 = objc_msgSend_description(v51, v45, v46);
      uint64_t v50 = objc_msgSend_UTF8String(v47, v48, v49);
      *(_DWORD *)int buf = 68289538;
      int v53 = 0;
      __int16 v54 = 2082;
      float32x2_t v55 = "";
      __int16 v56 = 2082;
      __int32 v57 = a2;
      __int16 v58 = 2082;
      uint64_t v59 = v50;
      __int16 v32 = "#Warning Error reading file";
      uint64_t v33 = "{\"msg%{public}.0s\":\"#Warning Error reading file\", \"file\":%{public, location:escape_only}s, \"error\":%"
            "{public, location:escape_only}s}";
    }
    uint64_t v36 = v25;
    uint32_t v37 = 38;
    goto LABEL_32;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 784))(a1, v10)) {
    return 1;
  }
  if (qword_1E929D6B0 != -1) {
    dispatch_once(&qword_1E929D6B0, &unk_1EDFD3AA0);
  }
  __int16 v34 = qword_1E929D6A0;
  if (os_log_type_enabled((os_log_t)qword_1E929D6A0, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)int buf = 68289282;
    int v53 = 0;
    __int16 v54 = 2082;
    float32x2_t v55 = "";
    __int16 v56 = 2082;
    __int32 v57 = a2;
    _os_log_impl(&dword_1902AF000, v34, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"could not deserialize property list\", \"file\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (qword_1E929D6B0 != -1) {
      dispatch_once(&qword_1E929D6B0, &unk_1EDFD3AA0);
    }
  }
  uint64_t v35 = qword_1E929D6A0;
  BOOL result = os_signpost_enabled((os_log_t)qword_1E929D6A0);
  if (result)
  {
    *(_DWORD *)int buf = 68289282;
    int v53 = 0;
    __int16 v54 = 2082;
    float32x2_t v55 = "";
    __int16 v56 = 2082;
    __int32 v57 = a2;
    __int16 v32 = "could not deserialize property list";
    uint64_t v33 = "{\"msg%{public}.0s\":\"could not deserialize property list\", \"file\":%{public, location:escape_only}s}";
    uint64_t v36 = v35;
    uint32_t v37 = 28;
LABEL_32:
    _os_signpost_emit_with_name_impl(&dword_1902AF000, v36, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v32, v33, buf, v37);
    return 0;
  }
  return result;
}

uint64_t sub_1902DFEC4()
{
  if (qword_1EB3BF248 != -1) {
    dispatch_once(&qword_1EB3BF248, &unk_1EDFD1B00);
  }
  return qword_1EB3BF240;
}

void sub_1902DFF08(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 32))
  {
    float32x4_t v2 = *(dispatch_once_t **)(a1 + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1902DBF60;
    block[3] = &unk_1E568CF68;
    block[4] = a1;
    if (*v2 != -1) {
      dispatch_once(v2, block);
    }
    *(unsigned char *)(a1 + 32) = 1;
  }
}

uint64_t sub_1902DFFA4()
{
  if (qword_1EB3BE9D0 != -1) {
    dispatch_once(&qword_1EB3BE9D0, &unk_1EDFD4220);
  }
  if (byte_1EB3BE953) {
    return 1;
  }
  if (qword_1EB3BE9B8 != -1) {
    dispatch_once(&qword_1EB3BE9B8, &unk_1EDFD41C0);
  }
  return byte_1EB3BE950;
}

uint64_t sub_1902E0024()
{
  if (qword_1EB3BE9D8 != -1) {
    dispatch_once(&qword_1EB3BE9D8, &unk_1EDFD4240);
  }
  return byte_1EB3BE954;
}

uint64_t sub_1902E0068()
{
  if (qword_1EB3BE970 != -1) {
    dispatch_once(&qword_1EB3BE970, &unk_1EDFC1FE0);
  }
  return dword_1EB3BE95C;
}

uint64_t sub_1902E00AC(int a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a1 > 18)
  {
    if (a1 > 66)
    {
      if (a1 == 67) {
        return 10;
      }
      if (a1 == 143) {
        return 4;
      }
    }
    else
    {
      if (a1 == 19) {
        return 5;
      }
      if (a1 == 34) {
        return 9;
      }
    }
  }
  else if (a1 > 6)
  {
    if (a1 == 7) {
      return 2;
    }
    if (a1 == 15) {
      return 3;
    }
  }
  else
  {
    if (a1 == 2) {
      return 0;
    }
    if (a1 == 3) {
      return 1;
    }
  }
  if (qword_1EB3BE878 != -1) {
    dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
  }
  long long v3 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)int buf = 67240192;
    int v6 = a1;
    _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_FAULT, "No viable conversion for mode %{public}#x", buf, 8u);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD3780);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "static CLDeviceMotion::CLDeviceMotionNotification CLDeviceMotion::CLMotionTypeDeviceMotionModeToCLDeviceMotionNotification(const CLMotionTypeDeviceMotionMode)", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return 11;
}

void sub_1902E02F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1902D6BD0();
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_1902BD700;
  v5[3] = &unk_1E568F5A8;
  v5[4] = a1;
  v5[5] = a2;
  sub_1902CDE98(v4, (uint64_t)v5);
}

void sub_1902E0374(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = sub_1902D6BD0();
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = sub_1902BD2DC;
  v7[3] = &unk_1E568E3E0;
  v7[4] = a1;
  v7[5] = a2;
  *(double *)&void v7[6] = a3;
  sub_1902CDE98(v6, (uint64_t)v7);
}

uint64_t sub_1902E0404(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[4];
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 40))(v4, a2);
  }
  uint64_t v5 = a1[7];
  if (v5) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, a2);
  }
  uint64_t v6 = a1[8];
  if (v6) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 40))(v6, a2);
  }
  uint64_t v7 = a1[6];
  if (v7) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, a2);
  }
  uint64_t v8 = a1[9];
  if (v8) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 40))(v8, a2);
  }
  uint64_t result = a1[5];
  if (result)
  {
    uint64_t v10 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v10();
  }
  return result;
}

char *sub_1902E0560(char *a1, const __CFString *a2, char a3)
{
  uint64_t v4 = sub_1902C2D10((uint64_t)a1, a2, a3, 0x1EDFD6490);
  *(void *)uint64_t v4 = &unk_1EDFC7978;
  if (*(unsigned char *)(v4 + 16)) {
    sub_19047E8B8(a1, 1);
  }
  return a1;
}

void sub_1902E05C0(_Unwind_Exception *a1)
{
  sub_19047E7E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1902E05D4(uint64_t result)
{
  *(_DWORD *)uint64_t result = 2147450879;
  *(_WORD *)(result + 4) = 0x7FFF;
  *(_DWORD *)(result + 6) = 2147450879;
  *(_WORD *)(result + 10) = 0x7FFF;
  *(_DWORD *)(result + 12) = 2147450879;
  *(_WORD *)(result + 16) = 0x7FFF;
  *(_DWORD *)(result + 18) = 2147450879;
  *(_WORD *)(result + 22) = 0x7FFF;
  *(_WORD *)(result + 28) = 0x7FFF;
  *(_DWORD *)(result + 24) = 2147450879;
  *(_WORD *)(result + 34) = 0x7FFF;
  *(_DWORD *)(result + 30) = 2147450879;
  *(_WORD *)(result + 40) = 0x7FFF;
  *(_DWORD *)(result + 36) = 2147450879;
  *(_WORD *)(result + 46) = 0x7FFF;
  *(_DWORD *)(result + 42) = 2147450879;
  *(_WORD *)(result + 52) = 0x7FFF;
  *(_DWORD *)(result + 48) = 2147450879;
  *(_WORD *)(result + 58) = 0x7FFF;
  *(_DWORD *)(result + 54) = 2147450879;
  *(_WORD *)(result + 64) = 0x7FFF;
  *(_DWORD *)(result + 60) = 2147450879;
  *(_WORD *)(result + 70) = 0x7FFF;
  *(_DWORD *)(result + 66) = 2147450879;
  *(_WORD *)(result + 76) = 0x7FFF;
  *(_DWORD *)(result + 72) = 2147450879;
  *(_WORD *)(result + 82) = 0x7FFF;
  *(_DWORD *)(result + 78) = 2147450879;
  *(_WORD *)(result + 88) = 0x7FFF;
  *(_DWORD *)(result + 84) = 2147450879;
  *(_WORD *)(result + 94) = 0x7FFF;
  *(_DWORD *)(result + 90) = 2147450879;
  *(_WORD *)(result + 100) = 0x7FFF;
  *(_DWORD *)(result + 96) = 2147450879;
  *(_WORD *)(result + 106) = 0x7FFF;
  *(_DWORD *)(result + 102) = 2147450879;
  *(_WORD *)(result + 112) = 0x7FFF;
  *(_DWORD *)(result + 108) = 2147450879;
  *(_WORD *)(result + 118) = 0x7FFF;
  *(_DWORD *)(result + 114) = 2147450879;
  *(_WORD *)(result + 124) = 0x7FFF;
  *(_DWORD *)(result + 120) = 2147450879;
  *(_WORD *)(result + 130) = 0x7FFF;
  *(_DWORD *)(result + 126) = 2147450879;
  *(_WORD *)(result + 136) = 0x7FFF;
  *(_DWORD *)(result + 132) = 2147450879;
  *(_WORD *)(result + 142) = 0x7FFF;
  *(_DWORD *)(result + 138) = 2147450879;
  *(_WORD *)(result + 148) = 0x7FFF;
  *(_DWORD *)(result + 144) = 2147450879;
  *(_WORD *)(result + 154) = 0x7FFF;
  *(_DWORD *)(result + 150) = 2147450879;
  *(_WORD *)(result + 160) = 0x7FFF;
  *(_DWORD *)(result + 156) = 2147450879;
  *(_WORD *)(result + 166) = 0x7FFF;
  *(_DWORD *)(result + 162) = 2147450879;
  *(_WORD *)(result + 172) = 0x7FFF;
  *(_DWORD *)(result + 168) = 2147450879;
  *(_WORD *)(result + 178) = 0x7FFF;
  *(_DWORD *)(result + 174) = 2147450879;
  *(_WORD *)(result + 184) = 0x7FFF;
  *(_DWORD *)(result + 180) = 2147450879;
  *(_WORD *)(result + 190) = 0x7FFF;
  *(_DWORD *)(result + 186) = 2147450879;
  return result;
}

void sub_1902E0A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id CMOdometerData.slope.getter()
{
  return sub_1902E1044((SEL *)&selRef_slope);
}

id CMOdometerData.maxAbsSlope.getter()
{
  return sub_1902E1044((SEL *)&selRef_maxAbsSlope);
}

id sub_1902E1044(SEL *a1)
{
  id result = [v1 *a1];
  long long v3 = result;
  if (result)
  {
    objc_msgSend(result, sel_doubleValue);
    uint64_t v5 = v4;

    return (id)v5;
  }
  return result;
}

uint64_t sub_1902E10A8()
{
  uint64_t v0 = sub_1905F4DE8();
  sub_1902E3D7C(v0, qword_1E929E568);
  sub_1902E3120(v0, (uint64_t)qword_1E929E568);
  return sub_1905F4DD8();
}

uint64_t sub_1902E112C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t CMBatchedSensorManager.AccelerometerUpdates.Iterator.next()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  uint64_t v2 = sub_1902E112C(&qword_1E929D7C0);
  *uint64_t v1 = v0;
  v1[1] = sub_1902E1224;
  return MEMORY[0x1F4187EE0](v0 + 16, v2);
}

uint64_t sub_1902E1224()
{
  *(void *)(*(void *)v1 + 32) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1902E409C;
  }
  else {
    uint64_t v2 = sub_1902E40B0;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1902E1338(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 32) = v2;
  uint64_t v3 = sub_1902E112C(&qword_1E929D7C0);
  *uint64_t v2 = v1;
  v2[1] = sub_1902E13F0;
  return MEMORY[0x1F4187EE0](v1 + 16, v3);
}

uint64_t sub_1902E13F0()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1902E40A0;
  }
  else {
    uint64_t v2 = sub_1902E40A8;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1902E1504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  uint64_t v5 = (void *)swift_task_alloc();
  v4[8] = v5;
  uint64_t v6 = sub_1902E112C(&qword_1E929D7C0);
  *uint64_t v5 = v4;
  v5[1] = sub_1902E15C0;
  return MEMORY[0x1F4187EE0](v4 + 2, v6);
}

uint64_t sub_1902E15C0()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1902E1768;
  }
  else {
    uint64_t v2 = sub_1902E16D4;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1902E16D4()
{
  uint64_t v1 = v0[5];
  v0[10] = v0[2];
  if (v1)
  {
    swift_getObjectType();
    uint64_t v2 = sub_1905F4E28();
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v4 = 0;
  }
  return MEMORY[0x1F4188298](sub_1902E4090, v2, v4);
}

uint64_t sub_1902E1768()
{
  if (*(void *)(v0 + 40))
  {
    swift_getObjectType();
    uint64_t v1 = sub_1905F4E28();
    uint64_t v3 = v2;
  }
  else
  {
    uint64_t v1 = 0;
    uint64_t v3 = 0;
  }
  return MEMORY[0x1F4188298](sub_1902E4094, v1, v3);
}

uint64_t CMBatchedSensorManager.AccelerometerUpdates.makeAsyncIterator()()
{
  sub_1902E112C(&qword_1E929D7D0);

  return sub_1905F4E68();
}

uint64_t sub_1902E1834(uint64_t a1, uint64_t a2)
{
  return sub_1902E2350(a1, a2, &qword_1E929D7D0, type metadata accessor for CMBatchedSensorManager.AccelerometerUpdates);
}

uint64_t CMBatchedSensorManager.accelerometerUpdates()()
{
  return sub_1902E23C0(&qword_1E929D7D8, &qword_1E929D7E0);
}

void sub_1902E187C(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_1902E112C(&qword_1E929D890);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790]();
  *(void *)(swift_allocObject() + 16) = a2;
  id v7 = a2;
  sub_1905F4E38();
  if (qword_1E929E560 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_1905F4DE8();
  sub_1902E3120(v8, (uint64_t)qword_1E929E568);
  int v9 = sub_1905F4DC8();
  os_log_type_t v10 = sub_1905F4EB8();
  if (os_log_type_enabled(v9, v10))
  {
    int v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v11 = 0;
    _os_log_impl(&dword_1902AF000, v9, v10, "[framework-accel-async] starting updates", v11, 2u);
    MEMORY[0x192FCDBF0](v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v13 + v12, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1902E3F8C;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1902E1B30;
  aBlock[3] = &unk_1EDFC38F0;
  __int16 v14 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v7, sel_startAccelerometerUpdatesWithHandler_, v14);
  _Block_release(v14);
}

void sub_1902E1B28(uint64_t a1)
{
  sub_1902E187C(a1, *(void **)(v1 + 16));
}

uint64_t sub_1902E1B30(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1902E35C0(a1, a2, a3, &qword_1E929D898);
}

uint64_t CMBatchedSensorManager.DeviceMotionUpdates.Iterator.next()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  uint64_t v2 = sub_1902E112C(&qword_1E929D7E8);
  *uint64_t v1 = v0;
  v1[1] = sub_1902E1BF8;
  return MEMORY[0x1F4187EE0](v0 + 16, v2);
}

uint64_t sub_1902E1BF8()
{
  *(void *)(*(void *)v1 + 32) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1902E1D28;
  }
  else {
    uint64_t v2 = sub_1902E1D0C;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1902E1D0C()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t sub_1902E1D28()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1902E1D40(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 32) = v2;
  uint64_t v3 = sub_1902E112C(&qword_1E929D7E8);
  *uint64_t v2 = v1;
  v2[1] = sub_1902E1DF8;
  return MEMORY[0x1F4187EE0](v1 + 16, v3);
}

uint64_t sub_1902E1DF8()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1902E1F2C;
  }
  else {
    uint64_t v2 = sub_1902E1F0C;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1902E1F0C()
{
  **(void **)(v0 + 24) = *(void *)(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1902E1F2C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1902E1F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  uint64_t v5 = (void *)swift_task_alloc();
  v4[8] = v5;
  uint64_t v6 = sub_1902E112C(&qword_1E929D7E8);
  *uint64_t v5 = v4;
  v5[1] = sub_1902E2000;
  return MEMORY[0x1F4187EE0](v4 + 2, v6);
}

uint64_t sub_1902E2000()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1902E21CC;
  }
  else {
    uint64_t v2 = sub_1902E2114;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1902E2114()
{
  uint64_t v1 = v0[5];
  v0[10] = v0[2];
  if (v1)
  {
    swift_getObjectType();
    uint64_t v2 = sub_1905F4E28();
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v4 = 0;
  }
  return MEMORY[0x1F4188298](sub_1902E21A8, v2, v4);
}

uint64_t sub_1902E21A8()
{
  **(void **)(v0 + 32) = *(void *)(v0 + 80);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1902E21CC()
{
  if (*(void *)(v0 + 40))
  {
    swift_getObjectType();
    uint64_t v1 = sub_1905F4E28();
    uint64_t v3 = v2;
  }
  else
  {
    uint64_t v1 = 0;
    uint64_t v3 = 0;
  }
  return MEMORY[0x1F4188298](sub_1902E2258, v1, v3);
}

uint64_t sub_1902E2258()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = (void *)v0[7];
  v0[3] = v1;
  sub_1902E112C(&qword_1E929D848);
  swift_willThrowTypedImpl();
  *uint64_t v2 = v1;
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t CMBatchedSensorManager.DeviceMotionUpdates.makeAsyncIterator()()
{
  sub_1902E112C(&qword_1E929D7F8);

  return sub_1905F4E68();
}

uint64_t sub_1902E2330(uint64_t a1, uint64_t a2)
{
  return sub_1902E2350(a1, a2, &qword_1E929D7F8, type metadata accessor for CMBatchedSensorManager.DeviceMotionUpdates);
}

uint64_t sub_1902E2350(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  sub_1902E112C(a3);
  sub_1905F4E68();
  return sub_1902E3074(v4, a4);
}

uint64_t CMBatchedSensorManager.deviceMotionUpdates()()
{
  return sub_1902E23C0(&qword_1E929D800, qword_1E929D808);
}

uint64_t sub_1902E23C0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = sub_1902E112C(a1);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790]();
  id v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = v2;
  sub_1902E112C(a2);
  (*(void (**)(unsigned char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FBD120], v4);
  return sub_1905F4E88();
}

void sub_1902E24CC(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_1902E112C(&qword_1E929D868);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790]();
  *(void *)(swift_allocObject() + 16) = a2;
  id v7 = a2;
  sub_1905F4E38();
  if (qword_1E929E560 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_1905F4DE8();
  sub_1902E3120(v8, (uint64_t)qword_1E929E568);
  int v9 = sub_1905F4DC8();
  os_log_type_t v10 = sub_1905F4EB8();
  if (os_log_type_enabled(v9, v10))
  {
    int v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v11 = 0;
    _os_log_impl(&dword_1902AF000, v9, v10, "[framework-dm-async] starting updates", v11, 2u);
    MEMORY[0x192FCDBF0](v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v13 + v12, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1902E3588;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1902E35AC;
  aBlock[3] = &unk_1EDFC38C8;
  __int16 v14 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v7, sel_startDeviceMotionUpdatesWithHandler_, v14);
  _Block_release(v14);
}

void sub_1902E2778(uint64_t a1)
{
  sub_1902E24CC(a1, *(void **)(v1 + 16));
}

uint64_t sub_1902E2780()
{
  return MEMORY[0x1E4FBC0F0];
}

uint64_t sub_1902E278C()
{
  return sub_1902E283C(qword_1E929D820, (void (*)(uint64_t))type metadata accessor for CMBatchedSensorManager.AccelerometerUpdates.Iterator);
}

uint64_t type metadata accessor for CMBatchedSensorManager.AccelerometerUpdates.Iterator(uint64_t a1)
{
  return sub_1902E2BAC(a1, (uint64_t *)&unk_1E929E790);
}

uint64_t sub_1902E27F4()
{
  return sub_1902E283C(&qword_1E929D838, (void (*)(uint64_t))type metadata accessor for CMBatchedSensorManager.DeviceMotionUpdates.Iterator);
}

uint64_t sub_1902E283C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for CMBatchedSensorManager.DeviceMotionUpdates.Iterator(uint64_t a1)
{
  return sub_1902E2BAC(a1, (uint64_t *)&unk_1E929E7B0);
}

uint64_t _s20AccelerometerUpdatesVwCP(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1902E2C18(a1, a2, a3, &qword_1E929D7D0);
}

uint64_t _s20AccelerometerUpdatesVwxx(uint64_t a1, uint64_t a2)
{
  return sub_1902E2C90(a1, a2, &qword_1E929D7D0);
}

uint64_t _s20AccelerometerUpdatesVwcp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1902E2D00(a1, a2, a3, &qword_1E929D7D0);
}

uint64_t _s20AccelerometerUpdatesVwca(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1902E2D70(a1, a2, a3, &qword_1E929D7D0);
}

uint64_t _s20AccelerometerUpdatesVwtk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1902E2DE0(a1, a2, a3, &qword_1E929D7D0);
}

uint64_t _s20AccelerometerUpdatesVwta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1902E2E50(a1, a2, a3, &qword_1E929D7D0);
}

uint64_t _s20AccelerometerUpdatesVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1902E2900);
}

uint64_t sub_1902E2900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1902E2ED4(a1, a2, a3, &qword_1E929D7D0);
}

uint64_t _s20AccelerometerUpdatesVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1902E2920);
}

uint64_t sub_1902E2920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1902E2F60(a1, a2, a3, a4, &qword_1E929D7D0);
}

uint64_t type metadata accessor for CMBatchedSensorManager.AccelerometerUpdates(uint64_t a1)
{
  return sub_1902E2BAC(a1, (uint64_t *)&unk_1E929E780);
}

void sub_1902E294C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1902E2974(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t _s20AccelerometerUpdatesV8IteratorVwCP(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1902E2C18(a1, a2, a3, &qword_1E929D7C0);
}

uint64_t _s20AccelerometerUpdatesV8IteratorVwxx(uint64_t a1, uint64_t a2)
{
  return sub_1902E2C90(a1, a2, &qword_1E929D7C0);
}

uint64_t _s20AccelerometerUpdatesV8IteratorVwcp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1902E2D00(a1, a2, a3, &qword_1E929D7C0);
}

uint64_t _s20AccelerometerUpdatesV8IteratorVwca(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1902E2D70(a1, a2, a3, &qword_1E929D7C0);
}

uint64_t _s20AccelerometerUpdatesV8IteratorVwtk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1902E2DE0(a1, a2, a3, &qword_1E929D7C0);
}

uint64_t _s20AccelerometerUpdatesV8IteratorVwta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1902E2E50(a1, a2, a3, &qword_1E929D7C0);
}

uint64_t _s20AccelerometerUpdatesV8IteratorVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1902E2A18);
}

uint64_t sub_1902E2A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1902E2ED4(a1, a2, a3, &qword_1E929D7C0);
}

uint64_t _s20AccelerometerUpdatesV8IteratorVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1902E2A38);
}

uint64_t sub_1902E2A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1902E2F60(a1, a2, a3, a4, &qword_1E929D7C0);
}

void sub_1902E2A44(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1902E2A6C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, void))
{
  sub_1902E2FF8(319, a4, a5, a6);
  if (v6 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t _s19DeviceMotionUpdatesVwCP(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1902E2C18(a1, a2, a3, &qword_1E929D7F8);
}

uint64_t _s19DeviceMotionUpdatesVwxx(uint64_t a1, uint64_t a2)
{
  return sub_1902E2C90(a1, a2, &qword_1E929D7F8);
}

uint64_t _s19DeviceMotionUpdatesVwcp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1902E2D00(a1, a2, a3, &qword_1E929D7F8);
}

uint64_t _s19DeviceMotionUpdatesVwca(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1902E2D70(a1, a2, a3, &qword_1E929D7F8);
}

uint64_t _s19DeviceMotionUpdatesVwtk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1902E2DE0(a1, a2, a3, &qword_1E929D7F8);
}

uint64_t _s19DeviceMotionUpdatesVwta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1902E2E50(a1, a2, a3, &qword_1E929D7F8);
}

uint64_t _s19DeviceMotionUpdatesVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1902E2B60);
}

uint64_t sub_1902E2B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1902E2ED4(a1, a2, a3, &qword_1E929D7F8);
}

uint64_t _s19DeviceMotionUpdatesVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1902E2B80);
}

uint64_t sub_1902E2B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1902E2F60(a1, a2, a3, a4, &qword_1E929D7F8);
}

uint64_t type metadata accessor for CMBatchedSensorManager.DeviceMotionUpdates(uint64_t a1)
{
  return sub_1902E2BAC(a1, (uint64_t *)&unk_1E929E7A0);
}

uint64_t sub_1902E2BAC(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1902E2BE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t _s19DeviceMotionUpdatesV8IteratorVwCP(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1902E2C18(a1, a2, a3, &qword_1E929D7E8);
}

uint64_t sub_1902E2C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = sub_1902E112C(a4);
  id v7 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);

  return v7(a1, a2, v6);
}

uint64_t _s19DeviceMotionUpdatesV8IteratorVwxx(uint64_t a1, uint64_t a2)
{
  return sub_1902E2C90(a1, a2, &qword_1E929D7E8);
}

uint64_t sub_1902E2C90(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = sub_1902E112C(a3);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(a1, v4);
}

uint64_t _s19DeviceMotionUpdatesV8IteratorVwcp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1902E2D00(a1, a2, a3, &qword_1E929D7E8);
}

uint64_t sub_1902E2D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = sub_1902E112C(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  return a1;
}

uint64_t _s19DeviceMotionUpdatesV8IteratorVwca(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1902E2D70(a1, a2, a3, &qword_1E929D7E8);
}

uint64_t sub_1902E2D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = sub_1902E112C(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  return a1;
}

uint64_t _s19DeviceMotionUpdatesV8IteratorVwtk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1902E2DE0(a1, a2, a3, &qword_1E929D7E8);
}

uint64_t sub_1902E2DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = sub_1902E112C(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  return a1;
}

uint64_t _s19DeviceMotionUpdatesV8IteratorVwta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1902E2E50(a1, a2, a3, &qword_1E929D7E8);
}

uint64_t sub_1902E2E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = sub_1902E112C(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  return a1;
}

uint64_t _s19DeviceMotionUpdatesV8IteratorVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1902E2EC8);
}

uint64_t sub_1902E2EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1902E2ED4(a1, a2, a3, &qword_1E929D7E8);
}

uint64_t sub_1902E2ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = sub_1902E112C(a4);
  id v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);

  return v7(a1, a2, v6);
}

uint64_t _s19DeviceMotionUpdatesV8IteratorVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1902E2F54);
}

uint64_t sub_1902E2F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1902E2F60(a1, a2, a3, a4, &qword_1E929D7E8);
}

uint64_t sub_1902E2F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = sub_1902E112C(a5);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(a1, a2, a2, v7);
}

void sub_1902E2FD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1902E2FF8(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, void))
{
  if (!*a2)
  {
    uint64_t v7 = sub_1902E2974(a3);
    uint64_t v8 = sub_1902E2974(&qword_1E929D848);
    unint64_t v9 = a4(a1, v7, v8, MEMORY[0x1E4FBC0F0]);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_1902E3074(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1902E30D4()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

id sub_1902E310C(uint64_t a1)
{
  return sub_1902E3DF4(a1, "[framework-dm-async] terminating", (const char **)&selRef_stopDeviceMotionUpdates);
}

uint64_t sub_1902E3120(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_1902E3158(unint64_t a1, void *a2, uint64_t a3, uint64_t *a4, const char *a5, uint64_t *a6, const char *a7)
{
  uint64_t v12 = sub_1902E112C(a4);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t result = MEMORY[0x1F4188790]();
  __int16 v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (qword_1E929E560 != -1) {
      swift_once();
    }
    uint64_t v17 = sub_1905F4DE8();
    sub_1902E3120(v17, (uint64_t)qword_1E929E568);
    os_log_type_t v18 = sub_1905F4E98();
    swift_bridgeObjectRetain_n();
    char v19 = sub_1905F4DC8();
    if (os_log_type_enabled(v19, v18))
    {
      uint64_t v35 = a6;
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 134217984;
      if (a1 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v21 = sub_1905F4F18();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v21 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      unint64_t v37 = v21;
      sub_1905F4EC8();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1902AF000, v19, v18, a5, v20, 0xCu);
      MEMORY[0x192FCDBF0](v20, -1, -1);

      a6 = v35;
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    unint64_t v37 = a1;
    swift_bridgeObjectRetain();
    sub_1902E112C(a6);
    sub_1905F4E48();
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
  else if (a2)
  {
    if (qword_1E929E560 != -1) {
      swift_once();
    }
    uint64_t v22 = sub_1905F4DE8();
    sub_1902E3120(v22, (uint64_t)qword_1E929E568);
    os_log_type_t v23 = sub_1905F4EA8();
    id v24 = a2;
    id v25 = a2;
    __int16 v26 = sub_1905F4DC8();
    os_log_type_t v27 = v23;
    if (os_log_type_enabled(v26, v23))
    {
      __int16 v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v36 = (uint64_t)a2;
      unint64_t v37 = v29;
      *(_DWORD *)__int16 v28 = 136315138;
      uint64_t v35 = (uint64_t *)(v28 + 4);
      id v30 = a2;
      sub_1902E112C(&qword_1E929D880);
      uint64_t v31 = sub_1905F4DF8();
      uint64_t v36 = sub_1902E3674(v31, v32, (uint64_t *)&v37);
      sub_1905F4EC8();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1902AF000, v26, v27, a7, v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x192FCDBF0](v29, -1, -1);
      MEMORY[0x192FCDBF0](v28, -1, -1);
    }
    else
    {
    }
    unint64_t v37 = (unint64_t)a2;
    id v33 = a2;
    sub_1902E112C(a6);
    return sub_1905F4E58();
  }
  return result;
}

uint64_t sub_1902E357C()
{
  return sub_1902E3F00(&qword_1E929D868);
}

uint64_t sub_1902E3588(unint64_t a1, void *a2)
{
  return sub_1902E3FB0(a1, a2, &qword_1E929D868, &qword_1E929D878, "[framework-dm-async] yielding new update %ld", "[framework-dm-async] terminating with error %s");
}

uint64_t sub_1902E35AC(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1902E35C0(a1, a2, a3, &qword_1E929D870);
}

uint64_t sub_1902E35C0(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_1902E4054(0, a4);
    uint64_t v5 = sub_1905F4E18();
  }
  swift_retain();
  id v7 = a3;
  v6(v5, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1902E365C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1902E366C()
{
  return swift_release();
}

uint64_t sub_1902E3674(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1902E3748(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    Objectint Type = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1902E3954((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    Objectint Type = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1902E3954((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_1902E3904((uint64_t)v12);
  return v7;
}

uint64_t sub_1902E3748(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1905F4ED8();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1902E39B0(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_1905F4EF8();
  if (!v8)
  {
    sub_1905F4F08();
    __break(1u);
LABEL_17:
    uint64_t result = sub_1905F4F28();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1902E3904(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1902E3954(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1902E39B0(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_1902E3A48(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1902E3C28(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1902E3C28(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1902E3A48(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_1902E3BC0(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_1905F4EE8();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_1905F4F08();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_1905F4E08();
      if (!v2) {
        return MEMORY[0x1E4FBC860];
      }
    }
    sub_1905F4F28();
    __break(1u);
LABEL_14:
    uint64_t result = sub_1905F4F08();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

void *sub_1902E3BC0(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  sub_1902E112C(&qword_1E929D888);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1902E3C28(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_1902E112C(&qword_1E929D888);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1905F4F28();
  __break(1u);
  return result;
}

uint64_t *sub_1902E3D7C(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

id sub_1902E3DE0(uint64_t a1)
{
  return sub_1902E3DF4(a1, "[framework-accel-async] terminating", (const char **)&selRef_stopAccelerometerUpdates);
}

id sub_1902E3DF4(uint64_t a1, const char *a2, const char **a3)
{
  unint64_t v6 = *(void **)(v3 + 16);
  if (qword_1E929E560 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_1905F4DE8();
  sub_1902E3120(v7, (uint64_t)qword_1E929E568);
  int64_t v8 = sub_1905F4DC8();
  os_log_type_t v9 = sub_1905F4EB8();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_1902AF000, v8, v9, a2, v10, 2u);
    MEMORY[0x192FCDBF0](v10, -1, -1);
  }

  size_t v11 = *a3;

  return [v6 v11];
}

uint64_t sub_1902E3EF4()
{
  return sub_1902E3F00(&qword_1E929D890);
}

uint64_t sub_1902E3F00(uint64_t *a1)
{
  uint64_t v2 = sub_1902E112C(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return MEMORY[0x1F4186498](v1, v6, v7);
}

uint64_t sub_1902E3F8C(unint64_t a1, void *a2)
{
  return sub_1902E3FB0(a1, a2, &qword_1E929D890, &qword_1E929D8A0, "[framework-accel-async] yielding new update %ld", "[framework-accel-async] terminating with error %s");
}

uint64_t sub_1902E3FB0(unint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, const char *a5, const char *a6)
{
  uint64_t v13 = *(void *)(sub_1902E112C(a3) - 8);
  return sub_1902E3158(a1, a2, v6 + ((*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), a4, a5, a3, a6);
}

uint64_t sub_1902E4054(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1902E40B4(__int16 a1, __int16 a2, __int16 a3, uint64_t a4, _WORD *a5)
{
  v6[0] = a1;
  v6[1] = a2;
  v6[2] = a3;
  *a5 = 1;
  sub_1902E641C((uint64_t)v6, 32, 1, a4);
  return 1;
}

uint64_t sub_1902E40F8(int a1, int a2)
{
  uint64_t v2 = 2 * a1;
  __int16 v3 = v2 >= a2;
  if (v2 >= a2) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = 2 * (v2 - v4);
  __int16 v6 = v5 >= a2;
  if (v5 < a2) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = a2;
  }
  uint64_t v8 = 2 * (v5 - v7);
  __int16 v9 = v8 >= a2;
  if (v8 >= a2) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = 2 * (v8 - v10);
  __int16 v12 = (4 * v6) | (8 * v3) | (2 * v9) | (v11 >= a2);
  if (v11 < a2) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = a2;
  }
  uint64_t v14 = 2 * (v11 - v13);
  __int16 v15 = v14 >= a2;
  if (v14 >= a2) {
    uint64_t v16 = a2;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = 2 * (v14 - v16);
  __int16 v18 = (2 * v15) | (4 * v12) | (v17 >= a2);
  if (v17 < a2) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = a2;
  }
  uint64_t v20 = 2 * (v17 - v19);
  __int16 v21 = v20 >= a2;
  if (v20 >= a2) {
    uint64_t v22 = a2;
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v23 = 2 * (v20 - v22);
  __int16 v24 = (2 * v21) | (4 * v18) | (v23 >= a2);
  if (v23 < a2) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = a2;
  }
  uint64_t v26 = 2 * (v23 - v25);
  __int16 v27 = v26 >= a2;
  if (v26 >= a2) {
    uint64_t v28 = a2;
  }
  else {
    uint64_t v28 = 0;
  }
  uint64_t v29 = 2 * (v26 - v28);
  __int16 v30 = (2 * v27) | (4 * v24) | (v29 >= a2);
  if (v29 < a2) {
    uint64_t v31 = 0;
  }
  else {
    uint64_t v31 = a2;
  }
  uint64_t v32 = 2 * (v29 - v31);
  __int16 v33 = v32 >= a2;
  if (v32 >= a2) {
    uint64_t v34 = a2;
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v35 = 2 * (v32 - v34);
  __int16 v36 = (2 * v33) | (4 * v30) | (v35 >= a2);
  if (v35 < a2) {
    uint64_t v37 = 0;
  }
  else {
    uint64_t v37 = a2;
  }
  uint64_t v38 = 2 * (v35 - v37);
  __int16 v39 = v38 >= a2;
  if (v38 >= a2) {
    uint64_t v40 = a2;
  }
  else {
    uint64_t v40 = 0;
  }
  uint64_t v41 = 2 * (v38 - v40);
  __int16 v42 = (2 * v39) | (4 * v36) | (v41 >= a2);
  if (v41 < a2) {
    uint64_t v43 = 0;
  }
  else {
    uint64_t v43 = a2;
  }
  return (__int16)((a2 <= 2 * (v41 - v43)) | (unsigned __int16)(2 * v42));
}

uint64_t sub_1902E4274(unint64_t a1)
{
  if ((uint64_t)a1 < 1)
  {
    if (a1) {
      return 0;
    }
    else {
      return 31;
    }
  }
  else
  {
    unint64_t v1 = a1 >> 30;
    if (a1 >> 30)
    {
      return 0;
    }
    else
    {
      do
      {
        unint64_t v2 = a1 >> 29;
        a1 *= 2;
        LOWORD(v1) = v1 + 1;
      }
      while (!v2);
      return (__int16)v1;
    }
  }
}

uint64_t sub_1902E42B8(int a1)
{
  if (a1 >= 0) {
    LOWORD(v1) = a1;
  }
  else {
    int v1 = -a1;
  }
  if (a1 == -32768) {
    LOWORD(v1) = 0x7FFF;
  }
  return (__int16)v1;
}

uint64_t sub_1902E42D4(uint64_t a1, int a2, __int16 *a3, _WORD *a4)
{
  *(void *)&v83[190] = *MEMORY[0x1E4F143B8];
  if (a2 > 32) {
    return 0;
  }
  int v6 = sub_1902E40F8(1, a2);
  if (a2 < 1)
  {
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v15 = 0;
    unint64_t v16 = 0;
    unint64_t v17 = 0;
    unint64_t v18 = 0;
    unint64_t v19 = 0;
    unint64_t v20 = 0;
    unint64_t v21 = 0;
    goto LABEL_28;
  }
  int v7 = v6;
  uint64_t v8 = (unsigned __int16)a2;
  if (a2 == 1)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v12 = 0;
LABEL_9:
    uint64_t v31 = (__int16 *)(a1 + 6 * v9 + 4);
    uint64_t v32 = (unsigned __int16)a2 - v9;
    do
    {
      v12 += *(v31 - 2) * (uint64_t)v7;
      v11 += *(v31 - 1) * (uint64_t)v7;
      v10 += *v31 * (uint64_t)v7;
      v31 += 3;
      --v32;
    }
    while (v32);
    goto LABEL_11;
  }
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v9 = (unsigned __int16)a2 & 0xFFFE;
  uint64_t v28 = (__int16 *)(a1 + 6);
  uint64_t v29 = v9;
  do
  {
    v26 += *(v28 - 3) * (uint64_t)v7;
    v27 += *v28 * (uint64_t)v7;
    v24 += *(v28 - 2) * (uint64_t)v7;
    v25 += v28[1] * (uint64_t)v7;
    int v30 = v28[2];
    v22 += *(v28 - 1) * (uint64_t)v7;
    v28 += 6;
    v23 += v30 * (uint64_t)v7;
    v29 -= 2;
  }
  while (v29);
  unint64_t v12 = v27 + v26;
  unint64_t v11 = v25 + v24;
  unint64_t v10 = v23 + v22;
  if (v9 != (unsigned __int16)a2) {
    goto LABEL_9;
  }
LABEL_11:
  if (a2 < 0x10)
  {
    uint64_t v33 = 0;
LABEL_16:
    uint64_t v38 = &v80[v33];
    __int16 v39 = (__int16 *)(a1 + 6 * v33 + 4);
    uint64_t v40 = (unsigned __int16)a2 - v33;
    do
    {
      *v38++ = (*(v39 - 2) * *(v39 - 2) + *(v39 - 1) * *(v39 - 1) + *v39 * *v39) >> 11;
      v39 += 3;
      --v40;
    }
    while (v40);
    goto LABEL_18;
  }
  uint64_t v33 = a2 & 0x30;
  uint64_t v34 = (int16x8_t *)&v81;
  uint64_t v35 = (unsigned __int16)a2 & 0xFFF0;
  __int16 v36 = (const __int16 *)a1;
  do
  {
    uint64_t v37 = v36;
    v36 += 48;
    int16x8x3_t v84 = vld3q_s16(v37);
    v37 += 24;
    int16x8x3_t v85 = vld3q_s16(v37);
    v34[-1] = vshrn_high_n_s32(vshrn_n_s32(vmlal_s16(vmlal_s16(vmull_s16(*(int16x4_t *)v84.val[1].i8, *(int16x4_t *)v84.val[1].i8), *(int16x4_t *)v84.val[0].i8, *(int16x4_t *)v84.val[0].i8), *(int16x4_t *)v84.val[2].i8, *(int16x4_t *)v84.val[2].i8), 0xBuLL), vmlal_high_s16(vmlal_high_s16(vmull_high_s16(v84.val[1], v84.val[1]), v84.val[0], v84.val[0]), v84.val[2], v84.val[2]), 0xBuLL);
    *uint64_t v34 = vshrn_high_n_s32(vshrn_n_s32(vmlal_s16(vmlal_s16(vmull_s16(*(int16x4_t *)v85.val[1].i8, *(int16x4_t *)v85.val[1].i8), *(int16x4_t *)v85.val[0].i8, *(int16x4_t *)v85.val[0].i8), *(int16x4_t *)v85.val[2].i8, *(int16x4_t *)v85.val[2].i8), 0xBuLL), vmlal_high_s16(vmlal_high_s16(vmull_high_s16(v85.val[1], v85.val[1]), v85.val[0], v85.val[0]), v85.val[2], v85.val[2]), 0xBuLL);
    v34 += 2;
    v35 -= 16;
  }
  while (v35);
  if (v33 != (unsigned __int16)a2) {
    goto LABEL_16;
  }
LABEL_18:
  if (a2 >= 8)
  {
    int16x8_t v42 = vdupq_n_s16(v12 >> 15);
    int16x8_t v43 = vdupq_n_s16(v11 >> 15);
    uint64_t v41 = (unsigned __int16)a2 & 0xFFF8;
    int16x8_t v44 = vdupq_n_s16(v10 >> 15);
    float v45 = (__int16 *)v82;
    uint64_t v46 = v41;
    float v47 = (const __int16 *)a1;
    do
    {
      int16x8x3_t v86 = vld3q_s16(v47);
      v47 += 24;
      v87.val[0] = vsubq_s16(v86.val[0], v42);
      v87.val[1] = vsubq_s16(v86.val[1], v43);
      v87.val[2] = vsubq_s16(v86.val[2], v44);
      vst3q_s16(v45, v87);
      v45 += 24;
      v46 -= 8;
    }
    while (v46);
    if (v41 == (unsigned __int16)a2) {
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v41 = 0;
  }
  uint64_t v48 = (unsigned __int16)a2 - v41;
  uint64_t v49 = 6 * v41 + 4;
  uint64_t v50 = (__int16 *)(a1 + v49);
  float v51 = &v82[v49];
  do
  {
    *(v51 - 2) = *(v50 - 2) - (v12 >> 15);
    *(v51 - 1) = *(v50 - 1) - (v11 >> 15);
    __int16 v52 = *v50;
    v50 += 3;
    *float v51 = v52 - (v10 >> 15);
    v51 += 3;
    --v48;
  }
  while (v48);
LABEL_25:
  unint64_t v21 = 0;
  unint64_t v20 = 0;
  unint64_t v19 = 0;
  unint64_t v18 = 0;
  unint64_t v17 = 0;
  unint64_t v16 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  __int16 v56 = (__int16 *)(a1 + 4);
  __int32 v57 = (__int16 *)v83;
  __int16 v58 = v80;
  do
  {
    v21 += *(v57 - 1) * (uint64_t)*(v56 - 2);
    v20 += *v57 * (uint64_t)*(v56 - 1);
    int v59 = v57[1];
    v19 += v57[1] * (uint64_t)*v56;
    v18 += *(v56 - 1) * (uint64_t)*(v57 - 1);
    v17 += *v56 * (uint64_t)*(v57 - 1);
    v16 += *v56 * (uint64_t)*v57;
    int v60 = *v58++;
    v53 += v60 * (uint64_t)*(v57 - 1);
    v54 += v60 * (uint64_t)*v57;
    v56 += 3;
    v57 += 3;
    v55 += v60 * (uint64_t)v59;
    --v8;
  }
  while (v8);
  unint64_t v15 = v53 >> 1;
  unint64_t v14 = v54 >> 1;
  unint64_t v13 = v55 >> 1;
LABEL_28:
  int v61 = sub_1902E4274(v21);
  int v62 = sub_1902E4274(v18);
  if (v61 >= v62) {
    int v61 = v62;
  }
  int v63 = sub_1902E4274(v17);
  if (v61 >= v63) {
    int v61 = v63;
  }
  int v64 = sub_1902E4274(v18);
  if (v61 >= v64) {
    int v61 = v64;
  }
  int v65 = sub_1902E4274(v20);
  if (v61 >= v65) {
    int v61 = v65;
  }
  int v66 = sub_1902E4274(v16);
  if (v61 >= v66) {
    int v61 = v66;
  }
  int v67 = sub_1902E4274(v17);
  if (v61 >= v67) {
    int v61 = v67;
  }
  int v68 = sub_1902E4274(v16);
  if (v61 >= v68) {
    int v61 = v68;
  }
  int v69 = sub_1902E4274(v19);
  if (v61 >= v69) {
    int v61 = v69;
  }
  int v70 = sub_1902E4274(v15);
  if (v61 >= v70) {
    int v61 = v70;
  }
  int v71 = sub_1902E4274(v14);
  if (v61 >= v71) {
    int v61 = v71;
  }
  int v72 = sub_1902E4274(v13);
  if (v61 >= v72) {
    int v73 = v72;
  }
  else {
    int v73 = v61;
  }
  if (v73 >= 32) {
    LOBYTE(v73) = 32;
  }
  unint64_t v74 = v18 << v73 >> 18;
  a3[3] = v74;
  a3[1] = v74;
  unint64_t v75 = v17 << v73 >> 18;
  a3[6] = v75;
  a3[2] = v75;
  unint64_t v76 = v16 << v73 >> 18;
  a3[7] = v76;
  a3[5] = v76;
  *a3 = v21 << v73 >> 18;
  a3[4] = v20 << v73 >> 18;
  a3[8] = v19 << v73 >> 18;
  *a4 = v15 << v73 >> 18;
  a4[1] = v14 << v73 >> 18;
  a4[2] = v13 << v73 >> 18;
  if (*a3 >= 6 && a3[4] >= 6 && a3[8] > 5) {
    return 4;
  }
  return 0;
}

uint64_t sub_1902E47D8(__int16 *a1, int a2, __int16 *a3, __int16 *a4, _WORD *a5)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  __int16 v7 = a3[8];
  __int16 v8 = a3[5];
  uint64_t v9 = v7 * (uint64_t)a3[4] - v8 * (uint64_t)v8;
  __int16 v10 = *a3;
  __int16 v11 = a3[6];
  uint64_t v12 = *a3 * (uint64_t)v7 - v11 * (uint64_t)v11;
  __int16 v13 = a3[1];
  uint64_t v14 = *a3 * (uint64_t)a3[4] - v13 * (uint64_t)v13;
  if (v12 <= v9) {
    uint64_t v15 = a3[8] * (uint64_t)a3[4] - a3[5] * (uint64_t)a3[5];
  }
  else {
    uint64_t v15 = *a3 * (uint64_t)a3[8] - a3[6] * (uint64_t)a3[6];
  }
  if (v14 <= v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = *a3 * (uint64_t)a3[4] - a3[1] * (uint64_t)a3[1];
  }
  if (v16 >= 1)
  {
    __int16 v19 = a3[4];
    __int16 v50 = 0;
    int v20 = v12 > v9;
    if (v14 > v15) {
      int v20 = 2;
    }
    if (v20 == 2)
    {
      __int16 v57 = v10;
      __int16 v58 = v13;
      __int16 v55 = -v11;
      __int16 v59 = a3[3];
      __int16 v60 = v19;
      __int16 v56 = -v8;
      if (sub_1902E4C0C(&v57, 2, v54, v53))
      {
        sub_1902E4E88((uint64_t)&v57, 2, (uint64_t)v54, (uint64_t)v53, (uint64_t)&v55, (uint64_t)&v51);
        int v21 = v51 >> 2;
        *a4 = v51 >> 2;
        int v22 = v52 >> 2;
        a4[1] = v52 >> 2;
        int v24 = 2048;
        goto LABEL_19;
      }
    }
    else if (v20 == 1)
    {
      __int16 v57 = v7;
      __int16 v58 = v11;
      __int16 v55 = -v8;
      __int16 v59 = v11;
      __int16 v60 = v10;
      __int16 v56 = -v13;
      if (sub_1902E4C0C(&v57, 2, v54, v53))
      {
        sub_1902E4E88((uint64_t)&v57, 2, (uint64_t)v54, (uint64_t)v53, (uint64_t)&v55, (uint64_t)&v51);
        int v21 = v52 >> 2;
        *a4 = v52 >> 2;
        int v22 = 2048;
        a4[1] = 2048;
        int v23 = v51;
        goto LABEL_18;
      }
    }
    else
    {
      __int16 v57 = v19;
      __int16 v59 = v8;
      __int16 v55 = -v13;
      __int16 v58 = v8;
      __int16 v60 = v7;
      __int16 v56 = -v11;
      if (sub_1902E4C0C(&v57, 2, v54, v53))
      {
        sub_1902E4E88((uint64_t)&v57, 2, (uint64_t)v54, (uint64_t)v53, (uint64_t)&v55, (uint64_t)&v51);
        int v21 = 2048;
        *a4 = 2048;
        int v22 = v51 >> 2;
        a4[1] = v51 >> 2;
        int v23 = v52;
LABEL_18:
        int v24 = v23 >> 2;
LABEL_19:
        a4[2] = v24;
        int v25 = sub_1902E6374(v22 * (uint64_t)v22 + v21 * (uint64_t)v21 + v24 * (uint64_t)v24, &v50);
        unint64_t v26 = (__int16)(v25 >> 8) * (uint64_t)*a4;
        *a4 = v26 >> 11;
        unint64_t v27 = (__int16)(v25 >> 8) * (uint64_t)a4[1];
        a4[1] = v27 >> 11;
        unint64_t v28 = (__int16)(v25 >> 8) * (uint64_t)a4[2];
        a4[2] = v28 >> 11;
        uint64_t v29 = (uint64_t)(v26 << 37) >> 48;
        uint64_t v30 = (uint64_t)(v27 << 37) >> 48;
        uint64_t v31 = (int)v29 * (uint64_t)*a1 + (__int16)((int)v27 >> 11) * (uint64_t)a1[1];
        uint64_t v32 = (uint64_t)(v28 << 37) >> 48;
        uint64_t v33 = v31 + (__int16)((int)v28 >> 11) * (uint64_t)a1[2];
        if (a2 < 2)
        {
          LODWORD(v36) = v31 + (__int16)((int)v28 >> 11) * a1[2];
          LODWORD(v35) = v36;
        }
        else
        {
          if (a2 == 2)
          {
            uint64_t v34 = 1;
            uint64_t v35 = v33;
            uint64_t v36 = v33;
          }
          else
          {
            int v39 = 0;
            uint64_t v34 = ((unsigned __int16)a2 - 1) | 1;
            uint64_t v40 = a1 + 4;
            unint64_t v41 = ((unsigned __int16)a2 - 1) & 0xFFFFFFFFFFFFFFFELL;
            uint64_t v35 = v33;
            uint64_t v42 = v33;
            uint64_t v43 = v33;
            uint64_t v44 = v33;
            do
            {
              uint64_t v45 = (int)v29 * (uint64_t)*(v40 - 1)
                  + (int)v30 * (uint64_t)*v40
                  + (__int16)((int)v28 >> 11) * (uint64_t)v40[1];
              uint64_t v46 = (int)v29 * (uint64_t)v40[2]
                  + (int)v30 * (uint64_t)v40[3]
                  + (__int16)((int)v28 >> 11) * (uint64_t)v40[4];
              if (v43 <= v45) {
                uint64_t v43 = (int)v29 * (uint64_t)*(v40 - 1)
              }
                    + (int)v30 * (uint64_t)*v40
                    + (__int16)((int)v28 >> 11) * (uint64_t)v40[1];
              if (v44 <= v46) {
                uint64_t v44 = (int)v29 * (uint64_t)v40[2]
              }
                    + (int)v30 * (uint64_t)v40[3]
                    + (__int16)((int)v28 >> 11) * (uint64_t)v40[4];
              if (v35 >= v45) {
                uint64_t v35 = (int)v29 * (uint64_t)*(v40 - 1)
              }
                    + (int)v30 * (uint64_t)*v40
                    + (__int16)((int)v28 >> 11) * (uint64_t)v40[1];
              if (v42 >= v46) {
                uint64_t v42 = (int)v29 * (uint64_t)v40[2]
              }
                    + (int)v30 * (uint64_t)v40[3]
                    + (__int16)((int)v28 >> 11) * (uint64_t)v40[4];
              LODWORD(v33) = v45 + v33;
              v39 += v46;
              v40 += 6;
              v41 -= 2;
            }
            while (v41);
            if (v43 <= v44) {
              uint64_t v36 = v44;
            }
            else {
              uint64_t v36 = v43;
            }
            if (v35 >= v42) {
              uint64_t v35 = v42;
            }
            LODWORD(v33) = v39 + v33;
            if ((unsigned __int16)a2 - 1 == (((unsigned __int16)a2 - 1) & 0xFFFFFFFFFFFFFFFELL)) {
              goto LABEL_47;
            }
          }
          float v47 = &a1[3 * (int)v34 + 2];
          uint64_t v48 = (unsigned __int16)a2 - v34;
          do
          {
            uint64_t v49 = (int)v29 * (uint64_t)*(v47 - 2) + (int)v30 * (uint64_t)*(v47 - 1) + (int)v32 * (uint64_t)*v47;
            if (v36 <= v49) {
              uint64_t v36 = (int)v29 * (uint64_t)*(v47 - 2) + (int)v30 * (uint64_t)*(v47 - 1) + (int)v32 * (uint64_t)*v47;
            }
            if (v35 >= v49) {
              uint64_t v35 = (int)v29 * (uint64_t)*(v47 - 2) + (int)v30 * (uint64_t)*(v47 - 1) + (int)v32 * (uint64_t)*v47;
            }
            LODWORD(v33) = v49 + v33;
            v47 += 3;
            --v48;
          }
          while (v48);
        }
LABEL_47:
        *a5 = (v36 - v35) >> 11;
        uint64_t v37 = 1;
        a4[3] = -(__int16)(((__int16)((int)v33 >> 11) * sub_1902E40F8(1, a2)) >> 15);
        return v37;
      }
    }
  }
  return 0;
}

uint64_t sub_1902E4C0C(_WORD *a1, int a2, __int16 *a3, __int16 *a4)
{
  if (a2 < 1) {
    return 1;
  }
  uint64_t v29 = v4;
  uint64_t v30 = v5;
  unint64_t v9 = 0;
  __int16 v28 = 0;
  unint64_t v10 = (unsigned __int16)a2;
  __int16 v11 = a1;
  uint64_t v12 = a1;
  while (2)
  {
    unint64_t v27 = v11;
    if (v9)
    {
      unint64_t v13 = v9;
      while (1)
      {
        int64_t v14 = (uint64_t)(__int16)a1[3 * v9 + v13] << 15;
        if (v9 >= 2)
        {
          int v16 = 0;
          uint64_t v17 = 0;
          do
          {
            unint64_t v18 = &a1[3 * v9];
            __int16 v19 = &a1[3 * v13];
            v14 -= 4
                 * (__int16)v18[(unsigned __int16)(v9 - v16 - 1)]
                 * (uint64_t)(__int16)v19[(unsigned __int16)(v9 - v16 - 1)];
            v17 -= 4
                 * (__int16)v18[(unsigned __int16)(v9 - v16 - 2)]
                 * (uint64_t)(__int16)v19[(unsigned __int16)(v9 - v16 - 2)];
            v16 += 2;
          }
          while ((v9 & 0xFFFFFFFE) != v16);
          v14 += v17;
          LOWORD(v15) = v9 & 1;
          if ((v9 & 0xFFFFFFFE) == v9) {
            goto LABEL_13;
          }
        }
        else
        {
          LOWORD(v15) = v9;
        }
        do
        {
          unsigned __int16 v20 = v15 - 1;
          int v15 = (__int16)(v15 - 1);
          v14 -= 4 * (__int16)a1[3 * v9 + v20] * (uint64_t)(__int16)a1[3 * v13 + v20];
        }
        while (v15 > 0);
LABEL_13:
        if (v9 == v13)
        {
          if (v14 < 1) {
            return 0;
          }
          int v21 = sub_1902E6374(v14, &v28);
          a3[v9] = HIWORD(v21);
          a4[v9] = (unsigned __int16)v21 >> 1;
          if (++v13 >= v10) {
            goto LABEL_3;
          }
        }
        else
        {
          a1[3 * v13++ + v9] = 2
                             * (WORD1(v14) * a3[v9]
                              + ((((v14 >> 1) & 0x7FFE) * a3[v9]) >> 15)
                              + ((((int)v14 >> 16) * a4[v9]) >> 15));
          if (v13 >= v10) {
            goto LABEL_3;
          }
        }
      }
    }
    unint64_t v22 = 0;
    do
    {
      while (1)
      {
        unint64_t v23 = (__int16)v12[v22];
        int64_t v24 = v23 << 15;
        if (!v22) {
          break;
        }
        *__int16 v11 = 2
             * ((v23 >> 1) * *a3
              + ((((v24 >> 1) & 0x4000) * *a3) >> 15)
              + (((v23 >> 1) * *a4) >> 15));
        v11 += 3;
        if (++v22 >= v10) {
          goto LABEL_3;
        }
      }
      if ((int)v23 < 1) {
        return 0;
      }
      int v25 = sub_1902E6374(v24, &v28);
      *a3 = HIWORD(v25);
      *a4 = (unsigned __int16)v25 >> 1;
      ++v22;
      v11 += 3;
    }
    while (v22 < v10);
LABEL_3:
    ++v9;
    v12 += 3;
    __int16 v11 = v27 + 1;
    if (v9 != v10) {
      continue;
    }
    return 1;
  }
}

uint64_t sub_1902E4E88(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 >= 1)
  {
    for (uint64_t i = 0; i != (unsigned __int16)a2; ++i)
    {
      if (i)
      {
        if (i >= 2)
        {
          int v10 = 0;
          int v11 = 0;
          int v12 = 0;
          LOWORD(v9) = i - (i & 0xFFFE);
          do
          {
            uint64_t v13 = result + 6 * i;
            v11 += *(__int16 *)(a6 + 2 * (unsigned __int16)(i - v10 - 1))
                 * *(__int16 *)(v13 + 2 * (unsigned __int16)(i - v10 - 1));
            v12 += *(__int16 *)(a6 + 2 * (unsigned __int16)(i - v10 - 2))
                 * *(__int16 *)(v13 + 2 * (unsigned __int16)(i - v10 - 2));
            v10 += 2;
          }
          while ((i & 0xFFFFFFFE) != v10);
          int v7 = v12 + v11;
          if ((i & 0xFFFFFFFE) == i) {
            goto LABEL_4;
          }
        }
        else
        {
          int v7 = 0;
          LOWORD(v9) = i;
        }
        do
        {
          unsigned __int16 v14 = v9 - 1;
          int v9 = (__int16)(v9 - 1);
          v7 += *(__int16 *)(a6 + 2 * v14) * *(__int16 *)(result + 6 * i + 2 * v14);
        }
        while (v9 > 0);
      }
      else
      {
        int v7 = 0;
      }
LABEL_4:
      int v8 = (*(__int16 *)(a5 + 2 * i) << 15) - 4 * v7;
      *(_WORD *)(a6 + 2 * i) = 2
                             * (HIWORD(v8) * *(_WORD *)(a3 + 2 * i)
                              + (((v8 >> 16) * *(__int16 *)(a4 + 2 * i)) >> 15)
                              + ((((v8 >> 1) & 0x7FFE) * *(__int16 *)(a3 + 2 * i)) >> 15));
    }
  }
  if ((((_WORD)a2 - 1) & 0x8000) == 0)
  {
    __int16 v15 = 0;
    unsigned __int16 v16 = a2 - 1;
    uint64_t v17 = result + 2 * (unsigned __int16)(a2 - 1);
    uint64_t v18 = v17 + 6;
    unsigned __int16 v19 = -1;
    __int16 v20 = a2;
    do
    {
      int v22 = *(__int16 *)(a6 + 2 * v16) << 15;
      if (a2 > v20)
      {
        uint64_t v23 = v20;
        if (v15 == 1) {
          goto LABEL_21;
        }
        int v24 = 0;
        uint64_t v25 = (v19 + 1) & 0x1FFFE;
        unint64_t v26 = (__int16 *)(v18 + 6 * v20);
        unint64_t v27 = (__int16 *)(a6 + 2 + 2 * v20);
        uint64_t v28 = (unsigned __int16)(v15 - 1) + 1;
        uint64_t v23 = (v28 & 0x1FFFE) + v20;
        do
        {
          v22 -= 4 * *(v26 - 3) * *(v27 - 1);
          v24 -= 4 * *v26 * *v27;
          v26 += 6;
          v27 += 2;
          v25 -= 2;
        }
        while (v25);
        v22 += v24;
        if (v28 != (v28 & 0x1FFFE))
        {
LABEL_21:
          uint64_t v29 = (__int16 *)(v17 + 6 * (int)v23);
          do
          {
            int v30 = *v29;
            v29 += 3;
            v22 -= 4 * v30 * *(__int16 *)(a6 + 2 * v23++);
          }
          while ((unsigned __int16)v23 != (unsigned __int16)a2);
        }
      }
      uint64_t result = 2 * v16;
      int v21 = (__int16)v16;
      *(_WORD *)(a6 + result) = 2
                              * (HIWORD(v22) * *(_WORD *)(a3 + result)
                               + ((((v22 >> 1) & 0x7FFE) * *(__int16 *)(a3 + result)) >> 15)
                               + (((v22 >> 16) * *(__int16 *)(a4 + result)) >> 15));
      --v16;
      --v20;
      ++v15;
      ++v19;
      v18 -= 2;
      v17 -= 2;
    }
    while (v21 > 0);
  }
  return result;
}

uint64_t sub_1902E50F0(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, int a6)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 400) = a3;
  uint64_t result = sub_1902E5138(a1, a5, a6, 1);
  *(_WORD *)(a1 + 396) = 0;
  *(_WORD *)(a1 + 398) = a4;
  *(_DWORD *)(a1 + 504) = 0;
  return result;
}

uint64_t sub_1902E5138(uint64_t result, uint64_t a2, int a3, int a4)
{
  __int16 v4 = a3;
  uint64_t v5 = result;
  if (a4)
  {
    *(_DWORD *)(result + 8) = 2147450879;
    *(_WORD *)(result + 12) = 0x7FFF;
    *(_DWORD *)(result + 14) = 2147450879;
    *(_WORD *)(result + 18) = 0x7FFF;
    *(_DWORD *)(result + 20) = 2147450879;
    *(_WORD *)(result + 24) = 0x7FFF;
    *(_DWORD *)(result + 26) = 2147450879;
    *(_WORD *)(result + 30) = 0x7FFF;
    *(_WORD *)(result + 36) = 0x7FFF;
    *(_DWORD *)(result + 32) = 2147450879;
    *(_WORD *)(result + 42) = 0x7FFF;
    *(_DWORD *)(result + 38) = 2147450879;
    *(_WORD *)(result + 48) = 0x7FFF;
    *(_DWORD *)(result + 44) = 2147450879;
    *(_WORD *)(result + 54) = 0x7FFF;
    *(_DWORD *)(result + 50) = 2147450879;
    *(_WORD *)(result + 60) = 0x7FFF;
    *(_DWORD *)(result + 56) = 2147450879;
    *(_WORD *)(result + 66) = 0x7FFF;
    *(_DWORD *)(result + 62) = 2147450879;
    *(_WORD *)(result + 72) = 0x7FFF;
    *(_DWORD *)(result + 68) = 2147450879;
    *(_WORD *)(result + 78) = 0x7FFF;
    *(_DWORD *)(result + 74) = 2147450879;
    *(_WORD *)(result + 84) = 0x7FFF;
    *(_DWORD *)(result + 80) = 2147450879;
    *(_WORD *)(result + 90) = 0x7FFF;
    *(_DWORD *)(result + 86) = 2147450879;
    *(_WORD *)(result + 96) = 0x7FFF;
    *(_DWORD *)(result + 92) = 2147450879;
    *(_WORD *)(result + 102) = 0x7FFF;
    *(_DWORD *)(result + 98) = 2147450879;
    *(_WORD *)(result + 108) = 0x7FFF;
    *(_DWORD *)(result + 104) = 2147450879;
    *(_WORD *)(result + 114) = 0x7FFF;
    *(_DWORD *)(result + 110) = 2147450879;
    *(_WORD *)(result + 120) = 0x7FFF;
    *(_DWORD *)(result + 116) = 2147450879;
    *(_WORD *)(result + 126) = 0x7FFF;
    *(_DWORD *)(result + 122) = 2147450879;
    *(_WORD *)(result + 132) = 0x7FFF;
    *(_DWORD *)(result + 128) = 2147450879;
    *(_WORD *)(result + 138) = 0x7FFF;
    *(_DWORD *)(result + 134) = 2147450879;
    *(_WORD *)(result + 144) = 0x7FFF;
    *(_DWORD *)(result + 140) = 2147450879;
    *(_WORD *)(result + 150) = 0x7FFF;
    *(_DWORD *)(result + 146) = 2147450879;
    *(_WORD *)(result + 156) = 0x7FFF;
    *(_DWORD *)(result + 152) = 2147450879;
    *(_WORD *)(result + 162) = 0x7FFF;
    *(_DWORD *)(result + 158) = 2147450879;
    *(_WORD *)(result + 168) = 0x7FFF;
    *(_DWORD *)(result + 164) = 2147450879;
    *(_WORD *)(result + 174) = 0x7FFF;
    *(_DWORD *)(result + 170) = 2147450879;
    *(_WORD *)(result + 180) = 0x7FFF;
    *(_DWORD *)(result + 176) = 2147450879;
    *(_WORD *)(result + 186) = 0x7FFF;
    *(_DWORD *)(result + 182) = 2147450879;
    *(_WORD *)(result + 192) = 0x7FFF;
    *(_DWORD *)(result + 188) = 2147450879;
    *(_WORD *)(result + 198) = 0x7FFF;
    *(_DWORD *)(result + 194) = 2147450879;
    *(_DWORD *)(result + 200) = 2147450879;
    *(_WORD *)(result + 204) = 0x7FFF;
    *(_WORD *)(result + 210) = 0x7FFF;
    *(_DWORD *)(result + 206) = 2147450879;
    *(_WORD *)(result + 216) = 0x7FFF;
    *(_DWORD *)(result + 212) = 2147450879;
    *(_WORD *)(result + 222) = 0x7FFF;
    *(_DWORD *)(result + 218) = 2147450879;
    *(_WORD *)(result + 228) = 0x7FFF;
    *(_DWORD *)(result + 224) = 2147450879;
    *(_WORD *)(result + 234) = 0x7FFF;
    *(_DWORD *)(result + 230) = 2147450879;
    *(_WORD *)(result + 240) = 0x7FFF;
    *(_DWORD *)(result + 236) = 2147450879;
    *(_WORD *)(result + 246) = 0x7FFF;
    *(_DWORD *)(result + 242) = 2147450879;
    *(_WORD *)(result + 252) = 0x7FFF;
    *(_DWORD *)(result + 248) = 2147450879;
    *(_WORD *)(result + 258) = 0x7FFF;
    *(_DWORD *)(result + 254) = 2147450879;
    *(_WORD *)(result + 264) = 0x7FFF;
    *(_DWORD *)(result + 260) = 2147450879;
    *(_WORD *)(result + 270) = 0x7FFF;
    *(_DWORD *)(result + 266) = 2147450879;
    *(_WORD *)(result + 276) = 0x7FFF;
    *(_DWORD *)(result + 272) = 2147450879;
    *(_WORD *)(result + 282) = 0x7FFF;
    *(_DWORD *)(result + 278) = 2147450879;
    *(_WORD *)(result + 288) = 0x7FFF;
    *(_DWORD *)(result + 284) = 2147450879;
    *(_WORD *)(result + 294) = 0x7FFF;
    *(_DWORD *)(result + 290) = 2147450879;
    *(_WORD *)(result + 300) = 0x7FFF;
    *(_DWORD *)(result + 296) = 2147450879;
    *(_WORD *)(result + 412) = 0x7FFF;
    *(_DWORD *)(result + 408) = 2147450879;
    *(_WORD *)(result + 306) = 0x7FFF;
    *(_DWORD *)(result + 302) = 2147450879;
    *(_WORD *)(result + 418) = 0x7FFF;
    *(_DWORD *)(result + 414) = 2147450879;
    *(_WORD *)(result + 312) = 0x7FFF;
    *(_DWORD *)(result + 308) = 2147450879;
    *(_WORD *)(result + 424) = 0x7FFF;
    *(_DWORD *)(result + 420) = 2147450879;
    *(_WORD *)(result + 318) = 0x7FFF;
    *(_DWORD *)(result + 314) = 2147450879;
    *(_WORD *)(result + 430) = 0x7FFF;
    *(_DWORD *)(result + 426) = 2147450879;
    *(_WORD *)(result + 324) = 0x7FFF;
    *(_DWORD *)(result + 320) = 2147450879;
    *(_WORD *)(result + 436) = 0x7FFF;
    *(_DWORD *)(result + 432) = 2147450879;
    *(_WORD *)(result + 330) = 0x7FFF;
    *(_DWORD *)(result + 326) = 2147450879;
    *(_WORD *)(result + 442) = 0x7FFF;
    *(_DWORD *)(result + 438) = 2147450879;
    *(_WORD *)(result + 336) = 0x7FFF;
    *(_DWORD *)(result + 332) = 2147450879;
    *(_WORD *)(result + 448) = 0x7FFF;
    *(_DWORD *)(result + 444) = 2147450879;
    *(_WORD *)(result + 342) = 0x7FFF;
    *(_DWORD *)(result + 338) = 2147450879;
    *(_WORD *)(result + 454) = 0x7FFF;
    *(_DWORD *)(result + 450) = 2147450879;
    *(_WORD *)(result + 348) = 0x7FFF;
    *(_DWORD *)(result + 344) = 2147450879;
    *(_WORD *)(result + 460) = 0x7FFF;
    *(_DWORD *)(result + 456) = 2147450879;
    *(_WORD *)(result + 354) = 0x7FFF;
    *(_DWORD *)(result + 350) = 2147450879;
    *(_WORD *)(result + 466) = 0x7FFF;
    *(_DWORD *)(result + 462) = 2147450879;
    *(_WORD *)(result + 360) = 0x7FFF;
    *(_DWORD *)(result + 356) = 2147450879;
    *(_WORD *)(result + 472) = 0x7FFF;
    *(_DWORD *)(result + 468) = 2147450879;
    *(_WORD *)(result + 366) = 0x7FFF;
    *(_DWORD *)(result + 362) = 2147450879;
    *(_WORD *)(result + 478) = 0x7FFF;
    *(_DWORD *)(result + 474) = 2147450879;
    *(_WORD *)(result + 372) = 0x7FFF;
    *(_DWORD *)(result + 368) = 2147450879;
    *(_WORD *)(result + 484) = 0x7FFF;
    *(_DWORD *)(result + 480) = 2147450879;
    *(_WORD *)(result + 378) = 0x7FFF;
    *(_DWORD *)(result + 374) = 2147450879;
    *(_WORD *)(result + 490) = 0x7FFF;
    *(_DWORD *)(result + 486) = 2147450879;
    *(_WORD *)(result + 384) = 0x7FFF;
    *(_DWORD *)(result + 380) = 2147450879;
    *(_WORD *)(result + 496) = 0x7FFF;
    *(_DWORD *)(result + 492) = 2147450879;
    *(_WORD *)(result + 390) = 0x7FFF;
    *(_DWORD *)(result + 386) = 2147450879;
    *(_WORD *)(result + 502) = 0x7FFF;
    *(_DWORD *)(result + 498) = 2147450879;
  }
  unsigned int v6 = a3 << 16;
  if (a3 << 16 >= 0x10000)
  {
    *(_WORD *)(result + 392) = 1;
    uint64_t result = sub_1902E641C(a2, 16, 1, result + 296);
    if (v6 >> 18) {
      __int16 v7 = 2;
    }
    else {
      __int16 v7 = v4 - 1;
    }
    *(_WORD *)(v5 + 394) = v7;
  }
  else
  {
    *(_WORD *)(result + 392) = 0;
    *(_WORD *)(result + 394) = 0;
  }
  return result;
}

uint64_t sub_1902E545C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, __int16 a6, int a7, int a8, uint64_t a9, _DWORD *a10, uint64_t a11)
{
  __int16 v11 = 0;
  __int16 v81 = 0;
  if (*((unsigned __int16 *)a4 + 199) <= 1u)
  {
    if (*((unsigned __int16 *)a4 + 197) > 2u) {
      return 0;
    }
    unsigned __int16 v83 = 0;
    int v82 = 0;
    if (((a6 - 1) & 0x8000) == 0)
    {
      __int16 v78 = 0;
      unsigned __int16 v16 = a6 - 1;
      float v79 = (__int16 *)(a4 + 51);
      uint64_t v17 = (__int16 *)(a4 + 63);
      unint64_t v76 = (__int16 *)a4 + 198;
      double v77 = (__int16 *)(a4 + 25);
      uint64_t v75 = (uint64_t)(a4 + 37);
      int v73 = (const __int16 *)(a4 + 43);
      uint64_t v74 = (uint64_t)a4 + 300;
      while (1)
      {
        uint64_t v19 = *((__int16 *)a4 + 199);
        LOWORD(v20) = *((_WORD *)a4 + 197);
        if (*a4) {
          int v21 = *(char **)(*a4 + 8 * v19);
        }
        else {
          int v21 = (char *)&unk_190602FB4 + 90 * *((__int16 *)a4 + 199);
        }
        int v22 = &v21[30 * *((__int16 *)a4 + 197)];
        if (!a7) {
          LODWORD(v19) = 0;
        }
        if (!a8) {
          LOWORD(v20) = 0;
        }
        uint64_t v23 = a4[50];
        if (v23)
        {
          int v24 = *(char **)(v23 + 8 * (int)v19);
          int v20 = (__int16)v20;
        }
        else
        {
          int v20 = (__int16)v20;
          int v24 = (char *)&unk_190603068 + 90 * (int)v19;
        }
        uint64_t v25 = &v24[30 * v20];
        __int16 v26 = *(_WORD *)v22;
        __int16 v27 = *((_WORD *)v22 + 2);
        *(_OWORD *)double v80 = *(_OWORD *)v25;
        *(_OWORD *)&v80[7] = *(_OWORD *)(v25 + 14);
        v80[0] = v26;
        v80[2] = v27;
        int v28 = sub_1902E5A04((_WORD *)(a5 + 6 * v16), v80, (__int16 *)a4 + 4, v79, (__int16 *)&v82, (__int16 *)a4 + 252, &v81, 0, 0);
        LODWORD(v29) = *((__int16 *)a4 + 199);
        if (v28 != 2) {
          goto LABEL_27;
        }
        if ((int)v29 > 0) {
          break;
        }
        int v33 = *((__int16 *)v22 + 12);
        if (v33 < 0 || *v17 < v33) {
          goto LABEL_27;
        }
        *((_WORD *)a4 + 199) = v29 + 1;
        if ((v29 & 0x80000000) == 0)
        {
          LOWORD(v29) = 1;
          int v30 = *((__int16 *)v22 + 13);
          if (v30 < 0)
          {
LABEL_27:
            int v31 = *((__int16 *)a4 + 197);
            uint64_t v32 = *a4;
            uint64_t v29 = (__int16)v29;
            if (*a4) {
              goto LABEL_28;
            }
            goto LABEL_31;
          }
LABEL_20:
          if (*v17 <= v30)
          {
            LOWORD(v29) = v29 - 1;
            *((_WORD *)a4 + 199) = v29;
            int v31 = *((__int16 *)a4 + 197);
            uint64_t v32 = *a4;
            uint64_t v29 = (__int16)v29;
            if (*a4) {
              goto LABEL_28;
            }
            goto LABEL_31;
          }
          goto LABEL_27;
        }
        int v31 = *((__int16 *)a4 + 197);
        uint64_t v32 = *a4;
        uint64_t v29 = (__int16)(v29 + 1);
        if (*a4)
        {
LABEL_28:
          uint64_t v34 = (__int16 *)(*(void *)(v32 + 8 * v29) + 30 * v31);
          if (v81 != 1) {
            goto LABEL_6;
          }
          goto LABEL_32;
        }
LABEL_31:
        uint64_t v34 = (__int16 *)((char *)&unk_190602FB4 + 90 * (int)v29 + 30 * v31);
        if (v81 != 1) {
          goto LABEL_6;
        }
LABEL_32:
        if (sub_1902E5A04((_WORD *)(a5 + 6 * v16), v34, (__int16 *)a4 + 4, v77, (__int16 *)&v82, v76, &v81, 1, a11) == 2)
        {
          int v35 = *((__int16 *)a4 + 196);
          if (v35 < 16) {
            __int16 v36 = v35 + 1;
          }
          else {
            __int16 v36 = 16;
          }
          *((_WORD *)a4 + 196) = v36;
          sub_1902E641C((uint64_t)&v82, 16, 1, v75);
          if (*((__int16 *)a4 + 196) < 2 || v34[11] <= 1)
          {
            *(_DWORD *)a9 = v82;
            *(_WORD *)(a9 + 4) = v83;
LABEL_59:
            ++v78;
            if (*((__int16 *)a4 + 196) >= v34[10])
            {
              int v70 = *((__int16 *)a4 + 197);
              if (v70 <= 1)
              {
                *((_WORD *)a4 + 196) = 0;
                *((_WORD *)a4 + 197) = v70 + 1;
              }
            }
            goto LABEL_6;
          }
          unsigned int v37 = *((unsigned __int16 *)a4 + 196);
          unsigned int v38 = (unsigned __int16)v34[11];
          unsigned __int16 v83 = 0;
          int v82 = 0;
          if (v37 >= v38)
          {
            int v39 = sub_1902E40F8(1, (__int16)v38);
            __int16 v40 = v82;
            __int16 v41 = HIWORD(v82);
            __int16 v42 = v83;
            if (v34[11] >= 1)
            {
              unint64_t v45 = (unsigned __int16)v34[11];
              if (v45 >= 0x10)
              {
                unint64_t v46 = v45 & 0x7FF0;
                int16x8_t v59 = 0uLL;
                int16x8_t v60 = (int16x8_t)(unsigned __int16)v82;
                int16x8_t v61 = (int16x8_t)HIWORD(v82);
                int16x8_t v62 = (int16x8_t)v83;
                uint64_t v63 = (unsigned __int16)v45 & 0xFFF0;
                int v64 = v73;
                int16x8_t v65 = 0uLL;
                int16x8_t v66 = 0uLL;
                do
                {
                  int v67 = v64 - 24;
                  int16x8x3_t v85 = vld3q_s16(v67);
                  int16x8x3_t v87 = vld3q_s16(v64);
                  int16x8_t v60 = vaddq_s16(v60, v85.val[0]);
                  int16x8_t v59 = vaddq_s16(v59, v87.val[0]);
                  int16x8_t v61 = vaddq_s16(v61, v85.val[1]);
                  int16x8_t v65 = vaddq_s16(v65, v87.val[1]);
                  int16x8_t v62 = vaddq_s16(v62, v85.val[2]);
                  int16x8_t v66 = vaddq_s16(v66, v87.val[2]);
                  v64 += 48;
                  v63 -= 16;
                }
                while (v63);
                __int16 v42 = vaddvq_s16(vaddq_s16(v66, v62));
                __int16 v41 = vaddvq_s16(vaddq_s16(v65, v61));
                __int16 v40 = vaddvq_s16(vaddq_s16(v59, v60));
                if (v46 == v45) {
                  goto LABEL_57;
                }
              }
              else
              {
                unint64_t v46 = 0;
              }
              int v68 = (__int16 *)(v74 + 6 * v46);
              do
              {
                v40 += *(v68 - 2);
                v41 += *(v68 - 1);
                __int16 v69 = *v68;
                v68 += 3;
                v42 += v69;
                ++v46;
              }
              while (v46 < v45);
              goto LABEL_57;
            }
          }
          else
          {
            int v39 = sub_1902E40F8(1, (__int16)v37);
            __int16 v40 = v82;
            __int16 v41 = HIWORD(v82);
            __int16 v42 = v83;
            if (*((__int16 *)a4 + 196) >= 1)
            {
              uint64_t v43 = *((unsigned __int16 *)a4 + 196);
              if (v43 < 0x10)
              {
                uint64_t v44 = 0;
                goto LABEL_49;
              }
              uint64_t v44 = v43 & 0x7FF0;
              int16x8_t v47 = 0uLL;
              int16x8_t v48 = (int16x8_t)(unsigned __int16)v82;
              int16x8_t v49 = (int16x8_t)HIWORD(v82);
              int16x8_t v50 = (int16x8_t)v83;
              uint64_t v51 = (unsigned __int16)v43 & 0xFFF0;
              __int16 v52 = v73;
              int16x8_t v53 = 0uLL;
              int16x8_t v54 = 0uLL;
              do
              {
                __int16 v55 = v52 - 24;
                int16x8x3_t v84 = vld3q_s16(v55);
                int16x8x3_t v86 = vld3q_s16(v52);
                int16x8_t v48 = vaddq_s16(v48, v84.val[0]);
                int16x8_t v47 = vaddq_s16(v47, v86.val[0]);
                int16x8_t v49 = vaddq_s16(v49, v84.val[1]);
                int16x8_t v53 = vaddq_s16(v53, v86.val[1]);
                int16x8_t v50 = vaddq_s16(v50, v84.val[2]);
                int16x8_t v54 = vaddq_s16(v54, v86.val[2]);
                v52 += 48;
                v51 -= 16;
              }
              while (v51);
              __int16 v42 = vaddvq_s16(vaddq_s16(v54, v50));
              __int16 v41 = vaddvq_s16(vaddq_s16(v53, v49));
              __int16 v40 = vaddvq_s16(vaddq_s16(v47, v48));
              if (v44 != v43)
              {
LABEL_49:
                __int16 v56 = (__int16 *)(v74 + 6 * v44);
                uint64_t v57 = v43 - v44;
                do
                {
                  v40 += *(v56 - 2);
                  v41 += *(v56 - 1);
                  __int16 v58 = *v56;
                  v56 += 3;
                  v42 += v58;
                  --v57;
                }
                while (v57);
              }
LABEL_57:
              LOWORD(v82) = v40;
              HIWORD(v82) = v41;
              unsigned __int16 v83 = v42;
            }
          }
          *(_WORD *)a9 = (v40 * v39) >> 15;
          *(_WORD *)(a9 + 2) = (v41 * v39) >> 15;
          *(_WORD *)(a9 + 4) = (v42 * v39) >> 15;
          goto LABEL_59;
        }
LABEL_6:
        int v18 = (__int16)v16--;
        if (v18 < 1) {
          goto LABEL_63;
        }
      }
      int v30 = *((__int16 *)v22 + 13);
      if (v30 < 0) {
        goto LABEL_27;
      }
      goto LABEL_20;
    }
    __int16 v78 = 0;
LABEL_63:
    int v71 = *((__int16 *)a4 + 197);
    if (*((_WORD *)a4 + 196)) {
      ++v71;
    }
    *a10 = v71;
    return v78;
  }
  return v11;
}

uint64_t sub_1902E5A04(_WORD *a1, __int16 *a2, __int16 *a3, __int16 *a4, __int16 *a5, __int16 *a6, _WORD *a7, int a8, uint64_t a9)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  if (*a2 < 1) {
    return 0;
  }
  int v12 = a4;
  *a7 = 0;
  if (a8)
  {
    unsigned __int16 v16 = a2 + 14;
    if (a2[14])
    {
      if (a8 == 1) {
        goto LABEL_21;
      }
      uint64_t v17 = a4;
      int v18 = 0;
      int v19 = 0;
      int v20 = 0;
      goto LABEL_7;
    }
    if (a8 == 1) {
      goto LABEL_21;
    }
    uint64_t v17 = a4;
    int v18 = 0;
    int v19 = 0;
    int v20 = 0;
  }
  else
  {
    uint64_t v17 = a4;
    int v18 = sub_1902E42B8((__int16)(*a3 - *a1));
    int v19 = sub_1902E42B8((__int16)(a3[1] - a1[1]));
    int v20 = sub_1902E42B8((__int16)(a3[2] - a1[2]));
    unsigned __int16 v16 = a2 + 14;
    if (a2[14])
    {
LABEL_7:
      if (v19 + v18 + v20 < a2[2]) {
        return 0;
      }
      goto LABEL_18;
    }
  }
  int v21 = a2[2];
  if (v18 < v21 || v19 < v21 || v20 < v21) {
    return 0;
  }
LABEL_18:
  if (!a8)
  {
    sub_1902E641C((uint64_t)a1, *a2, 1, (uint64_t)a3);
    *a7 = 1;
  }
  int v12 = v17;
LABEL_21:
  signed __int16 v24 = *a2;
  uint64_t v25 = &a3[3 * *a2];
  int v27 = (unsigned __int16)*(v25 - 3);
  __int16 v26 = v25 - 3;
  if (v27 == 0x7FFF && v26[1] == 0x7FFF && v26[2] == 0x7FFF) {
    return 0;
  }
  __int16 v94 = 0;
  int v93 = 0;
  int v91 = 0;
  __int16 v92 = 0;
  int v89 = 0;
  unsigned __int16 v90 = 0;
  int v87 = 0;
  __int16 v88 = 0;
  sub_1902E64B4(a3, v24, (__int16 *)&v93, (__int16 *)&v91, &v89, &v87);
  unsigned int v29 = (unsigned __int16)*a2;
  if (*a2 >= 1)
  {
    uint64_t v30 = (unsigned __int16)*a2;
    __int16 v31 = v89;
    __int16 v32 = HIWORD(v89);
    unsigned __int16 v33 = v90;
    if (v29 >= 8)
    {
      uint64_t v34 = v30 & 0x7FF8;
      int16x8_t v35 = vdupq_n_s16((unsigned __int16)v89);
      int16x8_t v36 = vdupq_n_s16(HIWORD(v89));
      int16x8_t v37 = vdupq_n_s16(v90);
      uint64_t v38 = (unsigned __int16)v30 & 0xFFF8;
      int v39 = a3;
      do
      {
        int16x8x3_t v110 = vld3q_s16(v39);
        v112.val[0] = vsubq_s16(v110.val[0], v35);
        v112.val[1] = vsubq_s16(v110.val[1], v36);
        v112.val[2] = vsubq_s16(v110.val[2], v37);
        vst3q_s16(v39, v112);
        v39 += 24;
        v38 -= 8;
      }
      while (v38);
      if (v34 == v30) {
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v34 = 0;
    }
    uint64_t v40 = v30 - v34;
    __int16 v41 = &a3[3 * v34 + 2];
    do
    {
      *(v41 - 2) -= v31;
      *(v41 - 1) -= v32;
      *v41 -= v33;
      v41 += 3;
      --v40;
    }
    while (v40);
LABEL_33:
    unsigned int v29 = (unsigned __int16)*a2;
  }
  int v42 = (__int16)v29;
  int v43 = sub_1902E42D4((uint64_t)a3, (__int16)v29, (__int16 *)&v105, &v103);
  long long v107 = v105;
  __int16 v108 = v106;
  if (v43 == 4 && sub_1902E4C0C(&v107, 3, (__int16 *)&v99, (__int16 *)&v97))
  {
    int16x8x3_t v85 = v12;
    sub_1902E4E88((uint64_t)&v107, 3, (uint64_t)&v99, (uint64_t)&v97, (uint64_t)&v103, (uint64_t)&v101);
    int v44 = (__int16)v101 >> 2;
    *a5 = v44;
    int v45 = SHIWORD(v101) >> 2;
    a5[1] = v45;
    int v46 = v102 >> 2;
    a5[2] = v102 >> 2;
    unint64_t v47 = (*a3 - v44) * (uint64_t)(*a3 - v44)
        + (a3[1] - v45) * (uint64_t)(a3[1] - v45)
        + (a3[2] - v46) * (uint64_t)(a3[2] - v46);
    __int16 v48 = sub_1902E612C(v47);
    __int16 v49 = v48;
    if ((__int16)v29 < 2)
    {
      __int16 v52 = v48;
    }
    else
    {
      uint64_t v50 = v29 - 1;
      uint64_t v51 = a3 + 5;
      __int16 v52 = v48;
      do
      {
        int v53 = *(v51 - 2) - *a5;
        int v54 = *(v51 - 1) - a5[1];
        uint64_t v55 = v53 * (uint64_t)v53 + v54 * (uint64_t)v54;
        int v56 = *v51 - a5[2];
        unint64_t v57 = v55 + v56 * (uint64_t)v56;
        v47 += v57;
        int v58 = sub_1902E612C(v57);
        if (v58 > v52) {
          __int16 v52 = v58;
        }
        if (v58 < v49) {
          __int16 v49 = v58;
        }
        v51 += 3;
        --v50;
      }
      while (v50);
    }
    int v60 = 1;
    unsigned int v62 = sub_1902E40F8(1, v42);
    unsigned int v63 = sub_1902E612C((__int16)(((v62 >> 3) & 1) + (v62 >> 4)) * (((v47 >> 6) & 1) + (v47 >> 7)));
    char v61 = 0;
    *a6 = ((v63 >> 1) & 1) + (v63 >> 2);
    __int16 v59 = v52 - v49;
    int v12 = v85;
  }
  else
  {
    __int16 v59 = 0;
    int v60 = 0;
    a5[2] = 0;
    *(_DWORD *)a5 = 0;
    char v61 = 1;
    *a6 = 0;
  }
  *a5 += v89;
  a5[1] += HIWORD(v89);
  a5[2] += v90;
  sub_1902E641C((uint64_t)a5, a2[1], 1, (uint64_t)v12);
  if (v61) {
    goto LABEL_82;
  }
  int v64 = *a6;
  if (a9)
  {
    *(_DWORD *)(a9 + 12) = *(_DWORD *)(a2 + 7);
    *(_WORD *)(a9 + 16) = a2[9];
    *(_WORD *)(a9 + 18) = v59;
  }
  if (!v60 || a2[8] >= v64 || a2[7] <= v64 || a2[9] * (uint64_t)v64 <= (uint64_t)v59 << 11) {
    goto LABEL_82;
  }
  __int16 v104 = 0;
  int v103 = 0;
  int v100 = 0;
  int v101 = 0;
  __int16 v102 = 0;
  *(void *)&long long v107 = 0;
  int v99 = 0;
  int v97 = 0;
  __int16 v98 = 0;
  int v95 = 0;
  __int16 v96 = 0;
  sub_1902E64B4(v12, a2[1], (__int16 *)&v99, (__int16 *)&v97, &v95, &v101);
  if (a9)
  {
    *(_WORD *)(a9 + 2) = a2[1];
    *(_DWORD *)(a9 + 20) = v101;
    *(_WORD *)(a9 + 24) = v102;
    __int16 v65 = a2[5];
    *(_WORD *)(a9 + 8) = v65;
  }
  else
  {
    __int16 v65 = a2[5];
  }
  if ((__int16)v101 >= v65 || SHIWORD(v101) >= v65 || v102 >= v65)
  {
    if (*v16 < 2) {
      goto LABEL_82;
    }
    int v69 = v65;
    BOOL v70 = (__int16)v101 < v65;
    char v71 = v102 < v69 || v70;
    if (v102 >= v69) {
      BOOL v70 = 0;
    }
    char v72 = SHIWORD(v101) < v69 ? v71 : 0;
    if ((v72 & 1) == 0 && !v70)
    {
LABEL_82:
      uint64_t result = 0;
      goto LABEL_83;
    }
  }
  sub_1902E64B4(a3, *a2, (__int16 *)&v99, (__int16 *)&v97, &v95, &v103);
  int v66 = (__int16)v103;
  if (a9)
  {
    *(_WORD *)a9 = *a2;
    *(_DWORD *)(a9 + 26) = v103;
    *(_WORD *)(a9 + 30) = v104;
    *(_WORD *)(a9 + 6) = a2[4];
  }
  uint64_t result = 0;
  int v67 = a2[3];
  if (v66 > v67 && SHIWORD(v103) > v67 && v104 > v67)
  {
    if ((__int16)(HIWORD(v103) + v66 + v104) >= a2[4])
    {
      int v68 = sub_1902E47D8(a3, *a2, (__int16 *)&v105, (__int16 *)&v107, (_WORD *)&v100 + 1);
      if (a9)
      {
        *(_WORD *)(a9 + 10) = a2[6];
        *(_WORD *)(a9 + 32) = HIWORD(v100);
      }
      if (v68 && SHIWORD(v100) > a2[6])
      {
        uint64_t result = 2;
        goto LABEL_83;
      }
    }
    goto LABEL_82;
  }
LABEL_83:
  if (*a2 < 1) {
    return result;
  }
  uint64_t v73 = (unsigned __int16)*a2;
  __int16 v74 = v89;
  __int16 v75 = HIWORD(v89);
  unsigned __int16 v76 = v90;
  if (v73 < 8)
  {
    uint64_t v77 = 0;
LABEL_89:
    uint64_t v83 = v73 - v77;
    int16x8x3_t v84 = &a3[3 * v77 + 2];
    do
    {
      *(v84 - 2) += v74;
      *(v84 - 1) += v75;
      *v84 += v76;
      v84 += 3;
      --v83;
    }
    while (v83);
    return result;
  }
  uint64_t v77 = v73 & 0x7FF8;
  int16x8_t v78 = vdupq_n_s16((unsigned __int16)v89);
  int16x8_t v79 = vdupq_n_s16(HIWORD(v89));
  int16x8_t v80 = vdupq_n_s16(v90);
  uint64_t v81 = (unsigned __int16)v73 & 0xFFF8;
  int v82 = a3;
  do
  {
    int16x8x3_t v111 = vld3q_s16(v82);
    v113.val[0] = vaddq_s16(v111.val[0], v78);
    v113.val[1] = vaddq_s16(v111.val[1], v79);
    v113.val[2] = vaddq_s16(v111.val[2], v80);
    vst3q_s16(v82, v113);
    v82 += 24;
    v81 -= 8;
  }
  while (v81);
  if (v77 != v73) {
    goto LABEL_89;
  }
  return result;
}

uint64_t sub_1902E612C(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0) {
    return 0;
  }
  BOOL v1 = a1 >> 30 != 0;
  unint64_t v2 = ((a1 >> 28) & 0x3FFFFFFFFLL) + 4 * ((a1 >> 30) - v1);
  unint64_t v3 = (4 * v1) | 1;
  if (v3 <= v2)
  {
    unint64_t v4 = (8 * (a1 >> 30 != 0)) | 4;
  }
  else
  {
    unint64_t v3 = 0;
    unint64_t v4 = 8 * (a1 >> 30 != 0);
  }
  unint64_t v5 = v2 - v3;
  unint64_t v6 = v4 >> 2;
  unint64_t v7 = ((a1 >> 26) & 0x3FFFFFFFFLL) + 4 * v5;
  uint64_t v8 = v4 | 1;
  BOOL v9 = (v4 | 1) > v7;
  if ((v4 | 1) > v7) {
    uint64_t v8 = 0;
  }
  uint64_t v10 = 2 * v4;
  if (!v9) {
    uint64_t v10 = (8 * (v6 & 3)) | 4;
  }
  unint64_t v11 = ((a1 >> 24) & 0x3FFFFFFFFLL) + 4 * (v7 - v8);
  uint64_t v12 = v10 | 1;
  BOOL v13 = (v10 | 1uLL) > v11;
  if ((v10 | 1uLL) > v11) {
    uint64_t v12 = 0;
  }
  uint64_t v14 = 2 * v10;
  if (!v13) {
    v14 |= 4uLL;
  }
  unint64_t v15 = ((a1 >> 22) & 0x3FFFFFFFFLL) + 4 * (v11 - v12);
  uint64_t v16 = v14 | 1;
  BOOL v17 = (v14 | 1uLL) > v15;
  if ((v14 | 1uLL) > v15) {
    uint64_t v16 = 0;
  }
  uint64_t v18 = 2 * v14;
  if (!v17) {
    v18 |= 4uLL;
  }
  unint64_t v19 = ((a1 >> 20) & 0x3FFFFFFFFLL) + 4 * (v15 - v16);
  uint64_t v20 = v18 | 1;
  BOOL v21 = (v18 | 1uLL) > v19;
  if ((v18 | 1uLL) > v19) {
    uint64_t v20 = 0;
  }
  uint64_t v22 = 2 * v18;
  if (!v21) {
    v22 |= 4uLL;
  }
  unint64_t v23 = ((a1 >> 18) & 0x3FFFFFFFFLL) + 4 * (v19 - v20);
  uint64_t v24 = v22 | 1;
  BOOL v25 = (v22 | 1uLL) > v23;
  if ((v22 | 1uLL) > v23) {
    uint64_t v24 = 0;
  }
  uint64_t v26 = 2 * v22;
  if (!v25) {
    v26 |= 4uLL;
  }
  unint64_t v27 = ((a1 >> 16) & 0x3FFFFFFFFLL) + 4 * (v23 - v24);
  uint64_t v28 = v26 | 1;
  BOOL v29 = (v26 | 1uLL) > v27;
  if ((v26 | 1uLL) > v27) {
    uint64_t v28 = 0;
  }
  uint64_t v30 = 2 * v26;
  if (!v29) {
    v30 |= 4uLL;
  }
  unint64_t v31 = ((a1 >> 14) & 0x3FFFFFFFFLL) + 4 * (v27 - v28);
  uint64_t v32 = v30 | 1;
  BOOL v33 = (v30 | 1uLL) > v31;
  if ((v30 | 1uLL) > v31) {
    uint64_t v32 = 0;
  }
  uint64_t v34 = 2 * v30;
  if (!v33) {
    v34 |= 4uLL;
  }
  unint64_t v35 = ((a1 >> 12) & 0x3FFFFFFFFLL) + 4 * (v31 - v32);
  uint64_t v36 = v34 | 1;
  BOOL v37 = (v34 | 1uLL) > v35;
  if ((v34 | 1uLL) > v35) {
    uint64_t v36 = 0;
  }
  uint64_t v38 = 2 * v34;
  if (!v37) {
    v38 |= 4uLL;
  }
  unint64_t v39 = ((a1 >> 10) & 0x3FFFFFFFFLL) + 4 * (v35 - v36);
  uint64_t v40 = v38 | 1;
  BOOL v41 = (v38 | 1uLL) > v39;
  if ((v38 | 1uLL) > v39) {
    uint64_t v40 = 0;
  }
  uint64_t v42 = 2 * v38;
  if (!v41) {
    v42 |= 4uLL;
  }
  unint64_t v43 = ((a1 >> 8) & 0x3FFFFFFFFLL) + 4 * (v39 - v40);
  uint64_t v44 = v42 | 1;
  BOOL v45 = (v42 | 1uLL) > v43;
  if ((v42 | 1uLL) > v43) {
    uint64_t v44 = 0;
  }
  uint64_t v46 = 2 * v42;
  if (!v45) {
    v46 |= 4uLL;
  }
  unint64_t v47 = ((a1 >> 6) & 0x3FFFFFFFFLL) + 4 * (v43 - v44);
  uint64_t v48 = v46 | 1;
  BOOL v49 = (v46 | 1uLL) > v47;
  if ((v46 | 1uLL) > v47) {
    uint64_t v48 = 0;
  }
  uint64_t v50 = 2 * v46;
  if (!v49) {
    v50 |= 4uLL;
  }
  unint64_t v51 = ((a1 >> 4) & 0x3FFFFFFFFLL) + 4 * (v47 - v48);
  uint64_t v52 = v50 | 1;
  BOOL v53 = (v50 | 1uLL) > v51;
  if ((v50 | 1uLL) > v51) {
    uint64_t v52 = 0;
  }
  uint64_t v54 = 2 * v50;
  if (!v53) {
    v54 |= 4uLL;
  }
  unint64_t v55 = ((a1 >> 2) & 0x3FFFFFFFFLL) + 4 * (v51 - v52);
  uint64_t v56 = v54 | 1;
  BOOL v57 = (v54 | 1uLL) > v55;
  if ((v54 | 1uLL) > v55) {
    uint64_t v56 = 0;
  }
  unint64_t v58 = 2 * v54;
  if (!v57) {
    v58 |= 4uLL;
  }
  return (__int16)((v58 >> 1) | ((v58 | 1) <= (a1 & 0x3FFFFFFFFLL) + 4 * (v55 - v56)));
}

uint64_t sub_1902E6374(int64_t a1, _WORD *a2)
{
  if (a1 < 1)
  {
    uint64_t result = 0x40000000;
    *a2 = 0;
  }
  else
  {
    __int16 v4 = sub_1902E4274(a1);
    unint64_t v5 = a1 << v4 >> (((30 - v4) & 1) == 0);
    int v6 = ((__int16)(30 - v4) >> 1) + 1;
    uint64_t v7 = (v5 >> 10) & 0x7FFF;
    uint64_t v8 = (__int16 *)((char *)&unk_1906030C2 + 2 * ((uint64_t)((v5 << 23) - 0x10000000000000) >> 48));
    uint64_t result = (((uint64_t)*v8 << 16) - 2 * (__int16)(*v8 - v8[1]) * (uint64_t)(int)v7) >> v6;
    *a2 = v6;
  }
  return result;
}

uint64_t sub_1902E641C(uint64_t result, int a2, int a3, uint64_t a4)
{
  if (a3 >= 1 && a2 >= a3)
  {
    for (int i = (__int16)(a2 - 1); i >= a3; int i = (__int16)(i - 1))
    {
      uint64_t v5 = a4 + 6 * (__int16)i;
      int v6 = (int *)(a4 + 6 * ((__int16)i - a3));
      int v7 = *v6;
      *(_WORD *)(v5 + 4) = *((_WORD *)v6 + 2);
      *(_DWORD *)uint64_t v5 = v7;
    }
    do
    {
      uint64_t v8 = 6 * (unsigned __int16)--a3;
      int v9 = *(_DWORD *)(result + v8);
      __int16 v10 = *(_WORD *)(result + v8 + 4);
      uint64_t v11 = a4 + v8;
      *(_WORD *)(v11 + 4) = v10;
      *(_DWORD *)uint64_t v11 = v9;
    }
    while ((_WORD)a3);
  }
  return result;
}

__int16 *sub_1902E64B4(__int16 *result, int a2, __int16 *a3, __int16 *a4, _WORD *a5, _WORD *a6)
{
  *a4 = *result;
  __int16 v6 = *result;
  *a3 = *result;
  if (a2 > 1)
  {
    int v7 = result + 3;
    uint64_t v8 = (unsigned __int16)a2 - 1;
    uint64_t v9 = v8;
    while (1)
    {
      int v10 = *v7;
      if (v10 < *a4)
      {
        *a4 = v10;
        LOWORD(v10) = *v7;
        __int16 v6 = *a3;
        if (*v7 > *a3)
        {
LABEL_8:
          *a3 = v10;
          __int16 v6 = v10;
        }
      }
      else if ((__int16)v10 > v6)
      {
        goto LABEL_8;
      }
      v7 += 3;
      if (!--v9)
      {
        int v22 = (*a4 >> 1) + (v6 >> 1);
        *a5 = (*a4 >> 1) + (v6 >> 1);
        __int16 v23 = *a3;
        if (*a3 & 1) != 0 || (__int16 v24 = *a4, (*a4))
        {
          *a5 = v22 + 1;
          __int16 v23 = *a3;
          __int16 v24 = *a4;
        }
        unsigned int v25 = (unsigned __int16)(v23 - v24);
        if (v25 >= 0x7FFF) {
          LOWORD(v25) = 0x7FFF;
        }
        *a6 = v25;
        a4[1] = result[1];
        __int16 v26 = result[1];
        a3[1] = v26;
        unint64_t v27 = result + 4;
        uint64_t v28 = (unsigned __int16)a2 - 1;
        while (2)
        {
          int v29 = *v27;
          if (v29 < a4[1])
          {
            a4[1] = v29;
            LOWORD(v29) = *v27;
            __int16 v26 = a3[1];
            if (*v27 > v26) {
              goto LABEL_32;
            }
          }
          else if ((__int16)v29 > v26)
          {
LABEL_32:
            a3[1] = v29;
            __int16 v26 = v29;
          }
          v27 += 3;
          if (--v28) {
            continue;
          }
          break;
        }
        int v30 = (a4[1] >> 1) + (v26 >> 1);
        a5[1] = (a4[1] >> 1) + (v26 >> 1);
        __int16 v31 = a3[1];
        if (v31 & 1) != 0 || (__int16 v32 = a4[1], (v32))
        {
          a5[1] = v30 + 1;
          __int16 v31 = a3[1];
          __int16 v32 = a4[1];
        }
        unsigned int v33 = (unsigned __int16)(v31 - v32);
        if (v33 >= 0x7FFF) {
          LOWORD(v33) = 0x7FFF;
        }
        a6[1] = v33;
        a4[2] = result[2];
        __int16 v34 = result[2];
        a3[2] = v34;
        unint64_t v35 = result + 5;
        while (2)
        {
          int v36 = *v35;
          if (v36 < a4[2])
          {
            a4[2] = v36;
            LOWORD(v36) = *v35;
            __int16 v34 = a3[2];
            if (*v35 > v34) {
              goto LABEL_44;
            }
          }
          else if ((__int16)v36 > v34)
          {
LABEL_44:
            a3[2] = v36;
            __int16 v34 = v36;
          }
          v35 += 3;
          if (!--v8)
          {
            int v20 = (a4[2] >> 1) + (v34 >> 1);
            a5[2] = v20;
            uint64_t v21 = (unsigned __int16)a3[2];
            if ((v21 & 1) == 0) {
              goto LABEL_46;
            }
LABEL_47:
            a5[2] = v20 + 1;
            LOWORD(v21) = a3[2];
            __int16 v37 = a4[2];
            goto LABEL_48;
          }
          continue;
        }
      }
    }
  }
  int v11 = (*a4 >> 1) + (v6 >> 1);
  *a5 = (*a4 >> 1) + (v6 >> 1);
  __int16 v12 = *a3;
  if (*a3 & 1) != 0 || (__int16 v13 = *a4, (*a4))
  {
    *a5 = v11 + 1;
    __int16 v12 = *a3;
    __int16 v13 = *a4;
  }
  unsigned int v14 = (unsigned __int16)(v12 - v13);
  if (v14 >= 0x7FFF) {
    LOWORD(v14) = 0x7FFF;
  }
  *a6 = v14;
  a4[1] = result[1];
  int v15 = result[1];
  a3[1] = v15;
  int v16 = (a4[1] >> 1) + (v15 >> 1);
  a5[1] = (a4[1] >> 1) + (v15 >> 1);
  __int16 v17 = a3[1];
  if (v17 & 1) != 0 || (__int16 v18 = a4[1], (v18))
  {
    a5[1] = v16 + 1;
    __int16 v17 = a3[1];
    __int16 v18 = a4[1];
  }
  unsigned int v19 = (unsigned __int16)(v17 - v18);
  if (v19 >= 0x7FFF) {
    LOWORD(v19) = 0x7FFF;
  }
  a6[1] = v19;
  a4[2] = result[2];
  LODWORD(v21) = result[2];
  a3[2] = v21;
  int v20 = (a4[2] >> 1) + ((int)v21 >> 1);
  a5[2] = (a4[2] >> 1) + ((int)v21 >> 1);
  LOWORD(v21) = a3[2];
  if (v21) {
    goto LABEL_47;
  }
LABEL_46:
  __int16 v37 = a4[2];
  if (v37) {
    goto LABEL_47;
  }
LABEL_48:
  unsigned int v38 = (unsigned __int16)(v21 - v37);
  if (v38 >= 0x7FFF) {
    LOWORD(v38) = 0x7FFF;
  }
  a6[2] = v38;
  return result;
}

void sub_1902E67BC(void *a1)
{
}

uint64_t sub_1902E67D0(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCFE90;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1902E67F8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902E6830(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "cyclingState");
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "cyclingStateSummary");
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "distanceTraveledOverTimeWindow", *(float *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(this, "motionType");
  if (*(unsigned char *)(a1 + 32)) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "timestamp");
LABEL_7:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1902E6914(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 32) |= 1u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_88;
                  }
                  unint64_t v47 = v20++;
                  char v48 = *(unsigned char *)(v21 + v47);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  BOOL v14 = v46++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_87:
                unint64_t v2 = v47 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_88;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_88:
              *(void *)(a1 + 8) = v24;
              goto LABEL_104;
            case 2u:
              *(unsigned char *)(a1 + 32) |= 0x10u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  unint64_t v51 = v27++;
                  char v52 = *(unsigned char *)(v28 + v51);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_92;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 28) = v31;
              goto LABEL_104;
            case 3u:
              *(unsigned char *)(a1 + 32) |= 2u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  unint64_t v55 = v33++;
                  char v56 = *(unsigned char *)(v34 + v55);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_97;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 16) = v37;
              goto LABEL_104;
            case 4u:
              *(unsigned char *)(a1 + 32) |= 4u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  unint64_t v59 = v39++;
                  char v60 = *(unsigned char *)(v40 + v59);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_102;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_103;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 20) = v43;
LABEL_104:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 5u:
              *(unsigned char *)(a1 + 32) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
                unint64_t v2 = *((void *)this + 1) + 4;
                *((void *)this + 1) = v2;
              }
              else
              {
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_104;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_104;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1902E6E98(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(unsigned char *)(v3 + 32) & 8) == 0) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_11:
  float v5 = *(float *)(v3 + 24);

  return PB::Writer::write(this, v5);
}

void *sub_1902E6F5C(void *result)
{
  *uint64_t result = &unk_1EDFCDF80;
  *(void *)((char *)result + 156) = 0;
  return result;
}

void sub_1902E6F84(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902E6FBC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "abruptGravityChangeAngle", *(float *)(a1 + 32));
    uint64_t v5 = *(void *)(a1 + 156);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_44;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "accelPathLength", *(float *)(a1 + 36));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "angleChangePostImpact", *(float *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "angleChangePreImpact", *(float *)(a1 + 44));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "crown");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "crownVariance", *(float *)(a1 + 52));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "gravityVariance", *(float *)(a1 + 56));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "isFall");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "isNearFall");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "maxAbsX", *(float *)(a1 + 60));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "maxAbsY", *(float *)(a1 + 64));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "maxAbsZ", *(float *)(a1 + 68));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "maxAccelNorm", *(float *)(a1 + 72));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "maxAngleChangePostImpact", *(float *)(a1 + 76));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "maxAngleChangePreImpact", *(float *)(a1 + 80));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "maxJerkVM", *(float *)(a1 + 84));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "maxMinusMin", *(float *)(a1 + 88));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "medianAbsGravityY", *(float *)(a1 + 92));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "minInertialZ", *(float *)(a1 + 96));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "minInertialZHighFreq", *(float *)(a1 + 100));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "multiPeakAccelPathLengthWithPeak", *(float *)(a1 + 104));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "multiPeakPathLengthDecorrelation", *(float *)(a1 + 108));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "multiPeakPathLengthDelaySpread", *(float *)(a1 + 112));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "multiPeakPathLengthHarmonicMean", *(float *)(a1 + 116));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 2) == 0) {
      goto LABEL_28;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "operatingMode");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 2) == 0)
  {
LABEL_28:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "peakTimestamp");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "poseAtImpact", *(float *)(a1 + 124));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v5 & 4) == 0) {
      goto LABEL_31;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "posteriorRatio", *(float *)(a1 + 128));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 4) == 0)
  {
LABEL_31:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "sensorTime");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "sumDeltaAngles", *(float *)(a1 + 132));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "swingAngle", *(float *)(a1 + 136));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "tiltAngle", *(float *)(a1 + 140));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "timeto3rdZC", *(float *)(a1 + 144));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "type");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
LABEL_77:
  PB::TextFormatter::format(this, "withinCyclingImpactThresholds");
  if ((*(void *)(a1 + 156) & 0x1000000000) != 0) {
LABEL_38:
  }
    PB::TextFormatter::format(this, "withinHardThresholds");
LABEL_39:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1902E74A0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(void *)(a1 + 156) |= 1uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_196;
            case 2u:
              *(void *)(a1 + 156) |= 4uLL;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_206;
                  }
                  unint64_t v61 = v21++;
                  char v62 = *(unsigned char *)(v22 + v61);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0;
LABEL_205:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_206;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v25 = 0;
                }
                goto LABEL_205;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_206;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              uint64_t v25 = 0;
LABEL_206:
              *(void *)(a1 + 24) = v25;
              goto LABEL_197;
            case 3u:
              *(void *)(a1 + 156) |= 2uLL;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_211;
                  }
                  unint64_t v65 = v27++;
                  char v66 = *(unsigned char *)(v28 + v65);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_210:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_211;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_210;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_211;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_211:
              *(void *)(a1 + 16) = v31;
              goto LABEL_197;
            case 4u:
              *(void *)(a1 + 156) |= 0x40uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 5u:
              *(void *)(a1 + 156) |= 0x20uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 6u:
              *(void *)(a1 + 156) |= 0x20000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 7u:
              *(void *)(a1 + 156) |= 0x2000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 8u:
              *(void *)(a1 + 156) |= 0x10000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 9u:
              *(void *)(a1 + 156) |= 0x80000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0xAu:
              *(void *)(a1 + 156) |= 0x10uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0xBu:
              *(void *)(a1 + 156) |= 0x8000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0xCu:
              *(void *)(a1 + 156) |= 0x4000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0xDu:
              *(void *)(a1 + 156) |= 0x4000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0xEu:
              *(void *)(a1 + 156) |= 0x10000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0xFu:
              *(void *)(a1 + 156) |= 0x40000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x10u:
              *(void *)(a1 + 156) |= 0x20000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x11u:
              *(void *)(a1 + 156) |= 0x80uLL;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_216;
                  }
                  unint64_t v69 = v33++;
                  char v70 = *(unsigned char *)(v34 + v69);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_215:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_216;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_215;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_216;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_216:
              *(_DWORD *)(a1 + 48) = v37;
              goto LABEL_197;
            case 0x12u:
              *(void *)(a1 + 156) |= 0x8000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x13u:
              *(void *)(a1 + 156) |= 0x200000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v40 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v39 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v40 = v39 != 0;
              }
              *(unsigned char *)(a1 + 152) = v40;
              goto LABEL_197;
            case 0x14u:
              *(void *)(a1 + 156) |= 0x100000000uLL;
              unint64_t v41 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v71 = 0;
                unsigned int v72 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_221;
                  }
                  unint64_t v73 = v41++;
                  char v74 = *(unsigned char *)(v42 + v73);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  BOOL v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_220:
                    unint64_t v2 = v73 + 1;
                    goto LABEL_221;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_220;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_221;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_221:
              *(_DWORD *)(a1 + 148) = v45;
              goto LABEL_197;
            case 0x15u:
              *(void *)(a1 + 156) |= 0x80000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x16u:
              *(void *)(a1 + 156) |= 0x400uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x17u:
              *(void *)(a1 + 156) |= 0x800uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x18u:
              *(void *)(a1 + 156) |= 0x1000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x19u:
              *(void *)(a1 + 156) |= 0x400000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v48 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v47 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v48 = v47 != 0;
              }
              *(unsigned char *)(a1 + 153) = v48;
              goto LABEL_197;
            case 0x1Au:
              *(void *)(a1 + 156) |= 0x800000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x1Bu:
              *(void *)(a1 + 156) |= 0x400000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x1Cu:
              *(void *)(a1 + 156) |= 0x1000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x1Du:
              *(void *)(a1 + 156) |= 0x200000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x1Eu:
              *(void *)(a1 + 156) |= 0x1000000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v50 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v49 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v50 = v49 != 0;
              }
              *(unsigned char *)(a1 + 155) = v50;
              goto LABEL_197;
            case 0x1Fu:
              *(void *)(a1 + 156) |= 0x100000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x20u:
              *(void *)(a1 + 156) |= 0x2000000uLL;
              unint64_t v51 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v52 = *(void *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v75 = 0;
                unsigned int v76 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_226;
                  }
                  unint64_t v77 = v51++;
                  char v78 = *(unsigned char *)(v52 + v77);
                  *((void *)this + 1) = v51;
                  v55 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  BOOL v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_225:
                    unint64_t v2 = v77 + 1;
                    goto LABEL_226;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v55) = 0;
                }
                goto LABEL_225;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v2 = v51 + 1;
                *((void *)this + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_226;
                }
                v53 += 7;
                unint64_t v51 = v2;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_226:
              *(_DWORD *)(a1 + 120) = v55;
LABEL_197:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x21u:
              *(void *)(a1 + 156) |= 0x200uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x22u:
              *(void *)(a1 + 156) |= 0x100uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x23u:
              *(void *)(a1 + 156) |= 0x800000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v58 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v57 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v58 = v57 != 0;
              }
              *(unsigned char *)(a1 + 154) = v58;
              goto LABEL_197;
            case 0x24u:
              *(void *)(a1 + 156) |= 0x40000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x25u:
              *(void *)(a1 + 156) |= 8uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
LABEL_195:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_196:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_150:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_197;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_197;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1902E82AC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 156);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    uint64_t v4 = *(void *)(v3 + 156);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_41;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10000) == 0)
  {
LABEL_9:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x4000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 124));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 132));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 140));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 136));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 128));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x400) == 0) {
      goto LABEL_23;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 144));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400) == 0)
  {
LABEL_23:
    if ((v4 & 0x800) == 0) {
      goto LABEL_24;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800000) == 0)
  {
LABEL_27:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400000) == 0)
  {
LABEL_28:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200000) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100000) == 0)
  {
LABEL_32:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x200) == 0) {
      goto LABEL_34;
    }
    goto LABEL_71;
  }
LABEL_70:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200) == 0)
  {
LABEL_34:
    if ((v4 & 0x100) == 0) {
      goto LABEL_35;
    }
    goto LABEL_72;
  }
LABEL_71:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100) == 0)
  {
LABEL_35:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_37;
    }
LABEL_74:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92));
    if ((*(void *)(v3 + 156) & 8) == 0) {
      return result;
    }
    goto LABEL_75;
  }
LABEL_73:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40000) != 0) {
    goto LABEL_74;
  }
LABEL_37:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_75:
  float v5 = *(float *)(v3 + 32);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1902E86F0(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCFB80;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1902E8718(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902E8750(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "gyroOn");
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1902E87CC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
        if (v2 >= v3)
        {
          BOOL v27 = 0;
          *((unsigned char *)this + 24) = 1;
        }
        else
        {
          int v26 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          BOOL v27 = v26 != 0;
        }
        *(unsigned char *)(a1 + 16) = v27;
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v24 = 0;
          if (v3 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          else {
            unint64_t v2 = *((void *)this + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_48;
            }
            unint64_t v31 = v20++;
            char v32 = *(unsigned char *)(v21 + v31);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              goto LABEL_47;
            }
          }
          if (*((unsigned char *)this + 24)) {
            uint64_t v24 = 0;
          }
LABEL_47:
          unint64_t v2 = v31 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              break;
            }
          }
        }
LABEL_48:
        *(void *)(a1 + 8) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1902E8A50(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::write(this);
  }
  return result;
}

uint64_t sub_1902E8ABC(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCDA78;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_1902E8AE4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902E8B1C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "consideredAlert");
    __int16 v5 = *(_WORD *)(a1 + 52);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "consideredRecovery");
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "consideredSOS");
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "droppedAlert");
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "droppedRecovery");
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "droppedSOS");
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "fallTime");
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "impactOperatingMode");
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 2) == 0)
  {
LABEL_10:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x1000) == 0)
  {
LABEL_11:
    if ((v5 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "isOtherStateMachineProcessingNearbyImpact");
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_12:
    if ((v5 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "refereeCyclingStateDecision");
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_13:
    if ((v5 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  PB::TextFormatter::format(this, "refereeOperatingMode");
  if ((*(_WORD *)(a1 + 52) & 4) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(this, "sensorTime");
LABEL_15:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1902E8D00(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 52) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_151;
            case 2u:
              *(_WORD *)(a1 + 52) |= 4u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v65 = 0;
                unsigned int v66 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_130;
                  }
                  unint64_t v67 = v20++;
                  char v68 = *(unsigned char *)(v21 + v67);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  BOOL v14 = v66++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
LABEL_129:
                    unint64_t v2 = v67 + 1;
                    goto LABEL_130;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v24 = 0;
                }
                goto LABEL_129;
              }
              char v22 = 0;
              unsigned int v23 = 0;
              uint64_t v24 = 0;
              do
              {
                unint64_t v2 = v20 + 1;
                *((void *)this + 1) = v20 + 1;
                char v25 = *(unsigned char *)(v21 + v20);
                v24 |= (unint64_t)(v25 & 0x7F) << v22;
                if ((v25 & 0x80) == 0) {
                  goto LABEL_130;
                }
                v22 += 7;
                unint64_t v20 = v2;
                BOOL v14 = v23++ > 8;
              }
              while (!v14);
              uint64_t v24 = 0;
LABEL_130:
              *(void *)(a1 + 24) = v24;
              goto LABEL_151;
            case 3u:
              *(_WORD *)(a1 + 52) |= 1u;
              unint64_t v26 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v27 = *(void *)this;
              if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
              {
                char v69 = 0;
                unsigned int v70 = 0;
                uint64_t v30 = 0;
                if (v2 <= v26) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v26)
                  {
                    uint64_t v30 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_135;
                  }
                  unint64_t v71 = v26++;
                  char v72 = *(unsigned char *)(v27 + v71);
                  *((void *)this + 1) = v26;
                  v30 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  BOOL v14 = v70++ > 8;
                  if (v14)
                  {
                    uint64_t v30 = 0;
LABEL_134:
                    unint64_t v2 = v71 + 1;
                    goto LABEL_135;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v30 = 0;
                }
                goto LABEL_134;
              }
              char v28 = 0;
              unsigned int v29 = 0;
              uint64_t v30 = 0;
              do
              {
                unint64_t v2 = v26 + 1;
                *((void *)this + 1) = v26 + 1;
                char v31 = *(unsigned char *)(v27 + v26);
                v30 |= (unint64_t)(v31 & 0x7F) << v28;
                if ((v31 & 0x80) == 0) {
                  goto LABEL_135;
                }
                v28 += 7;
                unint64_t v26 = v2;
                BOOL v14 = v29++ > 8;
              }
              while (!v14);
              uint64_t v30 = 0;
LABEL_135:
              *(void *)(a1 + 8) = v30;
              goto LABEL_151;
            case 4u:
              *(_WORD *)(a1 + 52) |= 8u;
              unint64_t v32 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v33 = *(void *)this;
              if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
              {
                char v73 = 0;
                unsigned int v74 = 0;
                uint64_t v36 = 0;
                if (v2 <= v32) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v32)
                  {
                    LODWORD(v36) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_140;
                  }
                  unint64_t v75 = v32++;
                  char v76 = *(unsigned char *)(v33 + v75);
                  *((void *)this + 1) = v32;
                  v36 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0) {
                    break;
                  }
                  v73 += 7;
                  BOOL v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v36) = 0;
LABEL_139:
                    unint64_t v2 = v75 + 1;
                    goto LABEL_140;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v36) = 0;
                }
                goto LABEL_139;
              }
              char v34 = 0;
              unsigned int v35 = 0;
              uint64_t v36 = 0;
              do
              {
                unint64_t v2 = v32 + 1;
                *((void *)this + 1) = v32 + 1;
                char v37 = *(unsigned char *)(v33 + v32);
                v36 |= (unint64_t)(v37 & 0x7F) << v34;
                if ((v37 & 0x80) == 0) {
                  goto LABEL_140;
                }
                v34 += 7;
                unint64_t v32 = v2;
                BOOL v14 = v35++ > 8;
              }
              while (!v14);
              LODWORD(v36) = 0;
LABEL_140:
              *(_DWORD *)(a1 + 32) = v36;
              goto LABEL_151;
            case 5u:
              *(_WORD *)(a1 + 52) |= 0x20u;
              unint64_t v38 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v39 = *(void *)this;
              if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
              {
                char v77 = 0;
                unsigned int v78 = 0;
                uint64_t v42 = 0;
                if (v2 <= v38) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v38)
                  {
                    LODWORD(v42) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_145;
                  }
                  unint64_t v79 = v38++;
                  char v80 = *(unsigned char *)(v39 + v79);
                  *((void *)this + 1) = v38;
                  v42 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0) {
                    break;
                  }
                  v77 += 7;
                  BOOL v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v42) = 0;
LABEL_144:
                    unint64_t v2 = v79 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v42) = 0;
                }
                goto LABEL_144;
              }
              char v40 = 0;
              unsigned int v41 = 0;
              uint64_t v42 = 0;
              do
              {
                unint64_t v2 = v38 + 1;
                *((void *)this + 1) = v38 + 1;
                char v43 = *(unsigned char *)(v39 + v38);
                v42 |= (unint64_t)(v43 & 0x7F) << v40;
                if ((v43 & 0x80) == 0) {
                  goto LABEL_145;
                }
                v40 += 7;
                unint64_t v38 = v2;
                BOOL v14 = v41++ > 8;
              }
              while (!v14);
              LODWORD(v42) = 0;
LABEL_145:
              *(_DWORD *)(a1 + 40) = v42;
              goto LABEL_151;
            case 6u:
              *(_WORD *)(a1 + 52) |= 0x10u;
              unint64_t v44 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v45 = *(void *)this;
              if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
              {
                char v81 = 0;
                unsigned int v82 = 0;
                uint64_t v48 = 0;
                if (v2 <= v44) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v44)
                  {
                    LODWORD(v48) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_150;
                  }
                  unint64_t v83 = v44++;
                  char v84 = *(unsigned char *)(v45 + v83);
                  *((void *)this + 1) = v44;
                  v48 |= (unint64_t)(v84 & 0x7F) << v81;
                  if ((v84 & 0x80) == 0) {
                    break;
                  }
                  v81 += 7;
                  BOOL v14 = v82++ > 8;
                  if (v14)
                  {
                    LODWORD(v48) = 0;
LABEL_149:
                    unint64_t v2 = v83 + 1;
                    goto LABEL_150;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v48) = 0;
                }
                goto LABEL_149;
              }
              char v46 = 0;
              unsigned int v47 = 0;
              uint64_t v48 = 0;
              do
              {
                unint64_t v2 = v44 + 1;
                *((void *)this + 1) = v44 + 1;
                char v49 = *(unsigned char *)(v45 + v44);
                v48 |= (unint64_t)(v49 & 0x7F) << v46;
                if ((v49 & 0x80) == 0) {
                  goto LABEL_150;
                }
                v46 += 7;
                unint64_t v44 = v2;
                BOOL v14 = v47++ > 8;
              }
              while (!v14);
              LODWORD(v48) = 0;
LABEL_150:
              *(_DWORD *)(a1 + 36) = v48;
LABEL_151:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 7u:
              *(_WORD *)(a1 + 52) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v51 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v50 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v51 = v50 != 0;
              }
              *(unsigned char *)(a1 + 50) = v51;
              goto LABEL_151;
            case 0xBu:
              *(_WORD *)(a1 + 52) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v54 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v53 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v54 = v53 != 0;
              }
              *(unsigned char *)(a1 + 44) = v54;
              goto LABEL_151;
            case 0xCu:
              *(_WORD *)(a1 + 52) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v56 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v55 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v56 = v55 != 0;
              }
              *(unsigned char *)(a1 + 45) = v56;
              goto LABEL_151;
            case 0xDu:
              *(_WORD *)(a1 + 52) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v58 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v57 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v58 = v57 != 0;
              }
              *(unsigned char *)(a1 + 46) = v58;
              goto LABEL_151;
            case 0x15u:
              *(_WORD *)(a1 + 52) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v60 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v59 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v60 = v59 != 0;
              }
              *(unsigned char *)(a1 + 47) = v60;
              goto LABEL_151;
            case 0x16u:
              *(_WORD *)(a1 + 52) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v62 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v61 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v62 = v61 != 0;
              }
              *(unsigned char *)(a1 + 48) = v62;
              goto LABEL_151;
            case 0x17u:
              *(_WORD *)(a1 + 52) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v64 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v63 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v64 = v63 != 0;
              }
              *(unsigned char *)(a1 + 49) = v64;
              goto LABEL_151;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_151;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1902E9594(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 52);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16));
    __int16 v4 = *(_WORD *)(v3 + 52);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
LABEL_26:
    uint64_t result = PB::Writer::write(this);
    if ((*(_WORD *)(v3 + 52) & 0x800) == 0) {
      return result;
    }
    goto LABEL_27;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x400) != 0) {
    goto LABEL_26;
  }
LABEL_13:
  if ((v4 & 0x800) == 0) {
    return result;
  }
LABEL_27:

  return PB::Writer::write(this);
}

void *sub_1902E9738(void *result)
{
  *uint64_t result = &unk_1EDFCD5A8;
  *(void *)((char *)result + 364) = 0;
  return result;
}

void sub_1902E9764(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902E979C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = (uint64_t *)(a1 + 364);
  uint64_t v6 = *(void *)(a1 + 364);
  if (v6)
  {
    PB::TextFormatter::format(this, "alertCanceledBecauseOfAbsenceOfQuiessence");
    uint64_t v6 = *v5;
    if ((*v5 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_52;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "alertCanceledBecauseOfActive");
  uint64_t v6 = *v5;
  if ((*v5 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfChargerState");
  uint64_t v6 = *v5;
  if ((*v5 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfCyclingPostImpact");
  uint64_t v6 = *v5;
  if ((*v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfDecimatedLowFrequencyFFT");
  uint64_t v6 = *v5;
  if ((*v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfDistanceTraveledPostImpact");
  uint64_t v6 = *v5;
  if ((*v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfHighFrequencyFFT");
  uint64_t v6 = *v5;
  if ((*v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfLockedNoMotionPre");
  uint64_t v6 = *v5;
  if ((*v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfLowFrequencyFFT");
  uint64_t v6 = *v5;
  if ((*v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfNumberOfPeaksFFT");
  uint64_t v6 = *v5;
  if ((*v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfOffBody");
  uint64_t v6 = *v5;
  if ((*v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfRepetitiveMotion");
  uint64_t v6 = *v5;
  if ((*v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfRetraction");
  uint64_t v6 = *v5;
  if ((*v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfSimilarPeaks");
  uint64_t v6 = *v5;
  if ((*v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfStand");
  uint64_t v6 = *v5;
  if ((*v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfSteps");
  uint64_t v6 = *v5;
  if ((*v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfWristState");
  uint64_t v6 = *v5;
  if ((*v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfWristStatePost");
  uint64_t v6 = *v5;
  if ((*v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfWristStatePre");
  uint64_t v6 = *v5;
  if ((*v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "fallStatsDispatchResetOnAccelSensorTime");
  uint64_t v6 = *v5;
  if ((*v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "fallStatsDispatchRestoredOnAccelSensorTime");
  uint64_t v6 = *v5;
  if ((*v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "hkWorkoutId");
  uint64_t v6 = *v5;
  if ((*v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "impactCanceledBecauseOfExistingAlert");
  uint64_t v6 = *v5;
  if ((*v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "impactNotConsideredBecauseOfCyclingImpactThresholds");
  uint64_t v6 = *v5;
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "impactNotConsideredBecauseOfMaxAccelNormThreshold");
  uint64_t v6 = *v5;
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "impactNotConsideredBecauseOfMultiPeaks");
  uint64_t v6 = *v5;
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "impactNotConsideredBecauseOfNaiveBayesClassifier");
  uint64_t v6 = *v5;
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "impactNotConsideredBecauseOfOtherHardThresholds");
  uint64_t v6 = *v5;
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "leavingImpactBecauseOfNewImpactNewImpact");
  uint64_t v6 = *v5;
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x100000000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "leavingImpactBecauseOfNewImpactOldImpact");
  uint64_t v6 = *v5;
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(this, "operatingMode");
  uint64_t v6 = *v5;
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "skippedFallStatsSensorTime");
  uint64_t v6 = *v5;
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x100000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(this, "skippedGyroSensorTime");
  uint64_t v6 = *v5;
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x200000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(this, "sosCanceledBecauseOfAbsenceOfLongLie");
  uint64_t v6 = *v5;
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x400000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(this, "sosCanceledBecauseOfActive");
  uint64_t v6 = *v5;
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x800000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(this, "sosCanceledBecauseOfStand");
  uint64_t v6 = *v5;
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x1000000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(this, "sosCanceledBecauseOfSteps");
  uint64_t v6 = *v5;
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x2000000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(this, "sosConsideredFallTimestamp");
  uint64_t v6 = *v5;
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x4000000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(this, "sosConsideredIOSTime", *(double *)(a1 + 304));
  uint64_t v6 = *v5;
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x8000000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(this, "sosConsideredSensorTime");
  uint64_t v6 = *v5;
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x10000000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(this, "workoutId");
  uint64_t v6 = *v5;
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_43:
    if ((v6 & 0x20000000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(this, "workoutTransitionPause");
  uint64_t v6 = *v5;
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_44:
    if ((v6 & 0x40000000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(this, "workoutTransitionResume");
  uint64_t v6 = *v5;
  if ((*v5 & 0x40000000000) == 0)
  {
LABEL_45:
    if ((v6 & 0x80000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
LABEL_93:
  PB::TextFormatter::format(this, "workoutTransitionStart");
  if ((*v5 & 0x80000000000) != 0) {
LABEL_46:
  }
    PB::TextFormatter::format(this, "workoutTransitionStop");
LABEL_47:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1902E9D8C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void *)(a1 + 364);
    while (1)
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v14 = *(unsigned char *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        BOOL v15 = v11++ > 8;
        if (v15) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v12 >> 3))
      {
        case 1u:
          *v8 |= 0x40000000uLL;
          unint64_t v21 = *((void *)this + 1);
          unint64_t v22 = *((void *)this + 2);
          uint64_t v23 = *(void *)this;
          if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
          {
            char v375 = 0;
            unsigned int v376 = 0;
            uint64_t v26 = 0;
            if (v22 <= v21) {
              unint64_t v22 = *((void *)this + 1);
            }
            do
            {
              if (v22 == v21)
              {
                uint64_t v26 = 0;
                *((unsigned char *)this + 24) = 1;
                goto LABEL_648;
              }
              unint64_t v377 = v21 + 1;
              char v378 = *(unsigned char *)(v23 + v21);
              *((void *)this + 1) = v377;
              v26 |= (unint64_t)(v378 & 0x7F) << v375;
              if ((v378 & 0x80) == 0)
              {
                if (*((unsigned char *)this + 24)) {
                  uint64_t v26 = 0;
                }
                goto LABEL_648;
              }
              v375 += 7;
              unint64_t v21 = v377;
              BOOL v15 = v376++ > 8;
            }
            while (!v15);
LABEL_342:
            uint64_t v26 = 0;
          }
          else
          {
            char v24 = 0;
            unsigned int v25 = 0;
            uint64_t v26 = 0;
            while (1)
            {
              unint64_t v27 = v21 + 1;
              *((void *)this + 1) = v21 + 1;
              char v28 = *(unsigned char *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0) {
                break;
              }
              v24 += 7;
              unint64_t v21 = v27;
              BOOL v15 = v25++ > 8;
              if (v15) {
                goto LABEL_342;
              }
            }
          }
LABEL_648:
          *(void *)(a1 + 248) = v26;
          goto LABEL_821;
        case 2u:
          *v8 |= 0x80000000uLL;
          unint64_t v29 = *((void *)this + 1);
          unint64_t v30 = *((void *)this + 2);
          uint64_t v31 = *(void *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)this + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_652;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v15 = v33++ > 8;
            }
            while (!v15);
LABEL_349:
            uint64_t v34 = 0;
            goto LABEL_652;
          }
          char v379 = 0;
          unsigned int v380 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)this + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              uint64_t v34 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v381 = v29 + 1;
              char v382 = *(unsigned char *)(v31 + v29);
              *((void *)this + 1) = v381;
              v34 |= (unint64_t)(v382 & 0x7F) << v379;
              if (v382 < 0)
              {
                v379 += 7;
                unint64_t v29 = v381;
                BOOL v15 = v380++ > 8;
                if (v15) {
                  goto LABEL_349;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v34 = 0;
              }
            }
            break;
          }
LABEL_652:
          *(void *)(a1 + 256) = v34;
          goto LABEL_821;
        case 0x15u:
          *v8 |= 0x80000uLL;
          unint64_t v38 = *((void *)this + 1);
          unint64_t v39 = *((void *)this + 2);
          uint64_t v40 = *(void *)this;
          if (v38 <= 0xFFFFFFFFFFFFFFF5 && v38 + 10 <= v39)
          {
            char v41 = 0;
            unsigned int v42 = 0;
            uint64_t v43 = 0;
            do
            {
              unint64_t v44 = v38 + 1;
              *((void *)this + 1) = v38 + 1;
              char v45 = *(unsigned char *)(v40 + v38);
              v43 |= (unint64_t)(v45 & 0x7F) << v41;
              if ((v45 & 0x80) == 0) {
                goto LABEL_656;
              }
              v41 += 7;
              unint64_t v38 = v44;
              BOOL v15 = v42++ > 8;
            }
            while (!v15);
LABEL_356:
            uint64_t v43 = 0;
            goto LABEL_656;
          }
          char v383 = 0;
          unsigned int v384 = 0;
          uint64_t v43 = 0;
          if (v39 <= v38) {
            unint64_t v39 = *((void *)this + 1);
          }
          while (2)
          {
            if (v39 == v38)
            {
              uint64_t v43 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v385 = v38 + 1;
              char v386 = *(unsigned char *)(v40 + v38);
              *((void *)this + 1) = v385;
              v43 |= (unint64_t)(v386 & 0x7F) << v383;
              if (v386 < 0)
              {
                v383 += 7;
                unint64_t v38 = v385;
                BOOL v15 = v384++ > 8;
                if (v15) {
                  goto LABEL_356;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v43 = 0;
              }
            }
            break;
          }
LABEL_656:
          *(void *)(a1 + 160) = v43;
          goto LABEL_821;
        case 0x16u:
          *v8 |= 0x100000uLL;
          unint64_t v46 = *((void *)this + 1);
          unint64_t v47 = *((void *)this + 2);
          uint64_t v48 = *(void *)this;
          if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
          {
            char v49 = 0;
            unsigned int v50 = 0;
            uint64_t v51 = 0;
            do
            {
              unint64_t v52 = v46 + 1;
              *((void *)this + 1) = v46 + 1;
              char v53 = *(unsigned char *)(v48 + v46);
              v51 |= (unint64_t)(v53 & 0x7F) << v49;
              if ((v53 & 0x80) == 0) {
                goto LABEL_660;
              }
              v49 += 7;
              unint64_t v46 = v52;
              BOOL v15 = v50++ > 8;
            }
            while (!v15);
LABEL_363:
            uint64_t v51 = 0;
            goto LABEL_660;
          }
          char v387 = 0;
          unsigned int v388 = 0;
          uint64_t v51 = 0;
          if (v47 <= v46) {
            unint64_t v47 = *((void *)this + 1);
          }
          while (2)
          {
            if (v47 == v46)
            {
              uint64_t v51 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v389 = v46 + 1;
              char v390 = *(unsigned char *)(v48 + v46);
              *((void *)this + 1) = v389;
              v51 |= (unint64_t)(v390 & 0x7F) << v387;
              if (v390 < 0)
              {
                v387 += 7;
                unint64_t v46 = v389;
                BOOL v15 = v388++ > 8;
                if (v15) {
                  goto LABEL_363;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v51 = 0;
              }
            }
            break;
          }
LABEL_660:
          *(void *)(a1 + 168) = v51;
          goto LABEL_821;
        case 0x2Cu:
          *v8 |= 0x200000uLL;
          unint64_t v54 = *((void *)this + 1);
          unint64_t v55 = *((void *)this + 2);
          uint64_t v56 = *(void *)this;
          if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
          {
            char v57 = 0;
            unsigned int v58 = 0;
            uint64_t v59 = 0;
            do
            {
              unint64_t v60 = v54 + 1;
              *((void *)this + 1) = v54 + 1;
              char v61 = *(unsigned char *)(v56 + v54);
              v59 |= (unint64_t)(v61 & 0x7F) << v57;
              if ((v61 & 0x80) == 0) {
                goto LABEL_664;
              }
              v57 += 7;
              unint64_t v54 = v60;
              BOOL v15 = v58++ > 8;
            }
            while (!v15);
LABEL_370:
            uint64_t v59 = 0;
            goto LABEL_664;
          }
          char v391 = 0;
          unsigned int v392 = 0;
          uint64_t v59 = 0;
          if (v55 <= v54) {
            unint64_t v55 = *((void *)this + 1);
          }
          while (2)
          {
            if (v55 == v54)
            {
              uint64_t v59 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v393 = v54 + 1;
              char v394 = *(unsigned char *)(v56 + v54);
              *((void *)this + 1) = v393;
              v59 |= (unint64_t)(v394 & 0x7F) << v391;
              if (v394 < 0)
              {
                v391 += 7;
                unint64_t v54 = v393;
                BOOL v15 = v392++ > 8;
                if (v15) {
                  goto LABEL_370;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v59 = 0;
              }
            }
            break;
          }
LABEL_664:
          *(void *)(a1 + 176) = v59;
          goto LABEL_821;
        case 0x2Du:
          *v8 |= 0x8000000000uLL;
          unint64_t v62 = *((void *)this + 1);
          unint64_t v63 = *((void *)this + 2);
          uint64_t v64 = *(void *)this;
          if (v62 <= 0xFFFFFFFFFFFFFFF5 && v62 + 10 <= v63)
          {
            char v65 = 0;
            unsigned int v66 = 0;
            uint64_t v67 = 0;
            do
            {
              unint64_t v68 = v62 + 1;
              *((void *)this + 1) = v62 + 1;
              char v69 = *(unsigned char *)(v64 + v62);
              v67 |= (unint64_t)(v69 & 0x7F) << v65;
              if ((v69 & 0x80) == 0) {
                goto LABEL_668;
              }
              v65 += 7;
              unint64_t v62 = v68;
              BOOL v15 = v66++ > 8;
            }
            while (!v15);
LABEL_377:
            uint64_t v67 = 0;
            goto LABEL_668;
          }
          char v395 = 0;
          unsigned int v396 = 0;
          uint64_t v67 = 0;
          if (v63 <= v62) {
            unint64_t v63 = *((void *)this + 1);
          }
          while (2)
          {
            if (v63 == v62)
            {
              uint64_t v67 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v397 = v62 + 1;
              char v398 = *(unsigned char *)(v64 + v62);
              *((void *)this + 1) = v397;
              v67 |= (unint64_t)(v398 & 0x7F) << v395;
              if (v398 < 0)
              {
                v395 += 7;
                unint64_t v62 = v397;
                BOOL v15 = v396++ > 8;
                if (v15) {
                  goto LABEL_377;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v67 = 0;
              }
            }
            break;
          }
LABEL_668:
          *(void *)(a1 + 320) = v67;
          goto LABEL_821;
        case 0x2Eu:
          *v8 |= 0x40000000000uLL;
          unint64_t v70 = *((void *)this + 1);
          unint64_t v71 = *((void *)this + 2);
          uint64_t v72 = *(void *)this;
          if (v70 <= 0xFFFFFFFFFFFFFFF5 && v70 + 10 <= v71)
          {
            char v73 = 0;
            unsigned int v74 = 0;
            uint64_t v75 = 0;
            do
            {
              unint64_t v76 = v70 + 1;
              *((void *)this + 1) = v70 + 1;
              char v77 = *(unsigned char *)(v72 + v70);
              v75 |= (unint64_t)(v77 & 0x7F) << v73;
              if ((v77 & 0x80) == 0) {
                goto LABEL_672;
              }
              v73 += 7;
              unint64_t v70 = v76;
              BOOL v15 = v74++ > 8;
            }
            while (!v15);
LABEL_384:
            uint64_t v75 = 0;
            goto LABEL_672;
          }
          char v399 = 0;
          unsigned int v400 = 0;
          uint64_t v75 = 0;
          if (v71 <= v70) {
            unint64_t v71 = *((void *)this + 1);
          }
          while (2)
          {
            if (v71 == v70)
            {
              uint64_t v75 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v401 = v70 + 1;
              char v402 = *(unsigned char *)(v72 + v70);
              *((void *)this + 1) = v401;
              v75 |= (unint64_t)(v402 & 0x7F) << v399;
              if (v402 < 0)
              {
                v399 += 7;
                unint64_t v70 = v401;
                BOOL v15 = v400++ > 8;
                if (v15) {
                  goto LABEL_384;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v75 = 0;
              }
            }
            break;
          }
LABEL_672:
          *(void *)(a1 + 344) = v75;
          goto LABEL_821;
        case 0x2Fu:
          *v8 |= 0x10000000000uLL;
          unint64_t v78 = *((void *)this + 1);
          unint64_t v79 = *((void *)this + 2);
          uint64_t v80 = *(void *)this;
          if (v78 <= 0xFFFFFFFFFFFFFFF5 && v78 + 10 <= v79)
          {
            char v81 = 0;
            unsigned int v82 = 0;
            uint64_t v83 = 0;
            do
            {
              unint64_t v84 = v78 + 1;
              *((void *)this + 1) = v78 + 1;
              char v85 = *(unsigned char *)(v80 + v78);
              v83 |= (unint64_t)(v85 & 0x7F) << v81;
              if ((v85 & 0x80) == 0) {
                goto LABEL_676;
              }
              v81 += 7;
              unint64_t v78 = v84;
              BOOL v15 = v82++ > 8;
            }
            while (!v15);
LABEL_391:
            uint64_t v83 = 0;
            goto LABEL_676;
          }
          char v403 = 0;
          unsigned int v404 = 0;
          uint64_t v83 = 0;
          if (v79 <= v78) {
            unint64_t v79 = *((void *)this + 1);
          }
          while (2)
          {
            if (v79 == v78)
            {
              uint64_t v83 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v405 = v78 + 1;
              char v406 = *(unsigned char *)(v80 + v78);
              *((void *)this + 1) = v405;
              v83 |= (unint64_t)(v406 & 0x7F) << v403;
              if (v406 < 0)
              {
                v403 += 7;
                unint64_t v78 = v405;
                BOOL v15 = v404++ > 8;
                if (v15) {
                  goto LABEL_391;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v83 = 0;
              }
            }
            break;
          }
LABEL_676:
          *(void *)(a1 + 328) = v83;
          goto LABEL_821;
        case 0x30u:
          *v8 |= 0x20000000000uLL;
          unint64_t v86 = *((void *)this + 1);
          unint64_t v87 = *((void *)this + 2);
          uint64_t v88 = *(void *)this;
          if (v86 <= 0xFFFFFFFFFFFFFFF5 && v86 + 10 <= v87)
          {
            char v89 = 0;
            unsigned int v90 = 0;
            uint64_t v91 = 0;
            do
            {
              unint64_t v92 = v86 + 1;
              *((void *)this + 1) = v86 + 1;
              char v93 = *(unsigned char *)(v88 + v86);
              v91 |= (unint64_t)(v93 & 0x7F) << v89;
              if ((v93 & 0x80) == 0) {
                goto LABEL_680;
              }
              v89 += 7;
              unint64_t v86 = v92;
              BOOL v15 = v90++ > 8;
            }
            while (!v15);
LABEL_398:
            uint64_t v91 = 0;
            goto LABEL_680;
          }
          char v407 = 0;
          unsigned int v408 = 0;
          uint64_t v91 = 0;
          if (v87 <= v86) {
            unint64_t v87 = *((void *)this + 1);
          }
          while (2)
          {
            if (v87 == v86)
            {
              uint64_t v91 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v409 = v86 + 1;
              char v410 = *(unsigned char *)(v88 + v86);
              *((void *)this + 1) = v409;
              v91 |= (unint64_t)(v410 & 0x7F) << v407;
              if (v410 < 0)
              {
                v407 += 7;
                unint64_t v86 = v409;
                BOOL v15 = v408++ > 8;
                if (v15) {
                  goto LABEL_398;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v91 = 0;
              }
            }
            break;
          }
LABEL_680:
          *(void *)(a1 + 336) = v91;
          goto LABEL_821;
        case 0x31u:
          *v8 |= 0x80000000000uLL;
          unint64_t v94 = *((void *)this + 1);
          unint64_t v95 = *((void *)this + 2);
          uint64_t v96 = *(void *)this;
          if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
          {
            char v97 = 0;
            unsigned int v98 = 0;
            uint64_t v99 = 0;
            do
            {
              unint64_t v100 = v94 + 1;
              *((void *)this + 1) = v94 + 1;
              char v101 = *(unsigned char *)(v96 + v94);
              v99 |= (unint64_t)(v101 & 0x7F) << v97;
              if ((v101 & 0x80) == 0) {
                goto LABEL_684;
              }
              v97 += 7;
              unint64_t v94 = v100;
              BOOL v15 = v98++ > 8;
            }
            while (!v15);
LABEL_405:
            uint64_t v99 = 0;
            goto LABEL_684;
          }
          char v411 = 0;
          unsigned int v412 = 0;
          uint64_t v99 = 0;
          if (v95 <= v94) {
            unint64_t v95 = *((void *)this + 1);
          }
          while (2)
          {
            if (v95 == v94)
            {
              uint64_t v99 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v413 = v94 + 1;
              char v414 = *(unsigned char *)(v96 + v94);
              *((void *)this + 1) = v413;
              v99 |= (unint64_t)(v414 & 0x7F) << v411;
              if (v414 < 0)
              {
                v411 += 7;
                unint64_t v94 = v413;
                BOOL v15 = v412++ > 8;
                if (v15) {
                  goto LABEL_405;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v99 = 0;
              }
            }
            break;
          }
LABEL_684:
          *(void *)(a1 + 352) = v99;
          goto LABEL_821;
        case 0x32u:
          *v8 |= 0x100000000000uLL;
          unint64_t v102 = *((void *)this + 1);
          unint64_t v103 = *((void *)this + 2);
          uint64_t v104 = *(void *)this;
          if (v102 <= 0xFFFFFFFFFFFFFFF5 && v102 + 10 <= v103)
          {
            char v105 = 0;
            unsigned int v106 = 0;
            uint64_t v107 = 0;
            do
            {
              unint64_t v108 = v102 + 1;
              *((void *)this + 1) = v102 + 1;
              char v109 = *(unsigned char *)(v104 + v102);
              v107 |= (unint64_t)(v109 & 0x7F) << v105;
              if ((v109 & 0x80) == 0) {
                goto LABEL_688;
              }
              v105 += 7;
              unint64_t v102 = v108;
              BOOL v15 = v106++ > 8;
            }
            while (!v15);
LABEL_412:
            LODWORD(v107) = 0;
            goto LABEL_688;
          }
          char v415 = 0;
          unsigned int v416 = 0;
          uint64_t v107 = 0;
          if (v103 <= v102) {
            unint64_t v103 = *((void *)this + 1);
          }
          while (2)
          {
            if (v103 == v102)
            {
              LODWORD(v107) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v417 = v102 + 1;
              char v418 = *(unsigned char *)(v104 + v102);
              *((void *)this + 1) = v417;
              v107 |= (unint64_t)(v418 & 0x7F) << v415;
              if (v418 < 0)
              {
                v415 += 7;
                unint64_t v102 = v417;
                BOOL v15 = v416++ > 8;
                if (v15) {
                  goto LABEL_412;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v107) = 0;
              }
            }
            break;
          }
LABEL_688:
          *(_DWORD *)(a1 + 360) = v107;
          goto LABEL_821;
        case 0x33u:
          *v8 |= 0x1000000uLL;
          unint64_t v110 = *((void *)this + 1);
          unint64_t v111 = *((void *)this + 2);
          uint64_t v112 = *(void *)this;
          if (v110 <= 0xFFFFFFFFFFFFFFF5 && v110 + 10 <= v111)
          {
            char v113 = 0;
            unsigned int v114 = 0;
            uint64_t v115 = 0;
            do
            {
              unint64_t v116 = v110 + 1;
              *((void *)this + 1) = v110 + 1;
              char v117 = *(unsigned char *)(v112 + v110);
              v115 |= (unint64_t)(v117 & 0x7F) << v113;
              if ((v117 & 0x80) == 0) {
                goto LABEL_692;
              }
              v113 += 7;
              unint64_t v110 = v116;
              BOOL v15 = v114++ > 8;
            }
            while (!v15);
LABEL_419:
            uint64_t v115 = 0;
            goto LABEL_692;
          }
          char v419 = 0;
          unsigned int v420 = 0;
          uint64_t v115 = 0;
          if (v111 <= v110) {
            unint64_t v111 = *((void *)this + 1);
          }
          while (2)
          {
            if (v111 == v110)
            {
              uint64_t v115 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v421 = v110 + 1;
              char v422 = *(unsigned char *)(v112 + v110);
              *((void *)this + 1) = v421;
              v115 |= (unint64_t)(v422 & 0x7F) << v419;
              if (v422 < 0)
              {
                v419 += 7;
                unint64_t v110 = v421;
                BOOL v15 = v420++ > 8;
                if (v15) {
                  goto LABEL_419;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v115 = 0;
              }
            }
            break;
          }
LABEL_692:
          *(void *)(a1 + 200) = v115;
          goto LABEL_821;
        case 0x34u:
          *v8 |= 0x8000000uLL;
          unint64_t v118 = *((void *)this + 1);
          unint64_t v119 = *((void *)this + 2);
          uint64_t v120 = *(void *)this;
          if (v118 <= 0xFFFFFFFFFFFFFFF5 && v118 + 10 <= v119)
          {
            char v121 = 0;
            unsigned int v122 = 0;
            uint64_t v123 = 0;
            do
            {
              unint64_t v124 = v118 + 1;
              *((void *)this + 1) = v118 + 1;
              char v125 = *(unsigned char *)(v120 + v118);
              v123 |= (unint64_t)(v125 & 0x7F) << v121;
              if ((v125 & 0x80) == 0) {
                goto LABEL_696;
              }
              v121 += 7;
              unint64_t v118 = v124;
              BOOL v15 = v122++ > 8;
            }
            while (!v15);
LABEL_426:
            uint64_t v123 = 0;
            goto LABEL_696;
          }
          char v423 = 0;
          unsigned int v424 = 0;
          uint64_t v123 = 0;
          if (v119 <= v118) {
            unint64_t v119 = *((void *)this + 1);
          }
          while (2)
          {
            if (v119 == v118)
            {
              uint64_t v123 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v425 = v118 + 1;
              char v426 = *(unsigned char *)(v120 + v118);
              *((void *)this + 1) = v425;
              v123 |= (unint64_t)(v426 & 0x7F) << v423;
              if (v426 < 0)
              {
                v423 += 7;
                unint64_t v118 = v425;
                BOOL v15 = v424++ > 8;
                if (v15) {
                  goto LABEL_426;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v123 = 0;
              }
            }
            break;
          }
LABEL_696:
          *(void *)(a1 + 224) = v123;
          goto LABEL_821;
        case 0x35u:
          *v8 |= 0x2000000uLL;
          unint64_t v126 = *((void *)this + 1);
          unint64_t v127 = *((void *)this + 2);
          uint64_t v128 = *(void *)this;
          if (v126 <= 0xFFFFFFFFFFFFFFF5 && v126 + 10 <= v127)
          {
            char v129 = 0;
            unsigned int v130 = 0;
            uint64_t v131 = 0;
            do
            {
              unint64_t v132 = v126 + 1;
              *((void *)this + 1) = v126 + 1;
              char v133 = *(unsigned char *)(v128 + v126);
              v131 |= (unint64_t)(v133 & 0x7F) << v129;
              if ((v133 & 0x80) == 0) {
                goto LABEL_700;
              }
              v129 += 7;
              unint64_t v126 = v132;
              BOOL v15 = v130++ > 8;
            }
            while (!v15);
LABEL_433:
            uint64_t v131 = 0;
            goto LABEL_700;
          }
          char v427 = 0;
          unsigned int v428 = 0;
          uint64_t v131 = 0;
          if (v127 <= v126) {
            unint64_t v127 = *((void *)this + 1);
          }
          while (2)
          {
            if (v127 == v126)
            {
              uint64_t v131 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v429 = v126 + 1;
              char v430 = *(unsigned char *)(v128 + v126);
              *((void *)this + 1) = v429;
              v131 |= (unint64_t)(v430 & 0x7F) << v427;
              if (v430 < 0)
              {
                v427 += 7;
                unint64_t v126 = v429;
                BOOL v15 = v428++ > 8;
                if (v15) {
                  goto LABEL_433;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v131 = 0;
              }
            }
            break;
          }
LABEL_700:
          *(void *)(a1 + 208) = v131;
          goto LABEL_821;
        case 0x36u:
          *v8 |= 0x4000000uLL;
          unint64_t v134 = *((void *)this + 1);
          unint64_t v135 = *((void *)this + 2);
          uint64_t v136 = *(void *)this;
          if (v134 <= 0xFFFFFFFFFFFFFFF5 && v134 + 10 <= v135)
          {
            char v137 = 0;
            unsigned int v138 = 0;
            uint64_t v139 = 0;
            do
            {
              unint64_t v140 = v134 + 1;
              *((void *)this + 1) = v134 + 1;
              char v141 = *(unsigned char *)(v136 + v134);
              v139 |= (unint64_t)(v141 & 0x7F) << v137;
              if ((v141 & 0x80) == 0) {
                goto LABEL_704;
              }
              v137 += 7;
              unint64_t v134 = v140;
              BOOL v15 = v138++ > 8;
            }
            while (!v15);
LABEL_440:
            uint64_t v139 = 0;
            goto LABEL_704;
          }
          char v431 = 0;
          unsigned int v432 = 0;
          uint64_t v139 = 0;
          if (v135 <= v134) {
            unint64_t v135 = *((void *)this + 1);
          }
          while (2)
          {
            if (v135 == v134)
            {
              uint64_t v139 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v433 = v134 + 1;
              char v434 = *(unsigned char *)(v136 + v134);
              *((void *)this + 1) = v433;
              v139 |= (unint64_t)(v434 & 0x7F) << v431;
              if (v434 < 0)
              {
                v431 += 7;
                unint64_t v134 = v433;
                BOOL v15 = v432++ > 8;
                if (v15) {
                  goto LABEL_440;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v139 = 0;
              }
            }
            break;
          }
LABEL_704:
          *(void *)(a1 + 216) = v139;
          goto LABEL_821;
        case 0x37u:
          *v8 |= 0x400000uLL;
          unint64_t v142 = *((void *)this + 1);
          unint64_t v143 = *((void *)this + 2);
          uint64_t v144 = *(void *)this;
          if (v142 <= 0xFFFFFFFFFFFFFFF5 && v142 + 10 <= v143)
          {
            char v145 = 0;
            unsigned int v146 = 0;
            uint64_t v147 = 0;
            do
            {
              unint64_t v148 = v142 + 1;
              *((void *)this + 1) = v142 + 1;
              char v149 = *(unsigned char *)(v144 + v142);
              v147 |= (unint64_t)(v149 & 0x7F) << v145;
              if ((v149 & 0x80) == 0) {
                goto LABEL_708;
              }
              v145 += 7;
              unint64_t v142 = v148;
              BOOL v15 = v146++ > 8;
            }
            while (!v15);
LABEL_447:
            uint64_t v147 = 0;
            goto LABEL_708;
          }
          char v435 = 0;
          unsigned int v436 = 0;
          uint64_t v147 = 0;
          if (v143 <= v142) {
            unint64_t v143 = *((void *)this + 1);
          }
          while (2)
          {
            if (v143 == v142)
            {
              uint64_t v147 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v437 = v142 + 1;
              char v438 = *(unsigned char *)(v144 + v142);
              *((void *)this + 1) = v437;
              v147 |= (unint64_t)(v438 & 0x7F) << v435;
              if (v438 < 0)
              {
                v435 += 7;
                unint64_t v142 = v437;
                BOOL v15 = v436++ > 8;
                if (v15) {
                  goto LABEL_447;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v147 = 0;
              }
            }
            break;
          }
LABEL_708:
          *(void *)(a1 + 184) = v147;
          goto LABEL_821;
        case 0x38u:
          *v8 |= 0x800000uLL;
          unint64_t v150 = *((void *)this + 1);
          unint64_t v151 = *((void *)this + 2);
          uint64_t v152 = *(void *)this;
          if (v150 <= 0xFFFFFFFFFFFFFFF5 && v150 + 10 <= v151)
          {
            char v153 = 0;
            unsigned int v154 = 0;
            uint64_t v155 = 0;
            do
            {
              unint64_t v156 = v150 + 1;
              *((void *)this + 1) = v150 + 1;
              char v157 = *(unsigned char *)(v152 + v150);
              v155 |= (unint64_t)(v157 & 0x7F) << v153;
              if ((v157 & 0x80) == 0) {
                goto LABEL_712;
              }
              v153 += 7;
              unint64_t v150 = v156;
              BOOL v15 = v154++ > 8;
            }
            while (!v15);
LABEL_454:
            uint64_t v155 = 0;
            goto LABEL_712;
          }
          char v439 = 0;
          unsigned int v440 = 0;
          uint64_t v155 = 0;
          if (v151 <= v150) {
            unint64_t v151 = *((void *)this + 1);
          }
          while (2)
          {
            if (v151 == v150)
            {
              uint64_t v155 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v441 = v150 + 1;
              char v442 = *(unsigned char *)(v152 + v150);
              *((void *)this + 1) = v441;
              v155 |= (unint64_t)(v442 & 0x7F) << v439;
              if (v442 < 0)
              {
                v439 += 7;
                unint64_t v150 = v441;
                BOOL v15 = v440++ > 8;
                if (v15) {
                  goto LABEL_454;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v155 = 0;
              }
            }
            break;
          }
LABEL_712:
          *(void *)(a1 + 192) = v155;
          goto LABEL_821;
        case 0x3Bu:
          *v8 |= 0x20uLL;
          unint64_t v158 = *((void *)this + 1);
          unint64_t v159 = *((void *)this + 2);
          uint64_t v160 = *(void *)this;
          if (v158 <= 0xFFFFFFFFFFFFFFF5 && v158 + 10 <= v159)
          {
            char v161 = 0;
            unsigned int v162 = 0;
            uint64_t v163 = 0;
            do
            {
              unint64_t v164 = v158 + 1;
              *((void *)this + 1) = v158 + 1;
              char v165 = *(unsigned char *)(v160 + v158);
              v163 |= (unint64_t)(v165 & 0x7F) << v161;
              if ((v165 & 0x80) == 0) {
                goto LABEL_716;
              }
              v161 += 7;
              unint64_t v158 = v164;
              BOOL v15 = v162++ > 8;
            }
            while (!v15);
LABEL_461:
            uint64_t v163 = 0;
            goto LABEL_716;
          }
          char v443 = 0;
          unsigned int v444 = 0;
          uint64_t v163 = 0;
          if (v159 <= v158) {
            unint64_t v159 = *((void *)this + 1);
          }
          while (2)
          {
            if (v159 == v158)
            {
              uint64_t v163 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v445 = v158 + 1;
              char v446 = *(unsigned char *)(v160 + v158);
              *((void *)this + 1) = v445;
              v163 |= (unint64_t)(v446 & 0x7F) << v443;
              if (v446 < 0)
              {
                v443 += 7;
                unint64_t v158 = v445;
                BOOL v15 = v444++ > 8;
                if (v15) {
                  goto LABEL_461;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v163 = 0;
              }
            }
            break;
          }
LABEL_716:
          *(void *)(a1 + 48) = v163;
          goto LABEL_821;
        case 0x3Cu:
          *v8 |= 8uLL;
          unint64_t v166 = *((void *)this + 1);
          unint64_t v167 = *((void *)this + 2);
          uint64_t v168 = *(void *)this;
          if (v166 <= 0xFFFFFFFFFFFFFFF5 && v166 + 10 <= v167)
          {
            char v169 = 0;
            unsigned int v170 = 0;
            uint64_t v171 = 0;
            do
            {
              unint64_t v172 = v166 + 1;
              *((void *)this + 1) = v166 + 1;
              char v173 = *(unsigned char *)(v168 + v166);
              v171 |= (unint64_t)(v173 & 0x7F) << v169;
              if ((v173 & 0x80) == 0) {
                goto LABEL_720;
              }
              v169 += 7;
              unint64_t v166 = v172;
              BOOL v15 = v170++ > 8;
            }
            while (!v15);
LABEL_468:
            uint64_t v171 = 0;
            goto LABEL_720;
          }
          char v447 = 0;
          unsigned int v448 = 0;
          uint64_t v171 = 0;
          if (v167 <= v166) {
            unint64_t v167 = *((void *)this + 1);
          }
          while (2)
          {
            if (v167 == v166)
            {
              uint64_t v171 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v449 = v166 + 1;
              char v450 = *(unsigned char *)(v168 + v166);
              *((void *)this + 1) = v449;
              v171 |= (unint64_t)(v450 & 0x7F) << v447;
              if (v450 < 0)
              {
                v447 += 7;
                unint64_t v166 = v449;
                BOOL v15 = v448++ > 8;
                if (v15) {
                  goto LABEL_468;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v171 = 0;
              }
            }
            break;
          }
LABEL_720:
          *(void *)(a1 + 32) = v171;
          goto LABEL_821;
        case 0x3Du:
          *v8 |= 1uLL;
          unint64_t v174 = *((void *)this + 1);
          unint64_t v175 = *((void *)this + 2);
          uint64_t v176 = *(void *)this;
          if (v174 <= 0xFFFFFFFFFFFFFFF5 && v174 + 10 <= v175)
          {
            char v177 = 0;
            unsigned int v178 = 0;
            uint64_t v179 = 0;
            do
            {
              unint64_t v180 = v174 + 1;
              *((void *)this + 1) = v174 + 1;
              char v181 = *(unsigned char *)(v176 + v174);
              v179 |= (unint64_t)(v181 & 0x7F) << v177;
              if ((v181 & 0x80) == 0) {
                goto LABEL_724;
              }
              v177 += 7;
              unint64_t v174 = v180;
              BOOL v15 = v178++ > 8;
            }
            while (!v15);
LABEL_475:
            uint64_t v179 = 0;
            goto LABEL_724;
          }
          char v451 = 0;
          unsigned int v452 = 0;
          uint64_t v179 = 0;
          if (v175 <= v174) {
            unint64_t v175 = *((void *)this + 1);
          }
          while (2)
          {
            if (v175 == v174)
            {
              uint64_t v179 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v453 = v174 + 1;
              char v454 = *(unsigned char *)(v176 + v174);
              *((void *)this + 1) = v453;
              v179 |= (unint64_t)(v454 & 0x7F) << v451;
              if (v454 < 0)
              {
                v451 += 7;
                unint64_t v174 = v453;
                BOOL v15 = v452++ > 8;
                if (v15) {
                  goto LABEL_475;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v179 = 0;
              }
            }
            break;
          }
LABEL_724:
          *(void *)(a1 + 8) = v179;
          goto LABEL_821;
        case 0x3Eu:
          *v8 |= 0x40uLL;
          unint64_t v182 = *((void *)this + 1);
          unint64_t v183 = *((void *)this + 2);
          uint64_t v184 = *(void *)this;
          if (v182 <= 0xFFFFFFFFFFFFFFF5 && v182 + 10 <= v183)
          {
            char v185 = 0;
            unsigned int v186 = 0;
            uint64_t v187 = 0;
            do
            {
              unint64_t v188 = v182 + 1;
              *((void *)this + 1) = v182 + 1;
              char v189 = *(unsigned char *)(v184 + v182);
              v187 |= (unint64_t)(v189 & 0x7F) << v185;
              if ((v189 & 0x80) == 0) {
                goto LABEL_728;
              }
              v185 += 7;
              unint64_t v182 = v188;
              BOOL v15 = v186++ > 8;
            }
            while (!v15);
LABEL_482:
            uint64_t v187 = 0;
            goto LABEL_728;
          }
          char v455 = 0;
          unsigned int v456 = 0;
          uint64_t v187 = 0;
          if (v183 <= v182) {
            unint64_t v183 = *((void *)this + 1);
          }
          while (2)
          {
            if (v183 == v182)
            {
              uint64_t v187 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v457 = v182 + 1;
              char v458 = *(unsigned char *)(v184 + v182);
              *((void *)this + 1) = v457;
              v187 |= (unint64_t)(v458 & 0x7F) << v455;
              if (v458 < 0)
              {
                v455 += 7;
                unint64_t v182 = v457;
                BOOL v15 = v456++ > 8;
                if (v15) {
                  goto LABEL_482;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v187 = 0;
              }
            }
            break;
          }
LABEL_728:
          *(void *)(a1 + 56) = v187;
          goto LABEL_821;
        case 0x3Fu:
          *v8 |= 0x100uLL;
          unint64_t v190 = *((void *)this + 1);
          unint64_t v191 = *((void *)this + 2);
          uint64_t v192 = *(void *)this;
          if (v190 <= 0xFFFFFFFFFFFFFFF5 && v190 + 10 <= v191)
          {
            char v193 = 0;
            unsigned int v194 = 0;
            uint64_t v195 = 0;
            do
            {
              unint64_t v196 = v190 + 1;
              *((void *)this + 1) = v190 + 1;
              char v197 = *(unsigned char *)(v192 + v190);
              v195 |= (unint64_t)(v197 & 0x7F) << v193;
              if ((v197 & 0x80) == 0) {
                goto LABEL_732;
              }
              v193 += 7;
              unint64_t v190 = v196;
              BOOL v15 = v194++ > 8;
            }
            while (!v15);
LABEL_489:
            uint64_t v195 = 0;
            goto LABEL_732;
          }
          char v459 = 0;
          unsigned int v460 = 0;
          uint64_t v195 = 0;
          if (v191 <= v190) {
            unint64_t v191 = *((void *)this + 1);
          }
          while (2)
          {
            if (v191 == v190)
            {
              uint64_t v195 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v461 = v190 + 1;
              char v462 = *(unsigned char *)(v192 + v190);
              *((void *)this + 1) = v461;
              v195 |= (unint64_t)(v462 & 0x7F) << v459;
              if (v462 < 0)
              {
                v459 += 7;
                unint64_t v190 = v461;
                BOOL v15 = v460++ > 8;
                if (v15) {
                  goto LABEL_489;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v195 = 0;
              }
            }
            break;
          }
LABEL_732:
          *(void *)(a1 + 72) = v195;
          goto LABEL_821;
        case 0x40u:
          *v8 |= 0x10uLL;
          unint64_t v198 = *((void *)this + 1);
          unint64_t v199 = *((void *)this + 2);
          uint64_t v200 = *(void *)this;
          if (v198 <= 0xFFFFFFFFFFFFFFF5 && v198 + 10 <= v199)
          {
            char v201 = 0;
            unsigned int v202 = 0;
            uint64_t v203 = 0;
            do
            {
              unint64_t v204 = v198 + 1;
              *((void *)this + 1) = v198 + 1;
              char v205 = *(unsigned char *)(v200 + v198);
              v203 |= (unint64_t)(v205 & 0x7F) << v201;
              if ((v205 & 0x80) == 0) {
                goto LABEL_736;
              }
              v201 += 7;
              unint64_t v198 = v204;
              BOOL v15 = v202++ > 8;
            }
            while (!v15);
LABEL_496:
            uint64_t v203 = 0;
            goto LABEL_736;
          }
          char v463 = 0;
          unsigned int v464 = 0;
          uint64_t v203 = 0;
          if (v199 <= v198) {
            unint64_t v199 = *((void *)this + 1);
          }
          while (2)
          {
            if (v199 == v198)
            {
              uint64_t v203 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v465 = v198 + 1;
              char v466 = *(unsigned char *)(v200 + v198);
              *((void *)this + 1) = v465;
              v203 |= (unint64_t)(v466 & 0x7F) << v463;
              if (v466 < 0)
              {
                v463 += 7;
                unint64_t v198 = v465;
                BOOL v15 = v464++ > 8;
                if (v15) {
                  goto LABEL_496;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v203 = 0;
              }
            }
            break;
          }
LABEL_736:
          *(void *)(a1 + 40) = v203;
          goto LABEL_821;
        case 0x41u:
          *v8 |= 0x200uLL;
          unint64_t v206 = *((void *)this + 1);
          unint64_t v207 = *((void *)this + 2);
          uint64_t v208 = *(void *)this;
          if (v206 <= 0xFFFFFFFFFFFFFFF5 && v206 + 10 <= v207)
          {
            char v209 = 0;
            unsigned int v210 = 0;
            uint64_t v211 = 0;
            do
            {
              unint64_t v212 = v206 + 1;
              *((void *)this + 1) = v206 + 1;
              char v213 = *(unsigned char *)(v208 + v206);
              v211 |= (unint64_t)(v213 & 0x7F) << v209;
              if ((v213 & 0x80) == 0) {
                goto LABEL_740;
              }
              v209 += 7;
              unint64_t v206 = v212;
              BOOL v15 = v210++ > 8;
            }
            while (!v15);
LABEL_503:
            uint64_t v211 = 0;
            goto LABEL_740;
          }
          char v467 = 0;
          unsigned int v468 = 0;
          uint64_t v211 = 0;
          if (v207 <= v206) {
            unint64_t v207 = *((void *)this + 1);
          }
          while (2)
          {
            if (v207 == v206)
            {
              uint64_t v211 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v469 = v206 + 1;
              char v470 = *(unsigned char *)(v208 + v206);
              *((void *)this + 1) = v469;
              v211 |= (unint64_t)(v470 & 0x7F) << v467;
              if (v470 < 0)
              {
                v467 += 7;
                unint64_t v206 = v469;
                BOOL v15 = v468++ > 8;
                if (v15) {
                  goto LABEL_503;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v211 = 0;
              }
            }
            break;
          }
LABEL_740:
          *(void *)(a1 + 80) = v211;
          goto LABEL_821;
        case 0x42u:
          *v8 |= 0x400uLL;
          unint64_t v214 = *((void *)this + 1);
          unint64_t v215 = *((void *)this + 2);
          uint64_t v216 = *(void *)this;
          if (v214 <= 0xFFFFFFFFFFFFFFF5 && v214 + 10 <= v215)
          {
            char v217 = 0;
            unsigned int v218 = 0;
            uint64_t v219 = 0;
            do
            {
              unint64_t v220 = v214 + 1;
              *((void *)this + 1) = v214 + 1;
              char v221 = *(unsigned char *)(v216 + v214);
              v219 |= (unint64_t)(v221 & 0x7F) << v217;
              if ((v221 & 0x80) == 0) {
                goto LABEL_744;
              }
              v217 += 7;
              unint64_t v214 = v220;
              BOOL v15 = v218++ > 8;
            }
            while (!v15);
LABEL_510:
            uint64_t v219 = 0;
            goto LABEL_744;
          }
          char v471 = 0;
          unsigned int v472 = 0;
          uint64_t v219 = 0;
          if (v215 <= v214) {
            unint64_t v215 = *((void *)this + 1);
          }
          while (2)
          {
            if (v215 == v214)
            {
              uint64_t v219 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v473 = v214 + 1;
              char v474 = *(unsigned char *)(v216 + v214);
              *((void *)this + 1) = v473;
              v219 |= (unint64_t)(v474 & 0x7F) << v471;
              if (v474 < 0)
              {
                v471 += 7;
                unint64_t v214 = v473;
                BOOL v15 = v472++ > 8;
                if (v15) {
                  goto LABEL_510;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v219 = 0;
              }
            }
            break;
          }
LABEL_744:
          *(void *)(a1 + 88) = v219;
          goto LABEL_821;
        case 0x43u:
          *v8 |= 0x800uLL;
          unint64_t v222 = *((void *)this + 1);
          unint64_t v223 = *((void *)this + 2);
          uint64_t v224 = *(void *)this;
          if (v222 <= 0xFFFFFFFFFFFFFFF5 && v222 + 10 <= v223)
          {
            char v225 = 0;
            unsigned int v226 = 0;
            uint64_t v227 = 0;
            do
            {
              unint64_t v228 = v222 + 1;
              *((void *)this + 1) = v222 + 1;
              char v229 = *(unsigned char *)(v224 + v222);
              v227 |= (unint64_t)(v229 & 0x7F) << v225;
              if ((v229 & 0x80) == 0) {
                goto LABEL_748;
              }
              v225 += 7;
              unint64_t v222 = v228;
              BOOL v15 = v226++ > 8;
            }
            while (!v15);
LABEL_517:
            uint64_t v227 = 0;
            goto LABEL_748;
          }
          char v475 = 0;
          unsigned int v476 = 0;
          uint64_t v227 = 0;
          if (v223 <= v222) {
            unint64_t v223 = *((void *)this + 1);
          }
          while (2)
          {
            if (v223 == v222)
            {
              uint64_t v227 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v477 = v222 + 1;
              char v478 = *(unsigned char *)(v224 + v222);
              *((void *)this + 1) = v477;
              v227 |= (unint64_t)(v478 & 0x7F) << v475;
              if (v478 < 0)
              {
                v475 += 7;
                unint64_t v222 = v477;
                BOOL v15 = v476++ > 8;
                if (v15) {
                  goto LABEL_517;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v227 = 0;
              }
            }
            break;
          }
LABEL_748:
          *(void *)(a1 + 96) = v227;
          goto LABEL_821;
        case 0x44u:
          *v8 |= 0x4000uLL;
          unint64_t v230 = *((void *)this + 1);
          unint64_t v231 = *((void *)this + 2);
          uint64_t v232 = *(void *)this;
          if (v230 <= 0xFFFFFFFFFFFFFFF5 && v230 + 10 <= v231)
          {
            char v233 = 0;
            unsigned int v234 = 0;
            uint64_t v235 = 0;
            do
            {
              unint64_t v236 = v230 + 1;
              *((void *)this + 1) = v230 + 1;
              char v237 = *(unsigned char *)(v232 + v230);
              v235 |= (unint64_t)(v237 & 0x7F) << v233;
              if ((v237 & 0x80) == 0) {
                goto LABEL_752;
              }
              v233 += 7;
              unint64_t v230 = v236;
              BOOL v15 = v234++ > 8;
            }
            while (!v15);
LABEL_524:
            uint64_t v235 = 0;
            goto LABEL_752;
          }
          char v479 = 0;
          unsigned int v480 = 0;
          uint64_t v235 = 0;
          if (v231 <= v230) {
            unint64_t v231 = *((void *)this + 1);
          }
          while (2)
          {
            if (v231 == v230)
            {
              uint64_t v235 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v481 = v230 + 1;
              char v482 = *(unsigned char *)(v232 + v230);
              *((void *)this + 1) = v481;
              v235 |= (unint64_t)(v482 & 0x7F) << v479;
              if (v482 < 0)
              {
                v479 += 7;
                unint64_t v230 = v481;
                BOOL v15 = v480++ > 8;
                if (v15) {
                  goto LABEL_524;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v235 = 0;
              }
            }
            break;
          }
LABEL_752:
          *(void *)(a1 + 120) = v235;
          goto LABEL_821;
        case 0x45u:
          *v8 |= 2uLL;
          unint64_t v238 = *((void *)this + 1);
          unint64_t v239 = *((void *)this + 2);
          uint64_t v240 = *(void *)this;
          if (v238 <= 0xFFFFFFFFFFFFFFF5 && v238 + 10 <= v239)
          {
            char v241 = 0;
            unsigned int v242 = 0;
            uint64_t v243 = 0;
            do
            {
              unint64_t v244 = v238 + 1;
              *((void *)this + 1) = v238 + 1;
              char v245 = *(unsigned char *)(v240 + v238);
              v243 |= (unint64_t)(v245 & 0x7F) << v241;
              if ((v245 & 0x80) == 0) {
                goto LABEL_756;
              }
              v241 += 7;
              unint64_t v238 = v244;
              BOOL v15 = v242++ > 8;
            }
            while (!v15);
LABEL_531:
            uint64_t v243 = 0;
            goto LABEL_756;
          }
          char v483 = 0;
          unsigned int v484 = 0;
          uint64_t v243 = 0;
          if (v239 <= v238) {
            unint64_t v239 = *((void *)this + 1);
          }
          while (2)
          {
            if (v239 == v238)
            {
              uint64_t v243 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v485 = v238 + 1;
              char v486 = *(unsigned char *)(v240 + v238);
              *((void *)this + 1) = v485;
              v243 |= (unint64_t)(v486 & 0x7F) << v483;
              if (v486 < 0)
              {
                v483 += 7;
                unint64_t v238 = v485;
                BOOL v15 = v484++ > 8;
                if (v15) {
                  goto LABEL_531;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v243 = 0;
              }
            }
            break;
          }
LABEL_756:
          *(void *)(a1 + 16) = v243;
          goto LABEL_821;
        case 0x46u:
          *v8 |= 0x8000uLL;
          unint64_t v246 = *((void *)this + 1);
          unint64_t v247 = *((void *)this + 2);
          uint64_t v248 = *(void *)this;
          if (v246 <= 0xFFFFFFFFFFFFFFF5 && v246 + 10 <= v247)
          {
            char v249 = 0;
            unsigned int v250 = 0;
            uint64_t v251 = 0;
            do
            {
              unint64_t v252 = v246 + 1;
              *((void *)this + 1) = v246 + 1;
              char v253 = *(unsigned char *)(v248 + v246);
              v251 |= (unint64_t)(v253 & 0x7F) << v249;
              if ((v253 & 0x80) == 0) {
                goto LABEL_760;
              }
              v249 += 7;
              unint64_t v246 = v252;
              BOOL v15 = v250++ > 8;
            }
            while (!v15);
LABEL_538:
            uint64_t v251 = 0;
            goto LABEL_760;
          }
          char v487 = 0;
          unsigned int v488 = 0;
          uint64_t v251 = 0;
          if (v247 <= v246) {
            unint64_t v247 = *((void *)this + 1);
          }
          while (2)
          {
            if (v247 == v246)
            {
              uint64_t v251 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v489 = v246 + 1;
              char v490 = *(unsigned char *)(v248 + v246);
              *((void *)this + 1) = v489;
              v251 |= (unint64_t)(v490 & 0x7F) << v487;
              if (v490 < 0)
              {
                v487 += 7;
                unint64_t v246 = v489;
                BOOL v15 = v488++ > 8;
                if (v15) {
                  goto LABEL_538;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v251 = 0;
              }
            }
            break;
          }
LABEL_760:
          *(void *)(a1 + 128) = v251;
          goto LABEL_821;
        case 0x47u:
          *v8 |= 0x800000000uLL;
          unint64_t v254 = *((void *)this + 1);
          unint64_t v255 = *((void *)this + 2);
          uint64_t v256 = *(void *)this;
          if (v254 <= 0xFFFFFFFFFFFFFFF5 && v254 + 10 <= v255)
          {
            char v257 = 0;
            unsigned int v258 = 0;
            uint64_t v259 = 0;
            do
            {
              unint64_t v260 = v254 + 1;
              *((void *)this + 1) = v254 + 1;
              char v261 = *(unsigned char *)(v256 + v254);
              v259 |= (unint64_t)(v261 & 0x7F) << v257;
              if ((v261 & 0x80) == 0) {
                goto LABEL_764;
              }
              v257 += 7;
              unint64_t v254 = v260;
              BOOL v15 = v258++ > 8;
            }
            while (!v15);
LABEL_545:
            uint64_t v259 = 0;
            goto LABEL_764;
          }
          char v491 = 0;
          unsigned int v492 = 0;
          uint64_t v259 = 0;
          if (v255 <= v254) {
            unint64_t v255 = *((void *)this + 1);
          }
          while (2)
          {
            if (v255 == v254)
            {
              uint64_t v259 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v493 = v254 + 1;
              char v494 = *(unsigned char *)(v256 + v254);
              *((void *)this + 1) = v493;
              v259 |= (unint64_t)(v494 & 0x7F) << v491;
              if (v494 < 0)
              {
                v491 += 7;
                unint64_t v254 = v493;
                BOOL v15 = v492++ > 8;
                if (v15) {
                  goto LABEL_545;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v259 = 0;
              }
            }
            break;
          }
LABEL_764:
          *(void *)(a1 + 288) = v259;
          goto LABEL_821;
        case 0x48u:
          *v8 |= 0x400000000uLL;
          unint64_t v262 = *((void *)this + 1);
          unint64_t v263 = *((void *)this + 2);
          uint64_t v264 = *(void *)this;
          if (v262 <= 0xFFFFFFFFFFFFFFF5 && v262 + 10 <= v263)
          {
            char v265 = 0;
            unsigned int v266 = 0;
            uint64_t v267 = 0;
            do
            {
              unint64_t v268 = v262 + 1;
              *((void *)this + 1) = v262 + 1;
              char v269 = *(unsigned char *)(v264 + v262);
              v267 |= (unint64_t)(v269 & 0x7F) << v265;
              if ((v269 & 0x80) == 0) {
                goto LABEL_768;
              }
              v265 += 7;
              unint64_t v262 = v268;
              BOOL v15 = v266++ > 8;
            }
            while (!v15);
LABEL_552:
            uint64_t v267 = 0;
            goto LABEL_768;
          }
          char v495 = 0;
          unsigned int v496 = 0;
          uint64_t v267 = 0;
          if (v263 <= v262) {
            unint64_t v263 = *((void *)this + 1);
          }
          while (2)
          {
            if (v263 == v262)
            {
              uint64_t v267 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v497 = v262 + 1;
              char v498 = *(unsigned char *)(v264 + v262);
              *((void *)this + 1) = v497;
              v267 |= (unint64_t)(v498 & 0x7F) << v495;
              if (v498 < 0)
              {
                v495 += 7;
                unint64_t v262 = v497;
                BOOL v15 = v496++ > 8;
                if (v15) {
                  goto LABEL_552;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v267 = 0;
              }
            }
            break;
          }
LABEL_768:
          *(void *)(a1 + 280) = v267;
          goto LABEL_821;
        case 0x49u:
          *v8 |= 0x200000000uLL;
          unint64_t v270 = *((void *)this + 1);
          unint64_t v271 = *((void *)this + 2);
          uint64_t v272 = *(void *)this;
          if (v270 <= 0xFFFFFFFFFFFFFFF5 && v270 + 10 <= v271)
          {
            char v273 = 0;
            unsigned int v274 = 0;
            uint64_t v275 = 0;
            do
            {
              unint64_t v276 = v270 + 1;
              *((void *)this + 1) = v270 + 1;
              char v277 = *(unsigned char *)(v272 + v270);
              v275 |= (unint64_t)(v277 & 0x7F) << v273;
              if ((v277 & 0x80) == 0) {
                goto LABEL_772;
              }
              v273 += 7;
              unint64_t v270 = v276;
              BOOL v15 = v274++ > 8;
            }
            while (!v15);
LABEL_559:
            uint64_t v275 = 0;
            goto LABEL_772;
          }
          char v499 = 0;
          unsigned int v500 = 0;
          uint64_t v275 = 0;
          if (v271 <= v270) {
            unint64_t v271 = *((void *)this + 1);
          }
          while (2)
          {
            if (v271 == v270)
            {
              uint64_t v275 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v501 = v270 + 1;
              char v502 = *(unsigned char *)(v272 + v270);
              *((void *)this + 1) = v501;
              v275 |= (unint64_t)(v502 & 0x7F) << v499;
              if (v502 < 0)
              {
                v499 += 7;
                unint64_t v270 = v501;
                BOOL v15 = v500++ > 8;
                if (v15) {
                  goto LABEL_559;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v275 = 0;
              }
            }
            break;
          }
LABEL_772:
          *(void *)(a1 + 272) = v275;
          goto LABEL_821;
        case 0x4Au:
          *v8 |= 0x100000000uLL;
          unint64_t v278 = *((void *)this + 1);
          unint64_t v279 = *((void *)this + 2);
          uint64_t v280 = *(void *)this;
          if (v278 <= 0xFFFFFFFFFFFFFFF5 && v278 + 10 <= v279)
          {
            char v281 = 0;
            unsigned int v282 = 0;
            uint64_t v283 = 0;
            do
            {
              unint64_t v284 = v278 + 1;
              *((void *)this + 1) = v278 + 1;
              char v285 = *(unsigned char *)(v280 + v278);
              v283 |= (unint64_t)(v285 & 0x7F) << v281;
              if ((v285 & 0x80) == 0) {
                goto LABEL_776;
              }
              v281 += 7;
              unint64_t v278 = v284;
              BOOL v15 = v282++ > 8;
            }
            while (!v15);
LABEL_566:
            uint64_t v283 = 0;
            goto LABEL_776;
          }
          char v503 = 0;
          unsigned int v504 = 0;
          uint64_t v283 = 0;
          if (v279 <= v278) {
            unint64_t v279 = *((void *)this + 1);
          }
          while (2)
          {
            if (v279 == v278)
            {
              uint64_t v283 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v505 = v278 + 1;
              char v506 = *(unsigned char *)(v280 + v278);
              *((void *)this + 1) = v505;
              v283 |= (unint64_t)(v506 & 0x7F) << v503;
              if (v506 < 0)
              {
                v503 += 7;
                unint64_t v278 = v505;
                BOOL v15 = v504++ > 8;
                if (v15) {
                  goto LABEL_566;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v283 = 0;
              }
            }
            break;
          }
LABEL_776:
          *(void *)(a1 + 264) = v283;
          goto LABEL_821;
        case 0x51u:
          *v8 |= 0x20000000uLL;
          unint64_t v286 = *((void *)this + 1);
          unint64_t v287 = *((void *)this + 2);
          uint64_t v288 = *(void *)this;
          if (v286 <= 0xFFFFFFFFFFFFFFF5 && v286 + 10 <= v287)
          {
            char v289 = 0;
            unsigned int v290 = 0;
            uint64_t v291 = 0;
            do
            {
              unint64_t v292 = v286 + 1;
              *((void *)this + 1) = v286 + 1;
              char v293 = *(unsigned char *)(v288 + v286);
              v291 |= (unint64_t)(v293 & 0x7F) << v289;
              if ((v293 & 0x80) == 0) {
                goto LABEL_780;
              }
              v289 += 7;
              unint64_t v286 = v292;
              BOOL v15 = v290++ > 8;
            }
            while (!v15);
LABEL_573:
            uint64_t v291 = 0;
            goto LABEL_780;
          }
          char v507 = 0;
          unsigned int v508 = 0;
          uint64_t v291 = 0;
          if (v287 <= v286) {
            unint64_t v287 = *((void *)this + 1);
          }
          while (2)
          {
            if (v287 == v286)
            {
              uint64_t v291 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v509 = v286 + 1;
              char v510 = *(unsigned char *)(v288 + v286);
              *((void *)this + 1) = v509;
              v291 |= (unint64_t)(v510 & 0x7F) << v507;
              if (v510 < 0)
              {
                v507 += 7;
                unint64_t v286 = v509;
                BOOL v15 = v508++ > 8;
                if (v15) {
                  goto LABEL_573;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v291 = 0;
              }
            }
            break;
          }
LABEL_780:
          *(void *)(a1 + 240) = v291;
          goto LABEL_821;
        case 0x52u:
          *v8 |= 0x10000000uLL;
          unint64_t v294 = *((void *)this + 1);
          unint64_t v295 = *((void *)this + 2);
          uint64_t v296 = *(void *)this;
          if (v294 <= 0xFFFFFFFFFFFFFFF5 && v294 + 10 <= v295)
          {
            char v297 = 0;
            unsigned int v298 = 0;
            uint64_t v299 = 0;
            do
            {
              unint64_t v300 = v294 + 1;
              *((void *)this + 1) = v294 + 1;
              char v301 = *(unsigned char *)(v296 + v294);
              v299 |= (unint64_t)(v301 & 0x7F) << v297;
              if ((v301 & 0x80) == 0) {
                goto LABEL_784;
              }
              v297 += 7;
              unint64_t v294 = v300;
              BOOL v15 = v298++ > 8;
            }
            while (!v15);
LABEL_580:
            uint64_t v299 = 0;
            goto LABEL_784;
          }
          char v511 = 0;
          unsigned int v512 = 0;
          uint64_t v299 = 0;
          if (v295 <= v294) {
            unint64_t v295 = *((void *)this + 1);
          }
          while (2)
          {
            if (v295 == v294)
            {
              uint64_t v299 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v513 = v294 + 1;
              char v514 = *(unsigned char *)(v296 + v294);
              *((void *)this + 1) = v513;
              v299 |= (unint64_t)(v514 & 0x7F) << v511;
              if (v514 < 0)
              {
                v511 += 7;
                unint64_t v294 = v513;
                BOOL v15 = v512++ > 8;
                if (v15) {
                  goto LABEL_580;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v299 = 0;
              }
            }
            break;
          }
LABEL_784:
          *(void *)(a1 + 232) = v299;
          goto LABEL_821;
        case 0x53u:
          *v8 |= 0x2000uLL;
          unint64_t v302 = *((void *)this + 1);
          unint64_t v303 = *((void *)this + 2);
          uint64_t v304 = *(void *)this;
          if (v302 <= 0xFFFFFFFFFFFFFFF5 && v302 + 10 <= v303)
          {
            char v305 = 0;
            unsigned int v306 = 0;
            uint64_t v307 = 0;
            do
            {
              unint64_t v308 = v302 + 1;
              *((void *)this + 1) = v302 + 1;
              char v309 = *(unsigned char *)(v304 + v302);
              v307 |= (unint64_t)(v309 & 0x7F) << v305;
              if ((v309 & 0x80) == 0) {
                goto LABEL_788;
              }
              v305 += 7;
              unint64_t v302 = v308;
              BOOL v15 = v306++ > 8;
            }
            while (!v15);
LABEL_587:
            uint64_t v307 = 0;
            goto LABEL_788;
          }
          char v515 = 0;
          unsigned int v516 = 0;
          uint64_t v307 = 0;
          if (v303 <= v302) {
            unint64_t v303 = *((void *)this + 1);
          }
          while (2)
          {
            if (v303 == v302)
            {
              uint64_t v307 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v517 = v302 + 1;
              char v518 = *(unsigned char *)(v304 + v302);
              *((void *)this + 1) = v517;
              v307 |= (unint64_t)(v518 & 0x7F) << v515;
              if (v518 < 0)
              {
                v515 += 7;
                unint64_t v302 = v517;
                BOOL v15 = v516++ > 8;
                if (v15) {
                  goto LABEL_587;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v307 = 0;
              }
            }
            break;
          }
LABEL_788:
          *(void *)(a1 + 112) = v307;
          goto LABEL_821;
        case 0x54u:
          *v8 |= 0x10000uLL;
          unint64_t v310 = *((void *)this + 1);
          unint64_t v311 = *((void *)this + 2);
          uint64_t v312 = *(void *)this;
          if (v310 <= 0xFFFFFFFFFFFFFFF5 && v310 + 10 <= v311)
          {
            char v313 = 0;
            unsigned int v314 = 0;
            uint64_t v315 = 0;
            do
            {
              unint64_t v316 = v310 + 1;
              *((void *)this + 1) = v310 + 1;
              char v317 = *(unsigned char *)(v312 + v310);
              v315 |= (unint64_t)(v317 & 0x7F) << v313;
              if ((v317 & 0x80) == 0) {
                goto LABEL_792;
              }
              v313 += 7;
              unint64_t v310 = v316;
              BOOL v15 = v314++ > 8;
            }
            while (!v15);
LABEL_594:
            uint64_t v315 = 0;
            goto LABEL_792;
          }
          char v519 = 0;
          unsigned int v520 = 0;
          uint64_t v315 = 0;
          if (v311 <= v310) {
            unint64_t v311 = *((void *)this + 1);
          }
          while (2)
          {
            if (v311 == v310)
            {
              uint64_t v315 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v521 = v310 + 1;
              char v522 = *(unsigned char *)(v312 + v310);
              *((void *)this + 1) = v521;
              v315 |= (unint64_t)(v522 & 0x7F) << v519;
              if (v522 < 0)
              {
                v519 += 7;
                unint64_t v310 = v521;
                BOOL v15 = v520++ > 8;
                if (v15) {
                  goto LABEL_594;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v315 = 0;
              }
            }
            break;
          }
LABEL_792:
          *(void *)(a1 + 136) = v315;
          goto LABEL_821;
        case 0x55u:
          *v8 |= 4uLL;
          unint64_t v318 = *((void *)this + 1);
          unint64_t v319 = *((void *)this + 2);
          uint64_t v320 = *(void *)this;
          if (v318 <= 0xFFFFFFFFFFFFFFF5 && v318 + 10 <= v319)
          {
            char v321 = 0;
            unsigned int v322 = 0;
            uint64_t v323 = 0;
            do
            {
              unint64_t v324 = v318 + 1;
              *((void *)this + 1) = v318 + 1;
              char v325 = *(unsigned char *)(v320 + v318);
              v323 |= (unint64_t)(v325 & 0x7F) << v321;
              if ((v325 & 0x80) == 0) {
                goto LABEL_796;
              }
              v321 += 7;
              unint64_t v318 = v324;
              BOOL v15 = v322++ > 8;
            }
            while (!v15);
LABEL_601:
            uint64_t v323 = 0;
            goto LABEL_796;
          }
          char v523 = 0;
          unsigned int v524 = 0;
          uint64_t v323 = 0;
          if (v319 <= v318) {
            unint64_t v319 = *((void *)this + 1);
          }
          while (2)
          {
            if (v319 == v318)
            {
              uint64_t v323 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v525 = v318 + 1;
              char v526 = *(unsigned char *)(v320 + v318);
              *((void *)this + 1) = v525;
              v323 |= (unint64_t)(v526 & 0x7F) << v523;
              if (v526 < 0)
              {
                v523 += 7;
                unint64_t v318 = v525;
                BOOL v15 = v524++ > 8;
                if (v15) {
                  goto LABEL_601;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v323 = 0;
              }
            }
            break;
          }
LABEL_796:
          *(void *)(a1 + 24) = v323;
          goto LABEL_821;
        case 0x56u:
          *v8 |= 0x40000uLL;
          unint64_t v326 = *((void *)this + 1);
          unint64_t v327 = *((void *)this + 2);
          uint64_t v328 = *(void *)this;
          if (v326 <= 0xFFFFFFFFFFFFFFF5 && v326 + 10 <= v327)
          {
            char v329 = 0;
            unsigned int v330 = 0;
            uint64_t v331 = 0;
            do
            {
              unint64_t v332 = v326 + 1;
              *((void *)this + 1) = v326 + 1;
              char v333 = *(unsigned char *)(v328 + v326);
              v331 |= (unint64_t)(v333 & 0x7F) << v329;
              if ((v333 & 0x80) == 0) {
                goto LABEL_800;
              }
              v329 += 7;
              unint64_t v326 = v332;
              BOOL v15 = v330++ > 8;
            }
            while (!v15);
LABEL_608:
            uint64_t v331 = 0;
            goto LABEL_800;
          }
          char v527 = 0;
          unsigned int v528 = 0;
          uint64_t v331 = 0;
          if (v327 <= v326) {
            unint64_t v327 = *((void *)this + 1);
          }
          while (2)
          {
            if (v327 == v326)
            {
              uint64_t v331 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v529 = v326 + 1;
              char v530 = *(unsigned char *)(v328 + v326);
              *((void *)this + 1) = v529;
              v331 |= (unint64_t)(v530 & 0x7F) << v527;
              if (v530 < 0)
              {
                v527 += 7;
                unint64_t v326 = v529;
                BOOL v15 = v528++ > 8;
                if (v15) {
                  goto LABEL_608;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v331 = 0;
              }
            }
            break;
          }
LABEL_800:
          *(void *)(a1 + 152) = v331;
          goto LABEL_821;
        case 0x57u:
          *v8 |= 0x20000uLL;
          unint64_t v334 = *((void *)this + 1);
          unint64_t v335 = *((void *)this + 2);
          uint64_t v336 = *(void *)this;
          if (v334 <= 0xFFFFFFFFFFFFFFF5 && v334 + 10 <= v335)
          {
            char v337 = 0;
            unsigned int v338 = 0;
            uint64_t v339 = 0;
            do
            {
              unint64_t v340 = v334 + 1;
              *((void *)this + 1) = v334 + 1;
              char v341 = *(unsigned char *)(v336 + v334);
              v339 |= (unint64_t)(v341 & 0x7F) << v337;
              if ((v341 & 0x80) == 0) {
                goto LABEL_804;
              }
              v337 += 7;
              unint64_t v334 = v340;
              BOOL v15 = v338++ > 8;
            }
            while (!v15);
LABEL_615:
            uint64_t v339 = 0;
            goto LABEL_804;
          }
          char v531 = 0;
          unsigned int v532 = 0;
          uint64_t v339 = 0;
          if (v335 <= v334) {
            unint64_t v335 = *((void *)this + 1);
          }
          while (2)
          {
            if (v335 == v334)
            {
              uint64_t v339 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v533 = v334 + 1;
              char v534 = *(unsigned char *)(v336 + v334);
              *((void *)this + 1) = v533;
              v339 |= (unint64_t)(v534 & 0x7F) << v531;
              if (v534 < 0)
              {
                v531 += 7;
                unint64_t v334 = v533;
                BOOL v15 = v532++ > 8;
                if (v15) {
                  goto LABEL_615;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v339 = 0;
              }
            }
            break;
          }
LABEL_804:
          *(void *)(a1 + 144) = v339;
          goto LABEL_821;
        case 0x58u:
          *v8 |= 0x80uLL;
          unint64_t v342 = *((void *)this + 1);
          unint64_t v343 = *((void *)this + 2);
          uint64_t v344 = *(void *)this;
          if (v342 <= 0xFFFFFFFFFFFFFFF5 && v342 + 10 <= v343)
          {
            char v345 = 0;
            unsigned int v346 = 0;
            uint64_t v347 = 0;
            do
            {
              unint64_t v348 = v342 + 1;
              *((void *)this + 1) = v342 + 1;
              char v349 = *(unsigned char *)(v344 + v342);
              v347 |= (unint64_t)(v349 & 0x7F) << v345;
              if ((v349 & 0x80) == 0) {
                goto LABEL_808;
              }
              v345 += 7;
              unint64_t v342 = v348;
              BOOL v15 = v346++ > 8;
            }
            while (!v15);
LABEL_622:
            uint64_t v347 = 0;
            goto LABEL_808;
          }
          char v535 = 0;
          unsigned int v536 = 0;
          uint64_t v347 = 0;
          if (v343 <= v342) {
            unint64_t v343 = *((void *)this + 1);
          }
          while (2)
          {
            if (v343 == v342)
            {
              uint64_t v347 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v537 = v342 + 1;
              char v538 = *(unsigned char *)(v344 + v342);
              *((void *)this + 1) = v537;
              v347 |= (unint64_t)(v538 & 0x7F) << v535;
              if (v538 < 0)
              {
                v535 += 7;
                unint64_t v342 = v537;
                BOOL v15 = v536++ > 8;
                if (v15) {
                  goto LABEL_622;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v347 = 0;
              }
            }
            break;
          }
LABEL_808:
          *(void *)(a1 + 64) = v347;
          goto LABEL_821;
        case 0x59u:
          *v8 |= 0x1000uLL;
          unint64_t v350 = *((void *)this + 1);
          unint64_t v351 = *((void *)this + 2);
          uint64_t v352 = *(void *)this;
          if (v350 <= 0xFFFFFFFFFFFFFFF5 && v350 + 10 <= v351)
          {
            char v353 = 0;
            unsigned int v354 = 0;
            uint64_t v355 = 0;
            do
            {
              unint64_t v356 = v350 + 1;
              *((void *)this + 1) = v350 + 1;
              char v357 = *(unsigned char *)(v352 + v350);
              v355 |= (unint64_t)(v357 & 0x7F) << v353;
              if ((v357 & 0x80) == 0) {
                goto LABEL_812;
              }
              v353 += 7;
              unint64_t v350 = v356;
              BOOL v15 = v354++ > 8;
            }
            while (!v15);
LABEL_629:
            uint64_t v355 = 0;
            goto LABEL_812;
          }
          char v539 = 0;
          unsigned int v540 = 0;
          uint64_t v355 = 0;
          if (v351 <= v350) {
            unint64_t v351 = *((void *)this + 1);
          }
          while (2)
          {
            if (v351 == v350)
            {
              uint64_t v355 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v541 = v350 + 1;
              char v542 = *(unsigned char *)(v352 + v350);
              *((void *)this + 1) = v541;
              v355 |= (unint64_t)(v542 & 0x7F) << v539;
              if (v542 < 0)
              {
                v539 += 7;
                unint64_t v350 = v541;
                BOOL v15 = v540++ > 8;
                if (v15) {
                  goto LABEL_629;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v355 = 0;
              }
            }
            break;
          }
LABEL_812:
          *(void *)(a1 + 104) = v355;
          goto LABEL_821;
        case 0x64u:
          *v8 |= 0x4000000000uLL;
          unint64_t v358 = *((void *)this + 1);
          unint64_t v359 = *((void *)this + 2);
          uint64_t v360 = *(void *)this;
          if (v358 <= 0xFFFFFFFFFFFFFFF5 && v358 + 10 <= v359)
          {
            char v361 = 0;
            unsigned int v362 = 0;
            uint64_t v363 = 0;
            do
            {
              unint64_t v364 = v358 + 1;
              *((void *)this + 1) = v358 + 1;
              char v365 = *(unsigned char *)(v360 + v358);
              v363 |= (unint64_t)(v365 & 0x7F) << v361;
              if ((v365 & 0x80) == 0) {
                goto LABEL_816;
              }
              v361 += 7;
              unint64_t v358 = v364;
              BOOL v15 = v362++ > 8;
            }
            while (!v15);
LABEL_636:
            uint64_t v363 = 0;
            goto LABEL_816;
          }
          char v543 = 0;
          unsigned int v544 = 0;
          uint64_t v363 = 0;
          if (v359 <= v358) {
            unint64_t v359 = *((void *)this + 1);
          }
          while (2)
          {
            if (v359 == v358)
            {
              uint64_t v363 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v545 = v358 + 1;
              char v546 = *(unsigned char *)(v360 + v358);
              *((void *)this + 1) = v545;
              v363 |= (unint64_t)(v546 & 0x7F) << v543;
              if (v546 < 0)
              {
                v543 += 7;
                unint64_t v358 = v545;
                BOOL v15 = v544++ > 8;
                if (v15) {
                  goto LABEL_636;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v363 = 0;
              }
            }
            break;
          }
LABEL_816:
          *(void *)(a1 + 312) = v363;
          goto LABEL_821;
        case 0x65u:
          *v8 |= 0x1000000000uLL;
          unint64_t v366 = *((void *)this + 1);
          unint64_t v367 = *((void *)this + 2);
          uint64_t v368 = *(void *)this;
          if (v366 <= 0xFFFFFFFFFFFFFFF5 && v366 + 10 <= v367)
          {
            char v369 = 0;
            unsigned int v370 = 0;
            uint64_t v371 = 0;
            do
            {
              unint64_t v372 = v366 + 1;
              *((void *)this + 1) = v366 + 1;
              char v373 = *(unsigned char *)(v368 + v366);
              v371 |= (unint64_t)(v373 & 0x7F) << v369;
              if ((v373 & 0x80) == 0) {
                goto LABEL_820;
              }
              v369 += 7;
              unint64_t v366 = v372;
              BOOL v15 = v370++ > 8;
            }
            while (!v15);
LABEL_643:
            uint64_t v371 = 0;
            goto LABEL_820;
          }
          char v547 = 0;
          unsigned int v548 = 0;
          uint64_t v371 = 0;
          if (v367 <= v366) {
            unint64_t v367 = *((void *)this + 1);
          }
          break;
        case 0x66u:
          *v8 |= 0x2000000000uLL;
          unint64_t v374 = *((void *)this + 1);
          if (v374 <= 0xFFFFFFFFFFFFFFF7 && v374 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 304) = *(void *)(*(void *)this + v374);
            *((void *)this + 1) += 8;
          }
          else
          {
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_821;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          goto LABEL_821;
      }
      while (1)
      {
        if (v367 == v366)
        {
          uint64_t v371 = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_820;
        }
        unint64_t v549 = v366 + 1;
        char v550 = *(unsigned char *)(v368 + v366);
        *((void *)this + 1) = v549;
        v371 |= (unint64_t)(v550 & 0x7F) << v547;
        if ((v550 & 0x80) == 0) {
          break;
        }
        v547 += 7;
        unint64_t v366 = v549;
        BOOL v15 = v548++ > 8;
        if (v15) {
          goto LABEL_643;
        }
      }
      if (*((unsigned char *)this + 24)) {
        uint64_t v371 = 0;
      }
LABEL_820:
      *(void *)(a1 + 296) = v371;
LABEL_821:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v16 = 0;
    unsigned int v17 = 0;
    unint64_t v12 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v18 = v2 + 1;
      char v19 = *(unsigned char *)(v9 + v2);
      *((void *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0) {
        goto LABEL_21;
      }
      v16 += 7;
      unint64_t v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        unint64_t v12 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1902EC8C4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = (uint64_t *)(result + 364);
  uint64_t v5 = *(void *)(result + 364);
  if ((v5 & 0x40000000) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    uint64_t v5 = *v4;
    if ((*v4 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x80000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_49;
    }
  }
  else if ((v5 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x100000) == 0)
  {
LABEL_5:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x200000) == 0)
  {
LABEL_6:
    if ((v5 & 0x8000000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_7:
    if ((v5 & 0x40000000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x40000000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x80000000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x100000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x800000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20) == 0) {
      goto LABEL_19;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x20) == 0)
  {
LABEL_19:
    if ((v5 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 8) == 0)
  {
LABEL_20:
    if ((v5 & 1) == 0) {
      goto LABEL_21;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 1) == 0)
  {
LABEL_21:
    if ((v5 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v5 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x100) == 0)
  {
LABEL_23:
    if ((v5 & 0x10) == 0) {
      goto LABEL_24;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x10) == 0)
  {
LABEL_24:
    if ((v5 & 0x200) == 0) {
      goto LABEL_25;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x200) == 0)
  {
LABEL_25:
    if ((v5 & 0x400) == 0) {
      goto LABEL_26;
    }
    goto LABEL_71;
  }
LABEL_70:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x400) == 0)
  {
LABEL_26:
    if ((v5 & 0x800) == 0) {
      goto LABEL_27;
    }
    goto LABEL_72;
  }
LABEL_71:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x4000) == 0)
  {
LABEL_28:
    if ((v5 & 2) == 0) {
      goto LABEL_29;
    }
    goto LABEL_74;
  }
LABEL_73:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 2) == 0)
  {
LABEL_29:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_75;
  }
LABEL_74:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x8000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_76;
  }
LABEL_75:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_77;
  }
LABEL_76:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_78;
  }
LABEL_77:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x200000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_79;
  }
LABEL_78:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_80;
  }
LABEL_79:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_81;
  }
LABEL_80:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_82;
  }
LABEL_81:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x2000) == 0)
  {
LABEL_37:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_83;
  }
LABEL_82:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x10000) == 0)
  {
LABEL_38:
    if ((v5 & 4) == 0) {
      goto LABEL_39;
    }
    goto LABEL_84;
  }
LABEL_83:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 4) == 0)
  {
LABEL_39:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_85;
  }
LABEL_84:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x40000) == 0)
  {
LABEL_40:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_86;
  }
LABEL_85:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x20000) == 0)
  {
LABEL_41:
    if ((v5 & 0x80) == 0) {
      goto LABEL_42;
    }
    goto LABEL_87;
  }
LABEL_86:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x80) == 0)
  {
LABEL_42:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_88;
  }
LABEL_87:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x1000) == 0)
  {
LABEL_43:
    if ((v5 & 0x4000000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_89;
  }
LABEL_88:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_45;
    }
LABEL_90:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*v4 & 0x2000000000) == 0) {
      return result;
    }
    goto LABEL_91;
  }
LABEL_89:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x1000000000) != 0) {
    goto LABEL_90;
  }
LABEL_45:
  if ((v5 & 0x2000000000) == 0) {
    return result;
  }
LABEL_91:
  double v6 = *(double *)(v3 + 304);

  return PB::Writer::write(this, v6);
}

void *sub_1902ECDF8(void *result)
{
  *uint64_t result = &unk_1EDFCED10;
  *(void *)((char *)result + 156) = 0;
  return result;
}

void sub_1902ECE20(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902ECE58(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "conisderedSOS");
    uint64_t v5 = *(void *)(a1 + 156);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x100000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_43;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "deltaSteps");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "didCancelSOS");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "distanceTraveled", *(float *)(a1 + 48));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "fallAlertUndelayedTimestamp", *(double *)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "fallTime");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "fromState");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "gyroMaxMean", *(float *)(a1 + 56));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 4) == 0)
  {
LABEL_10:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "isActive");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "isStand");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "magnitudeDiffUnity", *(float *)(a1 + 60));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "maxAccelStdAxis", *(float *)(a1 + 64));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "maxNumQuiescentBins");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "maxNumStaticBins");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "nominalQuiescentThreshold");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "normalizedIQR", *(float *)(a1 + 80));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "numActiveBins");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "numCyclingEpochs");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x20000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "numNonzeroStepEpochs");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "numPeaks");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x80000) == 0)
  {
LABEL_23:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "numQuiescentBins");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x100000) == 0)
  {
LABEL_24:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "numSharpPeaks");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x200000) == 0)
  {
LABEL_25:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "numStandBins");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x400000) == 0)
  {
LABEL_26:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "numStaticBins");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x800000) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "onBodyFeature", *(float *)(a1 + 116));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "operatingMode");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v5 & 8) == 0) {
      goto LABEL_30;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "quiescentThreshold");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 8) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "sensorTime");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "sentFallAlert");
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "sharpPeaksDelaySpread", *(float *)(a1 + 128));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "sumHighQPeaksInDecLowFreqFFT", *(float *)(a1 + 132));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "sumHighQPeaksInHighFreqFFT", *(float *)(a1 + 136));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "sumHighQPeaksInLowFreqFFT", *(float *)(a1 + 140));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
LABEL_75:
  PB::TextFormatter::format(this, "toState");
  if ((*(void *)(a1 + 156) & 0x80000000) != 0) {
LABEL_37:
  }
    PB::TextFormatter::format(this, "totalNumStaticBins");
LABEL_38:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1902ED31C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(void *)(a1 + 156) |= 4uLL;
          unint64_t v20 = *((void *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v20);
          goto LABEL_364;
        case 2u:
          *(void *)(a1 + 156) |= 8uLL;
          unint64_t v22 = *((void *)this + 1);
          unint64_t v23 = *((void *)this + 2);
          uint64_t v24 = *(void *)this;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            char v25 = 0;
            unsigned int v26 = 0;
            uint64_t v27 = 0;
            do
            {
              unint64_t v28 = v22 + 1;
              *((void *)this + 1) = v22 + 1;
              char v29 = *(unsigned char *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0) {
                goto LABEL_368;
              }
              v25 += 7;
              unint64_t v22 = v28;
              BOOL v14 = v26++ > 8;
            }
            while (!v14);
LABEL_221:
            uint64_t v27 = 0;
            goto LABEL_368;
          }
          char v211 = 0;
          unsigned int v212 = 0;
          uint64_t v27 = 0;
          if (v23 <= v22) {
            unint64_t v23 = *((void *)this + 1);
          }
          while (2)
          {
            if (v23 == v22)
            {
              uint64_t v27 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v213 = v22 + 1;
              char v214 = *(unsigned char *)(v24 + v22);
              *((void *)this + 1) = v213;
              v27 |= (unint64_t)(v214 & 0x7F) << v211;
              if (v214 < 0)
              {
                v211 += 7;
                unint64_t v22 = v213;
                BOOL v14 = v212++ > 8;
                if (v14) {
                  goto LABEL_221;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v27 = 0;
              }
            }
            break;
          }
LABEL_368:
          *(void *)(a1 + 32) = v27;
          goto LABEL_210;
        case 3u:
          *(void *)(a1 + 156) |= 2uLL;
          unint64_t v30 = *((void *)this + 1);
          unint64_t v31 = *((void *)this + 2);
          uint64_t v32 = *(void *)this;
          if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
          {
            char v33 = 0;
            unsigned int v34 = 0;
            uint64_t v35 = 0;
            do
            {
              unint64_t v36 = v30 + 1;
              *((void *)this + 1) = v30 + 1;
              char v37 = *(unsigned char *)(v32 + v30);
              v35 |= (unint64_t)(v37 & 0x7F) << v33;
              if ((v37 & 0x80) == 0) {
                goto LABEL_372;
              }
              v33 += 7;
              unint64_t v30 = v36;
              BOOL v14 = v34++ > 8;
            }
            while (!v14);
LABEL_228:
            uint64_t v35 = 0;
            goto LABEL_372;
          }
          char v215 = 0;
          unsigned int v216 = 0;
          uint64_t v35 = 0;
          if (v31 <= v30) {
            unint64_t v31 = *((void *)this + 1);
          }
          while (2)
          {
            if (v31 == v30)
            {
              uint64_t v35 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v217 = v30 + 1;
              char v218 = *(unsigned char *)(v32 + v30);
              *((void *)this + 1) = v217;
              v35 |= (unint64_t)(v218 & 0x7F) << v215;
              if (v218 < 0)
              {
                v215 += 7;
                unint64_t v30 = v217;
                BOOL v14 = v216++ > 8;
                if (v14) {
                  goto LABEL_228;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v35 = 0;
              }
            }
            break;
          }
LABEL_372:
          *(void *)(a1 + 16) = v35;
          goto LABEL_210;
        case 4u:
          *(void *)(a1 + 156) |= 0x400uLL;
          unint64_t v38 = *((void *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v38);
          goto LABEL_191;
        case 5u:
          *(void *)(a1 + 156) |= 0x200uLL;
          unint64_t v39 = *((void *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v39);
          goto LABEL_191;
        case 6u:
          *(void *)(a1 + 156) |= 0x100uLL;
          unint64_t v40 = *((void *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v40);
          goto LABEL_191;
        case 7u:
          *(void *)(a1 + 156) |= 0x800uLL;
          unint64_t v41 = *((void *)this + 1);
          unint64_t v42 = *((void *)this + 2);
          uint64_t v43 = *(void *)this;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            char v44 = 0;
            unsigned int v45 = 0;
            uint64_t v46 = 0;
            do
            {
              unint64_t v47 = v41 + 1;
              *((void *)this + 1) = v41 + 1;
              char v48 = *(unsigned char *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0) {
                goto LABEL_376;
              }
              v44 += 7;
              unint64_t v41 = v47;
              BOOL v14 = v45++ > 8;
            }
            while (!v14);
LABEL_235:
            LODWORD(v46) = 0;
            goto LABEL_376;
          }
          char v219 = 0;
          unsigned int v220 = 0;
          uint64_t v46 = 0;
          if (v42 <= v41) {
            unint64_t v42 = *((void *)this + 1);
          }
          while (2)
          {
            if (v42 == v41)
            {
              LODWORD(v46) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v221 = v41 + 1;
              char v222 = *(unsigned char *)(v43 + v41);
              *((void *)this + 1) = v221;
              v46 |= (unint64_t)(v222 & 0x7F) << v219;
              if (v222 < 0)
              {
                v219 += 7;
                unint64_t v41 = v221;
                BOOL v14 = v220++ > 8;
                if (v14) {
                  goto LABEL_235;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v46) = 0;
              }
            }
            break;
          }
LABEL_376:
          *(_DWORD *)(a1 + 68) = v46;
          goto LABEL_210;
        case 8u:
          *(void *)(a1 + 156) |= 0x80000000uLL;
          unint64_t v49 = *((void *)this + 1);
          unint64_t v50 = *((void *)this + 2);
          uint64_t v51 = *(void *)this;
          if (v49 <= 0xFFFFFFFFFFFFFFF5 && v49 + 10 <= v50)
          {
            char v52 = 0;
            unsigned int v53 = 0;
            uint64_t v54 = 0;
            do
            {
              unint64_t v55 = v49 + 1;
              *((void *)this + 1) = v49 + 1;
              char v56 = *(unsigned char *)(v51 + v49);
              v54 |= (unint64_t)(v56 & 0x7F) << v52;
              if ((v56 & 0x80) == 0) {
                goto LABEL_380;
              }
              v52 += 7;
              unint64_t v49 = v55;
              BOOL v14 = v53++ > 8;
            }
            while (!v14);
LABEL_242:
            LODWORD(v54) = 0;
            goto LABEL_380;
          }
          char v223 = 0;
          unsigned int v224 = 0;
          uint64_t v54 = 0;
          if (v50 <= v49) {
            unint64_t v50 = *((void *)this + 1);
          }
          while (2)
          {
            if (v50 == v49)
            {
              LODWORD(v54) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v225 = v49 + 1;
              char v226 = *(unsigned char *)(v51 + v49);
              *((void *)this + 1) = v225;
              v54 |= (unint64_t)(v226 & 0x7F) << v223;
              if (v226 < 0)
              {
                v223 += 7;
                unint64_t v49 = v225;
                BOOL v14 = v224++ > 8;
                if (v14) {
                  goto LABEL_242;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v54) = 0;
              }
            }
            break;
          }
LABEL_380:
          *(_DWORD *)(a1 + 148) = v54;
          goto LABEL_210;
        case 9u:
          *(void *)(a1 + 156) |= 0x1000uLL;
          unint64_t v57 = *((void *)this + 1);
          unint64_t v58 = *((void *)this + 2);
          uint64_t v59 = *(void *)this;
          if (v57 <= 0xFFFFFFFFFFFFFFF5 && v57 + 10 <= v58)
          {
            char v60 = 0;
            unsigned int v61 = 0;
            uint64_t v62 = 0;
            do
            {
              unint64_t v63 = v57 + 1;
              *((void *)this + 1) = v57 + 1;
              char v64 = *(unsigned char *)(v59 + v57);
              v62 |= (unint64_t)(v64 & 0x7F) << v60;
              if ((v64 & 0x80) == 0) {
                goto LABEL_384;
              }
              v60 += 7;
              unint64_t v57 = v63;
              BOOL v14 = v61++ > 8;
            }
            while (!v14);
LABEL_249:
            LODWORD(v62) = 0;
            goto LABEL_384;
          }
          char v227 = 0;
          unsigned int v228 = 0;
          uint64_t v62 = 0;
          if (v58 <= v57) {
            unint64_t v58 = *((void *)this + 1);
          }
          while (2)
          {
            if (v58 == v57)
            {
              LODWORD(v62) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v229 = v57 + 1;
              char v230 = *(unsigned char *)(v59 + v57);
              *((void *)this + 1) = v229;
              v62 |= (unint64_t)(v230 & 0x7F) << v227;
              if (v230 < 0)
              {
                v227 += 7;
                unint64_t v57 = v229;
                BOOL v14 = v228++ > 8;
                if (v14) {
                  goto LABEL_249;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v62) = 0;
              }
            }
            break;
          }
LABEL_384:
          *(_DWORD *)(a1 + 72) = v62;
          goto LABEL_210;
        case 0xAu:
          *(void *)(a1 + 156) |= 0x10000000uLL;
          unint64_t v65 = *((void *)this + 1);
          if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(void *)this + v65);
          goto LABEL_191;
        case 0xBu:
          *(void *)(a1 + 156) |= 0x20000000uLL;
          unint64_t v66 = *((void *)this + 1);
          if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v66);
          goto LABEL_191;
        case 0xCu:
          *(void *)(a1 + 156) |= 0x8000000uLL;
          unint64_t v67 = *((void *)this + 1);
          if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v67);
          goto LABEL_191;
        case 0xDu:
          *(void *)(a1 + 156) |= 0x40000uLL;
          unint64_t v68 = *((void *)this + 1);
          unint64_t v69 = *((void *)this + 2);
          uint64_t v70 = *(void *)this;
          if (v68 <= 0xFFFFFFFFFFFFFFF5 && v68 + 10 <= v69)
          {
            char v71 = 0;
            unsigned int v72 = 0;
            uint64_t v73 = 0;
            do
            {
              unint64_t v74 = v68 + 1;
              *((void *)this + 1) = v68 + 1;
              char v75 = *(unsigned char *)(v70 + v68);
              v73 |= (unint64_t)(v75 & 0x7F) << v71;
              if ((v75 & 0x80) == 0) {
                goto LABEL_388;
              }
              v71 += 7;
              unint64_t v68 = v74;
              BOOL v14 = v72++ > 8;
            }
            while (!v14);
LABEL_256:
            LODWORD(v73) = 0;
            goto LABEL_388;
          }
          char v231 = 0;
          unsigned int v232 = 0;
          uint64_t v73 = 0;
          if (v69 <= v68) {
            unint64_t v69 = *((void *)this + 1);
          }
          while (2)
          {
            if (v69 == v68)
            {
              LODWORD(v73) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v233 = v68 + 1;
              char v234 = *(unsigned char *)(v70 + v68);
              *((void *)this + 1) = v233;
              v73 |= (unint64_t)(v234 & 0x7F) << v231;
              if (v234 < 0)
              {
                v231 += 7;
                unint64_t v68 = v233;
                BOOL v14 = v232++ > 8;
                if (v14) {
                  goto LABEL_256;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v73) = 0;
              }
            }
            break;
          }
LABEL_388:
          *(_DWORD *)(a1 + 96) = v73;
          goto LABEL_210;
        case 0xEu:
          *(void *)(a1 + 156) |= 0x4000uLL;
          unint64_t v76 = *((void *)this + 1);
          if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v76);
          goto LABEL_191;
        case 0xFu:
          *(void *)(a1 + 156) |= 0x20uLL;
          unint64_t v77 = *((void *)this + 1);
          unint64_t v78 = *((void *)this + 2);
          uint64_t v79 = *(void *)this;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            char v80 = 0;
            unsigned int v81 = 0;
            uint64_t v82 = 0;
            do
            {
              unint64_t v83 = v77 + 1;
              *((void *)this + 1) = v77 + 1;
              char v84 = *(unsigned char *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0) {
                goto LABEL_392;
              }
              v80 += 7;
              unint64_t v77 = v83;
              BOOL v14 = v81++ > 8;
            }
            while (!v14);
LABEL_263:
            LODWORD(v82) = 0;
            goto LABEL_392;
          }
          char v235 = 0;
          unsigned int v236 = 0;
          uint64_t v82 = 0;
          if (v78 <= v77) {
            unint64_t v78 = *((void *)this + 1);
          }
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v237 = v77 + 1;
              char v238 = *(unsigned char *)(v79 + v77);
              *((void *)this + 1) = v237;
              v82 |= (unint64_t)(v238 & 0x7F) << v235;
              if (v238 < 0)
              {
                v235 += 7;
                unint64_t v77 = v237;
                BOOL v14 = v236++ > 8;
                if (v14) {
                  goto LABEL_263;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v82) = 0;
              }
            }
            break;
          }
LABEL_392:
          *(_DWORD *)(a1 + 44) = v82;
          goto LABEL_210;
        case 0x10u:
          *(void *)(a1 + 156) |= 0x400000000uLL;
          unint64_t v85 = *((void *)this + 1);
          if (v85 >= *((void *)this + 2))
          {
            BOOL v88 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v86 = v85 + 1;
            int v87 = *(unsigned __int8 *)(*(void *)this + v85);
            *((void *)this + 1) = v86;
            BOOL v88 = v87 != 0;
          }
          *(unsigned char *)(a1 + 154) = v88;
          goto LABEL_210;
        case 0x11u:
          *(void *)(a1 + 156) |= 0x200000000uLL;
          unint64_t v89 = *((void *)this + 1);
          if (v89 >= *((void *)this + 2))
          {
            BOOL v92 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v90 = v89 + 1;
            int v91 = *(unsigned __int8 *)(*(void *)this + v89);
            *((void *)this + 1) = v90;
            BOOL v92 = v91 != 0;
          }
          *(unsigned char *)(a1 + 153) = v92;
          goto LABEL_210;
        case 0x12u:
          *(void *)(a1 + 156) |= 0x80uLL;
          unint64_t v93 = *((void *)this + 1);
          unint64_t v94 = *((void *)this + 2);
          uint64_t v95 = *(void *)this;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            char v96 = 0;
            unsigned int v97 = 0;
            uint64_t v98 = 0;
            do
            {
              unint64_t v99 = v93 + 1;
              *((void *)this + 1) = v93 + 1;
              char v100 = *(unsigned char *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0) {
                goto LABEL_396;
              }
              v96 += 7;
              unint64_t v93 = v99;
              BOOL v14 = v97++ > 8;
            }
            while (!v14);
LABEL_274:
            LODWORD(v98) = 0;
            goto LABEL_396;
          }
          char v239 = 0;
          unsigned int v240 = 0;
          uint64_t v98 = 0;
          if (v94 <= v93) {
            unint64_t v94 = *((void *)this + 1);
          }
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v98) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v241 = v93 + 1;
              char v242 = *(unsigned char *)(v95 + v93);
              *((void *)this + 1) = v241;
              v98 |= (unint64_t)(v242 & 0x7F) << v239;
              if (v242 < 0)
              {
                v239 += 7;
                unint64_t v93 = v241;
                BOOL v14 = v240++ > 8;
                if (v14) {
                  goto LABEL_274;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v98) = 0;
              }
            }
            break;
          }
LABEL_396:
          *(_DWORD *)(a1 + 52) = v98;
          goto LABEL_210;
        case 0x13u:
          *(void *)(a1 + 156) |= 0x40000000uLL;
          unint64_t v101 = *((void *)this + 1);
          unint64_t v102 = *((void *)this + 2);
          uint64_t v103 = *(void *)this;
          if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
          {
            char v104 = 0;
            unsigned int v105 = 0;
            uint64_t v106 = 0;
            do
            {
              unint64_t v107 = v101 + 1;
              *((void *)this + 1) = v101 + 1;
              char v108 = *(unsigned char *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0) {
                goto LABEL_400;
              }
              v104 += 7;
              unint64_t v101 = v107;
              BOOL v14 = v105++ > 8;
            }
            while (!v14);
LABEL_281:
            LODWORD(v106) = 0;
            goto LABEL_400;
          }
          char v243 = 0;
          unsigned int v244 = 0;
          uint64_t v106 = 0;
          if (v102 <= v101) {
            unint64_t v102 = *((void *)this + 1);
          }
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v245 = v101 + 1;
              char v246 = *(unsigned char *)(v103 + v101);
              *((void *)this + 1) = v245;
              v106 |= (unint64_t)(v246 & 0x7F) << v243;
              if (v246 < 0)
              {
                v243 += 7;
                unint64_t v101 = v245;
                BOOL v14 = v244++ > 8;
                if (v14) {
                  goto LABEL_281;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v106) = 0;
              }
            }
            break;
          }
LABEL_400:
          *(_DWORD *)(a1 + 144) = v106;
          goto LABEL_210;
        case 0x14u:
          *(void *)(a1 + 156) |= 0x2000000uLL;
          unint64_t v109 = *((void *)this + 1);
          unint64_t v110 = *((void *)this + 2);
          uint64_t v111 = *(void *)this;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            char v112 = 0;
            unsigned int v113 = 0;
            uint64_t v114 = 0;
            do
            {
              unint64_t v115 = v109 + 1;
              *((void *)this + 1) = v109 + 1;
              char v116 = *(unsigned char *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0) {
                goto LABEL_404;
              }
              v112 += 7;
              unint64_t v109 = v115;
              BOOL v14 = v113++ > 8;
            }
            while (!v14);
LABEL_288:
            LODWORD(v114) = 0;
            goto LABEL_404;
          }
          char v247 = 0;
          unsigned int v248 = 0;
          uint64_t v114 = 0;
          if (v110 <= v109) {
            unint64_t v110 = *((void *)this + 1);
          }
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v249 = v109 + 1;
              char v250 = *(unsigned char *)(v111 + v109);
              *((void *)this + 1) = v249;
              v114 |= (unint64_t)(v250 & 0x7F) << v247;
              if (v250 < 0)
              {
                v247 += 7;
                unint64_t v109 = v249;
                BOOL v14 = v248++ > 8;
                if (v14) {
                  goto LABEL_288;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v114) = 0;
              }
            }
            break;
          }
LABEL_404:
          *(_DWORD *)(a1 + 124) = v114;
          goto LABEL_210;
        case 0x15u:
          *(void *)(a1 + 156) |= 0x800000000uLL;
          unint64_t v117 = *((void *)this + 1);
          if (v117 >= *((void *)this + 2))
          {
            BOOL v120 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v118 = v117 + 1;
            int v119 = *(unsigned __int8 *)(*(void *)this + v117);
            *((void *)this + 1) = v118;
            BOOL v120 = v119 != 0;
          }
          *(unsigned char *)(a1 + 155) = v120;
          goto LABEL_210;
        case 0x16u:
          *(void *)(a1 + 156) |= 0x100000000uLL;
          unint64_t v121 = *((void *)this + 1);
          if (v121 >= *((void *)this + 2))
          {
            BOOL v124 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v122 = v121 + 1;
            int v123 = *(unsigned __int8 *)(*(void *)this + v121);
            *((void *)this + 1) = v122;
            BOOL v124 = v123 != 0;
          }
          *(unsigned char *)(a1 + 152) = v124;
          goto LABEL_210;
        case 0x17u:
          *(void *)(a1 + 156) |= 0x20000uLL;
          unint64_t v125 = *((void *)this + 1);
          unint64_t v126 = *((void *)this + 2);
          uint64_t v127 = *(void *)this;
          if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
          {
            char v128 = 0;
            unsigned int v129 = 0;
            uint64_t v130 = 0;
            do
            {
              unint64_t v131 = v125 + 1;
              *((void *)this + 1) = v125 + 1;
              char v132 = *(unsigned char *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0) {
                goto LABEL_408;
              }
              v128 += 7;
              unint64_t v125 = v131;
              BOOL v14 = v129++ > 8;
            }
            while (!v14);
LABEL_299:
            LODWORD(v130) = 0;
            goto LABEL_408;
          }
          char v251 = 0;
          unsigned int v252 = 0;
          uint64_t v130 = 0;
          if (v126 <= v125) {
            unint64_t v126 = *((void *)this + 1);
          }
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v253 = v125 + 1;
              char v254 = *(unsigned char *)(v127 + v125);
              *((void *)this + 1) = v253;
              v130 |= (unint64_t)(v254 & 0x7F) << v251;
              if (v254 < 0)
              {
                v251 += 7;
                unint64_t v125 = v253;
                BOOL v14 = v252++ > 8;
                if (v14) {
                  goto LABEL_299;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v130) = 0;
              }
            }
            break;
          }
LABEL_408:
          *(_DWORD *)(a1 + 92) = v130;
          goto LABEL_210;
        case 0x18u:
          *(void *)(a1 + 156) |= 0x200000uLL;
          unint64_t v133 = *((void *)this + 1);
          unint64_t v134 = *((void *)this + 2);
          uint64_t v135 = *(void *)this;
          if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
          {
            char v136 = 0;
            unsigned int v137 = 0;
            uint64_t v138 = 0;
            do
            {
              unint64_t v139 = v133 + 1;
              *((void *)this + 1) = v133 + 1;
              char v140 = *(unsigned char *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0) {
                goto LABEL_412;
              }
              v136 += 7;
              unint64_t v133 = v139;
              BOOL v14 = v137++ > 8;
            }
            while (!v14);
LABEL_306:
            LODWORD(v138) = 0;
            goto LABEL_412;
          }
          char v255 = 0;
          unsigned int v256 = 0;
          uint64_t v138 = 0;
          if (v134 <= v133) {
            unint64_t v134 = *((void *)this + 1);
          }
          while (2)
          {
            if (v134 == v133)
            {
              LODWORD(v138) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v257 = v133 + 1;
              char v258 = *(unsigned char *)(v135 + v133);
              *((void *)this + 1) = v257;
              v138 |= (unint64_t)(v258 & 0x7F) << v255;
              if (v258 < 0)
              {
                v255 += 7;
                unint64_t v133 = v257;
                BOOL v14 = v256++ > 8;
                if (v14) {
                  goto LABEL_306;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v138) = 0;
              }
            }
            break;
          }
LABEL_412:
          *(_DWORD *)(a1 + 108) = v138;
          goto LABEL_210;
        case 0x19u:
          *(void *)(a1 + 156) |= 0x400000uLL;
          unint64_t v141 = *((void *)this + 1);
          unint64_t v142 = *((void *)this + 2);
          uint64_t v143 = *(void *)this;
          if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
          {
            char v144 = 0;
            unsigned int v145 = 0;
            uint64_t v146 = 0;
            do
            {
              unint64_t v147 = v141 + 1;
              *((void *)this + 1) = v141 + 1;
              char v148 = *(unsigned char *)(v143 + v141);
              v146 |= (unint64_t)(v148 & 0x7F) << v144;
              if ((v148 & 0x80) == 0) {
                goto LABEL_416;
              }
              v144 += 7;
              unint64_t v141 = v147;
              BOOL v14 = v145++ > 8;
            }
            while (!v14);
LABEL_313:
            LODWORD(v146) = 0;
            goto LABEL_416;
          }
          char v259 = 0;
          unsigned int v260 = 0;
          uint64_t v146 = 0;
          if (v142 <= v141) {
            unint64_t v142 = *((void *)this + 1);
          }
          while (2)
          {
            if (v142 == v141)
            {
              LODWORD(v146) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v261 = v141 + 1;
              char v262 = *(unsigned char *)(v143 + v141);
              *((void *)this + 1) = v261;
              v146 |= (unint64_t)(v262 & 0x7F) << v259;
              if (v262 < 0)
              {
                v259 += 7;
                unint64_t v141 = v261;
                BOOL v14 = v260++ > 8;
                if (v14) {
                  goto LABEL_313;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v146) = 0;
              }
            }
            break;
          }
LABEL_416:
          *(_DWORD *)(a1 + 112) = v146;
          goto LABEL_210;
        case 0x1Au:
          *(void *)(a1 + 156) |= 0x80000uLL;
          unint64_t v149 = *((void *)this + 1);
          unint64_t v150 = *((void *)this + 2);
          uint64_t v151 = *(void *)this;
          if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
          {
            char v152 = 0;
            unsigned int v153 = 0;
            uint64_t v154 = 0;
            do
            {
              unint64_t v155 = v149 + 1;
              *((void *)this + 1) = v149 + 1;
              char v156 = *(unsigned char *)(v151 + v149);
              v154 |= (unint64_t)(v156 & 0x7F) << v152;
              if ((v156 & 0x80) == 0) {
                goto LABEL_420;
              }
              v152 += 7;
              unint64_t v149 = v155;
              BOOL v14 = v153++ > 8;
            }
            while (!v14);
LABEL_320:
            LODWORD(v154) = 0;
            goto LABEL_420;
          }
          char v263 = 0;
          unsigned int v264 = 0;
          uint64_t v154 = 0;
          if (v150 <= v149) {
            unint64_t v150 = *((void *)this + 1);
          }
          while (2)
          {
            if (v150 == v149)
            {
              LODWORD(v154) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v265 = v149 + 1;
              char v266 = *(unsigned char *)(v151 + v149);
              *((void *)this + 1) = v265;
              v154 |= (unint64_t)(v266 & 0x7F) << v263;
              if (v266 < 0)
              {
                v263 += 7;
                unint64_t v149 = v265;
                BOOL v14 = v264++ > 8;
                if (v14) {
                  goto LABEL_320;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v154) = 0;
              }
            }
            break;
          }
LABEL_420:
          *(_DWORD *)(a1 + 100) = v154;
          goto LABEL_210;
        case 0x1Bu:
          *(void *)(a1 + 156) |= 0x8000uLL;
          unint64_t v157 = *((void *)this + 1);
          unint64_t v158 = *((void *)this + 2);
          uint64_t v159 = *(void *)this;
          if (v157 <= 0xFFFFFFFFFFFFFFF5 && v157 + 10 <= v158)
          {
            char v160 = 0;
            unsigned int v161 = 0;
            uint64_t v162 = 0;
            do
            {
              unint64_t v163 = v157 + 1;
              *((void *)this + 1) = v157 + 1;
              char v164 = *(unsigned char *)(v159 + v157);
              v162 |= (unint64_t)(v164 & 0x7F) << v160;
              if ((v164 & 0x80) == 0) {
                goto LABEL_424;
              }
              v160 += 7;
              unint64_t v157 = v163;
              BOOL v14 = v161++ > 8;
            }
            while (!v14);
LABEL_327:
            LODWORD(v162) = 0;
            goto LABEL_424;
          }
          char v267 = 0;
          unsigned int v268 = 0;
          uint64_t v162 = 0;
          if (v158 <= v157) {
            unint64_t v158 = *((void *)this + 1);
          }
          while (2)
          {
            if (v158 == v157)
            {
              LODWORD(v162) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v269 = v157 + 1;
              char v270 = *(unsigned char *)(v159 + v157);
              *((void *)this + 1) = v269;
              v162 |= (unint64_t)(v270 & 0x7F) << v267;
              if (v270 < 0)
              {
                v267 += 7;
                unint64_t v157 = v269;
                BOOL v14 = v268++ > 8;
                if (v14) {
                  goto LABEL_327;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v162) = 0;
              }
            }
            break;
          }
LABEL_424:
          *(_DWORD *)(a1 + 84) = v162;
          goto LABEL_210;
        case 0x1Cu:
          *(void *)(a1 + 156) |= 0x800000uLL;
          unint64_t v165 = *((void *)this + 1);
          if (v165 > 0xFFFFFFFFFFFFFFFBLL || v165 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v165);
          goto LABEL_191;
        case 0x1Du:
          *(void *)(a1 + 156) |= 0x100000uLL;
          unint64_t v166 = *((void *)this + 1);
          unint64_t v167 = *((void *)this + 2);
          uint64_t v168 = *(void *)this;
          if (v166 <= 0xFFFFFFFFFFFFFFF5 && v166 + 10 <= v167)
          {
            char v169 = 0;
            unsigned int v170 = 0;
            uint64_t v171 = 0;
            do
            {
              unint64_t v172 = v166 + 1;
              *((void *)this + 1) = v166 + 1;
              char v173 = *(unsigned char *)(v168 + v166);
              v171 |= (unint64_t)(v173 & 0x7F) << v169;
              if ((v173 & 0x80) == 0) {
                goto LABEL_428;
              }
              v169 += 7;
              unint64_t v166 = v172;
              BOOL v14 = v170++ > 8;
            }
            while (!v14);
LABEL_334:
            LODWORD(v171) = 0;
            goto LABEL_428;
          }
          char v271 = 0;
          unsigned int v272 = 0;
          uint64_t v171 = 0;
          if (v167 <= v166) {
            unint64_t v167 = *((void *)this + 1);
          }
          while (2)
          {
            if (v167 == v166)
            {
              LODWORD(v171) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v273 = v166 + 1;
              char v274 = *(unsigned char *)(v168 + v166);
              *((void *)this + 1) = v273;
              v171 |= (unint64_t)(v274 & 0x7F) << v271;
              if (v274 < 0)
              {
                v271 += 7;
                unint64_t v166 = v273;
                BOOL v14 = v272++ > 8;
                if (v14) {
                  goto LABEL_334;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v171) = 0;
              }
            }
            break;
          }
LABEL_428:
          *(_DWORD *)(a1 + 104) = v171;
          goto LABEL_210;
        case 0x1Eu:
          *(void *)(a1 + 156) |= 0x4000000uLL;
          unint64_t v174 = *((void *)this + 1);
          if (v174 > 0xFFFFFFFFFFFFFFFBLL || v174 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(void *)this + v174);
          goto LABEL_191;
        case 0x1Fu:
          *(void *)(a1 + 156) |= 0x1000000uLL;
          unint64_t v175 = *((void *)this + 1);
          unint64_t v176 = *((void *)this + 2);
          uint64_t v177 = *(void *)this;
          if (v175 <= 0xFFFFFFFFFFFFFFF5 && v175 + 10 <= v176)
          {
            char v178 = 0;
            unsigned int v179 = 0;
            uint64_t v180 = 0;
            do
            {
              unint64_t v181 = v175 + 1;
              *((void *)this + 1) = v175 + 1;
              char v182 = *(unsigned char *)(v177 + v175);
              v180 |= (unint64_t)(v182 & 0x7F) << v178;
              if ((v182 & 0x80) == 0) {
                goto LABEL_432;
              }
              v178 += 7;
              unint64_t v175 = v181;
              BOOL v14 = v179++ > 8;
            }
            while (!v14);
LABEL_341:
            LODWORD(v180) = 0;
            goto LABEL_432;
          }
          char v275 = 0;
          unsigned int v276 = 0;
          uint64_t v180 = 0;
          if (v176 <= v175) {
            unint64_t v176 = *((void *)this + 1);
          }
          while (2)
          {
            if (v176 == v175)
            {
              LODWORD(v180) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v277 = v175 + 1;
              char v278 = *(unsigned char *)(v177 + v175);
              *((void *)this + 1) = v277;
              v180 |= (unint64_t)(v278 & 0x7F) << v275;
              if (v278 < 0)
              {
                v275 += 7;
                unint64_t v175 = v277;
                BOOL v14 = v276++ > 8;
                if (v14) {
                  goto LABEL_341;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v180) = 0;
              }
            }
            break;
          }
LABEL_432:
          *(_DWORD *)(a1 + 120) = v180;
          goto LABEL_210;
        case 0x20u:
          *(void *)(a1 + 156) |= 0x10uLL;
          unint64_t v183 = *((void *)this + 1);
          unint64_t v184 = *((void *)this + 2);
          uint64_t v185 = *(void *)this;
          if (v183 <= 0xFFFFFFFFFFFFFFF5 && v183 + 10 <= v184)
          {
            char v186 = 0;
            unsigned int v187 = 0;
            uint64_t v188 = 0;
            do
            {
              unint64_t v189 = v183 + 1;
              *((void *)this + 1) = v183 + 1;
              char v190 = *(unsigned char *)(v185 + v183);
              v188 |= (unint64_t)(v190 & 0x7F) << v186;
              if ((v190 & 0x80) == 0) {
                goto LABEL_436;
              }
              v186 += 7;
              unint64_t v183 = v189;
              BOOL v14 = v187++ > 8;
            }
            while (!v14);
LABEL_348:
            LODWORD(v188) = 0;
            goto LABEL_436;
          }
          char v279 = 0;
          unsigned int v280 = 0;
          uint64_t v188 = 0;
          if (v184 <= v183) {
            unint64_t v184 = *((void *)this + 1);
          }
          while (2)
          {
            if (v184 == v183)
            {
              LODWORD(v188) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v281 = v183 + 1;
              char v282 = *(unsigned char *)(v185 + v183);
              *((void *)this + 1) = v281;
              v188 |= (unint64_t)(v282 & 0x7F) << v279;
              if (v282 < 0)
              {
                v279 += 7;
                unint64_t v183 = v281;
                BOOL v14 = v280++ > 8;
                if (v14) {
                  goto LABEL_348;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v188) = 0;
              }
            }
            break;
          }
LABEL_436:
          *(_DWORD *)(a1 + 40) = v188;
          goto LABEL_210;
        case 0x21u:
          *(void *)(a1 + 156) |= 0x40uLL;
          unint64_t v191 = *((void *)this + 1);
          if (v191 > 0xFFFFFFFFFFFFFFFBLL || v191 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v191);
LABEL_191:
          uint64_t v192 = *((void *)this + 1) + 4;
          goto LABEL_192;
        case 0x22u:
          *(void *)(a1 + 156) |= 0x10000uLL;
          unint64_t v193 = *((void *)this + 1);
          unint64_t v194 = *((void *)this + 2);
          uint64_t v195 = *(void *)this;
          if (v193 <= 0xFFFFFFFFFFFFFFF5 && v193 + 10 <= v194)
          {
            char v196 = 0;
            unsigned int v197 = 0;
            uint64_t v198 = 0;
            do
            {
              unint64_t v199 = v193 + 1;
              *((void *)this + 1) = v193 + 1;
              char v200 = *(unsigned char *)(v195 + v193);
              v198 |= (unint64_t)(v200 & 0x7F) << v196;
              if ((v200 & 0x80) == 0) {
                goto LABEL_440;
              }
              v196 += 7;
              unint64_t v193 = v199;
              BOOL v14 = v197++ > 8;
            }
            while (!v14);
LABEL_355:
            LODWORD(v198) = 0;
            goto LABEL_440;
          }
          char v283 = 0;
          unsigned int v284 = 0;
          uint64_t v198 = 0;
          if (v194 <= v193) {
            unint64_t v194 = *((void *)this + 1);
          }
          while (2)
          {
            if (v194 == v193)
            {
              LODWORD(v198) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v285 = v193 + 1;
              char v286 = *(unsigned char *)(v195 + v193);
              *((void *)this + 1) = v285;
              v198 |= (unint64_t)(v286 & 0x7F) << v283;
              if (v286 < 0)
              {
                v283 += 7;
                unint64_t v193 = v285;
                BOOL v14 = v284++ > 8;
                if (v14) {
                  goto LABEL_355;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v198) = 0;
              }
            }
            break;
          }
LABEL_440:
          *(_DWORD *)(a1 + 88) = v198;
          goto LABEL_210;
        case 0x23u:
          *(void *)(a1 + 156) |= 0x2000uLL;
          unint64_t v201 = *((void *)this + 1);
          unint64_t v202 = *((void *)this + 2);
          uint64_t v203 = *(void *)this;
          if (v201 <= 0xFFFFFFFFFFFFFFF5 && v201 + 10 <= v202)
          {
            char v204 = 0;
            unsigned int v205 = 0;
            uint64_t v206 = 0;
            do
            {
              unint64_t v207 = v201 + 1;
              *((void *)this + 1) = v201 + 1;
              char v208 = *(unsigned char *)(v203 + v201);
              v206 |= (unint64_t)(v208 & 0x7F) << v204;
              if ((v208 & 0x80) == 0) {
                goto LABEL_444;
              }
              v204 += 7;
              unint64_t v201 = v207;
              BOOL v14 = v205++ > 8;
            }
            while (!v14);
LABEL_362:
            LODWORD(v206) = 0;
            goto LABEL_444;
          }
          char v287 = 0;
          unsigned int v288 = 0;
          uint64_t v206 = 0;
          if (v202 <= v201) {
            unint64_t v202 = *((void *)this + 1);
          }
          break;
        case 0x24u:
          *(void *)(a1 + 156) |= 1uLL;
          unint64_t v209 = *((void *)this + 1);
          if (v209 <= 0xFFFFFFFFFFFFFFF7 && v209 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 8) = *(void *)(*(void *)this + v209);
LABEL_364:
            uint64_t v192 = *((void *)this + 1) + 8;
LABEL_192:
            *((void *)this + 1) = v192;
          }
          else
          {
LABEL_209:
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_210;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          goto LABEL_210;
      }
      while (1)
      {
        if (v202 == v201)
        {
          LODWORD(v206) = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_444;
        }
        unint64_t v289 = v201 + 1;
        char v290 = *(unsigned char *)(v203 + v201);
        *((void *)this + 1) = v289;
        v206 |= (unint64_t)(v290 & 0x7F) << v287;
        if ((v290 & 0x80) == 0) {
          break;
        }
        v287 += 7;
        unint64_t v201 = v289;
        BOOL v14 = v288++ > 8;
        if (v14) {
          goto LABEL_362;
        }
      }
      if (*((unsigned char *)this + 24)) {
        LODWORD(v206) = 0;
      }
LABEL_444:
      *(_DWORD *)(a1 + 76) = v206;
LABEL_210:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1902EEB10(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 156);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24));
    uint64_t v4 = *(void *)(v3 + 156);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_40;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x1000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 136));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 140));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 132));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40000) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x4000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20000) == 0)
  {
LABEL_24:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200000) == 0)
  {
LABEL_25:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400000) == 0)
  {
LABEL_26:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x8000) == 0)
  {
LABEL_28:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800000) == 0)
  {
LABEL_29:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100000) == 0)
  {
LABEL_30:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 128));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x10) == 0) {
      goto LABEL_33;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10) == 0)
  {
LABEL_33:
    if ((v4 & 0x40) == 0) {
      goto LABEL_34;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40) == 0)
  {
LABEL_34:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_71;
  }
LABEL_70:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10000) == 0)
  {
LABEL_35:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_36;
    }
LABEL_72:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(void *)(v3 + 156) & 1) == 0) {
      return result;
    }
    goto LABEL_73;
  }
LABEL_71:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x2000) != 0) {
    goto LABEL_72;
  }
LABEL_36:
  if ((v4 & 1) == 0) {
    return result;
  }
LABEL_73:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(this, v5);
}

double sub_1902EEF38(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCF720;
  *(_DWORD *)(a1 + 396) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0;
  return result;
}

void sub_1902EEF98(PB::Base *this)
{
  *(void *)this = &unk_1EDFCF720;
  unint64_t v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 22);
  if (v3)
  {
    *((void *)this + 23) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 19);
  if (v4)
  {
    *((void *)this + 20) = v4;
    operator delete(v4);
  }
  double v5 = (void *)*((void *)this + 16);
  if (v5)
  {
    *((void *)this + 17) = v5;
    operator delete(v5);
  }
  double v6 = (void *)*((void *)this + 13);
  if (v6)
  {
    *((void *)this + 14) = v6;
    operator delete(v6);
  }
  int v7 = (void *)*((void *)this + 10);
  if (v7)
  {
    *((void *)this + 11) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 7);
  if (v8)
  {
    *((void *)this + 8) = v8;
    operator delete(v8);
  }
  char v9 = (void *)*((void *)this + 4);
  if (v9)
  {
    *((void *)this + 5) = v9;
    operator delete(v9);
  }
  unsigned int v10 = (void *)*((void *)this + 1);
  if (v10)
  {
    *((void *)this + 2) = v10;
    operator delete(v10);
  }

  PB::Base::~Base(this);
}

void sub_1902EF07C(PB::Base *a1)
{
  sub_1902EEF98(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902EF0B4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 396);
  if (v5)
  {
    PB::TextFormatter::format(this, "absoluteTimestampOfImpact", *(double *)(a1 + 224));
    int v5 = *(_DWORD *)(a1 + 396);
    if ((v5 & 0x100000) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_62;
    }
  }
  else if ((v5 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "anyOffWristAfterImpact");
  int v5 = *(_DWORD *)(a1 + 396);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "aopTimestampOfImpact");
  int v5 = *(_DWORD *)(a1 + 396);
  if ((v5 & 0x200000) == 0)
  {
LABEL_5:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "continuousLockedBeforeImpact");
  int v5 = *(_DWORD *)(a1 + 396);
  if ((v5 & 0x400000) == 0)
  {
LABEL_6:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_64:
  PB::TextFormatter::format(this, "continuousOffWristBeforeImpact");
  if ((*(_DWORD *)(a1 + 396) & 0x800000) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "continuousStaticAndVerticalBeforeImpact");
LABEL_8:
  double v6 = *(double **)(a1 + 8);
  int v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(this, "coreMotionWristStateHistoryEndimestamp", v8);
  }
  char v9 = *(double **)(a1 + 32);
  unsigned int v10 = *(double **)(a1 + 40);
  while (v9 != v10)
  {
    double v11 = *v9++;
    PB::TextFormatter::format(this, "coreMotionWristStateHistoryStartTimestamp", v11);
  }
  unint64_t v12 = *(double **)(a1 + 56);
  char v13 = *(double **)(a1 + 64);
  while (v12 != v13)
  {
    double v14 = *v12++;
    PB::TextFormatter::format(this, "coreMotionWristStateHistoryState", v14);
  }
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x1000000) != 0)
  {
    PB::TextFormatter::format(this, "gatingEnabled");
    int v15 = *(_DWORD *)(a1 + 396);
    if ((v15 & 0x2000000) == 0)
    {
LABEL_16:
      if ((v15 & 0x4000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_68;
    }
  }
  else if ((v15 & 0x2000000) == 0)
  {
    goto LABEL_16;
  }
  PB::TextFormatter::format(this, "gatingLockedNoMotionPreImpact");
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v15 & 0x8000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "gatingMotionPreImpact");
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v15 & 0x10000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "gatingOffWristPostImpact");
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x10000000) == 0)
  {
LABEL_19:
    if ((v15 & 0x20000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "gatingOffWristPreImpact");
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v15 & 0x40000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "gatingOnCharger");
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x40000000) == 0)
  {
LABEL_21:
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "hasMotionBeforeImpact");
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v15 & 4) == 0) {
      goto LABEL_23;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "lastChargerState");
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 4) == 0)
  {
LABEL_23:
    if ((v15 & 8) == 0) {
      goto LABEL_24;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "lastChargerStateDuration", *(double *)(a1 + 240));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 8) == 0)
  {
LABEL_24:
    if ((v15 & 0x10) == 0) {
      goto LABEL_25;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "lastChargerStateDurationThreshold", *(double *)(a1 + 248));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x10) == 0)
  {
LABEL_25:
    if ((v15 & 0x20) == 0) {
      goto LABEL_26;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "lastCoreMotionWristState");
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x20) == 0)
  {
LABEL_26:
    if ((v15 & 0x40) == 0) {
      goto LABEL_27;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "lastCoreMotionWristStateDuration", *(double *)(a1 + 264));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x40) == 0)
  {
LABEL_27:
    if ((v15 & 0x80) == 0) {
      goto LABEL_28;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "lastCoreMotionWristStateDurationPostEnd", *(double *)(a1 + 272));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x80) == 0)
  {
LABEL_28:
    if ((v15 & 0x100) == 0) {
      goto LABEL_29;
    }
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "lastCoreMotionWristStateDurationPostStart", *(double *)(a1 + 280));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x100) == 0)
  {
LABEL_29:
    if ((v15 & 0x200) == 0) {
      goto LABEL_30;
    }
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(this, "lastCoreMotionWristStateDurationPostThreshold", *(double *)(a1 + 288));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x200) == 0)
  {
LABEL_30:
    if ((v15 & 0x400) == 0) {
      goto LABEL_31;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "lastCoreMotionWristStateDurationPreEnd", *(double *)(a1 + 296));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x400) == 0)
  {
LABEL_31:
    if ((v15 & 0x800) == 0) {
      goto LABEL_32;
    }
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(this, "lastCoreMotionWristStateDurationPreStart", *(double *)(a1 + 304));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x800) == 0)
  {
LABEL_32:
    if ((v15 & 0x1000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(this, "lastLockedStateDurationPreEnd", *(double *)(a1 + 312));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x1000) == 0)
  {
LABEL_33:
    if ((v15 & 0x2000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(this, "lastLockedStateDurationPreStart", *(double *)(a1 + 320));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x2000) == 0)
  {
LABEL_34:
    if ((v15 & 0x4000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(this, "lastMotionState");
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x4000) == 0)
  {
LABEL_35:
    if ((v15 & 0x8000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
LABEL_86:
  PB::TextFormatter::format(this, "lastMotionStateEndTime");
  if ((*(_DWORD *)(a1 + 396) & 0x8000) != 0) {
LABEL_36:
  }
    PB::TextFormatter::format(this, "lastMotionStateStartTime");
LABEL_37:
  unsigned int v16 = *(double **)(a1 + 80);
  unint64_t v17 = *(double **)(a1 + 88);
  while (v16 != v17)
  {
    double v18 = *v16++;
    PB::TextFormatter::format(this, "lockStateHistoryEndTimestamp", v18);
  }
  char v19 = *(double **)(a1 + 104);
  unint64_t v20 = *(double **)(a1 + 112);
  while (v19 != v20)
  {
    double v21 = *v19++;
    PB::TextFormatter::format(this, "lockStateHistoryStartTimestamp", v21);
  }
  unint64_t v22 = *(double **)(a1 + 128);
  unint64_t v23 = *(double **)(a1 + 136);
  while (v22 != v23)
  {
    double v24 = *v22++;
    PB::TextFormatter::format(this, "lockStateHistoryState", v24);
  }
  int v25 = *(_DWORD *)(a1 + 396);
  if ((v25 & 0x10000) != 0)
  {
    PB::TextFormatter::format(this, "motionLookbackBeforeImpactEndOfInterval");
    int v25 = *(_DWORD *)(a1 + 396);
  }
  if ((v25 & 0x20000) != 0) {
    PB::TextFormatter::format(this, "motionLookbackBeforeImpactStartOfInterval");
  }
  unsigned int v26 = *(double **)(a1 + 152);
  uint64_t v27 = *(double **)(a1 + 160);
  while (v26 != v27)
  {
    double v28 = *v26++;
    PB::TextFormatter::format(this, "motionStateHistoryEndTimestamp", v28);
  }
  char v29 = *(double **)(a1 + 176);
  unint64_t v30 = *(double **)(a1 + 184);
  while (v29 != v30)
  {
    double v31 = *v29++;
    PB::TextFormatter::format(this, "motionStateHistoryStartTimestamp", v31);
  }
  uint64_t v32 = *(double **)(a1 + 200);
  char v33 = *(double **)(a1 + 208);
  while (v32 != v33)
  {
    double v34 = *v32++;
    PB::TextFormatter::format(this, "motionStateHistoryState", v34);
  }
  int v35 = *(_DWORD *)(a1 + 396);
  if ((v35 & 0x40000) != 0)
  {
    PB::TextFormatter::format(this, "relativeTimestampToImpact", *(double *)(a1 + 368));
    int v35 = *(_DWORD *)(a1 + 396);
  }
  if ((v35 & 0x80000) != 0) {
    PB::TextFormatter::format(this, "timestamp");
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1902EF684(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v413 = a1 + 216;
    char v414 = (void **)(a1 + 152);
    char v415 = (void **)(a1 + 200);
    double v8 = (void **)(a1 + 176);
    uint64_t v411 = a1 + 192;
    uint64_t v412 = a1 + 168;
    char v9 = (void **)(a1 + 128);
    unsigned int v10 = (void **)(a1 + 80);
    uint64_t v409 = a1 + 96;
    uint64_t v410 = a1 + 144;
    double v11 = (void **)(a1 + 104);
    unint64_t v12 = (void **)(a1 + 56);
    uint64_t v407 = a1 + 72;
    uint64_t v408 = a1 + 120;
    char v13 = (void **)(a1 + 8);
    double v14 = (void **)(a1 + 32);
    uint64_t v405 = a1 + 48;
    uint64_t v406 = a1 + 24;
    while (1)
    {
      uint64_t v15 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v16 = 0;
      unsigned int v17 = 0;
      unint64_t v18 = 0;
      while (1)
      {
        unint64_t v19 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v20 = *(unsigned char *)(v15 + v2);
        v18 |= (unint64_t)(v20 & 0x7F) << v16;
        if ((v20 & 0x80) == 0) {
          break;
        }
        v16 += 7;
        unint64_t v2 = v19;
        BOOL v21 = v17++ > 8;
        if (v21) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v27 = v18 & 7;
      if (v27 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v28 = v18 >> 3;
      switch((v18 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 396) |= 0x80000u;
          unint64_t v29 = *((void *)this + 1);
          unint64_t v30 = *((void *)this + 2);
          uint64_t v31 = *(void *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)this + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_541;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v21 = v33++ > 8;
            }
            while (!v21);
LABEL_385:
            uint64_t v34 = 0;
            goto LABEL_541;
          }
          char v298 = 0;
          unsigned int v299 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)this + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              uint64_t v34 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v300 = v29 + 1;
              char v301 = *(unsigned char *)(v31 + v29);
              *((void *)this + 1) = v300;
              v34 |= (unint64_t)(v301 & 0x7F) << v298;
              if (v301 < 0)
              {
                v298 += 7;
                unint64_t v29 = v300;
                BOOL v21 = v299++ > 8;
                if (v21) {
                  goto LABEL_385;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v34 = 0;
              }
            }
            break;
          }
LABEL_541:
          *(void *)(a1 + 376) = v34;
          goto LABEL_631;
        case 2u:
          *(_DWORD *)(a1 + 396) |= 0x1000000u;
          unint64_t v167 = *((void *)this + 1);
          if (v167 >= *((void *)this + 2))
          {
            BOOL v170 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v168 = v167 + 1;
            int v169 = *(unsigned __int8 *)(*(void *)this + v167);
            *((void *)this + 1) = v168;
            BOOL v170 = v169 != 0;
          }
          *(unsigned char *)(a1 + 388) = v170;
          goto LABEL_631;
        case 3u:
          *(_DWORD *)(a1 + 396) |= 1u;
          unint64_t v171 = *((void *)this + 1);
          if (v171 > 0xFFFFFFFFFFFFFFF7 || v171 + 8 > *((void *)this + 2)) {
            goto LABEL_628;
          }
          *(void *)(a1 + 224) = *(void *)(*(void *)this + v171);
          goto LABEL_630;
        case 4u:
          *(_DWORD *)(a1 + 396) |= 0x40000u;
          unint64_t v172 = *((void *)this + 1);
          if (v172 > 0xFFFFFFFFFFFFFFF7 || v172 + 8 > *((void *)this + 2)) {
            goto LABEL_628;
          }
          *(void *)(a1 + 368) = *(void *)(*(void *)this + v172);
          goto LABEL_630;
        case 5u:
          *(_DWORD *)(a1 + 396) |= 2u;
          unint64_t v173 = *((void *)this + 1);
          unint64_t v174 = *((void *)this + 2);
          uint64_t v175 = *(void *)this;
          if (v173 <= 0xFFFFFFFFFFFFFFF5 && v173 + 10 <= v174)
          {
            char v176 = 0;
            unsigned int v177 = 0;
            uint64_t v178 = 0;
            do
            {
              unint64_t v179 = v173 + 1;
              *((void *)this + 1) = v173 + 1;
              char v180 = *(unsigned char *)(v175 + v173);
              v178 |= (unint64_t)(v180 & 0x7F) << v176;
              if ((v180 & 0x80) == 0) {
                goto LABEL_544;
              }
              v176 += 7;
              unint64_t v173 = v179;
              BOOL v21 = v177++ > 8;
            }
            while (!v21);
LABEL_394:
            uint64_t v178 = 0;
            goto LABEL_544;
          }
          char v302 = 0;
          unsigned int v303 = 0;
          uint64_t v178 = 0;
          if (v174 <= v173) {
            unint64_t v174 = *((void *)this + 1);
          }
          while (2)
          {
            if (v174 == v173)
            {
              uint64_t v178 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v304 = v173 + 1;
              char v305 = *(unsigned char *)(v175 + v173);
              *((void *)this + 1) = v304;
              v178 |= (unint64_t)(v305 & 0x7F) << v302;
              if (v305 < 0)
              {
                v302 += 7;
                unint64_t v173 = v304;
                BOOL v21 = v303++ > 8;
                if (v21) {
                  goto LABEL_394;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v178 = 0;
              }
            }
            break;
          }
LABEL_544:
          *(void *)(a1 + 232) = v178;
          goto LABEL_631;
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x23u:
        case 0x24u:
        case 0x25u:
        case 0x26u:
        case 0x27u:
        case 0x28u:
        case 0x2Cu:
        case 0x2Du:
        case 0x2Eu:
        case 0x2Fu:
        case 0x30u:
        case 0x31u:
        case 0x32u:
LABEL_58:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_631;
        case 0x15u:
          *(_DWORD *)(a1 + 396) |= 0x10u;
          unint64_t v181 = *((void *)this + 1);
          unint64_t v182 = *((void *)this + 2);
          uint64_t v183 = *(void *)this;
          if (v181 <= 0xFFFFFFFFFFFFFFF5 && v181 + 10 <= v182)
          {
            char v184 = 0;
            unsigned int v185 = 0;
            uint64_t v186 = 0;
            do
            {
              unint64_t v187 = v181 + 1;
              *((void *)this + 1) = v181 + 1;
              char v188 = *(unsigned char *)(v183 + v181);
              v186 |= (unint64_t)(v188 & 0x7F) << v184;
              if ((v188 & 0x80) == 0) {
                goto LABEL_547;
              }
              v184 += 7;
              unint64_t v181 = v187;
              BOOL v21 = v185++ > 8;
            }
            while (!v21);
LABEL_401:
            uint64_t v186 = 0;
            goto LABEL_547;
          }
          char v306 = 0;
          unsigned int v307 = 0;
          uint64_t v186 = 0;
          if (v182 <= v181) {
            unint64_t v182 = *((void *)this + 1);
          }
          while (2)
          {
            if (v182 == v181)
            {
              uint64_t v186 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v308 = v181 + 1;
              char v309 = *(unsigned char *)(v183 + v181);
              *((void *)this + 1) = v308;
              v186 |= (unint64_t)(v309 & 0x7F) << v306;
              if (v309 < 0)
              {
                v306 += 7;
                unint64_t v181 = v308;
                BOOL v21 = v307++ > 8;
                if (v21) {
                  goto LABEL_401;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v186 = 0;
              }
            }
            break;
          }
LABEL_547:
          *(void *)(a1 + 256) = v186;
          goto LABEL_631;
        case 0x16u:
          *(_DWORD *)(a1 + 396) |= 0x20u;
          unint64_t v189 = *((void *)this + 1);
          if (v189 > 0xFFFFFFFFFFFFFFF7 || v189 + 8 > *((void *)this + 2)) {
            goto LABEL_628;
          }
          *(void *)(a1 + 264) = *(void *)(*(void *)this + v189);
          goto LABEL_630;
        case 0x17u:
          *(_DWORD *)(a1 + 396) |= 0x100u;
          unint64_t v190 = *((void *)this + 1);
          if (v190 > 0xFFFFFFFFFFFFFFF7 || v190 + 8 > *((void *)this + 2)) {
            goto LABEL_628;
          }
          *(void *)(a1 + 288) = *(void *)(*(void *)this + v190);
          goto LABEL_630;
        case 0x18u:
          *(_DWORD *)(a1 + 396) |= 0x400u;
          unint64_t v191 = *((void *)this + 1);
          if (v191 > 0xFFFFFFFFFFFFFFF7 || v191 + 8 > *((void *)this + 2)) {
            goto LABEL_628;
          }
          *(void *)(a1 + 304) = *(void *)(*(void *)this + v191);
          goto LABEL_630;
        case 0x19u:
          *(_DWORD *)(a1 + 396) |= 0x200u;
          unint64_t v192 = *((void *)this + 1);
          if (v192 > 0xFFFFFFFFFFFFFFF7 || v192 + 8 > *((void *)this + 2)) {
            goto LABEL_628;
          }
          *(void *)(a1 + 296) = *(void *)(*(void *)this + v192);
          goto LABEL_630;
        case 0x1Au:
          *(_DWORD *)(a1 + 396) |= 0x80u;
          unint64_t v193 = *((void *)this + 1);
          if (v193 > 0xFFFFFFFFFFFFFFF7 || v193 + 8 > *((void *)this + 2)) {
            goto LABEL_628;
          }
          *(void *)(a1 + 280) = *(void *)(*(void *)this + v193);
          goto LABEL_630;
        case 0x1Bu:
          *(_DWORD *)(a1 + 396) |= 0x40u;
          unint64_t v194 = *((void *)this + 1);
          if (v194 > 0xFFFFFFFFFFFFFFF7 || v194 + 8 > *((void *)this + 2)) {
            goto LABEL_628;
          }
          *(void *)(a1 + 272) = *(void *)(*(void *)this + v194);
          goto LABEL_630;
        case 0x1Cu:
          *(_DWORD *)(a1 + 396) |= 0x1000u;
          unint64_t v195 = *((void *)this + 1);
          if (v195 > 0xFFFFFFFFFFFFFFF7 || v195 + 8 > *((void *)this + 2)) {
            goto LABEL_628;
          }
          *(void *)(a1 + 320) = *(void *)(*(void *)this + v195);
          goto LABEL_630;
        case 0x1Du:
          *(_DWORD *)(a1 + 396) |= 0x800u;
          unint64_t v196 = *((void *)this + 1);
          if (v196 > 0xFFFFFFFFFFFFFFF7 || v196 + 8 > *((void *)this + 2)) {
            goto LABEL_628;
          }
          *(void *)(a1 + 312) = *(void *)(*(void *)this + v196);
          goto LABEL_630;
        case 0x1Eu:
          *(_DWORD *)(a1 + 396) |= 0x20000u;
          unint64_t v197 = *((void *)this + 1);
          unint64_t v198 = *((void *)this + 2);
          uint64_t v199 = *(void *)this;
          if (v197 <= 0xFFFFFFFFFFFFFFF5 && v197 + 10 <= v198)
          {
            char v200 = 0;
            unsigned int v201 = 0;
            uint64_t v202 = 0;
            do
            {
              unint64_t v203 = v197 + 1;
              *((void *)this + 1) = v197 + 1;
              char v204 = *(unsigned char *)(v199 + v197);
              v202 |= (unint64_t)(v204 & 0x7F) << v200;
              if ((v204 & 0x80) == 0) {
                goto LABEL_550;
              }
              v200 += 7;
              unint64_t v197 = v203;
              BOOL v21 = v201++ > 8;
            }
            while (!v21);
LABEL_408:
            uint64_t v202 = 0;
            goto LABEL_550;
          }
          char v310 = 0;
          unsigned int v311 = 0;
          uint64_t v202 = 0;
          if (v198 <= v197) {
            unint64_t v198 = *((void *)this + 1);
          }
          while (2)
          {
            if (v198 == v197)
            {
              uint64_t v202 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v312 = v197 + 1;
              char v313 = *(unsigned char *)(v199 + v197);
              *((void *)this + 1) = v312;
              v202 |= (unint64_t)(v313 & 0x7F) << v310;
              if (v313 < 0)
              {
                v310 += 7;
                unint64_t v197 = v312;
                BOOL v21 = v311++ > 8;
                if (v21) {
                  goto LABEL_408;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v202 = 0;
              }
            }
            break;
          }
LABEL_550:
          *(void *)(a1 + 360) = v202;
          goto LABEL_631;
        case 0x1Fu:
          *(_DWORD *)(a1 + 396) |= 0x10000u;
          unint64_t v205 = *((void *)this + 1);
          unint64_t v206 = *((void *)this + 2);
          uint64_t v207 = *(void *)this;
          if (v205 <= 0xFFFFFFFFFFFFFFF5 && v205 + 10 <= v206)
          {
            char v208 = 0;
            unsigned int v209 = 0;
            uint64_t v210 = 0;
            do
            {
              unint64_t v211 = v205 + 1;
              *((void *)this + 1) = v205 + 1;
              char v212 = *(unsigned char *)(v207 + v205);
              v210 |= (unint64_t)(v212 & 0x7F) << v208;
              if ((v212 & 0x80) == 0) {
                goto LABEL_553;
              }
              v208 += 7;
              unint64_t v205 = v211;
              BOOL v21 = v209++ > 8;
            }
            while (!v21);
LABEL_415:
            uint64_t v210 = 0;
            goto LABEL_553;
          }
          char v314 = 0;
          unsigned int v315 = 0;
          uint64_t v210 = 0;
          if (v206 <= v205) {
            unint64_t v206 = *((void *)this + 1);
          }
          while (2)
          {
            if (v206 == v205)
            {
              uint64_t v210 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v316 = v205 + 1;
              char v317 = *(unsigned char *)(v207 + v205);
              *((void *)this + 1) = v316;
              v210 |= (unint64_t)(v317 & 0x7F) << v314;
              if (v317 < 0)
              {
                v314 += 7;
                unint64_t v205 = v316;
                BOOL v21 = v315++ > 8;
                if (v21) {
                  goto LABEL_415;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v210 = 0;
              }
            }
            break;
          }
LABEL_553:
          *(void *)(a1 + 352) = v210;
          goto LABEL_631;
        case 0x20u:
          *(_DWORD *)(a1 + 396) |= 0x8000u;
          unint64_t v213 = *((void *)this + 1);
          unint64_t v214 = *((void *)this + 2);
          uint64_t v215 = *(void *)this;
          if (v213 <= 0xFFFFFFFFFFFFFFF5 && v213 + 10 <= v214)
          {
            char v216 = 0;
            unsigned int v217 = 0;
            uint64_t v218 = 0;
            do
            {
              unint64_t v219 = v213 + 1;
              *((void *)this + 1) = v213 + 1;
              char v220 = *(unsigned char *)(v215 + v213);
              v218 |= (unint64_t)(v220 & 0x7F) << v216;
              if ((v220 & 0x80) == 0) {
                goto LABEL_556;
              }
              v216 += 7;
              unint64_t v213 = v219;
              BOOL v21 = v217++ > 8;
            }
            while (!v21);
LABEL_422:
            uint64_t v218 = 0;
            goto LABEL_556;
          }
          char v318 = 0;
          unsigned int v319 = 0;
          uint64_t v218 = 0;
          if (v214 <= v213) {
            unint64_t v214 = *((void *)this + 1);
          }
          while (2)
          {
            if (v214 == v213)
            {
              uint64_t v218 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v320 = v213 + 1;
              char v321 = *(unsigned char *)(v215 + v213);
              *((void *)this + 1) = v320;
              v218 |= (unint64_t)(v321 & 0x7F) << v318;
              if (v321 < 0)
              {
                v318 += 7;
                unint64_t v213 = v320;
                BOOL v21 = v319++ > 8;
                if (v21) {
                  goto LABEL_422;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v218 = 0;
              }
            }
            break;
          }
LABEL_556:
          *(void *)(a1 + 344) = v218;
          goto LABEL_631;
        case 0x21u:
          *(_DWORD *)(a1 + 396) |= 0x4000u;
          unint64_t v221 = *((void *)this + 1);
          unint64_t v222 = *((void *)this + 2);
          uint64_t v223 = *(void *)this;
          if (v221 <= 0xFFFFFFFFFFFFFFF5 && v221 + 10 <= v222)
          {
            char v224 = 0;
            unsigned int v225 = 0;
            uint64_t v226 = 0;
            do
            {
              unint64_t v227 = v221 + 1;
              *((void *)this + 1) = v221 + 1;
              char v228 = *(unsigned char *)(v223 + v221);
              v226 |= (unint64_t)(v228 & 0x7F) << v224;
              if ((v228 & 0x80) == 0) {
                goto LABEL_559;
              }
              v224 += 7;
              unint64_t v221 = v227;
              BOOL v21 = v225++ > 8;
            }
            while (!v21);
LABEL_429:
            uint64_t v226 = 0;
            goto LABEL_559;
          }
          char v322 = 0;
          unsigned int v323 = 0;
          uint64_t v226 = 0;
          if (v222 <= v221) {
            unint64_t v222 = *((void *)this + 1);
          }
          while (2)
          {
            if (v222 == v221)
            {
              uint64_t v226 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v324 = v221 + 1;
              char v325 = *(unsigned char *)(v223 + v221);
              *((void *)this + 1) = v324;
              v226 |= (unint64_t)(v325 & 0x7F) << v322;
              if (v325 < 0)
              {
                v322 += 7;
                unint64_t v221 = v324;
                BOOL v21 = v323++ > 8;
                if (v21) {
                  goto LABEL_429;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v226 = 0;
              }
            }
            break;
          }
LABEL_559:
          *(void *)(a1 + 336) = v226;
          goto LABEL_631;
        case 0x22u:
          *(_DWORD *)(a1 + 396) |= 0x2000u;
          unint64_t v229 = *((void *)this + 1);
          unint64_t v230 = *((void *)this + 2);
          uint64_t v231 = *(void *)this;
          if (v229 <= 0xFFFFFFFFFFFFFFF5 && v229 + 10 <= v230)
          {
            char v232 = 0;
            unsigned int v233 = 0;
            uint64_t v234 = 0;
            do
            {
              unint64_t v235 = v229 + 1;
              *((void *)this + 1) = v229 + 1;
              char v236 = *(unsigned char *)(v231 + v229);
              v234 |= (unint64_t)(v236 & 0x7F) << v232;
              if ((v236 & 0x80) == 0) {
                goto LABEL_562;
              }
              v232 += 7;
              unint64_t v229 = v235;
              BOOL v21 = v233++ > 8;
            }
            while (!v21);
LABEL_436:
            uint64_t v234 = 0;
            goto LABEL_562;
          }
          char v326 = 0;
          unsigned int v327 = 0;
          uint64_t v234 = 0;
          if (v230 <= v229) {
            unint64_t v230 = *((void *)this + 1);
          }
          while (2)
          {
            if (v230 == v229)
            {
              uint64_t v234 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v328 = v229 + 1;
              char v329 = *(unsigned char *)(v231 + v229);
              *((void *)this + 1) = v328;
              v234 |= (unint64_t)(v329 & 0x7F) << v326;
              if (v329 < 0)
              {
                v326 += 7;
                unint64_t v229 = v328;
                BOOL v21 = v327++ > 8;
                if (v21) {
                  goto LABEL_436;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v234 = 0;
              }
            }
            break;
          }
LABEL_562:
          *(void *)(a1 + 328) = v234;
          goto LABEL_631;
        case 0x29u:
          *(_DWORD *)(a1 + 396) |= 0x80000000;
          unint64_t v237 = *((void *)this + 1);
          if (v237 >= *((void *)this + 2))
          {
            BOOL v240 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v238 = v237 + 1;
            int v239 = *(unsigned __int8 *)(*(void *)this + v237);
            *((void *)this + 1) = v238;
            BOOL v240 = v239 != 0;
          }
          *(unsigned char *)(a1 + 395) = v240;
          goto LABEL_631;
        case 0x2Au:
          *(_DWORD *)(a1 + 396) |= 4u;
          unint64_t v241 = *((void *)this + 1);
          if (v241 > 0xFFFFFFFFFFFFFFF7 || v241 + 8 > *((void *)this + 2)) {
            goto LABEL_628;
          }
          *(void *)(a1 + 240) = *(void *)(*(void *)this + v241);
          goto LABEL_630;
        case 0x2Bu:
          *(_DWORD *)(a1 + 396) |= 8u;
          unint64_t v242 = *((void *)this + 1);
          if (v242 > 0xFFFFFFFFFFFFFFF7 || v242 + 8 > *((void *)this + 2)) {
            goto LABEL_628;
          }
          *(void *)(a1 + 248) = *(void *)(*(void *)this + v242);
          goto LABEL_630;
        case 0x33u:
          *(_DWORD *)(a1 + 396) |= 0x100000u;
          unint64_t v243 = *((void *)this + 1);
          if (v243 >= *((void *)this + 2))
          {
            BOOL v246 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v244 = v243 + 1;
            int v245 = *(unsigned __int8 *)(*(void *)this + v243);
            *((void *)this + 1) = v244;
            BOOL v246 = v245 != 0;
          }
          *(unsigned char *)(a1 + 384) = v246;
          goto LABEL_631;
        case 0x34u:
          *(_DWORD *)(a1 + 396) |= 0x400000u;
          unint64_t v247 = *((void *)this + 1);
          if (v247 >= *((void *)this + 2))
          {
            BOOL v250 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v248 = v247 + 1;
            int v249 = *(unsigned __int8 *)(*(void *)this + v247);
            *((void *)this + 1) = v248;
            BOOL v250 = v249 != 0;
          }
          *(unsigned char *)(a1 + 386) = v250;
          goto LABEL_631;
        case 0x35u:
          *(_DWORD *)(a1 + 396) |= 0x40000000u;
          unint64_t v251 = *((void *)this + 1);
          if (v251 >= *((void *)this + 2))
          {
            BOOL v254 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v252 = v251 + 1;
            int v253 = *(unsigned __int8 *)(*(void *)this + v251);
            *((void *)this + 1) = v252;
            BOOL v254 = v253 != 0;
          }
          *(unsigned char *)(a1 + 394) = v254;
          goto LABEL_631;
        case 0x36u:
          *(_DWORD *)(a1 + 396) |= 0x200000u;
          unint64_t v255 = *((void *)this + 1);
          if (v255 >= *((void *)this + 2))
          {
            BOOL v258 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v256 = v255 + 1;
            int v257 = *(unsigned __int8 *)(*(void *)this + v255);
            *((void *)this + 1) = v256;
            BOOL v258 = v257 != 0;
          }
          *(unsigned char *)(a1 + 385) = v258;
          goto LABEL_631;
        case 0x37u:
          *(_DWORD *)(a1 + 396) |= 0x800000u;
          unint64_t v259 = *((void *)this + 1);
          if (v259 >= *((void *)this + 2))
          {
            BOOL v262 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v260 = v259 + 1;
            int v261 = *(unsigned __int8 *)(*(void *)this + v259);
            *((void *)this + 1) = v260;
            BOOL v262 = v261 != 0;
          }
          *(unsigned char *)(a1 + 387) = v262;
          goto LABEL_631;
        default:
          switch((int)v28)
          {
            case 151:
              if (v27 != 2)
              {
                unsigned int v280 = *(char **)(a1 + 40);
                unint64_t v279 = *(void *)(a1 + 48);
                if ((unint64_t)v280 >= v279)
                {
                  unsigned int v330 = (char *)*v14;
                  uint64_t v331 = (v280 - (unsigned char *)*v14) >> 3;
                  unint64_t v332 = v331 + 1;
                  if ((unint64_t)(v331 + 1) >> 61) {
LABEL_641:
                  }
                    sub_1903479E8();
                  uint64_t v333 = v279 - (void)v330;
                  if (v333 >> 2 > v332) {
                    unint64_t v332 = v333 >> 2;
                  }
                  if ((unint64_t)v333 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v334 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v334 = v332;
                  }
                  if (v334)
                  {
                    unint64_t v335 = (char *)sub_190347A00(v405, v334);
                    unsigned int v330 = *(char **)(a1 + 32);
                    unsigned int v280 = *(char **)(a1 + 40);
                  }
                  else
                  {
                    unint64_t v335 = 0;
                  }
                  unsigned int v384 = &v335[8 * v331];
                  *(void *)unsigned int v384 = 0;
                  unint64_t v281 = v384 + 8;
                  while (v280 != v330)
                  {
                    uint64_t v385 = *((void *)v280 - 1);
                    v280 -= 8;
                    *((void *)v384 - 1) = v385;
                    v384 -= 8;
                  }
                  *(void *)(a1 + 32) = v384;
                  *(void *)(a1 + 40) = v281;
                  *(void *)(a1 + 48) = &v335[8 * v334];
                  if (v330) {
                    operator delete(v330);
                  }
                }
                else
                {
                  *(void *)unsigned int v280 = 0;
                  unint64_t v281 = v280 + 8;
                }
                *(void *)(a1 + 40) = v281;
                goto LABEL_626;
              }
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v37 = *((void *)this + 1);
              unint64_t v38 = *((void *)this + 2);
              while (v37 < v38 && !*((unsigned char *)this + 24))
              {
                unint64_t v40 = *(char **)(a1 + 40);
                unint64_t v39 = *(void *)(a1 + 48);
                if ((unint64_t)v40 >= v39)
                {
                  unint64_t v42 = (char *)*v14;
                  uint64_t v43 = (v40 - (unsigned char *)*v14) >> 3;
                  unint64_t v44 = v43 + 1;
                  if ((unint64_t)(v43 + 1) >> 61) {
                    goto LABEL_641;
                  }
                  uint64_t v45 = v39 - (void)v42;
                  if (v45 >> 2 > v44) {
                    unint64_t v44 = v45 >> 2;
                  }
                  if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v46 = v44;
                  }
                  if (v46)
                  {
                    unint64_t v47 = (char *)sub_190347A00(v405, v46);
                    unint64_t v42 = *(char **)(a1 + 32);
                    unint64_t v40 = *(char **)(a1 + 40);
                  }
                  else
                  {
                    unint64_t v47 = 0;
                  }
                  char v48 = &v47[8 * v43];
                  *(void *)char v48 = 0;
                  unint64_t v41 = v48 + 8;
                  while (v40 != v42)
                  {
                    uint64_t v49 = *((void *)v40 - 1);
                    v40 -= 8;
                    *((void *)v48 - 1) = v49;
                    v48 -= 8;
                  }
                  *(void *)(a1 + 32) = v48;
                  *(void *)(a1 + 40) = v41;
                  *(void *)(a1 + 48) = &v47[8 * v46];
                  if (v42) {
                    operator delete(v42);
                  }
                }
                else
                {
                  *(void *)unint64_t v40 = 0;
                  unint64_t v41 = v40 + 8;
                }
                *(void *)(a1 + 40) = v41;
                unint64_t v50 = *((void *)this + 1);
                if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((void *)this + 2)) {
                  goto LABEL_252;
                }
                *(v41 - 1) = *(void *)(*(void *)this + v50);
                unint64_t v38 = *((void *)this + 2);
                unint64_t v37 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v37;
              }
              goto LABEL_253;
            case 152:
              if (v27 != 2)
              {
                char v283 = *(char **)(a1 + 16);
                unint64_t v282 = *(void *)(a1 + 24);
                if ((unint64_t)v283 >= v282)
                {
                  uint64_t v336 = (char *)*v13;
                  uint64_t v337 = (v283 - (unsigned char *)*v13) >> 3;
                  unint64_t v338 = v337 + 1;
                  if ((unint64_t)(v337 + 1) >> 61) {
LABEL_642:
                  }
                    sub_1903479E8();
                  uint64_t v339 = v282 - (void)v336;
                  if (v339 >> 2 > v338) {
                    unint64_t v338 = v339 >> 2;
                  }
                  if ((unint64_t)v339 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v340 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v340 = v338;
                  }
                  if (v340)
                  {
                    char v341 = (char *)sub_190347A00(v406, v340);
                    uint64_t v336 = *(char **)(a1 + 8);
                    char v283 = *(char **)(a1 + 16);
                  }
                  else
                  {
                    char v341 = 0;
                  }
                  char v386 = &v341[8 * v337];
                  *(void *)char v386 = 0;
                  unint64_t v281 = v386 + 8;
                  while (v283 != v336)
                  {
                    uint64_t v387 = *((void *)v283 - 1);
                    v283 -= 8;
                    *((void *)v386 - 1) = v387;
                    v386 -= 8;
                  }
                  *(void *)(a1 + 8) = v386;
                  *(void *)(a1 + 16) = v281;
                  *(void *)(a1 + 24) = &v341[8 * v340];
                  if (v336) {
                    operator delete(v336);
                  }
                }
                else
                {
                  *(void *)char v283 = 0;
                  unint64_t v281 = v283 + 8;
                }
                *(void *)(a1 + 16) = v281;
                goto LABEL_626;
              }
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v55 = *((void *)this + 1);
              unint64_t v56 = *((void *)this + 2);
              while (v55 < v56 && !*((unsigned char *)this + 24))
              {
                unint64_t v58 = *(char **)(a1 + 16);
                unint64_t v57 = *(void *)(a1 + 24);
                if ((unint64_t)v58 >= v57)
                {
                  char v60 = (char *)*v13;
                  uint64_t v61 = (v58 - (unsigned char *)*v13) >> 3;
                  unint64_t v62 = v61 + 1;
                  if ((unint64_t)(v61 + 1) >> 61) {
                    goto LABEL_642;
                  }
                  uint64_t v63 = v57 - (void)v60;
                  if (v63 >> 2 > v62) {
                    unint64_t v62 = v63 >> 2;
                  }
                  if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v64 = v62;
                  }
                  if (v64)
                  {
                    unint64_t v65 = (char *)sub_190347A00(v406, v64);
                    char v60 = *(char **)(a1 + 8);
                    unint64_t v58 = *(char **)(a1 + 16);
                  }
                  else
                  {
                    unint64_t v65 = 0;
                  }
                  unint64_t v66 = &v65[8 * v61];
                  *(void *)unint64_t v66 = 0;
                  uint64_t v59 = v66 + 8;
                  while (v58 != v60)
                  {
                    uint64_t v67 = *((void *)v58 - 1);
                    v58 -= 8;
                    *((void *)v66 - 1) = v67;
                    v66 -= 8;
                  }
                  *(void *)(a1 + 8) = v66;
                  *(void *)(a1 + 16) = v59;
                  *(void *)(a1 + 24) = &v65[8 * v64];
                  if (v60) {
                    operator delete(v60);
                  }
                }
                else
                {
                  *(void *)unint64_t v58 = 0;
                  uint64_t v59 = v58 + 8;
                }
                *(void *)(a1 + 16) = v59;
                unint64_t v68 = *((void *)this + 1);
                if (v68 > 0xFFFFFFFFFFFFFFF7 || v68 + 8 > *((void *)this + 2)) {
                  goto LABEL_252;
                }
                *(v59 - 1) = *(void *)(*(void *)this + v68);
                unint64_t v56 = *((void *)this + 2);
                unint64_t v55 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v55;
              }
              goto LABEL_253;
            case 153:
              if (v27 != 2)
              {
                unint64_t v285 = *(char **)(a1 + 64);
                unint64_t v284 = *(void *)(a1 + 72);
                if ((unint64_t)v285 >= v284)
                {
                  unint64_t v342 = (char *)*v12;
                  uint64_t v343 = (v285 - (unsigned char *)*v12) >> 3;
                  unint64_t v344 = v343 + 1;
                  if ((unint64_t)(v343 + 1) >> 61) {
LABEL_643:
                  }
                    sub_1903479E8();
                  uint64_t v345 = v284 - (void)v342;
                  if (v345 >> 2 > v344) {
                    unint64_t v344 = v345 >> 2;
                  }
                  if ((unint64_t)v345 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v346 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v346 = v344;
                  }
                  if (v346)
                  {
                    uint64_t v347 = (char *)sub_190347A00(v407, v346);
                    unint64_t v342 = *(char **)(a1 + 56);
                    unint64_t v285 = *(char **)(a1 + 64);
                  }
                  else
                  {
                    uint64_t v347 = 0;
                  }
                  unsigned int v388 = &v347[8 * v343];
                  *(void *)unsigned int v388 = 0;
                  unint64_t v281 = v388 + 8;
                  while (v285 != v342)
                  {
                    uint64_t v389 = *((void *)v285 - 1);
                    v285 -= 8;
                    *((void *)v388 - 1) = v389;
                    v388 -= 8;
                  }
                  *(void *)(a1 + 56) = v388;
                  *(void *)(a1 + 64) = v281;
                  *(void *)(a1 + 72) = &v347[8 * v346];
                  if (v342) {
                    operator delete(v342);
                  }
                }
                else
                {
                  *(void *)unint64_t v285 = 0;
                  unint64_t v281 = v285 + 8;
                }
                *(void *)(a1 + 64) = v281;
                goto LABEL_626;
              }
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v69 = *((void *)this + 1);
              unint64_t v70 = *((void *)this + 2);
              while (v69 < v70 && !*((unsigned char *)this + 24))
              {
                unsigned int v72 = *(char **)(a1 + 64);
                unint64_t v71 = *(void *)(a1 + 72);
                if ((unint64_t)v72 >= v71)
                {
                  unint64_t v74 = (char *)*v12;
                  uint64_t v75 = (v72 - (unsigned char *)*v12) >> 3;
                  unint64_t v76 = v75 + 1;
                  if ((unint64_t)(v75 + 1) >> 61) {
                    goto LABEL_643;
                  }
                  uint64_t v77 = v71 - (void)v74;
                  if (v77 >> 2 > v76) {
                    unint64_t v76 = v77 >> 2;
                  }
                  if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v78 = v76;
                  }
                  if (v78)
                  {
                    uint64_t v79 = (char *)sub_190347A00(v407, v78);
                    unint64_t v74 = *(char **)(a1 + 56);
                    unsigned int v72 = *(char **)(a1 + 64);
                  }
                  else
                  {
                    uint64_t v79 = 0;
                  }
                  char v80 = &v79[8 * v75];
                  *(void *)char v80 = 0;
                  uint64_t v73 = v80 + 8;
                  while (v72 != v74)
                  {
                    uint64_t v81 = *((void *)v72 - 1);
                    v72 -= 8;
                    *((void *)v80 - 1) = v81;
                    v80 -= 8;
                  }
                  *(void *)(a1 + 56) = v80;
                  *(void *)(a1 + 64) = v73;
                  *(void *)(a1 + 72) = &v79[8 * v78];
                  if (v74) {
                    operator delete(v74);
                  }
                }
                else
                {
                  *(void *)unsigned int v72 = 0;
                  uint64_t v73 = v72 + 8;
                }
                *(void *)(a1 + 64) = v73;
                unint64_t v82 = *((void *)this + 1);
                if (v82 > 0xFFFFFFFFFFFFFFF7 || v82 + 8 > *((void *)this + 2)) {
                  goto LABEL_252;
                }
                *(v73 - 1) = *(void *)(*(void *)this + v82);
                unint64_t v70 = *((void *)this + 2);
                unint64_t v69 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v69;
              }
              goto LABEL_253;
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
              goto LABEL_58;
            case 161:
              if (v27 != 2)
              {
                char v287 = *(char **)(a1 + 112);
                unint64_t v286 = *(void *)(a1 + 120);
                if ((unint64_t)v287 >= v286)
                {
                  unint64_t v348 = (char *)*v11;
                  uint64_t v349 = (v287 - (unsigned char *)*v11) >> 3;
                  unint64_t v350 = v349 + 1;
                  if ((unint64_t)(v349 + 1) >> 61) {
LABEL_644:
                  }
                    sub_1903479E8();
                  uint64_t v351 = v286 - (void)v348;
                  if (v351 >> 2 > v350) {
                    unint64_t v350 = v351 >> 2;
                  }
                  if ((unint64_t)v351 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v352 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v352 = v350;
                  }
                  if (v352)
                  {
                    char v353 = (char *)sub_190347A00(v408, v352);
                    unint64_t v348 = *(char **)(a1 + 104);
                    char v287 = *(char **)(a1 + 112);
                  }
                  else
                  {
                    char v353 = 0;
                  }
                  char v390 = &v353[8 * v349];
                  *(void *)char v390 = 0;
                  unint64_t v281 = v390 + 8;
                  while (v287 != v348)
                  {
                    uint64_t v391 = *((void *)v287 - 1);
                    v287 -= 8;
                    *((void *)v390 - 1) = v391;
                    v390 -= 8;
                  }
                  *(void *)(a1 + 104) = v390;
                  *(void *)(a1 + 112) = v281;
                  *(void *)(a1 + 120) = &v353[8 * v352];
                  if (v348) {
                    operator delete(v348);
                  }
                }
                else
                {
                  *(void *)char v287 = 0;
                  unint64_t v281 = v287 + 8;
                }
                *(void *)(a1 + 112) = v281;
                goto LABEL_626;
              }
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v83 = *((void *)this + 1);
              unint64_t v84 = *((void *)this + 2);
              while (v83 < v84 && !*((unsigned char *)this + 24))
              {
                unint64_t v86 = *(char **)(a1 + 112);
                unint64_t v85 = *(void *)(a1 + 120);
                if ((unint64_t)v86 >= v85)
                {
                  BOOL v88 = (char *)*v11;
                  uint64_t v89 = (v86 - (unsigned char *)*v11) >> 3;
                  unint64_t v90 = v89 + 1;
                  if ((unint64_t)(v89 + 1) >> 61) {
                    goto LABEL_644;
                  }
                  uint64_t v91 = v85 - (void)v88;
                  if (v91 >> 2 > v90) {
                    unint64_t v90 = v91 >> 2;
                  }
                  if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v92 = v90;
                  }
                  if (v92)
                  {
                    unint64_t v93 = (char *)sub_190347A00(v408, v92);
                    BOOL v88 = *(char **)(a1 + 104);
                    unint64_t v86 = *(char **)(a1 + 112);
                  }
                  else
                  {
                    unint64_t v93 = 0;
                  }
                  unint64_t v94 = &v93[8 * v89];
                  *(void *)unint64_t v94 = 0;
                  int v87 = v94 + 8;
                  while (v86 != v88)
                  {
                    uint64_t v95 = *((void *)v86 - 1);
                    v86 -= 8;
                    *((void *)v94 - 1) = v95;
                    v94 -= 8;
                  }
                  *(void *)(a1 + 104) = v94;
                  *(void *)(a1 + 112) = v87;
                  *(void *)(a1 + 120) = &v93[8 * v92];
                  if (v88) {
                    operator delete(v88);
                  }
                }
                else
                {
                  *(void *)unint64_t v86 = 0;
                  int v87 = v86 + 8;
                }
                *(void *)(a1 + 112) = v87;
                unint64_t v96 = *((void *)this + 1);
                if (v96 > 0xFFFFFFFFFFFFFFF7 || v96 + 8 > *((void *)this + 2)) {
                  goto LABEL_252;
                }
                *(v87 - 1) = *(void *)(*(void *)this + v96);
                unint64_t v84 = *((void *)this + 2);
                unint64_t v83 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v83;
              }
              goto LABEL_253;
            case 162:
              if (v27 != 2)
              {
                unint64_t v289 = *(char **)(a1 + 88);
                unint64_t v288 = *(void *)(a1 + 96);
                if ((unint64_t)v289 >= v288)
                {
                  unsigned int v354 = (char *)*v10;
                  uint64_t v355 = (v289 - (unsigned char *)*v10) >> 3;
                  unint64_t v356 = v355 + 1;
                  if ((unint64_t)(v355 + 1) >> 61) {
LABEL_645:
                  }
                    sub_1903479E8();
                  uint64_t v357 = v288 - (void)v354;
                  if (v357 >> 2 > v356) {
                    unint64_t v356 = v357 >> 2;
                  }
                  if ((unint64_t)v357 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v358 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v358 = v356;
                  }
                  if (v358)
                  {
                    unint64_t v359 = (char *)sub_190347A00(v409, v358);
                    unsigned int v354 = *(char **)(a1 + 80);
                    unint64_t v289 = *(char **)(a1 + 88);
                  }
                  else
                  {
                    unint64_t v359 = 0;
                  }
                  unsigned int v392 = &v359[8 * v355];
                  *(void *)unsigned int v392 = 0;
                  unint64_t v281 = v392 + 8;
                  while (v289 != v354)
                  {
                    uint64_t v393 = *((void *)v289 - 1);
                    v289 -= 8;
                    *((void *)v392 - 1) = v393;
                    v392 -= 8;
                  }
                  *(void *)(a1 + 80) = v392;
                  *(void *)(a1 + 88) = v281;
                  *(void *)(a1 + 96) = &v359[8 * v358];
                  if (v354) {
                    operator delete(v354);
                  }
                }
                else
                {
                  *(void *)unint64_t v289 = 0;
                  unint64_t v281 = v289 + 8;
                }
                *(void *)(a1 + 88) = v281;
                goto LABEL_626;
              }
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v97 = *((void *)this + 1);
              unint64_t v98 = *((void *)this + 2);
              while (v97 < v98 && !*((unsigned char *)this + 24))
              {
                char v100 = *(char **)(a1 + 88);
                unint64_t v99 = *(void *)(a1 + 96);
                if ((unint64_t)v100 >= v99)
                {
                  unint64_t v102 = (char *)*v10;
                  uint64_t v103 = (v100 - (unsigned char *)*v10) >> 3;
                  unint64_t v104 = v103 + 1;
                  if ((unint64_t)(v103 + 1) >> 61) {
                    goto LABEL_645;
                  }
                  uint64_t v105 = v99 - (void)v102;
                  if (v105 >> 2 > v104) {
                    unint64_t v104 = v105 >> 2;
                  }
                  if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v106 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v106 = v104;
                  }
                  if (v106)
                  {
                    unint64_t v107 = (char *)sub_190347A00(v409, v106);
                    unint64_t v102 = *(char **)(a1 + 80);
                    char v100 = *(char **)(a1 + 88);
                  }
                  else
                  {
                    unint64_t v107 = 0;
                  }
                  char v108 = &v107[8 * v103];
                  *(void *)char v108 = 0;
                  unint64_t v101 = v108 + 8;
                  while (v100 != v102)
                  {
                    uint64_t v109 = *((void *)v100 - 1);
                    v100 -= 8;
                    *((void *)v108 - 1) = v109;
                    v108 -= 8;
                  }
                  *(void *)(a1 + 80) = v108;
                  *(void *)(a1 + 88) = v101;
                  *(void *)(a1 + 96) = &v107[8 * v106];
                  if (v102) {
                    operator delete(v102);
                  }
                }
                else
                {
                  *(void *)char v100 = 0;
                  unint64_t v101 = v100 + 8;
                }
                *(void *)(a1 + 88) = v101;
                unint64_t v110 = *((void *)this + 1);
                if (v110 > 0xFFFFFFFFFFFFFFF7 || v110 + 8 > *((void *)this + 2)) {
                  goto LABEL_252;
                }
                *(v101 - 1) = *(void *)(*(void *)this + v110);
                unint64_t v98 = *((void *)this + 2);
                unint64_t v97 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v97;
              }
              goto LABEL_253;
            case 163:
              if (v27 != 2)
              {
                uint64_t v291 = *(char **)(a1 + 136);
                unint64_t v290 = *(void *)(a1 + 144);
                if ((unint64_t)v291 >= v290)
                {
                  uint64_t v360 = (char *)*v9;
                  uint64_t v361 = (v291 - (unsigned char *)*v9) >> 3;
                  unint64_t v362 = v361 + 1;
                  if ((unint64_t)(v361 + 1) >> 61) {
LABEL_646:
                  }
                    sub_1903479E8();
                  uint64_t v363 = v290 - (void)v360;
                  if (v363 >> 2 > v362) {
                    unint64_t v362 = v363 >> 2;
                  }
                  if ((unint64_t)v363 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v364 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v364 = v362;
                  }
                  if (v364)
                  {
                    char v365 = (char *)sub_190347A00(v410, v364);
                    uint64_t v360 = *(char **)(a1 + 128);
                    uint64_t v291 = *(char **)(a1 + 136);
                  }
                  else
                  {
                    char v365 = 0;
                  }
                  char v394 = &v365[8 * v361];
                  *(void *)char v394 = 0;
                  unint64_t v281 = v394 + 8;
                  while (v291 != v360)
                  {
                    uint64_t v395 = *((void *)v291 - 1);
                    v291 -= 8;
                    *((void *)v394 - 1) = v395;
                    v394 -= 8;
                  }
                  *(void *)(a1 + 128) = v394;
                  *(void *)(a1 + 136) = v281;
                  *(void *)(a1 + 144) = &v365[8 * v364];
                  if (v360) {
                    operator delete(v360);
                  }
                }
                else
                {
                  *(void *)uint64_t v291 = 0;
                  unint64_t v281 = v291 + 8;
                }
                *(void *)(a1 + 136) = v281;
                goto LABEL_626;
              }
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v111 = *((void *)this + 1);
              unint64_t v112 = *((void *)this + 2);
              while (v111 < v112 && !*((unsigned char *)this + 24))
              {
                uint64_t v114 = *(char **)(a1 + 136);
                unint64_t v113 = *(void *)(a1 + 144);
                if ((unint64_t)v114 >= v113)
                {
                  char v116 = (char *)*v9;
                  uint64_t v117 = (v114 - (unsigned char *)*v9) >> 3;
                  unint64_t v118 = v117 + 1;
                  if ((unint64_t)(v117 + 1) >> 61) {
                    goto LABEL_646;
                  }
                  uint64_t v119 = v113 - (void)v116;
                  if (v119 >> 2 > v118) {
                    unint64_t v118 = v119 >> 2;
                  }
                  if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v120 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v120 = v118;
                  }
                  if (v120)
                  {
                    unint64_t v121 = (char *)sub_190347A00(v410, v120);
                    char v116 = *(char **)(a1 + 128);
                    uint64_t v114 = *(char **)(a1 + 136);
                  }
                  else
                  {
                    unint64_t v121 = 0;
                  }
                  unint64_t v122 = &v121[8 * v117];
                  *(void *)unint64_t v122 = 0;
                  unint64_t v115 = v122 + 8;
                  while (v114 != v116)
                  {
                    uint64_t v123 = *((void *)v114 - 1);
                    v114 -= 8;
                    *((void *)v122 - 1) = v123;
                    v122 -= 8;
                  }
                  *(void *)(a1 + 128) = v122;
                  *(void *)(a1 + 136) = v115;
                  *(void *)(a1 + 144) = &v121[8 * v120];
                  if (v116) {
                    operator delete(v116);
                  }
                }
                else
                {
                  *(void *)uint64_t v114 = 0;
                  unint64_t v115 = v114 + 8;
                }
                *(void *)(a1 + 136) = v115;
                unint64_t v124 = *((void *)this + 1);
                if (v124 > 0xFFFFFFFFFFFFFFF7 || v124 + 8 > *((void *)this + 2)) {
                  goto LABEL_252;
                }
                *(v115 - 1) = *(void *)(*(void *)this + v124);
                unint64_t v112 = *((void *)this + 2);
                unint64_t v111 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v111;
              }
              goto LABEL_253;
            case 164:
              if (v27 != 2)
              {
                char v293 = *(char **)(a1 + 184);
                unint64_t v292 = *(void *)(a1 + 192);
                if ((unint64_t)v293 >= v292)
                {
                  unint64_t v366 = (char *)*v8;
                  uint64_t v367 = (v293 - (unsigned char *)*v8) >> 3;
                  unint64_t v368 = v367 + 1;
                  if ((unint64_t)(v367 + 1) >> 61) {
LABEL_647:
                  }
                    sub_1903479E8();
                  uint64_t v369 = v292 - (void)v366;
                  if (v369 >> 2 > v368) {
                    unint64_t v368 = v369 >> 2;
                  }
                  if ((unint64_t)v369 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v370 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v370 = v368;
                  }
                  if (v370)
                  {
                    uint64_t v371 = (char *)sub_190347A00(v411, v370);
                    unint64_t v366 = *(char **)(a1 + 176);
                    char v293 = *(char **)(a1 + 184);
                  }
                  else
                  {
                    uint64_t v371 = 0;
                  }
                  unsigned int v396 = &v371[8 * v367];
                  *(void *)unsigned int v396 = 0;
                  unint64_t v281 = v396 + 8;
                  while (v293 != v366)
                  {
                    uint64_t v397 = *((void *)v293 - 1);
                    v293 -= 8;
                    *((void *)v396 - 1) = v397;
                    v396 -= 8;
                  }
                  *(void *)(a1 + 176) = v396;
                  *(void *)(a1 + 184) = v281;
                  *(void *)(a1 + 192) = &v371[8 * v370];
                  if (v366) {
                    operator delete(v366);
                  }
                }
                else
                {
                  *(void *)char v293 = 0;
                  unint64_t v281 = v293 + 8;
                }
                *(void *)(a1 + 184) = v281;
                goto LABEL_626;
              }
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v125 = *((void *)this + 1);
              unint64_t v126 = *((void *)this + 2);
              while (v125 < v126 && !*((unsigned char *)this + 24))
              {
                char v128 = *(char **)(a1 + 184);
                unint64_t v127 = *(void *)(a1 + 192);
                if ((unint64_t)v128 >= v127)
                {
                  uint64_t v130 = (char *)*v8;
                  uint64_t v131 = (v128 - (unsigned char *)*v8) >> 3;
                  unint64_t v132 = v131 + 1;
                  if ((unint64_t)(v131 + 1) >> 61) {
                    goto LABEL_647;
                  }
                  uint64_t v133 = v127 - (void)v130;
                  if (v133 >> 2 > v132) {
                    unint64_t v132 = v133 >> 2;
                  }
                  if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v134 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v134 = v132;
                  }
                  if (v134)
                  {
                    uint64_t v135 = (char *)sub_190347A00(v411, v134);
                    uint64_t v130 = *(char **)(a1 + 176);
                    char v128 = *(char **)(a1 + 184);
                  }
                  else
                  {
                    uint64_t v135 = 0;
                  }
                  char v136 = &v135[8 * v131];
                  *(void *)char v136 = 0;
                  unsigned int v129 = v136 + 8;
                  while (v128 != v130)
                  {
                    uint64_t v137 = *((void *)v128 - 1);
                    v128 -= 8;
                    *((void *)v136 - 1) = v137;
                    v136 -= 8;
                  }
                  *(void *)(a1 + 176) = v136;
                  *(void *)(a1 + 184) = v129;
                  *(void *)(a1 + 192) = &v135[8 * v134];
                  if (v130) {
                    operator delete(v130);
                  }
                }
                else
                {
                  *(void *)char v128 = 0;
                  unsigned int v129 = v128 + 8;
                }
                *(void *)(a1 + 184) = v129;
                unint64_t v138 = *((void *)this + 1);
                if (v138 > 0xFFFFFFFFFFFFFFF7 || v138 + 8 > *((void *)this + 2)) {
                  goto LABEL_252;
                }
                *(v129 - 1) = *(void *)(*(void *)this + v138);
                unint64_t v126 = *((void *)this + 2);
                unint64_t v125 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v125;
              }
              goto LABEL_253;
            case 165:
              if (v27 != 2)
              {
                unint64_t v295 = *(char **)(a1 + 160);
                unint64_t v294 = *(void *)(a1 + 168);
                if ((unint64_t)v295 >= v294)
                {
                  unint64_t v372 = (char *)*v414;
                  uint64_t v373 = (v295 - (unsigned char *)*v414) >> 3;
                  unint64_t v374 = v373 + 1;
                  if ((unint64_t)(v373 + 1) >> 61) {
LABEL_648:
                  }
                    sub_1903479E8();
                  uint64_t v375 = v294 - (void)v372;
                  if (v375 >> 2 > v374) {
                    unint64_t v374 = v375 >> 2;
                  }
                  if ((unint64_t)v375 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v376 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v376 = v374;
                  }
                  if (v376)
                  {
                    unint64_t v377 = (char *)sub_190347A00(v412, v376);
                    unint64_t v372 = *(char **)(a1 + 152);
                    unint64_t v295 = *(char **)(a1 + 160);
                  }
                  else
                  {
                    unint64_t v377 = 0;
                  }
                  char v398 = &v377[8 * v373];
                  *(void *)char v398 = 0;
                  unint64_t v281 = v398 + 8;
                  while (v295 != v372)
                  {
                    uint64_t v399 = *((void *)v295 - 1);
                    v295 -= 8;
                    *((void *)v398 - 1) = v399;
                    v398 -= 8;
                  }
                  *(void *)(a1 + 152) = v398;
                  *(void *)(a1 + 160) = v281;
                  *(void *)(a1 + 168) = &v377[8 * v376];
                  if (v372) {
                    operator delete(v372);
                  }
                }
                else
                {
                  *(void *)unint64_t v295 = 0;
                  unint64_t v281 = v295 + 8;
                }
                *(void *)(a1 + 160) = v281;
                goto LABEL_626;
              }
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v139 = *((void *)this + 1);
              unint64_t v140 = *((void *)this + 2);
              while (v139 < v140 && !*((unsigned char *)this + 24))
              {
                unint64_t v142 = *(char **)(a1 + 160);
                unint64_t v141 = *(void *)(a1 + 168);
                if ((unint64_t)v142 >= v141)
                {
                  char v144 = (char *)*v414;
                  uint64_t v145 = (v142 - (unsigned char *)*v414) >> 3;
                  unint64_t v146 = v145 + 1;
                  if ((unint64_t)(v145 + 1) >> 61) {
                    goto LABEL_648;
                  }
                  uint64_t v147 = v141 - (void)v144;
                  if (v147 >> 2 > v146) {
                    unint64_t v146 = v147 >> 2;
                  }
                  if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v148 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v148 = v146;
                  }
                  if (v148)
                  {
                    unint64_t v149 = (char *)sub_190347A00(v412, v148);
                    char v144 = *(char **)(a1 + 152);
                    unint64_t v142 = *(char **)(a1 + 160);
                  }
                  else
                  {
                    unint64_t v149 = 0;
                  }
                  unint64_t v150 = &v149[8 * v145];
                  *(void *)unint64_t v150 = 0;
                  uint64_t v143 = v150 + 8;
                  while (v142 != v144)
                  {
                    uint64_t v151 = *((void *)v142 - 1);
                    v142 -= 8;
                    *((void *)v150 - 1) = v151;
                    v150 -= 8;
                  }
                  *(void *)(a1 + 152) = v150;
                  *(void *)(a1 + 160) = v143;
                  *(void *)(a1 + 168) = &v149[8 * v148];
                  if (v144) {
                    operator delete(v144);
                  }
                }
                else
                {
                  *(void *)unint64_t v142 = 0;
                  uint64_t v143 = v142 + 8;
                }
                *(void *)(a1 + 160) = v143;
                unint64_t v152 = *((void *)this + 1);
                if (v152 > 0xFFFFFFFFFFFFFFF7 || v152 + 8 > *((void *)this + 2)) {
                  goto LABEL_252;
                }
                *(v143 - 1) = *(void *)(*(void *)this + v152);
                unint64_t v140 = *((void *)this + 2);
                unint64_t v139 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v139;
              }
              goto LABEL_253;
            case 166:
              if (v27 == 2)
              {
                if (PB::Reader::placeMark()) {
                  return 0;
                }
                unint64_t v153 = *((void *)this + 1);
                unint64_t v154 = *((void *)this + 2);
                while (v153 < v154 && !*((unsigned char *)this + 24))
                {
                  char v156 = *(char **)(a1 + 208);
                  unint64_t v155 = *(void *)(a1 + 216);
                  if ((unint64_t)v156 >= v155)
                  {
                    unint64_t v158 = (char *)*v415;
                    uint64_t v159 = (v156 - (unsigned char *)*v415) >> 3;
                    unint64_t v160 = v159 + 1;
                    if ((unint64_t)(v159 + 1) >> 61) {
                      goto LABEL_649;
                    }
                    uint64_t v161 = v155 - (void)v158;
                    if (v161 >> 2 > v160) {
                      unint64_t v160 = v161 >> 2;
                    }
                    if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v162 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v162 = v160;
                    }
                    if (v162)
                    {
                      unint64_t v163 = (char *)sub_190347A00(v413, v162);
                      unint64_t v158 = *(char **)(a1 + 200);
                      char v156 = *(char **)(a1 + 208);
                    }
                    else
                    {
                      unint64_t v163 = 0;
                    }
                    char v164 = &v163[8 * v159];
                    *(void *)char v164 = 0;
                    unint64_t v157 = v164 + 8;
                    while (v156 != v158)
                    {
                      uint64_t v165 = *((void *)v156 - 1);
                      v156 -= 8;
                      *((void *)v164 - 1) = v165;
                      v164 -= 8;
                    }
                    *(void *)(a1 + 200) = v164;
                    *(void *)(a1 + 208) = v157;
                    *(void *)(a1 + 216) = &v163[8 * v162];
                    if (v158) {
                      operator delete(v158);
                    }
                  }
                  else
                  {
                    *(void *)char v156 = 0;
                    unint64_t v157 = v156 + 8;
                  }
                  *(void *)(a1 + 208) = v157;
                  unint64_t v166 = *((void *)this + 1);
                  if (v166 > 0xFFFFFFFFFFFFFFF7 || v166 + 8 > *((void *)this + 2))
                  {
LABEL_252:
                    *((unsigned char *)this + 24) = 1;
                    break;
                  }
                  *(v157 - 1) = *(void *)(*(void *)this + v166);
                  unint64_t v154 = *((void *)this + 2);
                  unint64_t v153 = *((void *)this + 1) + 8;
                  *((void *)this + 1) = v153;
                }
LABEL_253:
                PB::Reader::recallMark();
              }
              else
              {
                char v297 = *(char **)(a1 + 208);
                unint64_t v296 = *(void *)(a1 + 216);
                if ((unint64_t)v297 >= v296)
                {
                  char v378 = (char *)*v415;
                  uint64_t v379 = (v297 - (unsigned char *)*v415) >> 3;
                  unint64_t v380 = v379 + 1;
                  if ((unint64_t)(v379 + 1) >> 61) {
LABEL_649:
                  }
                    sub_1903479E8();
                  uint64_t v381 = v296 - (void)v378;
                  if (v381 >> 2 > v380) {
                    unint64_t v380 = v381 >> 2;
                  }
                  if ((unint64_t)v381 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v382 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v382 = v380;
                  }
                  if (v382)
                  {
                    char v383 = (char *)sub_190347A00(v413, v382);
                    char v378 = *(char **)(a1 + 200);
                    char v297 = *(char **)(a1 + 208);
                  }
                  else
                  {
                    char v383 = 0;
                  }
                  unsigned int v400 = &v383[8 * v379];
                  *(void *)unsigned int v400 = 0;
                  unint64_t v281 = v400 + 8;
                  while (v297 != v378)
                  {
                    uint64_t v401 = *((void *)v297 - 1);
                    v297 -= 8;
                    *((void *)v400 - 1) = v401;
                    v400 -= 8;
                  }
                  *(void *)(a1 + 200) = v400;
                  *(void *)(a1 + 208) = v281;
                  *(void *)(a1 + 216) = &v383[8 * v382];
                  if (v378) {
                    operator delete(v378);
                  }
                }
                else
                {
                  *(void *)char v297 = 0;
                  unint64_t v281 = v297 + 8;
                }
                *(void *)(a1 + 208) = v281;
LABEL_626:
                unint64_t v402 = *((void *)this + 1);
                if (v402 <= 0xFFFFFFFFFFFFFFF7 && v402 + 8 <= *((void *)this + 2))
                {
                  *(v281 - 1) = *(void *)(*(void *)this + v402);
LABEL_630:
                  *((void *)this + 1) += 8;
                }
                else
                {
LABEL_628:
                  *((unsigned char *)this + 24) = 1;
                }
              }
LABEL_631:
              unint64_t v2 = *((void *)this + 1);
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              break;
            default:
              switch((int)v28)
              {
                case 'e':
                  *(_DWORD *)(a1 + 396) |= 0x10000000u;
                  unint64_t v51 = *((void *)this + 1);
                  if (v51 >= *((void *)this + 2))
                  {
                    BOOL v54 = 0;
                    *((unsigned char *)this + 24) = 1;
                  }
                  else
                  {
                    unint64_t v52 = v51 + 1;
                    int v53 = *(unsigned __int8 *)(*(void *)this + v51);
                    *((void *)this + 1) = v52;
                    BOOL v54 = v53 != 0;
                  }
                  *(unsigned char *)(a1 + 392) = v54;
                  goto LABEL_631;
                case 'f':
                  *(_DWORD *)(a1 + 396) |= 0x8000000u;
                  unint64_t v263 = *((void *)this + 1);
                  if (v263 >= *((void *)this + 2))
                  {
                    BOOL v266 = 0;
                    *((unsigned char *)this + 24) = 1;
                  }
                  else
                  {
                    unint64_t v264 = v263 + 1;
                    int v265 = *(unsigned __int8 *)(*(void *)this + v263);
                    *((void *)this + 1) = v264;
                    BOOL v266 = v265 != 0;
                  }
                  *(unsigned char *)(a1 + 391) = v266;
                  goto LABEL_631;
                case 'g':
                  *(_DWORD *)(a1 + 396) |= 0x20000000u;
                  unint64_t v267 = *((void *)this + 1);
                  if (v267 >= *((void *)this + 2))
                  {
                    BOOL v270 = 0;
                    *((unsigned char *)this + 24) = 1;
                  }
                  else
                  {
                    unint64_t v268 = v267 + 1;
                    int v269 = *(unsigned __int8 *)(*(void *)this + v267);
                    *((void *)this + 1) = v268;
                    BOOL v270 = v269 != 0;
                  }
                  *(unsigned char *)(a1 + 393) = v270;
                  goto LABEL_631;
                case 'h':
                  *(_DWORD *)(a1 + 396) |= 0x2000000u;
                  unint64_t v271 = *((void *)this + 1);
                  if (v271 >= *((void *)this + 2))
                  {
                    BOOL v274 = 0;
                    *((unsigned char *)this + 24) = 1;
                  }
                  else
                  {
                    unint64_t v272 = v271 + 1;
                    int v273 = *(unsigned __int8 *)(*(void *)this + v271);
                    *((void *)this + 1) = v272;
                    BOOL v274 = v273 != 0;
                  }
                  *(unsigned char *)(a1 + 389) = v274;
                  goto LABEL_631;
                case 'i':
                  *(_DWORD *)(a1 + 396) |= 0x4000000u;
                  unint64_t v275 = *((void *)this + 1);
                  if (v275 >= *((void *)this + 2))
                  {
                    BOOL v278 = 0;
                    *((unsigned char *)this + 24) = 1;
                  }
                  else
                  {
                    unint64_t v276 = v275 + 1;
                    int v277 = *(unsigned __int8 *)(*(void *)this + v275);
                    *((void *)this + 1) = v276;
                    BOOL v278 = v277 != 0;
                  }
                  *(unsigned char *)(a1 + 390) = v278;
                  goto LABEL_631;
                default:
                  goto LABEL_58;
              }
          }
          break;
      }
    }
    char v22 = 0;
    unsigned int v23 = 0;
    unint64_t v18 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v24 = v2 + 1;
      char v25 = *(unsigned char *)(v15 + v2);
      *((void *)this + 1) = v24;
      v18 |= (unint64_t)(v25 & 0x7F) << v22;
      if ((v25 & 0x80) == 0) {
        goto LABEL_21;
      }
      v22 += 7;
      unint64_t v2 = v24;
      if (v23++ >= 9)
      {
LABEL_20:
        unint64_t v18 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1902F1720(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 396);
  if ((v4 & 0x80000) != 0)
  {
    double result = PB::Writer::writeVarInt(this);
    int v4 = *(_DWORD *)(v3 + 396);
    if ((v4 & 0x1000000) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_64;
    }
  }
  else if ((v4 & 0x1000000) == 0)
  {
    goto LABEL_3;
  }
  double result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_65;
  }
LABEL_64:
  double result = PB::Writer::write(this, *(double *)(v3 + 224));
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40000) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_66;
  }
LABEL_65:
  double result = PB::Writer::write(this, *(double *)(v3 + 368));
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_67;
  }
LABEL_66:
  double result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_68;
  }
LABEL_67:
  double result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_69;
  }
LABEL_68:
  double result = PB::Writer::write(this, *(double *)(v3 + 264));
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_70;
  }
LABEL_69:
  double result = PB::Writer::write(this, *(double *)(v3 + 288));
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_71;
  }
LABEL_70:
  double result = PB::Writer::write(this, *(double *)(v3 + 304));
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_72;
  }
LABEL_71:
  double result = PB::Writer::write(this, *(double *)(v3 + 296));
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_73;
  }
LABEL_72:
  double result = PB::Writer::write(this, *(double *)(v3 + 280));
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_74;
  }
LABEL_73:
  double result = PB::Writer::write(this, *(double *)(v3 + 272));
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_75;
  }
LABEL_74:
  double result = PB::Writer::write(this, *(double *)(v3 + 320));
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_76;
  }
LABEL_75:
  double result = PB::Writer::write(this, *(double *)(v3 + 312));
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_77;
  }
LABEL_76:
  double result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_78;
  }
LABEL_77:
  double result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x8000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_79;
  }
LABEL_78:
  double result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x4000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_80;
  }
LABEL_79:
  double result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x2000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_81;
  }
LABEL_80:
  double result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_21:
    if ((v4 & 4) == 0) {
      goto LABEL_22;
    }
    goto LABEL_82;
  }
LABEL_81:
  double result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 4) == 0)
  {
LABEL_22:
    if ((v4 & 8) == 0) {
      goto LABEL_23;
    }
    goto LABEL_83;
  }
LABEL_82:
  double result = PB::Writer::write(this, *(double *)(v3 + 240));
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 8) == 0)
  {
LABEL_23:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_84;
  }
LABEL_83:
  double result = PB::Writer::write(this, *(double *)(v3 + 248));
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_85;
  }
LABEL_84:
  double result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x400000) == 0)
  {
LABEL_25:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_86;
  }
LABEL_85:
  double result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_87;
  }
LABEL_86:
  double result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x200000) == 0)
  {
LABEL_27:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_88;
  }
LABEL_87:
  double result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x800000) == 0)
  {
LABEL_28:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_89;
  }
LABEL_88:
  double result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_90;
  }
LABEL_89:
  double result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_91;
  }
LABEL_90:
  double result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_32;
    }
LABEL_92:
    double result = PB::Writer::write(this);
    if ((*(_DWORD *)(v3 + 396) & 0x4000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
LABEL_91:
  double result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x2000000) != 0) {
    goto LABEL_92;
  }
LABEL_32:
  if ((v4 & 0x4000000) != 0) {
LABEL_33:
  }
    double result = PB::Writer::write(this);
LABEL_34:
  int v5 = *(double **)(v3 + 32);
  double v6 = *(double **)(v3 + 40);
  while (v5 != v6)
  {
    double v7 = *v5++;
    double result = PB::Writer::write(this, v7);
  }
  double v8 = *(double **)(v3 + 8);
  char v9 = *(double **)(v3 + 16);
  while (v8 != v9)
  {
    double v10 = *v8++;
    double result = PB::Writer::write(this, v10);
  }
  double v11 = *(double **)(v3 + 56);
  unint64_t v12 = *(double **)(v3 + 64);
  while (v11 != v12)
  {
    double v13 = *v11++;
    double result = PB::Writer::write(this, v13);
  }
  double v14 = *(double **)(v3 + 104);
  uint64_t v15 = *(double **)(v3 + 112);
  while (v14 != v15)
  {
    double v16 = *v14++;
    double result = PB::Writer::write(this, v16);
  }
  unsigned int v17 = *(double **)(v3 + 80);
  unint64_t v18 = *(double **)(v3 + 88);
  while (v17 != v18)
  {
    double v19 = *v17++;
    double result = PB::Writer::write(this, v19);
  }
  char v20 = *(double **)(v3 + 128);
  BOOL v21 = *(double **)(v3 + 136);
  while (v20 != v21)
  {
    double v22 = *v20++;
    double result = PB::Writer::write(this, v22);
  }
  unsigned int v23 = *(double **)(v3 + 176);
  unint64_t v24 = *(double **)(v3 + 184);
  while (v23 != v24)
  {
    double v25 = *v23++;
    double result = PB::Writer::write(this, v25);
  }
  unsigned int v26 = *(double **)(v3 + 152);
  int v27 = *(double **)(v3 + 160);
  while (v26 != v27)
  {
    double v28 = *v26++;
    double result = PB::Writer::write(this, v28);
  }
  unint64_t v30 = *(double **)(v3 + 200);
  unint64_t v29 = *(double **)(v3 + 208);
  while (v30 != v29)
  {
    double v31 = *v30++;
    double result = PB::Writer::write(this, v31);
  }
  return result;
}

uint64_t sub_1902F1BEC(uint64_t result)
{
  *(void *)double result = &unk_1EDFCD148;
  *(_DWORD *)(result + 72) = 0;
  return result;
}

void sub_1902F1C14(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902F1C4C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "afterElevationMedian", *(float *)(a1 + 56));
    __int16 v5 = *(_WORD *)(a1 + 72);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "beforeElevationMedian", *(float *)(a1 + 60));
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "endTimestampOfWindow");
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "impactTimestamp");
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "pressureTimestamp");
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "rangeOfElevationInWindow", *(float *)(a1 + 64));
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "startTimestampOfLastInspectedWindow");
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(this, "startTimestampOfWindow");
  if ((*(_WORD *)(a1 + 72) & 0x200) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(this, "state");
LABEL_12:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1902F1DD0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 72) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_122;
            case 2u:
              *(_WORD *)(a1 + 72) |= 8u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_127;
                  }
                  unint64_t v59 = v20++;
                  char v60 = *(unsigned char *)(v21 + v59);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
LABEL_126:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_127;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v24 = 0;
                }
                goto LABEL_126;
              }
              char v22 = 0;
              unsigned int v23 = 0;
              uint64_t v24 = 0;
              do
              {
                unint64_t v2 = v20 + 1;
                *((void *)this + 1) = v20 + 1;
                char v25 = *(unsigned char *)(v21 + v20);
                v24 |= (unint64_t)(v25 & 0x7F) << v22;
                if ((v25 & 0x80) == 0) {
                  goto LABEL_127;
                }
                v22 += 7;
                unint64_t v20 = v2;
                BOOL v14 = v23++ > 8;
              }
              while (!v14);
              uint64_t v24 = 0;
LABEL_127:
              *(void *)(a1 + 32) = v24;
              goto LABEL_153;
            case 3u:
              *(_WORD *)(a1 + 72) |= 2u;
              unint64_t v26 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v27 = *(void *)this;
              if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
              {
                char v61 = 0;
                unsigned int v62 = 0;
                uint64_t v30 = 0;
                if (v2 <= v26) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v26)
                  {
                    uint64_t v30 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_132;
                  }
                  unint64_t v63 = v26++;
                  char v64 = *(unsigned char *)(v27 + v63);
                  *((void *)this + 1) = v26;
                  v30 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  BOOL v14 = v62++ > 8;
                  if (v14)
                  {
                    uint64_t v30 = 0;
LABEL_131:
                    unint64_t v2 = v63 + 1;
                    goto LABEL_132;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v30 = 0;
                }
                goto LABEL_131;
              }
              char v28 = 0;
              unsigned int v29 = 0;
              uint64_t v30 = 0;
              do
              {
                unint64_t v2 = v26 + 1;
                *((void *)this + 1) = v26 + 1;
                char v31 = *(unsigned char *)(v27 + v26);
                v30 |= (unint64_t)(v31 & 0x7F) << v28;
                if ((v31 & 0x80) == 0) {
                  goto LABEL_132;
                }
                v28 += 7;
                unint64_t v26 = v2;
                BOOL v14 = v29++ > 8;
              }
              while (!v14);
              uint64_t v30 = 0;
LABEL_132:
              *(void *)(a1 + 16) = v30;
              goto LABEL_153;
            case 4u:
              *(_WORD *)(a1 + 72) |= 0x200u;
              unint64_t v32 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v33 = *(void *)this;
              if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
              {
                char v65 = 0;
                unsigned int v66 = 0;
                uint64_t v36 = 0;
                if (v2 <= v32) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v32)
                  {
                    LODWORD(v36) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_137;
                  }
                  unint64_t v67 = v32++;
                  char v68 = *(unsigned char *)(v33 + v67);
                  *((void *)this + 1) = v32;
                  v36 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  BOOL v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v36) = 0;
LABEL_136:
                    unint64_t v2 = v67 + 1;
                    goto LABEL_137;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v36) = 0;
                }
                goto LABEL_136;
              }
              char v34 = 0;
              unsigned int v35 = 0;
              uint64_t v36 = 0;
              do
              {
                unint64_t v2 = v32 + 1;
                *((void *)this + 1) = v32 + 1;
                char v37 = *(unsigned char *)(v33 + v32);
                v36 |= (unint64_t)(v37 & 0x7F) << v34;
                if ((v37 & 0x80) == 0) {
                  goto LABEL_137;
                }
                v34 += 7;
                unint64_t v32 = v2;
                BOOL v14 = v35++ > 8;
              }
              while (!v14);
              LODWORD(v36) = 0;
LABEL_137:
              *(_DWORD *)(a1 + 68) = v36;
              goto LABEL_153;
            case 0xAu:
              *(_WORD *)(a1 + 72) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_121;
            case 0xBu:
              *(_WORD *)(a1 + 72) |= 0x10u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v69 = 0;
                unsigned int v70 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    uint64_t v43 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_142;
                  }
                  unint64_t v71 = v39++;
                  char v72 = *(unsigned char *)(v40 + v71);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  BOOL v14 = v70++ > 8;
                  if (v14)
                  {
                    uint64_t v43 = 0;
LABEL_141:
                    unint64_t v2 = v71 + 1;
                    goto LABEL_142;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v43 = 0;
                }
                goto LABEL_141;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_142;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              uint64_t v43 = 0;
LABEL_142:
              *(void *)(a1 + 40) = v43;
              goto LABEL_153;
            case 0xCu:
              *(_WORD *)(a1 + 72) |= 0x20u;
              unint64_t v45 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v73 = 0;
                unsigned int v74 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    uint64_t v49 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_147;
                  }
                  unint64_t v75 = v45++;
                  char v76 = *(unsigned char *)(v46 + v75);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0) {
                    break;
                  }
                  v73 += 7;
                  BOOL v14 = v74++ > 8;
                  if (v14)
                  {
                    uint64_t v49 = 0;
LABEL_146:
                    unint64_t v2 = v75 + 1;
                    goto LABEL_147;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v49 = 0;
                }
                goto LABEL_146;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_147;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              uint64_t v49 = 0;
LABEL_147:
              *(void *)(a1 + 48) = v49;
              goto LABEL_153;
            case 0xDu:
              *(_WORD *)(a1 + 72) |= 1u;
              unint64_t v51 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v52 = *(void *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v77 = 0;
                unsigned int v78 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    uint64_t v55 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_152;
                  }
                  unint64_t v79 = v51++;
                  char v80 = *(unsigned char *)(v52 + v79);
                  *((void *)this + 1) = v51;
                  v55 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0) {
                    break;
                  }
                  v77 += 7;
                  BOOL v14 = v78++ > 8;
                  if (v14)
                  {
                    uint64_t v55 = 0;
LABEL_151:
                    unint64_t v2 = v79 + 1;
                    goto LABEL_152;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v55 = 0;
                }
                goto LABEL_151;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v2 = v51 + 1;
                *((void *)this + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_152;
                }
                v53 += 7;
                unint64_t v51 = v2;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              uint64_t v55 = 0;
LABEL_152:
              *(void *)(a1 + 8) = v55;
LABEL_153:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x14u:
              *(_WORD *)(a1 + 72) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_121;
            case 0x15u:
              *(_WORD *)(a1 + 72) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
LABEL_121:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_122:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_77:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_153;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_153;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1902F261C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 72);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24));
    __int16 v4 = *(_WORD *)(v3 + 72);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64));
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60));
    if ((*(_WORD *)(v3 + 72) & 0x40) == 0) {
      return result;
    }
    goto LABEL_21;
  }
LABEL_19:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x80) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v4 & 0x40) == 0) {
    return result;
  }
LABEL_21:
  float v5 = *(float *)(v3 + 56);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1902F276C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCFDE8;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void sub_1902F2794(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902F27CC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 80);
  if (v5)
  {
    PB::TextFormatter::format(this, "aopTsImpact");
    __int16 v5 = *(_WORD *)(a1 + 80);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "aopTsNow");
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "aopTsSensor");
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "nPeaks");
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "normalizedIQR", *(float *)(a1 + 52));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "operatingMode");
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "repetitiveMotion");
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "repetitiveMotionEndTs");
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "repetitiveMotionStartTs");
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "seq");
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "sumHighQPeaksInDecLowFreqFFT", *(float *)(a1 + 68));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  PB::TextFormatter::format(this, "sumHighQPeaksInHighFreqFFT", *(float *)(a1 + 72));
  if ((*(_WORD *)(a1 + 80) & 0x1000) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(this, "sumHighQPeaksInLowFreqFFT", *(float *)(a1 + 76));
LABEL_15:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1902F29B0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 80) |= 4u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v75 = 0;
                unsigned int v76 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_168;
                  }
                  unint64_t v77 = v20++;
                  char v78 = *(unsigned char *)(v21 + v77);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  BOOL v14 = v76++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_167;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_167:
                unint64_t v2 = v77 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_168;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_168:
              *(void *)(a1 + 24) = v24;
              goto LABEL_209;
            case 2u:
              *(_WORD *)(a1 + 80) |= 2u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v79 = 0;
                unsigned int v80 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_173;
                  }
                  unint64_t v81 = v27++;
                  char v82 = *(unsigned char *)(v28 + v81);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  BOOL v14 = v80++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_172:
                    unint64_t v2 = v81 + 1;
                    goto LABEL_173;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_172;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_173;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_173:
              *(void *)(a1 + 16) = v31;
              goto LABEL_209;
            case 3u:
              *(_WORD *)(a1 + 80) |= 1u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v83 = 0;
                unsigned int v84 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    uint64_t v37 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_178;
                  }
                  unint64_t v85 = v33++;
                  char v86 = *(unsigned char *)(v34 + v85);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0) {
                    break;
                  }
                  v83 += 7;
                  BOOL v14 = v84++ > 8;
                  if (v14)
                  {
                    uint64_t v37 = 0;
LABEL_177:
                    unint64_t v2 = v85 + 1;
                    goto LABEL_178;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v37 = 0;
                }
                goto LABEL_177;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_178;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              uint64_t v37 = 0;
LABEL_178:
              *(void *)(a1 + 8) = v37;
              goto LABEL_209;
            case 4u:
              *(_WORD *)(a1 + 80) |= 0x200u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v87 = 0;
                unsigned int v88 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_183;
                  }
                  unint64_t v89 = v39++;
                  char v90 = *(unsigned char *)(v40 + v89);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0) {
                    break;
                  }
                  v87 += 7;
                  BOOL v14 = v88++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_182:
                    unint64_t v2 = v89 + 1;
                    goto LABEL_183;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_182;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_183;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_183:
              *(_DWORD *)(a1 + 64) = v43;
              goto LABEL_209;
            case 5u:
              *(_WORD *)(a1 + 80) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_70;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_163;
            case 6u:
              *(_WORD *)(a1 + 80) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_70;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_163;
            case 7u:
              *(_WORD *)(a1 + 80) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_70;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_163;
            case 8u:
              *(_WORD *)(a1 + 80) |= 0x20u;
              unint64_t v45 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v91 = 0;
                unsigned int v92 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_188;
                  }
                  unint64_t v93 = v45++;
                  char v94 = *(unsigned char *)(v46 + v93);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0) {
                    break;
                  }
                  v91 += 7;
                  BOOL v14 = v92++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_187:
                    unint64_t v2 = v93 + 1;
                    goto LABEL_188;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_187;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_188;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_188:
              *(_DWORD *)(a1 + 48) = v49;
              goto LABEL_209;
            case 9u:
              *(_WORD *)(a1 + 80) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
LABEL_163:
                unint64_t v2 = *((void *)this + 1) + 4;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_70:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_209;
            case 0xAu:
              *(_WORD *)(a1 + 80) |= 0x100u;
              unint64_t v51 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v52 = *(void *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v95 = 0;
                unsigned int v96 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_193;
                  }
                  unint64_t v97 = v51++;
                  char v98 = *(unsigned char *)(v52 + v97);
                  *((void *)this + 1) = v51;
                  v55 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0) {
                    break;
                  }
                  v95 += 7;
                  BOOL v14 = v96++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_192:
                    unint64_t v2 = v97 + 1;
                    goto LABEL_193;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v55) = 0;
                }
                goto LABEL_192;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v2 = v51 + 1;
                *((void *)this + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_193;
                }
                v53 += 7;
                unint64_t v51 = v2;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_193:
              *(_DWORD *)(a1 + 60) = v55;
              goto LABEL_209;
            case 0xBu:
              *(_WORD *)(a1 + 80) |= 0x10u;
              unint64_t v57 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v58 = *(void *)this;
              if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
              {
                char v99 = 0;
                unsigned int v100 = 0;
                uint64_t v61 = 0;
                if (v2 <= v57) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v57)
                  {
                    uint64_t v61 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_198;
                  }
                  unint64_t v101 = v57++;
                  char v102 = *(unsigned char *)(v58 + v101);
                  *((void *)this + 1) = v57;
                  v61 |= (unint64_t)(v102 & 0x7F) << v99;
                  if ((v102 & 0x80) == 0) {
                    break;
                  }
                  v99 += 7;
                  BOOL v14 = v100++ > 8;
                  if (v14)
                  {
                    uint64_t v61 = 0;
LABEL_197:
                    unint64_t v2 = v101 + 1;
                    goto LABEL_198;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v61 = 0;
                }
                goto LABEL_197;
              }
              char v59 = 0;
              unsigned int v60 = 0;
              uint64_t v61 = 0;
              do
              {
                unint64_t v2 = v57 + 1;
                *((void *)this + 1) = v57 + 1;
                char v62 = *(unsigned char *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0) {
                  goto LABEL_198;
                }
                v59 += 7;
                unint64_t v57 = v2;
                BOOL v14 = v60++ > 8;
              }
              while (!v14);
              uint64_t v61 = 0;
LABEL_198:
              *(void *)(a1 + 40) = v61;
              goto LABEL_209;
            case 0xCu:
              *(_WORD *)(a1 + 80) |= 8u;
              unint64_t v63 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v64 = *(void *)this;
              if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
              {
                char v103 = 0;
                unsigned int v104 = 0;
                uint64_t v67 = 0;
                if (v2 <= v63) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v63)
                  {
                    uint64_t v67 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_203;
                  }
                  unint64_t v105 = v63++;
                  char v106 = *(unsigned char *)(v64 + v105);
                  *((void *)this + 1) = v63;
                  v67 |= (unint64_t)(v106 & 0x7F) << v103;
                  if ((v106 & 0x80) == 0) {
                    break;
                  }
                  v103 += 7;
                  BOOL v14 = v104++ > 8;
                  if (v14)
                  {
                    uint64_t v67 = 0;
LABEL_202:
                    unint64_t v2 = v105 + 1;
                    goto LABEL_203;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v67 = 0;
                }
                goto LABEL_202;
              }
              char v65 = 0;
              unsigned int v66 = 0;
              uint64_t v67 = 0;
              do
              {
                unint64_t v2 = v63 + 1;
                *((void *)this + 1) = v63 + 1;
                char v68 = *(unsigned char *)(v64 + v63);
                v67 |= (unint64_t)(v68 & 0x7F) << v65;
                if ((v68 & 0x80) == 0) {
                  goto LABEL_203;
                }
                v65 += 7;
                unint64_t v63 = v2;
                BOOL v14 = v66++ > 8;
              }
              while (!v14);
              uint64_t v67 = 0;
LABEL_203:
              *(void *)(a1 + 32) = v67;
              goto LABEL_209;
            case 0xDu:
              *(_WORD *)(a1 + 80) |= 0x80u;
              unint64_t v69 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v70 = *(void *)this;
              if (v69 > 0xFFFFFFFFFFFFFFF5 || v69 + 10 > v2)
              {
                char v107 = 0;
                unsigned int v108 = 0;
                uint64_t v73 = 0;
                if (v2 <= v69) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v69)
                  {
                    LODWORD(v73) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_208;
                  }
                  unint64_t v109 = v69++;
                  char v110 = *(unsigned char *)(v70 + v109);
                  *((void *)this + 1) = v69;
                  v73 |= (unint64_t)(v110 & 0x7F) << v107;
                  if ((v110 & 0x80) == 0) {
                    break;
                  }
                  v107 += 7;
                  BOOL v14 = v108++ > 8;
                  if (v14)
                  {
                    LODWORD(v73) = 0;
LABEL_207:
                    unint64_t v2 = v109 + 1;
                    goto LABEL_208;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v73) = 0;
                }
                goto LABEL_207;
              }
              char v71 = 0;
              unsigned int v72 = 0;
              uint64_t v73 = 0;
              do
              {
                unint64_t v2 = v69 + 1;
                *((void *)this + 1) = v69 + 1;
                char v74 = *(unsigned char *)(v70 + v69);
                v73 |= (unint64_t)(v74 & 0x7F) << v71;
                if ((v74 & 0x80) == 0) {
                  goto LABEL_208;
                }
                v71 += 7;
                unint64_t v69 = v2;
                BOOL v14 = v72++ > 8;
              }
              while (!v14);
              LODWORD(v73) = 0;
LABEL_208:
              *(_DWORD *)(a1 + 56) = v73;
LABEL_209:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_209;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1902F3498(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 80);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    __int16 v4 = *(_WORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0) {
      goto LABEL_13;
    }
LABEL_26:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(_WORD *)(v3 + 80) & 0x80) == 0) {
      return result;
    }
    goto LABEL_27;
  }
LABEL_25:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 8) != 0) {
    goto LABEL_26;
  }
LABEL_13:
  if ((v4 & 0x80) == 0) {
    return result;
  }
LABEL_27:

  return PB::Writer::writeVarInt(this);
}

void sub_1902F3640(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902F3678(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 72);
  if (v5)
  {
    PB::TextFormatter::format(this, "crownUpDown");
    int v5 = *(_DWORD *)(a1 + 72);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "fallType");
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "impactMaxAccelNormAlertThreshold", *(float *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "impactMaxAccelNormLoggingHeartRateThreshold", *(float *)(a1 + 20));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "impactMaxAccelNormLoggingHighResolutionSensorDataThreshold", *(float *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "impactMaxAccelNormLoggingStatsThreshold", *(float *)(a1 + 28));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x8000) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "isADLImpact");
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "isFallDetectionFeatureEnabled");
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x20000) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "isNearFall");
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "metMinutePercentile90", *(float *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "metMinutePercentile95", *(float *)(a1 + 36));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "metMinutePercentile98", *(float *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x200) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "metMinutePercentileActual", *(float *)(a1 + 44));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "otherFallPosteriorRatioDetectionThreshold", *(float *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "slipFallPosteriorRatioDetectionThreshold", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "tripFallPosteriorRatioDetectionThreshold", *(float *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_39:
  PB::TextFormatter::format(this, "userAgeBucket");
  if ((*(_DWORD *)(a1 + 72) & 0x4000) != 0) {
LABEL_19:
  }
    PB::TextFormatter::format(this, "workoutType");
LABEL_20:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1902F38FC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 72) |= 1u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_131;
                  }
                  unint64_t v53 = v20++;
                  char v54 = *(unsigned char *)(v21 + v53);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_130;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_130:
                unint64_t v2 = v53 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_131;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_131:
              *(_DWORD *)(a1 + 8) = v24;
              goto LABEL_147;
            case 2u:
              *(_DWORD *)(a1 + 72) |= 0x20000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 70) = v28;
              goto LABEL_147;
            case 3u:
              *(_DWORD *)(a1 + 72) |= 2u;
              unint64_t v29 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v30 = *(void *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v33 = 0;
                if (v2 <= v29) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_136;
                  }
                  unint64_t v57 = v29++;
                  char v58 = *(unsigned char *)(v30 + v57);
                  *((void *)this + 1) = v29;
                  v33 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_135:
                    unint64_t v2 = v57 + 1;
                    goto LABEL_136;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v33) = 0;
                }
                goto LABEL_135;
              }
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v33 = 0;
              do
              {
                unint64_t v2 = v29 + 1;
                *((void *)this + 1) = v29 + 1;
                char v34 = *(unsigned char *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_136;
                }
                v31 += 7;
                unint64_t v29 = v2;
                BOOL v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_136:
              *(_DWORD *)(a1 + 12) = v33;
              goto LABEL_147;
            case 4u:
              *(_DWORD *)(a1 + 72) |= 0x2000u;
              unint64_t v35 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v36 = *(void *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_141;
                  }
                  unint64_t v61 = v35++;
                  char v62 = *(unsigned char *)(v36 + v61);
                  *((void *)this + 1) = v35;
                  v39 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_140:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_141;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_140;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v2 = v35 + 1;
                *((void *)this + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_141;
                }
                v37 += 7;
                unint64_t v35 = v2;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_141:
              *(_DWORD *)(a1 + 60) = v39;
              goto LABEL_147;
            case 5u:
              *(_DWORD *)(a1 + 72) |= 0x4000u;
              unint64_t v41 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_146;
                  }
                  unint64_t v65 = v41++;
                  char v66 = *(unsigned char *)(v42 + v65);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_145:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_146;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_145;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_146;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_146:
              *(_DWORD *)(a1 + 64) = v45;
LABEL_147:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 6u:
              *(_DWORD *)(a1 + 72) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_86;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_126;
            case 7u:
              *(_DWORD *)(a1 + 72) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_86;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_126;
            case 8u:
              *(_DWORD *)(a1 + 72) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_86;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_126;
            case 9u:
              *(_DWORD *)(a1 + 72) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_86;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_126;
            case 0xAu:
              *(_DWORD *)(a1 + 72) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_86;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_126;
            case 0xBu:
              *(_DWORD *)(a1 + 72) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_86;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_126;
            case 0xCu:
              *(_DWORD *)(a1 + 72) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_86;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_126;
            case 0xDu:
              *(_DWORD *)(a1 + 72) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_86;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_126;
            case 0xEu:
              *(_DWORD *)(a1 + 72) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_86;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_126;
            case 0xFu:
              *(_DWORD *)(a1 + 72) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_86;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_126;
            case 0x10u:
              *(_DWORD *)(a1 + 72) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
LABEL_126:
                unint64_t v2 = *((void *)this + 1) + 4;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_86:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_147;
            case 0x11u:
              *(_DWORD *)(a1 + 72) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v48 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v47 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v48 = v47 != 0;
              }
              *(unsigned char *)(a1 + 69) = v48;
              goto LABEL_147;
            case 0x12u:
              *(_DWORD *)(a1 + 72) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v50 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v49 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v50 = v49 != 0;
              }
              *(unsigned char *)(a1 + 68) = v50;
              goto LABEL_147;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_147;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1902F41B0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 72);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    int v4 = *(_DWORD *)(v3 + 72);
    if ((v4 & 0x20000) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x4000) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x40) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x40) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_18;
    }
LABEL_36:
    uint64_t result = PB::Writer::write(this);
    if ((*(_DWORD *)(v3 + 72) & 0x8000) == 0) {
      return result;
    }
    goto LABEL_37;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x10000) != 0) {
    goto LABEL_36;
  }
LABEL_18:
  if ((v4 & 0x8000) == 0) {
    return result;
  }
LABEL_37:

  return PB::Writer::write(this);
}

double sub_1902F43E0(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDFCB2E0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 0;
  return result;
}

void sub_1902F4418(PB::Base *this)
{
  *(void *)this = &unk_1EDFCB2E0;
  uint64_t v2 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }

  PB::Base::~Base(this);
}

void sub_1902F470C(PB::Base *a1)
{
  sub_1902F4418(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902F4744(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "accel100");
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, this, "accel800");
  }
  if (*(unsigned char *)(a1 + 128)) {
    PB::TextFormatter::format(this, "aopTimestamp");
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, this, "dm");
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, this, "dmAlwaysOn");
  }
  uint64_t v9 = *(void *)(a1 + 48);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, this, "fallState");
  }
  uint64_t v10 = *(void *)(a1 + 56);
  if (v10) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, this, "fallStats");
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (v11) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32))(v11, this, "gyro100");
  }
  uint64_t v12 = *(void *)(a1 + 72);
  if (v12) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v12 + 32))(v12, this, "gyro200");
  }
  uint64_t v13 = *(void *)(a1 + 80);
  if (v13) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32))(v13, this, "heartRate");
  }
  uint64_t v14 = *(void *)(a1 + 88);
  if (v14) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v14 + 32))(v14, this, "meta");
  }
  uint64_t v15 = *(void *)(a1 + 96);
  if (v15) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v15 + 32))(v15, this, "odometerEntry");
  }
  uint64_t v16 = *(void *)(a1 + 104);
  if (v16) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v16 + 32))(v16, this, "pressure");
  }
  uint64_t v17 = *(void *)(a1 + 112);
  if (v17) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v17 + 32))(v17, this, "suppressionFeatures");
  }
  uint64_t v18 = *(void *)(a1 + 120);
  if (v18) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v18 + 32))(v18, this, "wristState");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1902F4AB4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 2u:
          *(unsigned char *)(a1 + 128) |= 1u;
          unint64_t v20 = *((void *)this + 1);
          unint64_t v21 = *((void *)this + 2);
          uint64_t v22 = *(void *)this;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            do
            {
              unint64_t v26 = v20 + 1;
              *((void *)this + 1) = v20 + 1;
              char v27 = *(unsigned char *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0) {
                goto LABEL_60;
              }
              v23 += 7;
              unint64_t v20 = v26;
              BOOL v14 = v24++ > 8;
            }
            while (!v14);
LABEL_56:
            uint64_t v25 = 0;
            goto LABEL_60;
          }
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v25 = 0;
          if (v21 <= v20) {
            unint64_t v21 = *((void *)this + 1);
          }
          break;
        case 3u:
          operator new();
        case 4u:
          operator new();
        case 5u:
          operator new();
        case 6u:
          operator new();
        case 7u:
          operator new();
        case 8u:
          operator new();
        case 9u:
          operator new();
        case 0xAu:
          operator new();
        case 0xBu:
          operator new();
        case 0xCu:
          operator new();
        case 0xDu:
          operator new();
        case 0xEu:
          operator new();
        case 0xFu:
          operator new();
        case 0x10u:
          operator new();
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          goto LABEL_45;
      }
      while (1)
      {
        if (v21 == v20)
        {
          uint64_t v25 = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_60;
        }
        unint64_t v32 = v20 + 1;
        char v33 = *(unsigned char *)(v22 + v20);
        *((void *)this + 1) = v32;
        v25 |= (unint64_t)(v33 & 0x7F) << v30;
        if ((v33 & 0x80) == 0) {
          break;
        }
        v30 += 7;
        unint64_t v20 = v32;
        BOOL v14 = v31++ > 8;
        if (v14) {
          goto LABEL_56;
        }
      }
      if (*((unsigned char *)this + 24)) {
        uint64_t v25 = 0;
      }
LABEL_60:
      *(void *)(a1 + 24) = v25;
LABEL_45:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1902F5318(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFD0210;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void *sub_1902F533C(void *result)
{
  *uint64_t result = &unk_1EDFD0838;
  result[27] = 0;
  return result;
}

uint64_t sub_1902F5360(uint64_t result, PB::Writer *this)
{
  unint64_t v3 = (void *)result;
  if (*(unsigned char *)(result + 128)) {
    uint64_t result = PB::Writer::writeVarInt(this);
  }
  int v4 = (const PB::Base *)v3[11];
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4);
  }
  uint64_t v5 = (const PB::Base *)v3[1];
  if (v5) {
    uint64_t result = PB::Writer::writeSubmessage(this, v5);
  }
  uint64_t v6 = (const PB::Base *)v3[2];
  if (v6) {
    uint64_t result = PB::Writer::writeSubmessage(this, v6);
  }
  uint64_t v7 = (const PB::Base *)v3[8];
  if (v7) {
    uint64_t result = PB::Writer::writeSubmessage(this, v7);
  }
  uint64_t v8 = (const PB::Base *)v3[9];
  if (v8) {
    uint64_t result = PB::Writer::writeSubmessage(this, v8);
  }
  char v9 = (const PB::Base *)v3[4];
  if (v9) {
    uint64_t result = PB::Writer::writeSubmessage(this, v9);
  }
  unsigned int v10 = (const PB::Base *)v3[13];
  if (v10) {
    uint64_t result = PB::Writer::writeSubmessage(this, v10);
  }
  unint64_t v11 = (const PB::Base *)v3[10];
  if (v11) {
    uint64_t result = PB::Writer::writeSubmessage(this, v11);
  }
  unint64_t v12 = (const PB::Base *)v3[15];
  if (v12) {
    uint64_t result = PB::Writer::writeSubmessage(this, v12);
  }
  char v13 = (const PB::Base *)v3[6];
  if (v13) {
    uint64_t result = PB::Writer::writeSubmessage(this, v13);
  }
  BOOL v14 = (const PB::Base *)v3[7];
  if (v14) {
    uint64_t result = PB::Writer::writeSubmessage(this, v14);
  }
  char v15 = (const PB::Base *)v3[14];
  if (v15) {
    uint64_t result = PB::Writer::writeSubmessage(this, v15);
  }
  unsigned int v16 = (const PB::Base *)v3[5];
  if (v16) {
    uint64_t result = PB::Writer::writeSubmessage(this, v16);
  }
  unint64_t v17 = (const PB::Base *)v3[12];
  if (v17)
  {
    return PB::Writer::writeSubmessage(this, v17);
  }
  return result;
}

void sub_1902F54D0(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902F5508(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 48);
  if (v5)
  {
    PB::TextFormatter::format(this, "aopTsNow");
    char v5 = *(unsigned char *)(a1 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((*(unsigned char *)(a1 + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "aopTsSensor");
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "fallAlertSentFromReferee");
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "isFall");
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "operatingMode");
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "resolution");
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(this, "response");
  if ((*(unsigned char *)(a1 + 48) & 0x40) != 0) {
LABEL_9:
  }
    PB::TextFormatter::format(this, "state");
LABEL_10:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1902F564C(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v3 > v2) {
          unint64_t v2 = v3;
        }
        while (v2 != v3)
        {
          unint64_t v17 = v3 + 1;
          char v18 = *(unsigned char *)(v8 + v3);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v3 + 1;
          *((void *)this + 1) = v3 + 1;
          char v13 = *(unsigned char *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v3 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 48) |= 2u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v65 = 0;
                unsigned int v66 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_137;
                  }
                  unint64_t v67 = v20++;
                  char v68 = *(unsigned char *)(v21 + v67);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  BOOL v14 = v66++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_136;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_136:
                unint64_t v3 = v67 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v3 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_137;
                  }
                  v22 += 7;
                  unint64_t v20 = v3;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_137:
              *(void *)(a1 + 16) = v24;
              goto LABEL_168;
            case 2u:
              *(unsigned char *)(a1 + 48) |= 1u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v69 = 0;
                unsigned int v70 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_142;
                  }
                  unint64_t v71 = v27++;
                  char v72 = *(unsigned char *)(v28 + v71);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  BOOL v14 = v70++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_141:
                    unint64_t v3 = v71 + 1;
                    goto LABEL_142;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_141;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v3 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_142;
                }
                v29 += 7;
                unint64_t v27 = v3;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_142:
              *(void *)(a1 + 8) = v31;
              goto LABEL_168;
            case 3u:
              *(unsigned char *)(a1 + 48) |= 4u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v73 = 0;
                unsigned int v74 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_147;
                  }
                  unint64_t v75 = v33++;
                  char v76 = *(unsigned char *)(v34 + v75);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0) {
                    break;
                  }
                  v73 += 7;
                  BOOL v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_146:
                    unint64_t v3 = v75 + 1;
                    goto LABEL_147;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_146;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v3 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_147;
                }
                v35 += 7;
                unint64_t v33 = v3;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_147:
              *(_DWORD *)(a1 + 24) = v37;
              goto LABEL_168;
            case 4u:
              *(unsigned char *)(a1 + 48) |= 0x40u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v77 = 0;
                unsigned int v78 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_152;
                  }
                  unint64_t v79 = v39++;
                  char v80 = *(unsigned char *)(v40 + v79);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0) {
                    break;
                  }
                  v77 += 7;
                  BOOL v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_151:
                    unint64_t v3 = v79 + 1;
                    goto LABEL_152;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_151;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v3 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_152;
                }
                v41 += 7;
                unint64_t v39 = v3;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_152:
              *(_DWORD *)(a1 + 40) = v43;
              goto LABEL_168;
            case 5u:
              *(unsigned char *)(a1 + 48) |= 0x20u;
              unint64_t v45 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v81 = 0;
                unsigned int v82 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_157;
                  }
                  unint64_t v83 = v45++;
                  char v84 = *(unsigned char *)(v46 + v83);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v84 & 0x7F) << v81;
                  if ((v84 & 0x80) == 0) {
                    break;
                  }
                  v81 += 7;
                  BOOL v14 = v82++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_156:
                    unint64_t v3 = v83 + 1;
                    goto LABEL_157;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_156;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v3 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_157;
                }
                v47 += 7;
                unint64_t v45 = v3;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_157:
              *(_DWORD *)(a1 + 36) = v49;
              goto LABEL_168;
            case 6u:
              *(unsigned char *)(a1 + 48) |= 0x10u;
              unint64_t v51 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v52 = *(void *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v85 = 0;
                unsigned int v86 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_162;
                  }
                  unint64_t v87 = v51++;
                  char v88 = *(unsigned char *)(v52 + v87);
                  *((void *)this + 1) = v51;
                  v55 |= (unint64_t)(v88 & 0x7F) << v85;
                  if ((v88 & 0x80) == 0) {
                    break;
                  }
                  v85 += 7;
                  BOOL v14 = v86++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_161:
                    unint64_t v3 = v87 + 1;
                    goto LABEL_162;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v55) = 0;
                }
                goto LABEL_161;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v3 = v51 + 1;
                *((void *)this + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_162;
                }
                v53 += 7;
                unint64_t v51 = v3;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_162:
              *(_DWORD *)(a1 + 32) = v55;
              goto LABEL_168;
            case 7u:
              *(unsigned char *)(a1 + 48) |= 8u;
              unint64_t v57 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v58 = *(void *)this;
              if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
              {
                char v89 = 0;
                unsigned int v90 = 0;
                uint64_t v61 = 0;
                if (v2 <= v57) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v57)
                  {
                    LODWORD(v61) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_167;
                  }
                  unint64_t v91 = v57++;
                  char v92 = *(unsigned char *)(v58 + v91);
                  *((void *)this + 1) = v57;
                  v61 |= (unint64_t)(v92 & 0x7F) << v89;
                  if ((v92 & 0x80) == 0) {
                    break;
                  }
                  v89 += 7;
                  BOOL v14 = v90++ > 8;
                  if (v14)
                  {
                    LODWORD(v61) = 0;
LABEL_166:
                    unint64_t v3 = v91 + 1;
                    goto LABEL_167;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v61) = 0;
                }
                goto LABEL_166;
              }
              char v59 = 0;
              unsigned int v60 = 0;
              uint64_t v61 = 0;
              do
              {
                unint64_t v3 = v57 + 1;
                *((void *)this + 1) = v57 + 1;
                char v62 = *(unsigned char *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0) {
                  goto LABEL_167;
                }
                v59 += 7;
                unint64_t v57 = v3;
                BOOL v14 = v60++ > 8;
              }
              while (!v14);
              LODWORD(v61) = 0;
LABEL_167:
              *(_DWORD *)(a1 + 28) = v61;
LABEL_168:
              int v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((unsigned char *)this + 24)) {
                return v4 == 0;
              }
              continue;
            case 8u:
              *(unsigned char *)(a1 + 48) |= 0x80u;
              unint64_t v3 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              if (v3 >= v2)
              {
                BOOL v64 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v63 = *(unsigned __int8 *)(*(void *)this + v3++);
                *((void *)this + 1) = v3;
                BOOL v64 = v63 != 0;
              }
              *(unsigned char *)(a1 + 44) = v64;
              goto LABEL_168;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v3 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              goto LABEL_168;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1902F5E94(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 48);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 48);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(result + 48) & 1) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(unsigned char *)(v3 + 48) & 0x80) == 0) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_15:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 8) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 0x80) == 0) {
    return result;
  }
LABEL_17:

  return PB::Writer::write(this);
}

void sub_1902F5FB0(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902F5FE8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "abruptGravityChangeAngle", *(float *)(a1 + 32));
    uint64_t v5 = *(void *)(a1 + 216);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_56;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "accelPathLength", *(float *)(a1 + 36));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "accelPathLengthWithPeak", *(float *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "angleChangePostImpact", *(float *)(a1 + 44));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "angleChangePreImpact", *(float *)(a1 + 48));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "aopTsNow");
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 2) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "aopTsSensor");
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "crown");
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "crownVariance", *(float *)(a1 + 56));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "extrapolatedMaxAccelNorm", *(float *)(a1 + 60));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "extrapolatedMaxMinusMin", *(float *)(a1 + 64));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "fallType");
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "gravityVariance", *(float *)(a1 + 72));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "isFall");
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "isNearFall");
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "jerkVectorMagMax", *(float *)(a1 + 84));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "magMax", *(float *)(a1 + 88));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "maxAccelNorm", *(float *)(a1 + 92));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "maxAngleChangePostImpact", *(float *)(a1 + 96));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "maxAngleChangePreImpact", *(float *)(a1 + 100));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "maxMinusMin", *(float *)(a1 + 104));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "medianAbsGravityY", *(float *)(a1 + 108));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "minInertialZ", *(float *)(a1 + 112));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "minInertialZHighFreq", *(float *)(a1 + 116));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "operatingMode");
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "pathLengthDecorrelation", *(float *)(a1 + 124));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(this, "pathLengthDelaySpread", *(float *)(a1 + 128));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v5 & 4) == 0) {
      goto LABEL_30;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "pathLengthHarmonicMean", *(float *)(a1 + 132));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 4) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(this, "peakTimestamp");
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(this, "poseAtImpact", *(float *)(a1 + 136));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(this, "posteriorRatio", *(float *)(a1 + 140));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(this, "seq");
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(this, "simulated");
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(this, "sumDeltaAngles", *(float *)(a1 + 152));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(this, "swingAngle", *(float *)(a1 + 156));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(this, "tiltAngle", *(float *)(a1 + 160));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x2000000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(this, "trialCount");
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x4000000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(this, "xJerkScalarMagMax", *(float *)(a1 + 168));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x8000000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(this, "xMax", *(float *)(a1 + 172));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x10000000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(this, "xMin", *(float *)(a1 + 176));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_42:
    if ((v5 & 0x20000000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(this, "xZCTime", *(float *)(a1 + 180));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x40000000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(this, "yJerkScalarMagMax", *(float *)(a1 + 184));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x80000000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(this, "yMax", *(float *)(a1 + 188));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x100000000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(this, "yMin", *(float *)(a1 + 192));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_46:
    if ((v5 & 0x200000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(this, "yZCTime", *(float *)(a1 + 196));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_47:
    if ((v5 & 0x400000000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(this, "zJerkScalarMagMax", *(float *)(a1 + 200));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x400000000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x800000000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(this, "zMax", *(float *)(a1 + 204));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x800000000000) == 0)
  {
LABEL_49:
    if ((v5 & 0x1000000000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
LABEL_101:
  PB::TextFormatter::format(this, "zMin", *(float *)(a1 + 208));
  if ((*(void *)(a1 + 216) & 0x1000000000000) != 0) {
LABEL_50:
  }
    PB::TextFormatter::format(this, "zZCTime", *(float *)(a1 + 212));
LABEL_51:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1902F664C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(void *)(a1 + 216) |= 0x80000000uLL;
          unint64_t v20 = *((void *)this + 1);
          unint64_t v21 = *((void *)this + 2);
          uint64_t v22 = *(void *)this;
          if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
          {
            char v147 = 0;
            unsigned int v148 = 0;
            uint64_t v25 = 0;
            if (v21 <= v20) {
              unint64_t v21 = *((void *)this + 1);
            }
            do
            {
              if (v21 == v20)
              {
                LODWORD(v25) = 0;
                *((unsigned char *)this + 24) = 1;
                goto LABEL_302;
              }
              unint64_t v149 = v20 + 1;
              char v150 = *(unsigned char *)(v22 + v20);
              *((void *)this + 1) = v149;
              v25 |= (unint64_t)(v150 & 0x7F) << v147;
              if ((v150 & 0x80) == 0)
              {
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_302;
              }
              v147 += 7;
              unint64_t v20 = v149;
              BOOL v14 = v148++ > 8;
            }
            while (!v14);
LABEL_221:
            LODWORD(v25) = 0;
          }
          else
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            while (1)
            {
              unint64_t v26 = v20 + 1;
              *((void *)this + 1) = v20 + 1;
              char v27 = *(unsigned char *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0) {
                break;
              }
              v23 += 7;
              unint64_t v20 = v26;
              BOOL v14 = v24++ > 8;
              if (v14) {
                goto LABEL_221;
              }
            }
          }
LABEL_302:
          *(_DWORD *)(a1 + 144) = v25;
          goto LABEL_294;
        case 2u:
          *(void *)(a1 + 216) |= 1uLL;
          unint64_t v29 = *((void *)this + 1);
          unint64_t v30 = *((void *)this + 2);
          uint64_t v31 = *(void *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)this + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_306;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v14 = v33++ > 8;
            }
            while (!v14);
LABEL_228:
            uint64_t v34 = 0;
            goto LABEL_306;
          }
          char v151 = 0;
          unsigned int v152 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)this + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              uint64_t v34 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v153 = v29 + 1;
              char v154 = *(unsigned char *)(v31 + v29);
              *((void *)this + 1) = v153;
              v34 |= (unint64_t)(v154 & 0x7F) << v151;
              if (v154 < 0)
              {
                v151 += 7;
                unint64_t v29 = v153;
                BOOL v14 = v152++ > 8;
                if (v14) {
                  goto LABEL_228;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v34 = 0;
              }
            }
            break;
          }
LABEL_306:
          *(void *)(a1 + 8) = v34;
          goto LABEL_294;
        case 3u:
          *(void *)(a1 + 216) |= 2uLL;
          unint64_t v37 = *((void *)this + 1);
          unint64_t v38 = *((void *)this + 2);
          uint64_t v39 = *(void *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            char v40 = 0;
            unsigned int v41 = 0;
            uint64_t v42 = 0;
            do
            {
              unint64_t v43 = v37 + 1;
              *((void *)this + 1) = v37 + 1;
              char v44 = *(unsigned char *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0) {
                goto LABEL_310;
              }
              v40 += 7;
              unint64_t v37 = v43;
              BOOL v14 = v41++ > 8;
            }
            while (!v14);
LABEL_235:
            uint64_t v42 = 0;
            goto LABEL_310;
          }
          char v155 = 0;
          unsigned int v156 = 0;
          uint64_t v42 = 0;
          if (v38 <= v37) {
            unint64_t v38 = *((void *)this + 1);
          }
          while (2)
          {
            if (v38 == v37)
            {
              uint64_t v42 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v157 = v37 + 1;
              char v158 = *(unsigned char *)(v39 + v37);
              *((void *)this + 1) = v157;
              v42 |= (unint64_t)(v158 & 0x7F) << v155;
              if (v158 < 0)
              {
                v155 += 7;
                unint64_t v37 = v157;
                BOOL v14 = v156++ > 8;
                if (v14) {
                  goto LABEL_235;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v42 = 0;
              }
            }
            break;
          }
LABEL_310:
          *(void *)(a1 + 16) = v42;
          goto LABEL_294;
        case 4u:
          *(void *)(a1 + 216) |= 0x20000uLL;
          unint64_t v45 = *((void *)this + 1);
          if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v45);
          goto LABEL_293;
        case 5u:
          *(void *)(a1 + 216) |= 0x8000000000uLL;
          unint64_t v46 = *((void *)this + 1);
          if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(void *)this + v46);
          goto LABEL_293;
        case 6u:
          *(void *)(a1 + 216) |= 0x4000000000uLL;
          unint64_t v47 = *((void *)this + 1);
          if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(void *)this + v47);
          goto LABEL_293;
        case 7u:
          *(void *)(a1 + 216) |= 0x80000000000uLL;
          unint64_t v48 = *((void *)this + 1);
          if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 192) = *(_DWORD *)(*(void *)this + v48);
          goto LABEL_293;
        case 8u:
          *(void *)(a1 + 216) |= 0x40000000000uLL;
          unint64_t v49 = *((void *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 188) = *(_DWORD *)(*(void *)this + v49);
          goto LABEL_293;
        case 9u:
          *(void *)(a1 + 216) |= 0x800000000000uLL;
          unint64_t v50 = *((void *)this + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 208) = *(_DWORD *)(*(void *)this + v50);
          goto LABEL_293;
        case 0xAu:
          *(void *)(a1 + 216) |= 0x400000000000uLL;
          unint64_t v51 = *((void *)this + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 204) = *(_DWORD *)(*(void *)this + v51);
          goto LABEL_293;
        case 0xBu:
          *(void *)(a1 + 216) |= 0x10000000000uLL;
          unint64_t v52 = *((void *)this + 1);
          if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 180) = *(_DWORD *)(*(void *)this + v52);
          goto LABEL_293;
        case 0xCu:
          *(void *)(a1 + 216) |= 0x100000000000uLL;
          unint64_t v53 = *((void *)this + 1);
          if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 196) = *(_DWORD *)(*(void *)this + v53);
          goto LABEL_293;
        case 0xDu:
          *(void *)(a1 + 216) |= 0x1000000000000uLL;
          unint64_t v54 = *((void *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 212) = *(_DWORD *)(*(void *)this + v54);
          goto LABEL_293;
        case 0xEu:
          *(void *)(a1 + 216) |= 0x10000uLL;
          unint64_t v55 = *((void *)this + 1);
          if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v55);
          goto LABEL_293;
        case 0xFu:
          *(void *)(a1 + 216) |= 0x2000000000uLL;
          unint64_t v56 = *((void *)this + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(void *)this + v56);
          goto LABEL_293;
        case 0x10u:
          *(void *)(a1 + 216) |= 0x20000000000uLL;
          unint64_t v57 = *((void *)this + 1);
          if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 184) = *(_DWORD *)(*(void *)this + v57);
          goto LABEL_293;
        case 0x11u:
          *(void *)(a1 + 216) |= 0x200000000000uLL;
          unint64_t v58 = *((void *)this + 1);
          if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 200) = *(_DWORD *)(*(void *)this + v58);
          goto LABEL_293;
        case 0x12u:
          *(void *)(a1 + 216) |= 4uLL;
          unint64_t v59 = *((void *)this + 1);
          unint64_t v60 = *((void *)this + 2);
          uint64_t v61 = *(void *)this;
          if (v59 <= 0xFFFFFFFFFFFFFFF5 && v59 + 10 <= v60)
          {
            char v62 = 0;
            unsigned int v63 = 0;
            uint64_t v64 = 0;
            do
            {
              unint64_t v65 = v59 + 1;
              *((void *)this + 1) = v59 + 1;
              char v66 = *(unsigned char *)(v61 + v59);
              v64 |= (unint64_t)(v66 & 0x7F) << v62;
              if ((v66 & 0x80) == 0) {
                goto LABEL_314;
              }
              v62 += 7;
              unint64_t v59 = v65;
              BOOL v14 = v63++ > 8;
            }
            while (!v14);
LABEL_242:
            uint64_t v64 = 0;
            goto LABEL_314;
          }
          char v159 = 0;
          unsigned int v160 = 0;
          uint64_t v64 = 0;
          if (v60 <= v59) {
            unint64_t v60 = *((void *)this + 1);
          }
          while (2)
          {
            if (v60 == v59)
            {
              uint64_t v64 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v161 = v59 + 1;
              char v162 = *(unsigned char *)(v61 + v59);
              *((void *)this + 1) = v161;
              v64 |= (unint64_t)(v162 & 0x7F) << v159;
              if (v162 < 0)
              {
                v159 += 7;
                unint64_t v59 = v161;
                BOOL v14 = v160++ > 8;
                if (v14) {
                  goto LABEL_242;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v64 = 0;
              }
            }
            break;
          }
LABEL_314:
          *(void *)(a1 + 24) = v64;
          goto LABEL_294;
        case 0x13u:
          *(void *)(a1 + 216) |= 0x10uLL;
          unint64_t v67 = *((void *)this + 1);
          if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v67);
          goto LABEL_293;
        case 0x14u:
          *(void *)(a1 + 216) |= 0x800000uLL;
          unint64_t v68 = *((void *)this + 1);
          if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v68);
          goto LABEL_293;
        case 0x15u:
          *(void *)(a1 + 216) |= 0x80uLL;
          unint64_t v69 = *((void *)this + 1);
          if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v69);
          goto LABEL_293;
        case 0x16u:
          *(void *)(a1 + 216) |= 0x40uLL;
          unint64_t v70 = *((void *)this + 1);
          if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v70);
          goto LABEL_293;
        case 0x17u:
          *(void *)(a1 + 216) |= 0x100000uLL;
          unint64_t v71 = *((void *)this + 1);
          if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v71);
          goto LABEL_293;
        case 0x18u:
          *(void *)(a1 + 216) |= 0x80000uLL;
          unint64_t v72 = *((void *)this + 1);
          if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v72);
          goto LABEL_293;
        case 0x19u:
          *(void *)(a1 + 216) |= 0x40000000uLL;
          unint64_t v73 = *((void *)this + 1);
          if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v73);
          goto LABEL_293;
        case 0x1Au:
          *(void *)(a1 + 216) |= 0x1000uLL;
          unint64_t v74 = *((void *)this + 1);
          unint64_t v75 = *((void *)this + 2);
          uint64_t v76 = *(void *)this;
          if (v74 <= 0xFFFFFFFFFFFFFFF5 && v74 + 10 <= v75)
          {
            char v77 = 0;
            unsigned int v78 = 0;
            uint64_t v79 = 0;
            do
            {
              unint64_t v80 = v74 + 1;
              *((void *)this + 1) = v74 + 1;
              char v81 = *(unsigned char *)(v76 + v74);
              v79 |= (unint64_t)(v81 & 0x7F) << v77;
              if ((v81 & 0x80) == 0) {
                goto LABEL_318;
              }
              v77 += 7;
              unint64_t v74 = v80;
              BOOL v14 = v78++ > 8;
            }
            while (!v14);
LABEL_249:
            LODWORD(v79) = 0;
            goto LABEL_318;
          }
          char v163 = 0;
          unsigned int v164 = 0;
          uint64_t v79 = 0;
          if (v75 <= v74) {
            unint64_t v75 = *((void *)this + 1);
          }
          while (2)
          {
            if (v75 == v74)
            {
              LODWORD(v79) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v165 = v74 + 1;
              char v166 = *(unsigned char *)(v76 + v74);
              *((void *)this + 1) = v165;
              v79 |= (unint64_t)(v166 & 0x7F) << v163;
              if (v166 < 0)
              {
                v163 += 7;
                unint64_t v74 = v165;
                BOOL v14 = v164++ > 8;
                if (v14) {
                  goto LABEL_249;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v79) = 0;
              }
            }
            break;
          }
LABEL_318:
          *(_DWORD *)(a1 + 68) = v79;
          goto LABEL_294;
        case 0x1Bu:
          *(void *)(a1 + 216) |= 0x4000uLL;
          unint64_t v82 = *((void *)this + 1);
          unint64_t v83 = *((void *)this + 2);
          uint64_t v84 = *(void *)this;
          if (v82 <= 0xFFFFFFFFFFFFFFF5 && v82 + 10 <= v83)
          {
            char v85 = 0;
            unsigned int v86 = 0;
            uint64_t v87 = 0;
            do
            {
              unint64_t v88 = v82 + 1;
              *((void *)this + 1) = v82 + 1;
              char v89 = *(unsigned char *)(v84 + v82);
              v87 |= (unint64_t)(v89 & 0x7F) << v85;
              if ((v89 & 0x80) == 0) {
                goto LABEL_322;
              }
              v85 += 7;
              unint64_t v82 = v88;
              BOOL v14 = v86++ > 8;
            }
            while (!v14);
LABEL_256:
            LODWORD(v87) = 0;
            goto LABEL_322;
          }
          char v167 = 0;
          unsigned int v168 = 0;
          uint64_t v87 = 0;
          if (v83 <= v82) {
            unint64_t v83 = *((void *)this + 1);
          }
          while (2)
          {
            if (v83 == v82)
            {
              LODWORD(v87) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v169 = v82 + 1;
              char v170 = *(unsigned char *)(v84 + v82);
              *((void *)this + 1) = v169;
              v87 |= (unint64_t)(v170 & 0x7F) << v167;
              if (v170 < 0)
              {
                v167 += 7;
                unint64_t v82 = v169;
                BOOL v14 = v168++ > 8;
                if (v14) {
                  goto LABEL_256;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v87) = 0;
              }
            }
            break;
          }
LABEL_322:
          *(_DWORD *)(a1 + 76) = v87;
          goto LABEL_294;
        case 0x1Cu:
          *(void *)(a1 + 216) |= 0x100000000uLL;
          unint64_t v90 = *((void *)this + 1);
          unint64_t v91 = *((void *)this + 2);
          uint64_t v92 = *(void *)this;
          if (v90 <= 0xFFFFFFFFFFFFFFF5 && v90 + 10 <= v91)
          {
            char v93 = 0;
            unsigned int v94 = 0;
            uint64_t v95 = 0;
            do
            {
              unint64_t v96 = v90 + 1;
              *((void *)this + 1) = v90 + 1;
              char v97 = *(unsigned char *)(v92 + v90);
              v95 |= (unint64_t)(v97 & 0x7F) << v93;
              if ((v97 & 0x80) == 0) {
                goto LABEL_326;
              }
              v93 += 7;
              unint64_t v90 = v96;
              BOOL v14 = v94++ > 8;
            }
            while (!v14);
LABEL_263:
            LODWORD(v95) = 0;
            goto LABEL_326;
          }
          char v171 = 0;
          unsigned int v172 = 0;
          uint64_t v95 = 0;
          if (v91 <= v90) {
            unint64_t v91 = *((void *)this + 1);
          }
          while (2)
          {
            if (v91 == v90)
            {
              LODWORD(v95) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v173 = v90 + 1;
              char v174 = *(unsigned char *)(v92 + v90);
              *((void *)this + 1) = v173;
              v95 |= (unint64_t)(v174 & 0x7F) << v171;
              if (v174 < 0)
              {
                v171 += 7;
                unint64_t v90 = v173;
                BOOL v14 = v172++ > 8;
                if (v14) {
                  goto LABEL_263;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v95) = 0;
              }
            }
            break;
          }
LABEL_326:
          *(_DWORD *)(a1 + 148) = v95;
          goto LABEL_294;
        case 0x1Du:
          *(void *)(a1 + 216) |= 0x1000000000uLL;
          unint64_t v98 = *((void *)this + 1);
          unint64_t v99 = *((void *)this + 2);
          uint64_t v100 = *(void *)this;
          if (v98 <= 0xFFFFFFFFFFFFFFF5 && v98 + 10 <= v99)
          {
            char v101 = 0;
            unsigned int v102 = 0;
            uint64_t v103 = 0;
            do
            {
              unint64_t v104 = v98 + 1;
              *((void *)this + 1) = v98 + 1;
              char v105 = *(unsigned char *)(v100 + v98);
              v103 |= (unint64_t)(v105 & 0x7F) << v101;
              if ((v105 & 0x80) == 0) {
                goto LABEL_330;
              }
              v101 += 7;
              unint64_t v98 = v104;
              BOOL v14 = v102++ > 8;
            }
            while (!v14);
LABEL_270:
            LODWORD(v103) = 0;
            goto LABEL_330;
          }
          char v175 = 0;
          unsigned int v176 = 0;
          uint64_t v103 = 0;
          if (v99 <= v98) {
            unint64_t v99 = *((void *)this + 1);
          }
          while (2)
          {
            if (v99 == v98)
            {
              LODWORD(v103) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v177 = v98 + 1;
              char v178 = *(unsigned char *)(v100 + v98);
              *((void *)this + 1) = v177;
              v103 |= (unint64_t)(v178 & 0x7F) << v175;
              if (v178 < 0)
              {
                v175 += 7;
                unint64_t v98 = v177;
                BOOL v14 = v176++ > 8;
                if (v14) {
                  goto LABEL_270;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v103) = 0;
              }
            }
            break;
          }
LABEL_330:
          *(_DWORD *)(a1 + 164) = v103;
          goto LABEL_294;
        case 0x1Eu:
          *(void *)(a1 + 216) |= 0x100uLL;
          unint64_t v106 = *((void *)this + 1);
          unint64_t v107 = *((void *)this + 2);
          uint64_t v108 = *(void *)this;
          if (v106 <= 0xFFFFFFFFFFFFFFF5 && v106 + 10 <= v107)
          {
            char v109 = 0;
            unsigned int v110 = 0;
            uint64_t v111 = 0;
            do
            {
              unint64_t v112 = v106 + 1;
              *((void *)this + 1) = v106 + 1;
              char v113 = *(unsigned char *)(v108 + v106);
              v111 |= (unint64_t)(v113 & 0x7F) << v109;
              if ((v113 & 0x80) == 0) {
                goto LABEL_334;
              }
              v109 += 7;
              unint64_t v106 = v112;
              BOOL v14 = v110++ > 8;
            }
            while (!v14);
LABEL_277:
            LODWORD(v111) = 0;
            goto LABEL_334;
          }
          char v179 = 0;
          unsigned int v180 = 0;
          uint64_t v111 = 0;
          if (v107 <= v106) {
            unint64_t v107 = *((void *)this + 1);
          }
          while (2)
          {
            if (v107 == v106)
            {
              LODWORD(v111) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v181 = v106 + 1;
              char v182 = *(unsigned char *)(v108 + v106);
              *((void *)this + 1) = v181;
              v111 |= (unint64_t)(v182 & 0x7F) << v179;
              if (v182 < 0)
              {
                v179 += 7;
                unint64_t v106 = v181;
                BOOL v14 = v180++ > 8;
                if (v14) {
                  goto LABEL_277;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v111) = 0;
              }
            }
            break;
          }
LABEL_334:
          *(_DWORD *)(a1 + 52) = v111;
          goto LABEL_294;
        case 0x1Fu:
          *(void *)(a1 + 216) |= 0x200000000uLL;
          unint64_t v114 = *((void *)this + 1);
          if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(void *)this + v114);
          goto LABEL_293;
        case 0x20u:
          *(void *)(a1 + 216) |= 0x800uLL;
          unint64_t v115 = *((void *)this + 1);
          if (v115 > 0xFFFFFFFFFFFFFFFBLL || v115 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v115);
          goto LABEL_293;
        case 0x21u:
          *(void *)(a1 + 216) |= 0x400uLL;
          unint64_t v116 = *((void *)this + 1);
          if (v116 > 0xFFFFFFFFFFFFFFFBLL || v116 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v116);
          goto LABEL_293;
        case 0x22u:
          *(void *)(a1 + 216) |= 0x200000uLL;
          unint64_t v117 = *((void *)this + 1);
          if (v117 > 0xFFFFFFFFFFFFFFFBLL || v117 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v117);
          goto LABEL_293;
        case 0x23u:
          *(void *)(a1 + 216) |= 0x40000uLL;
          unint64_t v118 = *((void *)this + 1);
          if (v118 > 0xFFFFFFFFFFFFFFFBLL || v118 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v118);
          goto LABEL_293;
        case 0x24u:
          *(void *)(a1 + 216) |= 0x20000000uLL;
          unint64_t v119 = *((void *)this + 1);
          if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(void *)this + v119);
          goto LABEL_293;
        case 0x25u:
          *(void *)(a1 + 216) |= 0x800000000uLL;
          unint64_t v120 = *((void *)this + 1);
          if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(void *)this + v120);
          goto LABEL_293;
        case 0x26u:
          *(void *)(a1 + 216) |= 0x400000000uLL;
          unint64_t v121 = *((void *)this + 1);
          if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(void *)this + v121);
          goto LABEL_293;
        case 0x27u:
          *(void *)(a1 + 216) |= 0x8000uLL;
          unint64_t v122 = *((void *)this + 1);
          unint64_t v123 = *((void *)this + 2);
          uint64_t v124 = *(void *)this;
          if (v122 <= 0xFFFFFFFFFFFFFFF5 && v122 + 10 <= v123)
          {
            char v125 = 0;
            unsigned int v126 = 0;
            uint64_t v127 = 0;
            do
            {
              unint64_t v128 = v122 + 1;
              *((void *)this + 1) = v122 + 1;
              char v129 = *(unsigned char *)(v124 + v122);
              v127 |= (unint64_t)(v129 & 0x7F) << v125;
              if ((v129 & 0x80) == 0) {
                goto LABEL_338;
              }
              v125 += 7;
              unint64_t v122 = v128;
              BOOL v14 = v126++ > 8;
            }
            while (!v14);
LABEL_284:
            LODWORD(v127) = 0;
            goto LABEL_338;
          }
          char v183 = 0;
          unsigned int v184 = 0;
          uint64_t v127 = 0;
          if (v123 <= v122) {
            unint64_t v123 = *((void *)this + 1);
          }
          while (2)
          {
            if (v123 == v122)
            {
              LODWORD(v127) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v185 = v122 + 1;
              char v186 = *(unsigned char *)(v124 + v122);
              *((void *)this + 1) = v185;
              v127 |= (unint64_t)(v186 & 0x7F) << v183;
              if (v186 < 0)
              {
                v183 += 7;
                unint64_t v122 = v185;
                BOOL v14 = v184++ > 8;
                if (v14) {
                  goto LABEL_284;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v127) = 0;
              }
            }
            break;
          }
LABEL_338:
          *(_DWORD *)(a1 + 80) = v127;
          goto LABEL_294;
        case 0x28u:
          *(void *)(a1 + 216) |= 0x10000000uLL;
          unint64_t v130 = *((void *)this + 1);
          if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v130);
          goto LABEL_293;
        case 0x29u:
          *(void *)(a1 + 216) |= 0x4000000uLL;
          unint64_t v131 = *((void *)this + 1);
          if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v131);
          goto LABEL_293;
        case 0x2Au:
          *(void *)(a1 + 216) |= 0x8000000uLL;
          unint64_t v132 = *((void *)this + 1);
          if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(void *)this + v132);
          goto LABEL_293;
        case 0x2Bu:
          *(void *)(a1 + 216) |= 0x20uLL;
          unint64_t v133 = *((void *)this + 1);
          if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v133);
          goto LABEL_293;
        case 0x2Cu:
          *(void *)(a1 + 216) |= 0x1000000uLL;
          unint64_t v134 = *((void *)this + 1);
          if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v134);
          goto LABEL_293;
        case 0x2Du:
          *(void *)(a1 + 216) |= 0x2000000uLL;
          unint64_t v135 = *((void *)this + 1);
          unint64_t v136 = *((void *)this + 2);
          uint64_t v137 = *(void *)this;
          if (v135 <= 0xFFFFFFFFFFFFFFF5 && v135 + 10 <= v136)
          {
            char v138 = 0;
            unsigned int v139 = 0;
            uint64_t v140 = 0;
            do
            {
              unint64_t v141 = v135 + 1;
              *((void *)this + 1) = v135 + 1;
              char v142 = *(unsigned char *)(v137 + v135);
              v140 |= (unint64_t)(v142 & 0x7F) << v138;
              if ((v142 & 0x80) == 0) {
                goto LABEL_342;
              }
              v138 += 7;
              unint64_t v135 = v141;
              BOOL v14 = v139++ > 8;
            }
            while (!v14);
LABEL_291:
            LODWORD(v140) = 0;
            goto LABEL_342;
          }
          char v187 = 0;
          unsigned int v188 = 0;
          uint64_t v140 = 0;
          if (v136 <= v135) {
            unint64_t v136 = *((void *)this + 1);
          }
          break;
        case 0x2Eu:
          *(void *)(a1 + 216) |= 0x2000uLL;
          unint64_t v143 = *((void *)this + 1);
          if (v143 > 0xFFFFFFFFFFFFFFFBLL || v143 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v143);
          goto LABEL_293;
        case 0x2Fu:
          *(void *)(a1 + 216) |= 0x200uLL;
          unint64_t v144 = *((void *)this + 1);
          if (v144 > 0xFFFFFFFFFFFFFFFBLL || v144 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v144);
          goto LABEL_293;
        case 0x30u:
          *(void *)(a1 + 216) |= 0x400000uLL;
          unint64_t v145 = *((void *)this + 1);
          if (v145 > 0xFFFFFFFFFFFFFFFBLL || v145 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v145);
          goto LABEL_293;
        case 0x31u:
          *(void *)(a1 + 216) |= 8uLL;
          unint64_t v146 = *((void *)this + 1);
          if (v146 <= 0xFFFFFFFFFFFFFFFBLL && v146 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v146);
LABEL_293:
            *((void *)this + 1) += 4;
          }
          else
          {
LABEL_214:
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_294;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          goto LABEL_294;
      }
      while (1)
      {
        if (v136 == v135)
        {
          LODWORD(v140) = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_342;
        }
        unint64_t v189 = v135 + 1;
        char v190 = *(unsigned char *)(v137 + v135);
        *((void *)this + 1) = v189;
        v140 |= (unint64_t)(v190 & 0x7F) << v187;
        if ((v190 & 0x80) == 0) {
          break;
        }
        v187 += 7;
        unint64_t v135 = v189;
        BOOL v14 = v188++ > 8;
        if (v14) {
          goto LABEL_291;
        }
      }
      if (*((unsigned char *)this + 24)) {
        LODWORD(v140) = 0;
      }
LABEL_342:
      *(_DWORD *)(a1 + 120) = v140;
LABEL_294:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1902F7AD4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 216);
  if ((v4 & 0x80000000) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    uint64_t v4 = *(void *)(v3 + 216);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_53;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x20000) == 0)
  {
LABEL_5:
    if ((v4 & 0x8000000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 176));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 172));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 192));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x800000000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 188));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x800000000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 208));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x400000000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 204));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x100000000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 180));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000000000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 196));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x1000000000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 212));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x10000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 168));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 184));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_18:
    if ((v4 & 4) == 0) {
      goto LABEL_19;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 200));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 4) == 0)
  {
LABEL_19:
    if ((v4 & 0x10) == 0) {
      goto LABEL_20;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x10) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80) == 0) {
      goto LABEL_22;
    }
    goto LABEL_71;
  }
LABEL_70:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x80) == 0)
  {
LABEL_22:
    if ((v4 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_72;
  }
LABEL_71:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x40) == 0)
  {
LABEL_23:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_74;
  }
LABEL_73:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x80000) == 0)
  {
LABEL_25:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_75;
  }
LABEL_74:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_76;
  }
LABEL_75:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 140));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x1000) == 0)
  {
LABEL_27:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_77;
  }
LABEL_76:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x4000) == 0)
  {
LABEL_28:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_78;
  }
LABEL_77:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_79;
  }
LABEL_78:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x100) == 0) {
      goto LABEL_31;
    }
    goto LABEL_80;
  }
LABEL_79:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x100) == 0)
  {
LABEL_31:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_81;
  }
LABEL_80:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x800) == 0) {
      goto LABEL_33;
    }
    goto LABEL_82;
  }
LABEL_81:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 152));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x800) == 0)
  {
LABEL_33:
    if ((v4 & 0x400) == 0) {
      goto LABEL_34;
    }
    goto LABEL_83;
  }
LABEL_82:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x400) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_84;
  }
LABEL_83:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x200000) == 0)
  {
LABEL_35:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_85;
  }
LABEL_84:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x40000) == 0)
  {
LABEL_36:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_86;
  }
LABEL_85:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_87;
  }
LABEL_86:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 136));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_38:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_88;
  }
LABEL_87:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 160));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_89;
  }
LABEL_88:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 156));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x8000) == 0)
  {
LABEL_40:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_90;
  }
LABEL_89:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_41:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_91;
  }
LABEL_90:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 132));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_42:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_92;
  }
LABEL_91:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 124));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x20) == 0) {
      goto LABEL_44;
    }
    goto LABEL_93;
  }
LABEL_92:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 128));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x20) == 0)
  {
LABEL_44:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_94;
  }
LABEL_93:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_45:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_95;
  }
LABEL_94:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_46:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_96;
  }
LABEL_95:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x2000) == 0)
  {
LABEL_47:
    if ((v4 & 0x200) == 0) {
      goto LABEL_48;
    }
    goto LABEL_97;
  }
LABEL_96:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x200) == 0)
  {
LABEL_48:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_49;
    }
LABEL_98:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108));
    if ((*(void *)(v3 + 216) & 8) == 0) {
      return result;
    }
    goto LABEL_99;
  }
LABEL_97:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x400000) != 0) {
    goto LABEL_98;
  }
LABEL_49:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_99:
  float v5 = *(float *)(v3 + 32);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1902F8068(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCCC40;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_1902F8090(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902F80C8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 44);
  if (v5)
  {
    PB::TextFormatter::format(this, "aggAccelZDelta", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(a1 + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "arcLength", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "curveDistance", *(double *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(this, "firstLoftAngleDeg", *(double *)(a1 + 32));
  if ((*(unsigned char *)(a1 + 44) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "stepResult");
LABEL_7:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1902F81AC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 44) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_51;
            case 2u:
              *(unsigned char *)(a1 + 44) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_51;
            case 3u:
              *(unsigned char *)(a1 + 44) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_51;
            case 4u:
              *(unsigned char *)(a1 + 44) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_51:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_35:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_57;
            case 5u:
              *(unsigned char *)(a1 + 44) |= 0x10u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_56;
                  }
                  unint64_t v29 = v21++;
                  char v30 = *(unsigned char *)(v22 + v29);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_55:
                    unint64_t v2 = v29 + 1;
                    goto LABEL_56;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_55;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_56;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_56:
              *(_DWORD *)(a1 + 40) = v25;
LABEL_57:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_57;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1902F8514(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 44);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16));
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
    if ((*(unsigned char *)(v3 + 44) & 0x10) == 0) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 44);
  if (v4) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 0x10) == 0) {
    return result;
  }
LABEL_11:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_1902F85D8(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCD180;
  *(_DWORD *)(result + 176) = 0;
  return result;
}

void sub_1902F8600(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902F8638(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 176);
  if (v5)
  {
    PB::TextFormatter::format(this, "cadenceDeviceIdentification", *(double *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 176);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "cadenceUpdateTime", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "elapsedTime", *(double *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x100000) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "externalMachineType");
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "inclination", *(double *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "instantaneousCadence", *(double *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "instantaneousPower", *(double *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "instantaneousSpeed", *(double *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x200000) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "powerMeterIdentification");
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "powerUpdateTime", *(double *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "resistanceLevel", *(double *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "speedDeviceIdentification", *(double *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "speedUpdateTime", *(double *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 104));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "totalDistance", *(double *)(a1 + 112));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "totalElevationAscended", *(double *)(a1 + 120));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "totalEnergy", *(double *)(a1 + 128));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "totalFloorsClimbed");
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x20000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "totalStrideCount");
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_47:
  PB::TextFormatter::format(this, "totalStrokeCount");
  if ((*(_DWORD *)(a1 + 176) & 0x80000) != 0) {
LABEL_23:
  }
    PB::TextFormatter::format(this, "verticalSpeed", *(double *)(a1 + 160));
LABEL_24:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1902F893C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 176) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 2u:
              *(_DWORD *)(a1 + 176) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 3u:
              *(_DWORD *)(a1 + 176) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 4u:
              *(_DWORD *)(a1 + 176) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 5u:
              *(_DWORD *)(a1 + 176) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 6u:
              *(_DWORD *)(a1 + 176) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 7u:
              *(_DWORD *)(a1 + 176) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 120) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 8u:
              *(_DWORD *)(a1 + 176) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 128) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 9u:
              *(_DWORD *)(a1 + 176) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 0xAu:
              *(_DWORD *)(a1 + 176) |= 0x10000u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_156;
                  }
                  unint64_t v53 = v21++;
                  char v54 = *(unsigned char *)(v22 + v53);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0;
LABEL_155:
                    unint64_t v2 = v53 + 1;
                    goto LABEL_156;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v25 = 0;
                }
                goto LABEL_155;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_156;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              uint64_t v25 = 0;
LABEL_156:
              *(void *)(a1 + 136) = v25;
              goto LABEL_147;
            case 0xBu:
              *(_DWORD *)(a1 + 176) |= 0x20000u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_161;
                  }
                  unint64_t v57 = v27++;
                  char v58 = *(unsigned char *)(v28 + v57);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_160:
                    unint64_t v2 = v57 + 1;
                    goto LABEL_161;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_160;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_161;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_161:
              *(void *)(a1 + 144) = v31;
              goto LABEL_147;
            case 0xCu:
              *(_DWORD *)(a1 + 176) |= 0x40000u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    uint64_t v37 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_166;
                  }
                  unint64_t v61 = v33++;
                  char v62 = *(unsigned char *)(v34 + v61);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    uint64_t v37 = 0;
LABEL_165:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_166;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v37 = 0;
                }
                goto LABEL_165;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_166;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              uint64_t v37 = 0;
LABEL_166:
              *(void *)(a1 + 152) = v37;
              goto LABEL_147;
            case 0xDu:
              *(_DWORD *)(a1 + 176) |= 0x80000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 160) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 0xEu:
              *(_DWORD *)(a1 + 176) |= 0x100000u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_171;
                  }
                  unint64_t v65 = v39++;
                  char v66 = *(unsigned char *)(v40 + v65);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_170:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_171;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_170;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_171;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_171:
              *(_DWORD *)(a1 + 168) = v43;
              goto LABEL_147;
            case 0xFu:
              *(_DWORD *)(a1 + 176) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 0x10u:
              *(_DWORD *)(a1 + 176) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 0x11u:
              *(_DWORD *)(a1 + 176) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 0x12u:
              *(_DWORD *)(a1 + 176) |= 0x200000u;
              unint64_t v45 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_176;
                  }
                  unint64_t v69 = v45++;
                  char v70 = *(unsigned char *)(v46 + v69);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_175:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_176;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_175;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_176;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_176:
              *(_DWORD *)(a1 + 172) = v49;
LABEL_147:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x13u:
              *(_DWORD *)(a1 + 176) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 0x14u:
              *(_DWORD *)(a1 + 176) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 0x15u:
              *(_DWORD *)(a1 + 176) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 0x16u:
              *(_DWORD *)(a1 + 176) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
LABEL_146:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_109:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_147;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_147;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1902F9370(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 176);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32));
    int v4 = *(_DWORD *)(v3 + 176);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 128));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x10000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20000) == 0)
  {
LABEL_12:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80000) == 0)
  {
LABEL_14:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 160));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100000) == 0)
  {
LABEL_15:
    if ((v4 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x400) == 0)
  {
LABEL_16:
    if ((v4 & 2) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 2) == 0)
  {
LABEL_17:
    if ((v4 & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 4) == 0)
  {
LABEL_18:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x200000) == 0)
  {
LABEL_19:
    if ((v4 & 0x80) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80) == 0)
  {
LABEL_20:
    if ((v4 & 0x200) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x200) == 0)
  {
LABEL_21:
    if ((v4 & 1) == 0) {
      goto LABEL_22;
    }
LABEL_44:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
    if ((*(_DWORD *)(v3 + 176) & 0x800) == 0) {
      return result;
    }
    goto LABEL_45;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 176);
  if (v4) {
    goto LABEL_44;
  }
LABEL_22:
  if ((v4 & 0x800) == 0) {
    return result;
  }
LABEL_45:
  double v5 = *(double *)(v3 + 96);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1902F9610(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCDAB0;
  *(_DWORD *)(result + 112) = 0;
  return result;
}

void sub_1902F9638(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902F9670(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "averageCadence", *(float *)(a1 + 32));
    int v5 = *(_DWORD *)(a1 + 112);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "averageHeartRate", *(float *)(a1 + 36));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "averagePace", *(float *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "averagePower", *(float *)(a1 + 44));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "averageSpeed", *(float *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "crossTrainerDistance", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "elapsedTime", *(double *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "elevationGain", *(float *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "energy", *(float *)(a1 + 60));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "floors");
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 2) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "inclination", *(float *)(a1 + 68));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "indoorBikeDistance", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "instantaneousCadence", *(float *)(a1 + 76));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "instantaneousHeartRate", *(float *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "instantaneousPace", *(float *)(a1 + 84));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "instantaneousPower", *(float *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 4) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "instantaneousSpeed", *(float *)(a1 + 92));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 4) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "resistanceLevel", *(float *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "stepCount");
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_49:
  PB::TextFormatter::format(this, "strideCount", *(float *)(a1 + 104));
  if ((*(_DWORD *)(a1 + 112) & 0x400000) != 0) {
LABEL_24:
  }
    PB::TextFormatter::format(this, "treadmillDistance", *(float *)(a1 + 108));
LABEL_25:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1902F9994(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 112) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_33;
            case 2u:
              *(_DWORD *)(a1 + 112) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_33;
            case 3u:
              *(_DWORD *)(a1 + 112) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_33:
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_118;
            case 4u:
              *(_DWORD *)(a1 + 112) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 5u:
              *(_DWORD *)(a1 + 112) |= 0x400000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 6u:
              *(_DWORD *)(a1 + 112) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 7u:
              *(_DWORD *)(a1 + 112) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 8u:
              *(_DWORD *)(a1 + 112) |= 0x800u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_128;
                  }
                  unint64_t v35 = v21++;
                  char v36 = *(unsigned char *)(v22 + v35);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  BOOL v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_127:
                    unint64_t v2 = v35 + 1;
                    goto LABEL_128;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_127;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_128;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_128:
              *(_DWORD *)(a1 + 64) = v25;
              goto LABEL_119;
            case 9u:
              *(_DWORD *)(a1 + 112) |= 0x100000u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_133;
                  }
                  unint64_t v39 = v27++;
                  char v40 = *(unsigned char *)(v28 + v39);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_132:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_133;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_132;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_133;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_133:
              *(_DWORD *)(a1 + 100) = v31;
LABEL_119:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xAu:
              *(_DWORD *)(a1 + 112) |= 0x200000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0xBu:
              *(_DWORD *)(a1 + 112) |= 0x40000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0xCu:
              *(_DWORD *)(a1 + 112) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0xDu:
              *(_DWORD *)(a1 + 112) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0xEu:
              *(_DWORD *)(a1 + 112) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0xFu:
              *(_DWORD *)(a1 + 112) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0x10u:
              *(_DWORD *)(a1 + 112) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0x11u:
              *(_DWORD *)(a1 + 112) |= 0x80000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0x12u:
              *(_DWORD *)(a1 + 112) |= 0x20000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0x13u:
              *(_DWORD *)(a1 + 112) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0x14u:
              *(_DWORD *)(a1 + 112) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0x15u:
              *(_DWORD *)(a1 + 112) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0x16u:
              *(_DWORD *)(a1 + 112) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0x17u:
              *(_DWORD *)(a1 + 112) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
LABEL_117:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_118:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_101:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_119;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_119;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1902FA1F0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 112);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24));
    int v4 = *(_DWORD *)(v3 + 112);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x400000) == 0)
  {
LABEL_6:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x2000) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x40000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x80) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x10000) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x1000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x80000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40) == 0) {
      goto LABEL_20;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x40) == 0)
  {
LABEL_20:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x4000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0) {
      goto LABEL_22;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_23;
    }
LABEL_46:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80));
    if ((*(_DWORD *)(v3 + 112) & 0x10) == 0) {
      return result;
    }
    goto LABEL_47;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x8000) != 0) {
    goto LABEL_46;
  }
LABEL_23:
  if ((v4 & 0x10) == 0) {
    return result;
  }
LABEL_47:
  float v5 = *(float *)(v3 + 36);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1902FA4AC(uint64_t result)
{
  *(_DWORD *)(result + 48) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = &unk_1EDFCB078;
  return result;
}

void sub_1902FA4D4(PB::Base *this)
{
  *(void *)this = &unk_1EDFCB078;
  uint64_t v4 = *((void *)this + 2);
  unint64_t v2 = (void *)((char *)this + 16);
  uint64_t v3 = v4;
  *unint64_t v2 = 0;
  if (v4) {
    sub_1903478E8((uint64_t)v2, v3);
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    sub_1903478E8((uint64_t)this + 8, v5);
  }

  PB::Base::~Base(this);
}

void sub_1902FA54C(PB::Base *a1)
{
  sub_1902FA4D4(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902FA584(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(void *)(a1 + 8)) {
    PB::TextFormatter::format();
  }
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "modeSemanticType");
    char v5 = *(unsigned char *)(a1 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 8) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if ((*(unsigned char *)(a1 + 48) & 4) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(this, "modeUpdateReason");
  if ((*(unsigned char *)(a1 + 48) & 8) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "modeUpdateSource");
LABEL_7:
  if (*(void *)(a1 + 16)) {
    PB::TextFormatter::format();
  }
  char v6 = *(unsigned char *)(a1 + 48);
  if ((v6 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "starting");
    char v6 = *(unsigned char *)(a1 + 48);
  }
  if (v6) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 24));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1902FA690(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          operator new();
        case 3u:
          *(unsigned char *)(a1 + 48) |= 4u;
          unint64_t v21 = *((void *)this + 1);
          unint64_t v22 = *((void *)this + 2);
          uint64_t v23 = *(void *)this;
          if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
          {
            char v24 = 0;
            unsigned int v25 = 0;
            uint64_t v26 = 0;
            do
            {
              unint64_t v27 = v21 + 1;
              *((void *)this + 1) = v21 + 1;
              char v28 = *(unsigned char *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0) {
                goto LABEL_79;
              }
              v24 += 7;
              unint64_t v21 = v27;
              BOOL v14 = v25++ > 8;
            }
            while (!v14);
LABEL_58:
            LODWORD(v26) = 0;
            goto LABEL_79;
          }
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v26 = 0;
          if (v22 <= v21) {
            unint64_t v22 = *((void *)this + 1);
          }
          while (2)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v52 = v21 + 1;
              char v53 = *(unsigned char *)(v23 + v21);
              *((void *)this + 1) = v52;
              v26 |= (unint64_t)(v53 & 0x7F) << v50;
              if (v53 < 0)
              {
                v50 += 7;
                unint64_t v21 = v52;
                BOOL v14 = v51++ > 8;
                if (v14) {
                  goto LABEL_58;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v26) = 0;
              }
            }
            break;
          }
LABEL_79:
          *(_DWORD *)(a1 + 36) = v26;
          goto LABEL_88;
        case 4u:
          *(unsigned char *)(a1 + 48) |= 2u;
          unint64_t v29 = *((void *)this + 1);
          unint64_t v30 = *((void *)this + 2);
          uint64_t v31 = *(void *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)this + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_83;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v14 = v33++ > 8;
            }
            while (!v14);
LABEL_65:
            LODWORD(v34) = 0;
            goto LABEL_83;
          }
          char v54 = 0;
          unsigned int v55 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)this + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v56 = v29 + 1;
              char v57 = *(unsigned char *)(v31 + v29);
              *((void *)this + 1) = v56;
              v34 |= (unint64_t)(v57 & 0x7F) << v54;
              if (v57 < 0)
              {
                v54 += 7;
                unint64_t v29 = v56;
                BOOL v14 = v55++ > 8;
                if (v14) {
                  goto LABEL_65;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v34) = 0;
              }
            }
            break;
          }
LABEL_83:
          *(_DWORD *)(a1 + 32) = v34;
          goto LABEL_88;
        case 5u:
          *(unsigned char *)(a1 + 48) |= 8u;
          unint64_t v37 = *((void *)this + 1);
          unint64_t v38 = *((void *)this + 2);
          uint64_t v39 = *(void *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            char v40 = 0;
            unsigned int v41 = 0;
            uint64_t v42 = 0;
            do
            {
              unint64_t v43 = v37 + 1;
              *((void *)this + 1) = v37 + 1;
              char v44 = *(unsigned char *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0) {
                goto LABEL_87;
              }
              v40 += 7;
              unint64_t v37 = v43;
              BOOL v14 = v41++ > 8;
            }
            while (!v14);
LABEL_72:
            LODWORD(v42) = 0;
            goto LABEL_87;
          }
          char v58 = 0;
          unsigned int v59 = 0;
          uint64_t v42 = 0;
          if (v38 <= v37) {
            unint64_t v38 = *((void *)this + 1);
          }
          break;
        case 6u:
          *(unsigned char *)(a1 + 48) |= 0x10u;
          unint64_t v45 = *((void *)this + 1);
          if (v45 >= *((void *)this + 2))
          {
            BOOL v48 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v46 = v45 + 1;
            int v47 = *(unsigned __int8 *)(*(void *)this + v45);
            *((void *)this + 1) = v46;
            BOOL v48 = v47 != 0;
          }
          *(unsigned char *)(a1 + 44) = v48;
          goto LABEL_88;
        case 7u:
          *(unsigned char *)(a1 + 48) |= 1u;
          unint64_t v49 = *((void *)this + 1);
          if (v49 <= 0xFFFFFFFFFFFFFFF7 && v49 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 24) = *(void *)(*(void *)this + v49);
            *((void *)this + 1) += 8;
          }
          else
          {
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_88;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          goto LABEL_88;
      }
      while (1)
      {
        if (v38 == v37)
        {
          LODWORD(v42) = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_87;
        }
        unint64_t v60 = v37 + 1;
        char v61 = *(unsigned char *)(v39 + v37);
        *((void *)this + 1) = v60;
        v42 |= (unint64_t)(v61 & 0x7F) << v58;
        if ((v61 & 0x80) == 0) {
          break;
        }
        v58 += 7;
        unint64_t v37 = v60;
        BOOL v14 = v59++ > 8;
        if (v14) {
          goto LABEL_72;
        }
      }
      if (*((unsigned char *)this + 24)) {
        LODWORD(v42) = 0;
      }
LABEL_87:
      *(_DWORD *)(a1 + 40) = v42;
LABEL_88:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1902FAC20(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if (*(void *)(result + 8)) {
    uint64_t result = PB::Writer::write();
  }
  if (*(void *)(v3 + 16)) {
    uint64_t result = PB::Writer::write();
  }
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 48);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
  }
  else if ((*(unsigned char *)(v3 + 48) & 2) == 0)
  {
    goto LABEL_7;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0) {
      goto LABEL_9;
    }
LABEL_14:
    uint64_t result = PB::Writer::write(this);
    if ((*(unsigned char *)(v3 + 48) & 1) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x10) != 0) {
    goto LABEL_14;
  }
LABEL_9:
  if ((v4 & 1) == 0) {
    return result;
  }
LABEL_15:
  double v5 = *(double *)(v3 + 24);

  return PB::Writer::write(this, v5);
}

double sub_1902FAD0C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCCC78;
  *(_DWORD *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_1902FAD40(PB::Base *this)
{
  *(void *)this = &unk_1EDFCCC78;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_1902FADB4(PB::Base *a1)
{
  sub_1902FAD40(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902FADEC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  double v5 = *(float **)(a1 + 8);
  char v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "freq", v7);
  }
  uint64_t v8 = *(float **)(a1 + 32);
  char v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "mag", v10);
  }
  if (*(unsigned char *)(a1 + 64)) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1902FAEB4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)(a1 + 32);
    uint64_t v9 = a1 + 48;
    float v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        unint64_t v15 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v21 = v2 + 1;
          char v22 = *(unsigned char *)(v12 + v2);
          *((void *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_21;
          }
          v19 += 7;
          unint64_t v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            unint64_t v15 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v25 = v15 >> 3;
      if ((v15 >> 3) == 3) {
        break;
      }
      if (v25 == 2)
      {
        if (v24 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v42 = *((void *)this + 1);
          unint64_t v43 = *((void *)this + 2);
          while (v42 < v43 && !*((unsigned char *)this + 24))
          {
            unint64_t v45 = *(char **)(a1 + 16);
            unint64_t v44 = *(void *)(a1 + 24);
            if ((unint64_t)v45 >= v44)
            {
              int v47 = (char *)*v10;
              uint64_t v48 = (v45 - (unsigned char *)*v10) >> 2;
              unint64_t v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62) {
                goto LABEL_128;
              }
              uint64_t v50 = v44 - (void)v47;
              if (v50 >> 1 > v49) {
                unint64_t v49 = v50 >> 1;
              }
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v51 = v49;
              }
              if (v51)
              {
                unint64_t v52 = (char *)sub_190347D04(v11, v51);
                int v47 = *(char **)(a1 + 8);
                unint64_t v45 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v52 = 0;
              }
              char v53 = &v52[4 * v48];
              *(_DWORD *)char v53 = 0;
              unint64_t v46 = v53 + 4;
              while (v45 != v47)
              {
                int v54 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }
              *(void *)(a1 + 8) = v53;
              *(void *)(a1 + 16) = v46;
              *(void *)(a1 + 24) = &v52[4 * v51];
              if (v47) {
                operator delete(v47);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v45 = 0;
              unint64_t v46 = v45 + 4;
            }
            *(void *)(a1 + 16) = v46;
            unint64_t v55 = *((void *)this + 1);
            if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)this + 2)) {
              goto LABEL_82;
            }
            *(v46 - 1) = *(_DWORD *)(*(void *)this + v55);
            unint64_t v43 = *((void *)this + 2);
            unint64_t v42 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v42;
          }
          goto LABEL_83;
        }
        unint64_t v60 = *(char **)(a1 + 16);
        unint64_t v59 = *(void *)(a1 + 24);
        if ((unint64_t)v60 >= v59)
        {
          char v67 = (char *)*v10;
          uint64_t v68 = (v60 - (unsigned char *)*v10) >> 2;
          unint64_t v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 62) {
LABEL_128:
          }
            sub_1903479E8();
          uint64_t v70 = v59 - (void)v67;
          if (v70 >> 1 > v69) {
            unint64_t v69 = v70 >> 1;
          }
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v71 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v71 = v69;
          }
          if (v71)
          {
            unint64_t v72 = (char *)sub_190347D04(v11, v71);
            char v67 = *(char **)(a1 + 8);
            unint64_t v60 = *(char **)(a1 + 16);
          }
          else
          {
            unint64_t v72 = 0;
          }
          unint64_t v75 = &v72[4 * v68];
          *(_DWORD *)unint64_t v75 = 0;
          char v58 = v75 + 4;
          while (v60 != v67)
          {
            int v76 = *((_DWORD *)v60 - 1);
            v60 -= 4;
            *((_DWORD *)v75 - 1) = v76;
            v75 -= 4;
          }
          *(void *)(a1 + 8) = v75;
          *(void *)(a1 + 16) = v58;
          *(void *)(a1 + 24) = &v72[4 * v71];
          if (v67) {
            operator delete(v67);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v60 = 0;
          char v58 = v60 + 4;
        }
        *(void *)(a1 + 16) = v58;
LABEL_114:
        unint64_t v77 = *((void *)this + 1);
        if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((void *)this + 2))
        {
LABEL_116:
          *((unsigned char *)this + 24) = 1;
          goto LABEL_119;
        }
        *(v58 - 1) = *(_DWORD *)(*(void *)this + v77);
        uint64_t v27 = *((void *)this + 1) + 4;
        goto LABEL_118;
      }
      if (v25 == 1)
      {
        *(unsigned char *)(a1 + 64) |= 1u;
        unint64_t v26 = *((void *)this + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)this + 2)) {
          goto LABEL_116;
        }
        *(void *)(a1 + 56) = *(void *)(*(void *)this + v26);
        uint64_t v27 = *((void *)this + 1) + 8;
LABEL_118:
        *((void *)this + 1) = v27;
        goto LABEL_119;
      }
      if ((PB::Reader::skip(this) & 1) == 0) {
        return 0;
      }
LABEL_119:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    if (v24 == 2)
    {
      if (PB::Reader::placeMark()) {
        return 0;
      }
      unint64_t v28 = *((void *)this + 1);
      unint64_t v29 = *((void *)this + 2);
      while (v28 < v29 && !*((unsigned char *)this + 24))
      {
        uint64_t v31 = *(char **)(a1 + 40);
        unint64_t v30 = *(void *)(a1 + 48);
        if ((unint64_t)v31 >= v30)
        {
          unsigned int v33 = (char *)*v8;
          uint64_t v34 = (v31 - (unsigned char *)*v8) >> 2;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62) {
            goto LABEL_127;
          }
          uint64_t v36 = v30 - (void)v33;
          if (v36 >> 1 > v35) {
            unint64_t v35 = v36 >> 1;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v35;
          }
          if (v37)
          {
            unint64_t v38 = (char *)sub_190347D04(v9, v37);
            unsigned int v33 = *(char **)(a1 + 32);
            uint64_t v31 = *(char **)(a1 + 40);
          }
          else
          {
            unint64_t v38 = 0;
          }
          uint64_t v39 = &v38[4 * v34];
          *(_DWORD *)uint64_t v39 = 0;
          char v32 = v39 + 4;
          while (v31 != v33)
          {
            int v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          *(void *)(a1 + 32) = v39;
          *(void *)(a1 + 40) = v32;
          *(void *)(a1 + 48) = &v38[4 * v37];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v31 = 0;
          char v32 = v31 + 4;
        }
        *(void *)(a1 + 40) = v32;
        unint64_t v41 = *((void *)this + 1);
        if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)this + 2))
        {
LABEL_82:
          *((unsigned char *)this + 24) = 1;
          break;
        }
        *(v32 - 1) = *(_DWORD *)(*(void *)this + v41);
        unint64_t v29 = *((void *)this + 2);
        unint64_t v28 = *((void *)this + 1) + 4;
        *((void *)this + 1) = v28;
      }
LABEL_83:
      PB::Reader::recallMark();
      goto LABEL_119;
    }
    char v57 = *(char **)(a1 + 40);
    unint64_t v56 = *(void *)(a1 + 48);
    if ((unint64_t)v57 >= v56)
    {
      char v61 = (char *)*v8;
      uint64_t v62 = (v57 - (unsigned char *)*v8) >> 2;
      unint64_t v63 = v62 + 1;
      if ((unint64_t)(v62 + 1) >> 62) {
LABEL_127:
      }
        sub_1903479E8();
      uint64_t v64 = v56 - (void)v61;
      if (v64 >> 1 > v63) {
        unint64_t v63 = v64 >> 1;
      }
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v65 = v63;
      }
      if (v65)
      {
        char v66 = (char *)sub_190347D04(v9, v65);
        char v61 = *(char **)(a1 + 32);
        char v57 = *(char **)(a1 + 40);
      }
      else
      {
        char v66 = 0;
      }
      unint64_t v73 = &v66[4 * v62];
      *(_DWORD *)unint64_t v73 = 0;
      char v58 = v73 + 4;
      while (v57 != v61)
      {
        int v74 = *((_DWORD *)v57 - 1);
        v57 -= 4;
        *((_DWORD *)v73 - 1) = v74;
        v73 -= 4;
      }
      *(void *)(a1 + 32) = v73;
      *(void *)(a1 + 40) = v58;
      *(void *)(a1 + 48) = &v66[4 * v65];
      if (v61) {
        operator delete(v61);
      }
    }
    else
    {
      *(_DWORD *)char v57 = 0;
      char v58 = v57 + 4;
    }
    *(void *)(a1 + 40) = v58;
    goto LABEL_114;
  }
  return v4 == 0;
}

uint64_t sub_1902FB430(uint64_t result, PB::Writer *this)
{
  unint64_t v3 = (void *)result;
  if (*(unsigned char *)(result + 64)) {
    double result = PB::Writer::write(this, *(double *)(result + 56));
  }
  int v4 = (float *)v3[1];
  double v5 = (float *)v3[2];
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6);
  }
  uint64_t v8 = (float *)v3[4];
  float v7 = (float *)v3[5];
  while (v8 != v7)
  {
    float v9 = *v8++;
    double result = PB::Writer::write(this, v9);
  }
  return result;
}

void *sub_1902FB4B4(void *result)
{
  *double result = &unk_1EDFCF528;
  result[1] = 0;
  return result;
}

void sub_1902FB4D4(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCF528;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1902FB554(PB::Base *a1)
{
  sub_1902FB4D4(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902FB58C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1902FB608(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1902FB804(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

uint64_t sub_1902FB820(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCC6C8;
  *(_DWORD *)(result + 100) = 0;
  return result;
}

void sub_1902FB848(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902FB880(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "asymmetryProbabilityEstimate", *(float *)(a1 + 40));
    int v5 = *(_DWORD *)(a1 + 100);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "cadence", *(float *)(a1 + 44));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "doubleSupportEstimate", *(float *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "horizontalRotationRateMax", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "impulseMagnitude", *(float *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "impulseStartTime");
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x20000) == 0)
  {
LABEL_8:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "isCadenceConcordant");
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x40000) == 0)
  {
LABEL_9:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "isFeasibleWalkingSpeed");
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x80000) == 0)
  {
LABEL_10:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "isNotRunning");
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x100000) == 0)
  {
LABEL_11:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "isPendular");
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x200000) == 0)
  {
LABEL_12:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "isSufficientVerticalTwist");
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x400000) == 0)
  {
LABEL_13:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "isSwingStanceCycle");
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x800000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "isValid");
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "loftEndTime");
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x200) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "loftMagnitude", *(float *)(a1 + 60));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 4) == 0)
  {
LABEL_17:
    if ((v5 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "loftStartTime");
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x400) == 0)
  {
LABEL_18:
    if ((v5 & 8) == 0) {
      goto LABEL_19;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "pendulumResidual", *(float *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 8) == 0)
  {
LABEL_19:
    if ((v5 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "previousImpulseStartTime");
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x800) == 0)
  {
LABEL_20:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "rawLoftSpeed", *(float *)(a1 + 68));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x1000) == 0)
  {
LABEL_21:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "sqrtMaxAbsLoftAccel", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x2000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "stanceProbability", *(float *)(a1 + 76));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "stepLengthEstimate", *(float *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x8000) == 0)
  {
LABEL_24:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
LABEL_51:
  PB::TextFormatter::format(this, "verticalRotationRateMean", *(float *)(a1 + 84));
  if ((*(_DWORD *)(a1 + 100) & 0x10000) != 0) {
LABEL_25:
  }
    PB::TextFormatter::format(this, "walkSpeedEstimate", *(float *)(a1 + 88));
LABEL_26:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1902FBBC4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 100) |= 1u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_153;
                  }
                  unint64_t v61 = v20++;
                  char v62 = *(unsigned char *)(v21 + v61);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_152;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_152:
                unint64_t v2 = v61 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_153;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_153:
              *(void *)(a1 + 8) = v24;
              goto LABEL_169;
            case 2u:
              *(_DWORD *)(a1 + 100) |= 4u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_158;
                  }
                  unint64_t v65 = v27++;
                  char v66 = *(unsigned char *)(v28 + v65);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_157:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_158;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_157;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_158;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_158:
              *(void *)(a1 + 24) = v31;
              goto LABEL_169;
            case 3u:
              *(_DWORD *)(a1 + 100) |= 2u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    uint64_t v37 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_163;
                  }
                  unint64_t v69 = v33++;
                  char v70 = *(unsigned char *)(v34 + v69);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    uint64_t v37 = 0;
LABEL_162:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_163;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v37 = 0;
                }
                goto LABEL_162;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_163;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              uint64_t v37 = 0;
LABEL_163:
              *(void *)(a1 + 16) = v37;
              goto LABEL_169;
            case 4u:
              *(_DWORD *)(a1 + 100) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 5u:
              *(_DWORD *)(a1 + 100) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 6u:
              *(_DWORD *)(a1 + 100) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 7u:
              *(_DWORD *)(a1 + 100) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 8u:
              *(_DWORD *)(a1 + 100) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 9u:
              *(_DWORD *)(a1 + 100) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 0xAu:
              *(_DWORD *)(a1 + 100) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 0xBu:
              *(_DWORD *)(a1 + 100) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 0xCu:
              *(_DWORD *)(a1 + 100) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 0xDu:
              *(_DWORD *)(a1 + 100) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 0xEu:
              *(_DWORD *)(a1 + 100) |= 0x800000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v40 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v39 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v40 = v39 != 0;
              }
              *(unsigned char *)(a1 + 98) = v40;
              goto LABEL_169;
            case 0xFu:
              *(_DWORD *)(a1 + 100) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 0x10u:
              *(_DWORD *)(a1 + 100) |= 0x400000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v42 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v41 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v42 = v41 != 0;
              }
              *(unsigned char *)(a1 + 97) = v42;
              goto LABEL_169;
            case 0x11u:
              *(_DWORD *)(a1 + 100) |= 0x80000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v44 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v43 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v44 = v43 != 0;
              }
              *(unsigned char *)(a1 + 94) = v44;
              goto LABEL_169;
            case 0x12u:
              *(_DWORD *)(a1 + 100) |= 0x40000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v46 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v45 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v46 = v45 != 0;
              }
              *(unsigned char *)(a1 + 93) = v46;
              goto LABEL_169;
            case 0x13u:
              *(_DWORD *)(a1 + 100) |= 0x100000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v48 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v47 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v48 = v47 != 0;
              }
              *(unsigned char *)(a1 + 95) = v48;
              goto LABEL_169;
            case 0x14u:
              *(_DWORD *)(a1 + 100) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 0x15u:
              *(_DWORD *)(a1 + 100) |= 0x200000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v50 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v49 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v50 = v49 != 0;
              }
              *(unsigned char *)(a1 + 96) = v50;
              goto LABEL_169;
            case 0x16u:
              *(_DWORD *)(a1 + 100) |= 0x20000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v52 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v51 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v52 = v51 != 0;
              }
              *(unsigned char *)(a1 + 92) = v52;
              goto LABEL_169;
            case 0x17u:
              *(_DWORD *)(a1 + 100) |= 8u;
              unint64_t v53 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v54 = *(void *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                char v71 = 0;
                unsigned int v72 = 0;
                uint64_t v57 = 0;
                if (v2 <= v53) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v53)
                  {
                    uint64_t v57 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_168;
                  }
                  unint64_t v73 = v53++;
                  char v74 = *(unsigned char *)(v54 + v73);
                  *((void *)this + 1) = v53;
                  v57 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  BOOL v14 = v72++ > 8;
                  if (v14)
                  {
                    uint64_t v57 = 0;
LABEL_167:
                    unint64_t v2 = v73 + 1;
                    goto LABEL_168;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v57 = 0;
                }
                goto LABEL_167;
              }
              char v55 = 0;
              unsigned int v56 = 0;
              uint64_t v57 = 0;
              do
              {
                unint64_t v2 = v53 + 1;
                *((void *)this + 1) = v53 + 1;
                char v58 = *(unsigned char *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0) {
                  goto LABEL_168;
                }
                v55 += 7;
                unint64_t v53 = v2;
                BOOL v14 = v56++ > 8;
              }
              while (!v14);
              uint64_t v57 = 0;
LABEL_168:
              *(void *)(a1 + 32) = v57;
LABEL_169:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x18u:
              *(_DWORD *)(a1 + 100) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
LABEL_148:
                unint64_t v2 = *((void *)this + 1) + 4;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_104:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_169;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_169;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1902FC610(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 100);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    int v4 = *(_DWORD *)(v3 + 100);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_28;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x8000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x800000) == 0)
  {
LABEL_15:
    if ((v4 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x800) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x80000) == 0)
  {
LABEL_18:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x100000) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x200000) == 0)
  {
LABEL_22:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20000) == 0)
  {
LABEL_23:
    if ((v4 & 8) == 0) {
      goto LABEL_24;
    }
LABEL_48:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(_DWORD *)(v3 + 100) & 0x1000) == 0) {
      return result;
    }
    goto LABEL_49;
  }
LABEL_47:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 8) != 0) {
    goto LABEL_48;
  }
LABEL_24:
  if ((v4 & 0x1000) == 0) {
    return result;
  }
LABEL_49:
  float v5 = *(float *)(v3 + 72);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1902FC8E8(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCEF08;
  *(_DWORD *)(result + 116) = 0;
  return result;
}

void sub_1902FC910(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902FC948(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 116);
  if (v5)
  {
    PB::TextFormatter::format(this, "curImpulseStartTime");
    int v5 = *(_DWORD *)(a1 + 116);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "curLoftEndTime");
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "curLoftStartTime");
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "currentCadence", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "currentHorzRotRateMax", *(float *)(a1 + 76));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "currentImpulseMagnitude", *(float *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "currentLoftMagnitude", *(float *)(a1 + 84));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "currentMax", *(float *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "currentMin", *(float *)(a1 + 92));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "currentWalkSpeedEstimate", *(float *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x40000) == 0)
  {
LABEL_12:
    if ((v5 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "firstLoft");
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_13:
    if ((v5 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "impulseStartTimeWalkingSpeed");
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x10) == 0)
  {
LABEL_14:
    if ((v5 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "impulseStopTimeWalkingSpeed");
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20) == 0)
  {
LABEL_15:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "lastZeroTime");
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "loftEndDetected");
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100000) == 0)
  {
LABEL_17:
    if ((v5 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "loftStartDetected");
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x40) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "prevLoftStartTime");
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "previousHorzRotRateMax", *(float *)(a1 + 100));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "previousMax", *(float *)(a1 + 104));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_47:
  PB::TextFormatter::format(this, "vertRotationRateMean", *(float *)(a1 + 108));
  if ((*(_DWORD *)(a1 + 116) & 0x200000) != 0) {
LABEL_23:
  }
    PB::TextFormatter::format(this, "waitingToConfirmLoft");
LABEL_24:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1902FCC4C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 116) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_173;
            case 2u:
              *(_DWORD *)(a1 + 116) |= 0x100000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *(unsigned char *)(a1 + 114) = v22;
              goto LABEL_209;
            case 3u:
              *(_DWORD *)(a1 + 116) |= 0x80000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v24 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v23 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v24 = v23 != 0;
              }
              *(unsigned char *)(a1 + 113) = v24;
              goto LABEL_209;
            case 4u:
              *(_DWORD *)(a1 + 116) |= 0x200000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v26 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v25 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v26 = v25 != 0;
              }
              *(unsigned char *)(a1 + 115) = v26;
              goto LABEL_209;
            case 5u:
              *(_DWORD *)(a1 + 116) |= 0x40000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 112) = v28;
              goto LABEL_209;
            case 6u:
              *(_DWORD *)(a1 + 116) |= 4u;
              unint64_t v29 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v30 = *(void *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                char v71 = 0;
                unsigned int v72 = 0;
                uint64_t v33 = 0;
                if (v2 <= v29) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    uint64_t v33 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_178;
                  }
                  unint64_t v73 = v29++;
                  char v74 = *(unsigned char *)(v30 + v73);
                  *((void *)this + 1) = v29;
                  v33 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  BOOL v14 = v72++ > 8;
                  if (v14)
                  {
                    uint64_t v33 = 0;
LABEL_177:
                    unint64_t v2 = v73 + 1;
                    goto LABEL_178;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v33 = 0;
                }
                goto LABEL_177;
              }
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v33 = 0;
              do
              {
                unint64_t v2 = v29 + 1;
                *((void *)this + 1) = v29 + 1;
                char v34 = *(unsigned char *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_178;
                }
                v31 += 7;
                unint64_t v29 = v2;
                BOOL v14 = v32++ > 8;
              }
              while (!v14);
              uint64_t v33 = 0;
LABEL_178:
              *(void *)(a1 + 24) = v33;
              goto LABEL_209;
            case 7u:
              *(_DWORD *)(a1 + 116) |= 2u;
              unint64_t v35 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v36 = *(void *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v75 = 0;
                unsigned int v76 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    uint64_t v39 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_183;
                  }
                  unint64_t v77 = v35++;
                  char v78 = *(unsigned char *)(v36 + v77);
                  *((void *)this + 1) = v35;
                  v39 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  BOOL v14 = v76++ > 8;
                  if (v14)
                  {
                    uint64_t v39 = 0;
LABEL_182:
                    unint64_t v2 = v77 + 1;
                    goto LABEL_183;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v39 = 0;
                }
                goto LABEL_182;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v2 = v35 + 1;
                *((void *)this + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_183;
                }
                v37 += 7;
                unint64_t v35 = v2;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              uint64_t v39 = 0;
LABEL_183:
              *(void *)(a1 + 16) = v39;
              goto LABEL_209;
            case 8u:
              *(_DWORD *)(a1 + 116) |= 1u;
              unint64_t v41 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v79 = 0;
                unsigned int v80 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    uint64_t v45 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_188;
                  }
                  unint64_t v81 = v41++;
                  char v82 = *(unsigned char *)(v42 + v81);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  BOOL v14 = v80++ > 8;
                  if (v14)
                  {
                    uint64_t v45 = 0;
LABEL_187:
                    unint64_t v2 = v81 + 1;
                    goto LABEL_188;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v45 = 0;
                }
                goto LABEL_187;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_188;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              uint64_t v45 = 0;
LABEL_188:
              *(void *)(a1 + 8) = v45;
              goto LABEL_209;
            case 9u:
              *(_DWORD *)(a1 + 116) |= 0x20u;
              unint64_t v47 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v48 = *(void *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                char v83 = 0;
                unsigned int v84 = 0;
                uint64_t v51 = 0;
                if (v2 <= v47) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v47)
                  {
                    uint64_t v51 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_193;
                  }
                  unint64_t v85 = v47++;
                  char v86 = *(unsigned char *)(v48 + v85);
                  *((void *)this + 1) = v47;
                  v51 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0) {
                    break;
                  }
                  v83 += 7;
                  BOOL v14 = v84++ > 8;
                  if (v14)
                  {
                    uint64_t v51 = 0;
LABEL_192:
                    unint64_t v2 = v85 + 1;
                    goto LABEL_193;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v51 = 0;
                }
                goto LABEL_192;
              }
              char v49 = 0;
              unsigned int v50 = 0;
              uint64_t v51 = 0;
              do
              {
                unint64_t v2 = v47 + 1;
                *((void *)this + 1) = v47 + 1;
                char v52 = *(unsigned char *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0) {
                  goto LABEL_193;
                }
                v49 += 7;
                unint64_t v47 = v2;
                BOOL v14 = v50++ > 8;
              }
              while (!v14);
              uint64_t v51 = 0;
LABEL_193:
              *(void *)(a1 + 48) = v51;
              goto LABEL_209;
            case 0xAu:
              *(_DWORD *)(a1 + 116) |= 0x40u;
              unint64_t v53 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v54 = *(void *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                char v87 = 0;
                unsigned int v88 = 0;
                uint64_t v57 = 0;
                if (v2 <= v53) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v53)
                  {
                    uint64_t v57 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_198;
                  }
                  unint64_t v89 = v53++;
                  char v90 = *(unsigned char *)(v54 + v89);
                  *((void *)this + 1) = v53;
                  v57 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0) {
                    break;
                  }
                  v87 += 7;
                  BOOL v14 = v88++ > 8;
                  if (v14)
                  {
                    uint64_t v57 = 0;
LABEL_197:
                    unint64_t v2 = v89 + 1;
                    goto LABEL_198;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v57 = 0;
                }
                goto LABEL_197;
              }
              char v55 = 0;
              unsigned int v56 = 0;
              uint64_t v57 = 0;
              do
              {
                unint64_t v2 = v53 + 1;
                *((void *)this + 1) = v53 + 1;
                char v58 = *(unsigned char *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0) {
                  goto LABEL_198;
                }
                v55 += 7;
                unint64_t v53 = v2;
                BOOL v14 = v56++ > 8;
              }
              while (!v14);
              uint64_t v57 = 0;
LABEL_198:
              *(void *)(a1 + 56) = v57;
              goto LABEL_209;
            case 0xBu:
              *(_DWORD *)(a1 + 116) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0xCu:
              *(_DWORD *)(a1 + 116) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0xDu:
              *(_DWORD *)(a1 + 116) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0xEu:
              *(_DWORD *)(a1 + 116) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0xFu:
              *(_DWORD *)(a1 + 116) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0x10u:
              *(_DWORD *)(a1 + 116) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0x11u:
              *(_DWORD *)(a1 + 116) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0x12u:
              *(_DWORD *)(a1 + 116) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0x13u:
              *(_DWORD *)(a1 + 116) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0x14u:
              *(_DWORD *)(a1 + 116) |= 0x20000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v2);
LABEL_172:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_173:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_99:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_209;
            case 0x15u:
              *(_DWORD *)(a1 + 116) |= 8u;
              unint64_t v59 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v60 = *(void *)this;
              if (v59 > 0xFFFFFFFFFFFFFFF5 || v59 + 10 > v2)
              {
                char v91 = 0;
                unsigned int v92 = 0;
                uint64_t v63 = 0;
                if (v2 <= v59) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v59)
                  {
                    uint64_t v63 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_203;
                  }
                  unint64_t v93 = v59++;
                  char v94 = *(unsigned char *)(v60 + v93);
                  *((void *)this + 1) = v59;
                  v63 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0) {
                    break;
                  }
                  v91 += 7;
                  BOOL v14 = v92++ > 8;
                  if (v14)
                  {
                    uint64_t v63 = 0;
LABEL_202:
                    unint64_t v2 = v93 + 1;
                    goto LABEL_203;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v63 = 0;
                }
                goto LABEL_202;
              }
              char v61 = 0;
              unsigned int v62 = 0;
              uint64_t v63 = 0;
              do
              {
                unint64_t v2 = v59 + 1;
                *((void *)this + 1) = v59 + 1;
                char v64 = *(unsigned char *)(v60 + v59);
                v63 |= (unint64_t)(v64 & 0x7F) << v61;
                if ((v64 & 0x80) == 0) {
                  goto LABEL_203;
                }
                v61 += 7;
                unint64_t v59 = v2;
                BOOL v14 = v62++ > 8;
              }
              while (!v14);
              uint64_t v63 = 0;
LABEL_203:
              *(void *)(a1 + 32) = v63;
              goto LABEL_209;
            case 0x16u:
              *(_DWORD *)(a1 + 116) |= 0x10u;
              unint64_t v65 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v66 = *(void *)this;
              if (v65 > 0xFFFFFFFFFFFFFFF5 || v65 + 10 > v2)
              {
                char v95 = 0;
                unsigned int v96 = 0;
                uint64_t v69 = 0;
                if (v2 <= v65) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v65)
                  {
                    uint64_t v69 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_208;
                  }
                  unint64_t v97 = v65++;
                  char v98 = *(unsigned char *)(v66 + v97);
                  *((void *)this + 1) = v65;
                  v69 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0) {
                    break;
                  }
                  v95 += 7;
                  BOOL v14 = v96++ > 8;
                  if (v14)
                  {
                    uint64_t v69 = 0;
LABEL_207:
                    unint64_t v2 = v97 + 1;
                    goto LABEL_208;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v69 = 0;
                }
                goto LABEL_207;
              }
              char v67 = 0;
              unsigned int v68 = 0;
              uint64_t v69 = 0;
              do
              {
                unint64_t v2 = v65 + 1;
                *((void *)this + 1) = v65 + 1;
                char v70 = *(unsigned char *)(v66 + v65);
                v69 |= (unint64_t)(v70 & 0x7F) << v67;
                if ((v70 & 0x80) == 0) {
                  goto LABEL_208;
                }
                v67 += 7;
                unint64_t v65 = v2;
                BOOL v14 = v68++ > 8;
              }
              while (!v14);
              uint64_t v69 = 0;
LABEL_208:
              *(void *)(a1 + 40) = v69;
LABEL_209:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_209;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1902FD820(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 116);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 64));
    int v4 = *(_DWORD *)(v3 + 116);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40000) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000) == 0)
  {
LABEL_12:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10000) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_16:
    if ((v4 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_17:
    if ((v4 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0) {
      goto LABEL_22;
    }
LABEL_44:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(_DWORD *)(v3 + 116) & 0x10) == 0) {
      return result;
    }
    goto LABEL_45;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 8) != 0) {
    goto LABEL_44;
  }
LABEL_22:
  if ((v4 & 0x10) == 0) {
    return result;
  }
LABEL_45:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_1902FDAC0(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCD1B8;
  *(_DWORD *)(result + 76) = 0;
  return result;
}

void sub_1902FDAE8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902FDB20(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 76);
  if (v5)
  {
    PB::TextFormatter::format(this, "emptyField2", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 76);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(a1 + 76) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "emptyField3");
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "groundContactTime", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "hasValidGroundContactTime");
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "leftGroundContactTime", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "leftGroundContactTimePercentage", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "rightGroundContactTime", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "rightGroundContactTimePercentage", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(this, "windowEndTime", *(double *)(a1 + 56));
  if ((*(_WORD *)(a1 + 76) & 0x80) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(this, "windowStartTime", *(double *)(a1 + 64));
LABEL_12:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1902FDCA4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 76) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_57;
        case 2u:
          *(_WORD *)(a1 + 76) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_57;
        case 3u:
          *(_WORD *)(a1 + 76) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_57;
        case 4u:
          *(_WORD *)(a1 + 76) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_57;
        case 5u:
          *(_WORD *)(a1 + 76) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_57;
        case 6u:
          *(_WORD *)(a1 + 76) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
          goto LABEL_57;
        case 7u:
          *(_WORD *)(a1 + 76) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
          goto LABEL_57;
        case 8u:
          *(_WORD *)(a1 + 76) |= 0x200u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v21 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v20 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v21 = v20 != 0;
          }
          *(unsigned char *)(a1 + 73) = v21;
          break;
        case 9u:
          *(_WORD *)(a1 + 76) |= 0x100u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v24 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v23 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v24 = v23 != 0;
          }
          *(unsigned char *)(a1 + 72) = v24;
          break;
        case 0xAu:
          *(_WORD *)(a1 + 76) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
          {
LABEL_49:
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_57:
            unint64_t v2 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1902FE09C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 76);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24));
    __int16 v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    uint64_t result = PB::Writer::write(this);
    if ((*(_WORD *)(v3 + 76) & 2) == 0) {
      return result;
    }
    goto LABEL_21;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x100) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_21:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1902FE1EC(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCDFB8;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void sub_1902FE214(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902FE24C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x100) != 0)
  {
    PB::TextFormatter::format(this, "crownOrientation");
    __int16 v5 = *(_WORD *)(a1 + 88);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "groundContactTime", *(double *)(a1 + 8));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "initialContactTime", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x800) == 0)
  {
LABEL_5:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "isSuccessful");
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x1000) == 0)
  {
LABEL_6:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "isValidSide");
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x2000) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "isValidToeOff");
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 4) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "meanRotationZ", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "relativeInitialContactTime", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "relativeToeOffTime", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "stepSide");
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x20) == 0)
  {
LABEL_12:
    if ((v5 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "toeOffTime", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x40) == 0)
  {
LABEL_13:
    if ((v5 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "windowEndTime", *(double *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x80) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_31:
  PB::TextFormatter::format(this, "windowStartTime", *(double *)(a1 + 64));
  if ((*(_WORD *)(a1 + 88) & 0x400) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(this, "wristOrientation");
LABEL_16:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1902FE450(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 88) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v21 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v20 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v21 = v20 != 0;
              }
              *(unsigned char *)(a1 + 84) = v21;
              goto LABEL_119;
            case 2u:
              *(_WORD *)(a1 + 88) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 3u:
              *(_WORD *)(a1 + 88) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 4u:
              *(_WORD *)(a1 + 88) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 5u:
              *(_WORD *)(a1 + 88) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 6u:
              *(_WORD *)(a1 + 88) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 7u:
              *(_WORD *)(a1 + 88) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 8u:
              *(_WORD *)(a1 + 88) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 9u:
              *(_WORD *)(a1 + 88) |= 0x200u;
              unint64_t v23 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_108;
                  }
                  unint64_t v47 = v23++;
                  char v48 = *(unsigned char *)(v24 + v47);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  BOOL v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_107:
                    unint64_t v2 = v47 + 1;
                    goto LABEL_108;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_107;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_108;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_108:
              *(_DWORD *)(a1 + 76) = v27;
              goto LABEL_119;
            case 0xAu:
              *(_WORD *)(a1 + 88) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *(unsigned char *)(a1 + 85) = v30;
              goto LABEL_119;
            case 0xBu:
              *(_WORD *)(a1 + 88) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v32 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v31 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v32 = v31 != 0;
              }
              *(unsigned char *)(a1 + 86) = v32;
              goto LABEL_119;
            case 0xCu:
              *(_WORD *)(a1 + 88) |= 0x400u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_113;
                  }
                  unint64_t v51 = v33++;
                  char v52 = *(unsigned char *)(v34 + v51);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_112:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_113;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_112;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_113;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_113:
              *(_DWORD *)(a1 + 80) = v37;
              goto LABEL_119;
            case 0xDu:
              *(_WORD *)(a1 + 88) |= 0x100u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_118;
                  }
                  unint64_t v55 = v39++;
                  char v56 = *(unsigned char *)(v40 + v55);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_117:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_118;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_117;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_118;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_118:
              *(_DWORD *)(a1 + 72) = v43;
LABEL_119:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xEu:
              *(_WORD *)(a1 + 88) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_103:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_74:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_119;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_119;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1902FEB60(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 88);
  if ((v4 & 0x800) != 0)
  {
    uint64_t result = PB::Writer::write(this);
    __int16 v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x2000) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x100) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(_WORD *)(v3 + 88) & 4) == 0) {
      return result;
    }
    goto LABEL_29;
  }
LABEL_27:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  if ((v4 & 4) == 0) {
    return result;
  }
LABEL_29:
  double v5 = *(double *)(v3 + 24);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1902FED20(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCF2F8;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_1902FED48(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902FED80(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 48);
  if (v5)
  {
    PB::TextFormatter::format(this, "groundContactTime", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*(unsigned char *)(a1 + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "initialContactTime", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "isSuccessful");
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "stepSide");
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(this, "toeOffTime", *(double *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 48) & 8) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "windowStartTime", *(double *)(a1 + 32));
LABEL_8:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1902FEE84(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 48) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v21 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v20 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v21 = v20 != 0;
              }
              *(unsigned char *)(a1 + 44) = v21;
              goto LABEL_61;
            case 2u:
              *(unsigned char *)(a1 + 48) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_55;
            case 3u:
              *(unsigned char *)(a1 + 48) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_55;
            case 4u:
              *(unsigned char *)(a1 + 48) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_55;
            case 5u:
              *(unsigned char *)(a1 + 48) |= 0x10u;
              unint64_t v23 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_60;
                  }
                  unint64_t v31 = v23++;
                  char v32 = *(unsigned char *)(v24 + v31);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_59:
                    unint64_t v2 = v31 + 1;
                    goto LABEL_60;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_59;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_60;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_60:
              *(_DWORD *)(a1 + 40) = v27;
LABEL_61:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 6u:
              *(unsigned char *)(a1 + 48) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
LABEL_55:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_44:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_61;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_61;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1902FF234(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 48);
  if ((v4 & 0x20) != 0)
  {
    uint64_t result = PB::Writer::write(this);
    char v4 = *(unsigned char *)(v3 + 48);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(result + 48) & 1) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(unsigned char *)(v3 + 48) & 8) == 0) {
      return result;
    }
    goto LABEL_13;
  }
LABEL_11:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x10) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_13:
  double v5 = *(double *)(v3 + 32);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1902FF314(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCC2D8;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_1902FF33C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902FF374(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 52);
  if (v5)
  {
    PB::TextFormatter::format(this, "altitude", *(float *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "decimalYear", *(float *)(a1 + 12));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "declination", *(float *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "horizontal", *(float *)(a1 + 20));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "inclination", *(float *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "latitude", *(float *)(a1 + 28));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "longitude", *(float *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "magnitude", *(float *)(a1 + 36));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(this, "y", *(float *)(a1 + 44));
  if ((*(_WORD *)(a1 + 52) & 0x400) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 48));
LABEL_13:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1902FF518(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 52) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 2u:
          *(_WORD *)(a1 + 52) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 3u:
          *(_WORD *)(a1 + 52) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 4u:
          *(_WORD *)(a1 + 52) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 5u:
          *(_WORD *)(a1 + 52) |= 0x100u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 6u:
          *(_WORD *)(a1 + 52) |= 0x200u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 7u:
          *(_WORD *)(a1 + 52) |= 0x400u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 8u:
          *(_WORD *)(a1 + 52) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 9u:
          *(_WORD *)(a1 + 52) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 0xAu:
          *(_WORD *)(a1 + 52) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 0xBu:
          *(_WORD *)(a1 + 52) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
LABEL_58:
            unint64_t v2 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_54:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1902FF934(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 52);
  if ((v4 & 0x20) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 28));
    __int16 v4 = *(_WORD *)(v3 + 52);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 12));
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
    if ((*(_WORD *)(v3 + 52) & 0x10) == 0) {
      return result;
    }
    goto LABEL_23;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 4) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x10) == 0) {
    return result;
  }
LABEL_23:
  float v5 = *(float *)(v3 + 24);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1902FFAA0(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCF758;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1902FFACC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1902FFB04(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "measSource");
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "state");
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "stateProbability", *(double *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
LABEL_6:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1902FFBC8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 32) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_43;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_59;
            case 2u:
              *(unsigned char *)(a1 + 32) |= 8u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_64;
                  }
                  unint64_t v35 = v21++;
                  char v36 = *(unsigned char *)(v22 + v35);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  BOOL v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_63:
                    unint64_t v2 = v35 + 1;
                    goto LABEL_64;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_63;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_64;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_64:
              *(_DWORD *)(a1 + 28) = v25;
              goto LABEL_70;
            case 3u:
              *(unsigned char *)(a1 + 32) |= 4u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_69;
                  }
                  unint64_t v39 = v27++;
                  char v40 = *(unsigned char *)(v28 + v39);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_68:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_69;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_68;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_69;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_69:
              *(_DWORD *)(a1 + 24) = v31;
LABEL_70:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 4u:
              *(unsigned char *)(a1 + 32) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_59:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_43:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_70;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_70;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1902FFFA8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::writeVarInt(this);
      if ((*(unsigned char *)(v3 + 32) & 1) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 1) == 0) {
    return result;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(this, v5);
}

double sub_190300050(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCDFF0;
  *(_DWORD *)(a1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = 0;
  return result;
}

void sub_190300098(void **a1)
{
  *a1 = &unk_1EDFCDFF0;
  unint64_t v2 = a1 + 3;
  uint64_t v3 = a1 + 15;
  sub_190347828(&v3);
  uint64_t v3 = a1 + 12;
  sub_190347828(&v3);
  uint64_t v3 = a1 + 9;
  sub_190347828(&v3);
  uint64_t v3 = a1 + 6;
  sub_190347828(&v3);
  uint64_t v3 = v2;
  sub_190347828(&v3);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_190300138(void **a1)
{
  sub_190300098(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190300170(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 152);
  if (v5)
  {
    PB::TextFormatter::format(this, "lifespan", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 152);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "machTime", *(double *)(a1 + 16));
  }
  float v6 = *(uint64_t **)(a1 + 24);
  uint64_t v7 = *(uint64_t **)(a1 + 32);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, this, "satInfoBeidou");
  }
  char v9 = *(uint64_t **)(a1 + 48);
  unsigned int v10 = *(uint64_t **)(a1 + 56);
  while (v9 != v10)
  {
    uint64_t v11 = *v9++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32))(v11, this, "satInfoGalileo");
  }
  unint64_t v12 = *(uint64_t **)(a1 + 72);
  char v13 = *(uint64_t **)(a1 + 80);
  while (v12 != v13)
  {
    uint64_t v14 = *v12++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v14 + 32))(v14, this, "satInfoGlonass");
  }
  char v15 = *(uint64_t **)(a1 + 96);
  unsigned int v16 = *(uint64_t **)(a1 + 104);
  while (v15 != v16)
  {
    uint64_t v17 = *v15++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v17 + 32))(v17, this, "satInfoGps");
  }
  char v18 = *(uint64_t **)(a1 + 120);
  char v19 = *(uint64_t **)(a1 + 128);
  while (v18 != v19)
  {
    uint64_t v20 = *v18++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v20 + 32))(v20, this, "satInfoQzss");
  }
  if ((*(unsigned char *)(a1 + 152) & 4) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 144));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190300394(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          if (v10++ > 8) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 152) |= 4u;
              unint64_t v20 = *((void *)this + 1);
              if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)this + 2)) {
                goto LABEL_37;
              }
              *(void *)(a1 + 144) = *(void *)(*(void *)this + v20);
              goto LABEL_39;
            case 2u:
              sub_1903006BC();
            case 3u:
              sub_1903006BC();
            case 4u:
              sub_1903006BC();
            case 5u:
              sub_1903006BC();
            case 6u:
              sub_1903006BC();
            case 7u:
              *(unsigned char *)(a1 + 152) |= 2u;
              unint64_t v23 = *((void *)this + 1);
              if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)this + 2)) {
                goto LABEL_37;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v23);
              goto LABEL_39;
            case 8u:
              *(unsigned char *)(a1 + 152) |= 1u;
              unint64_t v21 = *((void *)this + 1);
              if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)this + 2))
              {
LABEL_37:
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v21);
LABEL_39:
                *((void *)this + 1) += 8;
              }
LABEL_40:
              unint64_t v2 = *((void *)this + 1);
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((unsigned char *)this + 24)) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              goto LABEL_40;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

void sub_1903006BC()
{
}

void sub_1903007B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_190347EEC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1903007FC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(unsigned char *)(result + 152) & 4) != 0) {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 144));
  }
  int v4 = *(const PB::Base ***)(v3 + 96);
  char v5 = *(const PB::Base ***)(v3 + 104);
  while (v4 != v5)
  {
    float v6 = *v4++;
    uint64_t result = PB::Writer::writeSubmessage(this, v6);
  }
  uint64_t v7 = *(const PB::Base ***)(v3 + 72);
  uint64_t v8 = *(const PB::Base ***)(v3 + 80);
  while (v7 != v8)
  {
    char v9 = *v7++;
    uint64_t result = PB::Writer::writeSubmessage(this, v9);
  }
  unsigned int v10 = *(const PB::Base ***)(v3 + 120);
  unint64_t v11 = *(const PB::Base ***)(v3 + 128);
  while (v10 != v11)
  {
    unint64_t v12 = *v10++;
    uint64_t result = PB::Writer::writeSubmessage(this, v12);
  }
  char v13 = *(const PB::Base ***)(v3 + 48);
  uint64_t v14 = *(const PB::Base ***)(v3 + 56);
  while (v13 != v14)
  {
    char v15 = *v13++;
    uint64_t result = PB::Writer::writeSubmessage(this, v15);
  }
  unsigned int v16 = *(const PB::Base ***)(v3 + 24);
  unint64_t v17 = *(const PB::Base ***)(v3 + 32);
  while (v16 != v17)
  {
    char v18 = *v16++;
    uint64_t result = PB::Writer::writeSubmessage(this, v18);
  }
  char v19 = *(unsigned char *)(v3 + 152);
  if ((v19 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
    char v19 = *(unsigned char *)(v3 + 152);
  }
  if (v19)
  {
    double v20 = *(double *)(v3 + 8);
    return PB::Writer::write(this, v20);
  }
  return result;
}

uint64_t sub_19030092C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCD1F0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_190300954(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19030098C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "gyroMaxMean", *(float *)(a1 + 16));
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "magnitudeDiffUnity", *(float *)(a1 + 20));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "magnitudeVar", *(float *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(this, "maxAccelStdAxis", *(float *)(a1 + 28));
  if (*(unsigned char *)(a1 + 32)) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
LABEL_7:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190300A70(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 32) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          goto LABEL_41;
        case 2u:
          *(unsigned char *)(a1 + 32) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_40;
        case 3u:
          *(unsigned char *)(a1 + 32) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_40;
        case 4u:
          *(unsigned char *)(a1 + 32) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_40;
        case 5u:
          *(unsigned char *)(a1 + 32) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
LABEL_40:
            unint64_t v2 = *((void *)this + 1) + 4;
LABEL_41:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_38:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190300D2C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
    if ((*(unsigned char *)(v3 + 32) & 8) == 0) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_11:
  float v5 = *(float *)(v3 + 24);

  return PB::Writer::write(this, v5);
}

uint64_t sub_190300DF0(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCCCB0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_190300E14(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCCCB0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_190300E94(PB::Base *a1)
{
  sub_190300E14(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190300ECC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "correction");
  }
  if (*(unsigned char *)(a1 + 20)) {
    PB::TextFormatter::format(this, "isAvgGrav");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190300F64(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        if (v20 >= *((void *)this + 2))
        {
          BOOL v23 = 0;
          *((unsigned char *)this + 24) = 1;
        }
        else
        {
          unint64_t v21 = v20 + 1;
          int v22 = *(unsigned __int8 *)(*(void *)this + v20);
          *((void *)this + 1) = v21;
          BOOL v23 = v22 != 0;
        }
        *(unsigned char *)(a1 + 16) = v23;
      }
      else
      {
        if ((v11 >> 3) == 1) {
          operator new();
        }
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903011B0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 8);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4);
  }
  if (*(unsigned char *)(v3 + 20))
  {
    return PB::Writer::write(this);
  }
  return result;
}

void sub_19030121C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190301254(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "location");
    __int16 v5 = *(_WORD *)(a1 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "sampleNumMod3");
  __int16 v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "subType");
  __int16 v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  __int16 v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "triggerEnabled");
  __int16 v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "triggerOn");
  __int16 v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 28));
  __int16 v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(this, "y", *(float *)(a1 + 32));
  if ((*(_WORD *)(a1 + 44) & 0x40) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 36));
LABEL_11:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903013B8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 44) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_88;
            case 2u:
              *(_WORD *)(a1 + 44) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_87;
            case 3u:
              *(_WORD *)(a1 + 44) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_87;
            case 4u:
              *(_WORD *)(a1 + 44) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
LABEL_87:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_88:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_35:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_104;
            case 5u:
              *(_WORD *)(a1 + 44) |= 8u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v43 = 0;
                unsigned int v44 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  unint64_t v45 = v21++;
                  char v46 = *(unsigned char *)(v22 + v45);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  BOOL v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_92:
                    unint64_t v2 = v45 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_92;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_104;
            case 6u:
              *(_WORD *)(a1 + 44) |= 4u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  unint64_t v49 = v27++;
                  char v50 = *(unsigned char *)(v28 + v49);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_97:
                    unint64_t v2 = v49 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_97;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 20) = v31;
              goto LABEL_104;
            case 7u:
              *(_WORD *)(a1 + 44) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *(unsigned char *)(a1 + 40) = v34;
              goto LABEL_104;
            case 8u:
              *(_WORD *)(a1 + 44) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v36 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v35 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v36 = v35 != 0;
              }
              *(unsigned char *)(a1 + 41) = v36;
              goto LABEL_104;
            case 9u:
              *(_WORD *)(a1 + 44) |= 2u;
              unint64_t v37 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v38 = *(void *)this;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v41 = 0;
                if (v2 <= v37) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  unint64_t v53 = v37++;
                  char v54 = *(unsigned char *)(v38 + v53);
                  *((void *)this + 1) = v37;
                  v41 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_102:
                    unint64_t v2 = v53 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v41) = 0;
                }
                goto LABEL_102;
              }
              char v39 = 0;
              unsigned int v40 = 0;
              uint64_t v41 = 0;
              do
              {
                unint64_t v2 = v37 + 1;
                *((void *)this + 1) = v37 + 1;
                char v42 = *(unsigned char *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0) {
                  goto LABEL_103;
                }
                v39 += 7;
                unint64_t v37 = v2;
                BOOL v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 16) = v41;
LABEL_104:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_104;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_190301998(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 44);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    __int16 v4 = *(_WORD *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  __int16 v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  __int16 v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    uint64_t result = PB::Writer::write(this);
    if ((*(_WORD *)(v3 + 44) & 2) == 0) {
      return result;
    }
    goto LABEL_19;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x100) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_19:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_190301ACC(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCD5E0;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_190301AF4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190301B2C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 36);
  if (v5)
  {
    PB::TextFormatter::format(this, "biasX", *(float *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a1 + 36) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "biasY", *(float *)(a1 + 12));
  char v5 = *(unsigned char *)(a1 + 36);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "biasZ", *(float *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "doingBiasEstimation");
  char v5 = *(unsigned char *)(a1 + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "varianceX", *(float *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 36);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(this, "varianceY", *(float *)(a1 + 28));
  if ((*(unsigned char *)(a1 + 36) & 0x40) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "varianceZ", *(float *)(a1 + 32));
LABEL_9:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190301C50(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 36) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_41;
              }
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_57;
            case 2u:
              *(unsigned char *)(a1 + 36) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_41;
              }
              *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_57;
            case 3u:
              *(unsigned char *)(a1 + 36) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_41;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_57;
            case 4u:
              *(unsigned char *)(a1 + 36) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_41;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_57;
            case 5u:
              *(unsigned char *)(a1 + 36) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_41;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_57;
            case 6u:
              *(unsigned char *)(a1 + 36) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
LABEL_57:
                unint64_t v2 = *((void *)this + 1) + 4;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_41:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_63;
            case 7u:
              *(unsigned char *)(a1 + 36) |= 8u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_62;
                  }
                  unint64_t v29 = v21++;
                  char v30 = *(unsigned char *)(v22 + v29);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_61:
                    unint64_t v2 = v29 + 1;
                    goto LABEL_62;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_61;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_62;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_62:
              *(_DWORD *)(a1 + 20) = v25;
LABEL_63:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_63;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_190302030(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 36);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 36);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(result + 36) & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 12));
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
    if ((*(unsigned char *)(v3 + 36) & 8) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 0x40) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_15:

  return PB::Writer::writeVarInt(this);
}

double sub_19030212C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCD618;
  *(_DWORD *)(a1 + 116) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

void sub_19030216C(PB::Base *this)
{
  *(void *)this = &unk_1EDFCD618;
  unint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  char v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  char v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }

  PB::Base::~Base(this);
}

void sub_190302200(PB::Base *a1)
{
  sub_19030216C(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190302238(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(float **)(a1 + 8);
  float v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "accelVariance", v7);
  }
  if ((*(unsigned char *)(a1 + 116) & 2) != 0) {
    PB::TextFormatter::format(this, "allowRelaxedGyroMean");
  }
  uint64_t v8 = *(float **)(a1 + 32);
  char v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "gyroMean", v10);
  }
  unint64_t v11 = *(float **)(a1 + 56);
  unint64_t v12 = *(float **)(a1 + 64);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(this, "gyroVariance", v13);
  }
  if ((*(unsigned char *)(a1 + 116) & 4) != 0) {
    PB::TextFormatter::format(this, "stillOnAll");
  }
  BOOL v14 = *(float **)(a1 + 80);
  char v15 = *(float **)(a1 + 88);
  while (v14 != v15)
  {
    float v16 = *v14++;
    PB::TextFormatter::format(this, "temperatureBias", v16);
  }
  if (*(unsigned char *)(a1 + 116)) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 104));
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_190302390(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)(a1 + 8);
    char v9 = (void **)(a1 + 80);
    uint64_t v136 = a1 + 96;
    uint64_t v137 = a1 + 24;
    float v10 = (void **)(a1 + 56);
    uint64_t v135 = a1 + 72;
    unint64_t v11 = (void **)(a1 + 32);
    uint64_t v12 = a1 + 48;
    while (1)
    {
      uint64_t v13 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v14 = 0;
      unsigned int v15 = 0;
      unint64_t v16 = 0;
      while (1)
      {
        unint64_t v17 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v18 = *(unsigned char *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          break;
        }
        v14 += 7;
        unint64_t v2 = v17;
        if (v15++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v25 = v16 & 7;
      if (v25 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 116) |= 1u;
          unint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)this + 2)) {
            goto LABEL_204;
          }
          *(void *)(a1 + 104) = *(void *)(*(void *)this + v26);
          uint64_t v27 = *((void *)this + 1) + 8;
          goto LABEL_206;
        case 2u:
          *(unsigned char *)(a1 + 116) |= 4u;
          unint64_t v28 = *((void *)this + 1);
          if (v28 >= *((void *)this + 2))
          {
            BOOL v31 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v29 = v28 + 1;
            int v30 = *(unsigned __int8 *)(*(void *)this + v28);
            *((void *)this + 1) = v29;
            BOOL v31 = v30 != 0;
          }
          *(unsigned char *)(a1 + 113) = v31;
          goto LABEL_207;
        case 3u:
          *(unsigned char *)(a1 + 116) |= 2u;
          unint64_t v32 = *((void *)this + 1);
          if (v32 >= *((void *)this + 2))
          {
            BOOL v35 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v33 = v32 + 1;
            int v34 = *(unsigned __int8 *)(*(void *)this + v32);
            *((void *)this + 1) = v33;
            BOOL v35 = v34 != 0;
          }
          *(unsigned char *)(a1 + 112) = v35;
          goto LABEL_207;
        case 4u:
          if (v25 != 2)
          {
            unint64_t v93 = *(char **)(a1 + 40);
            unint64_t v92 = *(void *)(a1 + 48);
            if ((unint64_t)v93 >= v92)
            {
              char v101 = (char *)*v11;
              uint64_t v102 = (v93 - (unsigned char *)*v11) >> 2;
              unint64_t v103 = v102 + 1;
              if ((unint64_t)(v102 + 1) >> 62) {
LABEL_215:
              }
                sub_1903479E8();
              uint64_t v104 = v92 - (void)v101;
              if (v104 >> 1 > v103) {
                unint64_t v103 = v104 >> 1;
              }
              if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v105 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v105 = v103;
              }
              if (v105)
              {
                unint64_t v106 = (char *)sub_190347D04(v12, v105);
                char v101 = *(char **)(a1 + 32);
                unint64_t v93 = *(char **)(a1 + 40);
              }
              else
              {
                unint64_t v106 = 0;
              }
              char v125 = &v106[4 * v102];
              *(_DWORD *)char v125 = 0;
              char v94 = v125 + 4;
              while (v93 != v101)
              {
                int v126 = *((_DWORD *)v93 - 1);
                v93 -= 4;
                *((_DWORD *)v125 - 1) = v126;
                v125 -= 4;
              }
              *(void *)(a1 + 32) = v125;
              *(void *)(a1 + 40) = v94;
              *(void *)(a1 + 48) = &v106[4 * v105];
              if (v101) {
                operator delete(v101);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v93 = 0;
              char v94 = v93 + 4;
            }
            *(void *)(a1 + 40) = v94;
            goto LABEL_202;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v36 = *((void *)this + 1);
          unint64_t v37 = *((void *)this + 2);
          while (v36 < v37 && !*((unsigned char *)this + 24))
          {
            char v39 = *(char **)(a1 + 40);
            unint64_t v38 = *(void *)(a1 + 48);
            if ((unint64_t)v39 >= v38)
            {
              uint64_t v41 = (char *)*v11;
              uint64_t v42 = (v39 - (unsigned char *)*v11) >> 2;
              unint64_t v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 62) {
                goto LABEL_215;
              }
              uint64_t v44 = v38 - (void)v41;
              if (v44 >> 1 > v43) {
                unint64_t v43 = v44 >> 1;
              }
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v45 = v43;
              }
              if (v45)
              {
                char v46 = (char *)sub_190347D04(v12, v45);
                uint64_t v41 = *(char **)(a1 + 32);
                char v39 = *(char **)(a1 + 40);
              }
              else
              {
                char v46 = 0;
              }
              char v47 = &v46[4 * v42];
              *(_DWORD *)char v47 = 0;
              unsigned int v40 = v47 + 4;
              while (v39 != v41)
              {
                int v48 = *((_DWORD *)v39 - 1);
                v39 -= 4;
                *((_DWORD *)v47 - 1) = v48;
                v47 -= 4;
              }
              *(void *)(a1 + 32) = v47;
              *(void *)(a1 + 40) = v40;
              *(void *)(a1 + 48) = &v46[4 * v45];
              if (v41) {
                operator delete(v41);
              }
            }
            else
            {
              *(_DWORD *)char v39 = 0;
              unsigned int v40 = v39 + 4;
            }
            *(void *)(a1 + 40) = v40;
            unint64_t v49 = *((void *)this + 1);
            if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)this + 2)) {
              goto LABEL_128;
            }
            *(v40 - 1) = *(_DWORD *)(*(void *)this + v49);
            unint64_t v37 = *((void *)this + 2);
            unint64_t v36 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v36;
          }
          goto LABEL_129;
        case 5u:
          if (v25 != 2)
          {
            unsigned int v96 = *(char **)(a1 + 64);
            unint64_t v95 = *(void *)(a1 + 72);
            if ((unint64_t)v96 >= v95)
            {
              unint64_t v107 = (char *)*v10;
              uint64_t v108 = (v96 - (unsigned char *)*v10) >> 2;
              unint64_t v109 = v108 + 1;
              if ((unint64_t)(v108 + 1) >> 62) {
LABEL_216:
              }
                sub_1903479E8();
              uint64_t v110 = v95 - (void)v107;
              if (v110 >> 1 > v109) {
                unint64_t v109 = v110 >> 1;
              }
              if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v111 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v111 = v109;
              }
              if (v111)
              {
                unint64_t v112 = (char *)sub_190347D04(v135, v111);
                unint64_t v107 = *(char **)(a1 + 56);
                unsigned int v96 = *(char **)(a1 + 64);
              }
              else
              {
                unint64_t v112 = 0;
              }
              uint64_t v127 = &v112[4 * v108];
              *(_DWORD *)uint64_t v127 = 0;
              char v94 = v127 + 4;
              while (v96 != v107)
              {
                int v128 = *((_DWORD *)v96 - 1);
                v96 -= 4;
                *((_DWORD *)v127 - 1) = v128;
                v127 -= 4;
              }
              *(void *)(a1 + 56) = v127;
              *(void *)(a1 + 64) = v94;
              *(void *)(a1 + 72) = &v112[4 * v111];
              if (v107) {
                operator delete(v107);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v96 = 0;
              char v94 = v96 + 4;
            }
            *(void *)(a1 + 64) = v94;
            goto LABEL_202;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v50 = *((void *)this + 1);
          unint64_t v51 = *((void *)this + 2);
          while (v50 < v51 && !*((unsigned char *)this + 24))
          {
            unint64_t v53 = *(char **)(a1 + 64);
            unint64_t v52 = *(void *)(a1 + 72);
            if ((unint64_t)v53 >= v52)
            {
              unint64_t v55 = (char *)*v10;
              uint64_t v56 = (v53 - (unsigned char *)*v10) >> 2;
              unint64_t v57 = v56 + 1;
              if ((unint64_t)(v56 + 1) >> 62) {
                goto LABEL_216;
              }
              uint64_t v58 = v52 - (void)v55;
              if (v58 >> 1 > v57) {
                unint64_t v57 = v58 >> 1;
              }
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v59 = v57;
              }
              if (v59)
              {
                uint64_t v60 = (char *)sub_190347D04(v135, v59);
                unint64_t v55 = *(char **)(a1 + 56);
                unint64_t v53 = *(char **)(a1 + 64);
              }
              else
              {
                uint64_t v60 = 0;
              }
              char v61 = &v60[4 * v56];
              *(_DWORD *)char v61 = 0;
              char v54 = v61 + 4;
              while (v53 != v55)
              {
                int v62 = *((_DWORD *)v53 - 1);
                v53 -= 4;
                *((_DWORD *)v61 - 1) = v62;
                v61 -= 4;
              }
              *(void *)(a1 + 56) = v61;
              *(void *)(a1 + 64) = v54;
              *(void *)(a1 + 72) = &v60[4 * v59];
              if (v55) {
                operator delete(v55);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v53 = 0;
              char v54 = v53 + 4;
            }
            *(void *)(a1 + 64) = v54;
            unint64_t v63 = *((void *)this + 1);
            if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((void *)this + 2)) {
              goto LABEL_128;
            }
            *(v54 - 1) = *(_DWORD *)(*(void *)this + v63);
            unint64_t v51 = *((void *)this + 2);
            unint64_t v50 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v50;
          }
          goto LABEL_129;
        case 6u:
          if (v25 != 2)
          {
            char v98 = *(char **)(a1 + 88);
            unint64_t v97 = *(void *)(a1 + 96);
            if ((unint64_t)v98 >= v97)
            {
              char v113 = (char *)*v9;
              uint64_t v114 = (v98 - (unsigned char *)*v9) >> 2;
              unint64_t v115 = v114 + 1;
              if ((unint64_t)(v114 + 1) >> 62) {
LABEL_217:
              }
                sub_1903479E8();
              uint64_t v116 = v97 - (void)v113;
              if (v116 >> 1 > v115) {
                unint64_t v115 = v116 >> 1;
              }
              if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v117 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v117 = v115;
              }
              if (v117)
              {
                unint64_t v118 = (char *)sub_190347D04(v136, v117);
                char v113 = *(char **)(a1 + 80);
                char v98 = *(char **)(a1 + 88);
              }
              else
              {
                unint64_t v118 = 0;
              }
              char v129 = &v118[4 * v114];
              *(_DWORD *)char v129 = 0;
              char v94 = v129 + 4;
              while (v98 != v113)
              {
                int v130 = *((_DWORD *)v98 - 1);
                v98 -= 4;
                *((_DWORD *)v129 - 1) = v130;
                v129 -= 4;
              }
              *(void *)(a1 + 80) = v129;
              *(void *)(a1 + 88) = v94;
              *(void *)(a1 + 96) = &v118[4 * v117];
              if (v113) {
                operator delete(v113);
              }
            }
            else
            {
              *(_DWORD *)char v98 = 0;
              char v94 = v98 + 4;
            }
            *(void *)(a1 + 88) = v94;
            goto LABEL_202;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v64 = *((void *)this + 1);
          unint64_t v65 = *((void *)this + 2);
          while (v64 < v65 && !*((unsigned char *)this + 24))
          {
            char v67 = *(char **)(a1 + 88);
            unint64_t v66 = *(void *)(a1 + 96);
            if ((unint64_t)v67 >= v66)
            {
              uint64_t v69 = (char *)*v9;
              uint64_t v70 = (v67 - (unsigned char *)*v9) >> 2;
              unint64_t v71 = v70 + 1;
              if ((unint64_t)(v70 + 1) >> 62) {
                goto LABEL_217;
              }
              uint64_t v72 = v66 - (void)v69;
              if (v72 >> 1 > v71) {
                unint64_t v71 = v72 >> 1;
              }
              if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v73 = v71;
              }
              if (v73)
              {
                char v74 = (char *)sub_190347D04(v136, v73);
                uint64_t v69 = *(char **)(a1 + 80);
                char v67 = *(char **)(a1 + 88);
              }
              else
              {
                char v74 = 0;
              }
              char v75 = &v74[4 * v70];
              *(_DWORD *)char v75 = 0;
              unsigned int v68 = v75 + 4;
              while (v67 != v69)
              {
                int v76 = *((_DWORD *)v67 - 1);
                v67 -= 4;
                *((_DWORD *)v75 - 1) = v76;
                v75 -= 4;
              }
              *(void *)(a1 + 80) = v75;
              *(void *)(a1 + 88) = v68;
              *(void *)(a1 + 96) = &v74[4 * v73];
              if (v69) {
                operator delete(v69);
              }
            }
            else
            {
              *(_DWORD *)char v67 = 0;
              unsigned int v68 = v67 + 4;
            }
            *(void *)(a1 + 88) = v68;
            unint64_t v77 = *((void *)this + 1);
            if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((void *)this + 2)) {
              goto LABEL_128;
            }
            *(v68 - 1) = *(_DWORD *)(*(void *)this + v77);
            unint64_t v65 = *((void *)this + 2);
            unint64_t v64 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v64;
          }
          goto LABEL_129;
        case 7u:
          if (v25 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v78 = *((void *)this + 1);
            unint64_t v79 = *((void *)this + 2);
            while (v78 < v79 && !*((unsigned char *)this + 24))
            {
              unint64_t v81 = *(char **)(a1 + 16);
              unint64_t v80 = *(void *)(a1 + 24);
              if ((unint64_t)v81 >= v80)
              {
                char v83 = (char *)*v8;
                uint64_t v84 = (v81 - (unsigned char *)*v8) >> 2;
                unint64_t v85 = v84 + 1;
                if ((unint64_t)(v84 + 1) >> 62) {
                  goto LABEL_218;
                }
                uint64_t v86 = v80 - (void)v83;
                if (v86 >> 1 > v85) {
                  unint64_t v85 = v86 >> 1;
                }
                if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v87 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v87 = v85;
                }
                if (v87)
                {
                  unsigned int v88 = (char *)sub_190347D04(v137, v87);
                  char v83 = *(char **)(a1 + 8);
                  unint64_t v81 = *(char **)(a1 + 16);
                }
                else
                {
                  unsigned int v88 = 0;
                }
                unint64_t v89 = &v88[4 * v84];
                *(_DWORD *)unint64_t v89 = 0;
                char v82 = v89 + 4;
                while (v81 != v83)
                {
                  int v90 = *((_DWORD *)v81 - 1);
                  v81 -= 4;
                  *((_DWORD *)v89 - 1) = v90;
                  v89 -= 4;
                }
                *(void *)(a1 + 8) = v89;
                *(void *)(a1 + 16) = v82;
                *(void *)(a1 + 24) = &v88[4 * v87];
                if (v83) {
                  operator delete(v83);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v81 = 0;
                char v82 = v81 + 4;
              }
              *(void *)(a1 + 16) = v82;
              unint64_t v91 = *((void *)this + 1);
              if (v91 > 0xFFFFFFFFFFFFFFFBLL || v91 + 4 > *((void *)this + 2))
              {
LABEL_128:
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v82 - 1) = *(_DWORD *)(*(void *)this + v91);
              unint64_t v79 = *((void *)this + 2);
              unint64_t v78 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v78;
            }
LABEL_129:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v100 = *(char **)(a1 + 16);
            unint64_t v99 = *(void *)(a1 + 24);
            if ((unint64_t)v100 >= v99)
            {
              unint64_t v119 = (char *)*v8;
              uint64_t v120 = (v100 - (unsigned char *)*v8) >> 2;
              unint64_t v121 = v120 + 1;
              if ((unint64_t)(v120 + 1) >> 62) {
LABEL_218:
              }
                sub_1903479E8();
              uint64_t v122 = v99 - (void)v119;
              if (v122 >> 1 > v121) {
                unint64_t v121 = v122 >> 1;
              }
              if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v123 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v123 = v121;
              }
              if (v123)
              {
                uint64_t v124 = (char *)sub_190347D04(v137, v123);
                unint64_t v119 = *(char **)(a1 + 8);
                uint64_t v100 = *(char **)(a1 + 16);
              }
              else
              {
                uint64_t v124 = 0;
              }
              unint64_t v131 = &v124[4 * v120];
              *(_DWORD *)unint64_t v131 = 0;
              char v94 = v131 + 4;
              while (v100 != v119)
              {
                int v132 = *((_DWORD *)v100 - 1);
                v100 -= 4;
                *((_DWORD *)v131 - 1) = v132;
                v131 -= 4;
              }
              *(void *)(a1 + 8) = v131;
              *(void *)(a1 + 16) = v94;
              *(void *)(a1 + 24) = &v124[4 * v123];
              if (v119) {
                operator delete(v119);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v100 = 0;
              char v94 = v100 + 4;
            }
            *(void *)(a1 + 16) = v94;
LABEL_202:
            unint64_t v133 = *((void *)this + 1);
            if (v133 <= 0xFFFFFFFFFFFFFFFBLL && v133 + 4 <= *((void *)this + 2))
            {
              *(v94 - 1) = *(_DWORD *)(*(void *)this + v133);
              uint64_t v27 = *((void *)this + 1) + 4;
LABEL_206:
              *((void *)this + 1) = v27;
            }
            else
            {
LABEL_204:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_207:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((unsigned char *)this + 24)) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_207;
      }
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v16 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v22 = v2 + 1;
      char v23 = *(unsigned char *)(v13 + v2);
      *((void *)this + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0) {
        goto LABEL_21;
      }
      v20 += 7;
      unint64_t v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        unint64_t v16 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190302D38(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 116);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(result + 116) & 4) == 0) {
      goto LABEL_3;
    }
LABEL_19:
    double result = PB::Writer::write(this);
    if ((*(unsigned char *)(v3 + 116) & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  double result = PB::Writer::write(this, *(double *)(result + 104));
  char v4 = *(unsigned char *)(v3 + 116);
  if ((v4 & 4) != 0) {
    goto LABEL_19;
  }
LABEL_3:
  if ((v4 & 2) != 0) {
LABEL_4:
  }
    double result = PB::Writer::write(this);
LABEL_5:
  char v5 = *(float **)(v3 + 32);
  float v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    float v7 = *v5++;
    double result = PB::Writer::write(this, v7);
  }
  uint64_t v8 = *(float **)(v3 + 56);
  char v9 = *(float **)(v3 + 64);
  while (v8 != v9)
  {
    float v10 = *v8++;
    double result = PB::Writer::write(this, v10);
  }
  unint64_t v11 = *(float **)(v3 + 80);
  uint64_t v12 = *(float **)(v3 + 88);
  while (v11 != v12)
  {
    float v13 = *v11++;
    double result = PB::Writer::write(this, v13);
  }
  unsigned int v15 = *(float **)(v3 + 8);
  char v14 = *(float **)(v3 + 16);
  while (v15 != v14)
  {
    float v16 = *v15++;
    double result = PB::Writer::write(this, v16);
  }
  return result;
}

uint64_t sub_190302E38(uint64_t result)
{
  *(void *)double result = &unk_1EDFCD228;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_190302E5C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCD228;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_190302EDC(PB::Base *a1)
{
  sub_190302E5C(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190302F14(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 20)) {
    PB::TextFormatter::format(this, "axis");
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "correction");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190302FAC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v21 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v25 = 0;
          if (v21 <= v20) {
            unint64_t v21 = *((void *)this + 1);
          }
          while (1)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v31 = v20 + 1;
            char v32 = *(unsigned char *)(v22 + v20);
            *((void *)this + 1) = v31;
            v25 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v20 = v31;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
LABEL_39:
              LODWORD(v25) = 0;
              goto LABEL_43;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v25) = 0;
          }
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v26 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
            if (v14) {
              goto LABEL_39;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else
      {
        if ((v11 >> 3) == 1) {
          operator new();
        }
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190303298(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 8);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4);
  }
  if (*(unsigned char *)(v3 + 20))
  {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

double sub_190303300(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCE028;
  *(_DWORD *)(a1 + 92) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  return result;
}

void sub_19030333C(PB::Base *this)
{
  *(void *)this = &unk_1EDFCE028;
  unint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  PB::Base::~Base(this);
}

void sub_1903033C0(PB::Base *a1)
{
  sub_19030333C(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903033F8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(float **)(a1 + 8);
  float v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "dynamicBiasEstimate", v7);
  }
  uint64_t v8 = *(float **)(a1 + 32);
  char v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "estimateErrorMetric", v10);
  }
  if ((*(unsigned char *)(a1 + 92) & 2) != 0) {
    PB::TextFormatter::format(this, "rawGyroTemperature", *(float *)(a1 + 88));
  }
  unint64_t v11 = *(float **)(a1 + 56);
  unint64_t v12 = *(float **)(a1 + 64);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(this, "subFitError", v13);
  }
  if (*(unsigned char *)(a1 + 92)) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 80));
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_190303508(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)(a1 + 56);
    uint64_t v104 = a1 + 72;
    char v9 = (void **)(a1 + 32);
    uint64_t v10 = a1 + 48;
    unint64_t v11 = (void **)(a1 + 8);
    uint64_t v12 = a1 + 24;
    while (1)
    {
      uint64_t v13 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v14 = 0;
      unsigned int v15 = 0;
      unint64_t v16 = 0;
      while (1)
      {
        unint64_t v17 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v18 = *(unsigned char *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          break;
        }
        v14 += 7;
        unint64_t v2 = v17;
        if (v15++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v25 = v16 & 7;
      if (v25 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 92) |= 1u;
          unint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)this + 2)) {
            goto LABEL_158;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v26);
          uint64_t v27 = *((void *)this + 1) + 8;
          goto LABEL_161;
        case 2u:
          if (v25 != 2)
          {
            uint64_t v72 = *(char **)(a1 + 16);
            unint64_t v71 = *(void *)(a1 + 24);
            if ((unint64_t)v72 >= v71)
            {
              unint64_t v78 = (char *)*v11;
              uint64_t v79 = (v72 - (unsigned char *)*v11) >> 2;
              unint64_t v80 = v79 + 1;
              if ((unint64_t)(v79 + 1) >> 62) {
LABEL_170:
              }
                sub_1903479E8();
              uint64_t v81 = v71 - (void)v78;
              if (v81 >> 1 > v80) {
                unint64_t v80 = v81 >> 1;
              }
              if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v82 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v82 = v80;
              }
              if (v82)
              {
                char v83 = (char *)sub_190347D04(v12, v82);
                unint64_t v78 = *(char **)(a1 + 8);
                uint64_t v72 = *(char **)(a1 + 16);
              }
              else
              {
                char v83 = 0;
              }
              unsigned int v96 = &v83[4 * v79];
              *(_DWORD *)unsigned int v96 = 0;
              unint64_t v73 = v96 + 4;
              while (v72 != v78)
              {
                int v97 = *((_DWORD *)v72 - 1);
                v72 -= 4;
                *((_DWORD *)v96 - 1) = v97;
                v96 -= 4;
              }
              *(void *)(a1 + 8) = v96;
              *(void *)(a1 + 16) = v73;
              *(void *)(a1 + 24) = &v83[4 * v82];
              if (v78) {
                operator delete(v78);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v72 = 0;
              unint64_t v73 = v72 + 4;
            }
            *(void *)(a1 + 16) = v73;
            goto LABEL_156;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v28 = *((void *)this + 1);
          unint64_t v29 = *((void *)this + 2);
          while (v28 < v29 && !*((unsigned char *)this + 24))
          {
            unint64_t v31 = *(char **)(a1 + 16);
            unint64_t v30 = *(void *)(a1 + 24);
            if ((unint64_t)v31 >= v30)
            {
              unint64_t v33 = (char *)*v11;
              uint64_t v34 = (v31 - (unsigned char *)*v11) >> 2;
              unint64_t v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 62) {
                goto LABEL_170;
              }
              uint64_t v36 = v30 - (void)v33;
              if (v36 >> 1 > v35) {
                unint64_t v35 = v36 >> 1;
              }
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v37 = v35;
              }
              if (v37)
              {
                unint64_t v38 = (char *)sub_190347D04(v12, v37);
                unint64_t v33 = *(char **)(a1 + 8);
                unint64_t v31 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v38 = 0;
              }
              char v39 = &v38[4 * v34];
              *(_DWORD *)char v39 = 0;
              char v32 = v39 + 4;
              while (v31 != v33)
              {
                int v40 = *((_DWORD *)v31 - 1);
                v31 -= 4;
                *((_DWORD *)v39 - 1) = v40;
                v39 -= 4;
              }
              *(void *)(a1 + 8) = v39;
              *(void *)(a1 + 16) = v32;
              *(void *)(a1 + 24) = &v38[4 * v37];
              if (v33) {
                operator delete(v33);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v31 = 0;
              char v32 = v31 + 4;
            }
            *(void *)(a1 + 16) = v32;
            unint64_t v41 = *((void *)this + 1);
            if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)this + 2)) {
              goto LABEL_109;
            }
            *(v32 - 1) = *(_DWORD *)(*(void *)this + v41);
            unint64_t v29 = *((void *)this + 2);
            unint64_t v28 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v28;
          }
          goto LABEL_110;
        case 3u:
          if (v25 != 2)
          {
            char v75 = *(char **)(a1 + 40);
            unint64_t v74 = *(void *)(a1 + 48);
            if ((unint64_t)v75 >= v74)
            {
              uint64_t v84 = (char *)*v9;
              uint64_t v85 = (v75 - (unsigned char *)*v9) >> 2;
              unint64_t v86 = v85 + 1;
              if ((unint64_t)(v85 + 1) >> 62) {
LABEL_171:
              }
                sub_1903479E8();
              uint64_t v87 = v74 - (void)v84;
              if (v87 >> 1 > v86) {
                unint64_t v86 = v87 >> 1;
              }
              if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v88 = v86;
              }
              if (v88)
              {
                unint64_t v89 = (char *)sub_190347D04(v10, v88);
                uint64_t v84 = *(char **)(a1 + 32);
                char v75 = *(char **)(a1 + 40);
              }
              else
              {
                unint64_t v89 = 0;
              }
              char v98 = &v89[4 * v85];
              *(_DWORD *)char v98 = 0;
              unint64_t v73 = v98 + 4;
              while (v75 != v84)
              {
                int v99 = *((_DWORD *)v75 - 1);
                v75 -= 4;
                *((_DWORD *)v98 - 1) = v99;
                v98 -= 4;
              }
              *(void *)(a1 + 32) = v98;
              *(void *)(a1 + 40) = v73;
              *(void *)(a1 + 48) = &v89[4 * v88];
              if (v84) {
                operator delete(v84);
              }
            }
            else
            {
              *(_DWORD *)char v75 = 0;
              unint64_t v73 = v75 + 4;
            }
            *(void *)(a1 + 40) = v73;
            goto LABEL_156;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v42 = *((void *)this + 1);
          unint64_t v43 = *((void *)this + 2);
          while (v42 < v43 && !*((unsigned char *)this + 24))
          {
            unint64_t v45 = *(char **)(a1 + 40);
            unint64_t v44 = *(void *)(a1 + 48);
            if ((unint64_t)v45 >= v44)
            {
              char v47 = (char *)*v9;
              uint64_t v48 = (v45 - (unsigned char *)*v9) >> 2;
              unint64_t v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62) {
                goto LABEL_171;
              }
              uint64_t v50 = v44 - (void)v47;
              if (v50 >> 1 > v49) {
                unint64_t v49 = v50 >> 1;
              }
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v51 = v49;
              }
              if (v51)
              {
                unint64_t v52 = (char *)sub_190347D04(v10, v51);
                char v47 = *(char **)(a1 + 32);
                unint64_t v45 = *(char **)(a1 + 40);
              }
              else
              {
                unint64_t v52 = 0;
              }
              unint64_t v53 = &v52[4 * v48];
              *(_DWORD *)unint64_t v53 = 0;
              char v46 = v53 + 4;
              while (v45 != v47)
              {
                int v54 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }
              *(void *)(a1 + 32) = v53;
              *(void *)(a1 + 40) = v46;
              *(void *)(a1 + 48) = &v52[4 * v51];
              if (v47) {
                operator delete(v47);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v45 = 0;
              char v46 = v45 + 4;
            }
            *(void *)(a1 + 40) = v46;
            unint64_t v55 = *((void *)this + 1);
            if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)this + 2)) {
              goto LABEL_109;
            }
            *(v46 - 1) = *(_DWORD *)(*(void *)this + v55);
            unint64_t v43 = *((void *)this + 2);
            unint64_t v42 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v42;
          }
          goto LABEL_110;
        case 4u:
          if (v25 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v56 = *((void *)this + 1);
            unint64_t v57 = *((void *)this + 2);
            while (v56 < v57 && !*((unsigned char *)this + 24))
            {
              unint64_t v59 = *(char **)(a1 + 64);
              unint64_t v58 = *(void *)(a1 + 72);
              if ((unint64_t)v59 >= v58)
              {
                char v61 = (char *)*v8;
                uint64_t v62 = (v59 - (unsigned char *)*v8) >> 2;
                unint64_t v63 = v62 + 1;
                if ((unint64_t)(v62 + 1) >> 62) {
                  goto LABEL_172;
                }
                uint64_t v64 = v58 - (void)v61;
                if (v64 >> 1 > v63) {
                  unint64_t v63 = v64 >> 1;
                }
                if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v65 = v63;
                }
                if (v65)
                {
                  unint64_t v66 = (char *)sub_190347D04(v104, v65);
                  char v61 = *(char **)(a1 + 56);
                  unint64_t v59 = *(char **)(a1 + 64);
                }
                else
                {
                  unint64_t v66 = 0;
                }
                char v67 = &v66[4 * v62];
                *(_DWORD *)char v67 = 0;
                uint64_t v60 = v67 + 4;
                while (v59 != v61)
                {
                  int v68 = *((_DWORD *)v59 - 1);
                  v59 -= 4;
                  *((_DWORD *)v67 - 1) = v68;
                  v67 -= 4;
                }
                *(void *)(a1 + 56) = v67;
                *(void *)(a1 + 64) = v60;
                *(void *)(a1 + 72) = &v66[4 * v65];
                if (v61) {
                  operator delete(v61);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v59 = 0;
                uint64_t v60 = v59 + 4;
              }
              *(void *)(a1 + 64) = v60;
              unint64_t v69 = *((void *)this + 1);
              if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)this + 2))
              {
LABEL_109:
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v60 - 1) = *(_DWORD *)(*(void *)this + v69);
              unint64_t v57 = *((void *)this + 2);
              unint64_t v56 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v56;
            }
LABEL_110:
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v77 = *(char **)(a1 + 64);
            unint64_t v76 = *(void *)(a1 + 72);
            if ((unint64_t)v77 >= v76)
            {
              int v90 = (char *)*v8;
              uint64_t v91 = (v77 - (unsigned char *)*v8) >> 2;
              unint64_t v92 = v91 + 1;
              if ((unint64_t)(v91 + 1) >> 62) {
LABEL_172:
              }
                sub_1903479E8();
              uint64_t v93 = v76 - (void)v90;
              if (v93 >> 1 > v92) {
                unint64_t v92 = v93 >> 1;
              }
              if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v94 = v92;
              }
              if (v94)
              {
                unint64_t v95 = (char *)sub_190347D04(v104, v94);
                int v90 = *(char **)(a1 + 56);
                unint64_t v77 = *(char **)(a1 + 64);
              }
              else
              {
                unint64_t v95 = 0;
              }
              uint64_t v100 = &v95[4 * v91];
              *(_DWORD *)uint64_t v100 = 0;
              unint64_t v73 = v100 + 4;
              while (v77 != v90)
              {
                int v101 = *((_DWORD *)v77 - 1);
                v77 -= 4;
                *((_DWORD *)v100 - 1) = v101;
                v100 -= 4;
              }
              *(void *)(a1 + 56) = v100;
              *(void *)(a1 + 64) = v73;
              *(void *)(a1 + 72) = &v95[4 * v94];
              if (v90) {
                operator delete(v90);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v77 = 0;
              unint64_t v73 = v77 + 4;
            }
            *(void *)(a1 + 64) = v73;
LABEL_156:
            unint64_t v102 = *((void *)this + 1);
            if (v102 <= 0xFFFFFFFFFFFFFFFBLL && v102 + 4 <= *((void *)this + 2))
            {
              *(v73 - 1) = *(_DWORD *)(*(void *)this + v102);
LABEL_160:
              uint64_t v27 = *((void *)this + 1) + 4;
LABEL_161:
              *((void *)this + 1) = v27;
            }
            else
            {
LABEL_158:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_162:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((unsigned char *)this + 24)) {
            return v4 == 0;
          }
          break;
        case 5u:
          *(unsigned char *)(a1 + 92) |= 2u;
          unint64_t v70 = *((void *)this + 1);
          if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)this + 2)) {
            goto LABEL_158;
          }
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v70);
          goto LABEL_160;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_162;
      }
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v16 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v22 = v2 + 1;
      char v23 = *(unsigned char *)(v13 + v2);
      *((void *)this + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0) {
        goto LABEL_21;
      }
      v20 += 7;
      unint64_t v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        unint64_t v16 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190303C9C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 92)) {
    double result = PB::Writer::write(this, *(double *)(result + 80));
  }
  int v4 = *(float **)(v3 + 8);
  uint64_t v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6);
  }
  float v7 = *(float **)(v3 + 32);
  uint64_t v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    float v9 = *v7++;
    double result = PB::Writer::write(this, v9);
  }
  uint64_t v10 = *(float **)(v3 + 56);
  unint64_t v11 = *(float **)(v3 + 64);
  while (v10 != v11)
  {
    float v12 = *v10++;
    double result = PB::Writer::write(this, v12);
  }
  if ((*(unsigned char *)(v3 + 92) & 2) != 0)
  {
    float v13 = *(float *)(v3 + 88);
    return PB::Writer::write(this, v13);
  }
  return result;
}

double sub_190303D74(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCB318;
  *(_DWORD *)(a1 + 60) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_190303DA8(PB::Base *this)
{
  *(void *)this = &unk_1EDFCB318;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_190303E1C(PB::Base *a1)
{
  sub_190303DA8(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190303E54(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(float **)(a1 + 8);
  float v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "intercept", v7);
  }
  if (*(unsigned char *)(a1 + 60)) {
    PB::TextFormatter::format(this, "lastMiniCal", *(float *)(a1 + 56));
  }
  uint64_t v8 = *(float **)(a1 + 32);
  float v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "slope", v10);
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_190303F1C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    float v10 = (void **)(a1 + 32);
    uint64_t v11 = a1 + 48;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        unint64_t v15 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v21 = v2 + 1;
          char v22 = *(unsigned char *)(v12 + v2);
          *((void *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_21;
          }
          v19 += 7;
          unint64_t v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            unint64_t v15 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v25 = v15 >> 3;
      if ((v15 >> 3) == 3) {
        break;
      }
      if (v25 == 2)
      {
        if (v24 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v41 = *((void *)this + 1);
          unint64_t v42 = *((void *)this + 2);
          while (v41 < v42 && !*((unsigned char *)this + 24))
          {
            unint64_t v44 = *(char **)(a1 + 16);
            unint64_t v43 = *(void *)(a1 + 24);
            if ((unint64_t)v44 >= v43)
            {
              char v46 = (char *)*v8;
              uint64_t v47 = (v44 - (unsigned char *)*v8) >> 2;
              unint64_t v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62) {
                goto LABEL_128;
              }
              uint64_t v49 = v43 - (void)v46;
              if (v49 >> 1 > v48) {
                unint64_t v48 = v49 >> 1;
              }
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v50 = v48;
              }
              if (v50)
              {
                unint64_t v51 = (char *)sub_190347D04(v9, v50);
                char v46 = *(char **)(a1 + 8);
                unint64_t v44 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v51 = 0;
              }
              unint64_t v52 = &v51[4 * v47];
              *(_DWORD *)unint64_t v52 = 0;
              unint64_t v45 = v52 + 4;
              while (v44 != v46)
              {
                int v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *(void *)(a1 + 8) = v52;
              *(void *)(a1 + 16) = v45;
              *(void *)(a1 + 24) = &v51[4 * v50];
              if (v46) {
                operator delete(v46);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v44 = 0;
              unint64_t v45 = v44 + 4;
            }
            *(void *)(a1 + 16) = v45;
            unint64_t v54 = *((void *)this + 1);
            if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((void *)this + 2))
            {
LABEL_82:
              *((unsigned char *)this + 24) = 1;
              goto LABEL_83;
            }
            *(v45 - 1) = *(_DWORD *)(*(void *)this + v54);
            unint64_t v42 = *((void *)this + 2);
            unint64_t v41 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v41;
          }
          goto LABEL_83;
        }
        unint64_t v59 = *(char **)(a1 + 16);
        unint64_t v58 = *(void *)(a1 + 24);
        if ((unint64_t)v59 >= v58)
        {
          unint64_t v66 = (char *)*v8;
          uint64_t v67 = (v59 - (unsigned char *)*v8) >> 2;
          unint64_t v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 62) {
LABEL_128:
          }
            sub_1903479E8();
          uint64_t v69 = v58 - (void)v66;
          if (v69 >> 1 > v68) {
            unint64_t v68 = v69 >> 1;
          }
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v70 = v68;
          }
          if (v70)
          {
            unint64_t v71 = (char *)sub_190347D04(v9, v70);
            unint64_t v66 = *(char **)(a1 + 8);
            unint64_t v59 = *(char **)(a1 + 16);
          }
          else
          {
            unint64_t v71 = 0;
          }
          unint64_t v74 = &v71[4 * v67];
          *(_DWORD *)unint64_t v74 = 0;
          unint64_t v57 = v74 + 4;
          while (v59 != v66)
          {
            int v75 = *((_DWORD *)v59 - 1);
            v59 -= 4;
            *((_DWORD *)v74 - 1) = v75;
            v74 -= 4;
          }
          *(void *)(a1 + 8) = v74;
          *(void *)(a1 + 16) = v57;
          *(void *)(a1 + 24) = &v71[4 * v70];
          if (v66) {
            operator delete(v66);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v59 = 0;
          unint64_t v57 = v59 + 4;
        }
        *(void *)(a1 + 16) = v57;
LABEL_114:
        unint64_t v76 = *((void *)this + 1);
        if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((void *)this + 2)) {
          goto LABEL_116;
        }
        *(v57 - 1) = *(_DWORD *)(*(void *)this + v76);
LABEL_118:
        *((void *)this + 1) += 4;
        goto LABEL_119;
      }
      if (v25 == 1)
      {
        if (v24 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v26 = *((void *)this + 1);
          unint64_t v27 = *((void *)this + 2);
          while (v26 < v27 && !*((unsigned char *)this + 24))
          {
            unint64_t v29 = *(char **)(a1 + 40);
            unint64_t v28 = *(void *)(a1 + 48);
            if ((unint64_t)v29 >= v28)
            {
              unint64_t v31 = (char *)*v10;
              uint64_t v32 = (v29 - (unsigned char *)*v10) >> 2;
              unint64_t v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 62) {
                goto LABEL_127;
              }
              uint64_t v34 = v28 - (void)v31;
              if (v34 >> 1 > v33) {
                unint64_t v33 = v34 >> 1;
              }
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v35 = v33;
              }
              if (v35)
              {
                uint64_t v36 = (char *)sub_190347D04(v11, v35);
                unint64_t v31 = *(char **)(a1 + 32);
                unint64_t v29 = *(char **)(a1 + 40);
              }
              else
              {
                uint64_t v36 = 0;
              }
              unint64_t v37 = &v36[4 * v32];
              *(_DWORD *)unint64_t v37 = 0;
              unint64_t v30 = v37 + 4;
              while (v29 != v31)
              {
                int v38 = *((_DWORD *)v29 - 1);
                v29 -= 4;
                *((_DWORD *)v37 - 1) = v38;
                v37 -= 4;
              }
              *(void *)(a1 + 32) = v37;
              *(void *)(a1 + 40) = v30;
              *(void *)(a1 + 48) = &v36[4 * v35];
              if (v31) {
                operator delete(v31);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v29 = 0;
              unint64_t v30 = v29 + 4;
            }
            *(void *)(a1 + 40) = v30;
            unint64_t v39 = *((void *)this + 1);
            if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)this + 2)) {
              goto LABEL_82;
            }
            *(v30 - 1) = *(_DWORD *)(*(void *)this + v39);
            unint64_t v27 = *((void *)this + 2);
            unint64_t v26 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v26;
          }
LABEL_83:
          PB::Reader::recallMark();
          goto LABEL_119;
        }
        unint64_t v56 = *(char **)(a1 + 40);
        unint64_t v55 = *(void *)(a1 + 48);
        if ((unint64_t)v56 >= v55)
        {
          uint64_t v60 = (char *)*v10;
          uint64_t v61 = (v56 - (unsigned char *)*v10) >> 2;
          unint64_t v62 = v61 + 1;
          if ((unint64_t)(v61 + 1) >> 62) {
LABEL_127:
          }
            sub_1903479E8();
          uint64_t v63 = v55 - (void)v60;
          if (v63 >> 1 > v62) {
            unint64_t v62 = v63 >> 1;
          }
          if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v64 = v62;
          }
          if (v64)
          {
            unint64_t v65 = (char *)sub_190347D04(v11, v64);
            uint64_t v60 = *(char **)(a1 + 32);
            unint64_t v56 = *(char **)(a1 + 40);
          }
          else
          {
            unint64_t v65 = 0;
          }
          uint64_t v72 = &v65[4 * v61];
          *(_DWORD *)uint64_t v72 = 0;
          unint64_t v57 = v72 + 4;
          while (v56 != v60)
          {
            int v73 = *((_DWORD *)v56 - 1);
            v56 -= 4;
            *((_DWORD *)v72 - 1) = v73;
            v72 -= 4;
          }
          *(void *)(a1 + 32) = v72;
          *(void *)(a1 + 40) = v57;
          *(void *)(a1 + 48) = &v65[4 * v64];
          if (v60) {
            operator delete(v60);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v56 = 0;
          unint64_t v57 = v56 + 4;
        }
        *(void *)(a1 + 40) = v57;
        goto LABEL_114;
      }
      if ((PB::Reader::skip(this) & 1) == 0) {
        return 0;
      }
LABEL_119:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    *(unsigned char *)(a1 + 60) |= 1u;
    unint64_t v40 = *((void *)this + 1);
    if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)this + 2))
    {
LABEL_116:
      *((unsigned char *)this + 24) = 1;
      goto LABEL_119;
    }
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v40);
    goto LABEL_118;
  }
  return v4 == 0;
}

uint64_t sub_190304490(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(float **)(result + 32);
  uint64_t v5 = *(float **)(result + 40);
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6);
  }
  float v7 = *(float **)(v3 + 8);
  uint64_t v8 = *(float **)(v3 + 16);
  while (v7 != v8)
  {
    float v9 = *v7++;
    double result = PB::Writer::write(this, v9);
  }
  if (*(unsigned char *)(v3 + 60))
  {
    float v10 = *(float *)(v3 + 56);
    return PB::Writer::write(this, v10);
  }
  return result;
}

void *sub_190304530(void *result)
{
  *double result = &unk_1EDFCEF40;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_190304554(void **a1)
{
  *a1 = &unk_1EDFCEF40;
  unint64_t v2 = a1 + 1;
  sub_190347828(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_1903045B0(void **a1)
{
  *a1 = &unk_1EDFCEF40;
  uint64_t v3 = a1 + 1;
  sub_190347828(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x192FCC980]();
}

uint64_t sub_190304620(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  float v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, this, "sample");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903046B8(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        sub_190304874();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

void sub_190304874()
{
}

void sub_19030498C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_190347EEC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1903049D0(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; uint64_t result = PB::Writer::writeSubmessage(this, v5))
    uint64_t v5 = *v2++;
  return result;
}

void *sub_190304A1C(void *result)
{
  *uint64_t result = &unk_1EDFCFFE0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_190304A40(void **a1)
{
  *a1 = &unk_1EDFCFFE0;
  unint64_t v2 = a1 + 1;
  sub_190347828(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_190304A9C(void **a1)
{
  *a1 = &unk_1EDFCFFE0;
  unint64_t v3 = a1 + 1;
  sub_190347828(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x192FCC980]();
}

uint64_t sub_190304B0C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  float v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, this, "sample");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190304BA4(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        sub_190304D60();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

void sub_190304D60()
{
}

void sub_190304E78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_190347EEC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_190304EBC(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; uint64_t result = PB::Writer::writeSubmessage(this, v5))
    uint64_t v5 = *v2++;
  return result;
}

uint64_t sub_190304F08(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCE060;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_190304F30(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190304F68(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 24);
  if (v5)
  {
    PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 12));
  char v5 = *(unsigned char *)(a1 + 24);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "y", *(float *)(a1 + 16));
  if ((*(unsigned char *)(a1 + 24) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 20));
LABEL_6:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19030502C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 24) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 2u:
          *(unsigned char *)(a1 + 24) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 3u:
          *(unsigned char *)(a1 + 24) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 4u:
          *(unsigned char *)(a1 + 24) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
LABEL_37:
            unint64_t v2 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903052A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 24);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
      if ((*(unsigned char *)(v3 + 24) & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 12));
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 20);

  return PB::Writer::write(this, v5);
}

uint64_t sub_19030534C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCF870;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_190305370(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCF870;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903053F0(PB::Base *a1)
{
  sub_190305370(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190305428(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }
  if (*(unsigned char *)(a1 + 24)) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903054C0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v20);
          *((void *)this + 1) += 8;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        if ((v11 >> 3) == 1) {
          operator new();
        }
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190305730(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 8);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4);
  }
  if (*(unsigned char *)(v3 + 24))
  {
    double v5 = *(double *)(v3 + 16);
    return PB::Writer::write(this, v5);
  }
  return result;
}

uint64_t sub_190305798(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCB350;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_1903057C0(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903057F8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "accuracy", *(float *)(a1 + 16));
    __int16 v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "calibrationLevel");
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "magneticFieldX", *(float *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "magneticFieldY", *(float *)(a1 + 28));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "magneticFieldZ", *(float *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "magneticHeading", *(float *)(a1 + 36));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "quaternionW", *(float *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "quaternionX", *(float *)(a1 + 44));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "quaternionY", *(float *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "quaternionZ", *(float *)(a1 + 52));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 1) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_27:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  if ((*(_WORD *)(a1 + 60) & 0x800) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(this, "trueHeading", *(float *)(a1 + 56));
LABEL_14:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903059BC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 60) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_73;
            case 2u:
              *(_WORD *)(a1 + 60) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_72;
            case 3u:
              *(_WORD *)(a1 + 60) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_72;
            case 4u:
              *(_WORD *)(a1 + 60) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_72;
            case 5u:
              *(_WORD *)(a1 + 60) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_72;
            case 6u:
              *(_WORD *)(a1 + 60) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_72;
            case 7u:
              *(_WORD *)(a1 + 60) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_72;
            case 8u:
              *(_WORD *)(a1 + 60) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_72;
            case 9u:
              *(_WORD *)(a1 + 60) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_72;
            case 0xAu:
              *(_WORD *)(a1 + 60) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_72;
            case 0xBu:
              *(_WORD *)(a1 + 60) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
LABEL_72:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_73:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_56:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_79;
            case 0xCu:
              *(_WORD *)(a1 + 60) |= 4u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_78;
                  }
                  unint64_t v29 = v21++;
                  char v30 = *(unsigned char *)(v22 + v29);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_77:
                    unint64_t v2 = v29 + 1;
                    goto LABEL_78;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_77;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_78;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_78:
              *(_DWORD *)(a1 + 20) = v25;
LABEL_79:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_79;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_190305ED0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 60);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((*(_WORD *)(result + 60) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
LABEL_24:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
    if ((*(_WORD *)(v3 + 60) & 4) == 0) {
      return result;
    }
    goto LABEL_25;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) != 0) {
    goto LABEL_24;
  }
LABEL_12:
  if ((v4 & 4) == 0) {
    return result;
  }
LABEL_25:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_190306058(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFD0360;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_190306080(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903060B8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 12)) {
    PB::TextFormatter::format(this, "dt", *(float *)(a1 + 8));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190306118(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 12) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 4;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903062B4(uint64_t result, PB::Writer *this)
{
  if (*(unsigned char *)(result + 12)) {
    return PB::Writer::write(this, *(float *)(result + 8));
  }
  return result;
}

uint64_t sub_1903062D0(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCEF78;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1903062F8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190306330(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 24);
  if (v5)
  {
    PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 12));
  char v5 = *(unsigned char *)(a1 + 24);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "y", *(float *)(a1 + 16));
  if ((*(unsigned char *)(a1 + 24) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 20));
LABEL_6:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903063F4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 24) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 2u:
          *(unsigned char *)(a1 + 24) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 3u:
          *(unsigned char *)(a1 + 24) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 4u:
          *(unsigned char *)(a1 + 24) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
LABEL_37:
            unint64_t v2 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19030666C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 24);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
      if ((*(unsigned char *)(v3 + 24) & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 12));
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 20);

  return PB::Writer::write(this, v5);
}

uint64_t sub_190306714(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFD0480;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_19030673C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190306774(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 28);
  if (v5)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "y", *(float *)(a1 + 20));
  if ((*(unsigned char *)(a1 + 28) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 24));
LABEL_6:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190306838(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 28) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          goto LABEL_38;
        case 2u:
          *(unsigned char *)(a1 + 28) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 3u:
          *(unsigned char *)(a1 + 28) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 4u:
          *(unsigned char *)(a1 + 28) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
LABEL_37:
            unint64_t v2 = *((void *)this + 1) + 4;
LABEL_38:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190306AB8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 28);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
      if ((*(unsigned char *)(v3 + 28) & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 24);

  return PB::Writer::write(this, v5);
}

uint64_t sub_190306B60(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCB5B8;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_190306B88(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190306BC0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 36);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "fsync");
    char v5 = *(unsigned char *)(a1 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*(unsigned char *)(a1 + 36) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "sampleNum");
  char v5 = *(unsigned char *)(a1 + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  char v5 = *(unsigned char *)(a1 + 36);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 20));
  char v5 = *(unsigned char *)(a1 + 36);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(this, "y", *(float *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 36) & 0x10) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 28));
LABEL_8:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190306CC4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 36) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_56;
            case 2u:
              *(unsigned char *)(a1 + 36) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_55;
            case 3u:
              *(unsigned char *)(a1 + 36) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_55;
            case 4u:
              *(unsigned char *)(a1 + 36) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_55:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_56:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_35:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_62;
            case 5u:
              *(unsigned char *)(a1 + 36) |= 2u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_61;
                  }
                  unint64_t v31 = v21++;
                  char v32 = *(unsigned char *)(v22 + v31);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_60:
                    unint64_t v2 = v31 + 1;
                    goto LABEL_61;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_60;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_61;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_61:
              *(_DWORD *)(a1 + 16) = v25;
LABEL_62:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 6u:
              *(unsigned char *)(a1 + 36) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 32) = v28;
              goto LABEL_62;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_62;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_19030707C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 36);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 36);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(result + 36) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(unsigned char *)(v3 + 36) & 0x20) == 0) {
      return result;
    }
    goto LABEL_13;
  }
LABEL_11:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 2) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 0x20) == 0) {
    return result;
  }
LABEL_13:

  return PB::Writer::write(this);
}

uint64_t sub_19030715C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCC310;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_190307184(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903071BC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 16);
  if (v5)
  {
    PB::TextFormatter::format(this, "location");
    char v5 = *(unsigned char *)(a1 + 16);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 12));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190307238(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 16) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_46:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 16) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
        {
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 4;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903074C8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 16);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 12));
    char v4 = *(unsigned char *)(v3 + 16);
  }
  if (v4)
  {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

uint64_t sub_190307534(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC1E80;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_19030755C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190307594(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "inShower");
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190307610(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 >= *((void *)this + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)this + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *(unsigned char *)(a1 + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903077F8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::write(this);
  }
  return result;
}

uint64_t sub_190307864(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC2B98;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_19030788C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903078C4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "hapticOn");
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190307940(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 >= *((void *)this + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)this + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *(unsigned char *)(a1 + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190307B28(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::write(this);
  }
  return result;
}

uint64_t sub_190307B94(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCC348;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_190307BBC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190307BF4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "stepIndexOfHarmonicityAP", *(float *)(a1 + 16));
    char v5 = *(unsigned char *)(a1 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((*(unsigned char *)(a1 + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "stepIndexOfHarmonicityML", *(float *)(a1 + 20));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "stepIndexOfHarmonicityVT", *(float *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityAP", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityML", *(float *)(a1 + 32));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityVT", *(float *)(a1 + 36));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(this, "thetaAPDirRad", *(float *)(a1 + 40));
  if (*(unsigned char *)(a1 + 44)) {
LABEL_9:
  }
    PB::TextFormatter::format(this, "timestamp");
LABEL_10:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190307D38(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 44) |= 1u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_65;
                  }
                  unint64_t v29 = v20++;
                  char v30 = *(unsigned char *)(v21 + v29);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_64;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_64:
                unint64_t v2 = v29 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_65;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_65:
              *(void *)(a1 + 8) = v24;
              goto LABEL_66;
            case 2u:
              *(unsigned char *)(a1 + 44) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_60;
            case 3u:
              *(unsigned char *)(a1 + 44) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_60;
            case 4u:
              *(unsigned char *)(a1 + 44) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_60;
            case 5u:
              *(unsigned char *)(a1 + 44) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_60;
            case 6u:
              *(unsigned char *)(a1 + 44) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_60;
            case 7u:
              *(unsigned char *)(a1 + 44) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_60;
            case 8u:
              *(unsigned char *)(a1 + 44) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
LABEL_60:
                unint64_t v2 = *((void *)this + 1) + 4;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_51:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_66;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
LABEL_66:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_190308154(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 44);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(result + 44) & 0x80) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
    if ((*(unsigned char *)(v3 + 44) & 0x40) == 0) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x20) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 0x40) == 0) {
    return result;
  }
LABEL_17:
  float v5 = *(float *)(v3 + 36);

  return PB::Writer::write(this, v5);
}

double sub_19030826C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFC3420;
  *(void *)(a1 + 168) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

void sub_1903082AC(PB::Base *this)
{
  *(void *)this = &unk_1EDFC3420;
  unint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  char v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  float v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }

  PB::Base::~Base(this);
}

void sub_190308340(PB::Base *a1)
{
  sub_1903082AC(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190308378(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 172);
  if (v5)
  {
    PB::TextFormatter::format(this, "covTraceAfterCorrection", *(double *)(a1 + 104));
    __int16 v5 = *(_WORD *)(a1 + 172);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "covTraceBeforeCorrection", *(double *)(a1 + 112));
  }
  float v6 = *(double **)(a1 + 8);
  uint64_t v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(this, "dX", v8);
  }
  __int16 v9 = *(_WORD *)(a1 + 172);
  if ((v9 & 4) != 0)
  {
    PB::TextFormatter::format(this, "lastStateTimestamp", *(double *)(a1 + 120));
    __int16 v9 = *(_WORD *)(a1 + 172);
    if ((v9 & 8) == 0)
    {
LABEL_9:
      if ((v9 & 0x100) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  else if ((v9 & 8) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(this, "lidAngleDeg", *(double *)(a1 + 128));
  if ((*(_WORD *)(a1 + 172) & 0x100) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "measurementUpdateType");
LABEL_11:
  unsigned int v10 = *(double **)(a1 + 32);
  unint64_t v11 = *(double **)(a1 + 40);
  while (v10 != v11)
  {
    double v12 = *v10++;
    PB::TextFormatter::format(this, "residual", v12);
  }
  char v13 = *(double **)(a1 + 56);
  BOOL v14 = *(double **)(a1 + 64);
  while (v13 != v14)
  {
    double v15 = *v13++;
    PB::TextFormatter::format(this, "stateQfbAfterCorrection", v15);
  }
  unsigned int v16 = *(double **)(a1 + 80);
  unint64_t v17 = *(double **)(a1 + 88);
  while (v16 != v17)
  {
    double v18 = *v16++;
    PB::TextFormatter::format(this, "stateQfbBeforeCorrection", v18);
  }
  __int16 v19 = *(_WORD *)(a1 + 172);
  if ((v19 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 136));
    __int16 v19 = *(_WORD *)(a1 + 172);
    if ((v19 & 0x20) == 0)
    {
LABEL_19:
      if ((v19 & 0x40) == 0) {
        goto LABEL_20;
      }
      goto LABEL_30;
    }
  }
  else if ((v19 & 0x20) == 0)
  {
    goto LABEL_19;
  }
  PB::TextFormatter::format(this, "wAuxBudNormMeanDps", *(double *)(a1 + 144));
  __int16 v19 = *(_WORD *)(a1 + 172);
  if ((v19 & 0x40) == 0)
  {
LABEL_20:
    if ((v19 & 0x80) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_30:
  PB::TextFormatter::format(this, "wAuxFaceNormMeanDps", *(double *)(a1 + 152));
  if ((*(_WORD *)(a1 + 172) & 0x80) != 0) {
LABEL_21:
  }
    PB::TextFormatter::format(this, "wSrcNormMeanDps", *(double *)(a1 + 160));
LABEL_22:

  return MEMORY[0x1F4147498](this);
}

BOOL sub_190308594(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    double v8 = (void **)(a1 + 8);
    __int16 v9 = (void **)(a1 + 32);
    uint64_t v147 = a1 + 48;
    uint64_t v148 = a1 + 24;
    unsigned int v10 = (void **)(a1 + 56);
    unint64_t v11 = (void **)(a1 + 80);
    uint64_t v145 = a1 + 96;
    uint64_t v146 = a1 + 72;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 172) |= 0x10u;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)this + 2)) {
            goto LABEL_235;
          }
          *(void *)(a1 + 136) = *(void *)(*(void *)this + v25);
          goto LABEL_237;
        case 2u:
          *(_WORD *)(a1 + 172) |= 0x100u;
          unint64_t v26 = *((void *)this + 1);
          unint64_t v27 = *((void *)this + 2);
          uint64_t v28 = *(void *)this;
          if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
          {
            char v29 = 0;
            unsigned int v30 = 0;
            uint64_t v31 = 0;
            do
            {
              unint64_t v32 = v26 + 1;
              *((void *)this + 1) = v26 + 1;
              char v33 = *(unsigned char *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0) {
                goto LABEL_204;
              }
              v29 += 7;
              unint64_t v26 = v32;
              BOOL v18 = v30++ > 8;
            }
            while (!v18);
LABEL_160:
            LODWORD(v31) = 0;
            goto LABEL_204;
          }
          char v97 = 0;
          unsigned int v98 = 0;
          uint64_t v31 = 0;
          if (v27 <= v26) {
            unint64_t v27 = *((void *)this + 1);
          }
          while (2)
          {
            if (v27 == v26)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v99 = v26 + 1;
              char v100 = *(unsigned char *)(v28 + v26);
              *((void *)this + 1) = v99;
              v31 |= (unint64_t)(v100 & 0x7F) << v97;
              if (v100 < 0)
              {
                v97 += 7;
                unint64_t v26 = v99;
                BOOL v18 = v98++ > 8;
                if (v18) {
                  goto LABEL_160;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v31) = 0;
              }
            }
            break;
          }
LABEL_204:
          *(_DWORD *)(a1 + 168) = v31;
          goto LABEL_238;
        case 3u:
          if (v24 != 2)
          {
            unint64_t v102 = *(char **)(a1 + 88);
            unint64_t v101 = *(void *)(a1 + 96);
            if ((unint64_t)v102 >= v101)
            {
              uint64_t v110 = (char *)*v11;
              uint64_t v111 = (v102 - (unsigned char *)*v11) >> 3;
              unint64_t v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 61) {
LABEL_248:
              }
                sub_1903479E8();
              uint64_t v113 = v101 - (void)v110;
              if (v113 >> 2 > v112) {
                unint64_t v112 = v113 >> 2;
              }
              if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v114 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v114 = v112;
              }
              if (v114)
              {
                unint64_t v115 = (char *)sub_190347A00(v145, v114);
                uint64_t v110 = *(char **)(a1 + 80);
                unint64_t v102 = *(char **)(a1 + 88);
              }
              else
              {
                unint64_t v115 = 0;
              }
              unint64_t v134 = &v115[8 * v111];
              *(void *)unint64_t v134 = 0;
              unint64_t v103 = v134 + 8;
              while (v102 != v110)
              {
                uint64_t v135 = *((void *)v102 - 1);
                v102 -= 8;
                *((void *)v134 - 1) = v135;
                v134 -= 8;
              }
              *(void *)(a1 + 80) = v134;
              *(void *)(a1 + 88) = v103;
              *(void *)(a1 + 96) = &v115[8 * v114];
              if (v110) {
                operator delete(v110);
              }
            }
            else
            {
              *(void *)unint64_t v102 = 0;
              unint64_t v103 = v102 + 8;
            }
            *(void *)(a1 + 88) = v103;
            goto LABEL_233;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v34 = *((void *)this + 1);
          unint64_t v35 = *((void *)this + 2);
          while (v34 < v35 && !*((unsigned char *)this + 24))
          {
            unint64_t v37 = *(char **)(a1 + 88);
            unint64_t v36 = *(void *)(a1 + 96);
            if ((unint64_t)v37 >= v36)
            {
              unint64_t v39 = (char *)*v11;
              uint64_t v40 = (v37 - (unsigned char *)*v11) >> 3;
              unint64_t v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 61) {
                goto LABEL_248;
              }
              uint64_t v42 = v36 - (void)v39;
              if (v42 >> 2 > v41) {
                unint64_t v41 = v42 >> 2;
              }
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v43 = v41;
              }
              if (v43)
              {
                unint64_t v44 = (char *)sub_190347A00(v145, v43);
                unint64_t v39 = *(char **)(a1 + 80);
                unint64_t v37 = *(char **)(a1 + 88);
              }
              else
              {
                unint64_t v44 = 0;
              }
              unint64_t v45 = &v44[8 * v40];
              *(void *)unint64_t v45 = 0;
              int v38 = v45 + 8;
              while (v37 != v39)
              {
                uint64_t v46 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v45 - 1) = v46;
                v45 -= 8;
              }
              *(void *)(a1 + 80) = v45;
              *(void *)(a1 + 88) = v38;
              *(void *)(a1 + 96) = &v44[8 * v43];
              if (v39) {
                operator delete(v39);
              }
            }
            else
            {
              *(void *)unint64_t v37 = 0;
              int v38 = v37 + 8;
            }
            *(void *)(a1 + 88) = v38;
            unint64_t v47 = *((void *)this + 1);
            if (v47 > 0xFFFFFFFFFFFFFFF7 || v47 + 8 > *((void *)this + 2)) {
              goto LABEL_152;
            }
            *(v38 - 1) = *(void *)(*(void *)this + v47);
            unint64_t v35 = *((void *)this + 2);
            unint64_t v34 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v34;
          }
          goto LABEL_153;
        case 4u:
          if (v24 != 2)
          {
            unint64_t v105 = *(char **)(a1 + 64);
            unint64_t v104 = *(void *)(a1 + 72);
            if ((unint64_t)v105 >= v104)
            {
              uint64_t v116 = (char *)*v10;
              uint64_t v117 = (v105 - (unsigned char *)*v10) >> 3;
              unint64_t v118 = v117 + 1;
              if ((unint64_t)(v117 + 1) >> 61) {
LABEL_249:
              }
                sub_1903479E8();
              uint64_t v119 = v104 - (void)v116;
              if (v119 >> 2 > v118) {
                unint64_t v118 = v119 >> 2;
              }
              if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v120 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v120 = v118;
              }
              if (v120)
              {
                unint64_t v121 = (char *)sub_190347A00(v146, v120);
                uint64_t v116 = *(char **)(a1 + 56);
                unint64_t v105 = *(char **)(a1 + 64);
              }
              else
              {
                unint64_t v121 = 0;
              }
              uint64_t v136 = &v121[8 * v117];
              *(void *)uint64_t v136 = 0;
              unint64_t v103 = v136 + 8;
              while (v105 != v116)
              {
                uint64_t v137 = *((void *)v105 - 1);
                v105 -= 8;
                *((void *)v136 - 1) = v137;
                v136 -= 8;
              }
              *(void *)(a1 + 56) = v136;
              *(void *)(a1 + 64) = v103;
              *(void *)(a1 + 72) = &v121[8 * v120];
              if (v116) {
                operator delete(v116);
              }
            }
            else
            {
              *(void *)unint64_t v105 = 0;
              unint64_t v103 = v105 + 8;
            }
            *(void *)(a1 + 64) = v103;
            goto LABEL_233;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v48 = *((void *)this + 1);
          unint64_t v49 = *((void *)this + 2);
          while (v48 < v49 && !*((unsigned char *)this + 24))
          {
            unint64_t v51 = *(char **)(a1 + 64);
            unint64_t v50 = *(void *)(a1 + 72);
            if ((unint64_t)v51 >= v50)
            {
              int v53 = (char *)*v10;
              uint64_t v54 = (v51 - (unsigned char *)*v10) >> 3;
              unint64_t v55 = v54 + 1;
              if ((unint64_t)(v54 + 1) >> 61) {
                goto LABEL_249;
              }
              uint64_t v56 = v50 - (void)v53;
              if (v56 >> 2 > v55) {
                unint64_t v55 = v56 >> 2;
              }
              if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v57 = v55;
              }
              if (v57)
              {
                unint64_t v58 = (char *)sub_190347A00(v146, v57);
                int v53 = *(char **)(a1 + 56);
                unint64_t v51 = *(char **)(a1 + 64);
              }
              else
              {
                unint64_t v58 = 0;
              }
              unint64_t v59 = &v58[8 * v54];
              *(void *)unint64_t v59 = 0;
              unint64_t v52 = v59 + 8;
              while (v51 != v53)
              {
                uint64_t v60 = *((void *)v51 - 1);
                v51 -= 8;
                *((void *)v59 - 1) = v60;
                v59 -= 8;
              }
              *(void *)(a1 + 56) = v59;
              *(void *)(a1 + 64) = v52;
              *(void *)(a1 + 72) = &v58[8 * v57];
              if (v53) {
                operator delete(v53);
              }
            }
            else
            {
              *(void *)unint64_t v51 = 0;
              unint64_t v52 = v51 + 8;
            }
            *(void *)(a1 + 64) = v52;
            unint64_t v61 = *((void *)this + 1);
            if (v61 > 0xFFFFFFFFFFFFFFF7 || v61 + 8 > *((void *)this + 2)) {
              goto LABEL_152;
            }
            *(v52 - 1) = *(void *)(*(void *)this + v61);
            unint64_t v49 = *((void *)this + 2);
            unint64_t v48 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v48;
          }
          goto LABEL_153;
        case 5u:
          *(_WORD *)(a1 + 172) |= 2u;
          unint64_t v62 = *((void *)this + 1);
          if (v62 > 0xFFFFFFFFFFFFFFF7 || v62 + 8 > *((void *)this + 2)) {
            goto LABEL_235;
          }
          *(void *)(a1 + 112) = *(void *)(*(void *)this + v62);
          goto LABEL_237;
        case 6u:
          *(_WORD *)(a1 + 172) |= 1u;
          unint64_t v63 = *((void *)this + 1);
          if (v63 > 0xFFFFFFFFFFFFFFF7 || v63 + 8 > *((void *)this + 2)) {
            goto LABEL_235;
          }
          *(void *)(a1 + 104) = *(void *)(*(void *)this + v63);
          goto LABEL_237;
        case 7u:
          if (v24 != 2)
          {
            unint64_t v107 = *(char **)(a1 + 40);
            unint64_t v106 = *(void *)(a1 + 48);
            if ((unint64_t)v107 >= v106)
            {
              uint64_t v122 = (char *)*v9;
              uint64_t v123 = (v107 - (unsigned char *)*v9) >> 3;
              unint64_t v124 = v123 + 1;
              if ((unint64_t)(v123 + 1) >> 61) {
LABEL_250:
              }
                sub_1903479E8();
              uint64_t v125 = v106 - (void)v122;
              if (v125 >> 2 > v124) {
                unint64_t v124 = v125 >> 2;
              }
              if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v126 = v124;
              }
              if (v126)
              {
                uint64_t v127 = (char *)sub_190347A00(v147, v126);
                uint64_t v122 = *(char **)(a1 + 32);
                unint64_t v107 = *(char **)(a1 + 40);
              }
              else
              {
                uint64_t v127 = 0;
              }
              char v138 = &v127[8 * v123];
              *(void *)char v138 = 0;
              unint64_t v103 = v138 + 8;
              while (v107 != v122)
              {
                uint64_t v139 = *((void *)v107 - 1);
                v107 -= 8;
                *((void *)v138 - 1) = v139;
                v138 -= 8;
              }
              *(void *)(a1 + 32) = v138;
              *(void *)(a1 + 40) = v103;
              *(void *)(a1 + 48) = &v127[8 * v126];
              if (v122) {
                operator delete(v122);
              }
            }
            else
            {
              *(void *)unint64_t v107 = 0;
              unint64_t v103 = v107 + 8;
            }
            *(void *)(a1 + 40) = v103;
            goto LABEL_233;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v64 = *((void *)this + 1);
          unint64_t v65 = *((void *)this + 2);
          while (v64 < v65 && !*((unsigned char *)this + 24))
          {
            uint64_t v67 = *(char **)(a1 + 40);
            unint64_t v66 = *(void *)(a1 + 48);
            if ((unint64_t)v67 >= v66)
            {
              uint64_t v69 = (char *)*v9;
              uint64_t v70 = (v67 - (unsigned char *)*v9) >> 3;
              unint64_t v71 = v70 + 1;
              if ((unint64_t)(v70 + 1) >> 61) {
                goto LABEL_250;
              }
              uint64_t v72 = v66 - (void)v69;
              if (v72 >> 2 > v71) {
                unint64_t v71 = v72 >> 2;
              }
              if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v73 = v71;
              }
              if (v73)
              {
                unint64_t v74 = (char *)sub_190347A00(v147, v73);
                uint64_t v69 = *(char **)(a1 + 32);
                uint64_t v67 = *(char **)(a1 + 40);
              }
              else
              {
                unint64_t v74 = 0;
              }
              int v75 = &v74[8 * v70];
              *(void *)int v75 = 0;
              unint64_t v68 = v75 + 8;
              while (v67 != v69)
              {
                uint64_t v76 = *((void *)v67 - 1);
                v67 -= 8;
                *((void *)v75 - 1) = v76;
                v75 -= 8;
              }
              *(void *)(a1 + 32) = v75;
              *(void *)(a1 + 40) = v68;
              *(void *)(a1 + 48) = &v74[8 * v73];
              if (v69) {
                operator delete(v69);
              }
            }
            else
            {
              *(void *)uint64_t v67 = 0;
              unint64_t v68 = v67 + 8;
            }
            *(void *)(a1 + 40) = v68;
            unint64_t v77 = *((void *)this + 1);
            if (v77 > 0xFFFFFFFFFFFFFFF7 || v77 + 8 > *((void *)this + 2)) {
              goto LABEL_152;
            }
            *(v68 - 1) = *(void *)(*(void *)this + v77);
            unint64_t v65 = *((void *)this + 2);
            unint64_t v64 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v64;
          }
          goto LABEL_153;
        case 8u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v78 = *((void *)this + 1);
            unint64_t v79 = *((void *)this + 2);
            while (v78 < v79 && !*((unsigned char *)this + 24))
            {
              uint64_t v81 = *(char **)(a1 + 16);
              unint64_t v80 = *(void *)(a1 + 24);
              if ((unint64_t)v81 >= v80)
              {
                char v83 = (char *)*v8;
                uint64_t v84 = (v81 - (unsigned char *)*v8) >> 3;
                unint64_t v85 = v84 + 1;
                if ((unint64_t)(v84 + 1) >> 61) {
                  goto LABEL_251;
                }
                uint64_t v86 = v80 - (void)v83;
                if (v86 >> 2 > v85) {
                  unint64_t v85 = v86 >> 2;
                }
                if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v87 = v85;
                }
                if (v87)
                {
                  unint64_t v88 = (char *)sub_190347A00(v148, v87);
                  char v83 = *(char **)(a1 + 8);
                  uint64_t v81 = *(char **)(a1 + 16);
                }
                else
                {
                  unint64_t v88 = 0;
                }
                unint64_t v89 = &v88[8 * v84];
                *(void *)unint64_t v89 = 0;
                unint64_t v82 = v89 + 8;
                while (v81 != v83)
                {
                  uint64_t v90 = *((void *)v81 - 1);
                  v81 -= 8;
                  *((void *)v89 - 1) = v90;
                  v89 -= 8;
                }
                *(void *)(a1 + 8) = v89;
                *(void *)(a1 + 16) = v82;
                *(void *)(a1 + 24) = &v88[8 * v87];
                if (v83) {
                  operator delete(v83);
                }
              }
              else
              {
                *(void *)uint64_t v81 = 0;
                unint64_t v82 = v81 + 8;
              }
              *(void *)(a1 + 16) = v82;
              unint64_t v91 = *((void *)this + 1);
              if (v91 > 0xFFFFFFFFFFFFFFF7 || v91 + 8 > *((void *)this + 2))
              {
LABEL_152:
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v82 - 1) = *(void *)(*(void *)this + v91);
              unint64_t v79 = *((void *)this + 2);
              unint64_t v78 = *((void *)this + 1) + 8;
              *((void *)this + 1) = v78;
            }
LABEL_153:
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v109 = *(char **)(a1 + 16);
            unint64_t v108 = *(void *)(a1 + 24);
            if ((unint64_t)v109 >= v108)
            {
              int v128 = (char *)*v8;
              uint64_t v129 = (v109 - (unsigned char *)*v8) >> 3;
              unint64_t v130 = v129 + 1;
              if ((unint64_t)(v129 + 1) >> 61) {
LABEL_251:
              }
                sub_1903479E8();
              uint64_t v131 = v108 - (void)v128;
              if (v131 >> 2 > v130) {
                unint64_t v130 = v131 >> 2;
              }
              if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v132 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v132 = v130;
              }
              if (v132)
              {
                unint64_t v133 = (char *)sub_190347A00(v148, v132);
                int v128 = *(char **)(a1 + 8);
                unint64_t v109 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v133 = 0;
              }
              uint64_t v140 = &v133[8 * v129];
              *(void *)uint64_t v140 = 0;
              unint64_t v103 = v140 + 8;
              while (v109 != v128)
              {
                uint64_t v141 = *((void *)v109 - 1);
                v109 -= 8;
                *((void *)v140 - 1) = v141;
                v140 -= 8;
              }
              *(void *)(a1 + 8) = v140;
              *(void *)(a1 + 16) = v103;
              *(void *)(a1 + 24) = &v133[8 * v132];
              if (v128) {
                operator delete(v128);
              }
            }
            else
            {
              *(void *)unint64_t v109 = 0;
              unint64_t v103 = v109 + 8;
            }
            *(void *)(a1 + 16) = v103;
LABEL_233:
            unint64_t v142 = *((void *)this + 1);
            if (v142 <= 0xFFFFFFFFFFFFFFF7 && v142 + 8 <= *((void *)this + 2))
            {
              *(v103 - 1) = *(void *)(*(void *)this + v142);
LABEL_237:
              *((void *)this + 1) += 8;
            }
            else
            {
LABEL_235:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_238:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 9u:
          *(_WORD *)(a1 + 172) |= 0x80u;
          unint64_t v92 = *((void *)this + 1);
          if (v92 > 0xFFFFFFFFFFFFFFF7 || v92 + 8 > *((void *)this + 2)) {
            goto LABEL_235;
          }
          *(void *)(a1 + 160) = *(void *)(*(void *)this + v92);
          goto LABEL_237;
        case 0xAu:
          *(_WORD *)(a1 + 172) |= 0x20u;
          unint64_t v93 = *((void *)this + 1);
          if (v93 > 0xFFFFFFFFFFFFFFF7 || v93 + 8 > *((void *)this + 2)) {
            goto LABEL_235;
          }
          *(void *)(a1 + 144) = *(void *)(*(void *)this + v93);
          goto LABEL_237;
        case 0xBu:
          *(_WORD *)(a1 + 172) |= 0x40u;
          unint64_t v94 = *((void *)this + 1);
          if (v94 > 0xFFFFFFFFFFFFFFF7 || v94 + 8 > *((void *)this + 2)) {
            goto LABEL_235;
          }
          *(void *)(a1 + 152) = *(void *)(*(void *)this + v94);
          goto LABEL_237;
        case 0xCu:
          *(_WORD *)(a1 + 172) |= 8u;
          unint64_t v95 = *((void *)this + 1);
          if (v95 > 0xFFFFFFFFFFFFFFF7 || v95 + 8 > *((void *)this + 2)) {
            goto LABEL_235;
          }
          *(void *)(a1 + 128) = *(void *)(*(void *)this + v95);
          goto LABEL_237;
        case 0xDu:
          *(_WORD *)(a1 + 172) |= 4u;
          unint64_t v96 = *((void *)this + 1);
          if (v96 > 0xFFFFFFFFFFFFFFF7 || v96 + 8 > *((void *)this + 2)) {
            goto LABEL_235;
          }
          *(void *)(a1 + 120) = *(void *)(*(void *)this + v96);
          goto LABEL_237;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_238;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190309124(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 172);
  if ((v4 & 0x10) != 0)
  {
    double result = PB::Writer::write(this, *(double *)(result + 136));
    __int16 v4 = *(_WORD *)(v3 + 172);
  }
  if ((v4 & 0x100) != 0) {
    double result = PB::Writer::writeVarInt(this);
  }
  __int16 v5 = *(double **)(v3 + 80);
  float v6 = *(double **)(v3 + 88);
  while (v5 != v6)
  {
    double v7 = *v5++;
    double result = PB::Writer::write(this, v7);
  }
  double v8 = *(double **)(v3 + 56);
  __int16 v9 = *(double **)(v3 + 64);
  while (v8 != v9)
  {
    double v10 = *v8++;
    double result = PB::Writer::write(this, v10);
  }
  __int16 v11 = *(_WORD *)(v3 + 172);
  if ((v11 & 2) != 0)
  {
    double result = PB::Writer::write(this, *(double *)(v3 + 112));
    __int16 v11 = *(_WORD *)(v3 + 172);
  }
  if (v11) {
    double result = PB::Writer::write(this, *(double *)(v3 + 104));
  }
  uint64_t v12 = *(double **)(v3 + 32);
  char v13 = *(double **)(v3 + 40);
  while (v12 != v13)
  {
    double v14 = *v12++;
    double result = PB::Writer::write(this, v14);
  }
  unint64_t v15 = *(double **)(v3 + 8);
  unint64_t v16 = *(double **)(v3 + 16);
  while (v15 != v16)
  {
    double v17 = *v15++;
    double result = PB::Writer::write(this, v17);
  }
  __int16 v18 = *(_WORD *)(v3 + 172);
  if ((v18 & 0x80) != 0)
  {
    double result = PB::Writer::write(this, *(double *)(v3 + 160));
    __int16 v18 = *(_WORD *)(v3 + 172);
    if ((v18 & 0x20) == 0)
    {
LABEL_23:
      if ((v18 & 0x40) == 0) {
        goto LABEL_24;
      }
      goto LABEL_29;
    }
  }
  else if ((v18 & 0x20) == 0)
  {
    goto LABEL_23;
  }
  double result = PB::Writer::write(this, *(double *)(v3 + 144));
  __int16 v18 = *(_WORD *)(v3 + 172);
  if ((v18 & 0x40) == 0)
  {
LABEL_24:
    if ((v18 & 8) == 0) {
      goto LABEL_25;
    }
LABEL_30:
    double result = PB::Writer::write(this, *(double *)(v3 + 128));
    if ((*(_WORD *)(v3 + 172) & 4) == 0) {
      return result;
    }
    goto LABEL_31;
  }
LABEL_29:
  double result = PB::Writer::write(this, *(double *)(v3 + 152));
  __int16 v18 = *(_WORD *)(v3 + 172);
  if ((v18 & 8) != 0) {
    goto LABEL_30;
  }
LABEL_25:
  if ((v18 & 4) == 0) {
    return result;
  }
LABEL_31:
  double v19 = *(double *)(v3 + 120);

  return PB::Writer::write(this, v19);
}

double sub_1903092D4(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCFD08;
  *(_DWORD *)(a1 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_190309308(PB::Base *this)
{
  *(void *)this = &unk_1EDFCFD08;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_19030937C(PB::Base *a1)
{
  sub_190309308(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903093B4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 80)) {
    PB::TextFormatter::format(this, "lastUpdateTimestamp", *(double *)(a1 + 56));
  }
  __int16 v5 = *(double **)(a1 + 8);
  float v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "stateCov", v7);
  }
  if ((*(unsigned char *)(a1 + 80) & 2) != 0) {
    PB::TextFormatter::format(this, "stateCovTrace", *(double *)(a1 + 64));
  }
  double v8 = *(double **)(a1 + 32);
  __int16 v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(this, "stateQfb", v10);
  }
  if ((*(unsigned char *)(a1 + 80) & 4) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 72));
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1903094B4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    double v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    double v10 = (void **)(a1 + 32);
    uint64_t v11 = a1 + 48;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 80) |= 4u;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)this + 2)) {
            goto LABEL_120;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v25);
          goto LABEL_122;
        case 2u:
          if (v24 != 2)
          {
            unint64_t v57 = *(char **)(a1 + 40);
            unint64_t v56 = *(void *)(a1 + 48);
            if ((unint64_t)v57 >= v56)
            {
              unint64_t v61 = (char *)*v10;
              uint64_t v62 = (v57 - (unsigned char *)*v10) >> 3;
              unint64_t v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 61) {
LABEL_131:
              }
                sub_1903479E8();
              uint64_t v64 = v56 - (void)v61;
              if (v64 >> 2 > v63) {
                unint64_t v63 = v64 >> 2;
              }
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v65 = v63;
              }
              if (v65)
              {
                unint64_t v66 = (char *)sub_190347A00(v11, v65);
                unint64_t v61 = *(char **)(a1 + 32);
                unint64_t v57 = *(char **)(a1 + 40);
              }
              else
              {
                unint64_t v66 = 0;
              }
              unint64_t v73 = &v66[8 * v62];
              *(void *)unint64_t v73 = 0;
              unint64_t v58 = v73 + 8;
              while (v57 != v61)
              {
                uint64_t v74 = *((void *)v57 - 1);
                v57 -= 8;
                *((void *)v73 - 1) = v74;
                v73 -= 8;
              }
              *(void *)(a1 + 32) = v73;
              *(void *)(a1 + 40) = v58;
              *(void *)(a1 + 48) = &v66[8 * v65];
              if (v61) {
                operator delete(v61);
              }
            }
            else
            {
              *(void *)unint64_t v57 = 0;
              unint64_t v58 = v57 + 8;
            }
            *(void *)(a1 + 40) = v58;
            goto LABEL_118;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v26 = *((void *)this + 1);
          unint64_t v27 = *((void *)this + 2);
          while (v26 < v27 && !*((unsigned char *)this + 24))
          {
            char v29 = *(char **)(a1 + 40);
            unint64_t v28 = *(void *)(a1 + 48);
            if ((unint64_t)v29 >= v28)
            {
              uint64_t v31 = (char *)*v10;
              uint64_t v32 = (v29 - (unsigned char *)*v10) >> 3;
              unint64_t v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 61) {
                goto LABEL_131;
              }
              uint64_t v34 = v28 - (void)v31;
              if (v34 >> 2 > v33) {
                unint64_t v33 = v34 >> 2;
              }
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v35 = v33;
              }
              if (v35)
              {
                unint64_t v36 = (char *)sub_190347A00(v11, v35);
                uint64_t v31 = *(char **)(a1 + 32);
                char v29 = *(char **)(a1 + 40);
              }
              else
              {
                unint64_t v36 = 0;
              }
              unint64_t v37 = &v36[8 * v32];
              *(void *)unint64_t v37 = 0;
              unsigned int v30 = v37 + 8;
              while (v29 != v31)
              {
                uint64_t v38 = *((void *)v29 - 1);
                v29 -= 8;
                *((void *)v37 - 1) = v38;
                v37 -= 8;
              }
              *(void *)(a1 + 32) = v37;
              *(void *)(a1 + 40) = v30;
              *(void *)(a1 + 48) = &v36[8 * v35];
              if (v31) {
                operator delete(v31);
              }
            }
            else
            {
              *(void *)char v29 = 0;
              unsigned int v30 = v29 + 8;
            }
            *(void *)(a1 + 40) = v30;
            unint64_t v39 = *((void *)this + 1);
            if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((void *)this + 2)) {
              goto LABEL_86;
            }
            *(v30 - 1) = *(void *)(*(void *)this + v39);
            unint64_t v27 = *((void *)this + 2);
            unint64_t v26 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v26;
          }
          goto LABEL_87;
        case 3u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v40 = *((void *)this + 1);
            unint64_t v41 = *((void *)this + 2);
            while (v40 < v41 && !*((unsigned char *)this + 24))
            {
              unint64_t v43 = *(char **)(a1 + 16);
              unint64_t v42 = *(void *)(a1 + 24);
              if ((unint64_t)v43 >= v42)
              {
                unint64_t v45 = (char *)*v8;
                uint64_t v46 = (v43 - (unsigned char *)*v8) >> 3;
                unint64_t v47 = v46 + 1;
                if ((unint64_t)(v46 + 1) >> 61) {
                  goto LABEL_132;
                }
                uint64_t v48 = v42 - (void)v45;
                if (v48 >> 2 > v47) {
                  unint64_t v47 = v48 >> 2;
                }
                if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v49 = v47;
                }
                if (v49)
                {
                  unint64_t v50 = (char *)sub_190347A00(v9, v49);
                  unint64_t v45 = *(char **)(a1 + 8);
                  unint64_t v43 = *(char **)(a1 + 16);
                }
                else
                {
                  unint64_t v50 = 0;
                }
                unint64_t v51 = &v50[8 * v46];
                *(void *)unint64_t v51 = 0;
                unint64_t v44 = v51 + 8;
                while (v43 != v45)
                {
                  uint64_t v52 = *((void *)v43 - 1);
                  v43 -= 8;
                  *((void *)v51 - 1) = v52;
                  v51 -= 8;
                }
                *(void *)(a1 + 8) = v51;
                *(void *)(a1 + 16) = v44;
                *(void *)(a1 + 24) = &v50[8 * v49];
                if (v45) {
                  operator delete(v45);
                }
              }
              else
              {
                *(void *)unint64_t v43 = 0;
                unint64_t v44 = v43 + 8;
              }
              *(void *)(a1 + 16) = v44;
              unint64_t v53 = *((void *)this + 1);
              if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((void *)this + 2))
              {
LABEL_86:
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v44 - 1) = *(void *)(*(void *)this + v53);
              unint64_t v41 = *((void *)this + 2);
              unint64_t v40 = *((void *)this + 1) + 8;
              *((void *)this + 1) = v40;
            }
LABEL_87:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v60 = *(char **)(a1 + 16);
            unint64_t v59 = *(void *)(a1 + 24);
            if ((unint64_t)v60 >= v59)
            {
              uint64_t v67 = (char *)*v8;
              uint64_t v68 = (v60 - (unsigned char *)*v8) >> 3;
              unint64_t v69 = v68 + 1;
              if ((unint64_t)(v68 + 1) >> 61) {
LABEL_132:
              }
                sub_1903479E8();
              uint64_t v70 = v59 - (void)v67;
              if (v70 >> 2 > v69) {
                unint64_t v69 = v70 >> 2;
              }
              if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v71 = v69;
              }
              if (v71)
              {
                uint64_t v72 = (char *)sub_190347A00(v9, v71);
                uint64_t v67 = *(char **)(a1 + 8);
                uint64_t v60 = *(char **)(a1 + 16);
              }
              else
              {
                uint64_t v72 = 0;
              }
              int v75 = &v72[8 * v68];
              *(void *)int v75 = 0;
              unint64_t v58 = v75 + 8;
              while (v60 != v67)
              {
                uint64_t v76 = *((void *)v60 - 1);
                v60 -= 8;
                *((void *)v75 - 1) = v76;
                v75 -= 8;
              }
              *(void *)(a1 + 8) = v75;
              *(void *)(a1 + 16) = v58;
              *(void *)(a1 + 24) = &v72[8 * v71];
              if (v67) {
                operator delete(v67);
              }
            }
            else
            {
              *(void *)uint64_t v60 = 0;
              unint64_t v58 = v60 + 8;
            }
            *(void *)(a1 + 16) = v58;
LABEL_118:
            unint64_t v77 = *((void *)this + 1);
            if (v77 <= 0xFFFFFFFFFFFFFFF7 && v77 + 8 <= *((void *)this + 2))
            {
              *(v58 - 1) = *(void *)(*(void *)this + v77);
LABEL_122:
              *((void *)this + 1) += 8;
            }
            else
            {
LABEL_120:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_123:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((unsigned char *)this + 24)) {
            return v4 == 0;
          }
          break;
        case 4u:
          *(unsigned char *)(a1 + 80) |= 2u;
          unint64_t v54 = *((void *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((void *)this + 2)) {
            goto LABEL_120;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v54);
          goto LABEL_122;
        case 5u:
          *(unsigned char *)(a1 + 80) |= 1u;
          unint64_t v55 = *((void *)this + 1);
          if (v55 > 0xFFFFFFFFFFFFFFF7 || v55 + 8 > *((void *)this + 2)) {
            goto LABEL_120;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v55);
          goto LABEL_122;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_123;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190309AC0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(unsigned char *)(result + 80) & 4) != 0) {
    double result = PB::Writer::write(this, *(double *)(result + 72));
  }
  int v4 = *(double **)(v3 + 32);
  __int16 v5 = *(double **)(v3 + 40);
  while (v4 != v5)
  {
    double v6 = *v4++;
    double result = PB::Writer::write(this, v6);
  }
  double v7 = *(double **)(v3 + 8);
  double v8 = *(double **)(v3 + 16);
  while (v7 != v8)
  {
    double v9 = *v7++;
    double result = PB::Writer::write(this, v9);
  }
  char v10 = *(unsigned char *)(v3 + 80);
  if ((v10 & 2) != 0)
  {
    double result = PB::Writer::write(this, *(double *)(v3 + 64));
    char v10 = *(unsigned char *)(v3 + 80);
  }
  if (v10)
  {
    double v11 = *(double *)(v3 + 56);
    return PB::Writer::write(this, v11);
  }
  return result;
}

void *sub_190309B90(void *result)
{
  *double result = &unk_1EDFCEFB0;
  result[1] = 0;
  return result;
}

void sub_190309BB4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190309BEC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 12)) {
    PB::TextFormatter::format(this, "trackingBehavior");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190309C4C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 12) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v3 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          else {
            unint64_t v2 = *((void *)this + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_42:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190309E84(uint64_t result, PB::Writer *this)
{
  if (*(unsigned char *)(result + 12)) {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

void *sub_190309EA4(void *result)
{
  *uint64_t result = &unk_1EDFCF560;
  result[1] = 0;
  return result;
}

void sub_190309EC8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190309F00(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 12)) {
    PB::TextFormatter::format(this, "clientMode");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190309F60(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 12) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v3 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          else {
            unint64_t v2 = *((void *)this + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_42:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19030A198(uint64_t result, PB::Writer *this)
{
  if (*(unsigned char *)(result + 12)) {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

uint64_t sub_19030A1B8(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCD260;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_19030A1E0(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19030A218(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if (v5)
  {
    PB::TextFormatter::format(this, "bpm");
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 16));
  if ((*(unsigned char *)(a1 + 32) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 24));
LABEL_5:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19030A2BC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  for (int i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; int i = *((unsigned __int8 *)this + 24))
  {
    uint64_t v8 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0;
          goto LABEL_20;
        }
      }
      int i = 1;
      *((unsigned char *)this + 24) = 1;
      return i == 0;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      int i = 0;
      return i == 0;
    }
    unint64_t v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *(unsigned char *)(a1 + 32) |= 2u;
      unint64_t v2 = *((void *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
      {
        *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_47:
        unint64_t v2 = *((void *)this + 1) + 8;
        *((void *)this + 1) = v2;
        goto LABEL_53;
      }
    }
    else
    {
      if (v20 != 2)
      {
        if (v20 == 1)
        {
          *(unsigned char *)(a1 + 32) |= 1u;
          unint64_t v21 = *((void *)this + 1);
          unint64_t v2 = *((void *)this + 2);
          uint64_t v22 = *(void *)this;
          if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
          {
            char v28 = 0;
            unsigned int v29 = 0;
            uint64_t v25 = 0;
            if (v2 <= v21) {
              unint64_t v2 = *((void *)this + 1);
            }
            while (1)
            {
              if (v2 == v21)
              {
                uint64_t v25 = 0;
                *((unsigned char *)this + 24) = 1;
                goto LABEL_52;
              }
              unint64_t v30 = v21++;
              char v31 = *(unsigned char *)(v22 + v30);
              *((void *)this + 1) = v21;
              v25 |= (unint64_t)(v31 & 0x7F) << v28;
              if ((v31 & 0x80) == 0) {
                break;
              }
              v28 += 7;
              BOOL v14 = v29++ > 8;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_51;
              }
            }
            if (*((unsigned char *)this + 24)) {
              uint64_t v25 = 0;
            }
LABEL_51:
            unint64_t v2 = v30 + 1;
          }
          else
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            while (1)
            {
              unint64_t v2 = v21 + 1;
              *((void *)this + 1) = v21 + 1;
              char v26 = *(unsigned char *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0) {
                break;
              }
              v23 += 7;
              unint64_t v21 = v2;
              BOOL v14 = v24++ > 8;
              if (v14)
              {
                uint64_t v25 = 0;
                break;
              }
            }
          }
LABEL_52:
          *(void *)(a1 + 8) = v25;
        }
        else
        {
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
        }
        goto LABEL_53;
      }
      *(unsigned char *)(a1 + 32) |= 4u;
      unint64_t v2 = *((void *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
      {
        *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
        goto LABEL_47;
      }
    }
    *((unsigned char *)this + 24) = 1;
LABEL_53:
    unint64_t v3 = *((void *)this + 2);
  }
  return i == 0;
}

uint64_t sub_19030A58C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(result + 32) & 4) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
    if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_7:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5);
}

void *sub_19030A618(void *result)
{
  *uint64_t result = &unk_1EDFD04B8;
  result[1] = 0;
  return result;
}

void sub_19030A638(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFD04B8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_19030A6B8(PB::Base *a1)
{
  sub_19030A638(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19030A6F0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19030A76C(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19030A968(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

uint64_t sub_19030A984(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFD0870;
  *(_DWORD *)(result + 128) = 0;
  return result;
}

void sub_19030A9AC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19030A9E4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "accelUnfilteredX", *(float *)(a1 + 40));
    int v5 = *(_DWORD *)(a1 + 128);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_33;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "accelUnfilteredY", *(float *)(a1 + 44));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "accelUnfilteredZ", *(float *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "accelX", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "accelY", *(float *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "accelZ", *(float *)(a1 + 60));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "flags");
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "gravityX", *(float *)(a1 + 68));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "gravityY", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x2000) == 0)
  {
LABEL_11:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "gravityZ", *(float *)(a1 + 76));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x4000) == 0)
  {
LABEL_12:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "gyroBiasErrorEstimate", *(float *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x8000) == 0)
  {
LABEL_13:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "quaternionPredictedW", *(float *)(a1 + 84));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10000) == 0)
  {
LABEL_14:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "quaternionPredictedX", *(float *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20000) == 0)
  {
LABEL_15:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "quaternionPredictedY", *(float *)(a1 + 92));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40000) == 0)
  {
LABEL_16:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "quaternionPredictedZ", *(float *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80000) == 0)
  {
LABEL_17:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "quaternionW", *(float *)(a1 + 100));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100000) == 0)
  {
LABEL_18:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "quaternionX", *(float *)(a1 + 104));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200000) == 0)
  {
LABEL_19:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "quaternionY", *(float *)(a1 + 108));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x400000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "quaternionZ", *(float *)(a1 + 112));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "rotationRateX", *(float *)(a1 + 116));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "rotationRateY", *(float *)(a1 + 120));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v5 & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "rotationRateZ", *(float *)(a1 + 124));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 1) == 0)
  {
LABEL_24:
    if ((v5 & 2) == 0) {
      goto LABEL_25;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 2) == 0)
  {
LABEL_25:
    if ((v5 & 4) == 0) {
      goto LABEL_26;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "timestampAccel", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 4) == 0)
  {
LABEL_26:
    if ((v5 & 8) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_55:
  PB::TextFormatter::format(this, "timestampAccelUnfiltered", *(double *)(a1 + 24));
  if ((*(_DWORD *)(a1 + 128) & 8) != 0) {
LABEL_27:
  }
    PB::TextFormatter::format(this, "timestampPrediction", *(double *)(a1 + 32));
LABEL_28:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19030AD68(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 128) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 2u:
              *(_DWORD *)(a1 + 128) |= 0x100000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 3u:
              *(_DWORD *)(a1 + 128) |= 0x200000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 4u:
              *(_DWORD *)(a1 + 128) |= 0x400000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 5u:
              *(_DWORD *)(a1 + 128) |= 0x80000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 6u:
              *(_DWORD *)(a1 + 128) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 7u:
              *(_DWORD *)(a1 + 128) |= 0x20000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 8u:
              *(_DWORD *)(a1 + 128) |= 0x40000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 9u:
              *(_DWORD *)(a1 + 128) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 0xAu:
              *(_DWORD *)(a1 + 128) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 0xBu:
              *(_DWORD *)(a1 + 128) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 0xCu:
              *(_DWORD *)(a1 + 128) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 0xDu:
              *(_DWORD *)(a1 + 128) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 0xEu:
              *(_DWORD *)(a1 + 128) |= 0x400u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_126;
                  }
                  unint64_t v29 = v21++;
                  char v30 = *(unsigned char *)(v22 + v29);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_125:
                    unint64_t v2 = v29 + 1;
                    goto LABEL_126;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_125;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_126;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_126:
              *(_DWORD *)(a1 + 64) = v25;
LABEL_117:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xFu:
              *(_DWORD *)(a1 + 128) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 0x10u:
              *(_DWORD *)(a1 + 128) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 0x11u:
              *(_DWORD *)(a1 + 128) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 0x12u:
              *(_DWORD *)(a1 + 128) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 0x13u:
              *(_DWORD *)(a1 + 128) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 0x14u:
              *(_DWORD *)(a1 + 128) |= 0x800000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 0x15u:
              *(_DWORD *)(a1 + 128) |= 0x1000000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 0x16u:
              *(_DWORD *)(a1 + 128) |= 0x2000000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 0x17u:
              *(_DWORD *)(a1 + 128) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_97:
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_116;
            case 0x18u:
              *(_DWORD *)(a1 + 128) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 0x19u:
              *(_DWORD *)(a1 + 128) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 0x1Au:
              *(_DWORD *)(a1 + 128) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
LABEL_115:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_116:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_106:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_117;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_117;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_19030B5C0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 128);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    int v4 = *(_DWORD *)(v3 + 128);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200000) == 0)
  {
LABEL_4:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400000) == 0)
  {
LABEL_5:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x8000) == 0)
  {
LABEL_10:
    if ((v4 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 8) == 0)
  {
LABEL_14:
    if ((v4 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400) == 0)
  {
LABEL_15:
    if ((v4 & 2) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 2) == 0)
  {
LABEL_16:
    if ((v4 & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x4000) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v4 & 4) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 124));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 4) == 0)
  {
LABEL_24:
    if ((v4 & 0x10) == 0) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10) == 0)
  {
LABEL_25:
    if ((v4 & 0x20) == 0) {
      goto LABEL_26;
    }
LABEL_52:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
    if ((*(_DWORD *)(v3 + 128) & 0x40) == 0) {
      return result;
    }
    goto LABEL_53;
  }
LABEL_51:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20) != 0) {
    goto LABEL_52;
  }
LABEL_26:
  if ((v4 & 0x40) == 0) {
    return result;
  }
LABEL_53:
  float v5 = *(float *)(v3 + 48);

  return PB::Writer::write(this, v5);
}

uint64_t sub_19030B8D0(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCDAE8;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_19030B8F8(void **a1)
{
  *a1 = &unk_1EDFCDAE8;
  unint64_t v2 = a1 + 1;
  sub_190347828(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_19030B954(void **a1)
{
  *a1 = &unk_1EDFCDAE8;
  uint64_t v3 = a1 + 1;
  sub_190347828(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x192FCC980]();
}

uint64_t sub_19030B9C4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 36)) {
    PB::TextFormatter::format(this, "lastSampleId");
  }
  float v5 = *(uint64_t **)(a1 + 8);
  double v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, this, "slowOptical");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19030BA78(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 36) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v21 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v25 = 0;
          if (v21 <= v20) {
            unint64_t v21 = *((void *)this + 1);
          }
          while (1)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v31 = v20 + 1;
            char v32 = *(unsigned char *)(v22 + v20);
            *((void *)this + 1) = v31;
            v25 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v20 = v31;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
LABEL_39:
              LODWORD(v25) = 0;
              goto LABEL_43;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v25) = 0;
          }
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v26 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
            if (v14) {
              goto LABEL_39;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 32) = v25;
      }
      else
      {
        if ((v11 >> 3) == 1) {
          sub_19030BD2C();
        }
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

void sub_19030BD2C()
{
}

void sub_19030BE28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_190347EEC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19030BE6C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base ***)(result + 8);
  float v5 = *(const PB::Base ***)(result + 16);
  while (v4 != v5)
  {
    double v6 = *v4++;
    uint64_t result = PB::Writer::writeSubmessage(this, v6);
  }
  if (*(unsigned char *)(v3 + 36))
  {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

double sub_19030BEEC(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCBAF8;
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  return result;
}

void sub_19030BF24(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCBAF8;
  int v4 = (void **)(a1 + 24);
  sub_190347828(&v4);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  PB::Base::~Base((PB::Base *)a1);
}

void sub_19030BFE4(uint64_t a1)
{
  sub_19030BF24(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19030C01C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 60);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "conchaMinAccepted");
    char v5 = *(unsigned char *)(a1 + 60);
  }
  if (v5) {
    PB::TextFormatter::format(this, "location");
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, this, "newOpenLid");
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, this, "oldOpenLid");
  }
  uint64_t v8 = *(uint64_t **)(a1 + 24);
  char v9 = *(uint64_t **)(a1 + 32);
  while (v8 != v9)
  {
    uint64_t v10 = *v8++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, this, "optical");
  }
  char v11 = *(unsigned char *)(a1 + 60);
  if ((v11 & 2) != 0)
  {
    PB::TextFormatter::format(this, "state");
    char v11 = *(unsigned char *)(a1 + 60);
  }
  if ((v11 & 8) != 0) {
    PB::TextFormatter::format(this, "tragusMinAccepted");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19030C19C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 60) |= 1u;
          unint64_t v20 = *((void *)this + 1);
          unint64_t v21 = *((void *)this + 2);
          uint64_t v22 = *(void *)this;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            do
            {
              unint64_t v26 = v20 + 1;
              *((void *)this + 1) = v20 + 1;
              char v27 = *(unsigned char *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0) {
                goto LABEL_66;
              }
              v23 += 7;
              unint64_t v20 = v26;
              BOOL v14 = v24++ > 8;
            }
            while (!v14);
LABEL_51:
            LODWORD(v25) = 0;
            goto LABEL_66;
          }
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v25 = 0;
          if (v21 <= v20) {
            unint64_t v21 = *((void *)this + 1);
          }
          while (2)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v47 = v20 + 1;
              char v48 = *(unsigned char *)(v22 + v20);
              *((void *)this + 1) = v47;
              v25 |= (unint64_t)(v48 & 0x7F) << v45;
              if (v48 < 0)
              {
                v45 += 7;
                unint64_t v20 = v47;
                BOOL v14 = v46++ > 8;
                if (v14) {
                  goto LABEL_51;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v25) = 0;
              }
            }
            break;
          }
LABEL_66:
          *(_DWORD *)(a1 + 48) = v25;
          goto LABEL_71;
        case 2u:
          *(unsigned char *)(a1 + 60) |= 2u;
          unint64_t v29 = *((void *)this + 1);
          unint64_t v30 = *((void *)this + 2);
          uint64_t v31 = *(void *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)this + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_70;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v14 = v33++ > 8;
            }
            while (!v14);
LABEL_58:
            LODWORD(v34) = 0;
            goto LABEL_70;
          }
          char v49 = 0;
          unsigned int v50 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)this + 1);
          }
          break;
        case 3u:
          sub_19030BD2C();
        case 4u:
          operator new();
        case 5u:
          operator new();
        case 6u:
          *(unsigned char *)(a1 + 60) |= 4u;
          unint64_t v37 = *((void *)this + 1);
          if (v37 >= *((void *)this + 2))
          {
            BOOL v40 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v38 = v37 + 1;
            int v39 = *(unsigned __int8 *)(*(void *)this + v37);
            *((void *)this + 1) = v38;
            BOOL v40 = v39 != 0;
          }
          *(unsigned char *)(a1 + 56) = v40;
          goto LABEL_71;
        case 7u:
          *(unsigned char *)(a1 + 60) |= 8u;
          unint64_t v41 = *((void *)this + 1);
          if (v41 >= *((void *)this + 2))
          {
            BOOL v44 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v42 = v41 + 1;
            int v43 = *(unsigned __int8 *)(*(void *)this + v41);
            *((void *)this + 1) = v42;
            BOOL v44 = v43 != 0;
          }
          *(unsigned char *)(a1 + 57) = v44;
          goto LABEL_71;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          goto LABEL_71;
      }
      while (1)
      {
        if (v30 == v29)
        {
          LODWORD(v34) = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_70;
        }
        unint64_t v51 = v29 + 1;
        char v52 = *(unsigned char *)(v31 + v29);
        *((void *)this + 1) = v51;
        v34 |= (unint64_t)(v52 & 0x7F) << v49;
        if ((v52 & 0x80) == 0) {
          break;
        }
        v49 += 7;
        unint64_t v29 = v51;
        BOOL v14 = v50++ > 8;
        if (v14) {
          goto LABEL_58;
        }
      }
      if (*((unsigned char *)this + 24)) {
        LODWORD(v34) = 0;
      }
LABEL_70:
      *(_DWORD *)(a1 + 52) = v34;
LABEL_71:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19030C6A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 60);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 60);
  }
  if ((v4 & 2) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this);
  }
  char v5 = *(const PB::Base ***)(v3 + 24);
  uint64_t v6 = *(const PB::Base ***)(v3 + 32);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    uint64_t result = PB::Writer::writeSubmessage(this, v7);
  }
  uint64_t v8 = *(const PB::Base **)(v3 + 16);
  if (v8) {
    uint64_t result = PB::Writer::writeSubmessage(this, v8);
  }
  char v9 = *(const PB::Base **)(v3 + 8);
  if (v9) {
    uint64_t result = PB::Writer::writeSubmessage(this, v9);
  }
  char v10 = *(unsigned char *)(v3 + 60);
  if ((v10 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this);
    char v10 = *(unsigned char *)(v3 + 60);
  }
  if ((v10 & 8) != 0)
  {
    return PB::Writer::write(this);
  }
  return result;
}

uint64_t sub_19030C794(uint64_t result)
{
  *(_DWORD *)(result + 56) = 0;
  *(void *)uint64_t result = &unk_1EDFCC380;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

void sub_19030C7BC(PB::Base *this)
{
  *(void *)this = &unk_1EDFCC380;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  PB::Base::~Base(this);
}

void sub_19030C8A0(PB::Base *a1)
{
  sub_19030C7BC(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19030C8D8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "baseline");
  }
  char v6 = *(unsigned char *)(a1 + 56);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(this, "conchaOpenResponse", *(float *)(a1 + 40));
    char v6 = *(unsigned char *)(a1 + 56);
  }
  if ((v6 & 4) != 0) {
    PB::TextFormatter::format(this, "filter", *(float *)(a1 + 44));
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, this, "lastBaseline");
  }
  if ((*(unsigned char *)(a1 + 56) & 8) != 0) {
    PB::TextFormatter::format(this, "location");
  }
  uint64_t v8 = *(void *)(a1 + 24);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, this, "minimum");
  }
  char v9 = *(unsigned char *)(a1 + 56);
  if ((v9 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "rho", *(float *)(a1 + 52));
    char v9 = *(unsigned char *)(a1 + 56);
  }
  if (v9) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19030CA50(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 56) |= 1u;
          unint64_t v20 = *((void *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)this + 2)) {
            goto LABEL_45;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v20);
          uint64_t v21 = *((void *)this + 1) + 8;
          goto LABEL_55;
        case 2u:
          *(unsigned char *)(a1 + 56) |= 8u;
          unint64_t v23 = *((void *)this + 1);
          unint64_t v24 = *((void *)this + 2);
          uint64_t v25 = *(void *)this;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            char v26 = 0;
            unsigned int v27 = 0;
            uint64_t v28 = 0;
            do
            {
              unint64_t v29 = v23 + 1;
              *((void *)this + 1) = v23 + 1;
              char v30 = *(unsigned char *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0) {
                goto LABEL_59;
              }
              v26 += 7;
              unint64_t v23 = v29;
              BOOL v14 = v27++ > 8;
            }
            while (!v14);
LABEL_52:
            LODWORD(v28) = 0;
            goto LABEL_59;
          }
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v28 = 0;
          if (v24 <= v23) {
            unint64_t v24 = *((void *)this + 1);
          }
          break;
        case 3u:
          operator new();
        case 4u:
          operator new();
        case 5u:
          operator new();
        case 6u:
          *(unsigned char *)(a1 + 56) |= 2u;
          unint64_t v31 = *((void *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((void *)this + 2)) {
            goto LABEL_45;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v31);
          goto LABEL_54;
        case 7u:
          *(unsigned char *)(a1 + 56) |= 0x10u;
          unint64_t v32 = *((void *)this + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((void *)this + 2)) {
            goto LABEL_45;
          }
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v32);
          goto LABEL_54;
        case 8u:
          *(unsigned char *)(a1 + 56) |= 4u;
          unint64_t v33 = *((void *)this + 1);
          if (v33 <= 0xFFFFFFFFFFFFFFFBLL && v33 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v33);
LABEL_54:
            uint64_t v21 = *((void *)this + 1) + 4;
LABEL_55:
            *((void *)this + 1) = v21;
          }
          else
          {
LABEL_45:
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_60;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          goto LABEL_60;
      }
      while (1)
      {
        if (v24 == v23)
        {
          LODWORD(v28) = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_59;
        }
        unint64_t v36 = v23 + 1;
        char v37 = *(unsigned char *)(v25 + v23);
        *((void *)this + 1) = v36;
        v28 |= (unint64_t)(v37 & 0x7F) << v34;
        if ((v37 & 0x80) == 0) {
          break;
        }
        v34 += 7;
        unint64_t v23 = v36;
        BOOL v14 = v35++ > 8;
        if (v14) {
          goto LABEL_52;
        }
      }
      if (*((unsigned char *)this + 24)) {
        LODWORD(v28) = 0;
      }
LABEL_59:
      *(_DWORD *)(a1 + 48) = v28;
LABEL_60:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19030CF24(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 56);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32));
    char v4 = *(unsigned char *)(v3 + 56);
  }
  if ((v4 & 8) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 24);
  if (v5) {
    uint64_t result = PB::Writer::writeSubmessage(this, v5);
  }
  char v6 = *(const PB::Base **)(v3 + 8);
  if (v6) {
    uint64_t result = PB::Writer::writeSubmessage(this, v6);
  }
  uint64_t v7 = *(const PB::Base **)(v3 + 16);
  if (v7) {
    uint64_t result = PB::Writer::writeSubmessage(this, v7);
  }
  char v8 = *(unsigned char *)(v3 + 56);
  if ((v8 & 2) == 0)
  {
    if ((*(unsigned char *)(v3 + 56) & 0x10) == 0) {
      goto LABEL_13;
    }
LABEL_16:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
    if ((*(unsigned char *)(v3 + 56) & 4) == 0) {
      return result;
    }
    goto LABEL_17;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  char v8 = *(unsigned char *)(v3 + 56);
  if ((v8 & 0x10) != 0) {
    goto LABEL_16;
  }
LABEL_13:
  if ((v8 & 4) == 0) {
    return result;
  }
LABEL_17:
  float v9 = *(float *)(v3 + 44);

  return PB::Writer::write(this, v9);
}

uint64_t sub_19030D01C(uint64_t result)
{
  *(_DWORD *)(result + 48) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = &unk_1EDFCC700;
  return result;
}

void sub_19030D044(PB::Base *this)
{
  *(void *)this = &unk_1EDFCC700;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  PB::Base::~Base(this);
}

void sub_19030D0F8(PB::Base *a1)
{
  sub_19030D044(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19030D130(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "above");
    __int16 v5 = *(_WORD *)(a1 + 48);
  }
  if ((v5 & 8) != 0) {
    PB::TextFormatter::format(this, "below");
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, this, "current");
  }
  __int16 v7 = *(_WORD *)(a1 + 48);
  if ((v7 & 2) != 0)
  {
    PB::TextFormatter::format(this, "location");
    __int16 v7 = *(_WORD *)(a1 + 48);
    if ((v7 & 0x10) == 0)
    {
LABEL_9:
      if ((v7 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_25;
    }
  }
  else if ((v7 & 0x10) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(this, "moving");
  __int16 v7 = *(_WORD *)(a1 + 48);
  if ((v7 & 0x20) == 0)
  {
LABEL_10:
    if ((v7 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_25:
  PB::TextFormatter::format(this, "partialin");
  if ((*(_WORD *)(a1 + 48) & 0x40) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(this, "stable");
LABEL_12:
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, this, "threshold");
  }
  __int16 v9 = *(_WORD *)(a1 + 48);
  if (v9)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 24));
    __int16 v9 = *(_WORD *)(a1 + 48);
    if ((v9 & 0x80) == 0)
    {
LABEL_16:
      if ((v9 & 0x100) == 0) {
        goto LABEL_17;
      }
      goto LABEL_29;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_16;
  }
  PB::TextFormatter::format(this, "upright");
  __int16 v9 = *(_WORD *)(a1 + 48);
  if ((v9 & 0x100) == 0)
  {
LABEL_17:
    if ((v9 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "upsidedown");
  __int16 v9 = *(_WORD *)(a1 + 48);
  if ((v9 & 0x200) == 0)
  {
LABEL_18:
    if ((v9 & 0x400) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_30:
  PB::TextFormatter::format(this, "vertical");
  if ((*(_WORD *)(a1 + 48) & 0x400) != 0) {
LABEL_19:
  }
    PB::TextFormatter::format(this, "walking");
LABEL_20:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19030D33C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 48) |= 1u;
          unint64_t v20 = *((void *)this + 1);
          if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 24) = *(void *)(*(void *)this + v20);
            *((void *)this + 1) += 8;
          }
          else
          {
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_84;
        case 2u:
          *(_WORD *)(a1 + 48) |= 2u;
          unint64_t v22 = *((void *)this + 1);
          unint64_t v23 = *((void *)this + 2);
          uint64_t v24 = *(void *)this;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            char v25 = 0;
            unsigned int v26 = 0;
            uint64_t v27 = 0;
            do
            {
              unint64_t v28 = v22 + 1;
              *((void *)this + 1) = v22 + 1;
              char v29 = *(unsigned char *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0) {
                goto LABEL_83;
              }
              v25 += 7;
              unint64_t v22 = v28;
              BOOL v14 = v26++ > 8;
            }
            while (!v14);
LABEL_60:
            LODWORD(v27) = 0;
            goto LABEL_83;
          }
          char v66 = 0;
          unsigned int v67 = 0;
          uint64_t v27 = 0;
          if (v23 <= v22) {
            unint64_t v23 = *((void *)this + 1);
          }
          break;
        case 3u:
          operator new();
        case 4u:
          operator new();
        case 5u:
          *(_WORD *)(a1 + 48) |= 0x80u;
          unint64_t v30 = *((void *)this + 1);
          if (v30 >= *((void *)this + 2))
          {
            BOOL v33 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v31 = v30 + 1;
            int v32 = *(unsigned __int8 *)(*(void *)this + v30);
            *((void *)this + 1) = v31;
            BOOL v33 = v32 != 0;
          }
          *(unsigned char *)(a1 + 41) = v33;
          goto LABEL_84;
        case 6u:
          *(_WORD *)(a1 + 48) |= 0x20u;
          unint64_t v34 = *((void *)this + 1);
          if (v34 >= *((void *)this + 2))
          {
            BOOL v37 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v35 = v34 + 1;
            int v36 = *(unsigned __int8 *)(*(void *)this + v34);
            *((void *)this + 1) = v35;
            BOOL v37 = v36 != 0;
          }
          *(unsigned char *)(a1 + 39) = v37;
          goto LABEL_84;
        case 7u:
          *(_WORD *)(a1 + 48) |= 4u;
          unint64_t v38 = *((void *)this + 1);
          if (v38 >= *((void *)this + 2))
          {
            BOOL v41 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v39 = v38 + 1;
            int v40 = *(unsigned __int8 *)(*(void *)this + v38);
            *((void *)this + 1) = v39;
            BOOL v41 = v40 != 0;
          }
          *(unsigned char *)(a1 + 36) = v41;
          goto LABEL_84;
        case 8u:
          *(_WORD *)(a1 + 48) |= 8u;
          unint64_t v42 = *((void *)this + 1);
          if (v42 >= *((void *)this + 2))
          {
            BOOL v45 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v43 = v42 + 1;
            int v44 = *(unsigned __int8 *)(*(void *)this + v42);
            *((void *)this + 1) = v43;
            BOOL v45 = v44 != 0;
          }
          *(unsigned char *)(a1 + 37) = v45;
          goto LABEL_84;
        case 9u:
          *(_WORD *)(a1 + 48) |= 0x40u;
          unint64_t v46 = *((void *)this + 1);
          if (v46 >= *((void *)this + 2))
          {
            BOOL v49 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v47 = v46 + 1;
            int v48 = *(unsigned __int8 *)(*(void *)this + v46);
            *((void *)this + 1) = v47;
            BOOL v49 = v48 != 0;
          }
          *(unsigned char *)(a1 + 40) = v49;
          goto LABEL_84;
        case 0xAu:
          *(_WORD *)(a1 + 48) |= 0x200u;
          unint64_t v50 = *((void *)this + 1);
          if (v50 >= *((void *)this + 2))
          {
            BOOL v53 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v51 = v50 + 1;
            int v52 = *(unsigned __int8 *)(*(void *)this + v50);
            *((void *)this + 1) = v51;
            BOOL v53 = v52 != 0;
          }
          *(unsigned char *)(a1 + 43) = v53;
          goto LABEL_84;
        case 0xBu:
          *(_WORD *)(a1 + 48) |= 0x100u;
          unint64_t v54 = *((void *)this + 1);
          if (v54 >= *((void *)this + 2))
          {
            BOOL v57 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v55 = v54 + 1;
            int v56 = *(unsigned __int8 *)(*(void *)this + v54);
            *((void *)this + 1) = v55;
            BOOL v57 = v56 != 0;
          }
          *(unsigned char *)(a1 + 42) = v57;
          goto LABEL_84;
        case 0xCu:
          *(_WORD *)(a1 + 48) |= 0x10u;
          unint64_t v58 = *((void *)this + 1);
          if (v58 >= *((void *)this + 2))
          {
            BOOL v61 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v59 = v58 + 1;
            int v60 = *(unsigned __int8 *)(*(void *)this + v58);
            *((void *)this + 1) = v59;
            BOOL v61 = v60 != 0;
          }
          *(unsigned char *)(a1 + 38) = v61;
          goto LABEL_84;
        case 0xDu:
          *(_WORD *)(a1 + 48) |= 0x400u;
          unint64_t v62 = *((void *)this + 1);
          if (v62 >= *((void *)this + 2))
          {
            BOOL v65 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v63 = v62 + 1;
            int v64 = *(unsigned __int8 *)(*(void *)this + v62);
            *((void *)this + 1) = v63;
            BOOL v65 = v64 != 0;
          }
          *(unsigned char *)(a1 + 44) = v65;
          goto LABEL_84;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          goto LABEL_84;
      }
      while (1)
      {
        if (v23 == v22)
        {
          LODWORD(v27) = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_83;
        }
        unint64_t v68 = v22 + 1;
        char v69 = *(unsigned char *)(v24 + v22);
        *((void *)this + 1) = v68;
        v27 |= (unint64_t)(v69 & 0x7F) << v66;
        if ((v69 & 0x80) == 0) {
          break;
        }
        v66 += 7;
        unint64_t v22 = v68;
        BOOL v14 = v67++ > 8;
        if (v14) {
          goto LABEL_60;
        }
      }
      if (*((unsigned char *)this + 24)) {
        LODWORD(v27) = 0;
      }
LABEL_83:
      *(_DWORD *)(a1 + 32) = v27;
LABEL_84:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19030D980(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 48);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24));
    __int16 v4 = *(_WORD *)(v3 + 48);
  }
  if ((v4 & 2) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this);
  }
  __int16 v5 = *(const PB::Base **)(v3 + 8);
  if (v5) {
    uint64_t result = PB::Writer::writeSubmessage(this, v5);
  }
  uint64_t v6 = *(const PB::Base **)(v3 + 16);
  if (v6) {
    uint64_t result = PB::Writer::writeSubmessage(this, v6);
  }
  __int16 v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x80) != 0)
  {
    uint64_t result = PB::Writer::write(this);
    __int16 v7 = *(_WORD *)(v3 + 48);
    if ((v7 & 0x20) == 0)
    {
LABEL_11:
      if ((v7 & 4) == 0) {
        goto LABEL_12;
      }
      goto LABEL_21;
    }
  }
  else if ((v7 & 0x20) == 0)
  {
    goto LABEL_11;
  }
  uint64_t result = PB::Writer::write(this);
  __int16 v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 4) == 0)
  {
LABEL_12:
    if ((v7 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this);
  __int16 v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 8) == 0)
  {
LABEL_13:
    if ((v7 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this);
  __int16 v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x40) == 0)
  {
LABEL_14:
    if ((v7 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this);
  __int16 v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x200) == 0)
  {
LABEL_15:
    if ((v7 & 0x100) == 0) {
      goto LABEL_16;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this);
  __int16 v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x100) == 0)
  {
LABEL_16:
    if ((v7 & 0x10) == 0) {
      goto LABEL_17;
    }
LABEL_26:
    uint64_t result = PB::Writer::write(this);
    if ((*(_WORD *)(v3 + 48) & 0x400) == 0) {
      return result;
    }
    goto LABEL_27;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this);
  __int16 v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x10) != 0) {
    goto LABEL_26;
  }
LABEL_17:
  if ((v7 & 0x400) == 0) {
    return result;
  }
LABEL_27:

  return PB::Writer::write(this);
}

uint64_t sub_19030DB0C(uint64_t result)
{
  *(_DWORD *)(result + 44) = 0;
  *(void *)uint64_t result = &unk_1EDFCB5F0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

void sub_19030DB34(PB::Base *this)
{
  *(void *)this = &unk_1EDFCB5F0;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  PB::Base::~Base(this);
}

void sub_19030DC18(PB::Base *a1)
{
  sub_19030DB34(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19030DC50(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "current");
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, this, "last");
  }
  if ((*(unsigned char *)(a1 + 44) & 2) != 0) {
    PB::TextFormatter::format(this, "location");
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, this, "minimum");
  }
  if (*(unsigned char *)(a1 + 44)) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19030DD74(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 44) |= 1u;
          unint64_t v20 = *((void *)this + 1);
          if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 32) = *(void *)(*(void *)this + v20);
            *((void *)this + 1) += 8;
          }
          else
          {
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_49;
        case 2u:
          *(unsigned char *)(a1 + 44) |= 2u;
          unint64_t v22 = *((void *)this + 1);
          unint64_t v23 = *((void *)this + 2);
          uint64_t v24 = *(void *)this;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            char v25 = 0;
            unsigned int v26 = 0;
            uint64_t v27 = 0;
            do
            {
              unint64_t v28 = v22 + 1;
              *((void *)this + 1) = v22 + 1;
              char v29 = *(unsigned char *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0) {
                goto LABEL_48;
              }
              v25 += 7;
              unint64_t v22 = v28;
              BOOL v14 = v26++ > 8;
            }
            while (!v14);
LABEL_43:
            LODWORD(v27) = 0;
            goto LABEL_48;
          }
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v27 = 0;
          if (v23 <= v22) {
            unint64_t v23 = *((void *)this + 1);
          }
          break;
        case 3u:
          operator new();
        case 4u:
          operator new();
        case 5u:
          operator new();
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          goto LABEL_49;
      }
      while (1)
      {
        if (v23 == v22)
        {
          LODWORD(v27) = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_48;
        }
        unint64_t v32 = v22 + 1;
        char v33 = *(unsigned char *)(v24 + v22);
        *((void *)this + 1) = v32;
        v27 |= (unint64_t)(v33 & 0x7F) << v30;
        if ((v33 & 0x80) == 0) {
          break;
        }
        v30 += 7;
        unint64_t v22 = v32;
        BOOL v14 = v31++ > 8;
        if (v14) {
          goto LABEL_43;
        }
      }
      if (*((unsigned char *)this + 24)) {
        LODWORD(v27) = 0;
      }
LABEL_48:
      *(_DWORD *)(a1 + 40) = v27;
LABEL_49:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19030E18C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 44);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32));
    char v4 = *(unsigned char *)(v3 + 44);
  }
  if ((v4 & 2) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 24);
  if (v5) {
    uint64_t result = PB::Writer::writeSubmessage(this, v5);
  }
  uint64_t v6 = *(const PB::Base **)(v3 + 8);
  if (v6) {
    uint64_t result = PB::Writer::writeSubmessage(this, v6);
  }
  uint64_t v7 = *(const PB::Base **)(v3 + 16);
  if (v7)
  {
    return PB::Writer::writeSubmessage(this, v7);
  }
  return result;
}

double sub_19030E234(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCB628;
  *(_DWORD *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + 108) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  return result;
}

void sub_19030E270(PB::Base *this)
{
  *(void *)this = &unk_1EDFCB628;
  uint64_t v2 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }

  PB::Base::~Base(this);
}

void sub_19030E344(PB::Base *a1)
{
  sub_19030E270(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19030E37C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(float **)(a1 + 8);
  uint64_t v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "acceleration", v7);
  }
  if ((*(unsigned char *)(a1 + 108) & 2) != 0) {
    PB::TextFormatter::format(this, "correlation", *(float *)(a1 + 80));
  }
  uint64_t v8 = *(void *)(a1 + 56);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, this, "current");
  }
  if ((*(unsigned char *)(a1 + 108) & 4) != 0) {
    PB::TextFormatter::format(this, "deltatip", *(float *)(a1 + 84));
  }
  uint64_t v9 = *(void *)(a1 + 64);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, this, "instability");
  }
  char v10 = *(unsigned char *)(a1 + 108);
  if ((v10 & 8) != 0)
  {
    PB::TextFormatter::format(this, "location");
    char v10 = *(unsigned char *)(a1 + 108);
    if ((v10 & 0x10) == 0)
    {
LABEL_13:
      if ((v10 & 0x20) == 0) {
        goto LABEL_14;
      }
      goto LABEL_24;
    }
  }
  else if ((*(unsigned char *)(a1 + 108) & 0x10) == 0)
  {
    goto LABEL_13;
  }
  PB::TextFormatter::format(this, "state");
  char v10 = *(unsigned char *)(a1 + 108);
  if ((v10 & 0x20) == 0)
  {
LABEL_14:
    if ((v10 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "tilt", *(float *)(a1 + 96));
  char v10 = *(unsigned char *)(a1 + 108);
  if ((v10 & 1) == 0)
  {
LABEL_15:
    if ((v10 & 0x40) == 0) {
      goto LABEL_16;
    }
LABEL_26:
    PB::TextFormatter::format(this, "tip", *(float *)(a1 + 100));
    if ((*(unsigned char *)(a1 + 108) & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_27;
  }
LABEL_25:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 72));
  char v10 = *(unsigned char *)(a1 + 108);
  if ((v10 & 0x40) != 0) {
    goto LABEL_26;
  }
LABEL_16:
  if ((v10 & 0x80) == 0) {
    goto LABEL_17;
  }
LABEL_27:
  PB::TextFormatter::format(this, "upright");
LABEL_17:
  unint64_t v11 = *(float **)(a1 + 32);
  unint64_t v12 = *(float **)(a1 + 40);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(this, "variance", v13);
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_19030E590(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)(a1 + 32);
    uint64_t v9 = a1 + 48;
    char v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 108) |= 1u;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)this + 2)) {
            goto LABEL_168;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v25);
          uint64_t v26 = *((void *)this + 1) + 8;
          goto LABEL_171;
        case 2u:
          *(unsigned char *)(a1 + 108) |= 8u;
          unint64_t v27 = *((void *)this + 1);
          unint64_t v28 = *((void *)this + 2);
          uint64_t v29 = *(void *)this;
          if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
          {
            char v30 = 0;
            unsigned int v31 = 0;
            uint64_t v32 = 0;
            do
            {
              unint64_t v33 = v27 + 1;
              *((void *)this + 1) = v27 + 1;
              char v34 = *(unsigned char *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0) {
                goto LABEL_148;
              }
              v30 += 7;
              unint64_t v27 = v33;
              BOOL v18 = v31++ > 8;
            }
            while (!v18);
LABEL_113:
            LODWORD(v32) = 0;
            goto LABEL_148;
          }
          char v79 = 0;
          unsigned int v80 = 0;
          uint64_t v32 = 0;
          if (v28 <= v27) {
            unint64_t v28 = *((void *)this + 1);
          }
          while (2)
          {
            if (v28 == v27)
            {
              LODWORD(v32) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v81 = v27 + 1;
              char v82 = *(unsigned char *)(v29 + v27);
              *((void *)this + 1) = v81;
              v32 |= (unint64_t)(v82 & 0x7F) << v79;
              if (v82 < 0)
              {
                v79 += 7;
                unint64_t v27 = v81;
                BOOL v18 = v80++ > 8;
                if (v18) {
                  goto LABEL_113;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v32) = 0;
              }
            }
            break;
          }
LABEL_148:
          *(_DWORD *)(a1 + 88) = v32;
          goto LABEL_172;
        case 3u:
          operator new();
        case 4u:
          operator new();
        case 5u:
          if (v24 != 2)
          {
            uint64_t v84 = *(char **)(a1 + 16);
            unint64_t v83 = *(void *)(a1 + 24);
            if ((unint64_t)v84 >= v83)
            {
              unint64_t v92 = (char *)*v10;
              uint64_t v93 = (v84 - (unsigned char *)*v10) >> 2;
              unint64_t v94 = v93 + 1;
              if ((unint64_t)(v93 + 1) >> 62) {
LABEL_183:
              }
                sub_1903479E8();
              uint64_t v95 = v83 - (void)v92;
              if (v95 >> 1 > v94) {
                unint64_t v94 = v95 >> 1;
              }
              if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v96 = v94;
              }
              if (v96)
              {
                char v97 = (char *)sub_190347D04(v11, v96);
                unint64_t v92 = *(char **)(a1 + 8);
                uint64_t v84 = *(char **)(a1 + 16);
              }
              else
              {
                char v97 = 0;
              }
              unint64_t v104 = &v97[4 * v93];
              *(_DWORD *)unint64_t v104 = 0;
              unint64_t v85 = v104 + 4;
              while (v84 != v92)
              {
                int v105 = *((_DWORD *)v84 - 1);
                v84 -= 4;
                *((_DWORD *)v104 - 1) = v105;
                v104 -= 4;
              }
              *(void *)(a1 + 8) = v104;
              *(void *)(a1 + 16) = v85;
              *(void *)(a1 + 24) = &v97[4 * v96];
              if (v92) {
                operator delete(v92);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v84 = 0;
              unint64_t v85 = v84 + 4;
            }
            *(void *)(a1 + 16) = v85;
            goto LABEL_166;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v35 = *((void *)this + 1);
          unint64_t v36 = *((void *)this + 2);
          while (v35 < v36 && !*((unsigned char *)this + 24))
          {
            unint64_t v38 = *(char **)(a1 + 16);
            unint64_t v37 = *(void *)(a1 + 24);
            if ((unint64_t)v38 >= v37)
            {
              int v40 = (char *)*v10;
              uint64_t v41 = (v38 - (unsigned char *)*v10) >> 2;
              unint64_t v42 = v41 + 1;
              if ((unint64_t)(v41 + 1) >> 62) {
                goto LABEL_183;
              }
              uint64_t v43 = v37 - (void)v40;
              if (v43 >> 1 > v42) {
                unint64_t v42 = v43 >> 1;
              }
              if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v44 = v42;
              }
              if (v44)
              {
                BOOL v45 = (char *)sub_190347D04(v11, v44);
                int v40 = *(char **)(a1 + 8);
                unint64_t v38 = *(char **)(a1 + 16);
              }
              else
              {
                BOOL v45 = 0;
              }
              unint64_t v46 = &v45[4 * v41];
              *(_DWORD *)unint64_t v46 = 0;
              unint64_t v39 = v46 + 4;
              while (v38 != v40)
              {
                int v47 = *((_DWORD *)v38 - 1);
                v38 -= 4;
                *((_DWORD *)v46 - 1) = v47;
                v46 -= 4;
              }
              *(void *)(a1 + 8) = v46;
              *(void *)(a1 + 16) = v39;
              *(void *)(a1 + 24) = &v45[4 * v44];
              if (v40) {
                operator delete(v40);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v38 = 0;
              unint64_t v39 = v38 + 4;
            }
            *(void *)(a1 + 16) = v39;
            unint64_t v48 = *((void *)this + 1);
            if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((void *)this + 2)) {
              goto LABEL_127;
            }
            *(v39 - 1) = *(_DWORD *)(*(void *)this + v48);
            unint64_t v36 = *((void *)this + 2);
            unint64_t v35 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v35;
          }
          goto LABEL_37;
        case 6u:
          *(unsigned char *)(a1 + 108) |= 0x40u;
          unint64_t v49 = *((void *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)this + 2)) {
            goto LABEL_168;
          }
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v49);
          goto LABEL_170;
        case 7u:
          *(unsigned char *)(a1 + 108) |= 0x20u;
          unint64_t v50 = *((void *)this + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)this + 2)) {
            goto LABEL_168;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v50);
          goto LABEL_170;
        case 8u:
          *(unsigned char *)(a1 + 108) |= 0x80u;
          unint64_t v51 = *((void *)this + 1);
          if (v51 >= *((void *)this + 2))
          {
            BOOL v54 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v52 = v51 + 1;
            int v53 = *(unsigned __int8 *)(*(void *)this + v51);
            *((void *)this + 1) = v52;
            BOOL v54 = v53 != 0;
          }
          *(unsigned char *)(a1 + 104) = v54;
          goto LABEL_172;
        case 9u:
          *(unsigned char *)(a1 + 108) |= 0x10u;
          unint64_t v55 = *((void *)this + 1);
          unint64_t v56 = *((void *)this + 2);
          uint64_t v57 = *(void *)this;
          if (v55 <= 0xFFFFFFFFFFFFFFF5 && v55 + 10 <= v56)
          {
            char v58 = 0;
            unsigned int v59 = 0;
            uint64_t v60 = 0;
            do
            {
              unint64_t v61 = v55 + 1;
              *((void *)this + 1) = v55 + 1;
              char v62 = *(unsigned char *)(v57 + v55);
              v60 |= (unint64_t)(v62 & 0x7F) << v58;
              if ((v62 & 0x80) == 0) {
                goto LABEL_151;
              }
              v58 += 7;
              unint64_t v55 = v61;
              BOOL v18 = v59++ > 8;
            }
            while (!v18);
LABEL_124:
            LODWORD(v60) = 0;
            goto LABEL_151;
          }
          char v86 = 0;
          unsigned int v87 = 0;
          uint64_t v60 = 0;
          if (v56 <= v55) {
            unint64_t v56 = *((void *)this + 1);
          }
          while (2)
          {
            if (v56 == v55)
            {
              LODWORD(v60) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v88 = v55 + 1;
              char v89 = *(unsigned char *)(v57 + v55);
              *((void *)this + 1) = v88;
              v60 |= (unint64_t)(v89 & 0x7F) << v86;
              if (v89 < 0)
              {
                v86 += 7;
                unint64_t v55 = v88;
                BOOL v18 = v87++ > 8;
                if (v18) {
                  goto LABEL_124;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v60) = 0;
              }
            }
            break;
          }
LABEL_151:
          *(_DWORD *)(a1 + 92) = v60;
          goto LABEL_172;
        case 0xAu:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v63 = *((void *)this + 1);
            unint64_t v64 = *((void *)this + 2);
            while (v63 < v64 && !*((unsigned char *)this + 24))
            {
              char v66 = *(char **)(a1 + 40);
              unint64_t v65 = *(void *)(a1 + 48);
              if ((unint64_t)v66 >= v65)
              {
                unint64_t v68 = (char *)*v8;
                uint64_t v69 = (v66 - (unsigned char *)*v8) >> 2;
                unint64_t v70 = v69 + 1;
                if ((unint64_t)(v69 + 1) >> 62) {
                  goto LABEL_182;
                }
                uint64_t v71 = v65 - (void)v68;
                if (v71 >> 1 > v70) {
                  unint64_t v70 = v71 >> 1;
                }
                if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v72 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v72 = v70;
                }
                if (v72)
                {
                  unint64_t v73 = (char *)sub_190347D04(v9, v72);
                  unint64_t v68 = *(char **)(a1 + 32);
                  char v66 = *(char **)(a1 + 40);
                }
                else
                {
                  unint64_t v73 = 0;
                }
                uint64_t v74 = &v73[4 * v69];
                *(_DWORD *)uint64_t v74 = 0;
                unsigned int v67 = v74 + 4;
                while (v66 != v68)
                {
                  int v75 = *((_DWORD *)v66 - 1);
                  v66 -= 4;
                  *((_DWORD *)v74 - 1) = v75;
                  v74 -= 4;
                }
                *(void *)(a1 + 32) = v74;
                *(void *)(a1 + 40) = v67;
                *(void *)(a1 + 48) = &v73[4 * v72];
                if (v68) {
                  operator delete(v68);
                }
              }
              else
              {
                *(_DWORD *)char v66 = 0;
                unsigned int v67 = v66 + 4;
              }
              *(void *)(a1 + 40) = v67;
              unint64_t v76 = *((void *)this + 1);
              if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((void *)this + 2))
              {
LABEL_127:
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v67 - 1) = *(_DWORD *)(*(void *)this + v76);
              unint64_t v64 = *((void *)this + 2);
              unint64_t v63 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v63;
            }
LABEL_37:
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v91 = *(char **)(a1 + 40);
            unint64_t v90 = *(void *)(a1 + 48);
            if ((unint64_t)v91 >= v90)
            {
              unsigned int v98 = (char *)*v8;
              uint64_t v99 = (v91 - (unsigned char *)*v8) >> 2;
              unint64_t v100 = v99 + 1;
              if ((unint64_t)(v99 + 1) >> 62) {
LABEL_182:
              }
                sub_1903479E8();
              uint64_t v101 = v90 - (void)v98;
              if (v101 >> 1 > v100) {
                unint64_t v100 = v101 >> 1;
              }
              if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v102 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v102 = v100;
              }
              if (v102)
              {
                unint64_t v103 = (char *)sub_190347D04(v9, v102);
                unsigned int v98 = *(char **)(a1 + 32);
                unint64_t v91 = *(char **)(a1 + 40);
              }
              else
              {
                unint64_t v103 = 0;
              }
              unint64_t v106 = &v103[4 * v99];
              *(_DWORD *)unint64_t v106 = 0;
              unint64_t v85 = v106 + 4;
              while (v91 != v98)
              {
                int v107 = *((_DWORD *)v91 - 1);
                v91 -= 4;
                *((_DWORD *)v106 - 1) = v107;
                v106 -= 4;
              }
              *(void *)(a1 + 32) = v106;
              *(void *)(a1 + 40) = v85;
              *(void *)(a1 + 48) = &v103[4 * v102];
              if (v98) {
                operator delete(v98);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v91 = 0;
              unint64_t v85 = v91 + 4;
            }
            *(void *)(a1 + 40) = v85;
LABEL_166:
            unint64_t v108 = *((void *)this + 1);
            if (v108 <= 0xFFFFFFFFFFFFFFFBLL && v108 + 4 <= *((void *)this + 2))
            {
              *(v85 - 1) = *(_DWORD *)(*(void *)this + v108);
LABEL_170:
              uint64_t v26 = *((void *)this + 1) + 4;
LABEL_171:
              *((void *)this + 1) = v26;
            }
            else
            {
LABEL_168:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_172:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 0xBu:
          *(unsigned char *)(a1 + 108) |= 2u;
          unint64_t v77 = *((void *)this + 1);
          if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((void *)this + 2)) {
            goto LABEL_168;
          }
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v77);
          goto LABEL_170;
        case 0xCu:
          *(unsigned char *)(a1 + 108) |= 4u;
          unint64_t v78 = *((void *)this + 1);
          if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((void *)this + 2)) {
            goto LABEL_168;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v78);
          goto LABEL_170;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_172;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19030EF2C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 108);
  if (v4)
  {
    double result = PB::Writer::write(this, *(double *)(result + 72));
    char v4 = *(unsigned char *)(v3 + 108);
  }
  if ((v4 & 8) != 0) {
    double result = PB::Writer::writeVarInt(this);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 56);
  if (v5) {
    double result = PB::Writer::writeSubmessage(this, v5);
  }
  uint64_t v6 = *(const PB::Base **)(v3 + 64);
  if (v6) {
    double result = PB::Writer::writeSubmessage(this, v6);
  }
  float v7 = *(float **)(v3 + 8);
  uint64_t v8 = *(float **)(v3 + 16);
  while (v7 != v8)
  {
    float v9 = *v7++;
    double result = PB::Writer::write(this, v9);
  }
  char v10 = *(unsigned char *)(v3 + 108);
  if ((v10 & 0x40) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(v3 + 100));
    char v10 = *(unsigned char *)(v3 + 108);
    if ((v10 & 0x20) == 0)
    {
LABEL_14:
      if ((v10 & 0x80) == 0) {
        goto LABEL_15;
      }
LABEL_26:
      double result = PB::Writer::write(this);
      if ((*(unsigned char *)(v3 + 108) & 0x10) == 0) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
  else if ((*(unsigned char *)(v3 + 108) & 0x20) == 0)
  {
    goto LABEL_14;
  }
  double result = PB::Writer::write(this, *(float *)(v3 + 96));
  char v10 = *(unsigned char *)(v3 + 108);
  if (v10 < 0) {
    goto LABEL_26;
  }
LABEL_15:
  if ((v10 & 0x10) != 0) {
LABEL_16:
  }
    double result = PB::Writer::writeVarInt(this);
LABEL_17:
  uint64_t v11 = *(float **)(v3 + 32);
  uint64_t v12 = *(float **)(v3 + 40);
  while (v11 != v12)
  {
    float v13 = *v11++;
    double result = PB::Writer::write(this, v13);
  }
  char v14 = *(unsigned char *)(v3 + 108);
  if ((v14 & 2) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(v3 + 80));
    char v14 = *(unsigned char *)(v3 + 108);
  }
  if ((v14 & 4) != 0)
  {
    float v15 = *(float *)(v3 + 84);
    return PB::Writer::write(this, v15);
  }
  return result;
}

uint64_t sub_19030F0AC(uint64_t result)
{
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = &unk_1EDFCB660;
  return result;
}

void sub_19030F0D4(PB::Base *this)
{
  *(void *)this = &unk_1EDFCB660;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  PB::Base::~Base(this);
}

void sub_19030F188(PB::Base *a1)
{
  sub_19030F0D4(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19030F1C0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 32)) {
    PB::TextFormatter::format(this, "location");
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "maximum");
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, this, "minimum");
  }
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
    PB::TextFormatter::format(this, "state");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19030F2AC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 32) |= 1u;
          unint64_t v20 = *((void *)this + 1);
          unint64_t v21 = *((void *)this + 2);
          uint64_t v22 = *(void *)this;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            do
            {
              unint64_t v26 = v20 + 1;
              *((void *)this + 1) = v20 + 1;
              char v27 = *(unsigned char *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0) {
                goto LABEL_57;
              }
              v23 += 7;
              unint64_t v20 = v26;
              BOOL v14 = v24++ > 8;
            }
            while (!v14);
LABEL_46:
            LODWORD(v25) = 0;
            goto LABEL_57;
          }
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v25 = 0;
          if (v21 <= v20) {
            unint64_t v21 = *((void *)this + 1);
          }
          while (2)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v39 = v20 + 1;
              char v40 = *(unsigned char *)(v22 + v20);
              *((void *)this + 1) = v39;
              v25 |= (unint64_t)(v40 & 0x7F) << v37;
              if (v40 < 0)
              {
                v37 += 7;
                unint64_t v20 = v39;
                BOOL v14 = v38++ > 8;
                if (v14) {
                  goto LABEL_46;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v25) = 0;
              }
            }
            break;
          }
LABEL_57:
          *(_DWORD *)(a1 + 24) = v25;
          goto LABEL_62;
        case 2u:
          *(unsigned char *)(a1 + 32) |= 2u;
          unint64_t v29 = *((void *)this + 1);
          unint64_t v30 = *((void *)this + 2);
          uint64_t v31 = *(void *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)this + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_61;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v14 = v33++ > 8;
            }
            while (!v14);
LABEL_53:
            LODWORD(v34) = 0;
            goto LABEL_61;
          }
          char v41 = 0;
          unsigned int v42 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)this + 1);
          }
          break;
        case 3u:
          operator new();
        case 4u:
          operator new();
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          goto LABEL_62;
      }
      while (1)
      {
        if (v30 == v29)
        {
          LODWORD(v34) = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_61;
        }
        unint64_t v43 = v29 + 1;
        char v44 = *(unsigned char *)(v31 + v29);
        *((void *)this + 1) = v43;
        v34 |= (unint64_t)(v44 & 0x7F) << v41;
        if ((v44 & 0x80) == 0) {
          break;
        }
        v41 += 7;
        unint64_t v29 = v43;
        BOOL v14 = v42++ > 8;
        if (v14) {
          goto LABEL_53;
        }
      }
      if (*((unsigned char *)this + 24)) {
        LODWORD(v34) = 0;
      }
LABEL_61:
      *(_DWORD *)(a1 + 28) = v34;
LABEL_62:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19030F700(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 32);
  }
  if ((v4 & 2) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 16);
  if (v5) {
    uint64_t result = PB::Writer::writeSubmessage(this, v5);
  }
  uint64_t v6 = *(const PB::Base **)(v3 + 8);
  if (v6)
  {
    return PB::Writer::writeSubmessage(this, v6);
  }
  return result;
}

double sub_19030F794(void *a1)
{
  *a1 = &unk_1EDFCC3B8;
  double result = 0.0;
  a1[2] = 0;
  *(void *)((char *)a1 + 28) = 0;
  return result;
}

void sub_19030F7C4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19030F7FC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "eventTag");
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "from");
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "location");
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 32) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "to");
LABEL_7:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19030F8E0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 32) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_104;
            case 2u:
              *(unsigned char *)(a1 + 32) |= 8u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_88;
                  }
                  unint64_t v47 = v21++;
                  char v48 = *(unsigned char *)(v22 + v47);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  BOOL v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_87:
                    unint64_t v2 = v47 + 1;
                    goto LABEL_88;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_87;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_88;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_88:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_104;
            case 3u:
              *(unsigned char *)(a1 + 32) |= 4u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  unint64_t v51 = v27++;
                  char v52 = *(unsigned char *)(v28 + v51);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_92;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 20) = v31;
              goto LABEL_104;
            case 4u:
              *(unsigned char *)(a1 + 32) |= 2u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  unint64_t v55 = v33++;
                  char v56 = *(unsigned char *)(v34 + v55);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_97;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 16) = v37;
              goto LABEL_104;
            case 5u:
              *(unsigned char *)(a1 + 32) |= 0x10u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  unint64_t v59 = v39++;
                  char v60 = *(unsigned char *)(v40 + v59);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_102;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_103;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 28) = v43;
LABEL_104:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_104;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_19030FE64(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(unsigned char *)(v3 + 32) & 0x10) == 0) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 0x10) == 0) {
    return result;
  }
LABEL_11:

  return PB::Writer::writeVarInt(this);
}

double sub_19030FF28(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCDB20;
  *(_DWORD *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 132) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

void sub_19030FF70(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCDB20;
  uint64_t v6 = (void **)(a1 + 96);
  sub_190347828(&v6);
  uint64_t v6 = (void **)(a1 + 72);
  sub_190347828(&v6);
  uint64_t v2 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v4 = *(void **)(a1 + 32);
  if (v4)
  {
    *(void *)(a1 + 40) = v4;
    operator delete(v4);
  }
  char v5 = *(void **)(a1 + 8);
  if (v5)
  {
    *(void *)(a1 + 16) = v5;
    operator delete(v5);
  }
  PB::Base::~Base((PB::Base *)a1);
}

void sub_190310060(uint64_t a1)
{
  sub_19030FF70(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190310098(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "baseline");
  }
  if (*(unsigned char *)(a1 + 132)) {
    PB::TextFormatter::format(this, "location");
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, this, "minimum");
  }
  float v7 = *(uint64_t **)(a1 + 72);
  uint64_t v8 = *(uint64_t **)(a1 + 80);
  while (v7 != v8)
  {
    uint64_t v9 = *v7++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, this, "optical");
  }
  char v10 = *(unsigned char *)(a1 + 132);
  if ((v10 & 4) != 0)
  {
    PB::TextFormatter::format(this, "ringBufferUpdated");
    char v10 = *(unsigned char *)(a1 + 132);
    if ((v10 & 8) == 0)
    {
LABEL_11:
      if ((v10 & 2) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(a1 + 132) & 8) == 0)
  {
    goto LABEL_11;
  }
  PB::TextFormatter::format(this, "runningMinAccepted");
  if ((*(unsigned char *)(a1 + 132) & 2) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "state");
LABEL_13:
  unint64_t v11 = *(uint64_t **)(a1 + 96);
  unint64_t v12 = *(uint64_t **)(a1 + 104);
  while (v11 != v12)
  {
    uint64_t v13 = *v11++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32))(v13, this, "temp");
  }
  BOOL v14 = *(float **)(a1 + 8);
  char v15 = *(float **)(a1 + 16);
  while (v14 != v15)
  {
    float v16 = *v14++;
    PB::TextFormatter::format(this, "tilt", v16);
  }
  unint64_t v17 = *(float **)(a1 + 32);
  char v18 = *(float **)(a1 + 40);
  while (v17 != v18)
  {
    float v19 = *v17++;
    PB::TextFormatter::format(this, "tip", v19);
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1903102C8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    char v10 = (void **)(a1 + 32);
    uint64_t v11 = a1 + 48;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 132) |= 1u;
          unint64_t v25 = *((void *)this + 1);
          unint64_t v26 = *((void *)this + 2);
          uint64_t v27 = *(void *)this;
          if (v25 <= 0xFFFFFFFFFFFFFFF5 && v25 + 10 <= v26)
          {
            char v28 = 0;
            unsigned int v29 = 0;
            uint64_t v30 = 0;
            do
            {
              unint64_t v31 = v25 + 1;
              *((void *)this + 1) = v25 + 1;
              char v32 = *(unsigned char *)(v27 + v25);
              v30 |= (unint64_t)(v32 & 0x7F) << v28;
              if ((v32 & 0x80) == 0) {
                goto LABEL_144;
              }
              v28 += 7;
              unint64_t v25 = v31;
              BOOL v18 = v29++ > 8;
            }
            while (!v18);
LABEL_107:
            LODWORD(v30) = 0;
            goto LABEL_144;
          }
          char v78 = 0;
          unsigned int v79 = 0;
          uint64_t v30 = 0;
          if (v26 <= v25) {
            unint64_t v26 = *((void *)this + 1);
          }
          while (2)
          {
            if (v26 == v25)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v80 = v25 + 1;
              char v81 = *(unsigned char *)(v27 + v25);
              *((void *)this + 1) = v80;
              v30 |= (unint64_t)(v81 & 0x7F) << v78;
              if (v81 < 0)
              {
                v78 += 7;
                unint64_t v25 = v80;
                BOOL v18 = v79++ > 8;
                if (v18) {
                  goto LABEL_107;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v30) = 0;
              }
            }
            break;
          }
LABEL_144:
          *(_DWORD *)(a1 + 120) = v30;
          goto LABEL_96;
        case 2u:
          *(unsigned char *)(a1 + 132) |= 2u;
          unint64_t v33 = *((void *)this + 1);
          unint64_t v34 = *((void *)this + 2);
          uint64_t v35 = *(void *)this;
          if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
          {
            char v36 = 0;
            unsigned int v37 = 0;
            uint64_t v38 = 0;
            do
            {
              unint64_t v39 = v33 + 1;
              *((void *)this + 1) = v33 + 1;
              char v40 = *(unsigned char *)(v35 + v33);
              v38 |= (unint64_t)(v40 & 0x7F) << v36;
              if ((v40 & 0x80) == 0) {
                goto LABEL_147;
              }
              v36 += 7;
              unint64_t v33 = v39;
              BOOL v18 = v37++ > 8;
            }
            while (!v18);
LABEL_114:
            LODWORD(v38) = 0;
            goto LABEL_147;
          }
          char v82 = 0;
          unsigned int v83 = 0;
          uint64_t v38 = 0;
          if (v34 <= v33) {
            unint64_t v34 = *((void *)this + 1);
          }
          while (2)
          {
            if (v34 == v33)
            {
              LODWORD(v38) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v84 = v33 + 1;
              char v85 = *(unsigned char *)(v35 + v33);
              *((void *)this + 1) = v84;
              v38 |= (unint64_t)(v85 & 0x7F) << v82;
              if (v85 < 0)
              {
                v82 += 7;
                unint64_t v33 = v84;
                BOOL v18 = v83++ > 8;
                if (v18) {
                  goto LABEL_114;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v38) = 0;
              }
            }
            break;
          }
LABEL_147:
          *(_DWORD *)(a1 + 124) = v38;
          goto LABEL_96;
        case 3u:
          sub_19030BD2C();
        case 4u:
          if (v24 != 2)
          {
            unsigned int v87 = *(char **)(a1 + 40);
            unint64_t v86 = *(void *)(a1 + 48);
            if ((unint64_t)v87 >= v86)
            {
              unint64_t v91 = (char *)*v10;
              uint64_t v92 = (v87 - (unsigned char *)*v10) >> 2;
              unint64_t v93 = v92 + 1;
              if ((unint64_t)(v92 + 1) >> 62) {
LABEL_171:
              }
                sub_1903479E8();
              uint64_t v94 = v86 - (void)v91;
              if (v94 >> 1 > v93) {
                unint64_t v93 = v94 >> 1;
              }
              if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v95 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v95 = v93;
              }
              if (v95)
              {
                unint64_t v96 = (char *)sub_190347D04(v11, v95);
                unint64_t v91 = *(char **)(a1 + 32);
                unsigned int v87 = *(char **)(a1 + 40);
              }
              else
              {
                unint64_t v96 = 0;
              }
              unint64_t v103 = &v96[4 * v92];
              *(_DWORD *)unint64_t v103 = 0;
              unint64_t v88 = v103 + 4;
              while (v87 != v91)
              {
                int v104 = *((_DWORD *)v87 - 1);
                v87 -= 4;
                *((_DWORD *)v103 - 1) = v104;
                v103 -= 4;
              }
              *(void *)(a1 + 32) = v103;
              *(void *)(a1 + 40) = v88;
              *(void *)(a1 + 48) = &v96[4 * v95];
              if (v91) {
                operator delete(v91);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v87 = 0;
              unint64_t v88 = v87 + 4;
            }
            *(void *)(a1 + 40) = v88;
            goto LABEL_162;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v41 = *((void *)this + 1);
          unint64_t v42 = *((void *)this + 2);
          while (v41 < v42 && !*((unsigned char *)this + 24))
          {
            char v44 = *(char **)(a1 + 40);
            unint64_t v43 = *(void *)(a1 + 48);
            if ((unint64_t)v44 >= v43)
            {
              unsigned int v46 = (char *)*v10;
              uint64_t v47 = (v44 - (unsigned char *)*v10) >> 2;
              unint64_t v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62) {
                goto LABEL_171;
              }
              uint64_t v49 = v43 - (void)v46;
              if (v49 >> 1 > v48) {
                unint64_t v48 = v49 >> 1;
              }
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v50 = v48;
              }
              if (v50)
              {
                unint64_t v51 = (char *)sub_190347D04(v11, v50);
                unsigned int v46 = *(char **)(a1 + 32);
                char v44 = *(char **)(a1 + 40);
              }
              else
              {
                unint64_t v51 = 0;
              }
              char v52 = &v51[4 * v47];
              *(_DWORD *)char v52 = 0;
              char v45 = v52 + 4;
              while (v44 != v46)
              {
                int v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *(void *)(a1 + 32) = v52;
              *(void *)(a1 + 40) = v45;
              *(void *)(a1 + 48) = &v51[4 * v50];
              if (v46) {
                operator delete(v46);
              }
            }
            else
            {
              *(_DWORD *)char v44 = 0;
              char v45 = v44 + 4;
            }
            *(void *)(a1 + 40) = v45;
            unint64_t v54 = *((void *)this + 1);
            if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((void *)this + 2)) {
              goto LABEL_123;
            }
            *(v45 - 1) = *(_DWORD *)(*(void *)this + v54);
            unint64_t v42 = *((void *)this + 2);
            unint64_t v41 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v41;
          }
          goto LABEL_95;
        case 5u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v55 = *((void *)this + 1);
            unint64_t v56 = *((void *)this + 2);
            while (v55 < v56 && !*((unsigned char *)this + 24))
            {
              unsigned int v58 = *(char **)(a1 + 16);
              unint64_t v57 = *(void *)(a1 + 24);
              if ((unint64_t)v58 >= v57)
              {
                char v60 = (char *)*v8;
                uint64_t v61 = (v58 - (unsigned char *)*v8) >> 2;
                unint64_t v62 = v61 + 1;
                if ((unint64_t)(v61 + 1) >> 62) {
                  goto LABEL_172;
                }
                uint64_t v63 = v57 - (void)v60;
                if (v63 >> 1 > v62) {
                  unint64_t v62 = v63 >> 1;
                }
                if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v64 = v62;
                }
                if (v64)
                {
                  unint64_t v65 = (char *)sub_190347D04(v9, v64);
                  char v60 = *(char **)(a1 + 8);
                  unsigned int v58 = *(char **)(a1 + 16);
                }
                else
                {
                  unint64_t v65 = 0;
                }
                char v66 = &v65[4 * v61];
                *(_DWORD *)char v66 = 0;
                unint64_t v59 = v66 + 4;
                while (v58 != v60)
                {
                  int v67 = *((_DWORD *)v58 - 1);
                  v58 -= 4;
                  *((_DWORD *)v66 - 1) = v67;
                  v66 -= 4;
                }
                *(void *)(a1 + 8) = v66;
                *(void *)(a1 + 16) = v59;
                *(void *)(a1 + 24) = &v65[4 * v64];
                if (v60) {
                  operator delete(v60);
                }
              }
              else
              {
                *(_DWORD *)unsigned int v58 = 0;
                unint64_t v59 = v58 + 4;
              }
              *(void *)(a1 + 16) = v59;
              unint64_t v68 = *((void *)this + 1);
              if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((void *)this + 2))
              {
LABEL_123:
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v59 - 1) = *(_DWORD *)(*(void *)this + v68);
              unint64_t v56 = *((void *)this + 2);
              unint64_t v55 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v55;
            }
LABEL_95:
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v90 = *(char **)(a1 + 16);
            unint64_t v89 = *(void *)(a1 + 24);
            if ((unint64_t)v90 >= v89)
            {
              char v97 = (char *)*v8;
              uint64_t v98 = (v90 - (unsigned char *)*v8) >> 2;
              unint64_t v99 = v98 + 1;
              if ((unint64_t)(v98 + 1) >> 62) {
LABEL_172:
              }
                sub_1903479E8();
              uint64_t v100 = v89 - (void)v97;
              if (v100 >> 1 > v99) {
                unint64_t v99 = v100 >> 1;
              }
              if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v101 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v101 = v99;
              }
              if (v101)
              {
                unint64_t v102 = (char *)sub_190347D04(v9, v101);
                char v97 = *(char **)(a1 + 8);
                unint64_t v90 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v102 = 0;
              }
              int v105 = &v102[4 * v98];
              *(_DWORD *)int v105 = 0;
              unint64_t v88 = v105 + 4;
              while (v90 != v97)
              {
                int v106 = *((_DWORD *)v90 - 1);
                v90 -= 4;
                *((_DWORD *)v105 - 1) = v106;
                v105 -= 4;
              }
              *(void *)(a1 + 8) = v105;
              *(void *)(a1 + 16) = v88;
              *(void *)(a1 + 24) = &v102[4 * v101];
              if (v97) {
                operator delete(v97);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v90 = 0;
              unint64_t v88 = v90 + 4;
            }
            *(void *)(a1 + 16) = v88;
LABEL_162:
            unint64_t v107 = *((void *)this + 1);
            if (v107 <= 0xFFFFFFFFFFFFFFFBLL && v107 + 4 <= *((void *)this + 2))
            {
              *(v88 - 1) = *(_DWORD *)(*(void *)this + v107);
              *((void *)this + 1) += 4;
            }
            else
            {
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_96:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 6u:
          operator new();
        case 7u:
          operator new();
        case 8u:
          *(unsigned char *)(a1 + 132) |= 8u;
          unint64_t v69 = *((void *)this + 1);
          if (v69 >= *((void *)this + 2))
          {
            BOOL v72 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v70 = v69 + 1;
            int v71 = *(unsigned __int8 *)(*(void *)this + v69);
            *((void *)this + 1) = v70;
            BOOL v72 = v71 != 0;
          }
          *(unsigned char *)(a1 + 129) = v72;
          goto LABEL_96;
        case 9u:
          *(unsigned char *)(a1 + 132) |= 4u;
          unint64_t v73 = *((void *)this + 1);
          if (v73 >= *((void *)this + 2))
          {
            BOOL v76 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v74 = v73 + 1;
            int v75 = *(unsigned __int8 *)(*(void *)this + v73);
            *((void *)this + 1) = v74;
            BOOL v76 = v75 != 0;
          }
          *(unsigned char *)(a1 + 128) = v76;
          goto LABEL_96;
        case 0xAu:
          sub_190310BCC();
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_96;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

void sub_190310BCC()
{
}

void sub_190310CC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_190347EEC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_190310D0C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 132);
  if (v4)
  {
    double result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 132);
  }
  if ((v4 & 2) != 0) {
    double result = PB::Writer::writeVarInt(this);
  }
  uint64_t v5 = *(const PB::Base ***)(v3 + 72);
  uint64_t v6 = *(const PB::Base ***)(v3 + 80);
  while (v5 != v6)
  {
    float v7 = *v5++;
    double result = PB::Writer::writeSubmessage(this, v7);
  }
  uint64_t v8 = *(float **)(v3 + 32);
  uint64_t v9 = *(float **)(v3 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    double result = PB::Writer::write(this, v10);
  }
  uint64_t v11 = *(float **)(v3 + 8);
  uint64_t v12 = *(float **)(v3 + 16);
  while (v11 != v12)
  {
    float v13 = *v11++;
    double result = PB::Writer::write(this, v13);
  }
  unsigned int v14 = *(const PB::Base **)(v3 + 64);
  if (v14) {
    double result = PB::Writer::writeSubmessage(this, v14);
  }
  unint64_t v15 = *(const PB::Base **)(v3 + 56);
  if (v15) {
    double result = PB::Writer::writeSubmessage(this, v15);
  }
  char v16 = *(unsigned char *)(v3 + 132);
  if ((v16 & 8) != 0)
  {
    double result = PB::Writer::write(this);
    char v16 = *(unsigned char *)(v3 + 132);
  }
  if ((v16 & 4) != 0) {
    double result = PB::Writer::write(this);
  }
  BOOL v18 = *(const PB::Base ***)(v3 + 96);
  char v17 = *(const PB::Base ***)(v3 + 104);
  while (v18 != v17)
  {
    char v19 = *v18++;
    double result = PB::Writer::writeSubmessage(this, v19);
  }
  return result;
}

uint64_t sub_190310E40(uint64_t result)
{
  *(void *)double result = &unk_1EDFC2B28;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_190310E68(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190310EA0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "deltaPositionX", *(float *)(a1 + 16));
    __int16 v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "deltaPositionY", *(float *)(a1 + 20));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "deltaPositionZ", *(float *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "deltaVelocityX", *(float *)(a1 + 28));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "deltaVelocityY", *(float *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "deltaVelocityZ", *(float *)(a1 + 36));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x2000) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "isBIO");
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "quaternionW", *(float *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "quaternionX", *(float *)(a1 + 44));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "quaternionY", *(float *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "quaternionZ", *(float *)(a1 + 52));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "referenceFrame");
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_31:
  PB::TextFormatter::format(this, "staticFlag");
  if (*(_WORD *)(a1 + 68)) {
LABEL_15:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
LABEL_16:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903110A4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_91;
            case 2u:
              *(_WORD *)(a1 + 68) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_90;
            case 3u:
              *(_WORD *)(a1 + 68) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_90;
            case 4u:
              *(_WORD *)(a1 + 68) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_90;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_90;
            case 6u:
              *(_WORD *)(a1 + 68) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_90;
            case 7u:
              *(_WORD *)(a1 + 68) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_90;
            case 8u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_90;
            case 9u:
              *(_WORD *)(a1 + 68) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_90;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_90;
            case 0xBu:
              *(_WORD *)(a1 + 68) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
LABEL_90:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_91:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_56:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_102;
            case 0xCu:
              *(_WORD *)(a1 + 68) |= 0x800u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v35 = 0;
                unsigned int v36 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_96;
                  }
                  unint64_t v37 = v21++;
                  char v38 = *(unsigned char *)(v22 + v37);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0) {
                    break;
                  }
                  v35 += 7;
                  BOOL v14 = v36++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_95:
                    unint64_t v2 = v37 + 1;
                    goto LABEL_96;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_95;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_96;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_96:
              *(_DWORD *)(a1 + 56) = v25;
              goto LABEL_102;
            case 0xDu:
              *(_WORD *)(a1 + 68) |= 0x1000u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v39 = 0;
                unsigned int v40 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_101;
                  }
                  unint64_t v41 = v27++;
                  char v42 = *(unsigned char *)(v28 + v41);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  BOOL v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_100:
                    unint64_t v2 = v41 + 1;
                    goto LABEL_101;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_100;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_101;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_101:
              *(_DWORD *)(a1 + 60) = v31;
LABEL_102:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xEu:
              *(_WORD *)(a1 + 68) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *(unsigned char *)(a1 + 64) = v34;
              goto LABEL_102;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_102;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903116F0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 68);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    __int16 v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(_WORD *)(v3 + 68) & 0x2000) == 0) {
      return result;
    }
    goto LABEL_29;
  }
LABEL_27:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x1000) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  if ((v4 & 0x2000) == 0) {
    return result;
  }
LABEL_29:

  return PB::Writer::write(this);
}

double sub_1903118B0(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFC3340;
  *(_DWORD *)(a1 + 88) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  return result;
}

void sub_1903118EC(PB::Base *this)
{
  *(void *)this = &unk_1EDFC3340;
  unint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  __int16 v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  PB::Base::~Base(this);
}

void sub_190311970(PB::Base *a1)
{
  sub_1903118EC(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903119A8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(double **)(a1 + 8);
  uint64_t v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "historicalMeanSeaLevelPressure", v7);
  }
  uint64_t v8 = *(double **)(a1 + 32);
  char v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(this, "historicalTimestamp", v10);
  }
  unint64_t v11 = *(double **)(a1 + 56);
  unint64_t v12 = *(double **)(a1 + 64);
  while (v11 != v12)
  {
    double v13 = *v11++;
    PB::TextFormatter::format(this, "historicalUncertainty", v13);
  }
  if (*(unsigned char *)(a1 + 88)) {
    PB::TextFormatter::format(this, "refreshTime", *(double *)(a1 + 80));
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_190311A9C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)(a1 + 56);
    uint64_t v102 = a1 + 72;
    char v9 = (void **)(a1 + 8);
    uint64_t v10 = a1 + 24;
    unint64_t v11 = (void **)(a1 + 32);
    uint64_t v12 = a1 + 48;
    while (1)
    {
      uint64_t v13 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v14 = 0;
      unsigned int v15 = 0;
      unint64_t v16 = 0;
      while (1)
      {
        unint64_t v17 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v18 = *(unsigned char *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          break;
        }
        v14 += 7;
        unint64_t v2 = v17;
        if (v15++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v25 = v16 & 7;
      if (v25 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          if (v25 != 2)
          {
            unint64_t v70 = *(char **)(a1 + 40);
            unint64_t v69 = *(void *)(a1 + 48);
            if ((unint64_t)v70 >= v69)
            {
              BOOL v76 = (char *)*v11;
              uint64_t v77 = (v70 - (unsigned char *)*v11) >> 3;
              unint64_t v78 = v77 + 1;
              if ((unint64_t)(v77 + 1) >> 61) {
LABEL_166:
              }
                sub_1903479E8();
              uint64_t v79 = v69 - (void)v76;
              if (v79 >> 2 > v78) {
                unint64_t v78 = v79 >> 2;
              }
              if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v80 = v78;
              }
              if (v80)
              {
                char v81 = (char *)sub_190347A00(v12, v80);
                BOOL v76 = *(char **)(a1 + 32);
                unint64_t v70 = *(char **)(a1 + 40);
              }
              else
              {
                char v81 = 0;
              }
              uint64_t v94 = &v81[8 * v77];
              *(void *)uint64_t v94 = 0;
              int v71 = v94 + 8;
              while (v70 != v76)
              {
                uint64_t v95 = *((void *)v70 - 1);
                v70 -= 8;
                *((void *)v94 - 1) = v95;
                v94 -= 8;
              }
              *(void *)(a1 + 32) = v94;
              *(void *)(a1 + 40) = v71;
              *(void *)(a1 + 48) = &v81[8 * v80];
              if (v76) {
                operator delete(v76);
              }
            }
            else
            {
              *(void *)unint64_t v70 = 0;
              int v71 = v70 + 8;
            }
            *(void *)(a1 + 40) = v71;
            goto LABEL_153;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v26 = *((void *)this + 1);
          unint64_t v27 = *((void *)this + 2);
          while (v26 < v27 && !*((unsigned char *)this + 24))
          {
            char v29 = *(char **)(a1 + 40);
            unint64_t v28 = *(void *)(a1 + 48);
            if ((unint64_t)v29 >= v28)
            {
              uint64_t v31 = (char *)*v11;
              uint64_t v32 = (v29 - (unsigned char *)*v11) >> 3;
              unint64_t v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 61) {
                goto LABEL_166;
              }
              uint64_t v34 = v28 - (void)v31;
              if (v34 >> 2 > v33) {
                unint64_t v33 = v34 >> 2;
              }
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v35 = v33;
              }
              if (v35)
              {
                unsigned int v36 = (char *)sub_190347A00(v12, v35);
                uint64_t v31 = *(char **)(a1 + 32);
                char v29 = *(char **)(a1 + 40);
              }
              else
              {
                unsigned int v36 = 0;
              }
              unint64_t v37 = &v36[8 * v32];
              *(void *)unint64_t v37 = 0;
              unsigned int v30 = v37 + 8;
              while (v29 != v31)
              {
                uint64_t v38 = *((void *)v29 - 1);
                v29 -= 8;
                *((void *)v37 - 1) = v38;
                v37 -= 8;
              }
              *(void *)(a1 + 32) = v37;
              *(void *)(a1 + 40) = v30;
              *(void *)(a1 + 48) = &v36[8 * v35];
              if (v31) {
                operator delete(v31);
              }
            }
            else
            {
              *(void *)char v29 = 0;
              unsigned int v30 = v29 + 8;
            }
            *(void *)(a1 + 40) = v30;
            unint64_t v39 = *((void *)this + 1);
            if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((void *)this + 2)) {
              goto LABEL_106;
            }
            *(v30 - 1) = *(void *)(*(void *)this + v39);
            unint64_t v27 = *((void *)this + 2);
            unint64_t v26 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v26;
          }
          goto LABEL_107;
        case 2u:
          if (v25 != 2)
          {
            unint64_t v73 = *(char **)(a1 + 16);
            unint64_t v72 = *(void *)(a1 + 24);
            if ((unint64_t)v73 >= v72)
            {
              char v82 = (char *)*v9;
              uint64_t v83 = (v73 - (unsigned char *)*v9) >> 3;
              unint64_t v84 = v83 + 1;
              if ((unint64_t)(v83 + 1) >> 61) {
LABEL_167:
              }
                sub_1903479E8();
              uint64_t v85 = v72 - (void)v82;
              if (v85 >> 2 > v84) {
                unint64_t v84 = v85 >> 2;
              }
              if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v86 = v84;
              }
              if (v86)
              {
                unsigned int v87 = (char *)sub_190347A00(v10, v86);
                char v82 = *(char **)(a1 + 8);
                unint64_t v73 = *(char **)(a1 + 16);
              }
              else
              {
                unsigned int v87 = 0;
              }
              unint64_t v96 = &v87[8 * v83];
              *(void *)unint64_t v96 = 0;
              int v71 = v96 + 8;
              while (v73 != v82)
              {
                uint64_t v97 = *((void *)v73 - 1);
                v73 -= 8;
                *((void *)v96 - 1) = v97;
                v96 -= 8;
              }
              *(void *)(a1 + 8) = v96;
              *(void *)(a1 + 16) = v71;
              *(void *)(a1 + 24) = &v87[8 * v86];
              if (v82) {
                operator delete(v82);
              }
            }
            else
            {
              *(void *)unint64_t v73 = 0;
              int v71 = v73 + 8;
            }
            *(void *)(a1 + 16) = v71;
            goto LABEL_153;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v40 = *((void *)this + 1);
          unint64_t v41 = *((void *)this + 2);
          while (v40 < v41 && !*((unsigned char *)this + 24))
          {
            unint64_t v43 = *(char **)(a1 + 16);
            unint64_t v42 = *(void *)(a1 + 24);
            if ((unint64_t)v43 >= v42)
            {
              char v45 = (char *)*v9;
              uint64_t v46 = (v43 - (unsigned char *)*v9) >> 3;
              unint64_t v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 61) {
                goto LABEL_167;
              }
              uint64_t v48 = v42 - (void)v45;
              if (v48 >> 2 > v47) {
                unint64_t v47 = v48 >> 2;
              }
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v49 = v47;
              }
              if (v49)
              {
                unint64_t v50 = (char *)sub_190347A00(v10, v49);
                char v45 = *(char **)(a1 + 8);
                unint64_t v43 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v50 = 0;
              }
              unint64_t v51 = &v50[8 * v46];
              *(void *)unint64_t v51 = 0;
              char v44 = v51 + 8;
              while (v43 != v45)
              {
                uint64_t v52 = *((void *)v43 - 1);
                v43 -= 8;
                *((void *)v51 - 1) = v52;
                v51 -= 8;
              }
              *(void *)(a1 + 8) = v51;
              *(void *)(a1 + 16) = v44;
              *(void *)(a1 + 24) = &v50[8 * v49];
              if (v45) {
                operator delete(v45);
              }
            }
            else
            {
              *(void *)unint64_t v43 = 0;
              char v44 = v43 + 8;
            }
            *(void *)(a1 + 16) = v44;
            unint64_t v53 = *((void *)this + 1);
            if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((void *)this + 2)) {
              goto LABEL_106;
            }
            *(v44 - 1) = *(void *)(*(void *)this + v53);
            unint64_t v41 = *((void *)this + 2);
            unint64_t v40 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v40;
          }
          goto LABEL_107;
        case 3u:
          if (v25 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v54 = *((void *)this + 1);
            unint64_t v55 = *((void *)this + 2);
            while (v54 < v55 && !*((unsigned char *)this + 24))
            {
              unint64_t v57 = *(char **)(a1 + 64);
              unint64_t v56 = *(void *)(a1 + 72);
              if ((unint64_t)v57 >= v56)
              {
                unint64_t v59 = (char *)*v8;
                uint64_t v60 = (v57 - (unsigned char *)*v8) >> 3;
                unint64_t v61 = v60 + 1;
                if ((unint64_t)(v60 + 1) >> 61) {
                  goto LABEL_168;
                }
                uint64_t v62 = v56 - (void)v59;
                if (v62 >> 2 > v61) {
                  unint64_t v61 = v62 >> 2;
                }
                if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v63 = v61;
                }
                if (v63)
                {
                  unint64_t v64 = (char *)sub_190347A00(v102, v63);
                  unint64_t v59 = *(char **)(a1 + 56);
                  unint64_t v57 = *(char **)(a1 + 64);
                }
                else
                {
                  unint64_t v64 = 0;
                }
                unint64_t v65 = &v64[8 * v60];
                *(void *)unint64_t v65 = 0;
                unsigned int v58 = v65 + 8;
                while (v57 != v59)
                {
                  uint64_t v66 = *((void *)v57 - 1);
                  v57 -= 8;
                  *((void *)v65 - 1) = v66;
                  v65 -= 8;
                }
                *(void *)(a1 + 56) = v65;
                *(void *)(a1 + 64) = v58;
                *(void *)(a1 + 72) = &v64[8 * v63];
                if (v59) {
                  operator delete(v59);
                }
              }
              else
              {
                *(void *)unint64_t v57 = 0;
                unsigned int v58 = v57 + 8;
              }
              *(void *)(a1 + 64) = v58;
              unint64_t v67 = *((void *)this + 1);
              if (v67 > 0xFFFFFFFFFFFFFFF7 || v67 + 8 > *((void *)this + 2))
              {
LABEL_106:
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v58 - 1) = *(void *)(*(void *)this + v67);
              unint64_t v55 = *((void *)this + 2);
              unint64_t v54 = *((void *)this + 1) + 8;
              *((void *)this + 1) = v54;
            }
LABEL_107:
            PB::Reader::recallMark();
          }
          else
          {
            int v75 = *(char **)(a1 + 64);
            unint64_t v74 = *(void *)(a1 + 72);
            if ((unint64_t)v75 >= v74)
            {
              unint64_t v88 = (char *)*v8;
              uint64_t v89 = (v75 - (unsigned char *)*v8) >> 3;
              unint64_t v90 = v89 + 1;
              if ((unint64_t)(v89 + 1) >> 61) {
LABEL_168:
              }
                sub_1903479E8();
              uint64_t v91 = v74 - (void)v88;
              if (v91 >> 2 > v90) {
                unint64_t v90 = v91 >> 2;
              }
              if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v92 = v90;
              }
              if (v92)
              {
                unint64_t v93 = (char *)sub_190347A00(v102, v92);
                unint64_t v88 = *(char **)(a1 + 56);
                int v75 = *(char **)(a1 + 64);
              }
              else
              {
                unint64_t v93 = 0;
              }
              uint64_t v98 = &v93[8 * v89];
              *(void *)uint64_t v98 = 0;
              int v71 = v98 + 8;
              while (v75 != v88)
              {
                uint64_t v99 = *((void *)v75 - 1);
                v75 -= 8;
                *((void *)v98 - 1) = v99;
                v98 -= 8;
              }
              *(void *)(a1 + 56) = v98;
              *(void *)(a1 + 64) = v71;
              *(void *)(a1 + 72) = &v93[8 * v92];
              if (v88) {
                operator delete(v88);
              }
            }
            else
            {
              *(void *)int v75 = 0;
              int v71 = v75 + 8;
            }
            *(void *)(a1 + 64) = v71;
LABEL_153:
            unint64_t v100 = *((void *)this + 1);
            if (v100 <= 0xFFFFFFFFFFFFFFF7 && v100 + 8 <= *((void *)this + 2))
            {
              *(v71 - 1) = *(void *)(*(void *)this + v100);
LABEL_157:
              *((void *)this + 1) += 8;
            }
            else
            {
LABEL_155:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_158:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((unsigned char *)this + 24)) {
            return v4 == 0;
          }
          break;
        case 4u:
          *(unsigned char *)(a1 + 88) |= 1u;
          unint64_t v68 = *((void *)this + 1);
          if (v68 > 0xFFFFFFFFFFFFFFF7 || v68 + 8 > *((void *)this + 2)) {
            goto LABEL_155;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v68);
          goto LABEL_157;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_158;
      }
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v16 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v22 = v2 + 1;
      char v23 = *(unsigned char *)(v13 + v2);
      *((void *)this + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0) {
        goto LABEL_21;
      }
      v20 += 7;
      unint64_t v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        unint64_t v16 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903121EC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(double **)(result + 32);
  __int16 v5 = *(double **)(result + 40);
  while (v4 != v5)
  {
    double v6 = *v4++;
    double result = PB::Writer::write(this, v6);
  }
  double v7 = *(double **)(v3 + 8);
  uint64_t v8 = *(double **)(v3 + 16);
  while (v7 != v8)
  {
    double v9 = *v7++;
    double result = PB::Writer::write(this, v9);
  }
  uint64_t v10 = *(double **)(v3 + 56);
  unint64_t v11 = *(double **)(v3 + 64);
  while (v10 != v11)
  {
    double v12 = *v10++;
    double result = PB::Writer::write(this, v12);
  }
  if (*(unsigned char *)(v3 + 88))
  {
    double v13 = *(double *)(v3 + 80);
    return PB::Writer::write(this, v13);
  }
  return result;
}

void *sub_1903122AC(void *result)
{
  *double result = &unk_1EDFCEFE8;
  result[1] = 0;
  return result;
}

void sub_1903122CC(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCEFE8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_19031234C(PB::Base *a1)
{
  sub_1903122CC(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190312384(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190312400(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903125FC(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

void *sub_190312618(void *result)
{
  *uint64_t result = &unk_1EDFCE098;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_19031263C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCE098;
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v2 = (void *)(a1 + 24);
  uint64_t v3 = v4;
  *unint64_t v2 = 0;
  if (v4) {
    sub_1903478E8((uint64_t)v2, v3);
  }
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v5) {
    sub_1903478E8(a1 + 16, v5);
  }
  sub_190347944((void ***)(a1 + 8), 0);

  PB::Base::~Base((PB::Base *)a1);
}

void sub_1903126C0(uint64_t a1)
{
  sub_19031263C(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903126F8(void *a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (a1[1]) {
    PB::TextFormatter::format();
  }
  if (a1[2]) {
    PB::TextFormatter::format();
  }
  if (a1[3]) {
    PB::TextFormatter::format();
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190312784(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v10 >> 3;
      if ((v10 >> 3) == 4) {
        operator new();
      }
      if (v19 == 3) {
        operator new();
      }
      if (v19 == 2) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903129E4(uint64_t result)
{
  uint64_t v1 = result;
  if (*(void *)(result + 16)) {
    uint64_t result = PB::Writer::write();
  }
  if (*(void *)(v1 + 24)) {
    uint64_t result = PB::Writer::write();
  }
  if (*(void *)(v1 + 8))
  {
    return PB::Writer::write();
  }
  return result;
}

uint64_t sub_190312A5C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCCCE8;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_190312A84(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190312ABC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if (v5)
  {
    PB::TextFormatter::format(this, "level");
    char v5 = *(unsigned char *)(a1 + 20);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*(unsigned char *)(a1 + 20) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "threshold");
  if ((*(unsigned char *)(a1 + 20) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "timestamp", *(float *)(a1 + 16));
LABEL_5:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190312B60(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v21 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_62;
            }
            unint64_t v36 = v21++;
            char v37 = *(unsigned char *)(v22 + v36);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            BOOL v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_61:
          unint64_t v2 = v36 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_62:
        *(_DWORD *)(a1 + 12) = v25;
      }
      else if (v20 == 2)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v27 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v28 = *(void *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_67;
            }
            unint64_t v40 = v27++;
            char v41 = *(unsigned char *)(v28 + v40);
            *((void *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_66;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_66:
          unint64_t v2 = v40 + 1;
        }
        else
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          while (1)
          {
            unint64_t v2 = v27 + 1;
            *((void *)this + 1) = v27 + 1;
            char v32 = *(unsigned char *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v27 = v2;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_67:
        *(_DWORD *)(a1 + 8) = v31;
      }
      else if (v20 == 1)
      {
        *(unsigned char *)(a1 + 20) |= 4u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
        {
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 4;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190312EE4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if ((v4 & 4) == 0)
  {
    if ((*(unsigned char *)(result + 20) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(unsigned char *)(v3 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(result + 16));
  char v4 = *(unsigned char *)(v3 + 20);
  if (v4) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_7:

  return PB::Writer::writeVarInt(this);
}

void *sub_190312F70(void *result)
{
  *uint64_t result = &unk_1EDFCD298;
  result[1] = 0;
  return result;
}

void sub_190312F90(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCD298;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_190313010(PB::Base *a1)
{
  sub_190312F90(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190313048(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903130C4(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903132C0(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

void *sub_1903132DC(void *result)
{
  *uint64_t result = &unk_1EDFCF330;
  result[1] = 0;
  return result;
}

void sub_1903132FC(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCF330;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_19031337C(PB::Base *a1)
{
  sub_1903132FC(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903133B4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190313430(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19031362C(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

uint64_t sub_190313648(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFD4050;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_190313670(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903136A8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "state");
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190313724(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)this + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v26 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v27 = *(void *)this;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v3 = *((void *)this + 1);
          }
          else {
            unint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v39 = v26++;
            char v40 = *(unsigned char *)(v27 + v39);
            *((void *)this + 1) = v26;
            v30 |= (unint64_t)(v40 & 0x7F) << v37;
            if ((v40 & 0x80) == 0) {
              break;
            }
            v37 += 7;
            BOOL v14 = v38++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v30) = 0;
          }
LABEL_63:
          unint64_t v3 = v39 + 1;
        }
        else
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v30 = 0;
          while (1)
          {
            unint64_t v3 = v26 + 1;
            *((void *)this + 1) = v26 + 1;
            char v31 = *(unsigned char *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v26 = v3;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *(_DWORD *)(a1 + 16) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v3 = *((void *)this + 1);
          }
          else {
            unint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v35 = v20++;
            char v36 = *(unsigned char *)(v21 + v35);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v36 & 0x7F) << v33;
            if ((v36 & 0x80) == 0) {
              break;
            }
            v33 += 7;
            BOOL v14 = v34++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)this + 24)) {
            uint64_t v24 = 0;
          }
LABEL_59:
          unint64_t v3 = v35 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v3 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v3;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              break;
            }
          }
        }
LABEL_60:
        *(void *)(a1 + 8) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190313A50(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

uint64_t sub_190313ABC(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFD4088;
  *(_DWORD *)(result + 100) = 0;
  return result;
}

void sub_190313AE4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190313B1C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "dataBufferSize");
    int v5 = *(_DWORD *)(a1 + 100);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x80000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "gestureLengthSeconds", *(float *)(a1 + 36));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x80000) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "isWristLooselyLevel");
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "negPeakHeight", *(float *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "negPeakLeftHalfWidth");
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "negPeakRightHalfWidth");
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "negPeakTimestampUs");
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "negPeakTotalAngleDegrees", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "pauseBtwPeaksSeconds", *(float *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "posPeakHeight", *(float *)(a1 + 60));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "posPeakLeftHalfWidth");
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "posPeakRightHalfWidth");
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 2) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "posPeakTimestampUs");
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "posPeakTotalAngleDegrees", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "rotZRangeDuringGestureRad", *(float *)(a1 + 76));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "screenTiltAtEndDegrees", *(float *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 4) == 0) {
      goto LABEL_19;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "screenTiltAtStartDegrees", *(float *)(a1 + 84));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 4) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "timestampUs");
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_43:
  PB::TextFormatter::format(this, "wristAngleDiffBtwPeaksDegrees", *(float *)(a1 + 88));
  if ((*(_DWORD *)(a1 + 100) & 0x40000) != 0) {
LABEL_21:
  }
    PB::TextFormatter::format(this, "wristAngleToHorizontalDegrees", *(float *)(a1 + 92));
LABEL_22:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190313DE0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 100) |= 4u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v71 = 0;
                unsigned int v72 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_179;
                  }
                  unint64_t v73 = v20++;
                  char v74 = *(unsigned char *)(v21 + v73);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  BOOL v14 = v72++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_178;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_178:
                unint64_t v2 = v73 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_179;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_179:
              *(void *)(a1 + 24) = v24;
              goto LABEL_215;
            case 2u:
              *(_DWORD *)(a1 + 100) |= 8u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v75 = 0;
                unsigned int v76 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_184;
                  }
                  unint64_t v77 = v27++;
                  char v78 = *(unsigned char *)(v28 + v77);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  BOOL v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_183:
                    unint64_t v2 = v77 + 1;
                    goto LABEL_184;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_183;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_184;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_184:
              *(_DWORD *)(a1 + 32) = v31;
              goto LABEL_215;
            case 3u:
              *(_DWORD *)(a1 + 100) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_174;
            case 4u:
              *(_DWORD *)(a1 + 100) |= 2u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v79 = 0;
                unsigned int v80 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    uint64_t v37 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_189;
                  }
                  unint64_t v81 = v33++;
                  char v82 = *(unsigned char *)(v34 + v81);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  BOOL v14 = v80++ > 8;
                  if (v14)
                  {
                    uint64_t v37 = 0;
LABEL_188:
                    unint64_t v2 = v81 + 1;
                    goto LABEL_189;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v37 = 0;
                }
                goto LABEL_188;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_189;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              uint64_t v37 = 0;
LABEL_189:
              *(void *)(a1 + 16) = v37;
              goto LABEL_215;
            case 5u:
              *(_DWORD *)(a1 + 100) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_174;
            case 6u:
              *(_DWORD *)(a1 + 100) |= 1u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v83 = 0;
                unsigned int v84 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    uint64_t v43 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_194;
                  }
                  unint64_t v85 = v39++;
                  char v86 = *(unsigned char *)(v40 + v85);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0) {
                    break;
                  }
                  v83 += 7;
                  BOOL v14 = v84++ > 8;
                  if (v14)
                  {
                    uint64_t v43 = 0;
LABEL_193:
                    unint64_t v2 = v85 + 1;
                    goto LABEL_194;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v43 = 0;
                }
                goto LABEL_193;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_194;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              uint64_t v43 = 0;
LABEL_194:
              *(void *)(a1 + 8) = v43;
              goto LABEL_215;
            case 7u:
              *(_DWORD *)(a1 + 100) |= 0x1000u;
              unint64_t v45 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v87 = 0;
                unsigned int v88 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_199;
                  }
                  unint64_t v89 = v45++;
                  char v90 = *(unsigned char *)(v46 + v89);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0) {
                    break;
                  }
                  v87 += 7;
                  BOOL v14 = v88++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_198:
                    unint64_t v2 = v89 + 1;
                    goto LABEL_199;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_198;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_199;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_199:
              *(_DWORD *)(a1 + 68) = v49;
              goto LABEL_215;
            case 8u:
              *(_DWORD *)(a1 + 100) |= 0x800u;
              unint64_t v51 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v52 = *(void *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v91 = 0;
                unsigned int v92 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_204;
                  }
                  unint64_t v93 = v51++;
                  char v94 = *(unsigned char *)(v52 + v93);
                  *((void *)this + 1) = v51;
                  v55 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0) {
                    break;
                  }
                  v91 += 7;
                  BOOL v14 = v92++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_203:
                    unint64_t v2 = v93 + 1;
                    goto LABEL_204;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v55) = 0;
                }
                goto LABEL_203;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v2 = v51 + 1;
                *((void *)this + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_204;
                }
                v53 += 7;
                unint64_t v51 = v2;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_204:
              *(_DWORD *)(a1 + 64) = v55;
              goto LABEL_215;
            case 9u:
              *(_DWORD *)(a1 + 100) |= 0x80u;
              unint64_t v57 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v58 = *(void *)this;
              if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
              {
                char v95 = 0;
                unsigned int v96 = 0;
                uint64_t v61 = 0;
                if (v2 <= v57) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v57)
                  {
                    LODWORD(v61) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_209;
                  }
                  unint64_t v97 = v57++;
                  char v98 = *(unsigned char *)(v58 + v97);
                  *((void *)this + 1) = v57;
                  v61 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0) {
                    break;
                  }
                  v95 += 7;
                  BOOL v14 = v96++ > 8;
                  if (v14)
                  {
                    LODWORD(v61) = 0;
LABEL_208:
                    unint64_t v2 = v97 + 1;
                    goto LABEL_209;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v61) = 0;
                }
                goto LABEL_208;
              }
              char v59 = 0;
              unsigned int v60 = 0;
              uint64_t v61 = 0;
              do
              {
                unint64_t v2 = v57 + 1;
                *((void *)this + 1) = v57 + 1;
                char v62 = *(unsigned char *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0) {
                  goto LABEL_209;
                }
                v59 += 7;
                unint64_t v57 = v2;
                BOOL v14 = v60++ > 8;
              }
              while (!v14);
              LODWORD(v61) = 0;
LABEL_209:
              *(_DWORD *)(a1 + 48) = v61;
              goto LABEL_215;
            case 0xAu:
              *(_DWORD *)(a1 + 100) |= 0x40u;
              unint64_t v63 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v64 = *(void *)this;
              if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
              {
                char v99 = 0;
                unsigned int v100 = 0;
                uint64_t v67 = 0;
                if (v2 <= v63) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v63)
                  {
                    LODWORD(v67) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_214;
                  }
                  unint64_t v101 = v63++;
                  char v102 = *(unsigned char *)(v64 + v101);
                  *((void *)this + 1) = v63;
                  v67 |= (unint64_t)(v102 & 0x7F) << v99;
                  if ((v102 & 0x80) == 0) {
                    break;
                  }
                  v99 += 7;
                  BOOL v14 = v100++ > 8;
                  if (v14)
                  {
                    LODWORD(v67) = 0;
LABEL_213:
                    unint64_t v2 = v101 + 1;
                    goto LABEL_214;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v67) = 0;
                }
                goto LABEL_213;
              }
              char v65 = 0;
              unsigned int v66 = 0;
              uint64_t v67 = 0;
              do
              {
                unint64_t v2 = v63 + 1;
                *((void *)this + 1) = v63 + 1;
                char v68 = *(unsigned char *)(v64 + v63);
                v67 |= (unint64_t)(v68 & 0x7F) << v65;
                if ((v68 & 0x80) == 0) {
                  goto LABEL_214;
                }
                v65 += 7;
                unint64_t v63 = v2;
                BOOL v14 = v66++ > 8;
              }
              while (!v14);
              LODWORD(v67) = 0;
LABEL_214:
              *(_DWORD *)(a1 + 44) = v67;
LABEL_215:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xBu:
              *(_DWORD *)(a1 + 100) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_174;
            case 0xCu:
              *(_DWORD *)(a1 + 100) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_174;
            case 0xDu:
              *(_DWORD *)(a1 + 100) |= 0x40000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_174;
            case 0xEu:
              *(_DWORD *)(a1 + 100) |= 0x20000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_174;
            case 0xFu:
              *(_DWORD *)(a1 + 100) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_174;
            case 0x10u:
              *(_DWORD *)(a1 + 100) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_174;
            case 0x11u:
              *(_DWORD *)(a1 + 100) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_174;
            case 0x12u:
              *(_DWORD *)(a1 + 100) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_174;
            case 0x13u:
              *(_DWORD *)(a1 + 100) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
LABEL_174:
                unint64_t v2 = *((void *)this + 1) + 4;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_112:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_215;
            case 0x14u:
              *(_DWORD *)(a1 + 100) |= 0x80000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v70 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v69 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v70 = v69 != 0;
              }
              *(unsigned char *)(a1 + 96) = v70;
              goto LABEL_215;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_215;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903149C4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 100);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    int v4 = *(_DWORD *)(v3 + 100);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x2000) == 0)
  {
LABEL_12:
    if ((v4 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40000) == 0)
  {
LABEL_14:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 0x10) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x8000) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_20;
    }
LABEL_40:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76));
    if ((*(_DWORD *)(v3 + 100) & 0x80000) == 0) {
      return result;
    }
    goto LABEL_41;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x4000) != 0) {
    goto LABEL_40;
  }
LABEL_20:
  if ((v4 & 0x80000) == 0) {
    return result;
  }
LABEL_41:

  return PB::Writer::write(this);
}

uint64_t sub_190314C2C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFD40C0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_190314C54(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190314C8C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "maxSymmetryAllowanceFactor", *(float *)(a1 + 16));
    char v5 = *(unsigned char *)(a1 + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "minPeakRotationRateThresholdRps", *(float *)(a1 + 20));
  char v5 = *(unsigned char *)(a1 + 28);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "minTwistAngleThresholdDeg", *(float *)(a1 + 24));
  if (*(unsigned char *)(a1 + 28)) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestampUs");
LABEL_6:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190314D50(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 28) |= 1u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_53;
                  }
                  unint64_t v29 = v20++;
                  char v30 = *(unsigned char *)(v21 + v29);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_52;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_52:
                unint64_t v2 = v29 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_53;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_53:
              *(void *)(a1 + 8) = v24;
              goto LABEL_54;
            case 2u:
              *(unsigned char *)(a1 + 28) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_39;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_48;
            case 3u:
              *(unsigned char *)(a1 + 28) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_39;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_48;
            case 4u:
              *(unsigned char *)(a1 + 28) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
LABEL_48:
                unint64_t v2 = *((void *)this + 1) + 4;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_39:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_54;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
LABEL_54:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_19031507C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 28);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
      if ((*(unsigned char *)(v3 + 28) & 2) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 16);

  return PB::Writer::write(this, v5);
}

uint64_t sub_190315124(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCEAA8;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_19031514C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190315184(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 52);
  if (v5)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "validX");
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "validY");
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "validZ");
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "velocityUncX", *(float *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "velocityUncY", *(float *)(a1 + 28));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "velocityUncZ", *(float *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "velocityX", *(float *)(a1 + 36));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(this, "velocityY", *(float *)(a1 + 40));
  if ((*(_WORD *)(a1 + 52) & 0x80) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "velocityZ", *(float *)(a1 + 44));
LABEL_13:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190315328(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 52) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_50;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_62;
        case 2u:
          *(_WORD *)(a1 + 52) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_50;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_43;
        case 3u:
          *(_WORD *)(a1 + 52) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_50;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_43;
        case 4u:
          *(_WORD *)(a1 + 52) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_50;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_43;
        case 5u:
          *(_WORD *)(a1 + 52) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_50;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_43;
        case 6u:
          *(_WORD *)(a1 + 52) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_50;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_43;
        case 7u:
          *(_WORD *)(a1 + 52) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_50;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
LABEL_43:
          unint64_t v2 = *((void *)this + 1) + 4;
          goto LABEL_63;
        case 8u:
          *(_WORD *)(a1 + 52) |= 0x100u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v21 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v20 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v21 = v20 != 0;
          }
          *(unsigned char *)(a1 + 48) = v21;
          break;
        case 9u:
          *(_WORD *)(a1 + 52) |= 0x200u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v26 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v25 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v26 = v25 != 0;
          }
          *(unsigned char *)(a1 + 49) = v26;
          break;
        case 0xAu:
          *(_WORD *)(a1 + 52) |= 0x400u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v23 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v22 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v23 = v22 != 0;
          }
          *(unsigned char *)(a1 + 50) = v23;
          break;
        case 0xBu:
          *(_WORD *)(a1 + 52) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_62:
            unint64_t v2 = *((void *)this + 1) + 8;
LABEL_63:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_50:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190315770(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 52);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    __int16 v4 = *(_WORD *)(v3 + 52);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    uint64_t result = PB::Writer::write(this);
    if ((*(_WORD *)(v3 + 52) & 2) == 0) {
      return result;
    }
    goto LABEL_23;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x400) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_23:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5);
}

double sub_1903158DC(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFC2C78;
  *(_DWORD *)(a1 + 140) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

void sub_19031591C(PB::Base *this)
{
  *(void *)this = &unk_1EDFC2C78;
  unint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  __int16 v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  double v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }

  PB::Base::~Base(this);
}

void sub_1903159B0(PB::Base *a1)
{
  sub_19031591C(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903159E8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(unsigned char *)(a1 + 140) & 4) != 0) {
    PB::TextFormatter::format(this, "armTimeActivityHints");
  }
  double v5 = *(float **)(a1 + 8);
  double v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "armTimeImuConfidences", v7);
  }
  char v8 = *(unsigned char *)(a1 + 140);
  if ((v8 & 8) != 0)
  {
    PB::TextFormatter::format(this, "sessionBtHintPercentage", *(float *)(a1 + 124));
    char v8 = *(unsigned char *)(a1 + 140);
    if ((v8 & 0x10) == 0)
    {
LABEL_7:
      if ((v8 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else if ((*(unsigned char *)(a1 + 140) & 0x10) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(this, "sessionGpsHintPercentage", *(float *)(a1 + 128));
  if ((*(unsigned char *)(a1 + 140) & 0x20) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "sessionImuHintPercentage", *(float *)(a1 + 132));
LABEL_9:
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  while (v9 != v10)
  {
    v9 += 4;
    PB::TextFormatter::format(this, "sessionSwivelAngleDegHistogram");
  }
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  while (v11 != v12)
  {
    v11 += 4;
    PB::TextFormatter::format(this, "sessionTiltAngleDegHistogram");
  }
  char v13 = *(unsigned char *)(a1 + 140);
  if ((v13 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "sessionWifiHintPercentage", *(float *)(a1 + 136));
    char v13 = *(unsigned char *)(a1 + 140);
    if ((v13 & 1) == 0)
    {
LABEL_15:
      if ((v13 & 2) == 0) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
  else if ((*(unsigned char *)(a1 + 140) & 1) == 0)
  {
    goto LABEL_15;
  }
  PB::TextFormatter::format(this, "timestamp");
  if ((*(unsigned char *)(a1 + 140) & 2) != 0) {
LABEL_16:
  }
    PB::TextFormatter::format(this, "triggerTimeLastHighImuDrivingConfidenceTimestamp");
LABEL_17:
  BOOL v14 = *(float **)(a1 + 80);
  char v15 = *(float **)(a1 + 88);
  while (v14 != v15)
  {
    float v16 = *v14++;
    PB::TextFormatter::format(this, "windowAfterArmImuConfidences", v16);
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_190315BC8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    char v8 = (void *)(a1 + 72);
    uint64_t v207 = (void **)(a1 + 32);
    char v208 = (void **)(a1 + 56);
    uint64_t v9 = (void *)(a1 + 48);
    uint64_t v10 = (void **)(a1 + 80);
    uint64_t v11 = a1 + 96;
    uint64_t v12 = (void **)(a1 + 8);
    uint64_t v13 = a1 + 24;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0;
      while (1)
      {
        unint64_t v18 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v19 = *(unsigned char *)(v14 + v2);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v2 = v18;
        BOOL v91 = v16++ > 8;
        if (v91) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v25 = v17 & 7;
      if (v25 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 140) |= 1u;
          unint64_t v26 = *((void *)this + 1);
          unint64_t v27 = *((void *)this + 2);
          uint64_t v28 = *(void *)this;
          if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
          {
            char v29 = 0;
            unsigned int v30 = 0;
            uint64_t v31 = 0;
            do
            {
              unint64_t v32 = v26 + 1;
              *((void *)this + 1) = v26 + 1;
              char v33 = *(unsigned char *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0) {
                goto LABEL_265;
              }
              v29 += 7;
              unint64_t v26 = v32;
              BOOL v91 = v30++ > 8;
            }
            while (!v91);
LABEL_202:
            uint64_t v31 = 0;
            goto LABEL_265;
          }
          char v129 = 0;
          unsigned int v130 = 0;
          uint64_t v31 = 0;
          if (v27 <= v26) {
            unint64_t v27 = *((void *)this + 1);
          }
          while (2)
          {
            if (v27 == v26)
            {
              uint64_t v31 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v131 = v26 + 1;
              char v132 = *(unsigned char *)(v28 + v26);
              *((void *)this + 1) = v131;
              v31 |= (unint64_t)(v132 & 0x7F) << v129;
              if (v132 < 0)
              {
                v129 += 7;
                unint64_t v26 = v131;
                BOOL v91 = v130++ > 8;
                if (v91) {
                  goto LABEL_202;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v31 = 0;
              }
            }
            break;
          }
LABEL_265:
          *(void *)(a1 + 104) = v31;
          goto LABEL_339;
        case 2u:
          if (v25 != 2)
          {
            unint64_t v134 = *(char **)(a1 + 16);
            unint64_t v133 = *(void *)(a1 + 24);
            if ((unint64_t)v134 >= v133)
            {
              char v151 = (char *)*v12;
              uint64_t v152 = (v134 - (unsigned char *)*v12) >> 2;
              unint64_t v153 = v152 + 1;
              if ((unint64_t)(v152 + 1) >> 62) {
LABEL_349:
              }
                sub_1903479E8();
              uint64_t v154 = v133 - (void)v151;
              if (v154 >> 1 > v153) {
                unint64_t v153 = v154 >> 1;
              }
              if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v155 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v155 = v153;
              }
              if (v155)
              {
                unsigned int v156 = (char *)sub_190347D04(v13, v155);
                char v151 = *(char **)(a1 + 8);
                unint64_t v134 = *(char **)(a1 + 16);
              }
              else
              {
                unsigned int v156 = 0;
              }
              char v175 = &v156[4 * v152];
              *(_DWORD *)char v175 = 0;
              uint64_t v135 = v175 + 4;
              while (v134 != v151)
              {
                int v176 = *((_DWORD *)v134 - 1);
                v134 -= 4;
                *((_DWORD *)v175 - 1) = v176;
                v175 -= 4;
              }
              *(void *)(a1 + 8) = v175;
              *(void *)(a1 + 16) = v135;
              *(void *)(a1 + 24) = &v156[4 * v155];
              if (v151) {
                operator delete(v151);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v134 = 0;
              uint64_t v135 = v134 + 4;
            }
            *(void *)(a1 + 16) = v135;
            goto LABEL_286;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v34 = *((void *)this + 1);
          unint64_t v35 = *((void *)this + 2);
          while (v34 < v35 && !*((unsigned char *)this + 24))
          {
            uint64_t v37 = *(char **)(a1 + 16);
            unint64_t v36 = *(void *)(a1 + 24);
            if ((unint64_t)v37 >= v36)
            {
              unint64_t v39 = (char *)*v12;
              uint64_t v40 = (v37 - (unsigned char *)*v12) >> 2;
              unint64_t v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 62) {
                goto LABEL_349;
              }
              uint64_t v42 = v36 - (void)v39;
              if (v42 >> 1 > v41) {
                unint64_t v41 = v42 >> 1;
              }
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v43 = v41;
              }
              if (v43)
              {
                char v44 = (char *)sub_190347D04(v13, v43);
                unint64_t v39 = *(char **)(a1 + 8);
                uint64_t v37 = *(char **)(a1 + 16);
              }
              else
              {
                char v44 = 0;
              }
              unint64_t v45 = &v44[4 * v40];
              *(_DWORD *)unint64_t v45 = 0;
              char v38 = v45 + 4;
              while (v37 != v39)
              {
                int v46 = *((_DWORD *)v37 - 1);
                v37 -= 4;
                *((_DWORD *)v45 - 1) = v46;
                v45 -= 4;
              }
              *(void *)(a1 + 8) = v45;
              *(void *)(a1 + 16) = v38;
              *(void *)(a1 + 24) = &v44[4 * v43];
              if (v39) {
                operator delete(v39);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v37 = 0;
              char v38 = v37 + 4;
            }
            *(void *)(a1 + 16) = v38;
            unint64_t v47 = *((void *)this + 1);
            if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((void *)this + 2)) {
              goto LABEL_226;
            }
            *(v38 - 1) = *(_DWORD *)(*(void *)this + v47);
            unint64_t v35 = *((void *)this + 2);
            unint64_t v34 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v34;
          }
          goto LABEL_227;
        case 3u:
          *(unsigned char *)(a1 + 140) |= 4u;
          unint64_t v48 = *((void *)this + 1);
          unint64_t v49 = *((void *)this + 2);
          uint64_t v50 = *(void *)this;
          if (v48 <= 0xFFFFFFFFFFFFFFF5 && v48 + 10 <= v49)
          {
            char v51 = 0;
            unsigned int v52 = 0;
            uint64_t v53 = 0;
            do
            {
              unint64_t v54 = v48 + 1;
              *((void *)this + 1) = v48 + 1;
              char v55 = *(unsigned char *)(v50 + v48);
              v53 |= (unint64_t)(v55 & 0x7F) << v51;
              if ((v55 & 0x80) == 0) {
                goto LABEL_268;
              }
              v51 += 7;
              unint64_t v48 = v54;
              BOOL v91 = v52++ > 8;
            }
            while (!v91);
LABEL_211:
            LODWORD(v53) = 0;
            goto LABEL_268;
          }
          char v136 = 0;
          unsigned int v137 = 0;
          uint64_t v53 = 0;
          if (v49 <= v48) {
            unint64_t v49 = *((void *)this + 1);
          }
          while (2)
          {
            if (v49 == v48)
            {
              LODWORD(v53) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v138 = v48 + 1;
              char v139 = *(unsigned char *)(v50 + v48);
              *((void *)this + 1) = v138;
              v53 |= (unint64_t)(v139 & 0x7F) << v136;
              if (v139 < 0)
              {
                v136 += 7;
                unint64_t v48 = v138;
                BOOL v91 = v137++ > 8;
                if (v91) {
                  goto LABEL_211;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v53) = 0;
              }
            }
            break;
          }
LABEL_268:
          *(_DWORD *)(a1 + 120) = v53;
          goto LABEL_339;
        case 4u:
          if (v25 != 2)
          {
            uint64_t v141 = *(char **)(a1 + 88);
            unint64_t v140 = *(void *)(a1 + 96);
            if ((unint64_t)v141 >= v140)
            {
              unint64_t v157 = (char *)*v10;
              uint64_t v158 = (v141 - (unsigned char *)*v10) >> 2;
              unint64_t v159 = v158 + 1;
              if ((unint64_t)(v158 + 1) >> 62) {
LABEL_350:
              }
                sub_1903479E8();
              uint64_t v160 = v140 - (void)v157;
              if (v160 >> 1 > v159) {
                unint64_t v159 = v160 >> 1;
              }
              if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v161 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v161 = v159;
              }
              if (v161)
              {
                char v162 = (char *)sub_190347D04(v11, v161);
                unint64_t v157 = *(char **)(a1 + 80);
                uint64_t v141 = *(char **)(a1 + 88);
              }
              else
              {
                char v162 = 0;
              }
              unint64_t v177 = &v162[4 * v158];
              *(_DWORD *)unint64_t v177 = 0;
              uint64_t v135 = v177 + 4;
              while (v141 != v157)
              {
                int v178 = *((_DWORD *)v141 - 1);
                v141 -= 4;
                *((_DWORD *)v177 - 1) = v178;
                v177 -= 4;
              }
              *(void *)(a1 + 80) = v177;
              *(void *)(a1 + 88) = v135;
              *(void *)(a1 + 96) = &v162[4 * v161];
              if (v157) {
                operator delete(v157);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v141 = 0;
              uint64_t v135 = v141 + 4;
            }
            *(void *)(a1 + 88) = v135;
LABEL_286:
            unint64_t v179 = *((void *)this + 1);
            if (v179 <= 0xFFFFFFFFFFFFFFFBLL && v179 + 4 <= *((void *)this + 2))
            {
              *(v135 - 1) = *(_DWORD *)(*(void *)this + v179);
LABEL_290:
              *((void *)this + 1) += 4;
            }
            else
            {
LABEL_288:
              *((unsigned char *)this + 24) = 1;
            }
            goto LABEL_339;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v56 = *((void *)this + 1);
          unint64_t v57 = *((void *)this + 2);
          while (v56 < v57 && !*((unsigned char *)this + 24))
          {
            char v59 = *(char **)(a1 + 88);
            unint64_t v58 = *(void *)(a1 + 96);
            if ((unint64_t)v59 >= v58)
            {
              uint64_t v61 = (char *)*v10;
              uint64_t v62 = (v59 - (unsigned char *)*v10) >> 2;
              unint64_t v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 62) {
                goto LABEL_350;
              }
              uint64_t v64 = v58 - (void)v61;
              if (v64 >> 1 > v63) {
                unint64_t v63 = v64 >> 1;
              }
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v65 = v63;
              }
              if (v65)
              {
                unsigned int v66 = (char *)sub_190347D04(v11, v65);
                uint64_t v61 = *(char **)(a1 + 80);
                char v59 = *(char **)(a1 + 88);
              }
              else
              {
                unsigned int v66 = 0;
              }
              uint64_t v67 = &v66[4 * v62];
              *(_DWORD *)uint64_t v67 = 0;
              unsigned int v60 = v67 + 4;
              while (v59 != v61)
              {
                int v68 = *((_DWORD *)v59 - 1);
                v59 -= 4;
                *((_DWORD *)v67 - 1) = v68;
                v67 -= 4;
              }
              *(void *)(a1 + 80) = v67;
              *(void *)(a1 + 88) = v60;
              *(void *)(a1 + 96) = &v66[4 * v65];
              if (v61) {
                operator delete(v61);
              }
            }
            else
            {
              *(_DWORD *)char v59 = 0;
              unsigned int v60 = v59 + 4;
            }
            *(void *)(a1 + 88) = v60;
            unint64_t v69 = *((void *)this + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)this + 2))
            {
LABEL_226:
              *((unsigned char *)this + 24) = 1;
              goto LABEL_227;
            }
            *(v60 - 1) = *(_DWORD *)(*(void *)this + v69);
            unint64_t v57 = *((void *)this + 2);
            unint64_t v56 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v56;
          }
          goto LABEL_227;
        case 5u:
          *(unsigned char *)(a1 + 140) |= 2u;
          unint64_t v70 = *((void *)this + 1);
          unint64_t v71 = *((void *)this + 2);
          uint64_t v72 = *(void *)this;
          if (v70 <= 0xFFFFFFFFFFFFFFF5 && v70 + 10 <= v71)
          {
            char v73 = 0;
            unsigned int v74 = 0;
            uint64_t v75 = 0;
            do
            {
              unint64_t v76 = v70 + 1;
              *((void *)this + 1) = v70 + 1;
              char v77 = *(unsigned char *)(v72 + v70);
              v75 |= (unint64_t)(v77 & 0x7F) << v73;
              if ((v77 & 0x80) == 0) {
                goto LABEL_271;
              }
              v73 += 7;
              unint64_t v70 = v76;
              BOOL v91 = v74++ > 8;
            }
            while (!v91);
LABEL_220:
            uint64_t v75 = 0;
            goto LABEL_271;
          }
          char v142 = 0;
          unsigned int v143 = 0;
          uint64_t v75 = 0;
          if (v71 <= v70) {
            unint64_t v71 = *((void *)this + 1);
          }
          while (2)
          {
            if (v71 == v70)
            {
              uint64_t v75 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v144 = v70 + 1;
              char v145 = *(unsigned char *)(v72 + v70);
              *((void *)this + 1) = v144;
              v75 |= (unint64_t)(v145 & 0x7F) << v142;
              if (v145 < 0)
              {
                v142 += 7;
                unint64_t v70 = v144;
                BOOL v91 = v143++ > 8;
                if (v91) {
                  goto LABEL_220;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v75 = 0;
              }
            }
            break;
          }
LABEL_271:
          *(void *)(a1 + 112) = v75;
          goto LABEL_339;
        case 6u:
          if (v25 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((unsigned char *)this + 24))
            {
              char v78 = *(char **)(a1 + 40);
              do
              {
                if ((unint64_t)v78 >= *v9)
                {
                  char v79 = (char *)*v207;
                  uint64_t v80 = (v78 - (unsigned char *)*v207) >> 2;
                  unint64_t v81 = v80 + 1;
                  if ((unint64_t)(v80 + 1) >> 62) {
                    goto LABEL_351;
                  }
                  uint64_t v82 = *v9 - (void)v79;
                  if (v82 >> 1 > v81) {
                    unint64_t v81 = v82 >> 1;
                  }
                  if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v83 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v83 = v81;
                  }
                  if (v83)
                  {
                    unsigned int v84 = (char *)sub_190347D04((uint64_t)v9, v83);
                    char v79 = *(char **)(a1 + 32);
                    char v78 = *(char **)(a1 + 40);
                  }
                  else
                  {
                    unsigned int v84 = 0;
                  }
                  unint64_t v85 = &v84[4 * v80];
                  *(_DWORD *)unint64_t v85 = 0;
                  char v86 = v85 + 4;
                  while (v78 != v79)
                  {
                    int v87 = *((_DWORD *)v78 - 1);
                    v78 -= 4;
                    *((_DWORD *)v85 - 1) = v87;
                    v85 -= 4;
                  }
                  *(void *)(a1 + 32) = v85;
                  *(void *)(a1 + 40) = v86;
                  *(void *)(a1 + 48) = &v84[4 * v83];
                  if (v79) {
                    operator delete(v79);
                  }
                  char v78 = v86;
                }
                else
                {
                  *(_DWORD *)char v78 = 0;
                  v78 += 4;
                }
                *(void *)(a1 + 40) = v78;
                unint64_t v89 = *((void *)this + 1);
                unint64_t v88 = *((void *)this + 2);
                uint64_t v90 = *(void *)this;
                BOOL v91 = v89 > 0xFFFFFFFFFFFFFFF5 || v89 + 10 > v88;
                if (v91)
                {
                  char v92 = 0;
                  unsigned int v93 = 0;
                  uint64_t v99 = 0;
                  if (v88 <= v89) {
                    uint64_t v94 = *((void *)this + 1);
                  }
                  else {
                    uint64_t v94 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v94 == v89) {
                      goto LABEL_225;
                    }
                    unint64_t v95 = v89++;
                    char v96 = *(unsigned char *)(v90 + v95);
                    *((void *)this + 1) = v89;
                    v99 |= (unint64_t)(v96 & 0x7F) << v92;
                    if ((v96 & 0x80) == 0) {
                      break;
                    }
                    v92 += 7;
                    BOOL v91 = v93++ > 8;
                    if (v91)
                    {
                      LODWORD(v99) = 0;
                      goto LABEL_135;
                    }
                  }
                  if (*((unsigned char *)this + 24)) {
                    LODWORD(v99) = 0;
                  }
LABEL_135:
                  unint64_t v100 = v95 + 1;
                }
                else
                {
                  char v97 = 0;
                  unsigned int v98 = 0;
                  uint64_t v99 = 0;
                  while (1)
                  {
                    unint64_t v100 = v89 + 1;
                    *((void *)this + 1) = v89 + 1;
                    char v101 = *(unsigned char *)(v90 + v89);
                    v99 |= (unint64_t)(v101 & 0x7F) << v97;
                    if ((v101 & 0x80) == 0) {
                      break;
                    }
                    v97 += 7;
                    unint64_t v89 = v100;
                    BOOL v91 = v98++ > 8;
                    if (v91)
                    {
                      LODWORD(v99) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v78 - 1) = v99;
              }
              while (v100 < v88 && !*((unsigned char *)this + 24));
            }
            goto LABEL_227;
          }
          uint64_t v147 = *(char **)(a1 + 40);
          unint64_t v146 = *(void *)(a1 + 48);
          if ((unint64_t)v147 >= v146)
          {
            char v163 = (char *)*v207;
            uint64_t v164 = (v147 - (unsigned char *)*v207) >> 2;
            unint64_t v165 = v164 + 1;
            if ((unint64_t)(v164 + 1) >> 62) {
LABEL_351:
            }
              sub_1903479E8();
            uint64_t v166 = v146 - (void)v163;
            if (v166 >> 1 > v165) {
              unint64_t v165 = v166 >> 1;
            }
            if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v167 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v167 = v165;
            }
            if (v167)
            {
              unsigned int v168 = (char *)sub_190347D04((uint64_t)v9, v167);
              char v163 = *(char **)(a1 + 32);
              uint64_t v147 = *(char **)(a1 + 40);
            }
            else
            {
              unsigned int v168 = 0;
            }
            unsigned int v180 = &v168[4 * v164];
            *(_DWORD *)unsigned int v180 = 0;
            uint64_t v148 = v180 + 4;
            while (v147 != v163)
            {
              int v181 = *((_DWORD *)v147 - 1);
              v147 -= 4;
              *((_DWORD *)v180 - 1) = v181;
              v180 -= 4;
            }
            *(void *)(a1 + 32) = v180;
            *(void *)(a1 + 40) = v148;
            *(void *)(a1 + 48) = &v168[4 * v167];
            if (v163) {
              operator delete(v163);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v147 = 0;
            uint64_t v148 = v147 + 4;
          }
          *(void *)(a1 + 40) = v148;
          unint64_t v182 = *((void *)this + 1);
          unint64_t v183 = *((void *)this + 2);
          uint64_t v184 = *(void *)this;
          char v185 = 0;
          unsigned int v186 = 0;
          if (v182 <= 0xFFFFFFFFFFFFFFF5 && v182 + 10 <= v183)
          {
            uint64_t v190 = 0;
            while (1)
            {
              unint64_t v191 = v182 + 1;
              *((void *)this + 1) = v182 + 1;
              char v192 = *(unsigned char *)(v184 + v182);
              v190 |= (unint64_t)(v192 & 0x7F) << v185;
              if ((v192 & 0x80) == 0) {
                goto LABEL_338;
              }
              v185 += 7;
              unint64_t v182 = v191;
              BOOL v91 = v186++ > 8;
              if (v91) {
                goto LABEL_334;
              }
            }
          }
          uint64_t v190 = 0;
          if (v183 <= v182) {
            unint64_t v183 = *((void *)this + 1);
          }
          while (v183 != v182)
          {
            unint64_t v188 = v182 + 1;
            char v189 = *(unsigned char *)(v184 + v182);
            *((void *)this + 1) = v188;
            v190 |= (unint64_t)(v189 & 0x7F) << v185;
            if ((v189 & 0x80) == 0) {
              goto LABEL_336;
            }
            v185 += 7;
            unint64_t v182 = v188;
            BOOL v91 = v186++ > 8;
            if (v91) {
              goto LABEL_334;
            }
          }
          goto LABEL_335;
        case 7u:
          if (v25 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((unsigned char *)this + 24))
            {
              char v78 = *(char **)(a1 + 64);
              do
              {
                if ((unint64_t)v78 >= *v8)
                {
                  char v102 = (char *)*v208;
                  uint64_t v103 = (v78 - (unsigned char *)*v208) >> 2;
                  unint64_t v104 = v103 + 1;
                  if ((unint64_t)(v103 + 1) >> 62) {
                    goto LABEL_352;
                  }
                  uint64_t v105 = *v8 - (void)v102;
                  if (v105 >> 1 > v104) {
                    unint64_t v104 = v105 >> 1;
                  }
                  if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v106 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v106 = v104;
                  }
                  if (v106)
                  {
                    unint64_t v107 = (char *)sub_190347D04((uint64_t)v8, v106);
                    char v102 = *(char **)(a1 + 56);
                    char v78 = *(char **)(a1 + 64);
                  }
                  else
                  {
                    unint64_t v107 = 0;
                  }
                  unint64_t v108 = &v107[4 * v103];
                  *(_DWORD *)unint64_t v108 = 0;
                  unint64_t v109 = v108 + 4;
                  while (v78 != v102)
                  {
                    int v110 = *((_DWORD *)v78 - 1);
                    v78 -= 4;
                    *((_DWORD *)v108 - 1) = v110;
                    v108 -= 4;
                  }
                  *(void *)(a1 + 56) = v108;
                  *(void *)(a1 + 64) = v109;
                  *(void *)(a1 + 72) = &v107[4 * v106];
                  if (v102) {
                    operator delete(v102);
                  }
                  char v78 = v109;
                }
                else
                {
                  *(_DWORD *)char v78 = 0;
                  v78 += 4;
                }
                *(void *)(a1 + 64) = v78;
                unint64_t v112 = *((void *)this + 1);
                unint64_t v111 = *((void *)this + 2);
                uint64_t v113 = *(void *)this;
                if (v112 <= 0xFFFFFFFFFFFFFFF5 && v112 + 10 <= v111)
                {
                  char v120 = 0;
                  unsigned int v121 = 0;
                  uint64_t v122 = 0;
                  while (1)
                  {
                    unint64_t v123 = v112 + 1;
                    *((void *)this + 1) = v112 + 1;
                    char v124 = *(unsigned char *)(v113 + v112);
                    v122 |= (unint64_t)(v124 & 0x7F) << v120;
                    if ((v124 & 0x80) == 0) {
                      goto LABEL_181;
                    }
                    v120 += 7;
                    unint64_t v112 = v123;
                    BOOL v91 = v121++ > 8;
                    if (v91)
                    {
                      LODWORD(v122) = 0;
                      goto LABEL_181;
                    }
                  }
                }
                char v115 = 0;
                unsigned int v116 = 0;
                uint64_t v122 = 0;
                if (v111 <= v112) {
                  uint64_t v117 = *((void *)this + 1);
                }
                else {
                  uint64_t v117 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v117 == v112)
                  {
LABEL_225:
                    *((unsigned char *)this + 24) = 1;
                    *((_DWORD *)v78 - 1) = 0;
                    goto LABEL_227;
                  }
                  unint64_t v118 = v112++;
                  char v119 = *(unsigned char *)(v113 + v118);
                  *((void *)this + 1) = v112;
                  v122 |= (unint64_t)(v119 & 0x7F) << v115;
                  if ((v119 & 0x80) == 0) {
                    break;
                  }
                  v115 += 7;
                  BOOL v91 = v116++ > 8;
                  if (v91)
                  {
                    LODWORD(v122) = 0;
                    goto LABEL_180;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v122) = 0;
                }
LABEL_180:
                unint64_t v123 = v118 + 1;
LABEL_181:
                *((_DWORD *)v78 - 1) = v122;
              }
              while (v123 < v111 && !*((unsigned char *)this + 24));
            }
LABEL_227:
            PB::Reader::recallMark();
          }
          else
          {
            char v150 = *(char **)(a1 + 64);
            unint64_t v149 = *(void *)(a1 + 72);
            if ((unint64_t)v150 >= v149)
            {
              unint64_t v169 = (char *)*v208;
              uint64_t v170 = (v150 - (unsigned char *)*v208) >> 2;
              unint64_t v171 = v170 + 1;
              if ((unint64_t)(v170 + 1) >> 62) {
LABEL_352:
              }
                sub_1903479E8();
              uint64_t v172 = v149 - (void)v169;
              if (v172 >> 1 > v171) {
                unint64_t v171 = v172 >> 1;
              }
              if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v173 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v173 = v171;
              }
              if (v173)
              {
                char v174 = (char *)sub_190347D04((uint64_t)v8, v173);
                unint64_t v169 = *(char **)(a1 + 56);
                char v150 = *(char **)(a1 + 64);
              }
              else
              {
                char v174 = 0;
              }
              unint64_t v193 = &v174[4 * v170];
              *(_DWORD *)unint64_t v193 = 0;
              uint64_t v148 = v193 + 4;
              while (v150 != v169)
              {
                int v194 = *((_DWORD *)v150 - 1);
                v150 -= 4;
                *((_DWORD *)v193 - 1) = v194;
                v193 -= 4;
              }
              *(void *)(a1 + 56) = v193;
              *(void *)(a1 + 64) = v148;
              *(void *)(a1 + 72) = &v174[4 * v173];
              if (v169) {
                operator delete(v169);
              }
            }
            else
            {
              *(_DWORD *)char v150 = 0;
              uint64_t v148 = v150 + 4;
            }
            *(void *)(a1 + 64) = v148;
            unint64_t v195 = *((void *)this + 1);
            unint64_t v196 = *((void *)this + 2);
            uint64_t v197 = *(void *)this;
            char v198 = 0;
            unsigned int v199 = 0;
            if (v195 > 0xFFFFFFFFFFFFFFF5 || v195 + 10 > v196)
            {
              uint64_t v190 = 0;
              if (v196 <= v195) {
                unint64_t v196 = *((void *)this + 1);
              }
              while (v196 != v195)
              {
                unint64_t v201 = v195 + 1;
                char v202 = *(unsigned char *)(v197 + v195);
                *((void *)this + 1) = v201;
                v190 |= (unint64_t)(v202 & 0x7F) << v198;
                if ((v202 & 0x80) == 0)
                {
LABEL_336:
                  if (*((unsigned char *)this + 24)) {
                    LODWORD(v190) = 0;
                  }
                  goto LABEL_338;
                }
                v198 += 7;
                unint64_t v195 = v201;
                BOOL v91 = v199++ > 8;
                if (v91)
                {
LABEL_334:
                  LODWORD(v190) = 0;
                  goto LABEL_338;
                }
              }
LABEL_335:
              LODWORD(v190) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              uint64_t v190 = 0;
              while (1)
              {
                unint64_t v203 = v195 + 1;
                *((void *)this + 1) = v195 + 1;
                char v204 = *(unsigned char *)(v197 + v195);
                v190 |= (unint64_t)(v204 & 0x7F) << v198;
                if ((v204 & 0x80) == 0) {
                  break;
                }
                v198 += 7;
                unint64_t v195 = v203;
                BOOL v91 = v199++ > 8;
                if (v91) {
                  goto LABEL_334;
                }
              }
            }
LABEL_338:
            *(v148 - 1) = v190;
          }
LABEL_339:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 8u:
          *(unsigned char *)(a1 + 140) |= 0x20u;
          unint64_t v125 = *((void *)this + 1);
          if (v125 > 0xFFFFFFFFFFFFFFFBLL || v125 + 4 > *((void *)this + 2)) {
            goto LABEL_288;
          }
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v125);
          goto LABEL_290;
        case 9u:
          *(unsigned char *)(a1 + 140) |= 8u;
          unint64_t v126 = *((void *)this + 1);
          if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((void *)this + 2)) {
            goto LABEL_288;
          }
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v126);
          goto LABEL_290;
        case 0xAu:
          *(unsigned char *)(a1 + 140) |= 0x10u;
          unint64_t v127 = *((void *)this + 1);
          if (v127 > 0xFFFFFFFFFFFFFFFBLL || v127 + 4 > *((void *)this + 2)) {
            goto LABEL_288;
          }
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(void *)this + v127);
          goto LABEL_290;
        case 0xBu:
          *(unsigned char *)(a1 + 140) |= 0x40u;
          unint64_t v128 = *((void *)this + 1);
          if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((void *)this + 2)) {
            goto LABEL_288;
          }
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(void *)this + v128);
          goto LABEL_290;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_339;
      }
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v17 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v22 = v2 + 1;
      char v23 = *(unsigned char *)(v14 + v2);
      *((void *)this + 1) = v22;
      v17 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0) {
        goto LABEL_21;
      }
      v20 += 7;
      unint64_t v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        unint64_t v17 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190316B4C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 140)) {
    double result = PB::Writer::writeVarInt(this);
  }
  int v4 = *(float **)(v3 + 8);
  double v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6);
  }
  if ((*(unsigned char *)(v3 + 140) & 4) != 0) {
    double result = PB::Writer::writeVarInt(this);
  }
  float v7 = *(float **)(v3 + 80);
  char v8 = *(float **)(v3 + 88);
  while (v7 != v8)
  {
    float v9 = *v7++;
    double result = PB::Writer::write(this, v9);
  }
  if ((*(unsigned char *)(v3 + 140) & 2) != 0) {
    double result = PB::Writer::writeVarInt(this);
  }
  uint64_t v10 = *(void *)(v3 + 32);
  uint64_t v11 = *(void *)(v3 + 40);
  while (v10 != v11)
  {
    v10 += 4;
    double result = PB::Writer::writeVarInt(this);
  }
  uint64_t v12 = *(void *)(v3 + 56);
  uint64_t v13 = *(void *)(v3 + 64);
  while (v12 != v13)
  {
    v12 += 4;
    double result = PB::Writer::writeVarInt(this);
  }
  char v14 = *(unsigned char *)(v3 + 140);
  if ((v14 & 0x20) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(v3 + 132));
    char v14 = *(unsigned char *)(v3 + 140);
    if ((v14 & 8) == 0)
    {
LABEL_21:
      if ((v14 & 0x10) == 0) {
        goto LABEL_22;
      }
LABEL_26:
      double result = PB::Writer::write(this, *(float *)(v3 + 128));
      if ((*(unsigned char *)(v3 + 140) & 0x40) == 0) {
        return result;
      }
      goto LABEL_27;
    }
  }
  else if ((*(unsigned char *)(v3 + 140) & 8) == 0)
  {
    goto LABEL_21;
  }
  double result = PB::Writer::write(this, *(float *)(v3 + 124));
  char v14 = *(unsigned char *)(v3 + 140);
  if ((v14 & 0x10) != 0) {
    goto LABEL_26;
  }
LABEL_22:
  if ((v14 & 0x40) == 0) {
    return result;
  }
LABEL_27:
  float v15 = *(float *)(v3 + 136);

  return PB::Writer::write(this, v15);
}

double sub_190316CC8(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFC2CB0;
  *(_DWORD *)(a1 + 104) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_190316CFC(PB::Base *this)
{
  *(void *)this = &unk_1EDFC2CB0;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_190316D70(PB::Base *a1)
{
  sub_190316CFC(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190316DA8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "sessionGreenFieldPercentage", *(float *)(a1 + 80));
    __int16 v5 = *(_WORD *)(a1 + 104);
  }
  if ((v5 & 0x10) != 0) {
    PB::TextFormatter::format(this, "sessionHighRotationPercentage", *(float *)(a1 + 84));
  }
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  while (v6 != v7)
  {
    v6 += 4;
    PB::TextFormatter::format(this, "sessionMeanPoseAngleXHistogram");
  }
  __int16 v8 = *(_WORD *)(a1 + 104);
  if (v8)
  {
    PB::TextFormatter::format(this, "timestamp");
    __int16 v8 = *(_WORD *)(a1 + 104);
    if ((v8 & 0x20) == 0)
    {
LABEL_9:
      if ((v8 & 2) == 0) {
        goto LABEL_10;
      }
      goto LABEL_22;
    }
  }
  else if ((v8 & 0x20) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(this, "triggerTimeInternalDrivingState");
  __int16 v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 2) == 0)
  {
LABEL_10:
    if ((v8 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "triggerTimeLastHighElevationGainTimestamp");
  __int16 v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 4) == 0)
  {
LABEL_11:
    if ((v8 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "triggerTimeLastHighImuDrivingConfidenceTimestamp");
  __int16 v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 0x40) == 0)
  {
LABEL_12:
    if ((v8 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "windowAfterArmGreenFieldPercentage", *(float *)(a1 + 92));
  __int16 v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 0x80) == 0)
  {
LABEL_13:
    if ((v8 & 0x100) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_25:
  PB::TextFormatter::format(this, "windowAfterArmHighImuDrivingConfidencePercentage", *(float *)(a1 + 96));
  if ((*(_WORD *)(a1 + 104) & 0x100) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(this, "windowAfterArmHighRotationPercentage", *(float *)(a1 + 100));
LABEL_15:
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  while (v9 != v10)
  {
    v9 += 4;
    PB::TextFormatter::format(this, "windowAfterArmMeanPoseAngleXHistogram");
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_190316F6C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    __int16 v8 = (void **)(a1 + 8);
    uint64_t v9 = (void *)(a1 + 24);
    uint64_t v10 = (void **)(a1 + 32);
    uint64_t v11 = (void *)(a1 + 48);
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v45 = v14++ > 8;
        if (v45) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v23 = v15 & 7;
      if (v23 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 104) |= 1u;
          unint64_t v24 = *((void *)this + 1);
          unint64_t v25 = *((void *)this + 2);
          uint64_t v26 = *(void *)this;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            char v27 = 0;
            unsigned int v28 = 0;
            uint64_t v29 = 0;
            do
            {
              unint64_t v30 = v24 + 1;
              *((void *)this + 1) = v24 + 1;
              char v31 = *(unsigned char *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0) {
                goto LABEL_216;
              }
              v27 += 7;
              unint64_t v24 = v30;
              BOOL v45 = v28++ > 8;
            }
            while (!v45);
LABEL_164:
            uint64_t v29 = 0;
            goto LABEL_216;
          }
          char v108 = 0;
          unsigned int v109 = 0;
          uint64_t v29 = 0;
          if (v25 <= v24) {
            unint64_t v25 = *((void *)this + 1);
          }
          while (2)
          {
            if (v25 == v24)
            {
              uint64_t v29 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v110 = v24 + 1;
              char v111 = *(unsigned char *)(v26 + v24);
              *((void *)this + 1) = v110;
              v29 |= (unint64_t)(v111 & 0x7F) << v108;
              if (v111 < 0)
              {
                v108 += 7;
                unint64_t v24 = v110;
                BOOL v45 = v109++ > 8;
                if (v45) {
                  goto LABEL_164;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v29 = 0;
              }
            }
            break;
          }
LABEL_216:
          *(void *)(a1 + 56) = v29;
          goto LABEL_274;
        case 2u:
          if (v23 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((unsigned char *)this + 24))
            {
              unint64_t v32 = *(char **)(a1 + 40);
              do
              {
                if ((unint64_t)v32 >= *v11)
                {
                  char v33 = (char *)*v10;
                  uint64_t v34 = (v32 - (unsigned char *)*v10) >> 2;
                  unint64_t v35 = v34 + 1;
                  if ((unint64_t)(v34 + 1) >> 62) {
                    goto LABEL_284;
                  }
                  uint64_t v36 = *v11 - (void)v33;
                  if (v36 >> 1 > v35) {
                    unint64_t v35 = v36 >> 1;
                  }
                  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v37 = v35;
                  }
                  if (v37)
                  {
                    char v38 = (char *)sub_190347D04((uint64_t)v11, v37);
                    char v33 = *(char **)(a1 + 32);
                    unint64_t v32 = *(char **)(a1 + 40);
                  }
                  else
                  {
                    char v38 = 0;
                  }
                  unint64_t v39 = &v38[4 * v34];
                  *(_DWORD *)unint64_t v39 = 0;
                  uint64_t v40 = v39 + 4;
                  while (v32 != v33)
                  {
                    int v41 = *((_DWORD *)v32 - 1);
                    v32 -= 4;
                    *((_DWORD *)v39 - 1) = v41;
                    v39 -= 4;
                  }
                  *(void *)(a1 + 32) = v39;
                  *(void *)(a1 + 40) = v40;
                  *(void *)(a1 + 48) = &v38[4 * v37];
                  if (v33) {
                    operator delete(v33);
                  }
                  unint64_t v32 = v40;
                }
                else
                {
                  *(_DWORD *)unint64_t v32 = 0;
                  v32 += 4;
                }
                *(void *)(a1 + 40) = v32;
                unint64_t v43 = *((void *)this + 1);
                unint64_t v42 = *((void *)this + 2);
                uint64_t v44 = *(void *)this;
                BOOL v45 = v43 > 0xFFFFFFFFFFFFFFF5 || v43 + 10 > v42;
                if (v45)
                {
                  char v46 = 0;
                  unsigned int v47 = 0;
                  uint64_t v53 = 0;
                  if (v42 <= v43) {
                    uint64_t v48 = *((void *)this + 1);
                  }
                  else {
                    uint64_t v48 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v48 == v43) {
                      goto LABEL_190;
                    }
                    unint64_t v49 = v43++;
                    char v50 = *(unsigned char *)(v44 + v49);
                    *((void *)this + 1) = v43;
                    v53 |= (unint64_t)(v50 & 0x7F) << v46;
                    if ((v50 & 0x80) == 0) {
                      break;
                    }
                    v46 += 7;
                    BOOL v45 = v47++ > 8;
                    if (v45)
                    {
                      LODWORD(v53) = 0;
                      goto LABEL_71;
                    }
                  }
                  if (*((unsigned char *)this + 24)) {
                    LODWORD(v53) = 0;
                  }
LABEL_71:
                  unint64_t v54 = v49 + 1;
                }
                else
                {
                  char v51 = 0;
                  unsigned int v52 = 0;
                  uint64_t v53 = 0;
                  while (1)
                  {
                    unint64_t v54 = v43 + 1;
                    *((void *)this + 1) = v43 + 1;
                    char v55 = *(unsigned char *)(v44 + v43);
                    v53 |= (unint64_t)(v55 & 0x7F) << v51;
                    if ((v55 & 0x80) == 0) {
                      break;
                    }
                    v51 += 7;
                    unint64_t v43 = v54;
                    BOOL v45 = v52++ > 8;
                    if (v45)
                    {
                      LODWORD(v53) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v32 - 1) = v53;
              }
              while (v54 < v42 && !*((unsigned char *)this + 24));
            }
            goto LABEL_191;
          }
          uint64_t v113 = *(char **)(a1 + 40);
          unint64_t v112 = *(void *)(a1 + 48);
          if ((unint64_t)v113 >= v112)
          {
            char v129 = (char *)*v10;
            uint64_t v130 = (v113 - (unsigned char *)*v10) >> 2;
            unint64_t v131 = v130 + 1;
            if ((unint64_t)(v130 + 1) >> 62) {
LABEL_284:
            }
              sub_1903479E8();
            uint64_t v132 = v112 - (void)v129;
            if (v132 >> 1 > v131) {
              unint64_t v131 = v132 >> 1;
            }
            if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v133 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v133 = v131;
            }
            if (v133)
            {
              unint64_t v134 = (char *)sub_190347D04((uint64_t)v11, v133);
              char v129 = *(char **)(a1 + 32);
              uint64_t v113 = *(char **)(a1 + 40);
            }
            else
            {
              unint64_t v134 = 0;
            }
            uint64_t v141 = &v134[4 * v130];
            *(_DWORD *)uint64_t v141 = 0;
            unint64_t v114 = v141 + 4;
            while (v113 != v129)
            {
              int v142 = *((_DWORD *)v113 - 1);
              v113 -= 4;
              *((_DWORD *)v141 - 1) = v142;
              v141 -= 4;
            }
            *(void *)(a1 + 32) = v141;
            *(void *)(a1 + 40) = v114;
            *(void *)(a1 + 48) = &v134[4 * v133];
            if (v129) {
              operator delete(v129);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v113 = 0;
            unint64_t v114 = v113 + 4;
          }
          *(void *)(a1 + 40) = v114;
          unint64_t v143 = *((void *)this + 1);
          unint64_t v144 = *((void *)this + 2);
          uint64_t v145 = *(void *)this;
          char v146 = 0;
          unsigned int v147 = 0;
          if (v143 <= 0xFFFFFFFFFFFFFFF5 && v143 + 10 <= v144)
          {
            uint64_t v151 = 0;
            while (1)
            {
              unint64_t v152 = v143 + 1;
              *((void *)this + 1) = v143 + 1;
              char v153 = *(unsigned char *)(v145 + v143);
              v151 |= (unint64_t)(v153 & 0x7F) << v146;
              if ((v153 & 0x80) == 0) {
                goto LABEL_273;
              }
              v146 += 7;
              unint64_t v143 = v152;
              BOOL v45 = v147++ > 8;
              if (v45) {
                goto LABEL_269;
              }
            }
          }
          uint64_t v151 = 0;
          if (v144 <= v143) {
            unint64_t v144 = *((void *)this + 1);
          }
          while (v144 != v143)
          {
            unint64_t v149 = v143 + 1;
            char v150 = *(unsigned char *)(v145 + v143);
            *((void *)this + 1) = v149;
            v151 |= (unint64_t)(v150 & 0x7F) << v146;
            if ((v150 & 0x80) == 0) {
              goto LABEL_271;
            }
            v146 += 7;
            unint64_t v143 = v149;
            BOOL v45 = v147++ > 8;
            if (v45) {
              goto LABEL_269;
            }
          }
          goto LABEL_270;
        case 3u:
          *(_WORD *)(a1 + 104) |= 0x100u;
          unint64_t v56 = *((void *)this + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((void *)this + 2)) {
            goto LABEL_157;
          }
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v56);
          goto LABEL_193;
        case 4u:
          *(_WORD *)(a1 + 104) |= 0x40u;
          unint64_t v57 = *((void *)this + 1);
          if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((void *)this + 2)) {
            goto LABEL_157;
          }
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v57);
          goto LABEL_193;
        case 5u:
          *(_WORD *)(a1 + 104) |= 0x80u;
          unint64_t v58 = *((void *)this + 1);
          if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((void *)this + 2)) {
            goto LABEL_157;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v58);
          goto LABEL_193;
        case 6u:
          *(_WORD *)(a1 + 104) |= 0x20u;
          unint64_t v59 = *((void *)this + 1);
          unint64_t v60 = *((void *)this + 2);
          uint64_t v61 = *(void *)this;
          if (v59 <= 0xFFFFFFFFFFFFFFF5 && v59 + 10 <= v60)
          {
            char v62 = 0;
            unsigned int v63 = 0;
            uint64_t v64 = 0;
            do
            {
              unint64_t v65 = v59 + 1;
              *((void *)this + 1) = v59 + 1;
              char v66 = *(unsigned char *)(v61 + v59);
              v64 |= (unint64_t)(v66 & 0x7F) << v62;
              if ((v66 & 0x80) == 0) {
                goto LABEL_219;
              }
              v62 += 7;
              unint64_t v59 = v65;
              BOOL v45 = v63++ > 8;
            }
            while (!v45);
LABEL_173:
            LODWORD(v64) = 0;
            goto LABEL_219;
          }
          char v115 = 0;
          unsigned int v116 = 0;
          uint64_t v64 = 0;
          if (v60 <= v59) {
            unint64_t v60 = *((void *)this + 1);
          }
          while (2)
          {
            if (v60 == v59)
            {
              LODWORD(v64) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v117 = v59 + 1;
              char v118 = *(unsigned char *)(v61 + v59);
              *((void *)this + 1) = v117;
              v64 |= (unint64_t)(v118 & 0x7F) << v115;
              if (v118 < 0)
              {
                v115 += 7;
                unint64_t v59 = v117;
                BOOL v45 = v116++ > 8;
                if (v45) {
                  goto LABEL_173;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v64) = 0;
              }
            }
            break;
          }
LABEL_219:
          *(_DWORD *)(a1 + 88) = v64;
          goto LABEL_274;
        case 7u:
          *(_WORD *)(a1 + 104) |= 2u;
          unint64_t v67 = *((void *)this + 1);
          unint64_t v68 = *((void *)this + 2);
          uint64_t v69 = *(void *)this;
          if (v67 <= 0xFFFFFFFFFFFFFFF5 && v67 + 10 <= v68)
          {
            char v70 = 0;
            unsigned int v71 = 0;
            uint64_t v72 = 0;
            do
            {
              unint64_t v73 = v67 + 1;
              *((void *)this + 1) = v67 + 1;
              char v74 = *(unsigned char *)(v69 + v67);
              v72 |= (unint64_t)(v74 & 0x7F) << v70;
              if ((v74 & 0x80) == 0) {
                goto LABEL_222;
              }
              v70 += 7;
              unint64_t v67 = v73;
              BOOL v45 = v71++ > 8;
            }
            while (!v45);
LABEL_180:
            uint64_t v72 = 0;
            goto LABEL_222;
          }
          char v119 = 0;
          unsigned int v120 = 0;
          uint64_t v72 = 0;
          if (v68 <= v67) {
            unint64_t v68 = *((void *)this + 1);
          }
          while (2)
          {
            if (v68 == v67)
            {
              uint64_t v72 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v121 = v67 + 1;
              char v122 = *(unsigned char *)(v69 + v67);
              *((void *)this + 1) = v121;
              v72 |= (unint64_t)(v122 & 0x7F) << v119;
              if (v122 < 0)
              {
                v119 += 7;
                unint64_t v67 = v121;
                BOOL v45 = v120++ > 8;
                if (v45) {
                  goto LABEL_180;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v72 = 0;
              }
            }
            break;
          }
LABEL_222:
          *(void *)(a1 + 64) = v72;
          goto LABEL_274;
        case 8u:
          *(_WORD *)(a1 + 104) |= 4u;
          unint64_t v75 = *((void *)this + 1);
          unint64_t v76 = *((void *)this + 2);
          uint64_t v77 = *(void *)this;
          if (v75 <= 0xFFFFFFFFFFFFFFF5 && v75 + 10 <= v76)
          {
            char v78 = 0;
            unsigned int v79 = 0;
            uint64_t v80 = 0;
            do
            {
              unint64_t v81 = v75 + 1;
              *((void *)this + 1) = v75 + 1;
              char v82 = *(unsigned char *)(v77 + v75);
              v80 |= (unint64_t)(v82 & 0x7F) << v78;
              if ((v82 & 0x80) == 0) {
                goto LABEL_225;
              }
              v78 += 7;
              unint64_t v75 = v81;
              BOOL v45 = v79++ > 8;
            }
            while (!v45);
LABEL_187:
            uint64_t v80 = 0;
            goto LABEL_225;
          }
          char v123 = 0;
          unsigned int v124 = 0;
          uint64_t v80 = 0;
          if (v76 <= v75) {
            unint64_t v76 = *((void *)this + 1);
          }
          while (2)
          {
            if (v76 == v75)
            {
              uint64_t v80 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v125 = v75 + 1;
              char v126 = *(unsigned char *)(v77 + v75);
              *((void *)this + 1) = v125;
              v80 |= (unint64_t)(v126 & 0x7F) << v123;
              if (v126 < 0)
              {
                v123 += 7;
                unint64_t v75 = v125;
                BOOL v45 = v124++ > 8;
                if (v45) {
                  goto LABEL_187;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v80 = 0;
              }
            }
            break;
          }
LABEL_225:
          *(void *)(a1 + 72) = v80;
          goto LABEL_274;
        case 9u:
          if (v23 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((unsigned char *)this + 24))
            {
              unint64_t v32 = *(char **)(a1 + 16);
              do
              {
                if ((unint64_t)v32 >= *v9)
                {
                  unsigned int v84 = (char *)*v8;
                  uint64_t v85 = (v32 - (unsigned char *)*v8) >> 2;
                  unint64_t v86 = v85 + 1;
                  if ((unint64_t)(v85 + 1) >> 62) {
                    goto LABEL_285;
                  }
                  uint64_t v87 = *v9 - (void)v84;
                  if (v87 >> 1 > v86) {
                    unint64_t v86 = v87 >> 1;
                  }
                  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v88 = v86;
                  }
                  if (v88)
                  {
                    unint64_t v89 = (char *)sub_190347D04((uint64_t)v9, v88);
                    unsigned int v84 = *(char **)(a1 + 8);
                    unint64_t v32 = *(char **)(a1 + 16);
                  }
                  else
                  {
                    unint64_t v89 = 0;
                  }
                  uint64_t v90 = &v89[4 * v85];
                  *(_DWORD *)uint64_t v90 = 0;
                  BOOL v91 = v90 + 4;
                  while (v32 != v84)
                  {
                    int v92 = *((_DWORD *)v32 - 1);
                    v32 -= 4;
                    *((_DWORD *)v90 - 1) = v92;
                    v90 -= 4;
                  }
                  *(void *)(a1 + 8) = v90;
                  *(void *)(a1 + 16) = v91;
                  *(void *)(a1 + 24) = &v89[4 * v88];
                  if (v84) {
                    operator delete(v84);
                  }
                  unint64_t v32 = v91;
                }
                else
                {
                  *(_DWORD *)unint64_t v32 = 0;
                  v32 += 4;
                }
                *(void *)(a1 + 16) = v32;
                unint64_t v94 = *((void *)this + 1);
                unint64_t v93 = *((void *)this + 2);
                uint64_t v95 = *(void *)this;
                if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v93)
                {
                  char v102 = 0;
                  unsigned int v103 = 0;
                  uint64_t v104 = 0;
                  while (1)
                  {
                    unint64_t v105 = v94 + 1;
                    *((void *)this + 1) = v94 + 1;
                    char v106 = *(unsigned char *)(v95 + v94);
                    v104 |= (unint64_t)(v106 & 0x7F) << v102;
                    if ((v106 & 0x80) == 0) {
                      goto LABEL_152;
                    }
                    v102 += 7;
                    unint64_t v94 = v105;
                    BOOL v45 = v103++ > 8;
                    if (v45)
                    {
                      LODWORD(v104) = 0;
                      goto LABEL_152;
                    }
                  }
                }
                char v97 = 0;
                unsigned int v98 = 0;
                uint64_t v104 = 0;
                if (v93 <= v94) {
                  uint64_t v99 = *((void *)this + 1);
                }
                else {
                  uint64_t v99 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v99 == v94)
                  {
LABEL_190:
                    *((unsigned char *)this + 24) = 1;
                    *((_DWORD *)v32 - 1) = 0;
                    goto LABEL_191;
                  }
                  unint64_t v100 = v94++;
                  char v101 = *(unsigned char *)(v95 + v100);
                  *((void *)this + 1) = v94;
                  v104 |= (unint64_t)(v101 & 0x7F) << v97;
                  if ((v101 & 0x80) == 0) {
                    break;
                  }
                  v97 += 7;
                  BOOL v45 = v98++ > 8;
                  if (v45)
                  {
                    LODWORD(v104) = 0;
                    goto LABEL_151;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v104) = 0;
                }
LABEL_151:
                unint64_t v105 = v100 + 1;
LABEL_152:
                *((_DWORD *)v32 - 1) = v104;
              }
              while (v105 < v93 && !*((unsigned char *)this + 24));
            }
LABEL_191:
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v128 = *(char **)(a1 + 16);
            unint64_t v127 = *(void *)(a1 + 24);
            if ((unint64_t)v128 >= v127)
            {
              uint64_t v135 = (char *)*v8;
              uint64_t v136 = (v128 - (unsigned char *)*v8) >> 2;
              unint64_t v137 = v136 + 1;
              if ((unint64_t)(v136 + 1) >> 62) {
LABEL_285:
              }
                sub_1903479E8();
              uint64_t v138 = v127 - (void)v135;
              if (v138 >> 1 > v137) {
                unint64_t v137 = v138 >> 1;
              }
              if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v139 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v139 = v137;
              }
              if (v139)
              {
                unint64_t v140 = (char *)sub_190347D04((uint64_t)v9, v139);
                uint64_t v135 = *(char **)(a1 + 8);
                unint64_t v128 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v140 = 0;
              }
              uint64_t v154 = &v140[4 * v136];
              *(_DWORD *)uint64_t v154 = 0;
              unint64_t v114 = v154 + 4;
              while (v128 != v135)
              {
                int v155 = *((_DWORD *)v128 - 1);
                v128 -= 4;
                *((_DWORD *)v154 - 1) = v155;
                v154 -= 4;
              }
              *(void *)(a1 + 8) = v154;
              *(void *)(a1 + 16) = v114;
              *(void *)(a1 + 24) = &v140[4 * v139];
              if (v135) {
                operator delete(v135);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v128 = 0;
              unint64_t v114 = v128 + 4;
            }
            *(void *)(a1 + 16) = v114;
            unint64_t v156 = *((void *)this + 1);
            unint64_t v157 = *((void *)this + 2);
            uint64_t v158 = *(void *)this;
            char v159 = 0;
            unsigned int v160 = 0;
            if (v156 > 0xFFFFFFFFFFFFFFF5 || v156 + 10 > v157)
            {
              uint64_t v151 = 0;
              if (v157 <= v156) {
                unint64_t v157 = *((void *)this + 1);
              }
              while (v157 != v156)
              {
                unint64_t v162 = v156 + 1;
                char v163 = *(unsigned char *)(v158 + v156);
                *((void *)this + 1) = v162;
                v151 |= (unint64_t)(v163 & 0x7F) << v159;
                if ((v163 & 0x80) == 0)
                {
LABEL_271:
                  if (*((unsigned char *)this + 24)) {
                    LODWORD(v151) = 0;
                  }
                  goto LABEL_273;
                }
                v159 += 7;
                unint64_t v156 = v162;
                BOOL v45 = v160++ > 8;
                if (v45)
                {
LABEL_269:
                  LODWORD(v151) = 0;
                  goto LABEL_273;
                }
              }
LABEL_270:
              LODWORD(v151) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              uint64_t v151 = 0;
              while (1)
              {
                unint64_t v164 = v156 + 1;
                *((void *)this + 1) = v156 + 1;
                char v165 = *(unsigned char *)(v158 + v156);
                v151 |= (unint64_t)(v165 & 0x7F) << v159;
                if ((v165 & 0x80) == 0) {
                  break;
                }
                v159 += 7;
                unint64_t v156 = v164;
                BOOL v45 = v160++ > 8;
                if (v45) {
                  goto LABEL_269;
                }
              }
            }
LABEL_273:
            *(v114 - 1) = v151;
          }
LABEL_274:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 0xAu:
          *(_WORD *)(a1 + 104) |= 0x10u;
          unint64_t v83 = *((void *)this + 1);
          if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)this + 2)) {
            goto LABEL_157;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v83);
          goto LABEL_193;
        case 0xBu:
          *(_WORD *)(a1 + 104) |= 8u;
          unint64_t v107 = *((void *)this + 1);
          if (v107 <= 0xFFFFFFFFFFFFFFFBLL && v107 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v107);
LABEL_193:
            *((void *)this + 1) += 4;
          }
          else
          {
LABEL_157:
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_274;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_274;
      }
    }
    char v18 = 0;
    unsigned int v19 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v20 = v2 + 1;
      char v21 = *(unsigned char *)(v12 + v2);
      *((void *)this + 1) = v20;
      v15 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0) {
        goto LABEL_21;
      }
      v18 += 7;
      unint64_t v2 = v20;
      if (v19++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190317C30(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if (*(_WORD *)(result + 104)) {
    double result = PB::Writer::writeVarInt(this);
  }
  uint64_t v4 = *(void *)(v3 + 32);
  uint64_t v5 = *(void *)(v3 + 40);
  while (v4 != v5)
  {
    v4 += 4;
    double result = PB::Writer::writeVarInt(this);
  }
  __int16 v6 = *(_WORD *)(v3 + 104);
  if ((v6 & 0x100) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(v3 + 100));
    __int16 v6 = *(_WORD *)(v3 + 104);
    if ((v6 & 0x40) == 0)
    {
LABEL_8:
      if ((v6 & 0x80) == 0) {
        goto LABEL_9;
      }
      goto LABEL_22;
    }
  }
  else if ((v6 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  double result = PB::Writer::write(this, *(float *)(v3 + 92));
  __int16 v6 = *(_WORD *)(v3 + 104);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  double result = PB::Writer::write(this, *(float *)(v3 + 96));
  __int16 v6 = *(_WORD *)(v3 + 104);
  if ((v6 & 0x20) == 0)
  {
LABEL_10:
    if ((v6 & 2) == 0) {
      goto LABEL_11;
    }
LABEL_24:
    double result = PB::Writer::writeVarInt(this);
    if ((*(_WORD *)(v3 + 104) & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_23:
  double result = PB::Writer::writeVarInt(this);
  __int16 v6 = *(_WORD *)(v3 + 104);
  if ((v6 & 2) != 0) {
    goto LABEL_24;
  }
LABEL_11:
  if ((v6 & 4) != 0) {
LABEL_12:
  }
    double result = PB::Writer::writeVarInt(this);
LABEL_13:
  uint64_t v7 = *(void *)(v3 + 8);
  uint64_t v8 = *(void *)(v3 + 16);
  while (v7 != v8)
  {
    v7 += 4;
    double result = PB::Writer::writeVarInt(this);
  }
  __int16 v9 = *(_WORD *)(v3 + 104);
  if ((v9 & 0x10) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(v3 + 84));
    __int16 v9 = *(_WORD *)(v3 + 104);
  }
  if ((v9 & 8) != 0)
  {
    float v10 = *(float *)(v3 + 80);
    return PB::Writer::write(this, v10);
  }
  return result;
}

uint64_t sub_190317DA8(uint64_t result)
{
  *(void *)double result = &unk_1EDFCCD20;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_190317DD0(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190317E08(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "diffPeakTimestampTrigger");
    __int16 v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "epochFirstTimestamp");
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "epochLastTimestamp");
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "maxAccelNormInWindow", *(float *)(a1 + 44));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "pass");
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "peakPressure", *(float *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 4) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "peakTimestamp");
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "pressureODR");
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "riseTime", *(float *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(this, "timestamp");
  if ((*(_WORD *)(a1 + 68) & 0x200) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "width", *(float *)(a1 + 60));
LABEL_13:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190317FAC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v21 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v20 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v21 = v20 != 0;
              }
              *(unsigned char *)(a1 + 64) = v21;
              goto LABEL_156;
            case 2u:
              *(_WORD *)(a1 + 68) |= 0x80u;
              unint64_t v23 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_130;
                  }
                  unint64_t v61 = v23++;
                  char v62 = *(unsigned char *)(v24 + v61);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_129:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_130;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_129;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_130;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_130:
              *(_DWORD *)(a1 + 52) = v27;
              goto LABEL_156;
            case 3u:
              *(_WORD *)(a1 + 68) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_72;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_125;
            case 4u:
              *(_WORD *)(a1 + 68) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_72;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_125;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_72;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_125;
            case 6u:
              *(_WORD *)(a1 + 68) |= 4u;
              unint64_t v29 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v30 = *(void *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v33 = 0;
                if (v2 <= v29) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    uint64_t v33 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_135;
                  }
                  unint64_t v65 = v29++;
                  char v66 = *(unsigned char *)(v30 + v65);
                  *((void *)this + 1) = v29;
                  v33 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    uint64_t v33 = 0;
LABEL_134:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_135;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v33 = 0;
                }
                goto LABEL_134;
              }
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v33 = 0;
              do
              {
                unint64_t v2 = v29 + 1;
                *((void *)this + 1) = v29 + 1;
                char v34 = *(unsigned char *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_135;
                }
                v31 += 7;
                unint64_t v29 = v2;
                BOOL v14 = v32++ > 8;
              }
              while (!v14);
              uint64_t v33 = 0;
LABEL_135:
              *(void *)(a1 + 24) = v33;
              goto LABEL_156;
            case 7u:
              *(_WORD *)(a1 + 68) |= 0x10u;
              unint64_t v35 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v36 = *(void *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_140;
                  }
                  unint64_t v69 = v35++;
                  char v70 = *(unsigned char *)(v36 + v69);
                  *((void *)this + 1) = v35;
                  v39 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_139:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_140;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_139;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v2 = v35 + 1;
                *((void *)this + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_140;
                }
                v37 += 7;
                unint64_t v35 = v2;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_140:
              *(_DWORD *)(a1 + 40) = v39;
              goto LABEL_156;
            case 8u:
              *(_WORD *)(a1 + 68) |= 1u;
              unint64_t v41 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v71 = 0;
                unsigned int v72 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    uint64_t v45 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_145;
                  }
                  unint64_t v73 = v41++;
                  char v74 = *(unsigned char *)(v42 + v73);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  BOOL v14 = v72++ > 8;
                  if (v14)
                  {
                    uint64_t v45 = 0;
LABEL_144:
                    unint64_t v2 = v73 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v45 = 0;
                }
                goto LABEL_144;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_145;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              uint64_t v45 = 0;
LABEL_145:
              *(void *)(a1 + 8) = v45;
              goto LABEL_156;
            case 9u:
              *(_WORD *)(a1 + 68) |= 2u;
              unint64_t v47 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v48 = *(void *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                char v75 = 0;
                unsigned int v76 = 0;
                uint64_t v51 = 0;
                if (v2 <= v47) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v47)
                  {
                    uint64_t v51 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_150;
                  }
                  unint64_t v77 = v47++;
                  char v78 = *(unsigned char *)(v48 + v77);
                  *((void *)this + 1) = v47;
                  v51 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  BOOL v14 = v76++ > 8;
                  if (v14)
                  {
                    uint64_t v51 = 0;
LABEL_149:
                    unint64_t v2 = v77 + 1;
                    goto LABEL_150;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v51 = 0;
                }
                goto LABEL_149;
              }
              char v49 = 0;
              unsigned int v50 = 0;
              uint64_t v51 = 0;
              do
              {
                unint64_t v2 = v47 + 1;
                *((void *)this + 1) = v47 + 1;
                char v52 = *(unsigned char *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0) {
                  goto LABEL_150;
                }
                v49 += 7;
                unint64_t v47 = v2;
                BOOL v14 = v50++ > 8;
              }
              while (!v14);
              uint64_t v51 = 0;
LABEL_150:
              *(void *)(a1 + 16) = v51;
              goto LABEL_156;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
LABEL_125:
                unint64_t v2 = *((void *)this + 1) + 4;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_72:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_156;
            case 0xBu:
              *(_WORD *)(a1 + 68) |= 8u;
              unint64_t v53 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v54 = *(void *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                char v79 = 0;
                unsigned int v80 = 0;
                uint64_t v57 = 0;
                if (v2 <= v53) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v53)
                  {
                    uint64_t v57 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_155;
                  }
                  unint64_t v81 = v53++;
                  char v82 = *(unsigned char *)(v54 + v81);
                  *((void *)this + 1) = v53;
                  v57 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  BOOL v14 = v80++ > 8;
                  if (v14)
                  {
                    uint64_t v57 = 0;
LABEL_154:
                    unint64_t v2 = v81 + 1;
                    goto LABEL_155;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v57 = 0;
                }
                goto LABEL_154;
              }
              char v55 = 0;
              unsigned int v56 = 0;
              uint64_t v57 = 0;
              do
              {
                unint64_t v2 = v53 + 1;
                *((void *)this + 1) = v53 + 1;
                char v58 = *(unsigned char *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0) {
                  goto LABEL_155;
                }
                v55 += 7;
                unint64_t v53 = v2;
                BOOL v14 = v56++ > 8;
              }
              while (!v14);
              uint64_t v57 = 0;
LABEL_155:
              *(void *)(a1 + 32) = v57;
LABEL_156:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_156;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_19031880C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 68);
  if ((v4 & 0x400) != 0)
  {
    uint64_t result = PB::Writer::write(this);
    __int16 v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
    if ((*(_WORD *)(v3 + 68) & 8) == 0) {
      return result;
    }
    goto LABEL_23;
  }
LABEL_21:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_23:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_190318978(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCC738;
  *(_DWORD *)(result + 108) = 0;
  return result;
}

void sub_1903189A0(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903189D8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 108);
  if (v5)
  {
    PB::TextFormatter::format(this, "configDelaySpreadFpThreshold", *(float *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 108);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_35;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "configFeatureSamples");
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "configNonPlanarDelaySpreadThreshold", *(float *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "configNonPlanarPaprThreshold", *(float *)(a1 + 20));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "configPeakEnergyFpThreshold", *(float *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "configPlanarDelaySpreadThreshold", *(float *)(a1 + 28));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "configPlanarPaprThreshold", *(float *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "configPostTriggerLimitTime");
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "configPreTriggerLimitTime");
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "configRawRmsMaxFpThreshold", *(float *)(a1 + 44));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "configRawRmsMeanFpThreshold", *(float *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "configRmsClipMinAmp", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "delaySpread", *(float *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x800000) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "isAudioTPQ");
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "isFpThresholdsMet");
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "isNonPlanarTp");
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "isPlanarTp");
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "isTauBarWithinRange");
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x2000) == 0)
  {
LABEL_20:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "papr", *(float *)(a1 + 60));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x4000) == 0)
  {
LABEL_21:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "peakEnergy", *(float *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x8000) == 0)
  {
LABEL_22:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "rawRmsMax", *(float *)(a1 + 68));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x10000) == 0)
  {
LABEL_23:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "rawRmsMean", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x20000) == 0)
  {
LABEL_24:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "rawRmsSum", *(float *)(a1 + 76));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x40000) == 0)
  {
LABEL_25:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "rmsClipSum", *(float *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x80000) == 0)
  {
LABEL_26:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "sampleCount");
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x100000) == 0)
  {
LABEL_27:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "t2TimesRmsClipSum", *(float *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x200000) == 0)
  {
LABEL_28:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
LABEL_59:
  PB::TextFormatter::format(this, "tTimesRmsClipSum", *(float *)(a1 + 92));
  if ((*(_DWORD *)(a1 + 108) & 0x400000) != 0) {
LABEL_29:
  }
    PB::TextFormatter::format(this, "tauBar", *(float *)(a1 + 96));
LABEL_30:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190318D9C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 108) |= 0x800000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v21 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v20 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v21 = v20 != 0;
              }
              *(unsigned char *)(a1 + 100) = v21;
              goto LABEL_159;
            case 2u:
              *(_DWORD *)(a1 + 108) |= 0x80000u;
              unint64_t v23 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_168;
                  }
                  unint64_t v57 = v23++;
                  char v58 = *(unsigned char *)(v24 + v57);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_167:
                    unint64_t v2 = v57 + 1;
                    goto LABEL_168;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_167;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_168;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_168:
              *(_DWORD *)(a1 + 84) = v27;
              goto LABEL_159;
            case 3u:
              *(_DWORD *)(a1 + 108) |= 0x20000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 4u:
              *(_DWORD *)(a1 + 108) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 5u:
              *(_DWORD *)(a1 + 108) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 6u:
              *(_DWORD *)(a1 + 108) |= 0x200000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 7u:
              *(_DWORD *)(a1 + 108) |= 0x40000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 8u:
              *(_DWORD *)(a1 + 108) |= 0x400000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 9u:
              *(_DWORD *)(a1 + 108) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 0xAu:
              *(_DWORD *)(a1 + 108) |= 0x100000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 0xBu:
              *(_DWORD *)(a1 + 108) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 0xCu:
              *(_DWORD *)(a1 + 108) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 0xDu:
              *(_DWORD *)(a1 + 108) |= 0x4000000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *(unsigned char *)(a1 + 103) = v30;
              goto LABEL_159;
            case 0xEu:
              *(_DWORD *)(a1 + 108) |= 0x2000000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v32 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v31 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v32 = v31 != 0;
              }
              *(unsigned char *)(a1 + 102) = v32;
              goto LABEL_159;
            case 0xFu:
              *(_DWORD *)(a1 + 108) |= 0x1000000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *(unsigned char *)(a1 + 101) = v34;
              goto LABEL_159;
            case 0x10u:
              *(_DWORD *)(a1 + 108) |= 0x8000000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v36 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v35 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v36 = v35 != 0;
              }
              *(unsigned char *)(a1 + 104) = v36;
              goto LABEL_159;
            case 0x11u:
              *(_DWORD *)(a1 + 108) |= 2u;
              unint64_t v37 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v38 = *(void *)this;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v41 = 0;
                if (v2 <= v37) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_173;
                  }
                  unint64_t v61 = v37++;
                  char v62 = *(unsigned char *)(v38 + v61);
                  *((void *)this + 1) = v37;
                  v41 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_172:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_173;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v41) = 0;
                }
                goto LABEL_172;
              }
              char v39 = 0;
              unsigned int v40 = 0;
              uint64_t v41 = 0;
              do
              {
                unint64_t v2 = v37 + 1;
                *((void *)this + 1) = v37 + 1;
                char v42 = *(unsigned char *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0) {
                  goto LABEL_173;
                }
                v39 += 7;
                unint64_t v37 = v2;
                BOOL v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_173:
              *(_DWORD *)(a1 + 12) = v41;
              goto LABEL_159;
            case 0x12u:
              *(_DWORD *)(a1 + 108) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 0x13u:
              *(_DWORD *)(a1 + 108) |= 0x100u;
              unint64_t v43 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v44 = *(void *)this;
              if (v43 > 0xFFFFFFFFFFFFFFF5 || v43 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v47 = 0;
                if (v2 <= v43) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v43)
                  {
                    LODWORD(v47) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_178;
                  }
                  unint64_t v65 = v43++;
                  char v66 = *(unsigned char *)(v44 + v65);
                  *((void *)this + 1) = v43;
                  v47 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v47) = 0;
LABEL_177:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_178;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v47) = 0;
                }
                goto LABEL_177;
              }
              char v45 = 0;
              unsigned int v46 = 0;
              uint64_t v47 = 0;
              do
              {
                unint64_t v2 = v43 + 1;
                *((void *)this + 1) = v43 + 1;
                char v48 = *(unsigned char *)(v44 + v43);
                v47 |= (unint64_t)(v48 & 0x7F) << v45;
                if ((v48 & 0x80) == 0) {
                  goto LABEL_178;
                }
                v45 += 7;
                unint64_t v43 = v2;
                BOOL v14 = v46++ > 8;
              }
              while (!v14);
              LODWORD(v47) = 0;
LABEL_178:
              *(_DWORD *)(a1 + 40) = v47;
              goto LABEL_159;
            case 0x14u:
              *(_DWORD *)(a1 + 108) |= 0x80u;
              unint64_t v49 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v50 = *(void *)this;
              if (v49 > 0xFFFFFFFFFFFFFFF5 || v49 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v53 = 0;
                if (v2 <= v49) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v49)
                  {
                    LODWORD(v53) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_183;
                  }
                  unint64_t v69 = v49++;
                  char v70 = *(unsigned char *)(v50 + v69);
                  *((void *)this + 1) = v49;
                  v53 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v53) = 0;
LABEL_182:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_183;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v53) = 0;
                }
                goto LABEL_182;
              }
              char v51 = 0;
              unsigned int v52 = 0;
              uint64_t v53 = 0;
              do
              {
                unint64_t v2 = v49 + 1;
                *((void *)this + 1) = v49 + 1;
                char v54 = *(unsigned char *)(v50 + v49);
                v53 |= (unint64_t)(v54 & 0x7F) << v51;
                if ((v54 & 0x80) == 0) {
                  goto LABEL_183;
                }
                v51 += 7;
                unint64_t v49 = v2;
                BOOL v14 = v52++ > 8;
              }
              while (!v14);
              LODWORD(v53) = 0;
LABEL_183:
              *(_DWORD *)(a1 + 36) = v53;
LABEL_159:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x15u:
              *(_DWORD *)(a1 + 108) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 0x16u:
              *(_DWORD *)(a1 + 108) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 0x17u:
              *(_DWORD *)(a1 + 108) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 0x18u:
              *(_DWORD *)(a1 + 108) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 0x19u:
              *(_DWORD *)(a1 + 108) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 0x1Au:
              *(_DWORD *)(a1 + 108) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 0x1Bu:
              *(_DWORD *)(a1 + 108) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 0x1Cu:
              *(_DWORD *)(a1 + 108) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
LABEL_158:
                unint64_t v2 = *((void *)this + 1) + 4;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_118:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_159;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_159;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903198DC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 108);
  if ((v4 & 0x800000) != 0)
  {
    uint64_t result = PB::Writer::write(this);
    int v4 = *(_DWORD *)(v3 + 108);
    if ((v4 & 0x80000) == 0)
    {
LABEL_3:
      if ((v4 & 0x20000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_32;
    }
  }
  else if ((v4 & 0x80000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20000) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x8000) == 0)
  {
LABEL_6:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200000) == 0)
  {
LABEL_7:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x40000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x1000) == 0)
  {
LABEL_10:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100000) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_17:
    if ((v4 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 2) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0) {
      goto LABEL_19;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x80) == 0) {
      goto LABEL_21;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80) == 0)
  {
LABEL_21:
    if ((v4 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v4 & 0x20) == 0) {
      goto LABEL_23;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20) == 0)
  {
LABEL_23:
    if ((v4 & 8) == 0) {
      goto LABEL_24;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 8) == 0)
  {
LABEL_24:
    if ((v4 & 4) == 0) {
      goto LABEL_25;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 4) == 0)
  {
LABEL_25:
    if ((v4 & 1) == 0) {
      goto LABEL_26;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 1) == 0)
  {
LABEL_26:
    if ((v4 & 0x10) == 0) {
      goto LABEL_27;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10) == 0)
  {
LABEL_27:
    if ((v4 & 0x400) == 0) {
      goto LABEL_28;
    }
LABEL_56:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
    if ((*(_DWORD *)(v3 + 108) & 0x200) == 0) {
      return result;
    }
    goto LABEL_57;
  }
LABEL_55:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400) != 0) {
    goto LABEL_56;
  }
LABEL_28:
  if ((v4 & 0x200) == 0) {
    return result;
  }
LABEL_57:
  float v5 = *(float *)(v3 + 44);

  return PB::Writer::write(this, v5);
}

uint64_t sub_190319C24(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCC3F0;
  *(_DWORD *)(result + 152) = 0;
  return result;
}

void sub_190319C4C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190319C84(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x20000000) != 0)
  {
    PB::TextFormatter::format(this, "airbagDetected");
    int v5 = *(_DWORD *)(a1 + 152);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_37;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "configMaximumAccelBaroTimeDifferenceThreshold", *(float *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "configMinimumAccelNormInWindowThreshold", *(float *)(a1 + 60));
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "configMinimumAccelNormOverEpochThreshold", *(float *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "configMinimumAccelNormThreshold", *(float *)(a1 + 68));
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "configMinimumWidthThreshold", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "configPeakPressureThreshold", *(float *)(a1 + 76));
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "configRiseTimeThreshold", *(float *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "configWidthThreshold", *(float *)(a1 + 84));
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "diffPeakTimeTrigger");
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x8000) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "diffTimeTrigger");
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 1) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "epochFirstTimestamp");
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 2) == 0)
  {
LABEL_14:
    if ((v5 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "epochLastTimestamp");
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 4) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "eventStartTime");
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x10000) == 0)
  {
LABEL_16:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "maxAccelNormInWindow", *(float *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x20000) == 0)
  {
LABEL_17:
    if ((v5 & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "maxAccelNormOverEpoch", *(float *)(a1 + 100));
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 8) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "maxAccelNormOverEpochTimestamp");
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "numAirbags");
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "numBarosInEpoch");
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "odr");
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x10) == 0) {
      goto LABEL_23;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "peakPressure", *(float *)(a1 + 116));
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x10) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "peakTimestamp");
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "postEventPressureMedian", *(float *)(a1 + 120));
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "preEventPressureMedian", *(float *)(a1 + 124));
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "prePostEventPressureMedian", *(float *)(a1 + 128));
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "pressureMedian", *(float *)(a1 + 132));
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "riseTime", *(float *)(a1 + 136));
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x20) == 0) {
      goto LABEL_30;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "riseTimeTo80", *(float *)(a1 + 140));
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x20) == 0)
  {
LABEL_30:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
LABEL_63:
  PB::TextFormatter::format(this, "timestamp");
  if ((*(_DWORD *)(a1 + 152) & 0x10000000) != 0) {
LABEL_31:
  }
    PB::TextFormatter::format(this, "width", *(float *)(a1 + 144));
LABEL_32:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19031A088(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 152) |= 0x20000000u;
          unint64_t v20 = *((void *)this + 1);
          if (v20 >= *((void *)this + 2))
          {
            BOOL v23 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v21 = v20 + 1;
            int v22 = *(unsigned __int8 *)(*(void *)this + v20);
            *((void *)this + 1) = v21;
            BOOL v23 = v22 != 0;
          }
          *(unsigned char *)(a1 + 148) = v23;
          goto LABEL_238;
        case 2u:
          *(_DWORD *)(a1 + 152) |= 0x200000u;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v25);
          goto LABEL_237;
        case 3u:
          *(_DWORD *)(a1 + 152) |= 4u;
          unint64_t v26 = *((void *)this + 1);
          unint64_t v27 = *((void *)this + 2);
          uint64_t v28 = *(void *)this;
          if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
          {
            char v29 = 0;
            unsigned int v30 = 0;
            uint64_t v31 = 0;
            do
            {
              unint64_t v32 = v26 + 1;
              *((void *)this + 1) = v26 + 1;
              char v33 = *(unsigned char *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0) {
                goto LABEL_246;
              }
              v29 += 7;
              unint64_t v26 = v32;
              BOOL v14 = v30++ > 8;
            }
            while (!v14);
LABEL_165:
            uint64_t v31 = 0;
            goto LABEL_246;
          }
          char v131 = 0;
          unsigned int v132 = 0;
          uint64_t v31 = 0;
          if (v27 <= v26) {
            unint64_t v27 = *((void *)this + 1);
          }
          while (2)
          {
            if (v27 == v26)
            {
              uint64_t v31 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v133 = v26 + 1;
              char v134 = *(unsigned char *)(v28 + v26);
              *((void *)this + 1) = v133;
              v31 |= (unint64_t)(v134 & 0x7F) << v131;
              if (v134 < 0)
              {
                v131 += 7;
                unint64_t v26 = v133;
                BOOL v14 = v132++ > 8;
                if (v14) {
                  goto LABEL_165;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v31 = 0;
              }
            }
            break;
          }
LABEL_246:
          *(void *)(a1 + 24) = v31;
          goto LABEL_238;
        case 4u:
          *(_DWORD *)(a1 + 152) |= 0x10000000u;
          unint64_t v34 = *((void *)this + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(void *)this + v34);
          goto LABEL_237;
        case 5u:
          *(_DWORD *)(a1 + 152) |= 0x4000000u;
          unint64_t v35 = *((void *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(void *)this + v35);
          goto LABEL_237;
        case 6u:
          *(_DWORD *)(a1 + 152) |= 0x100000u;
          unint64_t v36 = *((void *)this + 1);
          unint64_t v37 = *((void *)this + 2);
          uint64_t v38 = *(void *)this;
          if (v36 <= 0xFFFFFFFFFFFFFFF5 && v36 + 10 <= v37)
          {
            char v39 = 0;
            unsigned int v40 = 0;
            uint64_t v41 = 0;
            do
            {
              unint64_t v42 = v36 + 1;
              *((void *)this + 1) = v36 + 1;
              char v43 = *(unsigned char *)(v38 + v36);
              v41 |= (unint64_t)(v43 & 0x7F) << v39;
              if ((v43 & 0x80) == 0) {
                goto LABEL_250;
              }
              v39 += 7;
              unint64_t v36 = v42;
              BOOL v14 = v40++ > 8;
            }
            while (!v14);
LABEL_172:
            LODWORD(v41) = 0;
            goto LABEL_250;
          }
          char v135 = 0;
          unsigned int v136 = 0;
          uint64_t v41 = 0;
          if (v37 <= v36) {
            unint64_t v37 = *((void *)this + 1);
          }
          while (2)
          {
            if (v37 == v36)
            {
              LODWORD(v41) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v137 = v36 + 1;
              char v138 = *(unsigned char *)(v38 + v36);
              *((void *)this + 1) = v137;
              v41 |= (unint64_t)(v138 & 0x7F) << v135;
              if (v138 < 0)
              {
                v135 += 7;
                unint64_t v36 = v137;
                BOOL v14 = v136++ > 8;
                if (v14) {
                  goto LABEL_172;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v41) = 0;
              }
            }
            break;
          }
LABEL_250:
          *(_DWORD *)(a1 + 112) = v41;
          goto LABEL_238;
        case 7u:
          *(_DWORD *)(a1 + 152) |= 0x40000u;
          unint64_t v44 = *((void *)this + 1);
          unint64_t v45 = *((void *)this + 2);
          uint64_t v46 = *(void *)this;
          if (v44 <= 0xFFFFFFFFFFFFFFF5 && v44 + 10 <= v45)
          {
            char v47 = 0;
            unsigned int v48 = 0;
            uint64_t v49 = 0;
            do
            {
              unint64_t v50 = v44 + 1;
              *((void *)this + 1) = v44 + 1;
              char v51 = *(unsigned char *)(v46 + v44);
              v49 |= (unint64_t)(v51 & 0x7F) << v47;
              if ((v51 & 0x80) == 0) {
                goto LABEL_254;
              }
              v47 += 7;
              unint64_t v44 = v50;
              BOOL v14 = v48++ > 8;
            }
            while (!v14);
LABEL_179:
            LODWORD(v49) = 0;
            goto LABEL_254;
          }
          char v139 = 0;
          unsigned int v140 = 0;
          uint64_t v49 = 0;
          if (v45 <= v44) {
            unint64_t v45 = *((void *)this + 1);
          }
          while (2)
          {
            if (v45 == v44)
            {
              LODWORD(v49) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v141 = v44 + 1;
              char v142 = *(unsigned char *)(v46 + v44);
              *((void *)this + 1) = v141;
              v49 |= (unint64_t)(v142 & 0x7F) << v139;
              if (v142 < 0)
              {
                v139 += 7;
                unint64_t v44 = v141;
                BOOL v14 = v140++ > 8;
                if (v14) {
                  goto LABEL_179;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v49) = 0;
              }
            }
            break;
          }
LABEL_254:
          *(_DWORD *)(a1 + 104) = v49;
          goto LABEL_238;
        case 8u:
          *(_DWORD *)(a1 + 152) |= 0x10u;
          unint64_t v52 = *((void *)this + 1);
          unint64_t v53 = *((void *)this + 2);
          uint64_t v54 = *(void *)this;
          if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
          {
            char v55 = 0;
            unsigned int v56 = 0;
            uint64_t v57 = 0;
            do
            {
              unint64_t v58 = v52 + 1;
              *((void *)this + 1) = v52 + 1;
              char v59 = *(unsigned char *)(v54 + v52);
              v57 |= (unint64_t)(v59 & 0x7F) << v55;
              if ((v59 & 0x80) == 0) {
                goto LABEL_258;
              }
              v55 += 7;
              unint64_t v52 = v58;
              BOOL v14 = v56++ > 8;
            }
            while (!v14);
LABEL_186:
            uint64_t v57 = 0;
            goto LABEL_258;
          }
          char v143 = 0;
          unsigned int v144 = 0;
          uint64_t v57 = 0;
          if (v53 <= v52) {
            unint64_t v53 = *((void *)this + 1);
          }
          while (2)
          {
            if (v53 == v52)
            {
              uint64_t v57 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v145 = v52 + 1;
              char v146 = *(unsigned char *)(v54 + v52);
              *((void *)this + 1) = v145;
              v57 |= (unint64_t)(v146 & 0x7F) << v143;
              if (v146 < 0)
              {
                v143 += 7;
                unint64_t v52 = v145;
                BOOL v14 = v144++ > 8;
                if (v14) {
                  goto LABEL_186;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v57 = 0;
              }
            }
            break;
          }
LABEL_258:
          *(void *)(a1 + 40) = v57;
          goto LABEL_238;
        case 9u:
          *(_DWORD *)(a1 + 152) |= 0x8000000u;
          unint64_t v60 = *((void *)this + 1);
          if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v60);
          goto LABEL_237;
        case 0xAu:
          *(_DWORD *)(a1 + 152) |= 0x8000u;
          unint64_t v61 = *((void *)this + 1);
          unint64_t v62 = *((void *)this + 2);
          uint64_t v63 = *(void *)this;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            char v64 = 0;
            unsigned int v65 = 0;
            uint64_t v66 = 0;
            do
            {
              unint64_t v67 = v61 + 1;
              *((void *)this + 1) = v61 + 1;
              char v68 = *(unsigned char *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0) {
                goto LABEL_262;
              }
              v64 += 7;
              unint64_t v61 = v67;
              BOOL v14 = v65++ > 8;
            }
            while (!v14);
LABEL_193:
            LODWORD(v66) = 0;
            goto LABEL_262;
          }
          char v147 = 0;
          unsigned int v148 = 0;
          uint64_t v66 = 0;
          if (v62 <= v61) {
            unint64_t v62 = *((void *)this + 1);
          }
          while (2)
          {
            if (v62 == v61)
            {
              LODWORD(v66) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v149 = v61 + 1;
              char v150 = *(unsigned char *)(v63 + v61);
              *((void *)this + 1) = v149;
              v66 |= (unint64_t)(v150 & 0x7F) << v147;
              if (v150 < 0)
              {
                v147 += 7;
                unint64_t v61 = v149;
                BOOL v14 = v148++ > 8;
                if (v14) {
                  goto LABEL_193;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v66) = 0;
              }
            }
            break;
          }
LABEL_262:
          *(_DWORD *)(a1 + 92) = v66;
          goto LABEL_238;
        case 0xBu:
          *(_DWORD *)(a1 + 152) |= 0x4000u;
          unint64_t v69 = *((void *)this + 1);
          unint64_t v70 = *((void *)this + 2);
          uint64_t v71 = *(void *)this;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            char v72 = 0;
            unsigned int v73 = 0;
            uint64_t v74 = 0;
            do
            {
              unint64_t v75 = v69 + 1;
              *((void *)this + 1) = v69 + 1;
              char v76 = *(unsigned char *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0) {
                goto LABEL_266;
              }
              v72 += 7;
              unint64_t v69 = v75;
              BOOL v14 = v73++ > 8;
            }
            while (!v14);
LABEL_200:
            LODWORD(v74) = 0;
            goto LABEL_266;
          }
          char v151 = 0;
          unsigned int v152 = 0;
          uint64_t v74 = 0;
          if (v70 <= v69) {
            unint64_t v70 = *((void *)this + 1);
          }
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v153 = v69 + 1;
              char v154 = *(unsigned char *)(v71 + v69);
              *((void *)this + 1) = v153;
              v74 |= (unint64_t)(v154 & 0x7F) << v151;
              if (v154 < 0)
              {
                v151 += 7;
                unint64_t v69 = v153;
                BOOL v14 = v152++ > 8;
                if (v14) {
                  goto LABEL_200;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v74) = 0;
              }
            }
            break;
          }
LABEL_266:
          *(_DWORD *)(a1 + 88) = v74;
          goto LABEL_238;
        case 0xCu:
          *(_DWORD *)(a1 + 152) |= 0x800000u;
          unint64_t v77 = *((void *)this + 1);
          if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v77);
          goto LABEL_237;
        case 0xDu:
          *(_DWORD *)(a1 + 152) |= 0x400000u;
          unint64_t v78 = *((void *)this + 1);
          if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v78);
          goto LABEL_237;
        case 0xEu:
          *(_DWORD *)(a1 + 152) |= 0x1000000u;
          unint64_t v79 = *((void *)this + 1);
          if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(void *)this + v79);
          goto LABEL_237;
        case 0xFu:
          *(_DWORD *)(a1 + 152) |= 0x2000u;
          unint64_t v80 = *((void *)this + 1);
          if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v80);
          goto LABEL_237;
        case 0x10u:
          *(_DWORD *)(a1 + 152) |= 0x1000u;
          unint64_t v81 = *((void *)this + 1);
          if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v81);
          goto LABEL_237;
        case 0x11u:
          *(_DWORD *)(a1 + 152) |= 0x800u;
          unint64_t v82 = *((void *)this + 1);
          if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v82);
          goto LABEL_237;
        case 0x12u:
          *(_DWORD *)(a1 + 152) |= 0x400u;
          unint64_t v83 = *((void *)this + 1);
          if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v83);
          goto LABEL_237;
        case 0x13u:
          *(_DWORD *)(a1 + 152) |= 0x200u;
          unint64_t v84 = *((void *)this + 1);
          if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v84);
          goto LABEL_237;
        case 0x14u:
          *(_DWORD *)(a1 + 152) |= 1u;
          unint64_t v85 = *((void *)this + 1);
          unint64_t v86 = *((void *)this + 2);
          uint64_t v87 = *(void *)this;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            char v88 = 0;
            unsigned int v89 = 0;
            uint64_t v90 = 0;
            do
            {
              unint64_t v91 = v85 + 1;
              *((void *)this + 1) = v85 + 1;
              char v92 = *(unsigned char *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0) {
                goto LABEL_270;
              }
              v88 += 7;
              unint64_t v85 = v91;
              BOOL v14 = v89++ > 8;
            }
            while (!v14);
LABEL_207:
            uint64_t v90 = 0;
            goto LABEL_270;
          }
          char v155 = 0;
          unsigned int v156 = 0;
          uint64_t v90 = 0;
          if (v86 <= v85) {
            unint64_t v86 = *((void *)this + 1);
          }
          while (2)
          {
            if (v86 == v85)
            {
              uint64_t v90 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v157 = v85 + 1;
              char v158 = *(unsigned char *)(v87 + v85);
              *((void *)this + 1) = v157;
              v90 |= (unint64_t)(v158 & 0x7F) << v155;
              if (v158 < 0)
              {
                v155 += 7;
                unint64_t v85 = v157;
                BOOL v14 = v156++ > 8;
                if (v14) {
                  goto LABEL_207;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v90 = 0;
              }
            }
            break;
          }
LABEL_270:
          *(void *)(a1 + 8) = v90;
          goto LABEL_238;
        case 0x15u:
          *(_DWORD *)(a1 + 152) |= 2u;
          unint64_t v93 = *((void *)this + 1);
          unint64_t v94 = *((void *)this + 2);
          uint64_t v95 = *(void *)this;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            char v96 = 0;
            unsigned int v97 = 0;
            uint64_t v98 = 0;
            do
            {
              unint64_t v99 = v93 + 1;
              *((void *)this + 1) = v93 + 1;
              char v100 = *(unsigned char *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0) {
                goto LABEL_274;
              }
              v96 += 7;
              unint64_t v93 = v99;
              BOOL v14 = v97++ > 8;
            }
            while (!v14);
LABEL_214:
            uint64_t v98 = 0;
            goto LABEL_274;
          }
          char v159 = 0;
          unsigned int v160 = 0;
          uint64_t v98 = 0;
          if (v94 <= v93) {
            unint64_t v94 = *((void *)this + 1);
          }
          while (2)
          {
            if (v94 == v93)
            {
              uint64_t v98 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v161 = v93 + 1;
              char v162 = *(unsigned char *)(v95 + v93);
              *((void *)this + 1) = v161;
              v98 |= (unint64_t)(v162 & 0x7F) << v159;
              if (v162 < 0)
              {
                v159 += 7;
                unint64_t v93 = v161;
                BOOL v14 = v160++ > 8;
                if (v14) {
                  goto LABEL_214;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v98 = 0;
              }
            }
            break;
          }
LABEL_274:
          *(void *)(a1 + 16) = v98;
          goto LABEL_238;
        case 0x16u:
          *(_DWORD *)(a1 + 152) |= 0x10000u;
          unint64_t v101 = *((void *)this + 1);
          if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v101);
          goto LABEL_237;
        case 0x17u:
          *(_DWORD *)(a1 + 152) |= 0x20u;
          unint64_t v102 = *((void *)this + 1);
          unint64_t v103 = *((void *)this + 2);
          uint64_t v104 = *(void *)this;
          if (v102 <= 0xFFFFFFFFFFFFFFF5 && v102 + 10 <= v103)
          {
            char v105 = 0;
            unsigned int v106 = 0;
            uint64_t v107 = 0;
            do
            {
              unint64_t v108 = v102 + 1;
              *((void *)this + 1) = v102 + 1;
              char v109 = *(unsigned char *)(v104 + v102);
              v107 |= (unint64_t)(v109 & 0x7F) << v105;
              if ((v109 & 0x80) == 0) {
                goto LABEL_278;
              }
              v105 += 7;
              unint64_t v102 = v108;
              BOOL v14 = v106++ > 8;
            }
            while (!v14);
LABEL_221:
            uint64_t v107 = 0;
            goto LABEL_278;
          }
          char v163 = 0;
          unsigned int v164 = 0;
          uint64_t v107 = 0;
          if (v103 <= v102) {
            unint64_t v103 = *((void *)this + 1);
          }
          while (2)
          {
            if (v103 == v102)
            {
              uint64_t v107 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v165 = v102 + 1;
              char v166 = *(unsigned char *)(v104 + v102);
              *((void *)this + 1) = v165;
              v107 |= (unint64_t)(v166 & 0x7F) << v163;
              if (v166 < 0)
              {
                v163 += 7;
                unint64_t v102 = v165;
                BOOL v14 = v164++ > 8;
                if (v14) {
                  goto LABEL_221;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v107 = 0;
              }
            }
            break;
          }
LABEL_278:
          *(void *)(a1 + 48) = v107;
          goto LABEL_238;
        case 0x18u:
          *(_DWORD *)(a1 + 152) |= 0x2000000u;
          unint64_t v110 = *((void *)this + 1);
          if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v110);
          goto LABEL_237;
        case 0x19u:
          *(_DWORD *)(a1 + 152) |= 0x20000u;
          unint64_t v111 = *((void *)this + 1);
          if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v111);
          goto LABEL_237;
        case 0x1Au:
          *(_DWORD *)(a1 + 152) |= 0x100u;
          unint64_t v112 = *((void *)this + 1);
          if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v112);
          goto LABEL_237;
        case 0x1Bu:
          *(_DWORD *)(a1 + 152) |= 0x80000u;
          unint64_t v113 = *((void *)this + 1);
          unint64_t v114 = *((void *)this + 2);
          uint64_t v115 = *(void *)this;
          if (v113 <= 0xFFFFFFFFFFFFFFF5 && v113 + 10 <= v114)
          {
            char v116 = 0;
            unsigned int v117 = 0;
            uint64_t v118 = 0;
            do
            {
              unint64_t v119 = v113 + 1;
              *((void *)this + 1) = v113 + 1;
              char v120 = *(unsigned char *)(v115 + v113);
              v118 |= (unint64_t)(v120 & 0x7F) << v116;
              if ((v120 & 0x80) == 0) {
                goto LABEL_282;
              }
              v116 += 7;
              unint64_t v113 = v119;
              BOOL v14 = v117++ > 8;
            }
            while (!v14);
LABEL_228:
            LODWORD(v118) = 0;
            goto LABEL_282;
          }
          char v167 = 0;
          unsigned int v168 = 0;
          uint64_t v118 = 0;
          if (v114 <= v113) {
            unint64_t v114 = *((void *)this + 1);
          }
          while (2)
          {
            if (v114 == v113)
            {
              LODWORD(v118) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v169 = v113 + 1;
              char v170 = *(unsigned char *)(v115 + v113);
              *((void *)this + 1) = v169;
              v118 |= (unint64_t)(v170 & 0x7F) << v167;
              if (v170 < 0)
              {
                v167 += 7;
                unint64_t v113 = v169;
                BOOL v14 = v168++ > 8;
                if (v14) {
                  goto LABEL_228;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v118) = 0;
              }
            }
            break;
          }
LABEL_282:
          *(_DWORD *)(a1 + 108) = v118;
          goto LABEL_238;
        case 0x1Cu:
          *(_DWORD *)(a1 + 152) |= 0x40u;
          unint64_t v121 = *((void *)this + 1);
          if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v121);
          goto LABEL_237;
        case 0x1Du:
          *(_DWORD *)(a1 + 152) |= 8u;
          unint64_t v122 = *((void *)this + 1);
          unint64_t v123 = *((void *)this + 2);
          uint64_t v124 = *(void *)this;
          if (v122 <= 0xFFFFFFFFFFFFFFF5 && v122 + 10 <= v123)
          {
            char v125 = 0;
            unsigned int v126 = 0;
            uint64_t v127 = 0;
            do
            {
              unint64_t v128 = v122 + 1;
              *((void *)this + 1) = v122 + 1;
              char v129 = *(unsigned char *)(v124 + v122);
              v127 |= (unint64_t)(v129 & 0x7F) << v125;
              if ((v129 & 0x80) == 0) {
                goto LABEL_286;
              }
              v125 += 7;
              unint64_t v122 = v128;
              BOOL v14 = v126++ > 8;
            }
            while (!v14);
LABEL_235:
            uint64_t v127 = 0;
            goto LABEL_286;
          }
          char v171 = 0;
          unsigned int v172 = 0;
          uint64_t v127 = 0;
          if (v123 <= v122) {
            unint64_t v123 = *((void *)this + 1);
          }
          break;
        case 0x1Eu:
          *(_DWORD *)(a1 + 152) |= 0x80u;
          unint64_t v130 = *((void *)this + 1);
          if (v130 <= 0xFFFFFFFFFFFFFFFBLL && v130 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v130);
LABEL_237:
            *((void *)this + 1) += 4;
          }
          else
          {
LABEL_156:
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_238;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          goto LABEL_238;
      }
      while (1)
      {
        if (v123 == v122)
        {
          uint64_t v127 = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_286;
        }
        unint64_t v173 = v122 + 1;
        char v174 = *(unsigned char *)(v124 + v122);
        *((void *)this + 1) = v173;
        v127 |= (unint64_t)(v174 & 0x7F) << v171;
        if ((v174 & 0x80) == 0) {
          break;
        }
        v171 += 7;
        unint64_t v122 = v173;
        BOOL v14 = v172++ > 8;
        if (v14) {
          goto LABEL_235;
        }
      }
      if (*((unsigned char *)this + 24)) {
        uint64_t v127 = 0;
      }
LABEL_286:
      *(void *)(a1 + 32) = v127;
LABEL_238:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19031B0AC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 152);
  if ((v4 & 0x20000000) != 0)
  {
    uint64_t result = PB::Writer::write(this);
    int v4 = *(_DWORD *)(v3 + 152);
    if ((v4 & 0x200000) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_34;
    }
  }
  else if ((v4 & 0x200000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 144));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 136));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100000) == 0)
  {
LABEL_7:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x40000) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 140));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x800000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 124));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x400000) == 0)
  {
LABEL_14:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 128));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x2000) == 0)
  {
LABEL_16:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x1000) == 0)
  {
LABEL_17:
    if ((v4 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x800) == 0)
  {
LABEL_18:
    if ((v4 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x400) == 0)
  {
LABEL_19:
    if ((v4 & 0x200) == 0) {
      goto LABEL_20;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x200) == 0)
  {
LABEL_20:
    if ((v4 & 1) == 0) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 1) == 0)
  {
LABEL_21:
    if ((v4 & 2) == 0) {
      goto LABEL_22;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 2) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20) == 0) {
      goto LABEL_24;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20) == 0)
  {
LABEL_24:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 132));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20000) == 0)
  {
LABEL_26:
    if ((v4 & 0x100) == 0) {
      goto LABEL_27;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100) == 0)
  {
LABEL_27:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x80000) == 0)
  {
LABEL_28:
    if ((v4 & 0x40) == 0) {
      goto LABEL_29;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x40) == 0)
  {
LABEL_29:
    if ((v4 & 8) == 0) {
      goto LABEL_30;
    }
LABEL_60:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(_DWORD *)(v3 + 152) & 0x80) == 0) {
      return result;
    }
    goto LABEL_61;
  }
LABEL_59:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 8) != 0) {
    goto LABEL_60;
  }
LABEL_30:
  if ((v4 & 0x80) == 0) {
    return result;
  }
LABEL_61:
  float v5 = *(float *)(v3 + 60);

  return PB::Writer::write(this, v5);
}

uint64_t sub_19031B42C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCC770;
  *(void *)(result + 280) = 0;
  *(_DWORD *)(result + 288) = 0;
  return result;
}

void sub_19031B458(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19031B490(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  float v5 = (uint64_t *)(a1 + 280);
  uint64_t v6 = *(void *)(a1 + 280);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(this, "audioDvChaosThreshold", *(float *)(a1 + 16));
    uint64_t v6 = *v5;
    __int16 v7 = *(_WORD *)(a1 + 288);
    if ((*v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((v6 & 4) != 0)
  {
LABEL_5:
    PB::TextFormatter::format(this, "audioDvChaosThresholdCenter", *(float *)(a1 + 20));
    uint64_t v6 = *v5;
    __int16 v7 = *(_WORD *)(a1 + 288);
  }
LABEL_6:
  if ((v6 & 8) != 0)
  {
    PB::TextFormatter::format(this, "audioDvChaosThresholdMax", *(float *)(a1 + 24));
    uint64_t v6 = *v5;
    __int16 v7 = *(_WORD *)(a1 + 288);
    if ((*v5 & 0x10) == 0)
    {
LABEL_8:
      if ((v6 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_86;
    }
  }
  else if ((v6 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  PB::TextFormatter::format(this, "audioDvChaosThresholdMin", *(float *)(a1 + 28));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(this, "audioDvChaosThresholdStretch", *(float *)(a1 + 32));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v6 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(this, "audioDvEnergyThreshold", *(float *)(a1 + 36));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v6 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(this, "audioDvEnergyThresholdCenter", *(float *)(a1 + 40));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v6 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(this, "audioDvEnergyThresholdMax", *(float *)(a1 + 44));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v6 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(this, "audioDvEnergyThresholdMin", *(float *)(a1 + 48));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v6 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(this, "audioDvEnergyThresholdStretch", *(float *)(a1 + 52));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(this, "audioDvMaxRmsThresholdCenter", *(float *)(a1 + 56));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(this, "audioDvMaxRmsThresholdMax", *(float *)(a1 + 60));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(this, "audioDvMaxRmsThresholdMin", *(float *)(a1 + 64));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(this, "audioDvMaxRmsThresholdStretch", *(float *)(a1 + 68));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v7 & 1) == 0) {
      goto LABEL_20;
    }
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(this, "audioDvRmsThreshold", *(float *)(a1 + 72));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 1) == 0)
  {
LABEL_20:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(this, "crashDetectorDecision");
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x10000) == 0)
  {
LABEL_21:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(this, "deltaVXYBiggestImpact", *(float *)(a1 + 76));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(this, "deltaVXYOverEpoch", *(float *)(a1 + 80));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x40000) == 0)
  {
LABEL_23:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(this, "detectorRegime");
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x80000) == 0)
  {
LABEL_24:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_102;
  }
LABEL_101:
  PB::TextFormatter::format(this, "detectorRegimeAccelnormThreshold1", *(float *)(a1 + 88));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x100000) == 0)
  {
LABEL_25:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_103;
  }
LABEL_102:
  PB::TextFormatter::format(this, "detectorRegimeAccelnormThreshold2", *(float *)(a1 + 92));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x200000) == 0)
  {
LABEL_26:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_104;
  }
LABEL_103:
  PB::TextFormatter::format(this, "detectorRegimeAccelnormThreshold3", *(float *)(a1 + 96));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x400000) == 0)
  {
LABEL_27:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_105;
  }
LABEL_104:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold1", *(float *)(a1 + 100));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x800000) == 0)
  {
LABEL_28:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_106;
  }
LABEL_105:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold1WithAudio", *(float *)(a1 + 104));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_107;
  }
LABEL_106:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold1WithoutAudio", *(float *)(a1 + 108));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_108;
  }
LABEL_107:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold1WithoutAudioStandaloneBaroNeeded", *(float *)(a1 + 112));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_109;
  }
LABEL_108:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold1WithoutAudioStandaloneFull", *(float *)(a1 + 116));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_110;
  }
LABEL_109:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold2", *(float *)(a1 + 120));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_111;
  }
LABEL_110:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold2WithAudio", *(float *)(a1 + 124));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_112;
  }
LABEL_111:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold2WithoutAudio", *(float *)(a1 + 128));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_113;
  }
LABEL_112:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold2WithoutAudioStandaloneBaroNeeded", *(float *)(a1 + 132));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x100000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_114;
  }
LABEL_113:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold2WithoutAudioStandaloneFull", *(float *)(a1 + 136));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x200000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_115;
  }
LABEL_114:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold3", *(float *)(a1 + 140));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x400000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_116;
  }
LABEL_115:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold3WithAudio", *(float *)(a1 + 144));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x800000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_117;
  }
LABEL_116:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold3WithoutAudio", *(float *)(a1 + 148));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x1000000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_118;
  }
LABEL_117:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold3WithoutAudioStandaloneBaroNeeded", *(float *)(a1 + 152));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_41:
    if ((v7 & 2) == 0) {
      goto LABEL_42;
    }
    goto LABEL_119;
  }
LABEL_118:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold3WithoutAudioStandaloneFull", *(float *)(a1 + 156));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 2) == 0)
  {
LABEL_42:
    if ((v7 & 4) == 0) {
      goto LABEL_43;
    }
    goto LABEL_120;
  }
LABEL_119:
  PB::TextFormatter::format(this, "hasAudioInEpoch");
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 4) == 0)
  {
LABEL_43:
    if ((v7 & 8) == 0) {
      goto LABEL_44;
    }
    goto LABEL_121;
  }
LABEL_120:
  PB::TextFormatter::format(this, "isAudio");
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 8) == 0)
  {
LABEL_44:
    if ((v7 & 0x10) == 0) {
      goto LABEL_45;
    }
    goto LABEL_122;
  }
LABEL_121:
  PB::TextFormatter::format(this, "isAudioDv");
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 0x10) == 0)
  {
LABEL_45:
    if ((v7 & 0x20) == 0) {
      goto LABEL_46;
    }
    goto LABEL_123;
  }
LABEL_122:
  PB::TextFormatter::format(this, "isAudioSupported");
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 0x20) == 0)
  {
LABEL_46:
    if ((v7 & 0x40) == 0) {
      goto LABEL_47;
    }
    goto LABEL_124;
  }
LABEL_123:
  PB::TextFormatter::format(this, "isBaro");
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 0x40) == 0)
  {
LABEL_47:
    if ((v7 & 0x80) == 0) {
      goto LABEL_48;
    }
    goto LABEL_125;
  }
LABEL_124:
  PB::TextFormatter::format(this, "isCompanionConnected");
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 0x80) == 0)
  {
LABEL_48:
    if ((v7 & 0x100) == 0) {
      goto LABEL_49;
    }
    goto LABEL_126;
  }
LABEL_125:
  PB::TextFormatter::format(this, "isFreeFall");
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 0x100) == 0)
  {
LABEL_49:
    if ((v7 & 0x200) == 0) {
      goto LABEL_50;
    }
    goto LABEL_127;
  }
LABEL_126:
  PB::TextFormatter::format(this, "isPulse");
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 0x200) == 0)
  {
LABEL_50:
    if ((v6 & 0x2000000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_128;
  }
LABEL_127:
  PB::TextFormatter::format(this, "lowSenseCrashDetectorDecision");
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_51:
    if ((v6 & 0x4000000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_129;
  }
LABEL_128:
  PB::TextFormatter::format(this, "lowSenseWithAudioDeltaVThreshold1", *(float *)(a1 + 160));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_52:
    if ((v6 & 0x8000000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_130;
  }
LABEL_129:
  PB::TextFormatter::format(this, "lowSenseWithAudioDeltaVThreshold2", *(float *)(a1 + 164));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_53:
    if ((v6 & 0x10000000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_131;
  }
LABEL_130:
  PB::TextFormatter::format(this, "lowSenseWithAudioDeltaVThreshold3", *(float *)(a1 + 168));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_54:
    if ((v6 & 0x20000000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_132;
  }
LABEL_131:
  PB::TextFormatter::format(this, "lowSenseWithAudioMaxPulseThreshold", *(float *)(a1 + 172));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_55:
    if ((v6 & 0x40000000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_133;
  }
LABEL_132:
  PB::TextFormatter::format(this, "lowSenseWithAudioMaxaccelnormThreshold", *(float *)(a1 + 176));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x40000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x80000000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_134;
  }
LABEL_133:
  PB::TextFormatter::format(this, "lowSenseWithAudioPeakPressureThreshold", *(float *)(a1 + 180));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x80000000000) == 0)
  {
LABEL_57:
    if ((v6 & 0x100000000000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_135;
  }
LABEL_134:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioDeltaVThreshold1", *(float *)(a1 + 184));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_58:
    if ((v6 & 0x200000000000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_136;
  }
LABEL_135:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioDeltaVThreshold2", *(float *)(a1 + 188));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x200000000000) == 0)
  {
LABEL_59:
    if ((v6 & 0x400000000000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_137;
  }
LABEL_136:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioDeltaVThreshold3", *(float *)(a1 + 192));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x400000000000) == 0)
  {
LABEL_60:
    if ((v6 & 0x800000000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_138;
  }
LABEL_137:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioMaxPulseThreshold", *(float *)(a1 + 196));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x800000000000) == 0)
  {
LABEL_61:
    if ((v6 & 0x1000000000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_139;
  }
LABEL_138:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioMaxaccelnormThreshold", *(float *)(a1 + 200));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x1000000000000) == 0)
  {
LABEL_62:
    if ((v6 & 0x2000000000000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_140;
  }
LABEL_139:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioPeakPressureThreshold", *(float *)(a1 + 204));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x2000000000000) == 0)
  {
LABEL_63:
    if ((v6 & 0x4000000000000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_141;
  }
LABEL_140:
  PB::TextFormatter::format(this, "maxAccelNorm", *(float *)(a1 + 208));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x4000000000000) == 0)
  {
LABEL_64:
    if ((v6 & 0x8000000000000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_142;
  }
LABEL_141:
  PB::TextFormatter::format(this, "maxAccelNormThreshold", *(float *)(a1 + 212));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x8000000000000) == 0)
  {
LABEL_65:
    if ((v6 & 0x10000000000000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_143;
  }
LABEL_142:
  PB::TextFormatter::format(this, "maxAccelNormThresholdWithAudio", *(float *)(a1 + 216));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x10000000000000) == 0)
  {
LABEL_66:
    if ((v6 & 0x20000000000000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_144;
  }
LABEL_143:
  PB::TextFormatter::format(this, "maxAccelNormThresholdWithoutAudio", *(float *)(a1 + 220));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x20000000000000) == 0)
  {
LABEL_67:
    if ((v6 & 0x40000000000000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_145;
  }
LABEL_144:
  PB::TextFormatter::format(this, "maxAccelNormThresholdWithoutAudioStandaloneBaroNeeded", *(float *)(a1 + 224));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x40000000000000) == 0)
  {
LABEL_68:
    if ((v6 & 0x80000000000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_146;
  }
LABEL_145:
  PB::TextFormatter::format(this, "maxAccelNormThresholdWithoutAudioStandaloneFull", *(float *)(a1 + 228));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x80000000000000) == 0)
  {
LABEL_69:
    if ((v6 & 0x100000000000000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_147;
  }
LABEL_146:
  PB::TextFormatter::format(this, "maxAudioChaos", *(float *)(a1 + 232));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x100000000000000) == 0)
  {
LABEL_70:
    if ((v6 & 0x200000000000000) == 0) {
      goto LABEL_71;
    }
    goto LABEL_148;
  }
LABEL_147:
  PB::TextFormatter::format(this, "maxAudioEnergy", *(float *)(a1 + 236));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x200000000000000) == 0)
  {
LABEL_71:
    if ((v6 & 0x400000000000000) == 0) {
      goto LABEL_72;
    }
    goto LABEL_149;
  }
LABEL_148:
  PB::TextFormatter::format(this, "maxAudioRms", *(float *)(a1 + 240));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x400000000000000) == 0)
  {
LABEL_72:
    if ((v6 & 0x800000000000000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_150;
  }
LABEL_149:
  PB::TextFormatter::format(this, "maxPulse", *(float *)(a1 + 244));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x800000000000000) == 0)
  {
LABEL_73:
    if ((v6 & 0x1000000000000000) == 0) {
      goto LABEL_74;
    }
    goto LABEL_151;
  }
LABEL_150:
  PB::TextFormatter::format(this, "numShortAudio");
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x1000000000000000) == 0)
  {
LABEL_74:
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_75;
    }
    goto LABEL_152;
  }
LABEL_151:
  PB::TextFormatter::format(this, "peakPressure", *(float *)(a1 + 252));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x2000000000000000) == 0)
  {
LABEL_75:
    if ((v7 & 0x400) == 0) {
      goto LABEL_76;
    }
    goto LABEL_153;
  }
LABEL_152:
  PB::TextFormatter::format(this, "shortAudioMaxPulseThreshold", *(float *)(a1 + 256));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 0x400) == 0)
  {
LABEL_76:
    if ((v6 & 0x4000000000000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_154;
  }
LABEL_153:
  PB::TextFormatter::format(this, "shortAudioMet");
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x4000000000000000) == 0)
  {
LABEL_77:
    if ((v6 & 0x8000000000000000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_155;
  }
LABEL_154:
  PB::TextFormatter::format(this, "shortAudioNumThreshold", *(float *)(a1 + 260));
  uint64_t v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x8000000000000000) == 0)
  {
LABEL_78:
    if ((v7 & 0x800) == 0) {
      goto LABEL_79;
    }
    goto LABEL_156;
  }
LABEL_155:
  PB::TextFormatter::format(this, "shortAudioPeakPressureThreshold", *(float *)(a1 + 264));
  uint64_t v6 = *v5;
  if ((*(_WORD *)(a1 + 288) & 0x800) == 0)
  {
LABEL_79:
    if ((v6 & 1) == 0) {
      goto LABEL_81;
    }
    goto LABEL_80;
  }
LABEL_156:
  PB::TextFormatter::format(this, "strongerAudio");
  if (*v5) {
LABEL_80:
  }
    PB::TextFormatter::format(this, "timestamp");
LABEL_81:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19031BF8C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = a1 + 280;
    do
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v16 = 0;
        unsigned int v17 = 0;
        unint64_t v12 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v18 = v2 + 1;
          char v19 = *(unsigned char *)(v9 + v2);
          *((void *)this + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0) {
            goto LABEL_21;
          }
          v16 += 7;
          unint64_t v2 = v18;
          if (v17++ >= 9)
          {
LABEL_20:
            unint64_t v12 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v14 = *(unsigned char *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        BOOL v15 = v11++ > 8;
        if (v15) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v21 = v12 >> 3;
      if ((int)(v12 >> 3) <= 100000)
      {
        switch((int)v21)
        {
          case 1:
            *(void *)v8 |= 1uLL;
            unint64_t v22 = *((void *)this + 1);
            unint64_t v23 = *((void *)this + 2);
            uint64_t v24 = *(void *)this;
            if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
            {
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v28 = v22 + 1;
                *((void *)this + 1) = v22 + 1;
                char v29 = *(unsigned char *)(v24 + v22);
                v27 |= (unint64_t)(v29 & 0x7F) << v25;
                if ((v29 & 0x80) == 0) {
                  goto LABEL_313;
                }
                v25 += 7;
                unint64_t v22 = v28;
                BOOL v15 = v26++ > 8;
              }
              while (!v15);
LABEL_263:
              uint64_t v27 = 0;
              goto LABEL_313;
            }
            char v156 = 0;
            unsigned int v157 = 0;
            uint64_t v27 = 0;
            if (v23 <= v22) {
              unint64_t v23 = *((void *)this + 1);
            }
            while (2)
            {
              if (v23 == v22)
              {
                uint64_t v27 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                unint64_t v158 = v22 + 1;
                char v159 = *(unsigned char *)(v24 + v22);
                *((void *)this + 1) = v158;
                v27 |= (unint64_t)(v159 & 0x7F) << v156;
                if (v159 < 0)
                {
                  v156 += 7;
                  unint64_t v22 = v158;
                  BOOL v15 = v157++ > 8;
                  if (v15) {
                    goto LABEL_263;
                  }
                  continue;
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v27 = 0;
                }
              }
              break;
            }
LABEL_313:
            *(void *)(a1 + 8) = v27;
            goto LABEL_305;
          case 2:
            *(void *)v8 |= 0x2000000000000uLL;
            unint64_t v31 = *((void *)this + 1);
            if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 208) = *(_DWORD *)(*(void *)this + v31);
            goto LABEL_304;
          case 3:
            *(_WORD *)(v8 + 8) |= 0x100u;
            unint64_t v32 = *((void *)this + 1);
            if (v32 >= *((void *)this + 2))
            {
              BOOL v35 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v33 = v32 + 1;
              int v34 = *(unsigned __int8 *)(*(void *)this + v32);
              *((void *)this + 1) = v33;
              BOOL v35 = v34 != 0;
            }
            *(unsigned char *)(a1 + 276) = v35;
            goto LABEL_305;
          case 4:
            *(_WORD *)(v8 + 8) |= 0x80u;
            unint64_t v36 = *((void *)this + 1);
            if (v36 >= *((void *)this + 2))
            {
              BOOL v39 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v37 = v36 + 1;
              int v38 = *(unsigned __int8 *)(*(void *)this + v36);
              *((void *)this + 1) = v37;
              BOOL v39 = v38 != 0;
            }
            *(unsigned char *)(a1 + 275) = v39;
            goto LABEL_305;
          case 5:
            *(_WORD *)(v8 + 8) |= 0x20u;
            unint64_t v40 = *((void *)this + 1);
            if (v40 >= *((void *)this + 2))
            {
              BOOL v43 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v41 = v40 + 1;
              int v42 = *(unsigned __int8 *)(*(void *)this + v40);
              *((void *)this + 1) = v41;
              BOOL v43 = v42 != 0;
            }
            *(unsigned char *)(a1 + 273) = v43;
            goto LABEL_305;
          case 6:
            *(_WORD *)(v8 + 8) |= 4u;
            unint64_t v44 = *((void *)this + 1);
            if (v44 >= *((void *)this + 2))
            {
              BOOL v47 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v45 = v44 + 1;
              int v46 = *(unsigned __int8 *)(*(void *)this + v44);
              *((void *)this + 1) = v45;
              BOOL v47 = v46 != 0;
            }
            *(unsigned char *)(a1 + 270) = v47;
            goto LABEL_305;
          case 7:
            *(_WORD *)(v8 + 8) |= 2u;
            unint64_t v48 = *((void *)this + 1);
            if (v48 >= *((void *)this + 2))
            {
              BOOL v51 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v49 = v48 + 1;
              int v50 = *(unsigned __int8 *)(*(void *)this + v48);
              *((void *)this + 1) = v49;
              BOOL v51 = v50 != 0;
            }
            *(unsigned char *)(a1 + 269) = v51;
            goto LABEL_305;
          case 8:
            *(void *)v8 |= 0x40000uLL;
            unint64_t v52 = *((void *)this + 1);
            unint64_t v53 = *((void *)this + 2);
            uint64_t v54 = *(void *)this;
            if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
            {
              char v55 = 0;
              unsigned int v56 = 0;
              uint64_t v57 = 0;
              do
              {
                unint64_t v58 = v52 + 1;
                *((void *)this + 1) = v52 + 1;
                char v59 = *(unsigned char *)(v54 + v52);
                v57 |= (unint64_t)(v59 & 0x7F) << v55;
                if ((v59 & 0x80) == 0) {
                  goto LABEL_317;
                }
                v55 += 7;
                unint64_t v52 = v58;
                BOOL v15 = v56++ > 8;
              }
              while (!v15);
LABEL_280:
              LODWORD(v57) = 0;
              goto LABEL_317;
            }
            char v160 = 0;
            unsigned int v161 = 0;
            uint64_t v57 = 0;
            if (v53 <= v52) {
              unint64_t v53 = *((void *)this + 1);
            }
            while (2)
            {
              if (v53 == v52)
              {
                LODWORD(v57) = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                unint64_t v162 = v52 + 1;
                char v163 = *(unsigned char *)(v54 + v52);
                *((void *)this + 1) = v162;
                v57 |= (unint64_t)(v163 & 0x7F) << v160;
                if (v163 < 0)
                {
                  v160 += 7;
                  unint64_t v52 = v162;
                  BOOL v15 = v161++ > 8;
                  if (v15) {
                    goto LABEL_280;
                  }
                  continue;
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v57) = 0;
                }
              }
              break;
            }
LABEL_317:
            *(_DWORD *)(a1 + 84) = v57;
            goto LABEL_305;
          case 9:
            *(_WORD *)(v8 + 8) |= 1u;
            unint64_t v60 = *((void *)this + 1);
            if (v60 >= *((void *)this + 2))
            {
              BOOL v63 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v61 = v60 + 1;
              int v62 = *(unsigned __int8 *)(*(void *)this + v60);
              *((void *)this + 1) = v61;
              BOOL v63 = v62 != 0;
            }
            *(unsigned char *)(a1 + 268) = v63;
            goto LABEL_305;
          case 10:
            *(_WORD *)(v8 + 8) |= 0x10u;
            unint64_t v64 = *((void *)this + 1);
            if (v64 >= *((void *)this + 2))
            {
              BOOL v67 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v65 = v64 + 1;
              int v66 = *(unsigned __int8 *)(*(void *)this + v64);
              *((void *)this + 1) = v65;
              BOOL v67 = v66 != 0;
            }
            *(unsigned char *)(a1 + 272) = v67;
            goto LABEL_305;
          case 11:
            *(void *)v8 |= 0x20000uLL;
            unint64_t v68 = *((void *)this + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v68);
            goto LABEL_304;
          case 12:
            *(void *)v8 |= 0x10000uLL;
            unint64_t v69 = *((void *)this + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v69);
            goto LABEL_304;
          case 13:
            *(void *)v8 |= 0x400000uLL;
            unint64_t v70 = *((void *)this + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v70);
            goto LABEL_304;
          case 14:
            *(void *)v8 |= 0x8000000uLL;
            unint64_t v71 = *((void *)this + 1);
            if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v71);
            goto LABEL_304;
          case 15:
            *(void *)v8 |= 0x100000000uLL;
            unint64_t v72 = *((void *)this + 1);
            if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v72);
            goto LABEL_304;
          case 16:
            *(void *)v8 |= 0x4000000000000uLL;
            unint64_t v73 = *((void *)this + 1);
            if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 212) = *(_DWORD *)(*(void *)this + v73);
            goto LABEL_304;
          case 17:
            *(void *)v8 |= 0x800000uLL;
            unint64_t v74 = *((void *)this + 1);
            if (v74 > 0xFFFFFFFFFFFFFFFBLL || v74 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v74);
            goto LABEL_304;
          case 18:
            *(void *)v8 |= 0x10000000uLL;
            unint64_t v75 = *((void *)this + 1);
            if (v75 > 0xFFFFFFFFFFFFFFFBLL || v75 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v75);
            goto LABEL_304;
          case 19:
            *(void *)v8 |= 0x200000000uLL;
            unint64_t v76 = *((void *)this + 1);
            if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(void *)this + v76);
            goto LABEL_304;
          case 20:
            *(void *)v8 |= 0x8000000000000uLL;
            unint64_t v77 = *((void *)this + 1);
            if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 216) = *(_DWORD *)(*(void *)this + v77);
            goto LABEL_304;
          case 21:
            *(void *)v8 |= 0x1000000uLL;
            unint64_t v78 = *((void *)this + 1);
            if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v78);
            goto LABEL_304;
          case 22:
            *(void *)v8 |= 0x20000000uLL;
            unint64_t v79 = *((void *)this + 1);
            if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(void *)this + v79);
            goto LABEL_304;
          case 23:
            *(void *)v8 |= 0x400000000uLL;
            unint64_t v80 = *((void *)this + 1);
            if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(void *)this + v80);
            goto LABEL_304;
          case 24:
            *(void *)v8 |= 0x10000000000000uLL;
            unint64_t v81 = *((void *)this + 1);
            if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 220) = *(_DWORD *)(*(void *)this + v81);
            goto LABEL_304;
          case 25:
            *(void *)v8 |= 0x100000000000000uLL;
            unint64_t v82 = *((void *)this + 1);
            if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 236) = *(_DWORD *)(*(void *)this + v82);
            goto LABEL_304;
          case 26:
            *(void *)v8 |= 0x80000000000000uLL;
            unint64_t v83 = *((void *)this + 1);
            if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 232) = *(_DWORD *)(*(void *)this + v83);
            goto LABEL_304;
          case 27:
            *(void *)v8 |= 0x200000000000000uLL;
            unint64_t v84 = *((void *)this + 1);
            if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 240) = *(_DWORD *)(*(void *)this + v84);
            goto LABEL_304;
          case 28:
            *(void *)v8 |= 0x40uLL;
            unint64_t v85 = *((void *)this + 1);
            if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v85);
            goto LABEL_304;
          case 29:
            *(void *)v8 |= 2uLL;
            unint64_t v86 = *((void *)this + 1);
            if (v86 > 0xFFFFFFFFFFFFFFFBLL || v86 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v86);
            goto LABEL_304;
          case 30:
            *(void *)v8 |= 0x8000uLL;
            unint64_t v87 = *((void *)this + 1);
            if (v87 > 0xFFFFFFFFFFFFFFFBLL || v87 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v87);
            goto LABEL_304;
          case 31:
            *(_WORD *)(v8 + 8) |= 0x800u;
            unint64_t v88 = *((void *)this + 1);
            if (v88 >= *((void *)this + 2))
            {
              BOOL v91 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v89 = v88 + 1;
              int v90 = *(unsigned __int8 *)(*(void *)this + v88);
              *((void *)this + 1) = v89;
              BOOL v91 = v90 != 0;
            }
            *(unsigned char *)(a1 + 279) = v91;
            goto LABEL_305;
          case 32:
            *(_WORD *)(v8 + 8) |= 8u;
            unint64_t v92 = *((void *)this + 1);
            if (v92 >= *((void *)this + 2))
            {
              BOOL v95 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v93 = v92 + 1;
              int v94 = *(unsigned __int8 *)(*(void *)this + v92);
              *((void *)this + 1) = v93;
              BOOL v95 = v94 != 0;
            }
            *(unsigned char *)(a1 + 271) = v95;
            goto LABEL_305;
          case 33:
            *(void *)v8 |= 0x80uLL;
            unint64_t v96 = *((void *)this + 1);
            if (v96 > 0xFFFFFFFFFFFFFFFBLL || v96 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v96);
            goto LABEL_304;
          case 34:
            *(void *)v8 |= 0x400uLL;
            unint64_t v97 = *((void *)this + 1);
            if (v97 > 0xFFFFFFFFFFFFFFFBLL || v97 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v97);
            goto LABEL_304;
          case 35:
            *(void *)v8 |= 0x200uLL;
            unint64_t v98 = *((void *)this + 1);
            if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v98);
            goto LABEL_304;
          case 36:
            *(void *)v8 |= 0x100uLL;
            unint64_t v99 = *((void *)this + 1);
            if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v99);
            goto LABEL_304;
          case 37:
            *(void *)v8 |= 4uLL;
            unint64_t v100 = *((void *)this + 1);
            if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v100);
            goto LABEL_304;
          case 38:
            *(void *)v8 |= 0x20uLL;
            unint64_t v101 = *((void *)this + 1);
            if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v101);
            goto LABEL_304;
          case 39:
            *(void *)v8 |= 0x10uLL;
            unint64_t v102 = *((void *)this + 1);
            if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v102);
            goto LABEL_304;
          case 40:
            *(void *)v8 |= 8uLL;
            unint64_t v103 = *((void *)this + 1);
            if (v103 > 0xFFFFFFFFFFFFFFFBLL || v103 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v103);
            goto LABEL_304;
          case 41:
            *(void *)v8 |= 0x800uLL;
            unint64_t v104 = *((void *)this + 1);
            if (v104 > 0xFFFFFFFFFFFFFFFBLL || v104 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v104);
            goto LABEL_304;
          case 42:
            *(void *)v8 |= 0x4000uLL;
            unint64_t v105 = *((void *)this + 1);
            if (v105 > 0xFFFFFFFFFFFFFFFBLL || v105 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v105);
            goto LABEL_304;
          case 43:
            *(void *)v8 |= 0x2000uLL;
            unint64_t v106 = *((void *)this + 1);
            if (v106 > 0xFFFFFFFFFFFFFFFBLL || v106 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v106);
            goto LABEL_304;
          case 44:
            *(void *)v8 |= 0x1000uLL;
            unint64_t v107 = *((void *)this + 1);
            if (v107 > 0xFFFFFFFFFFFFFFFBLL || v107 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v107);
            goto LABEL_304;
          case 45:
            *(void *)v8 |= 0x2000000uLL;
            unint64_t v108 = *((void *)this + 1);
            if (v108 > 0xFFFFFFFFFFFFFFFBLL || v108 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v108);
            goto LABEL_304;
          case 46:
            *(void *)v8 |= 0x40000000uLL;
            unint64_t v109 = *((void *)this + 1);
            if (v109 > 0xFFFFFFFFFFFFFFFBLL || v109 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v109);
            goto LABEL_304;
          case 47:
            *(void *)v8 |= 0x800000000uLL;
            unint64_t v110 = *((void *)this + 1);
            if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(void *)this + v110);
            goto LABEL_304;
          case 48:
            *(void *)v8 |= 0x20000000000000uLL;
            unint64_t v111 = *((void *)this + 1);
            if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 224) = *(_DWORD *)(*(void *)this + v111);
            goto LABEL_304;
          case 49:
            *(void *)v8 |= 0x4000000uLL;
            unint64_t v112 = *((void *)this + 1);
            if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v112);
            goto LABEL_304;
          case 50:
            *(void *)v8 |= 0x80000000uLL;
            unint64_t v113 = *((void *)this + 1);
            if (v113 > 0xFFFFFFFFFFFFFFFBLL || v113 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(void *)this + v113);
            goto LABEL_304;
          case 51:
            *(void *)v8 |= 0x1000000000uLL;
            unint64_t v114 = *((void *)this + 1);
            if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(void *)this + v114);
            goto LABEL_304;
          case 52:
            *(void *)v8 |= 0x40000000000000uLL;
            unint64_t v115 = *((void *)this + 1);
            if (v115 > 0xFFFFFFFFFFFFFFFBLL || v115 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 228) = *(_DWORD *)(*(void *)this + v115);
            goto LABEL_304;
          case 53:
            *(_WORD *)(v8 + 8) |= 0x40u;
            unint64_t v116 = *((void *)this + 1);
            if (v116 >= *((void *)this + 2))
            {
              BOOL v119 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v117 = v116 + 1;
              int v118 = *(unsigned __int8 *)(*(void *)this + v116);
              *((void *)this + 1) = v117;
              BOOL v119 = v118 != 0;
            }
            *(unsigned char *)(a1 + 274) = v119;
            goto LABEL_305;
          case 54:
            *(void *)v8 |= 0x1000000000000000uLL;
            unint64_t v120 = *((void *)this + 1);
            if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 252) = *(_DWORD *)(*(void *)this + v120);
            goto LABEL_304;
          case 55:
            *(void *)v8 |= 0x400000000000000uLL;
            unint64_t v121 = *((void *)this + 1);
            if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 244) = *(_DWORD *)(*(void *)this + v121);
            goto LABEL_304;
          case 56:
            *(_WORD *)(v8 + 8) |= 0x200u;
            unint64_t v122 = *((void *)this + 1);
            if (v122 >= *((void *)this + 2))
            {
              BOOL v125 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v123 = v122 + 1;
              int v124 = *(unsigned __int8 *)(*(void *)this + v122);
              *((void *)this + 1) = v123;
              BOOL v125 = v124 != 0;
            }
            *(unsigned char *)(a1 + 277) = v125;
            goto LABEL_305;
          case 57:
            *(void *)v8 |= 0x2000000000uLL;
            unint64_t v126 = *((void *)this + 1);
            if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(void *)this + v126);
            goto LABEL_304;
          case 58:
            *(void *)v8 |= 0x4000000000uLL;
            unint64_t v127 = *((void *)this + 1);
            if (v127 > 0xFFFFFFFFFFFFFFFBLL || v127 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(void *)this + v127);
            goto LABEL_304;
          case 59:
            *(void *)v8 |= 0x8000000000uLL;
            unint64_t v128 = *((void *)this + 1);
            if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(void *)this + v128);
            goto LABEL_304;
          case 60:
            *(void *)v8 |= 0x20000000000uLL;
            unint64_t v129 = *((void *)this + 1);
            if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(void *)this + v129);
            goto LABEL_304;
          case 61:
            *(void *)v8 |= 0x10000000000uLL;
            unint64_t v130 = *((void *)this + 1);
            if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(void *)this + v130);
            goto LABEL_304;
          case 62:
            *(void *)v8 |= 0x40000000000uLL;
            unint64_t v131 = *((void *)this + 1);
            if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 180) = *(_DWORD *)(*(void *)this + v131);
            goto LABEL_304;
          case 63:
            *(void *)v8 |= 0x80000000000uLL;
            unint64_t v132 = *((void *)this + 1);
            if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 184) = *(_DWORD *)(*(void *)this + v132);
            goto LABEL_304;
          case 64:
            *(void *)v8 |= 0x100000000000uLL;
            unint64_t v133 = *((void *)this + 1);
            if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 188) = *(_DWORD *)(*(void *)this + v133);
            goto LABEL_304;
          case 65:
            *(void *)v8 |= 0x200000000000uLL;
            unint64_t v134 = *((void *)this + 1);
            if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 192) = *(_DWORD *)(*(void *)this + v134);
            goto LABEL_304;
          case 66:
            *(void *)v8 |= 0x800000000000uLL;
            unint64_t v135 = *((void *)this + 1);
            if (v135 > 0xFFFFFFFFFFFFFFFBLL || v135 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 200) = *(_DWORD *)(*(void *)this + v135);
            goto LABEL_304;
          case 67:
            *(void *)v8 |= 0x400000000000uLL;
            unint64_t v136 = *((void *)this + 1);
            if (v136 > 0xFFFFFFFFFFFFFFFBLL || v136 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 196) = *(_DWORD *)(*(void *)this + v136);
            goto LABEL_304;
          case 68:
            *(void *)v8 |= 0x1000000000000uLL;
            unint64_t v137 = *((void *)this + 1);
            if (v137 > 0xFFFFFFFFFFFFFFFBLL || v137 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 204) = *(_DWORD *)(*(void *)this + v137);
            goto LABEL_304;
          case 69:
            *(void *)v8 |= 0x800000000000000uLL;
            unint64_t v138 = *((void *)this + 1);
            unint64_t v139 = *((void *)this + 2);
            uint64_t v140 = *(void *)this;
            if (v138 <= 0xFFFFFFFFFFFFFFF5 && v138 + 10 <= v139)
            {
              char v141 = 0;
              unsigned int v142 = 0;
              uint64_t v143 = 0;
              do
              {
                unint64_t v144 = v138 + 1;
                *((void *)this + 1) = v138 + 1;
                char v145 = *(unsigned char *)(v140 + v138);
                v143 |= (unint64_t)(v145 & 0x7F) << v141;
                if ((v145 & 0x80) == 0) {
                  goto LABEL_321;
                }
                v141 += 7;
                unint64_t v138 = v144;
                BOOL v15 = v142++ > 8;
              }
              while (!v15);
LABEL_299:
              LODWORD(v143) = 0;
              goto LABEL_321;
            }
            char v164 = 0;
            unsigned int v165 = 0;
            uint64_t v143 = 0;
            if (v139 <= v138) {
              unint64_t v139 = *((void *)this + 1);
            }
            break;
          case 70:
            *(_WORD *)(v8 + 8) |= 0x400u;
            unint64_t v146 = *((void *)this + 1);
            if (v146 >= *((void *)this + 2))
            {
              BOOL v149 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v147 = v146 + 1;
              int v148 = *(unsigned __int8 *)(*(void *)this + v146);
              *((void *)this + 1) = v147;
              BOOL v149 = v148 != 0;
            }
            *(unsigned char *)(a1 + 278) = v149;
            goto LABEL_305;
          case 71:
            *(void *)v8 |= 0x4000000000000000uLL;
            unint64_t v150 = *((void *)this + 1);
            if (v150 > 0xFFFFFFFFFFFFFFFBLL || v150 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 260) = *(_DWORD *)(*(void *)this + v150);
            goto LABEL_304;
          case 72:
            *(void *)v8 |= 0x8000000000000000;
            unint64_t v151 = *((void *)this + 1);
            if (v151 > 0xFFFFFFFFFFFFFFFBLL || v151 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 264) = *(_DWORD *)(*(void *)this + v151);
            goto LABEL_304;
          case 73:
            *(void *)v8 |= 0x2000000000000000uLL;
            unint64_t v152 = *((void *)this + 1);
            if (v152 > 0xFFFFFFFFFFFFFFFBLL || v152 + 4 > *((void *)this + 2))
            {
LABEL_248:
              *((unsigned char *)this + 24) = 1;
              goto LABEL_305;
            }
            *(_DWORD *)(a1 + 256) = *(_DWORD *)(*(void *)this + v152);
            goto LABEL_304;
          default:
            goto LABEL_255;
        }
        while (1)
        {
          if (v139 == v138)
          {
            LODWORD(v143) = 0;
            *((unsigned char *)this + 24) = 1;
            goto LABEL_321;
          }
          unint64_t v166 = v138 + 1;
          char v167 = *(unsigned char *)(v140 + v138);
          *((void *)this + 1) = v166;
          v143 |= (unint64_t)(v167 & 0x7F) << v164;
          if ((v167 & 0x80) == 0) {
            break;
          }
          v164 += 7;
          unint64_t v138 = v166;
          BOOL v15 = v165++ > 8;
          if (v15) {
            goto LABEL_299;
          }
        }
        if (*((unsigned char *)this + 24)) {
          LODWORD(v143) = 0;
        }
LABEL_321:
        *(_DWORD *)(a1 + 248) = v143;
        goto LABEL_305;
      }
      switch(v21)
      {
        case 0x186A1:
          *(void *)v8 |= 0x80000uLL;
          unint64_t v153 = *((void *)this + 1);
          if (v153 <= 0xFFFFFFFFFFFFFFFBLL && v153 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v153);
            goto LABEL_304;
          }
          break;
        case 0x186A2:
          *(void *)v8 |= 0x100000uLL;
          unint64_t v154 = *((void *)this + 1);
          if (v154 <= 0xFFFFFFFFFFFFFFFBLL && v154 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v154);
            goto LABEL_304;
          }
          break;
        case 0x186A3:
          *(void *)v8 |= 0x200000uLL;
          unint64_t v30 = *((void *)this + 1);
          if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v30);
LABEL_304:
            *((void *)this + 1) += 4;
            goto LABEL_305;
          }
          break;
        default:
LABEL_255:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          goto LABEL_305;
      }
      *((unsigned char *)this + 24) = 1;
LABEL_305:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && v4 == 0);
  }
  return v4 == 0;
}

uint64_t sub_19031D604(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = (uint64_t *)(result + 280);
  uint64_t v5 = *(void *)(result + 280);
  if (v5)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    uint64_t v5 = *v4;
    __int16 v6 = *((_WORD *)v4 + 4);
    if ((*v4 & 0x2000000000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v6 = *(_WORD *)(result + 288);
  if ((v5 & 0x2000000000000) != 0)
  {
LABEL_5:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 208));
    uint64_t v5 = *v4;
    __int16 v6 = *((_WORD *)v4 + 4);
  }
LABEL_6:
  if ((v6 & 0x100) != 0)
  {
    uint64_t result = PB::Writer::write(this);
    uint64_t v5 = *v4;
    __int16 v6 = *((_WORD *)v4 + 4);
    if ((v6 & 0x80) == 0)
    {
LABEL_8:
      if ((v6 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_84;
    }
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  uint64_t result = PB::Writer::write(this);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_85;
  }
LABEL_84:
  uint64_t result = PB::Writer::write(this);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((v6 & 4) == 0)
  {
LABEL_10:
    if ((v6 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_86;
  }
LABEL_85:
  uint64_t result = PB::Writer::write(this);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((v6 & 2) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_87;
  }
LABEL_86:
  uint64_t result = PB::Writer::write(this);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40000) == 0)
  {
LABEL_12:
    if ((v6 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_88;
  }
LABEL_87:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((v6 & 1) == 0)
  {
LABEL_13:
    if ((v6 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_89;
  }
LABEL_88:
  uint64_t result = PB::Writer::write(this);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x10) == 0)
  {
LABEL_14:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_90;
  }
LABEL_89:
  uint64_t result = PB::Writer::write(this);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_91;
  }
LABEL_90:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_92;
  }
LABEL_91:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_93;
  }
LABEL_92:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_94;
  }
LABEL_93:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 120));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x4000000000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_95;
  }
LABEL_94:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 140));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x4000000000000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_96;
  }
LABEL_95:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 212));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_97;
  }
LABEL_96:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_98;
  }
LABEL_97:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 124));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000000000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_99;
  }
LABEL_98:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 144));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x8000000000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_100;
  }
LABEL_99:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 216));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_101;
  }
LABEL_100:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_102;
  }
LABEL_101:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 128));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x10000000000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_103;
  }
LABEL_102:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 148));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10000000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x100000000000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_104;
  }
LABEL_103:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 220));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x100000000000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x80000000000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_105;
  }
LABEL_104:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 236));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x80000000000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x200000000000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_106;
  }
LABEL_105:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 232));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200000000000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40) == 0) {
      goto LABEL_32;
    }
    goto LABEL_107;
  }
LABEL_106:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 240));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40) == 0)
  {
LABEL_32:
    if ((v5 & 2) == 0) {
      goto LABEL_33;
    }
    goto LABEL_108;
  }
LABEL_107:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 2) == 0)
  {
LABEL_33:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_109;
  }
LABEL_108:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x8000) == 0)
  {
LABEL_34:
    if ((v6 & 0x800) == 0) {
      goto LABEL_35;
    }
    goto LABEL_110;
  }
LABEL_109:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x800) == 0)
  {
LABEL_35:
    if ((v6 & 8) == 0) {
      goto LABEL_36;
    }
    goto LABEL_111;
  }
LABEL_110:
  uint64_t result = PB::Writer::write(this);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((v6 & 8) == 0)
  {
LABEL_36:
    if ((v5 & 0x80) == 0) {
      goto LABEL_37;
    }
    goto LABEL_112;
  }
LABEL_111:
  uint64_t result = PB::Writer::write(this);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x80) == 0)
  {
LABEL_37:
    if ((v5 & 0x400) == 0) {
      goto LABEL_38;
    }
    goto LABEL_113;
  }
LABEL_112:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400) == 0)
  {
LABEL_38:
    if ((v5 & 0x200) == 0) {
      goto LABEL_39;
    }
    goto LABEL_114;
  }
LABEL_113:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200) == 0)
  {
LABEL_39:
    if ((v5 & 0x100) == 0) {
      goto LABEL_40;
    }
    goto LABEL_115;
  }
LABEL_114:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x100) == 0)
  {
LABEL_40:
    if ((v5 & 4) == 0) {
      goto LABEL_41;
    }
    goto LABEL_116;
  }
LABEL_115:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 4) == 0)
  {
LABEL_41:
    if ((v5 & 0x20) == 0) {
      goto LABEL_42;
    }
    goto LABEL_117;
  }
LABEL_116:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20) == 0)
  {
LABEL_42:
    if ((v5 & 0x10) == 0) {
      goto LABEL_43;
    }
    goto LABEL_118;
  }
LABEL_117:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10) == 0)
  {
LABEL_43:
    if ((v5 & 8) == 0) {
      goto LABEL_44;
    }
    goto LABEL_119;
  }
LABEL_118:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 8) == 0)
  {
LABEL_44:
    if ((v5 & 0x800) == 0) {
      goto LABEL_45;
    }
    goto LABEL_120;
  }
LABEL_119:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800) == 0)
  {
LABEL_45:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_121;
  }
LABEL_120:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x4000) == 0)
  {
LABEL_46:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_122;
  }
LABEL_121:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x2000) == 0)
  {
LABEL_47:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_123;
  }
LABEL_122:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000) == 0)
  {
LABEL_48:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_124;
  }
LABEL_123:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_49:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_125;
  }
LABEL_124:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40000000) == 0)
  {
LABEL_50:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_126;
  }
LABEL_125:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 132));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_51:
    if ((v5 & 0x20000000000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_127;
  }
LABEL_126:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 152));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000000000000) == 0)
  {
LABEL_52:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_128;
  }
LABEL_127:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 224));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_53:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_129;
  }
LABEL_128:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x80000000) == 0)
  {
LABEL_54:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_130;
  }
LABEL_129:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 136));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000000) == 0)
  {
LABEL_55:
    if ((v5 & 0x40000000000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_131;
  }
LABEL_130:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 156));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40000000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x40) == 0) {
      goto LABEL_57;
    }
    goto LABEL_132;
  }
LABEL_131:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 228));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x40) == 0)
  {
LABEL_57:
    if ((v5 & 0x1000000000000000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_133;
  }
LABEL_132:
  uint64_t result = PB::Writer::write(this);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000000000000) == 0)
  {
LABEL_58:
    if ((v5 & 0x400000000000000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_134;
  }
LABEL_133:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 252));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000000000000) == 0)
  {
LABEL_59:
    if ((v6 & 0x200) == 0) {
      goto LABEL_60;
    }
    goto LABEL_135;
  }
LABEL_134:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 244));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x200) == 0)
  {
LABEL_60:
    if ((v5 & 0x2000000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_136;
  }
LABEL_135:
  uint64_t result = PB::Writer::write(this);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x2000000000) == 0)
  {
LABEL_61:
    if ((v5 & 0x4000000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_137;
  }
LABEL_136:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 160));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_62:
    if ((v5 & 0x8000000000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_138;
  }
LABEL_137:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 164));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_63:
    if ((v5 & 0x20000000000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_139;
  }
LABEL_138:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 168));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_64:
    if ((v5 & 0x10000000000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_140;
  }
LABEL_139:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 176));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_65:
    if ((v5 & 0x40000000000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_141;
  }
LABEL_140:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 172));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40000000000) == 0)
  {
LABEL_66:
    if ((v5 & 0x80000000000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_142;
  }
LABEL_141:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 180));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_67:
    if ((v5 & 0x100000000000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_143;
  }
LABEL_142:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 184));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_68:
    if ((v5 & 0x200000000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_144;
  }
LABEL_143:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 188));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200000000000) == 0)
  {
LABEL_69:
    if ((v5 & 0x800000000000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_145;
  }
LABEL_144:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 192));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000000000) == 0)
  {
LABEL_70:
    if ((v5 & 0x400000000000) == 0) {
      goto LABEL_71;
    }
    goto LABEL_146;
  }
LABEL_145:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 200));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000000000) == 0)
  {
LABEL_71:
    if ((v5 & 0x1000000000000) == 0) {
      goto LABEL_72;
    }
    goto LABEL_147;
  }
LABEL_146:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 196));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000000000) == 0)
  {
LABEL_72:
    if ((v5 & 0x800000000000000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_148;
  }
LABEL_147:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 204));
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000000000000) == 0)
  {
LABEL_73:
    if ((v6 & 0x400) == 0) {
      goto LABEL_74;
    }
    goto LABEL_149;
  }
LABEL_148:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v5 = *v4;
  if ((v4[1] & 0x400) == 0)
  {
LABEL_74:
    if ((v5 & 0x4000000000000000) == 0) {
      goto LABEL_75;
    }
    goto LABEL_150;
  }
LABEL_149:
  uint64_t result = PB::Writer::write(this);
  uint64_t v5 = *v4;
  if ((*v4 & 0x4000000000000000) == 0)
  {
LABEL_75:
    if ((v5 & 0x8000000000000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_151;
  }
LABEL_150:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 260));
  uint64_t v5 = *v4;
  if ((*v4 & 0x8000000000000000) == 0)
  {
LABEL_76:
    if ((v5 & 0x2000000000000000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_77;
  }
LABEL_151:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 264));
  uint64_t v5 = *v4;
  if ((*v4 & 0x2000000000000000) != 0)
  {
LABEL_77:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 256));
    uint64_t v5 = *v4;
  }
LABEL_78:
  if ((v5 & 0x80000) == 0)
  {
    if ((v5 & 0x100000) == 0) {
      goto LABEL_80;
    }
LABEL_154:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92));
    if ((*v4 & 0x200000) == 0) {
      return result;
    }
    goto LABEL_155;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88));
  uint64_t v5 = *v4;
  if ((*v4 & 0x100000) != 0) {
    goto LABEL_154;
  }
LABEL_80:
  if ((v5 & 0x200000) == 0) {
    return result;
  }
LABEL_155:
  float v7 = *(float *)(v3 + 96);

  return PB::Writer::write(this, v7);
}

double sub_19031DFC0(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCE450;
  *(_DWORD *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_19031DFF4(PB::Base *this)
{
  *(void *)this = &unk_1EDFCE450;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_19031E068(PB::Base *a1)
{
  sub_19031DFF4(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19031E0A0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 144);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "combinedUnc", *(float *)(a1 + 88));
    int v5 = *(_DWORD *)(a1 + 144);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "combinedX", *(float *)(a1 + 92));
  int v5 = *(_DWORD *)(a1 + 144);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_31:
  PB::TextFormatter::format(this, "combinedY", *(float *)(a1 + 96));
  if ((*(_DWORD *)(a1 + 144) & 0x80) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "combinedZ", *(float *)(a1 + 100));
LABEL_6:
  __int16 v6 = *(float **)(a1 + 8);
  float v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(this, "inerAccelApproachMx", v8);
  }
  int v9 = *(_DWORD *)(a1 + 144);
  if ((v9 & 0x100) != 0)
  {
    PB::TextFormatter::format(this, "inerAccelCount");
    int v9 = *(_DWORD *)(a1 + 144);
    if ((v9 & 0x200) == 0)
    {
LABEL_10:
      if ((v9 & 0x400) == 0) {
        goto LABEL_11;
      }
      goto LABEL_35;
    }
  }
  else if ((v9 & 0x200) == 0)
  {
    goto LABEL_10;
  }
  PB::TextFormatter::format(this, "inertialApproachUnc", *(float *)(a1 + 108));
  int v9 = *(_DWORD *)(a1 + 144);
  if ((v9 & 0x400) == 0)
  {
LABEL_11:
    if ((v9 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "inertialApproachX", *(float *)(a1 + 112));
  int v9 = *(_DWORD *)(a1 + 144);
  if ((v9 & 0x800) == 0)
  {
LABEL_12:
    if ((v9 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "inertialApproachY", *(float *)(a1 + 116));
  int v9 = *(_DWORD *)(a1 + 144);
  if ((v9 & 0x1000) == 0)
  {
LABEL_13:
    if ((v9 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "inertialApproachZ", *(float *)(a1 + 120));
  int v9 = *(_DWORD *)(a1 + 144);
  if ((v9 & 1) == 0)
  {
LABEL_14:
    if ((v9 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "previousTimeAccel");
  int v9 = *(_DWORD *)(a1 + 144);
  if ((v9 & 2) == 0)
  {
LABEL_15:
    if ((v9 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_39:
  PB::TextFormatter::format(this, "previousTimeSag");
  if ((*(_DWORD *)(a1 + 144) & 4) != 0) {
LABEL_16:
  }
    PB::TextFormatter::format(this, "previousTimestamp");
LABEL_17:
  char v10 = *(float **)(a1 + 32);
  unsigned int v11 = *(float **)(a1 + 40);
  while (v10 != v11)
  {
    float v12 = *v10++;
    PB::TextFormatter::format(this, "sagittalApproachMx", v12);
  }
  int v13 = *(_DWORD *)(a1 + 144);
  if ((v13 & 0x2000) != 0)
  {
    PB::TextFormatter::format(this, "sagittalApproachUnc", *(float *)(a1 + 124));
    int v13 = *(_DWORD *)(a1 + 144);
    if ((v13 & 0x4000) == 0)
    {
LABEL_21:
      if ((v13 & 0x8000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_43;
    }
  }
  else if ((v13 & 0x4000) == 0)
  {
    goto LABEL_21;
  }
  PB::TextFormatter::format(this, "sagittalApproachX", *(float *)(a1 + 128));
  int v13 = *(_DWORD *)(a1 + 144);
  if ((v13 & 0x8000) == 0)
  {
LABEL_22:
    if ((v13 & 0x10000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "sagittalApproachY", *(float *)(a1 + 132));
  int v13 = *(_DWORD *)(a1 + 144);
  if ((v13 & 0x10000) == 0)
  {
LABEL_23:
    if ((v13 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "sagittalApproachZ", *(float *)(a1 + 136));
  int v13 = *(_DWORD *)(a1 + 144);
  if ((v13 & 0x20000) == 0)
  {
LABEL_24:
    if ((v13 & 8) == 0) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
LABEL_45:
  PB::TextFormatter::format(this, "sagittalCount");
  if ((*(_DWORD *)(a1 + 144) & 8) != 0) {
LABEL_25:
  }
    PB::TextFormatter::format(this, "timestamp");
LABEL_26:

  return MEMORY[0x1F4147498](this);
}

BOOL sub_19031E38C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    char v10 = (void **)(a1 + 32);
    uint64_t v11 = a1 + 48;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 144) |= 8u;
          unint64_t v25 = *((void *)this + 1);
          unint64_t v26 = *((void *)this + 2);
          uint64_t v27 = *(void *)this;
          if (v25 <= 0xFFFFFFFFFFFFFFF5 && v25 + 10 <= v26)
          {
            char v28 = 0;
            unsigned int v29 = 0;
            uint64_t v30 = 0;
            do
            {
              unint64_t v31 = v25 + 1;
              *((void *)this + 1) = v25 + 1;
              char v32 = *(unsigned char *)(v27 + v25);
              v30 |= (unint64_t)(v32 & 0x7F) << v28;
              if ((v32 & 0x80) == 0) {
                goto LABEL_223;
              }
              v28 += 7;
              unint64_t v25 = v31;
              BOOL v18 = v29++ > 8;
            }
            while (!v18);
LABEL_157:
            uint64_t v30 = 0;
            goto LABEL_223;
          }
          char v113 = 0;
          unsigned int v114 = 0;
          uint64_t v30 = 0;
          if (v26 <= v25) {
            unint64_t v26 = *((void *)this + 1);
          }
          while (2)
          {
            if (v26 == v25)
            {
              uint64_t v30 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v115 = v25 + 1;
              char v116 = *(unsigned char *)(v27 + v25);
              *((void *)this + 1) = v115;
              v30 |= (unint64_t)(v116 & 0x7F) << v113;
              if (v116 < 0)
              {
                v113 += 7;
                unint64_t v25 = v115;
                BOOL v18 = v114++ > 8;
                if (v18) {
                  goto LABEL_157;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v30 = 0;
              }
            }
            break;
          }
LABEL_223:
          *(void *)(a1 + 80) = v30;
          goto LABEL_258;
        case 2u:
          *(_DWORD *)(a1 + 144) |= 0x20u;
          unint64_t v33 = *((void *)this + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((void *)this + 2)) {
            goto LABEL_255;
          }
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v33);
          goto LABEL_257;
        case 3u:
          *(_DWORD *)(a1 + 144) |= 0x40u;
          unint64_t v34 = *((void *)this + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((void *)this + 2)) {
            goto LABEL_255;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v34);
          goto LABEL_257;
        case 4u:
          *(_DWORD *)(a1 + 144) |= 0x80u;
          unint64_t v35 = *((void *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)this + 2)) {
            goto LABEL_255;
          }
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v35);
          goto LABEL_257;
        case 5u:
          *(_DWORD *)(a1 + 144) |= 0x10u;
          unint64_t v36 = *((void *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((void *)this + 2)) {
            goto LABEL_255;
          }
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v36);
          goto LABEL_257;
        case 6u:
          *(_DWORD *)(a1 + 144) |= 0x400u;
          unint64_t v37 = *((void *)this + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((void *)this + 2)) {
            goto LABEL_255;
          }
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v37);
          goto LABEL_257;
        case 7u:
          *(_DWORD *)(a1 + 144) |= 0x800u;
          unint64_t v38 = *((void *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)this + 2)) {
            goto LABEL_255;
          }
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v38);
          goto LABEL_257;
        case 8u:
          *(_DWORD *)(a1 + 144) |= 0x1000u;
          unint64_t v39 = *((void *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)this + 2)) {
            goto LABEL_255;
          }
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v39);
          goto LABEL_257;
        case 9u:
          *(_DWORD *)(a1 + 144) |= 0x200u;
          unint64_t v40 = *((void *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)this + 2)) {
            goto LABEL_255;
          }
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v40);
          goto LABEL_257;
        case 0xAu:
          *(_DWORD *)(a1 + 144) |= 0x100u;
          unint64_t v41 = *((void *)this + 1);
          unint64_t v42 = *((void *)this + 2);
          uint64_t v43 = *(void *)this;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            char v44 = 0;
            unsigned int v45 = 0;
            uint64_t v46 = 0;
            do
            {
              unint64_t v47 = v41 + 1;
              *((void *)this + 1) = v41 + 1;
              char v48 = *(unsigned char *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0) {
                goto LABEL_226;
              }
              v44 += 7;
              unint64_t v41 = v47;
              BOOL v18 = v45++ > 8;
            }
            while (!v18);
LABEL_164:
            LODWORD(v46) = 0;
            goto LABEL_226;
          }
          char v117 = 0;
          unsigned int v118 = 0;
          uint64_t v46 = 0;
          if (v42 <= v41) {
            unint64_t v42 = *((void *)this + 1);
          }
          while (2)
          {
            if (v42 == v41)
            {
              LODWORD(v46) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v119 = v41 + 1;
              char v120 = *(unsigned char *)(v43 + v41);
              *((void *)this + 1) = v119;
              v46 |= (unint64_t)(v120 & 0x7F) << v117;
              if (v120 < 0)
              {
                v117 += 7;
                unint64_t v41 = v119;
                BOOL v18 = v118++ > 8;
                if (v18) {
                  goto LABEL_164;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v46) = 0;
              }
            }
            break;
          }
LABEL_226:
          *(_DWORD *)(a1 + 104) = v46;
          goto LABEL_258;
        case 0xBu:
          *(_DWORD *)(a1 + 144) |= 0x4000u;
          unint64_t v49 = *((void *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)this + 2)) {
            goto LABEL_255;
          }
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(void *)this + v49);
          goto LABEL_257;
        case 0xCu:
          *(_DWORD *)(a1 + 144) |= 0x8000u;
          unint64_t v50 = *((void *)this + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)this + 2)) {
            goto LABEL_255;
          }
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v50);
          goto LABEL_257;
        case 0xDu:
          *(_DWORD *)(a1 + 144) |= 0x10000u;
          unint64_t v51 = *((void *)this + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((void *)this + 2)) {
            goto LABEL_255;
          }
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(void *)this + v51);
          goto LABEL_257;
        case 0xEu:
          *(_DWORD *)(a1 + 144) |= 0x2000u;
          unint64_t v52 = *((void *)this + 1);
          if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((void *)this + 2)) {
            goto LABEL_255;
          }
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v52);
          goto LABEL_257;
        case 0xFu:
          *(_DWORD *)(a1 + 144) |= 0x20000u;
          unint64_t v53 = *((void *)this + 1);
          unint64_t v54 = *((void *)this + 2);
          uint64_t v55 = *(void *)this;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            char v56 = 0;
            unsigned int v57 = 0;
            uint64_t v58 = 0;
            do
            {
              unint64_t v59 = v53 + 1;
              *((void *)this + 1) = v53 + 1;
              char v60 = *(unsigned char *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0) {
                goto LABEL_229;
              }
              v56 += 7;
              unint64_t v53 = v59;
              BOOL v18 = v57++ > 8;
            }
            while (!v18);
LABEL_171:
            LODWORD(v58) = 0;
            goto LABEL_229;
          }
          char v121 = 0;
          unsigned int v122 = 0;
          uint64_t v58 = 0;
          if (v54 <= v53) {
            unint64_t v54 = *((void *)this + 1);
          }
          while (2)
          {
            if (v54 == v53)
            {
              LODWORD(v58) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v123 = v53 + 1;
              char v124 = *(unsigned char *)(v55 + v53);
              *((void *)this + 1) = v123;
              v58 |= (unint64_t)(v124 & 0x7F) << v121;
              if (v124 < 0)
              {
                v121 += 7;
                unint64_t v53 = v123;
                BOOL v18 = v122++ > 8;
                if (v18) {
                  goto LABEL_171;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v58) = 0;
              }
            }
            break;
          }
LABEL_229:
          *(_DWORD *)(a1 + 140) = v58;
          goto LABEL_258;
        case 0x10u:
          *(_DWORD *)(a1 + 144) |= 4u;
          unint64_t v61 = *((void *)this + 1);
          unint64_t v62 = *((void *)this + 2);
          uint64_t v63 = *(void *)this;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            char v64 = 0;
            unsigned int v65 = 0;
            uint64_t v66 = 0;
            do
            {
              unint64_t v67 = v61 + 1;
              *((void *)this + 1) = v61 + 1;
              char v68 = *(unsigned char *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0) {
                goto LABEL_232;
              }
              v64 += 7;
              unint64_t v61 = v67;
              BOOL v18 = v65++ > 8;
            }
            while (!v18);
LABEL_178:
            uint64_t v66 = 0;
            goto LABEL_232;
          }
          char v125 = 0;
          unsigned int v126 = 0;
          uint64_t v66 = 0;
          if (v62 <= v61) {
            unint64_t v62 = *((void *)this + 1);
          }
          while (2)
          {
            if (v62 == v61)
            {
              uint64_t v66 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v127 = v61 + 1;
              char v128 = *(unsigned char *)(v63 + v61);
              *((void *)this + 1) = v127;
              v66 |= (unint64_t)(v128 & 0x7F) << v125;
              if (v128 < 0)
              {
                v125 += 7;
                unint64_t v61 = v127;
                BOOL v18 = v126++ > 8;
                if (v18) {
                  goto LABEL_178;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v66 = 0;
              }
            }
            break;
          }
LABEL_232:
          *(void *)(a1 + 72) = v66;
          goto LABEL_258;
        case 0x11u:
          *(_DWORD *)(a1 + 144) |= 1u;
          unint64_t v69 = *((void *)this + 1);
          unint64_t v70 = *((void *)this + 2);
          uint64_t v71 = *(void *)this;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            char v72 = 0;
            unsigned int v73 = 0;
            uint64_t v74 = 0;
            do
            {
              unint64_t v75 = v69 + 1;
              *((void *)this + 1) = v69 + 1;
              char v76 = *(unsigned char *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0) {
                goto LABEL_235;
              }
              v72 += 7;
              unint64_t v69 = v75;
              BOOL v18 = v73++ > 8;
            }
            while (!v18);
LABEL_185:
            uint64_t v74 = 0;
            goto LABEL_235;
          }
          char v129 = 0;
          unsigned int v130 = 0;
          uint64_t v74 = 0;
          if (v70 <= v69) {
            unint64_t v70 = *((void *)this + 1);
          }
          while (2)
          {
            if (v70 == v69)
            {
              uint64_t v74 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v131 = v69 + 1;
              char v132 = *(unsigned char *)(v71 + v69);
              *((void *)this + 1) = v131;
              v74 |= (unint64_t)(v132 & 0x7F) << v129;
              if (v132 < 0)
              {
                v129 += 7;
                unint64_t v69 = v131;
                BOOL v18 = v130++ > 8;
                if (v18) {
                  goto LABEL_185;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v74 = 0;
              }
            }
            break;
          }
LABEL_235:
          *(void *)(a1 + 56) = v74;
          goto LABEL_258;
        case 0x12u:
          *(_DWORD *)(a1 + 144) |= 2u;
          unint64_t v77 = *((void *)this + 1);
          unint64_t v78 = *((void *)this + 2);
          uint64_t v79 = *(void *)this;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            char v80 = 0;
            unsigned int v81 = 0;
            uint64_t v82 = 0;
            do
            {
              unint64_t v83 = v77 + 1;
              *((void *)this + 1) = v77 + 1;
              char v84 = *(unsigned char *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0) {
                goto LABEL_238;
              }
              v80 += 7;
              unint64_t v77 = v83;
              BOOL v18 = v81++ > 8;
            }
            while (!v18);
LABEL_192:
            uint64_t v82 = 0;
            goto LABEL_238;
          }
          char v133 = 0;
          unsigned int v134 = 0;
          uint64_t v82 = 0;
          if (v78 <= v77) {
            unint64_t v78 = *((void *)this + 1);
          }
          while (2)
          {
            if (v78 == v77)
            {
              uint64_t v82 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v135 = v77 + 1;
              char v136 = *(unsigned char *)(v79 + v77);
              *((void *)this + 1) = v135;
              v82 |= (unint64_t)(v136 & 0x7F) << v133;
              if (v136 < 0)
              {
                v133 += 7;
                unint64_t v77 = v135;
                BOOL v18 = v134++ > 8;
                if (v18) {
                  goto LABEL_192;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v82 = 0;
              }
            }
            break;
          }
LABEL_238:
          *(void *)(a1 + 64) = v82;
          goto LABEL_258;
        case 0x13u:
          if (v24 != 2)
          {
            unint64_t v138 = *(char **)(a1 + 40);
            unint64_t v137 = *(void *)(a1 + 48);
            if ((unint64_t)v138 >= v137)
            {
              unsigned int v142 = (char *)*v10;
              uint64_t v143 = (v138 - (unsigned char *)*v10) >> 2;
              unint64_t v144 = v143 + 1;
              if ((unint64_t)(v143 + 1) >> 62) {
LABEL_268:
              }
                sub_1903479E8();
              uint64_t v145 = v137 - (void)v142;
              if (v145 >> 1 > v144) {
                unint64_t v144 = v145 >> 1;
              }
              if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v146 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v146 = v144;
              }
              if (v146)
              {
                unint64_t v147 = (char *)sub_190347D04(v11, v146);
                unsigned int v142 = *(char **)(a1 + 32);
                unint64_t v138 = *(char **)(a1 + 40);
              }
              else
              {
                unint64_t v147 = 0;
              }
              unint64_t v154 = &v147[4 * v143];
              *(_DWORD *)unint64_t v154 = 0;
              unint64_t v139 = v154 + 4;
              while (v138 != v142)
              {
                int v155 = *((_DWORD *)v138 - 1);
                v138 -= 4;
                *((_DWORD *)v154 - 1) = v155;
                v154 -= 4;
              }
              *(void *)(a1 + 32) = v154;
              *(void *)(a1 + 40) = v139;
              *(void *)(a1 + 48) = &v147[4 * v146];
              if (v142) {
                operator delete(v142);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v138 = 0;
              unint64_t v139 = v138 + 4;
            }
            *(void *)(a1 + 40) = v139;
            goto LABEL_253;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v85 = *((void *)this + 1);
          unint64_t v86 = *((void *)this + 2);
          while (v85 < v86 && !*((unsigned char *)this + 24))
          {
            unint64_t v88 = *(char **)(a1 + 40);
            unint64_t v87 = *(void *)(a1 + 48);
            if ((unint64_t)v88 >= v87)
            {
              int v90 = (char *)*v10;
              uint64_t v91 = (v88 - (unsigned char *)*v10) >> 2;
              unint64_t v92 = v91 + 1;
              if ((unint64_t)(v91 + 1) >> 62) {
                goto LABEL_268;
              }
              uint64_t v93 = v87 - (void)v90;
              if (v93 >> 1 > v92) {
                unint64_t v92 = v93 >> 1;
              }
              if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v94 = v92;
              }
              if (v94)
              {
                BOOL v95 = (char *)sub_190347D04(v11, v94);
                int v90 = *(char **)(a1 + 32);
                unint64_t v88 = *(char **)(a1 + 40);
              }
              else
              {
                BOOL v95 = 0;
              }
              unint64_t v96 = &v95[4 * v91];
              *(_DWORD *)unint64_t v96 = 0;
              unint64_t v89 = v96 + 4;
              while (v88 != v90)
              {
                int v97 = *((_DWORD *)v88 - 1);
                v88 -= 4;
                *((_DWORD *)v96 - 1) = v97;
                v96 -= 4;
              }
              *(void *)(a1 + 32) = v96;
              *(void *)(a1 + 40) = v89;
              *(void *)(a1 + 48) = &v95[4 * v94];
              if (v90) {
                operator delete(v90);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v88 = 0;
              unint64_t v89 = v88 + 4;
            }
            *(void *)(a1 + 40) = v89;
            unint64_t v98 = *((void *)this + 1);
            if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((void *)this + 2)) {
              goto LABEL_197;
            }
            *(v89 - 1) = *(_DWORD *)(*(void *)this + v98);
            unint64_t v86 = *((void *)this + 2);
            unint64_t v85 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v85;
          }
          goto LABEL_198;
        case 0x14u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v99 = *((void *)this + 1);
            unint64_t v100 = *((void *)this + 2);
            while (v99 < v100 && !*((unsigned char *)this + 24))
            {
              unint64_t v102 = *(char **)(a1 + 16);
              unint64_t v101 = *(void *)(a1 + 24);
              if ((unint64_t)v102 >= v101)
              {
                unint64_t v104 = (char *)*v8;
                uint64_t v105 = (v102 - (unsigned char *)*v8) >> 2;
                unint64_t v106 = v105 + 1;
                if ((unint64_t)(v105 + 1) >> 62) {
                  goto LABEL_269;
                }
                uint64_t v107 = v101 - (void)v104;
                if (v107 >> 1 > v106) {
                  unint64_t v106 = v107 >> 1;
                }
                if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v108 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v108 = v106;
                }
                if (v108)
                {
                  unint64_t v109 = (char *)sub_190347D04(v9, v108);
                  unint64_t v104 = *(char **)(a1 + 8);
                  unint64_t v102 = *(char **)(a1 + 16);
                }
                else
                {
                  unint64_t v109 = 0;
                }
                unint64_t v110 = &v109[4 * v105];
                *(_DWORD *)unint64_t v110 = 0;
                unint64_t v103 = v110 + 4;
                while (v102 != v104)
                {
                  int v111 = *((_DWORD *)v102 - 1);
                  v102 -= 4;
                  *((_DWORD *)v110 - 1) = v111;
                  v110 -= 4;
                }
                *(void *)(a1 + 8) = v110;
                *(void *)(a1 + 16) = v103;
                *(void *)(a1 + 24) = &v109[4 * v108];
                if (v104) {
                  operator delete(v104);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v102 = 0;
                unint64_t v103 = v102 + 4;
              }
              *(void *)(a1 + 16) = v103;
              unint64_t v112 = *((void *)this + 1);
              if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((void *)this + 2))
              {
LABEL_197:
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v103 - 1) = *(_DWORD *)(*(void *)this + v112);
              unint64_t v100 = *((void *)this + 2);
              unint64_t v99 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v99;
            }
LABEL_198:
            PB::Reader::recallMark();
          }
          else
          {
            char v141 = *(char **)(a1 + 16);
            unint64_t v140 = *(void *)(a1 + 24);
            if ((unint64_t)v141 >= v140)
            {
              int v148 = (char *)*v8;
              uint64_t v149 = (v141 - (unsigned char *)*v8) >> 2;
              unint64_t v150 = v149 + 1;
              if ((unint64_t)(v149 + 1) >> 62) {
LABEL_269:
              }
                sub_1903479E8();
              uint64_t v151 = v140 - (void)v148;
              if (v151 >> 1 > v150) {
                unint64_t v150 = v151 >> 1;
              }
              if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v152 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v152 = v150;
              }
              if (v152)
              {
                unint64_t v153 = (char *)sub_190347D04(v9, v152);
                int v148 = *(char **)(a1 + 8);
                char v141 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v153 = 0;
              }
              char v156 = &v153[4 * v149];
              *(_DWORD *)char v156 = 0;
              unint64_t v139 = v156 + 4;
              while (v141 != v148)
              {
                int v157 = *((_DWORD *)v141 - 1);
                v141 -= 4;
                *((_DWORD *)v156 - 1) = v157;
                v156 -= 4;
              }
              *(void *)(a1 + 8) = v156;
              *(void *)(a1 + 16) = v139;
              *(void *)(a1 + 24) = &v153[4 * v152];
              if (v148) {
                operator delete(v148);
              }
            }
            else
            {
              *(_DWORD *)char v141 = 0;
              unint64_t v139 = v141 + 4;
            }
            *(void *)(a1 + 16) = v139;
LABEL_253:
            unint64_t v158 = *((void *)this + 1);
            if (v158 <= 0xFFFFFFFFFFFFFFFBLL && v158 + 4 <= *((void *)this + 2))
            {
              *(v139 - 1) = *(_DWORD *)(*(void *)this + v158);
LABEL_257:
              *((void *)this + 1) += 4;
            }
            else
            {
LABEL_255:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_258:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_258;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19031F124(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 144);
  if ((v4 & 8) != 0)
  {
    double result = PB::Writer::writeVarInt(this);
    int v4 = *(_DWORD *)(v3 + 144);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  double result = PB::Writer::write(this, *(float *)(v3 + 92));
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
LABEL_29:
  double result = PB::Writer::write(this, *(float *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }
LABEL_30:
  double result = PB::Writer::write(this, *(float *)(v3 + 100));
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
LABEL_31:
  double result = PB::Writer::write(this, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_32:
  double result = PB::Writer::write(this, *(float *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_33:
  double result = PB::Writer::write(this, *(float *)(v3 + 116));
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  double result = PB::Writer::write(this, *(float *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  double result = PB::Writer::write(this, *(float *)(v3 + 108));
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  double result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  double result = PB::Writer::write(this, *(float *)(v3 + 128));
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x8000) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  double result = PB::Writer::write(this, *(float *)(v3 + 132));
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x10000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  double result = PB::Writer::write(this, *(float *)(v3 + 136));
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  double result = PB::Writer::write(this, *(float *)(v3 + 124));
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  double result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 4) == 0)
  {
LABEL_17:
    if ((v4 & 1) == 0) {
      goto LABEL_18;
    }
LABEL_43:
    double result = PB::Writer::writeVarInt(this);
    if ((*(_DWORD *)(v3 + 144) & 2) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_42:
  double result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 144);
  if (v4) {
    goto LABEL_43;
  }
LABEL_18:
  if ((v4 & 2) != 0) {
LABEL_19:
  }
    double result = PB::Writer::writeVarInt(this);
LABEL_20:
  int v5 = *(float **)(v3 + 32);
  __int16 v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    float v7 = *v5++;
    double result = PB::Writer::write(this, v7);
  }
  uint64_t v9 = *(float **)(v3 + 8);
  float v8 = *(float **)(v3 + 16);
  while (v9 != v8)
  {
    float v10 = *v9++;
    double result = PB::Writer::write(this, v10);
  }
  return result;
}

uint64_t sub_19031F388(uint64_t result)
{
  *(void *)double result = &unk_1EDFCBEB0;
  *(_DWORD *)(result + 132) = 0;
  return result;
}

void sub_19031F3B0(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19031F3E8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "configSuddenTransitionDurationThreshold", *(float *)(a1 + 48));
    int v5 = *(_DWORD *)(a1 + 132);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_36;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "configTransitionEndSpeedThreshold", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "configTransitionStartSpeedThreshold", *(float *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "deltaTriggerTime");
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "gpsSpeedMetersPerSecond", *(float *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "gpsSpeedMilesPerHour", *(float *)(a1 + 68));
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "gpsTimestamp");
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "highSpeedMetersPerSecondThreshold", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "isGPSDetected");
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "isGPSDetectedDebug");
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "isSuddenTransitionDetected");
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "isTransitionDetected");
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "lastDetectedTransitionSpeedEnd", *(float *)(a1 + 76));
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 2) == 0) {
      goto LABEL_16;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "lastDetectedTransitionSpeedStart", *(float *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 2) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "lastDetectedTransitionTimeEnd");
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 4) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "lastDetectedTransitionTimeStart");
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "loggedAtEpoch");
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "lowSpeedMetersPerSecondThresold", *(float *)(a1 + 84));
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x8000) == 0)
  {
LABEL_20:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "state");
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x10000) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "streamEndSpeed", *(float *)(a1 + 92));
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v5 & 8) == 0) {
      goto LABEL_23;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "streamStartSpeed", *(float *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 8) == 0)
  {
LABEL_23:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "timestamp");
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x40000) == 0)
  {
LABEL_24:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "transitionBaseDuration", *(float *)(a1 + 100));
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x80000) == 0)
  {
LABEL_25:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "transitionDuration", *(float *)(a1 + 104));
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x100000) == 0)
  {
LABEL_26:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "transitionEndSpeed", *(float *)(a1 + 108));
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x200000) == 0)
  {
LABEL_27:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "transitionEpsilonDuration", *(float *)(a1 + 112));
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x400000) == 0)
  {
LABEL_28:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "transitionSpeedStart", *(float *)(a1 + 116));
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x800000) == 0)
  {
LABEL_29:
    if ((v5 & 0x10) == 0) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
LABEL_61:
  PB::TextFormatter::format(this, "transitionStartSpeed", *(float *)(a1 + 120));
  if ((*(_DWORD *)(a1 + 132) & 0x10) != 0) {
LABEL_30:
  }
    PB::TextFormatter::format(this, "transitionTimeStart");
LABEL_31:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19031F7CC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((int)(v11 >> 3) > 200)
      {
        switch((int)v20)
        {
          case 201:
            *(_DWORD *)(a1 + 132) |= 8u;
            unint64_t v23 = *((void *)this + 1);
            unint64_t v2 = *((void *)this + 2);
            uint64_t v24 = *(void *)this;
            if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
            {
              char v74 = 0;
              unsigned int v75 = 0;
              uint64_t v27 = 0;
              if (v2 <= v23) {
                unint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v23)
                {
                  uint64_t v27 = 0;
                  *((unsigned char *)this + 24) = 1;
                  goto LABEL_208;
                }
                unint64_t v76 = v23++;
                char v77 = *(unsigned char *)(v24 + v76);
                *((void *)this + 1) = v23;
                v27 |= (unint64_t)(v77 & 0x7F) << v74;
                if ((v77 & 0x80) == 0) {
                  break;
                }
                v74 += 7;
                BOOL v14 = v75++ > 8;
                if (v14)
                {
                  uint64_t v27 = 0;
LABEL_207:
                  unint64_t v2 = v76 + 1;
                  goto LABEL_208;
                }
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v27 = 0;
              }
              goto LABEL_207;
            }
            char v25 = 0;
            unsigned int v26 = 0;
            uint64_t v27 = 0;
            do
            {
              unint64_t v2 = v23 + 1;
              *((void *)this + 1) = v23 + 1;
              char v28 = *(unsigned char *)(v24 + v23);
              v27 |= (unint64_t)(v28 & 0x7F) << v25;
              if ((v28 & 0x80) == 0) {
                goto LABEL_208;
              }
              v25 += 7;
              unint64_t v23 = v2;
              BOOL v14 = v26++ > 8;
            }
            while (!v14);
            uint64_t v27 = 0;
LABEL_208:
            *(void *)(a1 + 32) = v27;
            break;
          case 202:
            *(_DWORD *)(a1 + 132) |= 0x1000000u;
            unint64_t v2 = *((void *)this + 1);
            if (v2 >= *((void *)this + 2))
            {
              BOOL v44 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              int v43 = *(unsigned __int8 *)(*(void *)this + v2++);
              *((void *)this + 1) = v2;
              BOOL v44 = v43 != 0;
            }
            *(unsigned char *)(a1 + 124) = v44;
            break;
          case 203:
            *(_DWORD *)(a1 + 132) |= 0x8000u;
            unint64_t v45 = *((void *)this + 1);
            unint64_t v2 = *((void *)this + 2);
            uint64_t v46 = *(void *)this;
            if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
            {
              char v86 = 0;
              unsigned int v87 = 0;
              uint64_t v49 = 0;
              if (v2 <= v45) {
                unint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v45)
                {
                  LODWORD(v49) = 0;
                  *((unsigned char *)this + 24) = 1;
                  goto LABEL_223;
                }
                unint64_t v88 = v45++;
                char v89 = *(unsigned char *)(v46 + v88);
                *((void *)this + 1) = v45;
                v49 |= (unint64_t)(v89 & 0x7F) << v86;
                if ((v89 & 0x80) == 0) {
                  break;
                }
                v86 += 7;
                BOOL v14 = v87++ > 8;
                if (v14)
                {
                  LODWORD(v49) = 0;
LABEL_222:
                  unint64_t v2 = v88 + 1;
                  goto LABEL_223;
                }
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v49) = 0;
              }
              goto LABEL_222;
            }
            char v47 = 0;
            unsigned int v48 = 0;
            uint64_t v49 = 0;
            do
            {
              unint64_t v2 = v45 + 1;
              *((void *)this + 1) = v45 + 1;
              char v50 = *(unsigned char *)(v46 + v45);
              v49 |= (unint64_t)(v50 & 0x7F) << v47;
              if ((v50 & 0x80) == 0) {
                goto LABEL_223;
              }
              v47 += 7;
              unint64_t v45 = v2;
              BOOL v14 = v48++ > 8;
            }
            while (!v14);
            LODWORD(v49) = 0;
LABEL_223:
            *(_DWORD *)(a1 + 88) = v49;
            break;
          case 204:
            *(_DWORD *)(a1 + 132) |= 0x10u;
            unint64_t v51 = *((void *)this + 1);
            unint64_t v2 = *((void *)this + 2);
            uint64_t v52 = *(void *)this;
            if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
            {
              char v90 = 0;
              unsigned int v91 = 0;
              uint64_t v55 = 0;
              if (v2 <= v51) {
                unint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v51)
                {
                  uint64_t v55 = 0;
                  *((unsigned char *)this + 24) = 1;
                  goto LABEL_228;
                }
                unint64_t v92 = v51++;
                char v93 = *(unsigned char *)(v52 + v92);
                *((void *)this + 1) = v51;
                v55 |= (unint64_t)(v93 & 0x7F) << v90;
                if ((v93 & 0x80) == 0) {
                  break;
                }
                v90 += 7;
                BOOL v14 = v91++ > 8;
                if (v14)
                {
                  uint64_t v55 = 0;
LABEL_227:
                  unint64_t v2 = v92 + 1;
                  goto LABEL_228;
                }
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v55 = 0;
              }
              goto LABEL_227;
            }
            char v53 = 0;
            unsigned int v54 = 0;
            uint64_t v55 = 0;
            do
            {
              unint64_t v2 = v51 + 1;
              *((void *)this + 1) = v51 + 1;
              char v56 = *(unsigned char *)(v52 + v51);
              v55 |= (unint64_t)(v56 & 0x7F) << v53;
              if ((v56 & 0x80) == 0) {
                goto LABEL_228;
              }
              v53 += 7;
              unint64_t v51 = v2;
              BOOL v14 = v54++ > 8;
            }
            while (!v14);
            uint64_t v55 = 0;
LABEL_228:
            *(void *)(a1 + 40) = v55;
            break;
          case 205:
            *(_DWORD *)(a1 + 132) |= 0x400000u;
            unint64_t v2 = *((void *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
              goto LABEL_137;
            }
            *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v2);
            goto LABEL_198;
          case 206:
            *(_DWORD *)(a1 + 132) |= 4u;
            unint64_t v57 = *((void *)this + 1);
            unint64_t v2 = *((void *)this + 2);
            uint64_t v58 = *(void *)this;
            if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
            {
              char v94 = 0;
              unsigned int v95 = 0;
              uint64_t v61 = 0;
              if (v2 <= v57) {
                unint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v57)
                {
                  uint64_t v61 = 0;
                  *((unsigned char *)this + 24) = 1;
                  goto LABEL_233;
                }
                unint64_t v96 = v57++;
                char v97 = *(unsigned char *)(v58 + v96);
                *((void *)this + 1) = v57;
                v61 |= (unint64_t)(v97 & 0x7F) << v94;
                if ((v97 & 0x80) == 0) {
                  break;
                }
                v94 += 7;
                BOOL v14 = v95++ > 8;
                if (v14)
                {
                  uint64_t v61 = 0;
LABEL_232:
                  unint64_t v2 = v96 + 1;
                  goto LABEL_233;
                }
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v61 = 0;
              }
              goto LABEL_232;
            }
            char v59 = 0;
            unsigned int v60 = 0;
            uint64_t v61 = 0;
            do
            {
              unint64_t v2 = v57 + 1;
              *((void *)this + 1) = v57 + 1;
              char v62 = *(unsigned char *)(v58 + v57);
              v61 |= (unint64_t)(v62 & 0x7F) << v59;
              if ((v62 & 0x80) == 0) {
                goto LABEL_233;
              }
              v59 += 7;
              unint64_t v57 = v2;
              BOOL v14 = v60++ > 8;
            }
            while (!v14);
            uint64_t v61 = 0;
LABEL_233:
            *(void *)(a1 + 24) = v61;
            break;
          case 207:
            *(_DWORD *)(a1 + 132) |= 0x2000u;
            unint64_t v2 = *((void *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
              goto LABEL_137;
            }
            *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
            goto LABEL_198;
          case 208:
            *(_DWORD *)(a1 + 132) |= 2u;
            unint64_t v63 = *((void *)this + 1);
            unint64_t v2 = *((void *)this + 2);
            uint64_t v64 = *(void *)this;
            if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
            {
              char v98 = 0;
              unsigned int v99 = 0;
              uint64_t v67 = 0;
              if (v2 <= v63) {
                unint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v63)
                {
                  uint64_t v67 = 0;
                  *((unsigned char *)this + 24) = 1;
                  goto LABEL_238;
                }
                unint64_t v100 = v63++;
                char v101 = *(unsigned char *)(v64 + v100);
                *((void *)this + 1) = v63;
                v67 |= (unint64_t)(v101 & 0x7F) << v98;
                if ((v101 & 0x80) == 0) {
                  break;
                }
                v98 += 7;
                BOOL v14 = v99++ > 8;
                if (v14)
                {
                  uint64_t v67 = 0;
LABEL_237:
                  unint64_t v2 = v100 + 1;
                  goto LABEL_238;
                }
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v67 = 0;
              }
              goto LABEL_237;
            }
            char v65 = 0;
            unsigned int v66 = 0;
            uint64_t v67 = 0;
            do
            {
              unint64_t v2 = v63 + 1;
              *((void *)this + 1) = v63 + 1;
              char v68 = *(unsigned char *)(v64 + v63);
              v67 |= (unint64_t)(v68 & 0x7F) << v65;
              if ((v68 & 0x80) == 0) {
                goto LABEL_238;
              }
              v65 += 7;
              unint64_t v63 = v2;
              BOOL v14 = v66++ > 8;
            }
            while (!v14);
            uint64_t v67 = 0;
LABEL_238:
            *(void *)(a1 + 16) = v67;
            break;
          case 209:
            *(_DWORD *)(a1 + 132) |= 0x1000u;
            unint64_t v2 = *((void *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2))
            {
LABEL_137:
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
LABEL_198:
              unint64_t v2 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v2;
            }
            break;
          default:
            switch((int)v20)
            {
              case 301:
                *(_DWORD *)(a1 + 132) |= 1u;
                unint64_t v29 = *((void *)this + 1);
                unint64_t v2 = *((void *)this + 2);
                uint64_t v30 = *(void *)this;
                if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
                {
                  char v78 = 0;
                  unsigned int v79 = 0;
                  uint64_t v33 = 0;
                  if (v2 <= v29) {
                    unint64_t v2 = *((void *)this + 1);
                  }
                  while (1)
                  {
                    if (v2 == v29)
                    {
                      uint64_t v33 = 0;
                      *((unsigned char *)this + 24) = 1;
                      goto LABEL_213;
                    }
                    unint64_t v80 = v29++;
                    char v81 = *(unsigned char *)(v30 + v80);
                    *((void *)this + 1) = v29;
                    v33 |= (unint64_t)(v81 & 0x7F) << v78;
                    if ((v81 & 0x80) == 0) {
                      break;
                    }
                    v78 += 7;
                    BOOL v14 = v79++ > 8;
                    if (v14)
                    {
                      uint64_t v33 = 0;
LABEL_212:
                      unint64_t v2 = v80 + 1;
                      goto LABEL_213;
                    }
                  }
                  if (*((unsigned char *)this + 24)) {
                    uint64_t v33 = 0;
                  }
                  goto LABEL_212;
                }
                char v31 = 0;
                unsigned int v32 = 0;
                uint64_t v33 = 0;
                do
                {
                  unint64_t v2 = v29 + 1;
                  *((void *)this + 1) = v29 + 1;
                  char v34 = *(unsigned char *)(v30 + v29);
                  v33 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0) {
                    goto LABEL_213;
                  }
                  v31 += 7;
                  unint64_t v29 = v2;
                  BOOL v14 = v32++ > 8;
                }
                while (!v14);
                uint64_t v33 = 0;
LABEL_213:
                *(void *)(a1 + 8) = v33;
                break;
              case 302:
                *(_DWORD *)(a1 + 132) |= 0x200u;
                unint64_t v2 = *((void *)this + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                  goto LABEL_137;
                }
                *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
                goto LABEL_198;
              case 303:
                *(_DWORD *)(a1 + 132) |= 0x400u;
                unint64_t v2 = *((void *)this + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                  goto LABEL_137;
                }
                *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
                goto LABEL_198;
              case 304:
                *(_DWORD *)(a1 + 132) |= 0x10000000u;
                unint64_t v2 = *((void *)this + 1);
                if (v2 >= *((void *)this + 2))
                {
                  BOOL v70 = 0;
                  *((unsigned char *)this + 24) = 1;
                }
                else
                {
                  int v69 = *(unsigned __int8 *)(*(void *)this + v2++);
                  *((void *)this + 1) = v2;
                  BOOL v70 = v69 != 0;
                }
                *(unsigned char *)(a1 + 128) = v70;
                goto LABEL_199;
              case 305:
                *(_DWORD *)(a1 + 132) |= 0x2000000u;
                unint64_t v2 = *((void *)this + 1);
                if (v2 >= *((void *)this + 2))
                {
                  BOOL v72 = 0;
                  *((unsigned char *)this + 24) = 1;
                }
                else
                {
                  int v71 = *(unsigned __int8 *)(*(void *)this + v2++);
                  *((void *)this + 1) = v2;
                  BOOL v72 = v71 != 0;
                }
                *(unsigned char *)(a1 + 125) = v72;
                goto LABEL_199;
              default:
LABEL_127:
                uint64_t result = PB::Reader::skip(this);
                if (!result) {
                  return result;
                }
                unint64_t v2 = *((void *)this + 1);
                goto LABEL_199;
            }
            break;
        }
      }
      else
      {
        switch((int)v20)
        {
          case 1:
            *(_DWORD *)(a1 + 132) |= 0x4000000u;
            unint64_t v2 = *((void *)this + 1);
            if (v2 >= *((void *)this + 2))
            {
              BOOL v22 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              int v21 = *(unsigned __int8 *)(*(void *)this + v2++);
              *((void *)this + 1) = v2;
              BOOL v22 = v21 != 0;
            }
            *(unsigned char *)(a1 + 126) = v22;
            break;
          case 2:
            *(_DWORD *)(a1 + 132) |= 0x8000000u;
            unint64_t v2 = *((void *)this + 1);
            if (v2 >= *((void *)this + 2))
            {
              BOOL v36 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              int v35 = *(unsigned __int8 *)(*(void *)this + v2++);
              *((void *)this + 1) = v2;
              BOOL v36 = v35 != 0;
            }
            *(unsigned char *)(a1 + 127) = v36;
            break;
          case 3:
            *(_DWORD *)(a1 + 132) |= 0x80000u;
            unint64_t v2 = *((void *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
              goto LABEL_137;
            }
            *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
            goto LABEL_198;
          case 4:
            *(_DWORD *)(a1 + 132) |= 0x800000u;
            unint64_t v2 = *((void *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
              goto LABEL_137;
            }
            *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v2);
            goto LABEL_198;
          case 5:
            *(_DWORD *)(a1 + 132) |= 0x100000u;
            unint64_t v2 = *((void *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
              goto LABEL_137;
            }
            *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v2);
            goto LABEL_198;
          case 6:
            *(_DWORD *)(a1 + 132) |= 0x20000u;
            unint64_t v2 = *((void *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
              goto LABEL_137;
            }
            *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
            goto LABEL_198;
          case 7:
            *(_DWORD *)(a1 + 132) |= 0x10000u;
            unint64_t v2 = *((void *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
              goto LABEL_137;
            }
            *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
            goto LABEL_198;
          case 8:
            *(_DWORD *)(a1 + 132) |= 0x100u;
            unint64_t v37 = *((void *)this + 1);
            unint64_t v2 = *((void *)this + 2);
            uint64_t v38 = *(void *)this;
            if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
            {
              char v82 = 0;
              unsigned int v83 = 0;
              uint64_t v41 = 0;
              if (v2 <= v37) {
                unint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v37)
                {
                  LODWORD(v41) = 0;
                  *((unsigned char *)this + 24) = 1;
                  goto LABEL_218;
                }
                unint64_t v84 = v37++;
                char v85 = *(unsigned char *)(v38 + v84);
                *((void *)this + 1) = v37;
                v41 |= (unint64_t)(v85 & 0x7F) << v82;
                if ((v85 & 0x80) == 0) {
                  break;
                }
                v82 += 7;
                BOOL v14 = v83++ > 8;
                if (v14)
                {
                  LODWORD(v41) = 0;
LABEL_217:
                  unint64_t v2 = v84 + 1;
                  goto LABEL_218;
                }
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v41) = 0;
              }
              goto LABEL_217;
            }
            char v39 = 0;
            unsigned int v40 = 0;
            uint64_t v41 = 0;
            do
            {
              unint64_t v2 = v37 + 1;
              *((void *)this + 1) = v37 + 1;
              char v42 = *(unsigned char *)(v38 + v37);
              v41 |= (unint64_t)(v42 & 0x7F) << v39;
              if ((v42 & 0x80) == 0) {
                goto LABEL_218;
              }
              v39 += 7;
              unint64_t v37 = v2;
              BOOL v14 = v40++ > 8;
            }
            while (!v14);
            LODWORD(v41) = 0;
LABEL_218:
            *(_DWORD *)(a1 + 60) = v41;
            break;
          case 9:
            *(_DWORD *)(a1 + 132) |= 0x80u;
            unint64_t v2 = *((void *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
              goto LABEL_137;
            }
            *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
            goto LABEL_198;
          case 10:
            *(_DWORD *)(a1 + 132) |= 0x40u;
            unint64_t v2 = *((void *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
              goto LABEL_137;
            }
            *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
            goto LABEL_198;
          case 11:
            *(_DWORD *)(a1 + 132) |= 0x20u;
            unint64_t v2 = *((void *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
              goto LABEL_137;
            }
            *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
            goto LABEL_198;
          default:
            switch((int)v20)
            {
              case 'e':
                *(_DWORD *)(a1 + 132) |= 0x800u;
                unint64_t v2 = *((void *)this + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                  goto LABEL_137;
                }
                *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
                break;
              case 'f':
                *(_DWORD *)(a1 + 132) |= 0x4000u;
                unint64_t v2 = *((void *)this + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                  goto LABEL_137;
                }
                *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
                break;
              case 'g':
                *(_DWORD *)(a1 + 132) |= 0x200000u;
                unint64_t v2 = *((void *)this + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                  goto LABEL_137;
                }
                *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v2);
                break;
              case 'h':
                *(_DWORD *)(a1 + 132) |= 0x40000u;
                unint64_t v2 = *((void *)this + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                  goto LABEL_137;
                }
                *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v2);
                break;
              default:
                goto LABEL_127;
            }
            goto LABEL_198;
        }
      }
LABEL_199:
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}